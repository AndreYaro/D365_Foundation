<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVATNumValidateCH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>TaxVATNumValidateCH</c> is used for validation of Tax Exempt Number for Switzerland.
/// </summary>
class TaxVATNumValidateCH extends TaxVATNumValidate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isNumeric</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Method checks if part of VAT Num is numeric and its length.
    /// </summary>
    /// <param name="_vatNum">
    ///  String containing number to be checked.
    /// </param>
    /// <param name="_strLen">
    ///  Required length of string(if _fromLen parameter is omitted) or minimum length of string.
    /// </param>
    /// <param name="_fromLen">
    ///  Maximum length of string.
    /// </param>
    /// <returns>
    ///  True if check succeed, otherwise false.
    /// </returns>
    /// <remarks>
    ///  The only difference from method on parent class is error text shown.
    /// </remarks>
    public boolean isNumeric(VATNum _vatNum,
                      int _strLen,
                      int _fromLen = 0)
    {
        boolean ok = true;
        ;

        ok = (strlen(_vatNum) == strlen(strkeep(_vatNum,'1234567890')));

        if (! ok)
        {
            warning("@SYS81620");
        }
        else
        {
            ok = this.isLengthOk(_vatNum, _strLen, _fromLen);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheckDigit</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates check digit of VAT number.
    /// </summary>
    /// <param name="_digits">
    ///  String with digits.
    /// </param>
    /// <returns>
    ///  True if check succeed, otherwise false.
    /// </returns>
    /// <remarks>
    ///  Check value calculated using weights, and result is validated modulo 11.
    /// </remarks>
    private boolean validateCheckDigit(str 9 _digits)
    {
        boolean ret = true;
        int     i, checkValue;
        container   weight = [5,4,3,2,7,6,5,4,1];

        for (i = 1; i <= 9; i++)
        {
            checkValue += str2int(subStr(_digits, i, 1)) * conPeek(weight, i);
        }

        if (checkValue mod 11 != 0)
        {
            ret = checkFailed("@SYS84772");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDigits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that incoming string value is numeric, has length 9 and validates check digit.
    /// </summary>
    /// <param name="_digits">
    ///  String to be checked.
    /// </param>
    /// <returns>
    ///  True if validation succeed, otherwise false.
    /// </returns>
    private boolean validateDigits(str 9 _digits)
    {
        boolean ret;

        ret = this.isNumeric(_digits, 9);

        ret = ret && this.validateCheckDigit(_digits);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validation of VATNum entered according to rules defined for Switzerland.
    /// </summary>
    /// <param name="_vatNum">
    /// VATNumber to be checked
    /// </param>
    /// <param name="_countryRegionId">
    /// Id of country; Optional.
    /// </param>
    /// <returns>
    /// True if validation succeed, otherwise false.
    /// </returns>
    public boolean validateVATNum(VATNum _vatNum, LogisticsAddressCountryRegionId _countryRegionId = '')
    {
        #define.ADM('ADM')
        #define.E('E')

        boolean ret = true;
        str     vatNumAlpha = strAlpha(_vatNum);

        // In rare cases VATNum may start with ADM
        if (strStartsWith(vatNumAlpha, #ADM))
        {
            ret = this.validateDigits(subStr(vatNumAlpha, 4, 9));
        }
        //E is the remainder of 'CHE' where CH was removed as TaxCode
        else if (strStartsWith(vatNumAlpha, #E))
        {
            ret = this.validateDigits(subStr(vatNumAlpha, 2, 9));
        }
        else
        {
            //In case when EDT length was adjusted and whole 'CHE' prefix was removed
            ret = this.validateDigits(subStr(vatNumAlpha, 1, 9));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>