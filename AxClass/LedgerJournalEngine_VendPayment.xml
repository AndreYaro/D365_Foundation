<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_VendPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEngine_VendPayment</c> class supports vendor payment journals.
/// </summary>
/// <remarks>
/// This class is an extension of the <c>LedgerJournalEngine</c> class.
/// </remarks>
final class LedgerJournalEngine_VendPayment extends LedgerJournalEngine_Payment
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountModified</Name>
				<Source><![CDATA[
    public DebCredProposal accountModified(LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTrans_Project = null,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
        Tax1099BoxDetail _tax1099Detail = null,
        LedgerJournalTrans_RAsset _ledgerJournalTrans_RAsset = null,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null)
    {
        DebCredProposal debCredProposal = super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_Asset
            , _tax1099Detail
            // <GEERU>
            , _ledgerJournalTrans_RAsset, _ledgerJournalTrans_RDeferrals
            );
            // </GEERU>

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            debCredProposal = DebCredProposal::Debit;
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                && VendTable::find(_ledgerJournalTrans.parmAccount()).vatTaxAgent_RU
                && (! _ledgerJournalTrans.RecId ||
                   (! (select firstonly ledgerJournalTrans
                          where ledgerJournalTrans.vatPaymRefRecId_RU == _ledgerJournalTrans.RecId).RecId)))
            {
                _ledgerJournalTrans.Prepayment = NoYes::Yes;
                _ledgerJournalTrans.vatOperationCode_RU = VendTable::find(_ledgerJournalTrans.parmAccount()).vatOperationCode_RU;
            }
            // </GEERU>
        }

        if (ledgerJournalTrans_ds)
        {
            ledgerJournalTrans_ds.refresh();
        }

        return debCredProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNumLookup</Name>
				<Source><![CDATA[
    public boolean accountNumLookup(
        FormControl _formControl,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalACType _offsetAccountType = _ledgerJournalTrans.OffsetAccountType,
        LedgerJournalAC _offsetAccount = _ledgerJournalTrans.parmOffsetAccount(),
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
        LedgerJournalTrans_RAsset _ledgerJournalTrans_RAsset = null)
    {
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        boolean accountNumLookeUp;

        if (countryRegion_RU &&
            _ledgerJournalTrans.BankTransType &&
            _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend &&
            BankTransType::find(_ledgerJournalTrans.BankTransType).BankAdvancedTransType_RU != BankAdvancedTransType_RU::None)
        {
            VendTable::lookupAccountNumCurrencyDeal_RU(_formControl,
                                                       _ledgerJournalTrans.amount(),
                                                       _offsetAccountType,
                                                       _offsetAccount,
                                                       BankTransType::find(_ledgerJournalTrans.BankTransType).BankAdvancedTransType_RU);

            accountNumLookeUp = true;
        }
        else
        {
            accountNumLookeUp = super(_formControl,
                                      _ledgerJournalTrans,
                                      _offsetAccountType,
                                      _offsetAccount,
                                      _ledgerJournalTrans_Asset,
                                      _ledgerJournalTrans_RAsset);
        }

        return accountNumLookeUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurDebitModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts a <c>LedgerJournalTrans</c> table record and optionally <c>LedgerJournalTrans_Project</c>
    /// fields in response to a change in the <c>AmountCurDebit</c> value.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record being modified.
    /// </param>
    /// <param name="_ledgerJournalTransProj">
    /// The <c>LedgerJournalTrans_Project</c> table record being modified; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_RCash">
    /// The optional <c>LedgerJournalTrans_RCash</c> table record being modified.
    /// </param>
    public void amountCurDebitModified(LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTransProj = null,
        LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        super(_ledgerJournalTrans, _ledgerJournalTransProj, _ledgerJournalTrans_RCash);

        this.updateVendAccount_RU(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankTransTypeModified_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when <c>BankTransType</c> field modified.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Source record of <c>LedgerJournalTrans</c> table.
    /// </param>
    public void bankTransTypeModified_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        BankTransType bankTransType;

        if (countryRegion_RU)
        {
            bankTransType = BankTransType::find(_ledgerJournalTrans.BankTransType);

            if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            {
                _ledgerJournalTrans.PostingProfile = bankTransType.PostingProfile_RU ? bankTransType.PostingProfile_RU : _ledgerJournalTrans.PostingProfile;
            }

            this.clearCurrencyConvertFields(_ledgerJournalTrans);

            if (_ledgerJournalTrans.BankTransType && bankTransType.BankAdvancedTransType_RU == BankAdvancedTransType_RU::CurrTransfer)
            {
                _ledgerJournalTrans.TransferCurrency_RU = _ledgerJournalTrans.CurrencyCode;
                _ledgerJournalTrans.BankCurrencyDealCourse_RU = 0;
            }
        }

        this.updateVendAccount_RU(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCurrencyConvertFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear currency convert fields
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// <c>LedgerJournalTrans</c> record
    /// </param>
    /// <remarks>
    /// Clear RU fields
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clearCurrencyConvertFields(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.BankSpecAccountId_RU = '';
        _ledgerJournalTrans.BankCommAccountId_RU = '';
        _ledgerJournalTrans.BankVendAccountId_RU = '';
        _ledgerJournalTrans.BankAgreementExt_RU = 0;
        _ledgerJournalTrans.TransferCurrency_RU = '';
        _ledgerJournalTrans.BankRespWorkerId_RU = 0;
        _ledgerJournalTrans.BankCurrencyDealCourse_RU = 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal line based on <c>CompanyInfo</c> data.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    protected void initFromCompanyInfo(LedgerJournalTrans _ledgerJournalTrans)
    {
        CompanyInfo companyInfo;

        super(_ledgerJournalTrans);

        if (!_ledgerJournalTrans.BankCentralBankPurposeCode && !_ledgerJournalTrans.BankCentralBankPurposeText)
        {
            companyInfo = CompanyInfo::find();
            _ledgerJournalTrans.BankCentralBankPurposeCode = companyInfo.BankCentralBankPurposeCode;
            _ledgerJournalTrans.BankCentralBankPurposeText = companyInfo.BankCentralBankPurposeText;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    protected void initFromVendTable(LedgerJournalTrans ledgerJournalTrans, Tax1099BoxDetail _tax1099Detail = null)
    {
        // <GIN>
        TaxWithholdParameters_IN    taxWithholdParametersLoc;
        TaxInformationVendTable_IN  taxInformationVendTableLoc;
        // </GIN>

        ledgerJournalTrans.CurrencyCode = vendTable.Currency ? vendTable.Currency : ledgerJournalTrans.CurrencyCode;
        ledgerJournalTrans.Due = ledgerJournalTrans.TransDate;
        ledgerJournalTrans.vatNumJournal = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, ledgerJournalTrans.TransDate);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.initVendPostingProfile(ledgerJournalTrans);
        }
        else
        {
        // </GEERU>
            ledgerJournalTrans.PostingProfile = VendParameters::find().PostingProfile;
        // <GEERU>
        }
        // </GEERU>

        ledgerJournalTrans.Tax1099Fields = vendTable.Tax1099Fields;
        ledgerJournalTrans.CustVendBankAccountId = vendTable.BankAccount;
        ledgerJournalTrans.PaymId = vendTable.PaymId;

        //CP or IC transaction where the vendor is from another company, the method of payment is not guarenteed to be found in this company.
        //Gracefully we will check for the existance of method of paymenet in case it is shared or duplicated in both companies.
        changecompany(currentCompany)
        {
            if (VendPaymModeTable::exist(vendTable.PaymMode))
            {
                ledgerJournalTrans.PaymMode = vendTable.PaymMode;
                ledgerJournalTrans.PaymSpec = vendTable.PaymSpec;
                ledgerJournalTrans.BankTransType = VendPaymModeTable::find(vendTable.PaymMode).BankTransType;
            }
        }

        ledgerJournalTrans.paymModeModified();
        LedgerJournalTrans.paymSpecModified();

        ledgerJournalTrans.Payment = vendTable.PaymTermId;
        ledgerJournalTrans.SettleVoucher = VendParameters::find().AutoSettle ?
                                                          SettlementType::OpenTransact : SettlementType::None;
        ledgerJournalTrans.BankCentralBankPurposeCode = vendTable.BankCentralBankPurposeCode;
        ledgerJournalTrans.BankCentralBankPurposeText = vendTable.BankCentralBankPurposeText;
        ledgerJournalTrans.TaxWithholdGroup = vendTable.TaxWithholdGroup;

        if (ledgerJournalTrans.isTaxIntegrationEnabled()
            && TaxIntegrationUtils::isMultipleTaxIdEnabledForTaxService())
        {
            vendTable.copyPrimaryRegistrationNumberToVATMap(ledgerJournalTrans, ledgerJournalTrans.TransDate);
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.initVatRegData_PL(ledgerJournalTrans, vendTable);
        }
        // </GEEPL>

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            taxWithholdParametersLoc = TaxWithholdParameters_IN::find();
            taxInformationVendTableLoc = vendTable.getTaxInformationVendTable_IN();
            LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();
            if (taxWithholdParametersLoc.tdsActivate || taxWithholdParametersLoc.tcsActivate)
            {
                TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTrans, true);
                if (transTaxInformation)
                {
                    ttsbegin;
                    transTaxInformation.TaxWithholdNatureOfAssessee = taxInformationVendTableLoc.NatureOfAssessee;
                    transTaxInformation.update();
                    ttscommit;
                }
		
                ledgerJournalTrans.TaxWithholdGroup = vendTable.TaxWithholdGroup;
            }
            if (taxWithholdParametersLoc.tdsActivate)
            {
                ledgerJournalTransTaxExt.tdsGroup = taxInformationVendTableLoc.tdsGroup;
            }

            if (taxWithholdParametersLoc.tcsActivate)
            {
                ledgerJournalTransTaxExt.tcsGroup = taxInformationVendTableLoc.tcsGroup;
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        super(_ledgerJournalTrans);

        this.initOffsetFromLedgerJournalTable(_ledgerJournalTrans);

        _ledgerJournalTrans.AccountType = LedgerJournalACType::Vend;
        _ledgerJournalTrans.SettleVoucher = VendParameters::find().AutoSettle ?
                                               SettlementType::OpenTransact : SettlementType::None;
        // <GEERU><GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoCZ, #isoHU, #isoPL]))
        {
            _ledgerJournalTrans.Prepayment = _ledgerJournalTrans.ledgerJournalTable().ledgerJournalTable_W().Prepayment_W;
        }
        // </GEEU></GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the <c>LedgerJournalTrans</c> and <c>LedgerJournalTrans_Project</c> fields.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record being modified.
    /// </param>
    /// <param name="_ledgerJournalTrans_Project">
    /// The <c>LedgerJournalTrans_Project</c> table record being modified; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset">
    /// The <c>LedgerJournalTrans_Asset</c> table record being modified; optional.
    /// </param>
    /// <param name="_ledgerJournalTrans_RAsset">
    /// The <c>LedgerJournalTrans_RAsset</c> table record being modifie.
    /// </param>
    /// <param name="_ledgerJournalTrans_RDeferrals">
    /// The <c>LedgerJournalTrans_RDeferrals</c> table record being modified; optional.
    /// </param>
    /// <remarks>
    /// This method should be called from the <c>modified</c> method in the <c>OffsetAccount</c> field of
    /// the <c>LedgerJournalTrans</c> form data source. If there is no <c>LedgerJournalTrans_Project</c> or
    /// <c>LedgerJournalTrans_Asset</c> data source on the form, null may be passed in.
    /// </remarks>
    public void offsetAccountModified(LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans_Project _ledgerJournalTrans_Project = null,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
        LedgerJournalTrans_RAsset _ledgerJournalTrans_RAsset = null,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null)
    {
        super(_ledgerJournalTrans, _ledgerJournalTrans_Project, _ledgerJournalTrans_Asset, _ledgerJournalTrans_RAsset, _ledgerJournalTrans_RDeferrals);

        this.updateVendAccount_RU(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteForPaymentStatus</Name>
				<Source><![CDATA[
    protected boolean canDeleteForPaymentStatus(LedgerJournalTrans _ledgerJournalTrans)
    {
        return (_ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Confirmed &&
                _ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Recieved &&
                _ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Sent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the possibility of deleting.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Source record of <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If record can not be deleted.
    /// </exception>
    public void preDelete(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendPaymModeTable vendPaymModeTable;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (!this.canDeleteForPaymentStatus(_ledgerJournalTrans))
            {
                vendPaymModeTable = VendPaymModeTable::find(_ledgerJournalTrans.PaymMode);
                if (vendPaymModeTable.RecId && vendPaymModeTable.UseCustomFormat_RU)
                {
                    throw error(strFmt("@SYS68189", CustVendPaymStatus::None, CustVendPaymStatus::Rejected));
                }
            }
        }

        super(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates settlement data for the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <remarks>
    /// This method is used by the split payment feature.
    /// </remarks>
    public void settleTransUpdate(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans specTrans;
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;
        // With manual settlement it is not needed to validate on:
        // PaymSpec, dueDate, paymMode and postingProfile

        PaymId paymId;
        boolean paymIdIsUnique = true;
        Counter paymentsCounter;

        super(_ledgerJournalTrans);

        if (_ledgerJournalTrans.PaymMode
            && VendPaymMethodAttribute::exist(_ledgerJournalTrans.PaymMode, PaymAttribute::PaymID))
        {
            paymentsCounter = 0;

            while select crossCompany RecId from specTrans
                where specTrans.SpecCompany == _ledgerJournalTrans.DataAreaId
                    && specTrans.SpecRecId == _ledgerJournalTrans.RecId
                    && specTrans.SpecTableId == _ledgerJournalTrans.TableId
                join RecId from vendTransOpen
                    where vendTransOpen.DataAreaId == specTrans.RefCompany
                        && vendTransOpen.TableId == specTrans.RefTableId
                        && vendTransOpen.RecId == specTrans.RefRecId
                join PaymId from vendTrans
                    where vendTrans.RecId == vendTransOpen.RefRecId
                        && vendTrans.AccountNum == vendTransOpen.AccountNum
            {
                paymentsCounter++;

                if (paymId && paymId != vendTrans.PaymId
                    // PostR1AXLTODO
                    /*&& VendPaymModeTable::find(_ledgerJournalTrans.PaymMode).ClassId != classNum(VendOutPaym_NO_TP200)*/)
                {
                    paymIdIsUnique = false;

                    _ledgerJournalTrans.amountCur2DebCred(0);
                    _ledgerJournalTrans.update();

                    if (ledgerJournalTrans_ds)
                    {
                        ledgerJournalTrans_ds.refresh();
                    }

                    SpecTransManager::constructServer(_ledgerJournalTrans, false).deleteAll();

                    warning ("@SYS73747");
                }

                // PostR1AXLTODO
                //if (VendPaymModeTable::find(_ledgerJournalTrans.PaymMode).ClassId != classNum(VendOutPaym_NO_TP200))
                //{
                    paymId = vendTrans.PaymId;
                //}
                //else
                //{
                //    if (!paymId)
                //    {
                //        paymId = vendTrans.PaymId;
                //    }
                //    else
                //    {
                //        if (paymId != vendTrans.PaymId)
                //        {
                //            paymIdIsUnique = false;
                //            paymId = '';
                //            _ledgerJournalTrans.PaymId = paymId;
                //        }
                //    }
                //}
            }

            if (paymId && paymIdIsUnique)
            {
                _ledgerJournalTrans.PaymId = paymId;
            }

            // When 'Use vendor invoice reference number validation' feature is on and
            // multiple payments has been marked to be settled, PaymId should be blank
            if (paymentsCounter > 1 && VendParameters::find().VendInvoiceRefNumValidation_FI)
            {
                _ledgerJournalTrans.PaymId = '';
            }

            _ledgerJournalTrans.write();

            if (ledgerJournalTrans_ds)
            {
                ledgerJournalTrans_ds.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateModified</Name>
				<Source><![CDATA[
    public void transDateModified(LedgerJournalTrans ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTrans_orig;
        BankPaymentOrderJour_RU bankPaymentOrderJour;
        PaymentOrderBudgetTrans_RU paymentOrderBudgetTrans;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if (countryRegion_RU)
        {
            if (! ledgerJournalTrans.checkAllowEditPaymentOrder_RU(true))
            {
                return;
            }
            ledgerJournalTrans_orig = ledgerJournalTrans.orig();
            ttsbegin;

            super(ledgerJournalTrans);

            if (ledgerJournalTrans.TransDate != ledgerJournalTrans_orig.TransDate && ledgerJournalTrans.BankChequeNum)
            {
                bankPaymentOrderJour = ledgerJournalTrans_orig.bankPaymentOrderJour_RU(true);

                if (bankPaymentOrderJour)
                {
                    bankPaymentOrderJour.JournalTransDate = ledgerJournalTrans.TransDate;
                    bankPaymentOrderJour.doUpdate();
                }

                paymentOrderBudgetTrans = ledgerJournalTrans_orig.paymentOrderBudgetTrans_RU(true);

                if (paymentOrderBudgetTrans)
                {
                    paymentOrderBudgetTrans.JournalTransDate = ledgerJournalTrans.TransDate;
                    paymentOrderBudgetTrans.doUpdate();
                }
            }
            ttscommit;
        }
        else
        {
            super(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendAccount_RU</Name>
				<Source><![CDATA[
    private void updateVendAccount_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankTransType bankTransType;
        VendAccount vendAccount;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        bankTransType = BankTransType::find(_ledgerJournalTrans.BankTransType);

        if (countryRegion_RU &&
            bankTransType &&
            (bankTransType.BankAdvancedTransType_RU == BankAdvancedTransType_RU::CurrBuy ||
             bankTransType.BankAdvancedTransType_RU == BankAdvancedTransType_RU::CurrSell) &&
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
            _ledgerJournalTrans.parmOffsetAccount())
        {
            vendAccount = BankGroup::find(BankAccountTable::find(_ledgerJournalTrans.parmOffsetAccount()).BankGroupId).VendAccountNum_RU;

            if (vendAccount)
            {
                if (_ledgerJournalTrans.AccountType != LedgerJournalACType::Vend)
                {
                    _ledgerJournalTrans.AccountType = LedgerJournalACType::Vend;
                }

                _ledgerJournalTrans.parmAccount(vendAccount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useHistoricalRemittanceAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the remittance address stored on the table should be used or the current date
    /// effective value of the address should be used for the current ledger journal transaction type.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// true when the remittance address record ID in the table should be used; false when the current date
    /// effective should be used.
    /// </returns>
    /// <remarks>
    /// This method is called from the display remittance address on this class.
    /// </remarks>
    protected boolean useHistoricalRemittanceAddress(LedgerJournalTrans _ledgerJournalTrans)
    {
        //Payment has been made.
        return (_ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent || _ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write(LedgerJournalTrans _ledgerJournalTrans,
        boolean _updateCashDisc = false,
        LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
        LedgerJournalTrans_RDeferrals _ledgerJournalTrans_RDeferrals = null,
        LedgerJournalTrans_RCash _ledgerJournalTrans_RCash = null)
    {
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        super(_ledgerJournalTrans, _updateCashDisc, _ledgerJournalTrans_Asset, _ledgerJournalTrans_RDeferrals, _ledgerJournalTrans_RCash);

        if (countryRegion_RU &&
            _ledgerJournalTrans.BankTransType &&
            _ledgerJournalTrans.AmountCurCredit &&
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
            BankTransType::find(_ledgerJournalTrans.BankTransType).BankAdvancedTransType_RU == BankAdvancedTransType_RU::CurrBuy)
        {
            _ledgerJournalTrans.TransferCurrency_RU = CompanyInfoHelper::standardCurrency();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>