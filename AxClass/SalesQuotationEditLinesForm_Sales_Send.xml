<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationEditLinesForm_Sales_Send</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesQuotationEditLinesFormFactoryAttribute(ModuleAxapta::SalesOrder, DocumentStatus::Quotation)]
class SalesQuotationEditLinesForm_Sales_Send extends SalesQuotationEditLinesForm_Sales implements BatchRetryable
{
    NumberSeq                       numberSeq;
    Num                             number;
    Voucher                         voucher;

    RecordSortedList                journalList;

    SalesCalcTax                    salesCalcTax;

    CustQuotationJour               custQuotationJour;

    CustQuotationTrans              custQuotationTrans;

    RecordSortedList                recordListSalesQuotationParmLine;

    SalesQty                        updateNow;
    InventQty                       updateNowInvent;
    PdsCWInventQty                  updateCWNow;

    AmountCur                       lineValue;
    AmountCur                       lineValueInclTax;

    LineNum                         sumByLineNum = 1;

    LedgerVoucher                   ledgerVoucher;
    boolean                         ledgerVoucherIsSet;

    #localmacro.LinePrefix
        setPrefix(#PreFixField(%1, ItemId)  + ' '
                + %2 );
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    NumberSeq  allocateNumAndVoucher()
    {
        return NumberSeq::newGetNum(SalesParameters::numRefQuotationId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLine</Name>
				<Source><![CDATA[
    protected void  calcLine(SalesQuotationLine         _salesQuotationLine,
                             SalesQuotationParmLine     _salesQuotationParmLine)
    {
        _salesQuotationLine = this.getSalesQuotationLine(_salesQuotationParmLine);
        updateNow           = _salesQuotationParmLine.DeliverNow;
        updateNowInvent     = _salesQuotationParmLine.InventNow;
        updateCWNow         = _salesQuotationParmLine.PdsCWDeliverNow;
        lineValue           = _salesQuotationLine.calcLineAmountExclTax(updateNow, _salesQuotationParmLine.salesQuotationParmTable().Transdate, tax);
        lineValueInclTax    = _salesQuotationLine.calcLineAmount(updateNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBlockedLevel</Name>
				<Source><![CDATA[
    protected boolean  checkBlockedLevel()
    {
        boolean  ok = true;

        if (!CustTable::canCustomerBeUpdated(salesQuotationTable.CustAccount, salesQuotationTable.InvoiceAccount, this.documentStatus()))
        {
            ok = checkFailed(strFmt("@SYS7987", salesQuotationTable.CustAccount));
        }

        if (!this.canBusRelAccountBeUpdated())
        {
            ok = checkFailed(strFmt("@SCM:ProspectIsStopped", salesQuotationTable.BusRelAccount, fieldPName(smmBusRelTable, Blocked)));
        }
        
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean  checkDiscardLine()
    {
        boolean     isCWItem = PdsGlobal::pdsIsCWItem(salesQuotationParmLine.ItemId);

        if ((!isCWItem && salesQuotationParmLine.DeliverNow == 0)
            || (isCWItem && salesQuotationParmLine.PdsCWDeliverNow == 0))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeading</Name>
				<Source><![CDATA[
    protected boolean  checkHeading()
    {
        boolean  ok = true;

        if (! salesQuotationTable.RecId)
        {
            ok = checkFailed(strFmt("@SYS84605",salesQuotationTable.QuotationId));
        }

        if (!salesQuotationTable.CustAccount && !salesQuotationTable.BusRelAccount)
        {
            // Quotation %1 has no account reference for the customer/prospect table.
            ok = checkFailed(strFmt("@SYS84606",salesQuotationTable.QuotationId));
        }

        if (salesQuotationTable.CustAccount)
        {
            if (!CustTable::exist(salesQuotationTable.CustAccount))
            {
                ok = checkFailed(strFmt("@SYS84607",salesQuotationTable.CustAccount, salesQuotationTable.QuotationId));
            }
            if (!salesQuotationTable.InvoiceAccount)
            {
                ok = checkFailed(strFmt("@SYS84608",salesQuotationTable.QuotationId));
            }
        }
        else if (salesQuotationTable.BusRelAccount && !smmBusRelTable::find(salesQuotationTable.BusRelAccount))
        {
            ok = checkFailed(strFmt("@SYS84607",salesQuotationTable.BusRelAccount, salesQuotationTable.QuotationId));
        }

        if ((salesQuotationTable.InvoiceAccount) && (! CustTable::exist(salesQuotationTable.InvoiceAccount)))
        {
            ok = checkFailed(strFmt("@SYS84620",salesQuotationTable.InvoiceAccount,salesQuotationTable.QuotationId));
        }
        if (salesQuotationTable.CurrencyCode && ! Currency::exist(salesQuotationTable.CurrencyCode))
        {
            ok = checkFailed(strFmt("@SYS84610",salesQuotationTable.CurrencyCode,salesQuotationTable.QuotationId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfSomethingIsPosted</Name>
				<Source><![CDATA[
    protected boolean  checkIfSomethingIsPosted()
    {
        if (! salesQuotationLine)
        {
            return checkFailed("@SYS26185");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLines</Name>
				<Source><![CDATA[
    protected boolean checkLines()
    {
        SalesQuotationParmLine      salesQuotationParmLineCheck;
        boolean                     ok = true;      

        setPrefix(#PreFixField(SalesQuotationLine, LineNum));

        if (! SalesQuotationLine::exist(salesQuotationTable.QuotationId))
        {
            ok = checkFailed("@SYS84616");
        }

        salesQuotationParmLineCheck.clear();

        recordListSalesQuotationParmLine.first(salesQuotationParmLineCheck);
                
        while (salesQuotationParmLineCheck)
        {
            ok = ok & this.checkLine(salesQuotationParmLineCheck);

            if (! recordListSalesQuotationParmLine.next(salesQuotationParmLineCheck))
            {
                break;
            }
        }        

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified <c>SalesQuotationParmLine</c> is valid or not.
    /// </summary>
    /// <param name = "_salesQuotationParmLine">The <c>SalesQuotationParmLine</c> to check.</param>
    /// <returns>true if the line is valid; otherwise, false.</returns>
    [Hookable]
    protected boolean checkLine(SalesQuotationParmLine _salesQuotationParmLine)
    {
        if (_salesQuotationParmLine.ItemId && !InventTable::exist(_salesQuotationParmLine.ItemId))
        {
            return checkFailed(strFmt("@SYS20812", _salesQuotationParmLine.ItemId));
        }       

        if (_salesQuotationParmLine.ItemId)
        {
            return this.checkProductNotStopped( _salesQuotationParmLine.ItemId,                                                                       
                                                _salesQuotationParmLine.inventDim(),
                                                false);          
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSales</Name>
				<Source><![CDATA[
    protected boolean checkSales()
    {
        boolean  ok = true;

        // In transactions in order to get enforce selection of eg. CustTable
        ttsbegin;

        if (!this.checkHeading() || !this.checkBlockedLevel() || !this.checkLines())            
        {
            ok = false;
        }

        ttscommit;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    public boolean createJournal()
    {
        #isoCountryRegionCodes

        journalList = this.newJournalList();

        this.researchSalesQuotationAutoCharges();

        salesQuotationTotals = SalesQuotationTotals::construct(salesQuotationParmTable,
                                                               SalesUpdate::All,
                                                               AccountOrder::None,
                                                               this.parmId(),
                                                               salesQuotationTable.QuotationId,
                                                               this.documentStatus());
        salesQuotationTotals.prepareTotalAmountCalculation();
        salesQuotationTotals.prepareQuantitiesCalculation();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            salesQuotationTotals.totalCashDisc();
            salesQuotationTotals.totalAmountCashDiscOnInvoice(true);
        }

        this.tax(salesQuotationTotals.tax());

        recordListSalesQuotationParmLine = salesQuotationTotals.recordSortedListLine();

        if (! this.checkSales())
        {
            throw error(strFmt("@SYS84612", salesQuotationParmTable.QuotationId));
        }

        this.insertJournal();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    void displayProgress()
    {
        this.progressUpdate(strFmt("@SYS84617",salesQuotationTable.QuotationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::Quotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedEuroTriangulation</Name>
				<Source><![CDATA[
    protected UnknownNoYes  fixedEuroTriangulation()
    {
        return(salesQuotationTable.fixedEuroTriangulation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    protected CustExchRate  fixedExchRate()
    {
        return(salesQuotationTable.fixedExchRate(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRateSecondary</Name>
				<Source><![CDATA[
    protected ExchrateSecondary  fixedExchRateSecondary()
    {
        return (salesQuotationTable.fixedExchRateSecondary());
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaption</Name>
				<Source><![CDATA[
    str  formLetterCaption()
    {
        return "@SYS7236";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterSorting</Name>
				<Source><![CDATA[
    container  formLetterSorting(tableId    sortingTableId,
                                 fieldId    recIdField)
    {
        container                       sortOrder;
        FormLetterSortingParameters     sortingParameters;

        while select FieldId
            from sortingParameters
            order by Position, FieldId
            where sortingParameters.SortingTableId == sortingTableId
        {
            sortOrder += [sortingParameters.FieldId];
        }

        sortOrder += [recIdField];

        return sortOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    container  getNumAndVoucher()
    {
        return [numberSeq.num(), ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQuotationLine</Name>
				<Source><![CDATA[
    protected SalesQuotationLine getSalesQuotationLine(SalesQuotationParmLine     _salesQuotationParmLine,
                                                       boolean           _forUpdate = false)
    {
        SalesQuotationLine  localSalesQuotationLine;

        localSalesQuotationLine.selectForUpdate(_forUpdate);

        select firstonly localSalesQuotationLine
            where localSalesQuotationLine.RecId == _salesQuotationParmLine.SalesQuotationLineRecId;

        if (! SalesQuotationTable::exist(localSalesQuotationLine.QuotationId))
        {
            throw error("@SYS84618");
        }

        return localSalesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void  initJournal()
    {
        custQuotationJour.clear();
        custQuotationJour.initValue();

        custQuotationJour.QuotationId       = number;
        if (!custQuotationJour.QuotationId)
        {
            // Quotation journal id must be filled in.
            throw error("@SYS100047");
        }
        custQuotationJour.ParmId            = this.parmId();
        custQuotationJour.QuotationDate     = salesQuotationParmTable.Transdate;

        custQuotationJour.initFromSalesQuotationTable(salesQuotationTable);

        custQuotationJour.setDocNum(salesQuotationTable);

        custQuotationJour.InterCompanyPosted = this.interCompanyPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkup</Name>
				<Source><![CDATA[
    protected void  initMarkup()
    {
        markup = new Markup(salesQuotationTable.CurrencyCode);
        markup.setTax(this.tax());
        markup.parmExchRate(this.fixedExchRate(), this.fixedExchRateSecondary(), this.fixedEuroTriangulation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournal</Name>
				<Source><![CDATA[
    protected void  insertJournal()
    {
        ttsbegin;

        numberSeq           = this.allocateNumAndVoucher();
        [number, voucher]    = this.getNumAndVoucher();

        if (this.updateNow())
        {
            this.postUpdate();

            TransactionLog::create(this.transactionLogType(),this.transactionLogTxt());
            ttscommit;

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.transitDocument();
            }

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                TaxBusinessService::transferTaxDocument(salesQuotationParmTable, custQuotationJour);
            }
            // </GTE>
        }
        else
        {
            throw error("@SYS21533");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journal</Name>
				<Source><![CDATA[
    CustQuotationJour  journal()
    {
        return custQuotationJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    protected RecordSortedList  newJournalList()
    {
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(CustQuotationJour));
        recordSortedList.sortOrderFromContainer(this.formLetterSorting(tableNum(CustQuotationJour), fieldNum(CustQuotationJour, RecId)));

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupLine</Name>
				<Source><![CDATA[
    protected void  postMarkupLine()
    {
        this.postMarkupOnTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    protected void postMarkupOnJour(SalesQuotationTable _salesQuotationTableMarkup)
    {
        markup.postJournal(1,
                           salesQuotationTotals.totalOrderBalance(_salesQuotationTableMarkup.RecId),
                           _salesQuotationTableMarkup,
                           _salesQuotationTableMarkup.DefaultDimension,
                           custQuotationJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    protected void postMarkupOnTrans()
    {
        markup.postJournal(updateNow,
                           lineValue,
                           salesQuotationLine,
                           salesQuotationLine.DefaultDimension,
                           custQuotationTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    protected void  postMarkupTable()
    {
        QueryRun qR = new QueryRun(salesQuotationParmTable.querySalesQuotationParmSubTable());
        while (qR.next())
        {
            SalesQuotationTable salesQuotationTableMarkup = null;
            if (qR.changed(tableNum(SalesQuotationParmSubTable)))
            {
                SalesQuotationParmSubTable salesQuotationParmSubTable = qR.get(tableNum(SalesQuotationParmSubTable));
                salesQuotationTableMarkup = salesQuotationParmSubTable.salesQuotationTable();
            }

            if (!salesQuotationTableMarkup)
            {
                continue;
            }

            this.postMarkupOnJour(salesQuotationTableMarkup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    protected void  postTax(boolean post)
    {
        salesCalcTax = SalesCalcTax::construct(this.journal());
        salesCalcTax.tax(this.tax());
        salesCalcTax.post(ledgerVoucher, post);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the report.
    /// </summary>
    protected void  printJournal()
    {
        if (printFormletter && journalList.len() > 0)
        {
            custQuotationJour.printJournal(this, journalList);
            this.sendAsXML();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for sales quotation.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::Quotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildSalesQuotationTable</Name>
				<Source><![CDATA[
    QueryRun  queryBuildSalesQuotationTable()
    {
        QueryBuildRange             queryBuildRangeStatus;
        QueryBuildRange             queryBuildRangeType;

        QueryRun localQueryRun = new SysQueryRun(queryStr(SalesQuotationUpdate));
        Query query = localQueryRun.query();
        QueryBuildDataSource salesQuotationTabledataSource = query.dataSourceTable(tableNum(SalesQuotationTable));

        QueryBuildDataSource salesQuotationLinedataSource = query.dataSourceTable(tableNum(SalesQuotationLine));
        salesQuotationLinedataSource.addRange(fieldNum(SalesQuotationLine, LineDeliveryType)).value('!='+SysQuery::value(LineDeliveryType::OrderLineWithMultipleDeliveries));
        salesQuotationLinedataSource.addSortField(fieldNum(SalesQuotationLine, QuotationId));
        salesQuotationLinedataSource.addSortField(fieldNum(SalesQuotationLine, LineNum));

        if (callerRecordsPackedMap == conNull())
        {
            salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationId)).value(salesQuotationTable.QuotationId);
            salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, CustAccount)).value(salesQuotationTable.CustAccount);
            // Quotation type = Sales
            queryBuildRangeType = salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationType));
            queryBuildRangeType.value(enum2str(QuotationType::Sales));
            queryBuildRangeType.status(RangeStatus::Locked);

            QueryBuildRange queryBuildRangeTemplate = query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, TemplateName));
            queryBuildRangeTemplate.value(SysQuery::valueEmptyString());
            queryBuildRangeTemplate.status(RangeStatus::Locked);

            if (!skipQueryStatusFilter)
            {
                queryBuildRangeStatus = salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationStatus));
                queryBuildRangeStatus.value(strFmt('%1, %2',enum2str(SalesQuotationStatus::Created), enum2str(SalesQuotationStatus::Sent)));
                queryBuildRangeStatus.status(RangeStatus::Open);
            }
        }
        else
        {
            Map mapSalesQuotationRecord = Map::create(callerRecordsPackedMap);
            MapEnumerator mapSalesQuotationRecordEnumerator = mapSalesQuotationRecord.getEnumerator();

            numberOfRecords = 0;
            while (mapSalesQuotationRecordEnumerator.moveNext())
            {
                SalesQuotationTable localSalesQuotationTable = mapSalesQuotationRecordEnumerator.currentValue();

                if (!skipQueryStatusFilter)
                {
                    // Created or Sent quotation only
                    queryBuildRangeStatus = salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationStatus));
                    queryBuildRangeStatus.value(strFmt('%1, %2',enum2str(SalesQuotationStatus::Created), enum2str(SalesQuotationStatus::Sent)));
                    queryBuildRangeStatus.status(RangeStatus::Open);

                    // Quotation type = Sales
                    queryBuildRangeType = salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationType));
                    queryBuildRangeType.value(enum2str(QuotationType::Sales));
                    queryBuildRangeType.status(RangeStatus::Locked);
                }

                if (localSalesQuotationTable.mayQuotationBeUpdated())
                {
                    query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(queryValue(localSalesQuotationTable.QuotationId));

                    numberOfRecords++;
                }

                query.dataSourceTable(tableNum(InventDim)).addRange(fieldNum(InventDim, InventSiteId));
            }
        }

        return localQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        super();

        if (recordsUpdated > 0)
            info(strFmt("@SYS99552", recordsUpdated,"@SYS8205"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Send the xml while printMedium is other than screen.
    /// </summary>
    protected void sendAsXML()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    TransTxt  transactionLogTxt()
    {
        return "@SYS84505";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    TransactionLogType  transactionLogType()
    {
        return TransactionLogType::SalesQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    boolean updateNow()
    {
        this.initJournal();
        this.initMarkup();

        this.displayProgress();

        salesQuotationLine.clear();
        salesQuotationParmLine.clear();

        recordListSalesQuotationParmLine.first(salesQuotationParmLine);
        while (salesQuotationParmLine)
        {
            if (!this.checkDiscardLine())
            {
                salesQuotationLine = this.getSalesQuotationLine(salesQuotationParmLine);

                setPrefix(#PreFixField(salesQuotationLine, QuotationId));

                this.displayProgress();

                #LinePrefix(salesQuotationLine, salesQuotationLine.inventdim().preFixProductDim(EcoResProductDimGroupSetup::newItemId(salesQuotationLine.ItemId)))

                this.calcLine(salesQuotationLine, salesQuotationParmLine);
                this.writeJournalLine();
                this.postMarkupLine();
            }

            if (!recordListSalesQuotationParmLine.next(salesQuotationParmLine))
            {
                break;
            }
        }

        if (!this.checkIfSomethingIsPosted())
        {
            return false;
        }

        progress.setText("@SYS25781");
        this.writeJournal();
        this.postMarkupTable();
        this.postTax(false);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournal</Name>
				<Source><![CDATA[
    protected void  writeJournal()
    {
        if (lineDeliveryName || lineDeliveryPostalAddress)
        {
            custQuotationJour.DeliveryPostalAddress     = lineDeliveryPostalAddress;
            custQuotationJour.DeliveryName              = lineDeliveryName;
        }

        custQuotationJour.SalesBalance      = salesQuotationTotals.totalBalance();
        custQuotationJour.CostValue         = salesQuotationTotals.totalCostValue();
        custQuotationJour.EndDisc           = salesQuotationTotals.totalEndDisc();
        custQuotationJour.SumLineDisc       = salesQuotationTotals.totalLineDisc();
        custQuotationJour.SumMarkup         = salesQuotationTotals.totalMarkup();
        custQuotationJour.SumTax            = salesQuotationTotals.totalTaxAmount();
        custQuotationJour.RoundOff          = salesQuotationTotals.totalRoundOff();

        custQuotationJour.RespiteDate       = salesQuotationParmUpdate.RespiteDate ? salesQuotationParmUpdate.RespiteDate
                                                                                   : salesQuotationTable.QuotationExpiryDate;
        custQuotationJour.QuotationAmount   = salesQuotationTotals.totalAmount();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            custQuotationJour.QuotationAmount   = salesQuotationTotals.totalAmountGTE();
        }
        // </GTE>

        custQuotationJour.insert();

        Docu::copy(salesQuotationTable, custQuotationJour);

        journalList.ins(custQuotationJour);

        this.writeTmpTaxWorkTrans(custQuotationJour.RecId);
        journalTmpTaxWorkTrans.copyFromTax(
            this.tax(),
            custQuotationJour.RecId,
            custQuotationJour.TableId);

        this.writeJournalSalesLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalLine</Name>
				<Source><![CDATA[
    protected void writeJournalLine()
    {
        Label   label = new Label(custQuotationJour.LanguageId);
        SalesQuotationTable lineSalesQuotationTable = salesQuotationLine.salesQuotationTable();

        super();

        custQuotationTrans.initFromSalesQuotationLine(salesQuotationLine);
        custQuotationTrans.setLinenum(sumByLineNum);
        sumByLineNum++;

        custQuotationTrans.SalesId          = custQuotationJour.SalesId;
        custQuotationTrans.QuotationId      = custQuotationJour.QuotationId;
        custQuotationTrans.QuotationDate    = custQuotationJour.QuotationDate;
        custQuotationTrans.Qty              = updateNow;
        custQuotationTrans.InventQty        = updateNowInvent;
        custQuotationTrans.PdsCWQty         = updateCWNow;
        custQuotationTrans.ProjTransType    = QuotationProjTransType::Item;
        custQuotationTrans.LineAmount       = lineValue;
        custQuotationTrans.LineAmountTax    = lineValueInclTax - lineValue;

        custQuotationTrans.TaxWriteCode     = this.tax().taxWriteCode();

        custQuotationTrans.LineHeader = label.extractString(literalstr("@SYS84505"))    + ' ' + salesQuotationLine.QuotationId                   + ' '
                                      + label.extractString(literalstr("@SYS24704")) + ' ' + lineSalesQuotationTable.CustAccount  + ' '
                                      + label.extractString(literalstr("@SYS7924")) + ' ' + salesQuotationLine.deliveryAddress().Address                + ' '
                                      + (lineSalesQuotationTable.CustPurchaseOrder ? (label.extractString(literalstr("@SYS9452")) + ' ' + lineSalesQuotationTable.CustPurchaseOrder + ' ') : '')
                                      + custQuotationTrans.LineHeader;

        custQuotationTrans.LineAmountMST     = custQuotationJour.amountMST(custQuotationTrans.LineAmount);
        custQuotationTrans.LineAmountTaxMST  = custQuotationJour.amountMST(custQuotationTrans.LineAmountTax);

        if (InventReportDimHistory::canCreateHistory(custQuotationTrans))
        {
            InventReportDimHistory::addFromCustQuotationTrans(custQuotationTrans);
        }
        custQuotationTrans.insert();

        Docu::copy(salesQuotationLine, custQuotationTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalSalesLink</Name>
				<Source><![CDATA[
    protected void  writeJournalSalesLink()
    {
        SalesQuotationParmLine      localSalesQuotationParmLine;
        CustQuotationSalesLink      custQuotationSalesLink;
        CustQuotationSalesLink      custQuotationSalesLinkRef;

        ttsbegin;

        while select localSalesQuotationParmLine
            index hint ParmIdQuotationIdIdx
            where localSalesQuotationParmLine.ParmId        == salesQuotationParmTable.ParmId
               && localSalesQuotationParmLine.QuotationId   == salesQuotationTable.QuotationId
        {
            custQuotationSalesLink.clear();
            custQuotationSalesLink.initFromSalesQuotationParmLine  (localSalesQuotationParmLine);
            custQuotationSalesLink.initFromSalesQuotationTable     (SalesQuotationTable::find(localSalesQuotationParmLine.OrigQuotationId));
            custQuotationSalesLink.initFromCustQuotationJour       (custQuotationJour);

            // exist() can not be used - OrigSalesId is <blank>
            select firstonly RecId
                from  custQuotationSalesLinkRef
                where custQuotationSalesLinkRef.QuotationId    == custQuotationSalesLink.QuotationId    &&
                      custQuotationSalesLinkRef.QuotationDate  == custQuotationSalesLink.QuotationDate  &&
                      custQuotationSalesLinkRef.OrigSalesId    == custQuotationSalesLink.OrigSalesId;
            if (!custQuotationSalesLinkRef.RecId)
            {
                custQuotationSalesLink.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    [SysObsolete('The method has been deprecated, use TmpTaxWorkTrans.copyFromTax method instead.', false, 20\7\2020)]
    void writeTmpTaxWorkTrans(recId headingRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@SYS84619";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        CustQuotationTrans              custQuotationTransLoc;
        SalesQuotationParmLine          salesQuotationParmLineLoc;
        TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();

        transitDocManager.transit(salesQuotationParmTable, custQuotationJour);

        while select custQuotationTransLoc
                where custQuotationTransLoc.SalesId                  == custQuotationJour.SalesId
                    && custQuotationTransLoc.QuotationId             == custQuotationJour.QuotationId
                    && custQuotationTransLoc.QuotationDate           == custQuotationJour.QuotationDate
                join salesQuotationParmLineLoc
                    where salesQuotationParmLineLoc.InventTransId        == custQuotationTransLoc.InventTransId
                        && salesQuotationParmLineLoc.ParmId              == salesQuotationParmTable.ParmId
                        && salesQuotationParmLineLoc.TableRefId          == salesQuotationParmTable.TableRefId
                        && salesQuotationParmLineLoc.QuotationId         == salesQuotationParmTable.QuotationId
        {
            transitDocManager.transit(salesQuotationParmLineLoc, custQuotationTransLoc, custQuotationJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBusRelAccountBeUpdated</Name>
				<Source><![CDATA[
    protected boolean canBusRelAccountBeUpdated()
    {
        boolean ret = true;

        if (salesQuotationTable.BusRelAccount 
            && !smmBusRelTable::canBusRelAccountBeUpdated(salesQuotationTable.BusRelAccount, this.documentStatus()))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>