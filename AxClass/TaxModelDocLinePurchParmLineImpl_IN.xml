<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLinePurchParmLineImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>PurchParmLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(PurchParmLine))]
public class TaxModelDocLinePurchParmLineImpl_IN extends TaxModelDocLinePurchLineImpl_IN
{
    PurchParmTable purchParmTable;
    PurchParmLine  purchParmLine;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount.
    /// </summary>
    /// <returns>The total discount amount</returns>
    public Amount getDiscAmount()
    {
        Amount totalDisc;

        PriceUnit priceUnit = purchParmLine.PriceUnit == 0 ? 1 : purchParmLine.PriceUnit;

        Amount netAmount = (purchParmLine.ReceiveNow * ((purchParmLine.PurchPrice - purchParmLine.discAmount()) / priceUnit)) * (100 - purchParmLine.discPercent()) / 100;

        totalDisc = netAmount * purchParmLine.purchTable().DiscPercent / 100 + (purchParmLine.ReceiveNow * purchParmLine.PurchPrice / priceUnit) - netAmount;

        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TableId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>TableId</c>
    /// </returns>
    public TableId getDocumentLineMainTableId()
    {
        return purchParmLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the document line main table.
    /// </returns>
    public RecId getDocumentLineMainTableRecId()
    {
        return purchParmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c>
    /// </returns>
    public InventTransId getInventTransId()
    {
        return purchParmLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        return purchParmLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        return purchParmLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
         return purchParmLine.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        return purchParmTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        CustomsVendBOEJour_IN customsVendBOEJour_IN;
        if (this.isForeignTransaction() && !purchParmTable.TransDate)
        {
            select firstOnly RecId, BillOfEntryDate from customsVendBOEJour_IN
                where customsVendBOEJour_IN.PurchId == purchParmTable.PurchId;

            if (customsVendBOEJour_IN.RecId)
            {
                return customsVendBOEJour_IN.BillOfEntryDate;
            }
        }
        return purchParmTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        CustomsVendBOETrans_IN  customsVendBOETrans;
        CustomsVendBOEJour_IN   customsVendBOEJour;
        PurchLine               purchLineLocal;
        PurchParmLine           purchParmLineLoc;
        
        if (_documentLineMap.SourceTableId == tableNum(CustomsVendBOETrans_IN))
        {
            customsVendBOETrans = _documentLineMap;
            purchParmLine = PurchParmLine::findByPurchLineRefRecId(customsVendBOETrans.PurchLineRecId);

            select firstOnly ParmId, PurchId from customsVendBOEJour
                where customsVendBOETrans.PurchId                            == customsVendBOEJour.PurchId
                    && customsVendBOETrans.CustomsBillOfEntryJournal_IN      == customsVendBOEJour.RecId
                    && customsVendBOETrans.BillOfEntryDate                   == customsVendBOEJour.BillOfEntryDate
                    && customsVendBOETrans.CustomsBillOfEntryNumberTable     == customsVendBOEJour.CustomsBillOfEntryNumberTable
            join purchParmLineLoc
                where purchParmLineLoc.InventTransId    == customsVendBOETrans.InventTransId
                    && purchParmLineLoc.ParmId          == customsVendBOEJour.ParmId
                    && purchParmLineLoc.PurchLineRecId  == customsVendBOETrans.PurchLineRecId;
            purchParmLine = purchParmLineLoc;
        }
        else
        {
            purchParmLine = _documentLineMap;
        }

        purchLineLocal = purchParmLine.purchLine();
        if (purchLineLocal.RecId == 0)
        {
            purchLineLocal = PurchLine::findInventTransId(purchParmLine.InventTransId);
        }
        super(purchLineLocal);
        purchParmTable = purchParmLine.purchParmTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnableAccounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should enable accounting or not.
    /// </summary>
    /// <returns>
    /// True if the document line should enable accounting; otherwise, false.
    /// </returns>
    public NoYes shouldEnableAccounting()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostQuantityRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise quantity register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise quantity register; otherwise, false.
    /// </returns>
    public NoYes shouldPostQuantityRegister()
    {
        TaxParameters taxParameters;
        TaxOnItem     taxOnItem;
        boolean ret;

        if (this.getExciseTaxAccountType(taxOnItem) != TaxAccountType_IN::ExciseExpenseAccount)
        {
            taxParameters = TaxParameters::find();

            switch (taxParameters.VendorCalculationDateType_IN)
            {
                case VendorCalculationDateType_IN::DeliveryDate :
                case VendorCalculationDateType_IN::DocumentDate :
                    ret = true;
                    break;
                case VendorCalculationDateType_IN::InvoiceDate :
                    ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        NoYes           ret;
        InventTable     inventTable;

        if(TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            inventTable = inventTable::find(this.getItemId());
            switch (purchParmTable.Ordering)
            {
                case DocumentStatus::PackingSlip:
                    //When post physical tax is marked, if line is a inventory line, tax should be posted
                    if (InventModelGroup::find(inventTable.modelGroupId()).PostPhysicalPurchase
                        && InventParameters::find().PostPhysicalTax)
                    {
                        ret = true;
                    }
                    break;

                default:
                    break;
            }
            return ret;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value in transaction currency for the document line.
    /// </summary>
    /// <returns>
    /// The assessable value in transaction currency.
    /// </returns>
    public AmountCur getAssessableValueTransactionCurrency()
    {
        return purchParmLine.purchParmLine_IN().AssessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value in accounting currency for the document line.
    /// </summary>
    /// <returns>
    /// The assessable value in accounting currency.
    /// </returns>
    public AmountCur getAssessableValueAccountingCurrency()
    {
        return purchParmLine.purchParmLine_IN().AssessableValueAccountingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return purchParmTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return purchParmTable.DocumentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>