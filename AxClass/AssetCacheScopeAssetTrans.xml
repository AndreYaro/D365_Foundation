<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCacheScopeAssetTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetCacheScopeAssetTrans</c> class implements logic for asset cache scope of the asset transactions.
/// </summary>
[AssetCacheScope(AssetCacheScope::AssetTrans)]
internal class AssetCacheScopeAssetTrans extends AssetCacheScopeBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetTransTmpCache</Name>
				<Source><![CDATA[
    private AssetTransTmpCache getAssetTransTmpCache(container _cacheList, int _idx)
    {
        AssetTransTmpCache ret;
        if (_idx)
        {
            container cache = AssetCacheScopeBase::getValue(conPeek(_cacheList, _idx));
            if (cache)
            {
                ret = AssetTransTmpCache::newFromContainer(cache);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheByAssetBook</Name>
				<Source><![CDATA[
    internal anytype getCacheByAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
        AssetTransTmp ret;

        if (_assetId && _bookId)
        {
            str key = AssetCacheManager::getKeyByAssetBook(_assetId, _bookId);
            container cacheList = AssetCache::getValue(AssetCacheScope::AssetTrans, LimitedCacheAssetListKey);
            int idx = AssetCacheScopeBase::findKeyIndexInCacheList(cacheList, key);
            AssetTransTmpCache transCache = this.getAssetTransTmpCache(cacheList, idx);
            if (!transCache)
            {
                transCache = AssetTransTmpCache::newFromAssetBook(_assetId, _bookId);
            }
            cacheList = AssetCacheScopeBase::reprioritizeAssetBookInCacheList(cacheList, idx, key, transCache.pack());
            cacheList = AssetCacheScopeBase::removeMostOutdatedKeyFromCacheList(cacheList);
            AssetCache::insertValue(AssetCacheScope::AssetTrans, LimitedCacheAssetListKey, cacheList);
            ret = transCache.getCacheAssetTrans();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCache</Name>
				<Source><![CDATA[
    internal container getCache(str _key = LimitedCacheAssetListKey)
    {
        return AssetCache::getValue(AssetCacheScope::AssetTrans, _key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeValue</Name>
				<Source><![CDATA[
    internal void removeValue(str _key)
    {
        container cacheList = AssetCache::getValue(AssetCacheScope::AssetTrans, LimitedCacheAssetListKey);
        int idx = AssetCacheScopeBase::findKeyIndexInCacheList(cacheList, _key);
        if (idx)
        {
            cacheList = conPoke(cacheList, idx, [_key, conNull()]);
            AssetCache::insertValue(AssetCacheScope::AssetTrans, LimitedCacheAssetListKey, cacheList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheByAssetBookWithDisabledCacheFlight</Name>
				<Source><![CDATA[
    internal anytype getCacheByAssetBookWithDisabledCacheFlight(AssetId _assetId, AssetBookId _bookId)
    {
        AssetTransTmp ret;
        AssetTransTmpCache transCache = AssetTransTmpCache::newFromAssetBook(_assetId, _bookId);
        if (transCache)
        {
            ret = transCache.getCacheAssetTrans();
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>