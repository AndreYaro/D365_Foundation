<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BIFiscalCalendarsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BICalendarsHelper</c> class is a helper class that is used to handle calendars and fiscal calendars for BI.
/// </summary>
/// <remarks>
/// Customizations to this class can be done as an extension class.
/// </remarks>

using Microsoft.Dynamics.AX.Metadata.MetaModel;
using Microsoft.Dynamics.AX.Metadata.Core.MetaModel;
using Microsoft.Dynamics.AX.Framework.Analytics.Shared;

[System.ComponentModel.Composition.ExportMetadataAttribute("BICalendarsHelper", "Fiscal"),
    System.ComponentModel.Composition.ExportAttribute("Dynamics.AX.Application.BICalendarsHelperBase")]
    public class BIFiscalCalendarsHelper extends BICalendarsHelper
{
    #define.DateAttribute("Date_")

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of class BIFiscalCalendarsHelper
    /// </summary>
    /// <returns>BIFiscalCalendarsHelper instance</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BIFiscalCalendarsHelper construct()
    {
        BIFiscalCalendarsHelper helper = new BIFiscalCalendarsHelper();
        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateRangeFromTimePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a gregorian date range for a fiscal calendar time period.
    /// </summary>
    /// <param name = "range">A time period range</param>
    /// <param name = "measurementName">The measurement name</param>
    /// <returns>A date value range or same time period range if there is nothing to process</returns>
    public AxKPIRange getDateRangeFromTimePeriod(str measurementName, AxKPIRange range)
    {
        if (!measurementName)
        {
            throw error(strFmt("@SYS91439", @"measurementName"));
        }

        if (range == null)
        {
            throw error(strFmt("@SYS91439", @"range"));
        }

        RangeType filterType = enum2int(range.get_FilterType());
        str dimension = range.get_Dimension();
        str attribute = range.get_Attribute();

        // Ignore all other ranges except time periods
        if ((filterType == RangeType::TimePeriod || filterType == RangeType::TimePeriodToDate) &&
        BIFiscalCalendarsHelper::IsFiscalDateDimension(measurementName, dimension))
        {
            str dateRange = BIFiscalCalendarsHelper::getDateRange(range);
            if (dateRange)
            {
                AxKPIRange timePeriodRange = new AxKPIRange();
                timePeriodRange.Attribute = #DateAttribute;
                timePeriodRange.Dimension = dimension;
                timePeriodRange.DefaultValue = dateRange;
                // set range type to value since we converted the range to date range (Date1..Date2)
                timePeriodRange.set_FilterType(enum2int(RangeType::Value));
                return timePeriodRange;
            }
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDateOfFiscalDateTrend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets first date of the given fiscal date trend
    /// </summary>
    /// <param name = "trend">The kpi trend which dimension property is set to a fiscal date dimension</param>
    /// <returns>The first date of the given fiscal date trend</returns>
    public date getFirstDateOfFiscalDateTrend(AxKPITrend trend)
    {
        if (ClrInterop::IsNull(trend))
        {
            throw error(strFmt("@SYS91439", @"trend"));
        }

        BITimePeriod timePeriod;
        date firstDate;
        int periodToMove;
        RefRecId calendarRecId;
        date currentDate;

        firstDate = dateNull();
        KPITimeProvider kpiTimeProvider = KPITimeProvider::parmTimeProvider();
        currentDate = DateTimeUtil::date(Global::clrSystemDateTime2UtcDateTime(kpiTimeProvider.utcNow()));
        timePeriod = System.Enum::Parse(timePeriod.GetType(), trend.get_Attribute());

        if (timePeriod == BITimePeriod::Date_)
        {
            firstDate = utcDateTime2SystemDateTime(DateTimeUtil::addDays(currentDate, -1 * trend.get_ItemCount()));
        }
        else
        {
            // Get the fiscal calendar to calculate the right period
            calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

            // The above method throws the right exception if Fiscal calendars have not been setup
            if (calendarRecId)
            {
                firstDate = BIFiscalCalendarsHelper::getFirstDateOfPeriodFwd(calendarRecId, timePeriod, currentDate, trend.get_ItemCount());
            }
        }

        return firstDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsFiscalDateDimension</Name>
				<Source><![CDATA[
    private static boolean IsFiscalDateDimension(str measurementName, str dimensionName)
    {
        CLRObject metadataHelper = new MetadataHelper(AggregateMetadataHelper::MetadataProvider);
        return metadataHelper.IsFiscalPeriodDateDimension(measurementName, dimensionName, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a date range that has application logic processed for FiscalCalendars
    /// This method would returns dates in gregorian calendar format after processing application logic
    /// </summary>
    /// <param name = "timePeriodRange">A time period range</param>
    /// <returns>A date value range string or empty there is nothing to process</returns>
    private static str getDateRange(AxKPIRange timePeriodRange)
    {
        date firstDate;
        date lastDate;
        date firstPreviousDate;
        BITimePeriod timePeriod;
        str dateRange;
        RefRecId calendarRecId;

        if (timePeriodRange.get_Period() == Microsoft.Dynamics.AX.Metadata.Core.MetaModel.BIKPIFilterPeriod::Lag)
        {
            // Lag not supported for Fiscal
            throw error("@SYS91571");
        }

        utcdatetime utcCurrentDateTime = DateTimeUtil::utcNow();
        date utcCurrentDate = DateTimeUtil::date(utcCurrentDateTime);

        boolean isPreviousTimePeriod = timePeriodRange.get_Period() == Microsoft.Dynamics.AX.Metadata.Core.MetaModel.BIKPIFilterPeriod::Previous;
        timePeriod = System.Enum::Parse(timePeriod.GetType(), timeperiodRange.Attribute);
        if (timePeriod == BITimePeriod::Date_)
        {
            if (!isPreviousTimePeriod)
            {
                dateRange = BIFiscalCalendarsHelper::getDateFormatString(utcCurrentDate);
            }
            else
            {
                dateRange = BIFiscalCalendarsHelper::getDateFormatString(utcDateTime2SystemDateTime(DateTimeUtil::addDays(utcCurrentDate, -1)));
            }
        }
        else
        {
            // Get the fiscal calendar to calculate the right period
            calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

            // The above method throws the right exception if Fiscal calendars have not been setup
            if (calendarRecId)
            {
                RangeType filterType = enum2int(timePeriodRange.get_FilterType());

                boolean calculateToDate = (filterType == RangeType::TimePeriodToDate);

                //Get the first date of current period
                firstDate = BIFiscalCalendarsHelper::getFirstDateOfCurrentPeriod(calendarRecId, timePeriod, utcCurrentDate);

                if (calculateToDate)
                {
                    // last date is current date if calculating to date
                    lastDate = utcCurrentDate;
                }
                else
                {
                    // get last date of current period if not calculating to date
                    lastDate = BIFiscalCalendarsHelper::getLastDateOfCurrentPeriod(calendarRecId, timePeriod, utcCurrentDate);
                }

                // if previous period we need to do some more calculations based on current period
                if (isPreviousTimePeriod)
                {
                    firstPreviousDate = BIFiscalCalendarsHelper::getFirstDateOfPreviousPeriod(calendarRecId, timePeriod, utcCurrentDate);
                    if (firstPreviousDate != dateNull())
                    {
                        // Reset value of first date and last date to previous last date
                        lastDate = BIFiscalCalendarsHelper::getLastDateOfPreviousPeriod(firstDate, lastDate, firstPreviousDate, calculateToDate);
                        firstDate = firstPreviousDate;
                    }
                    else
                    {
                        // if there was no previous year in the calendar then we might not find firstPreviousDate
                        // Set first date and lastDate to null so that we return a range that returns no data 1900 .. 1900
                        firstDate = dateNull();
                        lastDate = dateNull();
                    }
                }

                dateRange = BIFiscalCalendarsHelper::getDateFormatString(firstDate) + ".." + BIFiscalCalendarsHelper::getDateFormatString(lastDate);
            }
        }

        // return empty if we didnt find a calendar or period, we would return the same range back
        return dateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDateOfCurrentPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last date of the current period for the given fiscal calendar and period
    /// </summary>
    /// <param name = "calendarRecId">The fiscal calendar to use</param>
    /// <param name = "timePeriod">The time period</param>
    /// <param name = "currentDate">The current date</param>
    /// <returns>The last date of the current period</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static date getLastDateOfCurrentPeriod(RefRecId calendarRecId, BITimePeriod timePeriod, date currentDate)
    {
        date lastDate;

        if (timePeriod == BITimePeriod::Year)
        {
            lastDate = FiscalCalendars::findLastDayofYear(calendarRecId, currentDate);
        }
        else if (timePeriod == BITimePeriod::Month)
        {
            lastDate = FiscalCalendars::findLastDayofMonth(calendarRecId, currentDate);
        }
        else if (timePeriod == BITimePeriod::Quarter)
        {
            lastDate = FiscalCalendars::findLastDayOfQuarter(calendarRecId, currentDate);
        }
        else if (timePeriod == BITimePeriod::Period)
        {
            lastDate = LedgerFiscalCalendar::findLastDayofPeriod(calendarRecId, currentDate);
        }

        return lastDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDateOfCurrentPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first date of the current period for the given fiscal calendar and period
    /// </summary>
    /// <param name = "calendarRecId">The fiscal calendar to use</param>
    /// <param name = "timePeriod">The time period</param>
    /// <param name = "currentDate">The current date</param>
    /// <returns>The first date of the current period</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static date getFirstDateOfCurrentPeriod(RefRecId calendarRecId, BITimePeriod timePeriod, date currentDate)
    {
        date firstDate;

        if (timePeriod == BITimePeriod::Year)
        {
            firstDate = FiscalCalendars::findFirstDayofYear(calendarRecId, currentDate);
        }
        else if (timePeriod == BITimePeriod::Month)
        {
            firstDate = FiscalCalendars::findFirstDayOfMonth(calendarRecId, currentDate);
        }
        else if (timePeriod == BITimePeriod::Quarter)
        {
            firstDate = FiscalCalendars::findFirstDayOfQuarter(calendarRecId, currentDate);
        }
        else if (timePeriod == BITimePeriod::Period)
        {
            firstDate = LedgerFiscalCalendar::findFirstDayofPeriod(calendarRecId, currentDate);
        }

        return firstDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDateOfPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last date of the previous period
    /// It is calculated as one day before the first date of current period if not ytd and firstdate of previous period plus days to date in current period if ytd
    /// </summary>
    /// <param name = "firstPreviousDate">The first date of previous period</param>
    /// <param name = "firstDate">The first date of current period</param>
    /// <param name = "lastDate">The current date</param>
    /// <param name = "toDate">Specifies whether to calculate period to date</param>
    /// <returns>The last of date of previous period</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static date getLastDateOfPreviousPeriod(date firstDate, date lastDate, date firstPreviousDate, boolean toDate)
    {
        utcdatetime firstDateUtc = DateTimeUtil::newDateTime(firstDate, 0);
        utcdatetime lastDateUtc =  DateTimeUtil::newDateTime(lastDate, 0);
        utcdatetime previousLastDateUtc;

        // Calculate last date based on if it was year to date or not
        // Note that if periods or years are not of same size period Todate functionality calculates the previous date to the number of days to date in the current period
        if (toDate)
        {
            utcdatetime previousDateUtc = DateTimeUtil::newDateTime(firstPreviousDate, 0);
            previousLastDateUtc = DateTimeUtil::addSeconds(previousDateUtc, DateTimeUtil::getDifference(lastDateUtc, firstDateUtc));
        }
        else
        {
            // Simply set the date before the first date of last period if not year to date
            // Assumption : periods are continuous which is the case in Fiscal calendars
            previousLastDateUtc = DateTimeUtil::addDays(firstDateUtc, -1);
        }

        return utcDateTime2SystemDateTime(previousLastDateUtc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDateOfPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first date of the previous period for the given fiscal calendar and period
    /// </summary>
    /// <param name = "calendarRecId">The fiscal calendar to use</param>
    /// <param name = "timePeriod">The time period</param>
    /// <param name = "currentDate">The current date</param>
    /// <returns>The first date of the previous period</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static date getFirstDateOfPreviousPeriod(RefRecId calendarRecId, BITimePeriod timePeriod, date currentDate)
    {
        date firstPreviousDate;

        if (timePeriod == BITimePeriod::Year)
        {
            FiscalCalendarYear previousYear = FiscalCalendars::findPrevYear(calendarRecId, currentDate);
            if (previousYear)
            {
                firstPreviousDate = previousYear.StartDate;
            }
        }
        else if (timePeriod == BITimePeriod::Month)
        {
            firstPreviousDate = LedgerFiscalCalendar::findStartDateMonthFwd(calendarRecId, currentDate, -1);
        }
        else if (timePeriod == BITimePeriod::Quarter)
        {
            firstPreviousDate = FiscalCalendars::findPrevQuarter(calendarRecId, currentDate);
        }
        else if (timePeriod == BITimePeriod::Period)
        {
            firstPreviousDate = FiscalCalendars::findPreviousPeriod(calendarRecId, currentDate);
        }

        return firstPreviousDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDateOfPeriodFwd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get first date of the period forward
    /// </summary>
    /// <param name = "calendarRecId">The fiscal calendar to use</param>
    /// <param name = "timePeriod">The time period</param>
    /// <param name = "currentDate">The current date</param>
    /// <param name = "periodToMove">The forward period count to move</param>
    /// <returns>The first date of the period forward</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static date getFirstDateOfPeriodFwd(RefRecId calendarRecId, BITimePeriod timePeriod, date currentDate, int periodToMove)
    {
        date firstPreviousDate;
        switch (timePeriod)
        {
            case BITimePeriod::Year:
                firstPreviousDate = FiscalCalendars::findStartDateYearFwd(calendarRecId, currentDate, -1 * periodToMove);
                break;
            case BITimePeriod::Month:
                firstPreviousDate = LedgerFiscalCalendar::findStartDateMonthFwd(calendarRecId, currentDate, -1 * periodToMove);
                break;
            case BITimePeriod::Quarter:
                firstPreviousDate = FiscalCalendars::findStartDateQuarterFwd(calendarRecId, currentDate, -1 * periodToMove);
                break;
            case BITimePeriod::Period:
                firstPreviousDate = LedgerFiscalCalendar::findStartDatePeriodFwd(calendarRecId, currentDate, -1 * periodToMove);
                break;
            default:
                throw error(strFmt('@BI:NotSupportedAttribute', timePeriod));
        }

        return firstPreviousDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFormatString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date string in a format that can be used in a BI query
    /// </summary>
    /// <param name = "dateTime">The dateTime to format</param>
    /// <returns>Returns a date string in YYYY-MM-DDT00:00:00 format</returns>
    private static str getDateFormatString(date dateTime)
    {
        System.DateTime clrDateTime;
        clrDateTime = new System.DateTime(year(dateTime), mthOfYr(dateTime), dayOfMth(dateTime), 0, 0, 0);
        return clrDateTime.ToString("s", System.Globalization.CultureInfo::InvariantCulture);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
