<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardBreakDownInvoiceToPaymentRunner</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CreditCardBreakDownInvoiceToPaymentRunner
{
    private CreditCardPaymentBreakDownTable creditCardPaymentBreakDownTable;
    private ICreditCardBreakDownStateMachineProvide creditCardBreakDownStateMachineProvider;
    private ICreditCardBreakDownStateMachine creditCardBreakDownStateMachine;
    private ICreditCardSalesOrderInvoiceToPaymentRecordAccess creditCardSalesOrderInvoiceToPaymentRecordAccessor;
    private ICreditCardBreakDownProcessProvide creditCardBreakDownProcessProvider;
    private CreditCardBreakDownCycleDetector cycleDetector;
    private CreditCardPaymentBreakDownLogger creditCardPaymentBreakDownLogger;
    private boolean isTTSLevelZero;
    private CreditCardPaymentBreakDownExecutionContextMode creditCardPaymentBreakDownExecutionContextMode;

    private const str EmptyGuidString = '{00000000-0000-0000-0000-000000000000}';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(RecId _recId, CreditCardPaymentBreakDownExecutionContextMode _creditCardPaymentBreakDownExecutionContextMode)
    {
        creditCardPaymentBreakDownExecutionContextMode = _creditCardPaymentBreakDownExecutionContextMode;
        creditCardPaymentBreakDownLogger = CreditCardPaymentBreakDownLogger::createLogger();
        using (var runActivityContext = creditCardPaymentBreakDownLogger.activityContext(CreditCardPaymentBreakDownInstrumentationConstants::CreditCardPaymentBreakDownRunProcess))
        {
            creditCardPaymentBreakDownTable = CreditCardPaymentBreakDownTable::findByRecId(_recId, true);
            if (!creditCardPaymentBreakDownTable.RecId)
            {
                creditCardPaymentBreakDownLogger.logError(strFmt('Fail to fetch break down table record %1', any2Str(_recId)));
                throw error("@CashManagement:CreditCardPaymentBreakDownSystemError");
            }
            cycleDetector = CreditCardBreakDownCycleDetector::construct();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CreditCardBreakDownInvoiceToPaymentRunner construct(RecId _recId, 
        CreditCardPaymentBreakDownExecutionContextMode _creditCardPaymentBreakDownExecutionContextMode = CreditCardPaymentBreakDownExecutionContextMode::CreditCardPaymentBreakDownExecutionContextModeUseLatest)
    {
        return new CreditCardBreakDownInvoiceToPaymentRunner(_recId, _creditCardPaymentBreakDownExecutionContextMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startWithPreCheck</Name>
				<Source><![CDATA[
    internal CreditCardPaymentExecutionId startWithPreCheck()
    {
        using (var runActivityContext = creditCardPaymentBreakDownLogger.activityContextWithCustomProperties(CreditCardPaymentBreakDownInstrumentationConstants::CreditCardPaymentBreakDownRunProcess))
        {
            isTTSLevelZero = appl.ttsLevel() == 0 ? true : false;
            runActivityContext.addCustomProperty(
                CreditCardPaymentBreakDownInstrumentationConstants::IsTTSLevelZero,
                creditCardPaymentBreakDownLogger.bool2str(isTTSLevelZero));
            if (!this.canProcessingStatusProceed(creditCardPaymentBreakDownTable.CreditCardPaymentProcessingStatus))
            {
                creditCardPaymentBreakDownLogger.logError(strFmt('Check failed when starting break down table record %1, wrong status', any2Str(creditCardPaymentBreakDownTable.RecId)));
                error("@CashManagement:CreditCardPaymentBreakDownSystemError"); 
                return str2Guid(EmptyGuidString);
            }

            CreditCardPaymentExecutionId creditCardPaymentExecutionId = this.generateExecutionID();
            if (!this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().preemptBreakDownTask(creditCardPaymentBreakDownTable, creditCardPaymentExecutionId))
            {
                creditCardPaymentBreakDownLogger.logError(strFmt('Check failed when starting break down table record %1, preempt failure', any2Str(creditCardPaymentBreakDownTable.RecId)));
                error("@CashManagement:CreditCardPaymentBreakDownSystemError");
                return str2Guid(EmptyGuidString);
            }
            creditCardPaymentBreakDownLogger.logInformation(strFmt('Check passed when starting break down table record %1', any2Str(creditCardPaymentBreakDownTable.RecId)));

            return creditCardPaymentExecutionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>triggerProcess</Name>
				<Source><![CDATA[
    internal boolean triggerProcess(CreditCardPaymentExecutionId _creditCardPaymentExecutionId)
    {
        using (var runActivityContext = creditCardPaymentBreakDownLogger.activityContextWithCustomProperties(CreditCardPaymentBreakDownInstrumentationConstants::CreditCardPaymentBreakDownRunProcess))
        {
            isTTSLevelZero = appl.ttsLevel() == 0 ? true : false;
            runActivityContext.addCustomProperty(
                CreditCardPaymentBreakDownInstrumentationConstants::IsTTSLevelZero,
                creditCardPaymentBreakDownLogger.bool2str(isTTSLevelZero));
            CreditCardPaymentExecutionId creditCardPaymentExecutionId = _creditCardPaymentExecutionId;
            if (!_creditCardPaymentExecutionId)
            {
                creditCardPaymentBreakDownLogger.logError(strFmt('Empty execution Id for break down table record %1', any2Str(creditCardPaymentBreakDownTable.RecId)));
                error("@CashManagement:CreditCardPaymentBreakDownSystemError");
                return false;
            }

            creditCardBreakDownStateMachine = this.getCreditCardBreakDownStateMachineProvider().getStateMachine();
            boolean res = creditCardBreakDownStateMachine.hasNext(creditCardPaymentBreakDownTable.CreditCardPaymentStatus);

            if (!res)
            {
                this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().updateTaskResult(creditCardPaymentBreakDownTable, creditCardPaymentBreakDownTable.CreditCardPaymentStatus, CreditCardBreakDownExecutionResult::ApplicationExeuctionSucceed);
                info("@CashManagement:CreditCardPaymentBreakDownProcessFinished");
                return true;
            }

            creditCardBreakDownProcessProvider = CreditCardBreakDownProcessProviderFactory::getBreakDownProcessProvider(creditCardPaymentBreakDownTable.CreditCardSalesOrderType);

            while (creditCardBreakDownStateMachine.hasNext(creditCardPaymentBreakDownTable.CreditCardPaymentStatus))
            {       
                CreditCardPaymentStatus nextStatus = creditCardBreakDownStateMachine.getNextStatus(creditCardPaymentBreakDownTable.CreditCardPaymentStatus);
                if (!this.validateStatus(nextStatus))
                {
                    creditCardPaymentBreakDownLogger.logError(strFmt('Wrong processing status for break down table record %1', any2Str(creditCardPaymentBreakDownTable.RecId)));
                    error(strFmt("@CashManagement:CreditCardPaymentBreakDownSystemErrorStage", nextStatus));
                    this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().updateTaskResult(creditCardPaymentBreakDownTable, nextStatus, CreditCardBreakDownExecutionResult::ApplicationExecutionExceptionOccured);
                    res = false;
                    break;
                }

                container dataPacked = this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().getBreakDownExecutionPacked(creditCardPaymentExecutionId);
                
                if (conLen(dataPacked) != this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().getContractNum())
                {
                    creditCardPaymentBreakDownLogger.logError(strFmt('Wrong container number for break down table record %1', any2Str(creditCardPaymentBreakDownTable.RecId)));
                    error("@CashManagement:CreditCardPaymentBreakDownSystemError");
                    this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().updateTaskResult(creditCardPaymentBreakDownTable, nextStatus, CreditCardBreakDownExecutionResult::ApplicationExecutionExceptionOccured);
                    res = false;
                    break;
                }

                ICreditCardBreakDownProcessRun creditCardBreakDownProcessRunner = creditCardBreakDownProcessProvider.getBreakDownProcessingProcessor(
                    nextStatus, 
                    conPeek(dataPacked, 1),
                    conPeek(dataPacked, 2),
                    conPeek(dataPacked, 3),
                    creditCardPaymentBreakDownTable.CreditCardPaymentOperation,
                    creditCardPaymentBreakDownExecutionContextMode);

                CreditCardBreakDownExecutionResult processResult = CreditCardBreakDownExecutionResult::ApplicationExecutionFailed;

                // pre-check.
                if (creditCardBreakDownProcessRunner.isIdempotencySupported() && this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().existInIdempotencyStore(creditCardBreakDownProcessRunner.getHashVal()))
                {
                    processResult = CreditCardBreakDownExecutionResult::ApplicationExeuctionSucceed;
                    creditCardPaymentBreakDownLogger.logInformation(strFmt('Bypass status %1 due to idempotency enabled for break down table record %2', enum2Str(nextStatus), any2Str(creditCardPaymentBreakDownTable.RecId)));
                }
                else
                {
                    int fromLine = infologLine();
                    utcdatetime startTime = DateTimeUtil::utcNow();

                    processResult = this.executeSingleProcessWithExecution(creditCardBreakDownProcessRunner);
                    this.logSingleProcessExecution(creditCardPaymentExecutionId, startTime, this.collectInfoLog(fromLine), creditCardPaymentBreakDownTable.RecId, creditCardBreakDownProcessRunner, processResult, classIdGet(creditCardBreakDownProcessRunner), nextStatus);

                    if (creditCardBreakDownProcessRunner.isIdempotencySupported() && processResult == CreditCardBreakDownExecutionResult::ApplicationExeuctionSucceed)
                    {
                        boolean ret = this.handleIdempotencyStore(creditCardBreakDownProcessRunner.getHashVal());
                        if (!ret)
                        {
                            creditCardPaymentBreakDownLogger.logError(strFmt('Fail to persist hash value for break down table record %1, status %2', 
                                any2Str(creditCardPaymentBreakDownTable.RecId),
                                enum2Str(nextStatus)));
                            error(strFmt("@CashManagement:CreditCardPaymentBreakDownSystemErrorStage", nextStatus));
                        }
                    }
                }
            
                boolean ret = this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().updateTaskResult(creditCardPaymentBreakDownTable, nextStatus, processResult);
                if (!ret)
                {
                    creditCardPaymentBreakDownLogger.logError(strFmt('Fail to update task status for break down table record %1, status %2',
                                any2Str(creditCardPaymentBreakDownTable.RecId),
                                enum2Str(nextStatus)));
                    error(strFmt("@CashManagement:CreditCardPaymentBreakDownSystemErrorStage", nextStatus));
                    res = false;
                    break;
                }
                else
                {
                    if (processResult != CreditCardBreakDownExecutionResult::ApplicationExeuctionSucceed)
                    {
                        res = false;
                        break;
                    }
                    creditCardPaymentBreakDownTable.reread();
                }
            }

            if (res)
            {
                boolean ret = this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().finishTask(creditCardPaymentBreakDownTable, CreditCardPaymentProcessingState::Processed);
                if (!ret)
                {
                    creditCardPaymentBreakDownLogger.logError(strFmt('Fail to update final status for break down table record %1', any2Str(creditCardPaymentBreakDownTable.RecId)));
                    error("@CashManagement:CreditCardPaymentBreakDownSystemError");
                    res = false;
                }
            }
            return res;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatus</Name>
				<Source><![CDATA[
    private boolean validateStatus(CreditCardPaymentStatus _paymentStatus)
    {
        return cycleDetector.registerEntry(_paymentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSingleProcessWithExecution</Name>
				<Source><![CDATA[
    private CreditCardBreakDownExecutionResult executeSingleProcessWithExecution(ICreditCardBreakDownProcessRun _processRun)
    {
        ICreditCardBreakDownExecute creditCardBreakDownExecutor = this.getRuntimeExecutorAndProcess(_processRun);
        if (!creditCardBreakDownExecutor)
        {
            error("@CashManagement:CreditCardPaymentBreakDownSystemError");
            return CreditCardBreakDownExecutionResult::ApplicationExecutionExceptionOccured;
        }
        return this.executeSingleProcessInternal(creditCardBreakDownExecutor, _processRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSingleProcessExecution</Name>
				<Source><![CDATA[
    private boolean logSingleProcessExecution(CreditCardPaymentExecutionId _creditCardPaymentExecutionId, utcdatetime _startTime, container _logResult, RecId _recId, ICreditCardBreakDownProcessRun _processRun, CreditCardBreakDownExecutionResult _creditCardBreakDownExecutionResult, ClassId _classId, CreditCardPaymentStatus _creditCardPaymentStatus)
    {
        if (_creditCardBreakDownExecutionResult == CreditCardBreakDownExecutionResult::ApplicationExeuctionSucceed)
        {
            return this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().logExecutionResult(_creditCardPaymentExecutionId, _startTime, DateTimeUtil::utcNow(), _logResult, _recId, _processRun.getSalesTablePacked(), _processRun.getCustInvoiceJourPacked(), _processRun.getMCRCustPaymTablePacked(), _creditCardBreakDownExecutionResult, _classId, _creditCardPaymentStatus);
        }
        return this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().logExecutionResult(_creditCardPaymentExecutionId, _startTime, DateTimeUtil::utcNow(), _logResult, _recId, conNull(), conNull(), conNull(), _creditCardBreakDownExecutionResult, _classId, _creditCardPaymentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuntimeExecutorAndProcess</Name>
				<Source><![CDATA[
    private ICreditCardBreakDownExecute getRuntimeExecutorAndProcess(ICreditCardBreakDownProcessRun _processRun)
    {
        return CreditCardBreakDownExecutorFactory::getExecutor(_processRun.getRunMode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSingleProcessInternal</Name>
				<Source><![CDATA[
    private CreditCardBreakDownExecutionResult executeSingleProcessInternal(ICreditCardBreakDownExecute _processExecute, ICreditCardBreakDownProcessRun _processRun)
    {
        CreditCardBreakDownExecutionResult processResult = CreditCardBreakDownExecutionResult::ApplicationExecutionFailed;
        try
        {
            processResult = this.executeBreakDownStep(_processExecute, _processRun);
        }
        catch (Exception::CLRerror)
        {
            processResult = CreditCardBreakDownExecutionResult::ApplicationExecutionExceptionOccured;
        }
        catch (Exception::Error)
        {
            processResult = CreditCardBreakDownExecutionResult::ApplicationExecutionExceptionOccured;
        }
        catch
        {
            processResult = CreditCardBreakDownExecutionResult::ApplicationExecutionExceptionOccured;
        }
        return processResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeBreakDownStep</Name>
				<Source><![CDATA[
    private CreditCardBreakDownExecutionResult executeBreakDownStep(ICreditCardBreakDownExecute _processExecute, ICreditCardBreakDownProcessRun _processRun)
    {
        return _processExecute.execute(_processRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectInfoLog</Name>
				<Source><![CDATA[
    private container collectInfoLog(int _fromLine)
    {
        return CreditCardInfoLogHelper::purgeInfoLogMessage(_fromLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleIdempotencyStore</Name>
				<Source><![CDATA[
    private boolean handleIdempotencyStore(CreditCardPaymentBreakDownExecutionHashVal _hashVal)
    {
        return this.getCreditCardSalesOrderInvoiceToPaymentRecordAccess().registerIdempotencyStore(_hashVal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessingStatusProceed</Name>
				<Source><![CDATA[
    private boolean canProcessingStatusProceed(CreditCardPaymentProcessingState _creditCardPaymentProcessingStatus)
    {
        boolean ret;

        switch (_creditCardPaymentProcessingStatus)
        {
            case CreditCardPaymentProcessingState::NotStarted:
            case CreditCardPaymentProcessingState::StopOnerror:
            case CreditCardPaymentProcessingState::StopOnException:
                ret = true;
                break;
            case CreditCardPaymentProcessingState::InProcess:
                ret = !creditCardPaymentBreakDownTable.isInActiveBatchJob();
                break;
            case CreditCardPaymentProcessingState::Processed:
            case CreditCardPaymentProcessingState::Terminated:
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardBreakDownStateMachineProvider</Name>
				<Source><![CDATA[
    private ICreditCardBreakDownStateMachineProvide getCreditCardBreakDownStateMachineProvider()
    {
        if (!creditCardBreakDownStateMachineProvider)
        {
            creditCardBreakDownStateMachineProvider = CreditCardBreakDownStateMachineFactory::getBreakDownStateMachineProvider(creditCardPaymentBreakDownTable.CreditCardSalesOrderType);
        }
                return creditCardBreakDownStateMachineProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardSalesOrderInvoiceToPaymentRecordAccess</Name>
				<Source><![CDATA[
    private ICreditCardSalesOrderInvoiceToPaymentRecordAccess getCreditCardSalesOrderInvoiceToPaymentRecordAccess()
    {
        if (!creditCardSalesOrderInvoiceToPaymentRecordAccessor)
        {
            creditCardSalesOrderInvoiceToPaymentRecordAccessor = CreditCardSalesOrderInvoiceToPaymentRecordAccessorFactory::getCreditCardSalesOrderInvoiceToPaymentRecordAccess();
        }
        return creditCardSalesOrderInvoiceToPaymentRecordAccessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateExecutionID</Name>
				<Source><![CDATA[
    private CreditCardPaymentExecutionId generateExecutionID()
    {
        return newGuid();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>