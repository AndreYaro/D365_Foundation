<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPOFirmKanbanUpdatePlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqTransPOFirmKanbanUpdatePlan</c> class updates the requirement profile based on created kanbans done in another plan.
/// </summary>
/// <remarks>
/// This class will be used when a planned kanban is firmed in one plan and the same changes should be applied in another plan.
/// </remarks>
class ReqTransPOFirmKanbanUpdatePlan extends ReqTransPOFirmKanban
{
    RecordSortedList        reqTransSortedListSourcePlan;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies a <c>ReqTrans</c> records from one plan into another plan.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>RecordSortedList</c> class that holds inserted <c>ReqTrans</c> records.
    /// </returns>
    protected RecordSortedList copyReqTrans()
    {
        ReqTrans                reqTransKanbanSourcePlan;
        ReqTrans                reqTransKanbanTargetPlan;

        RecordSortedList        reqTransSortedListTargetPlan;
        boolean                 moreRecords;

        reqTransSortedListTargetPlan = this.initReqTransSortedList();

        moreRecords = reqTransSortedListSourcePlan.first(reqTransKanbanSourcePlan);

        while (moreRecords)
        {
            reqTransKanbanTargetPlan.data(reqTransKanbanSourcePlan);

            reqTransKanbanTargetPlan.PlanVersion    = reqPO.PlanVersion;
            reqTransKanbanTargetPlan.RecId          = 0;
            reqTransKanbanTargetPlan.CovQty         = 0;
            reqTransSortedListTargetPlan.ins(reqTransKanbanTargetPlan);

            moreRecords = reqTransSortedListSourcePlan.next(reqTransKanbanSourcePlan);
        }

        reqTransSortedListTargetPlan.insertDatabase();

        return reqTransSortedListTargetPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firmReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the requirement profile.
    /// </summary>
    protected void firmReqPO()
    {
        RecordSortedList                reqTransSortedList;     // RecordSortedList of reqTrans records representing the created kanban(s) and picking list.

        if (reqPlanData.useMovements())
        {
            reqTransSortedList = this.copyReqTrans();
            this.updatePegging(reqTransSortedList);
        }

        this.deleteReqPO();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqTransSortedListSourcePlan</Name>
				<Source><![CDATA[
        public RecordSortedList parmReqTransSortedListSourcePlan(RecordSortedList _reqTransSortedListSourcePlan = reqTransSortedListSourcePlan)
    {
        reqTransSortedListSourcePlan = _reqTransSortedListSourcePlan;

        return reqTransSortedListSourcePlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified parameters are correct.
    /// </summary>
    /// <returns>
    ///    true if the parameters are correct; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        if (! reqPO)
        {
            return checkFailed(strfmt("@SYS89866","@SYS8597"));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
        private static ReqTransPOFirmKanbanUpdatePlan contruct()
    {
        return new ReqTransPOFirmKanbanUpdatePlan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ReqTransPOFirmKanbanUpdatePlan</c> class.
    /// </summary>
    /// <param name="_reqPO">
    ///    A <c>ReqPO</c> record that represents a planned kanban.
    /// </param>
    /// <param name="_reqTransSortedList">
    ///    An instance of the <c>RecordSortedList</c> class that holds the <c>ReqTrans</c> records that must
    ///    be created in the plan of the specified planned order.
    /// </param>
    /// <returns>
    ///    An instance of the <c>ReqTransPOFirmKanban</c> class.
    /// </returns>
    public static ReqTransPOFirmKanbanUpdatePlan newParameters(
        ReqPO               _reqPO,
        RecordSortedList    _reqTransSortedList)
    {
        ReqTransPOFirmKanbanUpdatePlan    reqTransPOFirmKanbanUpdatePlan;

        reqTransPOFirmKanbanUpdatePlan = ReqTransPOFirmKanbanUpdatePlan::contruct();
        reqTransPOFirmKanbanUpdatePlan.parmReqPO(_reqPO);
        reqTransPOFirmKanbanUpdatePlan.parmReqTransSortedListSourcePlan(_reqTransSortedList);

        return reqTransPOFirmKanbanUpdatePlan;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>