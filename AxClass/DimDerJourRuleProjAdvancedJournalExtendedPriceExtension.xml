<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerJourRuleProjAdvancedJournalExtendedPriceExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Dimension derivation journalizing rule extension for project advanced journals.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccJourRuleProjAdvancedJournalExtendedPrice))]
class DimDerJourRuleProjAdvancedJournalExtendedPriceExtension extends DimensionDerivationRuleExtension
{
    ProjAdvancedJournal     projAdvancedJournal;
    ProjAdvancedJournalLine projAdvancedJournalLine;
    private TaxDirection taxDirection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultDimensionAllocation</Name>
				<Source><![CDATA[
    private LedgerDimensionAllocation getDefaultDimensionAllocation()
    {
        LedgerDimensionAccount ledgerDimensionAccount;

        switch (projAdvancedJournalLine.TransType)
        {
            case (ProjTransType::Hour):
                ledgerDimensionAccount = ProjAdvancedJournalLine::getLedgerDimensionAccountForHour(projAdvancedJournalLine, 
                    dimensionDerivationRule.parmAccountingRule().parmAccountingdistribution().RecId);
                break;

            case (ProjTransType::Cost):
                ledgerDimensionAccount = ProjAdvancedJournalLine::getLedgerDimensionAccountForCost(projAdvancedJournalLine);
                break;
            
            case (ProjTransType::Item):
                ledgerDimensionAccount = ProjAdvancedJournalLine::getLedgerDimensionAccountForItem(ProjAdvancedJournalLine,
                    dimensionDerivationRule.parmAccountingRule().parmAccountingdistribution().RecId);
                break;
        }

        DebitCredit side = dimensionDerivationRule.parmAccountingRule().parmSide();
        boolean oppositeAccount = true;

        LedgerDimensionAllocation ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimensionAccount,
                                                                                 1,
                                                                                 side,
                                                                                 oppositeAccount);

        return ledgerDimensionAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the dimension derivation rule extension.
    /// </summary>
    public void initialize()
    {
        super();

        SourceDocumentLineItem sourceDocumentLineItem = dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem();
        SourceDocumentLineRecId sourceDocumentLineRecId;

        if (sourceDocumentLineItem is SourceDocumentLineItemITax)
        {
            sourceDocumentLineRecId = sourceDocumentLineItem.parmParentSourceDocumentLine().RecId;
            SourceDocumentLineItemITax iTax = sourceDocumentLineItem as SourceDocumentLineItemITax;
            taxDirection = iTax.parmTaxDirection();
        }
        else
        {
            sourceDocumentLineRecId = sourceDocumentLineItem.parmSourceDocumentLine().RecId;
        }

        projAdvancedJournalLine = ProjAdvancedJournalLine::findBySourceDocumentLine(sourceDocumentLineRecId);;
        projAdvancedJournal = projAdvancedJournalLine.getProjAdvancedJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates an allocation list that is based on project or resource setup.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///     The allocation list that is to be populated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        // This extension class doesn't have any logic to correctly determine ledger for UseTax scenario.
        // Tax related class would populate this list, so it should not be populated here.
        if (taxDirection == TaxDirection::UseTax && ProjAdvancedJournalUseTaxFlight::instance().isEnabled())
        {
            return;
        }

        _ledgerDimensionAllocationList.addEnd(this.getDefaultDimensionAllocation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to dimension derivation rule extension events.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>