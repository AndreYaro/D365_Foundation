<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetFixedAssetV2Validator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class AssetFixedAssetV2Validator
{
    DMFDefinitionGroupExecution dixfGroup;
    AssetFixedAssetV2EntityLogTmp entityLog;

    private str error;
    private FieldName fieldNameStaging;
    private Common mainTable;
    private FieldName fieldNameMainTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static AssetFixedAssetV2Validator construct(DMFDefinitionGroupExecution _dixfGroup)
    {
        AssetFixedAssetV2Validator validator = new AssetFixedAssetV2Validator();

        validator.dixfGroup = _dixfGroup;

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal static void validate(DMFDefinitionGroupExecution _dixfGroup)
    {
        AssetFixedAssetV2Validator validator = AssetFixedAssetV2Validator::construct(_dixfGroup);

        ttsbegin;

        validator.validateAndLogAssetGroup();
        validator.validateAndLogAssetNumber();
        validator.validateAndLogAssetSorting();
        validator.validateAndLogAssetActivityCode();
        validator.validateAndLogAssetCondition();
        validator.validateAndLogAssetPropertyGroup();
        validator.validateAndLogAssetNameLength();
        
        validator.processErrors();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndLogAssetGroup</Name>
				<Source><![CDATA[
    private void validateAndLogAssetGroup()
    {
        this.error = "@FixedAssets:FA_ErrorMessage_AssetGroupDoesNotExist";
        this.fieldNameStaging = fieldStr(AssetFixedAssetV2Staging, FixedAssetGroupId);
        AssetGroup assetGroup;
        this.mainTable = assetGroup;
        this.fieldNameMainTable = fieldStr(AssetGroup, GroupId);

        this.validateAndLogNotExistsInMainTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndLogAssetNumber</Name>
				<Source><![CDATA[
    private void validateAndLogAssetNumber()
    {
        this.error = "@FixedAssetEntity:FA_ErrorMessage_AssetIdExist";
        this.fieldNameStaging = fieldStr(AssetFixedAssetV2Staging, FixedAssetNumber);

        this.validateAndLogDuplicates();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndLogAssetSorting</Name>
				<Source><![CDATA[
    private void validateAndLogAssetSorting()
    {
        if (this.isAssetSortingValidationNeeded())
        {
            this.validationOfAssetSorting();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetSortingValidationNeeded</Name>
				<Source><![CDATA[
    private boolean isAssetSortingValidationNeeded()
    {
        AssetSorting assetSorting;

        return !this.isEntityAssetSortingFieldsEmpty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEntityAssetSortingFieldsEmpty</Name>
				<Source><![CDATA[
    private boolean isEntityAssetSortingFieldsEmpty()
    {
        AssetFixedAssetV2Staging staging;

        select firstonly RecId from staging
            where staging.SortField1Id != ''
                || staging.SortField2Id != ''
                || staging.SortField3Id != '';

        return staging.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validationOfAssetSorting</Name>
				<Source><![CDATA[
    private void validationOfAssetSorting()
    {
        this.error = "@FixedAssetEntity:FA_ErrorMessage_AssetSortingFieldNotExist";

        this.fieldNameStaging = fieldStr(AssetFixedAssetV2Staging, SortField1Id);
        this.validateAssetSortingField();

        this.fieldNameStaging = fieldStr(AssetFixedAssetV2Staging, SortField2Id);
        this.validateAssetSortingField();

        this.fieldNameStaging = fieldStr(AssetFixedAssetV2Staging, SortField3Id);
        this.validateAssetSortingField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetSortingField</Name>
				<Source><![CDATA[
    private void validateAssetSortingField()
    {
        AssetSorting assetSorting;
        this.mainTable = assetSorting;
        this.fieldNameMainTable = fieldStr(AssetSorting, SortingId);

        this.validateAndLogNotExistsInMainTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndLogAssetActivityCode</Name>
				<Source><![CDATA[
    private void validateAndLogAssetActivityCode()
    {
        this.error = "@FixedAssetEntity:FA_ErrorMessage_ActivityCodeNotExist";
        this.fieldNameStaging = fieldStr(AssetFixedAssetV2Staging, ActivityCode);
        AssetActivityCode assetActivityCode;
        this.mainTable = assetActivityCode;
        this.fieldNameMainTable = fieldStr(AssetActivityCode, AssetActivityCode);

        this.validateAndLogNotExistsInMainTableIfNeeded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndLogAssetCondition</Name>
				<Source><![CDATA[
    private void validateAndLogAssetCondition()
    {
        this.error = "@FixedAssetEntity:FA_ErrorMessage_AssetConditionNotExist";
        this.fieldNameStaging = fieldStr(AssetFixedAssetV2Staging, AssetConditionId);
        AssetCondition assetCondition;
        this.mainTable = assetCondition;
        this.fieldNameMainTable = fieldStr(AssetCondition, Condition);

        this.validateAndLogNotExistsInMainTableIfNeeded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndLogAssetPropertyGroup</Name>
				<Source><![CDATA[
    private void validateAndLogAssetPropertyGroup()
    {
        this.error = "@FixedAssetEntity:FA_ErrorMessage_AssetPropertyGroupNotExist";
        this.fieldNameStaging = fieldStr(AssetFixedAssetV2Staging, PropertyGroupId);
        AssetPropertyGroup assetPropertyGroup;
        this.mainTable = assetPropertyGroup;
        this.fieldNameMainTable = fieldStr(AssetPropertyGroup, AssetPropertyGroup);

        this.validateAndLogNotExistsInMainTableIfNeeded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndLogNotExistsInMainTable</Name>
				<Source><![CDATA[
    internal void validateAndLogNotExistsInMainTable()
    {
        this.buildAndExecuteNotExistsStatement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndLogNotExistsInMainTableIfNeeded</Name>
				<Source><![CDATA[
    internal void validateAndLogNotExistsInMainTableIfNeeded()
    {
        if (this.isValidationNeeded())
        {
            this.buildAndExecuteNotExistsStatement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndLogDuplicates</Name>
				<Source><![CDATA[
    internal void validateAndLogDuplicates()
    {
        SysDaInsertObject insertEntityLogObject = this.buildEntityLogInsertObject();

        SysDaQueryObject stagingQuery = this.buildStagingValidationQuery();

        stagingQuery.joinClause(
            SysDaJoinKind::InnerJoin,
            this.buildDuplicatesValidationQuery(stagingQuery.table()));

        this.executeInsertStatement(insertEntityLogObject, stagingQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndLogAssetNameLength</Name>
				<Source><![CDATA[
    private void validateAndLogAssetNameLength()
    {
        if (!AssetNameLengthLimitFlight::instance().isEnabled())
        {
            SysDictTable sysDictEntityLog = new SysDictTable(tableNum(AssetFixedAssetV2EntityLogTmp));        
            str entityLogEntityRecId = sysDictEntityLog.fieldObject(fieldNum(AssetFixedAssetV2EntityLogTmp, AssetFixedAssetEntityRecId)).name(DbBackend::Sql);
            str entityLogErrorMessage = sysDictEntityLog.fieldObject(fieldNum(AssetFixedAssetV2EntityLogTmp, ErrorMessage)).name(DbBackend::Sql);
            str entityLogFieldName = sysDictEntityLog.fieldObject(fieldNum(AssetFixedAssetV2EntityLogTmp, FieldName)).name(DbBackend::Sql);
            str entityLogPartition = sysDictEntityLog.fieldObject(fieldNum(AssetFixedAssetV2EntityLogTmp, Partition)).name(DbBackend::Sql);

            SysDictTable sysDictStaging = new SysDictTable(tableNum(AssetFixedAssetV2Staging));
            str stagingTableName = sysDictStaging.name(DbBackend::Sql);
            str stagingRecId = sysDictStaging.fieldObject(fieldNum(AssetFixedAssetV2Staging, RecId)).name(DbBackend::Sql);
            str stagingPartition = sysDictStaging.fieldObject(fieldNum(AssetFixedAssetV2Staging, Partition)).name(DbBackend::Sql);
            str stagingDefinitionGroup = sysDictStaging.fieldObject(fieldNum(AssetFixedAssetV2Staging, DefinitionGroup)).name(DbBackend::Sql);
            str stagingExecutionId = sysDictStaging.fieldObject(fieldNum(AssetFixedAssetV2Staging, ExecutionId)).name(DbBackend::Sql);
            str stagingTransferStatus = sysDictStaging.fieldObject(fieldNum(AssetFixedAssetV2Staging, TransferStatus)).name(DbBackend::Sql);
            str stagingName = sysDictStaging.fieldObject(fieldNum(AssetFixedAssetV2Staging, Name)).name(DbBackend::Sql);

            str sqlStatementText = strFmt(@"
                INSERT INTO %1
                    (%2, %3, %4, %5)
                SELECT %6, @ERRORMESSAGE, @FIELDNAME, %7
                    FROM %8
                    WHERE %7 = @PARTITION
                        AND %9 = @DEFINITIONGROUP
                        AND %10 = @EXECUTIONID
                        AND (%11 = @TRANSFERSTATUSNOTPROCESSED OR %11 = @TRANSFERSTATUSVALIDATED)
                        AND LEN(%12) > @ASSETNAMELIMIT", 
                entityLog.getPhysicalTableName(),
                entityLogEntityRecId,
                entityLogErrorMessage,
                entityLogFieldName,
                entityLogPartition,
                stagingRecId,
                stagingPartition,
                stagingTableName,
                stagingDefinitionGroup,
                stagingExecutionId,
                stagingTransferStatus,
                stagingName);
        
            Map paramMap = SqlParams::create();
            paramMap.add('PARTITION', getCurrentPartitionRecId());
            paramMap.add('DEFINITIONGROUP', dixfGroup.DefinitionGroup);
            paramMap.add('EXECUTIONID', dixfGroup.ExecutionId);
            paramMap.add('TRANSFERSTATUSNOTPROCESSED', enum2int(DMFTransferStatus::NotStarted));
            paramMap.add('TRANSFERSTATUSVALIDATED', enum2int(DMFTransferStatus::Validated));
            paramMap.add('ASSETNAMELIMIT', AssetConstants::AssetNameMaxLength);
            paramMap.add('ERRORMESSAGE', strFmt("@FixedAssets:ErrorFixedAssetNameTooLong", AssetConstants::AssetNameMaxLength));
            paramMap.add('FIELDNAME', fieldStr(AssetFixedAssetV2Staging, Name));

            var connection = new Connection();
            Statement statement = connection.createStatement();
            statement.executeUpdateWithParameters(sqlStatementText, paramMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAndExecuteNotExistsStatement</Name>
				<Source><![CDATA[
    internal void buildAndExecuteNotExistsStatement()
    {
        SysDaInsertObject insertEntityLogObject = this.buildEntityLogInsertObject();

        SysDaQueryObject stagingQuery = this.buildStagingValidationQuery();

        stagingQuery.joinClause(
            SysDaJoinKind::NotExistsJoin,
            this.buildNotExistsValidationQuery(stagingQuery.table()));

        this.executeInsertStatement(insertEntityLogObject, stagingQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processErrors</Name>
				<Source><![CDATA[
    internal void processErrors()
    {
        AssetFixedAssetV2EntityDMFLogHelper::processErrors(entityLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidationNeeded</Name>
				<Source><![CDATA[
    private boolean isValidationNeeded()
    {
        return !this.isFieldEmpty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldEmpty</Name>
				<Source><![CDATA[
    private boolean isFieldEmpty()
    {
        AssetFixedAssetV2Staging staging;

        SysDaQueryObject queryObject = new SysDaQueryObject(staging);
        queryObject.firstOnlyHint = true;

        queryObject.projection()
            .add(fieldStr(AssetFixedAssetV2Staging, RecId));

        queryObject.WhereClause(new SysDaNotEqualsExpression(
            new SysDaFieldExpression(staging, fieldNameStaging),
            new SysDaValueExpression('')));

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.find(new SysDaFindObject(queryObject));

        return staging.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEntityLogInsertObject</Name>
				<Source><![CDATA[
    private SysDaInsertObject buildEntityLogInsertObject()
    {
        SysDaInsertObject insertEntityLogObject = new SysDaInsertObject(entityLog);

        insertEntityLogObject.fields()
            .add(fieldStr(AssetFixedAssetV2EntityLogTmp, AssetFixedAssetEntityRecId))
            .add(fieldStr(AssetFixedAssetV2EntityLogTmp, ErrorMessage))
            .add(fieldStr(AssetFixedAssetV2EntityLogTmp, FieldName));

        return insertEntityLogObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStagingValidationQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildStagingValidationQuery()
    {
        AssetFixedAssetV2Staging staging;

        SysDaQueryObject stagingQuery = new SysDaQueryObject(staging);

        stagingQuery.projection()
            .Add(fieldStr(AssetFixedAssetV2Staging, RecId))
            .AddValue(error)
            .AddValue(fieldNameStaging);

        stagingQuery.WhereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(staging, fieldStr(AssetFixedAssetV2Staging, DefinitionGroup)),
                new SysDaFieldExpression(dixfGroup, fieldStr(DMFDefinitionGroupExecution, DefinitionGroup)))
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(staging, fieldStr(AssetFixedAssetV2Staging, ExecutionId)),
                    new SysDaFieldExpression(dixfGroup, fieldStr(DMFDefinitionGroupExecution, ExecutionId))))
            .and(new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(staging, fieldNameStaging),
                    new SysDaValueExpression('')))
            .and(new SysDaOrExpression(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(staging, fieldStr(AssetFixedAssetV2Staging, TransferStatus)),
                    new SysDaValueExpression(DMFTransferStatus::NotStarted)),
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(staging, fieldStr(AssetFixedAssetV2Staging, TransferStatus)),
                    new SysDaValueExpression(DMFTransferStatus::Validated)))));

        return stagingQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNotExistsValidationQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildNotExistsValidationQuery(AssetFixedAssetV2Staging _staging)
    {
        SysDaQueryObject assetPropertyGroupQuery = new SysDaQueryObject(mainTable);

        assetPropertyGroupQuery.WhereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(mainTable, fieldNameMainTable),
                new SysDaFieldExpression(_staging, fieldNameStaging)));

        return assetPropertyGroupQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDuplicatesValidationQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildDuplicatesValidationQuery(AssetFixedAssetV2Staging _staging)
    {
        AssetFixedAssetV2Staging fixedAssetStaging;

        SysDaQueryObject fixedAssetStagingQuery = new SysDaQueryObject(fixedAssetStaging);

        fixedAssetStagingQuery.WhereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(fixedAssetStaging, fieldStr(AssetFixedAssetV2Staging, DefinitionGroup)),
                new SysDaFieldExpression(dixfGroup, fieldStr(DMFDefinitionGroupExecution, DefinitionGroup)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(fixedAssetStaging, fieldStr(AssetFixedAssetV2Staging, ExecutionId)),
                new SysDaFieldExpression(dixfGroup, fieldStr(DMFDefinitionGroupExecution, ExecutionId))))
            .and(new SysDaOrExpression(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(fixedAssetStaging, fieldStr(AssetFixedAssetV2Staging, TransferStatus)),
                    new SysDaValueExpression(DMFTransferStatus::NotStarted)),
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(fixedAssetStaging, fieldStr(AssetFixedAssetV2Staging, TransferStatus)),
                    new SysDaValueExpression(DMFTransferStatus::Validated))))
            .and(new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(_staging, fieldStr(AssetFixedAssetV2Staging, RecId)),
                    new SysDaFieldExpression(fixedAssetStaging, fieldStr(AssetFixedAssetV2Staging, RecId))))
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_staging, fieldNameStaging),
                    new SysDaFieldExpression(fixedAssetStaging, fieldNameStaging))));

        return fixedAssetStagingQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeInsertStatement</Name>
				<Source><![CDATA[
    private void executeInsertStatement(SysDaInsertObject _insertObject, SysDaQueryObject _query)
    {
        _insertObject.query(_query);

        SysDaInsertStatement insertStmt = new SysDaInsertStatement();
        insertStmt.insert(_insertObject);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>