<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalExcelTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Office;

/// <summary>
/// The class <c>LedgerJournalExcelTemplate</c> contains helper methods for Journal excel templates.
/// </summary>
public class LedgerJournalExcelTemplate
{
    private const GlobalObjectCacheScope LedgerJournalExcelTemplatesCacheScope = 'LedgerJournalExcelTemplatesCacheScope';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isJournalTypeSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value indicating whether the journal type has an excel template which supports it.
    /// </summary>
    /// <param name = "_ledgerJournalType">The <c>LedgerJournalType</c> value.</param>
    /// <returns>True if an excel template exists for the journal type; otherwise, false.</returns>
    public static boolean isJournalTypeSupported(LedgerJournalType _ledgerJournalType)
    {
        Set journalTemplates = LedgerJournalExcelTemplate::getLedgerJournalExcelTemplates();
        boolean isSupported = false;

        Set isSupportedSet;
        const str CacheKey = 'LedgerJournalType';

        container cachedValue = LedgerJournalExcelTemplate::getCacheValue(LedgerJournalExcelTemplatesCacheScope, CacheKey);

        if (cachedValue == conNull())
        {
            isSupportedSet = LedgerJournalExcelTemplate::getSupportedJournalTypeCollection(journalTemplates, _ledgerJournalType, isSupported);
            
            LedgerJournalExcelTemplate::insertCacheValue(LedgerJournalExcelTemplatesCacheScope, CacheKey, isSupportedSet.pack());
        }
        else
        {
            isSupportedSet = Set::create(cachedValue);
        }

        SetEnumerator journalTemplateEnumerator = isSupportedSet.getEnumerator();
        
        if (journalTemplateEnumerator.moveNext())
        {
            isSupported = journalTemplateEnumerator.current();
        }

        return isSupported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupportedJournalTypeCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of Boolean values indicating whether the journal type has an excel template which supports it.
    /// </summary>
    /// <param name = "_journalTemplates">The <c>Set</c> instance.</param>
    /// <param name = "_ledgerJournalType">The <c>LedgerJournalType</c> value.</param>
    /// <param name = "_isSupported">The boolean value checks whether journal type supported.</param>
    /// <returns>The collection of Boolean values</returns>
    private static Set getSupportedJournalTypeCollection(Set _journalTemplates, LedgerJournalType _ledgerJournalType, boolean _isSupported)
    {
        boolean isSupported = _isSupported;

        SetEnumerator journalTemplateEnumerator = _journalTemplates.getEnumerator();

        Set set = new Set(Types::AnyType);

        while (journalTemplateEnumerator.moveNext())
        {
            SysDictClass sysDictClass = new SysDictClass(journalTemplateEnumerator.current());

            if (!sysDictClass.isInterface())
            {
                LedgerIJournalExcelTemplate template = sysDictClass.makeObject();

                if (template.isJournalTypeSupported(_ledgerJournalType))
                {
                    isSupported = true;
                    set.add(isSupported);
                    break;
                }
            }
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalExcelTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of class ids which implement the <c>LedgerIJournalExcelTemplate</c> interface.
    /// </summary>
    /// <returns>The collection of implemented class ids.</returns>
    public static Set getLedgerJournalExcelTemplates()
    {
        Set ledgerJournalExcelTemplates;
        const str CacheKey = 'LedgerJournalExcelTemplates';

        container cachedValue = LedgerJournalExcelTemplate::getCacheValue(LedgerJournalExcelTemplatesCacheScope, CacheKey);

        if (cachedValue == conNull())
        {
            ledgerJournalExcelTemplates = SysDictClass::getImplements(classNum(LedgerIJournalExcelTemplate));

            LedgerJournalExcelTemplate::insertCacheValue(LedgerJournalExcelTemplatesCacheScope, CacheKey, ledgerJournalExcelTemplates.pack());
        }
        else
        {
            ledgerJournalExcelTemplates = Set::create(cachedValue);
        }

        return ledgerJournalExcelTemplates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalExcelTemplatesForJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of document template names for the <c>LedgerJournalType</c>.
    /// </summary>
    /// <param name = "_journalType">
    /// The <c>LedgerJournalType.</c>
    /// </param>
    /// <returns>The collection of document template ids.</returns>
    public static Set getLedgerJournalExcelTemplatesForJournalType(LedgerJournalType _journalType)
    {
        Set ledgerJournalExcelTemplatesForType;
        str cacheKey = strFmt('LedgerJournalExcelTemplates_%1', _journalType);

        container cachedValue = LedgerJournalExcelTemplate::getCacheValue(LedgerJournalExcelTemplatesCacheScope, cacheKey);

        if (cachedValue == conNull())
        {
            Set journalTemplates = LedgerJournalExcelTemplate::getLedgerJournalExcelTemplates();
            SetEnumerator journalTemplateEnumerator = journalTemplates.getEnumerator();
            ledgerJournalExcelTemplatesForType = new Set(Types::String);

            while (journalTemplateEnumerator.moveNext())
            {
                SysDictClass sysDictClass = new SysDictClass(journalTemplateEnumerator.current());

                if (!sysDictClass.isInterface())
                {
                    LedgerIJournalExcelTemplate template = sysDictClass.makeObject();

                    if (template.isJournalTypeSupported(_journalType))
                    {
                        ledgerJournalExcelTemplatesForType.add(template.documentTemplateName());
                    }
                }
            }

            LedgerJournalExcelTemplate::insertCacheValue(LedgerJournalExcelTemplatesCacheScope, cacheKey, ledgerJournalExcelTemplatesForType.pack());
        }
        else
        {
            ledgerJournalExcelTemplatesForType = Set::create(cachedValue);
        }

        return ledgerJournalExcelTemplatesForType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForTemplateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of an <c>LedgerIJournalExcelTemplate</c> from the template name.
    /// </summary>
    /// <param name = "_documentTemplateName">The document template name.</param>
    /// <returns>The <c>LedgerIJournalExcelTemplate</c> instance.</returns>
    public static LedgerIJournalExcelTemplate constructForTemplateName(DocuTemplateName _documentTemplateName)
    {
        LedgerIJournalExcelTemplate ledgerIJournalExcelTemplate;
        Set journalTemplates = LedgerJournalExcelTemplate::getLedgerJournalExcelTemplates();

        SetEnumerator journalTemplateEnumerator = journalTemplates.getEnumerator();

        while (journalTemplateEnumerator.moveNext())
        {
            SysDictClass sysDictClass = new SysDictClass(journalTemplateEnumerator.current());

            if (!sysDictClass.isInterface())
            {
                ledgerIJournalExcelTemplate = sysDictClass.makeObject();

                if (ledgerIJournalExcelTemplate.documentTemplateName() == _documentTemplateName)
                {
                    break;
                }
            }
        }

        return ledgerIJournalExcelTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterMapForTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a filter collection to apply to the template.
    /// </summary>
    /// <param name = "_excelTemplate">The <c>LedgerIJournalExcelTemplate</c>instance.</param>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> record.</param>
    /// <returns>A map with filter instructions for the header and line entity.</returns>
    public static Map getFilterMapForTemplate(
        LedgerIJournalExcelTemplate _excelTemplate,
        LedgerJournalTable _ledgerJournalTable)
    {
        Map filtersToApply = new Map(Types::String, Types::Class);

        ExportToExcelFilterTreeBuilder headerFilterBuilder = new ExportToExcelFilterTreeBuilder(_excelTemplate.headerEntityName());

        FilterCollectionNode headerFilter = headerFilterBuilder.and(
                headerFilterBuilder.areEqual(_excelTemplate.headerJournalBatchNumberFieldName(), _ledgerJournalTable.JournalNum),
                headerFilterBuilder.areEqual(_excelTemplate.headerDataAreaFieldName(), _ledgerJournalTable.DataAreaId));

        headerFilter = _excelTemplate.appendHeaderEntityFilters(headerFilter, headerFilterBuilder);

        filtersToApply.insert(_excelTemplate.headerEntityName(), headerFilter);

        ExportToExcelFilterTreeBuilder lineFilterBuilder = new ExportToExcelFilterTreeBuilder(_excelTemplate.lineEntityName());

        FilterCollectionNode lineFilter = lineFilterBuilder.and(
                lineFilterBuilder.areEqual(_excelTemplate.lineJournalBatchNumberFieldName(), _ledgerJournalTable.JournalNum),
                lineFilterBuilder.areEqual(_excelTemplate.lineDataAreaFieldName(), _ledgerJournalTable.DataAreaId));

        lineFilter = _excelTemplate.appendLineEntityFilters(lineFilter, lineFilterBuilder);

        filtersToApply.insert(_excelTemplate.lineEntityName(), lineFilter);

        return filtersToApply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheValue</Name>
				<Source><![CDATA[
    private static container getCacheValue(GlobalObjectCacheScope _scope, str _key)
    {
        SysGlobalObjectCache c;

        if (classfactory)
        {
            c = classfactory.globalObjectCache();
        }
        else
        {
            c = new SysGlobalObjectCache();
        }

        return c.find(_scope, [_key]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCacheValue</Name>
				<Source><![CDATA[
    private static void insertCacheValue(GlobalObjectCacheScope _scope, str _key, container _value)
    {
        SysGlobalObjectCache c;

        if (classfactory)
        {
            c = classfactory.globalObjectCache();
        }
        else
        {
            c = new SysGlobalObjectCache();
        }

        c.insert(_scope, [_key], _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalForTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validation the the selected <c>LedgerJournalTable</c> record meets the excel template requirements.
    /// </summary>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> record.</param>
    /// <param name = "_journalExcelTemplate">The <c>LedgerIJournalExcelTemplate</c> instance.</param>
    /// <returns>True if the journal meets the template requirements; otherwise, false.</returns>
    public static boolean validateJournalForTemplate(
        LedgerJournalTable _ledgerJournalTable,
        LedgerIJournalExcelTemplate _journalExcelTemplate)
    {
        Query query = new Query();
        query.topRows(1);

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(LedgerJournalTrans));
        QueryBuildRange queryBuildRangeJournalNum = queryBuildDataSource.addRange(fieldNum(LedgerJournalTrans, JournalNum));
        queryBuildRangeJournalNum.value(_ledgerJournalTable.JournalNum);

        SetEnumerator accountTypeEnumerator = _journalExcelTemplate.supportedAccountTypes().getEnumerator();
        QueryBuildRange queryBuildRangeAccountType = queryBuildDataSource.addRange(fieldNum(LedgerJournalTrans, AccountType));
        str queryRange = '(';

        int rangeCounter = 0;

        while (accountTypeEnumerator.moveNext())
        {
            if (rangeCounter != 0)
            {
                queryRange = queryRange + ' && ';
            }
            else
            {
                queryRange = queryRange + '(';
            }

            rangeCounter++;

            queryRange = queryRange + strFmt('(%1 != %2)', fieldStr(LedgerJournalTrans, AccountType), accountTypeEnumerator.current());
        }

        if (rangeCounter != 0)
        {
            queryRange = queryRange + ') || ';
        }

        rangeCounter = 0;

        SetEnumerator offsetAccountTypeEnumerator = _journalExcelTemplate.supportedOffsetAccountTypes().getEnumerator();

        while (offsetAccountTypeEnumerator.moveNext())
        {
            if (rangeCounter != 0)
            {
                queryRange = queryRange + ' && ';
            }
            else
            {
                queryRange = queryRange + '(';
            }

            rangeCounter++;

            queryRange = queryRange + strFmt('(%1 != %2)', fieldStr(LedgerJournalTrans, OffsetAccountType), offsetAccountTypeEnumerator.current());
        }

        if (rangeCounter != 0)
        {
            queryRange = queryRange + ')';
        }

        queryRange = queryRange + ')';

        queryBuildRangeAccountType.value(queryRange);

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>