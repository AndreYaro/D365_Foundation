<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardBreakDownFinalizeProcessRunner</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CreditCardBreakDownPaymentStatusAttribute(CreditCardPaymentStatus::Finalized)]
internal final class CreditCardBreakDownFinalizeProcessRunner extends CreditCardBreakDownProcessAbsRunner
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(
        CreditCardPaymentInfoContainer _salesTablePacked,
        CreditCardPaymentInfoContainer _custInvoiceJourPacked,
        CreditCardPaymentInfoContainer _mCRCustPaymTablePacked,
        CreditCardPaymentOperation _creditCardPaymentOperation,
        CreditCardPaymentBreakDownExecutionContextMode _creditCardPaymentBreakDownExecutionContextMode)
    {
        super(_salesTablePacked, _custInvoiceJourPacked, _mCRCustPaymTablePacked, _creditCardPaymentOperation, _creditCardPaymentBreakDownExecutionContextMode);

        isRefund = CreditCardBreakDownRunnerHelper::getIsRefundFromCreditCardPaymentOperation(_creditCardPaymentOperation, originCustInvoiceJour, CreditCardPaymentStatus::Finalized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ICreditCardBreakDownProcessRun construct(
        CreditCardPaymentInfoContainer _salesTablePacked,
        CreditCardPaymentInfoContainer _custInvoiceJourPacked,
        CreditCardPaymentInfoContainer _mCRCustPaymTablePacked,
        CreditCardPaymentOperation _creditCardPaymentOperation,
        CreditCardPaymentBreakDownExecutionContextMode _creditCardPaymentBreakDownExecutionContextMode)
    {
        return new CreditCardBreakDownFinalizeProcessRunner(_salesTablePacked, _custInvoiceJourPacked, _mCRCustPaymTablePacked, _creditCardPaymentOperation, _creditCardPaymentBreakDownExecutionContextMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public boolean run()
    {
        try
        {
            // Do not auto settle cash and carry transactions.
            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)) && executionSalesTable.isRetailSale() && !executionSalesTable.isRetailCashAndCarrySales()) 
            {
                // Prepare Retail Settlements for the next invoicing process
                RetailTransactionServiceOrders::prepareRetailSettlements(executionSalesTable, maxInt());

                // Call Center Order / Retail Sales On-Account payments
                // After invoice posting, payments should be already settled against the invoice.
                // If there is still a specification containing the Invoice in SpecTrans, and
                // "The invoice open balance is less than the On-account tender authorized limit.", the specification for the invoice is deleted.
                // Note: This is required for the process of manually remark the invoice for settlement in the payment journals
                // when a payment is received to cover the customer on-account balance.
                RetailTransactionServiceOrders::unlockOnAccountPayments(executionSalesTable);
            }

            if (!isRefund && executionSalesTable.canInvoiceOrderFromCurrentSalesStatus() && CustParameters::find().CreditCardPreAuthorization)
            {
                return CreditCardProcess::doPreAuth(executionSalesTable, false);
            }
        }
        catch (Exception::Error)
        {
            return checkFailed(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::Finalized));
        }
        catch (Exception::Warning)
        {
            return checkFailed(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::Finalized));
        }
        catch (Exception::Info)
        {
            return checkFailed(strFmt("@CashManagement:CreditCardPaymentBreakDownStageFailed", CreditCardPaymentStatus::Finalized));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRunMode</Name>
				<Source><![CDATA[
    public CreditCardBreakDownExecutionRunMode getRunMode()
    {
        return CreditCardBreakDownExecutionRunMode::MarshallingExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIdempotencySupported</Name>
				<Source><![CDATA[
    public boolean isIdempotencySupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashVal</Name>
				<Source><![CDATA[
    public CreditCardPaymentBreakDownExecutionHashVal getHashVal()
    {
        List strToHash = new List(Types::String);
        strToHash.addEnd(any2Str(classIdGet(this)));
        strToHash.addEnd(con2base64str([executionSalesTable]));
        strToHash.addEnd(con2base64str([executionCustInvoiceJour]));
        return CreditCardPaymentHashCalculator::calculateHash(strToHash);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTablePacked</Name>
				<Source><![CDATA[
    public container getSalesTablePacked()
    {
        return [SalesTable::findRecId(executionSalesTable.RecId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceJourPacked</Name>
				<Source><![CDATA[
    public container getCustInvoiceJourPacked()
    {
        return [CustInvoiceJour::findRecId(executionCustInvoiceJour.RecId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMCRCustPaymTablePacked</Name>
				<Source><![CDATA[
    public container getMCRCustPaymTablePacked()
    {
        return conNull();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>