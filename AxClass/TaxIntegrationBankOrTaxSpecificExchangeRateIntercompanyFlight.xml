<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationBankOrTaxSpecificExchangeRateIntercompanyFlight</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// When <c>TaxIntegrationBankOrTaxSpecificExchangeRateIntercompanyFlight</c> is enabled,
/// The sales tax exchange rate and amount in VAT exchange rate should calculate from transaction currency to accounting currency(accounting currency of LedgerJournalTrans.Company).
/// </summary>
/// <remarks>
/// Available from 10.0.36, flight is disabled by default.
/// For tax integration customers, will rollout 10% for 10.0.36, 20% for 10.0.37, 50% for 10.0.38, 100% for 10.0.39. Rollout to all customers in 10.0.40.
/// The flight is controlled by entering the following in the flighting service (ECS or similar):
/// "TaxIntegrationBankOrTaxSpecificExchangeRateIntercompanyFlight" to enabled. This overrules any enablement.
/// This flight is for bank exchange rate or tax specific exchange rate feature.
/// </remarks>
[TaxFlighting(TaxFlightingGroup::TaxIntegration)]
internal final class TaxIntegrationBankOrTaxSpecificExchangeRateIntercompanyFlight extends Flight
{
    private static TaxIntegrationBankOrTaxSpecificExchangeRateIntercompanyFlight singleton = new TaxIntegrationBankOrTaxSpecificExchangeRateIntercompanyFlight();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static TaxIntegrationBankOrTaxSpecificExchangeRateIntercompanyFlight instance()
    {
        return singleton;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>