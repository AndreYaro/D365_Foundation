<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXJobMonitoringLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// CDX job monitoring logger.
/// </summary>
class RetailCDXJobMonitoringLogger
{
    const private str ENDPOINT_DB = 'DB';
    const private str ENDPOINT_BLOB = 'BLOB';
    const private str ENDPOINT_BOTH = 'DB,BLOB';

    const private str UPLOAD_DIRECTION = 'UPLOAD';
    const private str DOWNLOAD_DIRECTION = 'DOWNLOAD';

    System.Diagnostics.Stopwatch jobExecutionTimer;
    RetailConnSchedulerJobTable retailConnSchedulerJobTable;
    RetailCDXDataGroup retailCDXDataGroup;

    RetailConnJobId jobId;
    RefRecId dataGroupRecId;

    str direction;
    str endPoint;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create CDX job monitoring logger instance.
    /// </summary>
    /// <param name = "_jobId">Job ID.</param>
    /// <param name = "_dataGroupRecId">Data group RecId.</param>
    /// <param name = "_targetStore">Container of target channel RecId, can be empty.</param>
    public void new(RetailConnJobId _jobId, RefRecId _dataGroupRecId, container _targetStore = connull())
    {
        RetailConnDatabaseProfile retailConnDatabaseProfile;

        jobId = _jobId;
        dataGroupRecId = _dataGroupRecId;

        select firstonly Name from retailCDXDataGroup where retailCDXDataGroup.RecId == dataGroupRecId;
        select firstonly RecId, Description, IsUpload from retailConnSchedulerJobTable where retailConnSchedulerJobTable.jobId == jobId;

        if (retailConnSchedulerJobTable.IsUpload == NoYes::Yes)
        {
            direction = UPLOAD_DIRECTION;
            endPoint = ENDPOINT_DB;
        }
        else
        {
            direction = DOWNLOAD_DIRECTION;

            if (conlen(_targetStore) == 0)
            {
                select count(RecId) from retailConnDatabaseProfile where retailConnDatabaseProfile.DataGroup == dataGroupRecId;

                if (retailConnDatabaseProfile.RecId == 1)
                {
                    endPoint = ENDPOINT_DB;
                }
                else if (retailConnDatabaseProfile.RecId > 1)
                {
                    endPoint = ENDPOINT_BOTH;
                }
            }
            else
            {
                endPoint = ENDPOINT_BLOB;
            }
        }

        jobExecutionTimer = new System.Diagnostics.Stopwatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs start executing of CDX job.
    /// </summary>
    public void logStart()
    {
        Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteRetDataTransferJobStart(
                retailConnSchedulerJobTable.RecId, jobId, retailConnSchedulerJobTable.translatedDescription(), endPoint, direction,
                retailCDXDataGroup.Name, dataGroupRecId, 0, 0, 0, "", true);
        jobExecutionTimer.Start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logStopOnSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log stop executing of CDX job which succeeded.
    /// </summary>
    /// <param name = "rowsAffected">Rows affected.</param>
    public void logStopOnSuccess(RetailCDXRowsAffected rowsAffected)
    {
        jobExecutionTimer.Stop();

        Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteRetDataTransferJobStop(
                retailConnSchedulerJobTable.RecId, jobId, retailConnSchedulerJobTable.description, endPoint, direction,
                retailCDXDataGroup.Name, dataGroupRecId, jobExecutionTimer.get_ElapsedMilliseconds(), rowsAffected, 0, "", true);
        jobExecutionTimer.Reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logStopOnFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log stop executing of CDX job which failed.
    /// </summary>
    /// <param name = "err">Error message.</param>
    public void logStopOnFailure(str err)
    {
        jobExecutionTimer.Stop();

        Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteRetDataTransferJobStop(
                retailConnSchedulerJobTable.RecId, jobId, retailConnSchedulerJobTable.translatedDescription(), endPoint, direction,
                retailCDXDataGroup.Name, dataGroupRecId, jobExecutionTimer.get_ElapsedMilliseconds(), 0, 0, err, false);
        jobExecutionTimer.Reset();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>