<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCreateFreeTextInvoiceGiftCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCreateFreeTextInvoiceGiftCard</c> class creates and posts a free text invoice when an amount is added to
///     the gift card via the gift card workbench.
/// </summary>
class MCRCreateFreeTextInvoiceGiftCard
{
    CustInvoiceTable    custInvoiceTable;
    CustInvoiceLine     custInvoiceLine;
    SalesLine           salesLine;
    MCRSalesLine        mcrSalesLine;
    AmountCur           amtInvoice;
    RetailGiftCardTable retailGiftCardTable;
    CustAccount         custAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountGiftCardLiability</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the revenue account which for a gift card is the liability
    ///     until the gift card is actually used to pay for some item.
    /// </summary>
    /// <param name="_inventTable">
    ///     The inventory table record containing the gift card item.
    /// </param>
    /// <returns>
    ///     The revenue accout used for gift card liability.
    /// </returns>
    private LedgerDimensionDefaultAccount accountGiftCardLiability(InventTable _inventTable)
    {
        if (salesLine.LedgerDimension)
        {
            return salesLine.LedgerDimension;
        }

        return InventPosting::accountItemLedgerDimensionFromParameters(this.buildAccountItemLedgerDimensionParameter(_inventTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_inventTable">An inventory table record containing the gift card item.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventTable _inventTable)
    {
        ItemId itemId = _inventTable.ItemId;
        CustVendAC account = custAccount;
        CustVendGroupId accountGroup = custInvoiceTable.CustGroup;
        TaxGroup accountTaxGroup = custInvoiceTable.TaxGroup;

        if (salesLine)
        {
            itemId = salesLine.ItemId;
            account = salesLine.CustAccount;
            accountGroup = salesLine.CustGroup;
            accountTaxGroup = salesLine.TaxGroup;
        }

        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            InventAccountType::SalesRevenue,
            itemId,
            _inventTable.itemGroupId(),
            0,
            account,
            accountGroup,
            accountTaxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateInvoiceIDVoucher</Name>
				<Source><![CDATA[
    private void allocateInvoiceIDVoucher()
    {
        CustPostInvoice custPostInvoice;

        NumberSeq numberSeq;

        InvoiceId invoiceId;
        Voucher voucher;

        setPrefix("@MCR11025");

        ttsBegin;

        custInvoiceTable.selectForUpdate(true);

        // allocate the invoice ID and voucher, and update the free-text invoice
        if (!custInvoiceTable.InvoiceId)
        {
            custPostInvoice = CustPostInvoice::construct(custInvoiceTable, TypeOfCreditmaxCheck::None);

            numberSeq = NumberSeq::newGetNumAndVoucher(CustParameters::MCRNumRefFreeTextGCInvoiceId(),
                                                      CustParameters::MCRNumRefFreeTextGCVoucher());

            [invoiceId, voucher] = numberSeq.numAndVoucher();

            if (!voucher)
            {
                throw error("@SYS71652");
            }

            custInvoiceTable.InvoiceId = invoiceId;
            custInvoiceTable.MCRLedgerVoucher = voucher;
            custInvoiceTable.MCRNumberSequenceCode = numberSeq.parmVoucherSequenceCode();

            custInvoiceTable.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates two lines on the free text; One will be the posting
    ///     to the account that is on the revenue of the item,
    ///     the other side of the euqation will be the customer account.
    /// </summary>
    /// <returns>
    ///     The customer invoice line created for the free text.
    /// </returns>
    private CustInvoiceLine createCustInvoiceLine()
    {
        InventTable                     inventTable;
        LedgerDimensionDefaultAccount   acctLiability;

        //Retrieve correct company's invent table for liability purposes.
        select firstOnly crossCompany inventTable
            where inventTable.ItemId == RetailParameters::find().GiftCardItem
            && inventTable.dataAreaId == retailGiftCardTable.dataAreaId;

        if (inventTable)
        {
            acctLiability = this.accountGiftCardLiability(inventTable);
        }

        CustInvoiceLine custInvoiceLineLocal;
        custInvoiceLineLocal.ParentRecId = custInvoiceTable.RecId;
        custInvoiceLineLocal.initFromCustInvoiceTable(custInvoiceTable);
        custInvoiceLineLocal.LineNum = 1.00;

        custInvoiceLineLocal.LedgerDimension = acctLiability;
        custInvoiceLineLocal.modifiedField(fieldNum(CustInvoiceLine, LedgerDimension));

        custInvoiceLineLocal.AmountCur = amtInvoice;
        custInvoiceLineLocal.DefaultDimension = salesLine.DefaultDimension;
        custInvoiceLineLocal.Description = "@MCR34117";
        custInvoiceLineLocal.InvoiceTxt = strFmt("@MCR34293",
                                        salesLine.SalesId,
                                        MCRGiftCard::maskCardNum(retailGiftCardTable.EntryId));
        custInvoiceLineLocal.insert();

        return custInvoiceLineLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets up the parameters to create the customer invoice table record
    ///     to create a free text invoice header.
    /// </summary>
    /// <returns>
    ///     The customer invoice record from which to create a free text invoice header.
    /// </returns>
    private CustInvoiceTable createCustInvoiceTable()
    {
        RetailGiftCardTransactions retailGiftCardTransactions = MCRGiftCard::issuedTransaction(retailGiftCardTable.EntryId);

        CustInvoiceTable custInvoiceTableLocal;
        custInvoiceTableLocal.OrderAccount = custAccount;
        custInvoiceTableLocal.modifiedField(fieldNum(CustInvoiceTable, OrderAccount));
        custInvoiceTableLocal.InvoiceAccount = custAccount;
        custInvoiceTableLocal.modifiedField(fieldNum(CustInvoiceTable, InvoiceAccount));
        custInvoiceTableLocal.CurrencyCode = retailGiftCardTable.CurrencyCode;
        custInvoiceTableLocal.LanguageId = CompanyInfo::find().LanguageId;
        custInvoiceTableLocal.DocumentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        custInvoiceTableLocal.TaxGroup = '';
        custInvoiceTableLocal.TaxItemGroup = '';
        custInvoiceTableLocal.MCRGiftCard = NoYes::Yes;
        custInvoiceTableLocal.insert();

        return custInvoiceTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFreeTextInvoiceGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the free text invoice when a customer wants to add on additional amounts
    ///     to a gift card.
    /// </summary>
    public void createFreeTextInvoiceGiftCard()
    {
        if (retailGiftCardTable.company() != curext())
        {
            changeCompany(retailGiftCardTable.company())
            {
                custInvoiceTable = this.createCustInvoiceTable();
                // Update the custInvoicetable with the invoiceID
                this.allocateInvoiceIDVoucher();
                custInvoiceTable.reread();
                custInvoiceLine = this.createCustInvoiceLine();
            }
        }
        else
        {
            custInvoiceTable = this.createCustInvoiceTable();
            // Update the custInvoicetable with the invoiceID
            this.allocateInvoiceIDVoucher();
            custInvoiceTable.reread();
            custInvoiceLine = this.createCustInvoiceLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>CustInvoiceTable</c> class variable.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceTable</c> class variable.
    /// </returns>
    public CustInvoiceTable getCustInvoiceTableRecord()
    {
        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new <c>MCRCreateFreeTextInvoiceGiftCard</c> object.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the related <c>RetailGiftCardTable</c>
    /// </param>
    /// <param name="_amtInvoice">
    /// The amount of the invoice.
    /// </param>
    /// <param name="_custAccount">
    /// The customer's account.
    /// </param>
    public void new(RecId _recId,
                    AmountCur _amtInvoice,
                    CustAccount _custAccount)
    {
        amtInvoice = _amtInvoice;
        custAccount = _custAccount;
        select crossCompany retailGiftCardTable
            where retailGiftCardTable.RecId ==_recId;

        if (retailGiftCardTable)
        {
            salesLine = SalesLine::findInventTransId(MCRGiftCard::issuedTransaction(retailGiftCardTable.EntryId).MCRInventTransId);
            mcrSalesLine = salesLine.mcrSalesLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFreeTextInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the free text invoice.
    /// </summary>
    public void postFreeTextInvoice()
    {
        Args    args;
        args = new Args();
        args.record(custInvoiceTable);
        CustPostInvoice::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an object to create free text invoices for gift cards.
    /// </summary>
    /// <param name="_recId">
    ///     The gift card record's ID for which to create free text invoice.
    /// </param>
    /// <param name="_amt">
    ///     The free text invoice amount.
    /// </param>
    /// <param name="_custAccount">
    ///     The customer account the posting belongs to.
    /// </param>
    /// <returns>
    ///     An initialized free text invoice record.
    /// </returns>
    public static MCRCreateFreeTextInvoiceGiftCard construct(RecId _recId, AmountCur _amt, CustAccount _custAccount)
    {
        MCRCreateFreeTextInvoiceGiftCard freeTextInvoice;
        freeTextInvoice = new MCRCreateFreeTextInvoiceGiftCard(_recId, _amt, _custAccount);

        return freeTextInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>