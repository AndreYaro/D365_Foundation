<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PurchCalcItem</c> class is used to calculate the total purchase cost of an item.
///     This includes the base cost - purchase price or trade agreement price - as well as the
///     purchase overheads set up in the system.
/// </summary>
/// <remarks>
///    It will always contain one <c>PurchCalcItemLine</c> object that has the same item ID, inventory
///    dimensions, and quantity, that represents the base price of the item. The base price can come from
///    either the costing version purchase price or trade agreements.
/// </remarks>
class PurchCalcItem extends BOMCalcItem
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the purchase cost.
    /// </summary>
    /// <remarks>
    ///    The purchase cost is the sum of the price of the item and the applied overheads.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A validation error occured.
    /// </exception>
    void calc()
    {
        ListEnumerator  listEnumerator;
        PurchCalcItemLine   purchCalcItemLine;

        try
        {
            setPrefix(BOMCalcItem::description());

            if (inventDimId != InventDim::inventDimIdBlank())
            {
                setPrefix(strFmt("%1 (%2)", strFmt("@SYS24300", itemId), inventDim.preFixValue()));
            }
            else
            {
                setPrefix(strFmt("@SYS24300", itemId));
            }

            if (!this.validate())
            {
                throw Exception::Error;
            }

            this.init();

            //calc BOM
            setPrefix("@SYS28550");

            listEnumerator = listBOM.getEnumerator();

            // Calculate BOM lines (do not insert transactions now)
            while (listEnumerator.moveNext())
            {
                purchCalcItemLine = listEnumerator.current();
                purchCalcItemLine.calc();
            }

            if (level == 0)
            {
                if (this.parmExistTradeAgreements())
                {
                    this.calcTradeAgreements();
                }

                this.setProgressTotals();
                this.recalcBOM();

                this.insertBOMCalcTable();
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS19457");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the applied overheads.
    /// </summary>
    protected void calcCostSheet()
    {
        CostSheet                  costSheet;
        ListEnumerator              calculationNodeEnumerator;
        CostSheetNodeCalculation   calculationNode;
        BOMCalcTrans                indirectBomCalcTrans;
        boolean                     costSheetCalculated;

        costCalcTransData.setLevel(this.parmLevel() + 1);

        costSheet = CostSheetFactory::construct().createCostSheet(CostSheetModeStrategyCalculate::newParameter(CostPriceType::Purchase, costCalcTransData));
        costSheetCalculated = costSheet.calc(costCalcTransData);

        if (costSheetCalculated)
        {
            calculationNodeEnumerator = costSheet.getNodeEnumerator(CostSheetNodeListType::IndirectCalculation);
            while (calculationNodeEnumerator.moveNext())
            {
                calculationNode = calculationNodeEnumerator.current();
                indirectBomCalcTrans = calculationNode.toBOMCalcTrans(profitSet, calcDate);

                if (
                    // Include lines if they contain warnings even if they don't have cost
                    indirectBomCalcTrans.Infolog != conNull() ||
                    ((indirectBomCalcTrans.variableCost() + indirectBomCalcTrans.constantCost()) != 0.00)
                    || (indirectBomCalcTrans.consumptionSum() != 0.00))
                {
                    indirectBomCalcTrans.LineNum = this.getLineNum();
                    indirectBomCalcTrans.PriceCalcId = priceCalcId;
                    indirectBomCalcTrans.insert();

                    this.updateCalcPrices(indirectBomCalcTrans);
                    this.updateActualPrices(indirectBomCalcTrans);
                    this.updateCostCalcTransData(indirectBomCalcTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemCalcType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value of the <c>ItemCalcType</c> enumeration that corresponds to this object.
    /// </summary>
    /// <returns>
    /// Always returns the <c>ItemCalcType::Purchase</c> enumeration value.
    /// </returns>
    protected ItemCalcType getItemCalcType()
    {
        return ItemCalcType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PurchCalcItem</c> class.
    /// </summary>
    void init()
    {
        this.initParameters();

        this.initListBOM();

        costCalcTransData = CostCalcTransData::construct(itemId, this.topParentQty());
        costCalcTransData.setBOMCalcItem(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the list of sublines.
    /// </summary>
    /// <remarks>
    ///    An instance of the <c>PurchCalcItem</c> class will have exactly one sub-calculation, a
    ///    <c>PurchCalcItemLine</c> instance that represents the calculation of the price of the item.
    /// </remarks>
    protected void initListBOM()
    {
        if (listBOM.elements())
            return;

        listBOM.addEnd(this.purchCalcItemLineForBOMList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchCalcItemLineForBOMList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of <c>PurchCalcItemLine</c> for the BOM list.
    /// </summary>
    /// <returns>A <c>PurchCalcItemLine</c> object.</returns>
    protected PurchCalcItemLine purchCalcItemLineForBOMList()
    {
        return PurchCalcItemLine::newPurchCalcItem(this.parmItemId(),
                                                            this.parmInventDimId(),
                                                            this,
                                                            costingVersionId,
                                                            bomCalcFallBack,
                                                            fallBackVersionId,
                                                            siteId,
                                                            bomCalcExplosionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Recalculates the cost of the BOM tree.
    /// </summary>
    void recalcBOM()
    {
        ListEnumerator  listEnumerator;
         PurchCalcItemLine   purchCalcItemLine;

        this.setLineNum();

        this.updateProgress();

        listEnumerator = listBOM.getEnumerator();

        // Calculate actual consumption for BOM lines (insert transactions)
        if (listEnumerator)
        {
            if (listEnumerator.moveNext())
            {
                purchCalcItemLine = listEnumerator.current();
                purchCalcItemLine.recalc();
                while (listEnumerator.moveNext())
                {
                    purchCalcItemLine = listEnumerator.current();
                    purchCalcItemLine.recalc();
                }
            }
        }

        this.calcCostSheet();

        this.updateBOMCalcTrans();

        this.insertBOMCalcTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarnings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the warnings that are generated by the calculation.
    /// </summary>
    void updateWarnings()
    {
        BOMCalcCheck bomCalcCheck;

        bomCalcCheck = BOMCalcCheck::newBOMCalcBase(this);

        //Forward the exception type
        bomCalcCheck.parmExceptionType(this.parmExceptionType());

        bomCalcCheck.checkNoConsumption(bomCalcTrans.ConsumptionVariable + bomCalcTrans.ConsumptionConstant);
        bomCalcCheck.checkZeroCostPrice(bomCalcTrans.CostPrice);
        bomCalcCheck.checkMinContribution(bomCalcTrans.contributionRatio());
        bomCalcCheck.checkMissingUpdates(itemId,
                                         inventDimId,
                                         calcDate,
                                         costingVersionId,
                                         siteId,
                                         calcCostingVersionUpdate,
                                         salesPriceTransfer,
                                         costPriceTransfer);
        bomCalcCheck.checkUseFallBack(bomCalcTrans.CostPriceFallBackVersion, bomCalcTrans.SalesPriceFallBackVersion);

        if (bomCalcCheck.hasMessages())
        {
            bomCalcTrans.Infolog = bomCalcCheck.getMessages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchCalcItem construct()
    {
        return new PurchCalcItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <c>PurchCalcItem</c> class by using a line in a bill of
    ///    materials.
    /// </summary>
    /// <param name="_bom">
    ///    The bill of materials to use for initialization.
    /// </param>
    /// <param name="_consumptionQty">
    ///    The consumed quantity.
    /// </param>
    /// <param name="_parentBomCalcItem">
    ///    An instance of the <c>BOMCalcItem</c> class on the level above.
    /// </param>
    /// <returns>
    ///    The new <c>PurchCalcItem</c> object.
    /// </returns>
    public static PurchCalcItem newBOM(BOM                    _bom,
                                       Qty                    _consumptionQty,
                                       BOMCalcItem            _parentBomCalcItem)
    {
        PurchCalcItem purchCalcItem = PurchCalcItem::construct();
        InventDim   inventDimCalc;

        purchCalcItem.parmBOM(_bom.data());
        purchCalcItem.parmCalcConsumptionInventQty(_consumptionQty);
        purchCalcItem.parmParentBOMCalc(_parentBomCalcItem);

        purchCalcItem.parmItemId(_bom.ItemId);
        purchCalcItem.parmInventTable(InventTable::find(_bom.ItemId));

        inventDimCalc = BOMCalcItem::inventDimMerged(_parentBomCalcItem.parmInventDim(),InventDim::find(_bom.InventDimId));

        purchCalcItem.parmInventDimId(inventDimCalc.InventDimId);
        purchCalcItem.parmInventDim(inventDimCalc);

        purchCalcItem.parmProfitSet(_parentBomCalcItem.parmProfitSet());

        purchCalcItem.parmBomCalcExplosionMode(_parentBomCalcItem.parmBomCalcExplosionMode());

        purchCalcItem.parmPriceCalcId(_parentBomCalcItem.parmPriceCalcId());

        purchCalcItem.parmCalcDate(_parentBomCalcItem.parmCalcDate());

        purchCalcItem.parmBOMRouteVersionSelect(_parentBomCalcItem.parmBOMRouteVersionSelect());

        purchCalcItem.parmProgressBar(_parentBomCalcItem.parmProgressBar());

        purchCalcItem.parmBOMCalcType(_parentBomCalcItem.parmBOMCalcType());

        purchCalcItem.parmLevel(_parentBomCalcItem.parmLevel() + 1);

        purchCalcItem.parmCostingVersionId(_parentBomCalcItem.parmCostingVersionId());

        purchCalcItem.parmBOMCalcFallBack(_parentBomCalcItem.parmBOMCalcFallBack());
        purchCalcItem.parmFallBackVersionId(_parentBomCalcItem.parmFallBackVersionId());
        purchCalcItem.parmCostPriceModel(_parentBomCalcItem.parmCostPriceModel());
        purchCalcItem.parmPurchPriceModel(_parentBomCalcItem.parmPurchPriceModel());
        purchCalcItem.parmSiteId(_parentBomCalcItem.parmSiteId());

        // Override warnings
        purchCalcItem.parmOverrideGroupWarnings(_parentBomCalcItem.parmOverrideGroupWarnings());
        purchCalcItem.parmCheckNoBOM(_parentBomCalcItem.parmCheckNoBOM());
        purchCalcItem.parmCheckNoRoute(_parentBomCalcItem.parmCheckNoRoute());
        purchCalcItem.parmCheckNoConsump(_parentBomCalcItem.parmCheckNoConsump());
        purchCalcItem.parmCheckNoCostPrice(_parentBomCalcItem.parmCheckNoCostPrice());
        purchCalcItem.parmCheckAgeCostPrice(_parentBomCalcItem.parmCheckAgeCostPrice());
        purchCalcItem.parmCheckMinContribution(_parentBomCalcItem.parmCheckMinContribution());

        purchCalcItem.parmCheckMissingUpdates(_parentBomCalcItem.parmCheckMissingUpdates());
        purchCalcItem.parmCheckUseFallBack(_parentBomCalcItem.parmCheckUseFallBack());

        purchCalcItem.parmItemProcurementMode(_parentBomCalcItem.parmItemProcurementMode());
        purchCalcItem.parmProductionFlowReferenceRecId(_parentBomCalcItem.parmProductionFlowReferenceRecId());

        purchCalcItem.parmLeanCostingFacade(_parentBomCalcItem.parmLeanCostingFacade());

        return purchCalcItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <c>PurchCalcItem</c> class.
    /// </summary>
    /// <param name="_itemId">
    ///    The ID of the item for which the purchase cost calculation is executed.
    /// </param>
    /// <param name="_inventDimId">
    ///    The ID of the inventory dimensions.
    /// </param>
    /// <param name="_calcQty">
    ///    The quantity for which to calculate the purchase cost.
    /// </param>
    /// <param name="_profitSet">
    ///    The profit settings to use to calculate the sales price.
    /// </param>
    /// <param name="_priceCalcId">
    ///    The ID of the calculation.
    /// </param>
    /// <param name="_calcDate">
    ///    The date of the calculation.
    /// </param>
    /// <param name="_showProgress">
    ///    A Boolean value that indicates whether the progress indicator should be shown.
    /// </param>
    /// <param name="_bomCalcType">
    ///    A <c>BOMCalcType</c> enumeration type that indicates the type of the calculation.
    /// </param>
    /// <param name="_costingVersionId">
    ///    The ID of the costing version that is used.
    /// </param>
    /// <param name="_calcCostingVersionUpdate">
    ///    A <c>BOMCalcCostingVersionUpdate</c> enumeration value that indicates the action to be taken after
    ///    the calculation.
    /// </param>
    /// <param name="_costPriceTransfer">
    ///    A <c>NoYes</c> enumeration value that indicates whether the cost should be transferred into the
    ///    costing version.
    /// </param>
    /// <param name="_salesPriceTransfer">
    ///    A <c>NoYes</c> enumeration value that indicates whether the sales price should be transferred into
    ///    the costing version.
    /// </param>
    /// <param name="_bomCalcFallBack">
    ///    A <c>BOMCalcFallBack</c> enumeration value that specifies the fallback strategy that is used.
    /// </param>
    /// <param name="_fallBackVersionId">
    ///    The fallback costing version, if the <c>BOMCalcFallBack::Simulated</c> enumeration value is used.
    /// </param>
    /// <param name="_purchPriceModel">
    ///    The source of the base cost.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>PurchCalcItem</c> class.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_purchPriceModel" /> parameter can be the <c>PurchPriceModel::PurchPrice</c> or
    ///    <c>PurchPriceModel::PriceDisc</c> enumeration value.
    /// </remarks>
    public static PurchCalcItem newItem(
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        Qty                         _calcQty,
        CostProfitSet               _profitSet,
        PriceCalcId                 _priceCalcId              = '',
        TransDate                   _calcDate                 = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean                     _showProgress             = false,
        BOMCalcType                 _bomCalcType              = BOMCalcType::Order,
        CostingVersionId              _costingVersionId           = '',
        BOMCalcCostingVersionUpdate   _calcCostingVersionUpdate   = BOMCalcCostingVersionUpdate::Overwrite,
        NoYes                       _costPriceTransfer        = NoYes::No,
        NoYes                       _salesPriceTransfer       = NoYes::No,
        BOMCalcFallBack             _bomCalcFallBack          = BOMCalcFallBack::None,
        CostingVersionId              _fallBackVersionId      = '',
        PurchPriceModel             _purchPriceModel          = PurchPriceModel::PurchPrice
        )
    {
        PurchCalcItem purchCalcItem = PurchCalcItem::construct();
        InventDim foundInventDim;

        purchCalcItem.parmItemId(_itemId);
        purchCalcItem.parmInventTable(InventTable::find(_itemId));

        foundInventDim = InventDim::find(_inventDimId);
        purchCalcItem.parmInventDimId(_inventDimId);
        purchCalcItem.parmInventDim(foundInventDim);
        if (foundInventDim)
            purchCalcItem.parmSiteId(foundInventDim.InventSiteId);

        purchCalcItem.parmCalcConsumptionInventQty(_calcQty);
        purchCalcItem.parmActualConsumptionInventQty(_calcQty);
        purchCalcItem.parmActualNetWeightConsumptionInventQty(_calcQty);

        purchCalcItem.parmProfitSet(_profitSet);

        purchCalcItem.parmPriceCalcId(_priceCalcId);

        purchCalcItem.parmCalcDate(_calcDate);

        purchCalcItem.parmShowProgress(_showProgress);

        purchCalcItem.parmBOMCalcType(_bomCalcType);
        purchCalcItem.parmCostingVersionId(_costingVersionId);
        purchCalcItem.parmCalcCostingVersionUpdate(_calcCostingVersionUpdate);

        purchCalcItem.parmCostPriceTransfer(_costPriceTransfer);
        purchCalcItem.parmSalesPriceTransfer(_salesPriceTransfer);

        purchCalcItem.parmBOMCalcFallBack(_bomCalcFallBack);
        purchCalcItem.parmFallBackVersionId(_fallBackVersionId);

        purchCalcItem.parmPurchPriceModel(_purchPriceModel);

        purchCalcItem.parmItemProcurementMode(ItemProcurementMode::PurchaseOrder);

        return purchCalcItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>