<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductListPageButtonState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for determining the button states of the product list page.
/// </summary>
class EcoResProductListPageButtonState
{
    InventTable inventTable;

    // Engineering
    //InventItemType  inventItemType;
    boolean         categoryExists;

    boolean         canHaveBOM;
    boolean         canHaveRoute;
    boolean         canBeProduced;
    boolean         isConfigActive;
    boolean         isInventoried;
    boolean         isDimensionBased;

    boolean         isServiceItem;
    boolean         batchActivated;
    boolean         isFormulaAllowed;
    boolean         isPlanningItem;
    boolean         hasBatchAttributesItem;
    boolean         isBulkorPack;
    boolean         isCoByProduct;
    boolean         isRetailKit;
    boolean         hasTemplate;
    boolean         isWHSEnabled;
    boolean         editUseInvoiceMatching;
    boolean         useQualityManagement;
    boolean         isLegalEntityInCountryRegionRU;
    boolean         mcrInstallmentEnabled;
    PmfProductType  PmfProductType;

    // <GIN>
    #ISOCountryRegionCodes
    // </GIN>

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        categoryExists,
        canHaveBOM,
        canHaveRoute,
        canBeProduced,
        isConfigActive,
        isInventoried,
        isDimensionBased,
        isServiceItem,
        batchActivated,
        isFormulaAllowed,
        isPlanningItem,
        hasBatchAttributesItem,
        isBulkorPack,
        isCoByProduct,
        isRetailKit,
        mcrInstallmentEnabled,
        hasTemplate,
        isWHSEnabled,
        editUseInvoiceMatching,
        useQualityManagement,
        isLegalEntityInCountryRegionRU,
        PmfProductType
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineButtonState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the input parameters for the button states.
    /// </summary>
    public void determineButtonState()
    {
        this.determineGlobalParameters();
        if (inventTable)
        {
            this.determineEngineeringState();
            this.determineRetailState();
            this.determineProductState();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineEngineeringState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the values of the input for the engieering state.
    /// </summary>
    protected void determineEngineeringState()
    {
        InventItemType      inventItemType = inventTable.inventItemType();

        canHaveBOM          = inventTable.isBOMAllowed();
        canHaveRoute        = inventItemType.canHaveRoutes();
        canBeProduced       = inventItemType.canBeProduced();
        isConfigActive      = inventTable.configActive();
        this.isItemInventoried();
        isDimensionBased    = false;

        isServiceItem           = inventTable.ItemType == ItemType::Service;
        batchActivated          = inventTable.isItemBatchActivated() && !isServiceItem;
        isFormulaAllowed        = inventTable.isFormulaAllowed();
        isPlanningItem          = inventTable.PmfProductType == PmfProductType::MainItem && !isServiceItem;
        hasBatchAttributesItem  = batchActivated && PdsBatchAttribByItem::existItemIdAny(inventTable.ItemId);
        isBulkorPack            = PmfBulkItemConv::isBulkorPack(inventTable.ItemId);
        isCoByProduct           = inventTable.PmfProductType == PmfProductType::By_Product || inventTable.PmfProductType == PmfProductType::Co_Product;
        PmfProductType          = inventTable.PmfProductType;

        if (inventTable.product().isProductMaster())
        {
            EcoResProductMaster ecoResProductMaster = inventTable.product() as EcoResProductMaster;

            isDimensionBased = ecoResProductMaster.isDimensionBased();
        }

        categoryExists = CaseCategoryHierarchyDetail::existsByCategoryType(CaseCategoryType::EngineeringChange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineGlobalParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the global parameters which are not product specific.
    /// </summary>
    protected void determineGlobalParameters()
    {
        isLegalEntityInCountryRegionRU  = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        editUseInvoiceMatching          = VendParameters::find().editUseInvoiceMatching();
        useQualityManagement            = InventParameters::find().UseQualityManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineProductState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the general product related input state.
    /// </summary>
    public void determineProductState()
    {
        SysRecordTemplateStorageCompany     company = SysRecordTemplateStorage::newCommon(inventTable, SysRecordTemplateType::Company);
        SysRecordTemplateStorageUser        user    = SysRecordTemplateStorage::newCommon(inventTable, SysRecordTemplateType::User);

        hasTemplate = (user.get() != conNull() || company.get() != conNull());

        isWHSEnabled                    = WHSInventEnabled::exist(inventTable.itemid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineRetailState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the state of the retail input.
    /// </summary>
    protected void determineRetailState()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            isRetailKit = RetailKit::existByProductMaster(inventTable.Product);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            MCRInventTable mcrInventTable = inventTable.mcrInventTable();
            mcrInstallmentEnabled  = mcrInventTable.InstallmentEligible && !mcrInventTable.ContinuityScheduleID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemInventoried</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item is inventoried.
    /// </summary>
    private void isItemInventoried()
    {
        InventModelGroupItem inventModelGroupItem = InventModelGroupItem::findByItemIdLegalEntity(inventTable.ItemId, inventTable.DataAreaId);

        if (inventModelGroupItem.ModelGroupId)
        {
            isInventoried = inventTable.isStocked();
        }
        else
        {
            isInventoried = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchActivated</Name>
				<Source><![CDATA[
    public boolean parmBatchActivated(boolean _batchActivated = batchActivated)
    {
        batchActivated = _batchActivated;

        return batchActivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanBeProduced</Name>
				<Source><![CDATA[
    public boolean parmCanBeProduced(boolean _canBeProduced = canBeProduced)
    {
        canBeProduced = _canBeProduced;

        return canBeProduced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanHaveBOM</Name>
				<Source><![CDATA[
    public boolean parmCanHaveBOM(boolean _canHaveBOM = canHaveBOM)
    {
        canHaveBOM = _canHaveBOM;

        return canHaveBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanHaveRoute</Name>
				<Source><![CDATA[
    public boolean parmCanHaveRoute(boolean _canHaveRoute = canHaveRoute)
    {
        canHaveRoute = _canHaveRoute;

        return canHaveRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryExists</Name>
				<Source><![CDATA[
    public boolean parmCategoryExists(boolean _categoryExists = categoryExists)
    {
        categoryExists = _categoryExists;

        return categoryExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditUseInvoiceMatching</Name>
				<Source><![CDATA[
    public boolean parmEditUseInvoiceMatching(boolean _editUseInvoiceMatching = editUseInvoiceMatching)
    {
        editUseInvoiceMatching = _editUseInvoiceMatching;

        return editUseInvoiceMatching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasBatchAttributesItem</Name>
				<Source><![CDATA[
    public boolean parmHasBatchAttributesItem(boolean _hasBatchAttributesItem = hasBatchAttributesItem)
    {
        hasBatchAttributesItem = _hasBatchAttributesItem;

        return hasBatchAttributesItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasTemplate</Name>
				<Source><![CDATA[
    public boolean parmHasTemplate(boolean _hasTemplate = hasTemplate)
    {
        hasTemplate = _hasTemplate;

        return hasTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBulkorPack</Name>
				<Source><![CDATA[
    public boolean parmIsBulkorPack(boolean _isBulkorPack = isBulkorPack)
    {
        isBulkorPack = _isBulkorPack;

        return isBulkorPack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCoByProduct</Name>
				<Source><![CDATA[
    public boolean parmIsCoByProduct(boolean _isCoByProduct = isCoByProduct)
    {
        isCoByProduct = _isCoByProduct;

        return isCoByProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsConfigActive</Name>
				<Source><![CDATA[
    public boolean parmIsConfigActive(boolean _isConfigActive = isConfigActive)
    {
        isConfigActive = _isConfigActive;

        return isConfigActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDimensionBased</Name>
				<Source><![CDATA[
    public boolean parmIsDimensionBased(boolean _isDimensionBased = isDimensionBased)
    {
        isDimensionBased = _isDimensionBased;

        return isDimensionBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsFormulaAllowed</Name>
				<Source><![CDATA[
    public boolean parmIsFormulaAllowed(boolean _isFormulaAllowed = isFormulaAllowed)
    {
        isFormulaAllowed = _isFormulaAllowed;

        return isFormulaAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInventoried</Name>
				<Source><![CDATA[
    public boolean parmIsInventoried(boolean _isInventoried = isInventoried)
    {
        isInventoried = _isInventoried;

        return isInventoried;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsLegalEntityInCountryRegionRU</Name>
				<Source><![CDATA[
    public boolean parmIsLegalEntityInCountryRegionRU(boolean _isLegalEntityInCountryRegion = isLegalEntityInCountryRegionRU)
    {
        isLegalEntityInCountryRegionRU = _isLegalEntityInCountryRegion;

        return isLegalEntityInCountryRegionRU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPlanningItem</Name>
				<Source><![CDATA[
    public boolean parmIsPlanningItem(boolean _isPlanningItem = isPlanningItem)
    {
        isPlanningItem = _isPlanningItem;

        return isPlanningItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRetailKit</Name>
				<Source><![CDATA[
    public boolean parmIsRetailKit(boolean _isRetailKit = isRetailKit)
    {
        isRetailKit = _isRetailKit;

        return isRetailKit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsServiceItem</Name>
				<Source><![CDATA[
    public boolean parmIsServiceItem(boolean _isServiceItem = isServiceItem)
    {
        isServiceItem = _isServiceItem;

        return isServiceItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsWHSEnabled</Name>
				<Source><![CDATA[
    public boolean parmIsWHSEnabled(boolean _isWHSEnabled = isWHSEnabled)
    {
        isWHSEnabled = _isWHSEnabled;

        return isWHSEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMcrInstallmentEnabled</Name>
				<Source><![CDATA[
    public boolean parmMcrInstallmentEnabled(boolean _mcrInstallmentEnabled = mcrInstallmentEnabled)
    {
        mcrInstallmentEnabled = _mcrInstallmentEnabled;

        return mcrInstallmentEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfProductType</Name>
				<Source><![CDATA[
    public PmfProductType parmPmfProductType(PmfProductType _pmfProductType = pmfProductType)
    {
        pmfProductType = _pmfProductType;

        return pmfProductType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseQualityManagement</Name>
				<Source><![CDATA[
    public boolean parmUseQualityManagement(boolean _useQualityManagement = useQualityManagement)
    {
        useQualityManagement = _useQualityManagement;

        return useQualityManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductListPageButtonState construct()
    {
        return new EcoResProductListPageButtonState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>EcoResProductListPageButtonState</c> instance.
    /// </summary>
    /// <param name="_inventTable">
    /// An invent table record.
    /// </param>
    /// <returns>
    /// A <c>EcoResProductListPageButtonState</c> instance.
    /// </returns>
    /// <remarks>
    /// This class is used to minimize chattiness between client and server.
    /// </remarks>
    public static EcoResProductListPageButtonState create(inventTable _inventTable = null)
    {
        EcoResProductListPageButtonState productListPageButtonState = EcoResProductListPageButtonState::construct();

        productListPageButtonState.unpack(EcoResProductListPageButtonState::createOnServer(_inventTable));

        return productListPageButtonState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the instance on the server and packs it into a container.
    /// </summary>
    /// <param name="_inventTable">
    /// An invent table record.
    /// </param>
    /// <returns>
    /// A packed instance.
    /// </returns>
    public static container createOnServer(inventTable _inventTable = null)
    {
        EcoResProductListPageButtonState listPageButtonState = EcoResProductListPageButtonState::construct();

        listPageButtonState.parmInventTable(_inventTable);
        listPageButtonState.determineButtonState();

        return listPageButtonState.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
