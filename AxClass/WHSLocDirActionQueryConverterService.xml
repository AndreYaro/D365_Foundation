<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocDirActionQueryConverterService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSLocDirActionQueryConverterService extends SysOperationServiceBase
{
    #OCCRetryCount
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertLocationDirActionQuery</Name>
				<Source><![CDATA[
    internal void convertLocationDirActionQuery(WHSLocDirActionQueryConverterContract _contract)
    {
        WHSLocDirAction locDirAction;
        WHSLocDirTable  locDirTable;

        var instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
    
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.locationDirectiveActivities().LocationDirectiveActionConverterService())
        {
            Counter directivesIterated;
            Counter directivesUpdated;

            try
            {
                if (!WHSLocDirActionQueryConverterServiceV2Flight::instance().isEnabled())
                {
                    throw Error(Error::wrongUseOfFunction(funcName()));
                }

                QueryRun locationDirectives = new QueryRun(_contract.parmQuery());
                
                while (locationDirectives.next())
                {
                    directivesIterated++;
                    ttsbegin;
                    locDirTable =  locationDirectives.get(tableNum(WHSLocDirTable));
                    locDirAction = locationDirectives.get(tableNum(WHSLocDirAction));

                    Query queryOriginal = new QueryRun(locDirAction.LocDirQuery).query();
                    RecVersion originalRecVersion = locDirAction.RecVersion;
                    WHSLocDirActionQueryConverter::convertAndSaveLocDirActionQuery(locDirAction, locDirTable.workType, queryOriginal);
                    locDirAction.reread();
                    if (originalRecVersion != locDirAction.RecVersion)
                    {
                        directivesUpdated++;
                        
                    }
                    //The tables are entire table caches but the flush should happen in bursts not for each commit
                    ttscommit;
                }
                activityContext.addCustomProperty('Number of iterations', any2Str(directivesIterated));
                activityContext.addCustomProperty('Number of upgraded', any2Str(directivesUpdated));
            }
            catch (Exception::UpdateConflict)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    error(strFmt("@WAX:WHSLocDirActionQueryConverterServiceError", locDirTable.LocDirName, locDirAction.LocDirName, locDirAction.RecId));
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    error(strFmt("@WAX:WHSLocDirActionQueryConverterServiceError", locDirTable.LocDirName, locDirAction.LocDirName, locDirAction.RecId));
                }
                else
                {
                    retry;
                }
            }
            catch
            {
                error(strFmt("@WAX:WHSLocDirActionQueryConverterServiceError", locDirTable.LocDirName, locDirAction.LocDirName, locDirAction.RecId));
            }

            info(strFmt("@WAX:WHSLocDirActionQueryConverterServiceInfoLabel", directivesIterated, directivesUpdated));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>