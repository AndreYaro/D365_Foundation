<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionMassUpdateBudgetProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadataAttribute(classStr(HcmPositionMassUpdateBudgetIProvider), "DefaultProvider"),ExportAttribute("Dynamics.AX.Application.HcmPositionMassUpdateBudgetIProvider")]
class HcmPositionMassUpdateBudgetProvider implements HcmPositionMassUpdateBudgetIProvider
{
    boolean editBudgetAccountLines;

    container tmpBudgetPurposeTypeContainer;

    HcmBudgetAmountCur budgetDefaultAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpBudgetPurposeTypeContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the TmpBudgetPurposeTypeContainer value.
    /// </summary>
    /// <returns>The TmpBudgetPurposeTypeContainer value.</returns>
    public container getTmpBudgetPurposeTypeContainer()
    {
        return tmpBudgetPurposeTypeContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpBudgetPurposeTypeContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the TmpBudgetPurposeTypeContainer value.
    /// </summary>
    /// <param name = "_tmpBudgetPurposeTypeContainer">The TmpBudgetPurposeTypeContainer value.</param>
    public void setTmpBudgetPurposeTypeContainer(container _tmpBudgetPurposeTypeContainer)
    {
        tmpBudgetPurposeTypeContainer = _tmpBudgetPurposeTypeContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEditBudgetAccountLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the EditBudgetAccountLines value.
    /// </summary>
    /// <returns>The EditBudgetAccountLines value.</returns>
    public boolean getEditBudgetAccountLines()
    {
        return editBudgetAccountLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditBudgetAccountLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the EditBudgetAccountLines value.
    /// </summary>
    /// <param name = "_editBudgetAccountLines">The EditBudgetAccountLines value.</param>
    public void setEditBudgetAccountLines(boolean _editBudgetAccountLines)
    {
        editBudgetAccountLines = _editBudgetAccountLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountLinesGridEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether there are any budget account lines to update.
    /// </summary>
    /// <param name = "_positionMassUpdate">The instance of the <c>HcmPositionMassUpdateBase</c> class.</param>
    /// <param name = "_formRun">The form instance.</param>
    /// <returns>true, if  budget account lines are to be udpated; otherwise, false.</returns>
    public boolean checkAccountLinesGridEmpty(HcmPositionMassUpdateBase _positionMassUpdate, FormRun _formRun)
    {
        HcmPositionMassUpdateBudgetIProvider positionMassUpdateBudgetProvider = _positionMassUpdate.parmPositionMassUpdateBudgetProvider();

        boolean success;
        DialogButton dialogButton;
        int pos = 1;

        FormDataSource hcmTmpBudgetPurposeType_ds = _formRun.dataSource(formDataSourceStr(HcmPositionMassUpdate, HcmTmpBudgetPurposeType)) as FormDataSource;
        HcmTmpBudgetPurposeType hcmTmpBudgetPurposeType = hcmTmpBudgetPurposeType_ds.cursor();

        var budgetAccountLinesGridControl = _formRun.design().controlName(formControlStr(HcmPositionMassUpdate, editBudgetAccountLinesGrid)) as FormCheckBoxControl;

        DictClass dictClass = new DictClass(classIdGet(_formRun));

        if (positionMassUpdateBudgetProvider)
        {
            // checkbox parm for budget account lines
            positionMassUpdateBudgetProvider.setEditBudgetAccountLines(budgetAccountLinesGridControl.value());
        }

        if (positionMassUpdateBudgetProvider.getEditBudgetAccountLines())
        {
            // Check if any budget purpose types have been inserted
            while select hcmTmpBudgetPurposeType
            {
                tmpBudgetPurposeTypeContainer = conIns(tmpBudgetPurposeTypeContainer, pos, hcmTmpBudgetPurposeType.buf2con());
                pos++;
            }

            if (pos == 1)
            {
                dialogButton = Box::okCancel("@Workforce:YouAreAttemptingToUpdateTheBudgetValuesButTheyAreBlankContin", DialogButton::Cancel);

                if (dialogButton == DialogButton::Ok)
                {
                    success = true;
                }
                else
                {
                    success = false;
                    this.resetHcmTmpBudgetPurposeType(hcmTmpBudgetPurposeType, _formRun);
                }
            }
            else
            {
                success = true;
            }
        }
        else
        {
            success = true;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetHcmTmpBudgetPurposeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the values from the temp table.
    /// </summary>
    /// <param name = "_common">The instance of the temp table to be cleared.</param>
    /// <param name = "_formRun">The form instance that contains the datasource to be cleared.</param>
    public void resetHcmTmpBudgetPurposeType(Common _hcmTmpBudgetPurposeType, FormRun _formRun)
    {
        HcmTmpBudgetPurposeType tmpTable = null;

        if (_hcmTmpBudgetPurposeType.TableId != tableNum(HcmTmpBudgetPurposeType))
        {
            throw error("@SYS104799");
        }

        _hcmTmpBudgetPurposeType.delete();
        _hcmTmpBudgetPurposeType.setTmpData(tmpTable);

        FormDataSource hcmTmpBudgetPurposeType_ds = _formRun.dataSource(formDataSourceStr(HcmPositionMassUpdate, HcmTmpBudgetPurposeType)) as FormDataSource;

        hcmTmpBudgetPurposeType_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHcmPositionBudgetAccountLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the update of the <c>HcmPositionBudgetAccountLine</c> table.
    /// </summary>
    /// <param name = "_positionMassUpdate"></param>
    /// <returns>true, if  budget account lines are updated successfully; otherwise, false.</returns>
    public boolean updateHcmPositionBudgetAccountLines(HcmPositionMassUpdateBase _positionMassUpdate = null)
    {
        HcmPositionBudgetAccountLine    hcmPositionBudgetAccountLineSource;
        HcmPositionBudgetAccountLine    hcmPositionBudgetAccountLine;
        boolean                         attemptUpdate  = false;
        utcDateTime                     validFromLocal = _positionMassUpdate.parmEffectiveOn();
        HcmTmpBudgetPurposeType         tmpBudgetPurposeType;
        int                             conLength,pos;
        boolean                         futureRecordExists = false;

        HcmPositionMassUpdateBudgetIProvider positionMassUpdateBudgetProvider = _positionMassUpdate.parmPositionMassUpdateBudgetProvider();

        try
        {
            setPrefix("@Workforce:PositionBudgetAccounts");

            if (positionMassUpdateBudgetProvider.getEditBudgetAccountLines())
            {
                conLength = conLen(positionMassUpdateBudgetProvider.getTmpBudgetPurposeTypeContainer());

                if (conLength == 0)
                {
                    // If no rows were selected in the grid all position budget account lines for the selected position are either retired or deleted
                    while select forUpdate validTimeState(validFromLocal) Position, LegalEntity, BudgetPurposeType, validFrom, validTo from hcmPositionBudgetAccountLine
                        where hcmPositionBudgetAccountLine.Position == _positionMassUpdate.parmPositionRecId() &&
                        hcmPositionBudgetAccountLine.LegalEntity == _positionMassUpdate.parmDimensionLegalEntityRecId()
                    {
                        if (hcmPositionBudgetAccountLine.futureRecordExists())
                        {
                            // If a future record exists for the current records then no action should be taken and error should be thrown
                            throw error("@Workforce:TheUpdateWasCanceledBecauseAFutureChangeIsPending");
                        }
                        else
                        {
                            if (hcmPositionBudgetAccountLine.ValidFrom >=  DateTimeUtil::utcNow())
                            {
                                hcmPositionBudgetAccountLine.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

                                ttsBegin;
                                // Deleting future records
                                hcmPositionBudgetAccountLine.delete();
                                ttsCommit;
                                attemptUpdate = true;
                            }
                            else
                            {
                                if (hcmPositionBudgetAccountLine.ValidFrom >=  HcmDateTimeUtil::startOfCurrentDay())
                                {
                                    // Retiring current records as of today
                                    hcmPositionBudgetAccountLine.ValidTo = DateTimeUtil::addSeconds(hcmPositionBudgetAccountLine.ValidFrom, 1);
                                }
                                else
                                {
                                    hcmPositionBudgetAccountLine.ValidTo = HcmDateTimeUtil::startOfCurrentDay();
                                }

                                hcmPositionBudgetAccountLine.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

                                ttsBegin;
                                hcmPositionBudgetAccountLine.write();
                                ttsCommit;
                                attemptUpdate = true;
                            }
                        }
                    }
                }
                else
                {
                    for (pos = 1; pos <= conLength; pos++)
                    {
                        tmpBudgetPurposeType = con2Buf(conpeek(positionMassUpdateBudgetProvider.getTmpBudgetPurposeTypeContainer(), pos));
                        hcmPositionBudgetAccountLineSource = HcmPositionBudgetAccountLine::findByPositionLEBudgetPurposeType(_positionMassUpdate.parmPositionRecId(), _positionMassUpdate.parmDimensionLegalEntityRecId(), tmpBudgetPurposeType.BudgetPurposeType, _positionMassUpdate.parmEffectiveOn(), _positionMassUpdate.parmEffectiveOn(), true);

                        if (hcmPositionBudgetAccountLineSource)
                        {
                            buf2Buf(hcmPositionBudgetAccountLineSource, hcmPositionBudgetAccountLine);
                        }
                        else
                        {
                            hcmPositionBudgetAccountLine.Position = _positionMassUpdate.parmPositionRecId();
                            hcmPositionBudgetAccountLine.LegalEntity = _positionMassUpdate.parmDimensionLegalEntityRecId();
                            hcmPositionBudgetAccountLine.BudgetPurposeType = tmpBudgetPurposeType.BudgetPurposeType;
                            hcmPositionBudgetAccountLine.ValidTo = DateTimeUtil::maxValue();
                        }

                        hcmPositionBudgetAccountLine.ValidFrom   = _positionMassUpdate.parmEffectiveOn();
                        hcmPositionBudgetAccountLine.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

                        // check for the existence of a record existing after the currently selected record
                        if (hcmPositionBudgetAccountLineSource)
                        {
                            if (hcmPositionBudgetAccountLineSource.futureRecordExists())
                            {
                                futureRecordExists = true;
                            }
                        }
                        else
                        {
                            // a record was not found for the effective date, so check if a future dated record exists
                            if (HcmPositionBudgetAccountLine::findByPositionLEBudgetPurposeType(_positionMassUpdate.parmPositionRecId(), _positionMassUpdate.parmDimensionLegalEntityRecId(), tmpBudgetPurposeType.BudgetPurposeType, _positionMassUpdate.parmEffectiveOn(), DateTimeUtil::maxValue()))
                            {
                                futureRecordExists = true;
                            }
                        }

                        if (futureRecordExists)
                        {
                            throw error("@Workforce:TheUpdateWasCanceledBecauseAFutureChangeIsPending");
                        }

                        if (hcmPositionBudgetAccountLine.validateWrite())
                        {
                            ttsBegin;
                            hcmPositionBudgetAccountLine.write();
                            ttsCommit;
                            attemptUpdate = true;
                        }
                        else
                        {
                            throw Exception::Error;
                        }

                        tmpBudgetPurposeType.clear();
                        hcmPositionBudgetAccountLine.clear();
                    }
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return attemptUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>