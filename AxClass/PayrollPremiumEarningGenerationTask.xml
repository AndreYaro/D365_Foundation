<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPremiumEarningGenerationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollPremiumEarningGenerationTask</c> class processes the list of earning statements and for the list of selected premium codes and passes the
/// combination of single earning statement and premium code to the <c>PayrollPEGenerator</c> class for premium earnings generation.
/// </summary>
public class PayrollPremiumEarningGenerationTask extends RunBaseBatch implements BatchRetryable
{
    Set       earningStatementSet;
    container batchTaskGroupList;
    boolean   overridePremiumEarnings;
    List      premiumEarningCodeIdList;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        batchTaskGroupList,
        overridePremiumEarnings
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEarningStatementCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of earning statements updated by the process.
    /// </summary>
    /// <returns>
    /// The number of earning statements updated by the process.
    /// </returns>
    public Counter getEarningStatementCount()
    {
        Counter earningStatementCount;

        if (earningStatementSet)
        {
            earningStatementCount = earningStatementSet.elements();
        }

        return earningStatementCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList, premiumEarningCodeIdList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchTaskGroupList</Name>
				<Source><![CDATA[
    public container parmBatchTaskGroupList(container _batchTaskGroupList = batchTaskGroupList)
    {
        batchTaskGroupList = _batchTaskGroupList;

        return batchTaskGroupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningStatementSet</Name>
				<Source><![CDATA[
    public Set parmEarningStatementSet(Set _earningStatementSet = earningStatementSet)
    {
        earningStatementSet = _earningStatementSet;

        return earningStatementSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverridePremiumEarnings</Name>
				<Source><![CDATA[
    public boolean parmOverridePremiumEarnings(boolean _overridePremiumEarnings = overridePremiumEarnings)
    {
        overridePremiumEarnings = _overridePremiumEarnings;

        return overridePremiumEarnings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPremiumEarningCodeList</Name>
				<Source><![CDATA[
    public List parmPremiumEarningCodeList(List _premiumEarningCodeIdList = premiumEarningCodeIdList)
    {
        premiumEarningCodeIdList = _premiumEarningCodeIdList;

        return premiumEarningCodeIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEarningStatementForPremiumCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the combination of earning statement and premium code.
    /// </summary>
    /// <param name="_earningStatement">
    /// The earning statement buffer.
    /// </param>
    /// <param name="_premiumEarningCode">
    /// The premium earning code buffer.
    /// </param>
    private void processEarningStatementForPremiumCode(PayrollEarningStatement _earningStatement, PayrollPremiumEarningCode _premiumEarningCode)
    {
        PayrollPEGenerator payrollPEGenerator = PayrollPEGenerator::construct(_premiumEarningCode.PayoutBasis);

        payrollPEGenerator.parmOverrideExistingPremiumEarningLines(overridePremiumEarnings);
        payrollPEGenerator.parmEarningStatement(_earningStatement);
        payrollPEGenerator.parmPremiumEarningCode(_premiumEarningCode);
        payrollPEGenerator.parmEarningStatementSet(earningStatementSet);

        payrollPEGenerator.generatePremiumEarnings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the combinations of earning statement and preminum code and send them for processing.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        PayrollEarningStatement   earningStatement;
        Counter                   counter;
        PayrollPremiumEarningCode premiumEarningCode;
        ListEnumerator            premiumEarningCodeEnumerator;

        earningStatementSet = new Set(Types::Int64);

        // The calling process has supplied a container with a list of earning statements and also supplied a list of premium codes to generat premium earnings

        premiumEarningCodeEnumerator = premiumEarningCodeIdList.getEnumerator();

        for (counter = 1; counter <= conLen(batchTaskGroupList); counter++)
        {
            earningStatement = conPeek(batchTaskGroupList, counter);

            premiumEarningCodeEnumerator.reset();

            while (premiumEarningCodeEnumerator.moveNext())
            {
                premiumEarningCode = premiumEarningCodeEnumerator.current();

                try
                {
                    ttsBegin;

                    this.processEarningStatementForPremiumCode(earningStatement, premiumEarningCode);

                    ttsCommit;
                }
                catch (Exception::Error)
                {
                    ttsAbort;

                    // Assumes that any error message was already raised at the point that threw the exception, so continue to the next earning statement.
                    continue;
                }
                catch (Exception::Deadlock)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        error(strFmt("@Payroll:DeadlockCreatingPremiumEarningLineInEarningStatement1", earningStatement.DocumentNumber));

                        ttsAbort;

                        continue;
                    }
                    else
                    {
                        retry;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            error(strFmt("@Payroll:EarningStatement1", earningStatement.DocumentNumber));

                            ttsAbort;

                            continue;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        error(strFmt("@Payroll:EarningStatement1", earningStatement.DocumentNumber));

                        ttsAbort;

                        continue;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container premiumEarningCodeIdContainer;
        Version   version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, premiumEarningCodeIdContainer] = packedClass;
                premiumEarningCodeIdList = List::create(premiumEarningCodeIdContainer);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PayrollPremiumEarningGenerationTask</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PayrollPremiumEarningGenerationTask</c> class.
    /// </returns>
    public static PayrollPremiumEarningGenerationTask construct()
    {
        PayrollPremiumEarningGenerationTask premiumEarningGenerationTask = new PayrollPremiumEarningGenerationTask();

        return premiumEarningGenerationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>