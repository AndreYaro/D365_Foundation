<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgFormat_XmlSubmit_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates and interprets the XML to be sent to the submission web service.
/// </summary>
class EFDocMsgFormat_XmlSubmit_BR extends EFDocMsgFormat_XmlBase_BR implements IEFDocMsgFormat
{
    #define.ICMSModBc('3')      // 3 = Sales value
    #define.ICMSSTModBc('4')    // 4 = Contribution Margin

    EFiscalDocument_BR          fiscalDocument;
    IEFDocMsgStream_BR          stream;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFiscalDocument</Name>
				<Source><![CDATA[
    public EFiscalDocument_BR parmFiscalDocument(EFiscalDocument_BR _fiscalDocument = fiscalDocument)
    {
        fiscalDocument = _fiscalDocument;
        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add_infIntermed_Element</Name>
				<Source><![CDATA[
    protected void add_infIntermed_Element(XmlElement _infNFeElement)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>add_pag_Element</Name>
				<Source><![CDATA[
    protected void add_pag_Element(XmlElement _infNFeElement)
    {        
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreateExportElement</Name>
				<Source><![CDATA[
    protected boolean checkCreateExportElement()
    {
        return fiscalDocument.exportationPortName() ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_cobr_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_cobr_Element()
    {
        XmlElement                  cobrElement;
        XmlElement                  fatElement;
        XmlElement                  dupElement;
        ListEnumerator              enumerator;
        FiscalDocumentInstallment_BR   fiscalDocumentInstallment;
        Counter                     linenum;
        ;

        cobrElement = this.createElement('cobr');

        if (fiscalDocument.invoiceSpecie_BR() == FiscalDocumentSpecie_BR::NFF && fiscalDocument.fiscalDocument().TotalAmount)
        {
            fatElement = this.createElement('fat');
            this.appendChildIfNotEmpty(fatElement, this.createElementWithValue('nFat', fiscalDocument.fiscalDocument().FiscalDocumentNumber));
            this.appendChildIfNotEmpty(fatElement, this.createElementWithValue('vOrig', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().TotalAmount)
                                                                                                            + abs(fiscalDocument.fiscalDocument().TotalDiscountAmount))));
            this.appendChildIfNotEmpty(fatElement, this.createElementWithValue('vDesc', this.formatXmlAmount(fiscalDocument.fiscalDocument().TotalDiscountAmount)));
            this.appendChildIfNotEmpty(fatElement, this.createElementWithValue('vLiq', this.formatXmlAmount(fiscalDocument.fiscalDocument().TotalAmount)));
            this.appendChildIfNotEmpty(cobrElement, fatElement);

            if (fiscalDocument.paymSchedList())
            {
                enumerator = fiscalDocument.paymSchedList().getEnumerator();
                while (enumerator.moveNext())
                {
                    linenum++;
                    fiscalDocumentInstallment = enumerator.current();

                    dupElement = this.createElement('dup');
                    this.appendChildIfNotEmpty(dupElement, this.createElementWithValue('nDup', strfmt('%1/%2', fiscalDocument.fiscalDocument().FiscalDocumentNumber, int2str(lineNum)) ));
                    this.appendChildIfNotEmpty(dupElement, this.createElementWithValue('dVenc', this.formatXmlDate(fiscalDocumentInstallment.DueDate) ));
                    this.appendChildIfNotEmpty(dupElement, this.createElementWithValue('vDup', this.formatXmlAmount((fiscalDocumentInstallment.Amount)) ));

                    this.appendChildIfNotEmpty(cobrElement, dupElement);
                }
            }
        }

        return cobrElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_cEnq_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_cEnq_Element(EFiscalDocumentLineTax_BR _taxLine)
    {
        return this.createElementWithValue('cEnq', '999');
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_COFINS_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_COFINS_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement                  cofinsElement;
        XmlElement                  cofinsAliqElement;
        XmlElement                  cofinsQtdeElement;
        XmlElement                  cofinsNtElement;
        XmlElement                  cofinsOutrElement;
        EFiscalDocumentLineTax_BR   taxLine;

        cofinsElement = this.createElement('COFINS');

        taxLine = _lineMap.getTaxLine(TaxType_BR::COFINS, '01, 02');
        if (taxLine.hasTaxTrans())
        {
            cofinsAliqElement = this.createElement('COFINSAliq');
            cofinsAliqElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
            cofinsAliqElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(taxLine.taxBaseAmount()) ));
            cofinsAliqElement.appendChild(this.createElementWithValue('pCOFINS', this.formatXmlAmount(taxLine.taxPct()) ));
            cofinsAliqElement.appendChild(this.createElementWithValue('vCOFINS', this.formatXmlAmount(taxLine.taxAmount()) ));
            cofinsElement.appendChild(cofinsAliqElement);
        }

        taxLine = _lineMap.getTaxLine(TaxType_BR::COFINS, '03');
        if (taxLine.hasTaxTrans())
        {
            cofinsQtdeElement = this.createElement('COFINSQtde');
            cofinsQtdeElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
            cofinsQtdeElement.appendChild(this.createElementWithValue('vBCProd', this.formatXmlAmount(0) ));
            cofinsQtdeElement.appendChild(this.createElementWithValue('pAliqProd', this.formatXmlAmount(0) ));
            cofinsQtdeElement.appendChild(this.createElementWithValue('vCOFINS', this.formatXmlAmount(0) ));
            cofinsElement.appendChild(cofinsQtdeElement);
        }

        taxLine = _lineMap.getTaxLine(TaxType_BR::COFINS, '04, 06, 07, 08, 09');
        if (taxLine.hasTaxTrans())
        {
            cofinsNtElement = this.createElement('COFINSNT');
            cofinsNtElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
            cofinsElement.appendChild(cofinsNtElement);
        }

        taxLine = _lineMap.getTaxLine(TaxType_BR::COFINS, '49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 98, 99');
        if (taxLine.hasTaxTrans())
        {
            cofinsOutrElement = this.createElement('COFINSOutr');
            cofinsOutrElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));

                cofinsOutrElement.appendChild(this.createElementWithValue('vBC',     this.formatXmlAmount(taxLine.taxBaseAmount()) ));
                cofinsOutrElement.appendChild(this.createElementWithValue('pCOFINS', this.formatXmlAmount(taxLine.taxPct()) ));
                cofinsOutrElement.appendChild(this.createElementWithValue('vCOFINS', this.formatXmlAmount(taxLine.taxAmount()) ));

            cofinsElement.appendChild(cofinsOutrElement);
        }

        return cofinsElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_dest_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_dest_Element()
    {
        #ExportFiscalDocument_BR
        XmlElement destElement;
        XmlElement enderDest;

        destElement = this.createElement('dest');
        if (fiscalDocument.thirdPartyCPF())
        {
            destElement.appendChild(this.createElementWithValue('CPF', this.formatKeepNumbersOnly(fiscalDocument.thirdPartyCPF())));
        }
        else
        {
            destElement.appendChild(this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(fiscalDocument.thirdPartyCNPJ())));
        }

        if (fiscalDocument.fiscalEstablishment().EFDocEnvironment == EFDocEnvironment_BR::Testing)
        {
            destElement.appendChild(this.createElementWithValue('xNome', #TestRecipientName));
        }
        else
        {
            destElement.appendChild(this.createElementWithValue('xNome', fiscalDocument.thirdPartyName()));
        }

        enderDest = this.createElement('enderDest');
        enderDest.appendChild(this.createElementWithValue('xLgr', fiscalDocument.thirdPartyStreet() ));
        enderDest.appendChild(this.createElementWithValue('nro', fiscalDocument.thirdPartyAddressNumber() ));
        this.appendChildIfNotEmpty(enderDest, this.createElementWithValue('xCpl', fiscalDocument.thirdPartyAddressComplement() ));
        enderDest.appendChild(this.createElementWithValue('xBairro', fiscalDocument.thirdPartyAddressDistrict() ));
        enderDest.appendChild(this.createElementWithValue('cMun', fiscalDocument.thirdPartyCityIBGECode() ));
        enderDest.appendChild(this.createElementWithValue('xMun', fiscalDocument.thirdPartyCity() ));
        enderDest.appendChild(this.createElementWithValue('UF', fiscalDocument.thirdPartyState() ));
        enderDest.appendChild(this.createElementWithValue('CEP', this.formatFillLeft(fiscalDocument.thirdPartyZipCode(), 8)));
        enderDest.appendChild(this.createElementWithValue('cPais', fiscalDocument.thirdPartyCountryCode() ));
        enderDest.appendChild(this.createElementWithValue('xPais', fiscalDocument.thirdPartyCountryName() ));
        this.appendChildIfNotEmpty(enderDest, this.createElementWithValue('fone', this.formatKeepNumbersOnly(fiscalDocument.thirdPartyPhone())));

        destElement.appendChild(enderDest);
        destElement.appendChild(this.createElementWithValue('IE', fiscalDocument.thirdPartyIEnum() == 'ISENTO' ? fiscalDocument.thirdPartyIEnum() : this.formatKeepNumbersOnly(fiscalDocument.thirdPartyIEnum())));
        this.appendChildIfNotEmpty(destElement, this.createElementWithValue('ISUF', this.formatKeepNumbersOnly(fiscalDocument.deliverySuframaNumber())));

        // Added V4
        this.appendChildIfNotEmpty(destElement, this.createElementWithValue('email', fiscalDocument.thirdPartyEmail()));

        return destElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_di_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_di_Element(EFiscalDocumentLine_BR _line)
    {
        XmlElement diElement;
        XmlElement adiElement;

        diElement = this.createElement('DI');

        if (fiscalDocument.PurchImportDeclaration())
        {
            diElement.appendChild(this.createElementWithValue('nDI', fiscalDocument.PurchImportDeclaration().DINumber));
            diElement.appendChild(this.createElementWithValue('dDI', this.formatXmlDate(fiscalDocument.PurchImportDeclaration().DIDate)));
            diElement.appendChild(this.createElementWithValue('xLocDesemb', fiscalDocument.purchImportDeclaration().portName()));
            diElement.appendChild(this.createElementWithValue('UFDesemb', fiscalDocument.PurchImportDeclaration().PortState));
            diElement.appendChild(this.createElementWithValue('dDesemb', this.formatXmlDate(fiscalDocument.PurchImportDeclaration().DIDate)));
        }

        diElement.appendChild(this.createElementWithValue('cExportador', fiscalDocument.fiscalDocument().FiscalDocumentAccountNum));

        adiElement = this.createElement('adi');
        adiElement.appendChild(this.createElementWithValue('nAdicao', this.formatStr2Int(_line.purchAddition())));
        adiElement.appendChild(this.createElementWithValue('nSeqAdic', '1'));
        adiElement.appendChild(this.createElementWithValue('cFabricante', fiscalDocument.fiscalDocument().FiscalDocumentAccountNum));

        diElement.appendChild(adiElement);

        return diElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_emit_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_emit_Element()
    {
        XmlElement emitElement;
        XmlElement enderEmit;

        emitElement = this.createElement('emit');
        if (fiscalDocument.issuerCNPJ())
        {
            emitElement.appendChild(this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(fiscalDocument.issuerCNPJ())));
        }
        else
        {
            emitElement.appendChild(this.createElementWithValue('CPF', this.formatKeepNumbersOnly(fiscalDocument.issuerCPF())));
        }
        emitElement.appendChild(this.createElementWithValue('xNome', fiscalDocument.issuerName() ));
        emitElement.appendChild(this.createElementWithValue('xFant', fiscalDocument.issuerName() ));

        enderEmit = this.createElement('enderEmit');
        enderEmit.appendChild(this.createElementWithValue('xLgr', fiscalDocument.issuerStreet() ));
        enderEmit.appendChild(this.createElementWithValue('nro', fiscalDocument.issuerAddressNumber() ));
        this.appendChildIfNotEmpty(enderEmit, this.createElementWithValue('xCpl', fiscalDocument.issuerAddressComplement() ));
        enderEmit.appendChild(this.createElementWithValue('xBairro', fiscalDocument.issuerDistrict() ));
        enderEmit.appendChild(this.createElementWithValue('cMun', fiscalDocument.issuerIBGECode() ));
        enderEmit.appendChild(this.createElementWithValue('xMun', fiscalDocument.issuerCity() ));
        enderEmit.appendChild(this.createElementWithValue('UF', fiscalDocument.issuerState() ));
        enderEmit.appendChild(this.createElementWithValue('CEP', this.formatFillLeft(fiscalDocument.issuerZipCode(),8)));
        enderEmit.appendChild(this.createElementWithValue('cPais', fiscalDocument.issuerCountryCode() ));
        enderEmit.appendChild(this.createElementWithValue('xPais', fiscalDocument.issuerCountryName() ));
        this.appendChildIfNotEmpty(enderEmit, this.createElementWithValue('fone', this.formatKeepNumbersOnly(fiscalDocument.issuerPhone())));

        emitElement.appendChild(enderEmit);
        emitElement.appendChild(this.createElementWithValue('IE', fiscalDocument.issuerIEnum() == 'ISENTO' ? 'ISENTO' : this.formatKeepNumbersOnly(fiscalDocument.issuerIEnum()) ));

        if (fiscalDocument.getOperationLocation() != OperationLocation_BR::Intrastate)
        {
            this.appendChildIfNotEmpty(emitElement, this.createElementWithValue('IEST', this.formatKeepNumbersOnly(fiscalDocument.issuerTributarySubstitutionRegistry())));
        }
        if (fiscalDocument.totalGrossServicesAmount())
        {
            this.appendChildIfNotEmpty(emitElement, this.createElementWithValue('IM', this.formatKeepNumbersOnly(fiscalDocument.issuerCCMNum()) ));
            this.appendChildIfNotEmpty(emitElement, this.createElementWithValue('CNAE', fiscalDocument.issuerCCMNum() ? this.formatKeepNumbersOnly(fiscalDocument.issuerCNAE()) : '' ));
        }
        this.appendChildIfNotEmpty(emitElement, this.createElementWithValue('CRT', '3'));

        return emitElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_entrega_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_entrega_Element()
    {
        XmlElement entregaElement;
        ;

        entregaElement = this.createElement('entrega');

        entregaElement.appendChild(this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(fiscalDocument.deliveryCNPJ()) ));
        entregaElement.appendChild(this.createElementWithValue('xLgr', fiscalDocument.deliveryAddressStreet()));
        entregaElement.appendChild(this.createElementWithValue('nro', fiscalDocument.deliveryAddressStreetNumber() ));
        this.appendChildIfNotEmpty(entregaElement, this.createElementWithValue('xCpl', fiscalDocument.deliveryAddressBuildingCompliment()));
        entregaElement.appendChild(this.createElementWithValue('xBairro', fiscalDocument.deliveryAddressDistrict() ));
        entregaElement.appendChild(this.createElementWithValue('cMun', fiscalDocument.deliveryCityIBGECode() ));
        entregaElement.appendChild(this.createElementWithValue('xMun', fiscalDocument.deliveryAddressCityName() ));
        entregaElement.appendChild(this.createElementWithValue('UF', fiscalDocument.deliveryAddressState() ));

        return entregaElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_enviNFe_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_enviNFe_Element()
    {
        XmlElement  enviNFeElement;
        XmlElement  idLoteElement;
        ;

        idLoteElement = this.createElementWithValue('idLote', '1');

        enviNFeElement = this.createElement('enviNFe');
        enviNFeElement.setAttribute('versao', this.version());
        enviNFeElement.appendChild(idLoteElement);

        return enviNFeElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_exporta_Element</Name>
				<Source><![CDATA[
/// <summary>
    /// Creates the exporta element with data for exportation operations
    /// </summary>
    /// <returns>
    /// The XML element with exportation data
    /// </returns>
    protected XmlElement create_exporta_Element()
    {
        XmlElement  exportaElement;

        exportaElement = this.createElement('exporta');

        this.appendChildIfNotEmpty(exportaElement, this.createElementWithValue('UFEmbarq', fiscalDocument.exportationPortState() ));
        this.appendChildIfNotEmpty(exportaElement, this.createElementWithValue('xLocEmbarq', fiscalDocument.exportationPortName() ));

        return exportaElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ICMS_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_ICMS_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement                  icmsElement;
        XmlElement                  icmsXXElement;
        EFiscalDocumentLineTax_BR   taxLine = _lineMap.getTaxLine(TaxType_BR::ICMS, '');
        ;

        icmsElement = this.createElement('ICMS');

        switch (taxLine.taxationCode())
        {
            case '00':
                icmsXXElement = this.createElement('ICMS00');
                icmsXXElement.appendChild(this.createElementWithValue('orig', taxLine.taxationOrigin() ));
                icmsXXElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
                icmsXXElement.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
                icmsXXElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(taxLine.taxBaseAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(taxLine.taxPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(taxLine.taxAmount()) ));
                break;

            case '10':
                icmsXXElement = this.createElement('ICMS10');
                icmsXXElement.appendChild(this.createElementWithValue('orig', taxLine.taxationOrigin() ));
                icmsXXElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
                icmsXXElement.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
                icmsXXElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(taxLine.taxBaseAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(taxLine.taxPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(taxLine.taxAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('pMVAST', this.formatXmlAmount(taxLine.tribSubstMarkupPct()) ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('pRedBCST', this.formatXmlAmount(taxLine.tribSubstReductionPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(taxLine.tribSubstTaxBaseAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(taxLine.tribSubstTaxPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(taxLine.tribSubstTaxAmount()) ));
                break;

            case '20':
                icmsXXElement = this.createElement('ICMS20');
                icmsXXElement.appendChild(this.createElementWithValue('orig', taxLine.taxationOrigin() ));
                icmsXXElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
                icmsXXElement.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
                icmsXXElement.appendChild(this.createElementWithValue('pRedBC', this.formatXmlAmount(taxLine.taxReductionPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(taxLine.taxBaseAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(taxLine.taxPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(taxLine.taxAmount()) ));
                break;

            case '30':
                icmsXXElement = this.createElement('ICMS30');
                icmsXXElement.appendChild(this.createElementWithValue('orig', taxLine.taxationOrigin() ));
                icmsXXElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
                icmsXXElement.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('pMVAST', this.formatXmlAmount(taxLine.tribSubstMarkupPct()) ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('pRedBCST', this.formatXmlAmount(0) ));
                icmsXXElement.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(taxLine.tribSubstTaxBaseAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(taxLine.tribSubstTaxPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(taxLine.tribSubstTaxAmount()) ));
                break;

            case '40', '41', '50':
                icmsXXElement = this.createElement('ICMS40');
                icmsXXElement.appendChild(this.createElementWithValue('orig', taxLine.taxationOrigin() ));
                icmsXXElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
                break;

            case '51':
                icmsXXElement = this.createElement('ICMS51');
                icmsXXElement.appendChild(this.createElementWithValue('orig', taxLine.taxationOrigin() ));
                icmsXXElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('modBC', #ICMSModBc ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('pRedBC', this.formatXmlAmount(taxLine.taxReductionPct()) ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('vBC', this.formatXmlAmount(taxLine.taxBaseAmount()) ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('pICMS', this.formatXmlAmount(taxLine.taxPct()) ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('vICMS', this.formatXmlAmount(taxLine.taxAmount()) ));
                break;

            case '60':
                icmsXXElement = this.createElement('ICMS60');
                icmsXXElement.appendChild(this.createElementWithValue('orig', taxLine.taxationOrigin() ));
                icmsXXElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
                // Name Modified V4
                icmsXXElement.appendChild(this.createElementWithValue('vBCSTRet', this.formatXmlAmount(taxLine.tribSubstTaxBaseAmount()) ));
                // Name Modified V4
                icmsXXElement.appendChild(this.createElementWithValue('vICMSSTRet', this.formatXmlAmount(taxLine.tribSubstTaxAmount()) ));
                break;

            case '70':
                icmsXXElement = this.createElement('ICMS70');
                icmsXXElement.appendChild(this.createElementWithValue('orig', taxLine.taxationOrigin() ));
                icmsXXElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
                icmsXXElement.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
                icmsXXElement.appendChild(this.createElementWithValue('pRedBC', this.formatXmlAmount(taxLine.taxReductionPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(taxLine.taxBaseAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(taxLine.taxPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(taxLine.taxAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('pMVAST', this.formatXmlAmount(taxLine.tribSubstMarkupPct()) ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('pRedBCST', this.formatXmlAmount(0) ));
                icmsXXElement.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(taxLine.tribSubstTaxBaseAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(taxLine.tribSubstTaxPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(taxLine.tribSubstTaxAmount()) ));
                break;

            case '90':
                icmsXXElement = this.createElement('ICMS90');
                icmsXXElement.appendChild(this.createElementWithValue('orig', taxLine.taxationOrigin() ));
                icmsXXElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
                icmsXXElement.appendChild(this.createElementWithValue('modBC', #ICMSModBc ));
                icmsXXElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(taxLine.taxBaseAmount()) ));
                this.appendChildIfNotEmpty(icmsXXElement,this.createElementWithValue('pRedBC', this.formatXmlAmount(taxLine.taxReductionPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('pICMS', this.formatXmlAmount(taxLine.taxPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(taxLine.taxAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('modBCST', #ICMSSTModBc ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('pMVAST', this.formatXmlAmount(taxLine.tribSubstMarkupPct()) ));
                this.appendChildIfNotEmpty(icmsXXElement, this.createElementWithValue('pRedBCST', this.formatXmlAmount(0) ));
                icmsXXElement.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(taxLine.tribSubstTaxBaseAmount()) ));
                icmsXXElement.appendChild(this.createElementWithValue('pICMSST', this.formatXmlAmount(taxLine.tribSubstTaxPct()) ));
                icmsXXElement.appendChild(this.createElementWithValue('vICMSST', this.formatXmlAmount(taxLine.tribSubstTaxAmount()) ));
                break;
        }

        this.appendChildIfNotEmpty(icmsElement, icmsXXElement);

        return icmsElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ide_Element</Name>
				<Source><![CDATA[
protected XmlElement create_ide_Element()
    {
        XmlElement ideElement;

        ideElement = this.createElement('ide');
        ideElement.appendChild(this.createElementWithValue('cUF', substr(fiscalDocument.issuerIBGECode(), 1, 2) ));
        ideElement.appendChild(this.createElementWithValue('cNF', this.formatFillLeft(int2str(fiscalDocument.numericCode()), 8)));
        ideElement.appendChild(this.createElementWithValue('natOp', fiscalDocument.fiscalDocument().OperationDescription ));
        ideElement.appendChild(this.createElementWithValue('indPag', fiscalDocument.paymTerms() ));
        ideElement.appendChild(this.createElementWithValue('mod',  fiscalDocument.fiscalDocument().Model));
        ideElement.appendChild(this.createElementWithValue('serie', this.formatStr2Int(fiscalDocument.fiscalDocument().FiscalDocumentSeries)));
        ideElement.appendChild(this.createElementWithValue('nNF', this.formatStr2Int(fiscalDocument.fiscalDocument().FiscalDocumentNumber)));
        ideElement.appendChild(this.createElementWithValue('dEmi', this.formatXmlDate(fiscalDocument.fiscalDocument().FiscalDocumentDate) ));
        this.appendChildIfNotEmpty(ideElement, this.createElementWithValue('dSaiEnt', this.formatXmlDate(fiscalDocument.fiscalDocument().FiscalDocumentDate) ));
        ideElement.appendChild(this.createElementWithValue('tpNF', fiscalDocument.inventoryDirection() ));
        ideElement.appendChild(this.createElementWithValue('cMunFG', fiscalDocument.issuerIBGECode() ));

        this.create_NFref_Element(ideElement);

        ideElement.appendChild(this.createElementWithValue('tpImp', '1' ));
        ideElement.appendChild(this.createElementWithValue('tpEmis', int2str(enum2int(fiscalDocument.contingencyMode()))));
        ideElement.appendChild(this.createElementWithValue('cDV', substr(fiscalDocument.accessKey(), strlen(fiscalDocument.accessKey()), 1) ));
        ideElement.appendChild(this.createElementWithValue('tpAmb', fiscaldocument.fiscalEstablishment().EFDocEnvironment == EFDocEnvironment_BR::Production ? '1' : '2' ));
        ideElement.appendChild(this.createElementWithValue('finNFe', this.getFiscalDocumentPurpose() ));
        ideElement.appendChild(this.createElementWithValue('procEmi', '0' ));
        ideElement.appendChild(this.createElementWithValue('verProc', substr(ApplicationVersion::applBuildNo(), 1, 20) ));
        // Added V4
        this.appendChildIfNotEmpty(ideElement, this.createElementWithValue('dhCont', fiscalDocument.contingencyDateTime() ));
        // Added V4
        this.appendChildIfNotEmpty(ideElement, this.createElementWithValue('xJust', fiscalDocument.contingencyReason()) );

        return ideElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_II_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_II_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement                  iiElement;
        EFiscalDocumentLineTax_BR   taxLine;
        ;
        iiElement = this.createElement('II');

        if (_lineMap.getTaxLine(TaxType_BR::ImportTax, '').hasTaxTrans())
        {
            taxLine = _lineMap.getTaxLine(TaxType_BR::ImportTax, '');
            iiElement.appendChild(this.createElementWithValue( 'vBC', this.formatXmlAmount(taxLine.taxBaseAmountOther()) ));
            iiElement.appendChild(this.createElementWithValue( 'vDespAdu', this.formatXmlAmount(_lineMap.totalFreightMarkupAmount() + _lineMap.totalInsuranceMarkupAmount() +_lineMap.totalSISCOMEXMarkupAmount())));
            iiElement.appendChild(this.createElementWithValue( 'vII', this.formatXmlAmount(taxLine.taxAmountOther())));
            iiElement.appendChild(this.createElementWithValue( 'vIOF', '0'));
        }

        return iiElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_imposto_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_imposto_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement impostoElement;
        XmlElement pisElement;
        XmlElement cofinsElement;
        
        impostoElement = this.createElement('imposto');
        
        this.appendChildIfNotEmpty(impostoElement, this.create_vTotTrib_Element(_lineMap));
        
        if (!this.hasISS(_lineMap))
        {
            impostoElement.appendChild(this.create_ICMS_Element(_lineMap));
            this.appendChildIfNotEmpty(impostoElement, this.create_IPI_Element(_lineMap));
            this.appendChildIfNotEmpty(impostoElement, this.create_II_Element(_lineMap));
            
        }
        else
        {
            this.appendChildIfNotEmpty(impostoElement, this.create_ISSQN_Element(_lineMap));
        }

        pisElement = this.create_PIS_Element(_lineMap);
        cofinsElement = this.create_COFINS_Element(_lineMap);
        
        impostoElement.appendChild(pisElement);
        impostoElement.appendChild(cofinsElement);
        
        return impostoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_infAdic_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_infAdic_Element()
    {
        XmlElement                          infAdicElement, procRefElement;
        FiscalDocumentRefProcessParmData_BR referencedProcess;
        ListEnumerator                      processReferenceEnumerator;

        infAdicElement = this.createElement('infAdic');
        this.appendChildIfNotEmpty(infAdicElement, this.createElementWithValue('infAdFisco', this.removeBlankSpaceAndNewLine(fiscalDocument.getHeaderLegalTexts()) ));
        this.appendChildIfNotEmpty(infAdicElement, this.createElementWithValue('infCpl', this.removeBlankSpaceAndNewLine(fiscalDocument.getAdditionalInformation()) ));

        infAdicElement = this.create_procRef_Elements(infAdicElement);

        return infAdicElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBlankSpaceAndNewLine</Name>
				<Source><![CDATA[
    protected str removeBlankSpaceAndNewLine(str text)
    {
        str newText;
        newText = strReplace(text, '\n', ' ');
        newText = strReplace(newText, '\r', '');
        newText = strRTrim(newText);

        return newText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_infNFe_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_infNFe_Element()
    {
        XmlElement infNfeElement;
        ;

        infNFeElement = this.createElement('infNFe');
        infNFeElement.setAttribute('Id', 'NFe' + fiscalDocument.accessKey());
        infNFeElement.setAttribute('versao', this.version());

        return infNFeElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_infRespTec_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_infRespTec_Element()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_IPI_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_IPI_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement                  ipiElement;
        XmlElement                  ipiTribElement;
        XmlElement                  ipiNTElement;
        EFiscalDocumentLineTax_BR   taxLine;

        ipiElement = this.createElement('IPI');

        taxLine = _lineMap.getTaxLine(TaxType_BR::IPI, '');
        if (taxLine.hasTaxTrans())
        {
            ipiElement.appendChild(this.create_cEnq_Element(taxLine));

            taxLine = _lineMap.getTaxLine(TaxType_BR::IPI, '00, 49, 50, 99');
            if (taxLine.hasTaxTrans())
            {
                ipiTribElement = this.createElement('IPITrib');
                ipiTribElement.appendChild(this.createElementWithValue( 'CST', taxLine.taxationCode() ));
                ipiTribElement.appendChild(this.createElementWithValue( 'vBC', this.formatXmlAmount(taxLine.taxBaseAmount()) ));
                ipiTribElement.appendChild(this.createElementWithValue( 'pIPI', this.formatXmlAmount(taxLine.taxPct() )));
                ipiTribElement.appendChild(this.createElementWithValue( 'vIPI', 
                    this.formatXmlAmount(fiscalDocument.purpose() == FiscalDocumentPurpose_BR::Return ? 0: taxLine.taxAmount())));
                this.appendChildIfNotEmpty(ipiElement, ipiTribElement);
            }

            taxLine = _lineMap.getTaxLine(TaxType_BR::IPI, '01, 02, 03, 04, 05, 51, 52, 53, 54, 55');
            if (taxLine.hasTaxTrans())
            {
                ipiNTElement = this.createElement('IPINT');
                ipiNTElement.appendChild(this.createElementWithValue( 'CST', taxLine.taxationCode() ));
                this.appendChildIfNotEmpty(ipiElement, ipiNTElement);
            }
        }

        return ipiElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_ISSQN_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_ISSQN_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement                  issqnElement;
        EFiscalDocumentLineTax_BR   taxLine;
        str                         cSitTrib;
        ;

        issqnElement = this.createElement('ISSQN');

        taxLine = _lineMap.getTaxLine(TaxType_BR::ISS, '');
        if (taxLine.hasTaxTrans())
        {
            issqnElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(taxLine.taxBaseAmount()) ));
            issqnElement.appendChild(this.createElementWithValue('vAliq', this.formatXmlAmount(taxLine.taxPct()) ));
            issqnElement.appendChild(this.createElementWithValue('vISSQN', this.formatXmlAmount(taxLine.taxAmount()) ));
            issqnElement.appendChild(this.createElementWithValue('cMunFG', _lineMap.cityWhereServicePerformed() ));
            issqnElement.appendChild(this.createElementWithValue('cListServ', _lineMap.fiscalDocumentLine().ServiceCode));
            //Added V4
            if (taxLine.taxAmount() == 0)
            {
                cSitTrib = 'I';
            }
            else
            {
                cSitTrib = taxLine.includedTax() ? 'N' : taxLine.retainedTax()? 'R' : '';
            }
            issqnElement.appendChild(this.createElementWithValue('cSitTrib', cSitTrib));
        }

        return issqnElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_modFrete_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_modFrete_Element(FiscalDocumentFreightTerms_BR _freightTerms)
    {
        var modFreteValue = strFmt('%1', FiscalDocumentHelper::getFreightTermsIntValue(_freightTerms));

        return this.createElementWithValue('modFrete',  modFreteValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_NFe_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_NFe_Element()
    {
        return this.createElement('NFe');
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_NFref_Element</Name>
				<Source><![CDATA[
    protected void create_NFref_Element(XmlElement _parentElement)
    {
        #FiscalDocumentModels_BR

        XmlElement                  nfrefElement;
        XmlElement                  refNFElement;
        ListEnumerator              enumerator;
        FiscalReferenceMap_BR       fiscalReference;
        ;

        enumerator = fiscalDocument.fiscalReferenceList().getEnumerator();
        while (enumerator.moveNext())
        {
            fiscalReference = enumerator.current();

            if (fiscalReference.eFDocAccessKey())
            {
                refNFElement = this.createElementWithValue('refNFe', fiscalReference.eFDocAccessKey());
            }
            else
            {
                if (fiscalReference.fiscalDocumentModel() == #FiscalDocModel_2D)
                {
                    refNFElement = this.createElement('refECF');
                    refNFElement.appendChild( this.createElementWithValue('mod', fiscalReference.fiscalDocumentModel()));
                    refNFElement.appendChild( this.createElementWithValue('nECF', this.formatInt2Str(fiscalReference.retailTerminalNumber())));
                    refNFElement.appendChild( this.createElementWithValue('nCOO', fiscalReference.fiscalDocumentNumber()));
                }
                else if (fiscalReference.fiscalDocumentModel() == #FiscalDocModel_04)
                {
                    refNFElement = this.createElement('refNFP');
                    refNFElement.appendChild( this.createElementWithValue('cUF', fiscalReference.issuerStateIBGECode()) );
                    refNFElement.appendChild( this.createElementWithValue('AAMM', this.formatXmlDate(fiscalReference.fiscalDocumentDate(), EFDocMsgDateFormat_BR::YYMM)));

                    if (fiscalReference.issuerDirPartyType() == DirPartyType::Organization)
                    {
                        refNFElement.appendChild( this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(fiscalReference.issuerCNPJ())) );
                        refNFElement.appendChild( this.createElementWithValue('IE', this.formatKeepNumbersOnly(fiscalReference.issuerIE())) );
                    }
                    else if (fiscalReference.issuerDirPartyType() == DirPartyType::Person)
                    {
                        refNFElement.appendChild( this.createElementWithValue('CPF', this.formatKeepNumbersOnly(fiscalReference.issuerCNPJ())) );
                        refNFElement.appendChild( this.createElementWithValue('IE', 'ISENTO') );
                    }

                    refNFElement.appendChild( this.createElementWithValue('mod', fiscalReference.fiscalDocumentModel()) );
                    refNFElement.appendChild( this.createElementWithValue('serie', this.formatStr2Int(fiscalReference.fiscalDocumentSeries())));
                    refNFElement.appendChild( this.createElementWithValue('nNF', this.formatStr2Int(fiscalReference.fiscalDocumentNumber())));
                }
                else
                {
                    refNFElement = this.createElement('refNF');
                    refNFElement.appendChild( this.createElementWithValue('cUF', fiscalReference.issuerStateIBGECode()) );
                    refNFElement.appendChild( this.createElementWithValue('AAMM', this.formatXmlDate(fiscalReference.fiscalDocumentDate(), EFDocMsgDateFormat_BR::YYMM)));
                    refNFElement.appendChild( this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(fiscalReference.issuerCNPJ())) );
                    refNFElement.appendChild( this.createElementWithValue('mod', fiscalReference.fiscalDocumentModel()) );
                    refNFElement.appendChild( this.createElementWithValue('serie', this.formatStr2Int(fiscalReference.fiscalDocumentSeries())));
                    refNFElement.appendChild( this.createElementWithValue('nNF', this.formatStr2Int(fiscalReference.fiscalDocumentNumber())));
                }
            }

            nfrefElement = this.createElement('NFref');
            nfrefElement.appendChild(refNFElement);
            _parentElement.appendChild(nfrefElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_PIS_Element</Name>
				<Source><![CDATA[
protected XmlElement create_PIS_Element(EFiscalDocumentLine_BR _lineMap)
    {
        XmlElement                  pisElement;
        XmlElement                  pisAliqElement;
        XmlElement                  pisQtdeElement;
        XmlElement                  pisNtElement;
        XmlElement                  pisOutrElement;
        EFiscalDocumentLineTax_BR   taxLine;

        pisElement = this.createElement('PIS');

        taxLine = _lineMap.getTaxLine(TaxType_BR::PIS, '01, 02');
        if (taxLine.hasTaxTrans())
        {
            pisAliqElement = this.createElement('PISAliq');
            pisAliqElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
            pisAliqElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(taxLine.taxBaseAmount()) ));
            pisAliqElement.appendChild(this.createElementWithValue('pPIS', this.formatXmlAmount(taxLine.taxPct()) ));
            pisAliqElement.appendChild(this.createElementWithValue('vPIS', this.formatXmlAmount(taxLine.taxAmount()) ));
            pisElement.appendChild(pisAliqElement);
        }

        taxLine = _lineMap.getTaxLine(TaxType_BR::PIS, '03');
        if (taxLine.hasTaxTrans())
        {
            pisQtdeElement = this.createElement('PISQtde');
            pisQtdeElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
            pisQtdeElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(0) ));
            pisQtdeElement.appendChild(this.createElementWithValue('pPIS', this.formatXmlAmount(0) ));
            pisQtdeElement.appendChild(this.createElementWithValue('vPIS', this.formatXmlAmount(0) ));
            pisElement.appendChild(pisQtdeElement);
        }

        taxLine = _lineMap.getTaxLine(TaxType_BR::PIS, '04, 06, 07, 08, 09');
        if (taxLine.hasTaxTrans())
        {
            pisNtElement = this.createElement('PISNT');
            pisNtElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));
            pisElement.appendChild(pisNtElement);
        }

        taxLine = _lineMap.getTaxLine(TaxType_BR::PIS, '49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 98, 99');
        if (taxLine.hasTaxTrans())
        {
            pisOutrElement = this.createElement('PISOutr');
            pisOutrElement.appendChild(this.createElementWithValue('CST', taxLine.taxationCode() ));

                pisOutrElement.appendChild(this.createElementWithValue('vBC',  this.formatXmlAmount(taxLine.taxBaseAmount()) ));
                pisOutrElement.appendChild(this.createElementWithValue('pPIS', this.formatXmlAmount(taxLine.taxPct()) ));
                pisOutrElement.appendChild(this.createElementWithValue('vPIS', this.formatXmlAmount(taxLine.taxAmount()) ));

            pisElement.appendChild(pisOutrElement);
        }

        return pisElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_procRef_Elements</Name>
				<Source><![CDATA[
    protected XmlElement create_procRef_Elements(XmlElement _infAdicElement)
    {
        ListEnumerator processReferenceEnumerator = fiscalDocument.referencedProcessList().getEnumerator();

        while (processReferenceEnumerator.moveNext())
        {
            FiscalDocumentRefProcessParmData_BR referencedProcess = processReferenceEnumerator.current();
            XmlElement procRefElement = this.createElement('procRef');
            procRefElement.appendChild(this.createElementWithValue('nProc', referencedProcess.parmProcessNumber()));
            procRefElement.appendChild(this.createElementWithValue('indProc',int2str(referencedProcess.parmAgency() == Agency_BR::Sefaz
                ? 0 //For NF-e SEFAZ must be 0 instead of default enum value
                : enum2int(referencedProcess.parmAgency()))));
            _infAdicElement.appendChild(procRefElement);
        }

        return _infAdicElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_prod_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_prod_Element(EFiscalDocumentLine_BR _line)
    {
        XmlElement prodElement;
        real unitPrice;

        if (_line.fiscalDocumentLine().Quantity)
        {
            unitPrice = _line.fiscalDocumentLine().LineAmount / _line.fiscalDocumentLine().Quantity;
        }

        prodElement = this.createElement('prod');

        prodElement.appendChild(this.createElementWithValue('cProd', _line.itemId() ));
        prodElement.appendChild(this.createElementWithValue('cEAN', _line.GTINCode()));
        prodElement.appendChild(this.createElementWithValue('xProd', _line.fiscalDocumentLine().Description));
        prodElement.appendChild(this.createElementWithValue('NCM', this.formatKeepNumbersOnly(_line.fiscalDocumentLine().FiscalClassification ? _line.fiscalDocumentLine().FiscalClassification: '99')));
        prodElement.appendChild(this.createElementWithValue('CFOP', this.formatKeepNumbersOnly(_line.fiscalDocumentLine().CFOP) ));
        prodElement.appendChild(this.createElementWithValue('uCom', _line.fiscalDocumentLine().Unit));
        prodElement.appendChild(this.createElementWithValue('qCom', this.formatXmlQty(_line.fiscalDocumentLine().Quantity) ));
        prodElement.appendChild(this.createElementWithValue('vUnCom', this.formatXmlAmount(unitPrice, 10)));
        prodElement.appendChild(this.createElementWithValue('vProd', this.formatXmlAmount(_line.grossLineAmount()) ));
        prodElement.appendChild(this.createElementWithValue('cEANTrib', _line.GTINCode()));
        prodElement.appendChild(this.createElementWithValue('uTrib', _line.fiscalDocumentLine().Unit));
        prodElement.appendChild(this.createElementWithValue('qTrib', this.formatXmlQty(_line.fiscalDocumentLine().Quantity) ));
        prodElement.appendChild(this.createElementWithValue('vUnTrib', this.formatXmlAmount(unitPrice, 10)));

        if (_line.totalFreightMarkupAmount() > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vFrete', this.formatXmlAmount(_line.totalFreightMarkupAmount()) ));
        }

        if (_line.totalInsuranceMarkupAmount() > 0)
        {
                this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vSeg', this.formatXmlAmount(_line.totalInsuranceMarkupAmount()) ));
        }
        if (abs(_line.fiscalDocumentLine().LineDiscount) > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vDesc', this.formatXmlAmount(abs(_line.fiscalDocumentLine().LineDiscount))));
        }

        // Added V4
        if (_line.totalOthersMarkupAmount() > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('vOutro', this.formatXmlAmount(_line.totalOthersMarkupAmount()) ));
        }

        // Added V4
        this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('indTot', '1' ));

        if (fiscalDocument.PurchImportDeclaration())
        {
            prodElement.appendChild(this.create_di_Element(_line));
        }

        this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('xPed', _line.custPurchaseOrder()));

        if (_line.custLineNumber() > 0)
        {
            this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('nItemPed', this.formatInt2Str(_line.custLineNumber())));
        }

        this.appendChildIfNotEmpty(prodElement, this.createElementWithValue('nFCI', _line.fiscalDocumentLine().FCINumber));

        return prodElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_refNF_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_refNF_Element()
    {
        XmlElement              refNFElement;
        ListEnumerator          enumerator;
        FiscalReferenceMap_BR   fiscalReference;
        ;

        refNFElement = this.createElement('refNF');

        enumerator = fiscalDocument.fiscalReferenceList().getEnumerator();
        while (enumerator.moveNext())
        {
            fiscalReference = enumerator.current();

            refNFElement.appendChild( this.createElementWithValue('cUF', fiscalReference.issuerStateIBGECode()) );
            refNFElement.appendChild( this.createElementWithValue('AAMM', this.formatXmlDate(fiscalReference.fiscalDocumentDate())) );
            refNFElement.appendChild( this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(fiscalReference.issuerCNPJ())) );
            refNFElement.appendChild( this.createElementWithValue('mod', fiscalReference.fiscalDocumentModel()) );
            refNFElement.appendChild( this.createElementWithValue('serie', this.formatStr2Int(fiscalReference.fiscalDocumentSeries())));
            refNFElement.appendChild( this.createElementWithValue('nNF', this.formatStr2Int(fiscalReference.fiscalDocumentNumber())) );
        }

        return refNFElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_total_Element</Name>
				<Source><![CDATA[
protected XmlElement create_total_Element()
    {
        XmlElement  totalElement;
        XmlElement  icmsTotElement;
        XmlElement  issqnTotElement;
        XmlElement  retTribElement;
        ;

        totalElement = this.createElement('total');

        icmsTotElement = this.createElement('ICMSTot');
        icmsTotElement.appendChild(this.createElementWithValue('vBC', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::ICMS)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vICMS', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::ICMS)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vBCST', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::ICMS, true)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vST', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::ICMS, true)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vProd', this.formatXmlAmount(fiscalDocument.totalGrossGoodsAmount() )));
        icmsTotElement.appendChild(this.createElementWithValue('vFrete', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().TotalMarkupFreightAmount))));
        icmsTotElement.appendChild(this.createElementWithValue('vSeg', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().TotalMarkupInsuranceAmount))));
        icmsTotElement.appendChild(this.createElementWithValue('vDesc', this.formatXmlAmount(fiscalDocument.fiscalDocument().TotalDiscountAmount) ));
        icmsTotElement.appendChild(this.createElementWithValue('vII', this.formatXmlAmount(fiscalDocument.importTaxAmountOther()) ));
        icmsTotElement.appendChild(this.createElementWithValue('vIPI', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::IPI)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vPIS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForProducts(TaxType_BR::PIS)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vCOFINS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForProducts(TaxType_BR::COFINS)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vOutro', this.formatXmlAmount(abs(fiscalDocument.fiscalDocument().TotalMarkupOtherAmount)) ));
        icmsTotElement.appendChild(this.createElementWithValue('vNF', this.formatXmlAmount(fiscalDocument.fiscalDocument().TotalAmount) ));

        this.appendChildIfNotEmpty(icmsTotElement, this.createElementWithValue('vTotTrib', this.formatXmlAmount(fiscalDocument.getTotalApproximateAmount())));

        issqnTotElement = this.createElement('ISSQNtot');
        this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vServ', this.formatXmlAmount(fiscalDocument.totalGrossServicesAmount() )));
        this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vBC', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::ISS)) ));
        this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vISS', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::ISS)) ));
        if (fiscalDocument.isImporting())
        {
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vPIS', this.formatXmlAmount(fiscalDocument.taxAmountForServices(TaxType_BR::PIS) )));
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vCOFINS', this.formatXmlAmount(fiscalDocument.taxAmountForServices(TaxType_BR::COFINS) )));
        }
        else
        {
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vPIS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForServices(TaxType_BR::PIS) )));
            this.appendChildIfNotEmpty(issqnTotElement, this.createElementWithValue('vCOFINS', this.formatXmlAmount(fiscalDocument.taxableTaxAmountForServices(TaxType_BR::COFINS) )));
        }

        retTribElement = this.createElement('retTrib');
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetPIS', this.formatXmlAmount(fiscalDocument.taxWithholdAmount(TaxWithholdType_BR::PIS)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetCOFINS', this.formatXmlAmount(fiscalDocument.taxWithholdAmount(TaxWithholdType_BR::COFINS)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetCSLL', this.formatXmlAmount(fiscalDocument.taxWithholdAmount(TaxWithholdType_BR::CSLL)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vBCIRRF', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::IRRF)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vIRRF', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::IRRF)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vBCRetPrev', this.formatXmlAmount(fiscalDocument.taxBaseAmount(TaxType_BR::INSSRetained)) ));
        this.appendChildIfNotEmpty(retTribElement, this.createElementWithValue('vRetPrev', this.formatXmlAmount(fiscalDocument.taxAmount(TaxType_BR::INSSRetained)) ));

        totalElement.appendChild(icmsTotElement);
        this.appendChildIfNotEmpty(totalElement, issqnTotElement);
        this.appendChildIfNotEmpty(totalElement, retTribElement);

        return totalElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_transp_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_transp_Element()
    {
        XmlElement transpElement = this.createElement('transp');

        transpElement.appendChild(this.create_modFrete_Element(fiscalDocument.fiscalDocument().FreightChargeTerms));

        XmlElement transportaElement = this.create_transporta_Element();

        this.appendChildIfNotEmpty(transpElement, transportaElement);

        this.appendChildIfNotEmpty(transpElement, this.create_veicTransp_Element());

        this.create_vol_Element(transpElement);

        return transpElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_transporta_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_transporta_Element()
    {
        XmlElement transportaElement = this.createElement('transporta');

        if (fiscalDocument.carrierPartyType() == DirPartyType::Person)
        {
            this.appendChildIfNotEmpty(transportaElement, this.createElementWithValue('CPF', this.formatKeepNumbersOnly(fiscalDocument.carrierCNPJ()) ));
        }
        else if (fiscalDocument.carrierPartyType() == DirPartyType::Organization)
        {
            this.appendChildIfNotEmpty(transportaElement, this.createElementWithValue('CNPJ', this.formatKeepNumbersOnly(fiscalDocument.carrierCNPJ()) ));
        }

        this.appendChildIfNotEmpty(transportaElement, this.createElementWithValue('xNome', fiscalDocument.carrierName() ));
        this.appendChildIfNotEmpty(transportaElement, this.createElementWithValue('IE', fiscaldocument.carrierIENum() ));
        this.appendChildIfNotEmpty(transportaElement, this.createElementWithValue('xEnder', fiscalDocument.carrierAddress()));
        this.appendChildIfNotEmpty(transportaElement, this.createElementWithValue('xMun', fiscalDocument.carrierCity()));
        this.appendChildIfNotEmpty(transportaElement, this.createElementWithValue('UF', fiscaldocument.carrierStateId()));

        return transportaElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_veicTransp_Element</Name>
				<Source><![CDATA[
    protected XmlElement create_veicTransp_Element()
    {
        XmlElement veicTranspElement = this.createElement('veicTransp');
        
        this.appendChildIfNotEmpty(veicTranspElement, this.createElementWithValue('placa', fiscaldocument.fiscalDocument().VehicleLicensePlateNumber));
        this.appendChildIfNotEmpty(veicTranspElement, this.createElementWithValue('UF', fiscaldocument.fiscalDocument().VehicleLicensePlateState));
        
        return veicTranspElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_vTotTrib_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the XML element that represents the approximate tax amount
    /// </summary>
    /// <param name="_lineMap">
    /// The map that represents the electronic fiscal document lines
    /// </param>
    /// <returns>
    /// The Xml Element created for the approximate tax amount
    /// </returns>
    protected XmlElement create_vTotTrib_Element(EFiscalDocumentLine_BR _lineMap)
    {
        return this.createElementWithValue('vTotTrib', this.formatXmlAmount(_lineMap.getApproximateTaxAmount()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItems</Name>
				<Source><![CDATA[
    protected void createItems(XmlElement _parentElement)
    {
        XmlElement                  detElement;
        EFiscalDocumentLine_BR      lineMap;
        ;

        while (fiscalDocument.nextLine())
        {
            lineMap = fiscalDocument.currentLine();

            detElement = this.createElement('det');

            detElement.setAttribute('nItem', int2str(real2int(lineMap.fiscalDocumentLine().lineNum)));

            detElement.appendChild(this.create_prod_Element(lineMap));
            detElement.appendChild(this.create_imposto_Element(lineMap));
            this.appendChildIfNotEmpty(detElement, this.createElementWithValue('infAdProd', this.removeBlankSpaceAndNewLine(lineMap.getAdditionalInformation()) ));

            _parentElement.appendChild(detElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXmlDocumentFromEFDocument</Name>
				<Source><![CDATA[
    [Hookable]
    protected XmlElement createXmlDocumentFromEFDocument()
    {
        XmlElement      NFeElement;
        XmlElement      infNFeElement;
        XmlElement      ideElement;
        XmlElement      emitElement;
        XmlElement      destElement;
        XmlElement      entregaElement;
        XmlElement      totalElement;
        XmlElement      transpElement;
        XmlElement      cobrElement;
        XmlElement      infAdicElement;
        XmlElement      infRespTec;
        
        NFeElement      = this.create_NFe_Element();
        infNFeElement   = this.create_infNFe_Element();
        ideElement      = this.create_ide_Element();
        emitElement     = this.create_emit_Element();
        destElement     = this.create_dest_Element();
        
        infNFeElement.appendChild(ideElement);
        infNFeElement.appendChild(emitElement);
        infNFeElement.appendChild(destElement);
        
        if (fiscalDocument.hasDeliveryAddress())
        {
            entregaElement  = this.create_entrega_Element();
            infNFeElement.appendChild(entregaElement);
        }

        this.createItems(infNFeElement);
        
        totalElement    = this.create_total_Element();
        transpElement   = this.create_transp_Element();
        cobrElement     = this.create_cobr_Element();
        infAdicElement  = this.create_infAdic_Element();
        infRespTec      = this.create_infRespTec_Element();
        
        infNFeElement.appendChild(totalElement);
        infNFeElement.appendChild(transpElement);
        if(cobrElement)
        {
            infNFeElement.appendChild(cobrElement);
        }

        this.add_pag_Element(infNFeElement);
        this.add_infIntermed_Element(infNFeElement);
        
        this.appendChildIfNotEmpty(infNFeElement, infAdicElement);

        if (this.checkCreateExportElement())
        {
            infNFeElement.appendChild(this.create_exporta_Element());
        }

        this.appendChildIfNotEmpty(infNFeElement, infRespTec);

        NFeElement.appendChild(infNFeElement);
        
        return NFeElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFormat</Name>
				<Source><![CDATA[
/// <summary>
    /// Formats the electronic fiscal document xml
    /// </summary>
    protected void doFormat()
    {
        XmlElement      NFeElement;
        str             signedNFeElementAsString;

        NFeElement = this.createXmlDocumentFromEFDocument();
        signedNFeElementAsString = this.signDocument(fiscalDocument.keyVaultCertificateRef(), fiscalDocument.digitalCertificateSubject(), NFeElement, 'infNFe');

        xmlDoc = XmlDocument::newXml(
            strFmt(
            @'<?xml version="1.0" encoding="UTF-8"?>
             <enviNFe versao="%1" xmlns="http://www.portalfiscal.inf.br/nfe">
                <idLote>%2</idLote>
                %3
                %4
             </enviNFe>',
             this.version(), fiscaldocument.fiscalDocument().FiscalDocumentNumber, this.indSinc(), signedNFeElementAsString)
             );

        stream.write(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>eFiscalDocVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the NF-e manual that this class adheres to.
    /// </summary>
    /// <returns>The version of the NF-e manual from EFiscalDocVersion_BR enumerator.</returns>
    public EFiscalDocVersion_BR eFiscalDocVersion()
    {
        return EFiscalDocVersion_BR::V4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasISS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a given electronic fiscal document line has services tax.
    /// </summary>
    /// <param name="_lineMap">
    /// The EFiscalDocumentLine_BR of the line to be verified.
    /// </param>
    /// <returns>
    /// true if the given line has services tax; false otherwise.
    /// </returns>
    protected boolean hasISS(EFiscalDocumentLine_BR _lineMap)
    {
        EFiscalDocumentLineTax_BR   taxLine = _lineMap.getTaxLine(TaxType_BR::ISS, '');

        return taxLine.hasTaxTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>read</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the XML returned by the submission web service.
    /// </summary>
    /// <param name="_stream">The stream from which to read the XML.</param>
    /// <param name="_returnInfo">A parm object to fill the return information.</param>
    public void read(IEFDocMsgStream_BR _stream, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        #ExportFiscalDocument_BR

        str             returnCode;
        str             returnCodeDescription;
        str             returnReceiptNumber;
        str             returnDateTime;
        utcdatetime     dateTime;
        str             averageResponseTime;
        ;

        xmlDoc.loadXml(conpeek(_stream.read(),1));

        returnCode              = this.getNodeContent('/x:retEnviNFe/x:cStat');
        returnCodeDescription   = this.getNodeContent('/x:retEnviNFe/x:xMotivo');
        returnDateTime          = this.getNodeContent('/x:retEnviNFe/x:dhRecbto', false);

        if (returnCode == #LotReceived)
        {
            returnReceiptNumber     = this.getNodeContent('/x:retEnviNFe/x:infRec/x:nRec');
            averageResponseTime     = this.getNodeContent('/x:retEnviNFe/x:infRec/x:tMed');
        }

        dateTime = DateTimeUtil::parse(returnDateTime);

        _returnInfo.parmReturnCodeStatus(returnCode);
        _returnInfo.parmReturnCodeDescription(returnCodeDescription);
        _returnInfo.parmReceiptNumber(returnReceiptNumber);
        _returnInfo.parmProcessDateTime(dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the XML that this class creates and interprets.
    /// </summary>
    /// <returns>The XML version in string format.</returns>
    public str version()
    {
        return '2.00';
    }

]]></Source>
			</Method>
			<Method>
				<Name>webService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves which web service this format is to be sent to.
    /// </summary>
    /// <returns>A web service from EFDocWebService_BR enumerator.</returns>
    EFDocWebService_BR webService()
    {
        return EFDocWebService_BR::Submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML messages and sends it to the provided message stream.
    /// </summary>
    /// <param name="_stream">The stream to be used to send the messages</param>
    /// <param name="_documentList">A EFiscalDocumentList_BR list of documents to be sent.</param>
    public void write(IEFDocMsgStream_BR _stream, EFiscalDocumentList_BR _documentList)
    {
        boolean isAnyImportDeclaration;
        stream = _stream;

        if (_documentList.moveNext())
        {
            fiscalDocument = _documentList.current();

            if (fiscalDocument && fiscalDocument.PurchImportDeclaration())
            {
                isAnyImportDeclaration = true;
            }

            this.doFormat();
        }

        if (isAnyImportDeclaration)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00019, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a EFDocMsgFormat_XmlSubmit_BR object.
    /// </summary>
    /// <returns>A EFDocMsgFormat_XmlSubmit_BR object.</returns>
    public static EFDocMsgFormat_XmlSubmit_BR construct()
    {
        return new EFDocMsgFormat_XmlSubmit_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create_vol_Element</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the list of vol tags in the NFe XML.
    /// The XML should contain one vol tag per shipment information of the fiscal document.
    /// </summary>
    /// <param name="_parentXmlNode">
    /// The XML node that should contain the list of vol nodes that will be created.
    /// </param>
    protected void create_vol_Element(XmlElement _parentXmlNode)
    {
        XmlElement                     volElement;
        EFiscalDocumentShipmentStat_BR shipment;
        List                           shipments = fiscalDocument.getListOfShipments();
        ListEnumerator                 shipmentsEnumerator = shipments.getEnumerator();

        while (shipmentsEnumerator.moveNext())
        {
            shipment = shipmentsEnumerator.current();

            volElement = this.createElement('vol');

            this.appendChildIfNotEmpty(volElement, this.createElementWithValue('qVol',  int2str(real2int(shipment.parmVolumeQuantity())) ));
            this.appendChildIfNotEmpty(volElement, this.createElementWithValue('esp',   shipment.parmVolumeType() ));
            this.appendChildIfNotEmpty(volElement, this.createElementWithValue('marca', shipment.parmPackingBrand()));
            this.appendChildIfNotEmpty(volElement, this.createElementWithValue('pesoL', this.formatXmlAmount(shipment.parmNetWeight(), 3) ));
            this.appendChildIfNotEmpty(volElement, this.createElementWithValue('pesoB', this.formatXmlAmount(shipment.parmGrossWeight(), 3) ));

            this.appendChildIfNotEmpty(_parentXmlNode, volElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value that represents the fiscal document purpose on NF-e xml (ide/finNFe tag)
    /// </summary>
    /// <returns>
    /// A string containing the NF-e xml purpose
    /// </returns>
    protected str getFiscalDocumentPurpose()
    {
        str purpose;

        switch (fiscalDocument.fiscalDocument().Purpose)
        {
            case FiscalDocumentPurpose_BR::Return:
            case FiscalDocumentPurpose_BR::Regular:
                purpose = '1';
                break;
            case FiscalDocumentPurpose_BR::PriceComplement:
            case FiscalDocumentPurpose_BR::TaxComplement:
                purpose = '2';
                break;
            case FiscalDocumentPurpose_BR::Adjustment:
                purpose = '3';
                break;
        }

        return purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indSinc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the indSinc element, which indicates if the NFe transmission was made synchronous or not.
    /// </summary>
    /// <returns>
    /// The indSinc element represented in a string
    /// </returns>
    /// <remarks>
    /// This element will only be written on NFe Version 3.10 and forth
    /// </remarks>
    protected str indSinc()
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>