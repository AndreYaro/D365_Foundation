<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsInventTransPickIdAllocator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class WhsInventTransPickIdAllocator
{
    private Map loadLinePickIdMap; // int64 -> str: maps load lines to pick IDs        
    private RecordInsertList newLoadLineInventoryPickInsertList; // Used for new pick Id allocations
    private boolean allocationStarted;

    protected WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classStr(WhsInventTransPickIdAllocator));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        this.initForNewAllocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNewAllocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initForNewAllocation()
    {
        loadLinePickIdMap = new Map(Types::Int64, Types::String);        
        
        allocationStarted = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocatePickIds</Name>
				<Source><![CDATA[
    internal final ListEnumerator allocatePickIds(InventMovement _inventMovement, InventDimId _pickedInventDimId, InventQty _inventQty)
    {
        if (!allocationStarted)
        {
            using (var _ = this.beforeAllocatePickIdsActivity())
            {
                this.beforeAllocatePickIds();
            }

            appl.transactionScope().ttsCommitting += eventhandler(this.onTtsCommitting);
            allocationStarted = true;
        }

        using (var allocatePickIdsActivity = this.allocatePickIdsActivity())
        {           
            return this.executePickIdAllocaton(_inventMovement, _pickedInventDimId, _inventQty);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePickIdAllocaton</Name>
				<Source><![CDATA[
    protected abstract ListEnumerator executePickIdAllocaton(InventMovement _inventMovement, InventDimId _pickedInventDimId, InventQty _inventQty)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeAllocatePickIds</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void beforeAllocatePickIds()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePickIdForLoadLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WhsLoadLineInventoryPickId determinePickIdForLoadLine(WHSLoadLineRefRecId _loadLineRecId)
    {
        if (!loadLinePickIdMap.exists(_loadLineRecId))
        {
            loadLinePickIdMap.add(_loadLineRecId, this.findOrCreatePickIdForLoadLineRecId(_loadLineRecId));
        }

        return loadLinePickIdMap.lookup(_loadLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocationComplete</Name>
				<Source><![CDATA[
    internal void allocationComplete()
    {
        if (!allocationStarted)
        {
            return;
        }

        if (!this.determineIsAllocationComplete())
        {
            throw error("@WAX:NotAllLoadLineQuantitiesUsedInPickIdAllocation");
        }

        if (newLoadLineInventoryPickInsertList)
        {
            newLoadLineInventoryPickInsertList.insertDatabase();
            newLoadLineInventoryPickInsertList = null;            
        }

        appl.transactionScope().ttsCommitting -= eventhandler(this.onTtsCommitting);
        this.initForNewAllocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsAllocationComplete</Name>
				<Source><![CDATA[
    protected abstract boolean determineIsAllocationComplete()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocationAborted</Name>
				<Source><![CDATA[
    internal void allocationAborted()
    {
        if (allocationStarted)
        {
            throw error("@WAX:UnableToAbortPickIdAllocationAfterStart");
        }

        this.initForNewAllocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreatePickIdForLoadLineRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WhsLoadLineInventoryPickId findOrCreatePickIdForLoadLineRecId(WHSLoadLineRefRecId _loadLineRecId, boolean _useRecordInsertList = true)
    {
        WhsLoadLineInventoryPickId existingLoadLineInventoryPickId = WhsLoadLineInventoryPick::findPickIdForLoadLineRecId(_loadLineRecId);

        if (existingLoadLineInventoryPickId)
        {
            return existingLoadLineInventoryPickId;
        }

        return this.createPickIdForLoadLineRecId(_loadLineRecId, _useRecordInsertList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickIdForLoadLineRecId</Name>
				<Source><![CDATA[
    private WhsLoadLineInventoryPickId createPickIdForLoadLineRecId(WHSLoadLineRefRecId _loadLineRecId, boolean _useRecordInsertList)
    {
        WhsLoadLineInventoryPickId newPickId = NumberSeq::newGetNum(WHSParameters::numrefWhsLoadlineInventoryPickId()).num();
                                   
        WhsLoadLineInventoryPick newLoadLineInventoryPick;
        newLoadLineInventoryPick.LoadLine = _loadLineRecId;
        newLoadLineInventoryPick.PickId = newPickId;

        if (_useRecordInsertList)
        {
            this.newLoadLineInventoryPickInsertList().add(newLoadLineInventoryPick);
        }
        else
        {
            newLoadLineInventoryPick.insert();
        }
            
        return newPickId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLoadLineInventoryPickInsertList</Name>
				<Source><![CDATA[
    private RecordInsertList newLoadLineInventoryPickInsertList()
    {
        if (!newLoadLineInventoryPickInsertList)
        {
            newLoadLineInventoryPickInsertList = new RecordInsertList(tableNum(WhsLoadLineInventoryPick));            
        }
                
        return newLoadLineInventoryPickInsertList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsCommitting</Name>
				<Source><![CDATA[
    private void onTtsCommitting()
    {
        this.allocationAborted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocatePickIdsActivity</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext allocatePickIdsActivity()
    {
        return instrumentationLogger.activityContext(instrumentationLogger.activity('WhsInventTransPickIdAllocator.allocatePickIds'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeAllocatePickIdsActivity</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext beforeAllocatePickIdsActivity()
    {
        return instrumentationLogger.activityContext(instrumentationLogger.activity('WhsInventTransPickIdAllocator.beforeAllocatePickIdsActivity'));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>