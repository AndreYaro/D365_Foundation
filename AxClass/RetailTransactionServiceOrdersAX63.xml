<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceOrdersAX63</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionServiceOrdersAX63</c> holds customer order methods for use with AX63.
/// </summary>
public class RetailTransactionServiceOrdersAX63
{
    // These constants were brought over from RetailTransactionServicesOrders
    // Many of them, used to be Macros, but have been replaced with constants, because that is the best practice.
    private const str TotalManualDiscountAmount = 'TotalManualDiscountAmount';
    private const str TotalManualDiscountPercentage = 'TotalManualDiscountPercentage';
    private const str LoyaltyCardId = 'LoyaltyCardId';
    private const str CommissionSalesGroup = 'CommissionSalesGroup';
    private const str AmountStr = 'Amount';
    private const str TaxItemGroupStr = 'TaxItemGroup';
    private const str TaxGroupStr = 'TaxGroup';
    private const str CodeStr = 'Code';
    private const str LineDscAmount = 'LineDscAmount';
    private const str IsPriceOverridden = 'IsPriceOverridden';
    private const str LinePercentageDiscount = 'LinePercentageDiscount';
    private const str PeriodicDiscount = 'PeriodicDiscount';
    private const str OriginalPrice = 'OriginalPrice';
    private const str PeriodicPercentageDiscount = 'PeriodicPercentageDiscount';
    private const str LineManualDiscountAmount = 'LineManualDiscountAmount';
    private const str LineManualDiscountPercentage = 'LineManualDiscountPercentage';
    private const str TotalDiscount = 'TotalDiscount';
    private const str TotalPctDiscount = 'TotalPctDiscount';
    private const str FulfillmentStoreId = 'FulfillmentStoreId';
    private const str Discount = 'Discount';
    private const str CustomerDiscountType = 'CustomerDiscountType';
    private const str DiscountCode = 'DiscountCode';
    private const str DiscountOriginType = 'DiscountOriginType';
    private const str ManualDiscountType = 'ManualDiscountType';
    private const str OfferName = 'OfferName';
    private const str DiscountAmountAttribute = 'DiscountAmount';
    private const str DealPrice = 'DealPrice';
    private const str PeriodicDiscountOfferId = 'PeriodicDiscountOfferId';
    private const str PercentageStr = 'Percentage';
    private const str BundleIdColumn = 'BundleId';
    private const str Discounts = 'Discounts';
    private const str TaxCodeStr = 'TaxCode';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSalesInvoiceDetail63</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the details of a sales invoice for use with version 63.
    /// This has the QuantityPreviouslyReturned attribute, which is used in 63 POS to avoid returning items multiple times.
    /// </summary>
    /// <param name="invoiceId">
    /// An invoiceId
    /// </param>
    /// <returns>
    /// A container object containing the details of a sales invoice in XML format.
    /// </returns>
    /// <remarks>
    /// This was copied from getSalesInvoiceDetails, and then modified to have the QuantityPreviouslyReturned.
    /// </remarks>
    public static server container getSalesInvoiceDetail63(InvoiceId invoiceId)
    {
        #OCCRetryCount

        container salesInvoice = [false, '', '']; // Status, ErrorMsg, XmlResultSet

        CustInvoiceJour         custInvoiceJour;
        CustInvoiceTrans        custInvoiceTrans;
        SalesTable              salesTable;
        SalesLine               salesLine;
        InventDim               inventDim;
        InventTable             inventTable;
        EcoResProductTranslation productTranslation;
        RetailSalesTable        retailSalesTable;
        RetailLoyaltyCard       loyaltyCard;
        InventDimCombination    inventDimCombination;
        Counter                 pCounter = 0;
        InventTrackingRegisterTrans inventTrackingRegisterTrans;
        InventTrackingRegisterTransView inventTrackingRegisterTransView;
        InventBatchSerialId     inventSerialId = '';
        SalesOrderedQty         previouslyReturnedQuantity;

        Percent factorForEffectiveAmount = 1;

        XmlDocument             xmlDoc;
        XmlElement              xmlRoot, xmlRecord, xmlCharges;

        LanguageId languageId = CompanyInfo::languageId();

        const str GuidStrAttribute = 'Guid';
        const str UpdatedInAxAttribute = 'UpdatedInAx';
        const str MessageAttribute = 'Message';
        const str FalseStrConst = 'false';
        const str QuantityPreviouslyReturnedAttribute = 'QuantityPreviouslyReturned';

        ttsbegin;

        try
        {
            xmlDoc = XmlDocument::newBlank();

            select firstonly1 RecId, SalesId, SalesType, InvoiceId, InvoiceDate, CurrencyCode, InvoiceAmount,
                InvoiceAccount, InvoicingName, DeliveryPostalAddress, DlvMode, CreatedDateTime from custInvoiceJour
                where custInvoiceJour.InvoiceId == invoiceId
            join RecId from salesTable
                where salesTable.SalesId == custInvoiceJour.SalesId
            outer join TotalManualDiscountAmount, TotalManualDiscountPercentage from retailSalesTable
                where retailSalesTable.SalesTable == salesTable.RecId
            outer join CardNumber from loyaltyCard
                where loyaltyCard.RecId == retailSalesTable.RetailLoyaltyCard;

            if (custInvoiceJour)
            {
                xmlRoot = xmlDoc.createElement(tableStr(CustInvoiceJour));

                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, RecId), int642str(custInvoiceJour.RecId));
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, InvoiceId), custInvoiceJour.InvoiceId);
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, SalesId), custInvoiceJour.SalesId);
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, SalesType), int2str(enum2int(custInvoiceJour.SalesType)));
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, InvoiceDate),
                    date2str(custInvoiceJour.InvoiceDate,
                        321,
                        DateDay::Digits2,
                        DateSeparator::Hyphen, // separator1
                DateMonth::Digits2,
                        DateSeparator::Hyphen, // separator2
                DateYear::Digits4,
                        DateFlags::None));
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, CurrencyCode), custInvoiceJour.CurrencyCode);
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, InvoiceAmount), num2str(custInvoiceJour.InvoiceAmount,5,3,1,0));
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, InvoiceAccount), custInvoiceJour.InvoiceAccount);
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, InvoicingName), custInvoiceJour.InvoicingName);
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, DeliveryPostalAddress), int642str(custInvoiceJour.DeliveryPostalAddress));
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, DlvMode), custInvoiceJour.DlvMode);

                // Formatted as yyyy-MM-ddTHH:mm:ss
                xmlRoot.setAttribute(fieldStr(CustInvoiceJour, CreatedDateTime), DateTimeUtil::toStr(custInvoiceJour.CreatedDateTime));

                xmlRoot.setAttribute(TotalManualDiscountAmount, RetailTransactionServiceOrdersAX63::amountToStr(retailSalesTable.TotalManualDiscountAmount));
                xmlRoot.setAttribute(TotalManualDiscountPercentage, RetailTransactionServiceOrdersAX63::percentToStr(retailSalesTable.TotalManualDiscountPercentage));
                xmlRoot.setAttribute(LoyaltyCardId, loyaltyCard.CardNumber);
                xmlRoot.setAttribute(CommissionSalesGroup, salesTable.SalesGroup);

                xmlCharges = RetailTransactionServiceOrdersAX63::setHeaderCharges(xmlDoc, custInvoiceJour.RecId, 0);
                xmlRoot.appendChild(xmlCharges);

                while select RecId, ItemId, SalesUnit, Name, InventDimId, InventTransId, Qty, SalesPrice,
                    DiscPercent, DiscAmount, LineAmount, LineAmountTax, TaxGroup, TaxItemGroup,
                    DeliveryPostalAddress, MCRDlvMode, SalesMarkup
                from custInvoiceTrans
                        where custInvoiceTrans.InvoiceId == invoiceId
                    join inventDim where inventDim.InventDimId == custInvoiceTrans.InventDimId
                    join ItemId, Product from inventTable where inventTable.ItemId == custInvoiceTrans.ItemId
                    outer join salesLine
                        where salesLine.inventTransId == custInvoiceTrans.inventTransId
                    outer join Name, Product, LanguageId from productTranslation
                        where productTranslation.Product == inventTable.Product
                            && productTranslation.LanguageId == languageId
                {
                    inventSerialId = '';

                    xmlRecord = xmlDoc.createElement(tableStr(CustInvoiceTrans));

                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, RecId), int642str(custInvoiceTrans.RecId));
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, ItemId), custInvoiceTrans.ItemId);
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, SalesUnit), custInvoiceTrans.SalesUnit);
                    xmlRecord.setAttribute(extendedTypeStr(EcoResProductName), productTranslation.Name);
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, InventDimId), custInvoiceTrans.InventDimId);
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, InventTransId), custInvoiceTrans.InventTransId);

                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, MCRDlvMode), custInvoiceTrans.MCRDlvMode);
                    RetailTransactionServiceOrdersAX63::setLineLevelCharges(xmlDoc, xmlRecord, custInvoiceTrans.RecId, 0);

                    SalesOrderedQty qtyReturnable = max(0, custInvoiceTrans.Qty - SalesLine::remainReturnLotQtyAllCreditNote(custInvoiceTrans.InventTransId));

                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, Qty), num2str(qtyReturnable, 0, 2, 1, 0));
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, SalesPrice), num2str(custInvoiceTrans.SalesPrice, 0, 2, 1, 0));
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, DiscPercent), num2str(custInvoiceTrans.DiscPercent, 0, 2, 1, 0));
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, DiscAmount), num2str(custInvoiceTrans.DiscAmount, 0, 2, 1, 0));
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, LineAmount), num2str(custInvoiceTrans.LineAmount, 0, 2, 1, 0));
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, LineAmountTax), num2str(custInvoiceTrans.LineAmountTax, 0, 2, 1, 0));
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, SalesMarkup), num2str(custInvoiceTrans.SalesMarkup, 0, 2, 1, 0));
                    
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, TaxGroup), custInvoiceTrans.TaxGroup);
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, TaxItemGroup), custInvoiceTrans.TaxItemGroup);

                    xmlRecord.setAttribute(fieldStr(InventDim, InventBatchId), inventDim.InventBatchId);
                    xmlRecord.setAttribute(fieldStr(InventDim, wmsLocationId), inventDim.wmsLocationId);
                    xmlRecord.setAttribute(fieldStr(InventDim, wmsPalletId), inventDim.wmsPalletId);
                    xmlRecord.setAttribute(fieldStr(InventDim, InventSiteId), inventDim.InventSiteId);
                    xmlRecord.setAttribute(fieldStr(InventDim, InventLocationId), inventDim.InventLocationId);

                    if (inventDim.InventSerialId != '')
                    {
                        xmlRecord.setAttribute(fieldStr(InventDim, InventSerialId), inventDim.InventSerialId);
                    }
                    else
                    {
                        // Might be a serial number with active in sales process
                        while select firstonly RecId, InventTransOrigin from inventTrackingRegisterTrans
                            where inventTrackingRegisterTrans.FinancialRefTableId == custInvoiceTrans.TableId
                                && inventTrackingRegisterTrans.FinancialRefRecId == custInvoiceTrans.RecId
                            join InventSerialId from inventTrackingRegisterTransView
                                where inventTrackingRegisterTransView.RecId == inventTrackingRegisterTrans.RecId
                                    && inventTrackingRegisterTransView.InventTransOrigin == inventTrackingRegisterTrans.InventTransOrigin
                        {
                            inventSerialId = inventTrackingRegisterTransView.InventSerialId;
                        }

                        xmlRecord.setAttribute(fieldStr(InventDim, InventSerialId), inventSerialId);
                    }

                    RetailTransactionService::getInventDimValues(custInvoiceTrans.ItemId, inventDim, xmlRecord);

                    xmlRecord.setAttribute(GuidStrAttribute, guid2str(newGuid()));
                    xmlRecord.setAttribute(UpdatedInAxAttribute, FalseStrConst);
                    xmlRecord.setAttribute(MessageAttribute, "");
                    xmlRecord.setAttribute(fieldStr(CustInvoiceTrans, DeliveryPostalAddress), int642str(custInvoiceTrans.DeliveryPostalAddress));
                    xmlRecord.setAttribute(fieldStr(SalesLine, RetailVariantId), salesLine.RetailVariantId);
                    xmlRecord.setAttribute(CommissionSalesGroup, salesLine.SalesGroup);

                    inventDimCombination = InventDimCombination::findVariantId(salesLine.RetailVariantId);
                    xmlRecord.setAttribute('InventDimensionId', inventDimCombination.InventDimId);

                    // Add details from retail sales line
                    RetailTransactionServiceOrdersAX63::getRetailSalesLine(xmlRecord, salesLine);

                    factorForEffectiveAmount = 1;
                    if (salesLine.SalesQty > custInvoiceTrans.Qty && salesLine.SalesQty > 0)
                    {
                        factorForEffectiveAmount = custInvoiceTrans.Qty / salesLine.SalesQty;
                    }

                    //Get line level discount info
                    RetailTransactionServiceOrdersAX63::addDiscountLineXml(xmlDoc, xmlRecord, salesLine.InventTransId, salesLine.SalesQty, salesLine.LineDisc, false, factorForEffectiveAmount);

                    //Get line level tax info
                    RetailTransactionServiceOrdersAX63::addTaxLineXml(xmlDoc, xmlRecord, invoiceId, salesLine.ItemId, SalesLine.salesid);

                    xmlRoot.appendChild(xmlRecord);
                }

                xmlDoc.appendChild(xmlRoot);
            }

            salesInvoice = [true, '', xmlDoc.toString()];

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            pCounter++;
            if (pCounter <= 10)
                retry;

            salesInvoice = [false, '@RET2382', ''];
            ttsabort;
        }
        catch
        {
            salesInvoice = [false, '@RET2382', ''];
            ttsabort;
        }

        return salesInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineLevelCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets line level charges.
    /// </summary>
    /// <param name = "_xmlDoc">XML document to populate.</param>
    /// <param name = "_xmlRecord">The xml record.</param>
    /// <param name = "_transRecId">The transaction record.</param>
    /// <param name = "_transTableRecId">The transaction table record.</param>
    /// <remarks> This was copied from RetailTransactionServiceOrders::setLineLevelCharges. </remarks>
    private static void setLineLevelCharges(XmlDocument _xmlDoc, XmlElement _xmlRecord, RecId _transRecId, RecId _transTableRecId)
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;
        XmlElement xmlLineCharges, xmlLineRecord;

        xmlLineCharges = _xmldoc.createElement('Charges');
        while select TransRecId,TransTableId, Value, MarkupCode, TaxGroup, TaxItemGroup from markupTrans
            where markupTrans.TransRecId == _transRecId
                && ( _transTableRecId == 0 || markupTrans.TransTableId == _transTableRecId)
                && markupTrans.MarkupCategory == MarkupCategory::Fixed
            join CustType, VendType from markupTable
                where markupTable.MarkupCode == markupTrans.MarkupCode
                    && markupTable.ModuleType == markupTrans.ModuleType
                    && !(markupTable.CustType == MarkupType::LedgerAccount
                         && markupTable.VendType == MarkupType::LedgerAccount)
        {
            xmlLineRecord = _xmldoc.createElement('Charge');
            
            if (markupTable.VendType == MarkupType::CustVend)
            {
                xmlLineRecord.setAttribute(AmountStr,num2str(-markupTrans.Value,5,3,1,0));
            }
            else
            {
                xmlLineRecord.setAttribute(AmountStr,num2str(markupTrans.Value,5,3,1,0));
            }

            xmlLineRecord.setAttribute(CodeStr, markupTrans.MarkupCode);
            xmlLineRecord.setAttribute(TaxGroupStr, markupTrans.TaxGroup);
            xmlLineRecord.setAttribute(TaxItemGroupStr, markupTrans.TaxItemGroup);
            xmlLineCharges.appendChild(xmlLineRecord);
        }

        _xmlRecord.appendChild(xmlLineCharges);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets header level charges.
    /// </summary>
    /// <param name = "_xmlDoc">XML document to populate.</param>
    /// <param name = "_transRecId">The transaction record.</param>
    /// <param name = "_transTableRecId">The transaction table record.</param>
    /// <returns>New XmlElement that contains charges.</returns>
    /// <remarks>This was copied from RetailTransactionServiceOrders::setHeaderCharges. </remarks>
    private static XmlElement setHeaderCharges(XmlDocument _xmlDoc, RecId _transRecId, RecId _transTableRecId, boolean _includeTaxGroup = true)
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;
        XmlElement xmlCharges, xmlRecord;

        xmlCharges = _xmldoc.createElement('Charges');
        while select TransRecId,TransTableId, Value, MarkupCode, TaxGroup, TaxItemGroup from markupTrans
            where markupTrans.TransRecId == _transRecId
                && ( _transTableRecId == 0 || markupTrans.TransTableId == _transTableRecId)
                && markupTrans.MarkupCategory == MarkupCategory::Fixed
            join CustType, VendType from markupTable
                where markupTable.MarkupCode == markupTrans.MarkupCode
                    && markupTable.ModuleType == markupTrans.ModuleType
                    && !(markupTable.CustType == MarkupType::LedgerAccount
                        && markupTable.VendType == MarkupType::LedgerAccount)
        {
            xmlRecord = _xmldoc.createElement('Charge');
            
            if (markupTable.VendType == MarkupType::CustVend)
            {
                xmlRecord.setAttribute(AmountStr,num2str(-markupTrans.Value,5,3,1,0));
            }
            else
            {
                xmlRecord.setAttribute(AmountStr,num2str(markupTrans.Value,5,3,1,0));
            }

            xmlRecord.setAttribute(CodeStr, markupTrans.MarkupCode);

            if (_includeTaxGroup)
            {
                xmlRecord.setAttribute(TaxGroupStr, markupTrans.TaxGroup);
                xmlRecord.setAttribute(TaxItemGroupStr, markupTrans.TaxItemGroup);
            }

            xmlCharges.appendChild(xmlRecord);
        }

        return xmlCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes an amount.
    /// </summary>
    /// <param name = "_amount">The amount to be converted to a string.</param>
    /// <returns>string representation of the amount.</returns>
    /// <remarks>This was copied from RetailTransactionServiceOrders::amountToStr. </remarks>
    private static str amountToStr(real _amount)
    {
        return num2str(_amount,5,3,1,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>percentToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes a percent.
    /// </summary>
    /// <param name = "_amount">The percent to be converted to a string.</param>
    /// <returns>string representation of the percent.</returns>
    /// <remarks>This was copied from RetailTransactionServiceOrders::percentToStr. </remarks>
    private static str percentToStr(Percent _percent)
    {
        return num2str(_percent,5,1,1,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the passed in XML doc with info from the retail sales line that corresponds to the passed in sales line.
    /// </summary>
    /// <param name = "xmlRecord">the xml to updated with information from the RetailSalesLine. </param>
    /// <param name = "_salesLine">the sales line that the retail sales line belongs to. </param>
    /// <remarks> This was copied from RetailTransactionServiceOrders::getRetailSalesLine. </remarks>
    private static void getRetailSalesLine(XmlElement xmlRecord, SalesLine _salesLine)
    {
        RetailSalesLine retailSalesLine = retailSalesLine::findBySalesLine(_salesLine.RecId);

        DiscAmount lineDiscount;
        if (_salesLine.LineDisc && !retailSalesLine.PeriodicDiscount && !retailSalesLine.LineDscAmount && !retailSalesLine.TotalDiscount)
        {
            lineDiscount = _salesLine.LineDisc * _salesLine.SalesQty;
        }
        else
        {
            lineDiscount = retailSalesLine.LineDscAmount;
        }

        if (retailSalesLine.IsPriceOverridden == NoYes::Yes)
        {
            xmlRecord.setAttribute(IsPriceOverridden, '1');
        }
        else
        {
            xmlRecord.setAttribute(IsPriceOverridden, '0');
        }

        xmlRecord.setAttribute(LineDscAmount, RetailTransactionServiceOrdersAX63::amountToStr(lineDiscount));
        xmlRecord.setAttribute(LinePercentageDiscount, RetailTransactionServiceOrdersAX63::amountToStr(retailSalesLine.LinePercentageDiscount));
        xmlRecord.setAttribute(OriginalPrice, RetailTransactionServiceOrdersAX63::amountToStr(RetailSalesLine.OriginalPrice));
        xmlRecord.setAttribute(PeriodicDiscount, RetailTransactionServiceOrdersAX63::amountToStr(retailSalesLine.PeriodicDiscount));
        xmlRecord.setAttribute(PeriodicPercentageDiscount, RetailTransactionServiceOrdersAX63::percentToStr(retailSalesLine.PeriodicPercentageDiscount));
        xmlRecord.setAttribute(LineManualDiscountAmount, RetailTransactionServiceOrdersAX63::amountToStr(retailSalesLine.LineManualDiscountAmount));
        xmlRecord.setAttribute(LineManualDiscountPercentage, RetailTransactionServiceOrdersAX63::percentToStr(retailSalesLine.LineManualDiscountPercentage));
        xmlRecord.setAttribute(TotalDiscount, RetailTransactionServiceOrdersAX63::amountToStr(retailSalesLine.TotalDiscount));
        xmlRecord.setAttribute(TotalPctDiscount, RetailTransactionServiceOrdersAX63::percentToStr(retailSalesLine.TotalPctDiscount));

        if (retailSalesLine && retailSalesLine.FulfillmentStoreId != '')
        {
            xmlRecord.setAttribute(FulfillmentStoreId, retailSalesLine.FulfillmentStoreId);
        }
        else
        {
            // If the order is not a retail order find fulFillment store id.
            xmlRecord.setAttribute(FulfillmentStoreId,_salesLine.mcrGetFulfillmentStore());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDiscountLineXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Sales Discount Line XML for the given SalesLine InventTransId
    /// </summary>
    /// <param name="_xmlDoc">
    /// Parent XML document.
    /// </param>
    /// <param name="_xmlItem">
    /// Parent XML node the Discount Line XML will be added to.
    /// </param>
    /// <param name="_inventTrans">
    /// InventTransId of the sales line.
    /// </param>
    /// <param name="_quantity">
    /// Quantity of the sales line.
    /// </param>
    /// <param name="_unitLineDiscount">
    /// Unit line discount.
    /// </param>
    /// <param name="_fromQuote">
    /// True if the discount lines are from a Quote, False if they are from a Sales Order.
    /// </param>
    /// <param name="_factorForEffectiveAmount">
    /// The factor for effective amount.
    /// </param>
    /// <remarks>
    /// Gets XML representing the associated SalesDiscountLines for the given SalesLine and adds them to the given Item xml node.
    /// This was copied from RetailTransactionServiceOrders::addDiscountLineXml.
    /// </remarks>
    private static void addDiscountLineXml(XmlDocument _xmlDoc, XmlElement _xmlItem, InventTransId _inventTrans, Qty _quantity, DiscAmount _unitLineDiscount, boolean _fromQuote, Percent _factorForEffectiveAmount = 1)
    {
        RetailSalesDiscountLine retailSalesDiscountLine;
        RetailSalesQuotationDiscountLine retailSalesQuoteDiscountLine;
        RetailPeriodicDiscount retailDiscount;
        XmlElement xmlLineDiscounts, xmlLineRecord;

        boolean hasDiscountLines = false;

        void fillSalesOrderDiscountLine()
        {
            DiscAmount effectiveAmount;
            DiscAmount discountAmount;

            // Backfill discount amount for R2 customer orders.
            discountAmount = retailSalesDiscountLine.DiscountAmount;

            effectiveAmount = retailSalesDiscountLine.Amount * _factorForEffectiveAmount;
            if (!discountAmount && !retailSalesDiscountLine.Percentage)
            {
                discountAmount = _quantity ? effectiveAmount / _quantity : 0;
            }

            xmlLineRecord = _xmlDoc.createElement(Discount);

            xmlLineRecord.setAttribute(AmountStr, num2str(effectiveAmount,5,3,1,0));
            xmlLineRecord.setAttribute(DiscountOriginType, int2str(retailSalesDiscountLine.DiscountOriginType));
            xmlLineRecord.setAttribute(CustomerDiscountType, int2str(retailSalesDiscountLine.CustomerDiscountType));
            xmlLineRecord.setAttribute(DiscountCode, retailSalesDiscountLine.DiscountCode);
            xmlLineRecord.setAttribute(ManualDiscountType, int2str(retailSalesDiscountLine.ManualDiscountType));
            xmlLineRecord.setAttribute(PeriodicDiscountOfferId, retailSalesDiscountLine.PeriodicDiscountOfferId);
            xmlLineRecord.setAttribute(OfferName, retailDiscount.Name);
            xmlLineRecord.setAttribute(DealPrice, num2str(retailSalesDiscountLine.DealPrice,5,3,1,0));
            xmlLineRecord.setAttribute(DiscountAmountAttribute, num2str(discountAmount,5,3,1,0));
            xmlLineRecord.setAttribute(PercentageStr, num2str(retailSalesDiscountLine.Percentage,5,3,1,0));
            xmlLineRecord.setAttribute(BundleIdColumn, int2str(retailSalesDiscountLine.BundleId));

            xmlLineDiscounts.appendChild(xmlLineRecord);
        }

        //Get line level discount info
        xmlLineDiscounts = _xmlDoc.createElement(Discounts);

        if (_fromQuote)
        {
            while select Amount, DiscountOriginType, CustomerDiscountType, DiscountCode, ManualDiscountType, PeriodicDiscountOfferId, Percentage, DiscountAmount, DealPrice, BundleId from retailSalesQuoteDiscountLine
                    where retailSalesQuoteDiscountLine.InventTransId == _inventTrans
                outer join Name from retailDiscount
                    where retailSalesQuoteDiscountLine.PeriodicDiscountOfferId
                        && retailDiscount.OfferId == retailSalesQuoteDiscountLine.PeriodicDiscountOfferId
            {
                xmlLineRecord = _xmlDoc.createElement(Discount);
                xmlLineRecord.setAttribute(AmountStr, num2str(retailSalesQuoteDiscountLine.Amount,5,3,1,0));
                xmlLineRecord.setAttribute(DiscountOriginType, int2str(retailSalesQuoteDiscountLine.DiscountOriginType));
                xmlLineRecord.setAttribute(CustomerDiscountType, int2str(retailSalesQuoteDiscountLine.CustomerDiscountType));
                xmlLineRecord.setAttribute(DiscountCode, retailSalesQuoteDiscountLine.DiscountCode);
                xmlLineRecord.setAttribute(ManualDiscountType, int2str(retailSalesQuoteDiscountLine.ManualDiscountType));
                xmlLineRecord.setAttribute(PeriodicDiscountOfferId, retailSalesQuoteDiscountLine.PeriodicDiscountOfferId);
                xmlLineRecord.setAttribute(OfferName, retailDiscount.Name);
                xmlLineRecord.setAttribute(DealPrice, num2str(retailSalesQuoteDiscountLine.DealPrice,5,3,1,0));
                xmlLineRecord.setAttribute(DiscountAmountAttribute, num2str(retailSalesQuoteDiscountLine.DiscountAmount,5,3,1,0));
                xmlLineRecord.setAttribute(PercentageStr, num2str(retailSalesQuoteDiscountLine.Percentage,5,3,1,0));
                xmlLineRecord.setAttribute(BundleIdColumn, int2str(retailSalesQuoteDiscountLine.BundleId));

                xmlLineDiscounts.appendChild(xmlLineRecord);
            }
        }
        else
        {
            while select Amount, DiscountOriginType, CustomerDiscountType, DiscountCode, ManualDiscountType, PeriodicDiscountOfferId, Percentage, DiscountAmount, DealPrice, BundleId from retailSalesDiscountLine
                    where retailSalesDiscountLine.InventTransId == _inventTrans
                outer join Name from retailDiscount
                    where retailSalesDiscountLine.PeriodicDiscountOfferId
                        && retailDiscount.OfferId == retailSalesDiscountLine.PeriodicDiscountOfferId
            {
                fillSalesOrderDiscountLine();

                hasDiscountLines = true;
            }

            if (_unitLineDiscount && !hasDiscountLines)
            {
                retailSalesDiscountLine.clear();
                retailSalesDiscountLine.initValue();
                retailSalesDiscountLine.InventTransId = _inventTrans;
                retailSalesDiscountLine.DiscountOriginType = RetailDiscountOriginType::Customer;
                retailSalesDiscountLine.CustomerDiscountType = RetailCustomerDiscountType::Line;
                retailSalesDiscountLine.DiscountAmount = _unitLineDiscount;
                retailSalesDiscountLine.Amount = _unitLineDiscount * _quantity;

                fillSalesOrderDiscountLine();
            }
        }

        _xmlItem.appendChild(xmlLineDiscounts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxLineXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Sales Tax Line XML for the given SalesLine InventTransId
    /// </summary>
    /// <param name="_xmlDoc">
    /// Parent XML document.
    /// </param>
    /// <param name="_xmlItem">
    /// Parent XML node the Discount Line XML will be added to.
    /// </param>
    /// <param name="_invoiceId">
    /// InventTransId of the sales line.
    /// </param>
    /// <param name="_itemId">
    /// Itme Id of the sales line.
    /// </param>
    /// <param name="_salesId">
    /// Sales Order Id.
    /// </param>
    /// <remarks>
    /// Gets XML representing the associated TaxLines for the given SalesLine and adds them to the given Item xml node.
    /// This was copied from RetailTransactionServiceOrders::addTaxLineXml
    /// </remarks>
    private static void addTaxLineXml(XmlDocument _xmlDoc, XmlElement _xmlItem, InvoiceId _invoiceId, ItemIdSmall _itemId, SalesIdBase _salesId)
    {
        const str TaxLinesStr = 'TaxLines';
        const str TaxLineStr = 'TaxLine';
        const str IsIncludedInPriceStr = 'IsIncludedInPrice';
        TaxTrans                taxTrans;
        CustInvoiceTrans        custInvoiceTrans;

        XmlElement xmlLineTaxs, xmlLineRecord;

        //Get line level TaxLines info
        xmlLineTaxs = _xmlDoc.createElement(TaxLinesStr);
        
        while select RecId, ItemId
                from custInvoiceTrans
                        where custInvoiceTrans.InvoiceId == _invoiceId && custInvoiceTrans.ItemId == _itemId
                    join TaxAmount, TaxCode, TaxItemGroup, TaxValue from taxTrans where taxTrans.inventTransId == custInvoiceTrans.inventTransId
        {
            xmllinerecord = _xmlDoc.createElement(TaxLineStr);
            xmllinerecord.setAttribute(TaxGroupStr, taxTrans.TaxItemGroup);
            xmllinerecord.setAttribute(TaxCodeStr, taxTrans.TaxCode);
            xmllinerecord.setAttribute(PercentageStr, num2str(taxTrans.TaxValue, 5, 3, 1, 0));
            xmllinerecord.setAttribute(AmountStr, num2str(taxTrans.TaxAmount, 5, 3, 1, 0));
            xmllinerecord.setAttribute(IsIncludedInPriceStr, enum2Str(RetailTransactionServiceOrdersAX63::getOrderTaxIncludeStatus(_salesId)));

            xmlLineTaxs.appendChild(xmlLineRecord);
        }
        
        _xmlItem.appendChild(xmlLineTaxs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderTaxIncludeStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets TaxIncludedInPrice flag for a given order.
    /// </summary>
    /// <param name="_salesId">
    /// The sales Id for the order.
    /// </param>
    /// <remarks> This was copied from RetailTransactionServiceOrders::getOrderTaxIncludeStatus. </remarks>
    private static boolean getOrderTaxIncludeStatus(SalesIdBase _salesId)
    {
        SalesTable salesTable;
        boolean inclTax = false;

        if (_salesId != null)
        {
            select firstonly InclTax from salesTable
                   where salesTable.Salesid == _salesId;

            inclTax = salesTable.InclTax;
        }
        
        return inclTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>