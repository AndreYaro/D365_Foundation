<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_InventTransArchive</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventMov_InventTransArchive extends InventMovement
{
    private InventTrans   inventTrans;
    private InventTransId inventTransId;
    private ItemId        itemId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty remainPhysical()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return inventTrans.DateFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty transQty()
    {
        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::InventTransArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        return null;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventMov_InventTransArchive construct()
    {
        InventMov_InventTransArchive   movement_InventTransArchive = new InventMov_InventTransArchive(null);

        return movement_InventTransArchive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(InventTrans _inventTransArchive)
    {
        inventTrans = _inventTransArchive;
        if (!_inventTransArchive.inventTransOrigin)
        {
            inventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        }
        else
        {
            inventTransId = _inventTransArchive.inventTransOrigin().InventTransId;
        }

        super(_inventTransArchive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTrans</Name>
				<Source><![CDATA[
    public static InventMovement newInventTrans(InventTrans _inventTransArchive)
    {
        InventMov_InventTransArchive movement_Archive =  new InventMov_InventTransArchive(_inventTransArchive);
        movement_Archive.parmItemId(_inventTransArchive.ItemId);
        return movement_Archive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    protected InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    protected ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return inventTrans.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId()
    {
        return  inventTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return InventSite::changeDimension(this.inventTable().DefaultDimension, this.inventdim().InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        return inventTrans.isIssue() ? LedgerPostingType::InventIssue : LedgerPostingType::InventReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (!cacheAccountBalanceSheet)
        {
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventReceipt,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventIssue,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
            }
            else
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
                }
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventProfit));
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss));
            }
            
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>