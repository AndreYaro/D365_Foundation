<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcGenerateRouteOperation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PcGenerateRouteOperation
{
    Route                       route;
    RouteOpr                    routeOpr;

    PCAdaptorComponent          adaptorComponent;

    PCTemplateFind              templateFind;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyAdaptorFieldAssignements</Name>
				<Source><![CDATA[
        protected void applyAdaptorFieldAssignements(PCAdaptorRouteOperation _adaptorRouteOperation)
    {
        MapEnumerator       me = _adaptorRouteOperation.getFieldAssignments();

        EcoResValue value;

        TableId tableId;
        FieldId fieldId;

        PCGenerateBOMLine generateBOMLine = PCGenerateBOMLine::construct();

        while ( me.moveNext() )
        {
            [tableId, fieldId] = me.currentKey();

            value = me.currentValue();

            switch ( tableId )
            {
                case tableNum(Route):
                generateBOMLine.assignAdaptorFieldToRecord(route, fieldId, value);
                break;
                case tableNum(RouteOpr):

                generateBOMLine.assignAdaptorFieldToRecord(routeOpr, fieldId, value);

                break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
/// <summary>
    /// Generates the route operation line that results from a variant configuration of the component
    /// instance that is related to the template.
    /// </summary>
    /// <param name="_routeId">
    /// The ID of the route that will be attached to the route operation line.
    /// </param>
    /// <param name="_adaptorRouteOperation">
    /// An instance of the <c>PCAdaptorRouteOperations</c> class.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item that was used for the configuration.
    /// </param>
    /// <param name="_supplyInventDim">
    /// The inventory dimensions that should serve as a base for the created route operation lines.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The parameters specified were invalid.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The configuration is not valid.
    /// </exception>
    public void generate(
                        RouteId                 _routeId,
                        PCAdaptorRouteOperation _adaptorRouteOperation,
                        ItemId                  _itemId,
                        InventDim               _supplyInventDim)
    {
        #PC

        OprNum                      oprNum;
        OprNum                      oprNumNext;
        WrkCtrPCRouteOperationActivity  operationActivity;
        TableId                     tableRoute      = tableNum(Route);
        TableId                     tableRouteOpr   = tableNum(RouteOpr);

        PCTemplateComponent         templateComponent = _adaptorRouteOperation.getTemplateComponent();
        PCComponentInstance         componentInstance = _adaptorRouteOperation.getComponentInstance();

        OprNum findMaxOprNum(RouteId _routeIdTmp, RouteOprId _oprIdTmp)
        {
            Route routeTmp;
            OprNum oprNumTmp = 0;
            while select OprNum from routeTmp
                where routeTmp.RouteId == _routeIdTmp && ((_oprIdTmp && routeTmp.OprId == _oprIdTmp) || !_oprIdTmp)
            {
                if (oprNumTmp < abs(routeTmp.OprNum))
                {
                    oprNumTmp = real2int(abs(routeTmp.OprNum));
                }
            }
            return oprNumTmp;
        }

        if (!_routeId || !_supplyInventDim)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // setup of the template finder class
        templateFind.parmTemplateComponent(templateComponent);
        templateFind.parmComponentInstance(componentInstance);
        templateFind.loadContext();

        //sets the infolog prefix, so the user can trace the error better
        setPrefix(templateComponent.Name);

        ttsbegin;
        // clear buffers
        route.clear();
        routeOpr.clear();

        route.RouteId = _routeId;

        //Operation Id
        route.OprId     = templateFind.getBindingValueAsString(tableRouteOpr, fieldNum(RouteOpr, OprId));
        routeOpr.OprId  = route.OprId;

        //Operation details section
        oprNum = str2int(templateFind.getBindingValueAsString(tableRoute, fieldNum(Route, OprNum)));
        oprNumNext = str2int(templateFind.getBindingValueAsString(tableRoute, fieldNum(Route, OprNumNext)));

        if ( oprNum )
        {
            route.OprNum    = oprNum;
        }
        else
        {
            if ( route.OprNum < 0 )
            {
                route.OprNum = -route.OprNum;
            }
            else
            {
                if ( route.OprNum == 0 )
                {
                    route.OprNum = findMaxOprNum(_routeId, "") + 10;
                }
            }
        }
        route.OprNumNext = oprNumNext;
        //Route
        route.OprPriority   = str2int(templateFind.getBindingValueAsString(tableRoute, fieldNum(Route, OprPriority)));
        route.LinkType      = str2int(templateFind.getBindingValueAsString(tableRoute, fieldNum(Route, LinkType)));

        routeOpr.PropertyId = templateFind.getBindingValueAsString(tableRouteOpr, fieldNum(RouteOpr, PropertyId));
        routeOpr.RouteType = str2int(templateFind.getBindingValueAsString(tableRouteOpr, fieldNum(RouteOpr, RouteType)));

        //Consumption calculation
        routeOpr.Formula = any2Enum(str2int(templateFind.getBindingValueAsString(tableRouteOpr, fieldNum(RouteOpr, Formula))));
        routeOpr.FormulaFactor1 = str2num(templateFind.getBindingValueAsString(tableRouteOpr, fieldNum(RouteOpr, FormulaFactor1)));

        //other
        routeOpr.RouteCode          = RouteAll::Route;
        routeOpr.RouteRelation      = route.RouteId;
        routeOpr.ItemCode           = TableGroupAll::Table;
        routeOpr.ItemRelation       = _itemId;
        routeOpr.ConfigId           = _supplyInventDim.configId;

        //Resource requirements
        routeOpr.WrkCtrIdCost = templateFind.getBindingValueAsString(tableRouteOpr, fieldNum(RouteOpr, WrkCtrIdCost));
        if (routeOpr.WrkCtrIdCost)
        {
            routeOpr.initFromWrkCtrId(routeOpr.WrkCtrIdCost);
        }

        // set supply site
        routeOpr.SiteId = _supplyInventDim.InventSiteId;

        // Possibly override with values from template
        routeOpr.RouteGroupId = templateFind.getBindingValueAsStringWithDefault(tableRouteOpr, fieldNum(RouteOpr, RouteGroupId), routeOpr.RouteGroupId);

        //Cost Categories
        routeOpr.SetUpCategoryId    = templateFind.getBindingValueAsStringWithDefault(tableRouteOpr, fieldNum(RouteOpr, SetUpCategoryId), routeOpr.SetUpCategoryId);
        routeOpr.ProcessCategoryId  = templateFind.getBindingValueAsStringWithDefault(tableRouteOpr, fieldNum(RouteOpr, ProcessCategoryId), routeOpr.ProcessCategoryId);
        routeOpr.QtyCategoryId      = templateFind.getBindingValueAsStringWithDefault(tableRouteOpr, fieldNum(RouteOpr, QtyCategoryId), routeOpr.QtyCategoryId);

        //Times
        routeOpr.SetupTime          = templateFind.getBindingValueAsRealWithDefault(tableRouteOpr, fieldNum(RouteOpr, SetupTime), routeOpr.SetupTime);
        routeOpr.ProcessTime        = templateFind.getBindingValueAsRealWithDefault(tableRouteOpr, fieldNum(RouteOpr, ProcessTime), routeOpr.ProcessTime);
        routeOpr.ProcessPerQty      = templateFind.getBindingValueAsRealWithDefault(tableRouteOpr, fieldNum(RouteOpr, ProcessPerQty), routeOpr.ProcessPerQty);
        routeOpr.TranspTime         = templateFind.getBindingValueAsRealWithDefault(tableRouteOpr, fieldNum(RouteOpr, TranspTime), routeOpr.TranspTime);
        routeOpr.ToHours            = templateFind.getBindingValueAsRealWithDefault(tableRouteOpr, fieldNum(RouteOpr, ToHours), routeOpr.ToHours);
        routeOpr.QueueTimeBefore    = templateFind.getBindingValueAsRealWithDefault(tableRouteOpr, fieldNum(RouteOpr, QueueTimeBefore), routeOpr.QueueTimeBefore);
        routeOpr.QueueTimeAfter     = templateFind.getBindingValueAsRealWithDefault(tableRouteOpr, fieldNum(RouteOpr, QueueTimeAfter), routeOpr.QueueTimeAfter);

        //Overlap
        routeOpr.TransferBatch  = templateFind.getBindingValueAsRealWithDefault(tableRouteOpr, fieldNum(RouteOpr, TransferBatch), routeOpr.TransferBatch);

        select  firstonly RecId, Activity from operationActivity
        where   operationActivity.TemplateComponent == templateComponent.RecId;

        // apply adaptor fields
        this.applyAdaptorFieldAssignements(_adaptorRouteOperation);

        if ( route.validateWrite() )
        {
            route.write();
        }
        else
        {
            throw error("@SYS40229");
        }

        if ( ! (select routeOpr
                 index OprRelIdx
                 where routeOpr.OprId           == route.OprId                  &&
                       routeOpr.ItemCode        == TableGroupAll::Table         &&
                       routeOpr.ItemRelation    == _itemId                      &&
                       routeOpr.ConfigId        == _supplyInventDim.configId    &&
                       routeOpr.RouteCode       == RouteAll::Route              &&
                       routeOpr.RouteRelation   == route.RouteId                &&
                       routeOpr.SiteId          == _supplyInventDim.InventSiteId).RecId )
        {
            if ( routeOpr.validateWrite() )
            {
                routeOpr.write();

                WrkCtrActivityRequirementSet::copyRequirements(operationActivity.Activity, routeOpr.activity());
        }
            else
            {
                throw error("@SYS40229");
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        templateFind = PCTemplateFind::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateFind</Name>
				<Source><![CDATA[
        public PCTemplateFind parmTemplateFind(PCTemplateFind _templateFind = templateFind)
    {
        templateFind = _templateFind;

        return templateFind;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2bool</Name>
				<Source><![CDATA[
        protected NoYes str2bool(str boolValue)
    {
        #PC

        if (boolValue == #True)
        {
            return NoYes::Yes;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCGenerateRouteOperation construct()
    {
        return new PCGenerateRouteOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdaptorComponent</Name>
				<Source><![CDATA[
    public PCAdaptorComponent parmAdaptorComponent(PCAdaptorComponent _adaptorComponent = adaptorComponent)
    {
        adaptorComponent = _adaptorComponent;

        templateFind.parmAdaptorComponent(_adaptorComponent);

        return adaptorComponent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>