<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationTestPerformance</Name>
	<SourceCode>
		<Declaration><![CDATA[
using XppRuntimeEventSource = Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource;
using Stopwatch = System.Diagnostics.Stopwatch;

/// <summary>
/// Helps to log telemetry information for release to warehouse process.
/// </summary>
internal class WHSInstrumentationTestPerformance extends WHSInstrumentationPerformanceTask
{
    private const str TestCategory = 'releaseToWarehouseTest';
    private WHSReleaseToWarehouseId releaseToWarehouseId;
    private str textAction;
    private Stopwatch testStopwatch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(WHSReleaseToWarehouseId _releaseToWarehouseId, str _action)
    {
        releaseToWarehouseId = _releaseToWarehouseId;
        textAction = _action;
        super(TestCategory, _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preTaskStart</Name>
				<Source><![CDATA[
    protected void preTaskStart()
    {
        if (WHSInstrumentationPerformanceTask::IsPostTaskStartFlightEnabled)
        {
            return;
        }

        this.setParameter('releaseToWarehouseId', releaseToWarehouseId);
        testStopwatch = Stopwatch::StartNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaskStart</Name>
				<Source><![CDATA[
    protected void postTaskStart()
    {
        if (!WHSInstrumentationPerformanceTask::IsPostTaskStartFlightEnabled)
        {
            return;
        }

        this.setParameter('releaseToWarehouseId', releaseToWarehouseId);
        testStopwatch = Stopwatch::StartNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTaskInternal</Name>
				<Source><![CDATA[
    protected void endTaskInternal()
    {
        testStopwatch.Stop();
        this.writeLineToInfolog(strFmt('%1: Ended %2, time: %3', TestCategory, textAction, testStopwatch.ElapsedMilliseconds));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLineToInfolog</Name>
				<Source><![CDATA[
    private void writeLineToInfolog(str _logLine)
    {
        info(_logLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReleaseToWarehouseId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSInstrumentationTestPerformance newFromReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId, str _action)
    {
        return new WHSInstrumentationTestPerformance(_releaseToWarehouseId, _action);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>