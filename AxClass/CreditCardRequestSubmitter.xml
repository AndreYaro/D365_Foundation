<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardRequestSubmitter</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Retail = Microsoft.Dynamics.Retail;
using RetailConst = Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants;

internal class CreditCardRequestSubmitter
{
    protected CreditCardPaymentProperties properties;
    protected CreditCardConnectorName connectorName;
    protected CreditCardOperation operation;
    protected CreditCardRequestResultContext creditCardRequestResultContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>submitRequest</Name>
				<Source><![CDATA[
    internal CreditCardRequestResultContext submitRequest()
    {
        Retail.PaymentSDK.Portable.IPaymentProcessor processor = this.getProcessor(connectorName);

        if (processor == null)
        {
            creditCardRequestResultContext.parmProcessSucceed(false);
            creditCardRequestResultContext.parmResponseMessage("@CashManagement:CreditCardMissingInformation");
            return creditCardRequestResultContext;
        }
        
        Retail.PaymentSDK.Portable.Request request = this.createRequest(properties);
        Retail.PaymentSDK.Portable.Response response;
        switch (operation)
        {
            case CreditCardOperation::Authorize:
                response = processor.Authorize(request, null);
                break;
            case CreditCardOperation::Reauthorize:
                response = processor.Reauthorize(request, null);
                break;
            case CreditCardOperation::CaptureAfterAuthorize:
            case CreditCardOperation::AuthorizeAndCapture:
                response = processor.Capture(request);
                break;
            case CreditCardOperation::Refund:
                response = processor.Refund(request, null);
                break;
            case CreditCardOperation::Void:
                response = processor.Void(request);
                break;
            case CreditCardOperation::Balance:
                response = processor.BalanceOnGiftCard(request, null);
                break;
            case CreditCardOperation::Activation:
                response = processor.ActivateGiftCard(request, null);
                break;
            default:
                creditCardRequestResultContext.parmProcessSucceed(false);
                creditCardRequestResultContext.parmResponseMessage(strFmt("@SYS122465", operation));
                break;
        }
        
        creditCardRequestResultContext.parmResponse(response);

        return creditCardRequestResultContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CreditCardRequestSubmitter construct(CreditCardPaymentProperties _properties, CreditCardConnectorName _connectorName, CreditCardOperation _operation)
    {
        return new CreditCardRequestSubmitter(_properties, _connectorName, _operation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(CreditCardPaymentProperties _properties, CreditCardConnectorName _connectorName, CreditCardOperation _operation)
    {
        properties = _properties;
        connectorName = _connectorName;
        operation = _operation;
        creditCardRequestResultContext = new CreditCardRequestResultContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequest</Name>
				<Source><![CDATA[
    private Retail.PaymentSDK.Portable.Request createRequest(CreditCardPaymentProperties _properties)
    {
        Retail.PaymentSDK.Portable.Request request = new Retail.PaymentSDK.Portable.Request();

        request.set_Locale(currentUserLanguage());
        request.set_Properties(_properties.toArray());

        return request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessor</Name>
				<Source><![CDATA[
    private Retail.PaymentSDK.Portable.IPaymentProcessor getProcessor(CreditCardConnectorName _connectorName)
    {
        Retail.PaymentSDK.Portable.IPaymentProcessor processor;

        try
        {
            processor = new CreditCardPaymentProcessorFactory().getProcessor(_connectorName);
        }
        catch (Exception::CLRError)
        {
            creditCardRequestResultContext.parmProcessSucceed(false);
            creditCardRequestResultContext.parmResponseMessage(CreditCardProcessHelper::getClrExceptionMessage());
            creditCardRequestResultContext.parmDisplayedMessage("@SYS116968");
        }
        catch
        {
            creditCardRequestResultContext.parmProcessSucceed(false);
            creditCardRequestResultContext.parmDisplayedMessage("@SYS116968");
            if (!creditCardRequestResultContext.parmResponseMessage())
            {
                creditCardRequestResultContext.parmResponseMessage(creditCardRequestResultContext.parmDisplayedMessage());
            }
        }

        return processor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>