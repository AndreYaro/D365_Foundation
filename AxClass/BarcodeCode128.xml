<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BarcodeCode128</Name>
	<SourceCode>
		<Declaration><![CDATA[
[BarcodeTypeFactory(BarcodeType::Code128)]
public class BarcodeCode128 extends Barcode
{
    #Define.EscChar(126)
    #DEFINE.F1_ENCODE('~f')

    #Define.StartAOptimizer('~g')
    #Define.StartBOptimizer('~h')
    #Define.StartCOptimizer('~i')

    #Define.Shift2AOptimizer('~e')
    #Define.Shift2BOptimizer('~d')
    #Define.Shift2COptimizer('~c')

    #Define.CodesetA(1)
    #Define.CodesetB(2)
    #Define.CodesetC(3)

    #Define.NextA(1)
    #Define.NextB(2)

    #Define.NotFound(-1)

    #Define.MaxReturnStringSize(250)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barcodeType</Name>
				<Source><![CDATA[
    public BarcodeType barcodeType()
    {
        return BarcodeType::Code128;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAssetLabelBarcodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the bar code type is valid for fixed asset labels.
    /// </summary>
    /// <returns>true, if is valid; otherwise, false.</returns>
    public boolean isValidAssetLabelBarcodeType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidLocationLabelBarcodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the bar code type is valid for location labels.
    /// </summary>
    /// <returns>true, if is valid; otherwise, false.</returns>
    public boolean isValidLocationLabelBarcodeType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>charInCodesetCount</Name>
				<Source><![CDATA[
    // Counts how many characters starting at _startPos that are in the _codeset
    protected int charInCodesetCount(
        BarCodeString   _str,
        int             _strLength,
        int             _startPos,
        int             _codeset)
    {
        boolean cont = true;
        int     retnum = 0;
        int     nchr;
        int     i;
        int     charThisPos;
        boolean anyF1 = false;
        int     digitsBeforeF1;
        switch (_codeset)
        {
            case #CodesetA:
                for (i = _startPos; i <= _strLength; i++)
                {
                    charThisPos = char2num(_str, i);
                    if (((charThisPos >= 0) && (charThisPos <= 47)) || ((charThisPos >= 58) && (charThisPos <= 95)) || (charThisPos > 127))
                    {
                        retnum++;
                    }
                    else
                    {
                        if ((charThisPos >= 48) && (charThisPos <= 57))
                        {
                            nchr = this.followingCharsBetween(_str,_strLength,i,48,57);
                            if (nchr >= 4)
                            {
                                i = _strLength + 1; // break the loop
                            }
                            else
                            {
                                retnum += nchr;
                                i += nchr - 1;
                            }
                        }
                        else
                        {
                            i = _strLength + 1; // break the loop
                        }
                    }
                }
                break;
            case #CodesetB:
                for (i = _startPos; i <= _strLength; i++)
                {
                    charThisPos = char2num(_str, i);
                    if (((charThisPos >= 32) && (charThisPos <= 47)) || ((charThisPos >= 58) && (charThisPos <= 127)))
                    {
                        retnum++;
                    }
                    else
                    {
                        if ((charThisPos >= 48) && (charThisPos <= 57))
                        {
                            nchr = this.followingCharsBetween(_str,_strLength,i,48,57);
                            if (nchr >= 4)
                            {
                                i = _strLength + 1; // break the loop to force a switch to codesetc
                                if (nchr mod 2 == 1)
                                {
                                    retnum += 1;
                                }
                            }
                            else
                            {
                                retnum += nchr;
                                i += nchr - 1;
                            }
                        }
                        else
                        {
                            i = _strLength + 1; // break the loop
                        }
                    }
                }
                break;
            case #CodesetC:
                for (i = _startPos; i <= _strLength; i++)
                {
                    charThisPos = char2num(_str, i);
                    if ((charThisPos >= 48) && (charThisPos <= 57))
                    {
                        retnum++;
                    }
                    else
                    if ((retnum mod 2 == 0) && (subStr(_str, i,2) == #F1_ENCODE)) // equal number of digits followed by FNC1
                    {
                        if (!anyF1)
                        {
                            digitsBeforeF1 = retNum;
                        }
                        retnum += 2;
                        i++;
                        anyF1 = true;
                    }
                    else
                    {
                        i = _strLength + 1; // break the loop
                    }
                }
                if (anyF1 && (retNum mod 2 != 0))
                {
                    retNum = digitsBeforeF1;
                }
                break;
        }
        return retnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>codesetCSearch</Name>
				<Source><![CDATA[
    protected int codesetCSearch(
        str     _stringIn,
        int     _startPos)
    {
        int c1 = char2num(_stringIn, _startPos) - 48;
        int c2 = char2num(_stringIn, _startPos + 1) - 48;

        if (!c1 < 0 || c1 > 9)
        {
            return #NotFound;
        }

        if (!c2 < 0 || c2 > 9)
        {
            return #NotFound;
        }

        return 10 * c1 + c2 + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFont</Name>
				<Source><![CDATA[
    public FontName defaultFont()
    {
        return 'BC C128 HD Wide';
    }

]]></Source>
			</Method>
			<Method>
				<Name>encode</Name>
				<Source><![CDATA[
    public void encode()
    {
        if (strLen(string) > MaxStringLength)
        {
            throw(error("@SYS90717"));
        }

        barcodeStr = this.encodeString(string);

        barcodeStrHR = string;
        encoded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodeString</Name>
				<Source><![CDATA[
    public BarCodeString encodeString(
        BarCodeString   _stringIn,
        boolean         _useF1Code = false)
    {
        int                 len1    = strLen(_stringIn + '.') - 1; // handle trailing spaces so make sure len1 includes specified spaces
        boolean             cont = true;
        int                 tichr = 1;
        int                 codeset = #CodesetB;
        int                 fcn4 = 1;
        int                 tcchr;
        int                 chktot = 0;
        int                 val;
        int                 charVal;
        int                 chrcnt = 0;
        int                 rtnint;
        BarCodeString       textcvt;
        BarCodeString       result;
        boolean             shift = false;
        int                 outputCnt = 0;

        if (len1 < 1)
        {
            return _stringIn;
        }

        // check the character string and optimize the structure
        textcvt = this.optimizeCodesets(_stringIn,len1, _useF1Code);

        // map the characters
        while (cont)
        {
            charVal = char2num(textcvt,tichr);
            if ((charVal == #escChar) && (char2num(textcvt, tichr+1) != 0))   // tilda character #126
            {
                tichr++;
                charVal = char2num(textcvt,tichr);

                // make the val variable equal to the character after the /
                if (charVal == #escChar)
                {
                    val = 95; // if the character is a esckey then make the value a 95
                }
                else
                {
                    val = (charVal < 0 || charVal > 105) ? #NotFound : charVal + 1; // convert to index
                }

                if (val != #NotFound)
                {
                    result += this.index2OutStr(val);
                }
                else
                {
                    result += num2char(63) + num2char(118) + num2char(63);
                }

                if (chrcnt == 0)
                {
                    chktot += val - 1;
                }
                else
                {
                    chktot += chrcnt * (val - 1);
                }

                chrcnt++;
                outputCnt += 3;

                // handle FNC4
                if (((charVal == 100) && (codeset == #CodesetB)) || ((charVal == 101) && (codeset == #CodesetA)))
                {
                    if (fcn4 < 4)
                    {
                        fcn4++;
                    }
                    else
                    {
                        fcn4 = 1;
                    }
                }
                else
                {
                    switch (charVal)
                    {
                        case 101:
                        case 103:
                            codeset = #CodesetA;
                            break;
                        case 100:
                        case 104:
                            codeset = #CodesetB;
                            break;
                        case  99:
                        case 105:
                            codeset = #CodesetC;
                            break;
                    }
                }
                tichr++;
            }
            else
            {
                if ((codeset == #CodesetC) && (charVal >= 48) && (charVal <= 57))
                {
                    rtnint = this.codesetCSearch(textcvt, tichr);
                    if (rtnint != -1)
                    {
                        result += this.index2OutStr(rtnint);

                        chktot += chrcnt * (rtnint - 1);
                        chrcnt++;
                        outputCnt += 3;
                    }
                    else
                    {
                        result += num2char(63) + num2char(99) + num2char(63);
                        outputCnt += 3;
                    }
                    tichr += 2;
                }
                else
                {
                    if (fcn4 > 1)
                    {
                        if (fcn4 == 4)
                        {
                            tcchr = char2num(textcvt, tichr) + 128;
                        }
                        else
                        {
                            tcchr = char2num(textcvt, tichr);
                        }

                        if (fcn4 == 2)
                        {
                            fcn4 = 1;
                        }
                        else
                        {
                            fcn4 = 3;
                        }
                    }
                    else
                    {
                        tcchr = char2num(textcvt, tichr);
                    }

                    tichr++;
                    if (shift)
                    {
                        if (codeset == #CodesetA)
                        {
                            rtnint = (tcchr <= 31 || tcchr > 127) ? #NotFound : tcchr - 31; // is tcchr in codeset B?
                        }
                        else
                        {
                            rtnint = (tcchr < 0 || tcchr > 127) ? #NotFound : (tcchr <= 31) ? tcchr + 65 : tcchr - 31; // is tcchr in codeset a
                        }
                        shift = false;
                    }
                    else
                    {
                        if (codeset == #CodesetA)
                        {
                            rtnint = (tcchr < 0 || tcchr > 127) ? 96 : (tcchr <= 31) ? tcchr + 65 : tcchr - 31; // is tcchr in codeset a
                        }
                        else
                        {
                            rtnint = (tcchr <= 31 || tcchr > 127) ? #NotFound : tcchr - 31; // is tcchr in codeset B?
                        }
                    }
                    if (rtnint != #NotFound)
                    {
                        result += this.index2OutStr(rtnint);

                        chktot += chrcnt * (rtnint - 1);
                        chrcnt++;
                        outputCnt += 3;
                    }
                    else
                    {
                        result += num2char(63) + num2char(98) + num2char(63);
                        outputCnt += 3;
                    }
                    if ((charVal == 98) && ((codeset == #CodesetA) || (codeset == #CodesetB)))
                    {
                        shift = true;
                    }
                }
            }
            if (char2num(textcvt, tichr) <= 1)
            {
                cont = false;
            }
        }

        val = chktot mod 103;
        if ((codeset == #CodesetA) && (val == 91))  // ESc
        {
            result += this.index2OutStr(101); // shift to codeset b
            chktot += chrcnt * (100);
            chrcnt++;

            result += this.index2OutStr(74);
            chktot += chrcnt * (73);
            chrcnt++;
            outputCnt += 6;

            val = chktot mod 103;
        }

        result += this.index2OutStr(1 + val);
        // add stop character
        result += '\')\!1';  // num2char(39) + num2char(41) + num2char(33) + num2char(49)

        if (outputCnt > #MaxReturnStringSize - 7) // 3 start + 4 stop
        {
            throw(error("@SYS90717"));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>followingCharsBetween</Name>
				<Source><![CDATA[
    protected int followingCharsBetween(
        BarCodeString   _str,
        int             _strLength,
        int             _startPos,
        int             _minChar,
        int             _maxChar)
    {
        int     retnum = 0;
        int     i;
        int     charValue;

        for (i = _startPos; i <= _strLength; i++)
        {
            charValue = char2num(_str, i);
            if ((charValue < _minChar) || (charValue > _maxChar))
            {
                return retnum;
            }
            retnum++;
        }
        return retnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>index2OutStr</Name>
				<Source><![CDATA[
    protected str index2OutStr(int _idx)
    {
        switch (_idx)
        {
            case 106:   return num2char(37) + num2char(34) + num2char(42);
            case 105:   return num2char(37) + num2char(34) + num2char(36);
            case 104:   return num2char(37) + num2char(36) + num2char(34);
            case 103:   return num2char(45) + num2char(33) + num2char(41);
            case 102:   return num2char(41) + num2char(33) + num2char(45);
            case 101:   return num2char(33) + num2char(45) + num2char(41);
            case 100:   return num2char(33) + num2char(41) + num2char(45);
            case  99:   return num2char(45) + num2char(35) + num2char(33);
            case  98:   return num2char(45) + num2char(33) + num2char(35);
            case  97:   return num2char(33) + num2char(47) + num2char(33);
            case  96:   return num2char(33) + num2char(45) + num2char(35);
            case  95:   return num2char(35) + num2char(33) + num2char(45);
            case  94:   return num2char(33) + num2char(35) + num2char(45);
            case  93:   return num2char(33) + num2char(33) + num2char(47);
            case  92:   return num2char(45) + num2char(37) + num2char(37);
            case  91:   return num2char(37) + num2char(45) + num2char(37);
            case  90:   return num2char(37) + num2char(37) + num2char(45);
            case  89:   return num2char(46) + num2char(34) + num2char(33);
            case  88:   return num2char(46) + num2char(33) + num2char(34);
            case  87:   return num2char(45) + num2char(34) + num2char(34);
            case  86:   return num2char(34) + num2char(46) + num2char(33);
            case  85:   return num2char(34) + num2char(45) + num2char(34);
            case  84:   return num2char(33) + num2char(46) + num2char(34);
            case  83:   return num2char(34) + num2char(34) + num2char(45);
            case  82:   return num2char(34) + num2char(33) + num2char(46);
            case  81:   return num2char(33) + num2char(34) + num2char(46);
            case  80:   return num2char(35) + num2char(45) + num2char(33);
            case  79:   return num2char(40) + num2char(33) + num2char(34);
            case  78:   return num2char(45) + num2char(41) + num2char(33);
            case  77:   return num2char(38) + num2char(33) + num2char(36);
            case  76:   return num2char(40) + num2char(34) + num2char(33);
            case  75:   return num2char(36) + num2char(38) + num2char(33);
            case  74:   return num2char(36) + num2char(37) + num2char(34);
            case  73:   return num2char(34) + num2char(40) + num2char(33);
            case  72:   return num2char(34) + num2char(37) + num2char(36);
            case  71:   return num2char(33) + num2char(40) + num2char(34);
            case  70:   return num2char(33) + num2char(38) + num2char(36);
            case  69:   return num2char(36) + num2char(34) + num2char(37);
            case  68:   return num2char(36) + num2char(33) + num2char(38);
            case  67:   return num2char(34) + num2char(36) + num2char(37);
            case  66:   return num2char(34) + num2char(33) + num2char(40);
            case  65:   return num2char(33) + num2char(36) + num2char(38);
            case  64:   return num2char(33) + num2char(34) + num2char(40);
            case  63:   return num2char(47) + num2char(33) + num2char(33);
            case  62:   return num2char(38) + num2char(36) + num2char(33);
            case  61:   return num2char(41) + num2char(45) + num2char(33);
            case  60:   return num2char(43) + num2char(37) + num2char(33);
            case  59:   return num2char(41) + num2char(39) + num2char(33);
            case  58:   return num2char(41) + num2char(37) + num2char(35);
            case  57:   return num2char(43) + num2char(33) + num2char(37);
            case  56:   return num2char(41) + num2char(35) + num2char(37);
            case  55:   return num2char(41) + num2char(33) + num2char(39);
            case  54:   return num2char(37) + num2char(41) + num2char(41);
            case  53:   return num2char(37) + num2char(43) + num2char(33);
            case  52:   return num2char(37) + num2char(41) + num2char(35);
            case  51:   return num2char(39) + num2char(33) + num2char(41);
            case  50:   return num2char(37) + num2char(35) + num2char(41);
            case  49:   return num2char(41) + num2char(41) + num2char(37);
            case  48:   return num2char(35) + num2char(41) + num2char(37);
            case  47:   return num2char(33) + num2char(43) + num2char(37);
            case  46:   return num2char(33) + num2char(41) + num2char(39);
            case  45:   return num2char(35) + num2char(37) + num2char(41);
            case  44:   return num2char(33) + num2char(39) + num2char(41);
            case  43:   return num2char(33) + num2char(37) + num2char(43);
            case  42:   return num2char(39) + num2char(35) + num2char(33);
            case  41:   return num2char(39) + num2char(33) + num2char(35);
            case  40:   return num2char(37) + num2char(35) + num2char(35);
            case  39:   return num2char(35) + num2char(39) + num2char(33);
            case  38:   return num2char(35) + num2char(37) + num2char(35);
            case  37:   return num2char(33) + num2char(39) + num2char(35);
            case  36:   return num2char(35) + num2char(35) + num2char(37);
            case  35:   return num2char(35) + num2char(33) + num2char(39);
            case  34:   return num2char(33) + num2char(35) + num2char(39);
            case  33:   return num2char(39) + num2char(37) + num2char(37);
            case  32:   return num2char(37) + num2char(39) + num2char(37);
            case  31:   return num2char(37) + num2char(37) + num2char(39);
            case  30:   return num2char(42) + num2char(38) + num2char(33);
            case  29:   return num2char(42) + num2char(37) + num2char(34);
            case  28:   return num2char(41) + num2char(38) + num2char(34);
            case  27:   return num2char(42) + num2char(34) + num2char(37);
            case  26:   return num2char(42) + num2char(33) + num2char(38);
            case  25:   return num2char(41) + num2char(34) + num2char(38);
            case  24:   return num2char(41) + num2char(37) + num2char(41);
            case  23:   return num2char(38) + num2char(41) + num2char(34);
            case  22:   return num2char(37) + num2char(42) + num2char(34);
            case  21:   return num2char(38) + num2char(34) + num2char(41);
            case  20:   return num2char(38) + num2char(33) + num2char(42);
            case  19:   return num2char(38) + num2char(42) + num2char(33);
            case  18:   return num2char(34) + num2char(42) + num2char(37);
            case  17:   return num2char(34) + num2char(41) + num2char(38);
            case  16:   return num2char(33) + num2char(42) + num2char(38);
            case  15:   return num2char(34) + num2char(38) + num2char(41);
            case  14:   return num2char(34) + num2char(37) + num2char(42);
            case  13:   return num2char(33) + num2char(38) + num2char(42);
            case  12:   return num2char(39) + num2char(34) + num2char(34);
            case  11:   return num2char(38) + num2char(35) + num2char(34);
            case  10:   return num2char(38) + num2char(34) + num2char(35);
            case   9:   return num2char(35) + num2char(38) + num2char(34);
            case   8:   return num2char(34) + num2char(39) + num2char(34);
            case   7:   return num2char(34) + num2char(38) + num2char(35);
            case   6:   return num2char(35) + num2char(34) + num2char(38);
            case   5:   return num2char(34) + num2char(35) + num2char(38);
            case   4:   return num2char(34) + num2char(34) + num2char(39);
            case   3:   return num2char(38) + num2char(38) + num2char(37);
            case   2:   return num2char(38) + num2char(37) + num2char(38);
            case   1:   return num2char(37) + num2char(38) + num2char(38);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextABChange</Name>
				<Source><![CDATA[
    protected int nextABChange(
        BarCodeString   _str,
        int             _strlength,
        int             _startPos)
    {
        int     endrtn = 0;
        int     charValue;
        int     pos;

        for (pos = _startPos; pos <= _strLength; pos++)
        {
            charValue = char2num(_str, pos);
            if ((charValue >= 96) && (charValue <= 127))
            {  // only supported in codesetB
                return #NextB;
            }
            if ((charValue >=  1) && (charValue <=  31))
            { // only supported in codesetA
                return #NextA;
            }
            if (charValue ==  172)
            {
                return #NextA;
            }
            if ((charValue >= 32) && (charValue <=  95))
            { // supported in both codesetA and codesetB, but prefer B as it encodes more human readable characters
                endrtn = #NextB;
            }
        }
        return endrtn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>optimizeCodesets</Name>
				<Source><![CDATA[
    protected BarCodeString optimizeCodesets(
        BarCodeString   _stringIn,
        int             _stringLength,
        NoYes           _fnc1)
    {
        int             codeset = #CodesetA;
        int             cset = 1;
        boolean         shift = false;      // Is shift in effect
        int             fcn4 = 1;
        boolean         pfcn4 = false;      // Permanent fcn4 shift is set
        BarCodeString   rtnstr;             // return string
        int             nchr;
        int             ncodec;             // Count of characters using CodesetC
        boolean         cont;
        int             i = 1;
        int             j;
        int             k = 0;
        int             charValue;          // ASCII value of current character
        int             charValue2;         // ASCII value of next character
        int             nextCodeset;

        // check to see if control codes are already imbedding in input string
        charValue = char2num(_stringIn,1);
        if (charValue == #EscChar)
        {
            return _stringIn;
        }

        // Calculate the start code
        // If the length of the string is 2 and chr 0 and 1 are numeric then start code is c
        charValue2 = char2num(_stringIn, 2);
        if ((_stringLength == 2) && ((charValue >= 48) && (charValue <= 57)) && ((charValue2 >= 48) && (charValue2 <= 57)))
        {
            rtnstr = #StartCOptimizer;
            codeset = #CodesetC;      // set the codeset to c
        }
        else
        {
            // Check the start of the string to see if it starts with numbers
            ncodec = this.charInCodesetCount(_stringIn,_stringLength,1,#CodesetC);

            // if string starts with more than 4 number it will be Codeset c
            if (ncodec >= 4)
            {
                // If ncodec is odd then the 1st character should be in Codeset B then go to Code c
                if (ncodec mod 2 > 0)
                {
                    rtnstr = #StartBOptimizer;
                    codeset = #CodesetB;    // set the codeset to b
                }
                else
                {
                    // if string starts with even number of numerics start with Code C.
                    rtnstr = #StartCOptimizer;
                    codeset = #CodesetC;    // set the codeset to c
                }
            }
            else
            {
                // if string doesn't start with 4 numbers
                cont = true;
                i = 1;
                // Find if the first character is Codeset A or B.
                while (cont)
                {
                    charValue = char2num(_stringIn,i);
                    if ((charValue >= 0) && (charValue <= 31) || charValue > 127) //0 - 31 is unique to a
                    {
                        cont = false;
                        rtnstr = #StartAOptimizer;
                        codeset = #CodesetA;    // set the codeset to a
                    }
                    else
                    {
                        if ((charValue >= 96) && (charValue <= 127)) //96-127 is unique to b
                        {
                            cont = false;
                            rtnstr = #StartBOptimizer;
                            codeset = #CodesetB;    // set the codeset to b
                        }
                    }

                    // Default to Codeset B if all characters are in both A & b
                    if (cont && (_stringLength <= i))
                    {
                        cont = false;
                        rtnstr = #StartBOptimizer;
                        codeset = #CodesetB;    // set the codeset to b
                    }
                    i++;
                }
            }
        }

        // add support for fnc1 adding it right after the start code
        if (_fnc1)
        {
            rtnstr += #F1_ENCODE;
        }

        // convert the message
        cont = true;    // whether or not to continue
        i = 1;          // index into input string

        while (cont)
        {
            j = this.charInCodesetCount(_stringIn,_stringLength,i,codeset);
            if (j == 0)
            {
                rtnstr += num2char(127);
                i++;
            }
            else
            {
                for (k = j; k>0; k--)
                {
                    if (char2num(_stringIn, i) == #escChar)
                    {
                        rtnstr += subStr(_stringIn, i, 2);
                        i+=2;
                        k--;
                    }
                    else
                    {
                        rtnstr += subStr(_stringIn, i, 1);
                        i++;
                    }
                }
            }

            if (i > _stringLength)  // end of string
            {
                return rtnstr;
            }

            // process code change
            switch (codeset)
            {
                case #CodesetA: // if currently Codeset a
                    charValue = char2num(_stringIn,i);
                    if ((charValue >= 48) && (charValue <= 57))
                    {
                        nchr = this.charInCodesetCount(_stringIn,_stringLength,i,#CodesetC);
                        if (nchr >= 4)
                        {
                            if (nchr mod 2 > 0)
                            {
                                rtnstr += subStr(_stringIn,i,1);
                                i++;
                            }
                            rtnstr += #Shift2COptimizer;
                            codeset = #CodesetC;
                        }
                        else
                        {
                            if (nchr > 0)
                            {
                                rtnstr += subStr(_stringIn, i, nchr);
                                i += nchr;
                            }
                            else
                            {
                                rtnstr += num2char(127);
                            }
                            i++;
                        }
                    }
                    else
                    {
                        if ((i <= _stringLength) && (this.nextABChange(_stringIn,_stringLength,i) == #NextB) && (this.nextABChange(_stringIn,_stringLength,i+1) == #NextA))
                        {
                            if (charValue == 172)
                            {
                                rtnstr += num2char(#EscChar) + num2char(98) + num2char(95);
                            }
                            else
                            {
                                rtnstr += num2char(#EscChar) + num2char(98) + subStr(_stringIn, i, 1);
                            }
                            i++;
                        }
                        else
                        {
                            if (this.nextABChange(_stringIn,_stringLength,i) == #NextB)
                            {
                                rtnstr += #Shift2BOptimizer;
                                codeset = #CodesetB;
                            }
                        }
                    }
                    break;
                case #CodesetB: // if currently Codeset b
                    charValue = char2num(_stringIn,i);
                    if ((charValue >= 48) && (charValue <= 57))
                    {
                        nchr = this.charInCodesetCount(_stringIn,_stringLength,i,#CodesetC);
                        if (nchr >= 4)
                        {
                            if (nchr mod 2 > 0)
                            {
                                rtnstr += subStr(_stringIn, i, 1);
                                i++;
                            }
                            rtnstr += #Shift2COptimizer;
                            codeset = #CodesetC;
                        }
                        else
                        {
                            if (nchr > 0)
                            {
                                rtnstr += subStr(_stringIn, i, nchr);
                                i += nchr;
                            }
                            else
                            {
                                rtnstr += num2char(127);
                            }
                            i++;
                        }
                    }
                    else
                    {
                        if ((i <= _stringLength) &&(this.nextABChange(_stringIn,_stringLength,i) == #NextA) && (this.nextABChange(_stringIn,_stringLength,i+1) == #NextB))
                        {
                            if (charValue == 172)
                            {
                                rtnstr += num2char(#EscChar) + num2char(98) + num2char(200);
                            }
                            else
                            {
                                rtnstr += num2char(#EscChar) + num2char(98) + subStr(_stringIn, i, 1);
                            }
                            i++;
                        }
                        else
                        {
                            if (this.nextABChange(_stringIn,_stringLength,i) == #NextA)
                            {
                                rtnstr += #Shift2AOptimizer;
                                codeset = #CodesetA;
                            }
                        }
                    }
                    break;
                case #CodesetC: // if currently Codeset c
                    nextCodeset = this.nextABChange(_stringIn,_stringLength,i);
                    switch (nextCodeset)
                    {
                        case #NextA:
                            rtnstr += #Shift2AOptimizer;
                            codeset = #CodesetA;
                            break;
                        case #NextB:
                            rtnstr += #Shift2BOptimizer;
                            codeset = #CodesetB;
                            break;
                    }
            }
        }

        return rtnstr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validFontInfo</Name>
				<Source><![CDATA[
    protected container validFontInfo()
    {
        container   res;

        res += [['BC C128 Narrow'     ,  33, '']];
        res += [['BC C128 Medium'     ,  65, '']];
        res += [['BC C128 Wide'       , 100, '']];
        res += [['BC C128 HD Narrow'  ,   8, '']];
        res += [['BC C128 HD Medium'  ,  15, '']];
        res += [['BC C128 HD Wide'    ,  25, '']];

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BarcodeCode128 construct()
    {
        return new BarcodeCode128();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>