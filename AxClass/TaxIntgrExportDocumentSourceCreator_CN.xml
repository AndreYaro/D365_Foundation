<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentSourceCreator_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgExportDocumentSourceCreator_CN</c> is the creator for export document initial.
/// </summary>
class TaxIntgrExportDocumentSourceCreator_CN
{
    TaxIntgrExportDocumentSourceType_CN      exportDocumentSourceType;
    TaxIntgrExportDocumentSource_CN          curExportDocumentSource;
    TaxIntgrExportDocumentSourceLine_CN      curExportDocumentLine;

    TaxIntgrExportDocumentLineSourceMap_CN curExportDocumentLineSourceMap;
    TaxIntgrExportDocSourceCharges_CN curExportDocumentSourceChargesMap;
    TaxIntgrExportDocLineSourceChargesMap_CN curExportDocLineSourceChargesMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createExportDocumentSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates export document initial.
    /// </summary>
    /// <returns>
    /// The export document source record id.
    /// </returns>
    public RefRecId createExportDocumentSource()
    {
        RefRecId result ;

        TaxIntgrExportDocumentLineSource_CN     exportDocumentLineSource;
        RecordInsertList                        exportDocumentLineInsertList = new RecordInsertList(tableNum(TaxIntgrExportDocumentSourceLine_CN));

        ttsBegin;

        result = this.doCreateExportDocumentSource();

        if (exportDocumentSourceType.parmVatInvoiceDescriptionRecId())
        {
            exportDocumentLineSource = TaxIntgrExportDocumentLineSource_CN::construct(
                exportDocumentSourceType,
                VATInvoiceDescTable_CN::find(exportDocumentSourceType.parmVatInvoiceDescriptionRecId()));
            this.doCreateExportDocumentSourceLine(exportDocumentLineSource, exportDocumentLineInsertList);
        }
        else
        {
            curExportDocumentLineSourceMap = exportDocumentSourceType.parmExportDocumentSourceMap().TaxIntgrExportDocumentSourceMap_CN::getExportDocumentLineSourceMap(exportDocumentSourceType.parmTaxCode());
            while (curExportDocumentLineSourceMap)
            {
                curExportDocLineSourceChargesMap = exportDocumentSourceType.parmExportDocumentSourceMap().TaxIntgrExportDocumentSourceMap_CN::getExportDocLineSourceChargesAmtMap(curExportDocumentLineSourceMap.SourceRecId);
                curExportDocLineSourceChargesMap.DescriptionCharges = exportDocumentSourceType.parmExportDocumentSourceMap().TaxIntgrExportDocumentSourceMap_CN::getExportDocLineSourceChargesDesc(curExportDocumentLineSourceMap.SourceRecId);
                curExportDocLineSourceChargesMap.LineNum = exportDocumentSourceType.parmExportDocumentSourceMap().TaxIntgrExportDocumentSourceMap_CN::getExportDocLineSourceChargesLineNum(curExportDocumentLineSourceMap.SourceRecId);
                exportDocumentLineSource = TaxIntgrExportDocumentLineSource_CN::construct(exportDocumentSourceType, curExportDocumentLineSourceMap, curExportDocLineSourceChargesMap);
                this.doCreateExportDocumentSourceLine(exportDocumentLineSource, exportDocumentLineInsertList);

                next curExportDocumentLineSourceMap;
            }
        }

        exportDocumentLineInsertList.insertDatabase();

        ttsCommit;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCreateExportDocumentSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates export document source header.
    /// </summary>
    /// <returns>
    /// The export document source record id.
    /// </returns>
    protected RefRecId doCreateExportDocumentSource()
    {
        TaxIntgrExportDocumentSource_CN          exportDocumentSource;

        exportDocumentSource.clear();
        exportDocumentSource.SourceRecId                    = exportDocumentSourceType.parmExportDocumentSourceMap().SourceRecId;
        exportDocumentSource.SourceRelationType             = exportDocumentSourceType.parmExportDocumentSourceMap().SourceRelationType;
        exportDocumentSource.InvoiceId                      = exportDocumentSourceType.parmInvoiceId();
        exportDocumentSource.TransactionCurrencyAmount      = exportDocumentSourceType.parmTransactionCurrencyInvoiceAmount();
        exportDocumentSource.InvoiceDate                    = exportDocumentSourceType.parmInvoiceDate();
        exportDocumentSource.InvoiceAccount                 = exportDocumentSourceType.parmInvoiceAccount();
        exportDocumentSource.TaxCode                        = exportDocumentSourceType.parmTaxCode();
        exportDocumentSource.CurrencyCode                   = exportDocumentSourceType.parmCurrencyCode();

        exportDocumentSource.CustBankAccountId              = exportDocumentSourceType.parmCustBankAccount();
        exportDocumentSource.VATInvoiceDescTable_CN         = exportDocumentSourceType.parmVatInvoiceDescriptionRecId();
        exportDocumentSource.TaxRegistration                = exportDocumentSourceType.getTaxRegistration().RecId;
        exportDocumentSource.ProjInvoiceProjId              = exportDocumentSourceType.parmProjInvoiceProjId();
        exportDocumentSource.SalesId                        = exportDocumentSourceType.parmSalesId();

        exportDocumentSource.DescriptionCharges = exportDocumentSourceType.parmDescriptionCharges();
        exportDocumentSource.MiscChargesTaxValue = exportDocumentSourceType.parmMiscChargesTaxValue();
        exportDocumentSource.MiscChargesExemptTax = exportDocumentSourceType.parmMiscChargesExemptTax();
        exportDocumentSource.MiscChargesNetAmount = exportDocumentSourceType.parmMiscChargesNetAmount();
        exportDocumentSource.MiscChargesTaxAmount = exportDocumentSourceType.parmMiscChargesTaxAmount();
        exportDocumentSource.MiscChargesLineNum = exportDocumentSourceType.parmMiscChargesLineNum();

        exportDocumentSource.insert();

        curExportDocumentSource = exportDocumentSource;

        return exportDocumentSource.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCreateExportDocumentSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates export document line initial.
    /// </summary>
    /// <param name="_exportDocumentLineSource">
    /// The export document line source.
    /// </param>
    /// <param name="_exportDocumentRecordInsertList">
    /// The export document line source insert list.
    /// </param>
    protected void doCreateExportDocumentSourceLine(
        TaxIntgrExportDocumentLineSource_CN _exportDocumentLineSource,
        RecordInsertList                    _exportDocumentRecordInsertList)
    {
        TaxIntgrExportDocumentSourceLine_CN  exportDocumentSourceLine;

        exportDocumentSourceLine.clear();
        exportDocumentSourceLine.Description   = _exportDocumentLineSource.parmDescription();
        exportDocumentSourceLine.SalesUnit     = _exportDocumentLineSource.parmUnit();
        exportDocumentSourceLine.Qty           = _exportDocumentLineSource.parmQuantity();
        exportDocumentSourceLine.Intracode     = _exportDocumentLineSource.parmIntraCode();
        exportDocumentSourceLine.ItemId        = _exportDocumentLineSource.parmItemId();
        exportDocumentSourceLine.TransactionCurrencyNetAmount = _exportDocumentLineSource.parmTransactionCurrencyNetAmount();
        exportDocumentSourceLine.TransactionCurrencyTaxAmount = _exportDocumentLineSource.parmTransactionCurrencyTaxAmount();
        exportDocumentSourceLine.TaxValue      = _exportDocumentLineSource.parmTaxValue();
        exportDocumentSourceLine.IsIncludeTax  = TaxProfileTable_CN::findByTaxCode(_exportDocumentLineSource.parmExportDocumentSource().parmTaxCode()).IncludeTax;
        exportDocumentSourceLine.ExemptTax     = _exportDocumentLineSource.parmExemptTaxe();

        exportDocumentSourceLine.DescriptionCharges = _exportDocumentLineSource.parmDescriptionCharges();
        exportDocumentSourceLine.TransactionCurrencyMiscChargesNetAmount = _exportDocumentLineSource.parmTransactionCurrencyChargesNetAmount();
        exportDocumentSourceLine.TransactionCurrencyMiscChargesTaxAmount = _exportDocumentLineSource.parmTransactionCurrencyChargesTaxAmount();
        exportDocumentSourceLine.MiscChargesLineNum = _exportDocumentLineSource.parmMiscChargesLineNum();

        exportDocumentSourceLine.TaxIntgrExportDocumentSource_CN = curExportDocumentSource.RecId;
        _exportDocumentRecordInsertList.add(exportDocumentSourceLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportDocumentSourceType</Name>
				<Source><![CDATA[
    public TaxIntgrExportDocumentSourceType_CN parmExportDocumentSourceType(TaxIntgrExportDocumentSourceType_CN _exportDocumentSourceType = exportDocumentSourceType)
    {
        exportDocumentSourceType = _exportDocumentSourceType;

        return exportDocumentSourceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>TaxIntgExportDocumentSourceCreator_CN</c>.
    /// </summary>
    /// <param name="_exportDocumentSourceType">
    /// The export document source.
    /// </param>
    /// <returns>
    /// An instance of <c>TaxIntgExportDocumentSourceCreator_CN</c>.
    /// </returns>
    public static TaxIntgrExportDocumentSourceCreator_CN construct(
        TaxIntgrExportDocumentSourceType_CN  _exportDocumentSourceType)
    {
        TaxIntgrExportDocumentSourceCreator_CN exportSourceCreator;

        exportSourceCreator = new TaxIntgrExportDocumentSourceCreator_CN();
        exportSourceCreator.parmExportDocumentSourceType(_exportDocumentSourceType);
        return exportSourceCreator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>