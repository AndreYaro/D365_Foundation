<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalHistoryController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerJournalHistoryController extends SrsReportRunController implements BatchRetryable
{
    private QueryBuildRange journalTableHistoryBatchNumberRange;
    private QueryBuildRange journalTableHistoryTypeRange;
    private QueryBuildRange journalTransHistoryBatchNumberRange;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before it runs the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        #ISOCountryRegionCodes
        LedgerJournalContract contract = this.parmReportContract().parmRdpContract() as LedgerJournalContract;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            contract.parmSysVersion(SysReportRun::sysVersion());
            contract.parmUserName(SysReportRun::userName());
            contract.parmDisplayDescription(true);
        }
        else
        {
            contract.parmDisplayDescription(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    protected container preRunValidate()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean isValid = super();

        LedgerJournalContract contract = this.parmReportContract().parmRdpContract() as LedgerJournalContract;

        if (contract.parmJournalContext() == false)
        {
            Query query = this.getFirstQuery();

            this.findOrCreateReportRanges(query);

            if (strLRTrim(journalTableHistoryBatchNumberRange.value()) == ''
                && strLRTrim(journalTransHistoryBatchNumberRange.value()) == '')
            {
                isValid = checkFailed(
                    strFmt("@GeneralLedger:JournalBatchNumberIsRequiredForReport",
                        "@ProductFramework_Dialog:QueryTabCaption",
                        "@ProductFramework_Dialog:Filter"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query range that is based on the caller.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    /// <param name="_query">
    /// The <c>Controller</c> object.
    /// </param>
    public void setRange(Args _args, Query _query)
    {
        LedgerJournalTableHistory externalLedgerJournalTableHistory;
        LedgerJournalTransHistory externalLedgerJournalTransHistory;

        if (_args && _args.dataset())
        {
            switch (_args.dataset())
            {
                case tableNum(LedgerJournalTransHistory):
                    externalLedgerJournalTransHistory = _args.record();
                    break;

                case tableNum(LedgerJournalTableHistory):
                    externalLedgerJournalTableHistory = _args.record();
                    break;
            }
        }

        LedgerJournalContract contract = this.parmReportContract().parmRdpContract() as LedgerJournalContract;

        contract.parmJournalContext(true);

        this.findOrCreateReportRanges(_query);

        if (externalLedgerJournalTransHistory)
        {
            externalLedgerJournalTableHistory = LedgerJournalTableHistory::find(externalLedgerJournalTransHistory.JournalNum);

            journalTransHistoryBatchNumberRange.value(externalLedgerJournalTransHistory.JournalNum);
            journalTransHistoryBatchNumberRange.status(RangeStatus::Locked);

            journalTableHistoryBatchNumberRange.value(externalLedgerJournalTableHistory.JournalNum);
            journalTableHistoryBatchNumberRange.status(RangeStatus::Locked);

            journalTableHistoryTypeRange.value(SysQuery::value(enum2int(externalLedgerJournalTableHistory.JournalType)));
            journalTableHistoryTypeRange.status(RangeStatus::Locked);
        }
        else if (externalLedgerJournalTableHistory)
        {
            journalTransHistoryBatchNumberRange.value(externalLedgerJournalTableHistory.JournalNum);
            journalTransHistoryBatchNumberRange.status(RangeStatus::Locked);

            journalTableHistoryBatchNumberRange.value(externalLedgerJournalTableHistory.JournalNum);
            journalTableHistoryBatchNumberRange.status(RangeStatus::Locked);

            journalTableHistoryTypeRange.value(SysQuery::value(enum2int(externalLedgerJournalTableHistory.JournalType)));
            journalTableHistoryTypeRange.status(RangeStatus::Locked);
        }
        else
        {
            // Clear the ranges if the report is invoked from the GL menu

            journalTransHistoryBatchNumberRange.value('');
            journalTransHistoryBatchNumberRange.status(RangeStatus::Open);

            journalTableHistoryBatchNumberRange.value('');
            journalTableHistoryBatchNumberRange.status(RangeStatus::Open);

            journalTableHistoryTypeRange.value('');
            journalTableHistoryTypeRange.status(RangeStatus::Open);

            contract.parmJournalContext(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateReportRanges</Name>
				<Source><![CDATA[
    private void findOrCreateReportRanges(Query _query)
    {
        QueryBuildDataSource ledgerJournalTableHistoryQBDS = _query.dataSourceTable(tableNum(LedgerJournalTableHistory));
        journalTableHistoryBatchNumberRange = SysQuery::findOrCreateRange(ledgerJournalTableHistoryQBDS, fieldNum(LedgerJournalTableHistory, JournalNum));
        journalTableHistoryTypeRange = SysQuery::findOrCreateRange(ledgerJournalTableHistoryQBDS, fieldNum(LedgerJournalTableHistory, JournalType));

        QueryBuildDataSource ledgerJournalTransHistoryQBDS = _query.dataSourceTable(tableNum(LedgerJournalTransHistory));
        journalTransHistoryBatchNumberRange = SysQuery::findOrCreateRange(ledgerJournalTransHistoryQBDS, fieldNum(LedgerJournalTransHistory, JournalNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerJournalHistoryController controller = new LedgerJournalHistoryController();
        controller.parmReportName(ssrsReportStr(LedgerJournalHistory, Report));
        controller.parmArgs(_args);
        controller.setRange(_args, controller.parmReportContract().parmQueryContracts().lookup(controller.getFirstQueryContractKey()));
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>