<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>B2B2BDataHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
internal final class B2B2BDataHelper
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getChannels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get channels by customer account.
    /// </summary>
    /// <param name="_custAccount>The customer account.</param>
    /// <returns>The list of RetailChannelTable buffers which the customer account can access.</returns>
    /// <remarks>
    /// The customer account must belong to a customer hierarchy. The channels are associated
    /// with the customer hierarchy. The method will try to find the channels through the customer
    /// hierarchy.
    ///
    /// If the customer hierarchy doesn't have associated channels, it is unrestricted.
    /// The method will return all the B2B online channels.
    /// </remarks>
    internal static List getChannels(CustAccount _custAccount)
    {
        RetailChannelTable retailChannelTable;
        RetailOnlineChannelTable retailOnlineChannelTable;
        CustHierarchy custHierarchy;
        CustTable custTable;
        CustHierarchyNode custHierarchyNode;
        CustHierarchyRetailChannel custHierarchyRetailChannel;
        List channels = new List(Types::Record);

        select RecId from custTable
                where custTable.AccountNum == _custAccount
            exists join custHierarchyNode
                where custHierarchyNode.Party == custTable.Party;

        // The customer is not assigned to any customer hierarchies.
        if (!custTable)
        {
            return channels;
        }

        while select retailChannelTable
            exists join custHierarchyRetailChannel
                where retailChannelTable.RetailChannelId == custHierarchyRetailChannel.Channel
            exists join custHierarchyNode
                where custHierarchyNode.CustHierarchyId == custHierarchyRetailChannel.CustHierarchyId
            exists join custTable
                where custTable.Party == custHierarchyNode.Party &&
                    custTable.AccountNum == _custAccount
        {
            channels.addEnd(retailChannelTable);
        }

        // The customer hierarchy is unrestricted to access all the online B2B channels.
        if (channels.elements() == 0)
        {
            while select retailOnlineChannelTable
                where retailOnlineChannelTable.CustomerType == OnlineStoreCustomerType::B2B
            {
                retailChannelTable = retailOnlineChannelTable as RetailChannelTable;
                channels.addEnd(retailChannelTable);
            }
        }

        return channels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultipleCatalogsAvailableInB2b2bOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if multiple catalogs are available for B2B2B orders.
    /// </summary>
    /// <returns>True if multiple catalogs are available for B2B2B orders. Otherwise, false.</returns>
    internal static boolean isMultipleCatalogsAvailableInB2b2bOrders()
    {
        return FeatureStateProvider::isFeatureEnabled(ChannelMultipleCatalogsFeature::instance()) && RetailEnableB2b2bAndEnhanceB2bOrdersFeature::isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCatalogByCustAccountAndRetailChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default B2B catalog for the channel and customer account.
    /// </summary>
    /// <param name="_retailChannel>The retail channel id.</param>
    /// <param name="_custAccount>The customer account.</param>
    /// <returns>The default catalog.</returns>
    /// <remarks>
    /// A customer hierarchy can be associated with several catalogs.
    /// A catalog can be associated with several channels.
    /// Among the combination of catalogs associated with given customer account and channel, the one with higheset priority is the default catalog.
    /// </remarks>
    internal static Catalog getDefaultCatalogByCustAccountAndRetailChannel(RefRecId _retailChannel, CustAccount _custAccount)
    {
        RetailCustTable retailCustTable = RetailCustTable::find(_custAccount);
        CustHierarchyId custHierarchyId = retailCustTable.displayB2BCustHierarchyId();

        CustHierarchyCatalog custHierarchyCatalog;
        Catalog catalog;
        RetailCatalogChannelInheritanceExploded catalogChannelInheritance;

        select firstonly custHierarchyCatalog
            order by Priority asc
            join RecId, CatalogId from catalog
            join catalogChannelInheritance
            where custHierarchyCatalog.CatalogRefRecId == catalog.RecId
                && catalog.CatalogTarget == RetailCatalogTarget::B2B
                && custHierarchyCatalog.CustHierarchyId == custHierarchyId
                && catalogChannelInheritance.Channel == _retailChannel
                && catalogChannelInheritance.Catalog == custHierarchyCatalog.CatalogRefRecId;

        return catalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatalogValidForCustAccountAndRetailChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the catalog is valid for the channel and customer account.
    /// </summary>
    /// <param name="_catalogRecId>The catalog record id.</param>
    /// <param name="_retailChannel>The retail channel id.</param>
    /// <param name="_custAccount>The customer account.</param>
    /// <returns>True if the catalog is valid. Otherwise, false.</returns>
    internal static boolean isCatalogValidForCustAccountAndRetailChannel(CatalogRefRecId _catalogRecId, RefRecId _retailChannel, CustAccount _custAccount)
    {
        Query query = B2B2BDataHelper::buildQueryForB2bCatalogLookup(_retailChannel, _custAccount);
        query.dataSourceTable(tableNum(Catalog)).addRange(fieldNum(Catalog, RecId)).value(any2Str(_catalogRecId));
        query.topRows(1);
        QueryRun qr = new QueryRun(query);
        if (!qr.next())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemIdValidForSelectedCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the item id is included in the catalog.
    /// </summary>
    /// <param name="_itemId>The item id.</param>
    /// <param name="_catalogRecId>The catalog record id.</param>
    /// <returns>True if the item id is included in the catalog. Otherwise, false.</returns>
    internal static boolean isItemIdValidForSelectedCatalog(ItemId _itemId, CatalogRefRecId _catalogRecId)
    {
        Query query = B2B2BDataHelper::buildQueryForItemIdLookupByCatalog(curext(), _catalogRecId);
        query.dataSourceTable(tableNum(InventItemIdLookupSimpleView)).addRange(fieldNum(InventItemIdLookupSimpleView, ItemId)).value(any2Str(_itemId));
        query.topRows(1);
        QueryRun qr = new QueryRun(query);
        if (!qr.next())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllInvalidCatalogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all invalid catalogs in the Sales order.
    /// </summary>
    /// <param name="_salesTable>The sales table.</param>
    /// <returns>A string containing all invalid catalog ids.</returns>
    /// <remarks>
    /// Multiple invalid catalog ids are separated by comma. And the result will be an empty string if all catalogs are valid.
    /// </remarks>
    internal static str getAllInvalidCatalogs(SalesTable _salesTable)
    {
        Query query = B2B2BDataHelper::buildQueryForInvalidB2bCatalogLookup(_salesTable.SalesId, _salesTable.RetailChannelTable, _salesTable.CustAccount);
        QueryRun qr = new QueryRun(query);
        Set invalidCatalogSet = new Set(Types::String);
        Common c;
        RetailSalesLine locRetailSalesLine;

        while (qr.next())
        {
            c = qr.get(tableNum(RetailSalesLine));
            locRetailSalesLine = c as RetailSalesLine;
            invalidCatalogSet.add(Catalog::find(locRetailSalesLine.Catalog).CatalogId);
        }

        str invalidCatalogListStr = strRem(invalidCatalogSet.toString(), "{}\"");
        return invalidCatalogListStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForB2bCatalogLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lookup of all B2b catalogs for the channel and customer account.
    /// </summary>
    /// <param name="_retailChannel>The retail channel id.</param>
    /// <param name="_custAccount>The customer account.</param>
    /// <returns>A query.</returns>
    internal static Query buildQueryForB2bCatalogLookup(RefRecId _retailChannel, CustAccount _custAccount)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(Catalog));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addSortField(fieldNum(Catalog, CatalogId));
        qbds.addRange(fieldNum(Catalog, CatalogTarget)).value(queryValue(RetailCatalogTarget::B2B));

        qbds = qbds.addDataSource(tableNum(RetailCatalogChannelInheritanceExploded));
        qbds.addLink(fieldNum(Catalog, RecId), fieldNum(RetailCatalogChannelInheritanceExploded, Catalog));
        qbds.addRange(fieldNum(RetailCatalogChannelInheritanceExploded, Channel)).value(any2Str(_retailChannel));

        qbds = qbds.addDataSource(tableNum(CustHierarchyCatalog));
        qbds.addLink(fieldNum(RetailCatalogChannelInheritanceExploded, Catalog), fieldNum(CustHierarchyCatalog, CatalogRefRecId));

        qbds = qbds.addDataSource(tableNum(CustHierarchyNode));
        qbds.addLink(fieldNum(CustHierarchyCatalog, CustHierarchyId), fieldNum(CustHierarchyNode, CustHierarchyId));

        qbds = qbds.addDataSource(tableNum(RetailCustTable));
        qbds.addLink(fieldNum(CustHierarchyNode, RecId), fieldNum(RetailCustTable, B2BCustomerHierarchyNode));
        qbds.addRange(fieldNum(RetailCustTable, AccountNum)).value(any2Str(_custAccount));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForInvalidB2bCatalogLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lookup of all invalid B2b catalogs in the sales order for its channel and customer account.
    /// </summary>
    /// <param name="_salesId>The sales order id.</param>
    /// <param name="_retailChannel>The retail channel id.</param>
    /// <param name="_custAccount>The customer account.</param>
    /// <returns>A query.</returns>
    internal static Query buildQueryForInvalidB2bCatalogLookup(SalesIdBase _salesId, RefRecId _retailChannel, CustAccount _custAccount)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesLine));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addRange(fieldNum(SalesLine, SalesId)).value(any2Str(_salesId));

        qbds = qbds.addDataSource(tableNum(RetailSalesLine));
        qbds.addLink(fieldNum(SalesLine, RecId), fieldNum(RetailSalesLine, SalesLine));

        qbds = qbds.addDataSource(tableNum(RetailCatalogChannelInheritanceExploded));
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.addLink(fieldNum(RetailSalesLine, Catalog), fieldNum(RetailCatalogChannelInheritanceExploded, Catalog));
        qbds.addRange(fieldNum(RetailCatalogChannelInheritanceExploded, Channel)).value(any2Str(_retailChannel));

        qbds = qbds.addDataSource(tableNum(CustHierarchyCatalog));
        qbds.addLink(fieldNum(RetailCatalogChannelInheritanceExploded, Catalog), fieldNum(CustHierarchyCatalog, CatalogRefRecId));

        qbds = qbds.addDataSource(tableNum(CustHierarchyNode));
        qbds.addLink(fieldNum(CustHierarchyCatalog, CustHierarchyId), fieldNum(CustHierarchyNode, CustHierarchyId));

        qbds = qbds.addDataSource(tableNum(RetailCustTable));
        qbds.addLink(fieldNum(CustHierarchyNode, RecId), fieldNum(RetailCustTable, B2BCustomerHierarchyNode));
        qbds.addRange(fieldNum(RetailCustTable, AccountNum)).value(any2Str(_custAccount));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForItemIdLookupByCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lookup of item ids in the catalog.
    /// </summary>
    /// <param name="_dataAreaId>The data area id.</param>
    /// <param name="_catalog>The catalog record id.</param>
    /// <returns>A query.</returns>
    internal static Query buildQueryForItemIdLookupByCatalog(str _dataAreaId, CatalogRefRecId _catalog)
    {
        Query query = new Query();
        QueryBuildDataSource qbds;

        qbds = query.addDataSource(tableNum(InventItemIdLookupSimpleView));
        qbds.relations(false);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addSortField(fieldNum(InventItemIdLookupSimpleView, ItemId));
        qbds.addGroupByField(fieldNum(InventItemIdLookupSimpleView, ItemId));
        qbds.addGroupByField(fieldNum(InventItemIdLookupSimpleView, NameAlias));
        qbds.addGroupByField(fieldNum(InventItemIdLookupSimpleView, ProductName));
        qbds.addGroupByField(fieldNum(InventItemIdLookupSimpleView, ItemGroupId));
        qbds.addGroupByField(fieldNum(InventItemIdLookupSimpleView, ItemType));

        qbds.addRange(fieldNum(InventItemIdLookupSimpleView, DataAreaId)).value(_dataAreaId);

        qbds = qbds.addDataSource(tableNum(RetailCatalogProductIncludeMasterView));
        qbds.relations(false);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addLink(fieldNum(RetailCatalogProductIncludeMasterView, Product), fieldNum(InventItemIdLookupSimpleView, Product));
        qbds.addRange(fieldNum(RetailCatalogProductIncludeMasterView, Catalog)).value(any2Str(_catalog));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRespectCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether catalog is respected in the retail channel.
    /// </summary>
    /// <param name="_retailChannel>The retail channel.</param>
    /// <returns>True if catalog is respected. Otherwise, false.</returns>
    internal static boolean shouldRespectCatalog(RetailChannelRecId _retailChannel)
    {
        if (B2B2BDataHelper::isMultipleCatalogsAvailableInB2b2bOrders())
        {
            RetailOnlineChannelTable onlineChannel = RetailOnlineChannelTable::find(_retailChannel);
            if (onlineChannel.CustomerType == OnlineStoreCustomerType::B2B)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EventWriteMultipleCatalogsEnabledInB2b2bOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log event when multiple catalogs are used in B2b2b orders.
    /// </summary>
    /// <param name="_catalog>The catalog.</param>
    internal static void EventWriteMultipleCatalogsEnabledInB2b2bOrders(CatalogRefRecId _catalog)
    {
        eventSource.EventWriteMultipleCatalogsEnabledInB2b2bOrders(_catalog);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>