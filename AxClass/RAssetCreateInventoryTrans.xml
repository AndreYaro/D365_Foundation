<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetCreateInventoryTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetCreateInventoryTrans extends RunBaseBatch implements BatchRetryable
{
    QueryRun             queryRun;
    RAssetInventoryTable assetInventoryTable;

    Counter              progressCounter;

    RAssetStandardId     assetStandardId;
    DialogField          dialogAssetStandard;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        assetStandardId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the ability of creation inventory transactions.
    /// </summary>
    /// <param name = "_assetTable">A <c>RAssetTable</c> record.</param>
    /// <param name = "_assetStandardId">An asset standard Id.</param>
    /// <returns>True if inventory transactions can be created; otherwise false.</returns>
    protected boolean checkCanCreate(RAssetTable          _assetTable,
                                   RAssetStandardId     _assetStandardId)
    {
        RAssetSumCalc       assetSumTrans  = RAssetSumCalc_Trans::newAssetPeriod(_assetTable.AccountNum,
                                                                                 _assetStandardId);
        RAssetLocationId    location = RAssetMoveHist::findLastOperation(_assetTable.AccountNum,
                                                                         RAssetMoveType::Transfer,
                                                                         NoYes::No,
                                                                         assetInventoryTable.StartDate).NewLocation;
        RAssetStandards     assetStandards = RAssetStandards::find(_assetTable.AccountNum, _assetStandardId);
        boolean             ret;

        ret = assetStandards.Depreciation              &&
              ! assetStandards.DisposalDate            &&
              location == assetInventoryTable.Location;

        if (ret && RAssetTrans::transLastDate(_assetTable.AccountNum, _assetStandardId) > assetInventoryTable.StartDate)
        {
            ret = checkFailed(strFmt("@FixedAssets:FA_MessageError_TransactionDateIsLessThanLastOperationDate", _assetTable.AccountNum, _assetStandardId));
        }

        if (assetSumTrans.netBookValue() - assetStandards.ScrapValue > 0)
        {
            ret = ret && assetStandards.checkDeprPeriod(assetInventoryTable.StartDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116525");
        dialogAssetStandard = dialog.addField(extendedTypeStr(RAssetStandardId), "@GLS116120");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    private void displayProgress(RAssetId   _assetId)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(strFmt("@GLS116533", _assetId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        assetStandardId = dialogAssetStandard.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RAssetInventoryTable _assetInventoryTable)
    {
        ;

        assetInventoryTable = _assetInventoryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    protected void modifyQuery()
    {
        QueryBuildDataSource    qbdsRAssetTable;
        ;

        qbdsRAssetTable = this.queryRun().query().dataSourceTable(tableNum(RAssetTable));
        findOrCreateRange_W(qbdsRAssetTable,
                            fieldNum(RAssetTable, AssetType),
                            con2Str(RAssetInventoryTable::countingType2AssetType(assetInventoryTable.CountingType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        ;

        super();

        queryRun            = new QueryRun(queryStr(RAssetTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardId</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetStandardId parmStandardId(RAssetStandardId _standardId = assetStandardId)
    {
        assetStandardId = _standardId;

        return assetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetTable     rAssetTable;
        RAssetStandards rAssetStandards;
        Counter         progressTotal;

        #macrolib.AviFiles
        ;

        this.modifyQuery();

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@GLS116525", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        ttsbegin;

        while (queryRun.next())
        {
            rAssetTable = queryRun.get(tableNum(RAssetTable));

            this.displayProgress(rAssetTable.AccountNum);

            while select AssetStandardId from rAssetStandards
                where rAssetStandards.AssetId         == rAssetTable.AccountNum &&
                     (! assetStandardId ||
                      rAssetStandards.AssetStandardId == assetStandardId)
            {
                if (this.checkCanCreate(rAssetTable, rAssetStandards.AssetStandardId))
                {
                    RAssetInventoryTrans::createLine(assetInventoryTable, rAssetTable, rAssetStandards.AssetStandardId);
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version     = conPeek(_packedClass, 1);
        PackedQueryRun  packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryTrans</Name>
				<Source><![CDATA[
    public static void createInventoryTrans(RAssetInventoryTable _assetInventoryTable)
    {
        RAssetCreateInventoryTrans  assetInventory = new RAssetCreateInventoryTrans();
        ;

        assetInventory.initValue(_assetInventoryTable);

        if (assetInventory.prompt())
        {
            assetInventory.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>