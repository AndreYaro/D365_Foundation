<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTReportTaxCollectionServiceVDEK_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class collecting tax amounts in the dimension of the tax reporting codes for JPK VDEK.
/// </summary>
public class SAFTReportTaxCollectionServiceVDEK_W
{
    internal const str NazwaKontrahenta = 'Sprzedaz paragonowa';

    private SAFTTaxTransByReportingCodeVDEK_PL reportData;
    private RecordInsertList reportDataInsList;

    private Query query; 

    private FromDate dateFrom;
    private ToDate dateTo;
    private boolean aggregateFiscalDocuments; // RO
    private boolean reportRetailPOSInvoices; // FP from Retail
    private boolean reportFiscalDocumentConvertedToInvoice; // FP from Fiscal documents
    private boolean reportFiscalDocumentWithThreshold; // FP with threshold
    private boolean reportInAccountingCurrency;
    private Query aggregateFiscalDocumentsQuery; // RO user query
    private SAFTReceiptThreshold_PL receiptThreshold;
    private SAFTReportVDEKSchemaVersion_PL reportSchemaVersion;

    private Set aggregatedDocuments;

    private CustInvoiceJour custInvoiceJour;
    private CustInvoiceJour_W custInvoiceJour_W;
    private CustInvoiceJour_PL custInvoiceJour_PL;
    private ProjInvoiceJour projInvoiceJour;
    private VendInvoiceJour vendInvoiceJour;
    private CzCustAdvanceInvoiceTable custAdvanceInvoiceTable;

    private boolean collectTaxAmountInTransCur;
    private boolean considerVATReportDateCodes;

    private Voucher prevTaxTransVoucher;
    private TransDate prevTaxTransDate;

    private const str SpecialChars = '\n\t\r';
    private boolean isMultipleTax = TaxIntegrationTaxServiceParameters::find().IsMultipleTaxIdVATDeclarationEnabled;
    private boolean isVATReportDateCodesFlightEnabled = VATReportDateCodesFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instanciates the tax report service.
    /// </summary>
    /// <param name = "_query">Query containing tax transactions data sources.</param>
    public void new(Query _query)
    {
        query = _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for SAFT tax reports.
    /// </summary>
    /// <returns>The set of tax transactions associated with sales tax reporting codes.</returns>
    public SAFTTaxTransByReportingCodeVDEK_PL getReportData()
    {
        return reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportInAccountingCurrency</Name>
				<Source><![CDATA[
    internal boolean parmReportInAccountingCurrency(boolean _reportInAccountingCurrency = reportInAccountingCurrency)
    {
        reportInAccountingCurrency = _reportInAccountingCurrency;
        return reportInAccountingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
    internal FromDate parmDateFrom(FromDate _value = dateFrom)
    {
        dateFrom = _value;
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
    internal ToDate parmDateTo(ToDate _value = dateTo)
    {
        dateTo = _value;
        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAggregateFiscalDocuments</Name>
				<Source><![CDATA[
    internal boolean parmAggregateFiscalDocuments(boolean _value = aggregateFiscalDocuments)
    {
        aggregateFiscalDocuments = _value;
        return aggregateFiscalDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportRetailPOSInvoices</Name>
				<Source><![CDATA[
    internal boolean parmReportRetailPOSInvoices(boolean _value = reportRetailPOSInvoices)
    {
        reportRetailPOSInvoices = _value;
        return reportRetailPOSInvoices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportFiscalDocumentConvertedToInvoice</Name>
				<Source><![CDATA[
    internal boolean parmReportFiscalDocumentConvertedToInvoice(boolean _value = reportFiscalDocumentConvertedToInvoice)
    {
        reportFiscalDocumentConvertedToInvoice = _value;
        return reportFiscalDocumentConvertedToInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportFiscalDocumentWithThreshold</Name>
				<Source><![CDATA[
    internal boolean parmReportFiscalDocumentWithThreshold(boolean _value = reportFiscalDocumentWithThreshold)
    {
        reportFiscalDocumentWithThreshold = _value;
        return reportFiscalDocumentWithThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsiderVATReportDateCodes</Name>
				<Source><![CDATA[
    internal boolean parmConsiderVATReportDateCodes(boolean _value = considerVATReportDateCodes)
    {
        considerVATReportDateCodes = _value;
        return considerVATReportDateCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptThreshold</Name>
				<Source><![CDATA[
    internal SAFTReceiptThreshold_PL parmReceiptThreshold(SAFTReceiptThreshold_PL _value = receiptThreshold)
    {
        receiptThreshold = _value;
        return receiptThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAggregateFiscalDocumentsQuery</Name>
				<Source><![CDATA[
    internal Query parmAggregateFiscalDocumentsQuery(Query _query = aggregateFiscalDocumentsQuery)
    {
        aggregateFiscalDocumentsQuery = _query ? new Query(_query) : _query;
        return aggregateFiscalDocumentsQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportSchemaVersion</Name>
				<Source><![CDATA[
    internal SAFTReportVDEKSchemaVersion_PL parmReportSchemaVersion(SAFTReportVDEKSchemaVersion_PL _reportSchemaVersion = reportSchemaVersion)
    {
        reportSchemaVersion = _reportSchemaVersion;
        return reportSchemaVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the report data collection service.
    /// </summary>
    public void run()
    {
        reportDataInsList = new RecordInsertList(tableNum(SAFTTaxTransByReportingCodeVDEK_PL), true, true, true, false, true, reportData);

        using (SAFTTaxTransByReportingCodeContext_PL reportContext = SAFTTaxTransByReportingCodeContext_PL::construct())
        {
            this.aggregateFiscalDocuments();
            this.reportFiscalDocumentConvertedToInvoice();
            this.reportRetailPOSInvoices();
            this.reportRetailPOSInvoicesWithThreshold();
            this.reportRegularTaxTrans();
        }
        reportDataInsList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportRegularTaxTrans</Name>
				<Source><![CDATA[
    private void reportRegularTaxTrans()
    {
        if (this.parmConsiderVATReportDateCodes())
        {
            Query taxDueTableQuery = new Query();
            boolean reportTransWithoutVATCode = this.initTaxDueTableQuery(taxDueTableQuery);
            if (reportTransWithoutVATCode)
            {
                QueryRun regularQueryRun = new QueryRun(
                    isVATReportDateCodesFlightEnabled
                        ? this.clearAndSetEmptyTaxPeriodPaymentCodeForTaxTrans_W(query)
                        : query);
                this.reportRegularTaxTransFromQueryRun(regularQueryRun);
            }

            PlTaxDueTable taxDueTable;
            QueryRun taxDueTableQueryRun = new QueryRun(taxDueTableQuery);
            while (taxDueTableQueryRun.next())
            {
                taxDueTable = taxDueTableQueryRun.get(tablenum(PlTaxDueTable));

                Query queryForSpecificVATCodeSetup = this.createModifiedCopyOfQueryByTaxDueTable(
                    isVATReportDateCodesFlightEnabled && taxDueTable.TaxDueDate == PlTaxDueDate::OnPayment
                        ? this.addAdditionalDataSources(query)
                        : query, 
                    taxDueTable);
                this.reportRegularTaxTransFromQueryRun(new QueryRun(queryForSpecificVATCodeSetup), taxDueTable);
            }
        }
        else
        {
            QueryRun regularQueryRun = new QueryRun(query);
            this.reportRegularTaxTransFromQueryRun(regularQueryRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataSources</Name>
				<Source><![CDATA[
    private Query addAdditionalDataSources(Query _query)
    {
        Query retQuery = new Query(_query);
        this.addDatasource(
                    retQuery,
                    tablenum(TaxTrans),
                    tableNum(CustTrans));
        this.addDatasource(
                    retQuery,
                    tablenum(TaxTrans),
                    tableNum(VendTrans));
        this.addDatasource(
                    retQuery,
                    tablenum(TaxTrans),
                    tableNum(LedgerJournalTrans));

        return retQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAndSetEmptyTaxPeriodPaymentCodeForTaxTrans_W</Name>
				<Source><![CDATA[
    private Query clearAndSetEmptyTaxPeriodPaymentCodeForTaxTrans_W(Query _query)
    {
        Query retQuery = new Query(_query);
        QueryBuildDataSource qbdsTaxTrans_W = retQuery.dataSourceTable(tablenum(TaxTrans_W));

        while (qbdsTaxTrans_W.findRange(fieldnum(TaxTrans_W, TaxPeriodPaymentCode_PL)))
        {
            qbdsTaxTrans_W.clearRange(fieldnum(TaxTrans_W, TaxPeriodPaymentCode_PL));
        }

        QueryBuildRange qbrTaxTrans_W = SysQuery::findOrCreateRange(qbdsTaxTrans_W, fieldNum(TaxTrans_W, TaxPeriodPaymentCode_PL));
        qbrTaxTrans_W.value(SysQuery::valueEmptyString());

        return retQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportRegularTaxTransFromQueryRun</Name>
				<Source><![CDATA[
    private void reportRegularTaxTransFromQueryRun(QueryRun _queryRun, PlTaxDueTable _taxDueTable = null)
    {
        RefRecId prevTaxTransRecId;
        while (_queryRun.next())
        {
            TaxTrans taxTrans = _queryRun.get(tableNum(TaxTrans));
            if (prevTaxTransRecId != taxTrans.RecId
                    && (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                        || taxTrans.TaxDirection == TaxDirection::IncomingTax_W
                        || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W
                        || taxTrans.TaxDirection == TaxDirection::UseTax
                        || taxTrans.TaxDirection == TaxDirection::TaxExemptSales
                        || taxTrans.TaxDirection == TaxDirection::IncomingTax))
            {
                prevTaxTransRecId = taxTrans.RecId;
                if (aggregateFiscalDocuments && !reportFiscalDocumentWithThreshold && aggregatedDocuments.in(taxTrans.RecId))
                {
                    continue;
                }

                this.initializeExtraTables(taxTrans.Source, taxTrans.Voucher, taxTrans.TransDate);

                TaxTrans_W taxTrans_W = _queryRun.get(tableNum(TaxTrans_W));
                SAFTFiscalDocumentType_PL docType;
                if (aggregateFiscalDocuments && reportFiscalDocumentWithThreshold)
                {
                    docType = this.getDocumentType(taxTrans_W.VATNum_PL, taxTrans.CurrencyCode);
                    if (docType != SAFTFiscalDocumentType_PL::FP && aggregatedDocuments.in(taxTrans.RecId))
                    {
                        continue;
                    }
                }

                if(isVATReportDateCodesFlightEnabled && _taxDueTable)
                {
                    this.applyTaxDueDateRules(
                        _queryRun,
                        _taxDueTable,
                        taxTrans,
                        taxTrans_W);
                }

                this.createTransDataFromTaxTrans(taxTrans, taxTrans_W, docType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTaxDueDateRules</Name>
				<Source><![CDATA[
    private void applyTaxDueDateRules(
        QueryRun _queryRun,
        PlTaxDueTable _taxDueTable,
        TaxTrans _taxTrans,
        TaxTrans_W _taxTrans_W)
    {
        TaxSettleTransSummary taxSettleSumary;
        TaxTrans taxTransSettle;
        CustTrans custTrans;
        VendTrans vendTrans;
        InvoiceId invoice;

        switch (_taxDueTable.TaxDueDate)
        {
            case PlTaxDueDate::VatDate :
                break;

            case PlTaxDueDate::OnPayment :
                 [invoice, custTrans, vendTrans] = this.getInvoice(
                    _queryRun,
                    _taxTrans,
                    _taxTrans_W);

                taxSettleSumary = new TaxSettleTransSummary(dateFrom, dateTo);

                taxSettleSumary.parmTaxDueTable(_taxDueTable);
                taxSettleSumary.parmUseInvoiceTrans(true);

                taxTransSettle.clear();

                if (custTrans)
                {
                    if (!_taxDueTable.Partial || _queryRun.get(tableNum(CustSettlement)))
                    {
                        taxTransSettle = taxSettleSumary.getTaxSettleTransLine(_taxTrans, custTrans, invoice);
                    }
                }
                else if (vendTrans)
                {
                    if (!_taxDueTable.Partial || _queryRun.get(tableNum(VendSettlement)))
                    {
                        taxTransSettle = taxSettleSumary.getTaxSettleTransLine(_taxTrans, vendTrans, invoice);
                    }
                }

                _taxTrans.TaxAmount = taxTransSettle.TaxAmount;
                _taxTrans.TaxBaseAmount = taxTransSettle.TaxBaseAmount;

                CurrencyCode companyCurrecyCode = Ledger::accountingCurrency(CompanyInfo::current());
                if (_taxTrans.CurrencyCode == companyCurrecyCode)
                {
                    _taxTrans.TaxAmountCur = _taxTrans.TaxAmount;
                    _taxTrans.TaxBaseAmountCur = _taxTrans.TaxBaseAmount;
                }
                else
                {
                    _taxTrans.TaxAmountCur = CurrencyExchangeHelper::curAmount(
                        _taxTrans.TaxAmount,
                        _taxTrans.CurrencyCode,
                        _taxTrans.TransDate);
                    _taxTrans.TaxBaseAmountCur = CurrencyExchangeHelper::curAmount(
                        _taxTrans.TaxBaseAmount,
                        _taxTrans.CurrencyCode,
                        _taxTrans.TransDate);
                }

                if (!SAFTReportTaxCollectionDeductibleAmountsFlight::instance().isEnabled())
                {
                    _taxTrans.TaxInCostPriceMST = 0;
                    _taxTrans.TaxInCostPriceCur = 0;
                }

                if (_taxDueTable.VatDateIsPaymentDate)
                {
                    _taxTrans_W.VatDueDate_W = taxTransSettle ? taxTransSettle.taxTrans_W().VatDueDate_W : dateNull();
                    _taxTrans.packTaxTrans_W(_taxTrans_W);
                }
                break;

            case PlTaxDueDate::OnPaymentNotLaterThan :
            case PlTaxDueDate::VatDateNotLaterThan :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoice</Name>
				<Source><![CDATA[
    private container getInvoice(
        QueryRun _queryRun,
        TaxTrans _taxTrans,
        TaxTrans_W _taxTrans_W)
    {
        InvoiceId invoice;
        CustTrans custTrans;
        VendTrans vendTrans;
        TaxTrans originalTaxTrans;

        if (_taxTrans.TaxDirection == TaxDirection::OutgoingTax || _taxTrans.TaxDirection == TaxDirection::TaxExemptSales)
        {
            if (_taxTrans_W.ReversedTaxTransRecId_W)
            {
                originalTaxTrans = TaxTrans::findRecId_IN(_taxTrans_W.ReversedTaxTransRecId_W);
                custTrans = CustTrans::findVoucherDate(originalTaxTrans.Voucher, originalTaxTrans.TransDate);
            }
            else
            {
                custTrans = _queryRun.get(tableNum(CustTrans));
            }

            invoice = custTrans.Invoice;
        }
        else if (_taxTrans.TaxDirection == TaxDirection::IncomingTax || _taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase)
        {
            if (_taxTrans_W.ReversedTaxTransRecId_W)
            {
                originalTaxTrans = TaxTrans::findRecId_IN(_taxTrans_W.ReversedTaxTransRecId_W);
                vendTrans = VendTrans::findVoucherDate(originalTaxTrans.Voucher, originalTaxTrans.TransDate);
            }
            else
            {
                vendTrans = _queryRun.get(tableNum(VendTrans));
            }

            invoice = vendTrans.Invoice;

            if (invoice == '')
            {
                VendTrans vendTransInvoice;
                LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

                select firstonly Invoice from vendTransInvoice
                            exists join ledgerJournalVoucherChanged
                                where ledgerJournalVoucherChanged.FromVoucher == vendTransInvoice.Voucher
                                    && ledgerJournalVoucherChanged.FromDate == vendTransInvoice.TransDate
                                    && ledgerJournalVoucherChanged.ToVoucher == _taxTrans.Voucher
                                    && ledgerJournalVoucherChanged.ToDate == _taxTrans.TransDate;

                invoice = vendTransInvoice.Invoice;
            }
        }
        else if (_taxTrans.TaxDirection == TaxDirection::UseTax)
        {
            vendTrans = _queryRun.get(tableNum(VendTrans));
            invoice = vendTrans.Invoice;

            if (!vendTrans && invoice == '')
            {
                custTrans = _queryRun.get(tableNum(CustTrans));
                invoice = custTrans.Invoice;
            }
        }

        if (invoice == '')
        {
            //In journals, if invoiceId field is blank, the DocumentNum should be displayed as invoice id.
            LedgerJournalTrans ledgerJournalTrans = _queryRun.get(tableNum(LedgerJournalTrans)) as LedgerJournalTrans;
            if (ledgerJournalTrans.Invoice == '' && ledgerJournalTrans.DocumentNum)
            {
                invoice = ledgerJournalTrans.DocumentNum;
            }
            else if (ledgerJournalTrans.Invoice)
            {
                invoice = ledgerJournalTrans.Invoice;
            }
            else if (_taxTrans.Source == TaxModuleType::Voucher)
            {
                invoice = this.getSettlementInvoiceId(
                            _taxTrans.SourceTableId,
                            _taxTrans.SourceRecId,
                            _taxTrans.Voucher);
            }
        }

        return [invoice, custTrans, vendTrans];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxDueTableQuery</Name>
				<Source><![CDATA[
    private boolean initTaxDueTableQuery(Query _query)
    {
        QueryBuildDataSource qbdsDueTable = _query.addDataSource(tableNum(PlTaxDueTable));
        QueryBuildDataSource qbdsTaxTrans_W = query.dataSourceTable(tableNum(TaxTrans_W));
        QueryBuildRange qbr;
        boolean ret;

        Counter i;
        if (qbdsTaxTrans_W.findRange(fieldNum(TaxTrans_W, TaxPeriodPaymentCode_PL)))
        {
            for (i = 1; i <= qbdsTaxTrans_W.rangeCount(); i++)
            {
                qbr = qbdsTaxTrans_W.range(i);

                if (fieldExt2Id(qbr.field()) == fieldNum(TaxTrans_W, TaxPeriodPaymentCode_PL))
                {
                    qbdsDueTable.addRange(fieldNum(PlTaxDueTable, TaxPeriodPaymentCode)).value(qbr.value());

                    if (!qbr.value() || qbr.value() == SysQuery::valueEmptyString())
                    {
                        ret = true;
                    }
                }
            }
        }
        else
        {
            ret = true;
        }

        // Copy the filters for TaxPeriodPaymentCode_PL from this.parmQuery() to TaxDueTableQuery.
        i=1;

        Counter queryFilterCount = query.queryFilterCount();

        QueryBuildDataSource queryFilterDataSource;
        QueryFilter queryFilter;
        QueryFilter dueTableQueryFilter;

        while (i <= queryFilterCount)
        {
            queryFilter = query.queryFilter(i);
            queryFilterDataSource = queryFilter.dataSource();

            if (queryFilter != null && queryFilter.value() != '' && queryFilterDataSource.table() == tableNum(TaxTrans_W))
            {
                if (fieldName2id(tableNum(TaxTrans_W), queryFilter.field()) == fieldnum(TaxTrans_W, TaxPeriodPaymentCode_PL))
                {
                    dueTableQueryFilter = _query.addQueryFilter(qbdsDueTable, fieldStr(PlTaxDueTable, TaxPeriodPaymentCode));
                    dueTableQueryFilter.value(queryFilter.value());
                }
            }

            i++;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createModifiedCopyOfQueryByTaxDueTable</Name>
				<Source><![CDATA[
    private Query createModifiedCopyOfQueryByTaxDueTable(Query _query, PlTaxDueTable _taxDueTable)
    {
        if (!_taxDueTable)
        {
            throw Error("@SYS104799");
        }

        Query ret = new Query(_query);
        QueryBuildDataSource qbdsTaxTrans = ret.dataSourceTable(tablenum(TaxTrans));
        QueryBuildDataSource qbdsTaxTrans_W = ret.dataSourceTable(tablenum(TaxTrans_W));
        
        this.clearRanges(qbdsTaxTrans, fieldnum(TaxTrans, TransDate));
        this.clearRanges(qbdsTaxTrans_W, fieldnum(TaxTrans_W, VatDueDate_W));
        
        this.clearRanges(qbdsTaxTrans_W, fieldnum(TaxTrans_W, TaxPeriodPaymentCode_PL));
        SysQuery::findOrCreateRange(qbdsTaxTrans_W, fieldNum(TaxTrans_W, TaxPeriodPaymentCode_PL))
            .value(SysQuery::value(_taxDueTable.TaxPeriodPaymentCode));

        this.applyRangesToTaxTransDataSourcesByTaxDueTable(_taxDueTable, ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRanges</Name>
				<Source><![CDATA[
    private void clearRanges(QueryBuildDataSource _qbds, FieldId _fieldId)
    {
        while (_qbds.findRange(_fieldId))
        {
            _qbds.clearRange(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRangesToTaxTransDataSourcesByTaxDueTable</Name>
				<Source><![CDATA[
    private void applyRangesToTaxTransDataSourcesByTaxDueTable(
        PlTaxDueTable _taxDueTable,
        Query _query
    )
    {
        QueryBuildDataSource qbdsTaxTrans = _query.dataSourceTable(tablenum(TaxTrans));
        QueryBuildDataSource qbdsTaxTrans_W = _query.dataSourceTable(tablenum(TaxTrans_W));
        QueryBuildRange qbrTaxTrans_W;

        switch (_taxDueTable.TaxDueDate)
        {
            case PlTaxDueDate::VatDate:
                qbrTaxTrans_W = SysQuery::findOrCreateRange(qbdsTaxTrans_W, fieldNum(TaxTrans_W, VatDueDate_W));
                qbrTaxTrans_W.value(SysQuery::range(dateFrom, dateTo));
                break;

            case PlTaxDueDate::OnPayment:
                    if (_taxDueTable.Partial)
                {
                    this.addSettlementDatasource(
                            dateFrom,
                            dateTo,
                            _query,
                            tablenum(CustTrans),
                            tableNum(CustSettlement),
                            fieldNum(CustSettlement, TransDate),
                            fieldNum(CustSettlement, CanBeReversed),
                            fieldNum(CustSettlement, ReversedRecId_RU));
                    this.addSettlementDatasource(
                            dateFrom,
                            dateTo,
                            _query,
                            tablenum(VendTrans),
                            tableNum(VendSettlement),
                            fieldNum(VendSettlement, TransDate),
                            fieldNum(VendSettlement, CanBeReversed),
                            fieldNum(VendSettlement, ReversedRecId_RU));
                }
                break;

            case PlTaxDueDate::VatDateNotLaterThan, PlTaxDueDate::OnPaymentNotLaterThan :

                switch (_taxDueTable.TaxDueCalcFrom)
                {
                    case PlTaxDueCalcFrom::TransDate :
                        QueryBuildRange qbrTaxTrans = SysQuery::findOrCreateRange(qbdsTaxTrans, fieldNum(TaxTrans, TransDate));
                        qbrTaxTrans.value(SysQuery::range(dateFrom - _taxDueTable.TaxPaymentDaysQty, dateTo));
                        break;

                    case PlTaxDueCalcFrom::VatDate :
                        qbrTaxTrans_W = SysQuery::findOrCreateRange(qbdsTaxTrans_W, fieldNum(TaxTrans_W, VatDueDate_W));
                        qbrTaxTrans_W.value(SysQuery::range(dateFrom - _taxDueTable.TaxPaymentDaysQty, maxdate()));
                        break;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSettlementDatasource</Name>
				<Source><![CDATA[
    private void addSettlementDatasource(
        TransDate _fromDate,
        TransDate _toDate,
        Query _query,
        TableId _transTableId,
        TableId _settlementTableId,
        FieldId _transDateFieldId,
        FieldId _canBeReversedFieldId,
        FieldId _reversedRecIdFieldId)
    {
        QueryBuildDataSource qbdsIncoming = _query.dataSourceTable(_transTableId);

        if (qbdsIncoming)
        {
            QueryBuildDataSource qbdsSettlement = qbdsIncoming.addDataSource(_settlementTableId);
            qbdsSettlement.relations(true);
            qbdsSettlement.joinMode(JoinMode::OuterJoin);
            qbdsSettlement.fetchMode(QueryFetchMode::One2One);
            findOrCreateRange_W(qbdsSettlement, _transDateFieldId, queryRange(_fromDate, _toDate));
            findOrCreateRange_W(
                qbdsSettlement,
                _canBeReversedFieldId,
                '((' + fieldId2name(_settlementTableId, _canBeReversedFieldId) + ')||(' + fieldId2name(_settlementTableId, _reversedRecIdFieldId) + '))');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDatasource</Name>
				<Source><![CDATA[
    private void addDatasource(
        Query _query,
        TableId _sourceTableId,
        TableId _joinedTableId)
    {
        QueryBuildDataSource qbds = _query.dataSourceTable(_sourceTableId).addDataSource(_joinedTableId);
        qbds.relations(true);
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromNonSADVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes fields values from not-intermediary vendTrans.
    /// </summary>
    /// <param name="_reportData">A <c>SAFTTaxTransByReportingCodeVDEK_PL</c> temporary table to store the result.</param>
    /// <returns>A <c>SAFTTaxTransByReportingCodeVDEK_PL</c> temporary table to store the result.</returns>
    public SAFTTaxTransByReportingCodeVDEK_PL initFromNonSADVendTrans(SAFTTaxTransByReportingCodeVDEK_PL _reportData)
    {
        if (!custInvoiceJour.RecId && !custAdvanceInvoiceTable.RecId)
        {
            SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
            if (reportDataContext)
            {
                VendAccount vendAccount = reportDataContext.getNonSADVendAccount();
                if (vendAccount)
                {
                    VendTable vendTable = VendTable::find(vendAccount);
                    _reportData.Addressing_PL = vendTable.postalAddress().Address;
                    _reportData.CustVendName_PL = vendTable.name();
                    _reportData.VATNum_PL = vendTable.VATNum;
                    _reportData.CustVendAccount_PL = vendAccount;
                    _reportData.CustVendGroup_PL = vendTable.VendGroup;
                }
            }
        }
        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportRetailPOSInvoicesWithThreshold</Name>
				<Source><![CDATA[
    private void reportRetailPOSInvoicesWithThreshold()
    {
        if (reportFiscalDocumentWithThreshold)
        {
            RetailTransactionTaxTrans retailTaxTrans;
            RetailTransactionSalesTrans retailSalesTrans;
            RetailTransactionTable retailTable;
            RetailTransactionSupplementaryInvoice retailInvoice;
            RetailTransactionFiscalCustomer fiscalCustomer;
            TaxTable taxTable;
            SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

            while select TaxCode, TaxPercentage, Amount, TaxBaseAmount, IsExempt from retailTaxTrans
            join TaxGroup, TaxItemGroup, Currency, TransDate from retailSalesTrans
                where retailSalesTrans.Channel == retailTaxTrans.Channel
                    && retailSalesTrans.Store == retailTaxTrans.StoreId
                    && retailSalesTrans.TerminalId == retailTaxTrans.TerminalId
                    && retailSalesTrans.TransactionId == retailTaxTrans.TransactionId
                    && retailSalesTrans.lineNum == retailTaxTrans.SaleLineNum
                    && retailSalesTrans.TransDate >= dateFrom
                    && retailSalesTrans.TransDate <= dateTo
                    && retailSalesTrans.transactionStatus == RetailEntryStatus::Posted
            join SerializedData from fiscalCustomer
                where fiscalCustomer.Channel == retailSalesTrans.Channel
                    && fiscalCustomer.Store == retailSalesTrans.Store
                    && fiscalCustomer.Terminal == retailSalesTrans.TerminalId
                    && fiscalCustomer.TransactionId == retailSalesTrans.TransactionId
            join GrossAmount, CustAccount, BusinessDate, InvoiceId from retailTable
                where retailTable.Channel == fiscalCustomer.Channel
                    && retailTable.Store == fiscalCustomer.Store
                    && retailTable.Terminal == fiscalCustomer.Terminal
                    && retailTable.TransactionId == fiscalCustomer.TransactionId
                    && retailTable.Type == RetailTransactionType::Sales
                    && retailTable.EntryStatus == RetailEntryStatus::Posted
                    && retailTable.StatementId
            exists join taxTable
                where taxTable.TaxCode == retailTaxTrans.TaxCode
                    && (taxTable.TaxType_W == TaxType_W::VAT || taxTable.TaxType_W == TaxType_W::VATReduced)
            notexists join RecId from retailInvoice
                where retailInvoice.Channel == retailTable.Channel
                    && retailInvoice.Store == retailTable.Store
                    && retailInvoice.Terminal == retailTable.Terminal
                    && retailInvoice.TransactionId == retailTable.TransactionId
            {
                if (abs(retailTable.GrossAmount) >= receiptThreshold)
                {
                    VATNum vatNum = reportDataContext.deserializeVATNum(fiscalCustomer.SerializedData);
                    if (vatNum)
                    {
                        this.insertRetailThresholdInvoicesSplittingByTaxReportId(this.getTransFromRetail(retailTaxTrans, retailSalesTrans), retailTable, vatNum);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailThresholdInvoicesSplittingByTaxReportId</Name>
				<Source><![CDATA[
    private void insertRetailThresholdInvoicesSplittingByTaxReportId(TaxTrans _taxTrans, RetailTransactionTable _retailTable, VATNum _vatNum)
    {
        TmpTaxReportById tmpTaxReportById;
        boolean isCreditNote = this.isCreditNote(_taxTrans);
        tmpTaxReportById = _taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, isCreditNote);

        boolean isFirstRecord = true;
        while select Amount, TaxReportField, TaxInCostPrice from tmpTaxReportById
        {
            if (isFirstRecord)
            {
                reportData.clear();
                reportData = this.initHeaderForRetailThresholdInvoice(reportData, _retailTable, _taxTrans.TransDate);
                reportData.TaxCode = _taxTrans.TaxCode;
                reportData.TaxDirection = _taxTrans.TaxDirection;
                reportData.TaxGroup = _taxTrans.TaxGroup;
                reportData.TaxItemGroup = _taxTrans.TaxItemGroup;
                reportData.TaxTransDate = _taxTrans.TransDate;
                reportData.ReverseCharge = _taxTrans.ReverseCharge_W;
                reportData.IsCreditNote = isCreditNote;
                reportData.TaxTransAmount = _taxTrans.TaxAmount;
                reportData.TaxTransTaxBaseAmount = _taxTrans.TaxBaseAmount;
                reportData.FiscalDocumentType = SAFTFiscalDocumentType_PL::FP;
                reportData.FiscalDocumentTypeInt = reportData.FiscalDocumentType;
                reportData.VATNum_PL = _vatNum;
                isFirstRecord = false;
            }
            reportData.initFromTmpTaxTransReportId(tmpTaxReportById);
            reportDataInsList.add(reportData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderForRetailThresholdInvoice</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCodeVDEK_PL initHeaderForRetailThresholdInvoice(SAFTTaxTransByReportingCodeVDEK_PL _reportData, RetailTransactionTable _retailTable, TransDate _salesDate)
    {
        if (_retailTable.CustAccount)
        {
            CustTable custTable = CustTable::find(_retailTable.CustAccount);
            if (custTable.RecId)
            {
                _reportData.CustVendName_PL = custTable.name(); // NazwaKontrahenta
            }
        }
        _reportData.DocumentNum = _retailTable.InvoiceId; // DowodSprzedazy
        _reportData.DocumentDate = _retailTable.BusinessDate; // DataWystawienia
        _reportData.SalesDate = _salesDate; // DataSprzedazy
        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportRetailPOSInvoices</Name>
				<Source><![CDATA[
    private void reportRetailPOSInvoices()
    {
        if (reportRetailPOSInvoices)
        {
            RetailTransactionTaxTrans retailTaxTrans;
            RetailTransactionSalesTrans retailSalesTrans;
            RetailTransactionTable retailTable;
            RetailTransactionSupplementaryInvoice retailInvoice;
            TaxTable taxTable;
            boolean isRetailFiscalCustomerExists = (select firstonly RecId from RetailTransactionFiscalCustomer).RecId != 0;

            while select TaxCode, TaxPercentage, Amount, TaxBaseAmount, IsExempt from retailTaxTrans
            join InvoiceId, InvoiceDate, AccountNum, CustInvoiceJour, Channel, Store, Terminal, TransactionId, CustomerName from retailInvoice
                where retailInvoice.Channel == retailTaxTrans.Channel
                    && retailInvoice.Store == retailTaxTrans.StoreId
                    && retailInvoice.Terminal == retailTaxTrans.TerminalId
                    && retailInvoice.TransactionId == retailTaxTrans.TransactionId
                    && retailInvoice.InvoiceDate >= dateFrom
                    && retailInvoice.InvoiceDate <= dateTo
            join TaxGroup, TaxItemGroup, TransDate, Currency from retailSalesTrans
                where retailSalesTrans.Channel == retailTaxTrans.Channel
                    && retailSalesTrans.Store == retailTaxTrans.StoreId
                    && retailSalesTrans.TerminalId == retailTaxTrans.TerminalId
                    && retailSalesTrans.TransactionId == retailTaxTrans.TransactionId
                    && retailSalesTrans.lineNum == retailTaxTrans.SaleLineNum
                    && retailSalesTrans.transactionStatus == RetailEntryStatus::Posted
            exists join RecId from retailTable
                where retailTable.Channel == retailSalesTrans.Channel
                    && retailTable.Store == retailSalesTrans.Store
                    && retailTable.Terminal == retailSalesTrans.TerminalId
                    && retailTable.TransactionId == retailSalesTrans.TransactionId
                    && retailTable.Type == RetailTransactionType::Sales
                    && retailTable.EntryStatus == RetailEntryStatus::Posted
                    && retailTable.StatementId
            exists join taxTable
                where taxTable.TaxCode == retailTaxTrans.TaxCode
                    && (taxTable.TaxType_W == TaxType_W::VAT || taxTable.TaxType_W == TaxType_W::VATReduced)
            {
                TaxTrans taxTrans = this.getTransFromRetail(retailTaxTrans, retailSalesTrans);
                this.insertRetailInvoicesSplittingByTaxReportId(taxTrans, retailInvoice, isRetailFiscalCustomerExists);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransFromRetail</Name>
				<Source><![CDATA[
    private TaxTrans getTransFromRetail(RetailTransactionTaxTrans _retailTaxTrans, RetailTransactionSalesTrans _retailSalesTrans)
    {
        TaxTrans taxTrans;
        taxTrans.TaxCode = _retailTaxTrans.TaxCode;
        taxTrans.TaxDirection = _retailTaxTrans.IsExempt ? TaxDirection::TaxExemptSales : TaxDirection::OutgoingTax;
        taxTrans.TaxValue = _retailTaxTrans.TaxPercentage;
        
        taxTrans.TaxAmount = -_retailTaxTrans.Amount;
        taxTrans.TaxBaseAmount = abs(_retailTaxTrans.TaxBaseAmount) * sign(taxTrans.TaxAmount);

        taxTrans.TaxGroup = _retailSalesTrans.TaxGroup;
        taxTrans.TaxItemGroup = _retailSalesTrans.TaxItemGroup;
        taxTrans.CurrencyCode = _retailSalesTrans.Currency;
        taxTrans.TransDate = _retailSalesTrans.TransDate;
        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRetailInvoicesSplittingByTaxReportId</Name>
				<Source><![CDATA[
    private void insertRetailInvoicesSplittingByTaxReportId(TaxTrans _taxTrans, RetailTransactionSupplementaryInvoice _retailInvoice, boolean _isRetailFiscalCustomerExists)
    {
        TmpTaxReportById tmpTaxReportById;
        boolean isCreditNote = this.isCreditNote(_taxTrans);
        tmpTaxReportById = _taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, isCreditNote);

        boolean isFirstRecord = true;
        while select Amount, TaxReportField, TaxInCostPrice from tmpTaxReportById
        {
            if (isFirstRecord)
            {
                reportData.clear();
                reportData = this.initHeaderForRetailInvoice(reportData, _retailInvoice, _taxTrans.TransDate);
                reportData.TaxCode = _taxTrans.TaxCode;
                reportData.TaxDirection = _taxTrans.TaxDirection;
                reportData.TaxGroup = _taxTrans.TaxGroup;
                reportData.TaxItemGroup = _taxTrans.TaxItemGroup;
                reportData.TaxTransDate = _taxTrans.TransDate;
                reportData.ReverseCharge = _taxTrans.ReverseCharge_W;
                reportData.IsCreditNote = isCreditNote;
                reportData.FiscalDocumentType = SAFTFiscalDocumentType_PL::FP;
                reportData.FiscalDocumentTypeInt = reportData.FiscalDocumentType;
                reportData.TaxTransAmount = _taxTrans.TaxAmount;
                reportData.TaxTransTaxBaseAmount = _taxTrans.TaxBaseAmount;

                if (_isRetailFiscalCustomerExists)
                {
                    reportData.VATNum_PL = this.getRetailVATNum(_retailInvoice.TransactionId, _retailInvoice.Store, _retailInvoice.Terminal, _retailInvoice.Channel);
                }
                isFirstRecord = false;
            }
            reportData.initFromTmpTaxTransReportId(tmpTaxReportById);
            reportDataInsList.add(reportData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderForRetailInvoice</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCodeVDEK_PL initHeaderForRetailInvoice(SAFTTaxTransByReportingCodeVDEK_PL _reportData, RetailTransactionSupplementaryInvoice _retailInvoice, TransDate _salesDate)
    {
        if (_retailInvoice.CustomerName)
        {
            _reportData.CustVendName_PL = _retailInvoice.CustomerName;
        }
        else if (_retailInvoice.AccountNum)
        {
            CustTable custTable = CustTable::find(_retailInvoice.AccountNum);
            if (custTable.RecId)
            {
                _reportData.CustVendName_PL = custTable.name(); // NazwaKontrahenta
            }
        }
        _reportData.DocumentNum = _retailInvoice.InvoiceId; // DowodSprzedazy
        _reportData.DocumentDate = _retailInvoice.InvoiceDate; // DataWystawienia
        _reportData.SalesDate = _salesDate; // DataSprzedazy
        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFiscalDocumentConvertedToInvoice</Name>
				<Source><![CDATA[
    private void reportFiscalDocumentConvertedToInvoice()
    {
        if (reportFiscalDocumentConvertedToInvoice)
        {
            QueryBuildDataSource qbds = aggregateFiscalDocumentsQuery.dataSourceTable(tableNum(TaxTrans_W));
            Range reportPeriodRange = qbds.findRange(fieldNum(TaxTrans_W, VatDueDate_W)).value();
            qbds.clearRange(fieldNum(TaxTrans_W, VatDueDate_W));

            qbds = aggregateFiscalDocumentsQuery.dataSourceTable(tableNum(CustInvoiceJour));
            qbds.joinMode(JoinMode::InnerJoin);
            qbds.addSelectionField(fieldNum(CustInvoiceJour, DocumentNum));
            qbds.addSelectionField(fieldNum(CustInvoiceJour, InvoiceId));

            qbds = aggregateFiscalDocumentsQuery.dataSourceTable(tableNum(CustInvoiceJour_PL));
            qbds.joinMode(JoinMode::InnerJoin);
            qbds.addSelectionField(fieldNum(CustInvoiceJour_PL, FiscalInvoiceAccount_PL));
            qbds.addSelectionField(fieldNum(CustInvoiceJour_PL, FiscalDocDate_PL));
            do
            {
                qbds.clearRange(fieldNum(CustInvoiceJour_PL, FiscalDocState_PL));
            }
            while (qbds.findRange(fieldNum(CustInvoiceJour_PL, FiscalDocState_PL)) != null);
            findOrCreateRange_W(qbds, fieldNum(CustInvoiceJour_PL, FiscalDocState_PL), queryValue(PlFiscalDocState::Changed2Invoice));
            findOrCreateRange_W(qbds, fieldNum(CustInvoiceJour_PL, FiscalDocDate_PL), reportPeriodRange);

            RefRecId prevTaxTransRecId;
            QueryRun queryRun = new QueryRun(aggregateFiscalDocumentsQuery);
            while (queryRun.next())
            {
                TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans));

                if (prevTaxTransRecId != taxTrans.RecId
                    && (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                    || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W
                    || taxTrans.TaxDirection == TaxDirection::UseTax
                    || taxTrans.TaxDirection == TaxDirection::TaxExemptSales))
                {
                    if (taxTrans.Voucher != prevTaxTransVoucher
                        || taxTrans.TransDate != prevTaxTransDate)
                    {
                        prevTaxTransDate = taxTrans.TransDate;
                        prevTaxTransVoucher = taxTrans.Voucher;
                        custInvoiceJour = queryRun.get(tableNum(CustInvoiceJour));
                        custInvoiceJour_W = custInvoiceJour.custInvoiceJour_W();
                        custInvoiceJour_PL = queryRun.get(tableNum(CustInvoiceJour_PL));
                    }

                    prevTaxTransRecId = taxTrans.RecId;
                    this.createTransDataFromTaxTrans(taxTrans, queryRun.get(tableNum(TaxTrans_W)), SAFTFiscalDocumentType_PL::FP);
                }
            }
            custInvoiceJour_PL.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    private SAFTFiscalDocumentType_PL getDocumentType(VATNum _vATNum, CurrencyCode _taxCurrencyCode)
    {
        SAFTFiscalDocumentType_PL ret;
        if (reportFiscalDocumentWithThreshold)
        {
            if (custInvoiceJour.RecId
                && _vATNum
                && this.getInvoiceAmount(_taxCurrencyCode) >= receiptThreshold
                && CustInvoiceJour_PL::findByCustInvoiceJour(custInvoiceJour.RecId).FiscalDocState_PL == PlFiscalDocState::FiscalDocument)
            {
                ret = SAFTFiscalDocumentType_PL::FP;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmount</Name>
				<Source><![CDATA[
    private Amount getInvoiceAmount(CurrencyCode _taxCurrencyCode)
    {
        Amount ret;

        if (custInvoiceJour.CurrencyCode == _taxCurrencyCode)
        {
            ret = abs(custInvoiceJour.InvoiceAmount);
        }
        else if (Ledger::accountingCurrency() == _taxCurrencyCode)
        {
            ret = abs(custInvoiceJour.InvoiceAmountMST);
        }
        else
        {
            TaxTrans taxTransLocal;
            select sum(TaxBaseAmountCur), sum(TaxAmountCur) from taxTransLocal
                where taxTransLocal.Voucher == custInvoiceJour.LedgerVoucher
                    && taxTransLocal.TransDate == custInvoiceJour.InvoiceDate;

            ret = abs(taxTransLocal.TaxBaseAmountCur) + abs(taxTransLocal.TaxAmountCur);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateFiscalDocuments</Name>
				<Source><![CDATA[
    private void aggregateFiscalDocuments()
    {
        if (!aggregateFiscalDocuments)
        {
            return;
        }

        RecordSortedList rslForAggregation = this.createRecordSortedListForAggregation();
        aggregatedDocuments = new Set(Types::Int64);

        if (this.parmConsiderVATReportDateCodes())
        {
            Query taxDueTableQuery = new Query();
            boolean reportTransWithoutVATCode = this.initTaxDueTableQuery(taxDueTableQuery);
            if (reportTransWithoutVATCode)
            {
                this.aggregateFiscalDocumentsFromQuery(
                    isVATReportDateCodesFlightEnabled
                        ? this.clearAndSetEmptyTaxPeriodPaymentCodeForTaxTrans_W(aggregateFiscalDocumentsQuery)
                        : aggregateFiscalDocumentsQuery,
                    rslForAggregation);
            }

            QueryRun taxDueTableQueryRun = new QueryRun(taxDueTableQuery);
            PlTaxDueTable taxDueTable;
            while(taxDueTableQueryRun.next())
            {
                taxDueTable = taxDueTableQueryRun.get(tablenum(PlTaxDueTable));
                Query queryForSpecificVATCodeSetup = this.createModifiedCopyOfQueryByTaxDueTable(
                    aggregateFiscalDocumentsQuery,
                    taxDueTable);

                this.aggregateFiscalDocumentsFromQuery(queryForSpecificVATCodeSetup, rslForAggregation);
            }
        }
        else
        {
            this.aggregateFiscalDocumentsFromQuery(aggregateFiscalDocumentsQuery, rslForAggregation);
        }
        
        this.insertIntoTmpTableSplittingByTaxReportId(rslForAggregation);

    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordSortedListForAggregation</Name>
				<Source><![CDATA[
    private RecordSortedList createRecordSortedListForAggregation()
    {
        SAFTTaxTransByReportingCodeVDEK_PL aggregatedReportData;
        RecordSortedList rsl = new RecordSortedList(tableNum(SAFTTaxTransByReportingCodeVDEK_PL), aggregatedReportData);
        rsl.sortOrder(fieldnum(SAFTTaxTransByReportingCodeVDEK_PL, TaxCode),
                fieldnum(SAFTTaxTransByReportingCodeVDEK_PL, TaxDirection),
                fieldnum(SAFTTaxTransByReportingCodeVDEK_PL, TaxGroup),
                fieldnum(SAFTTaxTransByReportingCodeVDEK_PL, TaxItemGroup),
                fieldnum(SAFTTaxTransByReportingCodeVDEK_PL, ReverseCharge),
                fieldnum(SAFTTaxTransByReportingCodeVDEK_PL, IsCreditNote),
                fieldnum(SAFTTaxTransByReportingCodeVDEK_PL, OverduePaidCurMonth)); // grouped by a sign of TaxTrans.TaxValue; if Yes - positive; otherwise, negative.
        return rsl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateFiscalDocumentsFromQuery</Name>
				<Source><![CDATA[
    private void aggregateFiscalDocumentsFromQuery(Query _query, RecordSortedList _rsl)
    {
        SAFTTaxTransByReportingCodeVDEK_PL aggregatedReportData;
        QueryRun queryRun = new QueryRun(_query);

        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

        while (queryRun.next())
        {
            TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans));
            reportDataContext.initFromTaxTrans(taxTrans);

            if (taxTrans.TaxDirection == TaxDirection::OutgoingTax
                    || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W
                    || taxTrans.TaxDirection == TaxDirection::UseTax
                    || taxTrans.TaxDirection == TaxDirection::TaxExemptSales)
            {
                aggregatedDocuments.add(taxTrans.RecId);

                aggregatedReportData.clear();
                aggregatedReportData.TaxCode = taxTrans.TaxCode;
                aggregatedReportData.TaxDirection = taxTrans.TaxDirection;
                aggregatedReportData.TaxGroup = taxTrans.TaxGroup;
                aggregatedReportData.TaxItemGroup = taxTrans.TaxItemGroup;
                aggregatedReportData.ReverseCharge = taxTrans.ReverseCharge_W;
                aggregatedReportData.IsCreditNote = this.isCreditNote(taxTrans);
                aggregatedReportData.OverduePaidCurMonth = taxTrans.TaxValue < 0 ? NoYes::No : NoYes::Yes; // sign of TaxTrans.TaxValue, needs for _taxTrans.taxAmountByTaxDirectionAndReportId()

                if (isMultipleTax && taxTrans.PartyTaxID)
                {
                    this.updateFieldsMultipleTax(reportDataContext, aggregatedReportData);
                }

                boolean isAny = _rsl.find(aggregatedReportData);

                aggregatedReportData.Amount += taxTrans.TaxValue;

                if (this.parmReportInAccountingCurrency())
                {
                    aggregatedReportData.TaxTransAmount += taxTrans.TaxAmount;
                    aggregatedReportData.TaxTransTaxInCostPrice += taxTrans.TaxInCostPrice;
                    aggregatedReportData.TaxTransTaxInCostPriceMST += taxTrans.TaxInCostPriceMST;
                    aggregatedReportData.TaxTransTaxBaseAmount += taxTrans.TaxBaseAmount;
                }
                else
                {
                    aggregatedReportData.TaxTransAmount += taxTrans.TaxAmountCur;
                    aggregatedReportData.TaxTransTaxInCostPrice += taxTrans.TaxInCostPriceCur;
                    aggregatedReportData.TaxTransTaxInCostPriceMST += taxTrans.TaxInCostPriceCur;
                    aggregatedReportData.TaxTransTaxBaseAmount += taxTrans.TaxBaseAmountCur;
                }

                _rsl.ins(aggregatedReportData, isAny);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTableSplittingByTaxReportId</Name>
				<Source><![CDATA[
    private void insertIntoTmpTableSplittingByTaxReportId(RecordSortedList _rsl)
    {
        SAFTTaxTransByReportingCodeVDEK_PL aggregatedReportData;
        boolean isAny = _rsl.first(aggregatedReportData);
        if (isAny)
        {
            do
            {
                TmpTaxReportById tmpTaxReportById;
                TaxTrans taxTrans = this.getTaxTransFromAggregatedRecord(aggregatedReportData);
                tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, aggregatedReportData.IsCreditNote);

                boolean isFirstRecord = true;
                while select Amount, TaxReportField, TaxInCostPrice from tmpTaxReportById
                {
                    if (isFirstRecord)
                    {
                        reportData.clear();
                        reportData = this.initHeaderForAggregatedRecord(reportData);
                        reportData.TaxCode = aggregatedReportData.TaxCode;
                        reportData.TaxDirection = aggregatedReportData.TaxDirection;
                        reportData.TaxGroup = aggregatedReportData.TaxGroup;
                        reportData.TaxItemGroup = aggregatedReportData.TaxItemGroup;
                        reportData.ReverseCharge = aggregatedReportData.ReverseCharge;
                        reportData.IsCreditNote = aggregatedReportData.IsCreditNote;
                        reportData.TaxTransAmount = aggregatedReportData.TaxTransAmount;
                        reportData.TaxTransTaxInCostPrice = aggregatedReportData.TaxTransTaxInCostPrice;
                        reportData.TaxTransTaxInCostPriceMST = aggregatedReportData.TaxTransTaxInCostPriceMST;
                        reportData.TaxTransTaxBaseAmount = aggregatedReportData.TaxTransTaxBaseAmount;

                        reportData.FiscalDocumentType = SAFTFiscalDocumentType_PL::RO;
                        reportData.FiscalDocumentTypeInt = reportData.FiscalDocumentType;
                        isFirstRecord = false;
                    }
                    reportData.initFromTmpTaxTransReportId(tmpTaxReportById);

                    if (isMultipleTax)
                    {
                        reportData.VatDueDate_W = aggregatedReportData.VatDueDate_W;
                        reportData.Addressing_PL = aggregatedReportData.Addressing_PL;
                        reportData.CustVendName_PL = aggregatedReportData.CustVendName_PL;
                        reportData.VATNum_PL = aggregatedReportData.VATNum_PL;
                    }

                    reportDataInsList.add(reportData);
                }
            }
            while (_rsl.next(aggregatedReportData));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderForAggregatedRecord</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCodeVDEK_PL initHeaderForAggregatedRecord(SAFTTaxTransByReportingCodeVDEK_PL _reportData)
    {
        _reportData.CustVendName_PL = NazwaKontrahenta; // NazwaKontrahenta
        _reportData.DocumentNum = ''; // DowodSprzedazy
        _reportData.DocumentDate = dateTo; // DataWystawienia
        _reportData.SalesDate = dateTo; // DataSprzedazy
        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransFromAggregatedRecord</Name>
				<Source><![CDATA[
    private TaxTrans getTaxTransFromAggregatedRecord(SAFTTaxTransByReportingCodeVDEK_PL _aggregatedRecord)
    {
        TaxTrans ret;
        ret.TaxCode = _aggregatedRecord.TaxCode;
        ret.TaxDirection = _aggregatedRecord.TaxDirection;
        ret.ReverseCharge_W = _aggregatedRecord.ReverseCharge;
        ret.TaxValue = _aggregatedRecord.Amount;
        ret.TaxAmount = _aggregatedRecord.TaxTransAmount;
        ret.TaxInCostPrice = _aggregatedRecord.TaxTransTaxInCostPrice;
        ret.TaxInCostPriceMST = _aggregatedRecord.TaxTransTaxInCostPriceMST;
        ret.TaxBaseAmount = _aggregatedRecord.TaxTransTaxBaseAmount;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFieldsMultipleTax</Name>
				<Source><![CDATA[
    private void updateFieldsMultipleTax(SAFTTaxTransByReportingCodeContext_PL _reportDataContext,
        SAFTTaxTransByReportingCodeVDEK_PL _reportData)
    {
        str custVendISOCode, custVendName_PL, VATNUm_PL;
        [custVendISOCode, custVendName_PL, VATNUm_PL] = _reportDataContext.getTaxRegistrationData();

        _reportData.CustVendISOCode = custVendISOCode;
        _reportData.CustVendName_PL = custVendName_PL;
        _reportData.VATNum_PL = VATNUm_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportDataAmounts</Name>
				<Source><![CDATA[
    private void initReportDataAmounts(
        SAFTTaxTransByReportingCodeVDEK_PL _reportData,
        TaxAmount _taxAmount,
        TaxAmount _taxBaseAmount,
        TaxAmount _taxInCostPrice,
        TaxAmount _taxInCostPriseMST)
    {
        _reportData.TaxTransAmount = _taxAmount;
        _reportData.TaxTransTaxInCostPrice = _taxInCostPrice;
        _reportData.TaxTransTaxInCostPriceMST = _taxInCostPriseMST;
        _reportData.TaxTransTaxBaseAmount = _taxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransDataFromTaxTrans</Name>
				<Source><![CDATA[
    private void createTransDataFromTaxTrans(
        TaxTrans _taxTrans,
        TaxTrans_W _taxTrans_W = TaxTrans_W::findByTaxTrans(_taxTrans.RecId),
        SAFTFiscalDocumentType_PL _docType = SAFTFiscalDocumentType_PL::Default)
    {
        if (!isVATReportDateCodesFlightEnabled
            || _taxTrans.TaxAmount
            || _taxTrans.TaxBaseAmount)
        {
            SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
            boolean isCreditNote = this.isCreditNote(_taxTrans);

            TmpTaxReportById tmpTaxReportById;

            if (!this.parmReportInAccountingCurrency())
            {
                _taxTrans.TaxAmount = _taxTrans.TaxAmountCur;
                _taxTrans.TaxBaseAmount = _taxTrans.TaxBaseAmountCur;
                _taxTrans.TaxInCostPriceMST = _taxTrans.TaxInCostPriceCur;
            }

            tmpTaxReportById = _taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, isCreditNote);

            boolean isFirstRecord = true;
            while select Amount, TaxReportField, TaxInCostPrice from tmpTaxReportById
            {
                if (isFirstRecord)
                {
                    reportData.clear();
                    if (this.prepareForAdvanceInvoice(_taxTrans))
                    {
                        _taxTrans_W = TaxTrans_W::findByTaxTrans(reportData.TaxTransRecId);
                    }

                    reportDataContext.initFromTaxTrans(_taxTrans);
                    reportDataContext.parmTaxTrans_W(_taxTrans_W);

                    RefRecId reverseRecId = this.getReverseRecId();
                    if (reverseRecId)
                    {
                        break;
                    }

                    reportData.initFromTaxTrans(_taxTrans);
                    if (!this.parmReportInAccountingCurrency())
                    {
                        this.initReportDataAmounts(
                        reportData,
                        _taxTrans.TaxAmountCur,
                        _taxTrans.TaxBaseAmountCur,
                        _taxTrans.TaxInCostPrice,
                        _taxTrans.TaxInCostPriceCur);
                    }
                
                    if (isMultipleTax && _taxTrans.PartyTaxID)
                    {
                        this.updateFieldsMultipleTax(reportDataContext, reportData);
                    }
                    else
                    {
                        reportData.initByTaxTrans_W(_taxTrans_W);
                    }

                    reportData = this.fillCustVendFields(reportData, _taxTrans.TransDate);
                    reportData.TaxTransRecId = _taxTrans.RecId;
                    reportData.IsCreditNote = isCreditNote;
                    reportData.SalesDate = this.getSalesDate_W();
                    reportData.PurchReceiptDate = this.purchReceiptDate();
                    reportData.InvoiceId = this.getInvoiceId(_taxTrans);

                    if (reportData.TaxDirection == TaxDirection::UseTax || _taxTrans.ReverseCharge_W)
                    {
                        reportData.DocumentNum = reportData.InvoiceId;
                    } 
                    else
                    {
                        reportData.DocumentNum = this.getDocumentId(_taxTrans);
                    }

                    reportData.OperationType = reportDataContext.getOperationType();
                    reportData.OverduePaidCurMonth = reportDataContext.getIsCustOverduePaidCurMonth() ? NoYes::Yes : NoYes::No;
                    reportData.OverdueExpiryDate = reportDataContext.getOverdueExpiryDate();
                    reportData.OverduePaymentDate = reportDataContext.getOverduePaymentDate();
                    reportData.FiscalDocumentType = _docType;
                    reportData.SplitPayment = reportSchemaVersion == SAFTReportVDEKSchemaVersion_PL::V1 ? this.getSplitPayment() : NoYes::No;
                    reportData.OperationTypeInt = enum2int(reportData.OperationType);
                    reportData.FiscalDocumentTypeInt = reportData.FiscalDocumentType;
                    reportData = this.correctDatesIfOverdue(reportData);
                    isFirstRecord = false;
                }
                reportData.initFromTmpTaxTransReportId(tmpTaxReportById);
                reportDataInsList.add(reportData);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCustVendFields</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCodeVDEK_PL fillCustVendFields(SAFTTaxTransByReportingCodeVDEK_PL _reportData, TransDate _taxTransDate)
    {
        if (custInvoiceJour_PL.RecId && !isMultipleTax)
        {
            _reportData = this.initByCustInvoiceJour_PL(_reportData);
        }
        else
        {
            _reportData.DocumentDate = this.getDocumentDate(_taxTransDate);
            _reportData = this.initFromNonSADVendTrans(_reportData);
            if (!_reportData.CustVendAccount_PL)
            {
                [_reportData.CustVendAccount_PL, _reportData.CustVendGroup_PL] = this.getCustVendAccountNumGroup();
            }
        }

        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctDatesIfOverdue</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCodeVDEK_PL correctDatesIfOverdue(SAFTTaxTransByReportingCodeVDEK_PL _reportData)
    {
        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

        if (reportDataContext)
        {
            _reportData.TaxTransDate = reportDataContext.getIsOverdue() ? reportDataContext.getTaxTransDateOverdue() : _reportData.TaxTransDate;
            _reportData.VatDueDate_W = reportDataContext.getIsOverdue() ? reportDataContext.getVatDueDateOverdue() : _reportData.VatDueDate_W;
        }

        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initByCustInvoiceJour_PL</Name>
				<Source><![CDATA[
    private SAFTTaxTransByReportingCodeVDEK_PL initByCustInvoiceJour_PL(SAFTTaxTransByReportingCodeVDEK_PL _reportData)
    {
        if (custInvoiceJour_PL.FiscalInvoiceAccount_PL)
        {
            CustTable custTable = CustTable::find(custInvoiceJour_PL.FiscalInvoiceAccount_PL);
            if (custTable.RecId)
            {
                _reportData.CustVendName_PL = custTable.name(); // NazwaKontrahenta
                _reportData.VATNum_PL = custTable.VATNum;
                _reportData.CustVendGroup_PL = custTable.CustGroup;
            }
            _reportData.CustVendAccount_PL = custInvoiceJour_PL.FiscalInvoiceAccount_PL;
        }
        reportData.DocumentDate = custInvoiceJour_PL.FiscalDocDate_PL;
        return _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForAdvanceInvoice</Name>
				<Source><![CDATA[
    private RefRecId prepareForAdvanceInvoice(TaxTrans _taxTrans)
    {
        RefRecId newTaxTransRecId;

        if (custAdvanceInvoiceTable)
        {
            CustInvoiceJour custInvoiceJourLocal;
            CustAdvanceInvoiceSettlement_W custAdvanceInvoiceSettlement;
            TaxTrans taxTransLocal;

            select firstonly DocumentNum, InvoiceId, DocumentDate, LedgerVoucher, InvoiceDate from custInvoiceJourLocal
            outer join SalesDate_W from custInvoiceJour_W
                where custInvoiceJour_W.CustInvoiceJour == custInvoiceJourLocal.RecId
            outer join RecId from taxTransLocal
                where taxTransLocal.Voucher == custInvoiceJourLocal.LedgerVoucher
                    && taxTransLocal.TransDate == custInvoiceJourLocal.InvoiceDate
            exists join custAdvanceInvoiceSettlement
                where (custAdvanceInvoiceSettlement.InvoiceJourRecId == custInvoiceJourLocal.RecId
                    && custAdvanceInvoiceSettlement.ReversalAdvanceInvoiceRecId == custAdvanceInvoiceTable.RecId)
                    || (custAdvanceInvoiceSettlement.CreditNoteRecId == custInvoiceJourLocal.RecId
                    && custAdvanceInvoiceSettlement.ReversalCancellationRecId == custAdvanceInvoiceTable.RecId);

            if (custInvoiceJourLocal)
            {
                _taxTrans.Voucher = custInvoiceJourLocal.LedgerVoucher;
                _taxTrans.TransDate = custInvoiceJourLocal.InvoiceDate;
                custAdvanceInvoiceTable.InvoiceId = custInvoiceJourLocal.InvoiceId;
                reportData.TaxTransRecId = taxTransLocal.RecId;
                newTaxTransRecId = taxTransLocal.RecId;

                if (custInvoiceJourLocal.DocumentDate)
                {
                    custAdvanceInvoiceTable.InvoiceDate = custInvoiceJourLocal.DocumentDate;
                }
                else
                {
                    DocumentDate docDate = this.getCustTransDocumentDate(custInvoiceJourLocal.LedgerVoucher, custInvoiceJourLocal.InvoiceDate);
                    custAdvanceInvoiceTable.InvoiceDate = docDate ? docDate : this.getGeneralJournalEntryDocumentDate(custInvoiceJourLocal.LedgerVoucher, custInvoiceJourLocal.InvoiceDate);
                }
            }
            else
            {
                ProjInvoiceJour projInvoiceJourLocal;
                ProjAdvanceInvoiceSettlement_W projAdvanceInvoiceSettlement;

                select firstonly ProjInvoiceId, DocumentDate_W, LedgerVoucher, InvoiceDate from projInvoiceJourLocal
                outer join SalesDate_CZ from projInvoiceJour
                    where projInvoiceJour.RecId == projInvoiceJourLocal.RecId
                outer join RecId from taxTransLocal
                    where taxTransLocal.Voucher == projInvoiceJourLocal.LedgerVoucher
                        && taxTransLocal.TransDate == projInvoiceJourLocal.InvoiceDate
                exists join projAdvanceInvoiceSettlement
                    where (projAdvanceInvoiceSettlement.InvoiceJourRecId == projInvoiceJourLocal.RecId
                        && projAdvanceInvoiceSettlement.ReversalAdvanceInvoiceRecId == custAdvanceInvoiceTable.RecId);

                if (projInvoiceJourLocal)
                {
                    _taxTrans.Voucher = projInvoiceJourLocal.LedgerVoucher;
                    _taxTrans.TransDate = projInvoiceJourLocal.InvoiceDate;
                    custAdvanceInvoiceTable.InvoiceId = projInvoiceJourLocal.ProjInvoiceId;
                    reportData.TaxTransRecId = taxTransLocal.RecId;
                    newTaxTransRecId = taxTransLocal.RecId;

                    if (projInvoiceJourLocal.DocumentDate_W)
                    {
                        custAdvanceInvoiceTable.InvoiceDate = projInvoiceJourLocal.DocumentDate_W;
                    }
                    else
                    {
                        DocumentDate docDate = this.getCustTransDocumentDate(projInvoiceJourLocal.LedgerVoucher, projInvoiceJourLocal.InvoiceDate);
                        if (docDate)
                        {
                            custAdvanceInvoiceTable.InvoiceDate = docDate;
                        }
                        else
                        {
                            docDate = this.getGeneralJournalEntryDocumentDate(projInvoiceJourLocal.LedgerVoucher, projInvoiceJourLocal.InvoiceDate);
                            custAdvanceInvoiceTable.InvoiceDate = docDate ? docDate : projInvoiceJourLocal.InvoiceDate;
                        }
                    }
                }
            }
        }

        return newTaxTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalEntryDocumentDate</Name>
				<Source><![CDATA[
    private DocumentDate getGeneralJournalEntryDocumentDate(Voucher _voucher, AccountingDate _accountingDate)
    {
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        select firstonly DocumentDate from generalJournalEntry
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                    subledgerVoucherGeneralJournalEntry.Voucher == _voucher &&
                    subledgerVoucherGeneralJournalEntry.AccountingDate == _accountingDate;
        return generalJournalEntry.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTransDocumentDate</Name>
				<Source><![CDATA[
    private DocumentDate getCustTransDocumentDate(Voucher _voucher, TransDate _transDate)
    {
        return (select firstonly DocumentDate from CustTrans
                    where CustTrans.Voucher == _voucher
                        && CustTrans.TransDate == _transDate).DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearExtraTables</Name>
				<Source><![CDATA[
    private void clearExtraTables()
    {
        custInvoiceJour.clear();
        custInvoiceJour_W.clear();
        projInvoiceJour.clear();
        vendInvoiceJour.clear();
        custAdvanceInvoiceTable.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExtraTables</Name>
				<Source><![CDATA[
    private void initializeExtraTables(TaxModuleType _source, Voucher _voucher, TransDate _transDate)
    {
        if (_voucher != prevTaxTransVoucher
            || _transDate != prevTaxTransDate)
        {
            prevTaxTransDate = _transDate;
            prevTaxTransVoucher = _voucher;
            this.clearExtraTables();
        }

        switch (_source)
        {
            case TaxModuleType::Sales:
            case TaxModuleType::FreeTxtInvoice:
            case TaxModuleType::SalesInvoice:
                if (!custInvoiceJour.RecId)
                {
                    this.initializeCustInvoiceTables(_voucher, _transDate);
                }
                break;
            case TaxModuleType::Project:
            case TaxModuleType::ProjectInvoice:
                if (!projInvoiceJour.RecId)
                {
                    select firstonly SalesDate_CZ, DocumentDate_W, ProjInvoiceId from projInvoiceJour
                        where projInvoiceJour.LedgerVoucher == _voucher &&
                            projInvoiceJour.InvoiceDate == _transDate;
                }
                break;
            case TaxModuleType::Purch:
            case TaxModuleType::PurchInvoice:
                if (!vendInvoiceJour.RecId)
                {
                    this.findVendInvoiceJourByVoucherAndDate(_voucher, _transDate);
                }
                break;
            case TaxModuleType::Voucher:
                if (!vendInvoiceJour.RecId)
                {
                    this.findVendInvoiceJourByVoucherAndDate(_voucher, _transDate);
                    if (!vendInvoiceJour.RecId)
                    {
                        this.initializeCustInvoiceTables(_voucher, _transDate);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendInvoiceJourByVoucherAndDate</Name>
				<Source><![CDATA[
    private void findVendInvoiceJourByVoucherAndDate(Voucher _voucher, TransDate _transDate)
    {
        select firstonly PurchReceiptDate_W, DocumentDate, DocumentNum, InvoiceId, OrderAccount from vendInvoiceJour
            where vendInvoiceJour.LedgerVoucher == _voucher
                && vendInvoiceJour.InvoiceDate == _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustInvoiceTables</Name>
				<Source><![CDATA[
    private void initializeCustInvoiceTables(Voucher _voucher, TransDate _transDate)
    {
        select firstonly DocumentDate, DocumentNum, InvoiceId, OrderAccount from custInvoiceJour
            where custInvoiceJour.LedgerVoucher == _voucher
                && custInvoiceJour.InvoiceDate == _transDate;
        if (custInvoiceJour.RecId)
        {
            custInvoiceJour_W = custInvoiceJour.custInvoiceJour_W();
        }
        else
        {
            custAdvanceInvoiceTable = CzCustAdvanceInvoiceTable::findVoucherDate(_voucher, _transDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesDate_W</Name>
				<Source><![CDATA[
    private SalesDate_W getSalesDate_W()
    {
        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

        if (reportDataContext && reportDataContext.getIsOverdue())
        {
			CustInvoiceJour custInvoiceJourOverdue = reportDataContext.getCustInvoiceJourOverdue();
			ProjInvoiceJour projInvoiceJourOverdue = reportDataContext.getProjInvoiceJourOverdue();
			
			if (custInvoiceJourOverdue)
			{
				return custInvoiceJourOverdue.custInvoiceJour_W().SalesDate_W;
			}
			else if (projInvoiceJourOverdue)
			{
				return projInvoiceJourOverdue.SalesDate_CZ;
			}
        }

        return custInvoiceJour_W.SalesDate_W ? custInvoiceJour_W.SalesDate_W : projInvoiceJour.SalesDate_CZ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReceiptDate</Name>
				<Source><![CDATA[
    private PurchReceiptDate_W purchReceiptDate()
    {
        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

        if (reportDataContext && reportDataContext.getIsOverdue() && reportDataContext.getVendInvoiceJourOverdue())
        {
            return reportDataContext.getVendInvoiceJourOverdue().PurchReceiptDate_W;
        }

        PurchReceiptDate_W purchReceiptDate = vendInvoiceJour.PurchReceiptDate_W;

        if (!purchReceiptDate && reportDataContext)
        {
            purchReceiptDate = reportDataContext.getLJTPurchReceiptDate();
        }

        return purchReceiptDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReverseRecId</Name>
				<Source><![CDATA[
    private RefRecId getReverseRecId()
    {
        TransactionReversalTrans transactionReversalTrans;
        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
        if (reportDataContext)
        {
            RefTableId refTableId;
            RefRecId refRecId;
            if (custInvoiceJour.RecId)
            {
                CustTrans custTrans = reportDataContext.getCustTransOnly();
                refTableId = custTrans.TableId;
                refRecId = custTrans.RecId;
            }
            else if (vendInvoiceJour.RecId)
            {
                VendTrans vendTrans = reportDataContext.getVendTransOnly();
                refTableId = vendTrans.TableId;
                refRecId = vendTrans.RecId;
            }
            else
            {
                CustTrans custTrans = reportDataContext.getCustTransOnly();
                if (custTrans.RecId)
                {
                    refTableId = custTrans.TableId;
                    refRecId = custTrans.RecId;
                }
                else
                {
                    VendTrans vendTrans = reportDataContext.getVendTransOnly();
                    refTableId = vendTrans.TableId;
                    refRecId = vendTrans.RecId;
                }
                if (!refRecId)
                {
                    GeneralJournalEntry generalJournalEntry = reportDataContext.getGeneralJournalEntry();
                    if (generalJournalEntry.RecId)
                    {
                        GeneralJournalAccountEntry generalJournalAccountEntry;
                        select firstonly RecId from generalJournalAccountEntry
                            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId;

                        refTableId = generalJournalAccountEntry.TableId;
                        refRecId = generalJournalAccountEntry.RecId;
                    }
                }
            }
            if (refRecId)
            {
                select firstonly RecId from transactionReversalTrans
                    index RefRecIdIdx
                    where transactionReversalTrans.RefRecId == refRecId
                        && transactionReversalTrans.RefTableId == refTableId
                        && transactionReversalTrans.Reversed == NoYes::Yes;
            }
        }

        return transactionReversalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    private DocumentDate getDocumentDate(TransDate _taxTransDate)
    {
        if (custInvoiceJour.DocumentDate)
        {
            return custInvoiceJour.DocumentDate;
        }

        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

        if (reportDataContext)
        {
            if (vendInvoiceJour.RecId)
            {
                if (reportDataContext.getIsSADDocument() && reportDataContext.parmTaxTrans_W().DocumentDate_PL)
                {
                    return reportDataContext.parmTaxTrans_W().DocumentDate_PL;
                }
                if (vendInvoiceJour.DocumentDate)
                {
                    return vendInvoiceJour.DocumentDate;
                }
            }
            if (reportDataContext.getIsOverdue())
            {
                return reportDataContext.getDocumentDateOverdue();
            }
            else if (custInvoiceJour.RecId && reportDataContext.getCustTransOnly().DocumentDate)
            {
                return reportDataContext.getCustTransOnly().DocumentDate;
            }
            else if (vendInvoiceJour.RecId && reportDataContext.getVendTransOnly().DocumentDate)
            {
                return reportDataContext.getVendTransOnly().DocumentDate;
            }
            else
            {
                if (reportDataContext.getCustTransOnly().DocumentDate)
                {
                    return reportDataContext.getCustTransOnly().DocumentDate;
                }
                if (reportDataContext.getVendTransOnly().DocumentDate)
                {
                    return reportDataContext.getVendTransOnly().DocumentDate;
                }
                if (reportDataContext.getGeneralJournalEntry().DocumentDate)
                {
                    return reportDataContext.getGeneralJournalEntry().DocumentDate;
                }
            }
        }

        if (custAdvanceInvoiceTable.InvoiceDate)
        {
            return custAdvanceInvoiceTable.InvoiceDate;
        }

        if (projInvoiceJour.DocumentDate_W)
        {
            return projInvoiceJour.DocumentDate_W;
        }

        return _taxTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentId</Name>
				<Source><![CDATA[
    private DocumentNum getDocumentId(TaxTrans _taxTrans)
    {
        DocumentNum documentId = '';

        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
        if (reportDataContext && reportDataContext.getIsOverdue())
        {
            documentId = reportDataContext.getDocumentIdOverdue();
        }
        else if (vendInvoiceJour.RecId && reportDataContext && reportDataContext.getIsSADDocument())
        {
            documentId = reportDataContext.getDocumentIdSAD();
        }
        else if (custInvoiceJour.DocumentNum)
        {
            documentId = custInvoiceJour.DocumentNum;
        }
        else if (vendInvoiceJour.DocumentNum)
        {
            documentId = vendInvoiceJour.DocumentNum;
        }
        else if (reportDataContext)
        {
            if (custInvoiceJour.RecId && reportDataContext.getCustTransOnly().DocumentNum)
            {
                documentId = reportDataContext.getCustTransOnly().DocumentNum;
            }
            else if (vendInvoiceJour.RecId && reportDataContext.getVendTransOnly().DocumentNum)
            {
                documentId = reportDataContext.getVendTransOnly().DocumentNum;
            }
            else if (!custInvoiceJour.RecId && !vendInvoiceJour.RecId)
            {
                if (reportDataContext.getCustTransOnly().DocumentNum)
                {
                    documentId = reportDataContext.getCustTransOnly().DocumentNum;
                }
                else if (reportDataContext.getVendTransOnly().DocumentNum)
                {
                    documentId = reportDataContext.getVendTransOnly().DocumentNum;
                }
            }
        }

        if (!documentId)
        {
            if (custAdvanceInvoiceTable.InvoiceId)
            {
                documentId = custAdvanceInvoiceTable.InvoiceId;
            }
            else if (projInvoiceJour.ProjInvoiceId)
            {
                documentId = projInvoiceJour.ProjInvoiceId;
            }
            else if (custInvoiceJour.InvoiceId)
            {
                documentId = custInvoiceJour.InvoiceId;
            }
            else if (vendInvoiceJour.InvoiceId)
            {
                documentId = vendInvoiceJour.InvoiceId;
            }
            else if (_taxTrans.Source == TaxModuleType::Voucher)
            {
                documentId = this.getSettlementInvoiceId(_taxTrans.SourceTableId, _taxTrans.SourceRecId, _taxTrans.Voucher);
            }
        }

        if (!documentId && reportDataContext)
        {
            if (reportDataContext.getGeneralJournalEntry().DocumentNumber)
            {
                documentId = reportDataContext.getGeneralJournalEntry().DocumentNumber;
            }
            else if (reportDataContext.getLedgerJournalTrans().Invoice)
            {
                documentId = reportDataContext.getLedgerJournalTrans().Invoice;
            }
        }

        if (!documentId)
        {
            documentId = _taxTrans.InvoiceId;
        }

        if (!documentId && isMultipleTax)
        {
            documentId = reportDataContext.getInventTransOrigin().ReferenceId;
        }

        return strRem(documentId, SpecialChars);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    private InvoiceId getInvoiceId(TaxTrans _taxTrans)
    {
        InvoiceId invoiceId = '';

        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
        if (reportDataContext && reportDataContext.getIsOverdue())
        {
            invoiceId = reportDataContext.getDocumentIdOverdue();
        }
        else if (vendInvoiceJour.RecId && reportDataContext && reportDataContext.getIsSADDocument())
        {
            invoiceId = reportDataContext.getDocumentIdSAD();
        }
        else if (custAdvanceInvoiceTable.InvoiceId)
        {
            invoiceId = custAdvanceInvoiceTable.InvoiceId;
        }
        else if (projInvoiceJour.ProjInvoiceId)
        {
            invoiceId = projInvoiceJour.ProjInvoiceId;
        }
        else if (custInvoiceJour.InvoiceId)
        {
            invoiceId = custInvoiceJour.InvoiceId;
        }
        else if (vendInvoiceJour.InvoiceId)
        {
            invoiceId =  vendInvoiceJour.InvoiceId;
        }
        else if (reportDataContext && reportDataContext.getLedgerJournalTrans().Invoice)
        {
            invoiceId =  reportDataContext.getLedgerJournalTrans().Invoice;
        }
        else if (reportDataContext && reportDataContext.getGeneralJournalEntry().DocumentNumber)
        {
            invoiceId = reportDataContext.getGeneralJournalEntry().DocumentNumber;
        }
        else if (_taxTrans.Source == TaxModuleType::Voucher)
        {
            invoiceId = this.getSettlementInvoiceId(_taxTrans.SourceTableId, _taxTrans.SourceRecId, _taxTrans.Voucher);
        }

        if (!invoiceId)
        {
            invoiceId = _taxTrans.InvoiceId;
        }

        if (!invoiceId && isMultipleTax)
        {
            invoiceId = reportDataContext.getInventTransOrigin().ReferenceId;
        }

        return strRem(invoiceId, SpecialChars);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementInvoiceId</Name>
				<Source><![CDATA[
    private InvoiceId getSettlementInvoiceId(RefTableId _sourceTableId, RefRecId _sourceRecId, Voucher _voucher)
    {
        InvoiceId invoiceId = '';

        switch (_sourceTableId)
        {
            case tableNum(VendTrans):
                VendTrans vendTrans;
                VendSettlement vendSettlement;

                select firstonly Invoice from vendTrans
                    where vendTrans.Invoice
                exists join vendSettlement
                    where vendSettlement.OffsetRecid == _sourceRecId
                        && vendSettlement.SettlementVoucher == _voucher
                        && vendTrans.RecId == vendSettlement.TransRecId;

                invoiceId = vendTrans.Invoice;
                break;

            case tableNum(CustTrans):
                CustTrans custTrans;
                select firstonly Invoice from custTrans
                    where custTrans.OffsetRecid == _sourceRecId;
                invoiceId = custTrans.Invoice;
                break;

            case tableNum(LedgerJournalTrans):
                LedgerJournalTrans ledgerJournalTrans;
                ledgerJournalTrans = LedgerJournalTrans::findRecId(_sourceRecId, false);
                invoiceId = ledgerJournalTrans.Invoice ? ledgerJournalTrans.Invoice : ledgerJournalTrans.DocumentNum;
                break;
        }

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendAccountNumGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns AccountNum and Group of Customer or Vendor.
    /// </summary>
    /// <returns>Container with AccountNum and GroupId.</returns>
    private container getCustVendAccountNumGroup()
    {
        container ret;

        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

        if (reportDataContext)
        {
            if (custInvoiceJour.OrderAccount)
            {
                ret = [custInvoiceJour.OrderAccount, reportDataContext.getCustGroup(custInvoiceJour.OrderAccount)];
            }
            else if (vendInvoiceJour.OrderAccount)
            {
                ret = [vendInvoiceJour.OrderAccount, reportDataContext.getVendGroup(vendInvoiceJour.OrderAccount)];
            }
            if (!ret)
            {
                CustVendAC account = reportDataContext.getCustTransOnly().AccountNum;
                if (account)
                {
                    ret = [account, reportDataContext.getCustGroup(account)];
                }
                else
                {
                    account = reportDataContext.getVendTransOnly().AccountNum;
                    if (account)
                    {
                        ret = [account, reportDataContext.getVendGroup(account)];
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitPayment</Name>
				<Source><![CDATA[
    private int getSplitPayment()
    {
        int ret;
        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();
        if (reportDataContext)
        {
            if (this.isSales())
            {
                CustTrans_W custTrans_W = reportDataContext.getCustTrans_W();
                ret = custTrans_W.SplitPayment_W && !custTrans_W.VoluntarySplitPayment_W;
            }
            else if (this.isPurchase())
            {
                VendTrans_W vendTrans_W = reportDataContext.getVendTrans_W();
                ret = vendTrans_W.SplitPayment_W && !vendTrans_W.VoluntarySplitPayment_W;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchase</Name>
				<Source><![CDATA[
    private boolean isPurchase()
    {
        return reportData.TaxDirection == TaxDirection::IncomingTax
            || reportData.TaxDirection == TaxDirection::IncomingTax_W
            || reportData.TaxDirection == TaxDirection::UseTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSales</Name>
				<Source><![CDATA[
    private boolean isSales()
    {
        return reportData.TaxDirection == TaxDirection::OutgoingTax
            || reportData.TaxDirection == TaxDirection::OutgoingTax_W
            || reportData.TaxDirection == TaxDirection::UseTax
            || reportData.TaxDirection == TaxDirection::TaxExemptSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    private boolean isCreditNote(TaxTrans _taxTrans)
    {
        boolean ret = true;

        if (((_taxTrans.TaxBaseAmount > 0 || _taxTrans.TaxAmount > 0) &&
            _taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
            (_taxTrans.TaxDirection == TaxDirection::IncomingTax ||
            _taxTrans.TaxDirection == TaxDirection::IncomingTax_W ||
            _taxTrans.TaxDirection == TaxDirection::UseTax ||
            _taxTrans.TaxDirection == TaxDirection::TaxTransaction)) ||

            ((_taxTrans.TaxBaseAmount < 0 || _taxTrans.TaxAmount < 0) &&
            _taxTrans.TaxOrigin == TaxOrigin::TaxReversed &&
            (_taxTrans.TaxDirection == TaxDirection::IncomingTax ||
            _taxTrans.TaxDirection == TaxDirection::IncomingTax_W ||
            _taxTrans.TaxDirection == TaxDirection::UseTax ||
            _taxTrans.TaxDirection == TaxDirection::TaxTransaction)) ||

            ((_taxTrans.TaxBaseAmount < 0 || _taxTrans.TaxAmount < 0) &&
            _taxTrans.TaxOrigin != TaxOrigin::TaxReversed &&
            (_taxTrans.TaxDirection == TaxDirection::OutgoingTax ||
            _taxTrans.TaxDirection == TaxDirection::OutgoingTax_W ||
            _taxTrans.TaxDirection == TaxDirection::TaxExemptSales)) ||

            ((_taxTrans.TaxBaseAmount > 0 || _taxTrans.TaxAmount > 0) &&
            _taxTrans.TaxOrigin == TaxOrigin::TaxReversed &&
            (_taxTrans.TaxDirection == TaxDirection::OutgoingTax ||
            _taxTrans.TaxDirection == TaxDirection::OutgoingTax_W ||
            _taxTrans.TaxDirection == TaxDirection::TaxExemptSales)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailVATNum</Name>
				<Source><![CDATA[
    private VATNum getRetailVATNum(
        RetailTransactionId _transactionId,
        RetailStoreId _storeId,
        RetailTerminalId _terminalId,
        RefRecId _channel)
    {
        SAFTTaxTransByReportingCodeContext_PL reportDataContext = SAFTTaxTransByReportingCodeContext_PL::instance();

        return reportDataContext ? reportDataContext.getRetailVatNum(_transactionId, _storeId, _terminalId, _channel) : '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>