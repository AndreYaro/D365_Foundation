<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymRecord_RBC_Credit</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendOutPaymRecord_RBC_Credit extends VendOutPaymRecord
{
    container                       rbcBasicPaymentRecord;
    str 152                         basicPaymentRecord;
    LogisticsAddressCountryRegionISOCode     isoCode;
    boolean                         skipPaymRecord;
    VendOutPaymRecord_RBC_CreditContract creditContract = VendOutPaymRecord_RBC_CreditContract::constuctWithDefaultValues();
    #define.interfaceName('RBC Payment Distribution Service')
    #define.space(' ')
    #define.zero('0')
    #define.CanadianCountryISO('CA')
    #define.USCountryISO('US')
    #define.CanadianDollarISO('CAD')
    #define.USDollarISO('USD')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPaymentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a payment due date is not more than 173 days in the past or future from the current
    /// system date.
    /// </summary>
    /// <returns>
    /// true if the payment due date is not more than 173 days in the past or future from the current
    /// system date; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Gets the payment due date from the <c>paymDate</c> method of the <c>custVendPaym</c> class. An out
    /// of range date will produce an appropriate error message and the file export will not occur.
    /// </remarks>
    protected boolean checkPaymentDate()
    {
        #define.MaxDaysPastOrFuture(173)

        boolean     ok          = true;
        date        testDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        //  payment date cannot be more than 173 days in the past or the future.
        if (abs(custVendPaym.paymDate() - testDate) > #MaxDaysPastOrFuture)
        {
            // Methods of payment - %1, export format requires all payment due dates to be not more than 173 days in the past or in the future.
            ok =  checkFailed(strFmt("@SYS98754", this.parmCustVendPaym().ledgerJournalTrans().PaymMode));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    public boolean checkValues(LedgerJournalTrans _ledgerJournalTrans     = null,
                               RunbaseProgress    _progress               = null)

    {
        boolean                         ok = true;
        VendBankAccount                 vendBankAccount;
        Currency                        currency;
        boolean                         currencyOk = false;
        boolean                         noCanadianCurrency = true;
        boolean                         noUSCurrency = true;
        CurrencyCanadaUS                currencyCanadaUS;

        ok = super(_ledgerJournalTrans, _progress);

        changecompany (custVendPaym.ledgerJournalTrans().Company)
        {
            // Only transactions with Debit Amounts can be used from Accounts Payable
            if (custVendPaym.paymAmountInSendersCurrency() <= 0)
            {
                // Payment  must be a debit amount greater than zero.
                ok = checkFailed(strFmt("@SYS98765", custVendPaym.ledgerJournalTrans().parmAccount()));
            }

            if (custVendPaym.custVendTable().BankAccountId)
            {
                vendBankAccount = VendBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(), this.parmCustVendPaym().custVendTable().BankAccountId);
                if (vendBankAccount)
                {
                    if (!vendBankAccount.RegistrationNum)
                    {
                        // Bank routing number on account '%1' for vendor '%2' is missing.
                        ok = checkFailed(strFmt("@SYS98758", vendBankAccount.AccountID, custVendPaym.ledgerJournalTrans().parmAccount()));
                    }

                    if (!vendBankAccount.AccountNum)
                    {
                        // Bank account number on account '%1' for vendor '%2' is missing.
                        ok = checkFailed(strFmt("@SYS82529", vendBankAccount.AccountID, custVendPaym.ledgerJournalTrans().parmAccount()));
                    }

                    isoCode = LogisticsAddressCountryRegion::find(LogisticsLocationEntity::location2PostalAddress(vendBankAccount.Location).CountryRegionId).isOcode;
                    if ( !( isoCode == #CanadianCountryISO
                            || isoCode == #USCountryISO) )
                    {
                        warning("@SYS115580" );
                        this.parmSkipPaymRecord(true);
                    }
                }
                else
                {
                    // A bank account has not been set up for the vendor %1.
                    ok = checkFailed(strFmt("@SYS98116", custVendPaym.ledgerJournalTrans().parmAccount()));
                }
            }
            else
            {
                // A bank account has not been set up for the vendor %1.
                ok = checkFailed(strFmt("@SYS98116", custVendPaym.ledgerJournalTrans().parmAccount()));
            }

            currencyCanadaUS = custVendOutPaym.parmCurrency();
            if (currencyCanadaUS == CurrencyCanadaUS::Canada)
            {
                // Verify that the currency of the voucher is the same as the currency code for the Canadian Dollar ISO code (CAD).
                currency.selectForUpdate(false);
                while select CurrencyCode from currency where currency.CurrencyCodeISO == #CanadianDollarISO
                {
                    noCanadianCurrency = false;
                    if (currency.CurrencyCode == custVendPaym.ledgerJournalTrans().displayCurrencyCode())
                    {
                        currencyOk = true;
                        break;
                    }
                }

                if (noCanadianCurrency)
                {
                    // There is not a currency code with the Canadian ISO currency code of 'CAD'.
                    warning("@SYS98121");
                    this.parmSkipPaymRecord(true);
                }

                if (!currencyOk)
                {
                    // Payments must be in a currency with the Canadian ISO currency code of 'CAD'.
                    warning("@SYS98767");
                    this.parmSkipPaymRecord(true);
                }
            }
            else if (currencyCanadaUS == CurrencyCanadaUS::US)
            {
                // Verify that the currency of the voucher is the same as the currency code for the US Dollar ISO code (USD).
                currency.selectForUpdate(false);
                while select CurrencyCode from currency where currency.CurrencyCodeISO == #USDollarISO
                {
                    noUSCurrency = false;
                    if (currency.CurrencyCode == custVendPaym.ledgerJournalTrans().displayCurrencyCode())
                    {
                        currencyOk = true;
                        break;
                    }
                }

                if (noUSCurrency)
                {
                    // There is not a currency code with the US ISO currency code of 'USD'.
                    warning("@SYS115581");
                    this.parmSkipPaymRecord(true);
                }

                if (!currencyOk)
                {
                    // Payments must be in a currency with the US ISO currency code of 'USD'.
                    warning("@SYS115582");
                    this.parmSkipPaymRecord(true);
                }
            }

            if (!this.parmCustVendPaym().ledgerJournalTrans().PaymSpec)
            {
                // Payment specification must be specified for method of payment '%1'.
                ok = checkFailed(strFmt("@SYS98763", this.parmCustVendPaym().ledgerJournalTrans().PaymMode, custVendPaym.ledgerJournalTrans().parmAccount()));
            }

            ok  = this.checkPaymentDate()   && ok;

            if (ok
                && VendOutPaymRecord_RBC_Credit::isIATTransaction(vendBankAccount.Location))
            {
                ok = this.validateIATAddressRecord();
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField01</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Record Count field in the RBC credit record.
    /// </summary>
    protected void fillField01()
    {
        #define.RecCountLength(6)

        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(01) | Pos(001-006) | Size(6) | Format(N) | Field Name(Record Count)

        this.strInsert(num2Str0(custVendOutPaym.parmRecord_Count(1), #RecCountLength), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField02</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Record Type field in the RBC credit record; will always be C.
    /// </summary>
    protected void fillField02()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(02) | Pos(007-007) | Size(1) | Format(AN) | Field Name(Record Type)
        #define.recType('C')

        this.strInsert(#recType, 7);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField03</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the transaction code field in the RBC credit record.
    /// </summary>
    /// <remarks>
    /// For IAT, the transaction code will always be 027; for any other entity, the transaction code will
    /// be 450.
    /// </remarks>
    protected void fillField03()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(03) | Pos(008-010) | Size(3) | Format(AN) | Field Name(Transaction Code)
        str trxCode = creditContract.parmTransactionCode();
        str payableTxcCode = creditContract.parmPayableTransactionCode();
        VendBankAccount vendBankAccount;

        vendBankAccount = VendBankAccount::findByCompany(custVendPaym.ledgerJournalTrans().Company,
                                                         custVendPaym.custVendTable().AccountNum,
                                                         custVendPaym.custVendTable().BankAccountId);

        if (VendOutPaymRecord_RBC_Credit::isIATTransaction(vendBankAccount.Location))
        {
            this.strInsert(payableTxcCode, 8);
        }
        else
        {
            this.strInsert(trxCode, 8);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField04</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Client Number field in the RBC credit record.
    /// </summary>
    protected void fillField04()
    {
        #define.ClientNumLength(11)

        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(04) | Pos(011-020) | Size(10) | Format(AN) | Field Name(Client Number)

        this.strInsert(custVendOutPaym.getRBCClientNumber(), #ClientNumLength);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField05</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Filler space in the RBC credit record; will always be blank (spaces).
    /// </summary>
    protected void fillField05()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(05) | Pos(021-021) | Size(1) | Format(AN) | Field Name(Filler)

        this.strInsert(#space, 21);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField06</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Customer Number field in the RBC credit record.
    /// </summary>
    protected void fillField06()
    {
        #define.AcctNumLength(19)
        #define.AcctNumOffset(22)

        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(06) | Pos(022-040) | Size(19) | Format(AN) | Field Name(Customer number)

        this.strInsert(strLFix(custVendPaym.custVendTable().AccountNum, #AcctNumLength), #AcctNumOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField07</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Payment Number field in the RBC credit record; will always be 00 (zeros).
    /// </summary>
    protected void fillField07()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(07) | Pos(041-042) | Size(2) | Format(N) | Field Name(Payment number)
        str paymentNum = creditContract.parmPaymentNumber();

        this.strInsert(paymentNum, 41);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField08_09</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Bank Number and Branch Number fields in the RBC credit record.
    /// </summary>
    protected void fillField08_09()
    {
        #define.RoutingNumLen(9)
        #define.RoutingNumOffset(43)

        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Fields(08, 09) | Pos(043-046, 047-051) | Size(4, 5) | Format(N) | Field Name(Bank number, Branch\transit number)

        str bankRegistrationNumber  =   custVendPaym.recieversBankRegistrationNumber();

        //  If the receivers bank route number is 9 characters use the entire number.
        if (strLen(bankRegistrationNumber) == #RoutingNumLen)
        {
            this.strInsert(bankRegistrationNumber, #RoutingNumOffset);
        }
        //  Otherwise use the first three (3) zero padded with the last five (5) for
        //  a total of nine characters. ex: '1234567' = '001234567'
        else
        {
            this.strInsert(strFmt(strRFix(subStr(bankRegistrationNumber, 1, 3), 4, #zero) +
                                          subStr(bankRegistrationNumber, 4, 5)), #RoutingNumOffset);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField10</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the bank Account Number field in the RBC Credit record.
    /// </summary>
    protected void fillField10()
    {
        #define.AcctNumLength(18)
        #define.AcctNumOffset(52)

        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(10) | Pos(052-069) | Size(18) | Format(AN) | Field Name(Account number)

        this.strInsert(strLFix(custVendPaym.recieversBankAccount(), #AcctNumLength), #AcctNumOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField11</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Places a filler space in the RBC credit record; will always be blank (spaces).
    /// </summary>
    protected void fillField11()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(11) | Pos(070-070) | Size(1) | Format(AN) | Field Name(Filler)

        this.strInsert(#space, 70);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField12</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Payment Amount field in the RBC credit record, in the format $$$$$$$$cc.
    /// </summary>
    protected void fillField12()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(12) | Pos(071-080) | Size(10) | Format(N, $$$$$$$$Â¢Â¢) | Field Name(payment/Input amount)

        this.strInsert(strRFix(strAlpha(num2Str0(custVendPaym.paymAmountInForeignCurrency(), 10, 2)), 10, #zero), 71);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField13</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills a reserved space in the RBC credit record; will always be blank (spaces).
    /// </summary>
    protected void fillField13()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(13) | Pos(081-086) | Size(6) | Format(AN) | Field Name(Reserved)

        this.strInsert(#space, 81);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField14</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Payment Due Date field in the RBC credit record.
    /// </summary>
    protected void fillField14()
    {
        #define.PayDueDateOffset(87)

        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(14) | Pos(087-093) | Size(7) | Format(N, YYYYDDD, Julian Date) | Field Name(Payment due date)

        this.strInsert(date2Julian(custVendPaym.paymDate()), #PayDueDateOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField15</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Customer Name field in the RBC credit record.
    /// </summary>
    protected void fillField15()
    {
        #define.CustNameLength(30)
        #define.CustnameOffset(94)

        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(15) | Pos(094-123) | Size(30) | Format(AN) | Field Name(Customer name)

        this.strInsert(strLFix(custVendPaym.recieversCompanyName(), #CustNameLength), #CustnameOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField16</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Language Code field in the RBC credit record; will be either F for French or E for English.
    /// </summary>
    protected void fillField16()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(16) | Pos(124-124) | Size(1) | Format(AN) | Field Name(Language code)
        #define.frenchCanadian('fr-ca')
        #define.french('F')
        #define.english('E')

        if (DirPartyTable::findRec(this.parmCustVendPaym().custVendTable().Party).LanguageId == #frenchCanadian)
        {
            this.strInsert(#french, 124);
        }
        else
        {
            this.strInsert(#english, 124);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField17</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Payment Medium field in the RBC credit record; will always be E for Electronic.
    /// </summary>
    protected void fillField17()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(17) | Pos(125-125) | Size(1) | Format(AN) | Field Name(Payment medium/Route medium)

        //NOTE: This field is blank on the Credit side of the transaction, the Debit side
        //      needs to indicate whether it is Paper or Electronic.

        this.strInsert(#space, 125);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField18</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Client Short Name field in the RBC credit record.
    /// </summary>
    protected void fillField18()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(18) | Pos(126-140) | Size(15) | Format(AN) | Field Name(Client short name)

        #define.ClientShortNameLength(15)
        #define.ClientShortNameOffset(126)

        //  This will use the new "Bank account - Customer statement name" field.
        //  Until available use blanks.
        //    this.strInsert(strLFix(custVendOutpaym.parmRBCClientname(), 15), 126);

        if (custVendPaym.bankAccountTable().BankCompanyStatementName)
        {
            this.strInsert(strLFix(custVendPaym.bankAccountTable().BankCompanyStatementName, #ClientShortNameLength, #space), #ClientShortNameOffset);
        }
        else
        {
            //If the Bank Company Statement Name is blank, use the first 16 characters from the Company Name...
            this.strInsert(subStr(CompanyInfo::find().name(), 1, #ClientShortNameLength), #ClientShortNameOffset);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField19</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Destination Currency field in the RBC credit record; will always be CAD for Canadian Dollar.
    /// </summary>
    protected void fillField19()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(19) | Pos(141-143) | Size(3) | Format(AN) | Field Name(Destination currency)
        if (custVendOutPaym.parmCurrency() == CurrencyCanadaUS::Canada)
        {
            this.strInsert(#CanadianDollarISO, 141);
        }
        else if (custVendOutPaym.parmCurrency() == CurrencyCanadaUS::US)
        {
            this.strInsert(#USDollarISO, 141);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField20</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills a reserved space in the RBC credit record; will always be blank (spaces).
    /// </summary>
    protected void fillField20()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(20) | Pos(144-144) | Size(1) | Format(AN) | Field Name(Reserved)

        this.strInsert(#space, 144);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField21</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the Payment Collection Country or Region field in the RBC credit record; will always be CAN.
    /// </summary>
    protected void fillField21()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(21) | Pos(145-147) | Size(3) | Format(AN) | Field Name(Payment collection country)
        #define.payCountryCAN('CAN')
        #define.payCountryUSA('USA')

        if (isoCode == #CanadianCountryISO)
        {
            this.strInsert(#payCountryCAN, 145);
        }
        else if (isoCode == #USCountryISO)
        {
            this.strInsert(#payCountryUSA, 145);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField22</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Places a filler space in the RBC credit record; will always be blank (spaces).
    /// </summary>
    protected void fillField22()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(23) | Pos(150-151) | Size(2) | Format(AN) | Field Name(Reserved)

        this.strInsert(#space, 150);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField23</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reserved space in the RBC credit record; will always be blank (spaces).
    /// </summary>
    protected void fillField23()
    {
        this.strInsert(#space, 150);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField24</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Optional Customer Information Follows field in the RBC credit record and will always contain 'N'.
    /// </summary>
    protected void fillField24()
    {
        //  RBC-Standard(STD152) Credit File Format Specififcation
        //  Basic Payment Record
        //  Field(24) | Pos(152-152) | Size(1) | Format(AN) | Field Name(optional customer information follows?)
        #define.optionalInfo('N')

        this.strInsert(#optionalInfo, 152);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillIATAddressInfoRecord1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares an IAT address record for output to the export file.
    /// </summary>
    /// <returns>
    /// A container that contains an IAT address record.
    /// </returns>
    /// <remarks>
    /// Record is of type IAT address record1.
    /// </remarks>
    private container fillIATAddressInfoRecord1()
    {
        container   iatAddressRecord                   =   conNull();
        LogisticsPostalAddress companyInfoAddress;
        #define.space(' ')
        #define.recType('C')
        #define.trxCode('AD1')
        #define.validChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')

        str 6       recordCount                     = strRep(#zero, 6);
        str 1       recordType                      = #recType;
        str 3       transactionCode                 = #trxCode;
        str 10      clientNumber                    = strRep(#zero, 10);
        str 30      clientName                      = strRep(#space,30);
        str 35      compAddress                     = strRep(#space,35);
        str 35      compCityState                   = strRep(#space,35);
        str 32      compCountryZipCode              = strRep(#space,32);

        companyInfoAddress    = CompanyInfo::find().postalAddress();
        recordCount           = num2Str0(custVendOutPaym.parmRecord_Count(1), 6);
        clientNumber          = strLFix(custVendOutPaym.getRBCClientNumber(), 10);
        clientName            = strLFix(strKeep(strLFix(CompanyInfo::find().name(), 30, #space), #validChars), 30, #Space);
        compAddress           = strLFix(strRem(companyInfoAddress.Street, '\n'), 35,#space);
        compCityState         = strLFix(VendOutPaymRecord_RBC_Credit::getCityStateName(companyInfoAddress), 35, #space);
        compCountryZipCode    = strLFix(VendOutPaymRecord_RBC_Credit::getCountryZipCode(companyInfoAddress), 32, #space);

        iatAddressRecord           = conIns(iatAddressRecord, 1, recordCount +
                                                         recordType +
                                                         transactionCode +
                                                         clientNumber +
                                                         clientName     +
                                                         compAddress  +
                                                         compCityState  +
                                                         compCountryZipCode);

        return iatAddressRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillIATAddressInfoRecord2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares an IAT address record for output to the export file.
    /// </summary>
    /// <returns>
    /// A container that contains an IAT address record.
    /// </returns>
    private container fillIATAddressInfoRecord2()
    {
        LogisticsPostalAddress vendTableAddress;
        container   iatAddressRecord        =   conNull();
        #define.space(' ')
        #define.recType('C')
        #define.trxCode('AD2')
        #define.USTrxTypeCode('BUS')
        #define.CmpEntDesc('PAYABLES')

        str 6       recordCount                     = strRep(#zero, 6);
        str 1       recordType                      = #recType;
        str 3       transactionCode                 = #trxCode;
        str 10      clientNumber                    = strRep(#zero, 10);
        str 35      payeeAddress                    = strRep(#space,35);
        str 35      payeeCityState                  = strRep(#space,35);
        str 35      payeeCountryZipCode             = strRep(#space,35);
        str 3       usTransTypeCode                 = #USTrxTypeCode;
        str 10      companyEntryDesc                = #CmpEntDesc;
        str 14      fillerReserved;

        vendTableAddress    = VendTable::findByCompany(
                            custVendPaym.ledgerJournalTrans().Company,
                            custVendPaym.custVendTable().AccountNum).postalAddress();
        recordCount         = num2Str0(custVendOutPaym.parmRecord_Count(1), 6);
        clientNumber        = strLFix(custVendOutPaym.getRBCClientNumber(), 10);
        payeeAddress        = strLFix(strRem(vendTableAddress.Street, '\n'), 35, #space);
        payeeCityState      = strLFix(VendOutPaymRecord_RBC_Credit::getCityStateName(vendTableAddress), 35, #space);
        payeeCountryZipCode = strLFix(VendOutPaymRecord_RBC_Credit::getCountryZipCode(vendTableAddress), 35, #space);
        companyEntryDesc    = strLFix(#CmpEntDesc, 10, #space);
        fillerReserved      = strLFix(fillerReserved, 14, #space);

        iatAddressRecord    = conIns(iatAddressRecord, 1, recordCount    +
                                     recordType             +
                                     transactionCode        +
                                     clientNumber           +
                                     payeeAddress           +
                                     payeeCityState         +
                                     payeeCountryZipCode    +
                                     usTransTypeCode        +
                                     companyEntryDesc       +
                                     fillerReserved);

        return iatAddressRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls the data preparation and organization for each record in the export file.
    /// </summary>
    protected void fillRecord()
    {
        this.fillField01();
        this.fillField02();
        this.fillField03();
        this.fillField04();
        this.fillField05();
        this.fillField06();
        this.fillField07();
        this.fillField08_09();
        this.fillField10();
        this.fillField11();
        this.fillField12();
        this.fillField13();
        this.fillField14();
        this.fillField15();
        this.fillField16();
        this.fillField17();
        this.fillField18();
        this.fillField19();
        this.fillField20();
        this.fillField21();
        this.fillField22();
        this.fillField23();
        this.fillField24();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class properties that are required for each record in the export file.
    /// </summary>
    protected void initRecord()
    {
        rbcBasicPaymentRecord   =   conNull();
        basicPaymentRecord      =   strRep(#space, 152);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the specification to be displayed in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the specification to be displayed in the user interface.
    /// </returns>
    public PaymInterfaceName interfaceName()
    {
        return #interfaceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    public void output()
    {
        VendBankAccount vendBankAccount;

        custVendOutPaym.total(custVendPaym.paymAmountInForeignCurrency());
        this.initRecord();
        this.fillRecord();
        rbcBasicPaymentRecord = conIns(rbcBasicPaymentRecord, 1, basicPaymentRecord);
        file.writeExp(rbcBasicPaymentRecord);

        vendBankAccount = VendBankAccount::findByCompany(
            custVendPaym.ledgerJournalTrans().Company,
            custVendPaym.custVendTable().AccountNum,
            custVendPaym.custVendTable().BankAccountId);

        if (VendOutPaymRecord_RBC_Credit::isIATTransaction(vendBankAccount.Location))
        {
            file.writeExp(this.fillIATAddressInfoRecord1());
            file.writeExp(this.fillIATAddressInfoRecord2());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipPaymRecord</Name>
				<Source><![CDATA[
    public boolean parmSkipPaymRecord(boolean _skipPaymRecord = skipPaymRecord)
    {
        skipPaymRecord = _skipPaymRecord;
        return skipPaymRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes data to a specified position in the payment record.
    /// </summary>
    /// <param name="_fieldValue">
    /// The data to write to the payment record.
    /// </param>
    /// <param name="_fieldPosition">
    /// The position in the record to add data.
    /// </param>
    protected void strInsert(str _fieldValue, int _fieldPosition)
    {
        basicPaymentRecord = strPoke(basicPaymentRecord, _fieldValue, _fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIATAddressRecord</Name>
				<Source><![CDATA[
    private boolean validateIATAddressRecord()
    {
        boolean ok = true;
        AccountNum  accountNum;
        PaymMode    paymMode;
        LogisticsPostalAddress companyInfoAddress;
        LogisticsPostalAddress vendorAddress;

        paymMode    = custVendPaym.ledgerJournalTrans().PaymMode;
        accountNum  = custVendPaym.ledgerJournalTrans().parmAccount();
        companyInfoAddress = CompanyInfo::find().postalAddress();
        if (!companyInfoAddress.Street
            || !companyInfoAddress.City
            || !companyInfoAddress.CountryRegionId)
        {
            ok  = checkFailed(strFmt("@SYS332370", paymMode));
        }

        vendorAddress = VendTable::findByCompany(
                    custVendPaym.ledgerJournalTrans().Company,
                    accountNum).postalAddress();
        if (!vendorAddress.Street
            || !vendorAddress.City
            || !vendorAddress.CountryRegionId)
        {
            ok  = checkFailed(strFmt("@SYS332368", paymMode, accountNum));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCityStateName</Name>
				<Source><![CDATA[
    public static str getCityStateName(LogisticsPostalAddress _postalAddress)
    {
        str compCityState;

        if (_postalAddress.State)
        {
            compCityState   = _postalAddress.City +'*'+ _postalAddress.State + '\\';
        }
        else
        {
            if (_postalAddress.City)
            {
                compCityState   = _postalAddress.City + '\\';
            }
        }
        return compCityState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryZipCode</Name>
				<Source><![CDATA[
    public static str getCountryZipCode(LogisticsPostalAddress   _companyInfoAddress)
    {
        str countryZipCode;
        LogisticsAddressCountryRegionISOCode isoCode;

        isoCode = LogisticsAddressCountryRegion::find(_companyInfoAddress.CountryRegionId).isOcode;

        if (_companyInfoAddress.ZipCode)
        {
            countryZipCode   = isoCode +'*'+ _companyInfoAddress.ZipCode + '\\';
        }
        else
        {
            if (_companyInfoAddress.CountryRegionId)
            {
                countryZipCode   = isoCode + '\\';
            }
        }
        return countryZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIATTransaction</Name>
				<Source><![CDATA[
    public static boolean isIATTransaction(LogisticsLocationRecId  _recepientAddressRecId)
    {
        boolean returnValue = false;

        if (LogisticsAddressCountryRegion::find(LogisticsLocationEntity::location2PostalAddress(_recepientAddressRecId).CountryRegionId).isOcode == #USCountryISO)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>