<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrSchedulerJobSchedulingEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WrkCtrSchedulerJobSchedulingEngine</c> class is a C# job scheduling engine interface.
/// </summary>
class WrkCtrSchedulerJobSchedulingEngine implements WrkCtrSchedulerEngineInterface
{
    Microsoft.Dynamics.AX.Planning.JobScheduling.ISchedulingEngine          scheduleEngine;
    Microsoft.Dynamics.AX.Planning.JobScheduling.InteropEngineDataProvider  engineDataProvider;
    Microsoft.Dynamics.AX.Planning.JobScheduling.DataWriter                 scheduledDataWriter;

    WrkCtrSchedulerRuntimes     wrkCtrSchedulerRuntimes;
    WrkCtrScheduler             scheduler;
    private boolean isReqCalcResourceSchedulingRetryEnabled;

    #define.EngineInstantiation('EngineInstantiation')
    #define.DataProviderInstantiation('DataProviderInstantiation')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCapacityReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds reserved capacity information for a specific resource.
    /// </summary>
    /// <param name="_resourceId">
    ///    The resource identifier.
    /// </param>
    /// <param name="_fromDate">
    ///    The date for the start of the capacity reservation.
    /// </param>
    /// <param name="_toDate">
    ///    The date for the end of the capacity interval.
    /// </param>
    /// <param name="_capacityTime">
    ///    The reserved capacity in seconds.
    /// </param>
    /// <param name="_loadPct">
    ///    The resource load percentage.
    /// </param>
    /// <param name="_propertyMap">
    ///    A <c>Map</c> object that has the capacity reservation property map.
    /// </param>
    /// <remarks>
    ///    Calling this method lets the scheduling engine know when the resource is already booked.
    /// </remarks>
    public void addCapacityReservation(WrkCtrId         _resourceId,
                                       utcdatetime      _fromDate,
                                       utcdatetime      _toDate,
                                       CapacitySec      _capacityTime,
                                       WrkCtrLoadPct    _loadPct,
                                       Map              _propertyMap)
    {
        scheduleEngine.AddCapacityReservation(
            _resourceId,
            _fromDate,
            _toDate,
            _capacityTime,
            _loadPct,
            this.propertiesHashtable(_propertyMap));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConstraintEndsDelayed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the constraint that a job cannot end before another jobs end plus some delay time.
    /// </summary>
    /// <param name="_jobIdDelayed">
    ///    The job identifier for the job that has to be delayed.
    /// </param>
    /// <param name="_jobIdReference">
    ///    The job identifier for the reference job.
    /// </param>
    /// <param name="_endDelaySeconds">
    ///    A <c>Seconds</c> object that specifies the time interval by which the jobs end must be delayed
    ///    after another job ends.
    /// </param>
    public void addConstraintEndsDelayed(int64      _jobIdDelayed,
                                         int64      _jobIdReference,
                                         RealBase   _endDelaySeconds)
    {
        scheduleEngine.AddConstraintEndsDelayed(
            _jobIdDelayed,
            _jobIdReference,
            _endDelaySeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConstraintJobEndsAt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a contraint that a job should end at a specified date and time.
    /// </summary>
    /// <param name="_jobId">
    ///    The job ID.
    /// </param>
    /// <param name="_constraintLevel">
    ///    A constraint level that is used to stack constraints when scheduling. In the case of it not being
    ///    possible to schedule a sequence, the engine drops the constraints starting at the highest level and
    ///    tries again.
    /// </param>
    /// <param name="_jobEndTime">
    ///    The end date and time for the job.
    /// </param>
    public void addConstraintJobEndsAt(int64        _jobId,
                                       int          _constraintLevel,
                                       utcdatetime  _jobEndTime)
    {
        scheduleEngine.AddConstraintJobEndsAt(_jobId, _constraintLevel, _jobEndTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConstraintJobEndsAtOrAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a contraint that a job should end at or after a specified date/time.
    /// </summary>
    /// <param name="_jobId">Id of the job</param>
    /// <param name="_constraintLevel">Constraint level used for stacking constraints when scheduling. In case of not being possible to schedule a sequence the engine drops constraints starting at the highest level and tries again.</param>
    /// <param name="_earliestJobEndTime">The earliest end date and time for the job</param>
    public void addConstraintJobEndsAtOrAfter(int64          _jobId,
                                              int            _constraintLevel,
                                              utcdatetime    _earliestJobEndTime)
    {
        scheduleEngine.AddConstraintJobEndsAtOrAfter(_jobId, _constraintLevel, _earliestJobEndTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConstraintJobListWorkingTimeIntersect</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies a job capacity reservations intersection constraint for a list of jobs.
    /// </summary>
    /// <param name="_jobList">
    ///    A <c>System.Collections.ArrayList</c> object that specifies the list of jobs whose reservations
    ///    must use only the intersection working time.
    /// </param>
    public void addConstraintJobListWorkingTimeIntersect(List _jobList)
    {
        scheduleEngine.AddConstraintJobListWorkingTimeIntersect(this.jobsArrayList(_jobList));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConstraintJobOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Add a constraint that defines how jobs are sequenced when a given quantity
    ///     of an item can be moved between two resources while the first resource
    ///     is still not finished processing, so that the second resource can start processing.
    /// </summary>
    /// <param name="_jobIdOverlap">
    ///     Job identifier of the overlap job.
    /// </param>
    /// <param name="_jobIdPreviousProcessJob">
    ///     Job identifier of the job that will get part of its production moved
    ///     before it finished processing.
    /// </param>
    /// <param name="_jobIdNextProcessJob">
    ///     Job identifier of the next process job.
    /// </param>
    /// <param name="_processJobsTransferBatchTimeToProcessTimeRatio">
    ///     The ratio between the time it takes to process one transferrable batch
    ///     in the process jobs and total runtime of the same jobs.
    /// </param>
    /// <param name="_jobsBetweenOverlapAndNextProcess">
    ///     List of jobs belonging between the overlap job and the next operation process job.
    /// </param>
    public void addConstraintJobOverlap(
        int64 _jobIdOverlap,
        int64 _jobIdPreviousProcessJob,
        int64 _jobIdNextProcessJob,
        real _processJobsTransferBatchTimeToProcessTimeRatio,
        List _jobsBetweenOverlapAndNextProcess)
    {
        scheduleEngine.AddConstraintJobOverlap(
            _jobIdOverlap,
            _jobIdPreviousProcessJob,
            _jobIdNextProcessJob,
            _processJobsTransferBatchTimeToProcessTimeRatio,
            this.jobsArrayList(_jobsBetweenOverlapAndNextProcess));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConstraintJobStartsAt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a contraint that a job should start at a specified date and time.
    /// </summary>
    /// <param name="_jobId">
    ///    The job ID.
    /// </param>
    /// <param name="_constraintLevel">
    ///    A constraint level that is used to stack constraints when scheduling. In the case of it not being
    ///    possible to schedule a sequence, the engine drops the constraints starting at the highest level and
    ///    tries again.
    /// </param>
    /// <param name="_jobStartTime">
    ///    The start date and time for the job.
    /// </param>
    public void addConstraintJobStartsAt(int64          _jobId,
                                         int            _constraintLevel,
                                         utcdatetime    _jobStartTime)
    {
        scheduleEngine.AddConstraintJobStartsAt(
            _jobId,
            _constraintLevel,
            _jobStartTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConstraintMaxJobDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the constraint that a job can span over a specified maximal number of days.
    /// </summary>
    /// <param name="_jobId">
    ///    The job ID for the job that has to be constrained.
    /// </param>
    /// <param name="_maxJobDays">
    ///    The maximal number of days the job can span.
    /// </param>
    public void addConstraintMaxJobDays(int64   _jobId,
                                        int     _maxJobDays)
    {
        scheduleEngine.AddConstraintMaxJobDays(
            _jobId,
            _maxJobDays);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConstraintNotOnSameResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a constraint that the jobs should not be scheduled on the same resource.
    /// </summary>
    /// <param name="_jobId1">
    ///    The first jobs ID.
    /// </param>
    /// <param name="_jobId2">
    ///    The second jobs ID.
    /// </param>
    public void addConstraintNotOnSameResource(int64 _jobId1,
                                               int64 _jobId2)
    {
        scheduleEngine.AddConstraintNotOnSameResource(
            _jobId1,
            _jobId2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConstraintOnSameResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a constraint that both jobs are using the same resource.
    /// </summary>
    /// <param name="_jobId1">
    ///    The first jobs ID.
    /// </param>
    /// <param name="_jobId2">
    ///    The second jobs ID.
    /// </param>
    public void addConstraintOnSameResource(int64 _jobId1,
                                            int64 _jobId2)
    {
        scheduleEngine.AddConstraintOnSameResource(
            _jobId1,
            _jobId2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addConstraintResourceRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a constraint that the job must be scheduled on a specific resource.
    /// </summary>
    /// <param name="_jobId">
    ///    The first job ID.
    /// </param>
    /// <param name="_wrkCtrId">
    ///    The work center ID.
    /// </param>
    public void addConstraintResourceRequirement(int64    _jobId,
                                                 WrkCtrId _wrkCtrId)
    {
        scheduleEngine.AddConstraintResourceRequirement(
                                    _jobId,
            _wrkCtrId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobBindPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a job bind priority for a (job, constraint level) pair.
    /// </summary>
    /// <param name="_jobId">
    /// The job number in the sequence.
    /// </param>
    /// <param name="_constraintLevel">
    /// A constraint level that is used to stack constraints when scheduling.
    /// </param>
    /// <param name="_jobBindPriority">
    /// An integer value that specifies the job priority when binding its variables.
    /// </param>
    public void addJobBindPriority(int64    _jobId,
                                   int      _constraintLevel,
                                   int      _jobBindPriority)
    {
        scheduleEngine.AddJobBindPriority(
            _jobId,
            _constraintLevel,
            _jobBindPriority);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds capacity load information for a job.
    /// </summary>
    /// <param name="_jobId">
    /// The job ID.
    /// </param>
    /// <param name="_capacityRequired">
    /// The duration of the job.
    /// </param>
    /// <param name="_relativeResourceLoad">
    /// The resource load of the job.
    /// </param>
    /// <param name="_finiteCapacityEndDate">
    /// A date that indicates up to when capacity should be reserved.
    /// </param>
    /// <param name="_propertyMap">
    /// An instance of the <c>Map</c> class that specifies the job properties to match against the working
    /// time property. If this is empty then the working time properties is disregarded.
    /// </param>
    /// <param name="_scheduleFinite">
    /// A Boolean that specifies whether finite capacity scheduling is finished.
    /// </param>
    /// <param name="_ignoreResourceEfficiency">
    ///    A Boolean that specifies whether resource efficiency should be ignored; optional.
    /// </param>
    public void addJobCapacity(int64            _jobId,
                               CapacitySec      _capacityRequired,
                               WrkCtrLoadPct    _relativeResourceLoad,
                               utcdatetime      _finiteCapacityEndDate,
                               Map              _propertyMap,
                               boolean          _scheduleFinite,
                               boolean          _ignoreResourceEfficiency = false)
    {
        scheduleEngine.AddJobCapacity(
            _jobId,
            _capacityRequired,
            _relativeResourceLoad,
            _finiteCapacityEndDate,
            this.propertiesHashtable(_propertyMap),
            _scheduleFinite,
            _ignoreResourceEfficiency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobGoal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds job goal information for a specific constraint level.
    /// </summary>
    /// <param name="_jobId">
    ///    The job number in the sequence.
    /// </param>
    /// <param name="_constraintLevel">
    ///    A constraint level that is used to stack constraints when scheduling. In case of not being possible
    ///    to schedule a sequence the engine drops constraints starting at the highest level and tries again.
    /// </param>
    /// <param name="_jobGoal">
    ///    A <c>WrkCtrSchedulerGoal</c> value that specifies the job goal that controls the preferred
    ///    scheduling method.
    /// </param>
    public void addJobGoal(int64               _jobId,
                           int                 _constraintLevel,
                           WrkCtrSchedulerGoal _jobGoal)
    {
        scheduleEngine.AddJobGoal(
            _jobId,
            _constraintLevel,
            this.convertJobGoal(_jobGoal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a job information record that informs the engine about a job that should be scheduled.
    /// </summary>
    /// <param name="_jobId">
    ///    The job number in the sequence.
    /// </param>
    /// <param name="_jobGoal">
    ///    A <c>WrkCtrSchedulerGoal</c> that specifies the job goal that controls the preferred scheduling
    ///    method.
    /// </param>
    /// <param name="_useWorkingTimes">
    ///    A Boolean value that specifies whether the scheduling of the job should consider working times.
    /// </param>
    /// <param name="_reserveCapacity">
    ///    A Boolean value that specifies whether the job reserves capacity on the resource.
    /// </param>
    /// <remarks>
    ///    The properties of a job are as follows: identifier (the sequence that the job belongs to and number
    ///    in the sequence), property, and job goal.
    /// </remarks>
    public void addJobInfo(int64                        _jobId,
                           WrkCtrSchedulerGoal          _jobGoal,
                           boolean                      _useWorkingTimes,
                           boolean                      _reserveCapacity)
    {
        scheduleEngine.AddJobInfo(
            _jobId,
            this.convertJobGoal(_jobGoal),
            _useWorkingTimes,
            _reserveCapacity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobLink</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a link between 2 jobs.
    /// </summary>
    /// <param name="_jobId1">
    ///    The job number for the first job.
    /// </param>
    /// <param name="_jobId2">
    ///    The job number for the second job.
    /// </param>
    /// <param name="_link">
    ///    A <c>SchedJobLink</c> object that specifies the link: Start-Start, Start-End, End-Start, or End-End.
    /// </param>
    /// <param name="_linkType">
    ///    A <c>SchedJobLinkType</c> object that specifies whether the link is a hard or soft link.
    /// </param>
    public void addJobLink(int64            _jobId1,
                           int64            _jobId2,
                           SchedJobLink     _link,
                           SchedJobLinkType _linkType)
    {
        scheduleEngine.AddJobLink(
            _jobId1,
            _jobId2,
            _link,
            _linkType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobResourceCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a resource to the set of resources that may be used to perform a job.
    /// </summary>
    /// <param name="_jobId">
    ///    The Id of the job.
    /// </param>
    /// <param name="_resourceId">
    ///    A <c>WrkCtrId</c> value that contains the resource identifier.
    /// </param>
    /// <param name="_capacityRequired">
    ///    The duration of the job if it is scheduled using the resource.
    /// </param>
    /// <param name="_relativeResourceLoad">
    ///    The resource load if the job is scheduled using the resource
    /// </param>
    /// <param name="_finiteCapacityEndDate">
    ///    A date indicating up to when capacity should be reserved.
    /// </param>
    /// <param name="_propertyMap">
    ///    A <c>Map</c> that specifies the job properties to be matched agains working time property. If this
    ///    is empty then working time properties is disregarded.
    /// </param>
    /// <param name="_scheduleFinite">
    ///    A Boolean that specifies whether finite capacity scheduling is finished.
    /// </param>
    /// <param name="_ignoreResourceEfficiency">
    ///    A Boolean that specifies whether resource efficiency should be ignored; optional.
    /// </param>
    public void addJobResourceCapacity(int64            _jobId,
                                       str              _resourceId,
                                       CapacitySec      _capacityRequired,
                                       WrkCtrLoadPct    _relativeResourceLoad,
                                       utcdatetime      _finiteCapacityEndDate,
                                       Map              _propertyMap,
                                       boolean          _scheduleFinite,
                                       boolean          _ignoreResourceEfficiency = false)
    {
        scheduleEngine.AddJobResourceCapacity(
            _jobId,
            _resourceId,
            _capacityRequired,
            _relativeResourceLoad,
            _finiteCapacityEndDate,
            this.propertiesHashtable(_propertyMap),
            _scheduleFinite,
            _ignoreResourceEfficiency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobResourcePriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the priority to use when a job is scheduled on a resource.
    /// </summary>
    /// <param name="_jobId">
    ///    The ID of the job.
    /// </param>
    /// <param name="_resourceId">
    ///    A string value that contains the resource ID.
    /// </param>
    /// <param name="_priority">
    ///    The priority to use.
    /// </param>
    public void addJobResourcePriority(int64   _jobId,
                                       str     _resourceId,
                                       real    _priority   )
    {
        scheduleEngine.AddJobresourcePriority(
                            _jobId,
                            _resourceId,
            _priority);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobResourceRuntime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies a job time that is independent of the resource the job will be scheduled on.
    /// </summary>
    /// <param name="_jobId">
    ///    The job ID.
    /// </param>
    /// <param name="_resourceId">
    ///    The resource ID the job should be scheduled on.
    /// </param>
    /// <param name="_jobTime">
    ///    The job time, independent of the resource that will be picked for scheduling the job.
    /// </param>
    public void addJobResourceRuntime(int64     _jobId,
                                      str       _resourceId,
                                      RealBase  _jobTime)
    {
        scheduleEngine.AddJobResourceRuntime(
            _jobId,
            _resourceId,
            _jobTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobRuntime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies a job time that is independent of the resource on which the job will be scheduled.
    /// </summary>
    /// <param name="_jobId">
    ///    The job ID.
    /// </param>
    /// <param name="_jobTime">
    ///    The job time, independent of the resource that will be picked for scheduling the job.
    /// </param>
    /// <param name="_propertyMap">
    ///    An instance of the <c>Map</c> class  that specifies the job properties to match against the working
    ///    time property. If this is empty then the working time properties is disregarded.
    /// </param>
    public void addJobRuntime(int64     _jobId,
                              RealBase  _jobTime,
                              Map       _propertyMap)
    
    {
        scheduleEngine.AddJobRuntime(
            _jobId,
            _jobTime,
            this.propertiesHashtable(_propertyMap));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobSameReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a constraint that a job must have the same reservations as the primary job.
    /// </summary>
    /// <param name="_jobId">
    /// The Id of the job.
    /// </param>
    /// <param name="_primaryJobId">
    /// The Id of the primary job.
    /// </param>
    /// <param name="_applicableResources">
    /// A list of resources the job may be scheduled on.
    /// </param>
    /// <param name="_loadPct">
    /// The resource load percentage.
    /// </param>
    public void addJobSameReservations(int64            _jobId,
                                       int64            _primaryJobId,
                                       List             _applicableResources,
                                       WrkCtrLoadPct    _loadPct)
    {
        scheduleEngine.AddJobSameReservations(
                            _jobId,
                            _primaryJobId,
            this.resourceArrayList(_applicableResources),
            _loadPct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOptimizationGoal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds scheduling optimization goal.
    /// </summary>
    /// <param name="_goal">
    ///    A <c>WrkCtrSchedulerPrimaryResourceSelection</c> enumeration value that specifies the optimization
    ///    goal.
    /// </param>
    public void addOptimizationGoal(WrkCtrSchedulerPrimaryResourceSelection _goal)
    {
        scheduleEngine.AddOptimizationGoal(_goal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyToGroupAggregation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a property prefix to the set of properties used when capacity is aggregated.
    /// </summary>
    /// <param name="_propertyId">
    /// A property to use for aggregation.
    /// </param>
    public void addPropertyToGroupAggregation(str  _propertyId)
    {
        if (!this.isReqCalcResourceSchedulingRetryEnabled || !scheduleEngine.HasGroupAggregationProperty(_propertyId))
        {
            scheduleEngine.AddPropertyToGroupAggregation(_propertyId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a resource to the scheduling engine resource pool.
    /// </summary>
    /// <param name="_resourceId">
    /// A resource identifier.
    /// </param>
    /// <param name="_exclusive">
    /// true if the resource can only have one activity scheduled at a specific moment of time; otherwise, false.
    /// </param>
    /// <param name="_maxScheduleLoad">
    /// The maximal schedule load as percentage for the specified resource.
    /// </param>
    /// <param name="_workingTimesType">
    /// The type of resource.
    /// </param>
    /// <param name="_loadJobSchedulingCapacity">
    /// true if the existing capacity reservations for job scheduling should be loaded; otherwise, false.
    /// </param>
    /// <param name="_loadOperationSchedulingCapacity">
    /// true if the existing capacity reservations for job scheduling should be loaded; otherwise, false.
    /// </param>
    /// <param name="_effectivityPct">
    /// The effectiviy as percentage for the specified resource.
    /// </param>
    /// <remarks>
    /// The resource information should be used during scheduling the activities in order to determine which activities to be performed using which resources.
    /// </remarks>
    public void addResource(str                             _resourceId,
                            boolean                         _exclusive,
                            SchedPct                        _maxScheduleLoad,
                            WrkCtrSchedulerWorkingTimesType _workingTimesType,
                            boolean                         _loadJobSchedulingCapacity,
                            boolean                         _loadOperationSchedulingCapacity,
                            EffectivityPct                  _effectivityPct = 1.0)
    {
        if (!scheduleEngine.HasResource(_resourceId))
        {
            scheduleEngine.AddResource(
                _resourceId,
                _exclusive,
                _effectivityPct,
                _maxScheduleLoad,
                _workingTimesType,
                _loadJobSchedulingCapacity,
                _loadOperationSchedulingCapacity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a resource group to the scheduling engine resource group pool.
    /// </summary>
    /// <param name="_resourceGroupId">
    /// A resource group identifier.
    /// </param>
    /// <param name="_maxScheduleLoad">
    /// The maximal schedule load as percentage for the specified resource group.
    /// </param>
    /// <param name="_scheduleFinite">
    /// A Boolean that specifies whether finite capacity scheduling is done.
    /// </param>
    /// <param name="_finiteCapacityEndDate">
    /// A date indicating up to when capacity should be reserved.
    /// </param>
    public void addResourceGroup(
                                str         _resourceGroupId,
                                SchedPct    _maxScheduleLoad = 1.0,
                                boolean     _scheduleFinite = false,
                                utcdatetime _finiteCapacityEndDate = DateTimeUtil::newDateTime(dateNull(), 0) )
    {
        if (!scheduleEngine.HasResource(_resourceGroupId))
        {
            scheduleEngine.AddResourceGroup(
                _resourceGroupId,
                _maxScheduleLoad,
                _scheduleFinite,
                _finiteCapacityEndDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addResourceGroupMembership</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a resource as a member to an resource group.
    /// </summary>
    /// <param name="_resourceGroupId">
    ///    A resource group ID.
    /// </param>
    /// <param name="_resourceId">
    ///    A resource ID.
    /// </param>
    /// <param name="_fromDate">
    ///    The date for the start of the membership.
    /// </param>
    /// <param name="_toDate">
    ///    The date for the end of the membership.
    /// </param>
    public void addResourceGroupMembership(WrkCtrId    _resourceGroupId,
                                            WrkCtrId    _resourceId,
                                            utcdatetime _fromDate,
                                            utcdatetime _toDate )
    {
        scheduleEngine.AddResourceGroupMembership(
            _resourceGroupId,
            _resourceId,
            _fromDate,
            _toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorkingTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds working time intervals for a specific resource.
    /// </summary>
    /// <param name="_resourceId">
    ///    The resource ID.
    /// </param>
    /// <param name="_startTime">
    ///    The start of the working time interval.
    /// </param>
    /// <param name="_endTime">
    ///    The end of the working time interval.
    /// </param>
    /// <param name="_efficiency">
    ///    The efficiency at which the resource operates in the specified working time interval.
    /// </param>
    /// <param name="_propertyMap">
    ///    A <c>Map</c> object that has the working time property list that has their associated grades.
    /// </param>
    /// <remarks>
    ///    The working time intervals let the scheduling engine know when the resource is available for
    ///    scheduling.Jobs can only be scheduled on a resource in a period if the resource has working time
    ///    defined for that period.
    /// </remarks>
    public void addWorkingTime(WrkCtrId         _resourceId,
                               utcdatetime      _startTime,
                               utcdatetime      _endTime,
                               EffectivityPct   _efficiency,
                               Map              _propertyMap)
    {
        scheduleEngine.AddWorkingTime(
            _resourceId,
            _startTime,
            _endTime,
            _efficiency,
            this.propertiesHashtable(_propertyMap));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllCachedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the working times cache.
    /// </summary>
    public void clearAllCachedData()
    {
        scheduleEngine.ClearAllCachedData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertJobGoal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the <c>WrkCtrSchedulerGoal</c> value to
    ///    a<c>Microsoft.Dynamics.AX.Planning.JobScheduling.JobGoal</c> value.
    /// </summary>
    /// <param name="_jobGoal">
    ///    A <c>WrkCtrSchedulerGoal</c> value that specifies the job goal that controls the preferred
    ///    scheduling method.
    /// </param>
    /// <returns>
    ///    A <c>Microsoft.Dynamics.AX.Planning.JobScheduling.JobGoal</c> value.
    /// </returns>
    private Microsoft.Dynamics.AX.Planning.JobScheduling.JobGoal convertJobGoal(WrkCtrSchedulerGoal _jobGoal)
    {
        switch (_jobGoal)
        {
            case WrkCtrSchedulerGoal::LatestStartTime:
    
                return Microsoft.Dynamics.AX.Planning.JobScheduling.JobGoal::LatestStartTime;
    
            case WrkCtrSchedulerGoal::EarliestEndTime:
                return Microsoft.Dynamics.AX.Planning.JobScheduling.JobGoal::EarliestEndTime;
    
            default:
                throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged
    ///    resources.
    /// </summary>
    public void dispose()
    {
        try
        {
            if (scheduleEngine)
            {
                scheduleEngine.DisposeResources();
            }
        }
        catch (Exception::CLRError)
        {
            throw error("@SYS135501");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobSchedulingSequenceResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the scheduling result and the first error job for the sequence identified by a specific job.
    /// </summary>
    /// <param name="_jobId">
    ///    A job ID that indicates the sequence for which the error information is requested.
    /// </param>
    /// <returns>
    ///    A container with the result in the format [error reason, first error job ID, solution constraint
    ///    level].
    /// </returns>
    public container getJobSchedulingSequenceResult(int64 _jobId)
    {
        Microsoft.Dynamics.AX.Planning.JobScheduling.JobSchedulingSequenceResult    jobSchedulingSequenceResult;
        Microsoft.Dynamics.AX.Planning.JobScheduling.JobSchedulingError             jobSchedulingErrorCLR;
    
        WrkCtrJobSchedulingError    jobSchedulingError = WrkCtrJobSchedulingError::None;
        int64                       firstErrorJobId = 0;
        int                         solutionConstraintLevel;
    
        try
        {
            jobSchedulingSequenceResult = scheduleEngine.GetJobSchedulingSequenceResult(_jobId);
            jobSchedulingErrorCLR = jobSchedulingSequenceResult.get_JobSchedulingError();
    
            switch (CLRInterop::getAnyTypeForObject(jobSchedulingErrorCLR))
            {
                case CLRInterop::getAnyTypeForObject(Microsoft.Dynamics.AX.Planning.JobScheduling.JobSchedulingError::NoCapacityAvailable):
                    jobSchedulingError = WrkCtrJobSchedulingError::NotEnoughCapacity;
                    break;
    
                case CLRInterop::getAnyTypeForObject(Microsoft.Dynamics.AX.Planning.JobScheduling.JobSchedulingError::Timeout):
                    jobSchedulingError = WrkCtrJobSchedulingError::Timeout;
                    break;
    
                case CLRInterop::getAnyTypeForObject(Microsoft.Dynamics.AX.Planning.JobScheduling.JobSchedulingError::CyclicSequenceGraph):
                    jobSchedulingError = WrkCtrJobSchedulingError::CyclicGraph;
                    break;
    
                case CLRInterop::getAnyTypeForObject(Microsoft.Dynamics.AX.Planning.JobScheduling.JobSchedulingError::InternalError):
                    jobSchedulingError = WrkCtrJobSchedulingError::InternalError;
                    break;

                default:
                    break;
            }
    
            firstErrorJobId = any2int64(CLRInterop::getAnyTypeForObject(jobSchedulingSequenceResult.get_FirstErrorJobId()));
    
            solutionConstraintLevel = any2int(CLRInterop::getAnyTypeForObject(jobSchedulingSequenceResult.get_SolutionConstraintLevel()));
        }
        catch (Exception::CLRError)
        {
            throw error("@SYS135501");
        }
    
        return [jobSchedulingError, firstErrorJobId, solutionConstraintLevel];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new data provider object.
    /// </summary>
    /// <returns>A new data provider.</returns>
    protected WrkCtrSchedulingInteropDataProvider createDataProvider()
    {
        return WrkCtrSchedulingInteropDataProvider::newWrkCtrCapResHandler(scheduler.parmCapResHandler());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the job scheduling engine class.
    /// </summary>
    /// <param name="_loggingOptions">
    ///     An object with logging parameters; optional.
    /// </param>
    /// <param name="_dataProvider">
    ///     A data provider object; optional.
    /// </param>
    protected void init(Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingOptions _loggingOptions = null, WrkCtrSchedulingInteropDataProvider _dataProvider = null)
    {
        try
        {
            WrkCtrSchedulingInteropDataProvider dataProvider = _dataProvider;
            
            if (!dataProvider)
            {
                dataProvider = this.createDataProvider();
            }
            
            wrkCtrSchedulerRuntimes.startMeasurement(#DataProviderInstantiation);
            engineDataProvider = new Microsoft.Dynamics.AX.Planning.JobScheduling.InteropEngineDataProvider(dataProvider);
            wrkCtrSchedulerRuntimes.endMeasurement(#DataProviderInstantiation);
            if (!engineDataProvider)
            {
                throw error("@SYS133607");
            }
    
            scheduledDataWriter = new Microsoft.Dynamics.AX.Planning.JobScheduling.DataWriter(scheduler);
    
            wrkCtrSchedulerRuntimes.startMeasurement(#EngineInstantiation);
                
            scheduleEngine = Microsoft.Dynamics.AX.Planning.JobScheduling.JobSchedulingEngineInteropFactory::CreateJobSchedulingEngine(engineDataProvider, scheduledDataWriter, _loggingOptions);
    
            wrkCtrSchedulerRuntimes.endMeasurement(#EngineInstantiation);
            if (!scheduleEngine)
            {
                throw error("@SYS133607");
            }
        }
        catch (Exception::CLRError)
        {
            throw error("@SYS135501");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.isReqCalcResourceSchedulingRetryEnabled = ReqCalcResourceSchedulingRetryToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduler</Name>
				<Source><![CDATA[
    public WrkCtrScheduler parmScheduler(WrkCtrScheduler _scheduler = scheduler)
    {
        scheduler = _scheduler;
        return scheduler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWrkCtrSchedulerRuntimes</Name>
				<Source><![CDATA[
    public WrkCtrSchedulerRuntimes parmWrkCtrSchedulerRuntimes(WrkCtrSchedulerRuntimes _wrkCtrSchedulerRuntimes = wrkCtrSchedulerRuntimes)
    {
        wrkCtrSchedulerRuntimes = _wrkCtrSchedulerRuntimes;
        return wrkCtrSchedulerRuntimes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareCapacityCheckIntervals</Name>
				<Source><![CDATA[
    public guid prepareCapacityCheckIntervals()
    {
        return scheduleEngine.PrepareCapacityCheckIntervals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers a reset of the scheduling engine, preparing it for a new scheduling run.
    /// </summary>
    public void reset()
    {
        scheduleEngine.RemoveAllJobs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Schedules all loaded jobs and returns the error code.
    /// </summary>
    /// <param name="_sequenceScheduleRuntimeLimit">
    ///    The time, in milliseconds, that the scheduling engine can run for a job sequence until giving up on
    ///    scheduling it. If this parameter is -1 no time limit is used.
    /// </param>
    /// <param name="_sequenceOptimizationRuntimeLimit">
    ///    The time, in milliseconds, that the scheduling engine can spend on optimizing a sequence. If this
    ///    parameter is -1 no time limit is used.
    /// </param>
    /// <returns>
    ///    An integer value that contains the error status of the run; 0 means no error.
    /// </returns>
    public int run(int  _sequenceScheduleRuntimeLimit,
                   int  _sequenceOptimizationRuntimeLimit)
    {
        try
        {
            return scheduleEngine.Run(_sequenceScheduleRuntimeLimit,
                                      _sequenceOptimizationRuntimeLimit);
        }
        catch (Exception::CLRError)
        {
            throw error("@SYS135501");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleJobOnResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks a job for scheduling on the resource group level.
    /// </summary>
    /// <param name="_jobId">
    /// The identifier of the job to schedule on the resource group level.
    /// </param>
    /// <param name="_groupProperties">
    /// A <c>Map</c> containing the required properties for the group working time intervals.
    /// </param>
    public void scheduleJobOnResourceGroup(int64    _jobId,
                                           Map      _groupProperties)
    {
        scheduleEngine.ScheduleJobOnResourceGroup(
            _jobId,
            this.propertiesHashtable(_groupProperties));
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobResourcePreemptionAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets whether preemption is allowed for a job on a resource.
    /// </summary>
    /// <param name="_jobId">
    ///    The ID of the job.
    /// </param>
    /// <param name="_resourceId">
    ///    The resource ID.
    /// </param>
    /// <param name="_allowPreemption">
    ///    A <c>boolean</c> value that determines if engine is allowed to schedule the job in non-contiguous capacity slots.
    /// </param>
    public void setJobResourcePreemptionAllowed(int64   _jobId,
                                                str     _resourceId,
                                                boolean _allowPreemption )
    {
        scheduleEngine.SetJobResourcePreemptionAllowed(
                            _jobId,
                            _resourceId,
            _allowPreemption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrimaryParallelJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds information about what job is the primary job in a set of parallel jobs.
    /// </summary>
    /// <param name="_jobId">The job Id of the secondary job.</param>
    /// <param name="_jobIdPrimary">The job Id of the primary job.</param>
    public void setPrimaryParallelJob(int64 _jobId, int64 _jobIdPrimary)
    {
        scheduleEngine.SetPrimaryParallelJob(_jobId, _jobIdPrimary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequiredNumberOfResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the number of resources required to schedule a job.
    /// </summary>
    /// <param name="_jobId">
    /// The ID of the job to schedule.
    /// </param>
    /// <param name="_requiredNumber">
    /// The number of resources required to schedule the job.
    /// </param>
    public void setRequiredNumberOfResources(int64 _jobId, int _requiredNumber)
    {
        scheduleEngine.SetRequiredNumberOfResources(
            _jobId,
            _requiredNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReservationsTimeStamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends a timestamp to the engine that should be set on all new capacity reservations for the scheduled jobs in the engine's cache.
    /// </summary>
    /// <param name="_mostRecentTimestamp">
    /// The timestamp to use for the engine reservations.
    /// </param>
    public void setReservationsTimeStamp(int64  _mostRecentTimestamp)
    {
        scheduleEngine.SetReservationsTimeStamp(_mostRecentTimestamp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupLogging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instructs the engine to initialize logging.
    /// </summary>
    /// <param name="_options">
    ///     An object with logging parameters.
    /// </param>
    public void setupLogging(Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingOptions _options)
    {
        scheduleEngine.SetupLogging(_options);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFlightStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the flight is enabled or disabled.
    /// </summary>
    /// <param name="_flight">Flight name.</param>
    /// <param name="_isEnabled">Boolean indicates if the flight is enabled.</param>
    public void setFlightStatus(str _flight, boolean _isEnabled)
    {
        scheduleEngine.SetFlightStatus(_flight, _isEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishLogging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instructs the engine to finalize logging.
    /// </summary>
    /// <param name="_options">
    ///     An object with logging parameters; optional.
    /// </param>
    public void finishLogging(Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingOptions _options)
    {
        scheduleEngine.FinishLogging(_options);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJobCapacityReservations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the capacity reservations for all the jobs stored by the engine.
    /// </summary>
    /// <param name="_conflictCheckSessionId">
    /// The session ID to check capacity conflicts.
    /// </param>
    /// <returns>
    ///    An array list that contains the jobs that failed validation.
    /// </returns>
    public System.Collections.ArrayList validateJobCapacityReservations(guid _conflictCheckSessionId)
    {
        return scheduleEngine.ValidateJobCapacityReservations(_conflictCheckSessionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeScheduledData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the job data and the capacity reservations to the database.
    /// </summary>
    public void writeScheduledData()
    {
        try
        {
            scheduleEngine.WriteScheduledData();
        }
        catch (Exception::CLRError)
        {
            throw error("@SYS135501");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WrkCtrSchedulerJobSchedulingEngine construct()
    {
        return new WrkCtrSchedulerJobSchedulingEngine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastClrException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last CLR exception.
    /// </summary>
    /// <param name="_includeStackTrace">
    /// A Boolean flag that indicates whether the stack trace is returned.
    /// </param>
    /// <returns>
    /// The last CLR exception.
    /// </returns>
    public static str getLastClrException(boolean _includeStackTrace = true)
    {
        System.Exception                outerException;
        System.Exception                innerException;
        str                             message;
        System.Collections.IDictionary  dataDict;
        System.String                   labelFromException;
        str                             stackTrace;
        
        message = "@SYS135501";
    
        outerException = CLRInterop::getLastException();
        if (outerException != null)
        {
            ApplicationUnhandledExceptionLogger::logCLRException(outerException);
            message = outerException.get_Message();
            stackTrace = outerException.get_StackTrace();
    
            // Strip away the outer exception to get to the exception thrown by the engine.
            innerException = outerException.get_InnerException();
            if (innerException != null)
            {
                message = innerException.get_Message();
                stackTrace = innerException.get_StackTrace();
                dataDict = innerException.get_Data();
                if (dataDict != null)
                {
                    labelFromException = dataDict.get_Item('AXLABEL');
                    if (labelFromException != null)
                    {
                        message = labelFromException;
                        message = SysLabel::labelId2String2(message);
                    }
                }
            }
        }
    
        if (_includeStackTrace && stackTrace)
        {
            message += '\n' + stackTrace;
        }
    
        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSchedulingEngine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a job schedule object and assigns an instance of a runtime measurement class to it.
    /// </summary>
    /// <param name="_wrkCtrSchedulerRuntimes">
    ///    An instance of the <c>WrkCtrSchedulerRuntimes</c> class to use to perform the runtime measurements
    ///    of the events.
    /// </param>
    /// <param name="_scheduler">
    ///    A <c>WrkCtrScheduler</c> class instance to pass to the data writer instance.
    /// </param>
    /// <param name="_loggingOptions">
    ///     An object with logging parameters; optional.
    /// </param>
    /// <param name="_dataProvider">
    ///     A data provider object; optional.
    /// </param>
    /// <returns>
    ///    A <c>WrkCtrSchedulerJobSchedulingEngine</c> object instance.
    /// </returns>
    public static WrkCtrSchedulerJobSchedulingEngine newSchedulingEngine(WrkCtrSchedulerRuntimes _wrkCtrSchedulerRuntimes,
                                                                         WrkCtrScheduler         _scheduler,
                                                                         Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingOptions _loggingOptions = null,
                                                                         WrkCtrSchedulingInteropDataProvider _dataProvider = null)
    {
        WrkCtrSchedulerJobSchedulingEngine wrkCtrSchedulerJobSchedulingEngine = WrkCtrSchedulerJobSchedulingEngine::construct();
    
        wrkCtrSchedulerJobSchedulingEngine.parmScheduler(_scheduler);
        wrkCtrSchedulerJobSchedulingEngine.parmWrkCtrSchedulerRuntimes(_wrkCtrSchedulerRuntimes);
        wrkCtrSchedulerJobSchedulingEngine.init(_loggingOptions, _dataProvider);
    
        return wrkCtrSchedulerJobSchedulingEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobsArrayList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an ArrayList with the elements of the provided List of job IDs.
    /// </summary>
    /// <param name = "_jobList">
    ///     The list of jobs.
    /// </param>
    /// <returns>
    ///     The newly-created ArrayList of job IDs.
    /// </returns>
    protected System.Collections.ArrayList jobsArrayList(List _jobList)
    {
        System.Collections.ArrayList result = new System.Collections.ArrayList(_jobList.elements());
        ListEnumerator en = _jobList.getEnumerator();

        while (en.moveNext())
        {
            result.Add(en.current());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertiesHashtable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a Hashtable with the contents of the given property Map.
    /// </summary>
    /// <param name = "_propertyMap">
    ///     A Map from property name (string) to property grade (real).
    /// </param>
    /// <returns>
    ///     A Hashtable with string keys and double values.
    /// </returns>
    protected System.Collections.Hashtable propertiesHashtable(Map _propertyMap)
    {
        System.Collections.Hashtable result = new System.Collections.Hashtable(_propertyMap.elements());
        MapEnumerator mapEnumerator = _propertyMap.getEnumerator();
        str key;
        System.Double val;

        while (mapEnumerator.moveNext())
        {
            key = mapEnumerator.currentKey();
            val = mapEnumerator.currentValue();

            result.Add(key, val);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceArrayList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an ArrayList with the same contents as the given List of resource names.
    /// </summary>
    /// <param name = "_resourceList">
    ///     A List of resource names.
    /// </param>
    /// <returns>
    ///     A newly-created ArrayList with the contents of the provided List.
    /// </returns>
    protected System.Collections.ArrayList resourceArrayList(List _resourceList)
    {
        System.Collections.ArrayList result = new System.Collections.ArrayList(_resourceList.elements());
        ListEnumerator en = _resourceList.getEnumerator();

        while (en.moveNext())
        {
            result.Add(en.current());
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>