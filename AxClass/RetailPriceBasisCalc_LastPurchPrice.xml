<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceBasisCalc_LastPurchPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Price basis calculation using last purchase price model.
/// </summary>
/// <remarks>
/// Uses vendor invoice line sorted by posting date as source for basis price.
/// </remarks>
[RetailPriceBasisCalcExtensionAttribute(RetailPriceBasisType::LastPurchasePrice)]
class RetailPriceBasisCalc_LastPurchPrice extends RetailPriceBasisCalc_SalesPurch
{
    VendInvoiceTrans    invoiceTrans;
    VendInvoiceJour     invoiceJour;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePriceCurrencyFrom</Name>
				<Source><![CDATA[
    [HookableAttribute]
    protected void calculatePriceCurrencyFrom()
    {
        PurchPrice  purchPrice;

        this.fetchInvoiceData();

        if (invoiceTrans.RecId)
        {
            currencyCodeOrig    = invoiceTrans.CurrencyCode;
            unitIdFrom          = invoiceTrans.PurchUnit;

            if (invoiceTrans.PurchPrice)
            {
                purchPrice = invoiceTrans.PurchPrice;
            }
            else
            {
                purchPrice = PriceDisc::amount2Price(invoiceTrans.LineAmount,
                                                     invoiceTrans.DiscPercent,
                                                     invoiceTrans.PurchMarkup,
                                                     invoiceTrans.Qty,
                                                     invoiceTrans.DiscAmount,
                                                     invoiceTrans.PriceUnit,
                                                     invoiceTrans.CurrencyCode,
                                                     invoiceTrans.PurchPrice);
            }

            this.convertPriceUnits(purchPrice, invoiceTrans.PriceUnit, invoiceTrans.Qty);
        }
        else
        {
            this.calculateItemPrice(ModuleInventPurchSales::Purch);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchInvoiceData</Name>
				<Source><![CDATA[
    private void fetchInvoiceData()
    {
        QueryRun qr = new QueryRun(this.lastVendInvoiceQuery());

        qr.next();
        invoiceTrans = qr.get(tableNum(VendInvoiceTrans));
        invoiceJour  = qr.get(tableNum(VendInvoiceJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastVendInvoiceQuery</Name>
				<Source><![CDATA[
    private Query lastVendInvoiceQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbdsInvoiceJournal,
                                qbdsInvoiceTrans,
                                qbdsInventDim;

        InventDim           inventDimInRule, inventDimEmpty;

        #define.MoreThenZero(">0")

        query = new Query();
        qbdsInvoiceTrans = query.addDataSource(tableNum(VendInvoiceTrans));

        qbdsInvoiceTrans.addSelectionField(fieldNum(VendInvoiceTrans, PurchPrice));
        qbdsInvoiceTrans.addSelectionField(fieldNum(VendInvoiceTrans, PriceUnit));
        qbdsInvoiceTrans.addSelectionField(fieldNum(VendInvoiceTrans, PurchUnit));
        qbdsInvoiceTrans.addSelectionField(fieldNum(VendInvoiceTrans, Qty));
        qbdsInvoiceTrans.addSelectionField(fieldNum(VendInvoiceTrans, LineAmount));
        qbdsInvoiceTrans.addSelectionField(fieldNum(VendInvoiceTrans, DiscPercent));
        qbdsInvoiceTrans.addSelectionField(fieldNum(VendInvoiceTrans, PurchMarkup));
        qbdsInvoiceTrans.addSelectionField(fieldNum(VendInvoiceTrans, DiscAmount));
        qbdsInvoiceTrans.addSelectionField(fieldNum(VendInvoiceTrans, CurrencyCode));

        qbdsInvoiceTrans.firstOnly(true);

        qbdsInvoiceTrans.addSortField(fieldNum(VendInvoiceTrans, InventDate), SortOrder::Descending);
        qbdsInvoiceTrans.addSortField(fieldNum(VendInvoiceTrans, CreatedDateTime), SortOrder::Descending);

        findOrCreateRange_W(qbdsInvoiceTrans, fieldNum(VendInvoiceTrans, ItemID), queryValue(itemId));
        findOrCreateRange_W(qbdsInvoiceTrans, fieldNum(VendInvoiceTrans, InventDate), SysQuery::range(dateNull(), datePrice));

        if (currencyCodeFrom)
        {
            findOrCreateRange_W(qbdsInvoiceTrans, fieldNum(VendInvoiceTrans, CurrencyCode), queryValue(currencyCodeFrom));
        }

        if (inventDim && (inventDim.inventDimId != InventDim::inventDimIdBlank()))
        {
            inventDimInRule = InventDim::find(inventDim.inventDimId);

            if (!InventDim::isInventDimEqual(inventDimInRule, inventDimEmpty))
            {
                qbdsInventDim = qbdsInvoiceTrans.addDataSource(tableNum(InventDim));
                qbdsInventDim.relations(true);
                qbdsInventDim.joinMode(JoinMode::ExistsJoin);
                InventDim::queryAddRange(qbdsInventDim, inventDimInRule);
            }
        }

        qbdsInvoiceJournal = qbdsInvoiceTrans.addDataSource(tableNum(VendInvoiceJour));
        qbdsInvoiceJournal.relations(true);
        qbdsInvoiceJournal.addSelectionField(fieldNum(VendInvoiceJour, RecId));
        qbdsInvoiceJournal.fetchMode(QueryFetchMode::One2One);
        qbdsInvoiceJournal.firstOnly(true);

        findOrCreateRange_W(qbdsInvoiceJournal, fieldNum(VendInvoiceJour, InvoiceAmount), queryValue(#MoreThenZero));

        if (accountId)
        {
            findOrCreateRange_W(qbdsInvoiceJournal, fieldNum(VendInvoiceJour, InvoiceAccount), queryValue(accountId));
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>