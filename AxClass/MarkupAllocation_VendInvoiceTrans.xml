<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAllocation_VendInvoiceTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
[MarkupAllocationTableNameFactoryAttribute(tableStr(VendInvoiceJour))]
public class MarkupAllocation_VendInvoiceTrans extends MarkupAllocation
{
    VendInvoiceTrans    vendInvoiceTrans;
    boolean             isTmpTablePopulated;

    private InvoiceDate invoiceDate;
    private NumberSequenceGroupId numberSequenceGroup;
    private PurchInternalInvoiceId internalInvoiceId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAllocate</Name>
				<Source><![CDATA[
    public boolean canAllocate()
    {
        // <GEERU>
        #ISOcountryRegionCodes

        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        boolean found;

        if (countryRegion_RU)
        {
            this.initValues();
            switch (this.checkCostAdjustmentLock_RU())
            {
                case UnknownNoYes::Unknown:
                    return false;
                case UnknownNoYes::Yes:
                    found = true;
                    break;
            }

            if (!this.checkCustomJournal_RU())
            {
                return false;
            }

            if (found)
            {
                return Box::okCancel("@SYS120663", DialogButton::Cancel) == DialogButton::Ok;
            }

            return true;
        }
        else
        {
            // </GEERU>
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomJournalPosted_RU</Name>
				<Source><![CDATA[
    public boolean checkCustomJournalPosted_RU(boolean _showWarning = false)
    {
        CustomJournalTable_RU   customJournalTable;
        CustomJournalTrans_RU   customJournalTrans;

        select firstonly DlvTermId, CustomJournalStatus from customJournalTable
        exists join customJournalTrans
            where customJournalTrans.CustomJournalId                == customJournalTable.CustomJournalId
                  && customJournalTrans.SalesPurchInventTransId     == vendInvoiceTrans.InventTransId
                  && customJournalTrans.SalesPurchId                == vendInvoiceTrans.PurchID;

        if (customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Posted && customJournalTable.DlvTermId)
        {
            if (MarkupDlvTermConnection_RU::exist(customJournalTable.DlvTermId, markupTransAllocate.MarkupCode))
            {
                if (_showWarning)
                {
                    warning(strfmt("@GLS115427", markupTransAllocate.MarkupCode, vendInvoiceTrans.LineNum));
                }

                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAdjustmentLocked_RU</Name>
				<Source><![CDATA[
    protected boolean costAdjustmentLocked_RU()
    {
        return vendInvoiceTrans.inventDim().inventProfile_RU().LockCostAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return vendInvoiceTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>MarkupAllocation</c> form.
    /// </summary>
    /// <returns>
    ///    An initialized <c>FormRun</c> object.
    /// </returns>
    Object dialog()
    {
        Args parameters = this.createArgsForDialog();
         
        FormRun markUpAllocation = this.createDialog(parameters);
        markUpAllocation.init();
        markUpAllocation.run();
        markUpAllocation.wait();
        if (markUpAllocation.closedOk())
        {
            return markUpAllocation;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createArgsForDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>Args</c> class for the dialog.
    /// </summary>
    /// <returns>The created <c>Args</c> class.</returns>
    protected Args createArgsForDialog()
    {
        Args parameters = new Args();

        parameters.name(formstr(MarkUpAllocation_VendInvoiceTrans));
        parameters.caller(this);
        parameters.record(source);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the dialog.
    /// </summary>
    /// <param name = "_args">The arguments for the dialog.</param>
    /// <returns>The dialog.</returns>
    protected FormRun createDialog(Args _args)
    {
        return classfactory.formRunClass(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkupTransFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>MarkupTrans</c> record from the line to which it is allocated.
    /// </summary>
    protected void initMarkupTransFromLine()
    {
        markupTrans.initFromVendInvoiceTrans(vendInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs initialization.
    /// </summary>
    protected void initValues()
    {
        VendInvoiceJour vendInvoiceJour = source;
        purchId = vendInvoiceJour.PurchId;
        invoiceId = vendInvoiceJour.InvoiceId;
        invoiceDate = vendInvoiceJour.InvoiceDate;
        numberSequenceGroup = vendInvoiceJour.numberSequenceGroup;
        internalInvoiceId = vendInvoiceJour.InternalInvoiceId;
        this.parmInterCompanyDirectDelivery(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCategoryWeight_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns unit weight of the category based item.
    /// </summary>
    /// <returns>
    /// The gross weight of the item.
    /// </returns>
    protected ItemGrossWeight inventCategoryWeight_RU()
    {
        return PurchLineForeignTradeCategory::find(vendInvoiceTrans.InventTransId, vendInvoiceTrans.DataAreaId).UnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    protected Qty inventQty()
    {
        Qty ret = this.qty();

        if (vendInvoiceTrans.ItemId && vendInvoiceTrans.PurchUnit)
        {
            ret = InventTableModule::unitConvert(vendInvoiceTrans.ItemId,
                                                 ModuleInventPurchSales::Invent,
                                                 vendInvoiceTrans.PurchUnit,
                                                 ret,
                                                 vendInvoiceTrans.InventDimId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable_RU</Name>
				<Source><![CDATA[
    protected InventTable inventTable_RU()
    {
        return vendInvoiceTrans.inventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    AmountCur lineAmount()
    {
        return vendInvoiceTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkToIntercompanyInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>MarkupTrans</c> must be linked to intercompany invoices.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    protected boolean linkToIntercompanyInvoice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    Qty qty()
    {
        return vendInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>QueryRun</c> object to use to determine which posted invoice lines are the target
    ///    of the allocation.
    /// </summary>
    /// <returns>
    ///    A <c>QueryRun</c> object that has the appropriate query ranges applied to it.
    /// </returns>
    QueryRun queryBuild()
    {
        QueryRun query = new QueryRun(querystr(VendInvoiceTrans));
        query.query().dataSourceTable(tablenum(VendInvoiceTrans)).rangeField(fieldnum(VendInvoiceTrans, PurchID)).value(queryValue(purchId));
        query.query().dataSourceTable(tablenum(VendInvoiceTrans)).rangeField(fieldnum(VendInvoiceTrans, InvoiceId)).value(queryValue(invoiceId));
        query.query().dataSourceTable(tablenum(VendInvoiceTrans)).addRange(fieldnum(VendInvoiceTrans, LineType)).value(SysQuery::valueNot(PurchInvoiceLineType::AdvanceApplication));
        query.query().dataSourceTable(tablenum(VendInvoiceTrans)).addRange(fieldnum(VendInvoiceTrans, LineType)).value(SysQuery::valueNot(PurchInvoiceLineType::ReverseAdvanceApplication));
        query.query().dataSourceTable(tablenum(VendInvoiceTrans)).addRange(fieldnum(VendInvoiceTrans, numberSequenceGroup)).value(queryValue(numberSequenceGroup));
        query.query().dataSourceTable(tablenum(VendInvoiceTrans)).addRange(fieldnum(VendInvoiceTrans, InternalInvoiceId)).value(queryValue(internalInvoiceId));
        query.query().dataSourceTable(tablenum(VendInvoiceTrans)).addRange(fieldNum(VendInvoiceTrans, InvoiceDate)).value(queryValue(invoiceDate));

        if (allocationRecIds != null && allocationRecIds.elements())
        {
            if (!isTmpTablePopulated)
            {
                this.populateMarkupTmpAllocation();
                isTmpTablePopulated = true;
            }
            query.query().dataSourceTable(tablenum(VendInvoiceTrans)).addDataSource(markupTmpAllocation);
            query.setRecord(markupTmpAllocation);
            query.query().dataSourceTable(tablenum(MarkupTmpAllocation)).addLink(fieldnum(VendInvoiceTrans, RecId), fieldnum(MarkupTmpAllocation, MarkupAllocationRecId));
            query.query().dataSourceTable(tablenum(MarkupTmpAllocation)).joinMode(JoinMode::ExistsJoin);
        }

        if (allocateInventoried)
        {
            query.query().dataSourceTable(tablenum(VendInvoiceTrans)).addRange(fieldnum(VendInvoiceTrans, StockedProduct)).value(enum2str(NoYes::Yes));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    Common queryGet(QueryRun _transact)
    {
        vendInvoiceTrans= _transact.get(tablenum(VendInvoiceTrans));

        return vendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcCustomJournal_RU</Name>
				<Source><![CDATA[
    public void recalcCustomJournal_RU()
    {
        CustomJournalCalc_RU    customJournalCalc;
        CustomJournalTable_RU   customJournalTable;
        CustomJournalTrans_RU   customJournalTrans;

        while select customJournalTable
        exists join customJournalTrans
            where customJournalTable.CustomJournalId               == customJournalTrans.CustomJournalId
                  && customJournalTrans.InvoiceId                  == vendInvoiceTrans.InvoiceId
                  && customJournalTrans.InvoiceDate                == vendInvoiceTrans.InvoiceDate
                  && customJournalTrans.SalesPurchId               == vendInvoiceTrans.PurchID
                  && customJournalTrans.SalesPurchInventTransId    == vendInvoiceTrans.InventTransId
        {
            customJournalCalc = CustomJournalCalc_RU::construct();
            customJournalCalc.initFromTable(customJournalTable);
            customJournalCalc.recalc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTransFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>MarkupTrans</c> fields before creating the record.
    /// </summary>
    protected void setMarkupTransFields()
    {
        super();
        markupTrans.TransDate = postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    void setParameters(MarkupAllocateAfter   _allocateAfter,
                       MarkupAllocateOn      _allocateOn,
                       DlvDate               _postingDate,
                       NoYes                 _storno,
                       boolean               _allocateInventoried)
    {
        allocateAfter       = _allocateAfter;
        allocateOn          = _allocateOn;
        postingDate         = _postingDate;
        storno              = _storno;
        allocateInventoried = _allocateInventoried;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTrans</Name>
				<Source><![CDATA[
    boolean  validateTrans()
    {
        boolean ok = super();

        if (ok)
        {
            ok = markupTransAllocate.checkMarkupCodeAdjustment();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour</Name>
				<Source><![CDATA[
    VendInvoiceJour vendInvoiceJour()
    {
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weight_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines weight of the item or category in the invoice line.
    /// </summary>
    /// <returns>
    /// Weight of the item or category in the invoice line.
    /// </returns>
    protected Weight weight_RU()
    {
        ItemGrossWeight ret;
        InventTable     inventTable = this.inventTable_RU();

        if (inventTable)
        {
            ret = super();
        }
        else
        {
            ret = vendInvoiceTrans.Weight;
        }

        return ret ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MarkupAllocation_VendInvoiceTrans construct()
    {
        return new MarkupAllocation_VendInvoiceTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>