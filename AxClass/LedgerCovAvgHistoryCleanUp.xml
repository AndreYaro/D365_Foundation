<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovAvgHistoryCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCovAvgHistoryCleanUp</c> class contains the shared logic for cleaning the tables
/// populated by the <c>LedgerCovAvgPopulator</c> class.
/// </summary>
internal final class LedgerCovAvgHistoryCleanUp
{
    private LedgerCovAvgIExecutionContext context;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void run()
    {
        TransDate cutOffDateInThePast = LedgerCovAvgPopulatorHelper::offsetCompanyDateInPast(LedgerCovAvgConstants::NumberOfMnnthsForCleanup);

        #OCCRetryCount

        LedgerCovAvgAverageDaysMap daysToPay = context.getTableBuffer();
        daysToPay.skipDatabaseLog(true);
        daysToPay.skipAosValidation(true);
        daysToPay.skipDataMethods(true);
        daysToPay.skipDeleteActions(true);
        daysToPay.skipDeleteMethod(true);
        daysToPay.skipEvents(true);

        SysInstrumentationProgressLogger progressLogger = SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashflowAverageHistoryCleanUp, CustVendInstrumentationConstants::InstrumentationNamespace);
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashflowAverageActivityHistoryCleanup))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CashflowAverageHistoryCutOffDate, date2StrXpp(cutOffDateInThePast));
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CashflowAverageSource, tableId2Name(daysToPay.TableId));

            try
            {
                ttsbegin;
                delete_from crosscompany daysToPay
                where daysToPay.StartOfMonth <= cutOffDateInThePast;
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    progressLogger.logRetryOnDeadlock();
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        progressLogger.logRetryOnUpdateConflict();
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static LedgerCovAvgHistoryCleanUp newFromContext(LedgerCovAvgIExecutionContext _context)
    {
        LedgerCovAvgHistoryCleanUp cleanUp = new LedgerCovAvgHistoryCleanUp();
        cleanUp.context = _context;

        return cleanUp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>