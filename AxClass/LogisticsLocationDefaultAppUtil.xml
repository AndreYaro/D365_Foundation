<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsLocationDefaultAppUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LogisticsLocationDefaultAppUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDefaultForExistingParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the default locations for new entity that uses existing party.
    /// </summary>
    /// <param name="_entity">
    /// A common table buffer for the new entity.
    /// </param>
    /// <remarks>
    /// This method is called during an insert on the entity.This method is not applicable for the
    /// <c>HcmWorker</c> and <c>CompanyInfo</c> tables because using the existing party to create is not
    /// enabled.
    /// </remarks>
    public static void createDefaultForExistingParty(Common _entity)
    {
        DirPartyLocation            partyLocation;
        DirPartyLocationRole        partyLocationRole;

        switch (_entity.TableId)
        {
            case tableNum(CustTable) :
                CustTable                   custTable;
                CustDefaultLocation         custDefault;

                insert_recordset custDefault (AccountNum, PartyLocationRole)
                select AccountNum from custTable
                        where custTable.RecId == _entity.RecId
                    join firstonly minof(RecId) from partyLocationRole
                    group by custTable.AccountNum, partyLocationRole.LocationRole
                    exists join partyLocation
                        where partyLocation.Party == custTable.Party && partyLocationRole.PartyLocation == partyLocation.RecId;
                break;

            case tableNum(smmBusRelTable) :
                smmBusRelTable              busRelTable;
                smmBusRelDefaultLocation    busRelDefault;

                insert_recordset busRelDefault (BusRelAccount, PartyLocationRole)
                select BusRelAccount from busRelTable
                        where busRelTable.RecId == _entity.RecId
                    join firstonly minof(RecId) from partyLocationRole
                    group by busRelTable.BusRelAccount, partyLocationRole.LocationRole
                    exists join partyLocation
                        where partyLocation.Party == busRelTable.Party && partyLocationRole.PartyLocation == partyLocation.RecId;
                break;

            case tableNum(VendTable) :
                VendTable                   vendTable;
                VendDefaultLocation         vendDefault;

                insert_recordset vendDefault (AccountNum, PartyLocationRole)
                select AccountNum from vendTable
                        where vendTable.RecId == _entity.RecId
                    join firstonly minof(RecId) from partyLocationRole
                    group by vendTable.AccountNum, partyLocationRole.LocationRole
                    exists join partyLocation
                        where partyLocation.Party == vendTable.Party && partyLocationRole.PartyLocation == partyLocation.RecId;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNonPartyDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to set the default addresses when a non-party entity adds an address to a role.
    /// </summary>
    /// <param name="_inventLocationRole">
    /// Specifies the location role for which to set defaults.
    /// </param>
    /// <param name="_inventLogisiticsLocation">
    /// Specifies the <c>LogisticsLocation</c> record for which to set defaults.
    /// </param>
    public static void createNonPartyDefault(Common _inventLocationRole, Common _inventLogisiticsLocation)
    {
        LogisticsLocationRecId              locationRecId;
        LogisticsLocationRoleRecId          locationRoleRecId;

        ttsbegin;

        if (_inventLocationRole.TableId == tableNum(InventSiteLogisticsLocationRole))
        {
            InventSiteLogisticsLocation         inventSiteLocation;
            InventSiteLogisticsLocationRole     inventSiteLocationRole;
            InventSite                          inventSite;

            inventSiteLocationRole = _inventLocationRole;
            locationRoleRecId = inventSiteLocationRole.LocationRole;

            inventSiteLocation = _inventLogisiticsLocation;
            locationRecId = inventSiteLocation.Location;

            select firstonly SiteId, RecId from inventSite where inventSite.RecId == inventSiteLocation.Site;

            if (inventSiteLocation
            && !InventSiteDefaultLocation::exists(inventSite.SiteId, inventSiteLocationRole.LocationRole))
            {
                LogisticsLocationDefaultAppUtil::onSetDefaultLocation_delegate(inventSite, locationRecId, locationRoleRecId);
            }
        }
        else if (_inventLocationRole.TableId == tableNum(InventLocationLogisticsLocationRole))
        {
            InventLocation                      inventLocation;
            InventLocationLogisticsLocation     inventLocationLocation;
            InventLocationLogisticsLocationRole inventLocationLocationRole;

            inventLocationLocationRole = _inventLocationRole;
            locationRoleRecId = inventLocationLocationRole.LocationRole;

            inventLocationLocation = _inventLogisiticsLocation;
            locationRecId = inventLocationLocation.Location;

            inventLocation = InventLocation::findRecId(inventLocationLocation.InventLocation);

            if (inventLocationLocation
            && !InventLocationDefaultLocation::exists(inventLocation.InventLocationId, inventLocationLocationRole.LocationRole))
            {
                LogisticsLocationDefaultAppUtil::onSetDefaultLocation_delegate(inventLocation, locationRecId, locationRoleRecId);
            }
        }
        else if (_inventLocationRole.TableId == tableNum(TMSCarrierLogisticsLocationRole))
        {
            TMSCarrierLogisticsLocation         tmsCarrierLocation;
            TMSCarrierLogisticsLocationRole     tmsCarrierLocationRole;
            TMSCarrier                          tmsCarrier;

            tmsCarrierLocationRole = _inventLocationRole;
            locationRoleRecId = tmsCarrierLocationRole.LocationRole;

            tmsCarrierLocation = _inventLogisiticsLocation;
            locationRecId = tmsCarrierLocation.Location;

            tmsCarrier = TMSCarrier::findRecId(tmsCarrierLocation.Carrier);

            if (tmsCarrierLocation
            && !TMSCarrierDefaultLocation::exists(tmsCarrier.CarrierCode, tmsCarrierLocationRole.LocationRole))
            {
                LogisticsLocationDefaultAppUtil::onSetDefaultLocation_delegate(tmsCarrier, locationRecId, locationRoleRecId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDefaultForExistingParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the default locations for the entity changed party.
    /// </summary>
    /// <param name="_entity">
    /// The common table buffer for the entity that is being updated.
    /// </param>
    /// <remarks>
    /// This method is called during an update of the party association on the entity.This method is not
    /// applicable for the <c>HcmWorker</c> and <c>CompanyInfo</c> tables because changing of the party is
    /// not enabled.
    /// </remarks>
    public static void deleteDefaultForExistingParty(Common _entity)
    {
        ttsbegin;

        switch (_entity.TableId)
        {
            case tableNum(CustTable) :
                CustTable           custTable = _entity;
                CustDefaultLocation custDefault;

                delete_from custDefault
                    where custDefault.AccountNum == custTable.AccountNum;
                break;

            case tableNum(smmBusRelTable) :
                smmBusRelTable              busRelTable = _entity;
                smmBusRelDefaultLocation    busRelDefault;

                delete_from busRelDefault
                    where busRelDefault.BusRelAccount == busRelTable.BusRelAccount;
                break;

            case tableNum(VendTable) :
                VendTable           vendTable = _entity;
                VendDefaultLocation vendDefault;

                delete_from vendDefault
                    where vendDefault.AccountNum == vendTable.AccountNum;
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warehouseSiteDefaultLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the location with the specified role for a warehouse; otherwise the primary location.
    /// </summary>
    /// <param name="_type">
    ///    The <c>LogisticsLocationRoleType</c> value for which to find the default.
    /// </param>
    /// <param name="_inventLocationId">
    ///    The <c>InventLocationId</c> value of warehouse for which to find locations.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The <c>InventSiteId</c> value of the site for which to find locations.
    /// </param>
    /// <returns>
    ///    The <c>RecId</c> value of the <c>LogisticsLocation</c> record.
    /// </returns>
    /// <remarks>
    ///    If neither exists, this method returns the location with the specified role for site; otherwise,
    ///    the primary location.
    /// </remarks>
    public static LogisticsLocationRecId warehouseSiteDefaultLocation(LogisticsLocationRoleType _type,
                                                                      InventLocationId _inventLocationId,
                                                                      InventSiteId _inventSiteId)
    {
        LogisticsLocation       location;
        LogisticsLocationRole   roleDelivery = LogisticsLocationRole::findBytype(_type);

        if (_inventLocationId)
        {
            InventLocation inventLocation = InventLocation::find(_inventLocationId);
            location = LogisticsLocationDefault::findSimpleDefault(inventLocation, roleDelivery);
        }

        if (!location && _inventSiteId)
        {
            // Warehouse has no default location, check site
            InventSite inventSite = InventSite::find(_inventSiteId);
            location = LogisticsLocationDefault::findSimpleDefault(inventSite, roleDelivery);
        }

        return location.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deactivateDeleteDefaultsDelegate_Subsriber</Name>
				<Source><![CDATA[
    [SubscribesTo(tableStr(LogisticsAddressDateEffectiveMap), delegateStr(LogisticsAddressDateEffectiveMap, deactivateDeleteDefaultsDelegate))]
    public static void deactivateDeleteDefaultsDelegate_Subsriber(Common _callerRecord, LogisticsLocationRecId _logisticsLocationRecId)
    {
        LogisticsLocationDefault defaults = LogisticsLocationDefault::construct(_callerRecord);
        defaults.removeDefaultLocation(_logisticsLocationRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateSetDefaultLocationsDelegate_Subsriber</Name>
				<Source><![CDATA[
    [SubscribesTo(tableStr(LogisticsAddressDateEffectiveMap), delegateStr(LogisticsAddressDateEffectiveMap, activateSetDefaultLocationsDelegate))]
    public static void activateSetDefaultLocationsDelegate_Subsriber(Common _callerRecord, tableId _entityLocationTableId,
                                                                        LogisticsLocationRecId _location, LogisticsEntityLocationMap _entityLocationMap)
    {
        TableId entityLocationRoleTableId = LogisticsLocationAppUtil::getEntityLocationRoleTableId(_entityLocationTableId);

        if (entityLocationRoleTableId)
        {
            utcdatetime minDateTime = DateTimeUtil::minValue(), maxDateTime = DateTimeUtil::maxValue();
            LogisticsLocationDefault defaults = LogisticsLocationDefault::construct(_callerRecord);

            SysDictTable dictTableRole = new SysDictTable(entityLocationRoleTableId);
            LogisticsEntityLocationRoleMap entityLocationRoleMap = dictTableRole.makeRecord();

            while select validTimeState(minDateTime, maxDateTime) entityLocationRoleMap where entityLocationRoleMap.EntityLocation == _entityLocationMap.RecId
            {
                if (LogisticsLocationDefault::implementsDefaultLocations(_callerRecord) &&
                    !defaults.defaultExists(LogisticsLocationRole::findRec(entityLocationRoleMap.LocationRole)))
                {
                    defaults.setDefaultLocation(_location, entityLocationRoleMap.LocationRole);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityPartyField</Name>
				<Source><![CDATA[
    private static fieldId entityPartyField(Common _partyEntity)
    {
        switch (_partyEntity.TableId)
        {
            case tableNum(CustTable) :
                return fieldNum(CustTable, Party);
            case tableNum(smmBusRelTable) :
                return fieldNum(smmBusRelTable, Party);
            case tableNum(VendTable) :
                return fieldNum(VendTable, Party);
            case tableNum(HcmWorker) :
                return fieldNum(HcmWorker, Person);
            case tableNum(CompanyInfo) :
                return fieldNum(CompanyInfo, RecId);
        }

        // Default locations not supported for the entity type.
        throw error("@SYS300507");
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDefaultExists_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegatestr(LogisticsLocationDefault, defaultExists_delegate))]
    public static void onDefaultExists_delegate(TableId _defaultsTableId, Common _entity, LogisticsLocationRole _role, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            switch (_defaultsTableId)
            {
                case tableNum(smmBusRelDefaultLocation) :
                    _res.result(smmBusRelDefaultLocation::exists(_entity.(LogisticsLocationDefaultAppUtil::entityKeyFieldLocation(_entity.TableId)), _role.RecId));
                    break;

                case tableNum(CustDefaultLocation) :
                    _res.result(CustDefaultLocation::existsV2(_entity.(LogisticsLocationDefaultAppUtil::entityKeyFieldLocation(_entity.TableId)), _role.RecId));
                    break;

                case tableNum(VendDefaultLocation) :
                    _res.result(VendDefaultLocation::exists(_entity.(LogisticsLocationDefaultAppUtil::entityKeyFieldLocation(_entity.TableId)), _role.RecId));
                    break;

                case tableNum(HcmWorkerDefaultLocation) :
                    _res.result(HcmWorkerDefaultLocation::exists(_entity.(LogisticsLocationDefaultAppUtil::entityKeyFieldLocation(_entity.TableId)), _role.RecId));
                    break;

                case tableNum(CompanyDefaultLocation) :
                    _res.result(CompanyDefaultLocation::exists(_entity.(LogisticsLocationDefaultAppUtil::entityKeyFieldLocation(_entity.TableId)), _role.RecId));
                    break;

                case tableNum(InventSiteDefaultLocation) :
                    InventSite inventSite = _entity;
                    _res.result(InventSiteLogisticsLocation::defaultExists(inventSite.SiteId, _role.RecId));
                    break;

                case tableNum(InventLocationDefaultLocation) :
                    InventLocation inventLocation = _entity;
                    _res.result(InventLocationLogisticsLocation::defaultExists(inventLocation.InventLocationId, _role.RecId));
                    break;

                case tableNum(TMSCarrierDefaultLocation) :
                    TmsCarrier tmsCarrier = _entity;
                    _res.result(TMSCarrierLogisticsLocation::defaultExists(tmsCarrier.CarrierCode, _role.RecId));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEntityKeyField_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegatestr(LogisticsLocationDefault, entityKeyField_delegate))]
    public static void onEntityKeyField_delegate(TableId _entityTableId, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            _res.result(LogisticsLocationDefaultAppUtil::entityKeyFieldLocation(_entityTableId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityKeyFieldLocation</Name>
				<Source><![CDATA[
    public static fieldId entityKeyFieldLocation(TableId _entityTableId)
    {
        FieldId entityKeyFieldId;

        switch (_entityTableId)
        {
            case tableNum(CustTable) :
                entityKeyFieldId = fieldNum(CustTable, AccountNum);
                break;

            case tableNum(smmBusRelTable) :
                entityKeyFieldId = fieldNum(smmBusRelTable, BusRelAccount);
                break;

            case tableNum(VendTable) :
                entityKeyFieldId = fieldNum(VendTable, AccountNum);
                break;

            case tableNum(HcmWorker) :
                entityKeyFieldId = fieldNum(HcmWorker, RecId);
                break;

            case tableNum(CompanyInfo) :
                entityKeyFieldId = fieldNum(CompanyInfo, RecId);
                break;

            case tableNum(InventLocation) :
                entityKeyFieldId = fieldNum(InventLocation, InventLocationId);
                break;

            case tableNum(InventSite) :
                entityKeyFieldId = fieldNum(InventSite, SiteId);
                break;

            case tableNum(TMSCarrier) :
                entityKeyFieldId = fieldNum(TMSCarrier, CarrierCode);
                break;
        }

        return entityKeyFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEntityLocation_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegatestr(LogisticsLocationDefault, entityLocation_delegate))]
    public static void onEntityLocation_delegate(TableId _entityTableId, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            TableId entityLocationTableId;

            switch (_entityTableId)
            {
                case tableNum(InventSiteDefaultLocation) :
                    entityLocationTableId = tableNum(InventSiteLogisticsLocation);
                    break;

                case tableNum(InventLocationDefaultLocation) :
                    entityLocationTableId = tableNum(InventLocationLogisticsLocation);
                    break;

                case tableNum(TMSCarrierDefaultLocation) :
                    entityLocationTableId = tableNum(TMSCarrierLogisticsLocation);
                    break;

                default :
                    entityLocationTableId = tableNum(DirPartyLocation);
                    break;
            }

            _res.result(entityLocationTableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEntityLocationRole_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegatestr(LogisticsLocationDefault, entityLocationRole_delegate))]
    public static void onEntityLocationRole_delegate(TableId _entityTableId, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            TableId entityLocationRoleTableId;

            switch (_entityTableId)
            {
                case tableNum(InventSiteDefaultLocation) :
                    entityLocationRoleTableId = tableNum(InventSiteLogisticsLocationRole);
                    break;

                case tableNum(InventLocationDefaultLocation) :
                    entityLocationRoleTableId = tableNum(InventLocationLogisticsLocationRole);
                    break;

                case tableNum(TMSCarrierDefaultLocation) :
                    entityLocationRoleTableId = tableNum(TMSCarrierLogisticsLocationRole);
                    break;

                default :
                    entityLocationRoleTableId = tableNum(DirPartyLocationRole);
                    break;
            }

            _res.result(entityLocationRoleTableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEntityName_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, entityName_delegate))]
    public static void onEntityName_delegate(Common _entity, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            TableId entityLocationRoleTableId;

            switch (_entity.TableId)
            {
                case tableNum(InventSiteDefaultLocation) :
                    InventSite inventSite = _entity;
                    _res.result(inventSite.Name);
                    break;

                case tableNum(InventLocationDefaultLocation) :
                    InventLocation inventLocation = _entity;
                    _res.result(inventLocation.Name);
                    break;

                case tableNum(TMSCarrierDefaultLocation) :
                    TMSCarrier  tmsCarrier = _entity;
                    _res.result(tmsCarrier.Name);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEntityTypeName_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, entityTypeName_delegate))]
    public static void onEntityTypeName_delegate(TableId _entityTableId, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            str entityTypeName;

            switch (_entityTableId)
            {
                case tableNum(smmBusRelDefaultLocation) :
                    entityTypeName = "@SYS80084";
                    break;

                case tableNum(CustDefaultLocation) :
                    entityTypeName = "@SYS24704";
                    break;

                case tableNum(VendDefaultLocation) :
                    entityTypeName = "@SYS8079";
                    break;

                case tableNum(HcmWorkerDefaultLocation) :
                    entityTypeName = "@SYS95216";
                    break;

                case tableNum(InventSiteDefaultLocation) :
                    entityTypeName = "@SYS103211";
                    break;

                case tableNum(InventLocationDefaultLocation) :
                    entityTypeName = "@SYS6437";
                    break;

                case tableNum(TMSCarrierDefaultLocation) :
                    entityTypeName = "@TRX331";
                    break;

                case tableNum(CompanyDefaultLocation) :
                    entityTypeName = "@SYS129100";
                    break;
            }

            _res.result(entityTypeName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFindLocationByLocationId_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, findLocationByLocationId_delegate))]
    public static void onFindLocationByLocationId_delegate(Common _entity, LogisticsLocationId _logisticsLocationId, LogisticsLocationRoleRecId _role, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            LogisticsLocation location;

            if (_entity.TableId == tableNum(InventLocation))
            {
                InventLocationLogisticsLocation     warehouseLocation;
                InventLocationLogisticsLocationRole warehouseLocationRole;

                select location
                    where location.LocationId == _logisticsLocationId
                    exists join warehouseLocation
                        where warehouseLocation.Location == location.RecId
                            && warehouseLocation.InventLocation == _entity.RecId
                    exists join warehouseLocationRole
                        where warehouseLocation.RecId == warehouseLocationRole.LocationLogisticsLocation
                            && warehouseLocationRole.LocationRole == _role;
            }
            else if (_entity.tableId == tableNum(TMSCarrier))
            {
                TMSCarrierLogisticsLocation         tmsCarrierLocation;
                TMSCarrierLogisticsLocationRole     tmsCarrierLocationRole;

                select location
                    where location.LocationId == _logisticsLocationId
                    exists join tmsCarrierLocation
                        where tmsCarrierLocation.Location == location.RecId
                            && tmsCarrierLocation.Carrier == _entity.RecId
                    exists join tmsCarrierLocationRole
                        where tmsCarrierLocation.RecId == tmsCarrierLocationRole.LocationLogisticsLocation
                            && tmsCarrierLocationRole.LocationRole == _role;
            }
            else if (_entity.tableId == tableNum(InventSite))
            {
                InventSiteLogisticsLocation         siteLocation;
                InventSiteLogisticsLocationRole     siteLocationRole;

                select location
                    where location.LocationId == _logisticsLocationId
                    exists join siteLocation
                        where siteLocation.Location == location.RecId
                            && siteLocation.Site == _entity.RecId
                    exists join siteLocationRole
                        where siteLocation.RecId == siteLocationRole.SiteLogisticsLocation
                            && siteLocationRole.LocationRole == _role;
            }

            _res.result(location);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onGetRolesQuery_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, getRolesQuery_delegate))]
    public static void onGetRolesQuery_delegate(Common _entity, QueryBuildDataSource _qbd, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            QueryBuildDataSource qbd = _qbd;
            boolean hasRanges = false;

            if (_entity.TableId == tableNum(InventLocation))
            {
                qbd = qbd.addDataSource(tableNum(InventLocationLogisticsLocation));
                qbd.addLink(fieldNum(LogisticsPostalAddress, Location), fieldNum(InventLocationLogisticsLocation, Location));

                qbd.addSelectionField(fieldNum(InventLocationLogisticsLocation, RecId));
                qbd.addRange(fieldNum(InventLocationLogisticsLocation, InventLocation)).value(queryValue(_entity.RecId));
                qbd.addRange(fieldNum(InventLocationLogisticsLocation, IsPostalAddress)).value(queryValue(NoYes::Yes));
                hasRanges = true;
            }
            else if (_entity.tableId == tableNum(TMSCarrier))
            {
                qbd = qbd.addDataSource(tableNum(TMSCarrierLogisticsLocation));
                qbd.addLink(fieldNum(LogisticsPostalAddress, Location), fieldNum(TMSCarrierLogisticsLocation, Location));

                qbd.addSelectionField(fieldNum(TMSCarrierLogisticsLocation, RecId));
                qbd.addRange(fieldNum(TMSCarrierLogisticsLocation, Carrier)).value(queryValue(_entity.RecId));
                qbd.addRange(fieldNum(TMSCarrierLogisticsLocation, IsPostalAddress)).value(queryValue(NoYes::Yes));
                hasRanges = true;
            }
            else if (_entity.tableId == tableNum(InventSite))
            {
                qbd = qbd.addDataSource(tableNum(InventSiteLogisticsLocation));
                qbd.addLink(fieldNum(LogisticsPostalAddress, Location), fieldNum(InventSiteLogisticsLocation, Location));

                qbd.addSelectionField(fieldNum(InventSiteLogisticsLocation, RecId));
                qbd.addRange(fieldNum(InventSiteLogisticsLocation, Site)).value(queryValue(_entity.RecId));
                qbd.addRange(fieldNum(InventSiteLogisticsLocation, IsPostalAddress)).value(queryValue(NoYes::Yes));
                hasRanges = true;
            }

            if (hasRanges)
            {
                _res.result(qbd);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInit_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, init_delegate))]
    public static void onInit_delegate(TableId _entityTableId, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            TableId entityTableId;

            switch (_entityTableId)
            {
                case tableNum(CustTable) :
                    entityTableId = tableNum(CustDefaultLocation);
                    break;

                case tableNum(smmBusRelTable) :
                    entityTableId = tableNum(smmBusRelDefaultLocation);
                    break;

                case tableNum(VendTable) :
                    entityTableId = tableNum(VendDefaultLocation);
                    break;

                case tableNum(HcmWorker) :
                    entityTableId = tableNum(HcmWorkerDefaultLocation);
                    break;

                case tableNum(InventSite) :
                    entityTableId = tableNum(InventSiteDefaultLocation);
                    break;

                case tableNum(InventLocation) :
                    entityTableId = tableNum(InventLocationDefaultLocation);
                    break;

                case tableNum(TMSCarrier) :
                    entityTableId = tableNum(TMSCarrierDefaultLocation);
                    break;

                case tableNum(CompanyInfo) :
                    entityTableId = tableNum(CompanyDefaultLocation);
                    break;
            }

            _res.result(entityTableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInsertEntityDefaultLocation_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, insertEntityDefaultLocation_delegate))]
    public static void onInsertEntityDefaultLocation_delegate(Common _entity, RecId _entityLocationRole)
    {
        switch (_entity.TableId)
        {
            case tableNum(smmBusRelTable) :
                smmBusRelDefaultLocation    smmBusRelDefault;
                smmBusRelTable              smmBusRel = _entity;

                smmBusRelDefault.BusRelAccount      = smmBusRel.BusRelAccount;
                smmBusRelDefault.PartyLocationRole  = _entityLocationRole;
                smmBusRelDefault.insert();
                break;

            case tableNum(CustTable) :
                CustTable               custTable = _entity;
                CustDefaultLocation     custDefault;

                custDefault.AccountNum          = custTable.AccountNum;
                custDefault.PartyLocationRole   = _entityLocationRole;
                custDefault.insert();
                break;

            case tableNum(VendTable) :
                VendTable               vendTable = _entity;
                VendDefaultLocation     vendDefault;

                vendDefault.AccountNum          = vendTable.AccountNum;
                vendDefault.PartyLocationRole   = _entityLocationRole;
                vendDefault.insert();
                break;

            case tableNum(HcmWorker) :
                HcmWorker                   hrmWorker = _entity;
                HcmWorkerDefaultLocation    workerDefault;

                workerDefault.Worker            = hrmWorker.RecId;
                workerDefault.PartyLocationRole = _entityLocationRole;
                workerDefault.insert();
                break;

            case tableNum(InventSite) :
                InventSiteDefaultLocation   siteDefault;
                InventSite                  inventSite = _entity;

                siteDefault.SiteId                      = inventSite.SiteId;
                siteDefault.SiteLogisticsLocationRole   = _entityLocationRole;
                siteDefault.insert();
                break;

            case tableNum(InventLocation) :
                InventLocationDefaultLocation   warehouseDefault;
                InventLocation                  inventLocation = _entity;

                warehouseDefault.InventLocationId               = inventLocation.InventLocationId;
                warehouseDefault.LocationLogisticsLocationRole  = _entityLocationRole;
                warehouseDefault.insert();
                break;

            case tableNum(TMSCarrier) :
                TMSCarrierDefaultLocation       tmsCarrierDefault;
                TMSCarrier                      tmsCarrier = _entity;

                tmsCarrierDefault.CarrierCode                   = tmsCarrier.CarrierCode;
                tmsCarrierDefault.LocationLogisticsLocationRole = _entityLocationRole;
                tmsCarrierDefault.insert();
                break;

            case tableNum(CompanyInfo) :
                CompanyDefaultLocation      companyDefault;

                companyDefault.LegalEntity          = _entity.RecId;
                companyDefault.PartyLocationRole    = _entityLocationRole;
                companyDefault.insert();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLookup_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, lookup_delegate))]
    public static void onLookup_delegate(Common _entity, QueryBuildDataSource _qbd, LogisticsLocationRoleRecId _role, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            QueryBuildDataSource    qbd = _qbd;
            QueryBuildRange         range;

            if (_entity.TableId == tableNum(InventLocation))
            {
                qbd = qbd.addDataSource(tableNum(InventLocationLogisticsLocation));
                qbd.joinMode(JoinMode::InnerJoin);
                qbd.relations(true);
                range = qbd.addRange(fieldNum(InventLocationLogisticsLocation, InventLocation));
                range.value(int642str(_entity.RecId));

                qbd = qbd.addDataSource(tableNum(InventLocationLogisticsLocationRole));
                qbd.joinMode(JoinMode::ExistsJoin);
                qbd.relations(true);
                range = qbd.addRange(fieldNum(InventLocationLogisticsLocationRole, LocationRole));
                range.value(int642str(_role));
            }
            else if (_entity.tableId == tableNum(TMSCarrier))
            {
                qbd = qbd.addDataSource(tableNum(TMSCarrierLogisticsLocation));
                qbd.addLink(fieldNum(LogisticsLocation, RecId), fieldNum(TMSCarrierLogisticsLocation, Location));

                qbd.addSelectionField(fieldNum(TMSCarrierLogisticsLocation, RecId));
                qbd.addRange(fieldNum(TMSCarrierLogisticsLocation, Carrier)).value(queryValue(_entity.RecId));
                qbd.addRange(fieldNum(TMSCarrierLogisticsLocation, IsPostalAddress)).value(queryValue(NoYes::Yes));
            }
            else if (_entity.tableId == tableNum(InventSite))
            {
                qbd = qbd.addDataSource(tableNum(InventSiteLogisticsLocation));
                qbd.addLink(fieldNum(LogisticsLocation, RecId), fieldNum(InventSiteLogisticsLocation, Location));

                qbd.addSelectionField(fieldNum(InventSiteLogisticsLocation, RecId));
                qbd.addRange(fieldNum(InventSiteLogisticsLocation, Site)).value(queryValue(_entity.RecId));
                qbd.addRange(fieldNum(InventSiteLogisticsLocation, IsPostalAddress)).value(queryValue(NoYes::Yes));
            }

            _res.result(qbd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPrimaryPostalExists_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, primaryPostalExists_delegate))]
    public static void onPrimaryPostalExists_delegate(Common _entity, TableId _defaultsTableId, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            boolean ret;

            switch (_defaultsTableId)
            {
                case tableNum(InventSiteDefaultLocation) :
                    InventSiteLogisticsLocation siteLocation;

                    select firstonly RecId from siteLocation
                        where siteLocation.Site == _entity.RecId
                            && siteLocation.IsPrimary == NoYes::Yes
                            && siteLocation.IsPostalAddress == NoYes::Yes;

                    ret = siteLocation.RecId != 0;
                    break;

                case tableNum(InventLocationDefaultLocation) :
                    InventLocationLogisticsLocation warehouseLocation;

                    select firstonly RecId from warehouseLocation
                        where warehouseLocation.InventLocation == _entity.RecId
                            && warehouseLocation.IsPrimary == NoYes::Yes
                            && warehouseLocation.IsPostalAddress == NoYes::Yes;

                    ret = warehouseLocation.RecId != 0;
                    break;

                case tableNum(TMSCarrierLogisticsLocation) :
                    TMSCarrierLogisticsLocation tmsCarrierLocation;

                    select firstonly RecId from tmsCarrierLocation
                        where tmsCarrierLocation.Carrier == _entity.RecId
                            && tmsCarrierLocation.IsPrimary == NoYes::Yes
                            && tmsCarrierLocation.IsPostalAddress == NoYes::Yes;

                    ret = tmsCarrierLocation.RecId != 0;
                    break;
            }

            _res.result(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSetDefaultLocation_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, setDefaultLocation_delegate))]
    public static void onSetDefaultLocation_delegate(Common _entity, LogisticsLocationRecId _locationId, LogisticsLocationRoleRecId _roleId)
    {
        if (_entity.tableId == tableNum(InventSite))
        {
            InventSiteLogisticsLocation inventSiteLocation;

            // Add new default
            select firstonly inventSiteLocation
                where inventSiteLocation.Site == _entity.RecId &&
                      inventSiteLocation.Location == _locationId;

            if (!inventSiteLocation)
            {
                // Location is not associated with a party.
                throw error("@SYS300508");
            }

            InventSiteLogisticsLocationRole inventSiteLocationRole;

            select firstonly inventSiteLocationRole
                where inventSiteLocationRole.SiteLogisticsLocation == inventSiteLocation.RecId &&
                      inventSiteLocationRole.LocationRole == _roleId;

            if (!inventSiteLocationRole)
            {
                // Role is not associated with a party and location.
                throw error("@SYS300496");
            }

            LogisticsLocationDefaultAppUtil::onInsertEntityDefaultLocation_delegate(_entity, inventSiteLocationRole.RecId);
        }
        else if (_entity.tableId == tableNum(TMSCarrier))
        {
            TMSCarrierLogisticsLocation         tmsCarrierLocation;

            // Add new default
            select firstonly tmsCarrierLocation
                where tmsCarrierLocation.Carrier == _entity.RecId
                    && tmsCarrierLocation.Location == _locationId;

            if (!tmsCarrierLocation)
            {
                // Location is not associated with a party.
                throw error("@SYS300508");
            }

            TMSCarrierLogisticsLocationRole     tmsCarrierLocationRole;

            select firstonly tmsCarrierLocationRole
                where tmsCarrierLocationRole.LocationLogisticsLocation == tmsCarrierLocation.RecId &&
                      tmsCarrierLocationRole.LocationRole == _roleId;

            if (!tmsCarrierLocationRole)
            {
                // Role is not associated with a party and location.
                throw error("@SYS300496");
            }

            LogisticsLocationDefaultAppUtil::onInsertEntityDefaultLocation_delegate(_entity, tmsCarrierLocationRole.RecId);
        }
        else
        {
            InventLocationLogisticsLocation inventWarehouseLocation;

            // InventLocation
            select firstonly inventWarehouseLocation
                where inventWarehouseLocation.InventLocation == _entity.RecId &&
                      inventWarehouseLocation.Location == _locationId;

            if (!inventWarehouseLocation)
            {
                // Location is not associated with a party.
                throw error("@SYS300508");
            }

            InventLocationLogisticsLocationRole inventWarehouseLocationRole;

            select firstonly inventWarehouseLocationRole
                where inventWarehouseLocationRole.LocationLogisticsLocation == inventWarehouseLocation.RecId &&
                      inventWarehouseLocationRole.LocationRole == _roleId;

            if (!inventWarehouseLocationRole)
            {
                // Role is not associated with a party and location.
                throw error("@SYS300496");
            }

            LogisticsLocationDefaultAppUtil::onInsertEntityDefaultLocation_delegate(_entity, inventWarehouseLocationRole.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onGetPrimaryPostalLocation_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, getPrimaryPostalLocation_delegate))]
    public static void onGetPrimaryPostalLocation_delegate(Common _entity, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            LogisticsLocation   location;

            if (_entity.TableId == tableNum(InventLocation))
            {
                InventLocationLogisticsLocation     warehouseLocation;

                select firstonly location
                join RecId from warehouseLocation
                    where location.RecId == warehouseLocation.Location
                        &&  warehouseLocation.InventLocation == _entity.RecId
                        &&  warehouseLocation.IsPostalAddress == NoYes::Yes
                        &&  warehouseLocation.IsPrimary == NoYes::Yes;
            }
            else if (_entity.tableId == tableNum(TMSCarrier))
            {
                TMSCarrierLogisticsLocation     tmsCarrierLocation;

                select firstonly location
                join RecId from tmsCarrierLocation
                    where location.RecId == tmsCarrierLocation.Location
                        &&  tmsCarrierLocation.Carrier == _entity.RecId
                        &&  tmsCarrierLocation.IsPostalAddress == NoYes::Yes
                        &&  tmsCarrierLocation.IsPrimary == NoYes::Yes;
            }
            else if (_entity.tableId == tableNum(InventSite))
            {
                InventSiteLogisticsLocation     siteLocation;

                select firstonly location
                join RecId from siteLocation
                    where location.RecId == siteLocation.Location
                        &&  siteLocation.Site == _entity.RecId
                        &&  siteLocation.IsPostalAddress == NoYes::Yes
                        &&  siteLocation.IsPrimary == NoYes::Yes;
            }

            _res.result(location);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCreatePartyDefault_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, createPartyDefault_delegate))]
    public static void onCreatePartyDefault_delegate(DirPartyLocationRole _partyLocationRole, DirPartyLocation _partyLocation)
    {
        SecurityRights  rights = SecurityRights::construct();

        void addDefault(Common _entity)
        {
            LogisticsLocationDefault defaults = LogisticsLocationDefault::construct(_entity);
            defaults.setDefaultLocation(_partyLocation.Location, _partyLocationRole.LocationRole);
        }

        ttsbegin;

        // Try add to all (cust, vend, busrel, company, worker)
        CustTable custTable = CustTable::findByPartyRecId(_partyLocation.Party);
        if (custTable && !CustDefaultLocation::existsV2(custTable.AccountNum, _partyLocationRole.LocationRole, true))
        {
            addDefault(custTable);
        }

        if (rights.tableAccessRight(tableStr(VendTable)) != AccessRight::NoAccess)
        {
            // Because VendTable has AOSAuthorization set, should only call findByPartyRecId if the user has access.
            VendTable vendTable = VendTable::findByPartyRecId(_partyLocation.Party);
            if (vendTable && !VendDefaultLocation::exists(vendTable.AccountNum, _partyLocationRole.LocationRole))
            {
                addDefault(vendTable);
            }
        }

        smmBusRelTable smmBusRel = smmBusRelTable::findByParty(_partyLocation.Party);
        if (smmBusRel)
        {
            boolean useExistsV2 = smmBusRelTableDefaultLocationUseExistsV2Flight::instance().isEnabled();

            if ((useExistsV2 && !smmBusRelDefaultLocation::existsV2(smmBusRel.BusRelAccount, _partyLocationRole.LocationRole, true))
                || (!useExistsV2 && !smmBusRelDefaultLocation::exists(smmBusRel.BusRelAccount, _partyLocationRole.LocationRole)))
            {
                addDefault(smmBusRel);
            }
        }

        HcmWorker worker = HcmWorker::findByPerson(_partyLocation.Party);
        if (worker && !HcmWorkerDefaultLocation::exists(worker.RecId, _partyLocationRole.LocationRole))
        {
            addDefault(worker);
        }

        if (CompanyInfo::exist(_partyLocation.Party))
        {
            CompanyInfo company = CompanyInfo::findRecId(_partyLocation.Party);
            if (!CompanyDefaultLocation::exists(company.RecId, _partyLocationRole.LocationRole))
            {
                addDefault(company);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDefaultTableEntityForeignKeyField_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, defaultTableEntityForeignKeyField_delegate))]
    public static void onDefaultTableEntityForeignKeyField_delegate(TableId _defaultTableId, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            FieldId defaultTableEntityForeignKeyField;

            switch (_defaultTableId)
            {
                case tableNum(CustDefaultLocation) :
                    defaultTableEntityForeignKeyField = fieldNum(CustDefaultLocation, AccountNum);
                    break;

                case tableNum(smmBusRelDefaultLocation) :
                    defaultTableEntityForeignKeyField = fieldNum(smmBusRelDefaultLocation, BusRelAccount);
                    break;

                case tableNum(VendDefaultLocation) :
                    defaultTableEntityForeignKeyField = fieldNum(VendDefaultLocation, AccountNum);
                    break;

                case tableNum(HcmWorkerDefaultLocation) :
                    defaultTableEntityForeignKeyField = fieldNum(HcmWorkerDefaultLocation, Worker);
                    break;

                case tableNum(InventSiteDefaultLocation) :
                    defaultTableEntityForeignKeyField = fieldNum(InventSiteDefaultLocation, SiteId);
                    break;

                case tableNum(InventLocationDefaultLocation) :
                    defaultTableEntityForeignKeyField = fieldNum(InventLocationDefaultLocation, InventLocationId);
                    break;

                case tableNum(TMSCarrierDefaultLocation) :
                    defaultTableEntityForeignKeyField = fieldNum(TMSCarrierDefaultLocation, CarrierCode);
                    break;

                case tableNum(CompanyDefaultLocation) :
                    defaultTableEntityForeignKeyField = fieldNum(CompanyDefaultLocation, LegalEntity);
                    break;
            }

            _res.result(defaultTableEntityForeignKeyField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onImplementsDefaultLocations_delegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(LogisticsLocationDefault), delegateStr(LogisticsLocationDefault, implementsDefaultLocations_delegate))]
    public static void onImplementsDefaultLocations_delegate(TableId _defaultTableId, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            boolean ret;

            switch (_defaultTableId)
            {
                case tableNum(CustTable) :
                case tableNum(smmBusRelTable) :
                case tableNum(VendTable) :
                case tableNum(HcmWorker) :
                case tableNum(InventSite) :
                case tableNum(InventLocation) :
                case tableNum(tmsCarrier) :
                    ret = true;
                    break;
                default :
                    ret = false;
            }

            _res.result(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDirPartyLocationNewDefaultLocationNeeded</Name>
				<Source><![CDATA[
    [SubscribesTo(tableStr(DirPartyLocationRole), delegateStr(DirPartyLocationRole, newDefaultLocationNeeded))]
    public static void onDirPartyLocationNewDefaultLocationNeeded(DirPartyLocationRole target)
    {
        LogisticsLocationDefault::createPartyDefault(target);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesImplementsDefaultLocationsDelegate_Subscriber</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DirPartyPostalAddressActionHelper), delegateStr(DirPartyPostalAddressActionHelper, doesImplementsDefaultLocationsDelegate))]
    public static void doesImplementsDefaultLocationsDelegate_Subscriber(Common _callerRecord, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            _res.result(LogisticsLocationDefault::implementsDefaultLocations(_callerRecord));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAddressDefaultDelegate_Subscriber</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DirPartyPostalAddressActionHelper), delegateStr(DirPartyPostalAddressActionHelper, isAddressDefaultDelegate))]
    public static void isAddressDefaultDelegate_Subscriber(LogisticsPostalAddressRecId _postalAddressRecid, Common _callerRecord, EventHandlerResult _res)
    {
        if (!_res.result())
        {
            _res.result(LogisticsLocationDefault::isAddressDefault(_postalAddressRecid, _callerRecord));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>