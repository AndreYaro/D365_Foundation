<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableForm_INTax_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTableForm_INTax_Extension</c> class is an extension class which extends the <c>SalesTable</c> form functionality.
/// </summary>
[ExtensionOf(formStr(SalesTable))]
internal final class SalesTableForm_INTax_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setTaxWithholdEnabled_IN</Name>
				<Source><![CDATA[
    public void setTaxWithholdEnabled_IN()
    {
        next setTaxWithholdEnabled_IN();

        salesTable_ds.object(fieldNum(SalesTable, TCSGroup_IN)).enabled(!salesTable.TDSGroup_IN);
        salesTable_ds.object(fieldNum(SalesTable, TDSGroup_IN)).enabled(!salesTable.TCSGroup_IN);
        salesLine_IN_ds.object(fieldNum(SalesLine_IN, TCSGroup)).enabled(!salesLine_IN.TDSGroup);
        salesLine_IN_ds.object(fieldNum(SalesLine_IN, TDSGroup)).enabled(!salesLine_IN.TCSGroup);
        buttonWithholdTax_IN.enabled(salesLine_IN.TDSGroup || salesLine_IN.TCSGroup);

        if (TaxWithholdParameters_IN::isTaxWithholdingCreditNoteTaxGroupDefaultBlank())
        {
            if (salesTable.containsCreditNoteLine())
            {
                // As long as the SO contains credit note line, the TCS / TDS group in header should be disabled.
                salesTable_ds.object(fieldNum(SalesTable, TCSGroup_IN)).enabled(false);
                salesTable_ds.object(fieldNum(SalesTable, TDSGroup_IN)).enabled(false);
            }

            if (salesLine.isCreditNoteLine())
            {
                // If TDS/TCS group is set in original transaction, the TDS/TCS group in the credit note line will be editable; otherwise
                // TDS/TCS group will be uneditable.
                SalesLine_IN originSalesLine_IN = SalesLine::findInventTransId(SalesLine.InventTransIdReturn).salesLine_IN();
                salesLine_IN_ds.object(fieldNum(SalesLine_IN, TCSGroup)).enabled(originSalesLine_IN.TCSGroup != '');
                salesLine_IN_ds.object(fieldNum(SalesLine_IN, TDSGroup)).enabled(originSalesLine_IN.TDSGroup != '');
            }
        }
        else
        {
            if (salesLine.InventTransIdReturn)
            {
                salesTable_ds.object(fieldNum(SalesTable, tcsGroup_IN)).enabled(false);
                salesTable_ds.object(fieldNum(SalesTable, tdsGroup_IN)).enabled(false);
                salesLine_IN_ds.object(fieldNum(SalesLine_IN, tcsGroup)).enabled(false);
                salesLine_IN_ds.object(fieldNum(SalesLine_IN, tdsGroup)).enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxWithholdVisible_IN</Name>
				<Source><![CDATA[
    public void setTaxWithholdVisible_IN()
    {
        next setTaxWithholdVisible_IN();

        TaxWithholdParameters_IN    taxWithholdParameters;

        taxWithholdParameters = TaxWithholdParameters_IN::find();
        salesTable_ds.object(fieldNum(SalesTable, TDSGroup_IN)).visible(taxWithholdParameters.TDSActivate);
        salesLine_IN_ds.object(fieldNum(SalesLine_IN, TDSGroup)).visible(taxWithholdParameters.TDSActivate);
        salesTable_ds.object(fieldNum(SalesTable, TCSGroup_IN)).visible(taxWithholdParameters.TCSActivate);
        salesLine_IN_ds.object(fieldNum(SalesLine_IN, TCSGroup)).visible(taxWithholdParameters.TCSActivate);
        withholdingTax_IN.visible(taxWithholdParameters.TDSActivate || taxWithholdParameters.TCSActivate);
        lineWithholdingTax_IN.visible(taxWithholdParameters.TDSActivate || taxWithholdParameters.TCSActivate);
        buttonWithholdTax_IN.visible(taxWithholdParameters.TDSActivate || taxWithholdParameters.TCSActivate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>