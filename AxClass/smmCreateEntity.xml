<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmCreateEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is the generic create Entity class being used both by Leads and Opportunity forms
// to create Customer, Leads, and Opportunites
// This class can be used if other entity function requires to be created
class SmmCreateEntity
{
    NumberSequenceCode  numSeqCode;
    CustGroupId         custGroupId;
    LanguageId          languageId;
    CurrencyCode        currencyCode;
    boolean             numSeqManual;

    smmLeadTable lead;
    smmOpportunityTable opportunity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLinkContactPerson</Name>
				<Source><![CDATA[
    // This method is called to create ContactPerson links to the new entity
    // _common is the main table where creation was initiated
    // _entityToCreate is the entity to be created
    // _newRecord is the new entity created
    void createLinkContactPerson(Common _common, Common _newRecord)
    {
        DirOrgPersonRelations   dirOrgPerson, dirOrgPersonDup;
        smmCampaignSelection    campaignSelection;
        smmTMCallListTable      callList;

        switch (_common.TableId)
        {
            case tableNum(smmCampaignSelection) :
                campaignSelection = _common;
                dirOrgPerson.clear();
                dirOrgPerson.EntityRefTableId = _newRecord.TableId;
                dirOrgPerson.EntityRefRecId = _newRecord.RecId;
                dirOrgPerson.ContactPersonId = campaignSelection.ContactPersonId;
                dirOrgPerson.modifiedField(fieldNum(DirOrgPersonRelations, ContactPersonId));
                dirOrgPerson.insert();

                break;

            case tableNum(smmTMCallListTable) :
                callList = _common;
                dirOrgPerson.clear();
                dirOrgPerson.EntityRefTableId = _newRecord.TableId;
                dirOrgPerson.EntityRefRecId = _newRecord.RecId;
                dirOrgPerson.ContactPersonId = callList.ContactPersonId;
                dirOrgPerson.modifiedField(fieldNum(DirOrgPersonRelations, ContactPersonId));
                dirOrgPerson.insert();
                break;

            default :
                while select ContactPersonId, RelationsRefRecId, TableId, RecId
                    from dirOrgPersonDup where
                    dirOrgPersonDup.EntityRefTableId == _common.TableId &&
                    dirOrgPersonDup.EntityRefRecId == _common.RecId
                {
                    dirOrgPerson.clear();
                    dirOrgPerson.ContactPersonId = dirOrgPersonDup.ContactPersonId;
                    dirOrgPerson.RelationsRefRecId = dirOrgPersonDup.RelationsRefRecId;
                    dirOrgPerson.EntityRefTableId = _newRecord.TableId;
                    dirOrgPerson.EntityRefRecId = _newRecord.RecId;
                    dirOrgPerson.insert();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinkRelation</Name>
				<Source><![CDATA[
    // This is the method that specifically creates assocation records stored in RELATION table
    // called from CreateLead or CreateOpportunity methods
    // _common is the main table that called this class
    // _newRecord is the new entity created
    void createLinkRelation(Common _common, Common _newRecord)
    {
        smmLeadRelTable         leadRelation;
        smmOpportunityRelTable  opportunityRelation;
        smmLeadTable            smmLeadTable;
        smmLeadTable            smmLeadToJoinTable;
        smmOpportunityTable     smmOpportunityTable;
        smmOpportunityTable     smmOppToJoinTable;
        RefTableId              sourceTableId = _common.TableId;
        RefRecId                sourceRecId = _common.RecId;
        boolean                 checkCaller;
        if (_newRecord.TableId == tableNum(smmOpportunityTable))
        {
            smmOpportunityTable = _newRecord;
            if (_common.TableId == tableNum(smmLeadTable) || _common.TableId == tableNum(smmCampaignSelection) || _common.TableId == tableNum(smmTMCallListTable))
            {
                checkCaller = true;
            }
            if (_common.TableId == tableNum(smmLeadTable))
            {
                smmLeadTable = _common;
                // Create all associated Campaign records
                insert_recordset opportunityRelation (RefTableId, RefRecId, OpportunityId)
                    select RefTableId, RefRecId from leadRelation
                        where leadRelation.LeadId == smmLeadTable.LeadId
                           && leadRelation.RefTableId == (tableNum(smmCampaignTable))
                    join OpportunityId from smmOppToJoinTable
                        where smmOppToJoinTable.OpportunityId == smmOpportunityTable.OpportunityId;
            }
            else if (_common.TableId == tableNum(smmCampaignSelection) || _common.TableId == tableNum(smmTMCallListTable))
            {
                sourceTableId = smmOpportunityTable.SourceRefTableId;
                sourceRecId = smmOpportunityTable.SourceRefRecId;
            }

            if (sourceTableId && sourceRecId && checkCaller)
            {
                // Link the source to Opportunity
                opportunityRelation.clear();
                opportunityRelation.RefTableId = sourceTableId;
                opportunityRelation.RefRecId = sourceRecId;
                opportunityRelation.OpportunityId = smmOpportunityTable.OpportunityId;
                opportunityRelation.insert();
            }
        }
        else
        if (_newRecord.TableId == tableNum(smmLeadTable))
        {
            smmLeadTable = _newRecord;
            if (_common.TableId == tableNum(smmOpportunityTable) || _common.TableId == tableNum(smmCampaignSelection) || _common.TableId == tableNum(smmTMCallListTable))
            {
                checkCaller = true;
            }
            if (_common.TableId == tableNum(smmOpportunityTable))
            {
                smmOpportunityTable = _common;
                // Create all associated Campaign records
                insert_recordset leadRelation (RefTableId, RefRecId, LeadId)
                    select RefTableId, RefRecId from opportunityRelation
                        where opportunityRelation.OpportunityId == smmOpportunityTable.OpportunityId
                           && opportunityRelation.RefTableId == (tableNum(smmCampaignTable))
                    join LeadId from smmLeadToJoinTable
                        where smmLeadToJoinTable.LeadId == smmLeadTable.LeadId;
            }
            else if (_common.TableId == tableNum(smmCampaignSelection) || _common.TableId == tableNum(smmTMCallListTable))
            {
                sourceTableId = smmLeadTable.SourceRefTableId;
                sourceRecId = smmLeadTable.SourceRefRecId;
            }

            if (sourceTableId && sourceRecId && checkCaller)
            {
                // Link the source to Lead
                leadRelation.clear();
                leadRelation.RefTableId = sourceTableId;
                leadRelation.RefRecId = sourceRecId;
                leadRelation.LeadId = smmLeadTable.LeadId;
                leadRelation.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCallList</Name>
				<Source><![CDATA[
    private void initFromCallList(smmTMCallListTable _callList, Common _target)
    {
        switch (_target.TableId)
        {
            case tableNum(smmLeadTable) :
                lead = _target;
                lead.initFromCallList(_callList);
                break;

            case tableNum(smmOpportunityTable) :
                opportunity = _target;
                opportunity.initFromCallList(_callList);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCampaign</Name>
				<Source><![CDATA[
    private void initFromCampaign(smmCampaignSelection _campaignSelection, Common _target)
    {
        switch (_target.TableId)
        {
            case tableNum(smmLeadTable) :
                lead = _target;
                lead.initFromCampaignSelection(_campaignSelection);
                break;

            case tableNum(smmOpportunityTable) :
                opportunity = _target;
                opportunity.initFromCampaignSelection(_campaignSelection);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProspect</Name>
				<Source><![CDATA[
    private void initFromProspect(smmBusRelTable _smmBusRelTable, Common _target)
    {
        switch (_target.TableId)
        {
            case tableNum(smmLeadTable) :
                lead = _target;
                lead.initFromProspect(_smmBusRelTable);
                break;

            case tableNum(smmOpportunityTable) :
                opportunity = _target;
                opportunity.initFromProspect(_smmBusRelTable);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLead</Name>
				<Source><![CDATA[
    // This is the method that copies necessary values from Lead
    // _tableToCreate is the entity or table to be created
    // _common is the main table that called this class, in this case it's the Lead table
    void initFromLead(Common _common, Common _tableToCreate)
    {
        smmLeadTable        smmLeadTable = _common;
        CustTable           customerTable;
        smmBusRelTable      smmBusRelTable;
        smmOpportunityTable opportunityTable;

        switch (_tableToCreate.TableId)
        {
            // copy necessary values from Lead to BusRel
            case tableNum(smmBusRelTable):
                smmBusRelTable = _tableToCreate;
                smmBusRelTable.Party = smmLeadTable.Party;
                smmBusRelTable.modifiedField(fieldNum(smmBusRelTable,Party));
                break;

            // copy necessary values from Lead to Customer
            case tableNum(CustTable):
                customerTable = _tableToCreate;
                customerTable.Party = smmLeadTable.Party;
                customerTable.modifiedField(fieldNum(CustTable,Party));
                break;

            // copy necessary values from Lead to Opportunity
            case tableNum(smmOpportunityTable):
                opportunityTable                    = _tableToCreate;
                opportunityTable.Party              = smmLeadTable.Party;
                opportunityTable.Subject            = smmLeadTable.Subject;
                opportunityTable.SalesUnitId        = smmLeadTable.SalesUnitId;
                opportunityTable.Status             = smmOpportunityStatus::Active;
                opportunityTable.OwnerWorker        = smmLeadTable.OwnerWorker;
                opportunityTable.SourceDescription  = smmLeadTable.SourceDescription ? smmLeadTable.SourceDescription :"@SYS112716"; // Created from Lead
                opportunityTable.Memo               = smmLeadTable.LeadDescription;
                if (DirPartyTableHelper::isRelation(smmLeadTable.Party))
                {
                    opportunityTable.SourceRefTableId   = tableNum(smmBusRelTable);
                    opportunityTable.SourceRefRecId     = smmBusRelTable::findByParty(smmLeadTable.Party).RecId;
                    opportunityTable.SourceTypeId       = enum2Value(SmmSourceTypeList::Prospect);
                }
                else if (DirPartyTableHelper::isCustomer(smmLeadTable.Party))
                {
                    opportunityTable.SourceRefTableId   = tableNum(CustTable);
                    opportunityTable.SourceRefRecId     = CustTable::findByPartyRecId(smmLeadTable.Party).RecId;
                    opportunityTable.SourceTypeId       = enum2Value(SmmSourceTypeList::Customer);
                }
                else
                {
                    opportunityTable.SourceRefTableId   = smmLeadTable.SourceRefTableId;
                    opportunityTable.SourceRefRecId     = smmLeadTable.SourceRefRecId;
                    opportunityTable.SourceTypeId       = smmLeadTable.SourceTypeId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOpportunity</Name>
				<Source><![CDATA[
    // This is the method that copies necessary values from Opportunity
    // _tableToCreate is the entity or table to be created
    // _common is the main table that called this class, in this case it's the Opportunity table
    void initFromOpportunity(Common _common, Common _tableToCreate)
    {
        smmOpportunityTable smmOpportunityTable = _common;
        CustTable           customerTable;
        smmLeadTable        leadTable;

        switch (_tableToCreate.TableId)
        {
            // copy necessary values from Opportunity to Customer
            case tableNum(CustTable):
                customerTable = _tableToCreate;
                customerTable.Party = smmOpportunityTable.Party;
                customerTable.modifiedField(fieldNum(CustTable, Party));
                break;

            // copy necessary values from Opportunity to Lead
            case tableNum(smmLeadTable):
                leadTable                   = _tableToCreate;
                leadTable.Party             = smmOpportunityTable.Party;
                leadTable.Subject           = smmOpportunityTable.Subject;
                leadTable.Status            = smmLeadStatus::Open;
                leadTable.OwnerWorker       = smmOpportunityTable.OwnerWorker;
                leadTable.LeadDescription   = smmOpportunityTable.Memo;
                leadTable.SourceDescription = "@SYS112717"; // Created from Opportunity
                if (DirPartyTableHelper::isRelation(smmOpportunityTable.Party))
                {
                    leadTable.SourceRefTableId = tableNum(smmBusRelTable);
                    leadTable.SourceRefRecId = smmBusRelTable::findByParty(smmOpportunityTable.Party).RecId;
                    leadTable.SourceTypeId = enum2Value(SmmSourceTypeList::Prospect);
                }
                else if (DirPartyTableHelper::isCustomer(smmOpportunityTable.Party))
                {
                    leadTable.SourceRefTableId = tableNum(CustTable);
                    leadTable.SourceRefRecId = CustTable::findByPartyRecId(smmOpportunityTable.Party).RecId;
                    leadTable.SourceTypeId = enum2Value(SmmSourceTypeList::Customer);
                }
                else
                {
                    leadTable.SourceRefRecId = smmOpportunityTable.SourceRefRecId;
                    leadTable.SourceRefTableId = smmOpportunityTable.SourceRefTableId;
                    leadTable.SourceTypeId = smmOpportunityTable.SourceTypeId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPreCust</Name>
				<Source><![CDATA[
    void initFromPreCust(CustTable _custTable)
    {
        smmBusRelTable smmBusRelTable = null;
        smmBusRelTable = smmBusRelTable::findByParty(_custTable.Party);

        if (smmBusRelTable)
        {
            _custTable.CustGroup = smmBusRelTable.CustGroup ? smmBusRelTable.CustGroup : _custTable.CustGroup;
            _custTable.Currency = smmBusRelTable.Currency ? smmBusRelTable.Currency : _custTable.Currency;

            _custTable.DefaultDimension      = smmBusRelTable.DefaultDimension;

            _custTable.initFromCustGroup(CustGroup::find(smmBusRelTable.CustGroup));

            _custTable.CompanyIdSiret        = smmBusRelTable.CompanyIdSiret;
            _custTable.CompanyNAFCode        = smmBusRelTable.CompanyNAFCode;

            _custTable.Blocked               = smmBusRelTable.Blocked;
            _custTable.OneTimeCustomer       = smmBusRelTable.OneTimeRelation;
            _custTable.CreditMax             = smmBusRelTable.CreditMax;
            _custTable.MandatoryCreditLimit  = smmBusRelTable.MandatoryCreditLimit;
            _custTable.DlvTerm               = smmBusRelTable.DlvTerm;
            _custTable.DlvMode               = smmBusRelTable.DlvMode;
            _custTable.FreightZone           = smmBusRelTable.FreightZone;
            _custTable.DestinationCodeId     = smmBusRelTable.DestinationCodeId;

            _custTable.InclTax               = smmBusRelTable.InclTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinkCommon</Name>
				<Source><![CDATA[
    public static void createLinkCommon(Common _common, Common _newRecord)
    {
        smmCreateEntity     smmCreateEntity;

        smmCreateEntity = new smmCreateEntity();

        switch (_common.TableId)
        {
            case tableNum(smmLeadTable) :
            case tableNum(smmOpportunityTable) :
            case tableNum(smmCampaignSelection) :
            case tableNum(smmTMCallListTable) :
                ttsbegin;
                smmCreateEntity.createLinkRelation(_common, _newRecord);
                smmCreateEntity.createLinkContactPerson(_common, _newRecord);
                ttscommit;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOpportunityFromQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>smmOpportunityTable</c> record to correspond with a <c>SalesQuotationTable</c> record.
    /// </summary>
    /// <param name="_salesQuotationTable">
    /// The <c>SalesQuotationTable</c> record for the new opportunity.
    /// </param>
    /// <returns>
    /// The created <c>smmOpportunityTable</c> record.
    /// </returns>
    public static smmOpportunityTable createOpportunityFromQuotation(SalesQuotationTable _salesQuotationTable)
    {
        smmOpportunityTable     smmOpportunityTable = null;
        DirOrgPersonRelations   dirOrgPersonRelations;
        boolean                 manualNumberSeq;
        smmOpportunityId        opportunityId;

        if (smmParameters::createOpportunityForQuote(_salesQuotationTable.QuotationType))
        {
            // Get the ID for the opportunity
            if (smmParameters::isNumberSequenceManual(extendedTypeNum(smmOpportunityId)))
            {
                opportunityId = smmUtility::openAccountNumDialog(smmAccountNumToCreate::Opportunity);
                manualNumberSeq = true;
            }

            if (manualNumberSeq && !opportunityId)
            {
                // Creation of Opportunity ID could not be completed.
                throw error("@SYS4110065");
            }
            else
            {
                ttsbegin;

                if (opportunityId)
                {
                    smmOpportunityTable.OpportunityId = opportunityId;
                }
                smmOpportunityTable.initFromQuotation(_salesQuotationTable);
                smmOpportunityTable.OwnerWorker = smmUtility::getCurrentContactWorker();

                if (smmOpportunityTable.validateWrite(true))
                {
                    smmOpportunityTable.insert();
                }

                // Add association to activity
                if (_salesQuotationTable.QuotationFollowupActivity)
                {
                    smmActivityParentLink::insertLink(_salesQuotationTable.QuotationFollowupActivity, smmActivityParentType::Opportunity, smmOpportunityTable.RecId);
                }

                // Insert contact person link
                if (_salesQuotationTable.ContactPersonId)
                {
                    dirOrgPersonRelations.EntityRefTableId = smmOpportunityTable.TableId;
                    dirOrgPersonRelations.EntityRefRecId = smmOpportunityTable.RecId;
                    dirOrgPersonRelations.ContactPersonId = _salesQuotationTable.ContactPersonId;
                    dirOrgPersonRelations.modifiedField(fieldNum(DirOrgPersonRelations,ContactPersonId));
                    dirOrgPersonRelations.insert();
                }

                ttscommit;
            }
        }

        return smmOpportunityTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommon</Name>
				<Source><![CDATA[
    public static boolean initFromCommon(Common _common, Common _tableToCreate)
    {
        boolean result = true;
        smmCreateEntity     smmCreateEntity;
        FieldId             fromParty, toParty;

        smmCreateEntity = new smmCreateEntity();

        switch (_common.TableId)
        {
            case tableNum(smmLeadTable) :
                smmCreateEntity.initFromLead(_common, _tableToCreate);
                break;

            case tableNum(smmOpportunityTable) :
                smmCreateEntity.initFromOpportunity(_common, _tableToCreate);
                break;

            case tableNum(CustTable), tableNum(smmBusRelTable) :
                toParty = fieldName2id(_tableToCreate.TableId, identifierStr(Party));
                fromParty = fieldName2id(_common.TableId, identifierStr(Party));

                if (fromParty && toParty)
                    _tableToCreate.(toParty) = _common.(fromParty);

                break;

            case tableNum(smmCampaignSelection) :
                smmCreateEntity.initFromCampaign(_common, _tableToCreate);
                break;

            case tableNum(smmTMCallListTable) :
                smmCreateEntity.initFromCallList(_common, _tableToCreate);
                break;

            default :
                result = false;
                break;
        }

        if (_tableToCreate.TableId == tableNum(CustTable))
        {
            smmCreateEntity.initFromPreCust(_tableToCreate);
        }

        if (_common.TableId == tableNum(smmBusRelTable))
        {
            smmCreateEntity.initFromProspect(_common, _tableToCreate);
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>