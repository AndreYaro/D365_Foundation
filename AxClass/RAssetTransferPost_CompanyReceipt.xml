<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetTransferPost_CompanyReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RAssetTransferPost_CompanyReceipt extends RAssetTransferPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLine</Name>
				<Source><![CDATA[
        protected boolean checkLine(RAssetTransferTrans _assetTransferTrans)
    {
        boolean ret = true;
        ;

        if (! _assetTransferTrans.AccountNum)
            ret = ret && checkFailed("@GLS116713");
        if (! _assetTransferTrans.AssetId)
            ret = ret && checkFailed("@GLS116712");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLine</Name>
				<Source><![CDATA[
        public void postLine(RAssetTransferTrans _assetTransferTrans)
    {
        RAssetMoveHistEngine rAssetMoveHistEngine;
        RAssetMoveHist       assetMoveHist = RAssetMoveHist::findLastOperation(_assetTransferTrans.AccountNum,
                                                                               RAssetMoveType::CompanyReceipt,
                                                                               NoYes::No,
                                                                               maxdate(),
                                                                               true);
        RAssetMoveStandard   rAssetMoveStandardLocal;
        RAssetMoveStandard   rAssetMoveStandard;
        ;

        ttsbegin;

        if (assetMoveHist.RecId)
        {
            if (assetMoveHist.TransferTransRecId)
                throw error(strfmt("@GLS116724", _assetTransferTrans.AssetId, assetMoveHist.AttachDocumentNumber, assetMoveHist.AttachDocumentDate));
        }
        else
        {
            assetMoveHist.clear();
            assetMoveHist.MoveType = RAssetMoveType::CompanyReceipt;
        }

        assetMoveHist = this.initMoveHist(_assetTransferTrans, assetMoveHist);
        assetMoveHist.AssetId  = _assetTransferTrans.AssetId;
        assetMoveHist.Company  = _assetTransferTrans.Company;

        rAssetMoveHistEngine = RAssetMoveHistEngine::construct(assetMoveHist);

        if (! rAssetMoveHistEngine.validateWrite())
            throw error("@GLS101992");

        if (assetMoveHist.RecId)
        {
            assetMoveHist.doUpdate();
        }
        else
        {
            assetMoveHist.doInsert();
        }

        assetMoveHist.updateMoveStandard();

        while select forupdate rAssetMoveStandard
            where rAssetMoveStandard.RefRecId   == assetMoveHist.RecId &&
                  rAssetMoveStandard.RefTableId == assetMoveHist.TableId
        {
            rAssetMoveStandardLocal = _assetTransferTrans.rAssetMoveStandard(rAssetMoveStandard.RAssetStandardId);
            rAssetMoveStandard.BalanceAcquisition       = rAssetMoveStandardLocal.BalanceAcquisition;
            rAssetMoveStandard.BalanceDepreciation      = rAssetMoveStandardLocal.BalanceDepreciation;
            rAssetMoveStandard.RAssetLifeTimePass       = rAssetMoveStandardLocal.RAssetLifeTimePass;
            rAssetMoveStandard.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>