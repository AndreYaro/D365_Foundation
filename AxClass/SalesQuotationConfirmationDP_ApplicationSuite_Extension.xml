<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationConfirmationDP_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesQuotationConfirmationDP))]
public final class SalesQuotationConfirmationDP_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeSalesQuotationDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales quotation line.
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">A <c>CustQuotationConfirmJour</c> record that the header are initialized from.</param>
    /// <param name = "_custQuotationConfirmTrans">The <c>CustQuotationConfirmTrans</c> record that the line will be initialized from.</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <returns>An initialized sales quotation line</returns>
    protected SalesQuotationDetailsTmp initializeSalesQuotationDetailsTmp(
        CustQuotationConfirmJour _custQuotationConfirmJour,
        CustQuotationConfirmTrans _custQuotationConfirmTrans,
        CustFormletterDocument _custFormletterDocument)
    {
        SalesQuotationDetailsTmp salesQuotationTmp = next initializeSalesQuotationDetailsTmp(_custQuotationConfirmJour, _custQuotationConfirmTrans, _custFormletterDocument);

        if (conFind(FreeNotesOnDocumentsConstants::DocuOnFormularAllLine, _custFormletterDocument.DocuOnQuotation))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(
                _custQuotationConfirmTrans,
                _custFormletterDocument.DocuTypeQuotation,
                DocuRestriction::External);

            if (docuRefSearch)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00041, funcName());
            }

            salesQuotationTmp.Notes = Docu::concatDocuRefNotes(docuRefSearch);
        }

        return salesQuotationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesQuotationHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts common data into the table buffer.
    /// </summary>
    /// <param name = "_custQuotationConfirmJour">The <c>CustQuotationConfirmJour</c> record to initialize the header from</param>
    /// <param name = "_formLetterRemarks">A form note</param>
    /// <param name = "_custFormletterDocument">A customer form setup</param>
    /// <param name = "_custFormletterParameters">The parameters of the customer form setup</param>
    /// <returns>The initialized <c>SalesQuotationHeaderTmp</c></returns>
    protected SalesQuotationHeaderTmp initializeSalesQuotationHeaderTmp(
        CustQuotationConfirmJour _custQuotationConfirmJour,
        FormLetterRemarks _formLetterRemarks,
        CustFormletterDocument _custFormletterDocument,
        CustFormletterParameters _custFormletterParameters)
    {
        SalesQuotationHeaderTmp salesQuotationHeaderTmp = next initializeSalesQuotationHeaderTmp(
            _custQuotationConfirmJour,
            _formLetterRemarks,
            _custFormletterDocument,
            _custFormletterParameters);

        if (conFind(FreeNotesOnDocumentsConstants::DocuOnFormularAllHead, _custFormletterDocument.DocuOnQuotation))
        {
            DocuRefSearch docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(
                _custQuotationConfirmJour,
                _custFormletterDocument.DocuTypeQuotation,
                DocuRestriction::External);

            if (docuRefSearch)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00041, funcName());
            }

            salesQuotationHeaderTmp.DocuRefMainNotes = Docu::concatDocuRefNotes(docuRefSearch);
        }

        return salesQuotationHeaderTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>