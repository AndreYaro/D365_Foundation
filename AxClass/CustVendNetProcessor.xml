<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNetProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendNetProcessor</c> class creates customer and vendor netting journals.
/// </summary>
[SysObsolete('This class is no longer supported.', false, 28\02\2024)]
public class CustVendNetProcessor
{
    private TransDate netTransDate;
    private DirPartyRecId fromNetAgreement;
    private DirPartyRecId toNetAgreement;
    private container netCompanies;
    private Map companyLedgerJournalTableMap;
    private Map companyMessageMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a customer and vendor netting processor.
    /// </summary>
    /// <param name = "_netTransDate">The netting date.</param>
    /// <param name = "_netCompanies">The netting companies.</param>
    /// <param name = "_fromNetAgreement">The from net agreement.</param>
    /// <param name = "_toNetAgreement">The to net agreement.</param>
    /// <returns></returns>
    public static CustVendNetProcessor construct(
        TransDate _netTransDate,
        container _netCompanies,
        DirPartyRecId _fromNetAgreement = 0,
        DirPartyRecId _toNetAgreement = 0)
    {
        CustVendNetProcessor processor = new CustVendNetProcessor();
        processor.netTransDate = _netTransDate;
        processor.fromNetAgreement = _fromNetAgreement;
        processor.toNetAgreement = _toNetAgreement;
        processor.netCompanies = _netCompanies;

        processor.init();

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates customer and vendor netting journals.
    /// </summary>
    public void process()
    {
        ttsbegin;

        this.processInSameCompany();
        this.deleteEmptyJournals();
        this.reportMessages();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportMessages</Name>
				<Source><![CDATA[
    private void reportMessages()
    {
        MapEnumerator enumerator = companyMessageMap.getEnumerator();
        while (enumerator.moveNext())
        {
            SelectableDataArea company = enumerator.currentKey();
            setPrefix(strFmt("@CashManagement:CustVendNetProcessCompanyInfoMessage", company));

            List messages = enumerator.currentValue();
            ListEnumerator listEnumerator = messages.getEnumerator();
            while (listEnumerator.moveNext())
            {
                info(listEnumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        companyLedgerJournalTableMap = new Map(Types::String, Types::Record);
        companyMessageMap = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEmptyJournals</Name>
				<Source><![CDATA[
    private void deleteEmptyJournals()
    {
        MapEnumerator mapEnumerator = companyLedgerJournalTableMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            SelectableDataArea company = mapEnumerator.currentKey();
            LedgerJournalTable ledgerJournalTable = mapEnumerator.currentValue();

            changecompany (company)
            {
                LedgerJournalTrans ledgerJournalTrans;
                select firstonly RecId from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum;

                if (!ledgerJournalTrans)
                {
                    delete_from ledgerJournalTable
                        where LedgerJournalTable.JournalType == LedgerJournalType::Netting
                            && ledgerJournalTable.JournalNum == ledgerJournalTable.JournalNum;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInSameCompany</Name>
				<Source><![CDATA[
    private void processInSameCompany()
    {
        for (int companyCount = 1; companyCount <= conLen(netCompanies); companyCount++)
        {
            SelectableDataArea company = conPeek(netCompanies, companyCount);

            changecompany(company)
            {
                CustVendNetParameters parameters;
                DimensionDynamicAccount offsetLedgerDimension;
                CustVendNetDefaultDimensionType offsetDefaultDimensionRuleType;
                boolean isInitializedForCompany;
                boolean canProcessCompany;

                Query query = this.findNetAgreementsInSameCompanyQuery();
                QueryRun queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    if (!isInitializedForCompany)
                    {
                        parameters = CustVendNetParameters::find();
                        offsetDefaultDimensionRuleType = parameters.NettingDefaultDimensionType;
                        offsetLedgerDimension = parameters.NettingOffsetLedgerDimension;
                        canProcessCompany = this.validateParameters(parameters);

                        if (canProcessCompany)
                        {
                            canProcessCompany = this.createJournal(parameters.NettingJournalName);
                        }

                        isInitializedForCompany = true;
                    }

                    if (canProcessCompany)
                    {
                        CustVendNetAgreement agreement = queryRun.get(tableNum(CustVendNetAgreement));
                        boolean canProcessAgreement = this.validateAgreement(agreement);

                        if (canProcessAgreement)
                        {
                            if (agreement.CurrencyType == CustVendNetAgreementCurrencyType::SpecificCurrency)
                            {
                                this.processInSameCompanyNetCurrency(agreement.Party, agreement.CurrencyCode, offsetLedgerDimension, offsetDefaultDimensionRuleType);
                            }
                            else
                            {
                                this.processInSameCompanyInvoiceCurrency(agreement.Party, offsetLedgerDimension, offsetDefaultDimensionRuleType);
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInSameCompanyNetCurrency</Name>
				<Source><![CDATA[
    private void processInSameCompanyNetCurrency(
        DirPartyRecId _agreementRecId,
        CurrencyCode _netCurrencyCode,
        DimensionDynamicAccount _offsetLedgerDimension,
        CustVendNetDefaultDimensionType _offsetDefaultDimensionRuleType,
        SelectableDataArea _company = curExt())
    {
        CustVendNetBalanceCalculator calculator = CustVendNetBalanceCalculator::construct(_agreementRecId, netTransDate, [_company], _netCurrencyCode);

        AmountCur netAmount = calculator.netAmountForNetCurrencyAndCompany(_company);
        if (netAmount != 0.0)
        {
            this.createJournalTransaction(_agreementRecId, _netCurrencyCode, netAmount, _offsetLedgerDimension, _offsetDefaultDimensionRuleType, _company);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInSameCompanyInvoiceCurrency</Name>
				<Source><![CDATA[
    private void processInSameCompanyInvoiceCurrency(
        DirPartyRecId _agreementRecId,
        DimensionDynamicAccount _offsetLedgerDimension,
        CustVendNetDefaultDimensionType _offsetDefaultDimensionRuleType,
        SelectableDataArea _company = curExt())
    {
        CustVendNetBalanceCalculator calculator = CustVendNetBalanceCalculator::construct(_agreementRecId, netTransDate, [_company]);

        List currencies = calculator.currenciesForCompany(_company);
        ListEnumerator currencyEnumerator = currencies.getEnumerator();
        while (currencyEnumerator.moveNext())
        {
            CurrencyCode currency = currencyEnumerator.current();
            AmountCur netAmount = calculator.netAmountForInvoiceCurrencyAndCompany(currency, _company);
            if (netAmount != 0.0)
            {
                this.createJournalTransaction(_agreementRecId, currency, netAmount, _offsetLedgerDimension, _offsetDefaultDimensionRuleType, _company);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    private boolean validateParameters(CustVendNetParameters _parameters)
    {
        boolean isValid = true;

        if (_parameters.NettingOffsetLedgerDimension == 0)
        {
            isValid = this.captureMessage("@CashManagement:CustVendNetProcessOffsetAccountRequired");
        }

        if (_parameters.NettingJournalName == '')
        {
            isValid = this.captureMessage("@CashManagement:CustVendNetProcessJournalNameRequired");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAgreement</Name>
				<Source><![CDATA[
    private boolean validateAgreement(CustVendNetAgreement _agreement)
    {
        boolean isValid = true;
        if (_agreement.CurrencyType == CustVendNetAgreementCurrencyType::SpecificCurrency && _agreement.CurrencyCode == '')
        {
            DirPartyName name = DirPartyTable::findRec(_agreement.Party).Name;
            isValid = this.captureMessage(strFmt("@CashManagement:CustVendNetProcessNetCurrencyCodeRequired", name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTransaction</Name>
				<Source><![CDATA[
    private void createJournalTransaction(
        DirPartyRecId _agreementRecId,
        CurrencyCode _currecyCode,
        AmountCur _netAmount,
        DimensionDynamicAccount _offsetLedgerDimension,
        CustVendNetDefaultDimensionType _offsetDefaultDimensionRuleType,
        SelectableDataArea _company = curExt())
    {
        changecompany(_company)
        {
            LedgerJournalId journalNum = this.findJournalNumForCompany();

            CustAccount custAccount = this.findCustVendAccount(_agreementRecId, CustVendACType::Cust);
            CustTable custTable = CustTable::find(custAccount);

            VendAccount vendAccount = this.findCustVendAccount(_agreementRecId, CustVendACType::Vend);
            VendTable vendTable = VendTable::find(vendAccount);

            LedgerDefaultDimensionValueSet offsetDefaultDimension = this.determineOffsetDefaultDimension(
                _offsetDefaultDimensionRuleType,
                custTable.DefaultDimension,
                vendTable.DefaultDimension,
                _offsetLedgerDimension);

            LedgerDimensionAccount offsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _offsetLedgerDimension,
                offsetDefaultDimension);

            LedgerRecId ledgerRecId = Ledger::current();
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(ledgerRecId, _currecyCode, this.netTransDate);

            ExchRate exchRate = exchangeRateHelper.getExchangeRate1();
            ExchrateSecondary exchRateSecondary = exchangeRateHelper.getExchangeRate2();

            //Customer
            LedgerJournalTrans custLedgerJournalTrans;
            custLedgerJournalTrans.JournalNum = journalNum;
            custLedgerJournalTrans.Voucher = this.getVoucher();
            custLedgerJournalTrans.TransDate = netTransDate;
            custLedgerJournalTrans.CurrencyCode = _currecyCode;
            custLedgerJournalTrans.parmAccount(custAccount, LedgerJournalACType::Cust);
            custLedgerJournalTrans.DefaultDimension = custTable.DefaultDimension;
            custLedgerJournalTrans.amountCur2DebCred(_netAmount * -1);
            custLedgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
            custLedgerJournalTrans.OffsetLedgerDimension = offsetLedgerDimension;
            custLedgerJournalTrans.ExchRate = exchRate;
            custLedgerJournalTrans.ExchRateSecond = exchrateSecondary;
            custLedgerJournalTrans.PostingProfile = CustParameters::find().PostingProfile;
            custLedgerJournalTrans.BankCentralBankPurposeCode = custTable.BankCentralBankPurposeCode;
            custLedgerJournalTrans.BankCentralBankPurposeText = custTable.BankCentralBankPurposeText;
            custLedgerJournalTrans.Txt = this.determineTransactionText(LedgerTransTxt::CustVendNetCustomer, custLedgerJournalTrans);
            custLedgerJournalTrans.OffsetTxt = this.determineTransactionText(LedgerTransTxt::CustVendNetLedger, custLedgerJournalTrans);

            custLedgerJournalTrans.insert();

            //Vendor
            LedgerJournalTrans vendLedgerJournalTrans;
            vendLedgerJournalTrans.JournalNum = journalNum;
            vendLedgerJournalTrans.Voucher = this.getVoucher();
            vendLedgerJournalTrans.CurrencyCode = _currecyCode;
            vendLedgerJournalTrans.TransDate = this.netTransDate;
            vendLedgerJournalTrans.parmAccount(vendAccount, LedgerJournalACType::Vend);
            vendLedgerJournalTrans.DefaultDimension = vendTable.DefaultDimension;
            vendLedgerJournalTrans.amountCur2DebCred(_netAmount);
            vendLedgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
            vendLedgerJournalTrans.OffsetLedgerDimension = offsetLedgerDimension;
            vendLedgerJournalTrans.ExchRate = exchRate;
            vendLedgerJournalTrans.ExchRateSecond = exchrateSecondary;
            vendLedgerJournalTrans.PostingProfile = VendParameters::find().PostingProfile;
            vendLedgerJournalTrans.Tax1099Fields = vendTable.Tax1099Fields;
            vendLedgerJournalTrans.PaymId = vendTable.PaymId;
            vendLedgerJournalTrans.BankCentralBankPurposeCode = vendTable.BankCentralBankPurposeCode;
            vendLedgerJournalTrans.BankCentralBankPurposeText = vendTable.BankCentralBankPurposeText;
            vendLedgerJournalTrans.Txt = this.determineTransactionText(LedgerTransTxt::CustVendNetVendor, vendLedgerJournalTrans);
            vendLedgerJournalTrans.OffsetTxt = this.determineTransactionText(LedgerTransTxt::CustVendNetLedger, vendLedgerJournalTrans);

            vendLedgerJournalTrans.insert();

            //Link
            CustVendNetJournalLineLink link;
            link.CustNetLineRecId = custLedgerJournalTrans.RecId;
            link.VendNetLineRecId = vendLedgerJournalTrans.RecId;
            link.NetAmount = _netAmount;
            link.MaxNetAmount = _netAmount;

            link.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    private Voucher getVoucher(SelectableDataArea _company = curExt())
    {
        Voucher voucher;
        NumberSeq numberSeq;
        numberSeq = NumberSeq::newGetVoucherFromId(this.findNumberSequenceTableRecIdForCompany(_company));
        voucher = numberSeq.voucher();

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineOffsetDefaultDimension</Name>
				<Source><![CDATA[
    private LedgerDefaultDimensionValueSet determineOffsetDefaultDimension(
        CustVendNetDefaultDimensionType _offsetDefaultDimensionRuleType,
        LedgerDefaultDimensionValueSet _custDefaultDimesion,
        LedgerDefaultDimensionValueSet _vendDefaultDimesion,
        DimensionDynamicAccount _offsetMainAccountLedgerDimension)
    {
        LedgerDefaultDimensionValueSet offsetDefaultDimension;
        switch (_offsetDefaultDimensionRuleType)
        {
            case CustVendNetDefaultDimensionType::Customer:
                offsetDefaultDimension = _custDefaultDimesion;
                break;
            case CustVendNetDefaultDimensionType::Vendor:
                offsetDefaultDimension = _vendDefaultDimesion;
                break;
            case CustVendNetDefaultDimensionType::MainAccount:
                offsetDefaultDimension = MainAccountLegalEntity::findByMainAccountLegalEntity(MainAccount::findByLedgerDimension(_offsetMainAccountLedgerDimension).RecId,CompanyInfo::current()).DefaultDimension;
                break;
        }

        return offsetDefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTransactionText</Name>
				<Source><![CDATA[
    private TransactionTextLarge determineTransactionText(
        LedgerTransTxt _ledgerTransTxt,
        LedgerJournalTrans _ledgerJournalTrans)
    {
        TransactionTxt transactionTxt = TransactionTxt::construct();

        transactionTxt.setType(_ledgerTransTxt);
        transactionTxt.setVoucher(_ledgerJournalTrans.Voucher);
        transactionTxt.setDate(_ledgerJournalTrans.TransDate);
        transactionTxt.setKey1(_ledgerJournalTrans.parmAccount());
        transactionTxt.setFormLetter(_ledgerJournalTrans.Voucher);

        return transactionTxt.txt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendAccount</Name>
				<Source><![CDATA[
    private CustVendAC findCustVendAccount(
        DirPartyRecId _agreementRecId,
        CustVendACType _custVendACType,
        SelectableDataArea _company = curExt())
    {
        CustVendNetAgreementRelationship relationship = CustVendNetAgreementRelationship::findRelationByAccountType(
            _agreementRecId,
            _company,
            _custVendACType);

        return relationship.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    private boolean createJournal(
        LedgerJournalNameId _journalNameId,
        SelectableDataArea _company = curExt())
    {
        NumberSequenceTable journalNumberSequence;
        LedgerJournalName ledgerJournalName;
        LedgerJournalTable ledgerJournalTable;
        boolean journalOk = true;

        try
        {
            changecompany(_company)
            {
                journalNumberSequence = LedgerParameters::numRefJournalNum().numberSequenceTable();
                if (!journalNumberSequence)
                {
                    journalOk = this.captureMessage("@SYS122674");
                }

                if (journalOk && journalNumberSequence.Continuous == NoYes::No)
                {
                    journalOk = this.captureMessage(strFmt("@SYS26207", journalNumberSequence.NumberSequence));
                }

                if (journalOk && journalNumberSequence.Blocked == NoYes::Yes)
                {
                    journalOk = this.captureMessage(strFmt("@SYS25068", journalNumberSequence.NumberSequence));
                }

                if (journalOk)
                {
                    ledgerJournalName = LedgerJournalName::find(_journalNameId);

                    if (!ledgerJournalName)
                    {
                        journalOk = this.captureMessage(strFmt("@SYS22462", _journalNameId));
                    }

                    if (journalOk && ledgerJournalName.JournalType != LedgerJournalType::Netting)
                    {
                        journalOk = this.captureMessage(strFmt("@SYS74909", _journalNameId));
                    }

                    if (journalOk)
                    {
                        ledgerJournalTable.JournalName = ledgerJournalName.JournalName;
                        ledgerJournalTable.JournalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
                        ledgerJournalTable.initFromLedgerJournalName();

                        if (!ledgerJournalTable.validateWrite())
                        {
                            journalOk = false;
                        }
                        else
                        {
                            ledgerJournalTable.write();
                            companyLedgerJournalTableMap.insert(curExt(), ledgerJournalTable);
                        }
                    }
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
            journalOk = false;
        }

        return journalOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalNumForCompany</Name>
				<Source><![CDATA[
    private LedgerJournalId findJournalNumForCompany(SelectableDataArea _company = curExt())
    {
        LedgerJournalTable ledgerJournalTable;

        if (companyLedgerJournalTableMap.exists(_company))
        {
            ledgerJournalTable = companyLedgerJournalTableMap.lookup(_company);
        }

        Debug::assert(LedgerJournalTable.JournalNum != '');

        return ledgerJournalTable.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumberSequenceTableRecIdForCompany</Name>
				<Source><![CDATA[
    private RefRecId findNumberSequenceTableRecIdForCompany(SelectableDataArea _company = curExt())
    {
        LedgerJournalTable ledgerJournalTable;

        if (companyLedgerJournalTableMap.exists(_company))
        {
            ledgerJournalTable = companyLedgerJournalTableMap.lookup(_company);
        }

        return ledgerJournalTable.NumberSequenceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNetAgreementsInSameCompanyQuery</Name>
				<Source><![CDATA[
    private Query findNetAgreementsInSameCompanyQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsDirPartyTable = query.addDataSource(tableNum(DirPartyTable));
        DirPartyName fromPartyName;
        if (fromNetAgreement != 0)
        {
            fromPartyName = this.findDirPartyName(fromNetAgreement);
        }

        DirPartyName toPartyName;
        if (toNetAgreement != 0)
        {
            toPartyName = this.findDirPartyName(toNetAgreement);
        }

        qbdsDirPartyTable.addRange(fieldNum(DirPartyTable, Name)).value(queryRange(fromPartyName, toPartyName));
        qbdsDirPartyTable.relations(false);

        QueryBuildDataSource qbdsAgreement = qbdsDirPartyTable.addDataSource(tableNum(CustVendNetAgreement));
        qbdsAgreement.addRange(fieldNum(CustVendNetAgreement, Status)).value(queryValue(CustVendNetAgreementStatus::Active));
        qbdsAgreement.addLink(fieldNum(DirPartyTable, RecId), fieldNum(CustVendNetAgreement, Party));
        qbdsAgreement.joinMode(JoinMode::InnerJoin);
        qbdsAgreement.fetchMode(QueryFetchMode::One2One);
        qbdsAgreement.update(false);
        qbdsAgreement.enabled(true);

        QueryBuildDataSource qbdsCustAgreementRelationship = qbdsAgreement.addDataSource(tableNum(CustVendNetAgreementRelationship));
        DataSourceName custRelationshipDataSourceName = qbdsCustAgreementRelationship.name();
        qbdsCustAgreementRelationship.addRange(fieldNum(CustVendNetAgreementRelationship, Type)).value(queryValue(CustVendACType::Cust));
        qbdsCustAgreementRelationship.addRange(fieldNum(CustVendNetAgreementRelationship, Company)).value(queryValue(curExt()));
        qbdsCustAgreementRelationship.relations(false);
        qbdsCustAgreementRelationship.addLink(fieldNum(CustVendNetAgreement, Party), fieldNum(CustVendNetAgreementRelationship, Party));
        qbdsCustAgreementRelationship.joinMode(JoinMode::InnerJoin);
        qbdsCustAgreementRelationship.fetchMode(QueryFetchMode::One2One);
        qbdsCustAgreementRelationship.update(false);
        qbdsCustAgreementRelationship.enabled(true);

        QueryBuildDataSource qbdsVendAgreementRelationship = qbdsAgreement.addDataSource(tableNum(CustVendNetAgreementRelationship));
        DataSourceName vendRelationshipDataSourceName = qbdsVendAgreementRelationship.name();
        qbdsVendAgreementRelationship.addRange(fieldNum(CustVendNetAgreementRelationship, Type)).value(queryValue(CustVendACType::Vend));
        qbdsVendAgreementRelationship.addRange(fieldNum(CustVendNetAgreementRelationship, Company)).value(queryValue(curExt()));
        qbdsVendAgreementRelationship.relations(false);
        qbdsVendAgreementRelationship.addLink(fieldNum(CustVendNetAgreement, Party), fieldNum(CustVendNetAgreementRelationship, Party));
        qbdsVendAgreementRelationship.joinMode(JoinMode::InnerJoin);
        qbdsVendAgreementRelationship.fetchMode(QueryFetchMode::One2One);
        qbdsVendAgreementRelationship.update(false);
        qbdsVendAgreementRelationship.enabled(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDirPartyName</Name>
				<Source><![CDATA[
    private DirPartyName findDirPartyName(DirPartyRecId _dirPartyRecId)
    {
        DirPartyName dirPartyName;
        if (_dirPartyRecId != 0)
        {
            DirPartyTable dirPartyTable = DirPartyTable::findRec(_dirPartyRecId);
            dirPartyName = DirPartyTable.Name;
        }

        return dirPartyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>captureMessage</Name>
				<Source><![CDATA[
    private boolean captureMessage(str _message, SelectableDataArea _company = curExt())
    {
        List messages;
        if (companyMessageMap.exists(_company))
        {
            messages = companyMessageMap.lookup(_company);
            messages.addEnd(_message);
        }
        else
        {
            messages = new List(Types::String);
            messages.addEnd(_message);
            companyMessageMap.insert(_company, messages);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>