<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPremiumEarningGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollPremiumEarningGeneration</c> class is a wrapper class around the <c>PayrollPremiumEarningGenerationTask</c> class
/// to provide a dialog to generate premium earnings.
/// </summary>
public class PayrollPremiumEarningGeneration extends PayrollStatementGeneration implements BatchRetryable
{
    boolean                                  overridePremiumEarningLines;
    const int                                premiumEarningCodeSelectionOptionAll = 0;
    const int                                premiumEarningCodeSelectionOptionSelected = 1;
    FormBuildCheckBoxControl                 overridePremiumEarningLinesCheckBox;
    FormCheckBoxControl                      overridePremiumEarningLinesCheckBoxRuntime;
    FormBuildStringControl                   premiumEarningCodeNameControl;
    FormStringControl                        premiumEarningCodeNameControlRuntime;
    SysLookupMultiSelectCtrl                 premiumEarningCodeLookupControl;
    FormBuildRadioControl                    generateForPremiumEarningCodesRadioControl;
    FormRadioControl                         generateForPremiumEarningCodesRadioControlRuntime;
    container                                premiumEarningCodeContainer;
    PayrollPremiumEarningCodeSelectionOption premiumEarningCodeSelectionOption;
    List                                     premiumEarningCodeList;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        payPeriodRecId,
        overridePremiumEarningLines,
        premiumEarningCodeSelectionOption
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        #DEFINE.PremiumEarningCodeLookupControl('PremiumEarningCodeLookupControl')
        #DEFINE.GenerateForPremiumEarningCodeControl('GenerateForPremiumEarningCodeControl')
        #DEFINE.OverridePremiumEarningLinesControl('OverridePremiumEarningLinesControl')

        dialog = super();

        overridePremiumEarningLinesCheckBox = dialog.curFormBuildGroup().addControl(FormControlType::CheckBox, #OverridePremiumEarningLinesControl);

        dialog.addGroup("@Payroll:Generate");

        generateForPremiumEarningCodesRadioControl = dialog.curFormBuildGroup().addControl(FormControlType::RadioButton, #GenerateForPremiumEarningCodeControl);
        generateForPremiumEarningCodesRadioControl.enumType(enumNum(PayrollPremiumEarningCodeSelectionOption));
        generateForPremiumEarningCodesRadioControl.frameType(1);
        generateForPremiumEarningCodesRadioControl.helpText("@Payroll:ChooseToGenerateEarningsForAllPremiumCodesOrOnlyForThePremiu");

        premiumEarningCodeNameControl = dialog.curFormBuildGroup().addControl(FormControlType::String, #PremiumEarningCodeLookupControl);
        premiumEarningCodeNameControl.helpText("@Payroll:ThePremiumCodesToGenerateEarningsFor");
        premiumEarningCodeNameControl.width(140);
        premiumEarningCodeNameControl.enabled(false);
        premiumEarningCodeNameControl.label("@Payroll:PremiumCodes");

        overridePremiumEarningLinesCheckBox.Label("@Payroll:ReplacePremiumEarningLines");
        overridePremiumEarningLinesCheckBox.helpText("@Payroll:IfThisCheckBoxIsSelectedPremiumLinesAssociatedWithEachPremiu");

        generateForPremiumEarningCodesRadioControl.registerOverrideMethod(
            methodStr(FormRadioControl, selectionChange),
            methodStr(PayrollPremiumEarningGeneration, genForPremiumCodesCtrl_selectionChange),
            this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCaption</Name>
				<Source><![CDATA[
    protected str dialogCaption()
    {
        return "@Payroll:GeneratePremiumEarningsStatementLines";
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Payroll:GeneratePremiumEarnings";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the input from the dialog which contains user selection for the process.
    /// </summary>
    /// <param name="_dialog">
    /// The instance of the dialog which contains user input for the process.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(false);

        premiumEarningCodeNameControlRuntime = _dialog.formRun().design().control(premiumEarningCodeNameControl.id());

        premiumEarningCodeLookupControl = SysLookupMultiSelectCtrl::construct(
                                                _dialog.formRun(),
                                                premiumEarningCodeNameControlRuntime,
                                                queryStr(PayrollPremiumEarningCodeLookup));

        overridePremiumEarningLinesCheckBoxRuntime        = _dialog.dialogForm().formRun().control(overridePremiumEarningLinesCheckBox.id());
        generateForPremiumEarningCodesRadioControlRuntime = _dialog.dialogForm().formRun().control(generateForPremiumEarningCodesRadioControl.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterListOfPremiumEarningCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the list of selected premium earning codes based on the selected pay period.
    /// </summary>
    /// <returns>
    /// Filtered list of premium earnings codes for the premium generation.
    /// </returns>
    protected List filterListOfPremiumEarningCodes()
    {
        Query                     premiumEarningCodeQuery;
        QueryRun                  premiumEarningCodeQueryRun;
        QueryBuildDataSource      qbdsPremiumEarningCode;
        QueryBuildDataSource      qbdsPremiumEarningCodeAll;
        QueryBuildDataSource      qbdsPayrollCalculationFrequencyPayPeriod;
        QueryBuildDataSource      qbdsPayrollCalculationFrequency;
        PayrollPremiumEarningCode premiumEarningCode;

        premiumEarningCodeList  = new List(Types::Record);

        // Query to select the premium codes for the calculation frequency of ALL.
        premiumEarningCodeQuery = new Query();

        premiumEarningCodeQuery.queryType(QueryType::Union);

        qbdsPremiumEarningCodeAll = premiumEarningCodeQuery.addDataSource(tableNum(PayrollPremiumEarningCode));

        qbdsPayrollCalculationFrequency = qbdsPremiumEarningCodeAll.addDataSource(tableNum(PayrollCalculationFrequency));

        qbdsPayrollCalculationFrequency.joinMode(JoinMode::ExistsJoin);

        qbdsPayrollCalculationFrequency.addLink(
            fieldNum(PayrollPremiumEarningCode, CalculationFrequency),
            fieldNum(PayrollCalculationFrequency, RecId));

        // Adds the range to filter for the calculation frequency = ALL.
        qbdsPayrollCalculationFrequency.addRange(fieldNum(PayrollCalculationFrequency, CalculationFrequencyId)).value(SysQuery::value("@Payroll:All"));

        // Adds the PayrollPremiumEarningCode table in query for the case where the calculation frequencies of the premium earning codes are not equal to ALL
        qbdsPremiumEarningCode = premiumEarningCodeQuery.addDataSource(tableNum(PayrollPremiumEarningCode));

        // Adds the premium code range in the query if the user specified the selected premium codes in the dialog.
        if (premiumEarningCodeSelectionOption == PayrollPremiumEarningCodeSelectionOption::Selected)
        {
            qbdsPremiumEarningCode.addRange(fieldNum(PayrollPremiumEarningCode, RecId)).value(con2Str(premiumEarningCodeContainer));
            qbdsPremiumEarningCodeAll.addRange(fieldNum(PayrollPremiumEarningCode, RecId)).value(con2Str(premiumEarningCodeContainer));
        }

        qbdsPayrollCalculationFrequencyPayPeriod = qbdsPremiumEarningCode.addDataSource(tableNum(PayrollCalculationFrequencyPayPeriod));

        qbdsPayrollCalculationFrequencyPayPeriod.joinMode(JoinMode::ExistsJoin);

        qbdsPayrollCalculationFrequencyPayPeriod.addLink(
            fieldNum(PayrollPremiumEarningCode, CalculationFrequency),
            fieldNum(PayrollCalculationFrequencyPayPeriod, CalculationFrequency));

        // Adds the range to filter the premium code for selected pay period.
        qbdsPayrollCalculationFrequencyPayPeriod.addRange(fieldNum(PayrollCalculationFrequencyPayPeriod, PayPeriod)).value(SysQuery::value(payPeriodRecId));

        premiumEarningCodeQueryRun = new queryRun(premiumEarningCodeQuery);

        // Creates a list of valid premium codes.
        while (premiumEarningCodeQueryRun.next())
        {
            premiumEarningCode = premiumEarningCodeQueryRun.get(tableNum(PayrollPremiumEarningCode));
            premiumEarningCodeList.addEnd(premiumEarningCode);
        }

        return premiumEarningCodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>genForPremiumCodesCtrl_selectionChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the premium earning code control based on the selection of generate for premium code control.
    /// </summary>
    /// <param name="_generateForPremiumCodesRadioControl">
    /// The generate for premium code dialog control.
    /// </param>
    /// <returns>
    /// "0" if the premiumEarningCodeSelectionOption value is unknown; otherwise non-zero.
    /// </returns>
    private int genForPremiumCodesCtrl_selectionChange(FormRadioControl _generateForPremiumCodesRadioControl)
    {
        int selectionChange;
        int selectedOption;

        selectionChange = generateForPremiumEarningCodesRadioControlRuntime.selectionChange();

        if (selectionChange)
        {
            // The selection changed; determine if it is an expected option.
            premiumEarningCodeSelectionOption = generateForPremiumEarningCodesRadioControlRuntime.selection();
            selectedOption = enum2int(premiumEarningCodeSelectionOption);

            switch (selectedOption)
            {
                case premiumEarningCodeSelectionOptionAll:
                    premiumEarningCodeNameControlRuntime.enabled(false);
                    premiumEarningCodeLookupControl.set(conNull());
                    break;

                case premiumEarningCodeSelectionOptionSelected:
                    premiumEarningCodeNameControlRuntime.enabled(true);
                    premiumEarningCodeNameControlRuntime.lookupOnly(true);
                    premiumEarningCodeNameControlRuntime.mandatory(NoYes::Yes);
                    break;

                default:
                    // The option was not expected; don't accept the selection.
                    checkfailed("@Payroll:TheOptionYouSelectedIsNotValidSelectADifferentOptionAndTryAg");
                    selectionChange = 0;
            }
        }

        return selectionChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of override premium earning lines check box control and premium code name and lookup controls from the dialog.
    /// </summary>
    /// <returns>
    /// true if the values are successfully retrieved from the dialog.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean retValue;

        retValue = super();

        overridePremiumEarningLines = overridePremiumEarningLinesCheckBoxRuntime.checked();
        premiumEarningCodeContainer = premiumEarningCodeLookupControl.get();

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>PayrollPremiumEarningGenerationTask</c> class for premium earnings processing.
    /// </summary>
    /// <param name="_batchTaskGroupList">
    /// The list of earning statements for the <c>PayrollPremiumEarningGenerationTask</c> class to generate premium earnings.
    /// </param>
    /// <returns>
    /// The <c>PayrollPremiumEarningGenerationTask</c> class.
    /// </returns>
    public RunBaseBatch initializeTask(container _batchTaskGroupList)
    {
        PayrollPremiumEarningGenerationTask payrollPremiumEarningGenerationTask;

        payrollPremiumEarningGenerationTask = payrollPremiumEarningGenerationTask::construct();
        payrollPremiumEarningGenerationTask.parmBatchTaskGroupList(_batchTaskGroupList);
        payrollPremiumEarningGenerationTask.parmOverridePremiumEarnings(overridePremiumEarningLines);
        payrollPremiumEarningGenerationTask.parmPremiumEarningCodeList(premiumEarningCodeList);

        return payrollPremiumEarningGenerationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [#CurrentVersion, #CurrentList, queryRun.pack(), premiumEarningCodeContainer];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverridePremiumEarningLines</Name>
				<Source><![CDATA[
    public boolean parmOverridePremiumEarningLines(boolean _overridePremiumEarningLines = overridePremiumEarningLines)
    {
        overridePremiumEarningLines = _overridePremiumEarningLines;

        return overridePremiumEarningLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayPeriodRecId</Name>
				<Source><![CDATA[
    public PayrollPayPeriodRecId parmPayPeriodRecId(PayrollPayPeriodRecId _payPeriodRecId = payPeriodRecId)
    {
        payPeriodRecId = _payPeriodRecId;

        return payPeriodRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycle_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rebuilds the list of pay period end dates whenever the pay cycle changes.
    /// </summary>
    /// <param name="_payCycleReferenceControl">
    /// The pay cycle dialog control.
    /// </param>
    /// <returns>
    /// true if the pay cycle is modified.
    /// </returns>
    protected boolean payCycle_modified(FormBuildReferenceGroupControl _payCycleReferenceControl)
    {
        return this.payCycleControl_modified(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleHelpText</Name>
				<Source><![CDATA[
    protected str payCycleHelpText()
    {
        return "@Payroll:ThePayCycleUsedToGenerateThePremiumEarnings";
    }

]]></Source>
			</Method>
			<Method>
				<Name>payPeriodHelpText</Name>
				<Source><![CDATA[
    protected str payPeriodHelpText()
    {
        return "@Payroll:ThePayPeriodUsedToGenerateThePremiumEarnings";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules premium earnings generation process for the earning statements.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        #PayrollConstants
        container               batchTaskGroupList;
        Counter                 taskGroupingCount;
        Set                     earningStatementSet = new Set(Types::Record);
        PayrollEarningStatement earningStatement;

        this.filterListOfPremiumEarningCodes();

        if (!this.validateProcess())
        {
            return;
        }

        // Determines number of earning statements to process within a single task of batch.
        taskGroupingCount = PayrollParameters::find().PaymentTaskGroupingCount;

        if (taskGroupingCount == 0)
        {
            taskGroupingCount = 1;
        }

        queryRunPositionDetails = new QueryRun(queryRun.query());

        this.setRangeFromDialog();

        while (queryRunPositionDetails.next())
        {
            earningStatement = queryRunPositionDetails.get(tableNum(PayrollEarningStatement));

            if (!earningStatementSet.in(earningStatement))
            {
                batchTaskGroupList += [earningStatement];

                if (this.isInBatch() && (conLen(batchTaskGroupList) == taskGroupingCount))
                {
                    // If the threshold for grouping earning statements into a task has been reached, schedule the task.
                    this.runScheduleJob(batchTaskGroupList);

                    // Reinitializes the container for the next group of earning statements to schedule
                    batchTaskGroupList = conNull();
                }

                earningStatementSet.add(earningStatement);
            }
        }

        if (conLen(batchTaskGroupList) >= 0)
        {
            //
            // Schedules a batch for any remaining tasks
            //     a. if running in batch mode
            //     b. if not running in batch mode then run all the tasks
            //

            this.runScheduleJob(batchTaskGroupList);
        }

        if (earningStatementSet.elements() == 0)
        {
            info("@Payroll:TheSelectionCriteriaDidNotReturnAnyResults");
        }

        if (!this.isInBatch()
            && EarningStatementSet.elements() != 0
            && !skipCompletionMsgDisplay)
        {
            //Show the number of statements that were updated by the process
            info(this.showStatementCountMessage());

            //
            // Only give the "process is complete" message if the process isn't running as a batch
            // and there are earning statements in the list that have been processed.
            //
            info("@Payroll:TheProcessIsComplete");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduleJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the premium earnings generation process for running in the context of a batch job or running without a batch.
    /// </summary>
    /// <param name="_batchTaskGroupList">
    /// A container containing the list of earning statements.
    /// </param>
    /// <remarks>
    /// If not running under a batch job then process runs immediately.
    /// </remarks>
    public void runScheduleJob(container _batchTaskGroupList)
    {
        PayrollEarningStatement             firstEarningStatement;
        PayrollEarningStatement             lastEarningStatement;
        str                                 taskEarningStatementRange;
        PayrollPremiumEarningGenerationTask payrollPremiumEarningGenerationTask;

        task = this.initializeTask(_batchTaskGroupList);

        if (this.isInBatch())
        {
            // Get the first (and possibly only) earning statement from the container
            firstEarningStatement = conPeek(_batchTaskGroupList, 1);
            taskEarningStatementRange  = firstEarningStatement.DocumentNumber;

            // Determine the proper task description > 1 earning statement per task
            if (conLen(_batchTaskGroupList) > 1)
            {
                // Get the last earning statement in the _batchTaskGroupList
                lastEarningStatement = conPeek(_batchTaskGroupList, conLen(_batchTaskGroupList));
                taskEarningStatementRange = strFmt("@Payroll:Num_1To2", taskEarningStatementRange, lastEarningStatement.DocumentNumber);
            }

            // Assign the description for the task
            task.batchInfo().parmCaption(strFmt("@Payroll:EarningStatement1", taskEarningStatementRange));

            // Schedule for later run
            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            // Add the subtask to the batch job
            batchHeader.addRuntimeTask(task, this.parmCurrentBatch().RecId);
            batchHeader.save();
        }
        else
        {
            task.runOperation();

            // Cast the task to an premium earnings-specific version so that the count can be determined
            payrollPremiumEarningGenerationTask = task as PayrollPremiumEarningGenerationTask;

            statementscounter += payrollPremiumEarningGenerationTask.getEarningStatementCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>PayrollEarningStatement</c> and the <c>PayrollEarningStatementLine</c> tables in the <c>PayrollStatementGenerationQuery</c> query.
    /// </summary>
    protected void setRangeFromDialog()
    {
        QueryBuildDataSource qbdsHcmWorker;
        QueryBuildDataSource qbdsPayrollEarningStatement;
        QueryBuildDataSource qbdsPayrollEarningStatementLine;
        QueryBuildDataSource qbdsStatementGenerationView;

        super();

        //
        // Adds the <c>PayrollEarningStatement</c> and the <c>PayrollEarningStatementLine</c> tables in the existing query
        // to restrict workers who already have the earning statements created for a selected pay period.
        //
        qbdsStatementGenerationView = queryRunPositionDetails.query().dataSourceTable(tableNum(PayrollStatementGenerationView));
        qbdsStatementGenerationView.clearSortIndex();

        qbdsHcmWorker = queryRunPositionDetails.query().dataSourceTable(tableNum(HcmWorker));

        qbdsPayrollEarningStatement = qbdsHcmWorker.addDataSource(tableNum(PayrollEarningStatement));
        qbdsPayrollEarningStatement.joinMode(JoinMode::InnerJoin);
        qbdsPayrollEarningStatement.addLink(fieldNum(HcmWorker, RecId), fieldNum(PayrollEarningStatement, Worker));
        qbdsPayrollEarningStatement.addRange(fieldNum(PayrollEarningStatement, PayPeriod)).value(SysQuery::value(payPeriodRecId));
        qbdsPayrollEarningStatement.addOrderByField(fieldNum(PayrollEarningStatement, DocumentNumber));

        qbdsPayrollEarningStatementLine = qbdsPayrollEarningStatement.addDataSource(tableNum(PayrollEarningStatementLine));
        qbdsPayrollEarningStatementLine.joinMode(JoinMode::ExistsJoin);
        qbdsPayrollEarningStatementLine.addLink(fieldNum(PayrollEarningStatement, RecId), fieldNum(PayrollEarningStatementLine, EarningStatement));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showStatementCountMessage</Name>
				<Source><![CDATA[
    protected Description showStatementCountMessage()
    {
        return (strFmt("@Payroll:Num_1EarningsStatementsHaveBeenUpdated", statementsCounter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version               version = RunBase::getVersion(packedClass);
        container             queryCon;
        boolean               overridePremiumEarningLinesLast;
        PayrollPayPeriodRecId payPeriodRecIdLast;
        boolean               IsUnpacked = false;

        #LOCALMACRO.SaveLastList
            payPeriodRecIdLast,
            overridePremiumEarningLinesLast,
            premiumEarningCodeSelectionOption
        #ENDMACRO

        if (version == #CurrentVersion)
        {
            if (this.inGetSaveLast())
            {
                [version, #SaveLastList, queryCon, premiumEarningCodeContainer] = packedClass;
            }
            else
            {
                [version, #CurrentList, queryCon, premiumEarningCodeContainer] = packedClass;
            }

            if (SysQuery::isPackedOk(queryCon))
            {
                queryRun = new QueryRun(queryCon);
            }
            else
            {
                this.initQuery();
            }

            IsUnpacked = true;
        }

        return IsUnpacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the existing dialog controls including premium code control when enable before the processing starts.
    /// </summary>
    /// <param name="calledFrom">
    /// The object called the validate method; optional.
    /// </param>
    /// <returns>
    /// Returns true if the required parameters of dialog are set.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean isValid;

        isValid = super(calledFrom);

        if (isValid
            && premiumEarningCodeSelectionOption == PayrollPremiumEarningCodeSelectionOption::Selected
            && !premiumEarningCodeNameControlRuntime.valueStr())
        {
            isValid = checkFailed("@Payroll:SelectAtLeastOnePremiumCodeToGenerateEarningsForOrSelectTheO");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcess</Name>
				<Source><![CDATA[
    protected boolean validateProcess()
    {
        boolean isValid = true;

        if (premiumEarningCodeList.elements() == 0)
        {
            isValid = checkFailed("@Payroll:ThePayrollCalculationFrequencyOfOneOrMoreOfTheSelectedPremiu");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of the <c>PayrollPremiumEarningGeneration</c> class on server.
    /// </summary>
    /// <returns>
    /// An instance of the process class on server.
    /// </returns>
    public static PayrollPremiumEarningGeneration construct()
    {
        PayrollPremiumEarningGeneration payrollPremiumEarningGeneration = new PayrollPremiumEarningGeneration();

        return payrollPremiumEarningGeneration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PayrollPremiumEarningGeneration payrollPremiumEarningGeneration;

        payrollPremiumEarningGeneration = PayrollPremiumEarningGeneration::construct();

        if (payrollPremiumEarningGeneration.prompt())
        {
            payrollPremiumEarningGeneration.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>