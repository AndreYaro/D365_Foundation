<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC1a_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_OC1a_Trans extends RAssetReport_OC1_Base
{
    protected RAssetTrans rAssetTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisitionPrice</Name>
				<Source><![CDATA[
    protected Amount acquisitionPrice()
    {
        return this.acquisition(this.transDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalFields</Name>
				<Source><![CDATA[
    public container additionalFields()
    {
        return super() + [fieldNum(RAssetDocument, StandardId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret = super();

        if (ret
            && rAssetTrans.AssetTransType != RAssetTransType::DisposalSale
            && rAssetTrans.AssetTransType != RAssetTransType::Acquisition)
        {
            ret = false;
            error(strFmt("@GLS116756", RAssetTransType::Acquisition, RAssetTransType::DisposalSale, rAssetTrans.AssetTransType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlMainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns main account and analysis dimension value for asset
    /// </summary>
    /// <returns>
    /// Main account num and analysis dimension for asset
    /// </returns>
    protected MainAccountNum controlMainAccountNum()
    {
        LedgerDimensionAccount ledgerDimensionAccount;
    
        if (this.isAcquisition())
        {
            ledgerDimensionAccount = rAssetTrans.LedgerDimension;
        }
    
        if (this.isDepreciation())
        {
            ledgerDimensionAccount = GeneralLedgerExtension::findReferenceNumberAccountingDate_RU(
                rAssetTrans.Voucher,
                rAssetTrans.getAccountingDate(),
                NoYes::Yes,
                LedgerPostingType::FixedAssetsCredit).LedgerDimension;
        }
    
        DimensionDisplayValue ret = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimensionAccount);
    
        if (rAssetParameters.AnalysisDimensionAttribute)
        {
            ret = strFmt("@SYS26868", ret, this.getAnalysisCodeFromLedgerDimension(ledgerDimensionAccount));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFromBusinessAccounting</Name>
				<Source><![CDATA[
    protected TransDate dateFromBusinessAccounting()
    {
        return rAssetStandards.DisposalDate ? rAssetStandards.DisposalDate : this.transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToBusinessAccounting</Name>
				<Source><![CDATA[
    public TransDate dateToBusinessAccounting()
    {
        return acquisitionFirstTrans.RecId ? acquisitionFirstTrans.TransDate : this.transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog dlg = super();

        this.documentDate(rAssetTrans.AttachDocumentDate ? rAssetTrans.AttachDocumentDate : rAssetTrans.TransDate);
        this.documentNumber(rAssetTrans.AttachDocumentNumber);

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentValue</Name>
				<Source><![CDATA[
    public void initDocumentValue(RAssetDocument _document)
    {
        super(_document);

        _document.StandardId = rAssetTrans.AssetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAcquisition</Name>
				<Source><![CDATA[
    protected  boolean isAcquisition()
    {
        return (rAssetTrans.AssetTransType == RAssetTransType::Acquisition
                && rAssetTrans.PostingType != RAssetPostingType::CompanyIssue)
            || rAssetTrans.PostingType == RAssetPostingType::CompanyReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepreciation</Name>
				<Source><![CDATA[
    protected boolean isDepreciation()
    {
        return rAssetTrans.AssetTransType == RAssetTransType::DisposalSale
            || rAssetTrans.PostingType == RAssetPostingType::CompanyIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args  _args)
    {
        if (! _args.record())
        {
            throw error(Error::missingRecord(funcName()));
        }

        if (_args.dataset() != tableNum(RAssetTrans))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        rAssetTrans = _args.record();
        rAssetTable = RAssetTable::find(rAssetTrans.AccountNum);
        rAssetStandards = RAssetStandards::find(rAssetTrans.AccountNum, rAssetTrans.AssetStandardId);

        super(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLocationName</Name>
				<Source><![CDATA[
    protected RAssetLocationName newLocationName()
    {
        return RAssetLocation::find(this.location(this.transDate())).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>oldLocationName</Name>
				<Source><![CDATA[
    protected RAssetLocationName oldLocationName()
    {
        return RAssetLocation::find(this.location(this.transDate())).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetMoveHistCompanyIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last posted company issue record from the <c>RAssetMoveHist</c> history table.
    /// </summary>
    /// <returns>
    /// The last posted company issue record.
    /// </returns>
    protected RAssetMoveHist rAssetMoveHistCompanyIssue()
    {
        RAssetMoveHist rAssetMoveHistTransference;

        if (rAssetTrans.AssetTransType == RAssetTransType::Acquisition
            && rAssetTrans.PostingType == RAssetPostingType::CompanyIssue)
        {
            rAssetMoveHistTransference = RAssetMoveHist::findLastOperation(rAssetTrans.AccountNum,
                RAssetMoveType::CompanyIssue,
                NoYes::Yes,
                rAssetTrans.TransDate);
        }

        return rAssetMoveHistTransference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetMoveHistCompanyReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last posted company receipt record from the <c>RAssetMoveHist</c> history table.
    /// </summary>
    /// <returns>
    /// The last posted company receipt record.
    /// </returns>
    protected RAssetMoveHist rAssetMoveHistCompanyReceipt()
    {
        RAssetMoveHist  rAssetMoveHistReceipt;

        if (rAssetTrans.AssetTransType == RAssetTransType::Acquisition
            && rAssetTrans.PostingType == RAssetPostingType::CompanyReceipt)
        {
            rAssetMoveHistReceipt = RAssetMoveHist::findLastOperation(rAssetTrans.AccountNum,
                RAssetMoveType::CompanyReceipt,
                NoYes::Yes,
                rAssetTrans.TransDate);
        }

        return rAssetMoveHistReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedRecord</Name>
				<Source><![CDATA[
    // This report should be linked with given asset transaction
    public Common relatedRecord()
    {
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return rAssetTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocuments</Name>
				<Source><![CDATA[
    protected void updateDocuments()
    {
        super();

        rAssetTrans = RAssetTrans::find(rAssetTrans.RecId, true);
        rAssetTrans.AttachDocumentDate   = documentDate;
        rAssetTrans.AttachDocumentNumber = documentNumber;
        rAssetTrans.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>