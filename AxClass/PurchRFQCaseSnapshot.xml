<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCaseSnapshot</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQSnapshot</c> class is used to implement the backup and restore functionality for RFQ.
/// </summary>
public class PurchRFQCaseSnapshot
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteSnapshot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the snap shot records.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// The record of the <c>PurchRFQCaseTable</c> table.
    /// </param>
    public void deleteSnapshot(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQSnapshot                      purchRFQSnapshot;

        if (_purchRFQCaseTable)
        {
            delete_from purchRFQSnapshot
                where purchRFQSnapshot.PurchRFQCaseTable == _purchRFQCaseTable.RecId;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>restore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the snapshot of an RFQ.
    /// </summary>
    /// <param name="_purchRFQCaseTableRecId">
    /// The record ID of the <c>PuchRFQCaseTable</c> table record.
    /// </param>
    public void restore(PurchRFQCaseTableRecId _purchRFQCaseTableRecId)
    {
        PurchRFQCaseTable                     purchRFQCaseTable;
        PurchRFQCaseLine                      purchRFQCaseLine;
        PurchRFQVendLink                      purchRFQVendLink;
        PurchRFQCaseTableKMCollection         purchRFQCaseTableKMCollection;
        DocuRef                               docuRef;
        PurchRFQSnapshot                      purchRFQSnapshot;
        PurchRFQAmendment                     purchRFQAmendmentNo, purchRFQAmendment;
        MarkupTrans                           markupTrans;

        purchRFQCaseTable = PurchRFQCaseTable::findRecId(_purchRFQCaseTableRecId, true);

        if (purchRFQCaseTable)
        {
            ttsBegin;

            // Restore the PurchRFQCaseTable record
            this.restorePurchRFQCaseTable(purchRFQCaseTable);

            // Delete the PurchRFQCaseLine records that were created during the amendment
            delete_from purchRFQCaseLine
                where purchRFQCaseLine.RFQCaseId == purchRFQCaseTable.RFQCaseId
                notExists join purchRFQSnapshot
                    where purchRFQSnapshot.RefRecId          == purchRFQCaseLine.RecId
                       && purchRFQSnapshot.RefTableId        == purchRFQCaseLine.TableId
                       && purchRFQSnapshot.PurchRFQCaseTable == _purchRFQCaseTableRecId;

            // Restore the PurchRFQCaseLine records.
            while select purchRFQSnapshot
                where purchRFQSnapshot.RefTableId        == purchRFQCaseLine.TableId
                   && purchRFQSnapshot.PurchRFQCaseTable == _purchRFQCaseTableRecId
                    outer join forUpdate purchRFQCaseLine
                    where purchRFQCaseLine.RecId    == purchRFQSnapshot.RefRecId
                       && purchRFQCaseLine.TableId  == purchRFQSnapshot.RefTableId
            {
                this.restorePurchRFQCaseLine(purchRFQCaseLine, purchRFQSnapshot);
            }

            // Delete the PurchRFQVendLink records that were created during the amendment
            delete_from purchRFQVendLink
                where purchRFQVendLink.RFQCaseId == purchRFQCaseTable.RFQCaseId
                    notExists join purchRFQSnapshot
                    where purchRFQSnapshot.RefRecId          == purchRFQVendLink.RecId
                       && purchRFQSnapshot.RefTableId        == purchRFQVendLink.TableId
                       && purchRFQSnapshot.PurchRFQCaseTable == _purchRFQCaseTableRecId;

            // Restore the PurchRFQVendLink records
            while select purchRFQSnapshot
                where purchRFQSnapshot.RefTableId        == purchRFQVendLink.TableId
                   && purchRFQSnapshot.PurchRFQCaseTable == _purchRFQCaseTableRecId
                    outer join forUpdate purchRFQVendLink
                    where purchRFQVendLink.RecId    == purchRFQSnapshot.RefRecId
                       && purchRFQVendLink.TableId  == purchRFQSnapshot.RefTableId
            {
                this.restorePurchRFQVendLink(purchRFQVendLink, purchRFQSnapshot);
            }

            // Delete the PurchRFQCaseTableKMCollection records that were created during the amendment
            delete_from purchRFQCaseTableKMCollection
                where purchRFQCaseTableKMCollection.RFQCaseId == purchRFQCaseTable.RFQCaseId
                    notExists join purchRFQSnapshot
                    where purchRFQSnapshot.RefRecId          == purchRFQCaseTableKMCollection.RecId
                       && purchRFQSnapshot.RefTableId        == purchRFQCaseTableKMCollection.TableId
                       && purchRFQSnapshot.PurchRFQCaseTable == _purchRFQCaseTableRecId;

            // Restore the PurchRFQCaseTableKMCollection records
            while select purchRFQSnapshot
                where purchRFQSnapshot.PurchRFQCaseTable == purchRFQCaseTable.RecId
                   && purchRFQSnapshot.RefTableId        == purchRFQCaseTableKMCollection.TableId
                    outer join forUpdate purchRFQCaseTableKMCollection
                    where purchRFQCaseTableKMCollection.RecId   == purchRFQSnapshot.RefRecId
                       && purchRFQCaseTableKMCollection.TableId == purchRFQSnapshot.RefTableId
            {
                this.restorePurchRFQCaseTableKMCollection(purchRFQCaseTableKMCollection, purchRFQSnapshot);
            }

            // Delete the MarkupTrans records that were created during the amendment for PurchRFQCaseTable record
            delete_from markupTrans
                where markupTrans.TransTableId  == purchRFQCaseTable.TableId
                   && markupTrans.TransRecId    == purchRFQCaseTable.RecId
                        notExists join purchRFQSnapshot
                        where purchRFQSnapshot.RefRecId          == markupTrans.RecId
                           && purchRFQSnapshot.RefTableId        == markupTrans.TableId
                           && purchRFQSnapshot.PurchRFQCaseTable == purchRFQCaseTable.RecId;

            delete_from markupTrans
                exists join purchRFQCaseLine
                where purchRFQCaseLine.RFQCaseId == purchRFQCaseTable.RFQCaseId
                   && markupTrans.TransTableId   == purchRFQCaseLine.TableId
                   && markupTrans.TransRecId     == purchRFQCaseLine.RecId
                    notExists join purchRFQSnapshot
                    where purchRFQSnapshot.RefRecId          == markupTrans.RecId
                       && purchRFQSnapshot.RefTableId        == markupTrans.TableId
                       && purchRFQSnapshot.PurchRFQCaseTable == _purchRFQCaseTableRecId;

            // Restore the MarkupTrans records
            while select purchRFQSnapshot
                where purchRFQSnapshot.PurchRFQCaseTable == purchRFQCaseTable.RecId
                   && purchRFQSnapshot.RefTableId        == markupTrans.TableId
                    outer join forUpdate markupTrans
                    where purchRFQSnapshot.RefRecId          == markupTrans.RecId
                       && purchRFQSnapshot.RefTableId        == markupTrans.TableId
                       && purchRFQSnapshot.PurchRFQCaseTable == _purchRFQCaseTableRecId
            {
                this.restoreMarkupTrans(markupTrans, purchRFQSnapshot);
            }

            // Delete the DocuRef records that were created during the amendment for PurchRFQCaseTable record
            delete_from docuRef
                where docuRef.RefCompanyId == purchRFQCaseTable.dataAreaId
                    && docuRef.RefTableId  == purchRFQCaseTable.TableId
                    && docuRef.RefRecId    == purchRFQCaseTable.RecId
                        notExists join purchRFQSnapshot
                        where purchRFQSnapshot.RefRecId          == docuRef.RecId
                           && purchRFQSnapshot.RefTableId        == docuRef.TableId
                           && purchRFQSnapshot.PurchRFQCaseTable == purchRFQCaseTable.RecId;

            delete_from docuRef
                    exists join purchRFQCaseLine
                    where purchRFQCaseLine.RFQCaseId == purchRFQCaseTable.RFQCaseId
                       && docuRef.RefCompanyId == purchRFQCaseLine.dataAreaId
                       && docuRef.RefTableId   == purchRFQCaseLine.TableId
                       && docuRef.RefRecId     == purchRFQCaseLine.RecId
                        notExists join purchRFQSnapshot
                        where purchRFQSnapshot.RefRecId          == docuRef.RecId
                           && purchRFQSnapshot.RefTableId        == docuRef.TableId
                           && purchRFQSnapshot.PurchRFQCaseTable == purchRFQCaseTable.RecId;

            // Restore the DocuRef records
            while select purchRFQSnapshot
                where purchRFQSnapshot.PurchRFQCaseTable == purchRFQCaseTable.RecId
                   && purchRFQSnapshot.RefTableId        == docuRef.TableId
                    outer join forUpdate docuRef
                    where docuRef.RecId     == purchRFQSnapshot.RefRecId
                       && docuRef.TableId   == purchRFQSnapshot.RefTableId
            {
                this.restoreDocuRef(docuRef, purchRFQSnapshot);
            }

            // Deletes the latest amendment record.
            select firstOnly AmendmentNumber from purchRFQAmendmentNo
                order by purchRFQAmendmentNo.createdDateTime desc
                where purchRFQAmendmentNo.PurchRFQCaseTable == _purchRFQCaseTableRecId;

            delete_from purchRFQAmendment
                where purchRFQAmendment.PurchRFQCaseTable == _purchRFQCaseTableRecId
                   && purchRFQAmendment.AmendmentNumber == purchRFQAmendmentNo.AmendmentNumber;

            // Finally after the data restore, delete the snap shot records
            this.deleteSnapshot(purchRFQCaseTable);

            ttsCommit;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>restoreDocuRef</Name>
				<Source><![CDATA[
    private void restoreDocuRef(
        DocuRef         _docuRef,
        PurchRFQSnapShot _purchRFQSnapShot)
    {
        DocuRef docuRef;
        boolean recordExist = _docuRef.RecId != 0;

        docuRef = _docuRef;

        docuRef.con2buf(_purchRFQSnapShot.RefTableRecord);

        if (recordExist)
        {
            docuRef.RecId = _purchRFQSnapShot.RefRecId;
        }
        else
        {
            docuRef.RecId = 0;
        }

        docuRef.write();
    }
]]></Source>
			</Method>
			<Method>
				<Name>restoreMarkupTrans</Name>
				<Source><![CDATA[
    private void restoreMarkupTrans(
        MarkupTrans      _markupTrans,
        PurchRFQSnapshot _purchRFQSnapshot)
    {
        MarkupTrans markupTrans;
        boolean     recordExist = _markupTrans.RecId != 0;

        markupTrans = _markupTrans;

        markupTrans.con2buf(_purchRFQSnapshot.RefTableRecord);

        if (recordExist)
        {
            markupTrans.RecId = _purchRFQSnapShot.RefRecId;
        }
        else
        {
            markupTrans.RecId = 0;
        }

        markupTrans.write();
    }
]]></Source>
			</Method>
			<Method>
				<Name>restorePurchRFQCaseLine</Name>
				<Source><![CDATA[
    private void restorePurchRFQCaseLine(
        PurchRFQCaseLine _purchRFQCaseLine,
        PurchRFQSnapshot _purchRFQSnapshot)
    {
        PurchRFQCaseLine purchRFQCaseLine;
        boolean          recordExist = _purchRFQCaseLine.RecId != 0;
        PurchRFQStatus   statusHigh, statusLow;

        purchRFQCaseLine = _purchRFQCaseLine;

        statusHigh = purchRFQCaseLine.StatusHigh;
        statusLow  = purchRFQCaseLine.StatusLow;

        purchRFQCaseLine.con2buf(_purchRFQSnapshot.RefTableRecord);

        if (recordExist)
        {
            purchRFQCaseLine.RecId = _purchRFQSnapShot.RefRecId;
        }
        else
        {
            purchRFQCaseLine.RecId = 0;
        }

        purchRFQCaseLine.StatusHigh = statusHigh;
        purchRFQCaseLine.StatusLow  = statusLow;

        purchRFQCaseLine.write();
    }
]]></Source>
			</Method>
			<Method>
				<Name>restorePurchRFQCaseTable</Name>
				<Source><![CDATA[
    private void restorePurchRFQCaseTable(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQCaseTable purchRFQCaseTable;
        PurchRFQSnapshot  purchRFQSnapshot;
        PurchRFQStatus    statusHigh, statusLow;

        purchRFQCaseTable = _purchRFQCaseTable;
        purchRFQSnapshot = PurchRFQSnapshot::find(purchRFQCaseTable.RecId, purchRFQCaseTable.tableId, purchRFQCaseTable.RecId);

        if (purchRFQSnapshot)
        {
            statusHigh = _purchRFQCaseTable.StatusHigh;
            statusLow  = _purchRFQCaseTable.StatusLow;

            _purchRFQCaseTable.con2buf(purchRFQSnapshot.RefTableRecord);

            _purchRFQCaseTable.RecId      = purchRFQSnapshot.RefRecId;
            _purchRFQCaseTable.StatusHigh = statusHigh;
            _purchRFQCaseTable.StatusLow  = statusLow;
            _purchRFQCaseTable.isAmended  = NoYes::No;
            _purchRFQCaseTable.update();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>restorePurchRFQCaseTableKMCollection</Name>
				<Source><![CDATA[
    private void restorePurchRFQCaseTableKMCollection(
        PurchRFQCaseTableKMCollection   _purchRFQCaseTableKMCollection,
        purchRFQSnapshot                _purchRFQSnapshot)
    {
        PurchRFQCaseTableKMCollection purchRFQCaseTableKMCollection;
        boolean                       recordExist = _purchRFQCaseTableKMCollection.RecId != 0;

        purchRFQCaseTableKMCollection = _purchRFQCaseTableKMCollection;

        purchRFQCaseTableKMCollection.con2buf(_purchRFQSnapshot.RefTableRecord);

        if (recordExist)
        {
            purchRFQCaseTableKMCollection.RecId = _purchRFQSnapShot.RefRecId;
        }
        else
        {
            purchRFQCaseTableKMCollection.RecId = 0;
        }

        purchRFQCaseTableKMCollection.write();
    }
]]></Source>
			</Method>
			<Method>
				<Name>restorePurchRFQVendLink</Name>
				<Source><![CDATA[
    private void restorePurchRFQVendLink(
        PurchRFQVendLink         _purchRFQVendLink,
        purchRFQSnapshot _purchRFQSnapshot)
    {
        PurchRFQVendLink purchRFQVendLink;
        boolean          recordExist = _purchRFQVendLink.RecId != 0;

        purchRFQVendLink = _purchRFQVendLink;

        purchRFQVendLink.con2buf(_purchRFQSnapshot.RefTableRecord);

        if (recordExist)
        {
            purchRFQVendLink.RecId = _purchRFQSnapShot.RefRecId;
        }
        else
        {
            purchRFQVendLink.RecId = 0;
        }

        purchRFQVendLink.write();
    }
]]></Source>
			</Method>
			<Method>
				<Name>snap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes the snapshot of an RFQ.
    /// </summary>
    /// <param name="_purchRFQCaseTableRecId">
    /// The record ID of the <c>PuchRFQCaseTable</c> table record.
    /// </param>
    public void snap(PurchRFQCaseTableRecId _purchRFQCaseTableRecId)
    {
        PurchRFQCaseTable             purchRFQCaseTable;
        PurchRFQCaseLine              purchRFQCaseLine;
        PurchRFQVendLink              purchRFQVendLink;
        PurchRFQCaseTableKMCollection purchRFQCaseTableKMCollection;
        DocuRef                       docuRef;
        MarkupTrans                   markupTrans;

        if (_purchRFQCaseTableRecId)
        {
            purchRFQCaseTable = PurchRFQCaseTable::findRecId(_purchRFQCaseTableRecId);

            ttsBegin;

            this.snapPurchRFQCaseTable(purchRFQCaseTable);

            while select purchRFQCaseLine
                where purchRFQCaseLine.RFQCaseId == purchRFQCaseTable.RFQCaseId
            {
                this.snapPurchRFQCaseLine(purchRFQCaseLine, _purchRFQCaseTableRecId);
            }

            while select purchRFQVendLink
                where purchRFQVendLink.RFQCaseId == purchRFQCaseTable.RFQCaseId
            {
                this.snapPurchRFQVendLink(purchRFQVendLink, _purchRFQCaseTableRecId);
            }

            while select purchRFQCaseTableKMCollection
                where purchRFQCaseTableKMCollection.RFQCaseId == purchRFQCaseTable.RFQCaseId
            {
                this.snapPurchRFQCaseTableKMCollection(purchRFQCaseTableKMCollection, _purchRFQCaseTableRecId);
            }

            while select markupTrans
                where markupTrans.TransTableId == purchRFQCaseTable.TableId
                   && markupTrans.TransRecId   == purchRFQCaseTable.RecId
            {
                this.snapMarkupTrans(markupTrans, _purchRFQCaseTableRecId);
            }

            while select markupTrans
                exists join purchRFQCaseLine
                where markupTrans.TransTableId   == purchRFQCaseLine.TableId
                   && markupTrans.TransRecId     == purchRFQCaseLine.RecId
                   && purchRFQCaseLine.RFQCaseId == purchRFQCaseTable.RFQCaseId
            {
                this.snapMarkupTrans(markupTrans, _purchRFQCaseTableRecId);
            }

            while select docuRef
                where docuRef.RefCompanyId == purchRFQCaseTable.dataAreaId
                    && docuRef.RefTableId  == purchRFQCaseTable.TableId
                    && docuRef.RefRecId    == purchRFQCaseTable.RecId
            {
                this.snapPurchDocuRef(docuRef, _purchRFQCaseTableRecId);
            }

            while select docuRef
                join dataAreaId, TableId, RecId from purchRFQCaseLine
                where docuRef.RefCompanyId          == purchRFQCaseLine.dataAreaId
                    && docuRef.RefTableId           == purchRFQCaseLine.TableId
                    && docuRef.RefRecId             == purchRFQCaseLine.RecId
                    && purchRFQCaseLine.RFQCaseId   == purchRFQCaseTable.RFQCaseId
            {
                this.snapPurchDocuRef(docuRef, _purchRFQCaseTableRecId);
            }

            ttsCommit;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>snapMarkupTrans</Name>
				<Source><![CDATA[
    private void snapMarkupTrans(
        MarkupTrans         _markupTrans,
        PurchRFQCaseRecId   _purchRFQCaseRecId)
    {
        MarkupTrans                 markupTrans;
        PurchRFQSnapshot            purchRFQSnapshot;

        markupTrans = _markupTrans;

        if (_markupTrans)
        {
            PurchRFQSnapshot.RefRecId          = _markupTrans.RecId;
            PurchRFQSnapshot.RefTableId        = _markupTrans.TableId;
            PurchRFQSnapshot.RefTableRecord    = _markupTrans.buf2con();
            PurchRFQSnapshot.PurchRFQCaseTable = _purchRFQCaseRecId;
            PurchRFQSnapshot.insert();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>snapPurchDocuRef</Name>
				<Source><![CDATA[
    private void snapPurchDocuRef(
        DocuRef           _docuRef,
        PurchRFQCaseRecId _purchRFQCaseRecId)
    {
        DocuRef             docuRef;
        PurchRFQSnapshot    purchRFQSnapshot;

        docuRef = _docuRef;

        if (_docuRef)
        {
            purchRFQSnapshot.RefRecId           = _docuRef.RecId;
            purchRFQSnapshot.RefTableId         = _docuRef.TableId;
            purchRFQSnapshot.RefTableRecord     = _docuRef.buf2con();
            purchRFQSnapshot.PurchRFQCaseTable  = _purchRFQCaseRecId;
            purchRFQSnapshot.insert();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>snapPurchRFQCaseLine</Name>
				<Source><![CDATA[
    private void snapPurchRFQCaseLine(
        PurchRFQCaseLine  _purchRFQCaseLine,
        PurchRFQCaseRecId _purchRFQCaseRecId)
    {
        PurchRFQCaseLine          purchRFQCaseLine;
        PurchRFQSnapshot    purchRFQSnapshot;

        purchRFQCaseLine = _purchRFQCaseLine;

        if (_purchRFQCaseLine)
        {
            purchRFQSnapshot.RefRecId           = _purchRFQCaseLine.RecId;
            purchRFQSnapshot.RefTableId         = _purchRFQCaseLine.TableId;
            purchRFQSnapshot.RefTableRecord     = _purchRFQCaseLine.buf2con();
            purchRFQSnapshot.PurchRFQCaseTable  = _purchRFQCaseRecId;
            purchRFQSnapshot.insert();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>snapPurchRFQCaseTable</Name>
				<Source><![CDATA[
    private void snapPurchRFQCaseTable(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQCaseTable          purchRFQCaseTable;
        PurchRFQSnapshot    purchRFQSnapshot;

        purchRFQCaseTable = _purchRFQCaseTable;

        if (_purchRFQCaseTable)
        {
            purchRFQSnapshot.RefRecId           = _purchRFQCaseTable.RecId;
            purchRFQSnapshot.RefTableId         = _purchRFQCaseTable.TableId;
            purchRFQSnapshot.RefTableRecord     = _purchRFQCaseTable.buf2con();
            purchRFQSnapshot.PurchRFQCaseTable  = _purchRFQCaseTable.RecId;
            purchRFQSnapshot.insert();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>snapPurchRFQCaseTableKMCollection</Name>
				<Source><![CDATA[
    private void snapPurchRFQCaseTableKMCollection(
        PurchRFQCaseTableKMCollection _purchRFQCaseTableKMCollection,
        PurchRFQCaseRecId             _purchRFQCaseRecId)
    {
        PurchRFQCaseTableKMCollection         purchRFQCaseTableKMCollection;
        PurchRFQSnapshot    purchRFQSnapshot;

        purchRFQCaseTableKMCollection = _purchRFQCaseTableKMCollection;

        if (_purchRFQCaseTableKMCollection)
        {
            purchRFQSnapshot.RefRecId           = _purchRFQCaseTableKMCollection.RecId;
            purchRFQSnapshot.RefTableId         = _purchRFQCaseTableKMCollection.TableId;
            purchRFQSnapshot.RefTableRecord     = _purchRFQCaseTableKMCollection.buf2con();
            purchRFQSnapshot.PurchRFQCaseTable  = _purchRFQCaseRecId;
            purchRFQSnapshot.insert();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>snapPurchRFQVendLink</Name>
				<Source><![CDATA[
    private void snapPurchRFQVendLink(
        PurchRFQVendLink  _purchRFQVendLink,
        PurchRFQCaseRecId _purchRFQCaseRecId)
    {
        PurchRFQVendLink         purchRFQVendLink;
        PurchRFQSnapshot    purchRFQSnapshot;

        purchRFQVendLink = _purchRFQVendLink;

        if (_purchRFQVendLink)
        {
            purchRFQSnapshot.RefRecId           = _purchRFQVendLink.RecId;
            purchRFQSnapshot.RefTableId         = _purchRFQVendLink.TableId;
            purchRFQSnapshot.RefTableRecord     = _purchRFQVendLink.buf2con();
            purchRFQSnapshot.PurchRFQCaseTable  = _purchRFQCaseRecId;
            purchRFQSnapshot.insert();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQCaseSnapshot construct()
    {
        return new PurchRFQCaseSnapshot();
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>