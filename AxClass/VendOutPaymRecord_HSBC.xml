<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymRecord_HSBC</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendOutPaymRecord_HSBC extends VendOutPaymRecord
{
    private const str Zero = '0';
    private const str Space = ' ';
    private boolean skipPaymRecord;
    private str 265 basicPaymentRecord;
    private container hsbcBasicPaymentRecord;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPaymentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the payment date is within 173 days of the current system date.
    /// </summary>
    /// <returns>
    /// true if the payment date is within 173 days of the current system date; otherwise, false.
    /// </returns>
    /// <remarks>
    /// An out of range date will produce an appropriate error message and the file export will not occur.
    /// </remarks>
    protected boolean checkPaymentDate()
    {
        const int MaxDaysPast = 173;
        const int MaxDaysFuture = 100;

        boolean ok = true;
        date testDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        int offsetDays = 0;

        offsetDays = testDate - custVendPaym.paymDate();

        if ((offsetDays < 0) && (abs(offsetDays) > MaxDaysPast))
        {
            ok = checkFailed(strfmt("@SYS98754", this.parmCustVendPaym().ledgerJournalTrans().PaymMode));
        }
        else if (offsetDays > MaxDaysFuture)
        {
            ok = checkFailed(strfmt("@SYS98754", this.parmCustVendPaym().ledgerJournalTrans().PaymMode));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    public boolean checkValues(LedgerJournalTrans _ledgerJournalTrans = null,
        RunbaseProgress _progress = null)
    {
        boolean ok = true;
        VendBankAccount vendBankAccount;
        LogisticsAddressCountryRegionISOCode isoCode;

        ok = super(_ledgerJournalTrans, _progress);

        changecompany(custVendPaym.ledgerJournalTrans().Company)
        {
            // Only transactions with Debit Amounts can be used from Accounts Payable
            if (custVendPaym.paymAmountInSendersCurrency() <= 0)
            {
                ok = checkFailed("@SYS98765");
            }

            if (this.parmCustVendPaym().custVendTable().BankAccountId)
            {
                vendBankAccount = VendBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(), this.parmCustVendPaym().custVendTable().BankAccountId);
                if (vendBankAccount)
                {
                    if (!vendBankAccount.RegistrationNum)
                    {
                        ok = checkFailed(strfmt("@SYS98758", vendBankAccount.AccountID, custVendPaym.ledgerJournalTrans().parmAccount()));
                    }

                    if (!vendBankAccount.AccountNum)
                    {
                        ok = checkFailed(strfmt("@SYS82529", vendBankAccount.AccountID, custVendPaym.ledgerJournalTrans().parmAccount()));
                    }

                    isoCode = LogisticsAddressCountryRegion::find(LogisticsLocationEntity::location2PostalAddress(vendBankAccount.Location).CountryRegionId).ISOcode;

                    if (!(isoCode == #isoCA || isoCode == #isoUS))
                    {
                        warning("@SYS115580");
                        this.parmSkipPaymRecord(true);
                    }
                }
                else
                {
                    ok = checkFailed(strfmt("@SYS98116", custVendPaym.ledgerJournalTrans().parmAccount()));
                }
            }
            else
            {
                ok = checkFailed(strfmt("@SYS98116", custVendPaym.ledgerJournalTrans().parmAccount()));
            }

            if (!this.parmCustVendPaym().ledgerJournalTrans().PaymSpec)
            {
                ok = checkFailed(strfmt("@SYS98763", this.parmCustVendPaym().ledgerJournalTrans().PaymMode));
            }

            ok = this.checkPaymentDate() && ok;

            if (ok && VendOutPaymRecord_RBC_Credit::isIATTransaction(vendBankAccount.Location))
            {
                ok = this.validateIATAddressRecord();
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField01</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the record type field in the HSBC record.
    /// </summary>
    /// <remarks>
    /// The record type field will always be D.
    /// </remarks>
    protected void fillField01()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(01) | Pos(001-001) | Size(1) | Format(AN) | Field Name(Record Type)
        #define.recType('C')
        #define.fieldPosition(1)

        this.strInsert(#recType, #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField02</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the record count field in the HSBC record.
    /// </summary>
    protected void fillField02()
    {
        #define.RecCountLength(9)
        #define.fieldPosition(2)

        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(02) | Pos(002-010) | Size(9) | Format(N) | Field Name(Record Count)

        this.strInsert(num2Str0(custVendOutPaym.parmRecord_Count(1), #RecCountLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField03</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the client number field in the HSBC record.
    /// </summary>
    protected void fillField03()
    {
        #define.fieldPosition(11)

        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(04) | Pos(011-020) | Size(10) | Format(AN) | Field Name(Client Number)

        this.strInsert(custVendOutPaym.parmEFTOrigID(), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField04</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the file creation number field in the HSBC record.
    /// </summary>
    protected void fillField04()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(04) | Pos(021-024) | Size(4) | Format(AN) | Field Name(File Creation Number)
        #define.fieldPosition(21)

        this.strInsert(custVendOutPaym.parmFileCreationNum(), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField05</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the CPA code field in the HSBC record.
    /// </summary>
    protected void fillField05()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(05) | Pos(025-027) | Size(3) | Format(AN) | Field Name(CPA Code)
        #define.fieldPosition(25)

        BankCentralBankPurposeCode bankCode;

        bankCode = custVendPaym.ledgerJournalTrans().BankCentralBankPurposeCode;

        if (!bankCode)
        {
            bankCode = '450';
        }
        this.strInsert(bankCode, #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField06</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the amount field in the HSBC record.
    /// </summary>
    protected void fillField06()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(06) | Pos(028-037) | Size(10) | Format(AN) | Field Name(Amount)
        #define.fieldPosition(28)

        this.strInsert(strRFix(stralpha(num2Str0(custVendPaym.paymAmountInForeignCurrency(), 10, 2)), 10, Zero), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField07</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the due date century field in the HSBC record.
    /// </summary>
    protected void fillField07()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(07) | Pos(038-038) | Size(1) | Format(AN) | Field Name(Due Date Century)
        #define.fieldPosition(38)

        this.strInsert(Zero, #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField08</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the due date year field in the HSBC record.
    /// </summary>
    protected void fillField08()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(08) | Pos(039-040) | Size(2) | Format(AN) | Field Name(Due Date Year)
        #define.fieldPosition(39)

        this.strInsert(int2str(year(custVendPaym.paymDate()) mod 1000), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField09</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the due date day field in the HSBC record.
    /// </summary>
    protected void fillField09()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(09) | Pos(041-043) | Size(3) | Format(AN) | Field Name(Due Date Day)
        str julianDate;
        #define.fieldPosition(41)

        julianDate = date2Julian(custVendPaym.paymDate());
        this.strInsert(subStr(julianDate,strLen(julianDate)-2,3), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField10_11</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the bank number and branch number fields in the HSBC record.
    /// </summary>
    protected void fillField10_11()
    {
        #define.RoutingNumLen(9)
        #define.fieldPosition(44)

        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Fields(10, 11) | Pos(044-047, 048-052) | Size(4, 5) | Format(N) | Field Name(Bank number, Branch\transit number)

        str bankRegistrationNumber = custVendPaym.recieversBankRegistrationNumber();
        // If the receivers bank route number is 9 characters use the entire number.
        if (strlen(bankRegistrationNumber) == #RoutingNumLen)
        {
            this.strInsert(bankRegistrationNumber, #fieldPosition);
        }
        // Otherwise use the first three (3) Zero padded with the last five (5) for
        // a total of nine characters. ex: '1234567' = '001234567'
        else
        {
            this.strInsert(strfmt(strRFix(substr(bankRegistrationNumber, 1, 3), 4, Zero) +
                                          substr(bankRegistrationNumber, 4, 5)), #fieldPosition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField12</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the account number field in the HSBC record.
    /// </summary>
    protected void fillField12()
    {
        #define.AcctNumLength(12)
        #define.fieldPosition(53)

        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(12) | Pos(053-064) | Size(12) | Format(AN) | Field Name(Account number)

        this.strInsert(strLFix(custVendPaym.recieversBankAccount(), #AcctNumLength, Space), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField13</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills zeros in the HSBC record.
    /// </summary>
    /// <remarks>
    /// This method will always fill zeros.
    /// </remarks>
    protected void fillField13()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(13) | Pos(065-086) | Size(22) | Format(AN) | Field Name(Item Trace Number)

        #define.fieldPosition(65)
        #define.fieldLength(22)

        this.strInsert(strRep(Zero, #fieldLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField14</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills zeros in the HSBC record.
    /// </summary>
    /// <remarks>
    /// This method will always fill zeros.
    /// </remarks>
    protected void fillField14()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(14) | Pos(087-089) | Size(3) | Format(AN) | Field Name(Stored Trans Type)
        #define.fieldPosition(87)
        #define.fieldLength(3)

        this.strInsert(strRep(Zero, #fieldLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField15</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the client short name field in the HSBC record.
    /// </summary>
    protected void fillField15()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(15) | Pos(90-104) | Size(15) | Format(AN) | Field Name(Client short name)

        #define.ClientShortNameLength(15)
        #define.fieldPosition(90)

        if (custVendPaym.bankAccountTable().BankCompanyStatementName)
        {
            this.strInsert(strLFix(custVendPaym.bankAccountTable().BankCompanyStatementName, #ClientShortNameLength, Space), #fieldPosition);
        }
        else
        {
            //If the Bank Company Statement Name is blank, use the first 15 characters from the Company Name...
            this.strInsert(substr(CompanyInfo::find().name(), 1, #ClientShortNameLength), #fieldPosition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField16</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the customer name field in the HSBC record.
    /// </summary>
    protected void fillField16()
    {
        #define.VendNameLength(30)
        #define.fieldPosition(105)

        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(16) | Pos(105-134) | Size(30) | Format(AN) | Field Name(Customer name)

        this.strInsert(strLFix(custVendPaym.recieversCompanyName(), #VendNameLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField17</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the client long name field in the HSBC record.
    /// </summary>
    protected void fillField17()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(17) | Pos(135-164) | Size(30) | Format(AN) | Field Name(Client long name)

        #define.ClientLongNameLength(30)
        #define.fieldPosition(135)

        if (custVendPaym.bankAccountTable().BankCompanyStatementName)
        {
            this.strInsert(strLFix(custVendPaym.bankAccountTable().BankCompanyStatementName, #ClientLongNameLength, Space), #fieldPosition);
        }
        else
        {
            //If the Bank Company Statement Name is blank, use the first 30 characters from the Company Name...
            this.strInsert(substr(CompanyInfo::find().name(), 1, #ClientLongNameLength), #fieldPosition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField18</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the client number field in the HSBC record.
    /// </summary>
    protected void fillField18()
    {
        #define.fieldPosition(165)

        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(18) | Pos(165-174) | Size(10) | Format(AN) | Field Name(EFT Originator ID)

        this.strInsert(custVendOutPaym.parmEFTOrigID(), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField19</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills spaces in the HSBC record.
    /// </summary>
    /// <remarks>
    /// This method will always fill spaces.
    /// </remarks>
    protected void fillField19()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(19) | Pos(175-193) | Size(19) | Format(AN) | Field Name(Transaction Origination XRef)
        #define.fieldPosition(175)
        #define.fieldLength(19)

        this.strInsert(strRep(Space, #fieldLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField20</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the transaction return financial institution field in the HSBC record.
    /// </summary>
    protected void fillField20()
    {
        #define.fieldPosition(194)
        #define.fieldLength(9)

        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(20) | Pos(194-202) | Size(9) | Format(AN) | Field Name(Transaction Return Financial Institution)

        this.strInsert(strRep(Space, #fieldLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField21</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the transaction return account field in the HSBC record.
    /// </summary>
    protected void fillField21()
    {
        #define.fieldPosition(203)
        #define.fieldLength(12)

        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(21) | Pos(203-214) | Size(12) | Format(AN) | Field Name(Transaction Return Account)

        this.strInsert(strRep(Space, #fieldLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField22</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills spaces in the HSBC record.
    /// </summary>
    /// <remarks>
    /// This method will always fill spaces.
    /// </remarks>
    protected void fillField22()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(22) | Pos(215-229) | Size(15) | Format(AN) | Field Name(Originator's Sundry Info)
        #define.fieldPosition(215)
        #define.fieldLength(15)

        this.strInsert(strRep(Space, #fieldLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField23</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills spaces in the HSBC record.
    /// </summary>
    /// <remarks>
    /// This method will always fill spaces.
    /// </remarks>
    protected void fillField23()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(23) | Pos(230-251) | Size(22) | Format(AN) | Field Name(Stored Trace Number)
        #define.fieldPosition(230)
        #define.fieldLength(22)

        this.strInsert(strRep(Space, #fieldLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField24</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills spaces in the HSBC record.
    /// </summary>
    /// <remarks>
    /// This method will always fill spaces.
    /// </remarks>
    protected void fillField24()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(24) | Pos(252-253) | Size(2) | Format(AN) | Field Name(Settlement Code)
        #define.fieldPosition(252)
        #define.fieldLength(2)

        this.strInsert(strRep(Space, #fieldLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField25</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills zeros in the HSBC record.
    /// </summary>
    /// <remarks>
    /// This method will always fill spaces.
    /// </remarks>
    protected void fillField25()
    {
        // HSBC Distribution Format (CA) Credit File Format Specififcation
        // Basic Payment Record
        // Field(25) | Pos(254-264) | Size(11) | Format(AN) | Field Name(Invalid Data Element)
        #define.fieldPosition(254)
        #define.fieldLength(11)

        this.strInsert(strRep(Zero, #fieldLength), #fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillIATAddressInfoRecord1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a IAT address record1 for output to the export file.
    /// </summary>
    /// <returns>
    /// A container.
    /// </returns>
    ///
    private container fillIATAddressInfoRecord1()
    {
        container iatAddressRecord = connull();
        LogisticsPostalAddress companyInfoAddress;
        #define.recType('C')
        #define.trxCode('AD1')
        #define.validChars('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')

        str 6 recordCount = strrep(Zero, 6);
        str 1 recordType = #recType;
        str 3 transactionCode = #trxCode;
        str 10 clientNumber = strrep(Zero, 10);
        str 30 clientName = strrep(Space, 30);
        str 35 compAddress = strrep(Space, 35);
        str 35 compCityState = strrep(Space, 35);
        str 32 compCountryZipCode = strrep(Space, 32);

        companyInfoAddress = CompanyInfo::find().postalAddress();
        recordCount = num2Str0(custVendOutPaym.parmRecord_Count(1), 6);
        clientNumber = strLFix(custVendOutPaym.parmEFTOrigID(), 10);
        clientName = strLFix(strkeep(strLFix(CompanyInfo::find().name(), 30, Space), #validChars), 30, Space);
        compAddress = strLFix(strrem(companyInfoAddress.Street, '\n'), 35, Space);
        compCityState = strLFix(VendOutPaymRecord_RBC_Credit::getCityStateName(companyInfoAddress), 35, Space);
        compCountryZipCode = strLFix(VendOutPaymRecord_RBC_Credit::getCountryZipCode(companyInfoAddress), 32, Space);

        iatAddressRecord = conins(iatAddressRecord, 1, recordCount +
                                                         recordType +
                                                         transactionCode +
                                                         clientNumber +
                                                         clientName +
                                                         compAddress +
                                                         compCityState +
                                                         compCountryZipCode);

        return iatAddressRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillIATAddressInfoRecord2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a IAT Address Record2 for output to the export file.
    /// </summary>
    /// <returns>
    /// A container.
    /// </returns>
    ///
    private container fillIATAddressInfoRecord2()
    {
        LogisticsPostalAddress vendTableAddress;
        container iatAddressRecord = connull();
        #define.recType('C')
        #define.trxCode('AD2')
        #define.USTrxTypeCode('BUS')
        #define.CmpEntDesc('PAYABLES')

        str 6 recordCount = strrep(Zero, 6);
        str 1 recordType = #recType;
        str 3 transactionCode = #trxCode;
        str 10 clientNumber = strrep(Zero, 10);
        str 35 payeeAddress = strrep(Space,35);
        str 35 payeeCityState = strrep(Space,35);
        str 35 payeeCountryZipCode = strrep(Space,35);
        str 3 usTransTypeCode = #USTrxTypeCode;
        str 10 companyEntryDesc = #CmpEntDesc;
        str 14 fillerReserved;

        vendTableAddress = VendTable::findByCompany(
                            custVendPaym.ledgerJournalTrans().Company,
                            custVendPaym.custVendTable().AccountNum).postalAddress();
        recordCount = num2Str0(custVendOutPaym.parmRecord_Count(1), 6);
        clientNumber = strLFix(custVendOutPaym.parmEFTOrigID(), 10);
        payeeAddress = strLFix(strrem(vendTableAddress.Street, '\n'), 35, Space);
        payeeCityState = strLFix(VendOutPaymRecord_RBC_Credit::getCityStateName(vendTableAddress), 35, Space);
        payeeCountryZipCode = strLFix(VendOutPaymRecord_RBC_Credit::getCountryZipCode(vendTableAddress), 35, Space);
        companyEntryDesc = strLFix(#CmpEntDesc, 10, Space);
        fillerReserved = strLFix(fillerReserved, 14, Space);

        iatAddressRecord = conins(iatAddressRecord, 1, recordCount +
                                     recordType +
                                     transactionCode +
                                     clientNumber +
                                     payeeAddress +
                                     payeeCityState +
                                     payeeCountryZipCode +
                                     usTransTypeCode +
                                     companyEntryDesc +
                                     fillerReserved);

        return iatAddressRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the data preparation and organization for each record in the export file.
    /// </summary>
    protected void fillRecord()
    {
        this.fillField01();
        this.fillField02();
        this.fillField03();
        this.fillField04();
        this.fillField05();
        this.fillField06();
        this.fillField07();
        this.fillField08();
        this.fillField09();
        this.fillField10_11();
        this.fillField12();
        this.fillField13();
        this.fillField14();
        this.fillField15();
        this.fillField16();
        this.fillField17();
        this.fillField18();
        this.fillField19();
        this.fillField20();
        this.fillField21();
        this.fillField22();
        this.fillField23();
        this.fillField24();
        this.fillField25();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class properties required for each record recorded in the file export.
    /// </summary>
    protected void initRecord()
    {
        hsbcBasicPaymentRecord = connull();
        basicPaymentRecord = strrep(Space, 265);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the name of the specification to be displayed in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the specification to be displayed in the user interface.
    /// </returns>
    public PaymInterfaceName interfaceName()
    {
        return 'HSBC Distribution Format (CA)';
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    public void output()
    {
        VendBankAccount vendBankAccount;

        custVendOutPaym.total(custVendPaym.paymAmountInForeignCurrency());
        this.initRecord();
        this.fillRecord();
        hsbcBasicPaymentRecord = conins(hsbcBasicPaymentRecord, 1, basicPaymentRecord);
        file.writeExp(hsbcBasicPaymentRecord);

        vendBankAccount = VendBankAccount::findByCompany(
            custVendPaym.ledgerJournalTrans().Company,
            custVendPaym.custVendTable().AccountNum,
            custVendPaym.custVendTable().BankAccountId);

        if (VendOutPaymRecord_RBC_Credit::isIATTransaction(vendBankAccount.Location))
        {
            file.writeExp(this.fillIATAddressInfoRecord1());
            file.writeExp(this.fillIATAddressInfoRecord2());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipPaymRecord</Name>
				<Source><![CDATA[
    public boolean parmSkipPaymRecord(boolean _skipPaymRecord = skipPaymRecord)
    {
        skipPaymRecord = _skipPaymRecord;
        return skipPaymRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the supplied data at the specified position in the payment record.
    /// </summary>
    /// <param name="_fieldValue">
    /// The value to write.
    /// </param>
    /// <param name="_fieldPosition">
    /// The position in the record.
    /// </param>
    protected void strInsert(str _fieldValue, int _fieldPosition)
    {
        // Poke a supplied string into the "basicPaymentRecord" and a given position
        basicPaymentRecord = strpoke(basicPaymentRecord, _fieldValue, _fieldPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIATAddressRecord</Name>
				<Source><![CDATA[
    private boolean validateIATAddressRecord()
    {
        boolean ok = true;
        AccountNum accountNum;
        PaymMode paymMode;
        LogisticsPostalAddress companyInfoAddress;
        LogisticsPostalAddress vendorAddress;

        paymMode = custVendPaym.ledgerJournalTrans().PaymMode;
        accountNum = custVendPaym.ledgerJournalTrans().parmAccount();
        companyInfoAddress = CompanyInfo::find().postalAddress();
        if (!companyInfoAddress.Street
            || !companyInfoAddress.City
            || !companyInfoAddress.CountryRegionId)
        {
            ok = checkFailed(strfmt("@SYS332370", paymMode));
        }

        vendorAddress = VendTable::findByCompany(
                    custVendPaym.ledgerJournalTrans().Company,
                    accountNum).postalAddress();
        if (!vendorAddress.Street
            || !vendorAddress.City
            || !vendorAddress.CountryRegionId)
        {
            ok = checkFailed(strfmt("@SYS332368", paymMode, accountNum));
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>