<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversalSyncAsync_JP_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(TransactionReversalSyncAsync))]
internal final static class TransactionReversalSyncAsync_JP_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reverseTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an extension method of <c>reverseTransaction</c>.
    /// It updates status of consolidated invoice after successful reversal of posted journal of consolidated invoice.
    /// </summary>
    /// <param name = "_contract">The contract specifying details of this reversal request.</param>
    /// <param name = "_providers">The list of reversal providers.</param>
    /// <param name = "_reversalExecutionDetail">The <c>TransactionReversalExecutionDetail</c> record representing the transaction being reversed.</param>
    /// <returns>A boolean indicating if the transaction was reversed.</returns>
    internal static boolean reverseTransaction(TransactionReversalContract _contract, Array _providers, TransactionReversalExecutionDetail _reversalExecutionDetail)
    {
        boolean didAProviderReverseSuccessfully = next reverseTransaction(_contract, _providers, _reversalExecutionDetail);

        if (TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(true) && didAProviderReverseSuccessfully)
        {
            TransactionReversalSyncAsync::custUpdateReversalConsInvoice_JP(_reversalExecutionDetail);
            TransactionReversalSyncAsync::vendUpdateReversalConsInvoice_JP(_reversalExecutionDetail);
        }
        return didAProviderReverseSuccessfully;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custUpdateReversalConsInvoice_JP</Name>
				<Source><![CDATA[
    private static void custUpdateReversalConsInvoice_JP(TransactionReversalExecutionDetail _reversalExecutionDetail)
    {
        CustConsInvoice_JP custConsInvoice_JP;

        switch (_reversalExecutionDetail.ReferenceTableId)
        {
            case tableNum(GeneralJournalAccountEntry):
                custConsInvoice_JP = CustConsInvoice_JP::findByGeneralJournalAccountEntry(_reversalExecutionDetail.ReferenceRecId);
                break;

            case tableNum(LedgerJournalTable):
                custConsInvoice_JP = CustConsInvoice_JP::findByLedgerJournalTable(_reversalExecutionDetail.ReferenceRecId);
                break;
        }

        if (custConsInvoice_JP.RecId)
        {
            custConsInvoice_JP.updateReversalStatusFromReversal(_reversalExecutionDetail.SubledgerVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendUpdateReversalConsInvoice_JP</Name>
				<Source><![CDATA[
    private static void vendUpdateReversalConsInvoice_JP(TransactionReversalExecutionDetail _reversalExecutionDetail)
    {
        VendConsInvoice_JP vendConsInvoice_JP;

        switch (_reversalExecutionDetail.ReferenceTableId)
        {
            case tableNum(GeneralJournalAccountEntry):
                vendConsInvoice_JP = VendConsInvoice_JP::findByGeneralJournalAccountEntry(_reversalExecutionDetail.ReferenceRecId);
                break;

            case tableNum(LedgerJournalTable):
                vendConsInvoice_JP = VendConsInvoice_JP::findByLedgerJournalTable(_reversalExecutionDetail.ReferenceRecId);
                break;
        }

        if (vendConsInvoice_JP.RecId)
        {
            vendConsInvoice_JP.updateReversalStatusFromReversal(_reversalExecutionDetail.SubledgerVoucher);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>