<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMconsistencyCheck_Table</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BOMconsistencyCheck_Table extends SysConsistencyCheck implements BatchRetryable
{
    // Packed
    protected boolean checkCircularity;
    private boolean skipCircularityCheckForPassedBOMs;
    protected QueryRun queryRun;

    // Dialog
    protected DialogField dialogCheckCircularity;
    protected DialogField dialogSkipCircularityCheckPassedBOM;

    // cached BOMHierarchyCheck instance
    protected BOMHierarchyCheck bomHierarchyCheck;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        checkCircularity
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(BOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase dialog = super();
        dialogCheckCircularity  = dialog.addFieldValue(extendedTypeStr(BOMCheckCircularity), checkCircularity);
        dialogSkipCircularityCheckPassedBOM  = dialog.addFieldValue(enumStr(NoYes), skipCircularityCheckForPassedBOMs, "@SCM:BOMCheckCircularitySkipPassedBOMs");
        dialog.addMenuItemButton(MenuItemType::Display, menuItemDisplayStr(runbaseQueryDialog));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        checkCircularity = dialogCheckCircularity.value();
        skipCircularityCheckForPassedBOMs = dialogSkipCircularityCheckPassedBOM.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
    boolean hasDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        checkCircularity = true;
        skipCircularityCheckForPassedBOMs = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        Query q = new Query();
        q.addDataSource(tableNum(BOMTable));
        queryRun = new QueryRun(q);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion, #currentList, queryRun.pack()];
        return SysPackExtensions::appendExtension(packed, classStr(BOMconsistencyCheck_Table), [skipCircularityCheckForPassedBOMs]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomHierarchyCheck</Name>
				<Source><![CDATA[
    public BOMHierarchyCheck parmBomHierarchyCheck(BOMHierarchyCheck _bomHierarchyCheck = bomHierarchyCheck)
    {
        bomHierarchyCheck = _bomHierarchyCheck;

        if (bomHierarchyCheck == null)
        {
            bomHierarchyCheck = BOMHierarchyCheck::newBOMcheckNotCircularity();
        }

        return bomHierarchyCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckCircularity</Name>
				<Source><![CDATA[
    public NoYes parmCheckCircularity(NoYes _checkCircularity = checkCircularity)
    {
        checkCircularity = _checkCircularity;

        return checkCircularity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipCircularityCheckForPassedBOMs</Name>
				<Source><![CDATA[
    public NoYes parmSkipCircularityCheckForPassedBOMs(NoYes _skipCircularityCheckForPassedBOMs = skipCircularityCheckForPassedBOMs)
    {
        skipCircularityCheckForPassedBOMs = _skipCircularityCheckForPassedBOMs;

        return skipCircularityCheckForPassedBOMs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        // BOMtable
        this.kernelCheckRecords(queryRun);

        // BOMversion
        this.kernelCheckRecords(
            new QueryRun(SysQuery::addTableRelation(queryRun.query(), tablenum(BOMVersion))), 2);

        // BOM
        this.kernelCheckRecords(
            new QueryRun(SysQuery::addTableRelation(queryRun.query(), tablenum(BOM))), 2);

        // BOMConfigRoute
        this.kernelCheckRecords(
            new QueryRun(SysQuery::addTableRelation(queryRun.query(), tablenum(BOMConfigRoute))), 2);

        // BOMConfigRule
        this.kernelCheckRecords(
            new QueryRun(SysQuery::addTableRelation(queryRun.query(), tablenum(BOMConfigRule))), 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    classId treeParentClassId()
    {
        return classNum(BOMconsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = RunBase::getVersion(packedClass);
        container packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedQuery] = packedClass;
                container packedExtension = SysPackExtensions::findExtension(packedClass, classStr(BOMconsistencyCheck_Table));
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                if(packedExtension != conNull())
                {
                    [skipCircularityCheckForPassedBOMs] = packedExtension;
                }
                break;
            case 1:
                [version, packedQuery] = packedClass;
                if (packedQuery)
                    queryRun = new QueryRun(packedQuery);

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS3076";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@SYS58220";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>