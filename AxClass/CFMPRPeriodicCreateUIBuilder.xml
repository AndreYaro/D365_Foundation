<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPRPeriodicCreateUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CFMPRPeriodicCreateUIBuilder extends SysOperationAutomaticUIBuilder
{
    DialogField dialogSources;
    DialogField dialogDataAreas;
    SysLookupMultiSelectCtrl ctrlSources;
    SysLookupMultiSelectCtrl ctrlDataAreas;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDialogField</Name>
				<Source><![CDATA[
    protected DialogField addDialogField(IdentifierName _methodName, Object _dataContract = this.dataContractObject())
    {
        DialogField dialogField;

        switch (_methodName)
        {
            case methodStr(CFMPRPeriodicCreateContract, parmPaymentRequestSources):
                dialogSources = this.dialog().addField(
                    extendedTypeStr(Description),
                    "@CashFlowManagement:RequestSources",
                    "@CashFlowManagement:SelectPaymRequestSources");

                dialogField = dialogSources;
                break;

            case methodStr(CFMPRPeriodicCreateContract, parmPaymentRequestDataAreas):
                dialogDataAreas = this.dialog().addField(
                    extendedTypeStr(Description),
                    new DictTable(tableNum(CompanyInfo)).label(),
                    "@CashFlowManagement:DataSourcesForPaymRequestLocSelectCompanyAccounts");

                dialogField = dialogDataAreas;
                break;

            default:
                dialogField = super(_methodName, _dataContract);
                break;
        }

        return dialogField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchSelectedLines</Name>
				<Source><![CDATA[
    private container fetchSelectedLines(QueryRun _queryRun, container _selectField, container _selectedValues)
    {
        TableId selectTableId = conPeek(_selectField, 1);
        FieldId selectFieldId = conPeek(_selectField, 2);

        container selectedRecIds;
        container selectedValues;

        while (_queryRun.next())
        {
            Common common = _queryRun.get(selectTableId);

            if (conFind(_selectedValues, common.(selectFieldId)))
            {
                selectedRecIds += common.RecId;
                selectedValues += common.(selectFieldId);
            }
        }

        return [selectedRecIds, selectedValues];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public void getFromDialog()
    {
        super();

        CFMPRPeriodicCreateContract dataContract = this.dataContractObject() as CFMPRPeriodicCreateContract;

        dataContract.parmPaymentRequestSources(ctrlSources.getSelectedFieldValues());
        dataContract.parmPaymentRequestDataAreas(ctrlDataAreas.getSelectedFieldValues());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
    {
        container selectFieldSources = CFMPRSourceTypesSelector::selectField();
        container selectFieldDataAreas = CFMCompanyInfoSelector::selectField();
        CFMPRPeriodicCreateContract dataContract = this.dataContractObject() as CFMPRPeriodicCreateContract;

        super();

        ctrlSources = SysLookupMultiSelectCtrl::constructWithQueryRun(
            this.dialog().formRun(),
            dialogSources.control(),
            CFMPRSourceTypesSelector::sourceTypesQueryRun(),
            true,
            selectFieldSources);

        ctrlSources.set(this.fetchSelectedLines(
                            CFMPRSourceTypesSelector::sourceTypesQueryRun(),
                            selectFieldSources,
                            dataContract.parmPaymentRequestSources()));

        ctrlDataAreas = SysLookupMultiSelectCtrl::constructWithQuery(
            this.dialog().formRun(),
            dialogDataAreas.control(),
            CFMCompanyInfoSelector::companyInfoQuery(),
            true,
            selectFieldDataAreas);

        ctrlDataAreas.set(this.fetchSelectedLines(
                              new QueryRun(CFMCompanyInfoSelector::companyInfoQuery()),
                              selectFieldDataAreas,
                              dataContract.parmPaymentRequestDataAreas()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>