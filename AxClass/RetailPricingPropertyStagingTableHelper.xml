<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertyStagingTableHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using MX = Microsoft.Dynamics.Ax.Xpp.MetadataExtensions;
using MM = Microsoft.Dynamics.AX.Metadata.MetaModel;

internal final class RetailPricingPropertyStagingTableHelper
{
    /// <summary>
    /// We're leveraging the custom fields functionality to add fields to staging table at runtime.
    /// </summary>
    internal const str SysCustomFieldsExtension = 'SysCustomFields';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearExtensionColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear all extension column from a table.
    /// </summary>
    /// <param name = "tableName">The table name.</param>
    internal static void clearExtensionColumns(TableName tableName)
    {
        MX.IEntityExtensionManager entityExtensionManager = MX.EntityExtensionManagerFactory::CreateExtensionManager();
        MX.ITableExtensionManager tableExtensionManager  = MX.TableExtensionManagerFactory::CreateExtensionManager();
        MX.TableExtensionBuild tableExtension = tableExtensionManager.GetRuntimeExtension(tableName, SysCustomFieldsExtension);
        
        if (tableExtension != null)
        {
            tableExtensionManager.RemoveFromRuntime(tableExtension); // Clear all existing columns.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStringExtensionColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a string column to a table.
    /// </summary>
    /// <param name = "tableName">The table name.</param>
    /// <param name = "columnName">The column name.</param>
    /// <param name = "columnSize">The column size.</param>
    internal static void addStringExtensionColumn(TableName tableName, FieldName columnName, int columnSize)
    {
        MX.IEntityExtensionManager entityExtensionManager = MX.EntityExtensionManagerFactory::CreateExtensionManager();
        MX.ITableExtensionManager tableExtensionManager  = MX.TableExtensionManagerFactory::CreateExtensionManager();
        MX.TableExtensionBuild stagingTableExtension = tableExtensionManager.GetRuntimeExtension(tableName, SysCustomFieldsExtension);
        if (stagingTableExtension == null)
        {
            stagingTableExtension = tableExtensionManager.CreateNew(tableName, SysCustomFieldsExtension);
        }

        MM.AxTableFieldString newField = new MM.AxTableFieldString();
        newField.StringSize = columnSize;
        newField.Name = columnName;

        MX.TableExtensionBuildField fieldExtension = stagingTableExtension.AddNewField(newField);
        tableExtensionManager.ApplyToRuntime(stagingTableExtension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeFieldName</Name>
				<Source><![CDATA[
    [Hookable(true), Replaceable(false)]
    public static FieldName normalizeFieldName(Name _name)
    {
        FieldName removedSpecialCharacters = System.Text.RegularExpressions.Regex::Replace(_name, @'[^a-zA-Z]', ''); // It's slow but we won't call more than 10 times, normally 2-3 times.
        return strUpr(removedSpecialCharacters);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>