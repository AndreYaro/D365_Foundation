<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerProjectExtension_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>SubledgerJournalizerProjectExtension_ApplicationSuite_Extension</c> is an extension of the class <c>SubledgerJournalizerProjectExtension</c>
/// which extends the logic of project item trasaction creation to get the total cost amount updated by LOI.
/// When the flight <c>LedgerPostingsOccursOnSingleVoucher_INFlight</c> is disabled the same logic is executed in the <c>TaxAcctPostTaxTransExtSubscriberProj</c>.
/// </summary>
[ExtensionOf(classStr(SubledgerJournalizerProjectExtension))]
internal final class SubledgerJournalizerProjectExtension_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createProjectActualCostDetail</Name>
				<Source><![CDATA[
    protected static Common createProjectActualCostDetail(
        Common _projectRevenueHeader,
        container _projectActualHeaderContainer,
        container _projectActualDetailContainer,
        Voucher _voucher)
    {
        Common projectActualDetail = next createProjectActualCostDetail(
            _projectRevenueHeader,
            _projectActualHeaderContainer,
            _projectActualDetailContainer,
            _voucher);

        if (LedgerPostingsOccursOnSingleVoucher_INFlight::instance().isEnabled())
        {
            SubledgerJournalizerProjectExtension::createTaxDocRowTransactionExtension(_projectRevenueHeader);
            projectActualDetail.reread();
        }

        return projectActualDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxDocRowTransactionExtension</Name>
				<Source><![CDATA[
    private static void createTaxDocRowTransactionExtension(Common _projectRevenueHeader)
    {
        if (_projectRevenueHeader.TableId == tableNum(ProjItemTrans))
        {
            ProjItemTrans projItemTrans = _projectRevenueHeader;
            projItemTrans.reread();

            VendInvoiceTrans vendInvoiceTrans = VendInvoiceTrans::findRecId(projItemTrans.VendInvoiceTransRecId);

            if (vendInvoiceTrans)
            {
                VendInvoiceJour vendInvoiceJour = vendInvoiceTrans.vendInvoiceJour();

                ITaxDocument taxDocumentObject = TaxBusinessService::getTaxDocumentBySource(vendInvoiceJour.TableId, vendInvoiceJour.RecId);
                ITaxDocumentLine taxDocumentLineObject;

                if (taxDocumentObject)
                {
                    taxDocumentLineObject = taxDocumentObject.findLineBySource(vendInvoiceTrans.TableId, vendInvoiceTrans.RecId);
                }

                if (taxDocumentLineObject)
                {
                    ITaxDocumentMeasureValue inventDebit = taxDocumentLineObject.sumByTaxAccountingProvider(
                    TaxAccountingProvider::Inventory,
                    TaxAccountingPostingProfileDistributionSide::Debit);
                    ITaxDocumentMeasureValue inventCredit = taxDocumentLineObject.sumByTaxAccountingProvider(
                    TaxAccountingProvider::Inventory,
                    TaxAccountingPostingProfileDistributionSide::Credit);

                    AmountCur totLoiAmountCur = inventDebit.amountTransactionCurrency() - inventCredit.amountTransactionCurrency();
                    AmountMST totLoiAmoumtMst = inventDebit.amountAccountingCurrency() - inventCredit.amountAccountingCurrency();

                    if (totLoiAmountCur)
                    {
                        LineNum itemLineNum = (select maxof(ItemLineNum) from projItemTransCost
                                               where projItemTransCost.InventTransId == projItemTrans.InventTransId
                                                   && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId).ItemLineNum;
                        ProjItemTransCost projItemTransCost = ProjItemTransCost::find(projItemTrans.inventTransId, projItemTrans.projAdjustRefId, itemLineNum, true);

                        if (projItemTransCost)
                        {
                            Amount lineAmountToAdd;

                            if (InventTransOrigin::findByInventTransId(projItemTrans.InventTransId).RecId)
                            {
                                lineAmountToAdd += totLoiAmountCur;
                            }
                            else
                            {
                                lineAmountToAdd += totLoiAmoumtMst;
                            }

                            projItemTransCost.LineAmount += lineAmountToAdd;
                            projItemTransCost.AmountMST += totLoiAmoumtMst;
                            projItemTransCost.update();

                            projItemTrans.selectForUpdate(true);
                            projItemTrans.TotalCostAmountCur += lineAmountToAdd;
                            projItemTrans.update();

                            ProjTransPosting projTransPosting = ProjTransPosting::findTransId(projItemTrans.ProjTransId, true);
                            projTransPosting.AmountMst += totLoiAmoumtMst;
                            projTransPosting.update();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>