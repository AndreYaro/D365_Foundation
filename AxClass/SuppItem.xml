<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SuppItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SuppItem
{
    TmpSuppItem             tmpSuppItem;
    List                    tmpSuppItemList;

    SalesPurchTable         salesPurchTable;
    TransDate               suppItemDate;
    HeadingLine             headingLine;

    Query                   query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected void buildQuery()
    {
        QueryBuildDataSource    orderLineDS;

        query = new Query();

        orderLineDS = query.addDataSource(this.orderLineTableId());
        orderLineDS.addRange(this.orderLineFieldIdOrderId()).value(queryValue(salesPurchTable.salesPurchTableInterface().parmOrderId()));

        if (this.deliveryScheduleTableId())
        {
            // just select commercial lines
            QueryBuildDataSource deliveryScheduleDS = orderLineDS.addDataSource(this.deliveryScheduleTableId());
            deliveryScheduleDS.addLink(this.orderLineFieldIdInventTransId(), this.deliveryScheduleFieldIdDeliveryLine());
            deliveryScheduleDS.joinMode(JoinMode::NoExistsJoin);
        }

        if (FormDataUtil::isFormDataSource(salesPurchTable))
        {
            FormDataSource salesPurchLineFormDataSource = getJoinChildFormDataSource(FormDataUtil::getFormDataSource(salesPurchTable), this.orderLineTableId());

            if (headingLine == HeadingLine::Line)
            {
                Common record = salesPurchLineFormDataSource.getFirst(true)? salesPurchLineFormDataSource.getFirst(true) : salesPurchLineFormDataSource.cursor();
                orderLineDS.addRange(fieldNum(Common, RecId)).value(queryValue(record.RecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemRelationForItemCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the item relation for an item code.
    /// </summary>
    /// <param name = "_itemCode">The item code.</param>
    /// <param name = "_salesPurchLineInterface">The order line.</param>
    /// <returns>The item relation.</returns>
    private SuppItemItemRelation itemRelationForItemCode(SuppItemItemCode _itemCode, SalesPurchLineInterface _salesPurchLineInterface)
    {
        SuppItemItemRelation itemRelation;

        switch (_itemCode)
        {
            case TableGroupAll::Table:   
                itemRelation = _salesPurchLineInterface.parmItemId();
                break;

            case TableGroupAll::GroupId:
                itemRelation = this.inventSuppItemGroupId(_salesPurchLineInterface.parmItemId());
                break;

            case TableGroupAll::All:
                itemRelation = '';
                break;
     
        }
        return itemRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdForItemCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventory dimension for an item code.
    /// </summary>
    /// <param name = "_itemCode">The item code.</param>
    /// <param name = "_salesPurchLineInterface">The order line.</param>
    /// <returns>The inventory dimension.</returns>
    protected InventDimId inventDimIdForItemCode(SuppItemItemCode _itemCode, SalesPurchLineInterface _salesPurchLineInterface)
    {
        InventDimId inventDimId;

        switch (_itemCode)
        {
            case TableGroupAll::Table:
                InventDim inventDim = _salesPurchLineInterface.inventDim();
                inventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_salesPurchLineInterface.parmItemId()));
                inventDimId = InventDim::findDim(inventDim).InventDimId;
                break;

            default:
                inventDimId = InventDim::inventDimIdBlank();
                break;
        }

        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountRelationForAccountCode</Name>
				<Source><![CDATA[
    private SuppItemAccountRelation accountRelationForAccountCode(SuppItemAccountCode _accountCode)
    {
        SuppItemAccountRelation accountRelation;

        switch (_accountCode)
        {
            case TableGroupAll::Table:   
                accountRelation = this.orderAccount();
                break;
            case TableGroupAll::GroupId:   
                accountRelation = this.custVendSuppItemGroupId(this.orderAccount());
                break;
            case TableGroupAll::All:   
                accountRelation = '';
                break;
        }

        return accountRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSuppItem</Name>
				<Source><![CDATA[
    protected void calcSuppItem(SalesPurchLine _salesPurchLine)
    {
        SalesPurchLineInterface salesPurchLineInterface = _salesPurchLine.salesPurchLineInterface();
        SuppItemTable           suppItemTable;

        UnitQty                 absQty              = abs(salesPurchLineInterface.parmQty());

        boolean                 foundOnItemDim      = false;
        boolean                 tryWithOutItemDim   = false;
        InventDimId             inventDimIdBlank = InventDim::inventDimIdBlank();

        suppItemTable.recordLevelSecurity(true);

        int idx = 0;

        while (idx < 9)
        {
            SuppItemItemCode itemCode = idx mod 3;
            SuppItemAccountCode accountCode = idx div 3;

            SuppItemItemRelation itemRelation = this.itemRelationForItemCode(itemCode, salesPurchLineInterface);
            InventDimId inventDimId;
            
            if (tryWithOutItemDim)
            {
                inventDimId = inventDimIdBlank;
            }
            else
            {
                inventDimId = this.inventDimIdForItemCode(itemCode, salesPurchLineInterface);
            }

            SuppItemAccountRelation accountRelation = this.accountRelationForAccountCode(accountCode);

            foundOnItemDim = false;

            if ((itemRelation || itemCode == TableGroupAll::All) && (accountRelation || accountCode == TableGroupAll::All))
            {
                while select suppItemTable
                      where suppItemTable.Module            == this.module()                                            &&
                            suppItemTable.ItemCode          == itemCode                                                 &&
                            suppItemTable.ItemRelation      == itemRelation                                             &&
                            suppItemTable.InventDimId       == inventDimId                                              &&
                            suppItemTable.AccountCode       == accountCode                                              &&
                            suppItemTable.AccountRelation   == accountRelation                                          &&
                           (suppItemTable.UnitId            == salesPurchLineInterface.parmUnitId()   ||
                            suppItemTable.UnitId            == '')                                                      &&
                            suppItemTable.MinimumQty        <= absQty                                                   &&
                           (this.suppItemDate()             >= suppItemTable.FromDate  || ! suppItemTable.FromDate)     &&
                           (this.suppItemDate()             <= suppItemTable.ToDate    || ! suppItemTable.ToDate)
                {
                    if (this.mustIncludeTmpSuppItem(suppItemTable, _salesPurchLine))
                    {
                        tmpSuppItem.clear();
                        tmpSuppItem.initFromSuppItemTable(suppItemTable);
                        tmpSuppItem.initFromSalesPurchLine(_salesPurchLine);

                        if (_salesPurchLine.TableId == tableNum(PurchLine))
                        {
                                PurchLine purchLine =  _salesPurchLine;
                                if (!SuppItemForbidOnPurchaseReturnFlight::instance().isEnabled() && purchLine.PurchaseType == PurchaseType::ReturnItem) 
                                {
                                    tmpSuppItem.Qty = -suppItemTable.suppItemQty(salesPurchLineInterface.parmQty());
                                }
                                else
                                {
                                    tmpSuppItem.Qty = suppItemTable.suppItemQty(salesPurchLineInterface.parmQty());
                                }
                        }
                        else
                        {
                            tmpSuppItem.Qty = suppItemTable.suppItemQty(salesPurchLineInterface.parmQty());
                        }
                    
                        if (tmpSuppItem.Qty)
                        {
                            tmpSuppItem.insert();
                            tmpSuppItemList.addEnd(tmpSuppItem);

                            if (inventDimId != inventDimIdBlank)
                            {
                                foundOnItemDim = true;
                            }
                        }
                    }
                }
            }

            if (inventDimId && inventDimId != inventDimIdBlank && !tryWithOutItemDim && !foundOnItemDim)
            {
                tryWithOutItemDim = true;
            }
            else
            {
                idx += 1;
                tryWithOutItemDim = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpSuppItem</Name>
				<Source><![CDATA[
    public void createTmpSuppItem()
    {
        QueryRun        queryRun;

        tmpSuppItemList = new List(Types::Record);
        this.buildQuery();

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            this.calcSuppItem(queryRun.get(this.orderLineTableId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendSuppItemGroupId</Name>
				<Source><![CDATA[
    abstract protected SuppItemGroupId custVendSuppItemGroupId(CustVendAC _custVendAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the order account number used to lookup supplementary items.
    /// </summary>
    /// <returns>The order account number.</returns>
    [Replaceable]
    protected CustVendAC orderAccount()
    {
        return salesPurchTable.salesPurchTableInterface().parmOrderAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryScheduleFieldIdDeliveryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID of the delivery line field in the delivery schedule table.
    /// </summary>
    /// <returns>
    /// The field ID of the delivery line field.
    /// </returns>
    /// <remarks>
    /// For different child classes method returns the field ID of the delivery line field in
    /// different delivery schedule tables.
    /// </remarks>
    abstract protected FieldId deliveryScheduleFieldIdDeliveryLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryScheduleTableId</Name>
				<Source><![CDATA[
    abstract protected TableId deliveryScheduleTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackedTmpSuppItemList</Name>
				<Source><![CDATA[
    public container getPackedTmpSuppItemList()
    {
        return tmpSuppItemList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSuppItemGroupId</Name>
				<Source><![CDATA[
    abstract protected InventSuppItemGroupId inventSuppItemGroupId(ItemId _itemId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    abstract protected SuppItemModule module()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeTmpSuppItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>TmpSuppItem</c> should be included in the calculation.
    /// </summary>
    /// <param name = "_suppItemTable">A <c>SuppItemTable</c> instance.</param>
    /// <param name = "_salesPurchLine">A <c>SalesPurchLine</c> instance.</param>
    /// <returns>true if the <c>TmpSuppItem</c> should be included in the calculation; otherwise, false.</returns>
    protected boolean mustIncludeTmpSuppItem(SuppItemTable _suppItemTable,  SalesPurchLine _salesPurchLine)
    {
        return TmpSuppItem::include(tmpSuppItem, _suppItemTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        suppItemDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLineFieldIdInventTransId</Name>
				<Source><![CDATA[
    abstract protected FieldId orderLineFieldIdInventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLineFieldIdOrderId</Name>
				<Source><![CDATA[
    abstract protected FieldId orderLineFieldIdOrderId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLineTableId</Name>
				<Source><![CDATA[
    abstract protected TableId orderLineTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchTable</Name>
				<Source><![CDATA[
    public SalesPurchTable parmSalesPurchTable(SalesPurchTable _salesPurchTable = salesPurchTable)
    {
        salesPurchTable = _salesPurchTable;
        return salesPurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeadingLine</Name>
				<Source><![CDATA[
    public HeadingLine parmHeadingLine(HeadingLine _headingLine = headingLine)
    {
        headingLine = _headingLine;
        return headingLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suppItemDate</Name>
				<Source><![CDATA[
    protected TransDate suppItemDate(TransDate _suppItemDate = suppItemDate)
    {
        suppItemDate = _suppItemDate;
        return suppItemDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSuppItemNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>SuppItem</c> object.
    /// </summary>
    /// <param name = "_salesPurchTable">
    /// A <c>SalesPurchTable</c> record to instantiate the object from.
    /// </param>
    /// <returns>
    /// The instantiated <c>SuppItem</c> object.
    /// </returns>
    /// <remarks>
    /// The method does not throw in case an object could not be instantiated.
    /// </remarks>
    static protected SuppItem newSuppItemNoThrow(SalesPurchTable _salesPurchTable)
    {
        SuppItem suppItem;

        switch (_salesPurchTable.TableId)
        {
            case tableNum(SalesTable)           :
                suppItem = SuppItem_Sales::constuct();
                break;

            case tableNum(PurchTable)           :
                suppItem = SuppItem_Purch::constuct();
                break;

            case tableNum(SalesQuotationTable)  :
                suppItem = SuppItem_SalesQuotation::constuct();
                break;
        }

        return suppItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSuppItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates and initializes a <c>SuppItem</c> object.
    /// </summary>
    /// <param name = "_salesPurchTable">
    /// A <c>SalesPurchTable</c> record to instantiate the object from.
    /// </param>
    /// <param name = "_headingLine">
    /// A <c>HeadingLine</c> value describing whether to calculate for the entire order or only selected lines.
    /// </param>
    /// <returns>
    /// The instantiated <c>SuppItem</c> object.
    /// </returns>
    static public SuppItem newSuppItem(SalesPurchTable _salesPurchTable, HeadingLine _headingLine)
    {
        SuppItem suppItem = SuppItem::newSuppItemNoThrow(_salesPurchTable);

        if (!suppItem)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        suppItem.parmSalesPurchTable(_salesPurchTable);
        suppItem.parmHeadingLine(_headingLine);

        return suppItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>