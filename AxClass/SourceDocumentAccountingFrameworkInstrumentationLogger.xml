<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentAccountingFrameworkInstrumentationLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>SourceDocumentAccountingFrameworkInstrumentationLogger</c> is used for logging telemetry for the source document accounting framework.
/// </summary>
internal static class SourceDocumentAccountingFrameworkInstrumentationLogger
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActivityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// It creates the SysInstrumentation activity context for the logging class.
    /// </summary>
    /// <param name = "_instrumentationNameSpace">The namespace for which the activity context will be created.</param>
    /// <param name = "_className">The class name for which the activity context will be created.</param>
    /// <param name = "_uniqueActivityName">The activity name for which we need to create the activity context.</param>
    /// <returns>Activity context that will be used by the telemetry.</returns>
    [Hookable(false)]
    public static SysInstrumentationActivityContext getActivityContext(
        str _instrumentationNameSpace,
        ClassName _className,
        str _uniqueActivityName)
    {
        SysInstrumentationLogger sysInstrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(_className);
        SysInstrumentationActivity sysInstrumentationActivity = SysInstrumentationActivity::construct(
            _uniqueActivityName,
            _instrumentationNameSpace);

        return sysInstrumentationLogger.activityContextWithCustomProperties(sysInstrumentationActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the telemetry for the event
    /// </summary>
    /// <param name = "_className">The class name for which the activity will be logged</param>
    /// <param name = "_information">Message that is logged for the event</param>
    [Hookable(false)]
    public static void logInformation(
        ClassName _className,
        str _information)
    {
        SysInstrumentationLoggerFactory::CreateLogger(_className).logInformation(_information);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertSecToHoursMinuteSecondFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method take in time in seconds and return the time in HH:MM:SS format
    /// </summary>
    /// <param name = "_timeInSeconds">time in seconds</param>
    /// <returns>return the time in HH:MM:SS format</returns>
    public static str convertSecToHoursMinuteSecondFormat(int64 _timeInSeconds)
    {
        return strFmt('%1 Hour : %2 Minute : %3 Second', any2Str(_timeInSeconds div 3600), any2Str((_timeInSeconds mod 3600) div 60), any2Str((_timeInSeconds mod 3600) mod 60));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>