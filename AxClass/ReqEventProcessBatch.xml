<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqEventProcessBatch</c> class is the abstract base class for the batch processing of the
///    pending events in the <c>ReqPeggingEvents</c> table.
/// </summary>
public abstract class ReqEventProcessBatch extends RunBaseBatch
{
    #OCCRetryCount
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the specified event.
    /// </summary>
    /// <param name="_reqPeggingEvent">
    ///    The <c>ReqPeggingEvent</c> record to delete.
    /// </param>
    /// <returns>
    ///    true if the record was deleted or no record was given; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean deleteEvent(ReqPeggingEvent _reqPeggingEvent)
    {
        boolean result = true;
        if (_reqPeggingEvent)
        {
            ttsbegin;
            if (_reqPeggingEvent.selectForUpdate())
            {
                _reqPeggingEvent.delete();
            }
            else
            {
                ReqPeggingEvent::find(_reqPeggingEvent.RecId,true).delete();
            }
            ttscommit;

            result = ReqPegging::find(_reqPeggingEvent.RecId).RecId == 0;

            if (!result)
            {
                throw error(strFmt("@SYS321490",_reqPeggingEvent.RecId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvents</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the pending events.
    /// </summary>
    /// <remarks>
    ///    Note: The <c>processEvents</c> must create its own transaction scopes and exception handling.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract void processEvents()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes kanban events.
    /// </summary>
    /// <remarks>
    ///    Note: No transaction scope is being opened in this method. The <c>processEvents</c> must create
    ///    its own transaction scopes.
    /// </remarks>
    public void run()
    {
        this.init();

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        this.processEvents();
       
        this.showResults();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the results that are processing in the information log.
    /// </summary>
    /// <remarks>
    ///    The base class does not show any results.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void showResults()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageExceptionUpdateConflict</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean manageExceptionUpdateConflict()
    {
        if (appl.ttsLevel() == 0)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                return true;
            }
        }
        else
        {
            throw Exception::UpdateConflict;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageExceptionDuplicateKeyException</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean manageExceptionDuplicateKeyException()
    {
        if (appl.ttsLevel() == 0)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                return true;
            }
        }
        else
        {
            throw Exception::DuplicateKeyException;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageExceptionDeadlock</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean manageExceptionDeadlock()
    {
        if (xSession::currentRetryCount() >= #RetryNum)
        {
            throw Exception::Deadlock;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>