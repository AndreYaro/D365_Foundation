<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTProjInvoiceDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GSTProjInvoiceDP_IN</c> class provides base implementation of a data provider class for project invoice reports.
/// </summary>
public class TaxGSTProjInvoiceDP_IN extends GSTInvoiceDPBase_IN
{
    ProjInvoiceJour                     projInvoiceJour;
    ProjProposalJour                    projProposalJour;
    ProjProposalEmpl                    projProposalEmpl;
    ProjProposalCost                    projProposalCost;
    ProjProposalItem                    projProposalItem;
    ProjProposalRevenue                 projProposalRevenue;
    ProjProposalOnAcc                   projProposalOnAcc;
    ProjInvoiceEmpl                     projInvoiceEmpl;
    ProjInvoiceCost                     projInvoiceCost;
    ProjInvoiceItem                     projInvoiceItem;
    ProjInvoiceRevenue                  projInvoiceRevenue;
    ProjInvoiceOnAcc                    projInvoiceOnAcc;
    SalesLine                           salesLine;
    TaxEngineProjOnAcctTransHeader      onAccHeader;
    TaxEngineProjRevenueTransHeader     revenueHeader;
    TaxEngineProjCostTransHeader        costHeader;
    TaxEngineProjItemTransHeader        itemHeader;
    TaxEngineProjEmplTransHeader        emplHeader;
    TaxEngineProjItemSOTransHeader      itemSOHeader;
    TaxEngineProjRevenueSubTransHeader  revenueSubHeader;
    boolean                             isExistsHeader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    public void createData()
    {
        if (this.parmInvoiceJournal(onAccHeader))
        {
            super();
        }

        if (this.parmInvoiceJournal(revenueHeader))
        {
            super();
        }

        if (this.parmInvoiceJournal(costHeader))
        {
            super();
        }

        if (this.parmInvoiceJournal(itemHeader))
        {
            super();
        }

        if (this.parmInvoiceJournal(emplHeader))
        {
            super();
        }

        if (this.parmInvoiceJournal(itemSOHeader))
        {
            super();
        }

        if (this.parmInvoiceJournal(revenueSubHeader))
        {
            super();
        }

        select firstonly gstInvoiceHeaderFooterTmp where gstInvoiceHeaderFooterTmp.RecId == headerRecId;
        
        if (gstInvoiceHeaderFooterTmp)
        {
            ttsBegin;
            gstInvoiceHeaderFooterTmp.selectForUpdate(true);

            if (taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::BillOfSupply)
            {
                gstInvoiceHeaderFooterTmp.GrandTotal = gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure;
            }
            else
            {
                gstInvoiceHeaderFooterTmp.GrandTotal = grandTotal;
            }

            if (projInvoiceJour.PrintDynamicQRCode_IN == NoYes::Yes)
            {
                OnlineInvoicingHelper_IN::populateDynamicQRCodeData(
                    gstInvoiceHeaderFooterTmp,
                    projInvoiceJour,
                    gstInvoiceDPBase.parmUserConnection());
            }

            gstInvoiceHeaderFooterTmp.doUpdate();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        contract = gstInvoiceDPBase.parmDataContract() as GSTInvoiceContract_IN;
        projInvoiceJour = ProjInvoiceJour::findRecId(contract.parmRecordId());

        projProposalJour = ProjProposalJour::find(projInvoiceJour.ProposalId);

        onAccHeader         = TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        revenueHeader       = TaxEngineProjRevenueTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        costHeader          = TaxEngineProjCostTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        itemHeader          = TaxEngineProjItemTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        itemSOHeader        = TaxEngineProjItemSOTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        emplHeader          = TaxEngineProjEmplTransHeader::findOrCreateByProjProposalJour(projProposalJour);
        revenueSubHeader    = TaxEngineProjRevenueSubTransHeader::findOrCreateByProjProposalJour(projProposalJour);

        isProforma = projInvoiceJour.isProforma();
        printCopyOriginal = contract.parmPrintCopyOriginal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPurchJournalLineMap</Name>
				<Source><![CDATA[
    private SalesPurchJournalLine getSalesPurchJournalLineMap()
    {
        Common                  common;
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    ProjRevenueTransSale;
        ProjOnAccTransSale      projOnAccTransSale;
        ProjCostTransSale       projCostTransSale;
        ProjItemTransSale       projItemTransSale;
        ProjEmplTransSale       projEmplTransSale;

        switch (invoiceJournal.TableId)
        {
            case tableNum(TaxEngineProjOnAcctTransHeader):
            select firstOnly projOnAccTransSale
                exists join projProposalOnAcc
                    where projProposalOnAcc.ProposalId  == projProposalJour.ProposalId
                        && projOnAccTransSale.TransId   == projProposalOnAcc.TransId;
                common = projOnAccTransSale;
                break;

            case tableNum(TaxEngineProjRevenueTransHeader):
            select firstOnly ProjRevenueTransSale
                exists join projRevenueTrans
                    where projRevenueTrans.TransactionOrigin        == ProjOrigin::FeeJournal
                        && ProjRevenueTransSale.TransId             == projRevenueTrans.TransId
                    exists join projProposalRevenue
                        where projRevenueTrans.TransId          == projProposalRevenue.TransId
                            && projProposalRevenue.ProposalId   == projProposalJour.ProposalId;

                common = ProjRevenueTransSale;
                break;

            case tableNum(TaxEngineProjRevenueSubTransHeader):
             select firstOnly ProjRevenueTransSale
                exists join projRevenueTrans
                    where projRevenueTrans.TransactionOrigin        == ProjOrigin::Subscription
                        && ProjRevenueTransSale.TransId             == projRevenueTrans.TransId
                    exists join projProposalRevenue
                        where projRevenueTrans.TransId          == projProposalRevenue.TransId
                            && projProposalRevenue.ProposalId   == projProposalJour.ProposalId;

                common = ProjRevenueTransSale;
                break;

            case tableNum(TaxEngineProjCostTransHeader):
            select firstOnly projCostTransSale
                exists join projProposalCost
                    where projProposalCost.ProposalId   == projProposalJour.ProposalId
                        && projCostTransSale.TransId    == projProposalCost.TransId;
                common = projCostTransSale;
                break;

            case tableNum(TaxEngineProjItemTransHeader):
                select firstOnly projItemTransSale
                    exists join projProposalItem
                        where projProposalItem.ProposalId == projProposalJour.ProposalId
                            && ((projProposalItem.ItemType == ProjItemType::InventJournal)
                                || (projProposalItem.ItemType == ProjItemType::PurchOrder)
                                || (projProposalItem.ItemType == ProjItemType::Project)
                                || (AddVendorInvoiceProjItemTypeForGSTInvoiceReportFlight::instance().isEnabled() && projProposalItem.ItemType == ProjItemType::VendorInvoice))
                            && projItemTransSale.ProjTransId == projProposalItem.ProjTransId;
            
                common = projItemTransSale;
                break;

            case tableNum(TaxEngineProjEmplTransHeader):
            select firstOnly projEmplTransSale
                exists join projProposalEmpl
                    where projProposalEmpl.ProposalId   == projProposalJour.ProposalId
                        && projEmplTransSale.TransId    == projProposalEmpl.TransId;
                common = projEmplTransSale;
                break;

            case tableNum(TaxEngineProjItemSOTransHeader):
                if (TaxGSTProjInvoiceDP_INFlight::instance().isEnabled())
                {
                    select firstOnly salesLine
                        exists join projProposalItem
                            where projProposalItem.InventTransId == salesLine.InventTransId
                                && projProposalItem.ProposalId == projProposalJour.ProposalId;
                }
                else
                {
                    select firstOnly salesLine
                        exists join projProposalItem
                            where projProposalItem.ProjTransId == salesLine.ProjTransId &&
                                projProposalItem.ProposalId == projProposalJour.ProposalId;
                }
                common = salesLine;
                break;
        }

        return SalesPurchJournalLine::findRecId(common.TableId, common.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceHeaderFooterTmp()
    {
        FormLetterRemarks   formLetterRemarks;
        SalesPurchJournalLine salesPurchJournalLine = this.getSalesPurchJournalLineMap();

        if (salesPurchJournalLine && !isExistsHeader)
        {
            taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(salesPurchJournalLine);

            super();

            gstInvoiceHeaderFooterTmp.InvoiceDate               = projInvoiceJour.InvoiceDate;
            gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure = projInvoiceJour.InvoiceAmount;
            gstInvoiceHeaderFooterTmp.TotalInvoiceValueInWords  = numeralsToTxt_IN(abs(projInvoiceJour.InvoiceAmount));
            gstInvoiceHeaderFooterTmp.TotalInvoiceMiscChargeValueInFigure = projInvoiceJour.SumMarkup;

            if (projInvoiceJour.InvoiceAmount > 0)
            {
                switch(projInvoiceJour.ProjInvoiceType)
                {
                    case ProjInvoiceType::OnAccount:
                        formLetterRemarks = FormLetterRemarks::find(projInvoiceJour.LanguageId,FormTextType::ProjectAcontoInvoice);
                        break;
                    case ProjInvoiceType::Invoice:
                        formLetterRemarks = FormLetterRemarks::find(projInvoiceJour.LanguageId,FormTextType::ProjectInvoice);
                        break;
                }
            }
            else
            {
                formLetterRemarks = FormLetterRemarks::find(projInvoiceJour.LanguageId,FormTextType::ProjectCreditNote);
            }

            gstInvoiceHeaderFooterTmp.IsDomesticSales   = NoYes::Yes;
            gstInvoiceHeaderFooterTmp.Declaration       = formLetterRemarks.Txt;
            gstInvoiceHeaderFooterTmp.BilledToParty     = CustTable::find(projInvoiceJour.InvoiceAccount).Party;

            this.setShippedToFields(salesPurchJournalLine);

            isExistsHeader = true;

            gstInvoiceHeaderFooterTmp.initEInvoice(projInvoiceJour);

            // For project transactions, its billed-to-address information should be derived from
            // invoice location of project funding source. ProjInvoiceJour.DeliveryPostalAddress is copied from
            // ProjProposalJour.DeliveryPostalAddress, and ProjProposalJour.DeliveryPostalAddress is converted from
            // the invoice location of project funding source,
            // here it uses ProjInvoiceJour.DeliveryPostalAddress to generate billed-to-address information.
            LogisticsPostalAddress billedLogisticsPostalAddress      = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress);
            LogisticsLocation billedLogisticsLocation                = LogisticsLocation::find(billedLogisticsPostalAddress.Location);
            gstInvoiceHeaderFooterTmp.BilledToName                   = billedLogisticsLocation.Description;
            gstInvoiceHeaderFooterTmp.BilledToState                  = billedLogisticsPostalAddress.State;
            gstInvoiceHeaderFooterTmp.BilledToAddress                = billedLogisticsPostalAddress.Address;
            gstInvoiceHeaderFooterTmp.BilledToLogisticsPostalAddress = billedLogisticsPostalAddress.RecId;
            gstInvoiceHeaderFooterTmp.BilledToStateCode              = LogisticsAddressState::find(
                    LogisticsAddressCountryRegion::findByISOCode(#isoIN).CountryRegionId,
                    billedLogisticsPostalAddress.State).StateCode_IN;

            TaxInformation_IN billedTaxInformation = TaxInformation_IN::findDefaultbyLocation(billedLogisticsLocation.RecId);

            if (billedTaxInformation)
            {
                gstInvoiceHeaderFooterTmp.BilledToGSTIN = billedTaxInformation.getTaxRegistrationNumbersTable(TaxType_IN::GST).RegistrationNumber;
            }
            else
            {
                gstInvoiceHeaderFooterTmp.BilledToGSTIN = '';
            }

            gstInvoiceHeaderFooterTmp.insert();
            headerRecId = gstInvoiceHeaderFooterTmp.RecId;
            gstInvoiceHeaderFooterTmp.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceTmp(str _className = '')
    {
        super(_className);

        if (chargeCode)
        {
            gstInvoiceTmp.Name  = MarkupTable::find(MarkupModuleType::Cust, chargeCode).Txt;
        }
        else
        {
            if (lineTableId && lineRecId && classStr(ITaxDocumentLine) == _className)
            {
                switch (lineTableId)
                {
                    case tableNum(ProjProposalOnAcc):
                    case tableNum(ProjInvoiceOnAcc):
                        if (lineTableId == tableNum(ProjProposalOnAcc))
                        {
                            projInvoiceOnAcc = ProjInvoiceOnAcc::findTransId(ProjProposalOnAcc::findRecId(lineRecId).TransId);
                        }
                        else
                        {
                            projInvoiceOnAcc = ProjInvoiceOnAcc::findRecId(lineRecId);
                        }
                        gstInvoiceTmp.Name          = projInvoiceOnAcc.Txt;
                        gstInvoiceTmp.UnitPrice     = projInvoiceOnAcc.salesPrice();
                        gstInvoiceTmp.LineAmount    = projInvoiceOnAcc.lineAmount();
                        break;

                    case tableNum(ProjProposalRevenue):
                    case tableNum(ProjInvoiceRevenue):
                        if (lineTableId == tableNum(ProjProposalRevenue))
                        {
                            projInvoiceRevenue = ProjInvoiceRevenue::findTransId(ProjProposalRevenue::findRecId(lineRecId).TransId);
                        }
                        else
                        {
                            projInvoiceRevenue = ProjInvoiceRevenue::findRecId(lineRecId);
                        }
                        gstInvoiceTmp.Name          = projInvoiceRevenue.Txt;
                        gstInvoiceTmp.UnitPrice     = projInvoiceRevenue.salesPrice();
                        gstInvoiceTmp.LineAmount    = projInvoiceRevenue.lineAmountTotal();
                        break;

                    case tableNum(ProjProposalCost):
                    case tableNum(ProjInvoiceCost):
                        if (lineTableId == tableNum(ProjProposalCost))
                        {
                            projInvoiceCost = ProjInvoiceCost::findTransId(ProjProposalCost::findRecId(lineRecId).TransId);
                        }
                        else
                        {
                            projInvoiceCost = ProjInvoiceCost::findRecId(lineRecId);
                        }
                        gstInvoiceTmp.Name          = projInvoiceCost.Txt;
                        gstInvoiceTmp.UnitPrice     = projInvoiceCost.salesPrice();
                        gstInvoiceTmp.LineAmount    = projInvoiceCost.lineAmountTotal();
                        break;

                    case tableNum(ProjProposalItem):
                    case tableNum(ProjInvoiceItem):
                        if (lineTableId == tableNum(ProjProposalItem))
                        {
                            projInvoiceItem = ProjInvoiceItem::findTransId(ProjProposalItem::findRecId(lineRecId).ProjTransId);
                        }
                        else
                        {
                            projInvoiceItem = ProjInvoiceItem::findRecId(lineRecId);
                        }
                        gstInvoiceTmp.ItemId        = projInvoiceItem.ItemId;
                        gstInvoiceTmp.Unit          = projInvoiceItem.SalesUnit;
                        gstInvoiceTmp.Name          = projInvoiceItem.Txt;
                        gstInvoiceTmp.UnitPrice     = projInvoiceItem.salesPrice();
                        gstInvoiceTmp.LineAmount    = projInvoiceItem.lineAmountDetailSum();
                        break;

                    case tableNum(SalesLine):
                        salesLine = SalesLine::findRecId(lineRecId);
                        gstInvoiceTmp.ItemId        = salesLine.ItemId;
                        gstInvoiceTmp.Unit          = salesLine.SalesUnit;
                        gstInvoiceTmp.Name          = salesLine.Name;
                        gstInvoiceTmp.UnitPrice     = salesLine.SalesPrice;
                        gstInvoiceTmp.LineAmount    = salesLine.LineAmount;
                        break;

                    case tableNum(ProjProposalEmpl):
                    case tableNum(ProjInvoiceEmpl):
                        if (lineTableId == tableNum(ProjProposalEmpl))
                        {
                            projInvoiceEmpl = ProjInvoiceEmpl::findTransId(ProjProposalEmpl::findRecId(lineRecId).TransId);
                        }
                        else
                        {
                            projInvoiceEmpl = ProjInvoiceEmpl::findRecId(lineRecId);
                        }
                        gstInvoiceTmp.Name          = projInvoiceEmpl.Txt;
                        gstInvoiceTmp.UnitPrice     = projInvoiceEmpl.salesPrice();
                        gstInvoiceTmp.LineAmount    = projInvoiceEmpl.lineAmountTotal();
                        break;
                }
            }
        }

        gstInvoiceTmp.insert();
        gstInvoiceTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNegativeLines</Name>
				<Source><![CDATA[
    protected void processNegativeLines()
    {
        CreatedTransactionId createdTransactionId = appl.curTransactionId(true);
        Set negativeLines = new Set(Types::Record);

        if (gstInvoiceHeaderFooterTmp.TaxInvReferenceType == GSTReference_IN::DebitCreditNote || 
            gstInvoiceHeaderFooterTmp.TaxInvReferenceType == GSTReference_IN::ExportDebitCreditNote)
        {
            while select sum(LineAmount), sum(TaxableValue), ItemId, HSNOrSACCode, RowNum from gstInvoiceTmp
                group by ItemId, HSNOrSACCode, RowNum
                where gstInvoiceTmp.LineAmount > 0
                    && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
            {
                negativeLines.add(gstInvoiceTmp);
            }
        }
        else
        {
            while select sum(LineAmount), sum(TaxableValue), ItemId, HSNOrSACCode, RowNum from gstInvoiceTmp
                group by ItemId, HSNOrSACCode, RowNum
                where gstInvoiceTmp.LineAmount < 0
                    && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
            {
                negativeLines.add(gstInvoiceTmp);
            }
        }

        var negativeLinesEnumerator = negativeLines.getEnumerator();
        
        while (negativeLinesEnumerator.moveNext())
        {
            GSTInvoiceTmp_IN gstInvoiceTmpLine = negativeLinesEnumerator.current();

            if (gstInvoiceHeaderFooterTmp.TaxInvReferenceType == GSTReference_IN::DebitCreditNote || 
                gstInvoiceHeaderFooterTmp.TaxInvReferenceType == GSTReference_IN::ExportDebitCreditNote)
            {
                select firstonly forupdate gstInvoiceTmp
                    order by LineAmount desc
                    where gstInvoiceTmp.ItemId == gstInvoiceTmpLine.ItemId
                        && gstInvoiceTmp.HSNOrSACCode == gstInvoiceTmpLine.HSNOrSACCode
                        && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
                        && gstInvoiceTmp.TaxComponent == ''
                        && gstInvoiceTmp.LineAmount < 0;
            }
            else
            {
                select firstonly forupdate gstInvoiceTmp
                    order by LineAmount desc
                    where gstInvoiceTmp.ItemId == gstInvoiceTmpLine.ItemId
                        && gstInvoiceTmp.HSNOrSACCode == gstInvoiceTmpLine.HSNOrSACCode
                        && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
                        && gstInvoiceTmp.TaxComponent == ''
                        && gstInvoiceTmp.LineAmount > 0;
            }

            var rowNumber = gstInvoiceTmp.RowNum;

            if (gstInvoiceTmp)
            {
                gstInvoiceTmp.TaxableValue += gstInvoiceTmpLine.TaxableValue;

                gstInvoiceTmp.DiscountAmount += gstInvoiceTmpLine.LineAmount * -1;

                gstInvoiceTmp.update();

                if (gstInvoiceHeaderFooterTmp.TaxInvReferenceType == GSTReference_IN::DebitCreditNote || 
                    gstInvoiceHeaderFooterTmp.TaxInvReferenceType == GSTReference_IN::ExportDebitCreditNote)
                {
                    delete_from gstInvoiceTmp
                        where gstInvoiceTmp.LineAmount > 0
                            && gstInvoiceTmp.ItemId == gstInvoiceTmpLine.ItemId
                            && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
                            && gstInvoiceTmp.HSNOrSACCode == gstInvoiceTmpLine.HSNOrSACCode;
                }
                else
                {
                    delete_from gstInvoiceTmp
                        where gstInvoiceTmp.LineAmount < 0
                            && gstInvoiceTmp.ItemId == gstInvoiceTmpLine.ItemId
                            && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
                            && gstInvoiceTmp.HSNOrSACCode == gstInvoiceTmpLine.HSNOrSACCode;
                }
            }

            Set negativeTaxes = new Set(Types::Record);

            if (gstInvoiceHeaderFooterTmp.TaxInvReferenceType == GSTReference_IN::DebitCreditNote || 
                gstInvoiceHeaderFooterTmp.TaxInvReferenceType == GSTReference_IN::ExportDebitCreditNote)
            {
                while select sum(TaxComponentAmount), TaxComponent from gstInvoiceTmp
                    group by TaxComponent, RowNum
                    where gstInvoiceTmp.TaxComponentAmount > 0
                        && gstInvoiceTmp.RowNum == gstInvoiceTmpLine.RowNum
                        && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
                {
                    negativeTaxes.add(gstInvoiceTmp);
                }
            }
            else
            {
                while select sum(TaxComponentAmount), TaxComponent from gstInvoiceTmp
                    group by TaxComponent, RowNum
                    where gstInvoiceTmp.TaxComponentAmount < 0
                        && gstInvoiceTmp.RowNum == gstInvoiceTmpLine.RowNum
                        && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
                {
                    negativeTaxes.add(gstInvoiceTmp);
                }
            }

            var negativeTaxEnumerator = negativeTaxes.getEnumerator();
            
            while (negativeTaxEnumerator.moveNext())
            {
                GSTInvoiceTmp_IN gstInvoiceTmpTax = negativeTaxEnumerator.current();

                select firstonly forupdate gstInvoiceTmp
                    order by TaxComponentAmount desc
                    where gstInvoiceTmp.TaxComponent == gstInvoiceTmpTax.TaxComponent
                    && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
                    && gstInvoiceTmp.RowNum == rowNumber;

                if(gstInvoiceTmp)
                {
                    gstInvoiceTmp.TaxComponentAmount += gstInvoiceTmpTax.TaxComponentAmount;
                    gstInvoiceTmp.update();

                    delete_from gstInvoiceTmp
                        where gstInvoiceTmp.TaxComponent == gstInvoiceTmpTax.TaxComponent
                            && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
                            && gstInvoiceTmp.RowNum == gstInvoiceTmpTax.RowNum;
                }
            }

        }

        Map rownumberMap = new Map(Types::Integer , Types::Integer);
        int counter;

        while select RowNum from gstInvoiceTmp
            where gstInvoiceTmp.TaxComponent == ''
                && gstInvoiceTmp.CreatedTransactionId == createdTransactionId
        {
            counter++;
            rownumberMap.insert(gstInvoiceTmp.RowNum , counter);
        }

        var rowNumberMapEnumerator = rownumberMap.getEnumerator();

        while (rowNumberMapEnumerator.moveNext())
        {
            update_recordset gstInvoiceTmp
                setting RowNum = rowNumberMapEnumerator.currentValue()
                where gstInvoiceTmp.RowNum == rowNumberMapEnumerator.currentKey()
                    && gstInvoiceTmp.CreatedTransactionId == createdTransactionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that <c>createdTransactionId</c> of inserted record is different than default transaction.
    /// </remarks>
    public void setTableConnections()
    {
        gstInvoiceHeaderFooterTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
        gstInvoiceTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShippedToFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets shipped to fields of the <c>gstInvoiceHeaderFooterTmp</c> table record
    /// based on delivery address data from <c>SalesPurchJournalLine</c> map record.
    /// </summary>
    /// <param name = "_salesPurchJournalLine">A <c>SalesPurchJournalLine</c> map record.</param>
    internal void setShippedToFields(SalesPurchJournalLine _salesPurchJournalLine)
    {
        if (SysDictField::isFieldMapped(tableStr(SalesPurchJournalLine), tableId2Name(_salesPurchJournalLine.TableId), fieldStr(SalesPurchJournalLine, DeliveryLocation))
            && _salesPurchJournalLine.DeliveryLocation)
        {
            LogisticsPostalAddress deliveryPostalAddress = LogisticsPostalAddress::findRecId(_salesPurchJournalLine.DeliveryLocation);
            gstInvoiceHeaderFooterTmp.ShippedToAddress = deliveryPostalAddress.Address;
            gstInvoiceHeaderFooterTmp.ShippedToState = deliveryPostalAddress.State;
            gstInvoiceHeaderFooterTmp.ShippedToLogisticsPostalAddress = deliveryPostalAddress.RecId;

            LogisticsLocation deliveryLocation = LogisticsLocation::find(deliveryPostalAddress.Location);
            gstInvoiceHeaderFooterTmp.ShippedToName = deliveryLocation.Description;

            LogisticsAddressCountryRegion depliveryAddressCountryRegion = LogisticsAddressCountryRegion::find(deliveryPostalAddress.CountryRegionId);
            if (depliveryAddressCountryRegion.ISOcode == #isoIN)
            {
                LogisticsAddressState deliveryAddressState = LogisticsAddressState::find(deliveryPostalAddress.CountryRegionId, deliveryPostalAddress.State);

                gstInvoiceHeaderFooterTmp.ShippedToStateCode = deliveryAddressState.StateCode_IN;
            }
            else
            {
                gstInvoiceHeaderFooterTmp.ShippedToStateCode = '';
            }

            TaxInformation_IN taxInfromation = TaxInformation_IN::findDefaultbyLocation(deliveryPostalAddress.Location);
            TaxRegistrationNumbers_IN taxRegistrationNumbers = taxInfromation.getTaxRegistrationNumbersTable(TaxType_IN::GST);
            gstInvoiceHeaderFooterTmp.ShippedToGSTIN = taxRegistrationNumbers.RegistrationNumber;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>