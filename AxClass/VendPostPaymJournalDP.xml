<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPostPaymJournalDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendPostPaymJournal</c> class is a report data provider class for SSRS reporting.
/// </summary>
[SRSReportQueryAttribute(querystr(VendPostPaymJournal))]
class VendPostPaymJournalDP extends SrsReportDataProviderPreProcessTempDB
{
    private VendTrans tmpVendTrans;
    private VendSettlement vendSettlement;
    private LedgerJournalId lastJournalNum;
    private AccountNum lastAccountNum;
    private Amount sumPaymSettleAmountCur;
    private LedgerJournalTable ledgerJournalTable;
    private LedgerJournalTrans ledgerJournalTrans;
    private VendPostPaymJournalTmp vendPostPaymJournalTmp;
    private RecId recId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendPostPaymJournalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>VendPostPaymJournalTmp</c> table.
    /// </summary>
    /// <returns>
    /// A populated instance of the <c>VendPostPaymJournalTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(VendPostPaymJournalTmp))]
    public VendPostPaymJournalTmp getVendPostPaymJournalTmp()
    {
        select vendPostPaymJournalTmp;
        return vendPostPaymJournalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>VendPostPaymJournalTmp</c> table that is based on the input string.
    /// </summary>
    /// <param name="_detailsPrinted">
    /// A value that specifies the period from which the data is coming.
    /// </param>
    private void insert(NoYes _detailsPrinted)
    {
        // write the relevant field data to the temporary data store
        vendPostPaymJournalTmp.DetailsPrinted = _detailsPrinted;
        vendPostPaymJournalTmp.JournalNum = ledgerJournalTable.JournalNum;
        vendPostPaymJournalTmp.Name = ledgerJournalTable.Name;
        vendPostPaymJournalTmp.LedgerDimension = ledgerJournalTrans.parmLedgerDimension();
        vendPostPaymJournalTmp.MainAccountId = ledgerJournalTrans.parmAccount();
        vendPostPaymJournalTmp.AccountName = ledgerJournalTrans.accountName();
        vendPostPaymJournalTmp.Txt = ledgerJournalTrans.Txt;
        vendPostPaymJournalTmp.LedgerJournalTransDate = ledgerJournalTrans.TransDate;
        vendPostPaymJournalTmp.Voucher = ledgerJournalTrans.Voucher;
        vendPostPaymJournalTmp.BankChequeNum = ledgerJournalTrans.BankChequeNum;
        vendPostPaymJournalTmp.AmountCurDebit = ledgerJournalTrans.AmountCurDebit;
        vendPostPaymJournalTmp.AmountCurCredit = ledgerJournalTrans.AmountCurCredit;
        vendPostPaymJournalTmp.CurrencyCode = ledgerJournalTrans.CurrencyCode;

        if (_detailsPrinted == NoYes::No)
        {
            vendPostPaymJournalTmp.insert();
            vendPostPaymJournalTmp.clear();
            return;
        }

        vendPostPaymJournalTmp.InvoiceId = tmpVendTrans.Invoice;
        vendPostPaymJournalTmp.TransDate = tmpVendTrans.TransDate;
        vendPostPaymJournalTmp.VendCurrencyCode = tmpVendTrans.CurrencyCode;
        vendPostPaymJournalTmp.AmountCur = tmpVendTrans.AmountCur;
        vendPostPaymJournalTmp.SettleAmountCur = this.settleAmountCur();
        vendPostPaymJournalTmp.UtilizedCashDisc = -vendSettlement.UtilizedCashDisc;
        vendPostPaymJournalTmp.WriteoffAmount = vendSettlement.PennyDiff;
        vendPostPaymJournalTmp.RemainAmount = tmpVendTrans.remainAmountCur();
        vendPostPaymJournalTmp.PaymSettleAmount = this.paymSettleAmountCur();
        vendPostPaymJournalTmp.LedgerJournalTransAmount = ledgerJournalTrans.amount();

        vendPostPaymJournalTmp.insert();
        recId = vendPostPaymJournalTmp.RecId;
        vendPostPaymJournalTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymSettleAmountCur</Name>
				<Source><![CDATA[
    private Amount paymSettleAmountCur()
    {
        VendSettlement tmpVendSettlement;
        Amount paymSettleAmountCur;

        select firstonly crosscompany SettleAmountCur from tmpVendSettlement
            where tmpVendSettlement.OffsetRecid == vendSettlement.TransRecId
                && tmpVendSettlement.TransRecId == vendSettlement.OffsetRecid
                && tmpVendSettlement.SettlementGroup == vendSettlement.SettlementGroup
                && tmpVendSettlement.OffsetCompany == tmpVendTrans.company();

        // No easy way to determine if settlement record is a reversal or not so going with the
        // assumption that Payment and Payment currency amount will always carry same sign
        paymSettleAmountCur = tmpVendSettlement.SettleAmountCur;

        if (this.settleAmountCur() > 0)
        {
            if (!(paymSettleAmountCur > 0))
            {
                paymSettleAmountCur = -paymSettleAmountCur;
            }
        }
        else
        {
            if (paymSettleAmountCur > 0)
            {
                paymSettleAmountCur = -paymSettleAmountCur;
            }
        }

        return paymSettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs biz logic processing to populate the temporary table buffer and sends it to the report to
    /// display.
    /// </summary>
    /// <remarks>
    /// This method will be called by SSRS at runtime. The method should compute data and populate the data
    /// tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        boolean detailsPrinted = false;
        boolean isFirstInvoice = false;
        boolean isFirstAccount = true;
        Query query = new Query(this.parmQuery());
        Set vendTransRecIdMap = new Set(Types::Int64);
        QueryRun qr = new QueryRun(query);

        while (qr.next())
        {
            LedgerJournalTrans ledgerJournalTransPayment;

            ledgerJournalTable = qr.get(ledgerJournalTable.TableId);

            if (ledgerJournalTable.JournalNum != lastJournalNum)
            {
                isFirstAccount = true;
                lastJournalNum = ledgerJournalTable.JournalNum;
            }

            ledgerJournalTrans = qr.get(ledgerJournalTrans.TableId);
            sumPaymSettleAmountCur = 0.0;
            detailsPrinted = false;

            if (ledgerJournalTrans.isCompanyIntercompany())
            {
                ledgerJournalTransPayment = LedgerJournalTrans::findIntercompanyPayment(ledgerJournalTrans);
            }
            else
            {
                ledgerJournalTransPayment = ledgerJournalTrans;
            }

            changecompany(ledgerJournalTransPayment.Company)
            {
                DimensionAttributeValueCombination dimAttrValueCombo;
                VendTrans orgVendTrans;

                while select orgVendTrans
                    order by orgVendTrans.RecId
                    where orgVendTrans.Voucher == ledgerJournalTransPayment.Voucher
                        && orgVendTrans.TransDate == ledgerJournalTransPayment.TransDate
                        && orgVendTrans.TransType == LedgerTransType::Payment
                    join RecId from dimAttrValueCombo
                        where dimAttrValueCombo.RecId == ledgerJournalTransPayment.LedgerDimension
                            && dimAttrValueCombo.DisplayValue == orgVendTrans.AccountNum
                {
                    // Added check if the VendTrans.RecId exists in the set because of
                    // scenarios where multiple vendor transaction exist with the same voucher number.
                    if (vendTransRecIdMap.in(orgVendTrans.RecId))
                    {
                        // Already printed this vendor transactions settle, continue
                        // to see it there additional customer transaction with same voucher
                        continue;
                    }
                    else
                    {
                        vendTransRecIdMap.add(orgVendTrans.RecId);
                        isFirstInvoice = false;

                        while select crosscompany vendSettlement order by TransDate
                            where vendSettlement.OffsetRecid == orgVendTrans.RecId
                                && vendSettlement.OffsetAccountNum == orgVendTrans.AccountNum
                                && vendSettlement.OffsetCompany == orgVendTrans.company()
                        {
                            tmpVendTrans = VendTrans::findByCompany(vendSettlement.company(), vendSettlement.TransRecId);
                            detailsPrinted = true;
                            sumPaymSettleAmountCur += this.paymSettleAmountCur();

                            if (!isFirstInvoice)
                            {
                                isFirstInvoice = true;
                                vendPostPaymJournalTmp.IsFirstInvoice = NoYes::Yes;
                            }
                            else
                            {
                                vendPostPaymJournalTmp.IsFirstInvoice = NoYes::No;
                            }

                            if (isFirstAccount)
                            {
                                vendPostPaymJournalTmp.IsFirstAccount = NoYes::Yes;
                                isFirstAccount = false;
                            }

                            this.insert(NoYes::Yes);
                        }

                        // found Vendor transaction for the voucher to can now break
                        break;
                    }
                }
            }

            if (!detailsPrinted)
            {
                if (isFirstAccount)
                {
                    vendPostPaymJournalTmp.IsFirstAccount = NoYes::Yes;
                    isFirstAccount = false;
                }

                this.insert(NoYes::No);
            }
            else
            {
                ttsbegin;

                select firstonly forupdate vendPostPaymJournalTmp
                    where vendPostPaymJournalTmp.RecId == recId;

                vendPostPaymJournalTmp.SumPaymSettleAmount = sumPaymSettleAmountCur;
                vendPostPaymJournalTmp.IsLastInvoice = NoYes::Yes;
                vendPostPaymJournalTmp.update();

                ttscommit;

                isFirstAccount = true;
                sumPaymSettleAmountCur = 0.0;
                vendPostPaymJournalTmp.clear();
            }

            detailsPrinted = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleAmountCur</Name>
				<Source><![CDATA[
    private Amount settleAmountCur()
    {
        return -1 * ((vendSettlement.SettleAmountCur - vendSettlement.UtilizedCashDisc) + vendSettlement.PennyDiff);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
