<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalData_Transfer_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalData_Transfer_RU extends InventJournalData_RU
{
    Qty        qtyTotal;
    Weight     grossWeightTotal,
               netWeightTotal;
    CostAmount costAmountTotal;

    #InventJournalReport_Transfer_RU
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    public XmlDocument createXML(InventJournalReportId_RU _reportId,
                                 JournalId                _journalId,
                                 TransDate                _transDate,
                                 OffSessionId_RU          _offsessionId)
    {
        InventJournalTrans inventJournalTrans;

        Set                toLocationNameSet   = new Set(Types::String),
                           toActivityTypeSet   = new Set(Types::String),
                           fromLocationNameSet = new Set(Types::String),
                           fromActivityTypeSet = new Set(Types::String);

        while select inventJournalTrans
            where inventJournalTrans.JournalId == _journalId &&
                  inventJournalTrans.TransDate == _transDate
        {
            this.setAddLocation(InventLocation::find(InventDim::find(inventJournalTrans.InventDimId).InventLocationId),
                                fromLocationNameSet,
                                fromActivityTypeSet);

            this.setAddLocation(InventLocation::find(InventDim::find(inventJournalTrans.ToInventDimId).InventLocationId),
                                toLocationNameSet,
                                toActivityTypeSet);

            this.initInventTableSection(_reportId, inventJournalTrans);
        }

        this.initPrologSection(_reportId,
                               _transDate,
                               this.setGet(fromLocationNameSet),
                               this.setGet(fromActivityTypeSet),
                               this.setGet(toLocationNameSet),
                               this.setGet(toActivityTypeSet));

        this.initTotalsSection(qtyTotal,
                               grossWeightTotal,
                               netWeightTotal,
                               costAmountTotal);

        this.initTotalsTxtSection(_offsessionId, costAmountTotal);

        return xmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePriceAndAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines line price and amount.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// <c>InventJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// Container with line price and line amount.
    /// </returns>
    protected container getLinePriceAndAmount(InventJournalTrans _inventJournalTrans)
    {
        return [0,0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTableSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills lines section of report with data
    /// </summary>
    /// <param name="_reportId">
    /// Report Id; Empty for proforma report.
    /// </param>
    /// <param name="_inventJournalTrans">
    /// inventJournalTrans record which should be printed
    /// </param>
    /// <remarks>
    /// itemName created from inventTable name and inventDimCombination.Name
    /// </remarks>

    private void initInventTableSection(InventJournalReportId_RU _reportId,
                                        InventJournalTrans       _inventJournalTrans)
    {
        XmlElement          xmlElement = xmlDocument.createElement(#InventTableSection);
        InventTable         inventTable = _inventJournalTrans.inventTable();
        Qty                 localQty;
        Weight              localGrossWeight, localNetWeight;
        Price               localPrice;
        CostAmount          localCostAmount;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDimParm       inventDimParm;
        InventOnhand        inventOnhand;

        localQty         = abs(_inventJournalTrans.Qty);
        localQty         = abs(inventTable.TaxPackagingQty ?
                               roundUp(localQty / inventTable.TaxPackagingQty, 1) :
                               localQty);
        localGrossWeight = abs(_inventJournalTrans.Qty * inventTable.grossWeight());
        localNetWeight   = abs(_inventJournalTrans.Qty * inventTable.NetWeight);

        if (_reportId)
        {
            select sum(Qty), sum(CostAmountPosted) from inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.RecId         ==  inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId == _inventJournalTrans.InventTransId;

            localPrice      = inventTrans.Qty ? CurrencyExchangeHelper::price(inventTrans.CostAmountPosted / inventTrans.Qty) : 0;
            localCostAmount = abs(inventTrans.CostAmountPosted);
        }
        else
        {
            InventDimGroupSetup::newItemId(_inventJournalTrans.ItemId).inventDimParmActiveFinancialInventory(inventDimParm);
            inventOnhand = InventOnhand::newParameters(_inventJournalTrans.ItemId, _inventJournalTrans.inventDim(), inventDimParm);

            localPrice = inventOnhand.costPricePcs(false, _inventJournalTrans.TransDate);
            localCostAmount = abs(_inventJournalTrans.Qty * localPrice);
        }

        xmlElement.setAttribute(#ItemId,       inventTable.ItemId);
        xmlElement.setAttribute(#ItemName,     _inventJournalTrans.itemName());
        xmlElement.setAttribute(#BOMUnitId,    inventTable.inventUnitId());
        xmlElement.setAttribute(#CodeOkei,     UnitOfMeasure_RU::codeOKEI_RU(UnitOfMeasure::findBySymbol(inventTable.bomUnitId)));
        xmlElement.setAttribute(#QtyMultiples, inventTable.TaxPackagingQty ? strFmt("@GLS106745", inventTable.TaxPackagingQty) : '');

        xmlElement.setAttribute(#Qty,          strFmt("@GLS106745", localQty));
        xmlElement.setAttribute(#GrossWeight,  strFmt("@GLS106745", localGrossWeight));
        xmlElement.setAttribute(#NetWeight,    strFmt("@GLS106745", localNetWeight));
        xmlElement.setAttribute(#Price,        strFmt("@GLS106745", localPrice));
        xmlElement.setAttribute(#CostAmount,   strFmt("@GLS106745", localCostAmount));

        qtyTotal         += localQty;
        grossWeightTotal += localGrossWeight;
        netWeightTotal   += localNetWeight;
        costAmountTotal  += localCostAmount;

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrologSection</Name>
				<Source><![CDATA[
    private void initPrologSection(InventJournalReportId_RU      _reportId,
                                   TransDate                     _reportDate,
                                   InventLocationName            _fromInventLocationName,
                                   InventLocationActivityType_RU _fromActivityType,
                                   InventLocationName            _toInventLocationName,
                                   InventLocationActivityType_RU _toActivityType)
    {
        XmlElement  xmlElement  = xmlDocument.createElement(#PrologSection);
        CompanyInfo companyInfo = CompanyInfo::find();

        xmlElement.setAttribute(#DocumentNum,        _reportId);
        xmlElement.setAttribute(#DocumentDate,       strFmt("@GLS106745", _reportDate));
        xmlElement.setAttribute(#CompanyName,        companyInfo.name());
        xmlElement.setAttribute(#OKPD,               CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, _reportDate));
        xmlElement.setAttribute(#OKPO,               CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, _reportDate));
        xmlElement.setAttribute(#OperationCode,      '');
        xmlElement.setAttribute(#FromInventLocation, _fromInventLocationName);
        xmlElement.setAttribute(#FromActivityType,   _fromActivityType);
        xmlElement.setAttribute(#ToInventLocation,   _toInventLocationName);
        xmlElement.setAttribute(#ToActivityType,     _toActivityType);
        xmlElement.setAttribute(#ToLedgerAccount,    '---');
        xmlElement.setAttribute(#ToAnalysisCode,     '---');

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotalsSection</Name>
				<Source><![CDATA[
    private void initTotalsSection(Qty        _qty,
                                   Weight     _grossWeight,
                                   Weight     _netWeight,
                                   CostAmount _costAmount)
    {
        XmlElement  xmlElement = xmlDocument.createElement(#TotalsSection);

        xmlElement.setAttribute(#QtyTotal,         strFmt("@GLS106745", _qty));
        xmlElement.setAttribute(#GrossWeightTotal, strFmt("@GLS106745", _grossWeight));
        xmlElement.setAttribute(#NetWeightTotal,   strFmt("@GLS106745", _netWeight));
        xmlElement.setAttribute(#CostAmountTotal,  strFmt("@GLS106745", _costAmount));

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotalsTxtSection</Name>
				<Source><![CDATA[
    private void initTotalsTxtSection(OffSessionId_RU   _offsessionId,
                                      CostAmount        _totalAmount)
    {
        XmlElement          xmlElement = xmlDocument.createElement(#TotalsTxtSection);
        OfficialsTrans_RU   officialsTrans;
        int                 rAmount = any2int(round(_totalAmount, 0));
        int                 cAmount = any2int(frac(abs(_totalAmount)) * 100);

        RNumDateInWordConverter converter = RNumDateInWordConverter::construct(infolog.language());

        xmlElement.setAttribute(#AmountRTxt, converter.numeralsToTxt(rAmount));
        xmlElement.setAttribute(#AmountCTxt, cAmount < 10 ? "@SYS24272" + int2str(cAmount) : int2str(cAmount));

        select firstonly Title, Name from officialsTrans
            where officialsTrans.OffSessionId == _offsessionId &&
                  officialsTrans.ReportType   == offReportType &&
                  officialsTrans.Position     == OffPosition_RU::Supplier;

        xmlElement.setAttribute(#SupplierTitle, officialsTrans.Title);
        xmlElement.setAttribute(#SupplierName,  officialsTrans.Name);

        select firstonly Title, Name from officialsTrans
            where officialsTrans.OffSessionId == _offsessionId &&
                  officialsTrans.ReportType   == offReportType &&
                  officialsTrans.Position     == OffPosition_RU::Taker;

        xmlElement.setAttribute(#TakerTitle,    officialsTrans.Title);
        xmlElement.setAttribute(#TakerName,     officialsTrans.Name);

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        offReportType  = InventJournalReport_RU::inventJournalReportType2OffReportType(InventJournalReportType_RU::Transfer);
        xmlDocument    = XmlDocument::newBlank();
        xmlRootElement = xmlDocument.createElement(this.reportName());
        xmlDocument.appendChild(xmlRootElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    private reportName reportName()
    {
        return classStr(InventJournalReport_Transfer_RU);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
