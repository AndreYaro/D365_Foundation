<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_OutlayUnrealOtherMult</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_OutlayUnrealOtherMult extends RTax25RegCalc_LedgerMultiply implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBody</Name>
				<Source><![CDATA[
    public void createBody()
    {
        if (stdDocuments.amount())
        {
            regQuery.addBodyRecord(stdDocuments.profitTableRecId(),
                                   [stdDocuments.transDate(),
                                    stdDocuments.docName(),
                                    RTax25ProfitTable::find(stdDocuments.profitTableRecId()).Description,
                                    stdDocuments.txt(),
                                    stdDocuments.amount()],
                                   stdDocuments.tableId(),
                                   stdDocuments.recId(),
                                   "",
                                   -startCount,
                                   0);
            startCount++;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>footerContainer</Name>
				<Source><![CDATA[
    public container footerContainer()
    {
        return [dateNull(), '', RTax25ProfitTable::find(lastProfitTableRecId).ProfitId, "@SYS58659", lastProfitTableRecId ? profitAmount : totalAmount];
    }
]]></Source>
			</Method>
			<Method>
				<Name>initRunItem</Name>
				<Source><![CDATA[
    protected boolean initRunItem()
    {
        boolean ret;

        stdDocuments = RTax25StdDocumentsExt::construct();
        ledgerRun    = RTax25LedgerRun::newRegisterId(stdDocuments,
                                                      methodstr(RTax25StdDocumentsExt, loadDocument),
                                                      registerId);
        ledgerRun.parmTransSum(true);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected void totals(RTax25RegisterTransMap _trans)
    {
        RTax25RegisterTrans_OutlayUnrealOther trans = _trans;
        totalAmount     +=  trans.IssueAmount;
        profitAmount    +=  trans.IssueAmount;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>