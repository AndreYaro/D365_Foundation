<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsOutboundSortingInventTransPickIdAllocator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WhsOutboundSortingInventTransPickIdAllocator extends WhsInventTransPickIdAllocator
{    
    private Map workInventTransToLoadLineMap;
    private WHSWorkInventTransRecId currentWorkInventTransRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WhsOutboundSortingInventTransPickIdAllocator construct()
    {
        return new WhsOutboundSortingInventTransPickIdAllocator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNewAllocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initForNewAllocation()
    {
        super();
        workInventTransToLoadLineMap = new Map(Types::Int64, Types::Container); // workInventTransRecId -> [loadLineRecId, pickedQty]
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignSortWorkInventTransAndLoadLine</Name>
				<Source><![CDATA[
    internal void assignSortWorkInventTransAndLoadLine(WHSWorkInventTrans _workInventTrans, WHSLoadLine _loadLine)
    {
        workInventTransToLoadLineMap.add(_workInventTrans.RecId, [_loadLine.RecId, _workInventTrans.Qty]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsAllocationComplete</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean determineIsAllocationComplete()
    {
        return workInventTransToLoadLineMap.elements() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentWorkInventTransRecId</Name>
				<Source><![CDATA[
    internal WHSWorkInventTransRecId parmCurrentWorkInventTransRecId(WHSWorkInventTransRecId _currentWorkInventTransRecId = currentWorkInventTransRecId)
    {
        currentWorkInventTransRecId = _currentWorkInventTransRecId;
        return currentWorkInventTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePickIdAllocaton</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ListEnumerator executePickIdAllocaton(InventMovement _inventMovement, InventDimId _pickedInventDimId, InventQty _inventQty)
    {
        if (!currentWorkInventTransRecId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (!workInventTransToLoadLineMap.exists(currentWorkInventTransRecId))
        {
            throw error(strFmt("@WAX:OutboundSortingPickIdAllocatorUnmappedWorkInventTrans", currentWorkInventTransRecId));
        }

        WHSLoadLineRefRecId loadLineRecId;
        InventQty workInventTransPickedQty;
            
        [loadLineRecId, workInventTransPickedQty] = workInventTransToLoadLineMap.lookup(currentWorkInventTransRecId);

        if (_inventQty > workInventTransPickedQty)
        {
            error(strFmt("@WAX:OutboundSortingPickIdAllocatorUnableToAllocateForWorkInventTrans", currentWorkInventTransRecId));
            throw error(strFmt("@WAX:PickIdErrorInsufficientQty", _inventQty, workInventTransPickedQty));
        }

        workInventTransPickedQty -= _inventQty;

        if (workInventTransPickedQty)
        {
            workInventTransToLoadLineMap.add(currentWorkInventTransRecId, [loadLineRecId, workInventTransPickedQty]);
        }
        else
        {
            workInventTransToLoadLineMap.remove(currentWorkInventTransRecId);
        }

        List pickingIdsList = new List(Types::Class); // of WhsLoadLineInventoryPickIdAllocation
        pickingIdsList.addEnd(new WhsLoadLineInventTransPickIdAllocation(this.determinePickIdForLoadLine(loadLineRecId), _inventQty));

        return pickingIdsList.getEnumerator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>