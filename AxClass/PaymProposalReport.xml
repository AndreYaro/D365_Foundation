<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymProposalReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymProposalReport
{
    private PaymProposalReportedBy paymProposalReportedBy;
    private PaymProposalReportSubTotal paymProposalReportSubTotal;
    private boolean showMstAmounts;
    private LedgerJournalTable ledgerJournalTable;
    private SortingStringRight groupBy;
    private SortingStringRight subGroupBy;

    protected NoYes printPaymLines;
    protected NoYes printInvoiceLines;
    protected JournalId journalId;
    protected CompanyBankAccountId rangeCompanyBankAccountIdStart;
    protected CompanyBankAccountId rangeCompanyBankAccountIdEnd;
    protected CustVendAC rangeCustVendACStart;
    protected CustVendAC rangeCustVendACEnd;
    protected Query query;
    protected QueryRun queryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkForCrossCompanySettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the settlement record spans multiple companies.
    /// </summary>
    /// <param name="_transCompany">
    /// The company of the transaction.
    /// </param>
    /// <param name="_offsetCompany">
    /// The company of the offset transaction.
    /// </param>
    /// <remarks>
    /// When calling this method, the value of the <c>parmShouldShowMstAmounts</c> property will be set to
    /// false if the companies do not match or if either differ from the current company.
    /// </remarks>
    protected void checkForCrossCompanySettlement(CompanyId _transCompany, CompanyId _offsetCompany)
    {
        boolean diffAccountingCurrencyExists;
        
        diffAccountingCurrencyExists = this.isAccountingCurrencyDifferent(_transCompany, _offsetCompany);
        
        if (((_transCompany != _offsetCompany)
            || (_transCompany != curext())
            || (_offsetCompany != curext())) && diffAccountingCurrencyExists)
        {
            this.parmShowMstAmounts(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForIntercompanyAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the company of the account is in a different company than the current company.
    /// </summary>
    /// <param name="_accountCompany">
    /// The company of the account.
    /// </param>
    /// <remarks>
    /// When you call this method, the value of the <c>parmShouldShowMstAmounts</c> property will be set to
    /// false if the company of the account is in a different company than the current company.
    /// </remarks>
    protected void checkForIntercompanyAccount(CompanyId _accountCompany)
    {
        boolean diffAccountingCurrencyExists;
        
        diffAccountingCurrencyExists = this.isAccountingCurrencyDifferent(_accountCompany);
        
        if ((curext() != _accountCompany) && diffAccountingCurrencyExists)        
        {
            this.parmShowMstAmounts(false);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the data for the report and inserts into the temp table.
    /// </summary>
    /// <param name = "_custVendPaymProposalTmp">Instance of the report temp table.</param>
    public void createTmpTable(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJoinToDAVCAndQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an exists join to the <c>DimensionAttributeValueCombination</c> table
    /// with a specific query range on the <c>DisplayValue</c> field.
    /// </summary>
    /// <param name = "_qbds">A query data source to add the join to.</param>
    /// <param name = "_fieldId">A field on the data source containing a dimension RecId.</param>
    /// <param name = "_fromDisplayValue">The from display value range.</param>
    /// <param name = "_toDisplayValue">The to display value range.</param>
    protected void addJoinToDAVCAndQueryRange(
        QueryBuildDataSource _qbds,
        FieldId _fieldId,
        DimensionDisplayValue _fromDisplayValue,
        DimensionDisplayValue _toDisplayValue)
    {
        QueryBuildDataSource qbdsDAVC = _qbds.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbdsDAVC.addLink(_fieldId, fieldNum(DimensionAttributeValueCombination, RecId));
        qbdsDAVC.joinMode(JoinMode::ExistsJoin);
        qbdsDAVC.addRange(fieldNum(DimensionAttributeValueCombination, DisplayValue)).value(
            queryRange(_fromDisplayValue, _toDisplayValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses the instance of <c>LedgerJournalTable</c> to set the journal information
    /// in the report temp table data.
    /// </summary>
    /// <param name = "_custVendPaymProposalTmp">Instance of the report temp table.</param>
    protected void setJournalInfo(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        _custVendPaymProposalTmp.JournalId = journalId;
        _custVendPaymProposalTmp.JournalType = ledgerJournalTable.JournalType;
        _custVendPaymProposalTmp.LedgerJournalTableApprovedBy = HcmWorker::find(ledgerJournalTable.Approver).PersonnelNumber;
        _custVendPaymProposalTmp.LedgerJournalTableJournalName = ledgerJournalTable.JournalName;
        _custVendPaymProposalTmp.LedgerJournalTableJournalNum = ledgerJournalTable.JournalNum;
        _custVendPaymProposalTmp.LedgerJournalTableLog = ledgerJournalTable.Log;
        _custVendPaymProposalTmp.LedgerJournalTablePosted = ledgerJournalTable.Posted;
        _custVendPaymProposalTmp.LedgerJournalTablePostedDateTime = ledgerJournalTable.PostedDateTime;
        _custVendPaymProposalTmp.LedgerJournalTableRejectedBy = ledgerJournalTable.RejectedBy;
        _custVendPaymProposalTmp.LedgerJournalTableReportedAsReadyBy = ledgerJournalTable.ReportedAsReadyBy;
        _custVendPaymProposalTmp.LedgerJournalTableName = ledgerJournalTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the final data assignments and insert of the invoice record into
    /// the report temp table.
    /// </summary>
    /// <param name = "_custVendPaymProposalTmp">Instance of the report temp table.</param>
    protected void insertInvoice(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        _custVendPaymProposalTmp.Payment = NoYes::No;
        _custVendPaymProposalTmp.PaymentAmountMST = 0;
        _custVendPaymProposalTmp.ShowMSTAmounts = this.parmShowMstAmounts();
        this.setGroupBy(_custVendPaymProposalTmp);
        this.setSubGroupBy(_custVendPaymProposalTmp);
        this.setJournalInfo(_custVendPaymProposalTmp);
        _custVendPaymProposalTmp.insert();
        _custVendPaymProposalTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the final data assignments and insert of the Payment record into
    /// the report temp table.
    /// </summary>
    /// <param name = "_custVendPaymProposalTmp">Instance of the report temp table.</param>
    protected void insertPayment(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        _custVendPaymProposalTmp.PaymentAmountMST = _custVendPaymProposalTmp.AmountMST;
        _custVendPaymProposalTmp.AmountMST = 0;
        _custVendPaymProposalTmp.Payment = NoYes::Yes;
        _custVendPaymProposalTmp.ShowMSTAmounts = this.parmShowMstAmounts();
        this.setGroupBy(_custVendPaymProposalTmp);
        this.setSubGroupBy(_custVendPaymProposalTmp);
        this.setJournalInfo(_custVendPaymProposalTmp);
        _custVendPaymProposalTmp.insert();
        _custVendPaymProposalTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendACRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the customer or vendor account range values.
    /// </summary>
    /// <param name = "_rangeCustVendACStart">Start account number range value.</param>
    /// <param name = "_rangeCustVendACEnd">End account number range value.</param>
    public void setCustVendACRange(CustVendAC _rangeCustVendACStart, CustVendAC _rangeCustVendACEnd)
    {
        rangeCustVendACStart = _rangeCustVendACStart;
        rangeCustVendACEnd = _rangeCustVendACEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompanyBankAccountIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the bank account range values.
    /// </summary>
    /// <param name = "_rangeCompanyBankAccountIdStart">Start account number range value.</param>
    /// <param name = "_rangeCompanyBankAccountIdEnd">End account number range value.</param>
    public void setCompanyBankAccountIdRange(CompanyBankAccountId _rangeCompanyBankAccountIdStart, CompanyBankAccountId _rangeCompanyBankAccountIdEnd)
    {
        rangeCompanyBankAccountIdStart = _rangeCompanyBankAccountIdStart;
        rangeCompanyBankAccountIdEnd = _rangeCompanyBankAccountIdEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTable</Name>
				<Source><![CDATA[
    public LedgerJournalTable parmLedgerJournalTable(LedgerJournalTable _ledgerJournalTable = ledgerJournalTable)
    {
        ledgerJournalTable = _ledgerJournalTable;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymProposalReportedBy</Name>
				<Source><![CDATA[
    public PaymProposalReportedBy parmPaymProposalReportedBy(PaymProposalReportedBy _paymProposalReportedBy = paymProposalReportedBy)
    {
        paymProposalReportedBy = _paymProposalReportedBy;

        return paymProposalReportedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymProposalReportSubTotal</Name>
				<Source><![CDATA[
    public PaymProposalReportSubTotal parmPaymProposalReportSubTotal(PaymProposalReportSubTotal _paymProposalReportSubTotal = paymProposalReportSubTotal)
    {
        paymProposalReportSubTotal = _paymProposalReportSubTotal;

        return paymProposalReportSubTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintInvoiceLines</Name>
				<Source><![CDATA[
    public NoYes parmPrintInvoiceLines(NoYes _printInvoiceLines = printInvoiceLines)
    {
        printInvoiceLines = _printInvoiceLines;

        return printInvoiceLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintPaymLines</Name>
				<Source><![CDATA[
    public NoYes parmPrintPaymLines(NoYes _printPaymLines = printPaymLines)
    {
        printPaymLines = _printPaymLines;

        return printPaymLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMstAmounts</Name>
				<Source><![CDATA[
    public boolean parmShowMstAmounts(boolean _showMstAmounts = showMstAmounts)
    {
        showMstAmounts = _showMstAmounts;

        return showMstAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the group by value on the invoice or payment record to be inserted
    /// into the report temp table.
    /// </summary>
    /// <param name = "_custVendPaymProposalTmp">Instance of the report temp table.</param>
    public void setGroupBy(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        switch (paymProposalReportedBy)
        {
            case PaymProposalReportedBy::Account:
                _custVendPaymProposalTmp.GroupBy = _custVendPaymProposalTmp.CustVendAC;
                break;

            case PaymProposalReportedBy::Bank:
                if (!printPaymLines)
                {
                    _custVendPaymProposalTmp.GroupBy = _custVendPaymProposalTmp.CompanyBankAccountId;
                }
                else
                {
                    if (_custVendPaymProposalTmp.Payment == NoYes::Yes)
                    {
                        groupBy = _custVendPaymProposalTmp.CompanyBankAccountId;
                        _custVendPaymProposalTmp.GroupBy = groupBy;
                    }
                    else
                    {
                        _custVendPaymProposalTmp.GroupBy = groupBy;
                    }
                }
                break;

            default:
                boolean isHandled = this.setGroupByPaymProposalReportedByExtension(_custVendPaymProposalTmp);

                if(!isHandled)
                {
                    throw error(Error::wrongUseOfFunction(funcname()));
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGroupByPaymProposalReportedByExtension</Name>
				<Source><![CDATA[
	/// <summary>
    /// Sets default values on the payment proposal for extensions of the <c>PaymProposalReportedBy<c> enumeration.
    /// </summary>
    /// <param name = "_custVendPaymProposalTmp">
    /// Instance of the report temp table
	/// </param>
    /// <returns>
    /// true, if group by value is present; otherwise, false.
	/// </returns>
    [Replaceable]
    public boolean setGroupByPaymProposalReportedByExtension(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSubGroupBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the subgroup by value on the invoice or payment record to be inserted
    /// into the report temp table.
    /// </summary>
    /// <param name = "_custVendPaymProposalTmp">Instance of the report temp table.</param>
    public void setSubGroupBy(CustVendPaymProposalTmp _custVendPaymProposalTmp)
    {
        switch (paymProposalReportSubTotal)
        {
            case PaymProposalReportSubTotal::None:
                _custVendPaymProposalTmp.SubGroupBy = '';
                break;

            case PaymProposalReportSubTotal::Currency:
                if (!printPaymLines)
                {
                    _custVendPaymProposalTmp.SubGroupBy = _custVendPaymProposalTmp.CurrencyCode;
                }
                else
                {
                    if (_custVendPaymProposalTmp.Payment == NoYes::Yes)
                    {
                        subGroupBy = _custVendPaymProposalTmp.CurrencyCode;
                        _custVendPaymProposalTmp.SubGroupBy = subGroupBy;
                    }
                    else
                    {
                        _custVendPaymProposalTmp.SubGroupBy = subGroupBy;
                    }
                }
                break;

            case PaymProposalReportSubTotal::PaymMode:
                if (!printPaymLines)
                {
                    _custVendPaymProposalTmp.SubGroupBy = _custVendPaymProposalTmp.PaymMode;
                }
                else
                {
                    if (_custVendPaymProposalTmp.Payment == NoYes::Yes)
                    {
                        subGroupBy = _custVendPaymProposalTmp.PaymMode;
                        _custVendPaymProposalTmp.SubGroupBy = subGroupBy;
                    }
                    else
                    {
                        _custVendPaymProposalTmp.SubGroupBy = subGroupBy;
                    }
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PaymProposalReport construct(JournalId _journalId, boolean _proposal)
    {
        PaymProposalReport paymProposalReport;

        if (_proposal)
        {
            paymProposalReport = new PaymProposalReportProposal();
        }
        else
        {
            if (LedgerJournalTable::find(_journalId).Posted)
            {
                paymProposalReport = new PaymProposalReportJournalPost();
            }
            else
            {
                paymProposalReport = new PaymProposalReportJournal();
            }
        }

        paymProposalReport.parmJournalId(_journalId);
        paymProposalReport.parmLedgerJournalTable(LedgerJournalTable::find(_journalId));
        paymProposalReport.parmShowMstAmounts(true);

        return paymProposalReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountingCurrencyDifferent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the accounting currency is different between companies..
    /// </summary>
    /// <param name="_accountCompany">
    /// The company of the account.
    /// </param>
    /// <param name="_offsetCompany">
    /// The company of the offset account.
    /// </param>
    /// <returns>
    /// true if a different currency exists between the current company, account company, and offset company.
    /// </returns>
    private boolean isAccountingCurrencyDifferent(CompanyId _accountCompany, CompanyId _offsetCompany = curext())    
    {
        CurrencyCode curCurrency, transCurrency, offsetCurrency;
        boolean diffAccountingCurrencyExists;
        
        curCurrency = Ledger::accountingCurrency(CompanyInfo::current());
        transCurrency = Ledger::findByLegalEntity(CompanyInfo::findDataArea(_accountCompany).RecId).AccountingCurrency;
        offsetCurrency = Ledger::findByLegalEntity(CompanyInfo::findDataArea(_offsetCompany).RecId).AccountingCurrency;
        
        if ((curCurrency != transCurrency)
            || (curCurrency != offsetCurrency)
            || (transCurrency != offsetCurrency))        
        {
            diffAccountingCurrencyExists = true;            
        }
        
        return diffAccountingCurrencyExists;        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>