<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransTaxInformationHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class for building tax information transaction.
/// </summary>
[SysObsoleteAttribute('This class is obsoleted. Please use TransTaxInformationHelper instead.', false, 13\11\2018)]
public class TransTaxInformationHelper_IN
{
    TransitDocumentManager_IN transitDocumentManager;
    TaxModelTaxable taxModelTaxable;

    #ISOCountryRegionCodes
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultCompanyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get default company location.
    /// </summary>
    /// <param name="_companyId">
    /// The company Id.
    /// </param>
    /// <returns>
    /// The record Id for company location.
    /// </returns>
    public static RecId getDefaultCompanyLocation(CompanyId _companyId = curExt())
    {
        CompanyInfo         companyInfoLoc;
        DirPartyLocation    dirPartyLocation;
        LogisticsLocation   logisticsLocation;

        companyInfoLoc = CompanyInfo::findByCompany_IN(_companyId);

        dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(companyInfoLoc.RecId);

        if (dirPartyLocation)
        {
            logisticsLocation = LogisticsLocation::find(dirPartyLocation.Location);
        }

        return logisticsLocation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromExciseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes excise fields base on excise type.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    public static void initFromExciseType(TransTaxInformation _transTaxInformation)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            TaxInformation_IN taxInformation = TaxInformation_IN::find(_transTaxInformation.TaxInformation);

            switch (_transTaxInformation.ExciseType)
            {
                case ExciseType_IN::None:
                    _transTaxInformation.ExciseECCRegistrationNumber = taxInformation.ECCNumber;
                    break;
                case ExciseType_IN::Manufacturer:
                    _transTaxInformation.ExciseECCRegistrationNumber = taxInformation.ManECCRegistrationNumberTable;
                    break;
                case ExciseType_IN::Trader:
                    _transTaxInformation.ExciseECCRegistrationNumber = taxInformation.TraderECCRegistrationNumberTable;
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields base on markupTable.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    // <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    public static void initFromMarkupTable(TransTaxInformation _transTaxInformation, Common _sourceTable)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            MarkupTrans     markupTrans     = _sourceTable;
            MarkupTable_IN  markupTableIN   = MarkupTable_IN::findByMarkupTable(MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode).RecId);

            _transTaxInformation.Exempt                     = markupTableIN.Exempt;
            _transTaxInformation.ServiceAccountingCodeTable = markupTableIN.ServiceAccountingCodeTable;
            _transTaxInformation.ServiceCategory            = markupTableIN.ServiceCategory;
            _transTaxInformation.HSNCodeTable               = markupTableIN.HSNCodeTable;
            _transTaxInformation.ITCCategory                = markupTableIN.ITCCategory;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTableOrCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field base on project table or project category.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The transation table.
    /// </param>
    /// <returns>
    /// True if TransTaxInformation is from ProjTable; otherwise, false.
    /// </returns>
    public static boolean initFromProjTableOrCategory(TransTaxInformation _transTaxInformation, Common _sourceTable)
    {
        ProjTable                   projTable;
        ProjId                      projId;
        CategoryId                  categoryId;
        ProjCategory                category;
        ProjJournalTrans            projJournalTrans;
        TSTimesheetLine             tsTimesheetLine;
        TransTaxInformation         projTableTransTaxInfo;
        LedgerJournalTrans_project  ledgerJournalTrans_project;
        InventJournalTrans          inventJournalTrans;
        SMAServiceOrderLine         smaServiceOrderLine;
        LedgerJournalTrans          ledgerJournalTrans;
        ProjOnAccTrans              projOnAccTrans;
        VendTable                   vendTable;
        CustTable                   custTable;
        ItemId                      itemId;
        boolean                     isTransTaxInformationFromProjTable;
        boolean                     isLedgerJourTransLedgerAcc;
        SalesLine                   salesLine;
        SalesQuotationLine          salesQuotationLine;

        if (_sourceTable)
        {
            switch (_sourceTable.TableId)
            {
                case tableNum(ProjJournalTrans) :
                    projJournalTrans = _sourceTable;
                    categoryId = projJournalTrans.CategoryId;
                    projId = projJournalTrans.ProjId;
                    break;

                case tableNum(TSTimesheetLine) :
                    tsTimesheetLine = _sourceTable;
                    categoryId = tsTimesheetLine.CategoryId;
                    projId = tsTimesheetLine.ProjId;
                    break;

                case tableNum(LedgerJournalTrans_project) :
                    ledgerJournalTrans_project = _sourceTable;
                    ledgerJournalTrans = ledgerJournalTrans_project.ledgerJournalTrans();
                    categoryId = ledgerJournalTrans_project.CategoryId;
                    projId = ledgerJournalTrans_project.ProjId;
                    break;

                case tableNum(LedgerJournalTrans) :
                    ledgerJournalTrans = _sourceTable;
                    ledgerJournalTrans_project = ledgerJournalTrans_project::find(ledgerJournalTrans.RecId);
                    categoryId = ledgerJournalTrans_project.CategoryId;
                    projId = ledgerJournalTrans_project.ProjId;
                    if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                    {
                        vendTable = ledgerJournalTrans.findVendForOffset();
                    }
                    else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
                    {
                        custTable = ledgerJournalTrans.findCustForOffset();
                    }
                    else if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                    {
                        isLedgerJourTransLedgerAcc = true;
                    }
                    break;

                case tableNum(InventJournalTrans) :
                    inventJournalTrans = _sourceTable;
                    categoryId = inventJournalTrans.ProjCategoryId;
                    projId = inventJournalTrans.ProjId;
                    itemId = inventJournalTrans.ItemId;
                    break;

                case tableNum(SMAServiceOrderLine) :
                    smaServiceOrderLine = _sourceTable;
                    categoryId = smaServiceOrderLine.ProjCategoryId;
                    projId = smaServiceOrderLine.ProjId;
                    if ((smaServiceOrderLine.TransactionType == SMATransactionType::Expense)
                        && (smaServiceOrderLine.OffsetAccountTypeExpense == LedgerJournalACType::Vend))
                    {
                        vendTable = VendTable::findByLedgerDimension(smaServiceOrderLine.LedgerDimension);
                    }
                    else if (smaServiceOrderLine.TransactionType == SMATransactionType::Item)
                    {
                        itemId = smaServiceOrderLine.ItemId;
                    }
                    custTable = CustTable::find(SMAServiceOrderTable::find(smaServiceOrderLine.ServiceOrderId).CustAccount);
                    break;

                case tableNum(ProjOnAccTrans) :
                    projOnAccTrans = _sourceTable;
                    projId = projOnAccTrans.ProjId;
                    break;

                case tableNum(SalesLine) :
                    salesLine = _sourceTable;
                    if (salesLine.SalesType == SalesType::ItemReq)
                    {
                        categoryId = salesLine.ProjCategoryId;
                        projId = salesLine.ProjId;
                        itemId = salesLine.ItemId;
                    }
                    break;

                case tableNum(SalesQuotationLine) :
                    salesQuotationLine = _sourceTable;
                    if (salesQuotationLine.QuotationType == QuotationType::Project)
                    {
                        categoryId = salesQuotationLine.ProjCategoryId;
                        projId = salesQuotationLine.projId();
                        if (salesQuotationLine.ProjTransType == QuotationProjTransType::Item)
                        {
                            itemId = salesQuotationLine.ItemId;
                        }
                    }
                    break;
            }

            if (projId)
            {
                projTable = ProjTable::find(projId);
            }

            if (categoryId)
            {
                category = ProjCategory::find(categoryId);
            }

            if (projTable)
            {
                projTableTransTaxInfo = TransTaxInformationHelper_IN::findOrCreateTransTaxInformation(projTable.TableId, projTable.RecId);
                if (projTableTransTaxInfo)
                {
                    isTransTaxInformationFromProjTable = true;

                    buf2Buf(projTableTransTaxInfo, _transTaxInformation);
                    
                    if (isLedgerJourTransLedgerAcc)
                    {
                        _transTaxInformation.CustomerLocation = 0;
                        _transTaxInformation.CustomerTaxInformation = 0;
                        _transTaxInformation.VendorLocation = 0;
                        _transTaxInformation.VendorTaxInformation = 0;
                    }
                    
                    if (custTable)
                    {
                        TransTaxInformationHelper_IN::initFromCustomerLocation(_transTaxInformation, custTable);
                    }

                    if (vendTable)
                    {
                        if (!custTable)
                        {
                            _transTaxInformation.CustomerLocation = 0;
                            _transTaxInformation.CustomerTaxInformation = 0;
                        }

                        TransTaxInformationHelper_IN::initFromVendorLocation(_transTaxInformation, vendTable);
                    }
                }
            }

            if (itemId)
            {
                if (!custTable)
                {
                    custTable = CustTable::find(projTable.CustAccount);
                }

                TransTaxInformationHelper_IN::initFromInventItem(_transTaxInformation, itemId, custTable);
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && category && !_transTaxInformation.ServiceAccountingCodeTable && !_transTaxInformation.HSNCodeTable)
            {
                _transTaxInformation.ServiceAccountingCodeTable = category.ServiceAccountingCodeTable_IN;
            }
        }

        return isTransTaxInformationFromProjTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TransTaxInformation</c> record from the <c>TaxInformation_IN</c> record.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    public static void initFromTaxInformation(TransTaxInformation _transTaxInformation)
    {
        TaxInformation_IN taxInformation;

        taxInformation = TaxInformation_IN::find(_transTaxInformation.TaxInformation);
        _transTaxInformation.TaxID = taxInformation.TaxID;
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && taxInformation)
        {
            _transTaxInformation.VATTIN = taxInformation.TIN;
            _transTaxInformation.SalesTaxRegistrationNumber = taxInformation.SalesTaxRegistrationNumber;
            _transTaxInformation.TaxWithholdTAN = taxInformation.TAN;
            _transTaxInformation.CustomsIECRegistrationNumber = taxInformation.IECRegistrationNumberTable;
            _transTaxInformation.ServiceTaxRegistrationNumber = taxInformation.STCRegistrationNumberTable;
            _transTaxInformation.GSTIN = taxInformation.GSTIN;
            TransTaxInformationHelper_IN::initFromExciseType(_transTaxInformation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCompanyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax information base on company location.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    public static void initFromCompanyLocation(TransTaxInformation _transTaxInformation)
    {
        _transTaxInformation.TaxInformation = TaxInformation_IN::findDefaultbyLocation(_transTaxInformation.CompanyLocation).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTaxInfoFromRefTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default tax information from customer or vendor.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The customer or vendor.
    /// </param>
    /// <param name="_taxModelTaxable">
    /// The transaction TaxModelTaxable object.
    /// </param>
    public static void initCustVendTaxInfoFromRefTaxModelDocLine(TransTaxInformation _transTaxInformation, CustVendTable _custVendTable, TaxModelTaxable _taxModelTaxable)
    {
        TaxModelTaxable taxModelTaxable = _taxModelTaxable.getReferenceTaxModelDocLine();

        if (taxModelTaxable)
        {
            switch (_custVendTable.TableId)
            {
                case tableNum(VendTable) :
                    _transTaxInformation.VendorLocation = taxModelTaxable.getPartyLogisticsPostalAddress().Location;
                    TransTaxInformationHelper_IN::initFromVendorLocation(_transTaxInformation);
                    break;
                case tableNum(CustTable) :
                    _transTaxInformation.CustomerLocation   = taxModelTaxable.getPartyLogisticsPostalAddress().Location;
                    TransTaxInformationHelper_IN::initFromCustomerLocation(_transTaxInformation);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes excise fields base on invent item.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_itemId">
    /// The invent item Id.
    /// </param>
    public static void initFromInventItem(TransTaxInformation _transTaxInformation, ItemId _itemId, CustVendTable _custVendTable)
    {
        InventTable inventTable;

        if (_itemId && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            inventTable = InventTable::find(_itemId);
            
            if (!_transTaxInformation.ExciseTariffCodes)
            {
                _transTaxInformation.ExciseTariffCodes = inventTable.ExciseTariffCodes_IN;
            }

            if (_transTaxInformation.ExciseDSA == NoYes::No)
            {
                _transTaxInformation.ExciseDSA = inventTable.DSA_IN;
            }

            if (_transTaxInformation.ExciseRecordType == ExciseRecordType_IN::None)
            {
                _transTaxInformation.ExciseRecordType = inventTable.ExciseRecordType_IN;
            }

            if (!_transTaxInformation.ServiceCode)
            {
                _transTaxInformation.ServiceCode = inventTable.ServiceCodeTable_IN;
            }

            if (!_transTaxInformation.HSNCodeTable && !_transTaxInformation.ServiceAccountingCodeTable)
            {
                _transTaxInformation.HSNCodeTable = inventTable.HSNCodeTable_IN;
            }

            if (_transTaxInformation.Exempt == NoYes::No)
            {
                _transTaxInformation.Exempt = inventTable.Exempt_IN;
            }

            if (_transTaxInformation.NonGST == NoYes::No)
            {
                _transTaxInformation.NonGST = inventTable.NonGST_IN;
            }

            if (!_transTaxInformation.ServiceAccountingCodeTable && !_transTaxInformation.HSNCodeTable)
            {
                _transTaxInformation.ServiceAccountingCodeTable = inventTable.ServiceAccountingCodeTable_IN;
            }

            if (!_transTaxInformation.CustomsTariffCode)
            {
                if (_custVendTable is VendTable)
                {
                    _transTaxInformation.CustomsTariffCode = inventTable.CustomsImportTariffCodeTable_IN;
                }
                else if (_custVendTable is CustTable)
                {
                    _transTaxInformation.CustomsTariffCode = inventTable.CustomsExportTariffCodeTable_IN;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field base on customer or vendor.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The customer or vendor.
    /// </param>
    /// <param name="_taxModelTaxable">
    /// The transaction TaxModelTaxable object.
    /// </param>
    public static void initFromCustVend(TransTaxInformation  _transTaxInformation, CustVendTable _custVendTable, TaxModelTaxable _taxModelTaxable = null)
    {
        if (_custVendTable)
        {
            if (_taxModelTaxable && _taxModelTaxable is TaxModelDocLineMarkupTransImpl_IN)
            {
                TransTaxInformationHelper_IN::initCustVendTaxInfoFromRefTaxModelDocLine(_transTaxInformation, _custVendTable, _taxModelTaxable);
            }
            else if (_taxModelTaxable && _taxModelTaxable is TaxModelDocLineServiceOrderImpl_IN)
            {
                TransTaxInformationHelper_IN::initDefaultCustVendTaxInformation(_transTaxInformation, _taxModelTaxable.getCustTable());
                TransTaxInformationHelper_IN::initFromVendorLocation(_transTaxInformation, _taxModelTaxable.getVendTable());
            }
            else
            {
                TransTaxInformationHelper_IN::initDefaultCustVendTaxInformation(_transTaxInformation, _custVendTable);
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                _transTaxInformation.TaxWithholdCountryRegionToRemittance = TaxWithholdCountryRegionToRemittance_IN::getDefaultDeducteeCountryRegion(_custVendTable).RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseTarriffCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update excise tariff codes.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_exciseTarriffCodes">
    /// The excise tariff codes.
    /// </param>
    public static void updateExciseTarriffCodes(TransTaxInformation _transTaxInformation, RefRecId _exciseTarriffCodes)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            _transTaxInformation.ExciseTariffCodes = _exciseTarriffCodes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransTaxInformationFromProjCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update transaction tax information from project category.
    /// </summary>
    /// <param name="_sourceTable">
    /// The source transaction.
    /// </param>
    /// <param name="_categoryId">
    /// The categoryId of source transaction.
    /// </param>
    /// <param name="_type">
    /// The type.
    /// </param>
    public void updateTransTaxInformationFromProjCategory(
        Common _sourceTable,
        CategoryId _categoryId,
        TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation         transTaxInformation;
        TransTaxInformation         projTableTransTaxInfo;
        List                        transTaxInformationList;
        ListEnumerator              listEnumerator;
        CategoryId                  categoryId;
        ProjCategory                category;
        
        if (_categoryId)
        {
            category = ProjCategory::find(_categoryId);
        }

        if (category && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            transTaxInformationList = transitDocumentManager.findTransitDocumentsByReference(
                _sourceTable.TableId,
                _sourceTable.RecId,
                TransTaxInformationHelper_IN::getSampleTransTaxInformation(_sourceTable.TableId, _type));

            if (transTaxInformationList && transTaxInformationList.elements())
            {
                listEnumerator = transTaxInformationList.getEnumerator();
                listEnumerator.moveNext();
                transTaxInformation = listEnumerator.current();
                if (transTaxInformation)
                {
                    ttsbegin;
                    transTaxInformation.selectForUpdate(true);

                    if (transTaxInformation.HSNCodeTable)
                    {
                        transTaxInformation.HSNCodeTable = 0;
                    }
                    transTaxInformation.ServiceAccountingCodeTable = category.ServiceAccountingCodeTable_IN;
                    transTaxInformation.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransTaxInformationFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update transaction tax information from project table.
    /// </summary>
    /// <param name = "_sourceTable">
    /// The source transaction record.
    /// </param>
    /// <param name = "_type">
    /// Type of TransTaxInformation.
    /// </param>
    public void updateTransTaxInformationFromProjTable(
        Common _sourceTable,
        TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation         transTaxInformation;
        TransTaxInformation         projTableTransTaxInfo;
        List                        transTaxInformationList;
        ListEnumerator              listEnumerator;
        ProjTable                   projTable;
        ProjJournalTrans            projJournalTrans;
        TSTimesheetLine             tsTimesheetLine;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_project  ledgerJournalTrans_project;

        if (_sourceTable)
        {
            switch (_sourceTable.TableId)
            {
                case tableNum(ProjJournalTrans) :
                    projJournalTrans = _sourceTable;
                    projTable = ProjTable::find(projJournalTrans.ProjId);
                    break;

                case tableNum(TSTimesheetLine) :
                    tsTimesheetLine = _sourceTable;
                    projTable = ProjTable::find(tsTimesheetLine.ProjId);
                    break;

                case tableNum(LedgerJournalTrans_project) :
                    ledgerJournalTrans_project = _sourceTable;
                    projTable = ProjTable::find(ledgerJournalTrans_project.ProjId);
                    break;

                case tableNum(LedgerJournalTrans) :
                    ledgerJournalTrans = _sourceTable;
                    projTable = ProjTable::find(ledgerJournalTrans.parmAccount());
                    break;
            }
        }

        if (projTable && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            transTaxInformationList = transitDocumentManager.findTransitDocumentsByReference(
                _sourceTable.TableId,
                _sourceTable.RecId,
                TransTaxInformationHelper_IN::getSampleTransTaxInformation(_sourceTable.TableId, _type));

            if (transTaxInformationList && transTaxInformationList.elements())
            {
                listEnumerator = transTaxInformationList.getEnumerator();
                listEnumerator.moveNext();
                transTaxInformation = listEnumerator.current();
                if (transTaxInformation)
                {
                    ttsbegin;
                    RefRecId hsnCode = transTaxInformation.HSNCodeTable;
                    RefRecId sacCode = transTaxInformation.ServiceAccountingCodeTable;

                    transTaxInformation.selectForUpdate(true);

                    projTableTransTaxInfo = TransTaxInformationHelper_IN::findOrCreateTransTaxInformation(projTable.TableId, projTable.RecId);
                    buf2Buf(projTableTransTaxInfo, transTaxInformation);

                    if (sacCode)
                    {
                        transTaxInformation.ServiceAccountingCodeTable = sacCode;
                    }
                    else
                    {
                        transTaxInformation.HSNCodeTable = hsnCode;
                    }
                    transTaxInformation.update();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseRecordType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update excise record type.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_exciseRecordTypeStr">
    /// The excise record type string.
    /// </param>
    public static void updateExciseRecordType(TransTaxInformation _transTaxInformation, str _exciseRecordTypeStr)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            ExciseRecordType_IN exciseRecordType;
            _transTaxInformation.ExciseRecordType = str2Enum(exciseRecordType, _exciseRecordTypeStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update excise DSA.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_itemId">
    /// The invent item Id.
    /// </param>
    public static void updateExciseDSA(TransTaxInformation _transTaxInformation, ItemId _itemId)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && !TaxExciseTypeController_IN::isDSAAllowed(_transTaxInformation.ExciseType, _transTaxInformation.ExciseRecordType, _itemId))
        {
            _transTaxInformation.ExciseDSA = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update excise direct settlement.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_taxDirection">
    /// The tax direction.
    /// </param>
    public static void updateExciseDirectSettlement(TransTaxInformation _transTaxInformation, TaxDirection _taxDirection)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) 
            && !TaxExciseTypeController_IN::isDirectSettlementAllowed(
                _transTaxInformation.ExciseType, _transTaxInformation.ExciseRecordType, _taxDirection))
        {
            _transTaxInformation.ExciseDirectSettlement = DirectSettlement_IN::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExciseCENVATCreditAvailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update excise CEN VAT credit availed.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    public static void updateExciseCENVATCreditAvailed(TransTaxInformation _transTaxInformation)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && (_transTaxInformation.ExciseDirectSettlement != DirectSettlement_IN::PLA
                || _transTaxInformation.ExciseRecordType != ExciseRecordType_IN::RG23C))
        {
            _transTaxInformation.ExciseCENVATCreditAvailed = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCompanyLocationFromTransTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update company location from transaction table.
    /// </summary>
    /// <param name="_sourceTable">
    /// The source transaction.
    /// </param>
    /// <param name="_addressRecId">
    /// The logistics postal address RecId.
    /// </param>
    /// <param name="_type">
    /// The type.
    /// </param>
    public void updateCompanyLocationFromTransTable(
        Common _sourceTable,
        LogisticsPostalAddressRecId _addressRecId,
        TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation     transTaxInformation;
        List                    transTaxInformationList;
        ListEnumerator          listEnumerator;

        transTaxInformationList = transitDocumentManager.findTransitDocumentsByReference(
            _sourceTable.TableId,
            _sourceTable.RecId,
            TransTaxInformationHelper_IN::getSampleTransTaxInformation(_sourceTable.TableId, _type));

        if (transTaxInformationList && transTaxInformationList.elements())
        {
            listEnumerator = transTaxInformationList.getEnumerator();
            listEnumerator.moveNext();
            transTaxInformation = listEnumerator.current();
            if (transTaxInformation)
            {
                ttsbegin;
                transTaxInformation.selectForUpdate(true);
                transTaxInformation.CompanyLocation = LogisticsPostalAddress::getLocation(_addressRecId);
                TransTaxInformationHelper_IN::initFromCompanyLocation(transTaxInformation);
                TransTaxInformationHelper_IN::initFromTaxInformation(transTaxInformation);
                transTaxInformation.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the record Id for each type of TaxRegistrationNumbers.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_taxType">
    /// The tax type.
    /// </param>
    /// <returns>
    /// The tax registration numbers.
    /// </returns>
    public static TaxRegistrationNumbers_IN getTaxRegistrationNumbers(TransTaxInformation _transTaxInformation, TaxType_IN _taxType)
    {
        RecId taxRegistrationNumberRefRecId;

        switch (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && _taxType)
        {
            case TaxType_IN::Customs :
                taxRegistrationNumberRefRecId = _transTaxInformation.CustomsIECRegistrationNumber;
                break;

            case TaxType_IN::Excise :
                taxRegistrationNumberRefRecId = _transTaxInformation.ExciseECCRegistrationNumber;
                break;

            case TaxType_IN::ServiceTax :
                taxRegistrationNumberRefRecId = _transTaxInformation.ServiceTaxRegistrationNumber;
                break;

            case TaxType_IN::VAT:
                taxRegistrationNumberRefRecId = _transTaxInformation.VATTIN;
                break;

            case TaxType_IN::SalesTax :
                taxRegistrationNumberRefRecId = _transTaxInformation.SalesTaxRegistrationNumber;
                break;

            case TaxType_IN::GST :
                taxRegistrationNumberRefRecId = _transTaxInformation.GSTIN;
                break;

            default :
                break;
        }

        return TaxRegistrationNumbers_IN::find(taxRegistrationNumberRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomsTariffCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the customs tariff code to see if it is valid.
    /// </summary>
    /// <param name="_customsTariffCodeTableRecId">
    /// The customs tariff code table rec id.
    /// </param>
    /// <param name="_direction">
    /// The tariff direction.
    /// </param>
    /// <param name="_companyId">
    /// The company id information.
    /// </param>
    /// <returns>
    /// Returns true if the customs tariff code is valid.
    /// </returns>
    public static boolean checkCustomsTariffCode(
        RefRecId      _customsTariffCodeTableRecId,
        Direction_IN  _direction,
        CompanyId     _companyId = curext())
    {
        boolean              ret = true;
        CustomsTariffCode_IN customsTariffCode;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            changecompany(_companyId)
            {
                customsTariffCode = CustomsTariffCodeTable_IN::find(_customsTariffCodeTableRecId).TariffCode;

                if (customsTariffCode && !CustomsTariffCodeTable_IN::exist(customsTariffCode, _direction))
                {
                    ret = checkFailed(strfmt("@GLS5200", customsTariffCode, _direction));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMaximumRetailPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// To check whether MaximumRetailPrice is positive.
    /// </summary>
    /// <param name="_maximumRetailPrice">
    /// maximum retail price which has to checked.
    /// </param>
    /// <returns>
    /// Returns true if maximumretail price is greater than or equal to zero; otherwise false.
    /// </returns>
    public static boolean checkMaximumRetailPrice(MaximumRetailPrice_IN  _maximumRetailPrice)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return (_maximumRetailPrice >= 0) ? true : false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or create transaction tax information.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The transaction buffer table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The transaction buffer table record Id.
    /// </param>
    /// <param name="_selectForUpdate">
    /// The boolean value for update.
    /// </param>
    /// <param name="_type">
    /// The transaction tax information type.
    /// </param>
    /// <returns>
    /// Return the transaction tax information record, if exist the record, else create a new record and return it.
    /// </returns>
    public static TransTaxInformation findOrCreateTransTaxInformation(
        RefTableId  _sourceTableId,
        RefRecId    _sourceRecId,
	    boolean     _selectForUpdate = false,
        TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformationHelper_IN    helper = TransTaxInformationHelper_IN::newHelper();
        TransTaxInformation             transTaxInformation;

        transTaxInformation = helper.getTransTaxInformation(_sourceTableId, _sourceRecId, _type);

        if (transTaxInformation)
        {
            transTaxInformation.selectForUpdate(_selectForUpdate);
        }

        return transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy tax information from one source table to other source table.
    /// </summary>
    /// <param name="_fromSourceTable">
    /// The from transaction buffer.
    /// </param>
    public static void copyTransTaxInformation(Common _fromSourceTable, Common _toSourceTable)
    {
        TransTaxInformationHelper_IN helper;

        helper = TransTaxInformationHelper_IN::newHelper();
        helper.transitTransTaxInformation(_fromSourceTable, _toSourceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of tax information helper class.
    /// </summary>
    /// <returns>
    /// The new TransTaxInformationHelper_IN class.
    /// </returns>
    public static TransTaxInformationHelper_IN newHelper()
    {
        TransTaxInformationHelper_IN helper = new TransTaxInformationHelper_IN();

        helper.init();

        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes rule and TransitDocumentTaxInformationManager_IN.
    /// </summary>
    private void init()
    {
        transitDocumentManager = TransitDocumentManager_IN::newManager();

        // <GIN>
        #ISOCountryRegionCodes

        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransitDocumentType_IN transitDocumentType;

            select firstOnly RecId from transitDocumentType
                where transitDocumentType.RefTableId == tableNum(TransTaxInformation);

            if (!transitDocumentType.RecId)
            {
                TransitDocumentTransactionRuleHelper_IN::initRule();
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the tax information for source table.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id.
    /// </param>
    /// <param name="_type">
    /// The transTaxInformation type.
    /// </param>
    /// <returns>
    /// The tax information.
    /// </returns>
    public TransTaxInformation findTransTaxInformation(
        RefTableId _sourceTableId,
        RefRecId _sourceRecId,
        TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        List                    transTaxInformationList;
        ListEnumerator          listEnumerator;
        TransTaxInformation     transTaxInformation;

        if (_sourceTableId && _sourceRecId)
        {
            transTaxInformationList = transitDocumentManager.findTransitDocumentsByReference(
                _sourceTableId,
                _sourceRecId,
                TransTaxInformationHelper_IN::getSampleTransTaxInformation(_sourceTableId, _type));
            listEnumerator = transTaxInformationList.getEnumerator();
            if (listEnumerator.moveNext())
            {
                transTaxInformation = listEnumerator.current();
            }
        }
        return transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransTaxInformations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the list of tax information for source table.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id.
    /// </param>
    public void createTransTaxInformations(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        Common                  transaction;
        Common                  transactionHeader;
        TransTaxInformation     transTaxInformation;

        if (_sourceTableId && _sourceRecId)
        {
            transaction = this.findTransactionRecord(_sourceTableId, _sourceRecId);

            if (transaction)
            {
                SalesPurchJournalLine salesPurchJournalLine = SalesPurchJournalLine::findRecId(_sourceTableId, _sourceRecId);
                if (salesPurchJournalLine)
                {
                    transactionHeader = salesPurchJournalLine.SalesPurchJournalLine::salesPurchJournalTable();
                }
                List transitDocTypeList = transitDocumentManager.findTransitDocTypes(_sourceTableId, tableNum(TransTaxInformation));
                ListEnumerator enumerator = transitDocTypeList.getEnumerator();

                while (enumerator.moveNext())
                {
                    TransitDocumentType_IN transitDocType = enumerator.current();
                    transTaxInformation.clear();
                    transTaxInformation.initValue();
                    transTaxInformation.Type = transitDocType.DistinguishFieldValue;

                    ttsbegin;

                    this.initTransTaxInformation(transTaxInformation, transaction, transTaxInformation.Type);
                    if (transactionHeader)
                    {
                        transTaxInformation.HeadingTableId = transactionHeader.TableId;
                        transTaxInformation.HeadingRecId = transactionHeader.RecId;
                    }
                    transTaxInformation.insert();
                    transitDocumentManager.addTransitDocument(transaction, transTaxInformation, transactionHeader);

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets of tax information for source table.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id.
    /// </param>
    /// <param name="_type">
    /// The transaction tax information type.
    /// </param>
    /// <returns>
    /// The tax information.
    /// </returns>
    public TransTaxInformation getTransTaxInformation(
        RefTableId              _sourceTableId,
        RefRecId                _sourceRecId,
        TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation     transTaxInformation;
        List                    transTaxInformationList;

        transTaxInformation = this.findTransTaxInformation(_sourceTableId, _sourceRecId, _type);

        if (!transTaxInformation)
        {
            this.createTransTaxInformations(_sourceTableId, _sourceRecId);
            transTaxInformation = this.findTransTaxInformation(_sourceTableId, _sourceRecId, _type);
        }

        return transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit tax information from the source transaction to the target transaction.
    /// </summary>
    /// <param name="_fromSourceTable">
    /// The source transaction table.
    /// </param>
    /// <param name="_toSourceTable">
    /// The target transaction table.
    /// </param>
    private void transitTransTaxInformation(Common _fromSourceTable, Common _toSourceTable)
    {
        SalesPurchJournalLine salesPurchJournalLine = SalesPurchJournalLine::findRecId(_toSourceTable.TableId, _toSourceTable.RecId);
        SalesPurchJournalTable sourceTableHeader;

        if (salesPurchJournalLine)
        {
            sourceTableHeader = salesPurchJournalLine.SalesPurchJournalLine::salesPurchJournalTable();
        }
        transitDocumentManager.transit(_fromSourceTable, _toSourceTable, sourceTableHeader, tableNum(TransTaxInformation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set or get the TaxModelTaxable.
    /// </summary>
    /// <param name="_taxModelTaxable">
    /// The instance of TaxModelTaxable.
    /// </param>
    /// <returns>
    /// The TaxModelTaxable.
    /// </returns>
    public TaxModelTaxable parmTaxModelTaxable(TaxModelTaxable _taxModelTaxable)
    {
        taxModelTaxable = _taxModelTaxable;

        return taxModelTaxable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax information transaction.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The buffer of tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    /// <param name="_type">
    /// Transaction tax information type.
    /// </param>
    private void initTransTaxInformation(
        TransTaxInformation         _transTaxInformation,
        Common                      _sourceTable,
        TransTaxInformationType_IN  _type = TransTaxInformationType_IN::Normal)
    {
        InventTable     inventTable;
        ItemId          itemId;
        CustVendTable   custVendTable;
        boolean         isTransTaxInformationFromProjTable;

        if (!taxModelTaxable)
        {
            taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(_sourceTable);
        }

        itemId          = taxModelTaxable.getItemId();

        if (_sourceTable.TableId == tableNum(ProjJournalTrans)
            || _sourceTable.TableId == tableNum(TSTimesheetLine)
            || _sourceTable.TableId == tableNum(LedgerJournalTrans_Project)
            || (_sourceTable.TableId == tableNum(LedgerJournalTrans) && ledgerJournalTrans_project::find(_sourceTable.RecId))
            || (_sourceTable.TableId == tableNum(InventJournalTrans) && _sourceTable.(fieldNum(InventJournalTrans, ProjId)))
            || _sourceTable.TableId == tableNum(SMAServiceOrderLine)
            || _sourceTable.TableId == tableNum(ProjOnAccTrans)
            || (_sourceTable.TableId == tableNum(SalesLine) && _sourceTable.(fieldNum(SalesLine, ProjId))
                && (_sourceTable.(fieldNum(SalesLine, SalesType)) == SalesType::ItemReq))
            || (_sourceTable.TableId == tableNum(SalesQuotationLine) && (_sourceTable.(fieldNum(SalesQuotationLine, QuotationType)) == QuotationType::Project))
            )
        {
            isTransTaxInformationFromProjTable = TransTaxInformationHelper_IN::initFromProjTableOrCategory(_transTaxInformation, _sourceTable);
        }

        if (!isTransTaxInformationFromProjTable)
        {
            custVendTable   = taxModelTaxable.getPartyTable();
            _transTaxInformation.CompanyLocation = taxModelTaxable.getTaxLogisticsPostalAddress(_type).Location;
            TransTaxInformationHelper_IN::initFromCompanyLocation(_transTaxInformation);
            TransTaxInformationHelper_IN::initFromTaxInformation(_transTaxInformation);

            if (_sourceTable.TableId != tableNum(MarkUpTrans))
            {
                TransTaxInformationHelper_IN::initFromInventItem(_transTaxInformation, itemId, custVendTable);
            }
            else
            {
                TransTaxInformationHelper_IN::initFromMarkupTable(_transTaxInformation, _sourceTable);
            }

            if (_sourceTable.TableId == tableNum(LedgerJournalTrans))
            {
                LedgerJournalTrans ledgerJournalTrans = _sourceTable;

                if (ledgerJournalTrans.TransactionType == LedgerTransType::Fee && ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
                {
                    BankAccountTable bankAccountTable = BankAccountTable::find(ledgerJournalTrans.parmOffsetAccount());
                    TransTaxInformationHelper_IN::initDefaultBankTaxInformation(_transTaxInformation, bankAccountTable);
                }
            }

            TransTaxInformationHelper_IN::initFromCustVend(_transTaxInformation, custVendTable, taxModelTaxable);

            TransTaxInformationHelper_IN::initDefaultInclTax(_transTaxInformation, _sourceTable);

            TransTaxInformationHelper_IN::initDefaultCustomsTariffDirection(_transTaxInformation, _sourceTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get requested planned order type.
    /// </summary>
    /// <param name="_itemId">
    /// The item Id.
    /// </param>
    /// <param name="_dataAreaId">
    /// The company Id.
    /// </param>
    /// <returns>
    /// The requested planned order type.
    /// </returns>
    public static ReqPOType getDefaultOrderType(ItemId _itemId, DataAreaId _dataAreaId)
    {
        return InventItemSetupSupplyType::find(_itemId, _dataAreaId).DefaultOrderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get item type.
    /// </summary>
    /// <param name="_itemId">
    /// The item Id.
    /// </param>
    /// <returns>
    /// The item type.
    /// </returns>
    public static ItemType getItemType(ItemId _itemId)
    {
        return InventTable::find(_itemId).ItemType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSampleTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a sample transTaxInformation which is used for transit document framework.
    /// </summary>
    /// <param name = "_type">The type for transaction tax information.</param>
    /// <returns>
    /// The sample transTaxInformation.
    /// </returns>
    private static TransTaxInformation getSampleTransTaxInformation(TableId _sourceTableId, TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        TransTaxInformation transTaxInformation;
        transTaxInformation.Type = _type;

        if (_sourceTableId == tableNum(InventTransferLine) && _type == TransTaxInformationType_IN::Normal)
        {
            transTaxInformation.Type = TransTaxInformationType_IN::InventTransferFrom;
        }

        return transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransactionRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find transaction record.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The source table Id.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id.
    /// </param>
    /// <returns>
    /// The transaction table.
    /// </returns>
    private Common findTransactionRecord(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        DictTable   dictTable;
        Common      transaction;

        dictTable = new DictTable(_sourceTableId);
        transaction = dictTable.makeRecord();

        select firstonly transaction
            where transaction.RecId == _sourceRecId;

        return transaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of tax information helper class.
    /// </summary>
    /// <returns>
    /// The new TransTaxInformationHelper_IN class.
    /// </returns>
    public static TransTaxInformationHelper_IN construct()
    {
        TransTaxInformationHelper_IN helper = new TransTaxInformationHelper_IN();

        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustomerLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax information base on Customer location.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The customer table.
    /// </param>
    public static void initFromCustomerLocation(TransTaxInformation _transTaxInformation, CustVendTable _custVendTable = null)
    {
        if (_custVendTable)
        {
            _transTaxInformation.CustomerLocation = TransTaxInformationHelper_IN::findLocationByParty(_custVendTable.Party);
        }

        _transTaxInformation.CustomerTaxInformation = TaxInformation_IN::findDefaultbyLocation(_transTaxInformation.CustomerLocation).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendorLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax information base on Vendor location.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The vendor table.
    /// </param>
    public static void initFromVendorLocation(TransTaxInformation _transTaxInformation, CustVendTable _custVendTable = null)
    {
        if (_custVendTable)
        {
            _transTaxInformation.VendorLocation = TransTaxInformationHelper_IN::findLocationByParty(_custVendTable.Party);
        }

        _transTaxInformation.VendorTaxInformation = TaxInformation_IN::findDefaultbyLocation(_transTaxInformation.VendorLocation).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCustVendTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default tax information from customer or vendor.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_custVendTable">
    /// The customer or vendor.
    /// </param>
    public static void initDefaultCustVendTaxInformation(TransTaxInformation  _transTaxInformation, CustVendTable _custVendTable)
    {
        switch (_custVendTable.TableId)
        {
            case tableNum(VendTable) :
                TransTaxInformationHelper_IN::initFromVendorLocation(_transTaxInformation, _custVendTable);
                TaxInformationVendTable_IN taxInformationVendTable_IN = TaxInformationVendTable_IN::findByVendTable(_custVendTable.AccountNum);
                _transTaxInformation.TaxWithholdNatureOfAssessee = taxInformationVendTable_IN.NatureOfAssessee;
                break;

            case tableNum(CustTable) :
                TransTaxInformationHelper_IN::initFromCustomerLocation(_transTaxInformation, _custVendTable);
                TaxInformationCustTable_IN taxInformationCustTable_IN = TaxInformationCustTable_IN::findByCustTable(_custVendTable.AccountNum);
                _transTaxInformation.TaxWithholdNatureOfAssessee = taxInformationCustTable_IN.NatureOfAssessee;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultBankTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default tax information from bank.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    /// <param name="_bankAccountTable">
    /// The bank table.
    /// </param>
    public static void initDefaultBankTaxInformation(TransTaxInformation  _transTaxInformation, BankAccountTable _bankAccountTable)
    {
        _transTaxInformation.BankLocation = _bankAccountTable.Location;
        _transTaxInformation.BankTaxInformation = TaxInformation_IN::findDefaultbyLocation(_transTaxInformation.BankLocation).RecId;
        _transTaxInformation.CustomerLocation = 0;
        _transTaxInformation.CustomerTaxInformation = 0;
        _transTaxInformation.VendorLocation = 0;
        _transTaxInformation.VendorTaxInformation = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default InclTax field to relevant transaction.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The buffer of tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    public static void initDefaultInclTax(TransTaxInformation _transTaxInformation, Common _sourceTransTable)
    {
        #define.FieldForInclTax('InclTax')
        #define.FieldForGLInclTax('LedgerJournalInclTax')

        SalesParmTable                      salesParmTable;
        PurchParmTable                      purchParmTable;
        VendInvoiceInfoTable                vendInvoiceInfoTable;
        LedgerJournalTable                  ledgerJournalTable;
        PurchRFQReplyTable                  purchRFQReplyTable;
        PurchRFQParmTable                   purchRFQParmTable;
        SalesQuotationParmTable             salesQuotationParmTable;
        Common                              sourceHeaderTable;
        SalesPurchJournalTable              headerTable = _sourceTransTable.SalesPurchJournalLine::salesPurchJournalTable();
        SysDictField                        sysDictFieldForInclTax;
        TaxEngineLedgerJournalTransHeader   taxEngineLedgerJournalTransHeader;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && headerTable.SourceTableId)
        {
            switch (headerTable.SourceTableId)
            {
                case tableNum(SalesParmTable):
                    salesParmTable = headerTable;
                    sourceHeaderTable = salesParmTable.salesTable();
                    break;

                case tableNum(PurchParmTable):
                    purchParmTable = headerTable;
                    sourceHeaderTable = purchParmTable.purchTable();
                    break;

                case tableNum(VendInvoiceInfoTable):
                    vendInvoiceInfoTable = headerTable;
                    sourceHeaderTable =  vendInvoiceInfoTable.purchTable();
                    break;

                case tableNum(PurchRFQReplyTable):
                    purchRFQReplyTable = headerTable;
                    sourceHeaderTable = purchRFQReplyTable.purchRFQTable();
                    break;

                case tableNum(PurchRFQParmTable):
                    purchRFQParmTable = headerTable;
                    sourceHeaderTable = purchRFQParmTable.purchRFQTable();
                    break;

                case tableNum(SalesQuotationParmTable):
                    salesQuotationParmTable = headerTable;
                    sourceHeaderTable = salesQuotationParmTable.salesQuotationTable();
                    break;

                case tableNum(TaxEngineLedgerJournalTransHeader):
                    taxEngineLedgerJournalTransHeader = headerTable;
                    sourceHeaderTable = LedgerJournalTable::find(taxEngineLedgerJournalTransHeader.JournalNum);
                    break;

                default:
                    sourceHeaderTable = headerTable;
                    break;
            }

            if (sourceHeaderTable.TableId == tableNum(LedgerJournalTable))
            {
                _transTaxInformation.InclTax = sourceHeaderTable.(fieldName2Id(sourceHeaderTable.TableId, #FieldForGLInclTax));
            }
            else
            {
                sysDictFieldForInclTax = new SysDictField(sourceHeaderTable.TableId, fieldName2Id(sourceHeaderTable.TableId, #FieldForInclTax));

                if (sysDictFieldForInclTax)
                {
                    _transTaxInformation.InclTax = sourceHeaderTable.(fieldName2Id(sourceHeaderTable.TableId, #FieldForInclTax));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultCustomsTariffDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes default CustomsTariffDirection field to relevant transaction.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The buffer of tax information.
    /// </param>
    /// <param name="_sourceTable">
    /// The buffer of source table.
    /// </param>
    public static void initDefaultCustomsTariffDirection(TransTaxInformation _transTaxInformation, Common _sourceTransTable)
    {
        SalesPurchJournalTable  headerTable = _sourceTransTable.SalesPurchJournalLine::salesPurchJournalTable();
        SalesTable              salesTable;
        PurchTable              purchTable;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && headerTable.SourceTableId)
        {
            switch (headerTable.SourceTableId)
            {
                case tableNum(PurchTable):
                    purchTable = headerTable;
                    if (purchTable.purchTable_W().CustomsImportOrder_IN)
                    {
                        _transTaxInformation.CustomsTariffDirection = Direction_IN::Import;
                    }
                    break;

                case tableNum(SalesTable):
                    salesTable = headerTable;
                    if (salesTable.CustomsExportOrder_IN)
                    {
                        _transTaxInformation.CustomsTariffDirection = Direction_IN::Export;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationByParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the LogisticsLocationRecId with Party.
    /// </summary>
    /// <param name="_partyRecId">
    /// The DirParty RecId.
    /// </param>
    private static LogisticsLocationRecId findLocationByParty(DirPartyRecId _partyRecId)
    {
        LogisticsLocation   logisticsLocation;
        DirPartyLocation    dirPartyLocation;

        select firstonly RecId from logisticsLocation
                where logisticsLocation.IsPostalAddress == NoYes::Yes
            exists join dirPartyLocation
                where dirPartyLocation.Location == logisticsLocation.RecId
                    && dirPartyLocation.Party   == _partyRecId;

        return logisticsLocation.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>