<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTrialBalanceDetailReportUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UI builder class for the trial balance detail report.
/// </summary>
internal final class LedgerTrialBalanceDetailReportUIBuilder extends SysOperationAutomaticUIBuilder
{
    private DialogField dialogFieldPrimaryFocus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void postBuild()
    {
        super();

        if (dialogFieldPrimaryFocus)
        {
            dialogFieldPrimaryFocus.lookupButton(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method in order to register the dialog field methods to capture events.
    /// </summary>
    [Hookable(false)]
    public void postRun()
    {
        super();

        Dialog dialogLocal = this.dialog();
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        // dimension sets
        dialogFieldPrimaryFocus = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmPrimaryDimensionFocus));
        dialogFieldPrimaryFocus.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(LedgerTrialBalanceDetailReportUIBuilder, dimensionSetLookup), this);
        dialogFieldPrimaryFocus.registerOverrideMethod(methodstr(FormStringControl, modified), methodstr(LedgerTrialBalanceDetailReportUIBuilder, dimensionSetModified), this);
        dialogFieldPrimaryFocus.fieldControl().mandatory(true);
  
        DialogField dialogFieldStartDate = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmFromDate));
        dialogFieldStartDate.fieldControl().mandatory(true);

        DialogField dialogFieldEndDate = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmToDate));
        dialogFieldEndDate.fieldControl().mandatory(true);

        DialogField formatMapping = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTrialBalanceDetailERContract, parmFormatMapping));
        formatMapping.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(LedgerTrialBalanceDetailReportUIBuilder, lookupFormatMapping), this);
        formatMapping.fieldControl().mandatory(true);

        DialogField transactionType = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(LedgerTrialBalanceDetailERContract, parmShowTransactions));
        transactionType.registerOverrideMethod(methodStr(FormRadioControl, selectionChange), methodStr(LedgerTrialBalanceDetailReportUIBuilder, transactionTypeSelectionChange), this);

        this.refreshPendingTypeControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFormatMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup form for the electronic report format configuration.
    /// </summary>
    /// <param name="_referenceGroupControl">
    /// The control to open the lookup form.
    /// </param>
    private void lookupFormatMapping(FormReferenceControl _referenceGroupControl)
    {
        const str ERTrialBalanceModel = 'ERTrialBalance';
        const str ERTrialBalanceDataContainer = 'ReportData';

        ERObjectsFactory::createFormatMappingTableLookupForControlAndModel(
            _referenceGroupControl, 
            ERTrialBalanceModel,
            ERTrialBalanceDataContainer).performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionSet</Name>
				<Source><![CDATA[
    private void lookupDimensionSet(FormStringControl _dimensionSet)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(DimensionAttribute), _dimensionSet, true);
        sysTableLookup.addLookupfield(fieldnum(DimensionAttribute, Name));

        Query query = new Query();
        QueryBuildDataSource dimAttributeBuildDataSource = query.addDataSource(tablenum(DimensionAttribute));
        dimAttributeBuildDataSource.addRange(fieldnum(DimensionAttribute, Type)).value(SysQuery::valueNot(DimensionAttributeType::DynamicAccount));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionSetLookup</Name>
				<Source><![CDATA[
    private void dimensionSetLookup(FormStringControl _dimensionSetDialogControl)
    {
        DimensionHierarchyHelper::lookupDimensionSet(_dimensionSetDialogControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionSetModified</Name>
				<Source><![CDATA[
    private boolean dimensionSetModified(FormStringControl _control)
    {
        return _control.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionTypeSelectionChange</Name>
				<Source><![CDATA[
    private void transactionTypeSelectionChange(FormRadioControl _transactionType)
    {
        DialogField dialogFieldPostingLayer = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmPostingLayer));
        FormComboBoxControl ctlPostingLayer = dialogFieldPostingLayer.fieldControl();

        if (_transactionType.valueStr() == enum2Str(LedgerTrialBalanceShowTransactionStates::Unposted))
        {
            ctlPostingLayer.selection(0);
            ctlPostingLayer.enabled(false);
        }
        else
        {
            ctlPostingLayer.enabled(true);
        }

        this.refreshPendingTypeSelection(_transactionType.valueStr() != enum2Str(LedgerTrialBalanceShowTransactionStates::Posted));
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshPendingTypeControls</Name>
				<Source><![CDATA[
    private void refreshPendingTypeControls()
    {
        DialogField dialogFieldTransactionType = this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmShowTransactions));
        FormRadioControl transactionType = dialogFieldTransactionType.fieldControl();
        boolean includePendingTransaction = transactionType.valueStr() != enum2Str(LedgerTrialBalanceShowTransactionStates::Posted);

        if (includePendingTransaction)
        {
            if (!this.hasLastValueToKeep())
            {
                this.refreshPendingTypeSelection(true);
            }
        }
        else
        {
            this.refreshPendingTypeSelection(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshPendingTypeSelection</Name>
				<Source><![CDATA[
    private void refreshPendingTypeSelection(boolean _selected)
    {
        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingPurchaseOrder)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingPurchReq)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingAdvancedLedgerEntry)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingBudgetRegisterEntry)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingFreeTextInvoice)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingVendorInvoice)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingProjInvoice)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingPayment)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingCustPay)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingVendorInvoiceJournal)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingVendorInvoiceRegister)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingDaily)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingBudget)), _selected);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingAllocation)), _selected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPendingTypeControlValue</Name>
				<Source><![CDATA[
    private void setPendingTypeControlValue(DialogField _dialogFieldPendingType, boolean _selected, boolean _isVisiable = true)
    {
        FormCheckBoxControl checkBoxControl = _dialogFieldPendingType.fieldControl();

        checkBoxControl.enabled(_selected);
        checkBoxControl.visible(_isVisiable);
        checkBoxControl.value(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hidePendingTypeSelection</Name>
				<Source><![CDATA[
    private void hidePendingTypeSelection()
    {
        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingPurchaseOrder)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingPurchReq)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingAdvancedLedgerEntry)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingBudgetRegisterEntry)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingFreeTextInvoice)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingVendorInvoice)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingProjInvoice)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingPayment)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingCustPay)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingVendorInvoiceJournal)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingVendorInvoiceRegister)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingDaily)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingBudget)), false, false);

        this.setPendingTypeControlValue(this.bindInfo().getDialogField(this.dataContractObject(), methodstr(LedgerTrialBalanceDetailERContract, parmIncludePendingAllocation)), false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLastValueToKeep</Name>
				<Source><![CDATA[
    private boolean hasLastValueToKeep()
    {
        SysLastValue lastValue;
        select firstonly RecId from lastValue
            where lastValue.elementName == querystr(LedgerTrialBalanceDetail);

        return lastValue.RecId > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>