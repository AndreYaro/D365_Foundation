<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCheqPrepCancelJourLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCheqPrepCancelJourLineType</c> abstract class prepares a <c>LedgerJournalTrans</c> record with the values necessary to
/// cancel a cheque based on the recipient type of the cheque.
/// </summary>
abstract class BankCheqPrepCancelJourLineType
{
    CustVendTrans       custVendPaymTrans;
    BankChequeTable     bankChequeToCancel;
    BankAccountTrans    bankAccountTransToCancel;
    RefRecId            numberSequenceTableID;
    LedgerJournalId     journalNum;
    LedgerJournalType   journalType;
    Voucher             paymVoucher;
    ReasonComment       cancelReasonComment;
    TransDate           transDate;
    ReasonRefRecID      reasonTableRefRecID;
    boolean             reconcile;
    boolean             isWithholdingTaxMarked;
    LedgerJournalTrans	ledgerJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCancellingJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>LedgerJournalTrans</c> record with values necessary to cancel the current cheque.
    /// </summary>
    /// <returns>
    /// A populated <c>LedgerJournalTrans</c> record.
    /// </returns>
    public LedgerJournalTrans createCancellingJournalLine()
    {
        boolean				isChineseVoucher = LedgerParameters::isChineseVoucher_CN();

        NumberSeq           numSeq;
        Voucher             voucher;

        numSeq = NumberSeq::newGetVoucherFromId(numberSequenceTableID);
        voucher = numSeq.voucher();

        ledgerJournalTrans                    = this.setRecipientTypeSpecificJournalValues(ledgerJournalTrans);

        ledgerJournalTrans.JournalNum          = journalNum;
        ledgerJournalTrans.Voucher             = voucher;
        ledgerJournalTrans.Txt                 = strfmt('%1: %2, %3',"@SYS1068", paymVoucher, cancelReasonComment);
        ledgerJournalTrans.AcknowledgementDate = bankAccountTransToCancel.AcknowledgementDate;
        ledgerJournalTrans.TransDate           = transDate;
        ledgerJournalTrans.BankChequeNum       = bankChequeToCancel.ChequeNum;
        ledgerJournalTrans.BankTransType       = BankParameters::find().nsfTransactionType;
        ledgerJournalTrans.ReasonRefRecID      = ReasonTableRef::checkCreateInCompany(reasonTableRefRecID, bankAccountTransToCancel.DataAreaId);

        ledgerJournalTrans.AmountCurCredit     = this.getAmountCurCredit();

        ledgerJournalTrans.SettleVoucher       = SettlementType::None;

        ledgerJournalTrans.BankChequeDepositTransRefRecID = custVendPaymTrans.RecId;

        if (LedgerParameters::find().TransactionReversalCorrection)
        {
            ledgerJournalTrans.AmountCurCredit = 0;
            ledgerJournalTrans.AmountCurDebit  = -this.getAmountCur();
        }

        ledgerJournalTrans.LineNum = 0;
        ledgerJournalTrans.parmOffsetAccount(bankChequeToCancel.AccountID, LedgerJournalACType::Bank, bankAccountTransToCancel.company());
        ledgerJournalTrans.OffsetTxt                    = ledgerJournalTrans.Txt;
        ledgerJournalTrans.BankReconcileAccountAtPost   = reconcile;
        ledgerJournalTrans.OffsetDefaultDimension       = bankAccountTransToCancel.DefaultDimension;

        if(isChineseVoucher && !ledgerJournalTrans.LedgerVoucherType_CN)
        {
            ledgerJournalTrans.createVoucherType_CN();
        }

        ledgerJournalTrans.PostingProfile     = custVendPaymTrans.PostingProfile;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current amount of the cheque.
    /// </summary>
    /// <returns>
    /// The current amount of the record.
    /// </returns>
    abstract protected AmountCur getAmountCur()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current amount of the cheque.
    /// </summary>
    /// <returns>
    /// The current amount of the record.
    /// </returns>
    abstract protected AmountCur getAmountCurCredit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal class variables.
    /// </summary>
    /// <param name="_numberSequenceTableID">
    /// The reference to the <c>NumberSequenceTable</c> to generate the new voucher from.
    /// </param>
    /// <param name="_journalNum">
    /// The journal number of the journal entry.
    /// </param>
    /// <param name="_journalType">
    /// The journal type of the journal entry.
    /// </param>
    /// <param name="_paymVoucher">
    /// The voucher number for the journal entry.
    /// </param>
    /// <param name="_cancelReasonComment">
    /// The <c>ReasonComment</c> value for the journal entry.
    /// </param>
    /// <param name="_transDate">
    /// The date of the journal entry.
    /// </param>
    /// <param name="_reasonTableRefRecID">
    /// The reference to the <c>ReasonTableRef</c> for the journal entry.
    /// </param>
    /// <param name="_reconcile">
    /// A Boolean variable used to indicate whether the check must be reconciled at posting.
    /// </param>
    protected void init(
        RefRecId            _numberSequenceTableID,
        LedgerJournalId     _journalNum,
        LedgerJournalType   _journalType,
        Voucher             _paymVoucher,
        ReasonComment       _cancelReasonComment,
        TransDate           _transDate,
        ReasonRefRecID      _reasonTableRefRecID,
        boolean             _reconcile)

    {
        numberSequenceTableID   = _numberSequenceTableID;
        journalNum              = _journalNum;
        journalType             = _journalType;
        paymVoucher             = _paymVoucher;
        cancelReasonComment     = _cancelReasonComment;
        transDate               = _transDate;
        reasonTableRefRecID     = _reasonTableRefRecID;
        reconcile               = _reconcile;
        isWithholdingTaxMarked  = TaxWithholdParameters_IN::checkTaxParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChequeRecipientTypeClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields on the subclass defined by the recipient type.
    /// </summary>
    /// <param name="_common">
    /// A record buffer that contains information about the source of the cheque.
    /// </param>
    /// <param name="_bankChequeRecipientType">
    /// The recipient type that generated the cheque.
    /// </param>
    /// <param name="_bankAccountTrans">
    /// The <c>BankAccountTrans</c> buffer containing the cheque information.
    /// </param>
    /// <param name="_bankChequeTable">
    /// The <c>BankChequeTable</c> buffer containing the cheque information.
    /// </param>
    abstract protected void initChequeRecipientTypeClass(Common _common, BankChequeRecipientType _bankChequeRecipientType, BankAccountTrans _bankAccountTrans, BankChequeTable _bankChequeTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecipientTypeSpecificJournalValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>LedgerJournalTrans</c> buffer with values based on the recipient type.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> buffer to populate.
    /// </param>
    /// <returns>
    /// The <c>LedgerJournalTrans</c> buffer populated with the recipient based values.
    /// </returns>
    abstract protected LedgerJournalTrans setRecipientTypeSpecificJournalValues(LedgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>BankCheqPrepCancelJourLineType</c> class.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> record for the cheque being cancelled.
    /// </param>
    /// <param name="_bankChequeToCancel">
    /// The <c>BankChequeTable</c> record being cancelled.
    /// </param>
    /// <param name="_bankAccountTansToCancel">
    /// The <c>BankAccountTrans</c> record for the cheque being cancelled.
    /// </param>
    /// <param name="_numberSequenceTableID">
    /// The reference to the <c>NumberSequenceTable</c> to generate the new voucher from.
    /// </param>
    /// <param name="_journalNum">
    /// The journal number of the journal entry.
    /// </param>
    /// <param name="_journalType">
    /// The journal type of the journal entry.
    /// </param>
    /// <param name="_paymVoucher">
    /// The voucher number for the journal entry.
    /// </param>
    /// <param name="_cancelReasonComment">
    /// The <c>ReasonComment</c> value for the journal entry.
    /// </param>
    /// <param name="_transDate">
    /// The date of the journal entry.
    /// </param>
    /// <param name="_reasonTableRefRecID">
    /// The reference to the <c>ReasonTableRef</c> for the journal entry.
    /// </param>
    /// <param name="_reconcile">
    /// A Boolean variable used to indicate whether the check must be reconciled at posting.
    /// </param>
    /// <returns>
    /// A new instance of the <c>BankCheqPrepCancelJourLineType</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error that the method was called with an invalid cheque.
    /// </exception>
    public static BankCheqPrepCancelJourLineType construct(CustVendTrans _custVendTrans,
        BankChequeTable _bankChequeToCancel,
        BankAccountTrans _bankAccountTansToCancel,
        RefRecId _numberSequenceTableID,
        LedgerJournalId _journalNum,
        LedgerJournalType _journalType,
        Voucher _paymVoucher,
        ReasonComment _cancelReasonComment,
        TransDate _transDate,
        ReasonRefRecID _reasonTableRefRecID,
        boolean _reconcile)
    {
        BankCheqPrepCancelJourLineType    bankCheqPrepCancelJourLineType;

        switch (_bankChequeToCancel.RecipientType)
        {
            case BankChequeRecipientType::Cust,
                BankChequeRecipientType::Vend:
                bankCheqPrepCancelJourLineType = new BankCheqPrepCancelJourLineType_CustVend();
                bankCheqPrepCancelJourLineType.initChequeRecipientTypeClass(_custVendTrans, _bankChequeToCancel.RecipientType, _bankAccountTansToCancel, _bankChequeToCancel);
                break;

            case BankChequeRecipientType::Ledger:
                bankCheqPrepCancelJourLineType = new BankCheqPrepCancelJourLineType_Ledger();
                bankCheqPrepCancelJourLineType.initChequeRecipientTypeClass(_bankChequeToCancel, _bankChequeToCancel.RecipientType, _bankAccountTansToCancel, _bankChequeToCancel);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        bankCheqPrepCancelJourLineType.init( _numberSequenceTableID,
            _journalNum,
            _journalType,
            _paymVoucher,
            _cancelReasonComment,
            _transDate,
            _reasonTableRefRecID,
            _reconcile);

        return bankCheqPrepCancelJourLineType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>