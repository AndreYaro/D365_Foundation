<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgJobBundleFeedback</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Retrieves feedback about the jobs the user is currently working on.
/// </summary>
/// <remarks>
///    Run this class by using the <c>JmgJobBundleFeedback::main</c> method. A feedback form is shown, based on a <c>JmgJobBundle</c> object, which the active jobs are retrieved from. The feedback given by
///    the user is stored in the <c>JmgJobBundle</c> object. Whether the user canceled the feedback form is stored in the <c>Args</c> object, which is supplied to the <c>main</c> method.
/// </remarks>
class JmgJobBundleFeedback
{
    JmgJobBundle jmgJobBundle;
    private boolean runCancelled;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bundleHasAtLeastOneBatchOrderJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the bundle has at least one job for batch order.
    /// </summary>
    /// <returns>
    /// true if bundle contains batch order jobs; otherwise, false.
    /// </returns>
    protected boolean bundleHasAtLeastOneBatchOrderJob()
    {
        MapIterator iterator = jmgJobBundle.getActiveJobsIterator();
        JmgTermJob job;

        iterator.begin();
        while (iterator.more())
        {
            job = iterator.value();
            if (job.pmfIsBatchOrderJob())
            {
                return true;
            }

            iterator.next();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReportAsFinishedParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the report as finished dialog to let the user edit before it saves.
    /// </summary>
    /// <returns>
    /// false if the user canceled the dialog; otherwise, true.
    /// </returns>
    protected boolean editReportAsFinishedParameters()
    {
        JmgProdMultiReportFinished prodMultiReportFinished = jmgJobBundle.prodMultiReportFinished();
        boolean ok = true;

        if (prodMultiReportFinished && prodMultiReportFinished.hasQty())
        {
            ok = prodMultiReportFinished.prompt();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <see cref="T:JmgJobBundleFeedback" />.
    /// </summary>
    /// <param name="_jmgJobBundle">
    ///    The job bundle that contains the jobs that feedback should be given on.
    /// </param>
    /// <remarks>
    ///    The <c>JmgJobBundleFeedback</c> class should not be instantiated directly. Instead, use the <see
    ///    cref="M:JmgJobBundleFeedback::main" /> to run the class.
    /// </remarks>
    public void new(JmgJobBundle _jmgJobBundle)
    {
        jmgJobBundle = _jmgJobBundle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the relevant feedback form that is based on the bundle type.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> object, where the user response is saved.
    /// </param>
    /// <remarks>
    ///  The <paramref name="_args"/> parameter's <c>parmEnum</c> method is updated as follows:
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    Set to <c>NoYes::Yes</c> if the user cancels the feedback form.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Set to <c>NoYes::No</c> otherwise.
    ///    </description>
    ///   </item>
    ///  </list>
    ///  The <c>run</c> method should not be invoked directly. Instead, use the <see cref="M:JmgJobBundleFeedback::main"/>
    ///  to run the class.
    /// </remarks>
    public void run(Args _args)
    {
        FormRun parentForm = _args.caller();

        this.runPre(parentForm, _args);

        if (this.parmRunCancelled())
        {
            return;
        }

        switch (jmgJobBundle.feedbackBundleType())
        {
            case JmgJobBundleType::Prod:
                // Prompt user for feedback
                this.setMenuItemBasedOnParentForm(parentForm, _args);

                FormRun formRun = classFactory.formRunClass(_args);
                formRun.run();
                formRun.wait();
                break;
            default:
                _args.parmEnum(NoYes::No);
                break;
        }

        this.runPost(parentForm, _args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the runPre method determines if the reporting process should be cancelled or not.
    /// </summary>
    /// <param name = "_runCancelled"> A boolean value. </param>
    /// <returns>true if process was cancelled; otherwise false. </returns>
    [Hookable(false)]
    protected boolean parmRunCancelled(boolean _runCancelled = runCancelled)
    {
        runCancelled = _runCancelled;
        return runCancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs code before opening the reporting progress / scrap form.
    /// </summary>
    /// <param name="_parentForm">
    /// An <c>FormRun</c> object that is calling this code.
    /// </param>
    /// <param name="_args">
    /// An <c>Args</c> object, where the user response is saved.
    /// </param>
    protected void runPre(FormRun _parentForm, Args _args)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs code after closing the reporting progress / scrap form.
    /// </summary>
    /// <param name="_parentForm">
    /// An <c>FormRun</c> object that is calling this code.
    /// </param>
    /// <param name="_args">
    /// An <c>Args</c> object, where the user response is saved.
    /// </param>
    protected void runPost(FormRun _parentForm, Args _args)
    {
        if (!_parentForm || _parentForm.name() == formstr(JmgRegistration) || _parentForm.name() == formstr(JmgRegistrationTouch))
        {
            if (#pmfEnabled && this.bundleHasAtLeastOneBatchOrderJob())
            {
                if (!this.editReportAsFinishedParameters())
                {
                    // Cancelled
                    _args.parmEnum(NoYes::Yes);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgJobBundleFeedback    jobBundleFeedback;
        if (!_args || !SysDictClass::isEqualOrSuperclass(classidget(_args.parmObject()), classnum(JmgJobBundle)))
        {
            throw error(strfmt("@SYS22533", classstr(JmgJobBundleFeedback), classstr(JmgJobBundle)));
        }

        jobBundleFeedback = JmgJobBundleFeedback::construct(_args.parmObject());
        jobBundleFeedback.run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes a new instance of the <c>JmgJobBundleFeedback</c> class.
    /// </summary>
    /// <param name="_jmgJobBundle">
    ///    The job bundle that contains the jobs that feedback should be given on.
    /// </param>
    /// <returns>A new instance of the <c>JmgJobBundleFeedback</c> class.</returns>
    public static JmgJobBundleFeedback construct(JmgJobBundle _jmgJobBundle)
    {
        return new JmgJobBundleFeedback(_jmgJobBundle);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMenuItemBasedOnParentForm</Name>
				<Source><![CDATA[
    protected void setMenuItemBasedOnParentForm(FormRun _parentForm, Args _args)
    {
        _args.menuItemType(MenuItemType::Display);
        switch (_parentForm.name())
        {
            case formstr(JmgRegistrationTouch):
                _args.name(formStr(JmgRegistrationTouchReportProgress));
                _args.menuItemName(menuItemDisplayStr(JmgRegistrationTouchReportProgress));
                break;
            case formstr(JmgRegistration):
                _args.name(formStr(JmgJobBundleProdFeedback));
                _args.menuItemName(menuItemDisplayStr(JmgJobBundleProdFeedback));
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>