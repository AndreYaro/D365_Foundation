<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPackingSlipNonSSRSPrintMgmtAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchPackingSlipNonSSRSPrintMgmtAdapter</c> class is an adapter for print management for
/// purchase packing slip of non SSRS reports.
/// </summary>
[NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::PurchaseOrderPackingSlip)]
class PurchPackingSlipNonSSRSPrintMgmtAdapter extends FormLetterNonSSRSPrintMgmtAdapter
{
    PurchPackingSlipJournalPrint        purchPackingSlipJournalPrint;
    RecordSortedList                    journalList;
    VendPackingSlipVersion              vendPackingSlipVersion;
    VendPackingSlipJour                 vendPackingSlipJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertToLatestVersionJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a <c>RecordSortedList</c> object of journals to the latest version.
    /// </summary>
    /// <param name="_sourceJournalList">
    /// The journals to convert.
    /// </param>
    /// <param name="_sourceTableId">
    /// The table ID of the records in the list.
    /// </param>
    /// <param name="_journalFieldId">
    /// The field ID of the foreign key reference to the <c>VendPackingSlipJour</c> object.
    /// </param>
    /// <returns>
    /// A <c>RecordSortedList</c> list of the <c>VendPackingSlipVersion</c> records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RecordSortedList convertToLatestVersionJournalList( RecordSortedList _sourceJournalList,
                                                                  TableId _sourceTableId,
                                                                  FieldId _journalFieldId)
    {
        Common              common  = SysDictTable::newTableId(_sourceTableId).makeRecord();
        RecordSortedList    ret;

        if (_sourceJournalList && _sourceJournalList.first(common))
        {
            ret     = new RecordSortedList(tableNum(VendPackingSlipVersion));
            ret.sortOrder(fieldNum(VendPackingSlipVersion, RecId));
            do
            {
                ret.ins(VendPackingSlipVersion::findLatest(common.(_journalFieldId)));
            }
            while (_sourceJournalList.next(common));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
        protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchPackingSlipJournalPrint))
        {
            purchPackingSlipJournalPrint     = this.parmArgs().caller();
        }

        this.initializeJournalLists(this.parmArgs());

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::PurchaseOrderPackingSlip);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (purchPackingSlipJournalPrint)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(purchPackingSlipJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(purchPackingSlipJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(purchPackingSlipJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal list that is used to print the reports based on the arguments to the report.
    /// </summary>
    /// <param name="_args">
    /// A <c>Args</c> object.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An invalid record was parsed as an argument.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initializeJournalLists(Args _args)
    {
        RecordSortedList    argJourList;
        PrintoutTable_RU    printoutTable;
        Common              common;

        if (_args.record())
        {
            if (_args.dataset() == tableNum(PrintoutTable_RU))
            {
                printoutTable = _args.record();
                common = VendPackingSlipVersion::find(printoutTable.VendPackingSlipVersion);
            }
            else
            {
                common = _args.record();
            }
            argJourList = FormLetter::createJournalListCopy(common);

            switch (common.TableId)
            {
                case tableNum(VendPackingSlipVersion):
                    journalList = argJourList;
                    break;
                case tableNum(VendPackingSlipJour):
                    journalList = this.convertToLatestVersionJournalList(
                        argJourList,
                        tableNum(VendPackingSlipJour),
                        fieldNum(VendPackingSlipJour, RecId));
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            journalList = this.convertToLatestVersionJournalList(
                _args.object(),
                tableNum(VendPackingSlipJour),
                fieldNum(VendPackingSlipJour, RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(vendPackingSlipVersion);

        do
        {
            if (!vendPackingSlipVersion)
            {
                throw error("@SYS26348");
            }

            vendPackingSlipJour = VendPackingSlipJour::findRecId(vendPackingSlipVersion.VendPackingSlipJour);
            formLetterReport.parmSSRS(PrintMgmtSSRS::NonSSRS);
            formLetterReport.loadPrintSettings(vendPackingSlipJour, PurchTable::find(vendPackingSlipJour.PurchId), vendPackingSlipJour.LanguageId);
            this.outputReports();
        }
        while (journalList.next(vendPackingSlipVersion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the internal record ID.
    /// </summary>
    protected void setRecordId()
    {
        recordId = vendPackingSlipJour.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>