<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationActionCollectionLetter</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>CustAutomationActionCollectionLetter</c> class is the implementation of collection letter creation for customer automations.
/// </summary>
[ExportMetadataAttribute(enumstr(CustAutomationActionType), CustAutomationActionType::CollectionLetter)]
[ExportAttribute(identifierstr(Dynamics.AX.Application.CustAutomationIAction))]
public class CustAutomationActionCollectionLetter implements CustAutomationIAction
{
    private CustCollectionLetterCode collectionLetterCodeToPost;
    private smmActivityTypeId typeId = "@CustAutomation:ActivityLetterTypeGroup";
    private smmActivityPurpose purpose = "@CustAutomation:ActivityLetterPurpose";
    private smmActivityUserMemo userMemo;
    private date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    private CustAutomationParameters custAutomationParameters = CustAutomationParameters::find();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void executeAction(CustAutomationContract _contract)
    {
        CustAutomationInvoice invoice = _contract.parmCustAutomationInvoice();

        if (custAutomationParameters.EnableCollectionProcessAutomationStepTrack)
        {
            _contract.parmCustCollectionLetterCreated(this.createCollectionLetter(invoice.AccountNum));
        }
        else
        {
            this.createCollectionLetter(invoice.AccountNum);
        }

        if (custAutomationParameters.PostCollectionLetters)
        {
            this.postCollectionLetter(invoice.AccountNum);
        }

        if (_contract.parmCreateActivitiesForAutomations())
        {
            this.createActivity(_contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCollectionLetter</Name>
				<Source><![CDATA[
    protected NoYes createCollectionLetter(AccountNum _accountNum)
    {
        Set customerSet = new Set(Types::String);
        customerSet.add(_accountNum);

        CustCollectionLetterCreate collectionLetter = CustCollectionLetterCreate::constructWithCustomerAccountFilter(customerSet);
        collectionLetter.parmCollectionLetterCode(CustCollectionLetterCode::CollectionPerCust);
        collectionLetter.parmIncludeInvoices(NoYes::Yes);
        collectionLetter.parmInBatch(NoYes::No);
        collectionLetter.parmCollectionLetterDate(currentDate);
        collectionLetter.run();

        this.setCollectionLetterActivityUserMemo(collectionLetter);

        return collectionLetter.parmCollectionLetterCreated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCollectionLetterActivityUserMemo</Name>
				<Source><![CDATA[
    private void setCollectionLetterActivityUserMemo(CustCollectionLetterCreate _collectionLetter)
    {
        if (_collectionLetter.parmCollectionLetterCreated())
        {
            this.parmUserMemo("@CustAutomation:CollectionLetterCreated");
        }
        else
        {
            this.parmUserMemo("@AccountsReceivable:CollectionLettersNotCreated");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCollectionLetter</Name>
				<Source><![CDATA[
    private void postCollectionLetter(AccountNum _accountNum)
    {        
        CustCollectionLetterPost post = new CustCollectionLetterPost();
        QueryBuildDataSource ds = SysQuery::findOrCreateDataSource(post.queryRun().query(), tableNum(CustCollectionLetterJour));
        CustCollectionLetterJour collectionLetterJour = CustCollectionLetterJour::findCreated(_accountNum);

        SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, AccountNum)).value(queryValue(collectionLetterJour.AccountNum));
        SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, CollectionLetterNum)).value(queryValue(collectionLetterJour.CollectionLetterNum));
        SysQuery::findOrCreateRange(ds, fieldNum(CustCollectionLetterJour, Status)).value(queryValue(collectionLetterJour.Status));
        
        post.parmPostingDate(currentDate);
   
        post.runOperation();

        this.parmUserMemo(strFmt("@CustAutomation:ActivityLetterMemo", collectionLetterJour.CollectionLetterNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivity</Name>
				<Source><![CDATA[
    private void createActivity(CustAutomationContract _contract)
    {
        CustAutomationActivityCreation activityCreation = CustAutomationActivityCreation::newForActivity(this.parmPurpose(), this.parmTypeId(), this.parmUserMemo());
        activityCreation.createActivity(_contract.parmCustAutomationInvoice().AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserMemo</Name>
				<Source><![CDATA[
    private smmActivityUserMemo parmUserMemo(smmActivityUserMemo _userMemo = userMemo)
    {
        userMemo = _userMemo;
        return userMemo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurpose</Name>
				<Source><![CDATA[
    private smmActivityPurpose parmPurpose(smmActivityPurpose _purpose = purpose)
    {
        purpose = _purpose;
        return purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeId</Name>
				<Source><![CDATA[
    private smmActivityTypeId parmTypeId(smmActivityTypeId _typeId = typeId)
    {
        typeId = _typeId;
        return typeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustCollectionLetterCode</Name>
				<Source><![CDATA[
    private CustCollectionLetterCode parmCustCollectionLetterCode(CustCollectionLetterCode _collectionLetterCodeToPost = collectionLetterCodeToPost)
    {
        collectionLetterCodeToPost = _collectionLetterCodeToPost;
        return collectionLetterCodeToPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ProcessExecutionSourceLinkMessage errorMessage(AccountNum _accountNum)
    {
        return strFmt("@CustAutomation:ActionTypeCollectionLetterError", _accountNum);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>