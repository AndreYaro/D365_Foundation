<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemPackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemPackingSlip extends ProjPost
{
    CustPackingSlipTrans    custPackingSlipTrans;
    ProjItemTrans           projItemTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount ret;
        SalesLine salesLineLocal = custPackingSlipTrans.salesLine();
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                // Fetch the correct account type for a non-project posting type, non-stocked item,
                // and item requirement related scenario.
                if (this.isItemReqNonStockItemSalesLine())
                {
                    ret = InventPosting::accountItemLedgerDimensionFromParameters(
                        InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(salesLineLocal,
                        InventoryMainAccDimensionListProvider::ledgerPostingType2InventAccountType(LedgerPostingType::PurchExpense),
                        InventTable::find(salesLineLocal.ItemId).itemGroupId()));
                        
                }
                else
                {
                    ret = projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);
                }
                break;
            case ProjLedgerStatus::Operations:
                // Fetch ledger account of purchase expenditure for expense from inventory posting setup
                // when posting project item requirement packing slip or purchase order item consumption for non-stocked item.
                if (this.checkProjLedgerStatusOperations())
                {
                    ret = InventPosting::accountItemLedgerDimensionFromParameters(
                        InventPostingAccountItemLedgerDimensionParameters::newFromSalesLine(salesLineLocal,
                        InventoryMainAccDimensionListProvider::ledgerPostingType2InventAccountType(LedgerPostingType::PurchExpense),
                        InventTable::find(salesLineLocal.ItemId).itemGroupId()));
                }
                break;
            default:
                if (ProjPostItemPackingSlip::shouldThrowInvalidCostLedgerStatusErrorForItems(this.parmLedgerStatusCost()))
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount ret;
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                ret = projTrans.statusAccountItemLedgerDimension(_fundingSourceId);
                break;
            case ProjLedgerStatus::Operations:
                if (this.checkProjLedgerStatusOperations())
                {
                    ret = projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);
                }
                break;
            default:
                if (ProjPostItemPackingSlip::shouldThrowInvalidCostLedgerStatusErrorForItems(this.parmLedgerStatusCost()))
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the reference transaction ID that is associated with the project transaction.
    /// </summary>
    /// <returns>
    /// The reference transaction ID.
    /// </returns>
    protected ProjTransIdBase getRefTransId()
    {
        return projItemTrans.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemTrans</Name>
				<Source><![CDATA[
    public ProjItemTrans initItemTrans()
    {
        return ProjItemTrans::initTransFromPackingSlip(custPackingSlipTrans,ledgerVoucher.lastTransDate(),salesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemTransSale</Name>
				<Source><![CDATA[
    public ProjItemTransSale initItemTransSale()
    {
        return ProjItemTransSale::initTransFromPackingSlip(projItemTrans, custPackingSlipTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        if (_buffer.TableId == tableNum(CustPackingSlipTrans))
        {
            custPackingSlipTrans    = _buffer;
            projTrans               = ProjTrans::newCustPackingSlipTrans(custPackingSlipTrans);
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTrans</Name>
				<Source><![CDATA[
    public Common newTrans()
    {
        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        LedgerPostingType ret;
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                ret = LedgerPostingType::ProjStatusAccountItem;
                break;
            case ProjLedgerStatus::Operations:
                if (this.checkProjLedgerStatusOperations())
                {
                    ret = LedgerPostingType::ProjOffsetAccountItem;
                }
                break;
            default:
                if (ProjPostItemPackingSlip::shouldThrowInvalidCostLedgerStatusErrorForItems(this.parmLedgerStatusCost()))
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for the project offset cost posting based on the current ledger status
    /// of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        LedgerPostingType ret;
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                // Set posting type to Purchase expenditure for a non-stocked scenario when created from an item requirement.
                if (this.isItemReqNonStockItemSalesLine())
                {
                    ret = LedgerPostingType::PurchExpense;
                }
                else
                {
                    ret = LedgerPostingType::ProjOffsetAccountItem;
                }
                break;
            case ProjLedgerStatus::Operations:
                if (this.checkProjLedgerStatusOperations())
                {
                    ret = LedgerPostingType::PurchExpense;
                }
                break;
            default:
                if (ProjPostItemPackingSlip::shouldThrowInvalidCostLedgerStatusErrorForItems(this.parmLedgerStatusCost()))
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemReqNonStockItemSalesLine</Name>
				<Source><![CDATA[
    private boolean isItemReqNonStockItemSalesLine()
    {
        if (custPackingSlipTrans)
        {
            SalesLine salesLineLocal = custPackingSlipTrans.salesLine();
            if (salesLineLocal && salesLineLocal.SalesType == SalesType::ItemReq && !salesLineLocal.isStocked())
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    public void projTransCreate()
    {
        // <GEEPL>
        SalesLine               salesLineLocal;
        // </GEEPL>

        projItemTrans.clear();

        projTrans.parmProjAdjustRefId(this.parmAdjustRefId());

        projItemTrans                    = this.initItemTrans();
        projItemTrans.VoucherPackingSlip = ledgerVoucher.lastVoucher();
        projItemTrans.ProjAdjustRefId    = this.parmAdjustRefId();

        if (this.parmAdjustment())
        {
            projItemTrans.AdjRefTransId = this.parmAdjRefTransId();
        }

        if (! projItemTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        // <GEEU>
        if (LedgerParameters::isStornoEnabledEE())
        {
            projItemTrans.IsCorrection          = this.isTransCorrection();
        }
        // </GEEU>
        projItemTrans.insert();

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            salesLineLocal = custPackingSlipTrans.salesLine();
            TransTaxInformationHelper::copyTransTaxInformation(salesLineLocal, projItemTrans);
        }
        // </GTE>

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            salesLineLocal = custPackingSlipTrans.salesLine();
            TaxServiceTariff::insertTaxServiceTariffForNewParent(salesLineLocal.TableId, salesLineLocal.RecId, projItemTrans.TableId, projItemTrans.RecId);
        }
        // </GEEPL>

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            projItemTrans.VendInvoiceTransRecId = this.getVendInvoiceTrans(projItemTrans).RecId;
            
            if (FeatureStateProvider::isFeatureEnabled(ProjProjectTransactionsListPageVendFeature::instance()))
            {
                ProjVendInvoiceVendorInfo vendorInfo = ProjVendInvoiceVendorInfo::newFromVendorInvoiceTransRecId(projItemTrans.VendInvoiceTransRecId);

                if(EnableVendorDetailInPostedTxnFlight::instance().isEnabled() && !projItemTrans.VendInvoiceTransRecId)
                {
                    vendorInfo = ProjVendInvoiceVendorInfo::newFromProductReceipt(projItemTrans.InventTransId);
                }

                projItemTrans.VendorAccount = vendorInfo.getVendorAccount();
                projItemTrans.VendorName = vendorInfo.getVendorName();
            }

            projItemTrans.update();
        }

        if (this.parmLedgerOrigin() != ProjOrigin::Adjustment)
        {
            if (projTrans.qty() != 0)
            {
                salesLineLocal = custPackingSlipTrans.salesLine();

                if (ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
                {
                    // Use funding engine to use the correct funding source for the allocation
                    ProjFundingSourceRefId projFundingSourceId = ProjPost::projFundingSourceRefIdForSalesLine(salesLineLocal);
                    if (projFundingSourceId)
                    {
                        this.createCostSalesDistributionsForSingleFS(projFundingSourceId, projTrans.transCost(), projTrans.transTurnover());
                    }
                    else
                    {
                        // For project without contract, there will be no funding source.
                        this.createCostSalesDistributions(projTrans.transCost(), projTrans.transTurnover());
                    }
                }
                else
                {
                    this.createCostSalesDistributions(projTrans.transCost(), projTrans.transTurnover());
                }

                if (allocationError == NoYes::No)
                {
                    // Only trans sale records are created here because trans cost records will be created later at the time of ledger voucher end in ProjLedgerUpdate.insert().
                    MapEnumerator saleMapEnumerator = new MapEnumerator(saleDistributions);
                    while (saleMapEnumerator.moveNext())
                    {
                        //Create ProjItemTransSale record
                        ProjItemTransSale projItemTransSale = this.initializeProjItemTransSale(saleMapEnumerator.currentKey(), saleMapEnumerator.currentValue());
                        projItemTransSale.insert();
                    }

                    if (salesLineLocal && salesLineLocal.SalesType == SalesType::ItemReq && !salesLineLocal.isStocked())
                    {
                        MapEnumerator costMapEnumerator = new MapEnumerator(costDistributions);
                        while (costMapEnumerator.moveNext())
                        {
                            //Create ProjItemTransCost record
                            ProjItemTransCost projItemTransCost = this.initializeProjItemTransCost(costMapEnumerator.currentKey(), costMapEnumerator.currentValue());
                            projItemTransCost.insert();
                        }
                    }
                }
            }
            ProjPost::postItemReverseTransaction(this);
        }

        Docu::copy(custPackingSlipTrans,projItemTrans);

        if (this.parmCostUseOrig())
        {
            this.parmTransIdCost(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdCost(projItemTrans.ProjTransId);
        }

        if (this.parmsalesUseOrig())
        {
            this.parmTransIdSales(this.parmTransIdOrig());
        }
        else
        {
            this.parmTransIdSales(projItemTrans.ProjTransId);
        }
        
        // Execute the logic only if sales line contain stocked product.
        // For stocked product, cost record is created in <c>ProjLedgerUpdate</c> class <c>insertProjItemTransCost</c> method.
        if (salesLineLocal.isStocked() && ProjPost::checkCreateProjCost(projItemTrans.ItemId,projItemTrans.ProjId))
        {
            this.updateProjItemTransCost(projItemTrans, ledgerVoucher.lastVoucher());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjItemTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project item sale transaction record.
    /// </summary>
    /// <param name = "_fundingSourceRefId">The reference of the project funding source record.</param>
    /// <param name = "_amount">The line amount of the new project item sale transaction record.</param>
    /// <returns>The project item sale transaction record.</returns>
    protected ProjItemTransSale initializeProjItemTransSale(ProjFundingSourceRefId _fundingSourceRefId, AmountCur _amount)
    {
        ProjItemTransSale projItemTransSale;
        projItemTransSale.ProjTransId       = projItemTrans.ProjTransId;
        projItemTransSale.LedgerTransdate   = ledgerVoucher.lastTransDate();
        projItemTransSale.TransStatus       = this.transStatus();

        ProjFundingSource projFundingSource = ProjFundingSource::find(_fundingSourceRefId);
        projItemTransSale.DefaultDimension  = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projTrans.defaultDimension(), projFundingSource.DefaultDimension);

        projItemTransSale.FundingSource     = _fundingSourceRefId;
        projItemTransSale.LineAmount        = _amount;
        projItemTransSale.SalesPrice        = projTrans.salesPrice();
        if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(projItemTransSale.FundingSource))
        {
            projItemTransSale.LedgerSalesPosted = true;
            if (projTrans.transTurnoverMST() != 0.00)
            {
                projItemTransSale.LedgerSalesAmount = CurrencyExchangeHelper::mstAmount(CurrencyExchangeHelper::amount(projItemTransSale.LineAmount, this.currencyIdSales()), this.currencyIdSales(), projTrans.transDate(), Currency::noYes2UnknownNoYes(projTrans.triangulationSales()), this.exchRateSales(), this.exchRateSecondarySales());
            }
        }

        return projItemTransSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjItemTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project item cost transaction record.
    /// </summary>
    /// <param name = "_fundingSourceRefId">The reference of the project funding source record.</param>
    /// <param name = "_amount">The line amount of the new project item sale transaction record.</param>
    /// <returns>The project item cost transaction record.</returns>
    internal protected ProjItemTransCost initializeProjItemTransCost(ProjFundingSourceRefId _fundingSourceRefId, AmountCur _amount)
    {
        AmountCur totalCost = _amount;
        // totalCost will be 0 for all item requirement cases since associated PO (if any) has not been invoiced yet.
        if (totalCost == 0)
        {
            SalesLine salesLineLocal = custPackingSlipTrans.salesLine();
            // Calculate totalCost using cost price and quantity ordered on the item req.
            totalCost = salesLineLocal.CostPrice * custPackingSlipTrans.Qty;
        }

        ProjItemTransCost projItemTransCost;
        projItemTransCost.LedgerTransdate = ledgerVoucher.lastTransDate();
        projItemTransCost.TransStatus = this.transStatus();
        projItemTransCost.InventTransId = projItemTrans.InventTransId;
        projItemTransCost.ProjAdjustRefId = projItemTrans.ProjAdjustRefId;
        if (FeatureStateProvider::isFeatureEnabled(ProjCancelItemReqPackingSlipFeature::instance()))
        {
            projItemTransCost.Voucher = ledgerVoucher.lastVoucher();
        }

        ProjFundingSource projFundingSource = ProjFundingSource::find(_fundingSourceRefId);
        projItemTransCost.DefaultDimension  = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projTrans.defaultDimension(), projFundingSource.DefaultDimension);
        projItemTransCost.FundingSource = _fundingSourceRefId;
        projItemTransCost.LineAmount = totalCost;

        projItemTransCost.ProjId = projTrans.projId();

        this.setProjItemTransCostLedgerStatus(projItemTransCost);

        projItemTransCost.AmountMST = CurrencyExchangeHelper::mstAmount(projItemTransCost.LineAmount, CompanyInfoHelper::standardCurrency(), projItemTransCost.LedgerTransdate);

        return projItemTransCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjItemTransCostLedgerStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the correct project item cost transaction ledger status.
    /// </summary>
    /// <param name = "_projItemTransCost">The new projItemTransCost record to be inserted.</param>
    internal protected void setProjItemTransCostLedgerStatus(ProjItemTransCost _projItemTransCost)
    {
        ProjItemTransCost projItemTransCostOriginal;

        if (this.ledgerOrigin == ProjOrigin::VendorInvoice && ProjSetVendorInvoiceLedgerStatusCostFromExistingStatusFlight::Instance().isEnabled())
        {
            // This will select the newest existing projItemTransCost record that will be used to determine the ledgerStatusCost, as it should be based
            // on the previous projItemTransCost for posting of Vendor Invoice
            select firstonly RecId, LedgerStatusCost from projItemTransCostOriginal
            order by projItemTransCostOriginal.ItemLineNum desc
                where _projItemTransCost.InventTransId == projItemTransCostOriginal.InventTransid
                    && _projItemTransCost.ProjAdjustRefId == projItemTransCostOriginal.ProjAdjustRefId;
        }

        if (projItemTransCostOriginal.RecId)
        {
            _projItemTransCost.LedgerStatusCost = projItemTransCostOriginal.LedgerStatusCost;
        }
        else
        {
            _projItemTransCost.LedgerStatusCost = this.itemLedgerStatus(ProjTable::find(_projItemTransCost.ProjId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjItemTrans::splitNeverLedger(this.parmInventTransId(), this.parmAdjustRefId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transStatus</Name>
				<Source><![CDATA[
    public ProjTransStatus transStatus()
    {
        return ProjTransStatus::Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the related vendor invoice transaction.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// The item transaction for which the related vendor invoice transaction should be fetched.
    /// </param>
    /// <returns>
    /// The vendor invoice transaction related with the project item transaction.
    /// </returns>
    public VendInvoiceTrans getVendInvoiceTrans(ProjItemTrans _projItemTrans)
    {
        VendInvoiceTrans    vendInvoiceTrans;
        VendInvoiceJour     vendInvoiceJour;
        PurchLine           purchLine;
        InventTransOrigin   inventTransOrigin_Project;
        InventTransOrigin   inventTransOrigin_PO;
        InventTrans         inventTrans_Project;
        InventTrans         inventTrans_PO;
        
        select firstonly StockedProduct from purchLine
            exists join inventTransOrigin_PO
                where inventTransOrigin_PO.InventTransId == purchLine.InventTransId
            exists join inventTrans_Project
                where inventTransOrigin_PO.RecId == inventTrans_Project.MarkingRefInventTransOrigin
            exists join inventTransOrigin_Project
                where inventTransOrigin_Project.RecId == inventTrans_Project.InventTransOrigin
                    && inventTransOrigin_Project.InventTransId == _projItemTrans.InventTransId;
        
        if (purchLine.StockedProduct)
        {
            select firstonly RecId from vendInvoiceTrans
                    where vendInvoiceTrans.InventRefTransId == _projItemTrans.InventTransId
                exists join inventTrans_PO
                    where inventTrans_PO.InvoiceId == vendInvoiceTrans.InvoiceId
                        && inventTrans_PO.DateFinancial == vendInvoiceTrans.InvoiceDate
                exists join inventTransOrigin_PO
                    where inventTransOrigin_PO.RecId == inventTrans_PO.InventTransOrigin
                exists join inventTrans_Project
                    where inventTransOrigin_PO.RecId == inventTrans_Project.MarkingRefInventTransOrigin
                exists join inventTransOrigin_Project
                    where inventTransOrigin_Project.RecId == inventTrans_Project.InventTransOrigin
                        && inventTransOrigin_Project.InventTransId == _projItemTrans.InventTransId;
        }
        else
        {
            if(EnableVendorDetailInPostedTxnFlight::instance().isEnabled())
            {
                select firstonly RecId from vendInvoiceTrans
                where vendInvoiceTrans.InventRefTransId == _projItemTrans.InventTransId
                    exists join vendInvoiceJour
                        where vendInvoiceJour.PurchId == vendInvoiceTrans.PurchID &&
                            vendInvoiceJour.InvoiceId == vendInvoiceTrans.InvoiceId &&
                            vendInvoiceJour.InvoiceDate == vendInvoiceTrans.InvoiceDate &&
                            vendInvoiceJour.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                            vendInvoiceJour.InternalInvoiceId == vendInvoiceTrans.InternalInvoiceId;
            }
            else
            {
                select firstonly RecId from vendInvoiceTrans
                where vendInvoiceTrans.InventTransId == _projItemTrans.InventTransId
                    exists join vendInvoiceJour
                        where vendInvoiceJour.PurchId == vendInvoiceTrans.PurchID &&
                            vendInvoiceJour.InvoiceId == vendInvoiceTrans.InvoiceId &&
                            vendInvoiceJour.InvoiceDate == vendInvoiceTrans.InvoiceDate &&
                            vendInvoiceJour.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup &&
                            vendInvoiceJour.InternalInvoiceId == vendInvoiceTrans.InternalInvoiceId &&
                            vendInvoiceJour.LedgerVoucher == _projItemTrans.VoucherPackingSlip;
            }
        }
        
        return vendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLedgerStatus</Name>
				<Source><![CDATA[
    protected ProjLedgerStatus itemLedgerStatus(ProjTable _projTable)
    {
        return ProjRevRecHelper::getItemLedgerStatus(_projTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjLedgerStatusOperations</Name>
				<Source><![CDATA[
    internal boolean checkProjLedgerStatusOperations()
    {
        return FeatureStateProvider::isFeatureEnabled(ProjEnableProfitAndLossItemReqConsumptionFlight::instance()) && this.isItemReqNonStockItemSalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowInvalidCostLedgerStatusErrorForItems</Name>
				<Source><![CDATA[
    protected static boolean shouldThrowInvalidCostLedgerStatusErrorForItems(ProjLedgerStatus _ledgerStatus)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>