<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPriceHistoryLine_Quotation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRPriceHistoryLine_Quotation</c> class handles logic for populating
/// the price details form in terms of a sales quotation.
/// </summary>
class MCRPriceHistoryLine_Quotation extends MCRPriceHistoryLine
{
    SalesQuotationLine  salesQuotationLine;
    CustParameters      custParameters;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isContinuityBillUpFrontChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the this line is a continuity bill up front child record.
    /// </summary>
    /// <returns>
    ///     This method always returns false.
    /// </returns>
    /// <remarks>
    ///     This method always returns false, quotes never have continuity child lines.
    /// </remarks>
    public boolean isContinuityBillUpFrontChild()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDetailsEnabled</Name>
				<Source><![CDATA[
    public boolean isPriceDetailsEnabled()
    {
        return custParameters.MCREnablePriceDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipToChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if this <c>MCRPriceHistoryLine_Quotation</c> line is ship to child.
    /// </summary>
    /// <returns>
    ///     true if this line is a ship to child; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Quotes never have child ship to lines, so this method always returns false.
    /// </remarks>
    public boolean isShipToChild()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrMarginAlert</Name>
				<Source><![CDATA[
    public MCRMarginAlert mcrMarginAlert()
    {
        MCRMarginAlert_Quotation mcrMarginAlert_Quotation;

        mcrMarginAlert_Quotation = MCRMarginAlert_Quotation::newSalesQuotationLine(salesQuotationLine);
        return mcrMarginAlert_Quotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instace of the <c>MCRPriceHistoryLine_Quotation</c> class.
    /// </summary>
    protected void new()
    {
        super();
        custParameters = CustParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
    public CustVendAC parmAccountId()
    {
        return salesQuotationLine.orderAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountMultilineDiscCode</Name>
				<Source><![CDATA[
    public MultiLnDiscCode parmAccountMultilineDiscCode()
    {
        SalesQuotationTable salesQuotationTable;
        select MultiLineDisc from salesQuotationTable
            where salesQuotationTable.QuotationId == salesQuotationLine.QuotationId;
        return salesQuotationTable.MultiLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanFindLineDisc</Name>
				<Source><![CDATA[
    public boolean parmCanFindLineDisc()
    {
        return salesQuotationLine.canEditDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode()
    {
        return salesQuotationLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim()
    {
        return salesQuotationLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId()
    {
        return salesQuotationLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return salesQuotationLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemLineDiscCode</Name>
				<Source><![CDATA[
    public LineDiscCode parmItemLineDiscCode()
    {
        return salesQuotationLine.itemLineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmLineDiscAmount()
    {
        return salesQuotationLine.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscCode</Name>
				<Source><![CDATA[
    public LineDiscCode parmLineDiscCode()
    {
        return salesQuotationLine.lineDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDiscPct</Name>
				<Source><![CDATA[
    public DiscPct parmLineDiscPct()
    {
        return salesQuotationLine.LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineId</Name>
				<Source><![CDATA[
    protected QuotationIdBase parmLineId()
    {
        return salesQuotationLine.QuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineMultiLn</Name>
				<Source><![CDATA[
    public LineMultiLn parmLineMultiLn()
    {
        return SalesParameters::find().Disc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkup</Name>
				<Source><![CDATA[
    public PriceMarkup parmMarkup()
    {
        return salesQuotationLine.SalesMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchingAgreementLine</Name>
				<Source><![CDATA[
    public AgreementLineRecId parmMatchingAgreementLine()
    {
        // Quotation line cannot link to an agreement.
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public MCROrderLinePriceHistoryReference parmMCROrderLine2PriceHistoryRef()
    {
        return salesQuotationLine.MCROrderLine2PriceHistoryRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public ModuleInventPurchSales parmModuleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultilineDiscAmount</Name>
				<Source><![CDATA[
    public DiscAmount parmMultilineDiscAmount()
    {
        return salesQuotationLine.MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultilineDiscPct</Name>
				<Source><![CDATA[
    public DiscPct parmMultilineDiscPct()
    {
        return salesQuotationLine.MultiLnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public MCROrderLinePriceHistoryReference parmOrigMCROrderLine2PriceHistoryRef()
    {
        return salesQuotationLine.orig().MCROrderLine2PriceHistoryRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public PriceCur parmPrice()
    {
        return salesQuotationLine.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDate</Name>
				<Source><![CDATA[
    public PriceDate parmPriceDate()
    {
        return salesQuotationLine.priceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroupId</Name>
				<Source><![CDATA[
    public PriceGroupId parmPriceGroupId()
    {
        return salesQuotationLine.priceGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceOverride</Name>
				<Source><![CDATA[
    public NoYes parmPriceOverride()
    {
        return salesQuotationLine.mcrSalesQuotationLineOverride().PriceOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    public PriceUnit parmPriceUnit()
    {
        return salesQuotationLine.PriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    public PurchId parmPurchId()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public Qty parmQty()
    {
        return salesQuotationLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyMultiline</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quantity for the multiline.
    /// </summary>
    /// <returns>
    ///     The <c>Qty</c> of the multiline.
    /// </returns>
    /// <remarks>
    ///     Used as a starting point for potential multiline discount agreements (multiline discount
    ///     agreement may be active that has higher quantity than current line quantity).
    /// </remarks>
    public Qty parmQtyMultiline()
    {
        InventTableModule       inventTableModule, inventTableModuleMultiLineDisc;
        SalesQuotationLine      salesQuotationLineLocal;

        // Find line's multi-line discount code
        // Sum quantity of all other lines that have same multi-line discount code
        select sum(SalesQty) from salesQuotationLineLocal
            where salesQuotationLineLocal.QuotationId == salesQuotationLine.QuotationId
            exists join inventTableModuleMultiLineDisc
                where inventTableModuleMultiLineDisc.ItemId == this.parmItemId()
                   && inventTableModuleMultiLineDisc.ModuleType == this.parmModuleType()
            exists join inventTableModule
               where inventTableModule.ItemId == salesQuotationLineLocal.ItemId
                  && inventTableModule.ModuleType == this.parmModuleType()
                  && inventTableModule.MultiLineDisc == inventTableModuleMultiLineDisc.MultiLineDisc;

        return salesQuotationLineLocal.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuotationId</Name>
				<Source><![CDATA[
    public QuotationId parmQuotationId()
    {
        return salesQuotationLine.QuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    protected RecId parmRecId()
    {
        return salesQuotationLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    public SalesId parmSalesId()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a new sales quotation line.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The new sales quotation line.
    /// </param>
    public void parmSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        salesQuotationLine = _salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAgreementRelated</Name>
				<Source><![CDATA[
    public boolean parmShowAgreementRelated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowMarginRelated</Name>
				<Source><![CDATA[
    public boolean parmShowMarginRelated()
    {
        return SalesParameters::find().MCREnableMarginAlert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPotentialAgreementLines</Name>
				<Source><![CDATA[
    public boolean parmShowPotentialAgreementLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
    protected TableId parmTableId()
    {
        return salesQuotationLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitId()
    {
        return salesQuotationLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public void updateMCROrderLine2PriceHistoryRef(MCROrderLinePriceHistoryReference _mcrOrderLinePriceHistoryReference)
    {
        salesQuotationLine.MCROrderLine2PriceHistoryRef = _mcrOrderLinePriceHistoryReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usesRetailPricing</Name>
				<Source><![CDATA[
    public boolean usesRetailPricing()
    {
        // Retail pricing is never used for quotation lines.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instace of the <c>MCRPriceHistoryLine_Quotation</c> class.
    /// </summary>
    /// <returns>
    /// Instance of a sales quotation price history line
    /// </returns>
    public static MCRPriceHistoryLine_Quotation construct()
    {
        return new MCRPriceHistoryLine_Quotation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instace of the <c>MCRPriceHistoryLine_Quotation</c> class.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The quotation line used to initialize the object.
    /// </param>
    /// <returns>
    /// Instance of a sales quotation price history line
    /// </returns>
    public static MCRPriceHistoryLine_Quotation newSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        MCRPriceHistoryLine_Quotation mcrPriceHistoryLine_Quotation = MCRPriceHistoryLine_Quotation::construct();

        mcrPriceHistoryLine_Quotation.parmSalesQuotationLine(_salesQuotationLine);
        return mcrPriceHistoryLine_Quotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQuotationLine</Name>
				<Source><![CDATA[
    public SalesQuotationLine getSalesQuotationLine()
    {
        return salesQuotationLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>