<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXMetadataSync</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>RetailCDXMetadataSync</c> class is for reading AX 2012 R3 Async Server metadata.
/// </summary>
/// <remarks>
///    This class is for AX 2012 R3 data sync support.
/// </remarks>
// This is a framework class. Customizing this class may cause problems Real-Time Service in channels.
public class RetailCDXMetadataSync
{
    #RetailCDX
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMetadataXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets AX 2012 R3 Async Server metadata.
    /// </summary>
    /// <param name = "lastSyncCounter">Last sync counter in utcdatetime.</param>
    /// <returns>AX 2012 R3 Async Server metadata.</returns>
    public static str getMetadataXml(utcdatetime lastSyncCounter)
    {
        Microsoft.Dynamics.Retail.SynchLibrary.Metadata.MetadataSyncSession metadata;
        RetailConnChannelSchema channelSchema;
        RetailConnDatabaseProfile dataStoreTable;
        RetailCDXDataGroup dataGroupTable;
        RetailCDXFileStorageProvider fileStorageProviderTable;
        RetailConnSchedulerJobTable job;
        RetailConnSchedulerJobLine jobLine;
        RetailConnSchedulerSubjobTable subjob;
        RetailConnSchedulerSubjobFieldList fieldMapping;
        RetailConnScheduleJobMapping scheduleJob;
        RetailCDXScheduleDataGroup scheduleDataGroup;
        RetailConnSchedule schedule;
        RetailCDXSchedulerInterval schedulerInterval;
        RetailConnParameters scheduleParameterTable;
        RetailSharedParameters sharedParameterTable;
        RetailCDXMetadataSyncTombstone tombstone;
        str jobDef;
        boolean metadataChanged = false;
        container jobInRebuildQueue;

        metadata = new Microsoft.Dynamics.Retail.SynchLibrary.Metadata.MetadataSyncSession();

        select firstonly RecId from channelSchema where channelSchema.SchemaName == #AX2012R3SchemaName;

        // ScheduleJob - DELETE
        while select RefRecId
        from tombstone
          where tombstone.RefTableID == tableNum(RetailConnScheduleJobMapping)
             && tombstone.createdDateTime >= lastSyncCounter
        {
            metadata.RemoveScheduleJob(tombstone.RefRecID);
            metadataChanged = true;
        }

        // ScheduleDataGroup - DELETE
        while select RefRecId
        from tombstone
          where tombstone.RefTableID == tableNum(RetailCDXScheduleDataGroup)
             && tombstone.createdDateTime >= lastSyncCounter
        {
            metadata.RemoveScheduleDataGroup(tombstone.RefRecID);
            metadataChanged = true;
        }

        // FileStorageProvider
        while select RecId, ShareDownloadPath, ShareUploadPath
        from fileStorageProviderTable
          where fileStorageProviderTable.modifiedDateTime >= lastSyncCounter
        {
            metadata.AddFileStorageProvider(
              fileStorageProviderTable.RecId,
              fileStorageProviderTable.ShareDownloadPath,
              fileStorageProviderTable.ShareUploadPath);

            metadataChanged = true;
        }

        //ScheduleParameter
        select firstOnly RecId, modifiedDateTime
        from scheduleParameterTable;

        sharedParameterTable = RetailSharedParameters::find();

        if (scheduleParameterTable.modifiedDateTime >= lastSyncCounter || sharedParameterTable.modifiedDateTime >= lastSyncCounter)
        {
            metadata.SetScheduleParameter(
              scheduleParameterTable.RecId,
              RetailConnParameters::getCDXTryCount(),
              sharedParameterTable.StaffPasswordHash);

            metadataChanged = true;
        }

        // DataGroup
        while select RecId, FileStorageProvider
        from dataGroupTable
          where dataGroupTable.modifiedDateTime >= lastSyncCounter
             && dataGroupTable.ChannelSchema == channelSchema.RecId
        {
            metadata.AddDataGroup(
              dataGroupTable.RecId,
              dataGroupTable.FileStorageProvider
        );

            metadataChanged = true;
        }

        // SchedulerInterval
        while select RecId, UploadInterval, DownloadInterval
        from schedulerInterval
          where schedulerInterval.modifiedDateTime >= lastSyncCounter
        {
            metadata.AddSchedulerInterval(
              schedulerInterval.RecId,
              schedulerInterval.UploadInterval,
              schedulerInterval.DownloadInterval);

            metadataChanged = true;
        }

        // DataStore
        while select RecId, Name, DataGroup, UserName, DataStoreData, SchedulerInterval
        from dataStoreTable
          where dataStoreTable.modifiedDateTime >= lastSyncCounter
          exists join dataGroupTable
            where dataStoreTable.DataGroup == dataGroupTable.RecId
               && dataGroupTable.ChannelSchema == channelSchema.RecId

        {
            metadata.AddDataStore(
              dataStoreTable.RecId,
              dataStoreTable.Name,
              dataStoreTable.DataGroup,
              dataStoreTable.Username,
              dataStoreTable.DataStoreData,
              dataStoreTable.SchedulerInterval);

            metadataChanged = true;
        }

        // P-job
        while select JobId
        from job
          where job.IsUpload == NoYes::Yes
             && job.RetailConnChannelSchema == channelSchema.RecId
        exists join jobLine
            where job.jobId == jobLine.jobId
        exists join subjob
            where subjob.subJobId == jobLine.subJobId
        exists join fieldMapping
            where subjob.subJobId == fieldMapping.subjobId
               && (
                   job.modifiedDateTime >= lastSyncCounter
                || jobLine.modifiedDateTime >= lastSyncCounter
                || subjob.modifiedDateTime >= lastSyncCounter
                || fieldMapping.modifiedDateTime >= lastSyncCounter
               )
        {
            jobDef = RetailCDXMetadataSync::getUploadJobDefinition(job.jobId);
            metadata.AddUploadJob(job.jobId, jobDef);

            jobInRebuildQueue += job.jobId;

            metadataChanged = true;
        }

        // RetailConnSchedulerJobLine - DELETE
        while select jobId
        from job
          where job.IsUpload == NoYes::Yes
             && job.RetailConnChannelSchema == channelSchema.RecId
          exists join tombstone
            where tombstone.RefTableID == tableNum(RetailConnSchedulerJobLine)
               && tombstone.JobID == job.jobId
               && tombstone.createdDateTime >= lastSyncCounter
        {
            if (conFind(jobInRebuildQueue, job.jobId))
            {
                continue;
            }
            else
            {
                jobDef = RetailCDXMetadataSync::getUploadJobDefinition(job.jobId);
                metadata.AddUploadJob(job.jobId, jobDef);

                jobInRebuildQueue += job.jobId;

                metadataChanged = true;
            }
        }

        // RetailConnSchedulerSubjobFieldList - DELETE
        while select JobId
        from job
          where job.IsUpload == NoYes::Yes
             && job.RetailConnChannelSchema == channelSchema.RecId
          exists join jobLine
            where job.jobId == jobLine.jobId
          exists join tombstone
            where tombstone.RefTableID == tableNum(RetailConnSchedulerSubjobFieldList)
               && tombstone.SubJobID == jobLine.subJobId
               && tombstone.createdDateTime >= lastSyncCounter
        {
            if (conFind(jobInRebuildQueue, job.jobId))
            {
                continue;
            }
            else
            {
                jobDef = RetailCDXMetadataSync::getUploadJobDefinition(job.jobId);
                metadata.AddUploadJob(job.jobId, jobDef);

                jobInRebuildQueue += job.jobId;

                metadataChanged = true;
            }
        }

        // ScheduleJob
        while select ScheduleRecId, RecId, SchedulerJobId
        from scheduleJob
          where scheduleJob.modifiedDateTime >= lastSyncCounter
          exists join job
            where scheduleJob.SchedulerJobId == job.jobId
               && job.IsUpload == NoYes::Yes
               && job.RetailConnChannelSchema == channelSchema.RecId
        {
            metadata.AddScheduleJob(
              scheduleJob.ScheduleRecId,
              scheduleJob.RecId,
              scheduleJob.SchedulerJobId
        );

            metadataChanged = true;
        }

        while select *
        from scheduleDataGroup
          where scheduleDataGroup.modifiedDateTime >= lastSyncCounter
          exists join schedule
            where scheduleDataGroup.Schedule == schedule.RecId
          exists join dataGroupTable
            where dataGroupTable.ChannelSchema == channelSchema.RecId
          exists join scheduleJob
            where schedule.RecId == scheduleJob.ScheduleRecId
          exists join job
            where job.jobId == scheduleJob.SchedulerJobId
               && job.IsUpload == NoYes::Yes
               && job.RetailConnChannelSchema == channelSchema.RecId
        {
            metadata.AddScheduleDataGroup(
              scheduleDataGroup.Schedule,
              scheduleDataGroup.RecId,
              scheduleDataGroup.DataGroup
            );

            metadataChanged = true;
        }

        if (metadataChanged)
        {
            return metadata.GetMetadataXmlString();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUploadJobDefinition</Name>
				<Source><![CDATA[
    private static str getUploadJobDefinition(RetailConnJobId _jobID)
    {
        RetailConnChannelSchema channelSchema;
        RetailConnSchedulerJobTable job;
        RetailConnSchedulerSubjobTable subjob;
        RetailConnSchedulerJobLine jobLine;
        RetailConnSchedulerSubjobFieldList fieldMapping;
        RetailConnConversionType convType;
        str fromField,toField,convValue;
        Microsoft.Dynamics.Retail.CommerceDataExchange.ReadRequestHeader header;
        Microsoft.Dynamics.Retail.CommerceDataExchange.ReadRequest readRequest;

        select firstonly IsUpload from job where job.jobId == _jobID;

        if (!job.IsUpload)
        {
            // Job %1 is not an upload job
            throw Global::error(strFmt("@REX4040216", _jobID));
        }

        header = new Microsoft.Dynamics.Retail.CommerceDataExchange.ReadRequestHeader();

        while select *
        from subjob
          exists join jobline
            where subjob.subJobId == jobLine.subJobId
               && jobLine.enabled == NoYes::Yes
          exists join job
            where jobLine.jobId == job.jobId
               && job.jobId == _jobid
        {
            // table mapping
            readRequest = new Microsoft.Dynamics.Retail.CommerceDataExchange.ReadRequest(
              subjob.ChannelTableName,
              subjob.AXTableName);

            while select fromFieldName, toFieldName, conversionType, conversionValue
            from fieldMapping
              where fieldMapping.subjobId == subjob.subJobId
            {
                fromField = fieldMapping.fromFieldName;
                toField = fieldMapping.toFieldName;
                convValue = fieldMapping.conversionValue;
                convType = fieldMapping.conversionType;

                if (convType == RetailConnConversionType::None)
                {
                    readRequest.AddTransferColumnPair(fromField, toField);
                }
                else if (convType == RetailConnConversionType::Constant)
                {
                    readRequest.AddTransferColumnPair(fromField, toField, convValue);
                }
            }

            if (!RetailConnReplicationUtilities::isGlobalTable(subjob.AXTableName))
            {
                readRequest.AddTransferColumnPair('DATAAREAID', 'DataAreaId');
            }

            readRequest.AddFilter(
              subjob.ReplicationCounterFieldName,
              Microsoft.Dynamics.Retail.CommerceDataExchange.FilterOperator::GreaterThan,
              '-1');

            readRequest.AddFilter(
              subjob.ReplicationCounterFieldName,
              Microsoft.Dynamics.Retail.CommerceDataExchange.FilterOperator::LessThanOrEqualTo,
              '-1');

            header.AddReadRequest(readRequest);
        }

        return header.ToXml();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>