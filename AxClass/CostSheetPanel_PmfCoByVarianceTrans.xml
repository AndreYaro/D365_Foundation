<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetPanel_PmfCoByVarianceTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostSheetPanel_PmfCoByVarianceTrans</c> class for cost sheet panel of the production co/by variances.
/// </summary>
class CostSheetPanel_PmfCoByVarianceTrans extends CostSheetPanel_ProdCalcVarianceTrans
{
    PmfProdCoBy    prodCoBy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initUnitIdAndLotSize</Name>
				<Source><![CDATA[
    ///<summary>
    /// Initializes the lot size, per series and unitid.
    ///</summary>
    protected void initUnitIdAndLotSize()
    {
        lotSize = prodCoBy.reportedFinishedGood();

        if (lotSize == 0.00)
        {
            lotSize = 1.00;
        }

        qty = lotSize;

        qtyReal.realValue(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedRecordsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a packed container of the record list built on the server
    /// </summary>
    /// <returns>Packed record list</returns>
    protected container packedRecordsList()
    {
        return CostSheetPanel_PmfCoByVarianceTrans::packedServerProdCoBy(prodTable, prodCoBy, details);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the PmfProdCoBy record
    /// </summary>
    /// <param name="_prodCoBy">
    /// Batch Co/by
    /// </param>
    /// <returns>
    /// PmfProdCoBy record
    /// </returns>
    public PmfProdCoBy parmProdCoBy(PmfProdCoBy _prodCoBy = prodCoBy)
    {
        prodCoBy = _prodCoBy;
        return prodCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static CostSheetPanel_PmfCoByVarianceTrans construct()
    {
        return new CostSheetPanel_PmfCoByVarianceTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class and adds controls to the caller form at run-time.
    /// </summary>
    /// <param name="_formRun">
    /// The caller form.
    /// </param>
    /// <param name="_parentId">
    /// The ID of the caller form tabpage or group to add the complex control to.
    /// </param>
    /// <returns>
    /// The instance of the class.
    /// </returns>
    /// <remarks>
    /// Should be called before <c>super</c> in the <c>init</c> method of the caller form.
    /// </remarks>
    public static CostSheetPanel_PmfCoByVarianceTrans newForm(
        FormRun         _formRun,
        FormControlId   _parentId)
    {
        CostSheetPanel_PmfCoByVarianceTrans costSheetPanel = CostSheetPanel_PmfCoByVarianceTrans::construct();
        costSheetPanel.parmFormRun(_formRun);
        costSheetPanel.parmParentId(_parentId);
        costSheetPanel.build();

        return costSheetPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedServerProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Uses <c>ProdStandardVariance_PmfCoByVarianceTrans</c> class to calculate variances.
    /// Then groups the records according to the level of details.
    /// </summary>
    /// <param name="_prodTable">
    /// <c>ProdTable</c> records that determines what production order is taken for the variances calculation.
    /// </param>
    /// <param name="_prodCoBy">
    /// <c>PmfProdCoBy</c> record that determines what Co/By is taken for the variances calculation.
    /// </param>
    /// <param name="_details">
    /// Determines whether the variances should be calculated per resource or per cost group.
    /// </param>
    /// <returns>
    /// Packed <c>List</c> object with cost rollup records.
    /// </returns>
    protected static container packedServerProdCoBy(
        ProdTable   _prodTable,
        PmfProdCoBy _prodCoBy,
        NoYes       _details)
    {
        TmpProdStandardVariance         tmpProdStandardVariance;
        TmpProdStandardVariance         emptyTmpProdStandardVariance;
        List                            list = new List(Types::Record);

        if (_prodTable.ProdStatus == ProdStatus::Completed)
        {
            ProdStandardVariance_PmfCoBy prodStandardVariance = ProdStandardVariance_PmfCoBy::newFromProdCoBy(_prodCoBy);
            prodStandardVariance.calc(_prodTable.ProdId,
                                      ProdTransRefType::Production,
                                     _prodTable.CollectRefLevel,
                                     _prodTable.CollectRefProdId,
                                     _prodCoBy.RealDate);

            tmpProdStandardVariance.setTmpData(prodStandardVariance.parmTmpProdStandardVariance());
        }
        else
        {
            emptyTmpProdStandardVariance.clear();
            tmpProdStandardVariance.setTmpData(emptyTmpProdStandardVariance);
        }

        if (_details)
        {
            CostSheetPanel_ProdCalcVarianceTrans::addListDetail(tmpProdStandardVariance, list);
        }
        else
        {
            CostSheetPanel_ProdCalcVarianceTrans::addList(tmpProdStandardVariance, list);
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        unitIdString.visible(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
