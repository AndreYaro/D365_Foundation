<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingAdviceReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SRSReportParameterAttribute(classStr(CustVendNettingAdviceReportContract))]
public class CustVendNettingAdviceReportDP extends SRSReportDataProviderPreProcessTempDB
{
    private CustVendNettingAdviceReportCompanyTmp nettingAdviceReportCompanyTmp;
    private CustVendNettingAdviceReportCustTmp nettingAdviceReportCustTmp;
    private CustVendNettingAdviceReportVendTmp nettingAdviceReportVendTmp;

    private CompanyId custCompany;
    private CompanyId vendCompany;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCompanyTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSet(tableStr(CustVendNettingAdviceReportCompanyTmp))]
    internal CustVendNettingAdviceReportCompanyTmp getCompanyTmp()
    {
        select nettingAdviceReportCompanyTmp;
        return nettingAdviceReportCompanyTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSet(tableStr(CustVendNettingAdviceReportCustTmp))]
    internal CustVendNettingAdviceReportCustTmp getCustTmp()
    {
        select nettingAdviceReportCustTmp;
        return nettingAdviceReportCustTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSet(tableStr(CustVendNettingAdviceReportVendTmp))]
    internal CustVendNettingAdviceReportVendTmp getVendTmp()
    {
        select nettingAdviceReportVendTmp;
        return nettingAdviceReportVendTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCompanyTmp</Name>
				<Source><![CDATA[
    protected void populateCompanyTmp(CustAccount _custAccount, VendAccount _vendAccount, TransDate _nettingDate, CurrencyCode _nettingCurrencyCode)
    {
        nettingAdviceReportCompanyTmp.NettingCurrencyCode = _nettingCurrencyCode;
        nettingAdviceReportCompanyTmp.NettingDate = _nettingDate;

        CompanyInfo companyInfo = CompanyInfo::find();
        nettingAdviceReportCompanyTmp.CompanyName = companyInfo.name();
        nettingAdviceReportCompanyTmp.CompanyAddress = companyInfo.postalAddress().Address;
        nettingAdviceReportCompanyTmp.CompanyPhone = companyInfo.phone();
        nettingAdviceReportCompanyTmp.CompanyTeleFax = companyInfo.teleFax();
        nettingAdviceReportCompanyTmp.CompanyCoRegNum = companyInfo.CoRegNum;
        nettingAdviceReportCompanyTmp.CompanyRegNum = companyInfo.RegNum;
        nettingAdviceReportCompanyTmp.CompanyEmail = companyInfo.email();

        changecompany(custCompany)
        {
            CustTable custTable = CustTable::find(_custAccount);
            nettingAdviceReportCompanyTmp.CustomerAccount = _custAccount;
            nettingAdviceReportCompanyTmp.CustomerName = custTable.name();
            nettingAdviceReportCompanyTmp.CustomerAddress = custTable.postalAddress().Address;
        }

        changecompany(vendCompany)
        {
            VendTable vendTable = VendTable::find(_vendAccount);
            nettingAdviceReportCompanyTmp.VendorAccount = _vendAccount;
            nettingAdviceReportCompanyTmp.VendorName = vendTable.name();
            nettingAdviceReportCompanyTmp.VendorAddress = vendTable.postalAddress().Address;
        }

        nettingAdviceReportCompanyTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTmp</Name>
				<Source><![CDATA[
    protected void populateCustVendTmp(ModuleCustVend _module, RecId _custVendTransRecId)
    {
        CustVendSettlement custVendSettlementGroup = CustVendSettlement::getEmptyTableBuffer(_module);
        while select SettlementGroup from custVendSettlementGroup
            group by custVendSettlementGroup.SettlementGroup
            where custVendSettlementGroup.TransRecId == _custVendTransRecId
        {
            CustVendSettlement custVendSettlement = CustVendSettlement::getEmptyTableBuffer(_module);
            while select TransRecId, sum(SettleAmountCur) from custVendSettlement
                group by custVendSettlement.TransRecId
                where custVendSettlement.SettlementGroup == custVendSettlementGroup.SettlementGroup
                    && custVendSettlement.TransRecId != _custVendTransRecId
            {
                this.insertCustVendTmp(this.getCustVendNettingAdviceReportCustVendTmp(_module), CustVendTrans::findByModule(_module, custVendSettlement.TransRecId), custVendSettlement.SettleAmountCur);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendNettingAdviceReportCustVendTmp</Name>
				<Source><![CDATA[
    private CustVendNettingAdviceReportCustVendTmp getCustVendNettingAdviceReportCustVendTmp(ModuleCustVend _module)
    {
        CustVendNettingAdviceReportCustVendTmp custVendNettingAdviceReportCustVendTmp;
        if (_module == ModuleCustVend::Cust)
        {
            custVendNettingAdviceReportCustVendTmp = nettingAdviceReportCustTmp;
        }
        else
        {
            custVendNettingAdviceReportCustVendTmp = nettingAdviceReportVendTmp;
        }
        return custVendNettingAdviceReportCustVendTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustVendTmp</Name>
				<Source><![CDATA[
    private void insertCustVendTmp(CustVendNettingAdviceReportCustVendTmp _nettingAdviceReportCustVendTmp, CustVendTrans _custVendTrans, AmountCur _settleAmountCur)
    {
        if (!this.shouldInsertCustVendTmp(_custVendTrans.TableId, _custVendTrans.TransType))
        {
            return;
        }

        AmountCur remainingBalance = CustVendTransData::construct(_custVendTrans).remainAmountCur();

        _nettingAdviceReportCustVendTmp.clear();
        _nettingAdviceReportCustVendTmp.AmountCurSettled = _settleAmountCur;
        _nettingAdviceReportCustVendTmp.AmountCur = _custVendTrans.AmountCur;
        _nettingAdviceReportCustVendTmp.RemainingBalance = remainingBalance;
        _nettingAdviceReportCustVendTmp.CurrencyCode = _custVendTrans.CurrencyCode;
        _nettingAdviceReportCustVendTmp.DueDate = _custVendTrans.DueDate;
        _nettingAdviceReportCustVendTmp.InvoiceId = _custVendTrans.Invoice;
        _nettingAdviceReportCustVendTmp.TransDate = _custVendTrans.TransDate;
        _nettingAdviceReportCustVendTmp.TransTxt = _custVendTrans.Txt;
        _nettingAdviceReportCustVendTmp.Voucher = _custVendTrans.Voucher;

        _nettingAdviceReportCustVendTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInsertCustVendTmp</Name>
				<Source><![CDATA[
    private boolean shouldInsertCustVendTmp(TableId _custVendTransTableId, LedgerTransType _transType)
    {
        return _custVendTransTableId == tableNum(CustTrans) ? this.shouldInsertCustTmp(_transType) : this.shouldInsertVendTmp(_transType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInsertCustTmp</Name>
				<Source><![CDATA[
    private boolean shouldInsertCustTmp(LedgerTransType _transType)
    {
        return _transType == LedgerTransType::CollectionLetter
            || _transType == LedgerTransType::Cust
            || _transType == LedgerTransType::GeneralJournal
            || _transType == LedgerTransType::Interest
            || _transType == LedgerTransType::Project
            || _transType == LedgerTransType::Sales
            || _transType == LedgerTransType::Transfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInsertVendTmp</Name>
				<Source><![CDATA[
    private boolean shouldInsertVendTmp(LedgerTransType _transType)
    {
        return _transType == LedgerTransType::GeneralJournal
            || _transType == LedgerTransType::None
            || _transType == LedgerTransType::Purch
            || _transType == LedgerTransType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        CustVendNettingAdviceReportContract contract = this.parmDataContract();
        custCompany = contract.parmCustCompany();
        vendCompany = contract.parmVendCompany();
        this.populateCompanyTmp(
            contract.parmCustAccount(),
            contract.parmVendAccount(),
            contract.parmNettingDate(),
            contract.parmNettingCurrencyCode());

        changecompany(custCompany)
        {
            this.populateCustVendTmp(ModuleCustVend::Cust, contract.parmCustTransRecId());
        }

        changecompany(vendCompany)
        {
            this.populateCustVendTmp(ModuleCustVend::Vend, contract.parmVendTransRecId());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>