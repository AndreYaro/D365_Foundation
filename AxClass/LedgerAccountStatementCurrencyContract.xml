<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccountStatementCurrencyContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerAccountStatementCurrencyContract</c> class is the data contract class for the
///    <c>LedgerAccountStatement</c> SSRS report.
/// </summary>
[
    DataContractAttribute,
    SysOperationGroupAttribute('Date', "@SYS7402", '1', FormArrangeMethod::HorizontalFlushRight),
    SysOperationGroupAttribute('PrintOut', "@SYS12608", '2')
]
public class LedgerAccountStatementCurrencyContract implements SysOperationValidatable
{
    boolean includeOpening;
    boolean includeReversed;
    TransDate fromDate;
    TransDate toDate;
    // The following parameters are not shown to the user. They are set to a specific value in the Controller class
    str             sysVersion;
    DirPartyName    userName;
    boolean         displayDescription;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDisplayDescription</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('DisplayDescription')
    ]
    public boolean parmDisplayDescription(boolean _displayDescription = displayDescription)
    {
        displayDescription = _displayDescription;
        return displayDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FromDate
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationLabelAttribute(literalstr("@SYS5209")),
        SysOperationHelpTextAttribute(literalstr("@SYS67")),
        SysOperationGroupMemberAttribute('Date'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOpening</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter IncludeOpening.
    /// </summary>
    /// <param name="_includeOpening">
    /// The new value of the datacontract parameter IncludeOpening; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter IncludeOpening
    /// </returns>
    [
        DataMemberAttribute('IncludeOpening'),
        SysOperationLabelAttribute(literalstr("@SYS4000403")),
        SysOperationHelpTextAttribute(literalstr("@SYS4000404")),
        SysOperationGroupMemberAttribute('PrintOut'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public boolean parmIncludeOpening(boolean _includeOpening = includeOpening)
    {
        includeOpening = _includeOpening;
        return includeOpening;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter IncludeReversed.
    /// </summary>
    /// <param name="_includeReversed">
    /// The new value of the datacontract parameter IncludeReversed; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter IncludeReversed
    /// </returns>
    [
        DataMemberAttribute('IncludeReversed'),
        SysOperationLabelAttribute(literalstr("@SYS78625")),
        SysOperationHelpTextAttribute(literalstr("@SYS78627")),
        SysOperationGroupMemberAttribute('PrintOut'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public boolean parmIncludeReversed(boolean _includeReversed = includeReversed)
    {
        includeReversed = _includeReversed;
        return includeReversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>SysVersion</c> parameter of the data contract.
    /// </summary>
    /// <param name="_sysVersion">
    ///    The new value of the <c>SysVersion</c> parameter of the data contract; optional.
    /// </param>
    /// <returns>
    ///    The current value of the <c>SysVersion</c> parameter of the data contract.
    /// </returns>
    [
        DataMemberAttribute('SysVersion')
    ]
    public Description255 parmSysVersion(str _sysVersion = sysVersion)
    {
        sysVersion = _sysVersion;
        return sysVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ToDate
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationLabelAttribute(literalstr("@SYS14656")),
        SysOperationHelpTextAttribute(literalstr("@SYS67")),
        SysOperationGroupMemberAttribute('Date'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserName</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('UserName')
    ]
    public DirPartyName parmUserName(DirPartyName _userName = userName)
    {
        userName = _userName;
        return userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the UI parameters in the report.
    /// </summary>
    /// <returns>
    ///    Any errors to throw if the parameters are not properly selected.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;
        FiscalCalendarRecId calendarRecId;
        TransDate startDate,tmpDate;

        fromDate = this.parmFromDate();
        toDate = this.parmToDate();

        calendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());
        startDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,fromDate);
        tmpDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,toDate);

        if (fromDate > toDate && toDate)
        {
            ret = checkFailed("@SYS104511");
        }

        if (startDate != tmpDate)
        {
            ret = checkFailed("@SYS693");
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
