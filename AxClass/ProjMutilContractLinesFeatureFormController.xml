<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjMutilContractLinesFeatureFormController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is used for determine the control visibility.
/// </summary>
final internal class ProjMutilContractLinesFeatureFormController
{
    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
    private FormRun formRun;
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateFormControlVisibity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates form control visibility with the specfied container, when <c>ProjEnableMultipleContractLinesForProjectFeature</c> is enabled.
    /// </summary>
    /// <param name = "_fromRun">Instance of <c>FormRun</c>.</param>
    /// <param name = "_invisibleFormCtrlIdContainer">The container with control ids to be set as invisible.</param>
    /// <param name = "_visibleFormCtrlIdContainer">The container with control ids to be set as visible.</param>
    public static void updateFormControlVisibity(
		FormRun _fromRun, 
        container _invisibleFormCtrlIdContainer = conNull(),
        container _visibleFormCtrlIdContainer = conNull())
    {
        ProjMutilContractLinesFeatureFormController controller = new ProjMutilContractLinesFeatureFormController();
        if (controller.enableProjMultipleContractLinesForProjectFeature)
        {
            controller.initFormControl(_fromRun);
            controller.updateFormControl(_invisibleFormCtrlIdContainer, false);
            controller.updateFormControl(_visibleFormCtrlIdContainer, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates form control visibility with specified status.
    /// </summary>
    /// <param name = "_controlIdContainer">The container with control ids.</param>
    /// <param name = "_isVisible">Control visibility status.</param>
    private void updateFormControl(container _controlIdContainer, boolean _isVisible)
    {
        int counter = 1;
        if (formRun && _controlIdContainer != conNull())
        {
            for (counter = 1; counter <= conLen(_controlIdContainer) ; counter ++)
            {
                FormControl formControl = formRun.design().control(conPeek(_controlIdContainer, counter));
                if (formControl)
                {
                    formControl.visible(_isVisible);
                    formControl.enabled(_isVisible);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form run.
    /// </summary>
    /// <param name = "_formRun">The instance of <c>FormRun</c>.</param>
    private void initFormControl(FormRun _formRun)
    {
        formRun = _formRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>