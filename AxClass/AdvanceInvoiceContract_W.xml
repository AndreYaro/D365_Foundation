<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvanceInvoiceContract_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

/// <summary>
/// The <c>AdvanceInvoiceContract_W</c> class is the contract class for advance invoice in retail.
/// </summary>
public class AdvanceInvoiceContract_W
{
    /// <summary>
    /// Determines if it is required to create credit-note advance invoice.
    /// </summary>
    private boolean cancelOpenedAdvanceInvoices;
    /// <summary>
    /// Determines if original advance invoice no longer need to be created while updating customer order.
    /// </summary>
    private boolean noFurtherProcessing;
    /// <summary>
    /// Set contains prepayments.
    /// </summary>
    private Set prepaymentsSet;
    /// <summary>
    /// Invoice amount of carry out lines in hybrid customer order.
    /// </summary>
    private Amount carryOutInvoiceAmount;
    /// <summary>
    /// When update a customer order if the customer order has carry out lines, set hasCarryOutLine true.
    /// </summary>
    private boolean hasCarryoutLine;
    /// <summary>
    /// Sales table.
    /// </summary>
    private SalesTable salesTable;
    /// <summary>
    /// Retail store id.
    /// </summary>
    private RetailStoreId retailStoreId;
    /// <summary>
    /// Retail terminal id.
    /// </summary>
    private RetailTerminalId retailTerminalId;
    /// <summary>
    /// Retail transaction id.
    /// </summary>
    private RetailTransactionId retailTransactionId;
    /// <summary>
    /// Retail order channel reference id.
    /// </summary>
    private RetailOrderChannelReferenceId retailOrderChannelReferenceId;
    /// <summary>
    /// Is settlement required.
    /// </summary>
    private boolean isSettlementRequired;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable  = _salesTable;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailStoreId</Name>
				<Source><![CDATA[
    public RetailStoreId parmRetailStoreId(RetailStoreId _retailStoreId = retailStoreId)
    {
        retailStoreId  = _retailStoreId;
        return retailStoreId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailTerminalId</Name>
				<Source><![CDATA[
    public RetailTerminalId parmRetailTerminalId(RetailTerminalId _retailTerminalId = retailTerminalId)
    {
        retailTerminalId  = _retailTerminalId;
        return retailTerminalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailTransactionId</Name>
				<Source><![CDATA[
    public RetailTransactionId parmRetailTransactionId(RetailTransactionId _retailTransactionId = retailTransactionId)
    {
        retailTransactionId  = _retailTransactionId;
        return retailTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailOrderChannelReferenceId</Name>
				<Source><![CDATA[
    public RetailOrderChannelReferenceId parmRetailOrderChannelReferenceId(RetailOrderChannelReferenceId _retailOrderChannelReferenceId = retailOrderChannelReferenceId)
    {
        retailOrderChannelReferenceId  = _retailOrderChannelReferenceId;
        return retailOrderChannelReferenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelOpenedAdvanceInvoices</Name>
				<Source><![CDATA[
    public boolean parmCancelOpenedAdvanceInvoices(boolean _cancelOpenedAdvanceInvoices = cancelOpenedAdvanceInvoices)
    {
        cancelOpenedAdvanceInvoices = _cancelOpenedAdvanceInvoices;
        return cancelOpenedAdvanceInvoices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrePayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds prepayment into prepaymentSet.
    /// </summary>
    /// <param name = "_container">Container contains prepayment info.</param>
    public void addPrePayment(container _container)
    {
        prepaymentsSet.add(_container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrepaymentsSet</Name>
				<Source><![CDATA[
    public Set parmPrepaymentsSet(Set _prePaymentsSet = prepaymentsSet)
    {
        prepaymentsSet = _prePaymentsSet;
        return prepaymentsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoFurtherProcessing</Name>
				<Source><![CDATA[
    public boolean parmNoFurtherProcessing(boolean _noFurtherProcessing = noFurtherProcessing)
    {
        noFurtherProcessing = _noFurtherProcessing;
        return noFurtherProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCarryOutInvoiceAmount</Name>
				<Source><![CDATA[
    public Amount parmCarryOutInvoiceAmount(Amount _carryOutInvoiceAmount = carryOutInvoiceAmount)
    {
        carryOutInvoiceAmount = _carryOutInvoiceAmount;
        return carryOutInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasCarryOutLine</Name>
				<Source><![CDATA[
    public boolean parmHasCarryOutLine(boolean _hasCarryOutLine = hasCarryOutLine)
    {
        hasCarryoutLine = _hasCarryOutLine;
        return hasCarryoutLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSettlementRequired</Name>
				<Source><![CDATA[
    public boolean parmIsSettlementRequired(boolean _isSettlementRequired = isSettlementRequired)
    {
        isSettlementRequired = _isSettlementRequired;
        return isSettlementRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes prpayments set.
    /// </summary>
    public void new()
    {
        prepaymentsSet = new Set(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustomerOrderInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from customer order info.
    /// </summary>
    /// <param name="_custOrderInfo">
    /// Customer order info having the details of order.
    /// </param>
    public void initFromCustomerOrderInfo(CustomerOrderInfo _custOrderInfo)
    {
        this.parmRetailStoreId(_custOrderInfo.StoreId);
        this.parmRetailTerminalId(_custOrderInfo.TerminalId);
        this.parmRetailTransactionId(_custOrderInfo.TransactionId);
        this.parmRetailOrderChannelReferenceId(_custOrderInfo.ChannelReferenceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustomerOrderXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from customer order xml.
    /// </summary>
    /// <param name = "_custOrderXmlStr">The customer order xml string.</param>
    public void initFromCustomerOrderXml(str _custOrderXmlStr)
    {
        XmlDocument custOrderXml = new XmlDocument();
        custOrderXml.loadXml(_custOrderXmlStr);

        XmlElement xmlRoot = custOrderXml.documentElement().getNamedElement('StoreId');
        if (xmlRoot != null)
        {
            this.parmRetailStoreId(xmlRoot.text());
        }
        else
        {
            this.parmRetailStoreId('');
        }

        xmlRoot = custOrderXml.documentElement().getNamedElement('TerminalId');
        if (xmlRoot != null)
        {
            this.parmRetailTerminalId(xmlRoot.text());
        }
        else
        {
            this.parmRetailTerminalId('');
        }

        xmlRoot = custOrderXml.documentElement().getNamedElement('TransactionId');
        if (xmlRoot != null)
        {
            this.parmRetailTransactionId(xmlRoot.text());
        }
        else
        {
            this.parmRetailTransactionId('');
        }

        xmlRoot = custOrderXml.documentElement().getNamedElement('ChannelReferenceId');
        if (xmlRoot != null)
        {
            this.parmRetailOrderChannelReferenceId(xmlRoot.text());
        }
        else
        {
            this.parmRetailOrderChannelReferenceId('');
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>