<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDetailedTransByDimensionsDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerDetailedTransByDimensionsDP_CN</c> class provides data for the <c>LedgerDetailedTransactionsbyDimension_CN</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(LedgerDetailedTransByDimContract_CN))
]
public class LedgerDetailedTransByDimensionsDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    LedgerDetailedTransByDimensionsTmp_CN   detailedLedgerTransByDimensionsTmp_CN;
    LedgerDetailedTransByDimTmpParameter_CN ledgerDetailedTransByDimTmpParameter_CN;
    Map                                     openingBalancesMap;
    Map                                     openingDimensionBalancesMap;
    Map                                     balancesMap;
    TransDate                               toDate;
    TransDate                               fromDate;
    Name                                    dimensionAttributeName;
    AmountMSTDebCred                        otherDebit;
    AmountMSTDebCred                        otherCredit;
    Map                                     dimensionDebit;
    Map                                     dimensionCredit;
    AmountMST                               reportTotalDebit;
    AmountMST                               reportTotalCredit;
    AmountMST                               reportTotalBalance;

    #define.Others('Others')
    #Dimensions
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total debit and total credit amounts.
    /// </summary>
    /// <param name="_detailedLedgerTransByDimTmpLocal_CN">
    /// The <c>LedgerDetailedTransByDimensionsTmp_CN</c> table buffer.
    /// </param>
    private void calculateTotals(LedgerDetailedTransByDimensionsTmp_CN _detailedLedgerTransByDimTmpLocal_CN)
    {
        Name dimensionValueLocal;

        dimensionValueLocal = _detailedLedgerTransByDimTmpLocal_CN.DimensionValue ? _detailedLedgerTransByDimTmpLocal_CN.DimensionValue : #Others;

        if (dimensionDebit.exists(dimensionValueLocal))
        {
            dimensionDebit.insert(dimensionValueLocal, dimensionDebit.lookup(dimensionValueLocal) + _detailedLedgerTransByDimTmpLocal_CN.DebitAmount);
        }
        else
        {
            dimensionDebit.insert(dimensionValueLocal, _detailedLedgerTransByDimTmpLocal_CN.DebitAmount);
        }

        if (dimensionCredit.exists(dimensionValueLocal))
        {
            dimensionCredit.insert(dimensionValueLocal, dimensionCredit.lookup(dimensionValueLocal) + _detailedLedgerTransByDimTmpLocal_CN.CreditAmount);
        }
        else
        {
            dimensionCredit.insert(dimensionValueLocal, _detailedLedgerTransByDimTmpLocal_CN.CreditAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the balance of customer per main account in a map.
    /// </summary>
    /// <param name="_key">
    /// Customer Account Number.
    /// </param>
    /// <returns>
    /// The balance amount of the particular customer.
    /// </returns>
    private AmountMSTDebCred getBalances(str _key)
    {
        if (balancesMap.exists(_key))
        {
            return balancesMap.lookup(_key);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailedLedgerTransByDimensionsTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>LedgerDetailedTransByDimensionsTmp_CN</c> table.
    /// </summary>
    /// <returns>
    /// Data from the <c>LedgerDetailedTransByDimensionsTmp_CN</c> table for the report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerDetailedTransByDimensionsTmp_CN))
    ]
    public LedgerDetailedTransByDimensionsTmp_CN getDetailedLedgerTransByDimensionsTmp_CN()
    {
        return detailedLedgerTransByDimensionsTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of dimension based on dimension value.
    /// </summary>
    /// <param name="_dimensionName">
    /// Dimension Attribute Name.
    /// </param>
    /// <param name="_dimensionValueValue">
    /// Dimension Attribute Value.
    /// </param>
    /// <returns>
    /// Returns the dimension attribute name.
    /// </returns>
    private Name getDimensionValueName(Name _dimensionName, Name _dimensionValueValue)
    {
        Name dimensionValueName;

        if (_dimensionName && _dimensionValueValue)
        {
            dimensionValueName = DimensionAttributeValue::findByDimensionAttributeAndValue(
                DimensionAttribute::findByName(_dimensionName),
                _dimensionValueValue).getName();
        }

        return dimensionValueName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDetailedTransByDimTmpPara_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>LedgerDetailedTransByDimTmpParameter_CN</c> table.
    /// </summary>
    /// <returns>
    /// Data from the <c>LedgerDetailedTransByDimTmpParameter_CN</c> table for the report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerDetailedTransByDimTmpParameter_CN))
    ]
    public LedgerDetailedTransByDimTmpParameter_CN getLedgerDetailedTransByDimTmpPara_CN()
    {
        return ledgerDetailedTransByDimTmpParameter_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the opening balance of customer per main account in a map.
    /// </summary>
    /// <param name="_accountNum">
    /// Customer Account Number.
    /// </param>
    /// <param name="_openingBalancesMap">
    /// Map to be looked up.
    /// </param>
    /// <returns>
    /// The balance amount of the particular customer.
    /// </returns>
    private AmountMSTDebCred getOpeningBalance(MainAccountNum _accountNum, Map _openingBalancesMap)
    {
        if (_openingBalancesMap.exists(_accountNum))
        {
            return _openingBalancesMap.lookup(_accountNum);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalanceForAccountAndDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the opening balance of customer per dimension account and main account in a map.
    /// </summary>
    /// <param name="_key">
    /// Customer Account Number.
    /// </param>
    /// <param name="_openingDimensionBalancesMap">
    /// Map to be looked up.
    /// </param>
    /// <returns>
    /// The balance amount of the particular customer.
    /// </returns>
    private AmountMSTDebCred getOpeningBalanceForAccountAndDimension(str _key, Map _openingDimensionBalancesMap)
    {
        if (_openingDimensionBalancesMap.exists(_key))
        {
            return _openingDimensionBalancesMap.lookup(_key);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningDimensionBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup the opening balance of customer per dimension account in a map.
    /// </summary>
    /// <param name="_accountNum">
    /// Customer Account Number.
    /// </param>
    /// <param name="_dimValue">
    /// Dimension Attribute Value
    /// </param>
    /// <param name="_openingDimensionBalancesMap">
    /// Map to be looked up.
    /// </param>
    /// <returns>
    /// The opening balance amount of the particular customer.
    /// </returns>
    private AmountMSTDebCred getOpeningDimensionBalances(
        MainAccountNum  _accountNum,
        DimensionValue  _dimValue,
        Map             _openingDimensionBalancesMap)
    {
        if (_openingDimensionBalancesMap.exists(strFmt('%1-%2',_accountNum, _dimValue)))
        {
            return _openingDimensionBalancesMap.lookup(strFmt('%1-%2',_accountNum, _dimValue));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBalancesMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts balance of customer per main account in a map.
    /// </summary>
    /// <param name="_key">
    /// Customer Account Number.
    /// </param>
    /// <param name="_amount">
    /// The balance amount of the particular customer.
    /// </param>
    private void insertBalancesMap(str _key, AmountMSTDebCred _amount)
    {
        if (balancesMap.exists(_key))
        {
            balancesMap.insert(_key, balancesMap.lookup(_key) + _amount);
        }
        else
        {
            balancesMap.insert(_key, this.getOpeningBalanceForAccountAndDimension(_key, openingDimensionBalancesMap) + _amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDetailedLedgerTransByDimTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>LedgerDetailedTransByDimensionsTmp_CN</c> temp table.
    /// </summary>
    /// <param name="_detailedLedgerTransByDimTmpLocal_CN">
    /// The <c>LedgerDetailedTransByDimensionsTmp_CN</c> table buffer.
    /// </param>
    /// <param name="_isReportTotal">
    /// Optional boolean value.
    /// </param>
    /// <param name="_lastMainAccount">
    /// Customer Account Number.
    /// </param>
    /// <param name="_isMainAccountOpeningBalance">
    /// Optional boolean value.
    /// </param>
    /// <param name="_isDimensionOpeningBalance">
    /// Optional boolean value.
    /// </param>
    /// <param name="_insertTotals">
    /// Optional boolean value.
    /// </param>
    /// <param name="_isTransaction">
    /// Optional boolean value.
    /// </param>
    private void insertDetailedLedgerTransByDimTmp_CN(
        LedgerDetailedTransByDimensionsTmp_CN   _detailedLedgerTransByDimTmpLocal_CN,
        boolean                                 _isReportTotal = false,
        MainAccountNum                          _lastMainAccount = '',
        boolean                                 _isMainAccountOpeningBalance = false,
        boolean                                 _isDimensionOpeningBalance = false,
        boolean                                 _insertTotals = false,
        boolean                                 _isTransaction = false)
    {
        MapEnumerator       enumerator;
        AmountMSTDebCred    totalCredit;
        AmountMSTDebCred    totalDebit;
        AmountMSTDebCred    total;
        AmountMSTDebCred    totCredit;
        AmountMSTDebCred    totDebit;

        detailedLedgerTransByDimensionsTmp_CN.clear();

        // Insert for Beginning balance of Main Account
        if (_isMainAccountOpeningBalance)
        {
            detailedLedgerTransByDimensionsTmp_CN.Yr = _detailedLedgerTransByDimTmpLocal_CN.Yr;
            detailedLedgerTransByDimensionsTmp_CN.FromDate = fromDate;
            detailedLedgerTransByDimensionsTmp_CN.ToDate = toDate;
            detailedLedgerTransByDimensionsTmp_CN.AccountName = _detailedLedgerTransByDimTmpLocal_CN.AccountName;
            detailedLedgerTransByDimensionsTmp_CN.AccountNum = _detailedLedgerTransByDimTmpLocal_CN.AccountNum;
            // label : Beginning
            detailedLedgerTransByDimensionsTmp_CN.Txt = "@GLS100083";
            detailedLedgerTransByDimensionsTmp_CN.Balance = this.getOpeningBalance(_detailedLedgerTransByDimTmpLocal_CN.AccountNum, openingBalancesMap);
            detailedLedgerTransByDimensionsTmp_CN.Direction = detailedLedgerTransByDimensionsTmp_CN.Balance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmp_CN.Balance == 0) ? 0 : -1);

            detailedLedgerTransByDimensionsTmp_CN.doInsert();
        }

        // Insert for Beginning balance of Dimensions
        if (_isDimensionOpeningBalance)
        {
            detailedLedgerTransByDimensionsTmp_CN.AccountName = _detailedLedgerTransByDimTmpLocal_CN.AccountName;
            detailedLedgerTransByDimensionsTmp_CN.AccountNum = _detailedLedgerTransByDimTmpLocal_CN.AccountNum;
            detailedLedgerTransByDimensionsTmp_CN.DimAttrName = _detailedLedgerTransByDimTmpLocal_CN.DimAttrName;
            detailedLedgerTransByDimensionsTmp_CN.DimensionValue = _detailedLedgerTransByDimTmpLocal_CN.DimensionValue;
            // label : Beginning
            detailedLedgerTransByDimensionsTmp_CN.Txt = "@GLS100083";
            detailedLedgerTransByDimensionsTmp_CN.Balance = this.getOpeningDimensionBalances(_detailedLedgerTransByDimTmpLocal_CN.AccountNum, _detailedLedgerTransByDimTmpLocal_CN.DimensionValue ,openingDimensionBalancesMap);
            detailedLedgerTransByDimensionsTmp_CN.Direction = detailedLedgerTransByDimensionsTmp_CN.Balance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmp_CN.Balance == 0) ? 0 : -1);

            detailedLedgerTransByDimensionsTmp_CN.doInsert();
        }

        if (_detailedLedgerTransByDimTmpLocal_CN.DimensionValue != '' && _isTransaction)
        {
            detailedLedgerTransByDimensionsTmp_CN.AccountName = _detailedLedgerTransByDimTmpLocal_CN.AccountName;
            detailedLedgerTransByDimensionsTmp_CN.AccountNum = _detailedLedgerTransByDimTmpLocal_CN.AccountNum;
            detailedLedgerTransByDimensionsTmp_CN.DebitAmount = _detailedLedgerTransByDimTmpLocal_CN.DebitAmount;
            detailedLedgerTransByDimensionsTmp_CN.CreditAmount = _detailedLedgerTransByDimTmpLocal_CN.CreditAmount;
            detailedLedgerTransByDimensionsTmp_CN.Voucher = _detailedLedgerTransByDimTmpLocal_CN.Voucher;
            detailedLedgerTransByDimensionsTmp_CN.Txt = _detailedLedgerTransByDimTmpLocal_CN.Txt;
            detailedLedgerTransByDimensionsTmp_CN.Yr = _detailedLedgerTransByDimTmpLocal_CN.Yr;
            detailedLedgerTransByDimensionsTmp_CN.Month = _detailedLedgerTransByDimTmpLocal_CN.Month;
            detailedLedgerTransByDimensionsTmp_CN.Day = _detailedLedgerTransByDimTmpLocal_CN.Day;
            detailedLedgerTransByDimensionsTmp_CN.Balance = this.getBalances(strFmt('%1-%2',_detailedLedgerTransByDimTmpLocal_CN.AccountNum,_detailedLedgerTransByDimTmpLocal_CN.DimensionValue));
            detailedLedgerTransByDimensionsTmp_CN.DimAttrName = _detailedLedgerTransByDimTmpLocal_CN.DimAttrName;
            detailedLedgerTransByDimensionsTmp_CN.DimensionValue = _detailedLedgerTransByDimTmpLocal_CN.DimensionValue;
            detailedLedgerTransByDimensionsTmp_CN.Direction = detailedLedgerTransByDimensionsTmp_CN.Balance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmp_CN.Balance == 0) ? 0 : -1);
            detailedLedgerTransByDimensionsTmp_CN.FromDate = _detailedLedgerTransByDimTmpLocal_CN.FromDate;
            detailedLedgerTransByDimensionsTmp_CN.ToDate = _detailedLedgerTransByDimTmpLocal_CN.ToDate;
            detailedLedgerTransByDimensionsTmp_CN.BeginningDirection = detailedLedgerTransByDimensionsTmp_CN.BeginningBalance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmp_CN.BeginningBalance == 0) ? 0 : -1);
            detailedLedgerTransByDimensionsTmp_CN.IsTotal = false;

            detailedLedgerTransByDimensionsTmp_CN.doInsert();
        }

        if (_insertTotals)
        {
            enumerator = dimensionDebit.getEnumerator();

            while (enumerator.moveNext())
            {
                if (enumerator.currentKey() != #Others)
                {
                    // Insert for Subtotal
                    totalDebit = enumerator.currentValue();
                    totalCredit = dimensionCredit.lookup(enumerator.currentKey());

                    detailedLedgerTransByDimensionsTmp_CN.AccountNum = _lastMainAccount;
                    detailedLedgerTransByDimensionsTmp_CN.AccountName = MainAccount::getLocalizedNameByMainAccountId(_lastMainAccount);
                    detailedLedgerTransByDimensionsTmp_CN.DimAttrName = this.getDimensionValueName(dimensionAttributeName,enumerator.currentKey());
                    // label : Subtotal
                    detailedLedgerTransByDimensionsTmp_CN.Txt = "@SYS7470";
                    detailedLedgerTransByDimensionsTmp_CN.DebitAmount = totalDebit;
                    detailedLedgerTransByDimensionsTmp_CN.CreditAmount = totalCredit;
                    detailedLedgerTransByDimensionsTmp_CN.Balance = this.getBalances(strFmt('%1-%2',_lastMainAccount, enumerator.currentKey()));
                    detailedLedgerTransByDimensionsTmp_CN.Direction = detailedLedgerTransByDimensionsTmp_CN.Balance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmp_CN.Balance == 0) ? 0 : -1);
                    total += detailedLedgerTransByDimensionsTmp_CN.Balance;
                    totCredit += totalCredit;
                    totDebit += totalDebit;
                    detailedLedgerTransByDimensionsTmp_CN.Direction = detailedLedgerTransByDimensionsTmp_CN.Balance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmp_CN.Balance == 0) ? 0 : -1);
                    detailedLedgerTransByDimensionsTmp_CN.IsTotal = true;

                    detailedLedgerTransByDimensionsTmp_CN.doInsert();
                }
            }

            // Insert for Others
            detailedLedgerTransByDimensionsTmp_CN.clear();
            if (dimensionDebit.exists(#Others))
            {
                totalDebit = dimensionDebit.lookup(#Others);
            }
            else
            {
                totalDebit = 0;
            }

            if (dimensionCredit.exists(#Others))
            {
                totalCredit = dimensionCredit.lookup(#Others);
            }
            else
            {
                totalCredit = 0;
            }

            detailedLedgerTransByDimensionsTmp_CN.AccountNum = _lastMainAccount;
            detailedLedgerTransByDimensionsTmp_CN.AccountName = MainAccount::getLocalizedNameByMainAccountId(_lastMainAccount);
            // label : Others
            detailedLedgerTransByDimensionsTmp_CN.DimAttrName = "@SYS118908";
            // label : Subtotal
            detailedLedgerTransByDimensionsTmp_CN.Txt = "@SYS7470";
            detailedLedgerTransByDimensionsTmp_CN.DebitAmount = totalDebit;
            detailedLedgerTransByDimensionsTmp_CN.CreditAmount = totalCredit;

            detailedLedgerTransByDimensionsTmp_CN.Balance = this.getOpeningBalance(_lastMainAccount, openingBalancesMap) + (totalDebit - totalCredit);
            detailedLedgerTransByDimensionsTmp_CN.Direction = detailedLedgerTransByDimensionsTmp_CN.Balance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmp_CN.Balance == 0) ? 0 : -1);
            total += detailedLedgerTransByDimensionsTmp_CN.Balance;
            totCredit += totalCredit;
            totDebit += totalDebit;
            detailedLedgerTransByDimensionsTmp_CN.Direction = detailedLedgerTransByDimensionsTmp_CN.Balance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmp_CN.Balance == 0) ? 0 : -1);
            detailedLedgerTransByDimensionsTmp_CN.IsTotal = true;

            detailedLedgerTransByDimensionsTmp_CN.doInsert();

            // Insert for Total
            detailedLedgerTransByDimensionsTmp_CN.clear();

            detailedLedgerTransByDimensionsTmp_CN.AccountNum = _lastMainAccount;
            detailedLedgerTransByDimensionsTmp_CN.AccountName = MainAccount::getLocalizedNameByMainAccountId(_lastMainAccount);
            // label : Total
            detailedLedgerTransByDimensionsTmp_CN.Txt = "@SYS182563";
            detailedLedgerTransByDimensionsTmp_CN.Balance = Total;
            detailedLedgerTransByDimensionsTmp_CN.CreditAmount = totCredit;
            detailedLedgerTransByDimensionsTmp_CN.DebitAmount = totDebit;
            detailedLedgerTransByDimensionsTmp_CN.Direction = detailedLedgerTransByDimensionsTmp_CN.Balance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmp_CN.Balance == 0) ? 0 : -1);
            detailedLedgerTransByDimensionsTmp_CN.IsTotal = true;
            reportTotalDebit += totDebit;
            reportTotalCredit += totCredit;
            reportTotalBalance += total;

            detailedLedgerTransByDimensionsTmp_CN.doInsert();
        }

        // Insert for Report total
        if (_isReportTotal)
        {
            // label : Report total
            detailedLedgerTransByDimensionsTmp_CN.Txt = "@SYS12133";
            detailedLedgerTransByDimensionsTmp_CN.Balance = reportTotalBalance;
            detailedLedgerTransByDimensionsTmp_CN.CreditAmount = reportTotalCredit;
            detailedLedgerTransByDimensionsTmp_CN.DebitAmount = reportTotalDebit;
            detailedLedgerTransByDimensionsTmp_CN.Direction = detailedLedgerTransByDimensionsTmp_CN.Balance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmp_CN.Balance == 0) ? 0 : -1);
            detailedLedgerTransByDimensionsTmp_CN.IsTotal = true;

            detailedLedgerTransByDimensionsTmp_CN.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOpeningBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts opening balance of customer per main account and dimension in corresponding map.
    /// </summary>
    /// <param name="_postingLayer">
    /// Posting layer.
    /// </param>
    /// <param name="_fromAccount">
    /// Customer Account Number.
    /// </param>
    /// <param name="_toAccount">
    /// Customer Account Number.
    /// </param>
    /// <param name="_dimensionAttributeRecId">
    /// RecId of the Dimension Attribute.
    /// </param>
    private void insertOpeningBalances(
        CurrentOperationsTax _postingLayer,
        MainAccountNum _fromAccount,
        MainAccountNum _toAccount,
        RecId _dimensionAttributeRecId)
    {
        DimensionAttributeLevelValueView        dimensionAttributeLevelValueView;
        DimensionAttributeValueCombination      dimensionAttributeValueCombination;
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        MainAccount                             mainAccount;

        while select RecId from generalJournalEntry
            group by mainAccount.MainAccountId, dimensionAttributeLevelValueView.DisplayValue
            where generalJournalEntry.AccountingDate    <  fromDate
                && generalJournalEntry.PostingLayer     == _postingLayer
                && generalJournalEntry.Ledger           == Ledger::current()
        join sum(AccountingCurrencyAmount) from generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join RecId from dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
        join RecId,MainAccountId, Name from mainAccount
            where mainAccount.RecId             == dimensionAttributeValueCombination.MainAccount
                && mainAccount.MainAccountId    >= _fromAccount
                && mainAccount.MainAccountId    <= _toAccount
        outer join DisplayValue,DimensionAttribute from dimensionAttributeLevelValueView
            order by mainAccount.MainAccountId,dimensionAttributeLevelValueView.DisplayValue
            where dimensionAttributeLevelValueView.ValueCombinationRecId    == generalJournalAccountEntry.LedgerDimension
                && dimensionAttributeLevelValueView.DimensionAttribute      == _dimensionAttributeRecId
        {
            // Get opening balances for all related main accounts
            if (openingBalancesMap.exists(mainAccount.MainAccountId))
            {
                openingBalancesMap.insert(mainAccount.MainAccountId, openingBalancesMap.lookup(mainAccount.MainAccountId) + generalJournalAccountEntry.AccountingCurrencyAmount);
            }
            else
            {
                openingBalancesMap.insert(mainAccount.MainAccountId, generalJournalAccountEntry.AccountingCurrencyAmount);
            }

            // Get opening balances for all related dimension accounts
            if (openingDimensionBalancesMap.exists(strFmt('%1-%2',mainAccount.MainAccountId, dimensionAttributeLevelValueView.DisplayValue) ))
            {
                openingDimensionBalancesMap.insert(strFmt('%1-%2',mainAccount.MainAccountId, dimensionAttributeLevelValueView.DisplayValue), openingDimensionBalancesMap.lookup(strFmt('%1-%2',mainAccount.MainAccountId, dimensionAttributeLevelValueView.DisplayValue)) + generalJournalAccountEntry.AccountingCurrencyAmount);
            }
            else
            {
                openingDimensionBalancesMap.insert(strFmt('%1-%2',mainAccount.MainAccountId, dimensionAttributeLevelValueView.DisplayValue), generalJournalAccountEntry.AccountingCurrencyAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00104, funcName());

        DimensionAttributeLevelValueView        dimensionAttributeLevelValueView;
        DimensionAttributeValueCombination      dimensionAttributeValueCombination;
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalEntry_W                   generalJournalEntryW;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        MainAccount                             mainAccount;
        DimensionValue                          lastDimensionValue;
        MainAccountNum                          lastAccountNum;
        boolean                                 isVoucherCNUsed;
        LedgerDetailedTransByDimensionsTmp_CN   detailedLedgerTransByDimensionsTmpLocal_CN;
        int                                     lastYear;
        boolean                                 transactionExists;
        boolean                                 isFiscalYearChanged;
        boolean                                 isAccountNumChanged;
        boolean                                 isDimensionValueChanged;
        DimensionValue                          fromDimensionValue;
        DimensionValue                          toDimensionValue;
        RecId                                   dimensionAttributeRecId;
        CurrentOperationsTax                    postingLayer;
        MainAccountNum                          fromAccount;
        MainAccountNum                          toAccount;

        LedgerDetailedTransByDimContract_CN     contract = this.parmDataContract() as LedgerDetailedTransByDimContract_CN;

        openingBalancesMap = new Map(Types::String, Types::Real);
        openingDimensionBalancesMap  = new Map(Types::String, Types::Real);
        dimensionDebit = new Map(Types::String, Types::Real);
        dimensionCredit = new Map(Types::String, Types::Real);

        fromdimensionValue      = contract.parmFromDimensionValue();
        toDimensionValue        = contract.parmToDimensionValue();
        dimensionAttributeName  = contract.parmDimensionAttributeName();
        fromDate                = contract.parmFromDate();
        toDate                  = contract.parmToDate();
        postingLayer            = contract.parmPostingLayer();
        fromAccount             = contract.parmFromAccount();
        toAccount               = contract.parmToAccount();

        if (!fromDate)
        {
            fromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (!toDate)
        {
            toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (year(fromDate) != year(toDate))
        {
            fromDate = mkDate(1,1,year(toDate));
        }

        if (!fromAccount)
        {
            fromAccount = this.setMainAccountId(SelectionField::Min);
        }

        if (!toAccount)
        {
            toAccount = this.setMainAccountId(SelectionField::Max);
        }

        // Prepares parameter table data
        ledgerDetailedTransByDimTmpParameter_CN.FromAccount = fromAccount;
        ledgerDetailedTransByDimTmpParameter_CN.ToAccount   = toAccount;
        ledgerDetailedTransByDimTmpParameter_CN.insert();

        isVoucherCNUsed = LedgerParameters::isChineseVoucher_CN();

        dimensionAttributeRecId = DimensionAttribute::findByName(dimensionAttributeName).RecId;

        while select RecId, AccountingDate from generalJournalEntry
            where generalJournalEntry.AccountingDate    >= fromDate && generalJournalEntry.AccountingDate <= toDate
                && generalJournalEntry.PostingLayer     == postingLayer
                && generalJournalEntry.Ledger           == Ledger::current()
        outer join Voucher_CN from generalJournalEntryW
            where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
        join AccountingCurrencyAmount, Text, IsCredit from generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
        join RecId from dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
        join RecId, MainAccountId from mainAccount order by mainAccount.MainAccountId
            where mainAccount.RecId             == dimensionAttributeValueCombination.MainAccount
                && mainAccount.MainAccountId    >= fromAccount
                && mainAccount.MainAccountId    <= toAccount
        outer join DisplayValue,DimensionAttribute from dimensionAttributeLevelValueView
            where dimensionAttributeLevelValueView.ValueCombinationRecId    == generalJournalAccountEntry.LedgerDimension
                && dimensionAttributeLevelValueView.DimensionAttribute      == dimensionAttributeRecId
        {
            detailedLedgerTransByDimensionsTmpLocal_CN.Yr = year(generalJournalEntry.AccountingDate);
            detailedLedgerTransByDimensionsTmpLocal_CN.Month = mthOfYr(generalJournalEntry.AccountingDate);
            detailedLedgerTransByDimensionsTmpLocal_CN.Day = dayOfMth(generalJournalEntry.AccountingDate);
            detailedLedgerTransByDimensionsTmpLocal_CN.AccountNum    = mainAccount.MainAccountId;
            detailedLedgerTransByDimensionsTmpLocal_CN.AccountName  = MainAccount::getLocalizedName(mainAccount.RecId);

            if (!generalJournalAccountEntry.IsCredit)
            {
                detailedLedgerTransByDimensionsTmpLocal_CN.DebitAmount = generalJournalAccountEntry.AccountingCurrencyAmount;
                detailedLedgerTransByDimensionsTmpLocal_CN.CreditAmount = 0;
            }
            else
            {
                detailedLedgerTransByDimensionsTmpLocal_CN.DebitAmount = 0;
                detailedLedgerTransByDimensionsTmpLocal_CN.CreditAmount = -generalJournalAccountEntry.AccountingCurrencyAmount;
            }

            detailedLedgerTransByDimensionsTmpLocal_CN.Balance = 0;
            detailedLedgerTransByDimensionsTmpLocal_CN.TransDate = generalJournalEntry.AccountingDate;
            detailedLedgerTransByDimensionsTmpLocal_CN.Txt = generalJournalAccountEntry.Text;
            detailedLedgerTransByDimensionsTmpLocal_CN.Voucher =  isVoucherCNUsed ? generalJournalEntryW.Voucher_CN : subledgerVoucherGeneralJournalEntry::findByGeneralJournalEntry(generalJournalEntry).Voucher;

            if (dimensionAttributeLevelValueView.DimensionAttribute == dimensionAttributeRecId && dimensionAttributeLevelValueView.DisplayValue >= fromdimensionValue && dimensionAttributeLevelValueView.DisplayValue <= todimensionValue)
            {
                detailedLedgerTransByDimensionsTmpLocal_CN.DimensionValue = dimensionAttributeLevelValueView.DisplayValue;
                detailedLedgerTransByDimensionsTmpLocal_CN.DimAttrName = this.getDimensionValueName(dimensionAttributeName ,dimensionAttributeLevelValueView.DisplayValue );
            }
            else
            {
                detailedLedgerTransByDimensionsTmpLocal_CN.DimensionValue = '';
                detailedLedgerTransByDimensionsTmpLocal_CN.DimAttrName = '';
            }

            detailedLedgerTransByDimensionsTmpLocal_CN.Direction = detailedLedgerTransByDimensionsTmpLocal_CN.Balance > 0 ? 1 : ((detailedLedgerTransByDimensionsTmpLocal_CN.Balance == 0) ? 0 : -1);
            detailedLedgerTransByDimensionsTmpLocal_CN.FromDate = fromDate;
            detailedLedgerTransByDimensionsTmpLocal_CN.ToDate = toDate;

            detailedLedgerTransByDimensionsTmpLocal_CN.insert();
        }

        this.insertOpeningBalances(postingLayer, fromAccount, toAccount, dimensionAttributeRecId);

        while select * from detailedLedgerTransByDimensionsTmpLocal_CN
            order by detailedLedgerTransByDimensionsTmpLocal_CN.TransDate,
                     detailedLedgerTransByDimensionsTmpLocal_CN.AccountNum,
                     detailedLedgerTransByDimensionsTmpLocal_CN.DimensionValue
            where detailedLedgerTransByDimensionsTmpLocal_CN.TransDate >= fromDate
        {
            transactionExists = true;
            isAccountNumChanged = detailedLedgerTransByDimensionsTmpLocal_CN.AccountNum != lastAccountNum ? true : false;
            isFiscalYearChanged = detailedLedgerTransByDimensionsTmpLocal_CN.Yr != lastYear ? true :  false;
            isDimensionValueChanged = detailedLedgerTransByDimensionsTmpLocal_CN.DimensionValue != lastDimensionValue ? true : false;

            if (isFiscalYearChanged)
            {
                balancesMap = new Map(Types::String, Types::Real);
            }

            if (isAccountNumChanged)
            {
                if (lastAccountNum != '' )
                {
                    this.insertDetailedLedgerTransByDimTmp_CN(null, false, lastAccountNum, false, false, true);
                }

                dimensionDebit = new Map(Types::String, Types::Real);
                dimensionCredit = new Map(Types::String, Types::Real);

                this.insertDetailedLedgerTransByDimTmp_CN(detailedLedgerTransByDimensionsTmpLocal_CN, false, '', true);
            }

            if (isDimensionValueChanged)
            {
                if (detailedLedgerTransByDimensionsTmpLocal_CN.DimensionValue != '' && !balancesMap.exists(strFmt('%1-%2',detailedLedgerTransByDimensionsTmpLocal_CN.AccountNum, detailedLedgerTransByDimensionsTmpLocal_CN.DimensionValue)))
                {
                    this.insertDetailedLedgerTransByDimTmp_CN(detailedLedgerTransByDimensionsTmpLocal_CN, false, '', false, true);
                }
            }

            this.calculateTotals(detailedLedgerTransByDimensionsTmpLocal_CN);

            this.insertBalancesMap(strFmt('%1-%2', detailedLedgerTransByDimensionsTmpLocal_CN.AccountNum, detailedLedgerTransByDimensionsTmpLocal_CN.DimensionValue), detailedLedgerTransByDimensionsTmpLocal_CN.DebitAmount - detailedLedgerTransByDimensionsTmpLocal_CN.CreditAmount);

            if (detailedLedgerTransByDimensionsTmpLocal_CN.DimensionValue != '')
            {
                this.insertDetailedLedgerTransByDimTmp_CN(detailedLedgerTransByDimensionsTmpLocal_CN, false, '', false, false, false, true);
            }

            lastYear = detailedLedgerTransByDimensionsTmpLocal_CN.Yr;
            lastAccountNum = detailedLedgerTransByDimensionsTmpLocal_CN.AccountNum;
            lastDimensionValue = detailedLedgerTransByDimensionsTmpLocal_CN.DimensionValue;
        }

        if (dimensionDebit.elements() > 0 || dimensionCredit.elements() > 0)
        {
            this.insertDetailedLedgerTransByDimTmp_CN(null, false, lastAccountNum, false, false, true);
        }

        if (transactionExists)
        {
            this.insertDetailedLedgerTransByDimTmp_CN(null, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     set "From Account" or "To Account" value they are empty
    /// </summary>
    /// <param name="_minOrMax">
    ///     Judge From Account(Min Value) or To Account(Max Value)
    /// </param>
    /// <returns>
    ///     Main account Id
    /// </returns>
    private MainAccountNum setMainAccountId(SelectionField _minOrMax)
    {
        Query                   query;
        QueryRun                queryRun;
        MainAccount             mainAccount;
        MainAccountNum          MainAccountNum;
        QueryBuildDataSource    qbds;

        query = new Query();
        qbds = query.addDataSource(tableNum(MainAccount));
        qbds.addRange(fieldnum(MainAccount, LedgerChartOfAccounts)).value(queryValue(LedgerChartOfAccounts::current()));
        qbds.addSelectionField(fieldNum(MainAccount, MainAccountId), _minOrMax);

        queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            mainAccount     = queryRun.get(tableNum(MainAccount));
            MainAccountNum  = mainAccount.MainAccountId;
        }

        return MainAccountNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>