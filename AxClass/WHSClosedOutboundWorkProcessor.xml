<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSClosedOutboundWorkProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSClosedOutboundWorkProcessor</c> class processes closed outbound work.
/// </summary>
internal class WHSClosedOutboundWorkProcessor
{
    private boolean updateWorkInventTrans;
    private WHSClosedOutboundWorkPutLineProcessorFactory initialPutLineProcessorFactory;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        updateWorkInventTrans = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    [Hookable(false)]
    internal static WHSClosedOutboundWorkProcessor newDefault()
    {
        return new WHSClosedOutboundWorkProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWithPutLineProcessorFactory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class with a <c>WHSClosedOutboundWorkPutLineProcessorFactory</c> factory that will be used for creating the put line processor.
    /// </summary>    
    /// <param name = "_initialPutLineProcessorFactory">A <c>WHSClosedOutboundWorkPutLineProcessorFactory</c> factory that will be used to create put line processors.</param>
    /// <returns>A new instance of the class.</returns> 
    [Hookable(false)]
    internal static WHSClosedOutboundWorkProcessor newWithPutLineProcessorFactory(WHSClosedOutboundWorkPutLineProcessorFactory _initialPutLineProcessorFactory)
    {
        var processor =  WHSClosedOutboundWorkProcessor::newDefault();
        processor.initialPutLineProcessorFactory = _initialPutLineProcessorFactory;

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUpdateOfWorkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skips the update of <c>WHSWorkInventTrans</c> records.
    /// </summary>
    [Hookable(false)]
    internal void skipUpdateOfWorkInventTrans()
    {
        updateWorkInventTrans = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPutLineProcessorFactory</Name>
				<Source><![CDATA[
    private WHSClosedOutboundWorkPutLineProcessorFactory newPutLineProcessorFactory(WHSWorkTable _work)
    {
        if (!initialPutLineProcessorFactory)
        {
            return  WHSClosedOutboundWorkPutLineProcessorFactory::newFromWork(_work);
        }

        return initialPutLineProcessorFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the processing related to closed outbound work.
    /// </summary>
    /// <param name = "_work">The work that should be processed.</param>
    [Hookable(false)]
    internal void process(WHSWorkTable _work)
    {
        WHSWorkLine workLine;
        boolean     firstPutFound;
        WHSClosedOutboundWorkPutLineProcessor putLineProcessor;

        ttsbegin;

        WhsInventTransPickIdAllocator pickIdAllocator;
        if (WHSInventTransPickIdAllocationConfigurationProvider::isInventTransPickIdAllocationEnabled())
        {
            pickIdAllocator = this.initializePickIdAllocator(_work);
        }

        // This routine loops through work lines to process the final put work lines (only the final put lines)
        while select workLine
        order by LineNum desc
        where  workLine.WorkId == _work.WorkId
            && workLine.WorkStatus != WHSWorkStatus::Cancelled
        {
            if (workLine.WorkType == WHSWorkType::Put)
            {
                if (!putLineProcessor)
                {
                    putLineProcessor = this.newPutLineProcessorFactory(_work).createProcessor(_work);
                    putLineProcessor.parmPickIdAllocator(pickIdAllocator);
                    firstPutFound = true;
                }

                putLineProcessor.process(workLine);
            }
            else if (firstPutFound)
            {
                break;
            }
        }

        if (pickIdAllocator)
        {
            pickIdAllocator.allocationComplete();
        }

        if (updateWorkInventTrans)
        {
            // Remove all the flags that state that work has the reservation
            _work.unMarkWorkInventTransWorkHasReservation();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePickIdAllocator</Name>
				<Source><![CDATA[
    protected WhsInventTransPickIdAllocator initializePickIdAllocator(WHSWorkTable _work)
    {        
        // Sorted inventory picking groups all picks and puts so no useful information can come from work
        if (_work.WorkTransType == WHSWorkTransType::SortedInventoryPicking)
        {
            return WhsOutboundSortingInventTransPickIdAllocator::construct();
        }
        else
        {
            WhsWorkTableInventTransPickIdAllocator workTablePickIdAllocator = WhsWorkTableInventTransPickIdAllocator::construct();
            workTablePickIdAllocator.assignWorkTable(_work);
                
            return workTablePickIdAllocator;            
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>