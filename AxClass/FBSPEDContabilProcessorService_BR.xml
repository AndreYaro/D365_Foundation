<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSPEDContabilProcessorService_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBSPEDContabilProcessorService_BR</c> class performs SPED Contabil processing.
/// </summary>
public class FBSPEDContabilProcessorService_BR extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process SPED Contabil file.
    /// </summary>
    /// <param name="_contract">
    /// An instance of class <c>FBSPEDContabilProcessorContract_BR</c> representing the contract for the service.
    /// </param>
    public void process(FBSPEDContabilProcessorContract_BR _contract)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10012, funcName());

        RunbaseProgress                     progress;
        FBSpedFileCreator_Contabil_BR       fileCreator;
        FBSPEDContabilSetupParameters_BR    spedContabilSetupParameters;
        FBFile_BR                           fbFile;

        spedContabilSetupParameters = FBSPEDContabilSetupParameters_BR::find(_contract.parmFiscalOrganization());
        
        this.setFilename(_contract);

        fbFile                      = new FBFile_BR(_contract.parmFileName(), "@FBK66");

        changeCompany(spedContabilSetupParameters.DataArea)
        {
            progress    = this.getProgressController(_contract);

            switch (_contract.parmLayoutVersion())
            {
                case FBSPEDContabilLayoutVersion_BR::v200:
                    fileCreator = new FBSpedFileCreator_Contabil_BR(_contract, fbFile);
                    break;
                case FBSPEDContabilLayoutVersion_BR::v300:
                    fileCreator = new FBSpedFileCreator_Contabil_v300_BR(_contract, fbFile);
                    break;
                case FBSPEDContabilLayoutVersion_BR::v400:
                    fileCreator = new FBSpedFileCreator_Contabil_v400_BR(_contract, fbFile);
                    break;
                case FBSPEDContabilLayoutVersion_BR::v500:
                    fileCreator = new FBSpedFileCreator_Contabil_v500_BR(_contract, fbFile);
                    break;
                case FBSPEDContabilLayoutVersion_BR::v600:
                    fileCreator = new FBSpedFileCreator_Contabil_v600_BR(_contract, fbFile);
                    break;
                case FBSPEDContabilLayoutVersion_BR::v700:
                    fileCreator = new FBSpedFileCreator_Contabil_v700_BR(_contract, fbFile);
                    break;
                case FBSPEDContabilLayoutVersion_BR::v800:
                    fileCreator = new FBSpedFileCreator_Contabil_v800_BR(_contract, fbFile);
                    break;
                case FBSPEDContabilLayoutVersion_BR::v900:
                    fileCreator = new FBSpedFileCreator_Contabil_v900_BR(_contract, fbFile);
                    break;
                default:
                    throw error(error::wrongUseOfFunction(funcName()));
            }

            fileCreator.parmRunBaseProgress(progress);
            fileCreator.exportFile();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilename</Name>
				<Source><![CDATA[
    private void setFilename(FBSPEDContabilProcessorContract_BR _contract)
    {
        str tempFile = System.IO.Path::Combine(System.IO.Path::GetTempPath(), strFmt('%1', newGuid()));

        _contract.parmFileName(tempFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates conditions to generate a valid SPED Contabil file
    /// </summary>
    /// <param name="_contract">
    /// The <c>FBSPEDContabilProcessorContract_BR</c> object with the parameters to generate the SPED Contabil
    /// </param>
    public void validate(FBSPEDContabilProcessorContract_BR _contract)
    {
        FBSPEDContabilSetupParameters_BR    spedContabilSetupParameters;
        boolean                             isValid = true;

        spedContabilSetupParameters = FBSPEDContabilSetupParameters_BR::find(_contract.parmFiscalOrganization());

        changeCompany(spedContabilSetupParameters.DataArea)
        {
            isValid = this.validateChartOfAccounts() && isValid;
            isValid = this.validateClosing(_contract) && isValid;
            isValid = this.validateTransactionExistsInPeriod(_contract) && isValid;
        }

        if (isValid)
        {
            info("@SYS315469");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChartOfAccounts</Name>
				<Source><![CDATA[
    private boolean validateChartOfAccounts()
    {
        MainAccount mainAccount;
        boolean     isValid = true;

        while select mainAccount
            where   mainAccount.LedgerChartOfAccounts == Ledger::chartOfAccounts()
            &&      mainAccount.Type    != DimensionLedgerAccountType::Reporting
        {
            if (!mainAccount.ParentMainAccount && !mainAccount.hasChildAccount())
            {
                warning(strFmt("@FBK4520010", mainAccount.MainAccountId));

                isValid = false;
            }
            else if (!mainAccount.hasChildAccount())
            {
                if (mainAccount.getAccountLevel() < 4)
                {
                    warning(strFmt("@FBK244", mainAccount.MainAccountId));

                    isValid = false;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateClosing</Name>
				<Source><![CDATA[
    private boolean validateClosing(FBSPEDContabilProcessorContract_BR _contract)
    {
        FiscalCalendarYear      fiscalCalendarYear;
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        GeneralJournalEntry     generalJournalEntry;

        fiscalCalendarYear  = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), _contract.parmFromDate());

        select firstOnly RecId from fiscalCalendarPeriod
            where   fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                &&  fiscalCalendarPeriod.Type               == FiscalPeriodType::Closing;

        select firstOnly generalJournalEntry
            where   generalJournalEntry.FiscalCalendarPeriod    == fiscalCalendarPeriod.RecId
                &&  generalJournalEntry.Ledger                  == Ledger::current();

        if (!generalJournalEntry)
        {
            warning(strFmt("@FBK243", fiscalCalendarYear.Name));

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionExistsInPeriod</Name>
				<Source><![CDATA[
    private boolean validateTransactionExistsInPeriod(FBSPEDContabilProcessorContract_BR _contract)
    {
        GeneralJournalEntry generalJournalEntry;

        select firstOnly generalJournalEntry
            where   generalJournalEntry.AccountingDate  <= endmth(_contract.parmFromDate())
                &&  generalJournalEntry.Ledger          == Ledger::current();

        if (!generalJournalEntry)
        {
            warning(strFmt("@FBK242", endmth(_contract.parmFromDate())));

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>