<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>psaSummaryActivity</Name>
	<SourceCode>
		<Declaration><![CDATA[
class psaSummaryActivity
{
    Hours                       totalEffort;
    Hours                       scheduledEffort;
    DaysAsReal                  totalDuration;
    date                        startDate;
    date                        endDate;
    ProjId                      id;
    boolean                     isSummary;
    boolean                     absTemplate;
    PSATmpSchedEmplReservation  psaTmpSchedEmplReservation;
    PSATmpSchedProjActivity     projActivity;
    PSASchedule                 psaSchedule;
    PSASchedule                 psaScheduleTmp;
    CalendarId                  calendarId;
    Stack                       stack;
    container                   schedule;
    int                         countFull1,countNot1,countPartial1;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcScheduleStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PSASchedule calcScheduleStatus(PSASchedule _psaSchedule)
    {
        PSASchedule psaScheduleLoc;

        psaScheduleLoc = PSAScheduled::NotScheduled;

        if (_psaSchedule == PSAScheduled::FullyScheduled)
        {
            countFull1++;
        }
        else if (_psaSchedule == PSAScheduled::PartiallyScheduled)
        {
            countPartial1++;
        }
        else if (_psaSchedule == PSAScheduled::NotScheduled)
        {
            countNot1++;
        }

        if ((countFull1 && countNot1)
            || (countFull1 && countPartial1)
            || (countPartial1))
        {
            psaScheduleLoc = PSAScheduled::PartiallyScheduled;
        }
        else if (countFull1)
        {
            psaScheduleLoc = PSAScheduled::FullyScheduled;
        }
        else if (countNot1)
        {
            psaScheduleLoc = PSAScheduled::NotScheduled;
        }
        return psaScheduleLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSchedulingInfo</Name>
				<Source><![CDATA[
    private void calcSchedulingInfo(HierarchyIdBase    _hierarchyIdLoc,
                                    ElementNumber      _elementNumber,
                                    date               _startDate = dateNull(),
                                    boolean            _update    = false,
                                    boolean            _insertRes = false)
    {
        HierarchyTreeTable      hierarchyTreeTableLoc;
        smmActivities           smmActivities;
        PSAActivitySetup        psaActivitySetup;
        ResAssignmentView       resAssignmentView;
        PSATmpSchedProjActivity psaTmpSchedProjActivity;

        #ResApplPSA

        select forupdate psaActivitySetup
            join RecId from smmActivities
                where smmActivities.ActivityNumber == psaActivitySetup.ActivityNumber
            join hierarchyTreeTableLoc
                where hierarchyTreeTableLoc.RefRecId      == smmActivities.RecId
                    && hierarchyTreeTableLoc.HierarchyId   == _hierarchyIdLoc
                    && hierarchyTreeTableLoc.ElementNumber == _elementNumber;

        if (!_update && psaActivitySetup)
        {
            if (!this.isABSTemplate())
            {
                if (!startDate)
                {
                    startDate = psaActivitySetup.psaSchedStart;
                }
                else
                {
                    startDate = (startDate < psaActivitySetup.psaSchedStart) ? startDate : psaActivitySetup.psaSchedStart;
                }
                endDate = (endDate > psaActivitySetup.psaSchedEnd) ? endDate : psaActivitySetup.psaSchedEnd;
            }
            calendarId = calendarId ? calendarId : psaActivitySetup.CalendarId;
            totalEffort += psaActivitySetup.Effort;
            ProjPlanVersion planVersion = ProjPlanVersion::findByActivityRecId(smmActivities.RecId);
            schedule += planVersion.TaskSchedulingStatus;
            psaTmpSchedProjActivity.setTmpData(this.parmPSATmpSchedProjActivity());
            select psaTmpSchedProjActivity
                where psaTmpSchedProjActivity.ActivityNumber == psaActivitySetup.ActivityNumber;
            if (psaTmpSchedProjActivity)
            {
                psaScheduleTmp = this.calcScheduleStatus(psaTmpSchedProjActivity.Scheduled);
            }
        }
        if (_update && psaActivitySetup)
        {
            ttsbegin;
            PSAProjActivitySchedule::newSchedule().scheduleProjActivity(psaActivitySetup, _startDate);
            psaActivitySetup.update();
            ttscommit;
        }
        if (_insertRes && psaActivitySetup)
        {
            if (psaActivitySetup.ActivityNumber)
            {
                RecId activity = smmActivities::find(psaActivitySetup.ActivityNumber).RecId;

                while select resAssignmentView
                    where resAssignmentView.Activity == activity
                {
                    psaTmpSchedEmplReservation.initFromAssignmentRecord(resAssignmentView);
                    scheduledEffort += (psaTmpSchedEmplReservation.EndTime - psaTmpSchedEmplReservation.StartTime) / #Seconds;
                    psaTmpSchedEmplReservation.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSummary</Name>
				<Source><![CDATA[
    private void calcSummary(HierarchyIdBase _hierarchyIdLoc,
                             ElementNumber   _elementNumber,
                             date            _startDate = dateNull(),
                             boolean         _update    = false,
                             boolean         _insertRes = false)
    {
        HierarchyTreeTable      hierarchyTreeTable;
        HierarchyIdBase         hierarchyId;
        ElementNumber           elementNumber;

        while select hierarchyTreeTable
            order by ParentElementNumber
            where hierarchyTreeTable.ParentElementNumber == _elementNumber
                && hierarchyTreeTable.HierarchyId        == _hierarchyIdLoc
        {
            if (_insertRes && HierarchyTreeTable::existChildActivityForParentElement(hierarchyTreeTable.RefRecId))
            {
                stack.push([hierarchyTreeTable.HierarchyId, hierarchyTreeTable.ElementNumber]);
            }
            else
            {
                this.calcSchedulingInfo(hierarchyTreeTable.HierarchyId, hierarchyTreeTable.ElementNumber, _startDate, _update, _insertRes);
            }
        }

        this.calcSummaryStack(hierarchyId, elementNumber, _startDate, _update, _insertRes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSummaryStack</Name>
				<Source><![CDATA[
    private void calcSummaryStack(HierarchyIdBase _hierarchyId,
                                 ElementNumber   _elementNumber,
                                 date            _startDate = dateNull(),
                                 boolean         _update    = false,
                                 boolean         _insertRes = false)
    {
        while (stack.qty())
        {
            [_hierarchyId, _elementNumber] = stack.pop();
            this.calcSummary(_hierarchyId, _elementNumber, _startDate, _update, _insertRes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAScheduled</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PSAScheduled getPSAScheduled()
    {
        int  counter,countFull,countNot,countPartcounteral;

        psaSchedule = PSAScheduled::NotScheduled;

        for (counter=1;counter<=conLen(schedule);counter++)
        {
            if (conPeek(schedule,counter) == PSAScheduled::FullyScheduled)
            {
                countFull++;
            }
            else if (conPeek(schedule,counter) == PSAScheduled::NotScheduled)
            {
                countNot++;
            }
            else if (conPeek(schedule,counter) == PSAScheduled::PartiallyScheduled)
            {
                countPartcounteral++;
            }
        }
        if (countFull == conLen(schedule) && conLen(schedule) != 0)
        {
            psaSchedule = PSAScheduled::FullyScheduled;
        }
        else if (countNot == conLen(schedule))
        {
            psaSchedule = PSAScheduled::NotScheduled;
        }
        else
        {
            psaSchedule = PSAScheduled::PartiallyScheduled;
        }
        return psaSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScheduledEffort</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Hours getScheduledEffort()
    {
        return scheduledEffort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScheduledStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PSASchedule getScheduledStatus()
    {
        return psaScheduleTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isABSTemplate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isABSTemplate(boolean _absTemplate = absTemplate)
    {
        absTemplate = _absTemplate;

        return absTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummary</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isSummary()
    {
        return isSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummaryActivity</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isSummaryActivity(RecId _recId)
    {
        HierarchyTreeTable hierarchyTreeTable;
        HierarchyTreeTable hierarchyTreeTableLoc;
        boolean            ret = false;

        hierarchyTreeTable = HierarchyTreeTable::findRecId(_recId);

        select hierarchyTreeTableLoc
            where hierarchyTreeTableLoc.ParentElementNumber == hierarchyTreeTable.ElementNumber
                && hierarchyTreeTableLoc.HierarchyId == hierarchyTreeTable.HierarchyId;

        if (hierarchyTreeTableLoc)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummaryProject</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HierarchyTreeTable isSummaryProject(Common _common)
    {
        Hierarchy          hierarchy;
        HierarchyLinkTable hierarchyLinkTable;
        HierarchyTreeTable hierarchyTreeTable;

        select hierarchyTreeTable
            join RecId from hierarchy
                where hierarchyTreeTable.HierarchyId == hierarchy.HierarchyId
                    && hierarchyTreeTable.ParentElementNumber == ''
            join RecId from hierarchyLinkTable
                where hierarchyLinkTable.RefRecId == _common.RecId
                    && hierarchyLinkTable.RefTableId == _common.TableId
                    && hierarchyLinkTable.HierarchyId == hierarchy.HierarchyId;

        return hierarchyTreeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainer</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmContainer()
    {
        container   sumContainer;

        sumContainer += this.isSummary();
        sumContainer += startDate;
        sumContainer += endDate;
        sumContainer += id;
        sumContainer += totalDuration;
        sumContainer += totalEffort;
        sumContainer += this.getPSAScheduled();

        return sumContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public date parmEndDate()
    {
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjActivityId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ProjId parmProjActivityId()
    {
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSATmpSchedEmplReservation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PSATmpSchedEmplReservation parmPSATmpSchedEmplReservation()
    {
        return psaTmpSchedEmplReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSATmpSchedProjActivity</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PSATmpSchedProjActivity parmPSATmpSchedProjActivity(PSATmpSchedProjActivity _projActivity = projActivity)
    {
        projActivity = _projActivity;
        return projActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public date parmStartDate()
    {
        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalDuration</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DaysAsReal parmTotalDuration()
    {
        return totalDuration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalEffort</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Hours parmTotalEffort(Hours _effort = totalEffort)
    {
        totalEffort = _effort;

        return totalEffort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container selectionChange(FormTreeItem _newItem, RecId _recId)
    {
        ProjTable           projTable;
        SalesQuotationTable salesQuotationTable;
        PSAActivitySetup    psaActivitySetup;
        smmActivities       smmActivities;
        HierarchyTreeTable  hierarchyTreeTable;
        TransDate           startDateLoc = dateNull(), endDateLoc = dateNull();
        Hours               effort = 0;
        boolean             canAssign;
        container           recIds;

        id = '';
        isSummary = false;
        if (_newItem.data() == tableNum(HierarchyTreeTable))
        {
            select ActivityNumber, psaSchedStart, psaSchedEnd, Effort, ActivityDuration from psaActivitySetup
                join ActivityNumber from smmActivities
                    where smmActivities.ActivityNumber == psaActivitySetup.ActivityNumber
                    join hierarchyTreeTable
                        where hierarchyTreeTable.RecId == _recId
                           && hierarchyTreeTable.RefRecId == smmActivities.RecId;

            this.treeTraversal(hierarchyTreeTable, dateNull(), false, true);
            recIds    = [psaActivitySetup.RecId, psaActivitySetup.TableId];
            id        = smmActivities.ActivityNumber;
            isSummary = this.isSummaryActivity(_recId);
            canAssign = psaActivitySetup && psaActivitySetup.psaSchedStart && psaActivitySetup.psaSchedEnd;
        }

        if (_newItem.data() == tableNum(ProjTable))
        {
            projTable = ProjTable::findRecId(_recId);
            this.treeTraversal(projTable, dateNull(), false, true);
            recIds              = [projTable.RecId, projTable.TableId];
            id                  = projTable.ProjId;
            if (ProjTable::child(projTable.ProjId))
            {
               isSummary = true;
            }
            else
            {
                hierarchyTreeTable  = this.isSummaryProject(projTable);
                isSummary           = HierarchyTreeTable_Extension::psaFindChildElement(hierarchyTreeTable.HierarchyId, hierarchyTreeTable.ElementNumber) ? true : false;
            }
        }

        if (_newItem.data() == tableNum(SalesQuotationTable))
        {
            salesQuotationTable = SalesQuotationTable::findRec(_recId);
            this.treeTraversal(salesQuotationTable, dateNull(), false, true);
            recIds      = [salesQuotationTable.RecId, salesQuotationTable.TableId];
            id          = salesQuotationTable.QuotationId;
            isSummary   = this.isSummaryProject(salesQuotationTable) ? true : false;
        }

        recIds += isSummary;
        recIds += canAssign;
        return recIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeTraversal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void treeTraversal(Common _common, date _startDate = dateNull(), boolean _update = false, boolean _insertRes = false)
    {
        HierarchyTreeTable      hierarchyTreeTableChild;
        ResAssignmentView       resAssignmentView;
        ResActivityTaskView     taskActivityView;
        ProjTable               projTable;
        ProjTable               projTableLoc;
        SalesQuotationTable     salesQuotationTable;
        PSATmpSchedProjActivity psaTmpSchedProjActivity;
        PSAActivitySetup        psaActivitySetup;
        #ResApplPSA

        startDate = dateNull();
        endDate = dateNull();
        totalEffort = 0;
        totalDuration = 0;
        psaTmpSchedEmplReservation = null;
        schedule = conNull();
        scheduledEffort = 0;
        countFull1 = 0;
        countNot1 = 0;
        countPartial1 = 0;
        psaTmpSchedProjActivity.setTmpData(this.parmPSATmpSchedProjActivity());

        stack = new Stack();
        switch (_common.TableId)
        {
            case tableNum(HierarchyTreeTable):
                hierarchyTreeTableChild = HierarchyTreeTable::findRecId(_common.RecId);
                if (hierarchyTreeTableChild && HierarchyTreeTable_Extension::psaFindChildElement(hierarchyTreeTableChild.HierarchyId, hierarchyTreeTableChild.ElementNumber))
                {
                    //---it is a summary activity
                    this.calcSummary(hierarchyTreeTableChild.HierarchyId, hierarchyTreeTableChild.ElementNumber, _startDate, _update, _insertRes);
                    //---update activity setup record
                    psaActivitySetup   = PSAActivitySetup::findActivityNumber(hierarchyTreeTableChild.activityNumber(), true);
                    if (psaActivitySetup)
                    {
                        ttsbegin;
                        psaActivitySetup.psaSchedStart     = startDate;
                        psaActivitySetup.psaSchedEnd       = endDate;
                        psaActivitySetup.Effort            = totalEffort;
                        psaActivitySetup.ActivityDuration  = WorkCalendarCalculator::calcDuration(startDate, endDate, calendarId);
                        psaActivitySetup.update();
                        ttscommit;
                    }
                }
                else
                {
                    this.calcSchedulingInfo(hierarchyTreeTableChild.HierarchyId, hierarchyTreeTableChild.ElementNumber, _startDate, _update, _insertRes);
                }

                //---only update projTable when selected reccord has child and it is on the root
                if (hierarchyTreeTableChild.ParentElementNumber == ""
                    && HierarchyTreeTable_Extension::psaFindChildElement(hierarchyTreeTableChild.HierarchyId, hierarchyTreeTableChild.ElementNumber))
                {
                    projTable = HierarchyLinkTable::findAssociation(hierarchyTreeTableChild.HierarchyId, tableNum(ProjTable));
                    if (projTable)
                    {
                        ttsbegin;
                        projTable.selectForUpdate(true);
                        projTable.psaSchedStartDate = startDate;
                        projTable.psaSchedEndDate   = endDate;
                        projTable.psaSchedEffort    = totalEffort;
                        projTable.psaSchedDuration  = WorkCalendarCalculator::calcDuration(startDate, endDate, calendarId);
                        projTable.update();
                        ttscommit;
                    }
                }
                break;

            case tableNum(ProjTable):
                projTable = ProjTable::findRecId(_common.RecId);

                while select forupdate projTableLoc
                    where projTableLoc.ProjId == projTable.ProjId
                {
                    hierarchyTreeTableChild = this.isSummaryProject(projTableLoc);
                    if (HierarchyTreeTable_Extension::psaFindChildElement(hierarchyTreeTableChild.HierarchyId, hierarchyTreeTableChild.ElementNumber))
                    {
                        this.calcSummary(hierarchyTreeTableChild.HierarchyId, hierarchyTreeTableChild.ElementNumber, _startDate, _update, _insertRes);
                    }
                    else
                    {
                        if (!ProjTable::child(projTableLoc.ProjId))
                        {
                            if (projTableLoc)
                            {
                                RecId locActivity = ActivityFacade::findActivityByProjectId(projTableLoc.ProjId);
                                
                                if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
                                {
                                    PSAProjSchedRole teamTable;

                                    while select resAssignmentView
                                        exists join teamTable
                                            where resAssignmentView.ActivityResource == teamTable.RecId
                                                && teamTable.RootActivity == locActivity
                                    {
                                        psaTmpSchedEmplReservation.initFromAssignmentRecord(resAssignmentView);
                                        scheduledEffort += (psaTmpSchedEmplReservation.EndTime - psaTmpSchedEmplReservation.StartTime) / #Seconds;
                                        psaTmpSchedEmplReservation.insert();
                                    }
                                }
                                else
                                {
                                    while select resAssignmentView
                                        exists join taskActivityView
                                        where resAssignmentView.Activity == taskActivityView.TaskActivity
                                            && taskActivityView.Activity == locActivity
                                    {
                                        psaTmpSchedEmplReservation.initFromAssignmentRecord(resAssignmentView);
                                        scheduledEffort += (psaTmpSchedEmplReservation.EndTime - psaTmpSchedEmplReservation.StartTime) / #Seconds;
                                        psaTmpSchedEmplReservation.insert();
                                    }
                                }
                            }
                            if (!startDate)
                            {
                                startDate = projTableLoc.psaSchedStartDate;
                            }
                            else
                            {
                                startDate = (startDate < projTableLoc.psaSchedStartDate) ? startDate : projTableLoc.psaSchedStartDate;
                            }
                            calendarId = calendarId ? calendarId : projTable.psaSchedCalendarId;
                            endDate = (endDate > projTableLoc.psaSchedEndDate) ? endDate : projTableLoc.psaSchedEndDate;
                            totalEffort += projTableLoc.psaSchedEffort;
                            ProjPlanVersionDetail planVersionDetail = ProjPlanVersionDetail::findLatestByProjId(projTable.ProjId);
                            ProjPlanVersion planVersion = ProjPlanVersion::getRootTask(planVersionDetail.HierarchyId);
                            schedule += planVersion.TaskSchedulingStatus;

                            select psaTmpSchedProjActivity
                                where psaTmpSchedProjActivity.ProjId == projTableLoc.ProjId
                                    && !psaTmpSchedProjActivity.ActivityNumber;
                            if (psaTmpSchedProjActivity)
                            {
                                psaScheduleTmp = this.calcScheduleStatus(psaTmpSchedProjActivity.Scheduled);
                            }
                        }
                    }
                }

                if (projTable)
                {
                    ttsbegin;
                    projTable.selectForUpdate(true);
                    projTable.psaSchedStartDate = startDate;
                    projTable.psaSchedEndDate   = endDate;
                    projTable.psaSchedEffort    = totalEffort;
                    projTable.psaSchedDuration  = WorkCalendarCalculator::calcDuration(startDate, endDate, calendarId);
                    projTable.psaSchedScheduled = ProjActivityCapacity::getProjStatus(projTable.ProjId);
                    projTable.update();
                    ttscommit;
                }
                break;

            case tableNum(SalesQuotationTable):
                salesQuotationTable = SalesQuotationTable::findRec(_common.RecId);
                if (salesQuotationTable)
                {
                    hierarchyTreeTableChild = this.isSummaryProject(salesQuotationTable);
                    if (HierarchyTreeTable_Extension::psaFindChildElement(hierarchyTreeTableChild.HierarchyId, hierarchyTreeTableChild.ElementNumber))
                    {
                        this.calcSummary(hierarchyTreeTableChild.HierarchyId, hierarchyTreeTableChild.ElementNumber, _startDate, _update, _insertRes);
                    }
                }
                if (salesQuotationTable)
                {
                    ttsbegin;
                    salesQuotationTable.selectForUpdate(true);
                    salesQuotationTable.psaEstProjStartDate = startDate;
                    salesQuotationTable.psaEstProjEndDate   = endDate;
                    salesQuotationTable.psaEstdProjDuration = WorkCalendarCalculator::calcDuration(startDate, endDate, calendarId);
                    salesQuotationTable.update();
                    ttscommit;
                }
                break;
        }
        totalDuration = WorkCalendarCalculator::calcDuration(startDate, endDate, calendarId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecords</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateRecords(ProjId _projId)
    {
        ProjTable   projTable;
        boolean     found = false;
        ProjId      sprojid = _projId;

        while (!found)
        {
            select ProjId, ParentId from projTable
                where projTable.ProjId == sprojid;
            if (projTable.ParentId)
            {
                this.treeTraversal(ProjTable::find(sprojid));
                sprojid = projTable.ParentId;
            }
            else
            {
                found = true;
            }
        }
        this.treeTraversal(projTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>