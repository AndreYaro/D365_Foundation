<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRunPackingSlipForContainerMessageType</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysMessageTypeFactoryAttribute(SysMessageType::RunPackingSlipForContainer)]
internal final class WHSRunPackingSlipForContainerMessageType extends SysMessageTypeMetadata
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDependencies</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal List getDependencies(SysMessage _message)
    {
        return new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSendMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean canSendMessage(SysMessageQueue _messageQueue, SysMessageTargetRecId _messageTarget, SysMessageTargetRecId _sourceMessageTarget)
    {
        return _messageQueue == SysMessageQueue::Warehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowedMessageStateTransitions</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Enumerator getAllowedMessageStateTransitions()
    {
        return SysMessageStateTransition::getProcessedCancelledStateTransitions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMessageStateTransition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void processMessageStateTransition(SysMessage _message, SysMessageStateTransition _messageStateTransition)
    {
        if (_messageStateTransition.isEqual(SysMessageStateTransition::newFromStates(SysMessageState::Queued, SysMessageState::Processed)))
        {
            this.processMessage(_message.Content);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMessage</Name>
				<Source><![CDATA[
    private void processMessage(SysMessageContent _messageContent)
    {
        WHSRunPackingSlipForContainerMessageContract contract = this.deserializeContract(_messageContent);

        this.validateContract(contract);
        
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(contract.parmContainerId());
        WhsShipConfirm shipConfirm = new WhsShipConfirm();
        shipConfirm.runPackingSlipWithParametersForContainer(containerTable, contract.parmPackingSlipPostingParametersId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContract</Name>
				<Source><![CDATA[
    private void validateContract(WHSRunPackingSlipForContainerMessageContract _contract)
    {
        if (!_contract.parmContainerId() || !_contract.parmPackingSlipPostingParametersId())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        if (!WHSContainerTable::findByContainerId(_contract.parmContainerId()))
        {
            throw error(strFmt('@WAX:RunPackingSlipForContainerMessage_ContainerDoesNotExist', _contract.parmContainerId()));
        }

        WHSPackingSlipPostingParameters packingSlipPostingParameters = WHSPackingSlipPostingParameters::find(_contract.parmPackingSlipPostingParametersId());
        if (!packingSlipPostingParameters)
        {
            throw error(strFmt('@WAX:RunPackingSlipForContainerMessage_PackingSlipParametersDoNotExist', _contract.parmPackingSlipPostingParametersId()));
        }

        this.validatePackingSlipPostingParameters(packingSlipPostingParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePackingSlipPostingParameters</Name>
				<Source><![CDATA[
    private void validatePackingSlipPostingParameters(WHSPackingSlipPostingParameters _packingSlipPostingParameters)
    {
        if (!_packingSlipPostingParameters.PrintFormLetter)
        {
            return;
        }
        else if (!_packingSlipPostingParameters.UsePrintManagementDestination
            && (FormLetter::isClientOutput(_packingSlipPostingParameters.PrinterSettingsFormLetter)
                || FormLetter::isClientOutput(_packingSlipPostingParameters.PrinterSettingsFormLetterCopy)))
        {
            throw error('@SYS118708');
        }
        else if (_packingSlipPostingParameters.UsePrintManagementDestination)
        {
            FormLetterPrintManagementValidate printManagementValidate = new FormLetterPrintManagementValidate();
            if (printManagementValidate.checkClientOutputPrintManagement(PrintMgmtDocumentType::SalesOrderPackingSlip, PrintMgmtNodeType::Sales))
            {
                throw error(printManagementValidate.printerSetupErrorText);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserializeContract</Name>
				<Source><![CDATA[
    private WHSRunPackingSlipForContainerMessageContract deserializeContract(SysMessageContent _messageContent)
    {
        return FormJsonSerializer::deserializeObject(classNum(WHSRunPackingSlipForContainerMessageContract), _messageContent);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>