<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHRMReport_T6a</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RHRMReport_T6a extends RHRMReportVacation implements BatchRetryable
{
    RHRMOrderTable          orderTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    public str animationBoxCaption()
    {
        return "@RUP1722";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    public str animationBoxText()
    {
        return "@RUP1821";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    public void initData(Args _args)
    {
        super(_args);
        orderTable = _args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    #define.Value10(10)
    #define.Value11(11)
    private void printReport(RHRMOrderTrans _orderTransX,
                             RHRMOrderTrans _orderTransY,
                             int            _countPass,
                             boolean        _isY = true)
    {
        RPayHistory         payHistory;
        RHRMOrderTrans      orderTransBasic, orderTransExtra;
        RPayVacationType    vacationTypeX, vacationTypeY;
        TransDate           startDateTotal, endDateTotal;
        RHRMPeriod          calendarDayNumberTotal;

        wordDocument.tableGoToCell(_countPass, 1);
        wordDocument.tableInsertRowsBelow();

        wordDocument.tableInsertValue(_countPass,1, _orderTransX.emplName());
        wordDocument.tableInsertValue(_countPass,#Value2, _orderTransX.EmplId);
        payHistory = RPayHistory::findLastSignOnMove(_orderTransX.EmplId, _orderTransX.StartDate, _orderTransX.RecId);
        wordDocument.tableInsertValue(_countPass,#Value3, payHistory.organizationFull());
        wordDocument.tableInsertValue(_countPass,#Value4, payHistory.titleId());

        vacationTypeX = _orderTransX.payVacationType();
        if (_orderTransY.RecId && _isY)
        {
            vacationTypeY = _orderTransY.payVacationType();
        }

        if (vacationTypeX == RPayVacationType::Basic)
        {
            orderTransBasic = _orderTransX;
        }
        else
        {
            orderTransExtra = _orderTransX;
        }

        if (_orderTransY.RecId && _isY)
        {
            if (vacationTypeY == RPayVacationType::Basic)
            {
                orderTransBasic = _orderTransY;
            }
            else
            {
                orderTransExtra = _orderTransY;
            }
        }

        if (orderTransBasic.RecId)
        {
            wordDocument.tableInsertValue(_countPass, #Value5, int2str(orderTransBasic.calendarDayNumber()));
        }

        if (orderTransExtra.RecId)
        {
            wordDocument.tableInsertValue(_countPass, #Value6, this.delimiter(int2str(orderTransExtra.calendarDayNumber()),
                                          this.codeDescription(orderTransExtra.VacationTypeId,
                                          RHRMVacationType::find(orderTransExtra.VacationTypeId).Description), "@GLS116882"));
        }

        if (_orderTransX.StartPeriodDate)
        {
            wordDocument.tableInsertValue(_countPass, #Value7,  this.dateInNumber(_orderTransX.StartPeriodDate));
        }

        if (_orderTransX.EndPeriodDate)
        {
            wordDocument.tableInsertValue(_countPass, #Value8,  this.dateInNumber(_orderTransX.EndPeriodDate));
        }

        startDateTotal = _orderTransX.StartDate;
        calendarDayNumberTotal = _orderTransX.calendarDayNumber();
        if (_orderTransY.RecId && _isY)
        {
            endDateTotal = _orderTransY.EndDate;
            calendarDayNumberTotal += _orderTransY.calendarDayNumber();
        }
        else
        {
            endDateTotal = _orderTransX.EndDate;
        }

        wordDocument.tableInsertValue(_countPass, #Value9, int2str(calendarDayNumberTotal));

        if (startDateTotal)
        {
            wordDocument.tableInsertValue(_countPass, #Value10, this.dateInNumber(startDateTotal));
        }
        if (endDateTotal)
        {
            wordDocument.tableInsertValue(_countPass, #Value11, this.dateInNumber(endDateTotal));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RHRMOrderTrans          orderTransX, orderTransY, hrmOrderTrans;
        int                     countPass = #Value5;

        wordDocument.insertFieldValue(#CI_Name,                CompanyInfo::find().Name);
        wordDocument.insertFieldValue(#CI_CodeOKPO_RU,         CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), orderTable.TransDate));
        wordDocument.insertFieldValue(#OT_OrderNum,            orderTable.OrderNum);
        wordDocument.insertFieldValue(#OT_TransDate,           this.dateInNumber(orderTable.TransDate));
        wordDocument.insertFieldValue(#OTR_title,              OfficialsTable_RU::findDirector().Title);
        wordDocument.insertFieldValue(#OTR_name,               OfficialsTable_RU::findDirector().Name);

        wordDocument.tableGoToCell(countPass, 1, #Table);

        select EmplId from hrmOrderTrans
            group by EmplId
            where hrmOrderTrans.OrderTableRecId == orderTable.RecId;

        while (hrmOrderTrans.EmplId)
        {
            select * from orderTransY
                order by StartDate
                where orderTransY.OrderTableRecId == orderTable.RecId &&
                      orderTransY.EmplId          == hrmOrderTrans.EmplId;

            while select  orderTransX order by StartDate
                where   orderTransX.OrderTableRecId == orderTable.RecId &&
                        orderTransX.EmplId          == hrmOrderTrans.EmplId
            {
                next orderTransY;

                if (orderTransY.RecId)
                {
                    if (this.isJoin(orderTransX, orderTransY))
                    {
                        this.printReport(orderTransX, orderTransY, countPass);
                        next orderTransX;
                        next orderTransY;
                    }
                    else
                    {
                        this.printReport(orderTransX, orderTransY, countPass, false);
                    }
                }
                else
                {
                    this.printReport(orderTransX, orderTransY, countPass, false);
                }
                countPass++;
            }
            next hrmOrderTrans;
        }

        wordDocument.tableDeleteRow();
        wordDocument.unlinkFields();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>