<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetBalanceSqlStatementProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetBalanceSqlStatementProvider</c> class provides creation of direct sql statements for
/// balances that are processed in chunks.
/// </summary>
internal final class BudgetBalanceSqlStatementProvider
{
    private const str PartitionParameterName = identifierStr(Partition);
    private const str FromDateParameterName = identifierStr(FromDate);
    private const str ToDateParameterName = identifierStr(ToDate);
    private const str DimensionHierarchyRecIdParameterName = identifierStr(DimensionHierarchyId);
    private const str LedgerRecIdParameterName = identifierStr(LedgerRecId);
    private const str BundleSizeParameterName = 'BundleSize';
    private const str UndefinedParameterName = 'Undefined';

    private BudgetBalanceSqlStatementContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForContract</Name>
				<Source><![CDATA[
    internal static BudgetBalanceSqlStatementProvider newForContract(
        BudgetBalanceSqlStatementContract _contract)
    {
        BudgetBalanceSqlStatementProvider statementProvider = new BudgetBalanceSqlStatementProvider();

        statementProvider.contract = _contract;

        return statementProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateAccountReferencesSqlStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a bundle of BudgetBalanceReportingDimensionReference records for linking source ledger accounts to reporting account structures.
    /// </summary>
    /// <param name = "_budgetBalanceRecIdTmp">
    /// The <c>BudgetBalanceRecIdTmp</c> table instance
    /// </param>
    /// <returns>An instance of BudgetBalanceDimensionSqlStatement.</returns>
    /// <remarks>
    /// Example statement:
    ///
    /// declare @DimensionHierarchyId [bigint] = 22565421704
    /// declare @LedgerRecId [bigint] = 0
    /// declare @Partition [bigint] = 5637144576
    ///
    /// INSERT INTO DBO.BudgetBalanceReportingDimensionReference (BudgetLedgerDimension, FocusDimensionHierarchy, Partition)
    ///     SELECT TOP 200000 RecordId, @DimensionHierarchyId, @Partition
    ///         FROM tempdb."DBO".t29221BatchAuroraV90149_15020516_FBAD41E40EFB47C2927A95868FBC583E OriginalLedgerDimensionTemp
    ///         LEFT JOIN DBO.BudgetBalanceReportingDimensionReference BBDR WITH (READPAST) ON
    ///             OriginalLedgerDimensionTemp.RecordId = BBDR.BudgetLedgerDimension
    ///                 AND BBDR.Partition = @Partition
    ///                 AND BBDR.FocusDimensionHierarchy = @DimensionHierarchyId
    ///             WHERE BBDR.AccountEntryLedgerDimension IS NULL
    /// </remarks>
    internal BudgetBalanceSqlStatement buildGenerateAccountReferencesSqlStatement(GeneralLedgerBalanceRecIdTmp _budgetBalanceRecIdTmp)
    {
        Map sqlParams = SqlParams::create();
        sqlParams.add(PartitionParameterName, getCurrentPartitionRecId());
        sqlParams.add(DimensionHierarchyRecIdParameterName, contract.parmDimensionHierarchyRecId());
        sqlParams.add(LedgerRecIdParameterName, contract.parmLedgerRecId());
        sqlParams.add(BundleSizeParameterName, contract.parmConfiguration().ReportingDimensionBundleSize);

        str sqlStatement = strfmt(@";
            INSERT INTO DBO.%1 (%2, %3, %7)
                SELECT TOP (@%9) %4, @%6, @%8
                FROM %5 OriginalLedgerDimensionTemp
                LEFT JOIN DBO.%1 BBDR WITH (READPAST) ON
                    OriginalLedgerDimensionTemp.%4 = BBDR.%2
                        AND BBDR.%7 = @%8
                        AND BBDR.%3 = @%6
                    WHERE BBDR.%2 IS NULL
            ",
            /* %1 */ tableStr(BudgetBalanceReportingDimensionReference),
            /* %2 */ fieldStr(BudgetBalanceReportingDimensionReference, BudgetLedgerDimension),
            /* %3 */ fieldStr(BudgetBalanceReportingDimensionReference, FocusDimensionHierarchy),
            /* %4 */ fieldStr(GeneralLedgerBalanceRecIdTmp, RecordId),
            /* %5 */ _budgetBalanceRecIdTmp.getPhysicalTableName(),
            /* %6 */ DimensionHierarchyRecIdParameterName,
            /* %7 */ identifierStr(Partition),
            /* %8 */ PartitionParameterName,
            /* %9 */ BundleSizeParameterName);

        BudgetBalanceSqlStatement statement = BudgetBalanceSqlStatement::newStatement(sqlStatement, sqlParams, 'GenerateBudgetAccountReferencesRebuild');

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateOriginalAccountToDimensionsMappingSqlStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a bundle of BudgetBalanceReportingDimensionReference records to link source ledger accounts to reporting account structures.
    /// </summary>
    /// <returns>An instance of BudgetBalanceDimensionSqlStatement.</returns>
    /// <remarks>
    /// Example statement:
    ///
    /// declare @DimensionHierarchyRecId [bigint] = 5637144588
    ///    declare @Partition [bigint] = 5637144576
    ///    declare @Undefined [int] = 0
    ///
    ///        UPDATE TOP (200000) BBDR
    ///            SET ReportingDimension = GBD.RecId
    ///            FROM DBO.BudgetBalanceReportingDimensionReference BBDR
    ///            INNER JOIN DBO.DimensionAttributeValueCombination DAVC ON
    ///                DAVC.RecId = BBDR.BudgetLedgerDimension
    ///                    AND BBDR.Partition = DAVC.Partition
    ///            INNER JOIN DBO.GeneralLedgerBalanceReportingDimension GBD ON
    ///                GBD.Partition = DAVC.Partition
    ///                    AND GBD.FocusDimensionHierarchy = @DimensionHierarchyRecId
    ///                     AND DAVC.MAINACCOUNTVALUE = GBD.DimValue1
    ///            WHERE DAVC.Partition = @Partition
    ///                AND BBDR.FocusDimensionHierarchy = @DimensionHierarchyRecId
    ///                AND BBDR.ReportingDimension = @Undefined
    /// </remarks>
    internal BudgetBalanceSqlStatement buildUpdateOriginalAccountToDimensionsMappingSqlStatement()
    {
        Map sqlParams = SqlParams::create();
        sqlParams.add(PartitionParameterName, getCurrentPartitionRecId());
        sqlParams.add(DimensionHierarchyRecIdParameterName, contract.parmDimensionHierarchyRecId());
        sqlParams.add(UndefinedParameterName, 0);
        sqlParams.add(BundleSizeParameterName, contract.parmConfiguration().ReportingDimensionBundleSize);

        str dimensionWhereClause = this.getDimensionUpdateWhereClause(contract.parmDimensionHierarchyRecId());

        str sqlStatement = strfmt(@"
            UPDATE TOP (@%14) BBDR
                SET %1 = GBD.%2
                FROM DBO.%3 BBDR
                INNER JOIN DBO.%4 DAVC ON
                    DAVC.%5 = BBDR.%6
                        AND BBDR.%7 = DAVC.%7
                INNER JOIN DBO.%9 GBD ON
                    GBD.%7 = DAVC.%7
                        AND GBD.%10 = @%11
                        %12
                WHERE DAVC.%7 = @%8
                    AND BBDR.%10 = @%11
                    AND BBDR.%1 = @%13
            ",
            /* %1 */ fieldStr(BudgetBalanceReportingDimensionReference, ReportingDimension),
            /* %2 */ fieldStr(GeneralLedgerBalanceReportingDimension, RecId),
            /* %3 */ tableStr(BudgetBalanceReportingDimensionReference),
            /* %4 */ tableStr(DimensionAttributeValueCombination),
            /* %5 */ fieldStr(DimensionAttributeValueCombination, RecId),
            /* %6 */ fieldStr(BudgetBalanceReportingDimensionReference, BudgetLedgerDimension),
            /* %7 */ identifierStr(Partition),
            /* %8 */ PartitionParameterName,
            /* %9 */ tableStr(GeneralLedgerBalanceReportingDimension),
            /* %10 */ fieldStr(BudgetBalanceReportingDimensionReference, FocusDimensionHierarchy),
            /* %11 */ DimensionHierarchyRecIdParameterName,
            /* %12 */ dimensionWhereClause,
            /* %13 */ UndefinedParameterName,
            /* %14 */ BundleSizeParameterName);

        BudgetBalanceSqlStatement statement = BudgetBalanceSqlStatement::newStatement(sqlStatement, sqlParams, 'UpdateOriginalAccountToDimensionsMapping');

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOriginalAccountToReportingStructureDimensionsSqlStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a bundle of GeneralLedgerBalanceReportingDimension records with fixed reporting structure of dimension values.
    /// </summary>
    /// <returns>An instance of BudgetBalanceDimensionSqlStatement.</returns>
    /// <remarks>
    /// Example statement:
    ///
    /// declare @DimensionHierarchyRecId [bigint] = 22565421714
    ///    declare @Partition [bigint] = 5637144576
    ///    declare @Undefined [int] = 0
    ///
    /// INSERT INTO DBO.GeneralLedgerBalanceReportingDimension (FocusDimensionHierarchy, DimValue1, DimValue2, DimValue3, DisplayValue)
    ///     SELECT DISTINCT TOP 2000 @DimensionHierarchyRecId, MAINACCOUNTVALUE, BUSINESSUNITVALUE, DEPARTMENTVALUE, MAINACCOUNTVALUE + N'-' + BUSINESSUNITVALUE + N'-' + DEPARTMENTVALUE, @Partition
    ///         FROM DBO.DimensionAttributeValueCombination DAVC
    ///         INNER JOIN DBO.BudgetBalanceReportingDimensionReference BBDR ON
    ///            DAVC.RecId = BBDR.BudgetLedgerDimension
    ///                AND BBDR.Partition = DAVC.Partition
    ///         LEFT JOIN DBO.GeneralLedgerBalanceReportingDimension reportingDimension WITH (READPAST)
    ///            ON reportingDimension.Partition = @Partition
    ///                AND reportingDimension.FocusDimensionHierarchy = BBDR.FocusDimensionHierarchy
    ///                AND reportingDimension.DimValue1 = DAVC.MAINACCOUNTVALUE
    ///                AND reportingDimension.DimValue2 = DAVC.BUSINESSUNITVALUE
    ///                AND reportingDimension.DimValue3 = DAVC.DEPARTMENTVALUE
    ///         WHERE BBDR.ReportingDimension = @Undefined
    ///            AND BBDR.FocusDimensionHierarchy = @DimensionHierarchyRecId
    ///            AND DAVC.Partition = @Partition
    ///            AND reportingDimension.RecId IS NULL
    /// </remarks>
    internal BudgetBalanceSqlStatement buildOriginalAccountToReportingStructureDimensionsSqlStatement()
    {
        str dimensionColumnSelectList;
        str dimensionColumnInsertList;
        str dimensionDisplayValue;

        [dimensionColumnInsertList, dimensionColumnSelectList, dimensionDisplayValue] = this.getDimensionSelectList();

        ListEnumerator dimensionSelectColumnListEnumerator = strSplit(dimensionColumnSelectList, ',').getEnumerator();
        ListEnumerator dimensionInsertColumnListEnumerator = strSplit(dimensionColumnInsertList, ',').getEnumerator();
        str existDimensionClause = '';
        str excludeAllBlanksClause = ' AND (';
        int iteration = 0;

        while (dimensionSelectColumnListEnumerator.moveNext())
        {
            dimensionInsertColumnListEnumerator.moveNext();
            iteration += 1;

            str selectColumn = dimensionSelectColumnListEnumerator.current();
            str insertColumn = dimensionInsertColumnListEnumerator.current();

            existDimensionClause += strFmt(' AND %1.%2 = %3.%4 ', 'reportingDimension', insertColumn, 'DAVC', selectColumn);

            if (iteration > 1)
            {
                excludeAllBlanksClause += ' OR ';
            }
            excludeAllBlanksClause += strFmt('%1.%2 <> \'\'', 'DAVC', selectColumn);
        }

        excludeAllBlanksClause += ')';

        Map sqlParams = SqlParams::create();
        sqlParams.add(PartitionParameterName, getCurrentPartitionRecId());
        sqlParams.add(DimensionHierarchyRecIdParameterName, contract.parmDimensionHierarchyRecId());
        sqlParams.add(UndefinedParameterName, 0);
        sqlParams.add(BundleSizeParameterName, contract.parmConfiguration().ReportingDimensionBundleSize);

        str sqlStatement = strfmt(@"
            INSERT INTO DBO.%1 (%2, %3, %4, %12)
                SELECT DISTINCT TOP (@%18) @%5, %6, %7, @%14
                FROM DBO.%8 DAVC
                INNER JOIN DBO.%9 BBDR ON
                    DAVC.%10 = BBDR.%11
                        AND BBDR.%12 = DAVC.%12
                LEFT JOIN DBO.%1 reportingDimension WITH (READPAST)
                    ON reportingDimension.%12 = @%14
                        AND reportingDimension.%2 = BBDR.%2
                        %15
                WHERE BBDR.%13 = @%16
                    AND BBDR.%2 = @%5
                    AND DAVC.%12 = @%14
                    AND reportingDimension.%17 IS NULL
                    %19
            ",
            /* %1 */ tableStr(GeneralLedgerBalanceReportingDimension),
            /* %2 */ fieldStr(GeneralLedgerBalanceReportingDimension, FocusDimensionHierarchy),
            /* %3 */ dimensionColumnInsertList,
            /* %4 */ fieldStr(GeneralLedgerBalanceReportingDimension, DisplayValue),
            /* %5 */ DimensionHierarchyRecIdParameterName,
            /* %6 */ dimensionColumnSelectList,
            /* %7 */ dimensionDisplayValue,
            /* %8 */ tableStr(DimensionAttributeValueCombination),
            /* %9 */ tableStr(BudgetBalanceReportingDimensionReference),
            /* %10 */ fieldStr(DimensionAttributeValueCombination, RecId),
            /* %11 */ fieldStr(BudgetBalanceReportingDimensionReference, BudgetLedgerDimension),
            /* %12 */ identifierStr(Partition),
            /* %13 */ fieldStr(BudgetBalanceReportingDimensionReference, ReportingDimension),
            /* %14 */ PartitionParameterName,
            /* %15 */ existDimensionClause,
            /* %16 */ UndefinedParameterName,
            /* %17 */ fieldStr(GeneralLedgerBalanceReportingDimension, RecId),
            /* %18 */ BundleSizeParameterName,
            /* %19 */ excludeAllBlanksClause);

        BudgetBalanceSqlStatement statement = BudgetBalanceSqlStatement::newStatement(sqlStatement, sqlParams, 'OriginalAccountToReportingStructureDimensions');

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTruncateTableSqlStatement</Name>
				<Source><![CDATA[
    internal BudgetBalanceSqlStatement buildTruncateTableSqlStatement(TableName _tableName)
    {
        str sqlStatement = strFmt(@"TRUNCATE TABLE %1", _tableName);

        BudgetBalanceSqlStatement statement = BudgetBalanceSqlStatement::newStatement(sqlStatement, SqlParams::create(), strFmt(@"TruncateTable%1", _tableName));

        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeNonQuery</Name>
				<Source><![CDATA[
    internal int64 executeNonQuery(BudgetBalanceSqlStatement _sqlStatement)
    {
        int64 impactedRows;
        System.Exception ex;
        Statement statement;
        Connection connection = new Connection();

        try
        {
            statement = connection.createStatement();
            new SqlStatementExecutePermission(_sqlStatement.sqlStatement).assert();
            impactedRows = statement.executeUpdateWithParameters(_sqlStatement.sqlStatement, _sqlStatement.sqlParameters);
        }
        finally
        {
            if (statement != null)
            {
                statement.close();
            }

            connection.finalize();

            CodeAccessPermission::revertAssert();
        }

        
        return impactedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionSelectList</Name>
				<Source><![CDATA[
    private container getDimensionSelectList()
    {
        DimensionHierarchyLevel dimHierLevel;
        DimensionAttribute dimAttr;
        str dimensionColumnSelectList;
        str dimensionColumnInsertList;
        Level level = 1;
        DimensionDisplayValue displayValue;
        str delimiter = DimensionParameters::getDimensionSegmentDelimiter();
        SqlSystem sqlSystem = new SqlSystem();

        while select DimensionValueColumnName from dimAttr
            order by dimHierLevel.Level
            exists join dimHierLevel
                where dimHierLevel.DimensionHierarchy == contract.parmDimensionHierarchyRecId()
                    && dimHierLevel.DimensionAttribute == dimAttr.RecId
        {
            if (level != 1)
            {
                displayValue += strFmt(' + %1 + ',
                    sqlSystem.sqlLiteral(delimiter));

                dimensionColumnSelectList += ', ';
                dimensionColumnInsertList += ', ';
            }
            
            displayValue += dimAttr.DimensionValueColumnName;
            dimensionColumnSelectList += dimAttr.DimensionValueColumnName;
            dimensionColumnInsertList += strFmt('%1%2', BudgetBalanceConstants::DimensionValueColumnPrefix, level);

            level += 1;
        }

        return [dimensionColumnInsertList, dimensionColumnSelectList, displayValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionUpdateWhereClause</Name>
				<Source><![CDATA[
    private str getDimensionUpdateWhereClause(DimensionHierarchyId _dimensionHierarchyRecId)
    {
        DimensionHierarchyLevel dimHierLevel;
        DimensionAttribute dimAttr;
        str dimensionColumnWhereClause;
        int counter = 1;

        while select DimensionValueColumnName from dimAttr
            order by dimHierLevel.Level
            exists join dimHierLevel
                where dimHierLevel.DimensionHierarchy == _dimensionHierarchyRecId
                    && dimHierLevel.DimensionAttribute == dimAttr.RecId
        {
            dimensionColumnWhereClause += ' AND DAVC.';
            dimensionColumnWhereClause += dimAttr.DimensionValueColumnName;

            dimensionColumnWhereClause += ' = GBD.';
            dimensionColumnWhereClause += strFmt('%1%2', BudgetBalanceConstants::DimensionValueColumnPrefix, counter);

            counter += 1;
        }

        return dimensionColumnWhereClause;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>