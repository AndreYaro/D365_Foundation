<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVatReportDetailedController_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxVatReportDetailedController_MX extends SrsReportRunController implements BatchRetryable
{
    #VATReports_SSRSParameters_MX

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static TaxVatReportDetailedController_MX construct()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMX00006, funcName());

        return new TaxVatReportDetailedController_MX();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
    protected str getCaption()
    {
        SalesPurch salesPurch = this.getSalesPurch();
        str reportCaption;

           // SSRS Report name
        switch (salesPurch)
        {
            case SalesPurch::Sales:
                reportCaption  = "@SYS312701";
                break;

            case SalesPurch::Purch:
                reportCaption  = "@SYS318828";
                break;
        }

        return reportCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPurch</Name>
				<Source><![CDATA[
    protected SalesPurch getSalesPurch()
    {
        SalesPurch salesPurch;

        if (args.parmEnumType())
        {
            salesPurch = args.parmEnum();
        }

        return salesPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxVatReportDetailedController_MX controller = TaxVatReportDetailedController_MX::newArgs(_args);

        controller.parmReportName(ssrsReportStr(TaxVatDetailedReport_MX, Report));

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        this.parmDialogCaption(this.getCaption());

        TaxVatReportDetailedContract_MX contract = this.parmReportContract().parmRdpContract() as TaxVatReportDetailedContract_MX;

        contract.parmSalesPurch(this.getSalesPurch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    public static TaxVatReportDetailedController_MX newArgs(Args _args)
    {
        TaxVatReportDetailedController_MX controller = TaxVatReportDetailedController_MX::construct();

        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        TaxVatReportDetailedContract_MX contract = this.parmReportContract().parmRdpContract();
        TaxReportPeriod reportPeriod;

        switch (contract.parmTaxVatReportOption())
        {
            case TaxVatReportOption_MX::Realized:
            case TaxVatReportOption_MX::Both:
                reportPeriod = TaxReportPeriod::find(contract.parmRealizedTaxPeriod(), contract.parmFromDate());
                break;

            case TaxVatReportOption_MX::Unrealized:
                reportPeriod = TaxReportPeriod::find(contract.parmUnrealizedTaxPeriod(), contract.parmFromDate());
                break;
        }

        contract.parmFromDate(reportPeriod.FromDate);
        contract.parmToDate(reportPeriod.ToDate);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>