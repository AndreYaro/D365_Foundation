<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatCompression</Name>
	<SourceCode>
		<Declaration><![CDATA[
class IntrastatCompression extends RunBase
{
    #ISOCountryRegionCodes
    DialogRunbase               dialogRunbase;

    QueryRun                    queryRun;

    boolean                     isEEUCountry;

    AmountMST                   expAmountMst;
    MarkupAmountMST             expInvoiceMarkupMST;
    AmountCur                   expAmountCur;
    MarkupAmount                expInvoiceMarkupCur;
    Weight                      expWeight;
    UnitQty                     expUnitQty;
    UnitQty                     expAdditionalUnit;
    IntrastatMarkupAmount       expIntrastatMarkupAmount;
    IntrastatConsignments       expConsignments;
    StatisticalValue            expCustVendStatValue;
    StatisticalValue            expStatAmt;
    private StatisticalValue    expStatAmtCur;
    AmountMST                   expStatAdjustAmt;
    MarkupAmount                expStatMarkup;
    private MarkupAmount        expStatMarkupCur;

    AmountMST                   impAmountMst;
    MarkupAmountMST             impInvoiceMarkupMST;
    AmountCur                   impAmountCur;
    MarkupAmount                impInvoiceMarkupCur;
    Weight                      impWeight;
    UnitQty                     impUnitQty;
    UnitQty                     impAdditionalUnit;
    IntrastatMarkupAmount       impIntrastatMarkupAmount;
    IntrastatConsignments       impConsignments;
    StatisticalValue            impCustVendStatValue;
    StatisticalValue            impStatAmt;
    private StatisticalValue    impStatAmtCur;
    AmountMST                   impStatAdjustAmt;
    MarkupAmount                impStatMarkup;
    private MarkupAmount        impStatMarkupCur;

    AddressCountryRegionId      countryRegionId;
    AddressStateId              state;
    IntrastatTransactionCodeId  transactionCode;
    IntrastatTransport          transportMode;
    IntrastatProcId             statProcId;
    IntrastatPortId             port;
    DlvTermId                   dlvTerm;
    AddressCountryRegionId      origCountryRegionId;

    IntrastatSeqNum             actualNum;

    Intrastat                   intrastat;

    Intrastat                   prvIntrastat;

    IntrastatDispatchId         numDispatchId;

    boolean                     dif[];
    RecordSortedList            recordSortedList;
    TransDate                   fromDate;
    TransDate                   toDate;
    DialogField                 dialogFromDate;
    DialogField                 dialogToDate;
    List                        listOfCompressFields;

    private const int fldTransDate = 1;
    private const int fldDispatchId = 2;
    private const int fldSeqNum= 3;
    private const int fldDebCredType = 4;
    private const int fldAccountNum = 5;
    private const int fldCountry = 6;
    private const int fldStatProcId = 7;
    private const int fldTransPortMode = 8;
    private const int fldCommodityCode = 9;
    private const int fldDirection = 10;
    private const int fldPartDelivery = 11;
    private const int fldCorrect = 12;
    private const int fldTransactionCode = 13;
    private const int fldOrigCountry = 14;
    private const int fldState = 15;
    private const int fldPort = 16;
    private const int fldDlvTerm = 17;
    private const int fldOrigState = 18;
    private const int fldCounty = 19;
    private const int fldMonthsOfYear = 20;
    private const int fldQuarterOfYear = 21;
    private const int fldYr = 22;
    private const int fldVatNum = 23;
    private const int fldCurrencyCode = 24;
    private const int fldSendReceiveCountryRegion = 25;
    private const int fldSendReceiveState = 26;
    private const int fldSpecialMovement_CZ = 27;
    private const int fldStatTrans_NL = 28;
    private const int fldAdditionalQtyUnit = 29;
    private const int fldOrigCounty_IT = 30;
    private const int fldInvoiceId = 31;
    private const int fldPackingSlipId = 32;

    private DialogField dialogTaxID;
    private TaxRegistrationNumber taxID;
    private TaxRegistration taxRegistration;
    private boolean isMultipleTaxIdEnabledForIntrastat;
    private UnknownNoYes isTaxRegistrationInItalianCountryRegion;
    private UnknownNoYes isTaxRegistrationInNetherlandsCountryRegion;

    private const int CurrentVersion = 3;
    #LOCALMACRO.CurrentList
        FromDate,
        Todate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmount</Name>
				<Source><![CDATA[
    void calculateAmount()
    {
        if (intrastat.Direction == IntrastatDirection::Export)
        {
            expAmountMst               += intrastat.AmountMST;
            expInvoiceMarkupMST        += intrastat.InvoiceMarkupMST;
            expAmountCur               += intrastat.AmountCur;
            expInvoiceMarkupCur        += intrastat.InvoiceMarkupCur;
            expWeight                  += intrastat.Weight;
            expUnitQty                 += intrastat.Qty;
            expAdditionalUnit          += intrastat.AdditionalUnits;
            expIntrastatMarkupAmount   += intrastat.Markup;
            expConsignments            += intrastat.Consignments;
            expStatMarkup              += intrastat.Markup;
            expStatMarkupCur           += intrastat.MarkupCur;

            if (intrastat.DebCredType != ModuleInventCustVend::Invent)
            {
                expCustVendStatValue += intrastat.AmountMST;

                if (this.isNetherlandsCountryRegion())
                {
                    expCustVendStatValue += decround(intrastat.Markup, 0);
                }
                else if (!this.isItalianCountryRegion())
                {
                    expCustVendStatValue += intrastat.Markup;
                }
            }

            expStatAdjustAmt	+= intrastat.StatisticalAdjustmentAmount;
            expStatAmt			+= intrastat.StatisticalValue;
            expStatAmtCur   	+= intrastat.StatisticalValueCur;
        }
        else
        {
            impAmountMst               += intrastat.AmountMST;
            impInvoiceMarkupMST        += intrastat.InvoiceMarkupMST;
            impAmountCur               += intrastat.AmountCur;
            impInvoiceMarkupCur        += intrastat.InvoiceMarkupCur;
            impWeight                  += intrastat.Weight;
            impUnitQty                 += intrastat.Qty;
            impAdditionalUnit          += intrastat.AdditionalUnits;
            impIntrastatMarkupAmount   += intrastat.Markup;
            impConsignments            += intrastat.Consignments;
            impStatMarkup              += intrastat.Markup;
            impStatMarkupCur           += intrastat.MarkupCur;

            if (intrastat.DebCredType != ModuleInventCustVend::Invent)
            {
                impCustVendStatValue += intrastat.AmountMST;

                if (this.isNetherlandsCountryRegion())
                {
                    impCustVendStatValue += decround(intrastat.Markup, 0);
                }
                else if (!this.isItalianCountryRegion())
                {
                    impCustVendStatValue += intrastat.Markup;
                }
            }

            impStatAdjustAmt	+= intrastat.StatisticalAdjustmentAmount;
            impStatAmt			+= intrastat.StatisticalValue;
            impStatAmtCur   	+= intrastat.StatisticalValueCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changed</Name>
				<Source><![CDATA[
    boolean changed(Intrastat _intrastat)
    {
        ListEnumerator  listEnumerator;
        FieldId         fieldId;

        if (!listOfCompressFields)
        {
            return false;
        }

        listEnumerator = listOfCompressFields.getEnumerator();

        while (listEnumerator.moveNext())
        {
            fieldId = listEnumerator.current();
            if (_intrastat.(fieldId) != prvIntrastat.(fieldId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewIntrastat</Name>
				<Source><![CDATA[
    void createNewIntrastat()
    {
        NumberSeq   numberSeq;
        Intrastat   newIntrastat;

        #LocalMacro.Init
        newIntrastat.%1 = dif[%2] ? %4 : %3
        #EndMacro

        recordSortedList.first(intrastat);
        while (intrastat)
        {
            this.difference();
            this.calculateAmount();
            if (!recordSortedList.next(intrastat))
            {
                break;
            }
        }

        // In Italy, we do not switch the direction based on amounts or weights
        // <GEEU>
        //use the last intrastat in the compression set to set direction
        if (this.isItalianCountryRegion() || isEEUCountry)
        // </GEEU>
        {
            newIntrastat.Direction = intrastat.Direction;
        }
        else
        {
            if (expWeight == 0 && impWeight == 0)
            {
                newIntrastat.Direction = expAmountMst > impAmountMst ? IntrastatDirection::Export : IntrastatDirection::Import;
            }
            else
            {
                newIntrastat.Direction = expWeight > impWeight ? IntrastatDirection::Export : IntrastatDirection::Import;
            }
        }

        switch (newIntrastat.Direction)
        {
            case IntrastatDirection::Export :
                newIntrastat.Weight                 = expWeight                 - impWeight;
                newIntrastat.AmountMST              = expAmountMst              - impAmountMst;
                newIntrastat.InvoiceMarkupMST       = expInvoiceMarkupMst       - impInvoiceMarkupMst;
                newIntrastat.AmountCur              = expAmountCur              - impAmountCur;
                newIntrastat.InvoiceMarkupCur       = expInvoiceMarkupCur       - impInvoiceMarkupCur;
                newIntrastat.AdditionalUnits        = expAdditionalUnit         - impAdditionalUnit;
                newIntrastat.Markup                 = expIntrastatMarkupAmount  - impIntrastatMarkupAmount;
                newIntrastat.Consignments           = expConsignments           - impConsignments;
                newIntrastat.Qty                    = expUnitQty                - impUnitQty;
                newIntrastat.StatisticalAdjustmentAmount = expStatAdjustAmt     - impStatAdjustAmt;
                newIntrastat.StatisticalValue       = expStatAmt                - impStatAmt;
                newIntrastat.Markup                 = expStatMarkup             - impStatMarkup;
                newIntrastat.StatisticalValueCur    = expStatAmt                - impStatAmt;
                newIntrastat.MarkupCur              = expStatMarkup             - impStatMarkup;

                break;

            case IntrastatDirection::Import :
                newIntrastat.Weight                 = impWeight                 - expWeight;
                newIntrastat.AmountMST              = impAmountMst              - expAmountMst;
                newIntrastat.InvoiceMarkupMST       = impInvoiceMarkupMst       - expInvoiceMarkupMst;
                newIntrastat.AmountCur              = impAmountCur              - expAmountCur;
                newIntrastat.InvoiceMarkupCur       = impInvoiceMarkupCur       - expInvoiceMarkupCur;
                newIntrastat.AdditionalUnits        = impAdditionalUnit         - expAdditionalUnit;
                newIntrastat.Markup                 = impIntrastatMarkupAmount  - expIntrastatMarkupAmount;
                newIntrastat.Consignments           = impConsignments           - expConsignments;
                newIntrastat.Qty                    = impUnitQty                - expUnitQty;
                newIntrastat.StatisticalAdjustmentAmount = impStatAdjustAmt     - expStatAdjustAmt;
                newIntrastat.StatisticalValue       = impStatAmt                - expStatAmt;
                newIntrastat.Markup                 = impStatMarkup             - expStatMarkup;
                newIntrastat.StatisticalValueCur    = impStatAmt                - expStatAmt;
                newIntrastat.MarkupCur              = impStatMarkup             - expStatMarkup;

                break;

            default :
                throw error(strFmt("@SYS12580",newIntrastat.Direction));
        }

        newIntrastat.TransDate = prvIntrastat.TransDate ? prvIntrastat.TransDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        #Init(DebCredType,fldDebCredType,PrvIntrastat.DebCredType,ModuleInventCustVend::Invent);
        #Init(AccountNum,fldAccountNum,PrvIntrastat.AccountNum,'');
        #Init(CountryRegionId,fldCountry,PrvIntrastat.CountryRegionId,'');
        #Init(OrigCountryRegionId,fldOrigCountry,  PrvIntrastat.OrigCountryRegionId,'');
        #Init(TransactionCode,fldTransactionCode,PrvIntrastat.TransactionCode,'');
        #Init(IntrastatCommodity,fldCommodityCode,PrvIntrastat.IntrastatCommodity,0);
        #Init(PartDelivery,fldPartDelivery,PrvIntrastat.PartDelivery,Noyes::No);
        #Init(Correct,fldCorrect,PrvIntrastat.Correct,NoYes::No);
        #Init(State,fldState,  PrvIntrastat.State, '');
        #Init(TransportMode, fldTransportMode, prvIntrastat.TransportMode, '');
        #Init(StatProcId, fldStatProcId, prvIntrastat.StatProcId, '');
        #Init(Port, fldPort, prvIntrastat.Port, '');
        #Init(DlvTerm, fldDlvTerm, prvIntrastat.DlvTerm, '');
        #Init(OrigState,fldOrigState,  PrvIntrastat.OrigState, '');
        #Init(County,fldCounty, PrvIntrastat.County, '');
        #Init(VatNum, fldVatNum, PrvIntrastat.VatNum,'');
        #Init(CurrencyCode,fldCurrencyCode,PrvIntrastat.CurrencyCode, '');
        #Init(AmountCur,fldCurrencyCode,newIntrastat.AmountCur, 0);
        #Init(AdditionalQtyUnit, fldAdditionalQtyUnit, prvIntrastat.AdditionalQtyUnit, '');
        #Init(InvoiceMarkupCur,fldCurrencyCode,newIntrastat.InvoiceMarkupCur, 0);
        #Init(MonthsOfYear, fldMonthsOfYear, prvIntrastat.MonthsOfYear, MonthsOfYear::None);
        #Init(QuarterOfYear, fldQuarterOfYear, prvIntrastat.QuarterOfYear, QuarterOfYear::None);
        #Init(Yr, fldYr, prvIntrastat.Yr, 0);
        #Init(SendReceiveCountryRegionId,fldSendReceiveCountryRegion,PrvIntrastat.SendReceiveCountryRegionId, '');
        #Init(SendReceiveState,fldSendReceiveState,PrvIntrastat.SendReceiveState, '');

        #Init(InvoiceId,fldInvoiceId,PrvIntrastat.InvoiceId, '');
        #Init(PackingSlipId,fldPackingSlipId,PrvIntrastat.PackingSlipId, '');
        //AdditionalQty will be added regardless AdditionalQtyUnit

        // <GEECZ>
        if (IntrastatSpecMovement_CZ::isEnabled())
        {
            #Init(IntrastatSpecMove_CZ, fldSpecialMovement_CZ, PrvIntrastat.IntrastatSpecMove_CZ, '');
        }
        // </GEECZ>

        if (this.isNetherlandsCountryRegion())
        {
            #Init(StatTrans, fldStatTrans_NL, PrvIntrastat.StatTrans, '');
        }

        if (! dif[fldDispatchId])
        {
            newIntrastat.DispatchId = prvIntrastat.DispatchId;
            newIntrastat.SeqNum     = prvIntrastat.SeqNum;
        }
        else
        {
            if (!actualNum)
            {
                numberSeq                 = NumberSeq::newGetNum(IntrastatParameters::numRefIntrastatDispatchId());
                numDispatchId             = numberSeq.num();
            }
            actualNum ++;
            newIntrastat.DispatchId = numDispatchId;
            newIntrastat.SeqNum     = actualNum;
        }

        if (this.isItalianCountryRegion())
        {
            // Services are not compressed in Italy because otherwise services-specific fields (which must be exported to ASCII) will be lost
            newIntrastat.ItemType_IT    = IntrastatItemType_IT::Goods;
            #Init(OrigCounty, fldOrigCounty_IT, PrvIntrastat.OrigCounty, '');
        }

        newIntrastat.Compress = NoYes::Yes;

        if (isMultipleTaxIdEnabledForIntrastat)
        {
            newIntrastat.TaxId = taxRegistration.RecId;
            newIntrastat.CompanyIntrastatReportCurrencyCode = PrvIntrastat.CompanyIntrastatReportCurrencyCode;
        }

        //Italy only: Lines with zero-amounts resulted after Compress should  be removed
        if (newIntrastat.reportInvoiceValueMST()  != 0 ||
            newIntrastat.reportInvoiceValueCur()  != 0 ||
            newIntrastat.reportStatisticalValue() != 0 ||
            !this.isItalianCountryRegion())
        {
            newIntrastat.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSeqNum</Name>
				<Source><![CDATA[
    void createSeqNum()
    {
        IntrastatCreateSeqNum intrastatCreateSeqNum = new IntrastatCreateSeqNum();

        intrastatCreateSeqNum.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        dialogRunbase = new DialogRunbase("@SYS5255",this);

        dialogFromDate  = dialogRunbase.addFieldValue(extendedTypeStr(TransDate),dateStartMth(fromDate), "@SYS2168","@SYS27228");

        dialogToDate    = dialogRunbase.addFieldValue(extendedTypeStr(TransDate),toDate, "@SYS22882","@SYS27230");

        if (isMultipleTaxIdEnabledForIntrastat)
        {
            taxID = taxRegistration.RegistrationNumber;
            dialogTaxID = dialogRunbase.addFieldValue(extendedTypeStr(TaxRegistrationNumber), taxID, "@SYS125640");

            dialogTaxID.control().registerOverrideMethod(
                methodStr(FormStringControl, lookup),
                methodStr(IntrastatCompression, taxID_lookup),
                this);
        }

        dialogRunbase.addMenuItemButton(MenuItemType::Display,menuitemDisplayStr(RunBaseQueryDialog),DialogMenuItemGroup::BottomGrp);

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>difference</Name>
				<Source><![CDATA[
    void difference()
    {
        #LocalMacro.Difference
        if (! Dif[%2] && %1 != %3)
        {
            Dif[%2] = true;
        }
        %3 = %1;
        #EndMacro

        #Difference(Intrastat.TransDate,fldTransDate,PrvIntrastat.TransDate)
        #Difference(Intrastat.DispatchId, fldDispatchId,PrvIntrastat.DispatchId)
        #Difference(Intrastat.SeqNum,fldSeqNum,PrvIntrastat.SeqNum)
        #Difference(Intrastat.DebCredType,fldDebCredType,PrvIntrastat.DebCredType)
        #Difference(Intrastat.AccountNum,fldAccountNum,PrvIntrastat.AccountNum)
        #Difference(Intrastat.CountryRegionId,fldCountry,PrvIntrastat.CountryRegionId)
        #Difference(Intrastat.OrigCountryRegionId,fldOrigCountry,PrvIntrastat.OrigCountryRegionId)
        #Difference(Intrastat.TransactionCode,fldTransactionCode,PrvIntrastat.TransactionCode)
        #Difference(Intrastat.IntrastatCommodity,fldCommodityCode,PrvIntrastat.IntrastatCommodity)
        #Difference(Intrastat.Direction,fldDirection,PrvIntrastat.Direction)
        #Difference(Intrastat.PartDelivery,fldPartDelivery,PrvIntrastat.PartDelivery)
        #Difference(Intrastat.Correct,fldCorrect,PrvIntrastat.Correct)
        #Difference(Intrastat.State,fldState,PrvIntrastat.State)
        #Difference(Intrastat.TransportMode,fldTransportMode,PrvIntrastat.TransportMode)
        #Difference(Intrastat.StatProcId,fldStatProcId,PrvIntrastat.StatProcId)
        #Difference(Intrastat.Port,fldPort,PrvIntrastat.Port)
        #Difference(Intrastat.DlvTerm,fldDlvTerm,PrvIntrastat.DlvTerm)
        #Difference(Intrastat.origState,fldOrigState,PrvIntrastat.OrigState)
        #Difference(Intrastat.County,fldCounty,PrvIntrastat.County)
        #Difference(Intrastat.VatNum, fldVatNum, PrvIntrastat.VatNum)
        #Difference(Intrastat.CurrencyCode, fldCurrencyCode, PrvIntrastat.CurrencyCode)
        #Difference(Intrastat.AdditionalQtyUnit, fldAdditionalQtyUnit, prvIntrastat.AdditionalQtyUnit)
        #Difference(Intrastat.MonthsOfYear, fldMonthsOfYear, prvIntrastat.MonthsOfYear)
        #Difference(Intrastat.QuarterOfYear, fldQuarterOfYear, prvIntrastat.QuarterOfYear)
        #Difference(Intrastat.Yr, fldYr, prvIntrastat.Yr)
        #Difference(Intrastat.SendReceiveCountryRegionId, fldSendReceiveCountryRegion, PrvIntrastat.SendReceiveCountryRegionId)
        #Difference(Intrastat.SendReceiveState, fldSendReceiveState, PrvIntrastat.SendReceiveState)
        #Difference(Intrastat.InvoiceId,fldInvoiceId,PrvIntrastat.InvoiceId)
        #Difference(Intrastat.PackingSlipId,fldPackingSlipId,PrvIntrastat.PackingSlipId)

        // <GEECZ>
        if (IntrastatSpecMovement_CZ::isEnabled())
        {
            #Difference(Intrastat.IntrastatSpecMove_CZ, fldSpecialMovement_CZ, PrvIntrastat.IntrastatSpecMove_CZ)
        }
        // </GEECZ>

        if (this.isNetherlandsCountryRegion())
        {
            #Difference(Intrastat.StatTrans, fldStatTrans_NL, PrvIntrastat.StatTrans)
        }

        if (this.isItalianCountryRegion())
        {
            #Difference(Intrastat.OrigCounty, fldOrigCounty_IT, PrvIntrastat.OrigCounty)
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fromDate = dialogFromDate.value();
        toDate   = dialogToDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromIntrastat</Name>
				<Source><![CDATA[
    void initFromIntrastat(Intrastat _intrastat)
    {
        prvIntrastat.data(_intrastat);

        recordSortedList = new RecordSortedList(_intrastat.TableId);
        recordSortedList.sortOrder(fieldNum(Intrastat, IntrastatCommodity), fieldNum(Intrastat, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        container   packedList = IntrastatCompressParameters::packedSelectedFieldIdList();

        super();

        queryRun = new QueryRun(queryStr(IntrastatCompress));
        fromDate = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        toDate   = dateMthFwd(fromDate,1)-1;

        if (packedList)
        {
            listOfCompressFields = List::create(packedList);
        }

        isMultipleTaxIdEnabledForIntrastat = TaxIntegrationUtils::isMultipleTaxIdEnabledForIntrastat();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        container packed = [CurrentVersion, #CurrentList, queryRun.pack()];

        if (isMultipleTaxIdEnabledForIntrastat)
        {
            packed = this.appendVariableToPack(packed, varStr(taxRegistration), taxRegistration);
        }

        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRegistration</Name>
				<Source><![CDATA[
    public TaxRegistration parmTaxRegistration(TaxRegistration _taxRegistration = taxRegistration)
    {
        taxRegistration = _taxRegistration;
        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the class to its default state.
    /// </summary>
    /// <remarks>
    ///    This method is called by the <c>RunBaseSetDefault</c> class.
    /// </remarks>
    void reset()
    {
        dif[0]                    = 0;
        expAmountMst              = 0;
        expInvoiceMarkupMst       = 0;
        expAmountCur              = 0;
        expInvoiceMarkupCur       = 0;
        expWeight                 = 0;
        expUnitQty                = 0;
        expAdditionalUnit         = 0;
        expIntrastatMarkupAmount  = 0;
        expConsignments           = 0;
        expStatAdjustAmt          = 0;
        expStatAmt                = 0;
        expStatMarkup             = 0;

        impAmountMst              = 0;
        impInvoiceMarkupMst       = 0;
        impAmountCur              = 0;
        impInvoiceMarkupCur       = 0;
        impWeight                 = 0;
        impUnitQty                = 0;
        impAdditionalUnit         = 0;
        impIntrastatMarkupAmount  = 0;
        impConsignments           = 0;
        impStatAdjustAmt          = 0;
        impStatAmt                = 0;
        impStatMarkup             = 0;

        impCustVendStatValue      = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        boolean             firstrecord = true;
        Intrastat           intrastatDelete;

        // <GEEU>
        isEEUCountry    = IntrastatParameters::isLegalEntityInEEU();
        // </GEEU>
        this.updateQueryBuild();

        ttsbegin;

        this.progressInit("@SYS8801", 0, #Avifilenuke);

        queryRun.query().dataSourceTable(tableNum(Intrastat)).update(true);
        while (queryRun.next())
        {
            intrastatDelete = queryRun.get(tableNum(Intrastat));

            if (firstrecord)
            {
                this.reset();
                firstrecord = false;
                this.initFromIntrastat(intrastatDelete);
            }

            intrastatDelete.delete();

            if (this.changed(intrastatDelete) && !firstrecord)
            {
                this.createNewIntrastat();
                this.reset();
                this.initFromIntrastat(intrastatDelete);
            }

            recordSortedList.ins(intrastatDelete);
        }

        if (!firstrecord)
        {
            this.createNewIntrastat();
        }

        this.createSeqNum();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);
        container packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList, packedQuery] = packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }

                if (isMultipleTaxIdEnabledForIntrastat)
                {
                    taxRegistration = this.extractPackedVariable(packedClass, varStr(taxRegistration));
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    void  updateQueryBuild()
    {
        ListEnumerator          listEnumerator;
        FieldId                 fieldId;
        QueryBuildDataSource    queryBuildDataSource;

        #ISOCountryRegionCodes

        queryBuildDataSource = queryRun.query().dataSourceTable(tableNum(Intrastat));
        queryBuildDataSource.addRange(fieldNum(Intrastat, TransDate)).value(queryRange(fromDate, toDate));
        
        if (isMultipleTaxIdEnabledForIntrastat)
        {
            queryBuildDataSource.addRange(fieldNum(Intrastat, TaxId)).value(queryValue(taxRegistration.RecId));
        }

        if (this.isItalianCountryRegion())
        {
            // Services are not compressed in Italy because otherwise services-specific fields (which must be exported to ASCII)  will be lost
            queryBuildDataSource.addRange(fieldNum(Intrastat, ItemType_IT)).value(queryValue(IntrastatItemType_IT::Goods));
        }

        queryRun.query().dataSourceTable(tableNum(Intrastat)).sortClear();

        if (listOfCompressFields)
        {
            listEnumerator = listOfCompressFields.getEnumerator();
            while (listEnumerator.moveNext())
            {
                fieldId = listEnumerator.current();
                if (IntrastatCompressParametersForm::fieldInCurrentCountryContext(fieldId))
                {
                    queryBuildDataSource.addSortField(fieldId);
                }
            }
        }

        queryBuildDataSource.addSortField(fieldNum(Intrastat, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        ListEnumerator  listEnumerator;
        boolean         found = false;
        boolean ok = true;

        if (fromDate == dateNull())
        {
            info ("@SYS19617");
            ok = false;
        }

        if (fromDate == dateNull())
        {
            info ("@SYS27232");
            ok = false;
        }

        if (fromDate > toDate)
        {
            info ("@SYS21592");
            ok = false;
        }
        if (mthOfYr(fromDate) != mthOfYr(toDate)    ||
            year(fromDate)    != year(toDate))
        {
            info("@SYS19361");
            ok = false;
        }

        if (isMultipleTaxIdEnabledForIntrastat && taxRegistration.RecId == 0)
        {
            ok = checkFailed("@IntrastatByTaxId:TaxRegNumNotSpecified");
        }

        if (this.isItalianCountryRegion())
        {
            listEnumerator = listOfCompressFields.getEnumerator();

            while (listEnumerator.moveNext() && !found)
            {
                found = listEnumerator.current() == fieldNum(Intrastat, CurrencyCode);
            }

            if (!found)
            {
                ok = checkFailed("@SYS4083054");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompression</Name>
				<Source><![CDATA[
    public boolean validateCompression()
    {
        return this.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        IntrastatCompression intrastatCompression;

        intrastatCompression = new IntrastatCompression();

        if (intrastatCompression.prompt())
        {
            intrastatCompression.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxID_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares and performs query to be used for lookup for the multiple Tax Id selector.
    /// </summary>
    /// <param name = "_formControl">
    /// The <c>FormStringControl</c> to perform lookup for.
    /// </param>
    /// <returns>
    ///  A <c>TaxRegistration</c> record.
    /// </returns>
    public TaxRegistration taxID_lookup(FormStringControl _formControl)
    {
        #ISOCountryRegionCodes;

        CompanyInfo companyInfo = CompanyInfo::find();
        Query query = new Query();
  
        TableLookup_RU lookUp = TableLookup_RU::newParameters(tableNum(TaxRegistration), _formControl);
        lookUp.addLookupfield(fieldNum(TaxRegistration, RegistrationNumber));
        lookUp.addLookupfield(fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule));

        query.validTimeStateDateRange(dateNull(), dateMax());
        QueryBuildDataSource qbdsRegistrationNumber = query.addDataSource(tableNum(TaxRegistration));

        QueryBuildDataSource qbdsTaxRegistrationLegislationTypes = qbdsRegistrationNumber.addDataSource(tableNum(TaxRegistrationLegislationTypes));
        qbdsTaxRegistrationLegislationTypes.joinMode(JoinMode::InnerJoin);
        qbdsTaxRegistrationLegislationTypes.relations(false);
        qbdsTaxRegistrationLegislationTypes.addLink(
            fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule),
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypeApplicabilityRule));
        qbdsTaxRegistrationLegislationTypes.addRange(
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypesList))
            .value(queryValue(TaxRegistrationTypesList::TAXID));

        QueryBuildDataSource qbdsDirPartyLocation = qbdsRegistrationNumber.addDataSource(tableNum(DirPartyLocation));
        qbdsDirPartyLocation.joinMode(JoinMode::InnerJoin);
        qbdsDirPartyLocation.relations(false);
        qbdsDirPartyLocation.addLink(
            fieldNum(TaxRegistration, DirPartyLocation),
            fieldNum(DirPartyLocation, RecId));
        qbdsDirPartyLocation.addRange(fieldNum(DirPartyLocation, Party)).value(queryValue(companyInfo.RecId));

        lookUp.parmQuery(query);
        lookUp.performFormLookup();

        if (lookUp.getFoundCursor())
        {
            taxRegistration = lookUp.getFoundCursor();
        }

        return taxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        prePostArgs.setReturnValue(_pack);
        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(IntrastatCompression) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItalianCountryRegion</Name>
				<Source><![CDATA[
    private boolean isItalianCountryRegion()
    {
        if (isTaxRegistrationInItalianCountryRegion == UnknownNoYes::Unknown)
        {
            isTaxRegistrationInItalianCountryRegion = this.isTaxRegistrationInCountryRegion(#isoIT) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return isTaxRegistrationInItalianCountryRegion == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNetherlandsCountryRegion</Name>
				<Source><![CDATA[
    private boolean isNetherlandsCountryRegion()
    {
        if (isTaxRegistrationInNetherlandsCountryRegion == UnknownNoYes::Unknown)
        {
            isTaxRegistrationInNetherlandsCountryRegion = this.isTaxRegistrationInCountryRegion(#isoNL) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return isTaxRegistrationInNetherlandsCountryRegion == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxRegistrationInCountryRegion</Name>
				<Source><![CDATA[
    private boolean isTaxRegistrationInCountryRegion(LogisticsAddressCountryRegionISOCode _isoCode)
    {
        if (isMultipleTaxIdEnabledForIntrastat)
        {
            DirPartyLocation partyLocation = DirPartyLocation::findRec(taxRegistration.DirPartyLocation);
            LogisticsAddressCountryRegionId taxRegistrationCountryRegionId = LogisticsPostalAddress::findByLocation(partyLocation.Location).CountryRegionId;

            return LogisticsAddressCountryRegion::find(taxRegistrationCountryRegionId).ISOcode == _isoCode;
        }

        return SysCountryRegionCode::isLegalEntityInCountryRegion([_isoCode]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>