<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportController_US</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportController_US</c> class is the controller class for the <c>TaxReport_US</c> report.
/// </summary>
public class TaxReportController_US extends SrsReportRunController implements BatchRetryable
{
    #define.ReportName('TaxReport_US.Report')
    #define.hiddenTransTxt('hiddenTransTxt')

    Query           query;
    QueryRun        queryRun;
    TaxParameters   taxParameters;
    CompanyInfo     companyInfo;

    TaxReport           taxReport;
    TaxReportVoucher    taxReportVoucher;

    TransDate           fromDate;
    TransDate           toDate;
    TaxPeriod           taxPeriod;
    TaxRepVersion       taxRepVersion;
    TaxVersion          taxRepCounter;
    TransDate           transDate;
    Voucher             voucher;
    NoYes               taxReported;
    boolean             isFirst;
    str                 hiddenTransTxt;

    Name  taxVersionParam;

    TaxTrans    taxTrans;
    TaxReportTmp_US taxReportTmp_US;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceUS00009, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>TaxReport_US</c> report.
    /// </summary>
    /// <param name="_args">
    ///    The context.
    /// </param>
    public void init(Args _args)
    {
        taxParameters   = TaxParameters::find();
        companyInfo     = CompanyInfo::find();
        isFirst = true;
        hiddenTransTxt = 'show';

        if (_args && _args.dataset() == tablenum(TaxReportVoucher))
        {
            taxReportVoucher = _args.record();
            taxRepVersion    = taxReportVoucher.TaxRepVersion;
            taxPeriod        = taxReportVoucher.TaxPeriod;
            fromDate         = taxReportVoucher.FromDate;
            toDate           = taxReportVoucher.ToDate;
            taxRepCounter    = taxReportVoucher.TaxRepCounter;
            transDate        = taxReportVoucher.TransDate;
            voucher          = taxReportVoucher.Voucher;
        }
        else if (_args && classidget(_args.parmObject()) == classnum(TaxReport))
        {
            taxReport      = _args.parmObject();
            taxRepVersion  = taxReport.taxRepVersion();
            taxPeriod      = taxReport.taxPeriod();
            fromDate       = taxReport.fromDate();
            toDate         = taxReport.toDate();
            taxReported    = taxReport.taxReported();
        }

        query = new Query(querystr(TaxReport_US));

        if ( TaxParameters::find().PurchTaxOnOperations)
        {
            query.dataSourceTable(tablenum(TaxTrans)).addRange(fieldnum(TaxTrans, TaxDirection));
            query.dataSourceTable(tablenum(TaxTrans)).rangeField(fieldnum(TaxTrans, TaxDirection)).value(strfmt('!%1', SysQuery::value(TaxDirection::IncomingTax)));
        }

        query.dataSourceTable(tablenum(TaxTrans)).rangeField(fieldnum(TaxTrans, Source)).value(strfmt('!%1', SysQuery::value(TaxModuleType::Tax)));

        if (taxPeriod && fromDate && toDate)
        {
            query.dataSourceTable(tablenum(TaxTrans)).rangeField(fieldnum(TaxTrans, TaxPeriod)).value(strfmt('%1', taxPeriod));
            query.dataSourceTable(tablenum(TaxTrans)).rangeField(fieldnum(TaxTrans, TransDate)).value(queryRange(fromDate, toDate));

            if (voucher && transDate)
                taxVersionParam =  strfmt('%1',taxRepCounter);
            else
                taxVersionParam = TaxReport::taxVersion(taxRepVersion, taxPeriod, fromDate, taxReported); //NoYes::Yes);

            query.dataSourceTable(tablenum(TaxTrans)).rangeField(fieldnum(TaxTrans, TaxRepCounter)).value(taxVersionParam);
        }

        queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                taxTrans = queryRun.getNo(1);

                if (isFirst)
                {
                    this.initForCommon();
                }
                this.initFromTaxTrans(taxTrans);
            }

        if (taxParameters.PurchTaxOnOperations)
        {
            hiddenTransTxt = 'hidden';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        protected void preRunModifyContract()
    {
        SrsTmpTblMarshallerContract     contract;
        RecId                           recId;
        SrsReportRdlDataContract        rdlContract;

        rdlContract = this.parmReportContract().parmRdlContract();
        contract = this.parmReportContract().parmRdpContract() as SrsTmpTblMarshallerContract;

        this.init(this.parmArgs());

        recId = this.storeTmpTable();

        contract.parmTmpTableDataRecId(recId);

        rdlContract.setValue(#hiddenTransTxt,hiddenTransTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the temporary table by using the <c>SRSTmpTblMarshaller</c> class.
    /// </summary>
    /// <returns>
    ///    The record ID of the stored temporary table.
    /// </returns>
    public RecId storeTmpTable()
    {
        RecId                       reportParamRecId;
        SRSReportRunPermission      srsPermission;

        srsPermission = new SRSReportRunPermission();
        srsPermission.assert();
        reportParamRecId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(taxReportTmp_US);
        CodeAccessPermission::revertAssert();

        delete_from taxReportTmp_US;

        return reportParamRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SrsReportRunController  controller = new TaxReportController_US();
        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init <c>TaxReportTmp_US</c>.
    /// </summary>
    protected void initForCommon()
    {
        taxReportTmp_US.TaxAuthorityName = TaxAuthorityAddress::taxAuthorityName(TaxPeriodHead::find(taxPeriod).TaxAuthority);
        taxReportTmp_US.TaxAuthorityAddress = TaxAuthorityAddress::address(TaxPeriodHead::find(taxPeriod).TaxAuthority);
        taxReportTmp_US.FromDate = fromDate;
        taxReportTmp_US.ToDate = toDate;
        taxReportTmp_US.TaxRepVersion = taxRepVersion;
        taxReportTmp_US.TaxPeriodName = TaxPeriodHead::find(taxPeriod).Name;
        taxReportTmp_US.vatNum = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, toDate);
        taxReportTmp_US.CompanyName = companyInfo.name();
        taxReportTmp_US.CompanyAddress = companyInfo.postalAddress().Address;
        taxReportTmp_US.CompanyPhone = companyInfo.phone();
        isFirst = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init <c>TaxReportTmp_US</c>.
    /// </summary>
    /// <param name = "_taxTrans">
    /// The tax trans.
    ///</param>
    protected void initFromTaxTrans(TaxTrans _taxTrans)
    {
        if ( taxParameters.PurchTaxOnOperations && taxTrans.TaxDirection == TaxDirection::UseTax)
        {
            taxTrans.TaxInCostPriceCur = 0;
            taxTrans.TaxInCostPriceMST = 0;
        }

        taxReportTmp_US.TaxTrans_TaxCode = taxTrans.TaxCode;
        taxReportTmp_US.TaxTrans_TaxName = TaxTable::find(taxTrans.TaxCode).TaxName;
        taxReportTmp_US.TaxTrans_TaxDirection = taxTrans.TaxDirection;
        taxReportTmp_US.TaxTrans_TaxBaseQty = taxTrans.TaxBaseQty;
        taxReportTmp_US.TaxTrans_TaxBaseAmountCur = taxTrans.taxOnlyBaseAmountCur();
        taxReportTmp_US.TaxTrans_TaxAmountCur = taxTrans.taxCodeCurrencyTaxAmount();
        taxReportTmp_US.TaxTrans_TaxInCostPrice = taxTrans.taxCodeCurrencyChargeAmount();
        taxReportTmp_US.TaxTrans_TransTxt = '';
        taxReportTmp_US.insert();
        taxReportTmp_US.clear();

        if ( !taxParameters.PurchTaxOnOperations && taxTrans.TaxDirection == TaxDirection::UseTax)
        {
            taxTrans.TaxAmountCur = (taxTrans.TaxAmountCur - taxTrans.TaxInCostPriceCur) * -1;
            taxTrans.TaxAmount    = (taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST) * -1;
            taxReportTmp_US.TaxTrans_TaxCode = taxTrans.TaxCode;
            taxReportTmp_US.TaxTrans_TaxName = TaxTable::find(taxTrans.TaxCode).TaxName;
            taxReportTmp_US.TaxTrans_TaxDirection = taxTrans.TaxDirection;
            taxReportTmp_US.TaxTrans_TaxBaseQty = taxTrans.TaxBaseQty;
            taxReportTmp_US.TaxTrans_TaxBaseAmountCur = taxTrans.taxOnlyBaseAmountCur();
            taxReportTmp_US.TaxTrans_TaxAmountCur = taxTrans.taxCodeCurrencyTaxAmount();
            taxReportTmp_US.TaxTrans_TaxInCostPrice = taxTrans.taxCodeCurrencyChargeAmount();
            taxReportTmp_US.TaxTrans_TransTxt = "@SYS58906";
            taxReportTmp_US.insert();
            taxReportTmp_US.clear();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>