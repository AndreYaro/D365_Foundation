<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlLedgerDimensionMaintenanceProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlLedgerDimensionMaintenanceProvider</c> class is a budget control data
/// maintenance scenario that updates the BudgetControlLedgerDimension fied on <c>BudgetSourceTrackingDetail</c> records
/// to reflect the dimensions currently in budget control configuration.
/// </summary>
public final class BudgetControlLedgerDimensionMaintenanceProvider extends BudgetControlDataMaintenanceProvider implements BudgetControlISetBasedDataMaintenanceProvider
{
    private const ClassName ProviderClassName = classStr(BudgetControlLedgerDimensionMaintenanceProvider);
    private const Description255 ProviderName = "@Budget:DataMaintenanceLedgerDimensionProviderName";
    private const Description255 ProviderDescription = "@Budget:DataMaintenanceLedgerDimensionProviderDescription";
    LedgerRecId primaryLedger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds budget register entries that have not been checked for budget funds available.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenance</c> process group record Id.
    /// </param>
    [Hookable(false)]
    public void findDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        this.preFindDocuments(_budgetControlDataMaintenanceRecId);

        BudgetControlDataMaintenance budgetControlDataMaintenance = BudgetControlDataMaintenance::find(_budgetControlDataMaintenanceRecId);

        var configurationSynchronize = BudgetControlDimensionConfigurationSynchronize::constructForConfigurationChange(
            budgetControlDataMaintenance.DocumentFromDate, 
            budgetControlDataMaintenance.DocumentToDate,
            budgetControlDataMaintenance.DocumentSourceTrackingStatus);
        
        configurationSynchronize.findConfigurationChangeDifferences();

        if (configurationSynchronize.synchronizeChangesDetected)
        {
            this.createDataMaintenanceTracking(budgetControlDataMaintenance, configurationSynchronize.budgetControlLedgerDimensionTmp);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataMaintenanceTracking</Name>
				<Source><![CDATA[
    private void createDataMaintenanceTracking(BudgetControlDataMaintenance _budgetControlDataMaintenance, BudgetControlLedgerDimensionTmp _controlLedgerDimensionTmp)
    {
        var dataMaintenanceDetectionDateTime = DateTimeUtil::utcNow();
        var trackingStatus = _budgetControlDataMaintenance.DocumentSourceTrackingStatus;
        int undefinedIntegrator = -1;
        BudgetControlDataMaintenanceRecId budgetControlDataMaintenanceRecId = _budgetControlDataMaintenance.RecId;

        ttsbegin;

        BudgetControlLedgerDimensionTmp controlLedgerDimensionTmp;
        controlLedgerDimensionTmp.linkPhysicalTableInstance(_controlLedgerDimensionTmp);

        BudgetControlDataMaintenanceTracking controlDataMaintenanceTracking;

        insert_recordset controlDataMaintenanceTracking (
                BudgetControlDataMaintenance, DataMaintenanceProvider, DataMaintenanceProviderName,
                TrackingStatus, TrackingDocument, TrackingControlLedgerDimension, ReplacementControlLedgerDimension,
                TrackingSourceIntegrator, OriginatingTrackingSourceIntegrator, DataMaintenanceProviderDetectionDateTime)
            select budgetControlDataMaintenanceRecId, ProviderClassName, ProviderName,
                trackingStatus, BudgetSourceLedgerDimension, BudgetControlLedgerDimension, ReplacementControlLedgerDimension,
                undefinedIntegrator, undefinedIntegrator, dataMaintenanceDetectionDateTime
                from controlLedgerDimensionTmp;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Description255 getDescription()
    {
        return ProviderDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Description255 getName()
    {
        return ProviderName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFindDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove existing found documents prior to finding new documents.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The budget control data maintenance record Id.
    /// </param>
    [Hookable(false)]
    public void preFindDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        super(_budgetControlDataMaintenanceRecId);

        BudgetControlDataMaintenanceProvider::removeExistingFoundDocuments(_budgetControlDataMaintenanceRecId, providerClassName);

        // Clear BudgetControlLedgerDimension cache in case invalid dimensions are still in the cache.
        BudgetCache::clearScope(BudgetCacheScope::BudgetControlLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocumentsSetBased</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void processDocumentsSetBased(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        BudgetControlLedgerDimensionTmp ledgerDimensionTmp;
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking;

        ttsbegin;

        insert_recordset ledgerDimensionTmp (BudgetSourceLedgerDimension, BudgetControlLedgerDimension, ReplacementControlLedgerDimension)
            select TrackingDocument, TrackingControlLedgerDimension, ReplacementControlLedgerDimension
                from budgetControlDataMaintenanceTracking
                    where budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance == _budgetControlDataMaintenanceRecId
                        && budgetControlDataMaintenanceTracking.DataMaintenanceProvider == providerClassName
                        && budgetControlDataMaintenanceTracking.Selected == NoYes::Yes;

        BudgetControlDimensionConfigurationSynchronize::updateLedgerDimensionReferences(ledgerDimensionTmp);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a single budget register entry with budget control.
    /// </summary>
    /// <param name="_dataMaintenanceTrackingRecId">
    /// A <c>BudgetControlDataMaintenanceTracking</c> record Id.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value for the processed budget register entry.
    /// </returns>
    [Hookable(false)]
    public BudgetCheckResult processDocument(RecId _dataMaintenanceTrackingRecId)
    {
        // Should use processDocumentsSetBased
        return BudgetCheckResult::NoCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessDocuments</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void postProcessDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        // Call create rule ledger dimension associations for all the new hash generated budget control ledger dimensions.
        BudgetControlConfiguration activeConfiguration = BudgetControlConfiguration::findActiveByPrimaryLedger(this.primaryLedger);
        BudgetControlConfigurationManager::createBudgetControlRuleLedgerDimensions(activeConfiguration.RecId);

        // Call create group ledger dimension associations for any newly generated budget control ledger dimensions.
        BudgetControlConfigurationManager::createBudgetGroupLedgerDimensions(activeConfiguration.RecId);

        BudgetControlDataMaintenanceProvider::reprocessSummaryBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        primaryLedger = Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reprocessSummaryBalance</Name>
				<Source><![CDATA[
    internal static void reprocessSummaryBalance()
    {
        BudgetControlDataMaintenanceProvider::reprocessSummaryBalance();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>