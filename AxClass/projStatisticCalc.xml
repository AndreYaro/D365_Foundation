<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>projStatisticCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjStatisticCalc
{
    container                   projStatisticCon;

    TmpProjStatistic            tmpProjStatistic;
    TmpProjStatisticExcelPivot  tmpProjStatisticExcelPivot;

    ProjTransIdBase             transId;
    ProjActualBudget            actualBudget;

    ProjStatistic               projStatistic;

    boolean                     useDataEntity;
    boolean                     ignoreExportToExcelPivot;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    Query buildQuery()
    {
        Query                   query   = new Query();
        QueryBuildDataSource    dataSource;
        QueryBuildDataSource    queryBuildDataSource;

        if (this.parmProjTable())
        {
            dataSource          = query.addDataSource(tableNum(ProjTable));
            if (projStatistic.parmProjGroupId())
            {
                dataSource.addRange(fieldNum(ProjTable, ProjGroupId)).value(projStatistic.parmProjGroupId());
            }
            else if (projStatistic.parmGrantId())
            {
                queryBuildDataSource = dataSource.addDataSource(tableNum(ProjGrantView));
                queryBuildDataSource.addLink(fieldNum(ProjTable , ProjId), fieldNum(ProjGrantView, ProjId));
                queryBuildDataSource.addRange(fieldNum(ProjGrantView, GrantId)).value(projStatistic.parmGrantId());
            }
            else if (projStatistic.parmProjId())
            {
                dataSource.addRange(fieldNum(ProjTable, ProjId)).value(queryValue(projStatistic.parmProjId()));
            }
            else if (projStatistic.parmProjInvoiceProjId())
            {
                dataSource.addRange(fieldNum(ProjTable, ProjInvoiceProjId)).value(projStatistic.parmProjInvoiceProjId());
            }
            else if (projStatistic.parmProjWIPId())
            {
                dataSource.addRange(fieldNum(ProjTable, wipProject)).value(projStatistic.parmProjWIPId());
            }
            else if (projStatistic.parmCustAccount())
            {
                dataSource.addRange(fieldNum(ProjTable, CustAccount)).value(projStatistic.parmCustAccount());
            }
            else if (projStatistic.parmSorting1())
            {
                dataSource.addRange(fieldNum(ProjTable, SortingId), 1).value(projStatistic.parmSorting1());
            }
            else if (projStatistic.parmSorting2())
            {
                dataSource.addRange(fieldNum(ProjTable, SortingId), 2).value(projStatistic.parmSorting2());
            }
            else if (projStatistic.parmSorting3())
            {
                dataSource.addRange(fieldNum(ProjTable, SortingId), 3).value(projStatistic.parmSorting3());
            }
            if (projStatistic.parmProjTree())
            {
                dataSource.addRange(fieldNum(ProjTable, ProjId)).value(projStatistic.parmProjId()+'*');
            }
        }
        else if (this.parmProjCategory())
        {
            dataSource     = query.addDataSource(tableNum(ProjCategory));
            if (projStatistic.parmProjCategoryId())
            {
                dataSource.addRange(fieldNum(ProjCategory, CategoryId)).value(projStatistic.parmProjCategoryId());
            }
        }
        else if (this.parmProjCategoryGroup())
        {
            dataSource     = query.addDataSource(tableNum(ProjCategoryGroup));
            if (projStatistic.parmCategoryGroupId())
            {
                dataSource.addRange(fieldNum(ProjCategoryGroup, CategoryGroupId)).value(projStatistic.parmCategoryGroupId());
            }
        }
        else if (this.parmResource())
        {
            dataSource     = query.addDataSource(tableNum(ResourceView));
            if (projStatistic.parmResource())
            {
                dataSource.addRange(fieldNum(ResourceView, RecId)).value(queryValue(projStatistic.parmResource()));
            }
        }
        else if (this.parmResourceCategory())
        {
            dataSource     = query.addDataSource(tableNum(ResourceCategoryView));
            if (projStatistic.parmResourceCategory())
            {
                dataSource.addRange(fieldNum(ResourceCategoryView, RecId)).value(queryValue(projStatistic.parmResourceCategory()));
            }
        }
        else if (this.parmInventTable())
        {
            dataSource     = query.addDataSource(tableNum(InventTable));
            if (projStatistic.parmitemId())
            {
                dataSource.addRange(fieldNum(InventTable, ItemId)).value(projStatistic.parmitemId());
            }
        }
        else if (this.parmSMASubscriptionTable())
        {
            dataSource     = query.addDataSource(tableNum(SMASubscriptionTable));
            if (projStatistic.parmSubscriptionGroupId())
            {
                dataSource.addRange(fieldNum(SMASubscriptionTable, GroupId)).value(projStatistic.parmSubscriptionGroupId());
            }
            if (projStatistic.parmSubscriptionId())
            {
                dataSource.addRange(fieldNum(SMASubscriptionTable, SubscriptionId)).value(projStatistic.parmSubscriptionId());
            }
        }
        else if (this.parmCustTable())
        {
            dataSource      = query.addDataSource(tableNum(ProjTable));
            dataSource.addRange(fieldNum(ProjTable, CustAccount)).value(projStatistic.parmCustAccount());
            queryBuildDataSource = dataSource.addDataSource(tableNum(CustTable));
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSource.addLink(fieldNum(ProjTable, CustAccount),fieldNum(CustTable, AccountNum));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(TmpProjStatistic    _tmpProjStatistic)
    {
        tmpProjStatistic.setTmpData(_tmpProjStatistic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseDataEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use PSAActualEntity and PSAForecastEntity (data entity) to retrieve forecasts and actuals
    /// </summary>
    /// <param name = "_useDataEntity">true if data entity needs to be used, false otherwise</param>
    /// <returns></returns>
    public boolean parmUseDataEntity(boolean    _useDataEntity = useDataEntity)
    {
        useDataEntity = _useDataEntity;
        return useDataEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreExportToExcelPivot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switch used to ignore export to excel pivot. Currently used from project statement form since data entity exposed as odata feeds provides that functionality
    /// </summary>
    /// <param name = "_ignoreExportToExcelPivot">true if export to excel should be ignored, false otherwise</param>
    /// <returns></returns>
    public boolean parmIgnoreExportToExcelPivot(boolean    _ignoreExportToExcelPivot = ignoreExportToExcelPivot)
    {
        ignoreExportToExcelPivot = _ignoreExportToExcelPivot;
        return ignoreExportToExcelPivot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualBudget</Name>
				<Source><![CDATA[
    public ProjActualBudget parmActualBudget(ProjActualBudget    _actualBudget = actualBudget)
    {
        actualBudget = _actualBudget;

        return actualBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTable</Name>
				<Source><![CDATA[
    boolean parmCustTable()
    {
        if (projStatistic.parmCustAccount())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    boolean parmInventTable()
    {
        if (projStatistic.parmitemId())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategory</Name>
				<Source><![CDATA[
    boolean parmProjCategory()
    {
        if (projStatistic.parmProjCategoryId())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryGroup</Name>
				<Source><![CDATA[
    boolean parmProjCategoryGroup()
    {
        if (projStatistic.parmCategoryGroupId())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjStatistic</Name>
				<Source><![CDATA[
    public ProjStatistic parmProjStatistic(ProjStatistic _projStatistic = projStatistic)
    {
        projStatistic = _projStatistic;

        return projStatistic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjStatisticCon</Name>
				<Source><![CDATA[
    public container parmProjStatisticCon(container _projStatistic = projStatisticCon)
    {
        projStatisticCon = _projStatistic;

        return projStatisticCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    boolean parmProjTable()
    {
        if (projStatistic.parmProjId()            ||
        projStatistic.parmProjGroupId()       ||
        projStatistic.parmProjInvoiceProjId() ||
        projStatistic.parmProjTree()          ||
        projStatistic.parmSorting1()          ||
        projStatistic.parmSorting2()          ||
        projStatistic.parmSorting3()          ||
        projStatistic.parmProjWIPId())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    boolean parmResource()
    {
        if (projStatistic.parmResource())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceCategory</Name>
				<Source><![CDATA[
    boolean parmResourceCategory()
    {
        if (projStatistic.parmResourceCategory())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSMASubscriptionTable</Name>
				<Source><![CDATA[
    boolean parmSMASubscriptionTable()
    {
        if (projStatistic.parmSubscriptionGroupId()  ||
        projStatistic.parmSubscriptionId())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmTransId(ProjTransIdBase _transId    = transId)
    {
        transId = _transId;

        return transId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        ProjTable               projTable;
        ResourceView            resource;
        ResourceCategoryView    resourceCategory;
        ProjCategory            projCategory;
        ProjCategoryGroup       projCategoryGroup;
        InventTable             inventTable;
        SMASubscriptionTable    smaSubscriptionTable;

        projStatement           projStatement;

        Query                   query;
        QueryRun                queryRun;
        boolean                 doCalc    = true;

        projStatistic   = new ProjStatistic();
        // Unpack the version of ProjStatistic object created on the client in the ProjStatistic
        projStatistic.unpack(this.parmProjStatisticCon());

        projStatement   = projStatement::newProjStatistic(projStatistic,this.parmActualBudget());

        if (!this.validate())
        {
            return;
        }

        tmpProjStatistic.clear();

        query    = this.buildQuery();
        queryRun = new QueryRun(query);

        projStatement.parmStateProjType(this.setStatementType());
        projStatement.parmforecastModelId(projStatistic.parmForecastModelId());

        projStatement.tmpProjStatisticExcelPivot(tmpProjStatisticExcelPivot);

        while (queryRun.next())
        {
            if (this.parmProjTable())
            {
                projStatement.parmListId(ProjListStateId::Project);
                if (queryRun.changed(tableNum(ProjTable)))
                {
                    projTable       = queryRun.get(tableNum(ProjTable));

                    projStatement.parmProjId(projTable.ProjId);
                }
            }
            else
            {
                projStatement.parmFixedPrice(projStatistic.parmFixedPrice());
                projStatement.parmTimeMaterial(projStatistic.parmTimeMaterial());
                projStatement.parmInvestment(projStatistic.parmInvestment());
                projStatement.parmInternal(projStatistic.parmInternalCost());
                projStatement.parmCost(projStatistic.parmInternalCost());
                projStatement.parmTime(projStatistic.parmTime());

                // if no project type choosen - calculation should not be executed.
                if (!  (projStatistic.parmFixedPrice()   ||
                    projStatistic.parmTimeMaterial() ||
                    projStatistic.parmInternalCost() ||
                    projStatistic.parmInvestment()   ||
                    projStatistic.parmTime()))
                {
                    doCalc    = false;
                }

                if (this.parmProjCategory())
                {
                    projStatement.parmListId(ProjListStateId::Category);
                    if (queryRun.changed(tableNum(ProjCategory)))
                    {
                        projCategory    = queryRun.get(tableNum(ProjCategory));
                        projStatement.parmCategoryId(projCategory.CategoryId);
                    }
                }
                else if (this.parmProjCategoryGroup())
                {
                    projStatement.parmListId(ProjListStateId::CategoryGroup);
                    if (queryRun.changed(tableNum(ProjCategoryGroup)))
                    {
                        projCategoryGroup = queryRun.get(tableNum(ProjCategoryGroup));
                        projStatement.parmCategoryGroupId(projCategoryGroup.CategoryGroupId);
                    }
                }
                else if (this.parmResource())
                {
                    projStatement.parmListId(ProjListStateId::EmplItem);
                    if (queryRun.changed(tableNum(ResourceView)))
                    {
                        resource       = queryRun.get(tableNum(ResourceView));
                        projStatement.parmResource(resource.RecId);
                    }
                }
                else if (this.parmResourceCategory())
                {
                    projStatement.parmListId(ProjListStateId::ResourceCategory);
                    if (queryRun.changed(tableNum(ResourceCategoryView)))
                    {
                        resourceCategory       = queryRun.get(tableNum(ResourceCategoryView));
                        projStatement.parmResourceCategory(resourceCategory.RecId);
                    }
                }
                else if (this.parmInventTable())
                {
                    projStatement.parmListId(ProjListStateId::EmplItem);
                    if (queryRun.changed(tableNum(InventTable)))
                    {
                        inventTable       = queryRun.get(tableNum(InventTable));
                        projStatement.parmEmplItemId(inventTable.ItemId);
                    }
                }
                else if (this.parmSMASubscriptionTable())
                {
                    projStatement.parmListId(ProjListStateId::EmplItem);
                    if (queryRun.changed(tableNum(SMASubscriptionTable)))
                    {
                        smaSubscriptionTable       = queryRun.get(tableNum(SMASubscriptionTable));
                        projStatement.parmSubscriptionId(smaSubscriptionTable.SubscriptionId);
                    }
                }
                else if (this.parmCustTable())
                {
                    projStatement.parmListId(ProjListStateId::CustAccount);
                    projStatement.parmCustAccount(projStatistic.parmCustAccount());

                    if (queryRun.changed(tableNum(ProjTable)))
                    {
                        projTable       = queryRun.get(tableNum(ProjTable));
                        projStatement.parmProjId(projTable.ProjId);
                    }
                }
                else
                {
                    projStatement = this.setProjStmtParmMethods(projStatement, queryRun);
                }
            }

            if (doCalc)
            {
                this.setTmpProjStatistic(projStatement);

                // Generate data for Export to Excel Pivot
                if (!this.parmIgnoreExportToExcelPivot())
                {
                    this.setTmpProjStatisticExcelPivot(projStatement);
                }
            }
        }

        this.setTotalsTmpProjStatistic();
        tmpProjStatistic.TransId        = this.parmTransId();
        tmpProjStatistic.ActualBudget   = this.parmActualBudget();

        tmpProjStatistic.insert();

        if (!this.parmIgnoreExportToExcelPivot())
        {
            tmpProjStatisticExcelPivot.setTmpData(projStatement.tmpProjStatisticExcelPivot());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjStmtParmMethods</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets project statement parm methods.
    /// </summary>
    /// <param name = "_projStatement">
    ///     An instance of <c>ProjStatement</c> class.
    /// </param>
    /// <param name = "_queryRun">
    ///     Query run object.
    /// </param>
    /// <returns>
    ///     An instance of <c>ProjStatement</c> class updated using extensibility.
    /// </returns>
    protected ProjStatement setProjStmtParmMethods(ProjStatement _projStatement, QueryRun _queryRun)
    {
        return _projStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatementType</Name>
				<Source><![CDATA[
    ProjListStateProjType setStatementType()
    {
        if (projStatistic.parmCustAccount())
        {
            return ProjListStateProjType::Customer;
        }

        if (projStatistic.parmProjGroupId())
        {
            return ProjListStateProjType::ProjGroup;
        }

        if (projStatistic.parmProjId())
        {
            return ProjListStateProjType::Project;
        }

        if (projStatistic.parmProjInvoiceProjId())
        {
            return ProjListStateProjType::InvoiceProject;
        }

        if (projStatistic.parmProjWIPId())
        {
            return ProjListStateProjType::WIPProject;
        }

        if (projStatistic.parmSorting1())
        {
            return ProjListStateProjType::Sorting1;
        }

        if (projStatistic.parmSorting2())
        {
            return ProjListStateProjType::Sorting2;
        }

        if (projStatistic.parmSorting3())
        {
            return ProjListStateProjType::Sorting3;
        }

        return ProjListStateProjType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPSAEntityToTmpProjStatistic</Name>
				<Source><![CDATA[
    protected void mapPSAEntityToTmpProjStatistic(Common  _psaEntity)
    {
        real    plHourCost,
                plHourQty,
                plItemCost,
                plTotalCost,
                consumHourCost,
                consumHourQty,
                consumItemCost;

        if (_psaEntity.TableId == tablenum(PSAForecastEntity) || _psaEntity.TableId == tablenum(PSAActualEntity))
        {
            plHourCost = ProjParameters::find().StatementPLHourCost ?
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLLaborCost))) :
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLLaborCostWithoutNoNeverLedger)));
            plHourQty = ProjParameters::find().StatementPLHourQty ?
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLLaborQty))) :
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLLaborQtyWithoutNoNeverLedger)));
            plItemCost = ProjParameters::find().ItemNeverLedgerPL ?
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLMaterialCost))) :
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLMaterialCostWithoutNeverLedger)));
            plTotalCost = plHourCost + _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLExpenseCost))) +
                          plItemCost + _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLCostAccruedLoss)));

            consumHourCost = ProjParameters::find().StatementConsumpHourCost ?
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(ConsumedLaborCost))) :
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(ConsumedLaborCostWithoutNoNeverLedger)));
            consumHourQty = ProjParameters::find().StatementConsumpHourQty ?
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(ConsumedLaborQty))) :
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(ConsumedLaborQtyWithoutNoNeverLedger)));
            consumItemCost = ProjParameters::find().ItemNeverLedgerConsum ?
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(ConsumedMaterialCost))) :
                                _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(ConsumedMaterialCostWithoutNeverLedger)));

            tmpProjStatistic.GeneralHoursQty                += plHourQty;

            tmpProjStatistic.plInvRevInvoiceRevenue         += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(plinvoicedrevenue)));
            tmpProjStatistic.plInvRevInvoiceOnAcc           += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLInvoicedRevenueOnAccount)));
            tmpProjStatistic.plInvRevTotalInvoiceRevenue    += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(plinvoicedrevenue))) + _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLInvoicedRevenueOnAccount)));

            tmpProjStatistic.plAccRevSalesValue             += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLAccruedRevenueSalesValue)));
            tmpProjStatistic.plAccRevSubscript              += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLAccruedRevenueSubscription)));
            tmpProjStatistic.plAccRevProduction             += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLAccruedRevenueProduction)));
            tmpProjStatistic.plAccRevProfit                 += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLAccruedRevenueProfit)));
            tmpProjStatistic.plAccRevAccOnAcc               += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLAccruedRevenueOnAcc)));

            AmountMST projTotalRevenue                      = _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(plinvoicedrevenue))) + _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLInvoicedRevenueOnAccount))) + _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLTotalAccruedRevenue)));
            tmpProjStatistic.plTotalRevenue                 += projTotalRevenue;

            AmountMST projGrossMargin                       = projTotalRevenue - plTotalCost;
            tmpProjStatistic.plTotalGrossMargin             += projGrossMargin;

            AmountMST projTotalValueAddedAmount             = projGrossMargin + plHourCost;
            tmpProjStatistic.plTotalValueAddedAmount        += projTotalValueAddedAmount;

            tmpProjStatistic.plCostItem                     += plItemCost;
            tmpProjStatistic.plCostExpenses                 += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLExpenseCost)));
            tmpProjStatistic.plCostAccCost                  += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PLCostAccruedLoss)));
            tmpProjStatistic.plCostHour                     += plHourCost;

            tmpProjStatistic.wipCostpriceHour               += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(WIPLaborCost)));
            tmpProjStatistic.wipCostpriceExp                += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(WIPExpenseCost)));
            tmpProjStatistic.wipCostpriceItem               += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(WIPMaterialCost)));
            tmpProjStatistic.wipCostpriceAccruedCost        += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(WIPCostAccruedLoss)));

            tmpProjStatistic.wipSalesPriceSalesValue        += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(WIPSalesValue)));
            tmpProjStatistic.wipSalesPriceSubscript         += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(WIPSubscription)));
            tmpProjStatistic.wipSalespriceProduction        += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(WIPProduction)));
            tmpProjStatistic.wipSalesPriceProfit            += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(WIPProfit)));
            tmpProjStatistic.wipSalespriceTotal             += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(WIPSalesTotal)));

            tmpProjStatistic.wipTotalGrossWIP               += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(GrossWIP)));
            tmpProjStatistic.wipInvoiceOnAcc                += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(WIPInvoicedOnAccount)));
            tmpProjStatistic.wipTotalNetWIP                 += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(NetWIP)));

            tmpProjStatistic.OtherConsumHour                += consumHourCost;
            tmpProjStatistic.OtherConsumHoursQty            += consumHourQty;

            tmpProjStatistic.OtherConsumExp                 += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(ConsumedExpenseCost)));
            tmpProjStatistic.OtherConsumItem                += consumItemCost;

            tmpProjStatistic.OtherPayroll                   += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(PayrollAllocation)));

            tmpProjStatistic.InvoiceHour                    += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(LaborInvoicedRevenue)));
            tmpProjStatistic.InvoiceHourQty                 += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(LaborInvoicedQty)));
            tmpProjStatistic.InvoiceExpense                 += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(ExpenseInvoicedRevenue)));
            tmpProjStatistic.InvoiceItem                    += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(MaterialInvoicedRevenue)));
            tmpProjStatistic.InvoiceFee                     += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(FeeInvoicedRevenue)));
            tmpProjStatistic.InvoiceOnAccount               += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(OnAccTotal)));
            tmpProjStatistic.InvoiceTotal                   += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(totalInvoicedRevenue)));

            tmpProjStatistic.InvOnAccPrepayment             += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(OnAccPrePayment)));
            tmpProjStatistic.InvOnAccDeduction              += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(OnAccDeduction)));
            tmpProjStatistic.InvOnAccMilestone              += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(OnAccMilestone)));
            tmpProjStatistic.InvOnAccBeginningBalance       += _psaEntity.(fieldname2id(_psaEntity.TableId, identifierstr(OnAccBegBal)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpProjStatistic</Name>
				<Source><![CDATA[
    void setTmpProjStatistic(projStatement       _projStatement)
    {
        QueryRun            entityQueryRun;
        Query               entityQuery;
        PSAForecastEntity   forecastEntity;
        PSAActualEntity     actualEntity;

        if (this.parmUseDataEntity())
        {
            if (this.parmActualBudget() == ProjActualBudget::Actual)
            {
                entityQuery = _projStatement.queryActualEntity();
                entityQueryRun = new QueryRun(entityQuery);
                while (entityQueryRun.next())
                {
                    actualEntity = entityQueryRun.get(tablenum(PSAActualEntity));
                    this.mapPSAEntityToTmpProjStatistic(actualEntity);
                }
            }
            else
            {
                PSAForecastEntity checkForecastEntity;

                if (_projStatement.parmProjId())
                {
                    select firstonly RecId from checkForecastEntity where checkForecastEntity.ProjId == _projStatement.parmProjId();
                }

                if (checkForecastEntity.RecId != 0 || !_projStatement.parmProjId())
                {
                    entityQuery = _projStatement.queryBudgetEntity();
                    entityQueryRun = new QueryRun(entityQuery);
                    while (entityQueryRun.next())
                    {
                        forecastEntity = entityQueryRun.get(tablenum(PSAForecastEntity));
                        this.mapPSAEntityToTmpProjStatistic(forecastEntity);
                    }
                }
            }
        }
        else
        {
            tmpProjStatistic.GeneralHoursQty        += _projStatement.a310_Cost_Hour_Qty(false,ProjListStateType::ProfitLoss);

            tmpProjStatistic.plInvRevInvoiceRevenue += (_projStatement.a110_Invoiced_Revenue_Hour()+
                                                _projStatement.a115_Invoiced_Revenue_Item()+
                                                _projStatement.a120_Invoiced_Revenue_Expenses()+
                                                _projStatement.a125_Invoiced_Revenue_Revenue());
            tmpProjStatistic.plInvRevInvoiceOnAcc   += _projStatement.a135_Invoiced_Revenue_OnAccount();
            tmpProjStatistic.plInvRevTotalInvoiceRevenue
                                            += _projStatement.a105_Invoiced_Revenue();

            tmpProjStatistic.plAccRevSalesValue     += _projStatement.a210_Accrued_Salesvalue();
            tmpProjStatistic.plAccRevSubscript      += _projStatement.a235_Accrued_Revenue_Salesvalue_Subscrip();
            tmpProjStatistic.plAccRevProduction     += _projStatement.a240_Accrued_Revenue_Production();
            tmpProjStatistic.plAccRevProfit         += _projStatement.a265_Accrued_Revenue_Profit();
            tmpProjStatistic.plAccRevAccOnAcc       += _projStatement.a270_Accrued_Revenue_OnAccount();

            tmpProjStatistic.plTotalRevenue         += _projStatement.a100_Total_Revenue();
            tmpProjStatistic.plCostItem             += _projStatement.a315_Item_Total();
            tmpProjStatistic.plCostExpenses         += _projStatement.a330_Cost_Expenses();
            tmpProjStatistic.plCostAccCost          += _projStatement.a335_Accrued_Cost();
            tmpProjStatistic.plCostHour             += _projStatement.a310_Cost_Hour(false,ProjListStateType::ProfitLoss);

            tmpProjStatistic.plTotalValueAddedAmount+= _projStatement.a400_Value_Added();

            tmpProjStatistic.plTotalGrossMargin     += _projStatement.a500_Gross_Margin();

            tmpProjStatistic.wipCostpriceHour       += _projStatement.b210_wip_CostValue_Hour();
            tmpProjStatistic.wipCostpriceExp        += _projStatement.b220_wip_CostValue_Expenses();
            tmpProjStatistic.wipCostpriceItem       += _projStatement.b215_wip_CostValue_Item();
            tmpProjStatistic.wipCostpriceAccruedCost+= _projStatement.b225_wip_CostAccruals_Expenses();

            tmpProjStatistic.wipSalesPriceSalesValue+= _projStatement.b105_Salesvalue();
            tmpProjStatistic.wipSalesPriceSubscript += _projStatement.b128_Salesvalue_Subscription();

            tmpProjStatistic.wipSalespriceProduction+= _projStatement.b130_wip_Production();
            tmpProjStatistic.wipSalesPriceProfit    += _projStatement.b155_wip_Profit();
            tmpProjStatistic.wipSalespriceTotal     += _projStatement.b100_Salesvalue();

            tmpProjStatistic.wipTotalGrossWIP       += _projStatement.b300_Gross();
            tmpProjStatistic.wipInvoiceOnAcc        += _projStatement.b400_wip_Invoiced_OnAccount();
            tmpProjStatistic.wipTotalNetWIP         += _projStatement.b500_Net();

            tmpProjStatistic.OtherConsumHour        += _projStatement.c105_Consumption_Hour();
            tmpProjStatistic.OtherConsumHoursQty    += _projStatement.c105_Consumption_Hour_qty();

            tmpProjStatistic.OtherConsumExp         += _projStatement.c125_Consumption_Cost();
            tmpProjStatistic.OtherConsumItem        += _projStatement.c120_Consumption_Item();

            tmpProjStatistic.OtherPayroll           += _projStatement.d100_PayrollAllocation();

            tmpProjStatistic.InvoiceHourQty         += _projStatement.a110_Invoiced_Revenue_Hour_Qty();
            tmpProjStatistic.InvoiceHour            += _projStatement.a110_Invoiced_Revenue_Hour();
            tmpProjStatistic.InvoiceExpense         += _projStatement.a120_Invoiced_Revenue_Expenses();
            tmpProjStatistic.InvoiceItem            += _projStatement.a115_Invoiced_Revenue_Item();
            tmpProjStatistic.InvoiceFee             += _projStatement.a125_Invoiced_Revenue_Revenue();
            tmpProjStatistic.InvoiceOnAccount       += _projStatement.e300_Invoice_OnAcc();
            tmpProjStatistic.InvoiceTotal           += _projStatement.e200_Invoice_Total();

            tmpProjStatistic.InvOnAccPrepayment     += _projStatement.e310_Invoice_OnAcc_Prepayment();
            tmpProjStatistic.InvOnAccDeduction      += _projStatement.e320_Invoice_OnAcc_Deduction();
            tmpProjStatistic.InvOnAccMilestone      += _projStatement.e330_Invoice_OnAcc_Milestone();
            tmpProjStatistic.InvOnAccBeginningBalance+=_projStatement.e350_Invoice_OnAcc_BeginningBalance();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpProjStatisticExcelPivot</Name>
				<Source><![CDATA[
    void setTmpProjStatisticExcelPivot(projStatement       _projStatement)
    {
        // Profit and loss
        _projStatement.profitLossHourQty();
        _projStatement.profitLossTotalRevenue();
        _projStatement.profitLossTotalCost();

        // WIp
        _projStatement.wipHourQty();
        _projStatement.wipGrossWIP();
        _projStatement.wipInvoiceOnAccount();

        // Payroll allocation
        _projStatement.payrollAllocation();

        // Consumption
        _projStatement.consumptionHourQtyAndCost();
        _projStatement.consumptionExpenseCost();
        _projStatement.consumptionItemCost();

        // Invoice On-account
        _projStatement.invoiceOnAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalsTmpProjStatistic</Name>
				<Source><![CDATA[
    void setTotalsTmpProjStatistic()
    {
        AmountMST       costTotal;

        if (tmpProjStatistic.GeneralHoursQty)
        {
            tmpProjStatistic.GeneralHourRevenue = tmpProjStatistic.plTotalRevenue /
                                              tmpProjStatistic.GeneralHoursQty;

            tmpProjStatistic.GeneralHourValuaddedHourRate
                                            = tmpProjStatistic.plTotalValueAddedAmount /
                                              tmpProjStatistic.GeneralHoursQty;

            tmpProjStatistic.GeneralHourCostHourRate
                                            = (tmpProjStatistic.plCostHour /
                                               tmpProjStatistic.GeneralHoursQty);

            tmpProjStatistic.GeneralHourGrossMarginHourRate
                                            = tmpProjStatistic.plTotalGrossMargin /
                                              tmpProjStatistic.GeneralHoursQty;
        }

        if (tmpProjStatistic.OtherConsumHoursQty)
        {
            tmpProjStatistic.OtherConsumHourRate    = tmpProjStatistic.OtherConsumHour / tmpProjStatistic.OtherConsumHoursQty;
        }

        if (tmpProjStatistic.InvoiceHourQty)
        {
            tmpProjStatistic.InvoiceHourRate = tmpProjStatistic.InvoiceHour / tmpProjStatistic.InvoiceHourQty;
        }

        tmpProjStatistic.plAccRevTotalAccRev
                                        = tmpProjStatistic.plAccRevSalesValue+
                                          tmpProjStatistic.plAccRevSubscript+
                                          tmpProjStatistic.plAccRevProduction+
                                          tmpProjStatistic.plAccRevProfit+
                                          tmpProjStatistic.plAccRevAccOnAcc;

        tmpProjStatistic.plCostTotalCost    = tmpProjStatistic.plCostHour+
                                          tmpProjStatistic.plCostExpenses+
                                          tmpProjStatistic.plCostItem+
                                          tmpProjStatistic.plCostAccCost;

        tmpProjStatistic.wipCostpriceTotal  = tmpProjStatistic.wipCostpriceHour+
                                          tmpProjStatistic.wipCostpriceExp+
                                          tmpProjStatistic.wipCostpriceItem+
                                          tmpProjStatistic.wipCostpriceAccruedCost;

        tmpProjStatistic.OtherConsumNotCapital
                                        = tmpProjStatistic.OtherConsumExp+
                                          tmpProjStatistic.OtherConsumHour+
                                          tmpProjStatistic.OtherConsumItem;

        costTotal       = tmpProjStatistic.plCostExpenses + tmpProjStatistic.plCostHour + tmpProjStatistic.plCostItem;

        switch (ProjParameters::find().GrossMarginDisplay)
        {
            case ProjGrossMarginDisplay::MarkupFactor:
            if (costTotal)
                {
                    tmpProjStatistic.GeneralFactorGrossMargin       = tmpProjStatistic.plTotalRevenue / costTotal;
                }
                break;
            case ProjGrossMarginDisplay::ContributionMargin:
            if (tmpProjStatistic.plTotalRevenue)
                {
                    tmpProjStatistic.GeneralFactorGrossMargin       = tmpProjStatistic.plTotalGrossMargin /
                                                                  tmpProjStatistic.plTotalRevenue * 100;
                }
                break;
            case ProjGrossMarginDisplay::MarkupPct:
            if (tmpProjStatistic.plCostTotalCost)
                {
                    tmpProjStatistic.GeneralFactorGrossMargin       = tmpProjStatistic.plTotalGrossMargin /
                                                                  tmpProjStatistic.plCostTotalCost * 100;
                }
                break;
        }

        switch (ProjParameters::find().ValueAddedDisplay)
        {
            case ProjValueAddedDisplay::ValueAddedMarkup:
            if (tmpProjStatistic.plCostHour)
                {
                    tmpProjStatistic.GeneralFactorValueaddedFactor  = tmpProjStatistic.plTotalValueAddedAmount /
                                                                  tmpProjStatistic.plCostHour;
                }
                break;
            case ProjValueAddedDisplay::ValueAddedRation:
            if (tmpProjStatistic.plTotalRevenue)
                {
                    tmpProjStatistic.GeneralFactorValueaddedFactor  = tmpProjStatistic.plTotalValueAddedAmount /
                                                                  tmpProjStatistic.plTotalRevenue * 100;
                }
                break;
            case ProjValueAddedDisplay::ValueAddedMarupPct:
            if (tmpProjStatistic.plCostHour)
                {
                    tmpProjStatistic.GeneralFactorValueaddedFactor  = tmpProjStatistic.plTotalValueAddedAmount /
                                                                  tmpProjStatistic.plCostHour * 100;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjStatistic</Name>
				<Source><![CDATA[
    public TmpProjStatistic tmpProjStatistic(TmpProjStatistic _tmpProjStatistic = tmpProjStatistic)
    {
        tmpProjStatistic = _tmpProjStatistic;

        return tmpProjStatistic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjStatisticExcelPivot</Name>
				<Source><![CDATA[
    public TmpProjStatisticExcelPivot tmpProjStatisticExcelPivot(
    TmpProjStatisticExcelPivot _tmpProjStatisticExcelPivot = tmpProjStatisticExcelPivot)
    {
        tmpProjStatisticExcelPivot = _tmpProjStatisticExcelPivot;

        return tmpProjStatisticExcelPivot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transaction type is valid.
    /// </summary>
    /// <returns>true if the transaction type if valid; otherwise, false.</returns>
    protected boolean isValidTransactionType()
    {
        return (projStatistic.parmHour() || projStatistic.parmExpenses() || projStatistic.parmItem() || projStatistic.parmRevenue() || projStatistic.parmOnAcc());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret;

        ret = true;

        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
            !(projStatistic.parmTimeMaterial() ||
              projStatistic.parmFixedPrice() ||
              projStatistic.parmInvestment() ||
              projStatistic.parmInternalCost() ||
              projStatistic.parmTime()))
        {
            // No project type selected
            ret = checkFailed("@SYS91026");
        }

        if (!this.isValidTransactionType())
        {
            // No transaction type selected
            ret = checkFailed("@SYS91027");
        }

        if ((projStatistic.parmActualBudget() == (ProjActualBudget::Sum_))
        && (
               ( (projStatistic.parmActual() && projStatistic.parmProjBreakDate() < projStatistic.parmProjFromDate())
                || (!projStatistic.parmActual() && projStatistic.parmProjBreakDate() > projStatistic.parmProjToDate())  )

            || ( (projStatistic.parmActual() && projStatistic.parmLedgerBreakDate() < projStatistic.parmLedgerFromDate())
                || (!projStatistic.parmActual() && projStatistic.parmLedgerBreakDate() >= projStatistic.parmLedgerToDate()) )
        )
    )
        {
            // Break date falls outside date interval and actualvsbudget::sum is selected.
            return checkFailed("@SYS90850");
        }

        if (projStatistic.parmProjFromDate() > projStatistic.parmProjToDate() ||  projStatistic.parmLedgerFromDate() > projStatistic.parmLedgerToDate())
        {
            // Invalid date interval
            ret = checkFailed("@SYS91020");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>