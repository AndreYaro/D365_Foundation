<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendDirectiveDP_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendDirectiveDP_PSN</c> class is a data report provider class for the <c>CustDirective_PSN</c> and <c>VendDirective_PSN</c> reports.
/// </summary>
/// <remarks>
/// This class should be extended by the data provider classes for the <c>CustDirective_PSN</c> and <c>VendDirective_PSN</c> reports.
/// </remarks>
class CustVendDirectiveDP_PSN extends SRSReportDataProviderBase
{
    CustVendTmpDirective_PSN    custVendTmpDirective_PSN;
    Query                       query;

    // both the CustDirective_PSN and VendDirective_PSN reports have a director and accountant parameter
    CustVendDirectiveReportDirectorName_PSN     director;
    CustVendDirectiveRptAccountantName_PSN      accountant;

    // extending classes must set a value for these tables on each iteration of the query by overriding the setCommonTables() method.
    CustVendDirective_PSN       custVendDirective_PSN;
    SourceDocumentLine          budgetaryDocumentSourceDocumentLine;
    CompanyInfo                 companyInfo;
    DirPartyTable               dirPartyTable;
    CustVendTable               custVendTable;
    MainAccount                 mainAccount;
    TaxGroup                    taxGroup;
    boolean                     reverseTaxAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustVendTmpDirective</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustVendTmpDirective_PSN</c> table buffer.
    /// </summary>
    /// <returns>
    /// A <c>CustVendTmpDirective_PSN</c> table buffer.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(CustVendTmpDirective_PSN))]
    public CustVendTmpDirective_PSN getCustVendTmpDirective()
    {
        select * from custVendTmpDirective_PSN;

        return custVendTmpDirective_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves parameters from query dialog.
    /// </summary>
    /// <remarks>
    /// This should be overriden on child classes as necessary.
    /// </remarks>
    public void getFromDialog()
    {
        Debug::printDebug(strfmt("@SYS22828",funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReverseTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is overridden in the extended classes.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    public boolean getReverseTaxAmount()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performProcessReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>custVendTmpDirective_PSN</c> table fields with the appropriate values.
    /// </summary>
    /// <param name="_queryRun">
    /// The current query run object.
    /// </param>
    public void performProcessReport(QueryRun _queryRun)
    {
        this.setIssueDate();
        this.setCompanyName();
        this.setDirectiveID();
        this.setAmountFields();
        this.setCustVendAccountName();
        this.setCustVendAccountNumber();
        this.setCustVendAddress();
        this.setAccountantName();
        this.setDirectorName();
        this.setMainAccountID();
        this.setSalesTaxRate();
        this.setFiscalYear();
        this.setTaxRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        super();

        custVendTmpDirective_PSN.clear();

        this.getFromDialog();
        reverseTaxAmount = this.getReverseTaxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountantName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>AccountantName</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setAccountantName()
    {
        custVendTmpDirective_PSN.AccountantName = accountant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountDueText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>AmountDueInText</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <remarks>
    /// This method should only be called after the <c>ComputedAmount</c> field on the <c>CustVendTmpDirective_PSN</c> table has been filled.
    /// </remarks>
    public void setAmountDueText()
    {
        custVendTmpDirective_PSN.AmountDueInText = GlobalEx::numeralsToTxt_FR(custVendTmpDirective_PSN.ComputedAmount, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the amount field values for the <c>CustVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setAmountFields()
    {
        this.setPostTaxSum();
        this.setComputedAmount();
        this.setAmountDueText();
        this.setNonDeductibleVAT();
        this.setDeductibleVAT();
        this.setPreTaxSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets common tables found in the <c>classDeclaration</c> method.
    /// </summary>
    /// <param name="_queryRun">
    /// The current query object.
    /// </param>
    /// <remarks>
    /// This method must be implemented by extending classes.
    /// </remarks>
    public void setCommonTables(QueryRun _queryRun)
    {
        Debug::printDebug(strfmt("@SYS22828",funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompanyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>CompanyName</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setCompanyName()
    {
        custVendTmpDirective_PSN.CompanyName = companyInfo.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComputedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>ComputedAmount</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setComputedAmount()
    {
        custVendTmpDirective_PSN.ComputedAmount = custVendTmpDirective_PSN.PostTaxSum - custVendTmpDirective_PSN.WithholdDeductAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>VendAccountName</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    protected void setCustVendAccountName()
    {
        custVendTmpDirective_PSN.CustVendAccountName = dirPartyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>CustVendAccountNumber</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    protected void setCustVendAccountNumber()
    {
        custVendTmpDirective_PSN.CustVendAccountNumber = custVendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>CustVendAddress</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    protected void setCustVendAddress()
    {
        DirPartyPostalAddressView   dirPartyPostalAddressView;
        LogisticsLocationRole       locationRole;
        SysDictTable dictTable;
        LogisticsEntityLocationRoleMap entityLocationRole;

        dictTable = SysDictTable::newTableId(LogisticsLocationAppUtil::getEntityLocationRoleTableId(tablenum(DirPartyLocation)));
        entityLocationRole = dictTable.makeRecord();

        select firstonly Address, PartyLocation from dirPartyPostalAddressView
            where dirPartyPostalAddressView.Party == dirPartyTable.RecId
        join LocationRole from entityLocationRole
        exists join Name from locationRole
            where locationRole.Name == "@SYS328202"
                && entityLocationRole.LocationRole == locationRole.RecId
                && entityLocationRole.EntityLocation == dirPartyPostalAddressView.RecId
                && (locationRole.Type != LogisticsLocationRoleType::OneTime);

        if (!dirPartyPostalAddressView)
        {
            select firstOnly Address from dirPartyPostalAddressView
                where dirPartyPostalAddressView.Party == dirPartyTable.RecId
                    && dirPartyPostalAddressView.isPrimary == NoYes::Yes;
        }

        custVendTmpDirective_PSN.CustVendAddress = dirPartyPostalAddressView.Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeductibleVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>DeductibleVAT</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setDeductibleVAT()
    {
        // if this is 0, then make sure that setCommonTables() has been correctly called by the extending class.
        Debug::assert(budgetaryDocumentSourceDocumentLine.RecId != 0);

        custVendTmpDirective_PSN.DeductibleVAT = custVendDirective_PSN::getDistributedAmountInBudgetingCurrency(budgetaryDocumentSourceDocumentLine.RecId, DistributionLinesToSum_PSN::DeductibleTaxes, true, reverseTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDirectiveID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DirectiveID</c> field on the <c>CustVendTmpDirective_PSN</c> table.
    /// </summary>
    /// <remarks>
    /// Child classes should implement this method.
    /// </remarks>
    public void setDirectiveID()
    {
        Debug::printDebug(strfmt("@SYS22828",funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDirectorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>DirectorName</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setDirectorName()
    {
        custVendTmpDirective_PSN.DirectorName = director;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>FiscalYear</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setFiscalYear()
    {
        custVendTmpDirective_PSN.FiscalYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::current()), custVendTmpDirective_PSN.IssueDate).yearName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIssueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>IssueDate</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setIssueDate()
    {
        custVendTmpDirective_PSN.IssueDate = DateTimeUtil::date(custVendDirective_PSN.IssueDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainAccountID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>MainAccountID</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setMainAccountID()
    {
        custVendTmpDirective_PSN.MainAccountID = mainAccount.MainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNonDeductibleVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>NonDeductibleVAT</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setNonDeductibleVAT()
    {
        // if this is 0, then make sure that setCommonTables() has been correctly called by the extending class.
        Debug::assert(budgetaryDocumentSourceDocumentLine.RecId != 0);

        custVendTmpDirective_PSN.NonDeductibleVAT = custVendDirective_PSN::getDistributedAmountInBudgetingCurrency(budgetaryDocumentSourceDocumentLine.RecId, DistributionLinesToSum_PSN::NonDeductibleTaxes, true, reverseTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostTaxSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>PostTaxSum</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setPostTaxSum()
    {
        // if this is 0, then make sure that setCommonTables() has been correctly called by the extending class.
        Debug::assert(budgetaryDocumentSourceDocumentLine.RecId != 0);

        custVendTmpDirective_PSN.PostTaxSum = CustVendDirective_PSN::getDistributedAmountInBudgetingCurrency(budgetaryDocumentSourceDocumentLine.RecId, DistributionLinesToSum_PSN::AllAmounts, true, reverseTaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreTaxSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>PreTaxSum</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setPreTaxSum()
    {
        // if this is 0, then make sure that setCommonTables() has been correctly called by the extending class.
        Debug::assert(budgetaryDocumentSourceDocumentLine.RecId != 0);

        // Note: for the VendDirective_PSN report, the PostTaxSum will already contain the WithholdDeduct amount.
        custVendTmpDirective_PSN.PreTaxSum = custVendTmpDirective_PSN.PostTaxSum - custVendTmpDirective_PSN.DeductibleVAT - custVendTmpDirective_PSN.NonDeductibleVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTaxRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>SalesTaxRate</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setSalesTaxRate()
    {
        TaxGroupData            taxGroupData;
        TaxData                 taxData;

        select firstOnly TaxValue from taxData
            exists join taxGroupData
            where taxData.TaxCode == taxGroupData.TaxCode &&
            taxGroupData.TaxGroup == taxGroup;

        custVendTmpDirective_PSN.SalesTaxRate = taxData.TaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the <c>CoRegNum</c> field on the <c>custVendTmpDirective_PSN</c> table.
    /// </summary>
    public void setTaxRegistrationNumber()
    {
        // if this is 0, then make sure that setCommonTables() has been correctly called by the extending class.
        Debug::assert(companyInfo.RecId != 0);

        custVendTmpDirective_PSN.CoRegNum = companyInfo.CoRegNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>