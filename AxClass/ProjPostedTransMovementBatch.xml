<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostedTransMovementBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjPostedTransMovementBatch</c> class moves the transaction from actual base tables.
/// </summary>
class ProjPostedTransMovementBatch extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        ProjPostedTransTable projPostedTransTable;

        select firstonly projPostedTransTable;

        if (!projPostedTransTable)
        {
            ttsbegin;

            // Insert expense transactions
            ProjCostTrans   projCostTrans;
            ProjTransType Cost = ProjTransType::Cost;
            
            insert_recordset projPostedTransTable(ProjId, TransDate, CategoryId, Qty, TransId, TotalCostAmountCur, TotalSalesAmountCur,
                CurrencyId, CurrencyIdCost,ActivityNumber, LinePropertyId, Txt, AdjRefTransId, DefaultDimension,
                PSAContractLineNum, ResourceCategory, TaxGroupId, TaxItemGroupId, TransIdRef, IsCorrection, Resource, TransactionOrigin, ProjTransType)
            select ProjId, TransDate, CategoryId, Qty, TransId, TotalCostAmountCur, TotalSalesAmountCur, CurrencyId,
                CurrencyIdCost, ActivityNumber, LinePropertyId, Txt, AdjRefTransId, DefaultDimension,
                PSAContractLineNum, ResourceCategory, TaxGroupId, TaxItemGroupId, TransIdRef, IsCorrection, Resource, TransactionOrigin, Cost
                from projCostTrans;

            // Insert employee transactions
            ProjEmplTrans projEmplTrans;
            ProjTransType Hour = ProjTransType::Hour;

            insert_recordset projPostedTransTable(ProjId, TransDate, CategoryId, Qty, TransId, TotalCostAmountCur, TotalSalesAmountCur,
                CurrencyId, ActivityNumber, LinePropertyId, Txt, AdjRefTransId, DefaultDimension,
                PSAContractLineNum, ResourceCategory, TaxGroupId, TaxItemGroupId, TransIdRef, IsCorrection,
                Resource, TransactionOrigin, ProjTransType)
            select ProjId, TransDate, CategoryId, Qty, TransId, TotalCostAmountCur, TotalSalesAmountCur, CurrencyId,
                ActivityNumber, LinePropertyId, Txt, AdjRefTransId, DefaultDimension,
                PSAContractLineNum, ResourceCategory, TaxGroupId, TaxItemGroupId, TransIdRef, IsCorrection, Resource, TransactionOrigin, Hour
                from projEmplTrans;
            
            // Insert on-account transactions
            ProjOnAccTrans projOnAccTrans;
            ProjTransType OnAcc = ProjTransType::OnAccount;

            insert_recordset projPostedTransTable(ProjId, TransDate, CategoryId, Qty, TransId, TotalSalesAmountCur,
                CurrencyId, ActivityNumber, Txt, DefaultDimension,
                PSAContractLineNum, TaxGroupId, TaxItemGroupId, TransactionOrigin, ProjTransType)
            select ProjId, TransDate, CategoryId, Qty, TransId, TotalSalesAmountCur, CurrencyId,
                ActivityNumber, Description, DefaultDimension,
                PSAContractLineNum, TaxGroupId, TaxItemGroupId, TransactionOrigin, OnAcc
                from projOnAccTrans;

            // Insert revenue transactions
            ProjRevenueTrans projRevenueTrans;
            ProjTransType Revenue = ProjTransType::Revenue;

            insert_recordset projPostedTransTable(ProjId, TransDate, CategoryId, Qty, TransId, TotalSalesAmountCur,
                CurrencyId, ActivityNumber, LinePropertyId, Txt, AdjRefTransId, DefaultDimension,
                PSAContractLineNum, ResourceCategory, TaxGroupId, TaxItemGroupId, TransIdRef, IsCorrection, Price, Resource, TransactionOrigin, ProjTransType)
            select ProjId, TransDate, CategoryId, Qty, TransId, TotalSalesAmountCur, CurrencyId, ActivityNumber,
                LinePropertyId, Txt, AdjRefTransId, DefaultDimension,
                PSAContractLineNum, ResourceCategory, TaxGroupId, TaxItemGroupId, TransIdRef, IsCorrection, Price, Resource, TransactionOrigin, Revenue
                from projRevenueTrans;

            // Insert item transactions
            ProjItemTrans projItemTrans;
            ProjTransType Item = ProjTransType::Item;

            insert_recordset projPostedTransTable(ProjId, TransDate, CategoryId, TransId, Qty, TotalCostAmountCur, TotalSalesAmountCur,
                CurrencyId, ActivityNumber, LinePropertyId, Txt, AdjRefTransId, DefaultDimension,
                PSAContractLineNum,  TaxGroupId, TaxItemGroupId, TransIdRef, IsCorrection,  ProjTransType, ItemId, InventTransId, InventDimId, TransactionOrigin)
            select ProjId, TransDate, CategoryId, ProjTransId, Qty, TotalCostAmountCur, TotalSalesAmountCur, CurrencyId,
                ActivityNumber, LinePropertyId, Txt, AdjRefTransId, DefaultDimension,
                PSAContractLineNum,  TaxGroupId, TaxItemGroupId, ProjTransIdRef, IsCorrection, Item, ItemId, InventTransId, InventDimId, TransactionOrigin
                from projItemTrans;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the description from the current class by calling the static description method of the class.
    /// </summary>
    /// <returns>
    ///    The description of the current class.
    /// </returns>
    public static ClassDescription description()
    {
        return "@Proj:ProjPostedTransMovementBatch";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
	/// <summary>
    /// The actual implementation of the class.
    /// </summary>
    /// <param name = "args">The <c>Args</c> for the current class.</param>
    public static void main(Args args)
    {
        ProjPostedTransMovementBatch  projPostedTransMovment;

        projPostedTransMovment = new ProjPostedTransMovementBatch();

        if (projPostedTransMovment.prompt())
        {
            projPostedTransMovment.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>