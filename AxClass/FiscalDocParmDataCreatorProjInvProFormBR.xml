<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorProjInvProFormBR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Fiscal document parm data creator for proforma project invoices
/// </summary>
public class FiscalDocParmDataCreatorProjInvProFormBR extends FiscalDocParmDataCreatorProjInv_BR
{
    TmpTaxWorkTrans     tmpTaxWorkTrans;
    SalesTable          salesTable;
    ProjTable           projTable;
    ProjInvoiceTable    invoiceTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
        public FiscalDocumentParmData_BR createParmData()
    {
        FiscalDocumentParmData_BR fiscalDocumentParmData;

        fiscalDocumentParmData = super();
        fiscalDocumentParmData.parmIsProForma(true);

        return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaymSchedRefRecId</Name>
				<Source><![CDATA[
        protected RecId custPaymSchedRefRecId()
    {
        return projProposalJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaymSchedRefTableId</Name>
				<Source><![CDATA[
        protected TableId custPaymSchedRefTableId()
    {
        return projProposalJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
        protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        FiscalDocumentCustVendTransParmData_BR custTransParmData = new FiscalDocumentCustVendTransParmData_BR();

        custTransParmData.parmAmount(projInvoiceJour.invoiceAmountMST());
        custTransParmData.parmDueDate(projInvoiceJour.DueDate);

        return custTransParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
        protected List initListOfInstallments()
    {
        CustVendPaymSched       custVendPaymSched;
        List                    listOfPaymentSched;

        if (projProposalJour.PaymentSched
            && !CustPaymSched::exist(projProposalJour.TableId, projProposalJour.RecId))
        {
            custVendPaymSched = CustVendPaymSched::construct(SysModule::Project, projProposalJour);
            custVendPaymSched.setProjProposalTotals(projProposalTotals);
            custVendPaymSched.createPaymSched(PaymSched::find(projProposalJour.Paymentsched));
        }

        listOfPaymentSched = super();

        return listOfPaymentSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForLine</Name>
				<Source><![CDATA[
        protected List initListOfTaxTransParmDataForLine(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        List                                    listOfTaxParmData;
        ListEnumerator                          listEnumeratorSourceRecords;
        FiscalDocumentTaxTransParmData_BR       fiscalDocumentTaxTransParmData;
        FiscalDocumentLineSourceParmData_BR     fiscalDocumentLineSourceParmData;

        listOfTaxParmData = new List(Types::Class);
        listEnumeratorSourceRecords = _fiscalDocumentLineParmData.parmListOfSourceRecords().getEnumerator();

        while (listEnumeratorSourceRecords.moveNext())
        {
            fiscalDocumentLineSourceParmData = listEnumeratorSourceRecords.current();

            while select tmpTaxWorkTrans
                where tmpTaxWorkTrans.SourceRecId       == fiscalDocumentLineSourceParmData.parmRefRecId()
                    && tmpTaxWorkTrans.SourceTableId    == fiscalDocumentLineSourceParmData.parmRefTableId()
                    && !tmpTaxWorkTrans.TaxTributarySubstitution
            {
                fiscalDocumentTaxTransParmData =  new FiscalDocumentTaxTransParmData_BR();

                this.initTaxTransParmDataFromTmpTaxWorkTrans(_fiscalDocumentParmData,
                                                                fiscalDocumentTaxTransParmData,
                                                                tmpTaxWorkTrans);

                listOfTaxParmData.addEnd(fiscalDocumentTaxTransParmData);
            }
        }

        return FiscalDocumentParmDataCreator_BR::aggregateFiscalDocLineTaxes(listOfTaxParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransParmDataFromTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>FiscalDocumentTaxTransParmData_BR</c> object
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    /// Determines tax direction
    /// </param>
    /// <param name="_fiscalDocumentTaxTransParmData">
    /// Reference of <c>FiscalDocumentTaxTransParmData_BR</c> to be initialized
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    /// <c>TmpTaxWorkTrans</c> table record with tax information
    /// </param>
    protected void initTaxTransParmDataFromTmpTaxWorkTrans(FiscalDocumentParmData_BR          _fiscalDocumentParmData,
                                                           FiscalDocumentTaxTransParmData_BR  _fiscalDocumentTaxTransParmData,
                                                           TmpTaxWorkTrans                    _tmpTaxWorkTrans)
    {
        TaxTable                taxTable;
        TaxationCode_BR         taxationCodeIPI;
        TaxationCodeTable_BR    taxationCodeTable;

        taxTable = TaxTable::find(_tmpTaxWorkTrans.TaxCode);

        _fiscalDocumentTaxTransParmData.parmTaxTransSourceTableId   (_tmpTaxWorkTrans.SourceTableId);
        _fiscalDocumentTaxTransParmData.parmTaxTransSourceRecId     (_tmpTaxWorkTrans.SourceRecId);
        _fiscalDocumentTaxTransParmData.parmTaxTrans                (_tmpTaxWorkTrans.RecId);
        _fiscalDocumentTaxTransParmData.parmType                    (_tmpTaxWorkTrans.TaxType_BR);

        // IPI demands that we construct the taxation code based on fiscal document direction.
        if (_tmpTaxWorkTrans.TaxType_BR == TaxType_BR::IPI)
        {
            taxationCodeTable = TaxationCodeTable_BR::find(_tmpTaxWorkTrans.TaxType_BR, _tmpTaxWorkTrans.TaxationCode_BR);
            if (_fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Incoming)
            {
                taxationCodeIPI = taxationCodeTable.InputCode;
            }
            else
            {
                taxationCodeIPI = taxationCodeTable.OutputCode;
            }
            taxationCodeIPI += taxationCodeTable.AtoCotepeTaxCode;
            _fiscalDocumentTaxTransParmData.parmTaxationCode(taxationCodeIPI);
        }
        else
        {
            _fiscalDocumentTaxTransParmData.parmTaxationCode(_tmpTaxWorkTrans.TaxationCode_BR);
        }

        _fiscalDocumentTaxTransParmData.parmTaxValue    (_tmpTaxWorkTrans.showTaxValue());
        _fiscalDocumentTaxTransParmData.parmFiscalValue (_tmpTaxWorkTrans.FiscalValue_BR);
        _fiscalDocumentTaxTransParmData.parmRetainedTax (taxTable.RetainedTax_BR);
        _fiscalDocumentTaxTransParmData.parmIncludedTax (taxTable.IncludedTax_BR);
        _fiscalDocumentTaxTransParmData.parmTaxAmount   (_tmpTaxWorkTrans.TaxAmount - _tmpTaxWorkTrans.TaxInCostPrice);

        if (_fiscalDocumentTaxTransParmData.parmTaxAmount() != 0)
        {
            if (_tmpTaxWorkTrans.taxBaseAmountHasBeenAdjusted_BR())
            {
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmount(_tmpTaxWorkTrans.getTaxBaseAmountRegulatedMST_BR());
            }
            else
            {
                _fiscalDocumentTaxTransParmData.parmTaxBaseAmount(_tmpTaxWorkTrans.TaxBaseAmount);
            }
        }

        _fiscalDocumentTaxTransParmData.parmTaxReductionPct(_tmpTaxWorkTrans.TaxReductionPct_BR);

        _fiscalDocumentTaxTransParmData.parmTaxSubstitutionMarkupPct    (TaxData::find(_tmpTaxWorkTrans.TaxCode, _tmpTaxWorkTrans.TransDate, _tmpTaxWorkTrans.TaxBaseAmount).TaxReductionPct_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceLineReference</Name>
				<Source><![CDATA[
        protected void setSourceLineReference(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, ProjInvoiceTransMap_MX _projInvoice)
    {
        ProjProposalItem                        projProposalItem;
        ProjProposalCost                        projProposalCost;
        ProjProposalEmpl                        projProposalEmp;
        ProjProposalOnAcc                       projProposalOnAcc;
        ProjProposalRevenue                     projProposalRevenue;

        switch (_projInvoice.TableId)
        {
            case tableNum(ProjInvoiceItem): // Project Invoice Item
            {
                select InventTransId, RecId from projProposalItem
                    where projProposalItem.InventTransId == _projInvoice.InventTransId;

                _fiscalDocumentLineParmData.addSourceReference(projProposalItem.TableId, projProposalItem.RecId, projProposalItem.InventTransId);
                break;
            }

            case tableNum(ProjInvoiceCost): // Project Invoice Cost
            {
                select TransId, RecId from projProposalCost
                    where projProposalCost.TransId == _projInvoice.InventTransId;

                _fiscalDocumentLineParmData.addSourceReference(projProposalCost.TableId, projProposalCost.RecId, projProposalCost.TransId);
                break;
            }

            case tableNum(ProjInvoiceEmpl): // Project Invoice Empl
            {
                select TransId, RecId from projProposalEmp
                    where projProposalEmp.TransId == _projInvoice.InventTransId;

                _fiscalDocumentLineParmData.addSourceReference(projProposalEmp.TableId, projProposalEmp.RecId, projProposalEmp.TransId);
                break;
            }

            case tableNum(ProjInvoiceOnAcc): // Project Invoice OnAcc
            {
                select TransId, RecId from projProposalOnAcc
                    where projProposalOnAcc.TransId == _projInvoice.InventTransId;

                _fiscalDocumentLineParmData.addSourceReference(projProposalOnAcc.TableId, projProposalOnAcc.RecId, projProposalOnAcc.TransId);
                break;
            }

            case tableNum(ProjInvoiceRevenue): // Project Invoice Revenue
            {
                select TransId, RecId from projProposalRevenue
                    where projProposalRevenue.TransId == _projInvoice.InventTransId;

                _fiscalDocumentLineParmData.addSourceReference(projProposalRevenue.TableId, projProposalRevenue.RecId, projProposalRevenue.TransId);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates attribute <c>tmpTaxWorkTrans</c>
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// <c>TmpTaxWorkTrans</c> table record with tax information
    /// </param>
    public void setTmpTaxWorkTrans(tmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        tmpTaxWorkTrans = _tmpTaxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        return FiscalDocumentPurpose_BR::Regular;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>