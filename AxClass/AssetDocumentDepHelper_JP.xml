<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentDepHelper_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is a helper class to calculate depreciation of all documents for one asset.
/// </summary>
class AssetDocumentDepHelper_JP
{
    container               documentTypes;
    container               ignoreDocumentTypes;
    AssetTable              assetTable;
    AssetDepBookMap_JP      assetDepBookMap_JP;

    Map                     assetDocumentDepCalculationMap;

    // For AssetRetirementObligationDepCalc_JP
    AssetBudgetModelId      assetBudgetModelId;
    AssetTransDate          runDate;
    // Reduction Entry
    Map                     reductionEntryBeginBalanceMap;
    // Accelerated Depreciation
    container               acceleratedEntryContainer;
    AssetDocumentEntry_JP   currentAcceleratedDocumentEntry;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyNormalDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the normal depreciation amount of current period to calculators that need it.
    /// </summary>
    /// <param name="_normalDepAmount">
    /// The normal depreciation amount of current period
    /// </param>
    public void applyNormalDepreciationAmount(AssetAmount _normalDepAmount)
    {
        MapEnumerator                       mapEnumerator;
        AssetDocumentDepCalculation_JP      assetDocumentDepCalculation_JP;
        AssetRetirementObligationDepCalc_JP assetRetirementObligationDepCalc_JP;

        mapEnumerator = assetDocumentDepCalculationMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            assetDocumentDepCalculation_JP = mapEnumerator.currentValue();
            if (assetDocumentDepCalculation_JP is AssetRetirementObligationDepCalc_JP)
            {
                assetRetirementObligationDepCalc_JP = assetDocumentDepCalculation_JP;
                // Inside the AssetRetirementObligationDepCalc_JP, the depreciation amount are postive value.
                assetRetirementObligationDepCalc_JP.parmNormalDepAmountExcludeARO(_normalDepAmount);
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>applyNormalDepreciationInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the information of oridnary depreciaiton of current period to calculators that need it.
    /// </summary>
    /// <param name="_amountToNormalDepreciation">
    /// The amount for normal depreciation
    /// </param>
    /// <param name="_nomalDepreicationDate">
    /// The date of normal depreciation
    /// </param>
    /// <param name="_isDepreciationDone">
    /// Flag indicates if normal depreciation is done
    /// </param>
    public void applyNormalDepreciationInfo(
        real            _amountToNormalDepreciation,
        AssetTransDate  _nomalDepreicationDate,
        boolean         _isDepreciationDone)
    {
        MapEnumerator                       mapEnumerator;
        AssetDocumentDepCalculation_JP      assetDocumentDepCalculation_JP;
        AssetRetirementObligationDepCalc_JP assetRetirementObligationDepCalc_JP;

        mapEnumerator = assetDocumentDepCalculationMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            assetDocumentDepCalculation_JP = mapEnumerator.currentValue();
            if (assetDocumentDepCalculation_JP is AssetRetirementObligationDepCalc_JP)
            {
                assetRetirementObligationDepCalc_JP = assetDocumentDepCalculation_JP;
                assetRetirementObligationDepCalc_JP.parmAmountToNormalDeprecition(_amountToNormalDepreciation);
                assetRetirementObligationDepCalc_JP.parmIsDepreciationDone(_isDepreciationDone);
                assetRetirementObligationDepCalc_JP.parmNormalDepreciationDate(_nomalDepreicationDate);
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>buildAssetDocumentQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query that will be used to query all documents that needs to do depreciation.
    /// </summary>
    /// <returns>
    /// An instance of <C>Query</C>.
    /// </returns>
    public Query buildAssetDocumentQuery()
    {
        Query                   ret;
        QueryBuildDataSource    qbds;
        int                     i;

        ret = new Query();

        qbds = ret.addDataSource(tableNum(AssetDocumentEntry_JP));
        qbds.addRange(fieldNum(AssetDocumentEntry_JP, AssetId)).value(SysQuery::value(AssetDepBookMap_JP.AssetId));
        qbds.addRange(fieldNum(AssetDocumentEntry_JP, BookId)).value(SysQuery::value(AssetDepBookMap_JP.AssetBookId));

        qbds = qbds.addDataSource(tableNum(AssetDocumentTable_JP));
        qbds.relations(true);

        for (i = conLen(documentTypes); i >= 1; i--)
        {
            qbds.addRange(fieldNum(AssetDocumentTable_JP, Type)).value(SysQuery::value(conPeek(documentTypes, i)));
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates depreciation amount for all registered documents from last depreciation calculation date to specified date.
    /// </summary>
    /// <param name="_transDate">
    /// The specified date to depreciate to.
    /// </param>
    /// <returns>
    /// The depreciation amount for all registered documents.
    /// </returns>
    /// <remarks>
    /// The format of returned map is:
    ///     Key: The record ID for asset document entry.
    ///     Value: [[depreciation amount, depreciation date, asset document type], [...], ...]
    /// </remarks>
    public Map calc(AssetTransDate _transDate)
    {
        Map                                 ret = new Map(Types::Int64, Types::Container);
        MapEnumerator                       mapEnumerator;
        AssetDocumentDepCalculation_JP      assetDocumentDepCalculation_JP;
        AssetAmount                         depAmount;
        container                           resultForOneEntry;
        boolean                             isIgnore = false;
        Counter                             ignoreCount;
        AssetDocumentType_JP                ignoreDocumentType;

        mapEnumerator = assetDocumentDepCalculationMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            assetDocumentDepCalculation_JP  = mapEnumerator.currentValue();
            resultForOneEntry               = conNull();
            isIgnore                        = false;

            for (ignoreCount = conLen(ignoreDocumentTypes); ignoreCount > 0; ignoreCount--)
            {
                ignoreDocumentType = conPeek(ignoreDocumentTypes, ignoreCount);
                if (ignoreDocumentType == assetDocumentDepCalculation_JP.parmAssetDocumentEntry_JP().type())
                {
                    isIgnore = true;
                    break;
                }
            }

            if (!isIgnore)
            {
                // Calculate the summary of depreciation in specified date range for each document.
                while (assetDocumentDepCalculation_JP.next(_transDate))
                {
                    depAmount = assetDocumentDepCalculation_JP.calc();
                    if (depAmount
                        || assetDocumentDepCalculation_JP.getAssetDocumentType() == AssetDocumentType_JP::AssetReductionEntry_Reserve)
                    {
                        resultForOneEntry += [[depAmount, assetDocumentDepCalculation_JP.getDepDate(), assetDocumentDepCalculation_JP.getAssetDocumentType()]];
                    }
                }

                if (resultForOneEntry != conNull())
                {
                    ret.insert(mapEnumerator.currentKey(), resultForOneEntry);
                }
            }
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates summarized depreciation amount per all registered documents from last depreciation calculation date to specified date.
    /// </summary>
    /// <param name="_transDate">
    /// The specified date to depreciate to.
    /// </param>
    /// <returns>
    /// The summarized depreciation amount per all registered documents.
    /// </returns>
    /// <remarks>
    /// The format of returned map is:
    ///     Key: The record ID for asset document entry.
    ///     Value: [[depreciation amount, depreciation date, asset document type]]
    /// </remarks>
    public Map calcSum(AssetTransDate _transDate)
    {
        Map                     ret = new Map(Types::Int64, Types::Container);
        MapEnumerator           mapEnumerator;
        Map                     detailedResult;
        container               resultForOneEntry;
        int                     i;
        AssetAmount             curDepAmount;
        AssetTransDate          curDepDate;
        AssetDocumentType_JP    curDocumentType;
        AssetAmount             sumOfDepAmount;
        AssetTransDate          lastDepDate;

        detailedResult = this.calc(_transDate);
        mapEnumerator = detailedResult.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            resultForOneEntry   = mapEnumerator.currentValue();
            sumOfDepAmount      = 0;
            lastDepDate         = dateNull();

            for (i = 1; i <= conLen(resultForOneEntry); i++)
            {
                [curDepAmount, curDepDate, curDocumentType] = conPeek(resultForOneEntry, i);

                if (curDepAmount)
                {
                    sumOfDepAmount  += curDepAmount;
                    lastDepDate     =  max(lastDepDate, curDepDate);
                }
            }

            if (sumOfDepAmount)
            {
                ret.insert(mapEnumerator.currentKey(), [[sumOfDepAmount, lastDepDate, curDocumentType]]);
            }
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
/// <summary>
    /// Does some necessary initialization.
    /// </summary>
    /// <remarks>
    /// After call this methods, all class member variables will be initialized.
    /// </remarks>
    public void init()
    {
        QueryRun                            qr;
        AssetDocumentEntry_JP               assetDocumentEntry_JP;
        AssetDocumentTable_JP               assetDocumentTable_JP;
        AssetDocumentDepCalculation_JP      assetDocumentDepCalculation_JP;
        AssetRetirementObligationDepCalc_JP assetRetirementObligationDepCalc_JP;
        AssetReductionEntryReserveDepCalc_JP assetReductionEntryDepCalc_JP;
        AssetDocumentAcceleratedDepCalc_JP  assetAcceleratedDepCalc_JP;
        AssetDocumentEntry_JP               assetDocumentEntryADLoc;
        AssetTransDate                      validFromADLoc;
        AssetTransDate                      validToADLoc;

        if (!assetTable)
        {
            assetTable = assetTable::find(assetDepBookMap_JP.AssetId);
        }

        this.initDocumentTypes();

        assetDocumentDepCalculationMap = new Map(Types::Int64, Types::Class);
        qr = new QueryRun(this.buildAssetDocumentQuery());
        while (qr.next())
        {
            assetDocumentEntry_JP = qr.get(tableNum(assetDocumentEntry_JP));
            assetDocumentTable_JP = qr.get(tableNum(assetDocumentTable_JP));

            assetDocumentDepCalculation_JP = AssetDocumentDepCalculation_JP::construct(
                assetDocumentEntry_JP.data());

            if (assetDocumentDepCalculation_JP)
            {
                assetDocumentDepCalculation_JP.parmAssetDocumentTable_JP(assetDocumentTable_JP.data());
                assetDocumentDepCalculation_JP.parmAssetTable(assetTable.data());
                assetDocumentDepCalculation_JP.parmAssetDepBookMap_JP(AssetDepBookMap_JP.data());

                if (assetDocumentDepCalculation_JP is AssetRetirementObligationDepCalc_JP)
                {
                    assetRetirementObligationDepCalc_JP = assetDocumentDepCalculation_JP;
                    assetRetirementObligationDepCalc_JP.parmAssetBudgetModelId(assetBudgetModelId);
                    assetRetirementObligationDepCalc_JP.parmRunDate(runDate);
                }

                if (assetDocumentDepCalculation_JP is AssetReductionEntryReserveDepCalc_JP)
                {
                    assetReductionEntryDepCalc_JP = assetDocumentDepCalculation_JP;
                    assetReductionEntryDepCalc_JP.parmReductionEntryBeginBalanceMap(reductionEntryBeginBalanceMap);
                    assetReductionEntryDepCalc_JP.parmAssetBudgetModelId(assetBudgetModelId);
                    assetReductionEntryDepCalc_JP.parmRunDate(runDate);
                }

                if (assetDocumentDepCalculation_JP is AssetDocumentAcceleratedDepCalc_JP)
                {
                    if (conLen(acceleratedEntryContainer) < 1)
                    {
                        // in case there are no container, don't need to push calculation
                        continue;
                    }

                    [validFromADLoc, validToADLoc, assetDocumentEntryADLoc] = conPeek(acceleratedEntryContainer, 1);
                    if (assetDocumentEntryADLoc.RecId != assetDocumentEntry_JP.RecId)
                    {
                        // only first document entry need to create
                        continue;
                    }

                    assetAcceleratedDepCalc_JP = assetDocumentDepCalculation_JP;
                    assetAcceleratedDepCalc_JP.parmAssetBudgetModelId(assetBudgetModelId);
                    assetAcceleratedDepCalc_JP.parmAcceleratedEntryContainer(acceleratedEntryContainer);
                    assetAcceleratedDepCalc_JP.parmRunDate(runDate);
                }

                if (assetDocumentDepCalculation_JP.isCalculationNeeded())
                {
                    assetDocumentDepCalculation_JP.init();

                    assetDocumentDepCalculationMap.insert(assetDocumentEntry_JP.RecId, assetDocumentDepCalculation_JP);
                }
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>initDocumentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the document type list that needs to do depreciation.
    /// </summary>
    protected void initDocumentTypes()
    {
        container               allSupportedDocumentTypes = AssetDocumentDepCalculation_JP::getAllSupportedAssetDocumentType();
        container               tempCon;
        int                     i;
        AssetDocumentType_JP    curDocumentType;

        // Init the document type lists. All items in the list must be supported document type.
        if (documentTypes == conNull())
        {
            documentTypes = allSupportedDocumentTypes;
        }
        else
        {
            for (i = 1; i <= conLen(documentTypes); i++)
            {
                curDocumentType = conPeek(documentTypes, i);
                if (conFind(allSupportedDocumentTypes, curDocumentType) > 0)
                {
                    tempCon += curDocumentType;
                }
            }

            documentTypes = tempCon;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <C>AssetDocumentDepHelper_JP</C>.
    /// </summary>
    /// <param name="_documentTypes">
    /// The list asset document type that needs to calculate depreciation.
    /// </param>
    /// <param name="_assetDepBookMap_JP">
    /// The value model / depreciation book.
    /// </param>
    /// <param name="_assetTable">
    /// The instance of <C>AssetTable</C> that related to the value model / depreciation book. Optional.
    /// </param>
    protected void new(
        container               _documentTypes,
        AssetDepBookMap_JP      _assetDepBookMap_JP,
        AssetTable              _assetTable = null)
    {
        documentTypes       = _documentTypes;
        assetDepBookMap_JP  = _assetDepBookMap_JP;
        assetTable          = _assetTable;
        reductionEntryBeginBalanceMap = new Map(Types::Date, Types::Real);
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAcceleratedEntryContainer</Name>
				<Source><![CDATA[
    public container parmAcceleratedEntryContainer(container _acceleratedEntryContainer = acceleratedEntryContainer)
    {
        acceleratedEntryContainer = _acceleratedEntryContainer;
        return acceleratedEntryContainer;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBudgetModelId</Name>
				<Source><![CDATA[
    public AssetBudgetModelId parmAssetBudgetModelId(AssetBudgetModelId _assetBudgetModelId = assetBudgetModelId)
    {
        assetBudgetModelId = _assetBudgetModelId;
        return assetBudgetModelId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentAcceleratedDocumentEntry</Name>
				<Source><![CDATA[
    public AssetDocumentEntry_JP parmCurrentAcceleratedDocumentEntry(AssetDocumentEntry_JP _currentAcceleratedDocumentEntry = currentAcceleratedDocumentEntry)
    {
        currentAcceleratedDocumentEntry = _currentAcceleratedDocumentEntry;
        return currentAcceleratedDocumentEntry;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreDocumentTypes</Name>
				<Source><![CDATA[
    public container parmIgnoreDocumentTypes(container _ignoreDocumentTypes = ignoreDocumentTypes)
    {
        ignoreDocumentTypes = _ignoreDocumentTypes;
        return ignoreDocumentTypes;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmReductionEntryBeginBalanceMap</Name>
				<Source><![CDATA[
    public Map parmReductionEntryBeginBalanceMap(Map _reductionEntryBeginBalanceMap = reductionEntryBeginBalanceMap)
    {
        reductionEntryBeginBalanceMap = _reductionEntryBeginBalanceMap;
        return reductionEntryBeginBalanceMap;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmRunDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmRunDate(AssetTransDate _runDate = runDate)
    {
        runDate = _runDate;
        return runDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <C>AssetDocumentDepHelper_JP</C>.
    /// </summary>
    /// <param name="_documentTypes">
    /// The list asset document type that needs to calculate depreciation.
    /// </param>
    /// <param name="_assetDepBookMap_JP">
    /// The value model / depreciation book.
    /// </param>
    /// <param name="_assetTable">
    /// The instance of <C>AssetTable</C> that related to the value model / depreciation book. Optional.
    /// </param>
    /// <returns>
    /// A new instance of <C>AssetDocumentDepHelper_JP</C>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// A value model / depreciation book must be specified.
    /// </exception>
    public static AssetDocumentDepHelper_JP construct(
        container               _documentTypes,
        AssetDepBookMap_JP      _assetDepBookMap_JP,
        AssetTable              _assetTable = null)
    {
        AssetDocumentDepHelper_JP ret;

        if (!_assetDepBookMap_JP)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ret = new AssetDocumentDepHelper_JP(_documentTypes, _assetDepBookMap_JP, _assetTable);

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>