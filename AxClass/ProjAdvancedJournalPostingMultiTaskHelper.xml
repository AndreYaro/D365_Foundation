<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalPostingMultiTaskHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjAdvancedJournalPostingMultiTaskHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPostingStrategy</Name>
				<Source><![CDATA[
    protected static ProjAdvancedJournalMultiTaskPostingStrategy getPostingStrategy()
    {
        return ProjAdvancedJournalMultiTaskPostingStrategy::SplitLinesAcrossBatchTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdvancedJournalUsingMultiTask</Name>
				<Source><![CDATA[
    internal static void postAdvancedJournalUsingMultiTask(ProjAdvancedJournal _projAdvancedJournal)
    {
        container projAdvancedJournalList = conNull();
        projAdvancedJournalList += _projAdvancedJournal.RecId;

        ProjAdvancedJournalPostingMultiTaskHelper::postAdvancedJournalsUsingMultiTask(projAdvancedJournalList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdvancedJournalsUsingMultiTask</Name>
				<Source><![CDATA[
    public static void postAdvancedJournalsUsingMultiTask(container _projAdvancedJournalList)
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalPostingMultiTaskHelper));
        ProjAdvancedJournalMultiTaskPostingStrategy postingStrategy = ProjAdvancedJournalPostingMultiTaskHelper::getPostingStrategy();
        logger.logInformation(strFmt("ProjAdvancedJournals will be posted using %1 Strategy", any2Str(postingStrategy)));

        switch (postingStrategy)
        {
            case ProjAdvancedJournalMultiTaskPostingStrategy::SplitLinesAcrossBatchTask:
                ProjAdvancedJournalPostingMultiTaskHelper::postAdvancedJournalsBySplittingLinesAcrossBatchTask(_projAdvancedJournalList);
                break;

            case ProjAdvancedJournalMultiTaskPostingStrategy::SplitJournalsAcrossBatchTask:
                ProjAdvancedJournalPostingMultiTaskHelper::postAdvancedJournalsBySplittingJournalsAcrossBatchTask(_projAdvancedJournalList);
                break;

            default:
                logger.logWarning(strFmt("The selected posting strategy %1 has no implementation. Posting Process will be skipped.", any2Str(postingStrategy)));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdvancedJournalsBySplittingLinesAcrossBatchTask</Name>
				<Source><![CDATA[
    private static void postAdvancedJournalsBySplittingLinesAcrossBatchTask(container _projAdvancedJournalList)
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalPostingMultiTaskHelper));
        logger.logInformation("Posting journals by splitting lines across batch tasks.");
        using (var activityContext = logger.integrationJournalActivity().createPostAdvancedJournalBatchContext())
        {
            ProjAdvancedJournal journal;
            int journalListLength = conLen(_projAdvancedJournalList);
            container projAdvancedJournalLineList = conNull();

            if (journalListLength > 0)
            {
                int journalsSelectedForPosting;
                for (int recordIndex = 1; recordIndex <= journalListLength; recordIndex++)
                {
                    ProjAdvancedJournalRecId projAdvancedJournalRecId = conPeek(_projAdvancedJournalList, recordIndex);

                    journal = ProjAdvancedJournal::findNoCache(projAdvancedJournalRecId);

                    try
                    {
                        // Update journal status to processing and update the list of journal lines from the journal for processing by batch tasks.
                        journal.updateJournalStatus(ProjAdvancedJournalStatus::Draft, ProjAdvancedJournalStatus::Processing);

                        ProjAdvancedJournalLine projAdvancedJournalLine;
                        while select RecId from projAdvancedJournalLine
                            where projAdvancedJournalLine.ProjAdvancedJournal == journal.RecId
                                && (projAdvancedJournalLine.Status == ProjAdvancedJournalLineStatus::None || projAdvancedJournalLine.Status == ProjAdvancedJournalLineStatus::Draft)
                        {
                            projAdvancedJournalLineList += projAdvancedJournalLine.RecId;
                        }

                        journalsSelectedForPosting++;
                    }
                    catch
                    {
                        logger.logWarning(strFmt("@Proj:JournalPostingExceptionEncountered", journal.ProjAdvancedJournalId, journal.DataAreaId, Exception::Error, xSession::currentRetryCount()));
                    }
                }

                if (journalsSelectedForPosting)
                {
                    // Schedule lines for processing
                    ProjAdvancedJournalPostingMultiTaskHelper::scheduleTasksForProcessing(projAdvancedJournalLineList, _projAdvancedJournalList);
                }
                else
                {
                    logger.logInformation(strFmt("@Proj:NoJournalToPost"));
                }
            }
            else
            {
                logger.logInformation(strFmt("@Proj:NoJournalToPost"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdvancedJournalsBySplittingJournalsAcrossBatchTask</Name>
				<Source><![CDATA[
    private static void postAdvancedJournalsBySplittingJournalsAcrossBatchTask(container _projAdvancedJournalList)
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalPostingMultiTaskHelper));
        logger.logInformation("Posting journals by splitting journals across batch task.");

        ProjParameters projParameters = ProjParameters::find();
        int totalNumOfTasks = projParameters.getMaxTasksForAdvancedJournalLineBatch();

        if (totalNumOfTasks > 0)
        {
            BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();
            Batch parentTask = BatchHeader::getCurrentBatchTask();

            if (conLen(_projAdvancedJournalList) <= totalNumOfTasks)
            {
                for (int i = 1; i <= conLen(_projAdvancedJournalList); i++)
                {
                    ProjAdvancedJournalPostJournalPostingBatchTask projAdvancedJournalPostJournalPostingBatchTask = ProjAdvancedJournalPostJournalPostingBatchTask::construct(conPeek(_projAdvancedJournalList, i));
                    batchHeader.addRuntimeTask(projAdvancedJournalPostJournalPostingBatchTask, parentTask.RecId);
                }
            }
            else
            {
                for (int taskCount = 0; taskCount < totalNumOfTasks; taskCount++)
                {
                    ProjAdvancedJournalPostJournalPostingBatchTask projAdvancedJournalPostJournalPostingBatchTask = ProjAdvancedJournalPostJournalPostingBatchTask::construct(_projAdvancedJournalList);
                    batchHeader.addRuntimeTask(projAdvancedJournalPostJournalPostingBatchTask, parentTask.RecId);
                }
            }
            batchHeader.save();
        }
        else
        {
            logger.logError(strFmt("@Proj:BatchTaskShouldBeNonZero", totalNumOfTasks));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleTasksForProcessing</Name>
				<Source><![CDATA[
    private static void scheduleTasksForProcessing(container _projAdvancedJournalLineList, container _projAdvancedJournalList)
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalPostingMultiTaskHelper));
        using (var activityContext = logger.integrationJournalActivity().createPostAdvancedJournalBatchContext())
        {
            int numOfLines = conLen(_projAdvancedJournalLineList);

            ProjParameters projParameters = ProjParameters::find();
            int totalNumOfTasks = projParameters.getMaxTasksForAdvancedJournalLineBatch();
            int configuredMaxLinesPerTask;

            if (totalNumOfTasks > 0)
            {
                if (numOfLines > totalNumOfTasks)
                {
                    // Set number of lines per task, if greater than 0.
                    configuredMaxLinesPerTask = numOfLines div totalNumOfTasks;

                    // Add remaining lines to new task.
                    int remainingLines = (numofLines mod totalNumOfTasks);
                    if (remainingLines > 0)
                    {
                        totalNumOfTasks += 1;
                    }
                }
                else
                {
                    // Set total num of tasks to 1, if number of lines is less than total number of tasks.
                    totalNumOfTasks = 1;
                    configuredMaxLinesPerTask = numOfLines;
                }
            }
            else
            {
                logger.logError(strFmt("@Proj:BatchTaskShouldBeNonZero", totalNumOfTasks));
                return;
            }

            if (numOfLines == 0)
            {
                totalNumOfTasks = 0;
            }
            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::NumOfJournalLines, int2Str(numOfLines));
            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::NumOfJournalLineTasks, int2Str(totalNumOfTasks));
            logger.logInformation(strFmt("Total lines to be processed %1 from %2 journals in %3 batch tasks.", numOfLines, conLen(_projAdvancedJournalList), totalNumOfTasks));

            BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();
            Batch parentTask = BatchHeader::getCurrentBatchTask();

            // Construct a batch job to post all journals
            ProjAdvancedJournalPostBatchTask projAdvancedJournalBatchTask = ProjAdvancedJournalPostBatchTask::constructV2(_projAdvancedJournalList);
            batchHeader.addRuntimeTask(projAdvancedJournalBatchTask, parentTask.RecId);
            
            if (numOfLines > 0)
            {
                ProjAdvancedJournalLinePostEnhancedBatchTask projAdvancedJournalLinePostEnhancedBatchTask = ProjAdvancedJournalLinePostEnhancedBatchTask::construct(configuredMaxLinesPerTask);

                int journalLineListLength = conLen(_projAdvancedJournalLineList);
                for (int recordIndex = 1; recordIndex <= journalLineListLength; recordIndex++)
                {
                    projAdvancedJournalLinePostEnhancedBatchTask.addLine(conPeek(_projAdvancedJournalLineList, recordIndex));

                    if (projAdvancedJournalLinePostEnhancedBatchTask.taskIsFull())
                    {
                        batchHeader.addRuntimeTask(projAdvancedJournalLinePostEnhancedBatchTask, parentTask.RecId);
                        batchHeader.addDependency(projAdvancedJournalBatchTask, projAdvancedJournalLinePostEnhancedBatchTask, BatchDependencyStatus::Finished);

                        totalNumOfTasks -= 1;
                        if (totalNumOfTasks > 0)
                        {
                            projAdvancedJournalLinePostEnhancedBatchTask = ProjAdvancedJournalLinePostEnhancedBatchTask::construct(configuredMaxLinesPerTask);
                        }
                    }
                }

                if (totalNumOfTasks > 0)
                {
                    batchHeader.addRuntimeTask(projAdvancedJournalLinePostEnhancedBatchTask, parentTask.RecId);
                    batchHeader.addDependency(projAdvancedJournalBatchTask, projAdvancedJournalLinePostEnhancedBatchTask, BatchDependencyStatus::Finished);
                }
            }

            batchHeader.save();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>