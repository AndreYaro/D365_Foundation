<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_VendNoteSettle</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEngine_VendNoteSettle</c> class supports journals for settling promissory notes.
/// </summary>
/// <remarks>
/// This class extends the <c>LedgerJournalEngine</c> class.
/// </remarks>
public class LedgerJournalEngine_VendNoteSettle extends LedgerJournalEngine_VendPromissoryNote
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankAccountIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the offset account type and number according to the selected bank account.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record buffer that is being modified.
    /// </param>
    public void bankAccountIdModified(LedgerJournalTrans ledgerJournalTrans)
    {
        if ((ledgerJournalTrans.BankRemittanceType == BankRemittanceType::None
                || ledgerJournalTrans.BankRemittanceType == BankRemittanceType::Collection)
            && ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankRemittanceTypeModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the offset account type and number according to the selected bank remittance type.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record buffer to modify.
    /// </param>
    void bankRemittanceTypeModified(LedgerJournalTrans ledgerJournalTrans)
    {
        if (ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            switch (ledgerJournalTrans.BankRemittanceType)
            {
                case BankRemittanceType::Collection:
                    ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
                    break;

                case BankRemittanceType::Discount:
                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                    ledgerJournalTrans.parmOffsetLedgerDimension(0);
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    protected void initFromVendTable(LedgerJournalTrans ledgerJournalTrans, Tax1099BoxDetail _tax1099Detail = null)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            super(ledgerJournalTrans, _tax1099Detail);
        }
        else
        {
            super(ledgerJournalTrans);
        }

        ledgerJournalTrans.PostingProfile = VendParameters::find().PostingProfileRemitNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendOffsetAccount</Name>
				<Source><![CDATA[
    protected void initVendOffsetAccount(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        if (ledgerJournalTable.FixedOffsetAccount == NoYes::No)
        {
            if (ledgerJournalTrans.BankAccountId)
            {
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.BankAccountId, LedgerJournalACType::Bank);
            }
            else if (ledgerJournalTrans.ledgerJournalTable().BankAccountId)
            {
                ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.ledgerJournalTable().BankAccountId, LedgerJournalACType::Bank);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendPostingProfile</Name>
				<Source><![CDATA[
    public void initVendPostingProfile(LedgerJournalTrans ledgerJournalTrans)
    {
        ledgerJournalTrans.PostingProfile = VendParameters::find().PostingProfileRemitNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates settlement data for the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <remarks>
    ///    This method is used by the split payment feature.
    /// </remarks>
    public void settleTransUpdate(LedgerJournalTrans _ledgerJournalTrans)
    {
        super(_ledgerJournalTrans);

        VendPromissoryNoteID vendBillOfExchangeID;
        CustVendNegInstSeqNum custVendNegInstSeqNum;
        VendInvoiceId invoiceId;

        SpecTrans specTrans;
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;
        while select crossCompany RecId
        from specTrans
            where specTrans.SpecCompany == _ledgerJournalTrans.DataAreaId
                && specTrans.SpecRecId == _ledgerJournalTrans.RecId
                && specTrans.SpecTableId == _ledgerJournalTrans.TableId
        join RecId from vendTransOpen
            where vendTransOpen.DataAreaId == specTrans.RefCompany
                && vendTransOpen.TableId == specTrans.RefTableId
                && vendTransOpen.RecId == specTrans.RefRecId
        join PromissoryNoteID, PromissoryNoteSeqNum, Invoice from vendTrans
            where vendTrans.RecId == vendTransOpen.RefRecId
                && vendTrans.AccountNum == vendTransOpen.AccountNum
        {
            if ((vendBillOfExchangeID
                    && (vendBillOfExchangeID != vendTrans.PromissoryNoteID
                        || custVendNegInstSeqNum != vendTrans.PromissoryNoteSeqNum))
                || (invoiceId && invoiceId != vendTrans.Invoice))
            {
                _ledgerJournalTrans.amountCur2DebCred(0);

                SpecTransManager::constructServer(_ledgerJournalTrans, false).deleteAll();

                throw error("@SYS74107");
            }

            vendBillOfExchangeID = vendTrans.PromissoryNoteID;
            custVendNegInstSeqNum = vendTrans.PromissoryNoteSeqNum;
            invoiceId = vendTrans.Invoice;
        }

        _ledgerJournalTrans.Invoice = invoiceId;

        if (VendPromissoryNoteFinTagFlight::instance().isEnabled() && _ledgerJournalTrans.OffsetLedgerDimension)
        {
            this.performFinTagDefaulting(_ledgerJournalTrans, AccountOffsetaccount::OffsetAccount);
        }

        _ledgerJournalTrans.update();
        if (ledgerJournalTrans_ds)
        {
            ledgerJournalTrans_ds.reread();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>