<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetStatementRowSetupDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetStatementRowSetupDP</c> class provides data to the <c>AssetStatementRowSetup</c> SSRS
///    report.
/// </summary>
[
    SRSReportQueryAttribute(QueryStr(AssetStatementRowSetup)),
    SRSReportParameterAttribute(classstr(AssetStatementRowSetupContract))
]
public class AssetStatementRowSetupDP extends SRSReportDataProviderPreProcessTempDB
{
    AssetStatementFixedAssetsTmp        assetStatementFixedAssetsTmp;
    AssetStatementRowSetupTmp           assetStatementRowSetupTmp;
    AssetStatementRow                   assetStatementRow;
    AssetStatementInterval              assetStatementInterval;
    AssetTable                          assetTable;

    boolean                             showAssetsNotIncluded;
    AssetStatementRowName               rowName;
    RecordSortedList                    assetTableList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAssetTableList</Name>
				<Source><![CDATA[
    private void createAssetTableList()
    {
        assetTableList = new RecordSortedList(tablenum(AssetTable));
        assetTableList.sortOrder(fieldnum(AssetTable, AssetId));
        while select AssetId, Name, AssetGroup from assetTable
        {
            assetTableList.ins(assetTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetStatementFixedAssetsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>AssetStatementFixedAssetsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>AssetStatementFixedAssetsTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(AssetStatementFixedAssetsTmp))]
    public AssetStatementFixedAssetsTmp getAssetStatementFixedAssetsTmp()
    {
        select assetStatementFixedAssetsTmp;
        return assetStatementFixedAssetsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetStatementRowSetupTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>AssetStatementRowSetupTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>AssetStatementRowSetupTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(AssetStatementRowSetupTmp))]
    public AssetStatementRowSetupTmp getAssetStatementRowSetupTmp()
    {
        select assetStatementRowSetupTmp;
        return assetStatementRowSetupTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetStatementFixedAssetsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>insertAssetStatementFixedAssetsTmp</c> table.
    /// </summary>
    private void insertAssetStatementFixedAssetsTmp()
    {
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(AssetStatementFixedAssetsTmp), true, true, true, false, true, assetStatementFixedAssetsTmp);

        assetTableList.first(assetTable);
        do
        {
            assetStatementFixedAssetsTmp.clear();

            assetStatementFixedAssetsTmp.AssetId    = assetTable.AssetId;
            assetStatementFixedAssetsTmp.Name       = assetTable.Name;
            assetStatementFixedAssetsTmp.AssetGroup = assetTable.AssetGroup;

            recordInsertList.add(assetStatementFixedAssetsTmp);
        } while (assetTableList.next(assetTable));

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetStatementRowSetupTmp</Name>
				<Source><![CDATA[
    private void insertAssetStatementRowSetupTmp(boolean _printHeader, RecordInsertList _recordInsertList)
    {
        assetStatementRowSetupTmp.clear();

        assetStatementRowSetupTmp.RowName               = assetStatementRow.RowName;
        assetStatementRowSetupTmp.RowType               = assetStatementRow.RowType;
        assetStatementRowSetupTmp.FromAsset             = assetStatementInterval.FromAsset;
        assetStatementRowSetupTmp.ToAsset               = assetStatementInterval.ToAsset;
        assetStatementRowSetupTmp.AssetIntervalRelation = AssetStatementInterval.AssetIntervalRelation;
        assetStatementRowSetupTmp.PrintHeaderDetails    = _printHeader;

        _recordInsertList.add(assetStatementRowSetupTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SQL Server Reporting Services (SSRS) report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. This method will be called by
    ///    SSRS at runtime. The method should compute data and populate the data tables that will be returned
    ///    to SSRS.
    /// </remarks>
    public void processReport()
    {
        AssetStatementRowSetupContract  contract;
        QueryRun                        queryRun;
        boolean                         printHeader;
        QueryBuildDataSource            qbs;
        AssetId                         fromAsset;
        AssetId                         toAsset;

        contract = this.parmDataContract() as AssetStatementRowSetupContract;

        showAssetsNotIncluded = contract.parmShowAssetsNotIncluded();

        queryRun = new QueryRun(this.parmQuery());
        qbs = queryRun.query().dataSourceNo(1).addDataSource(tablenum(AssetStatementInterval));
        qbs.joinMode(JoinMode::OuterJoin);
        qbs.relations(true);

        if (showAssetsNotIncluded)
        {
            this.createAssetTableList();
        }

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(AssetStatementRowSetupTmp), true, true, true, false, true, assetStatementRowSetupTmp);

        while (queryRun.next())
        {
            printHeader = false;

            assetStatementRow       = queryRun.get(tablenum(AssetStatementRow));
            assetStatementInterval  = queryRun.get(tablenum(AssetStatementInterval));

            if (assetStatementRow.RowName != rowName)
            {
                printHeader = true;
                rowName = assetStatementRow.RowName;
            }

            this.insertAssetStatementRowSetupTmp(printHeader, recordInsertList);

            fromAsset   = assetStatementInterval.FromAsset;
            toAsset     = assetStatementInterval.ToAsset;

            if (showAssetsNotIncluded && assetStatementRow.RowType != RowType::Header)
            {
                while select AssetId, Name, AssetGroup from assetTable
                          where (assetTable.AssetId >= fromAsset &&
                                assetTable.AssetId <= toAsset &&
                                assetStatementInterval.AssetIntervalRelation == AssetIntervalRelation::AssetId)
                                || (assetTable.AssetGroup >= fromAsset &&
                                assetTable.AssetGroup <= toAsset &&
                                assetStatementInterval.AssetIntervalRelation == AssetIntervalRelation::AssetGroupId)
                    {
                        assetTableList.del(assetTable);
                    }
            }

            fromAsset   = '';
            toAsset     = '';
        }

        recordInsertList.insertDatabase();

        if (showAssetsNotIncluded)
        {
            this.insertAssetStatementFixedAssetsTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>