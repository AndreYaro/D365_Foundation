<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjTransLayout</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjListProjTransLayout implements SysPackable
{
    // Rows
    boolean                     printFrontPage;
    ProjListStateProjType       stateProjType;
    Level                       level;
    boolean                     skipBlankId;
    boolean                     skipZero;

    DialogField                 dialogPrintFrontPage;
    DialogField                 dialogStateProjType;
    DialogField                 dialogLevel;
    DialogField                 dialogShowBlankId;
    DialogField                 dialogZeroLines;

    // Columns
    ProjShowAmount              showAmount;
    ProjListProfitFactor        profitFactor;
    boolean                     posWIP;
    boolean                     negWIP;
    ProjAmountQty               amountQty;

    DialogField                 dialogProfitFactor;
    DialogField                 dialogShowAmount;
    DialogField                 dialogPosWIP;
    DialogField                 dialogNegWIP;
    DialogField                 dialogIncludeHourQty;

    // Control
    ProjListProjTrans           listProjTrans;
    boolean                     showPLRatio;
    boolean                     showPosNegWIP;
    boolean                     dontShowdialog;

    DialogGroup                 grpBoth;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        printFrontPage,
        stateProjType,
        level,
        skipBlankId,
        skipZero,
        showAmount,
        profitFactor,
        posWIP,
        negWIP,
        amountQty
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDialogColumnFields</Name>
				<Source><![CDATA[
    void addDialogColumnFields(DialogRunbase   dialog)
    {
        ;

        if (! dontShowdialog)
        {
            dialog.addGroup("@SYS91228",grpBoth);

            if (listProjTrans.mustShowAmount())
            {
                dialogShowAmount        = dialog.addFieldValue(enumstr(ProjShowAmount), showAmount);
            }

            if (listProjTrans.mustShowHourQty())
            {
                dialogIncludeHourQty    = dialog.addFieldValue(enumstr(ProjAmountQty), amountQty, "@SYS91943", "@SYS91207");
            }

            if (showPLRatio)
            {
                dialogProfitFactor      = dialog.addFieldValue(enumstr(ProjListProfitFactor), profitFactor);
            }

            if (showPosNegWIP)
            {
                dialogPosWIP    = dialog.addFieldValue(enumstr(boolean), true,  "@SYS63329", "@SYS63331");
                dialogNegWIP    = dialog.addFieldValue(enumstr(boolean), true,  "@SYS63330", "@SYS63332");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDialogRowFields</Name>
				<Source><![CDATA[
    void addDialogRowFields(DialogRunbase   dialog)
    {
        ;
        grpBoth = dialog.addGroup();
        grpBoth.frameType(FormFrameType::None);
        grpBoth.columns(2);
        dialog.addGroup("@SYS91227",grpBoth);

        #if.withFrontPage // Don't add the field from build 1348
        dialogPrintFrontPage    = dialog.addFieldValue(enumStr(boolean), printFrontPage, "@SYS91205","@SYS91204");
        #endif

        if (! dontShowdialog)
        {
            if (this.checkProjListStateId(listProjTrans.listStateId()))
            {
                dialogStateProjType     = dialog.addFieldValue(enumstr(ProjListStateProjType), stateProjType, "@SYS75799","@SYS90476");
                dialogLevel             = dialog.addFieldValue(extendedtypestr(Level), level, "@SYS90474","@SYS90477");
            }
            if (listProjTrans.mustShowBlankId())
            {
                dialogShowBlankId       = dialog.addFieldValue(enumstr(boolean), skipBlankId, "@SYS91206", "@SYS91208");
            }
            dialogZeroLines         = dialog.addFieldValue(enumstr(boolean), skipZero, "@SYS19052","@SYS90472");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjListStateId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks project list state value.
    /// </summary>
    /// <param name = "_listStateId">
    ///     List state id.
    /// </param>
    /// <returns>
    ///     true if list state id is of type Project; otherwise, false.
    /// </returns>
    protected boolean checkProjListStateId(ProjListStateId _listStateId)
    {
        return _listStateId == ProjListStateId::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDialogFrontPage</Name>
				<Source><![CDATA[
    void buildDialogFrontPage(SysReportRun reportRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPrintId</Name>
				<Source><![CDATA[
    // This method test if the line with the provide Id can be printed.
    boolean canPrintId(ProjListProjId id)
    {
        if (! skipBlankId)
        {
            return true;
        }

        if (id == "@SYS78757" || !id)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (! dontShowdialog)
        {
            if (dialogPrintFrontPage)
            {
                printFrontPage  = dialogPrintFrontPage.value();
            }
            if (dialogStateProjType)
            {
                stateProjType   = dialogStateProjType.value();
            }
            if (dialogLevel)
            {
                level           = dialogLevel.value();
            }
            if (dialogShowBlankId)
            {
                skipBlankId     = dialogShowBlankId.value();
            }
            if (dialogZeroLines)
            {
                skipZero        = dialogZeroLines.value();
            }
            if (dialogProfitFactor)
            {
                profitFactor    = dialogProfitFactor.value();
            }
            if (dialogShowAmount)
            {
                showAmount      = dialogShowAmount.value();
            }
            if (dialogZeroLines)
            {
                skipZero        = dialogZeroLines.value();
            }
            if (dialogPosWIP)
            {
                posWIP     = dialogPosWIP.value();
            }
            if (dialogNegWIP)
            {
                negWIP     = dialogNegWIP.value();
            }
            if (dialogIncludeHourQty)
            {
                amountQty     = dialogIncludeHourQty.value();
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(ProjListProjTrans _listProjTrans)
    {
        listProjTrans   = _listProjTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountQty</Name>
				<Source><![CDATA[
    public ProjAmountQty parmAmountQty(ProjAmountQty _amountQty = amountQty)
    {
        amountQty = _amountQty;

        return amountQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDontShowBaseDialog</Name>
				<Source><![CDATA[
    public boolean parmDontShowBaseDialog(boolean _dontShow = dontShowdialog)
    {
        dontShowdialog = _dontShow;

        return dontShowdialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    public Level parmLevel(Level _level = level)
    {
        level = _level;

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNegWIP</Name>
				<Source><![CDATA[
    public boolean parmNegWIP(boolean _negWIP = negWIP)
    {
        negWIP = _negWIP;

        return negWIP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPosWIP</Name>
				<Source><![CDATA[
    public boolean parmPosWIP(boolean _posWIP = posWIP)
    {
        posWIP = _posWIP;

        return posWIP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProfitFactor</Name>
				<Source><![CDATA[
    public ProjListProfitFactor parmProfitFactor(ProjListProfitFactor _profitFactor = profitFactor)
    {
        profitFactor = _profitFactor;

        return profitFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAmount</Name>
				<Source><![CDATA[
    public ProjShowAmount parmShowAmount(ProjShowAmount _showAmount = showAmount)
    {
        showAmount = _showAmount;

        return showAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPLRatio</Name>
				<Source><![CDATA[
    public boolean parmShowPLRatio(boolean _showPLRatio = showPLRatio)
    {
        showPLRatio = _showPLRatio;

        return showPLRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPosNegWIP</Name>
				<Source><![CDATA[
    public boolean parmShowPosNegWIP(boolean _showPosNegWIP = showPosNegWIP)
    {
        showPosNegWIP = _showPosNegWIP;

        return showPosNegWIP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipBlank</Name>
				<Source><![CDATA[
    public boolean parmSkipBlank(boolean _skipBlank = skipBlankId)
    {
        skipBlankId = _skipBlank;

        return skipBlankId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipZero</Name>
				<Source><![CDATA[
    public boolean parmSkipZero(boolean _skipZero = skipZero)
    {
        skipZero = _skipZero;

        return skipZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStateProjType</Name>
				<Source><![CDATA[
    public ProjListStateProjType parmStateProjType(ProjListStateProjType _stateProjType = stateProjType)
    {
        stateProjType = _stateProjType;

        return stateProjType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAmountReport</Name>
				<Source><![CDATA[
    AmountMST showAmountReport(
        AmountMST       amountMST,
        ProjShowAmount  parmShowAmount  = this.parmShowAmount())
    {
        AmountMST   projAmountReport   = amountMST;

        if (parmShowAmount == ProjShowAmount::Amount1000)
        {
            projAmountReport    =  (amountMST / 1000);
        }
        else if (parmShowAmount == ProjShowAmount::Amount1000000)
        {
            projAmountReport    =  (amountMST / 1000000);
        }

        return projAmountReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version       = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean ret = true;

        if (level < 0)
        {
            ret = checkFailed("@SYS104023");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProjListProjTransLayout construct(ProjListProjTrans   listProjTrans)
    {
        return new ProjListProjTransLayout(listProjTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>