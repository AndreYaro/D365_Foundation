<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostTaskControllerSingleThread</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventCostTaskControllerSingleThread</c> class handles task scheduling when running an inventory closing
/// which is not scheduled to run in batch.
/// </summary>
class InventCostTaskControllerSingleThread extends InventCostTaskController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resumes an inventory closing.
    /// </summary>
    /// <remarks>
    /// The calculation can be stopped by using the pause action.
    /// </remarks>
    public void resume()
    {
        BOMLevel    totalBomLevel = this.getFirstLevel();

        if (this.isInventCostListParmCreated())
        {
            this.inventCostPrepareParmTask(voucher, transDate).runOperation();
        }

        if (this.isInventCostBundleListCreated()
            || this.isInventCostListUnbundled(totalBomLevel))
        {
            this.inventCostBundleTask(voucher, transDate, totalBomLevel).runOperation();
        }

        this.resetBundleState();
        this.resetIteration();

        BOMLevel bomLevel = this.bomLevelToProcess();

        if (bomLevel >= 0)
        {
            this.runBomLevel(bomLevel, totalBomLevel);
        }

        this.runIterations(totalBomLevel);
        this.inventCostLedgerPostingTask(voucher, transDate).runOperation();

        this.runRunRecalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts an inventory closing calculation.
    /// </summary>
    public void run()
    {
        super();

        BOMLevel bomLevel = this.getFirstLevel();
        BOMLevel totalBomLevel = bomLevel;

        this.inventCostBundleTask(voucher, transDate, bomLevel).runOperation();
        this.inventCostPrepareParmTask(voucher, transDate).runOperation();

        this.runBomLevel(bomLevel, totalBomLevel);
        this.runIterations(totalBomLevel);
        this.inventCostLedgerPostingTask(voucher, transDate).runOperation();

        this.runRunRecalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBomLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the calculation process.
    /// </summary>
    /// <param name="_bomLevel">
    /// The level for which bundles should run.
    /// </param>
    /// <param name="_totalBomLevel">
    /// The total number of levels for the calculation.
    /// </param>
    private void runBomLevel(BOMLevel _bomLevel, BOMLevel _totalBomLevel)
    {
        BOMLevel    calculateLevel;

        for (calculateLevel = _bomLevel; calculateLevel > 0; calculateLevel--)
        {
            this.inventCostCalculateTask(voucher, transDate, calculateLevel, _totalBomLevel).runOperation();

            this.inventCostBundleTask(voucher, transDate, calculateLevel - 1).runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runIterations</Name>
				<Source><![CDATA[
    private void runIterations(BOMLevel _totalBomLevel)
    {
        boolean     remainingItems = true;

        while (remainingItems)
        {
            this.inventCostCalculateTask(voucher, transDate, 0, _totalBomLevel).runOperation();

            // Check for remaining items added to level 0
            remainingItems = this.remainingItems(voucher, 0, inventClosing.NumOfIteration + 1);
            if (remainingItems)
            {
                this.updateIteration();

                this.createInventCostListForIteration(inventClosing.NumOfIteration);

                this.inventCostBundleTask(voucher, transDate, 0).runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRunRecalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the recalculation process.
    /// </summary>
    private void runRunRecalculation()
    {
        if (inventClosing.RunRecalculation)
        {
            this.inventCostReCalculationTask(voucher, transDate).runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventCostTaskControllerSingleThread construct()
    {
        return new InventCostTaskControllerSingleThread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostTaskControllerSingleThread</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of the inventory closing.
    /// </param>
    /// <param name="_transDate">
    /// The date of the inventory closing.
    /// </param>
    /// <param name="_runNum">
    /// The ID of the current inventory closing run.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCostTaskControllerSingleThread</c> class.
    /// </returns>
    public static InventCostTaskControllerSingleThread newController(
                                                            Voucher             _voucher,
                                                            TransDate           _transDate,
                                                            InventClosingRunNum _runNum
                                                        )

    {
        InventCostTaskControllerSingleThread taskController = InventCostTaskControllerSingleThread::construct();

        taskController.parmBatchJobId(0);
        taskController.parmVoucher(_voucher);
        taskController.parmTransDate(_transDate);
        taskController.parmRunNum(_runNum);

        taskController.init();

        return taskController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>