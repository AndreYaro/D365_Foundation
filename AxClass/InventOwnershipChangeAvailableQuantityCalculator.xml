<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOwnershipChangeAvailableQuantityCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventOwnershipChangeAvailableQuantityCalculator</c> class calculates quantities available for inventory ownership change.
/// </summary>
public final class InventOwnershipChangeAvailableQuantityCalculator
{
    InventJournalTrans journalLine;

    private boolean onHandCalculated;
    private boolean totalCalculated;

    private InventQty onHandQuantity;
    private InventQty totalQuantity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventOwnershipChangeAvailableQuantityCalculator</c> class.
    /// </summary>
    /// <param name = "_journalLine">An inventory ownership change journal line.</param>
    /// <returns>A new instance of the <c>InventOwnershipChangeAvailableQuantityCalculator</c> class.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventOwnershipChangeAvailableQuantityCalculator newFromJournalLine(InventJournalTrans _journalLine)
    {
        if (_journalLine.JournalType != InventJournalType::OwnershipChange)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventOwnershipChangeAvailableQuantityCalculator calculator = new InventOwnershipChangeAvailableQuantityCalculator();
        calculator.journalLine = _journalLine;

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAvailableQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total quantity available for inventory ownership change.
    /// </summary>
    /// <returns>The total available quantity.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty totalAvailableQuantity()
    {
        if (!totalCalculated)
        {
            totalQuantity = this.onHandAvailableQuantity() + this.productionInProgressAvailableQuantity();
            totalCalculated = true;
        }

        return totalQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandAvailableQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the on-hand quantity available for inventory ownership change.
    /// </summary>
    /// <returns>The on-hand available quantity.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty onHandAvailableQuantity()
    {
        if (!onHandCalculated)
        {
            InventDim journalLineInventDim = journalLine.inventDim();
            InventDimParm inventDimParm;
            inventDimParm.initFromInventDim(journalLineInventDim);

            onHandQuantity = InventOnHandQty::newParameters(journalLine.ItemId, journalLineInventDim, inventDimParm).availPhysical();
            onHandCalculated = true;
        }

        return onHandQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionInProgressAvailableQuantity</Name>
				<Source><![CDATA[
    private InventQty productionInProgressAvailableQuantity()
    {
        InventTrans                                                 inventTrans;
        InventTransOriginProdBOM                                    inventTransOriginProductionBOMLine;
        InventTransOriginProdBomOwnershipChangeJournalTransLink     inventTransOriginProdBomOwnershipChangeJournalTransLink;

        select sum(Qty) from inventTrans
            where inventTrans.StatusReceipt == StatusReceipt::None
                && (inventTrans.StatusIssue == StatusIssue::ReservPhysical || inventTrans.StatusIssue == StatusIssue::Picked)
                && inventTrans.inventDimId == journalLine.InventDimId
            exists join TableId from inventTransOriginProductionBOMLine
                where inventTransOriginProductionBOMLine.InventTransOrigin == inventTrans.InventTransOrigin
            exists join TableId from inventTransOriginProdBomOwnershipChangeJournalTransLink
                where inventTransOriginProdBomOwnershipChangeJournalTransLink.ProductionBOMLine == inventTransOriginProductionBOMLine.InventTransOrigin
                    && inventTransOriginProdBomOwnershipChangeJournalTransLink.JournalLine      == journalLine.RecId;

        return abs(inventTrans.Qty);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>