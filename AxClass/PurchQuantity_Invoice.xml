<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchQuantity_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactory(DocumentStatus::Invoice)]
[DocumentStatusFactory(DocumentStatus::ApproveJournal)]
[DocumentStatusFactory(DocumentStatus::Facture_RU)]
[DocumentStatusFactory(DocumentStatus::PlSAD)]
public class PurchQuantity_Invoice extends PurchQuantity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPendingMatchedQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates an <c>InventNow</c> quantity for pending invoice lines that are connected to given
    ///    <c>PurchLine</c> table record and matched to a packing slip.
    /// </summary>
    /// <param name="purchLine">
    ///    The <c>PurchLine</c> table record to use for calculation.
    /// </param>
    /// <param name="_pendingOnly">
    ///    A Boolean value that determines whether only pending invoice lines are considered connected;
    ///    optional.
    /// </param>
    /// <returns>
    ///    The calculated <c>InventNow</c> quantity.
    /// </returns>
    protected InventQty calcPendingMatchedQtyInvent(PurchLine purchLine, boolean _pendingOnly = true)
    {
        return purchLine.calcPendingMatchedQtyInvent(_pendingOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPendingMatchedQtyPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a <c>ReceiveNow</c> quantity for pending invoice lines that are connected to a given
    ///    <c>PurchLine</c> table record and matched to a packing slip.
    /// </summary>
    /// <param name="purchLine">
    ///    The <c>PurchLine</c> table record to use for calculation.
    /// </param>
    /// <param name="_pendingOnly">
    ///    A Boolean value that determines whether only pending invoice lines are considered connected;
    ///    optional.
    /// </param>
    /// <returns>
    ///    The calculated <c>ReceiveNow</c> quantity.
    /// </returns>
    protected InventQty calcPendingMatchedQtyPurch(PurchLine purchLine, boolean _pendingOnly = true)
    {
        return purchLine.calcPendingMatchedQtyPurch(_pendingOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPendingQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates an <c>InventNow</c> quantity for all pending invoice lines connected to a given
    ///    <c>PurchLine</c> table record.
    /// </summary>
    /// <param name="purchLine">
    ///    The <c>PurchLine</c> table record to use for the calculation.
    /// </param>
    /// <returns>
    ///    The calculated <c>InventNow</c> quantity.
    /// </returns>
    protected InventQty calcPendingQtyInvent(PurchLine purchLine)
    {
        return purchLine.calcPendingQtyInvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPendingQtyPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a <c>ReceiveNow</c> quantity for all pending invoice lines that are connected to a given
    ///    <c>PurchLine</c> table record.
    /// </summary>
    /// <param name="purchLine">
    ///    The <c>PurchLine</c> table record to use for calculation.
    /// </param>
    /// <returns>
    ///    The calculated <c>ReceiveNow</c> quantity.
    /// </returns>
    protected InventQty calcPendingQtyPurch(PurchLine purchLine)
    {
        return purchLine.calcPendingQtyPurch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateInventDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_qtyUpdateAll">The full quantity.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventDelegate(PurchLine _purchLine, PurchUpdate _specQty, InventQty _qtyUpdateAll, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(PurchLine _purchLine, PurchUpdate _specQty = PurchUpdate::All, InventQty _qty = naReal(), boolean _creditRemaining = false, boolean _calcRemaining = true)
    {
        InventQty qtyUpdate;
        InventQty tempQtyUpdate;
        InventQty numOfRemainOri;
        InventQty qtyRemainNew;
        InventTransIdSum inventTransIdSum;
        // <GIN>
        NoYes customsMarked = TaxParameters::isCustomsEnable_IN();
        InventQty qtyUpdateLoc;
        // </GIN>

        InventQty calcQtyUpdateAll()
        {
            InventQty calcQtyUpdate, tempCalcQtyUpdate;

            if (_purchLine.RemainInventFinancial * _purchLine.RemainInventPhysical < 0)
            {
                calcQtyUpdate = _purchLine.RemainInventFinancial;
            }
            else
            {
                calcQtyUpdate = _purchLine.RemainInventPhysical + _purchLine.RemainInventFinancial;
            }

            tempCalcQtyUpdate = calcQtyUpdate;
            calcQtyUpdate -= this.calcPendingQtyInvent(_purchLine);

            if (calcQtyUpdate != 0.0 && (sign(tempCalcQtyUpdate) != sign(calcQtyUpdate))) // never return a value of the opposite sign
            {
                calcQtyUpdate = 0.0;
            }

            return calcQtyUpdate;
        }

        if (!_purchLine.isStocked())
        {
            return [0,0,0];
        }

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow:
                    qtyUpdate = _purchLine.InventReceivedNow;
                    break;

                case PurchUpdate::All:
                    qtyUpdate = calcQtyUpdateAll();
                    break;

                case PurchUpdate::RegisteredAndServices:

                case PurchUpdate::Recorded:
                    inventTransIdSum = this.inventTransIdSum(_purchLine);
                    qtyUpdate = inventTransIdSum.registered();
                    if (qtyUpdate != 0.0)
                    {
                        tempQtyUpdate = calcQtyUpdateAll();

                        if (sign(tempQtyUpdate) != sign(qtyUpdate)) // never return a value of the opposite sign
                        {
                            qtyUpdate = 0.0;
                        }
                        else
                        {
                            if (abs(tempQtyUpdate) < abs(qtyUpdate)) // take the smaller value
                            {
                                qtyUpdate = tempQtyUpdate;
                            }
                        }
                    }
                    break;

                case PurchUpdate::PackingSlip:
                    inventTransIdSum = this.inventTransIdSum(_purchLine);
                    qtyUpdate = inventTransIdSum.physical();
                    tempQtyUpdate = qtyUpdate;
                    qtyUpdate -= this.calcPendingMatchedQtyInvent(_purchLine, false);

                    if (qtyUpdate != 0.0 && (sign(tempQtyUpdate) != sign(qtyUpdate))) // never return a value of the opposite sign
                    {
                        qtyUpdate = 0.0;
                    }
                    break;

              
                // <GIN>
                case PurchUpdate::BillOfEntryQuantity_IN:
                    if (customsMarked)
                    {
                        qtyUpdate = calcQtyUpdateAll();
                        qtyUpdateLoc = qtyUpdate;
                        if (PurchTable::find(_purchLine.PurchId).purchTable_W().CustomsImportOrder_IN
                        && CustomsVendBOETrans_IN::findOrderId(_purchLine.PurchId)
                        && _qty == naReal())
                        {
                            qtyUpdate = CustomsVendBOETrans_IN::getRemainingQuantityForInvoiceUpdate(_purchLine.PurchId, _purchLine.InventTransId, customsVendBOETransRecId);
                            qtyUpdate = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_purchLine.ItemId,
                                                                                                              _purchLine.InventDimId,
                                                                                                              qtyUpdate,
                                                                                                              _purchLine.PurchUnit,
                                                                                                              InventTableModule::find(_purchLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                                              NoYes::Yes);
                        }
                    }
                    break;
                // </GIN>

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventDelegate(_purchLine, _specQty, calcQtyUpdateAll(), result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            if (!inventTransIdSum)
            {
                inventTransIdSum = this.inventTransIdSum(_purchLine);
            }

            // <GIN>
            if (_specQty == PurchUpdate::BillOfEntryQuantity_IN)
            {
                numOfRemainOri = _purchLine.RemainInventPhysical + _purchLine.RemainInventFinancial;
            }
            else
            {
                // </GIN>
                numOfRemainOri = _purchLine.RemainInventPhysical + inventTransIdSum.physical();
            }

            if (qtyUpdate * _purchLine.PurchQty < 0 && !_creditRemaining && qtyUpdate * numOfRemainOri <= 0)
            {
                qtyRemainNew = _purchLine.RemainInventPhysical;
            }
            else
            {
                if (qtyUpdate > 0)
                {
                    if (qtyUpdate * _purchLine.QtyOrdered < 0 && _purchLine.RemainPurchFinancial < 0)
                    {
                        qtyRemainNew = max(qtyUpdate,0);
                    }
                    else
                    {
                        // <GIN>
                        if (customsMarked && PurchTable::find(_purchLine.PurchId).purchTable_W().CustomsImportOrder_IN && CustomsVendBOETrans_IN::findOrderId(_purchLine.PurchId))
                        {
                            if (_qty == naReal())
                            {
                                qtyRemainNew = max(qtyUpdateLoc - inventTransIdSum.physical(), 0);
                            }
                            else
                            {
                                qtyRemainNew = max(qtyUpdate - _purchLine.RemainInventFinancial, 0);
                            }
                        }
                        else
                        {
                            // </GIN>
                            qtyRemainNew = max(qtyUpdate - inventTransIdSum.physical(), 0);
                            // <GIN>
                        }
                        // </GIN>
                    }
                }
                else
                {
                    if (qtyUpdate < 0)
                    {
                        if (qtyUpdate * _purchLine.QtyOrdered < 0 && _purchLine.RemainPurchFinancial > 0)
                        {
                            qtyRemainNew = min(qtyUpdate,0);
                        }
                        else
                        {
                            qtyRemainNew = min(qtyUpdate - inventTransIdSum.physical(),0);
                        }
                    }
                    else
                    {
                        qtyRemainNew = 0;
                    }
                }

                if (_specQty == PurchUpdate::BillOfEntryQuantity_IN)
                {
                    qtyRemainNew = numOfRemainOri - _purchLine.RemainInventFinancial - qtyRemainNew;
                }
                else
                {
                    qtyRemainNew = numOfRemainOri - inventTransIdSum.physical() - qtyRemainNew;
                }

                if (qtyRemainNew * _purchLine.PurchQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdatePurchDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for purchase.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_qtyUpdateAll">The full quantity.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdatePurchDelegate(PurchLine _purchLine, PurchUpdate _specQty, InventQty _qtyUpdateAll, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurch</Name>
				<Source><![CDATA[
    protected container calcQtyPurch(PurchLine _purchLine, PurchUpdate _specQty = PurchUpdate::All, PurchQty _qty = naReal(), boolean _creditRemaining = false, boolean _calcRemaining = true)
    {
        PurchQty qtyUpdate;
        PurchQty tempQtyUpdate;
        PurchQty numOfRemainOri;
        PurchQty qtyRemainNew;
        // <GIN>
        NoYes customsMarked = TaxParameters::isCustomsEnable_IN();
        PurchQty qtyUpdateLoc;
        // </GIN>

        PurchQty calcQtyUpdateAll()
        {
            PurchQty calcQtyUpdate, tempCalcQtyUpdate;

            calcQtyUpdate = _purchLine.calculateRemainingPurchaseQuantity(_purchLine);

            tempCalcQtyUpdate = calcQtyUpdate;
            calcQtyUpdate -= this.calcPendingQtyPurch(_purchLine);

            if (calcQtyUpdate != 0.0 && (sign(tempCalcQtyUpdate) != sign(calcQtyUpdate))) // never return a value of the opposite sign
            {
                calcQtyUpdate = 0.0;
            }

            return calcQtyUpdate;
        }

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow:
                    qtyUpdate = _purchLine.PurchReceivedNow;
                    break;

                case PurchUpdate::All:
                    qtyUpdate = calcQtyUpdateAll();
                    break;

                case PurchUpdate::RegisteredAndServices:
                    if (!_purchLine.isStocked())
                    {
                        if (_purchLine.RemainPurchFinancial * _purchLine.RemainPurchPhysical < 0)
                        {
                            qtyUpdate = _purchLine.RemainPurchFinancial;
                        }
                        else
                        {
                            qtyUpdate = _purchLine.RemainPurchPhysical + _purchLine.RemainPurchFinancial;
                        }
                        break;
                    }

                case PurchUpdate::Recorded:
                    qtyUpdate = _purchLine.registeredInPurchUnit();

                    if (qtyUpdate != 0.0)
                    {
                        tempQtyUpdate = calcQtyUpdateAll();

                        if (sign(tempQtyUpdate) != sign(qtyUpdate)) // never return a value of the opposite sign
                        {
                            qtyUpdate = 0.0;
                        }
                        else
                        {
                            if (abs(tempQtyUpdate) < abs(qtyUpdate)) // take the smaller value
                            {
                                qtyUpdate = tempQtyUpdate;
                            }
                        }
                    }
                    break;

                case PurchUpdate::PackingSlip:
                    qtyUpdate = _purchLine.RemainPurchFinancial;
                    tempQtyUpdate = qtyUpdate;
                    qtyUpdate -= this.calcPendingMatchedQtyPurch(_purchLine, false);

                    if (qtyUpdate != 0.0 && (sign(tempQtyUpdate) != sign(qtyUpdate))) // never return a value of the opposite sign
                    {
                        qtyUpdate = 0.0;
                    }
                    break;

               
                // <GIN>
                case PurchUpdate::BillOfEntryQuantity_IN:
                    if (customsMarked)
                    {
                        qtyUpdate = calcQtyUpdateAll();
                        qtyUpdateLoc = qtyUpdate;
                        if (PurchTable::find(_purchLine.PurchId).purchTable_W().CustomsImportOrder_IN && CustomsVendBOETrans_IN::findOrderId(_purchLine.PurchId) && _qty == naReal())
                        {
                            qtyUpdate = CustomsVendBOETrans_IN::getRemainingQuantityForInvoiceUpdate(_purchLine.PurchId, _purchLine.InventTransId, customsVendBOETransRecId);
                        }
                    }
                    break;
                // </GIN>
                
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.calculateQtyUpdatePurchDelegate(_purchLine, _specQty, calcQtyUpdateAll(), result);
                if (result.hasResult())
                {
                    qtyUpdate = result.result();
                }
                break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri = _purchLine.RemainPurchPhysical + _purchLine.RemainPurchFinancial;

            if (qtyUpdate * _purchLine.PurchQty < 0 && !_creditRemaining && qtyUpdate * numOfRemainOri <= 0)
            {
                qtyRemainNew = _purchLine.RemainPurchPhysical;
            }
            else
            {
                if (qtyUpdate > 0)
                {
                    if (qtyUpdate * _purchLine.PurchQty < 0 && _purchLine.RemainPurchFinancial < 0)
                    {
                        qtyRemainNew = max(qtyUpdate,0);
                    }
                    else
                    {
                        // <GIN>
                        if (customsMarked &&
                            PurchTable::find(_purchLine.PurchId).purchTable_W().CustomsImportOrder_IN &&
                            CustomsVendBOETrans_IN::findOrderId(_purchLine.PurchId) &&
                            _qty == naReal())
                        {
                            qtyRemainNew = max(qtyUpdateLoc - _purchLine.RemainPurchFinancial, 0);
                        }
                        else
                        {
                            // </GIN>
                            qtyRemainNew = max(qtyUpdate - _purchLine.RemainPurchFinancial,0);
                            // <GIN>
                        }
                        // </GIN>
                    }
                }
                else
                {
                    if (qtyUpdate < 0)
                    {
                        if (qtyUpdate * _purchLine.PurchQty < 0 && _purchLine.RemainPurchFinancial > 0)
                        {
                            qtyRemainNew = min(qtyUpdate,0);
                        }
                        else
                        {
                            qtyRemainNew = min(qtyUpdate - _purchLine.RemainPurchFinancial, 0);
                        }
                    }
                    else
                    {
                        qtyRemainNew = 0;
                    }
                }

                qtyRemainNew = numOfRemainOri - _purchLine.RemainPurchFinancial - qtyRemainNew;

                if (qtyRemainNew * _purchLine.PurchQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurchOnModification_IN</Name>
				<Source><![CDATA[
    public container calcQtyPurchOnModification_IN(PurchLine _purchLine, PurchQty _purchQtyModified, PurchUpdate _specQty = PurchUpdate::All,
                                                   PurchQty _qty = naReal(), boolean _creditRemaining = false, boolean _calcRemaining = true)
    {
        PurchQty qtyUpdate;
        PurchQty numOfRemainOri;
        PurchQty qtyRemainNew;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        if (_calcRemaining)
        {
            numOfRemainOri = (_purchLine.RemainPurchPhysical + _purchLine.RemainPurchFinancial);
            qtyUpdate = CustomsVendBOETrans_IN::getRemainingQuantityForInvoiceUpdate(_purchLine.PurchId, _purchLine.InventTransId, customsVendBOETransRecId);

            if (abs(_purchQtyModified) > 0 && qtyUpdate && abs(_purchQtyModified) <= abs(qtyUpdate))
            {
                qtyUpdate = _purchQtyModified;
            }
            qtyRemainNew = (numOfRemainOri - qtyUpdate);

            if (qtyRemainNew * _purchLine.PurchQty < 0)
            {
                qtyRemainNew = 0;
            }
        }
        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdSum</Name>
				<Source><![CDATA[
    protected InventTransIdSum inventTransIdSum(PurchLine _purchLine)
    {
        return InventTransIdSum::newTransOriginId(InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcPendingMatchedQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a <c>PdsCWInventNow</c> quantity for pending invoice lines that are connected to given
    ///    <c>PurchLine</c> table record and matched to a packing slip.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> table record to use for calculation.
    /// </param>
    /// <param name="_pendingOnly">
    ///    A Boolean value that determines whether only pending invoice lines are considered connected;
    ///    optional.
    /// </param>
    /// <returns>
    ///    The calculated <c>PdsCWInventNow</c> quantity.
    /// </returns>
    protected PdsCWInventQty pdsCWCalcPendingMatchedQtyInvent(PurchLine _purchLine, boolean _pendingOnly = true)
    {
        return _purchLine.pdsCWCalcPendingMatchedQtyInvent(_pendingOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcPendingQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a <c>PdsCWReceiveNow</c> quantity for all pending invoice lines that are connected to a given
    ///    <c>PurchLine</c> table record.
    /// </summary>
    /// <param name="purchLine">
    ///    The <c>PurchLine</c> table record to use for calculation.
    /// </param>
    /// <returns>
    ///    The calculated <c>PdsCWReceiveNow</c> quantity.
    /// </returns>
    protected PdsCWInventQty pdsCWCalcPendingQty(PurchLine purchLine)
    {
        return purchLine.pdsCWCalcPendingQtyPurch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateInventCWDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for catch weight.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_qtyUpdateAll">The full quantity.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventCWDelegate(PurchLine _purchLine, PurchUpdate _specQty, InventQty _qtyUpdateAll, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the <c>PdsCWReceiveNow</c>, <c>PdsCWRemainBefore</c> and <c>PdsCWRemainAfter</c> quantities.
    /// </summary>
    /// <param name="_purchLine">
    ///     The <c>PurchLine</c> record used in the calculation.
    /// </param>
    /// <param name="_specQty">
    ///     The quantity qualifier used to determine the quantity; optional.
    /// </param>
    /// <param name="_qty">
    ///     The catch weight quantity update; optional.
    /// </param>
    /// <param name="_creditRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be credited; optional.
    /// </param>
    /// <param name="_calcRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be calculated; optional.
    /// </param>
    /// <returns>
    ///     The calculated values for <c>PdsCWReceiveNow</c>, <c>PdsCWRemainBefore</c> and <c>PdsCWRemainAfter</c>.
    /// </returns>
    protected container pdsCWCalcQtyInvent(PurchLine _purchLine, PurchUpdate _specQty = PurchUpdate::All, PdsCWInventQty _qty = naReal(), boolean _creditRemaining = false, boolean _calcRemaining = true)
    {
        PdsCWInventQty qtyUpdate;
        PdsCWInventQty tempQtyUpdate;
        PdsCWInventQty numOfRemainOri;
        PdsCWInventQty qtyRemainNew;
        boolean remainOk;
        InventTransIdSum inventTransIdSum;

        PdsCWInventQty calcQtyUpdateAll()
        {
            PdsCWInventQty calcQtyUpdate, tempCalcQtyUpdate;

            if (_purchLine.PdsCWRemainInventFinancial * _purchLine.PdsCWRemainInventPhysical < 0)
            {
                calcQtyUpdate = _purchLine.PdsCWRemainInventFinancial;
            }
            else
            {
                calcQtyUpdate = _purchLine.PdsCWRemainInventPhysical + _purchLine.PdsCWRemainInventFinancial;
            }

            tempCalcQtyUpdate = calcQtyUpdate;
            calcQtyUpdate -= this.pdsCWCalcPendingQty(_purchLine);

            if (calcQtyUpdate != 0.0 && (sign(tempCalcQtyUpdate) != sign(calcQtyUpdate))) // never return a value of the opposite sign
            {
                calcQtyUpdate = 0.0;
            }

            return calcQtyUpdate;
        }

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow:
                    qtyUpdate = _purchLine.PdsCWInventReceivedNow;
                    break;

                case PurchUpdate::All:
                    qtyUpdate = calcQtyUpdateAll();
                    break;

                case PurchUpdate::Recorded:
                    inventTransIdSum = this.inventTransIdSum(_purchLine);
                    qtyUpdate = inventTransIdSum.pdsCWRegistered();
                    if (qtyUpdate != 0.0)
                    {
                        tempQtyUpdate = calcQtyUpdateAll();

                        if (sign(tempQtyUpdate) != sign(qtyUpdate)) // never return a value of the opposite sign
                        {
                            qtyUpdate = 0.0;
                        }
                        else
                        {
                            if (abs(tempQtyUpdate) < abs(qtyUpdate)) // take the smaller value
                            {
                                qtyUpdate = tempQtyUpdate;
                            }
                        }
                    }
                    break;

                case PurchUpdate::PackingSlip:
                    inventTransIdSum = this.inventTransIdSum(_purchLine);
                    qtyUpdate = inventTransIdSum.pdsCWPhysical();
                    tempQtyUpdate = qtyUpdate;
                    qtyUpdate -= this.pdsCWCalcPendingMatchedQtyInvent(_purchLine,false);

                    if (qtyUpdate != 0.0 && (sign(tempQtyUpdate) != sign(qtyUpdate))) // never return a value of the opposite sign
                    {
                        qtyUpdate = 0.0;
                    }
                    break;
                    
                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventCWDelegate(_purchLine, _specQty, calcQtyUpdateAll(), result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            if (!inventTransIdSum)
            {
                inventTransIdSum = this.inventTransIdSum(_purchLine);
            }
            numOfRemainOri = _purchLine.PdsCWRemainInventPhysical + inventTransIdSum.pdsCWPhysical();

            remainOk = false;

            if (qtyUpdate * _purchLine.PdsCWQty < 0 && _purchLine.PurchaseType == PurchaseType::DEL_Subscription)
            {
                remainOk = true;
            }
            else
            {
                if (qtyUpdate * _purchLine.PdsCWQty < 0 && _creditRemaining == false && qtyUpdate * numOfRemainOri <= 0)
                {
                    remainOk = true;
                }
            }

            if (remainOk)
            {
                qtyRemainNew = _purchLine.PdsCWRemainInventPhysical;
            }
            else
            {
                if (qtyUpdate > 0)
                {
                    if (qtyUpdate * _purchLine.PdsCWQty < 0 && _purchLine.PdsCWRemainInventFinancial < 0)
                    {
                        qtyRemainNew = max(qtyUpdate,0);
                    }
                    else
                    {
                        qtyRemainNew = max(qtyUpdate - inventTransIdSum.pdsCWPhysical(),0);
                    }
                }
                else
                {
                    if (qtyUpdate < 0)
                    {
                        if (qtyUpdate * _purchLine.PdsCWQty < 0 && _purchLine.PdsCWRemainInventFinancial > 0)
                        {
                            qtyRemainNew = min(qtyUpdate,0);
                        }
                        else
                        {
                            qtyRemainNew = min(qtyUpdate - inventTransIdSum.pdsCWPhysical(),0);
                        }
                    }
                    else
                    {
                        qtyRemainNew = 0;
                    }
                }

                qtyRemainNew = numOfRemainOri - inventTransIdSum.pdsCWPhysical() - qtyRemainNew;

                if (qtyRemainNew * _purchLine.PdsCWQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>