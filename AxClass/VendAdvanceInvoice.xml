<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAdvanceInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendAdvanceInvoice</c> class is the base class used to create journal on application of paid advances against invoices
/// or reversal of advance application against invoices.
/// </summary>
/// <remarks>
/// The <c>VendAdvanceInvoice</c> class has two child classes, one for application and another for reversal.
/// </remarks>
abstract class VendAdvanceInvoice
{
    PurchAdvanceApplicationJournalCreate formLetterJournalCreate;
    Common callerTable;
    VendInvoiceJour callerVendInvoiceJour;
    VendTable callerVendTable;
    VendInvoiceInfoTable callerVendInvoiceInfoTable;
    VendInvoiceInfoTable invoiceVendInvoiceInfoTable;
    VendAdvanceApplicationTrans vendAdvanceApplicationTrans;
    AccountNum invoiceAccount;
    boolean isAdvanceApplication;
    boolean isInvoicePosted;
    VendTrans vendTransToReverse;

    private guid sessionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAdvApplicationOrReversalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears advance application or reversal transactions from the <c>VendAdvanceApplicationTrans</c>
    /// table for transactions that are posted.
    /// </summary>
    protected void clearAdvApplicationOrReversalTrans()
    {
        VendInvoiceJour localVendInvoiceJour;

        delete_from vendAdvanceApplicationTrans
            exists join localVendInvoiceJour
                where localVendInvoiceJour.InvoiceAccount == invoiceAccount
                    && localVendInvoiceJour.InvoiceType == PurchInvoiceType::Standard
                    && vendAdvanceApplicationTrans.PostedInvoiceRecId == localVendInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    protected void createJournal(VendAdvanceApplicationTrans _vendAdvanceApplicationTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    abstract CurrencyCode currencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAdvancedApplicationTransQueryParam</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>VendAdvanceApplicationTransQueryParameters</c> class with
    /// values defaulted.
    /// </summary>
    /// <returns>An instance of <c>VendAdvanceApplicationTransQueryParameters</c> class.</returns>
    [Hookable(false)]
    protected VendAdvanceApplicationTransQueryParameters getDefaultAdvancedApplicationTransQueryParam()
    {
        return VendAdvanceApplicationTransQueryParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAdvanceApplicationTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes advance application transaction records that are unmarked from the
    /// <c>VendAdvanceApplication</c> and <c>VendApplicationReversal</c> forms.
    /// </summary>
    /// <param name="_standardInvoiceId">
    /// The record ID of a invoice to which the advance is to be applied.
    /// </param>
    /// <param name="_advanceInvoiceId">
    /// The record ID of the advance to be applied.
    /// </param>
    public void deleteAdvanceApplicationTrans(RecId _standardInvoiceId, RecId _advanceInvoiceId)
    {
        VendAdvanceApplicationTransQueryParameters queryParams = this.getDefaultAdvancedApplicationTransQueryParam();
        queryParams.advancedInvoiceRecId = _advanceInvoiceId;
        queryParams.standardInvoiceRecId = _standardInvoiceId;

        VendAdvanceApplicationTrans::deleteApplicationTransForPostedOrReversal(queryParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceApplicationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets advance application amount value against related advance application transaction record from
    /// the <c>VendAdvanceApplicationTrans</c> table.
    /// </summary>
    /// <param name="_standardInvoiceId">
    /// The record ID of the invoice on which the advance is to be applied.
    /// </param>
    /// <param name="_appliedAdvanceInvoiceId">
    /// The record ID of the marked advance to be applied against an invoice.
    /// </param>
    /// <returns>
    /// The advance application amount to a specified record.
    /// </returns>
    public AmountCur getAdvanceApplicationAmount(RecId _standardInvoiceId, RecId _appliedAdvanceInvoiceId)
    {
        AmountCur applicationAmount;

        VendAdvanceApplicationTransQueryParameters queryParams = this.getDefaultAdvancedApplicationTransQueryParam();
        queryParams.advancedInvoiceRecId = _appliedAdvanceInvoiceId;
        queryParams.standardInvoiceRecId = _standardInvoiceId;
        
        QueryRun qr = new QueryRun(VendAdvanceApplicationTransQueryBuilder::newFromVendAdvanceParams(queryParams).buildQuery());
        qr.next();

        VendAdvanceApplicationTrans localVendAdvanceApplicationTrans = VendAdvanceApplicationTrans::findInvoiceIdByPostedOrReversal(queryParams);

        if (localVendAdvanceApplicationTrans)
        {
            applicationAmount = localVendAdvanceApplicationTrans.AppliedAmount;
        }

        return applicationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceApplicationRemainingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates advance application remaining amount against an advance.
    /// </summary>
    /// <param name="_advanceId">
    /// The record ID of the advance.
    /// </param>
    /// <param name="_totalAdvanceAmountPaid">
    /// The total Line amount of paid advances.
    /// </param>
    /// <returns>
    /// The advance application remaining amount.
    /// </returns>
    /// <remarks>
    /// This method calculates net advance application remaining amount by adding and subtracting line
    /// amounts of previously applied advance application and application reversal lines respectively.
    /// </remarks>
    protected AmountCur getAdvanceApplicationRemainingAmount(RefRecId _advanceId, AmountCur _totalAdvanceAmountPaid)
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateInOpenPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns date in an open period for the purch module.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date to validate.
    /// </param>
    /// <returns>
    /// Returns the trans date if the trans date is in an open period, otherwise returns the first date from an open period.
    /// </returns>
    protected date getDateInOpenPeriod(date _transDate)
    {
        date newTransDate = _transDate;

        if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(CompanyInfoHelper::fiscalCalendarRecId(), _transDate, SysModule::Purch, false))
        {
            newTransDate = LedgerFiscalCalendar::findFirstOpenStartDateModule(CompanyInfoHelper::fiscalCalendarRecId(), _transDate, SysModule::Purch);
        }

        return newTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the marked status of advance application transaction.
    /// </summary>
    /// <param name="_standardInvoiceId">
    /// The record ID of the invoice.
    /// </param>
    /// <param name="_appliedAdvanceInvoiceId">
    /// The record ID applied advance.
    /// </param>
    /// <returns>
    /// true if advance application transaction line occurs in <c>VendAdvanceApplicationTrans</c> table;
    /// otherwise false.
    /// </returns>
    public NoYes getTransMarked(RecId _standardInvoiceId, RecId _appliedAdvanceInvoiceId)
    {
        VendAdvanceApplicationTransQueryParameters queryParam = this.getDefaultAdvancedApplicationTransQueryParam();
        queryParam.advancedInvoiceRecId = _appliedAdvanceInvoiceId;
        queryParam.standardInvoiceRecId = _standardInvoiceId;

        return VendAdvanceApplicationTrans::existForPostedOrReversal(queryParam);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendSettlement</Name>
				<Source><![CDATA[
    public VendSettlement getVendSettlement(TmpVendStandardInvoice _tmpVendStandardInvoice, TmpVendAdvanceInvoice _tmpVendAdvanceInvoice)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTrans</Name>
				<Source><![CDATA[
    public VendTrans getVendTrans(TmpVendStandardInvoice _tmpVendStandardInvoice, TmpVendAdvanceInvoice _tmpVendAdvanceInvoice)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        this.initValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values of the class.
    /// </summary>
    protected void initValues()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdvanceApplicationTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts advance application transaction in the <c>VendAdvanceApplicationTrans</c> table.
    /// </summary>
    /// <param name="_standardInvoiceId">
    /// The record ID of the invoice on which advance is to be applied.
    /// </param>
    /// <param name="_advanceInvoiceId">
    /// The record ID of the advance to which it is to be applied.
    /// </param>
    /// <param name="_settlementPostingDate">
    /// The settlement posting date of prepayment application; optional.
    /// </param>
    public void insertAdvanceApplicationTrans(RecId _standardInvoiceId, RecId _advanceInvoiceId, TransDate _settlementPostingDate = dateNull())
    {
        vendAdvanceApplicationTrans.InvoiceId = _standardInvoiceId;
        vendAdvanceApplicationTrans.AdvanceInvoiceId = _advanceInvoiceId;
        vendAdvanceApplicationTrans.SettlementPostingDate = _settlementPostingDate;
        vendAdvanceApplicationTrans.SessionId = sessionId;
        vendAdvanceApplicationTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdvanceApplicationTransForPostedOrReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendAdvanceApplicationTrans</c> buffer.
    /// </summary>
    /// <param name="_standardInvoiceId">The record ID of the invoice on which advance is to be applied.</param>
    /// <param name="_advanceInvoiceId">The record ID of the advance to which it is to be applied.</param>
    /// <param name = "_isPosted">Flag determining if the associated standard invoice is posted.</param>
    /// <param name = "_isReversal">Flag determining if the advance application is being reversed.</param>
    [Hookable(false)]
    protected void initAdvanceApplicationTransForPostedOrReversal(RecId _standardInvoiceId, RecId _advanceInvoiceId, boolean _isPosted, boolean _isReversal)
    {
        vendAdvanceApplicationTrans.PostedInvoiceRecId = (_isPosted ? _standardInvoiceId : 0);
        vendAdvanceApplicationTrans.UnpostedInvoiceRecId = (!_isPosted ? _standardInvoiceId : 0);
        vendAdvanceApplicationTrans.AdvancedInvoiceHeaderRecId = (!_isReversal ? _advanceInvoiceId : 0);
        vendAdvanceApplicationTrans.AdvancedInvoiceLineRecId = (_isReversal ? _advanceInvoiceId : 0);
        vendAdvanceApplicationTrans.AppliedAmount = (_isPosted ? this.getAdvancedApplicationAppliedAmount(_standardInvoiceId) : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvancedApplicationAppliedAmount</Name>
				<Source><![CDATA[
    private AmountCur getAdvancedApplicationAppliedAmount(RecId _standardInvoiceId)
    {
        AmountCur appliedAdvanceAmount;

        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTransApplication;
        VendInvoiceTrans vendInvoiceTransReversal;
        Vendtrans vendTransApplication;
        Vendtrans vendTransReversal;

        while select vendInvoiceJour
                where vendInvoiceJour.RecId == _standardInvoiceId
                join InternalInvoiceId from vendInvoiceTransApplication
                    where vendInvoiceTransApplication.LineType == PurchInvoiceLineType::AdvanceApplication
                        && vendInvoiceTransApplication.PurchId == vendInvoiceJour.PurchId
                        && vendInvoiceTransApplication.InvoiceId == vendInvoiceJour.InvoiceId
                        && vendInvoiceTransApplication.InvoiceDate == vendInvoiceJour.InvoiceDate
                join SettleAmountCur from vendTransApplication
                    where vendTransApplication.Voucher == vendInvoiceTransApplication.InternalInvoiceId
                        && vendTransApplication.AccountNum == vendInvoiceJour.InvoiceAccount
                        && vendTransApplication.TransDate == vendInvoiceTransApplication.InvoiceDate
        {
            // Calculates total line amount of reverse application lines for each advance application amount
            select sum(SettleAmountCur) from vendTransReversal
                where vendTransReversal.AccountNum == vendInvoiceJour.InvoiceAccount
                    && vendTransReversal.LastSettleVoucher == vendInvoiceTransApplication.InternalInvoiceId
                    && vendTransReversal.Voucher != vendInvoiceJour.LedgerVoucher
                exists join vendInvoiceTransReversal
                    where vendInvoiceTransReversal.InternalInvoiceId == vendTransReversal.Voucher
                        && vendInvoiceTransReversal.LineType == PurchInvoiceLineType::ReverseAdvanceApplication
                        && vendInvoiceTransReversal.InvoiceDate == vendTransReversal.TransDate;

            appliedAdvanceAmount += vendTransApplication.SettleAmountCur + vendTransReversal.SettleAmountCur;
        }

        return appliedAdvanceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerTable</Name>
				<Source><![CDATA[
    public Common parmCallerTable(Common _callerTable = callerTable)
    {
        callerTable = _callerTable;

        return callerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
    public AccountNum parmInvoiceAccount(AccountNum _invoiceAccount = invoiceAccount)
    {
        invoiceAccount = _invoiceAccount;

        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAdvanceApplication</Name>
				<Source><![CDATA[
    public boolean parmIsAdvanceApplication(boolean _isAdvanceApplication = isAdvanceApplication)
    {
        isAdvanceApplication = _isAdvanceApplication;

        return isAdvanceApplication;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInvoicePosted</Name>
				<Source><![CDATA[
    public boolean parmIsInvoicePosted(boolean _isInvoicePosted = isInvoicePosted)
    {
        isInvoicePosted = _isInvoicePosted;

        return isInvoicePosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecTransManager</Name>
				<Source><![CDATA[
    public SpecTransManager parmSpecTransManager(SpecTransManager _specTransManager = null)
    {
        return _specTransManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    public VendInvoiceInfoTable parmVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable = invoiceVendInvoiceInfoTable)
    {
        invoiceVendInvoiceInfoTable = _vendInvoiceInfoTable;

        return invoiceVendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceJour</Name>
				<Source><![CDATA[
    public VendInvoiceJour parmVendInvoiceJour(VendInvoiceJour _vendInvoiceJour = callerVendInvoiceJour)
    {
        callerVendInvoiceJour = _vendInvoiceJour;

        return callerVendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendTrans</Name>
				<Source><![CDATA[
    public VendTrans parmVendTrans(VendTrans _vendTransToReverse = vendTransToReverse)
    {
        vendTransToReverse = _vendTransToReverse;

        return vendTransToReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAdvances</Name>
				<Source><![CDATA[
    public TmpVendAdvanceInvoice populateAdvances(TmpVendStandardInvoice _tmpVendStandardInvoice)
    {
        PurchPrepayTable::updateAmounts(_tmpVendStandardInvoice.PurchId, false);

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAppliedAdvances</Name>
				<Source><![CDATA[
    public TmpVendAdvanceInvoice populateAppliedAdvances(TmpVendStandardInvoice _tmpVendStandardInvoice)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoices</Name>
				<Source><![CDATA[
    public TmpVendStandardInvoice populateInvoices()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    public FormletterJournalPost postJournal()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAdvances</Name>
				<Source><![CDATA[
    public void processAdvances()
    {
        this.clearAdvApplicationOrReversalTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPostedAdvanceLines</Name>
				<Source><![CDATA[
    protected void processPostedAdvanceLines()
    {
        //traverses all the records against which advance application lines are to be created
        VendInvoiceJour vendInvoiceJour;
        while select vendAdvanceApplicationTrans
            join vendInvoiceJour
                where vendAdvanceApplicationTrans.PostedInvoiceRecId == vendInvoiceJour.RecId
                    && vendInvoiceJour.InvoiceAccount == invoiceAccount
        {
            this.processPostedAdvanceLine(vendAdvanceApplicationTrans, vendInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPostedAdvanceLine</Name>
				<Source><![CDATA[
    private void processPostedAdvanceLine(VendAdvanceApplicationTrans _applicationTrans, VendInvoiceJour _vendInvoiceJour)
    {
        this.parmVendInvoiceInfoTable(VendInvoiceInfoTable::findSourceDocumentHeader(_vendInvoiceJour.SourceDocumentHeader, true));
        this.parmVendInvoiceInfoTable().updateProcessingAdvanced(NoYes::Yes);

        this.createJournal(_applicationTrans);
        this.postJournal();

        this.parmVendInvoiceInfoTable().updateProcessingAdvanced(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdvanceApplicationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the advance application amount against the respective <c>VendAdvanceApplicationTrans</c>
    /// record.
    /// </summary>
    /// <param name="_standardInvoice">
    /// The record ID of the invoice on which the advance is to be applied.
    /// </param>
    /// <param name="_appliedAdvanceInvoice">
    /// The record ID of the advance to be applied.
    /// </param>
    /// <param name="_appliedAmount">
    /// The applied advance amount to be updated.
    /// </param>
    public void updateAdvanceApplicationAmount(RecId _standardInvoice, RecId _appliedAdvanceInvoice, AmountCur _appliedAmount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>VendInvoiceInfoLine</c> and <c>VendAdvanceApplicationTrans</c> tables accordingly.
    /// </summary>
    /// <param name="_standardInvoiceId">
    /// The record ID of the invoice on which advance is to be applied.
    /// </param>
    /// <param name="_appliedAdvanceInvoiceId">
    /// The record ID of the advance to be applied.
    /// </param>
    /// <param name="_updateTransMarked">
    /// The marked status of the application transaction.
    /// </param>
    /// <param name="_settlementPostingDate">
    /// The settlement posting date of prepayment application.
    /// </param>
    /// <remarks>
    /// This method updates the <c>VendInvoiceInfoLine</c> and <c>VendAdvanceApplicationTrans</c> tables,
    /// if the transaction is marked on the <c>VendAdvanceApplication</c> and
    /// <c>VendApplicationReversal</c> forms; the records are inserted; otherwise deleted.
    /// </remarks>
    public void updateTransMarked(RecId _standardInvoiceId, RecId _appliedAdvanceInvoiceId, NoYes _updateTransMarked, TransDate _settlementPostingDate = dateNull())
    {
        if (_updateTransMarked == NoYes::No)
        {
            ttsbegin;
            this.deleteAdvanceApplicationTrans(_standardInvoiceId, _appliedAdvanceInvoiceId);
            this.updateUnposted(_standardInvoiceId, _appliedAdvanceInvoiceId, false);
            ttscommit;
        }
        else
        {
            if (_standardInvoiceId && _appliedAdvanceInvoiceId)
            {
                ttsbegin;
                this.insertAdvanceApplicationTrans(_standardInvoiceId, _appliedAdvanceInvoiceId, _settlementPostingDate);
                this.updateUnposted(_standardInvoiceId, _appliedAdvanceInvoiceId, true);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnposted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>VendInvoiceInfoLine</c> table for advance application and reversal lines to be
    /// posted.
    /// </summary>
    /// <param name="_invoiceId">
    /// The record ID of the invoice on which advance is to be applied.
    /// </param>
    /// <param name="_appliedAdvanceInvoiceId">
    /// The record ID of the advance to be applied.
    /// </param>
    /// <param name="_set">
    /// A Boolean value that indicates whether the transaction is marked.
    /// </param>
    abstract protected void updateUnposted(RecId _invoiceId, RecId _appliedAdvanceInvoiceId, boolean _set)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static VendAdvanceInvoice construct(boolean _isAdvanceApplication)
    {
        VendAdvanceInvoice instance;

        if (_isAdvanceApplication)
        {
            instance = new VendAdvanceInvoice_Application();
        }
        else
        {
            instance = new VendAdvanceInvoice_ReverseApplication();
        }

        instance.sessionId = newGuid();

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeactivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the system vendor advance invoice functionality should be deactivated.
    /// </summary>
    /// <returns>
    /// true if the system vendor advance invoice should be deactivated; otherwise, false.
    /// </returns>
    public static boolean isDeactivated()
    {
        #ISOCountryRegionCodes

        boolean isDeactivated;

        if (isConfigurationkeyEnabled(configurationKeyNum(CustVendJournalizeSettlementTrans_W))
            && SysCountryRegionCode::isLegalEntityInCountryRegion(
                 [#isoCZ, #isoHU, #isoPL, #isoEE, #isoLV, #isoLT, #isoRU])
            && !VendParameters::find().UseVendAdvanceInvoice_RU)
        {
            isDeactivated = true;
        }
        else
        {
            isDeactivated = false;
        }

        return isDeactivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRecordsMarkedInSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all records that were marked under the current session.
    /// </summary>
    internal final void clearRecordsMarkedInSession()
    {
        RecId standardInvoiceRecId;
        RecId advancedInvoiceRecId;

        VendAdvanceApplicationTransQueryParameters queryParameters = this.getDefaultAdvancedApplicationTransQueryParam();

        while select vendAdvanceApplicationTrans
            where vendAdvanceApplicationTrans.SessionId == sessionId
        {
            standardInvoiceRecId = (queryParameters.isPosted ? 
                vendAdvanceApplicationTrans.PostedInvoiceRecId :
                vendAdvanceApplicationTrans.UnpostedInvoiceRecId);

            advancedInvoiceRecId = (queryParameters.isReversal ?
                vendAdvanceApplicationTrans.AdvancedInvoiceLineRecId :
                vendAdvanceApplicationTrans.AdvancedInvoiceHeaderRecId);

            this.updateTransMarked(standardInvoiceRecId, advancedInvoiceRecId, NoYes::No);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>