<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectContractsListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProjectContractsListPageInteraction extends SysListPageInteractionBase
{
    ProjInvoiceTable        projInvoiceTable;
    boolean                 isContractExternallyManaged;

    #DEFINE.ProjectContractsListPage (ProjProjectContractsListPage)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableButton</Name>
				<Source><![CDATA[
    private void enableButton(str _controlName, boolean _enabled = true)
    {
        this.listPage().actionPaneControlEnabled(_controlName, _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        ProjGrantView           projGrantViewCaller;
        QueryBuildDataSource    qbds;
        DictRelation            projectContractRelation;
        int                     ctrlValueAllSeletion;

        if (this.listPage().listPageArgs() &&
            this.listPage().listPageArgs().externalRecord())
        {
            if (this.listPage().listPageArgs().externalRecord().TableId == tableNum(ProjGrantView))
            {
                projGrantViewCaller = this.listPage().listPageArgs().externalRecord() as ProjGrantView;

                if (projGrantViewCaller.ProjInvoiceProjId == "")
                {
                    _query.dataSourceTable(tableNum(ProjInvoiceTable)).clearDynalinks();
                }
            }
            else if (this.listPage().listPageArgs().externalRecord().TableId == tableNum(ProjFundingSource))//ProjGrantFundingPart formpart
            {
                _query.dataSourceTable(tableNum(ProjInvoiceTable)).clearDynalinks();
            }
        }

        ProjLegalEntityLookupListPageHelper leLookupHelper = new ProjLegalEntityLookupListPageHelper(formStr(ProjProjectContractsListPage));
        _query = leLookupHelper.setCrossCompanyQuery(_query);

        // Add to the query an exist join to ProjTable, with a value of ProjTable.Status != Completed.
        // This data source is enabled if user only wants to see active contracts, otherwise disabled.
        qbds = _query.dataSourceTable(tableNum(ProjInvoiceTable)).addDataSource(tableNum(ProjTable), tableStr(ProjTable));
        projectContractRelation = new SysDictRelation(tableNum(ProjInvoiceTable));
        projectContractRelation.loadTableRelation(tableNum(ProjTable));
        qbds.addRelation(projectContractRelation);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addRange(fieldNum(ProjTable, Status)).value(SysQuery::valueNot(ProjStatus::Completed));

        super(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonBasedOnBillingRule</Name>
				<Source><![CDATA[
    private void setButtonBasedOnBillingRule(boolean _enableInvoiceProposal)
    {
        str psaProjProposalSelection        = formControlStr(#ProjectContractsListPage, PSAProjProposalSelection);
        str psaProjProposalSelectionCLIN    = formControlStr(#ProjectContractsListPage, PSAProjProposalSelectionCLIN);
        str psaContractStatus               = formControlStr(#ProjectContractsListPage, PSAContractStatus);

        boolean lockFieldsForCreateInvoiceProposals = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::CreateInvoiceProposals) && isContractExternallyManaged;

		if (PSAContractLineItems::hasBillingRules(projInvoiceTable.ProjInvoiceProjId))
		{
			this.showButton(psaProjProposalSelection, false);
			this.showButton(psaProjProposalSelectionCLIN, true);
			this.enableButton(psaContractStatus, true);
		}
		else
		{
			this.showButton(psaProjProposalSelection, true);
			this.showButton(psaProjProposalSelectionCLIN, false);
			this.enableButton(psaContractStatus, false);
		}

        this.enableButton(psaProjProposalSelection, _enableInvoiceProposal && !lockFieldsForCreateInvoiceProposals);
        this.enableButton(psaProjProposalSelectionCLIN, _enableInvoiceProposal && !lockFieldsForCreateInvoiceProposals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonBasedOnCDSConfiguration</Name>
				<Source><![CDATA[
    private void setButtonBasedOnCDSConfiguration(boolean _enableInvoiceProposal)
    {
        boolean lockFieldsForEditContracts = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::EditContracts) && isContractExternallyManaged;
        boolean lockFieldsForForecasts = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Forecasts) && isContractExternallyManaged;
        boolean lockFieldsForAdjustments = ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Adjustments) && isContractExternallyManaged;
        
        this.enableButton(formControlStr(#ProjectContractsListPage, EditInGridButton), !lockFieldsForEditContracts);
        this.enableButton(formControlStr(#ProjectContractsListPage, CreateAdjustment), !lockFieldsForAdjustments);

        this.enableButton(formControlStr(#ProjectContractsListPage, HourForecast), !lockFieldsForForecasts);
        this.enableButton(formControlStr(#ProjectContractsListPage, ExpenseForecast), !lockFieldsForForecasts);
        this.enableButton(formControlStr(#ProjectContractsListPage, ItemForecast), !lockFieldsForForecasts);
        this.enableButton(formControlStr(#ProjectContractsListPage, Feeforecast), !lockFieldsForForecasts);
        this.enableButton(formControlStr(#ProjectContractsListPage, OnAccountForecast), !lockFieldsForForecasts);
        this.enableButton(formControlStr(#ProjectContractsListPage, CopyBudget), !lockFieldsForForecasts);
        this.enableButton(formControlStr(#ProjectContractsListPage, DeleteBudget), !lockFieldsForForecasts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property on the action pane buttons.
    /// </summary>
    /// <remarks>
    /// This method should be overridden when you must disable or enable a button in the action pane. The
    /// method is called every time that the selection of the record in the list page changes.
    /// </remarks>
    protected void setButtonEnabled()
    {
        // pre-fetch this data
        projInvoiceTable = this.listPage().activeRecord(identifierStr(ProjInvoiceTable));
        boolean enableInvoiceProposal = ProjInvoiceTable::canCreateInvoiceProposal(projInvoiceTable.ProjInvoiceProjId);

        isContractExternallyManaged = Project::isContractExternallyManaged(ProjInvoiceTable.ProjInvoiceProjId);

        this.setButtonBasedOnBillingRule(enableInvoiceProposal);
        this.setButtonBasedOnCDSConfiguration(enableInvoiceProposal);

        if (!ProjInvoiceTable::hasExternalFundingSources(projInvoiceTable.ProjInvoiceProjId))
        {
            this.enableButton(formControlStr(#ProjectContractsListPage, CtrlSalesOrders), false);
        }
        else
        {
            this.enableButton(formControlStr(#ProjectContractsListPage, CtrlSalesOrders), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showButton</Name>
				<Source><![CDATA[
    private void showButton(str _controlName, boolean _visible = true)
    {
        this.listPage().actionPaneControlVisible(_controlName, _visible);

        this.enableButton(_controlName, _visible);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>