<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostAmountHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostAmountHandler</c> class is a container for the different amount types.
/// </summary>
/// <remarks>
///    It is possible to add to and get the amounts.
/// </remarks>
class InventCostAmountHandler
{
    Map amounts;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAllAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a given amount handler (all the included amounts) to this amount handler.
    /// </summary>
    /// <param name="_amounts">
    ///    The amount handler with all the amounts to add to this amount handler.
    /// </param>
    public void addAllAmounts(InventCostAmountHandler _amounts)
    {
        if (_amounts)
        {
            MapEnumerator mapEnumerator = amounts.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                this.addAmount(_amounts.getAmount(mapEnumerator.currentKey()), mapEnumerator.currentKey());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a given amount to an amount of a specified amount type.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to add to the given amount type.
    /// </param>
    /// <param name="_inventCostAmountType">
    ///    The amount type to which to add the given amount.
    /// </param>
    /// <remarks>
    ///    An unknown amount type causes an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The amount type is unknown.
    /// </exception>
    public void addAmount(
        AmountMST               _amount,
        InventCostAmountType    _inventCostAmountType
        )
    {
        if (!amounts.exists(_inventCostAmountType))
        {
            throw error(strFmt("@SYS22828", funcName()));
        }
        amounts.insert(_inventCostAmountType, amounts.lookup(_inventCostAmountType) + _amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets all amounts to zero.
    /// </summary>
    public void clear()
    {
        amounts = new Map(Types::Enum, Types::Real);
        amounts.insert(InventCostAmountType::Fixed, 0);
        amounts.insert(InventCostAmountType::Variable, 0);
        amounts.insert(InventCostAmountType::Undefined, 0);
        amounts.insert(InventCostAmountType::DirectMaterials, 0);
        amounts.insert(InventCostAmountType::DirectManufacturing, 0);
        amounts.insert(InventCostAmountType::Indirect, 0);
        amounts.insert(InventCostAmountType::OnHand, 0);
        amounts.insert(InventCostAmountType::WIP, 0);
        amounts.insert(InventCostAmountType::Deferred, 0);
        amounts.insert(InventCostAmountType::COGS, 0);
        amounts.insert(InventCostAmountType::Variance, 0);
        amounts.insert(InventCostAmountType::Cost, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a specific amount type to zero.
    /// </summary>
    /// <param name="_inventCostAmountType">
    ///    The amount type to set to zero.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The amount type is unknown.
    /// </exception>
    public void clearAmount(InventCostAmountType _inventCostAmountType)
    {
        if (!amounts.exists(_inventCostAmountType))
        {
            throw error(strFmt("@SYS22828", funcName()));
        }
        amounts.insert(_inventCostAmountType, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an amount for the given amount type.
    /// </summary>
    /// <param name="_inventCostAmountType">
    ///    The amount type of the amount that is retrieved.
    /// </param>
    /// <returns>
    ///    An amount for the given amount type.
    /// </returns>
    /// <remarks>
    ///    An unknown amount type causes an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The amount type is unknown.
    /// </exception>
    public AmountMST getAmount(InventCostAmountType _inventCostAmountType)
    {
        if (!amounts.exists(_inventCostAmountType))
        {
            throw error(strFmt("@SYS22828", funcName()));
        }
        return amounts.lookup(_inventCostAmountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        this.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return amounts.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the given container to the internal representation of amounts in a map.
    /// </summary>
    /// <param name="_con">
    ///    The container to unpack.
    /// </param>
    public void unpack(container _con)
    {
        if (_con)
        {
            amounts = Map::create(_con);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostAmountHandler construct()
    {
        return new InventCostAmountHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostAmountHandler</c> class with the given container.
    /// </summary>
    /// <param name="con">
    ///    The container that contains the amounts.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventCostAmountHandler</c> class.
    /// </returns>
    public static InventCostAmountHandler create(container con)
    {
        InventCostAmountHandler retVal = InventCostAmountHandler::construct();
        retVal.unpack(con);
        return retVal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
