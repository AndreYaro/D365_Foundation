<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipmentTableAssignOriginInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipmentTableAssignOriginInfo</c> class assigns origin information to a <c>WHSShipmentTable</c> record.
/// </summary>
internal final class WHSShipmentTableAssignOriginInfo
{
    private WHSShipmentTable shipmentTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromShipmentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSShipmentTableAssignOriginInfo</c> class from a <c>WHSShipmentTable</c> record.
    /// </summary>
    /// <param name = "_shipmentTable">The shipment to populate.</param>
    /// <returns>A new instance of the <c>WHSShipmentTableAssignOriginInfo</c> class.</returns>
    internal static WHSShipmentTableAssignOriginInfo newFromShipmentTable(WHSShipmentTable _shipmentTable)
    {
        var instance = new WHSShipmentTableAssignOriginInfo();
        instance.shipmentTable = _shipmentTable;
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assign</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assign the origin information on the shipment header.
    /// </summary>
    /// <param name="_loadLineAddRemove">
    ///     The <c>AddRemove</c> enum value describing whether a load line has just been added or removed.
    /// </param>
    /// <returns>
    ///    true if <c>WHSLoadTable</c> buffer was modified; otherwise, false.
    /// </returns>
    internal boolean assign(AddRemove _loadLineAddRemove)
    {
        boolean isModified;

        if (_loadLineAddRemove == AddRemove::Remove)
        {
            WHSLoadLine     loadLine;
            WHSLoadLine     loadLineNotExists;

            // All load line are associated with same order
            select firstOnly loadLine
            where loadLine.ShipmentId == shipmentTable.ShipmentId
            notexists join loadLineNotExists
                where loadLineNotExists.ShipmentId == shipmentTable.ShipmentId
                && loadLine.OrderNum != loadLineNotExists.OrderNum;
        
            if (loadLine)
            {
                switch (loadLine.InventTransType)
                {
                    case InventTransType::TransferOrderShip:
                        InventTransferTable transferTable = InventTransferTable::find(loadLine.OrderNum);
                        isModified = this.assignFromInventTransferTable(transferTable);
                        break;

                    case InventTransType::Sales:
                        SalesTable salesTable = SalesTable::find(loadLine.OrderNum);
                        isModified = this.assignFromSalesTable(salesTable);
                        break;
                }                  
            }
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromSalesTable</Name>
				<Source><![CDATA[
    private boolean assignFromSalesTable(SalesTable _salesTable)
    {
        shipmentTable.OrderNum = _salesTable.SalesId;
        shipmentTable.AccountNum = _salesTable.CustAccount;
        shipmentTable.CustomerRef = _salesTable.CustomerRef;
        shipmentTable.CustomerReq = _salesTable.PurchOrderFormNum;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromInventTransferTable</Name>
				<Source><![CDATA[
    private boolean assignFromInventTransferTable(InventTransferTable _transferTable)
    {
        shipmentTable.OrderNum = _transferTable.TransferId;
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>