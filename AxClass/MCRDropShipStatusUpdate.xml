<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRDropShipStatusUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRDropShipStatusUpdate</c> class updates the <c>MCRDropShipStatus</c> value on
/// sales orders and purchase orders.
/// </summary>
abstract class MCRDropShipStatusUpdate
{
    MCRDropShipStatus   expectedDropShipStatus;
    MCRDropShipStatus   salesLineDropShipStatus;

    private MCRDropShipInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateExpectedDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the class variable <c>expectedDropShipStatus</c> that is set in the extended classes.
    /// </summary>
    /// <returns>
    /// The class variable <c>expectedDropShipStatus</c>.
    /// </returns>
    protected MCRDropShipStatus calculateExpectedDropShipStatus()
    {
        return expectedDropShipStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpectedDropShipStatus</Name>
				<Source><![CDATA[
    private MCRDropShipStatus getExpectedDropShipStatus()
    {
        return expectedDropShipStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineMCRDropShipmentIsYes</Name>
				<Source><![CDATA[
    internal SysDaQueryExpression purchLineMCRDropShipmentIsYes(PurchLine _purchLine)
    {
        return new SysDaEqualsExpression(new SysDaFieldExpression(_purchLine, fieldStr(PurchLine, MCRDropShipment)),
                                         new SysDaValueExpression(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineSetMCRDropShipStatus</Name>
				<Source><![CDATA[
    internal SysDaSettingsList purchLineSetMCRDropShipStatus(MCRDropShipStatus _dropShipStatus)
    {
        return new SysDaSettingsList().add(fieldStr(PurchLine, MCRDropShipStatus), new SysDaValueExpression(_dropShipStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineMCRDropShipStatusIsNot</Name>
				<Source><![CDATA[
    internal SysDaQueryExpression purchLineMCRDropShipStatusIsNot(PurchLine _purchLine, MCRDropShipStatus _dropShipStatus)
    {
        return new SysDaNotEqualsExpression(new SysDaFieldExpression(_purchLine, fieldStr(PurchLine, MCRDropShipStatus)),
                                            new SysDaValueExpression(_dropShipStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLineFieldEquals</Name>
				<Source><![CDATA[
    internal SysDaQueryExpression purchLineFieldEquals(PurchLine _purchLine, FieldName _fieldName, System.Object _value)
    {
        return new SysDaEqualsExpression(new SysDaFieldExpression(_purchLine, _fieldName),
                                         new SysDaValueExpression(_value));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchDropShipStatusOnRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates table <c>MCRSalesLineDropShipment</c> field <c>DropShipStatus</c> based on class variable <c>expectedDropShipStatus</c> in the extended classes.
    /// </summary>
    protected void updatePurchDropShipStatusOnRecord()
    {
        if (expectedDropShipStatus == MCRDropShipStatus::ToBeDropShipped)
        {
            expectedDropShipStatus = MCRDropShipStatus::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesDropShipStatusOnRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates table <c>SalesLine</c> field <c>DropShipStatus</c> based on class variable <c>expectedDropShipStatus</c> in the extended classes.
    /// </summary>
    protected void updateSalesDropShipStatusOnRecord()
    {
        if (expectedDropShipStatus == MCRDropShipStatus::None)
        {
            salesLineDropShipStatus = MCRDropShipStatus::ToBeDropShipped;
        }
        else
        {
            salesLineDropShipStatus = expectedDropShipStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>MCRDropShipStatusUpdate</c> class.
    /// </summary>
    /// <param name="_common">
    /// The common record.
    /// </param>
    /// <param name="_requestedStatus">
    /// The requested status for the <c>MCRDropShipStatus</c> value.
    /// </param>
    /// <returns>
    /// The new child class dependent upon the common record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exception if the common type is invalid.
    /// </exception>
    public static MCRDropShipStatusUpdate construct(Common _common, MCRDropShipStatus _requestedStatus = MCRDropShipStatus::None)
    {
        switch (_common.TableId)
        {
            case tableNum(PurchTable) :
                return new MCRDropShipStatusUpdate_PurchTable(_common as PurchTable, _requestedStatus);

            case tableNum(PurchLine) :
                return new MCRDropShipStatusUpdate_PurchLine(_common as PurchLine, _requestedStatus);
            default:
                throw error(strfmt("@SYS19306",funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and gets the expected drop ship status based on the passed in common buffer.
    /// </summary>
    /// <param name="_common">
    /// The <c>PurchTable</c> or <c>PurchLine</c> record for which this method gets
    /// the expected drop ship status.
    /// </param>
    /// <returns>
    /// The expected drop ship status.
    /// </returns>
    static MCRDropShipStatus getDropShipStatus(Common _common)
    {
        MCRDropShipStatusUpdate mcrDropShipStatusUpdate;

        mcrDropShipStatusUpdate = MCRDropShipStatusUpdate::construct(_common);

        mcrDropShipStatusUpdate.calculateExpectedDropShipStatus();

        return mcrDropShipStatusUpdate.getExpectedDropShipStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeSalesStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the sales order drop ship status with the requested drop ship status.
    /// </summary>
    /// <param name="_common">
    /// The common record.
    /// </param>
    /// <param name="_requestedStatus">
    /// The desired drop ship status.
    /// </param>
    static void synchronizeSalesStatus(Common _common, MCRDropShipStatus _requestedStatus)
    {
        MCRDropShipStatusUpdate mcrDropShipStatusUpdate;

        mcrDropShipStatusUpdate = MCRDropShipStatusUpdate::construct(_common, _requestedStatus);

        mcrDropShipStatusUpdate.updateSalesDropShipStatusOnRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the drop ship status for the sales order and purchase order.
    /// </summary>
    /// <param name="_common">
    /// The common record.
    /// </param>
    /// <param name="_requestedStatus">
    /// The requested <c>MCRDropShipStatus</c> value.
    /// </param>
    static void updateDropShipStatus(Common _common, MCRDropShipStatus _requestedStatus = MCRDropShipStatus::None)
    {
        MCRDropShipStatusUpdate mcrDropShipStatusUpdate;
        MCRDropShipStatus newDropShipStatus;

        newDropShipStatus = _requestedStatus;

        mcrDropShipStatusUpdate = MCRDropShipStatusUpdate::construct(_common, newDropShipStatus);

        // Only run if the status has not been passed in.
        if (newDropShipStatus == MCRDropShipStatus::None)
        {
            newDropShipStatus = mcrDropShipStatusUpdate.calculateExpectedDropShipStatus();
        }

        mcrDropShipStatusUpdate.updatePurchDropShipStatusOnRecord();

        mcrDropShipStatusUpdate.updateSalesDropShipStatusOnRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal MCRDropShipInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = MCRDropShipInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>