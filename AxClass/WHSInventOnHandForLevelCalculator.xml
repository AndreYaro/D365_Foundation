<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventOnHandForLevelCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventOnHandForLevelCalculator</c> class is used to query on-hand and available
/// quantity of items for the provided level.
/// </summary>
internal class WHSInventOnHandForLevelCalculator
{
    private WHSInstrumentationLogger logger;

    private WHSIFeatureToggle optimizationToggle;

    private boolean fetchOnlyAvailFields;
    private boolean useDeltaView;

    private boolean isDimensionCriteriaHasGapsKnown;
    private boolean dimensionCriteriaHasGaps;

    private boolean isIncludeDeltaKnown;
    private boolean includeDelta;

    private boolean       inventDimParmInitialized;
    private InventDimParm inventDimParm;

    private ItemId        itemId;
    private InventDim     inventDimCriteria;    
    private boolean       mustIncludeDelta;

    private WHSReservationHierarchyLevel hierarchyLevel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>WHSInventOnHandForLevelCalculator</c>
    /// based on the provided parameters.
    /// </summary>
    /// <param name = "_itemId">The item id for querying on-hand</param>
    /// <param name = "_inventDimCriteria">The inventory dimension for querying on-hand.</param>
    /// <param name = "_hierarchyLevel">The hierarchy level for querying on-hand.</param>
    /// <param name = "_mustIncludeDelta">Boolean indicating whether to include whsInventReserveDelta records in the calculations</param>
    /// <returns></returns>
    [Hookable(false)]
    internal static WHSInventOnHandForLevelCalculator constructFromParameters(
        ItemId                          _itemId,
        InventDim                       _inventDimCriteria,
        WHSReservationHierarchyLevel    _hierarchyLevel,
        boolean                         _mustIncludeDelta)
    {
        WHSInventOnHandForLevelCalculator calculator = new WHSInventOnHandForLevelCalculator();

        calculator.itemId            = _itemId;
        calculator.hierarchyLevel    = _hierarchyLevel;
        calculator.mustIncludeDelta  = _mustIncludeDelta;

        InventDim tmpInventDimCriteria;
        tmpInventDimCriteria.data(_inventDimCriteria);
        calculator.inventDimCriteria = tmpInventDimCriteria;

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates on-hand quantities for the provided itemId, inventDimCriteria and hierarchyLevel.
    /// </summary>
    /// <returns>A WHSInventReserve buffer containing the calculated quantities.</returns>
    [Hookable(false)]
    internal WHSInventReserve calculateQuantities()
    {
        WHSInventReserve whsInventReserve;

        // auto-complete some missing field from inventDimCriteria to avoid gaps
        this.completeInventDimCriteria();

        if (this.dimensionCriteriaHasGaps())
        {
            whsInventReserve = this.calculateWhsInventReserveForLevelWithDimCriteriaGaps();
        }
        else // we have no gaps so all fields in the parm are in the dimension criteria so we can search based on unique index
        {
            InventDim tmpInventDimCriteria = this.inventDimWithInventDimId(inventDimCriteria);

            whsInventReserve = WHSInventReserve::findByInventDim(itemId, tmpInventDimCriteria);

            // clear since it was not found on the level
            if (whsInventReserve.RecId && whsInventReserve.HierarchyLevel != hierarchyLevel)
            {
                this.logger().logError(strFmt('WhsInventReserve level  %1, requested level %2. Expected them to be equal.', whsInventReserve.HierarchyLevel, hierarchyLevel));
                this.logger().logRecordInformation(whsInventReserve);

                whsInventReserve.clear();
            }
        }

        whsInventReserve.checkInvalidFieldAccess(false);
        
        if (mustIncludeDelta)
        {
            this.addWhsInventReserveDeltaQuantitiesForLevelIfNecessary(whsInventReserve);
        }

        return whsInventReserve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimWithInventDimId</Name>
				<Source><![CDATA[
    private InventDim inventDimWithInventDimId(InventDim _inventDim)
    {
        InventDim inventDim = _inventDim;

        if (!inventDim.inventDimId)
        {
            using (var activityContext = this.logger().whsOnHandCalculations().findOrCreateInventDimCriteria())
            {
                inventDim = InventDim::findOrCreate(inventDim);

                this.logger().logRecordInformation(inventDim); // this will allow us to check if we ran findOrCreate for the same inventDimId multiple times.
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeInventDimCriteria</Name>
				<Source><![CDATA[
    private void completeInventDimCriteria()
    {
        // site should exist to improve performance when we have product dimensions.
        if (inventDimCriteria.InventLocationId && !inventDimCriteria.InventSiteId)
        {
            this.logger().logInformation(strFmt('%1: inventSiteId should be added.', methodStr(WHSInventOnHandForLevelCalculator, completeInventDimCriteria)));

            using (var activityContext = this.logger().whsOnHandCalculations().retrieveInventSiteIdFromInventLocationId())
            {
                InventLocation warehouse = InventLocation::find(inventDimCriteria.InventLocationId);
                inventDimCriteria.InventSiteId = warehouse.InventSiteId;
            }

            if (WHSInventOnHandForLevelCalculatorMissingSiteIdLogToggle::instance().isEnabled())
            {
                this.logger().logError(strFmt('%1', WHSOperationInternalErrorType::MissingInventDim));
                this.logger().logCallStack();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhsInventReserveDeltaQuantitiesForLevelIfNecessary</Name>
				<Source><![CDATA[
    private void addWhsInventReserveDeltaQuantitiesForLevelIfNecessary(WHSInventReserve _whsInventReserve)
    {
        if (this.shouldIncludeDelta())
        {
            this.addWhsInventReserveDeltaQuantitiesForLevel(_whsInventReserve);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionCriteriaHasGaps</Name>
				<Source><![CDATA[
    private boolean dimensionCriteriaHasGaps()
    {
        if (isDimensionCriteriaHasGapsKnown)
        {
            return dimensionCriteriaHasGaps;
        }

        return WhsReservationHierarchyInventDimUtil::inventDimHasGapsForLevel(itemId, inventDimCriteria, hierarchyLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldIncludeDelta</Name>
				<Source><![CDATA[
    private boolean shouldIncludeDelta()
    {
        if (isIncludeDeltaKnown)
        {
            return includeDelta;
        }

        return InventUpdateOnhandGlobal::mustAddInventSumDeltaOnhand(itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWhsInventReserveForLevelWithDimCriteriaGaps</Name>
				<Source><![CDATA[
    private WHSInventReserve calculateWhsInventReserveForLevelWithDimCriteriaGaps()
    {
        if (this.parmFetchOnlyAvailFields())
        {
            return this.calculateWhsInventReserveForLevelWithDimCriteriaGapsOnlyAvailFields();
        }

        return this.calculateWhsInventReserveForLevelWithDimCriteriaGapsAllFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWhsInventReserveForLevelWithDimCriteriaGapsOnlyAvailFields</Name>
				<Source><![CDATA[
    private WHSInventReserve calculateWhsInventReserveForLevelWithDimCriteriaGapsOnlyAvailFields()
    {
        WHSInventReserve whsInventReserve;
        InventDim        inventDim;

        if (!inventDimParmInitialized)
        {
            this.initializeInventDimParmFromInventDim();
        }

        if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
        {
            select sum(AvailPhysical), sum(AvailOrdered), sum(CWAvailPhysical), sum(CWAvailOrdered)  from whsInventReserve
                where whsInventReserve.ItemId           == itemId
                    &&  whsInventReserve.HierarchyLevel == hierarchyLevel
                    && #InventDimFieldsFilter(whsInventReserve, inventDimCriteria, inventDimParm);
        }
        else
        {
            select sum(AvailPhysical), sum(AvailOrdered), sum(CWAvailPhysical), sum(CWAvailOrdered)  from whsInventReserve
                where whsInventReserve.ItemId           == itemId
                    &&  whsInventReserve.HierarchyLevel == hierarchyLevel
                #InventDimExistsJoin(whsInventReserve.InventDimId, inventDim, inventDimCriteria, inventDimParm);
        }

        return whsInventReserve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWhsInventReserveForLevelWithDimCriteriaGapsAllFields</Name>
				<Source><![CDATA[
    private WHSInventReserve calculateWhsInventReserveForLevelWithDimCriteriaGapsAllFields()
    {
        WHSInventReserve whsInventReserve;
        InventDim        inventDim;

        if (!inventDimParmInitialized)
        {
            this.initializeInventDimParmFromInventDim();
        }

        if (InventUseDimOfWHSInventReserveToggle::instance().isEnabled())
        {
            select sum(AvailOrdered), sum(AvailPhysical), sum(ReservOrdered), sum(ReservPhysical), sum(CWAvailOrdered), sum(CWAvailPhysical), sum(CWReservOrdered), sum(CWReservPhysical)
                    from whsInventReserve
                    where whsInventReserve.ItemId              == itemId
                          && whsInventReserve.HierarchyLevel   == hierarchyLevel
                          && #InventDimFieldsFilter(whsInventReserve, inventDimCriteria, inventDimParm);
        }
        else
        {
            select sum(AvailOrdered), sum(AvailPhysical), sum(ReservOrdered), sum(ReservPhysical), sum(CWAvailOrdered), sum(CWAvailPhysical), sum(CWReservOrdered), sum(CWReservPhysical)
                    from whsInventReserve
                    where whsInventReserve.ItemId              == itemId
                          && whsInventReserve.HierarchyLevel   == hierarchyLevel
                    #InventDimExistsJoin(whsInventReserve.InventDimId, inventDim, inventDimCriteria, inventDimParm);
        }

        return whsInventReserve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhsInventReserveDeltaQuantitiesForLevel</Name>
				<Source><![CDATA[
    private void addWhsInventReserveDeltaQuantitiesForLevel(WHSInventReserve _whsInventReserve)
    {
        if (this.parmUseDeltaView())
        {
            this.addWhsInventReserveDeltaQuantitiesForLevelUsingDeltaView(_whsInventReserve);
        }
        else
        {
            this.addWhsInventReserveDeltaQuantitiesForLevelUsingDeltaTable(_whsInventReserve);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhsInventReserveDeltaQuantitiesForLevelUsingDeltaView</Name>
				<Source><![CDATA[
    private void addWhsInventReserveDeltaQuantitiesForLevelUsingDeltaView(WHSInventReserve _whsInventReserve)
    {
        if (!inventDimParmInitialized)
        {
            this.initializeInventDimParmFromInventDim();
        }

        CreatedTransactionId ttsId = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();

        WHSInventReserveDeltaView deltaView;
        if (InventUseDimOfWHSInventReserveDeltaToggle::instance().isEnabled())
        {
            WHSInventReserveDeltaWithInventDimFieldsView deltaWithInventDimView;

            select sum(SumOfAvailPhysical), sum(SumOfAvailOrdered), sum(SumOfCWAvailPhysical), sum(SumOfCWAvailOrdered), count(RecId) from deltaWithInventDimView
                where deltaWithInventDimView.ItemId              == itemId
                    &&  deltaWithInventDimView.ttsId             == ttsId
                    &&  deltaWithInventDimView.HierarchyLevel    == hierarchyLevel
                    && #InventDimFieldsFilter(deltaWithInventDimView, inventDimCriteria, inventDimParm);

            deltaView.initFromWHSInventReserveDeltaWithInventDimFieldsView(deltaWithInventDimView);
        }
        else
        {
            InventDim   inventDim;

            select sum(SumOfAvailPhysical), sum(SumOfAvailOrdered), sum(SumOfCWAvailPhysical), sum(SumOfCWAvailOrdered), count(RecId) from deltaView
                where deltaView.ItemId              == itemId
                    &&  deltaView.ttsId             == ttsId
                    &&  deltaView.HierarchyLevel    == hierarchyLevel
                #InventDimExistsJoin(deltaView.InventDimId, InventDim, inventDimCriteria, inventDimParm);
        }
        
        _whsInventReserve.addInventReserveDeltaView(deltaView);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhsInventReserveDeltaQuantitiesForLevelUsingDeltaTable</Name>
				<Source><![CDATA[
    private void addWhsInventReserveDeltaQuantitiesForLevelUsingDeltaTable(WHSInventReserve _whsInventReserve)
    {
        WHSInventReserveDelta whsInventReserveDelta;
        InventDim             inventDim;

        if (!inventDimParmInitialized)
        {
            this.initializeInventDimParmFromInventDim();
        }

        CreatedTransactionId ttsId = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();

        if (InventUseDimOfWHSInventReserveDeltaToggle::instance().isEnabled())
        {
            select sum(AvailOrdered), sum(AvailPhysical), sum(ReservOrdered), sum(ReservPhysical), sum(CWAvailOrdered), sum(CWAvailPhysical), sum(CWReservOrdered), sum(CWReservPhysical)
                    from whsInventReserveDelta
                    where whsInventReserveDelta.ItemId              == itemId
                          && whsInventReserveDelta.HierarchyLevel   == hierarchyLevel
                          && whsInventReserveDelta.ttsId            == ttsId
                          && #InventDimFieldsFilter(whsInventReserveDelta, inventDimCriteria, inventDimParm);
        }
        else
        {
            select sum(AvailOrdered), sum(AvailPhysical), sum(ReservOrdered), sum(ReservPhysical), sum(CWAvailOrdered), sum(CWAvailPhysical), sum(CWReservOrdered), sum(CWReservPhysical)
                    from whsInventReserveDelta
                    where whsInventReserveDelta.ItemId              == itemId
                          && whsInventReserveDelta.HierarchyLevel   == hierarchyLevel
                          && whsInventReserveDelta.ttsId            == ttsId
                    #InventDimExistsJoin(whsInventReserveDelta.InventDimId, inventDim, inventDimCriteria, inventDimParm);
        }

        _whsInventReserve.addInventReserveDelta(whsInventReserveDelta);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFetchOnlyAvailFields</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmFetchOnlyAvailFields(boolean _fetchOnlyAvailFields = fetchOnlyAvailFields)
    {
        fetchOnlyAvailFields = _fetchOnlyAvailFields;

        return fetchOnlyAvailFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseDeltaView</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmUseDeltaView(boolean _useDeltaView = useDeltaView)
    {
        useDeltaView = _useDeltaView;

        return useDeltaView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimParm</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setInventDimParm(InventDimParm _inventDimParm)
    {
        inventDimParm = _inventDimParm;
        inventDimParmInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionCriteriaHasGaps</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setDimensionCriteriaHasGaps(boolean _dimensionCriteriaHasGaps)
    {
        isDimensionCriteriaHasGapsKnown = true;
        dimensionCriteriaHasGaps = _dimensionCriteriaHasGaps;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIncludeDelta</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setIncludeDelta(boolean _includeDelta)
    {
        isIncludeDeltaKnown = true;
        includeDelta = _includeDelta;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimParmFromInventDim</Name>
				<Source><![CDATA[
    private void initializeInventDimParmFromInventDim()
    {
        inventDimParm.initFromInventDim(inventDimCriteria);
        inventDimParmInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSInventOnHandForLevelCalculator));
        }

        return logger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>