<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanExportBaseDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanExportBaseDataContract</c> class contains the runtime parameters for forecast generation.
/// </summary>
[DataContractAttribute]
class ReqDemPlanExportBaseDataContract extends SysOperationDataContractBase implements SysOperationValidatable
{
    TransDate                           todaysDate;

    ReqDemPlanDateGranularity           dateGranularity;
    ReqDemPlanHistoricalHorizonStart    historicalStart;
    ReqDemPlanHistoricalHorizonEnd      historicalEnd;

    str                                 planningGroupQueryStr;

    str                                 connectionString;
    str                                 databaseName;
    ReqDemPlanForecastAttributeManager  attributeManager;

    #ReqDemPlan
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actualDemandEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the end date to be used as the end of the actual demand period.
    /// </summary>
    /// <returns>
    ///     A date to represent the end of the actual demand period used in the OLAP
    ///     database. By default it provides the historical end date.
    /// </returns>
    public ReqDemPlanHistoricalHorizonEnd actualDemandEndDate()
    {
        return this.parmHistoricalEnd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAllocationKeyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a filter on the allocation key ID.
    /// </summary>
    /// <param name="_key">
    ///     The allocation key ID.
    /// </param>
    public void addAllocationKeyFilter(ForecastItemAllocationId _key)
    {
        Query query = this.getFilterQuery();

        query.dataSourceTable(tableNum(ReqDemPlanPlanningGroupAllocKeys))
            .addRange(fieldNum(ReqDemPlanPlanningGroupAllocKeys, AllocateId))
            .value(_key);

        this.setFilterQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIntercompanyPlanningGroupFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a filter on an inter-company planning group.
    /// </summary>
    /// <param name="_groupName">
    ///     The inter-company planning group name to filter on.
    /// </param>
    public void addIntercompanyPlanningGroupFilter(ReqIntercompanyPlanningGroupName _groupName)
    {
        Query query = this.getFilterQuery();

        query.dataSourceTable(tableNum(ReqDemPlanPlanningGroupAllocKeys))
            .addRange(fieldNum(ReqDemPlanPlanningGroupAllocKeys, PlanningGroupName))
            .value(_groupName);

        this.setFilterQuery(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>attributeManager</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of the attribute manager.
    /// </summary>
    /// <returns>
    ///     The attribute manager instance.
    /// </returns>
    public ReqDemPlanForecastAttributeManager attributeManager()
    {
        if (!attributeManager)
        {
            attributeManager = ReqDemPlanForecastAttributeManager::construct();
        }
        return attributeManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the filter query.
    /// </summary>
    /// <returns>
    ///     The allocation key filter query.
    /// </returns>
    public Query getFilterQuery()
    {
        if (!planningGroupQueryStr)
        {
            return new Query(queryStr(ReqDemPlanIntercompanyPlanningGroupFltr));
        }
        return new Query(SysOperationHelper::base64Decode(planningGroupQueryStr));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIntercompanyPlanningGroupFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if an intercompany planning group filter has been applied.
    /// </summary>
    /// <returns>
    ///     true if an intercompany planning group filter has been applied; otherwise, false.
    /// </returns>
    public boolean hasIntercompanyPlanningGroupFilter()
    {
        Query                   query = this.getFilterQuery();
        FieldId                 searchFieldId = fieldNum(ReqDemPlanPlanningGroupAllocKeys, PlanningGroupName);
        FieldName               searchFieldName = fieldStr(ReqDemPlanPlanningGroupAllocKeys, PlanningGroupName);
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;
        QueryFilter             filter;
        int                     i;

        dataSource = query.dataSourceTable(tableNum(ReqDemPlanPlanningGroupAllocKeys));

        for (i = 1; i <= dataSource.rangeCount(); ++i)
        {
            range = dataSource.range(i);
            if (range.field() == searchFieldId && range.value())
            {
                return true;
            }
        }

        for (i = 1; i <= query.queryFilterCount(); ++i)
        {
            filter = query.queryFilter(i);
            if (filter.dataSource().table() == dataSource.table()
                && filter.field() == searchFieldName && filter.value())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the default values for the contract members.
    /// </summary>
    public void initValues()
    {
        this.parmDateGranularity(ReqDemPlanDateGranularity::Month);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.initValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateGranularity</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
    SysOperationGroupMemberAttribute('General'),
    SysOperationDisplayOrderAttribute('1')]
    public ReqDemPlanDateGranularity parmDateGranularity(ReqDemPlanDateGranularity _dateGranularity = dateGranularity)
    {
        dateGranularity = _dateGranularity;

        return dateGranularity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHistoricalEnd</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
    SysOperationGroupMemberAttribute('General'),
    SysOperationDisplayOrderAttribute('4')]
    public ReqDemPlanHistoricalHorizonEnd parmHistoricalEnd(ReqDemPlanHistoricalHorizonEnd _historicalEnd = historicalEnd)
    {
        historicalEnd = _historicalEnd;

        return historicalEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHistoricalStart</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
    SysOperationGroupMemberAttribute('General'),
    SysOperationDisplayOrderAttribute('3')]
    public ReqDemPlanHistoricalHorizonStart parmHistoricalStart(ReqDemPlanHistoricalHorizonStart _historicalStart = historicalStart)
    {
        historicalStart = _historicalStart;

        return historicalStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanningGroupQueryStr</Name>
				<Source><![CDATA[
    [DataMemberAttribute,
    AifQueryTypeAttribute('_planningGroupQueryStr', queryStr(ReqDemPlanIntercompanyPlanningGroupFltr)),
    SysOperationGroupMemberAttribute('ForecastFilter')]
    public str parmPlanningGroupQueryStr(str _planningGroupQueryStr = planningGroupQueryStr)
    {
        planningGroupQueryStr = _planningGroupQueryStr;

        return planningGroupQueryStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTodaysDate</Name>
				<Source><![CDATA[
    public TransDate parmTodaysDate(TransDate _todaysDate = todaysDate)
    {
        todaysDate = _todaysDate;
        return todaysDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilterQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the filter query.
    /// </summary>
    /// <param name="_query">
    ///     The query object.
    /// </param>
    public void setFilterQuery(Query _query)
    {
        planningGroupQueryStr = SysOperationHelper::base64Encode(_query.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHistoricalHorizon</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the historical horizon.
    /// </summary>
    /// <param name="_from">
    ///     The beginning of the historical horizon.
    /// </param>
    /// <param name="_to">
    ///     The end of this historical horizon.
    /// </param>
    public void setHistoricalHorizon(date _from, date _to)
    {
        historicalStart = _from;
        historicalEnd = _to;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the data contract.
    /// </summary>
    /// <returns>
    ///     true if the data contract is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!historicalStart)
        {
            ret = checkFailed("@DMP1242");
        }

        if (!historicalEnd)
        {
            ret = checkFailed("@DMP1243");
        }

        if (historicalStart > historicalEnd)
        {
            ret = checkFailed("@DMP1049");
        }

        if (ret &&
            InventTransArchiveFeature::isEnabled() &&
            InventTransArchiveProcessHistoryTable::existsOverlapPeriodDate(historicalStart, historicalEnd))
        {
            if (Box::yesNo(strFmtLB("@SCM:PlanningForecastImpactedByArchivedTransactions"), DialogButton::Yes) != DialogButton::Yes)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>