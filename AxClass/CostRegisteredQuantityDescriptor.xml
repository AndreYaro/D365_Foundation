<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostRegisteredQuantityDescriptor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostRegisteredQuantityDescriptor</c> class describes registered inventory accounting entry.
/// </summary>
public class CostRegisteredQuantityDescriptor extends CostEntryDescriptorBase
{
    CostInventoryAccount    inventoryAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    public str key()
    {
        return CostRegisteredQuantityDescriptor::createKey(inventoryAccount, reconciledEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryAccount</Name>
				<Source><![CDATA[
    public CostInventoryAccount parmInventoryAccount(CostInventoryAccount _inventoryAccount = inventoryAccount)
    {
        inventoryAccount = _inventoryAccount;

        return inventoryAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reconciledDescriptor</Name>
				<Source><![CDATA[
    public CostEntryDescriptorBase reconciledDescriptor()
    {
        return CostRegisteredQuantityDescriptor::newDescriptor(inventoryAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CostRegisteredQuantityDescriptor construct()
    {
        return new CostRegisteredQuantityDescriptor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a unique key for the descriptors <c>CostInventoryAccount</c>.
    /// </summary>
    /// <param name="_account">
    /// The <c>CostInventoryAccount</c>.
    /// </param>
    /// <param name="_reconciledEvent">
    /// The <c>CostInventoryEvent</c> that is reconciled.
    /// </param>
    /// <returns>
    /// A unique key for the descriptor.
    /// </returns>
    private static str createKey(CostInventoryAccount _account, CostInventoryEvent _reconciledEvent)
    {
        str key = _account.key();

        if (_reconciledEvent)
        {
            key+= '#' + _reconciledEvent.key();
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDescriptor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostRegisteredQuantityDescriptor</c> descritor class from the descriptors <c>CostInventoryAccount</c>
    /// and reconciled <c>CostInventoryEvent</c>.
    /// </summary>
    /// <param name="_account">
    /// The descriptors <c>CostInventoryAccount</c>.
    /// </param>
    /// <param name="_reconciledEvent">
    /// The <c>CostInventoryEvent</c> that is reconciled; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostRegisteredQuantityDescriptor</c> descritor class.
    /// </returns>
    private static CostRegisteredQuantityDescriptor newDescriptor(CostInventoryAccount _account, CostInventoryEvent _reconciledEvent = null)
    {
        CostRegisteredQuantityDescriptor    descriptor;

        str key = CostRegisteredQuantityDescriptor::createKey(_account, _reconciledEvent);
        descriptor = SysTransactionScopeCache::get(classStr(CostRegisteredQuantityDescriptor), key, descriptor);

        if (!descriptor)
        {
            descriptor = CostRegisteredQuantityDescriptor::construct();
            descriptor.parmInventoryAccount(_account);
            descriptor.parmReconciledEvent(_reconciledEvent);
            SysTransactionScopeCache::set(classStr(CostRegisteredQuantityDescriptor), key, descriptor);
        }

        return descriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostRegisteredQuantityDescriptor</c> descritor class from a <c>InventTrans</c> buffer
    /// and optionally a reconciled event.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> buffer.
    /// </param>
    /// <param name="_reconciledEvent">
    /// The <c>CostInventoryEvent</c> that is reconciled.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostRegisteredQuantityDescriptor</c> descritor class.
    /// </returns>
    public static CostRegisteredQuantityDescriptor newFromInventTrans(InventTrans _inventTrans, CostInventoryEvent _reconciledEvent = null)
    {
        CostInventoryAccount                account = CostInventoryAccount::newInventTrans(_inventTrans);

        return CostRegisteredQuantityDescriptor::newDescriptor(account, _reconciledEvent);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
