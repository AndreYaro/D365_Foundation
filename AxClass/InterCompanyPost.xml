<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InterCompanyPost
{
    Args                    args;

    RecordSortedList        journalList;
    boolean                 interCompany;
    boolean                 useJournalList;

    InventTrans             inventTransPurch;
    InventTrans             inventTransSales;

    NoYes                   formletterPrintout;
    boolean                 usePrintManagement;

    QueryRun                tradeLoopTrans;

    FormLetterServiceController fromFormLetter, toFormLetter;
    PurchTable              purchTable;
    PurchLine               purchLine;
    SalesTable              salesTable;
    SalesLine               salesLine;

    InterCompanyJour        interCompanyJour;
    InterCompanyTrans       interCompanyTrans;
    Map                     mapDataAreaId;
    MapIterator             miDataAreaId;
    DataAreaId              changeToDataAreaId;
    DataAreaId              changeFromDataAreaId;
    InterCompanyMapRecord   interCompanyMapRecord;
    MapIterator             mapIterator;
    MapEnumerator           mapEnumerator;

    TransDate               transDate;

    InterCompanyEndpointActionPolicyTransfer    interCompanyEndpointActionPolicyTransfer;

    boolean                 transferFromJournal;
    TmpFrmVirtual           tmpFrmVirtual;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>conTmpFrmVirtual</Name>
				<Source><![CDATA[
    protected container conTmpFrmVirtual()
    {
        DataAreaId  dataAreaId   = curext();
        List        selectedList = new List(Types::Record);
        container   conTmpFrmVirtual;

        while select tmpFrmVirtual
              where tmpFrmVirtual.CompanyId == dataAreaId
        {
            selectedList.addEnd(tmpFrmVirtual);
            conTmpFrmVirtual = selectedList.pack();
        }
        return conTmpFrmVirtual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExternalJournalsToTransfer</Name>
				<Source><![CDATA[
    protected void findExternalJournalsToTransfer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInternalJournalsToTransfer</Name>
				<Source><![CDATA[
    protected void findInternalJournalsToTransfer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPostJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the intercompany transaction should be posted for the other company.
    /// </summary>
    /// <param name = "_interCompanyTrans">An <c>InterCompanyTrans</c> record.</param>
    /// <returns>true if the the intercompany transaction should be created; otherwise, false.</returns>
    /// <remarks>This is provided as an extension point.</remarks>
    protected boolean mustPostJournalTrans(InterCompanyTrans _interCompanyTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCollect</Name>
				<Source><![CDATA[
    public void formLetterCollect()
    {
        changeFromDataAreaId = curext();

        while (interCompanyJour)
        {
            tmpFrmVirtual       = null;
            transferFromJournal = fromFormLetter.interCompanySelectFromJournal();

            mapDataAreaId = new Map(Types::String,Types::Class);
            interCompanyEndpointActionPolicyTransfer = interCompanyJour.interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External);

            if (interCompanyJour.InterCompanyCompanyId
                && interCompanyJour.interCompanyDoExternalPosting())
            {
                if (mapDataAreaId.exists(interCompanyJour.InterCompanyCompanyId))
                {
                    interCompanyMapRecord = mapDataAreaId.lookup(interCompanyJour.InterCompanyCompanyId);
                }
                else
                {
                    mapDataAreaId.insert(interCompanyJour.InterCompanyCompanyId,InterCompanyMapRecord::construct());
                    interCompanyMapRecord = mapDataAreaId.lookup(interCompanyJour.InterCompanyCompanyId);
                }

                tradeLoopTrans = new TradeLoopTrans(interCompanyJour, interCompanyJour.interCompanyTransTableNum()).buildQueryRun();
                boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

                while (tradeLoopTrans.next())
                {
                    interCompanyTrans = tradeLoopTrans.get(interCompanyJour.interCompanyTransTableNum());

                    if (!this.mustPostJournalTrans(interCompanyTrans))
                    {
                        continue;
                    }

                    if (isKittingEnabled && !KittingClassDelegateHelper::InterCompanyPost_AddTransForICDirectDelivery(this, interCompanyTrans))
                    {
                        continue;
                    }

                    if (this.isTransactionReturn())
                    {
                        InterCompanyTransferInventDim::doTransferReturn(interCompanyJour.DataAreaId,
                                                                        interCompanyTrans.InventTransId,
                                                                        interCompanyJour.InterCompanyCompanyId,
                                                                        interCompanyTrans.InterCompanyInventTransId,
                                                                        interCompanyEndpointActionPolicyTransfer,
                                                                        this.statusReceipt(),
                                                                        false);
                    }
                    else
                    {
                        InterCompanyTransferInventDim::doTransfer(interCompanyJour.DataAreaId,
                                                                  interCompanyTrans.InventTransId,
                                                                  interCompanyJour.InterCompanyCompanyId,
                                                                  interCompanyTrans.InterCompanyInventTransId,
                                                                  interCompanyEndpointActionPolicyTransfer,
                                                                  this.statusIssue(),
                                                                  interCompanyJour.DocumentNum,
                                                                  true);
                    }

                    if (transferFromJournal)
                    {
                        this.findExternalJournalsToTransfer();
                    }

                    changecompany(interCompanyJour.InterCompanyCompanyId)
                    {
                        setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                        interCompanyMapRecord.insert(interCompanyTrans.interCompanySourceTable(true));
                    }
                }
            }

            if (this.allowInterCompanyInternalPosting())
            {
                if (mapDataAreaId.exists(''))
                {
                    interCompanyMapRecord = mapDataAreaId.lookup('');
                }
                else
                {
                    mapDataAreaId.insert('',InterCompanyMapRecord::construct());
                    interCompanyMapRecord = mapDataAreaId.lookup('');
                }

                tradeLoopTrans = new TradeLoopTrans(interCompanyJour, interCompanyJour.interCompanyTransTableNum()).buildQueryRun();
                while (tradeLoopTrans.next())
                {
                    this.interCompanyTrans(tradeLoopTrans.get(interCompanyJour.interCompanyTransTableNum()));
                    if (transferFromJournal)
                        this.findInternalJournalsToTransfer();
                    interCompanyMapRecord.insert(interCompanyTrans.interCompanySourceTable(false));
                }
            }

            this.formLetterPost();

            if (!useJournalList)
                break;
            if (!journalList.next(interCompanyJour))
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowInterCompanyInternalPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether the journal supports internal posting.
    /// </summary>
    /// <returns>
    ///     A Boolean value indicating whether internal posting is allowed for the journal.
    /// </returns>
    protected boolean allowInterCompanyInternalPosting()
    {
        return interCompanyJour.interCompanyDoInternalPosting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterPost</Name>
				<Source><![CDATA[
    public void formLetterPost()
    {
        miDataAreaId = new MapIterator(mapDataAreaId);
        miDataAreaId.begin();
        while (miDataAreaId.more())
        {
            changeToDataAreaId = miDataAreaId.key();
            changecompany(changeToDataAreaId ? changeToDataAreaId : curext())
            {
                setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                mapEnumerator = interCompanyMapRecord.map().getEnumerator();

                if (mapEnumerator.moveNext())
                {
                    this.toTable(mapEnumerator.currentValue());
                    toFormLetter  = this.toFormLetterNew();
                    toFormLetter.interCompanyCalledFromFormletter(fromFormLetter);
                    fromFormLetter.interCompanyCreatedFormletter(toFormLetter);
                    toFormLetter.parmInterCompanyCompanyId(changeToDataAreaId ? changeFromDataAreaId : '');
                    toFormLetter.parmVersioningUpdateType(fromFormLetter.parmVersioningUpdateType());
                    toFormLetter.interCompanyParmId(this.fromParmId());
                    toFormLetter.interCompanyParmSelectFromJournal(transferFromJournal);
                    toFormLetter.interCompanyPosted(NoYes::Yes);
                    interCompanyMapRecord = miDataAreaId.value();
                    toFormLetter.interCompanyMap(interCompanyMapRecord.map());
                    this.formLetterUpdate();
                }
            }
            miDataAreaId.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterUpdate</Name>
				<Source><![CDATA[
    public void formLetterUpdate()
    {
        usePrintManagement = true;

        this.toFormLetter().interCompanyPosted(true);
        this.toFormLetter().updatePrinterSettingsFormLetter(this.fromFormLetter().printerSettingsFormletter(PrintSetupOriginalCopy::Original), PrintSetupOriginalCopy::Original);
        this.toFormLetter().updatePrinterSettingsFormLetter(this.fromFormLetter().printerSettingsFormletter(PrintSetupOriginalCopy::Copy),     PrintSetupOriginalCopy::Copy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromFormLetter</Name>
				<Source><![CDATA[
    public FormLetterServiceController fromFormLetter()
    {
        return fromFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromParmId</Name>
				<Source><![CDATA[
    ParmId fromParmId()
    {
        return fromFormLetter.parmId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        if (interCompanyJour.RecId)
        {
            useJournalList      = false;
        }
        else
        {
            useJournalList      = true;

            if (!journalList)
                throw error(Error::wrongUseOfFunction(funcName()));

            journalList.first(interCompanyJour);
        }

        if (!interCompanyJour)
            throw error(strFmt("@SYS29104", classId2Name(classIdGet(this))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpFrmVirtual</Name>
				<Source><![CDATA[
    protected void insertTmpFrmVirtual(Common _common = null)
    {
        CompanyId               companyId;
        TableId                 tableId;
        RecId                   recId;

        if (_common.TableId == tableNum(VendPackingSlipVersion))
        {
            companyId   = curext();
            tableId     = tableNum(VendPackingSlipJour);
            recId       = _common.(fieldNum(VendPackingSlipVersion, VendPackingSlipJour));
        }
        else
        {
            companyId = _common.DataAreaId;
            tableId   = _common.TableId;
            recId     = _common.RecId;
        }

        select firstonly tmpFrmVirtual
               where tmpFrmVirtual.CompanyId == companyId
               &&    tmpFrmVirtual.TableNum  == tableId
               &&    tmpFrmVirtual.RecordNo  == recId
               &&    tmpFrmVirtual.Id        == this.orderId(_common);
        if (!tmpFrmVirtual)
        {
            tmpFrmVirtual.clear();
            tmpFrmVirtual.CompanyId = companyId;
            tmpFrmVirtual.TableNum  = tableId;
            tmpFrmVirtual.RecordNo  = recId;
            tmpFrmVirtual.NoYes     = NoYes::Yes;
            tmpFrmVirtual.Id        = this.orderId(_common);
            tmpFrmVirtual.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDlvRemainderCloseLinesFromICSOToICPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the deliver remainder from the ICSO to the ICPO when closing a line during posting.
    /// </summary>
    /// <param name = "_salesParmTable">A reference to the SalesParmTable with the lines to synchronize.</param>
    public static void syncDlvRemainderCloseLinesFromICSOToICPO(SalesParmTable _salesParmTable)
    {
        SalesParmLine localSalesParmLine;
        SalesLine     localSalesLine;
        using (var singleton = InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton::instance().init())
        {
            while select RemainBefore, RemainBeforeInvent, PdsCWRemainBefore, DeliverNow, InventNow, PdsCWDeliverNow, SalesLineRecId
                        from localSalesParmLine
                        join localSalesLine
                        where localSalesParmLine.ParmId == _salesParmTable.ParmId
                           && localSalesParmLine.TableRefId == _salesParmTable.TableRefId
                           && localSalesParmLine.SalesLineRecId == localSalesLine.RecId
                           && localSalesParmLine.closed == NoYes::Yes
                           && localSalesParmLine.RemainBefore > localSalesParmLine.DeliverNow
            {
                InventQty diffRemainSalesPhysical			= localSalesParmLine.RemainBefore - localSalesParmLine.DeliverNow;
                InventQty	diffRemainInventPhysical		= localSalesParmLine.RemainBeforeInvent - localSalesParmLine.InventNow;
                PdsInventQty diffPdsCWRemainInventPhysical	= localSalesParmLine.PdsCWRemainBefore - localSalesParmLine.PdsCWDeliverNow;
                InterCompanyUpdateRemPhys::synchronize(localSalesLine,
                                                      diffRemainInventPhysical,
                                                           diffRemainSalesPhysical,
                                                           InterCompanySkipUpdate::No,
                                                           diffPdsCWRemainInventPhysical);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postContextQueue</Name>
				<Source><![CDATA[
    internal static void postContextQueue(IntercompanyPostContractBase _contract)
    {
        InterCompanyPostContextQueue currentContext = InterCompanyPostContextQueue::current();

        if (currentContext != null)
        {
            currentContext.queuePostInterCompany(_contract);
        }
        else
        {
            using (InterCompanyPostContextQueue context = InterCompanyPostContextQueue::construct())
            {
                context.queuePostInterCompany(_contract);

                while (context.canPostInterCompany())
                {
                    context.postInterCompany();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyTrans</Name>
				<Source><![CDATA[
    public InterCompanyTrans interCompanyTrans(Common _common = interCompanyTrans)
    {
        interCompanyTrans = _common;

        return interCompanyTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the intercompany transaction is a return;
    /// </summary>
    /// <returns>
    /// true if the intercompany transaction is a return; otherwise, false.
    /// </returns>
    protected boolean isTransactionReturn()
    {
        return interCompanyTrans.TransQty < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(FormLetterContract _formLetterContract,
             Common             _record,
             RecordSortedList   _journalList,
             boolean            _intercompany)
    {
        if (_formLetterContract)
        {
            fromFormLetter   = FormLetterServiceController::newFromContract(_formLetterContract);
        }
        interCompanyJour = _record;
        journalList      = _journalList;
        intercompany     = _intercompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderId</Name>
				<Source><![CDATA[
    protected Num orderId(Common _buffer)
    {
        Num                 orderId;
        VendPackingSlipJour vendPackingSlipJour;
        CustPackingSlipJour custPackingSlipJour;

        switch (_buffer.TableId)
        {
            case tableNum(VendPackingSlipJour) :
                vendPackingSlipJour = _buffer;
                orderId = vendPackingSlipJour.PurchId;
                break;

            case tableNum(CustPackingSlipJour) :
                custPackingSlipJour = _buffer;
                orderId = custPackingSlipJour.SalesId;
                break;
        }

        return orderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.init();
        this.formLetterCollect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIssue</Name>
				<Source><![CDATA[
    protected StatusIssue statusIssue()
    {
        return StatusIssue::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>StatusReceipt</c>.
    /// </summary>
    /// <returns>
    /// A <c>StatusReceipt</c>.
    /// </returns>
    protected StatusReceipt statusReceipt()
    {
        return StatusReceipt::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toFormLetter</Name>
				<Source><![CDATA[
    FormLetterServiceController toFormLetter()
    {
        return toFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toFormLetterNew</Name>
				<Source><![CDATA[
    FormLetterServiceController toFormLetterNew()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>toTable</Name>
				<Source><![CDATA[
    Common toTable(Common _common = null)
    {
        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>