<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveTableCreateFormBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSWaveTableCreateFormBase</c> is the base class for all wave creation forms.
/// </summary>
public abstract class WhsWaveTableCreateFormBase
{
    FormDataSource  waveTable_ds;
    FormDataSource  waveLine_ds;
    FormDataSource  source_ds;
    QueryRun        source_qr;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Add one or more source records to the wave.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///    The wave is not specified.
    /// </exception>
    public void add()
    {
        Common          common;
        WHSWaveTable    waveTable = waveTable_ds.cursor();

        if (!waveTable.RecId)
        {
            throw error("@WAX3317");
        }

        ttsbegin;

        for (common = source_ds.getFirst(true) ? source_ds.getFirst(true) : source_ds.cursor();
             common;
             common = source_ds.getNext())
        {
            if (this.canAddLineToWave(waveTable, common))
            {
                this.createWaveLine(waveTable.WaveId, common);
            }
        }

        ttscommit;

        waveTable_ds.research(true);
        source_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Add all source records to the wave.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///    The wave is not specified.
    /// </exception>
    public void addAll()
    {
        WHSWaveTable    waveTable;
        Common          common;
        QueryRun        queryRun;

        ttsbegin;
        waveTable = waveTable_ds.cursor();

        if (!waveTable.RecId)
        {
            throw error("@WAX3317");
        }

        if (source_qr)
        {
            queryRun = source_qr;
            queryRun.reset();
        }
        else
        {
            queryRun = new QueryRun(source_ds.query());
        }

        while (queryRun.next())
        {
            common = queryRun.get(this.sourceTableId());
            if (this.canAddLineToWave(waveTable, common))
            {
                this.createWaveLine(waveTable.WaveId, common);
            }
        }

        ttscommit;

        waveTable_ds.research(true);
        source_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddLineToWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if wave lines can be added to the wave.
    /// </summary>
    /// <param name="_whsWaveTable">
    ///     Wave to add lines to.
    /// </param>
    /// <param name="_common">
    ///     Wave lines pool.
    /// </param>
    /// <returns>
    ///     true if can add lines to the wave.
    /// </returns>
    public boolean canAddLineToWave(WHSWaveTable _whsWaveTable, Common _common)
    {
        return _whsWaveTable.allowEdit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the form can be closed.
    /// </summary>
    /// <param name="_waveTable">
    ///    The wave table record.
    /// </param>
    /// <returns>
    ///    true if the form can be closed; otherwise, false.
    /// </returns>
    public boolean canClose(WHSWaveTable _waveTable)
    {
        boolean     result;

        if (   _waveTable.RecId
            && !_waveTable.WaveTemplateName)
        {
            result = checkFailed("@WAX3334");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRemoveLineFromWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if wave lines can be removed from the wave.
    /// </summary>
    /// <param name="_whsWaveTable">
    ///     Wave to remove lines from.
    /// </param>
    /// <param name="_common">
    ///     Wave line.
    /// </param>
    /// <returns>
    ///     true if can remove lines from the wave.
    /// </returns>
    public boolean canRemoveLineFromWave(WHSWaveTable _whsWaveTable, Common _common)
    {
        return _whsWaveTable.allowEdit() && _common.validateDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaveLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a wave line for the given record.
    /// </summary>
    /// <param name="_waveId">
    ///    The wave ID.
    /// </param>
    /// <param name="_common">
    ///    The record.
    /// </param>
    protected abstract void createWaveLine(
        WHSWaveId _waveId,
        Common    _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllWaveLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes all wave lines.
    /// </summary>
    public void deleteAllWaveLines()
    {
        Common          common;
        WHSWaveTable    waveTable = waveTable_ds.cursor();

        ttsbegin;

        for (common = waveLine_ds.getFirst();
             common;
             common = waveLine_ds.getNext())
        {
            if (this.canRemoveLineFromWave(waveTable, common))
            {
                common.delete();
            }
        }

        ttscommit;

        waveTable_ds.executeQuery();
        source_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSelectedWaveLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes all selected wave lines.
    /// </summary>
    public void deleteSelectedWaveLines()
    {
        Common          common;
        WHSWaveTable    waveTable = waveTable_ds.cursor();

        ttsbegin;

        for (common = waveLine_ds.getFirst(true) ? waveLine_ds.getFirst(true) : waveLine_ds.cursor();
             common;
             common = waveLine_ds.getNext())
        {
            if (this.canRemoveLineFromWave(waveTable, common))
            {
                common.delete();
            }
        }

        ttscommit;

        waveTable_ds.executeQuery();
        source_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWaveTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the wave table record.
    /// </summary>
    /// <param name="_waveTable">
    ///    The wave table record.
    /// </param>
    public void deleteWaveTable(WHSWaveTable _waveTable)
    {
        if (   _waveTable.RecId
            && !_waveTable.WaveTemplateName)
        {
            _waveTable.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Execute a wave.
    /// </summary>
    /// <param name="_waveLine">
    ///    The wave line table.
    /// </param>
    /// <param name="_waveTable">
    ///    The wave table.
    /// </param>
    /// <exception cref="Exception::Error">
    ///    Wave line was not specified.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    The wave does not have a defined template.
    /// </exception>
    public void execute(
        Common       _waveLine,
        WHSWaveTable _waveTable)
    {
        if (!_waveLine.RecId)
        {
            throw error("@WAX1627");
        }

        if (!_waveTable.WaveTemplateName)
        {
            throw error("@WAX3190");
        }

        if (_waveTable.canProcessInBatch())
        {
            Set batchSet = new Set(Types::Class);
        
            batchSet.add(WHSWaveExecute::newInstance(_waveTable));

            info(strFmt("@WAX2610", _waveTable.WaveId));

            RefRecId batchRecId = WHSParameters::createBatchJob(batchSet, "@WAX3159");
            WHSWaveTableBatch::createSingleWaveBatchRelationship(_waveTable.RecId, batchRecId);
        }
        else
        {
            using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(_waveTable, '', funcName()+'Single'))
            {
                WHSPostEngine::post(_waveTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefWaveFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the <c>WHSWaveFilterTable</c> form.
    /// </summary>
    /// <param name="_caller">
    ///    The caller object.
    /// </param>
    void jumpRefWaveFilter(Object _caller)
    {
        Args args = new Args();

        args.caller(_caller);
        new MenuFunction(menuitemDisplayStr(WHSWaveFilterTable),MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSource_ds</Name>
				<Source><![CDATA[
    protected FormDataSource parmSource_ds(FormDataSource _source_ds = source_ds)
    {
        source_ds = _source_ds;
        return source_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSource_qr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal QueryRun parmSource_qr(QueryRun _source_qr = source_qr)
    {
        source_qr = _source_qr;
        return source_qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveLine_ds</Name>
				<Source><![CDATA[
    protected FormDataSource parmWaveLine_ds(FormDataSource _waveLine_ds = waveLine_ds)
    {
        waveLine_ds = _waveLine_ds;
        return waveLine_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveTable_ds</Name>
				<Source><![CDATA[
    protected FormDataSource parmWaveTable_ds(FormDataSource _waveTable_ds = waveTable_ds)
    {
        waveTable_ds = _waveTable_ds;
        return waveTable_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the source table ID.
    /// </summary>
    /// <returns>
    ///    The source table ID.
    /// </returns>
    protected abstract TableId sourceTableId()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>