<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesQuotation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxSalesQuotation extends TaxSales
{
    SalesQuotationCalcTax_Sales     salesQuotationFormLetter;
    SalesQuotationLine              salesQuotationLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the transaction supports adjusting the calculated base amount
    ///   when tax is included in item price and the users adjusts the tax amount.
    /// </summary>
    /// <returns>
    ///   true if adjusting the calculated base amount is supported; otherwise, false.
    /// </returns>
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    TaxAmount  calc()
    {
        TaxAmount                taxAmount;

        if (!headingRecId)
        {
            return 0;
        }

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(this.taxIntegrationBusinessProcess()))
        {
            taxAmount = this.calcUsingTaxIntegrationQuotation();
            return taxAmount;
        }

        boolean                  moreLines;
        TaxBaseCur               baseAmount;
        AmountCur                lineAmount;
        AmountCur                baseAmountBeforeDiscount;

        TaxAmountCur             sourceTaxAmount;
        Map                      amountInclTax = new Map(Types::Container, Types::Real);
        Map                      amountExclTax = new Map(Types::Container, Types::Real);
        RefRecId                 adjustRecId[];
        RefTableId               adjustedTableId[];
        AmountCur                pennyDiff[];
        Counter                  counter;
        Counter                  counterMax;
        TableId                  salesQuotationLineTableId;

        DiscPct                  cashDisc        = salesQuotationFormLetter.taxCashDiscPercent();
        Percent                  endDiscPercent;
        Currency                 sourceCurrency;
        TaxCalculationAdjustment taxCalculationAdjustment;
        RefRecId                 orderRecId;
        boolean                  success = true;

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();

            if (TaxCalculationInstrumentationToggle::instance().isEnabled())
            {
                taxEventSourceLog.CalculateTaxStart(identifier, TaxUncommitted::callStackInfo());
            }
            else
            {
                taxEventSourceLog.CalculateTaxStart(identifier);
            }

            stopWatch.Start();

            salesQuotationFormLetter.initCursor();

            moreLines = true;
            while (moreLines)
            {
                salesQuotationLine = salesQuotationFormLetter.nextLine() as SalesQuotationLine;

                if (salesQuotationLine)
                {
                    if  (SalesQuotationTotals_Trans::canBeInvoiced(salesQuotationLine))
                    {
                        this.configureTaxForSalesQuotationLine();

                        lineAmount = -salesQuotationFormLetter.transLineAmount();

                        // get the line amount excluding tax (base amount)
                        if (salesQuotationFormLetter.isTaxIncluded())
                        {
                            baseAmount = this.amountExclTax(
                                                lineAmount,
                                                false,
                                                true,
                                                salesQuotationFormLetter.transQty(),
                                                salesQuotationLine.SalesUnit,
                                                salesQuotationLine.ItemId,
                                                salesQuotationLine.RecId,
                                                salesQuotationLine.TableId);
                        }
                        else
                        {
                            baseAmount = lineAmount;
                        }

                        baseAmountBeforeDiscount = baseAmount;

                        // deduct total discount from the base amount
                        endDiscPercent = salesQuotationFormLetter.endDisc();
                        if (endDiscPercent)
                        {
                            baseAmount += salesQuotationFormLetter.lineEndDisc(-baseAmount);
                            lineAmount -= CurrencyExchangeHelper::amount(lineAmount, this.currencyCode()) * endDiscPercent / 100;
                        }

                        // If this is a Tax included scenario then store the line amount and base amounts for later use.
                        if (salesQuotationFormLetter.isTaxIncluded())
                        {
                            amountInclTax.insert(this.taxTransOrigin(salesQuotationLine), lineAmount);
                            amountExclTax.insert(this.taxTransOrigin(salesQuotationLine), baseAmount);

                            taxIncludedInItemPrice = true;
                        }

                        // deduct non tax portion of the cash discount from the base amount
                        if (this.taxParameters().TaxLessCashDisc)
                        {
                            baseAmount -= baseAmount * cashDisc / 100;
                        }

                        salesQuotationLineTableId = this.sourceTableId();

                        this.insertLineInInternal(baseAmount,
                                                  salesQuotationFormLetter.transQty() * -1,
                                                  salesQuotationLine.SalesUnit,
                                                    this.transTxt(),
                                                  salesQuotationFormLetter.transPcsPrice(),
                                                  salesQuotationLine.DefaultDimension,
                                                  LedgerDimensionFacade::serviceCreateLedgerDimension(salesQuotationFormLetter.operationAccount(), salesQuotationLine.DefaultDimension),
                                                  salesQuotationFormLetter.operationPosting());

                        if (isAutoChargesSetupSequenceCompoundFeatureEnabled && taxMarkupCompound)
                        {
                            taxMarkupCompound.processTaxLineCalc(tmpTaxMarkupCompound, this.headingRecId(), this.headingTableId(), this.sourceRecId(), this.sourceTableId());
                        }
                        
                        if (taxCalculateLine)
                        {
                            taxAmount = this.calcTax();

                            this.saveInProcessTransaction();
                            sourceTaxAmount = this.taxPrLine(this.sourceTableId(),this.sourceRecId());

                            if (!taxCalculateTotal &&
                                (salesQuotationFormLetter.exchRate(taxDate)          != ExchangeRateHelper::exchRate(sourceCurrencyCode, taxDate)      ||
                                 salesQuotationFormLetter.exchRateSecondary(taxDate) != ExchangeRateHelper::exchRateSecond(sourceCurrencyCode, taxDate)    ||
                                 salesQuotationFormLetter.triangulation(taxDate)     != Currency::triangulation(sourceCurrencyCode, taxDate)))
                            {
                                this.adjustAmount(salesQuotationFormLetter.exchRate(taxDate),
                                                  salesQuotationFormLetter.exchRateSecondary(taxDate));
                            }
                        }
                        if (salesQuotationFormLetter.transTaxGroup() && salesQuotationFormLetter.transTaxItemGroup())
                        {
                            taxableDocumentLines++;
                        }

                        if (!skipLineMarkup)
                        {
                            this.calcMarkup(amountInclTax, amountExclTax);
                        }

                        orderRecId = salesQuotationFormLetter.recID();
                        if (salesQuotationFormLetter.endDisc())
                        {
                            this.addToOrderBalance(orderRecId, baseAmountBeforeDiscount);
                        }
                        else
                        {
                            this.addToOrderBalance(orderRecId, lineAmount);
                        }
                    }
                }
                else
                {
                    moreLines   = false;
                }
            }

            if (!skipTableMarkup)
            {
                // calculate header miscellaneous charges
                salesQuotationFormLetter.initCursorMarkupHeader(salesQuotationFormLetter.tableId(),
                                                                salesQuotationFormLetter.recID());

                this.calcMarkup(amountInclTax, amountExclTax);
            }

            if (! this.checkTaxCodesInTotal())
            {
                throw error("@SYS22772");
            }

            if (taxCalculateTotal)
            {
                this.insertTotalInInternal(cashDisc);
                taxAmount = this.calcTax();
                this.saveTotalInProcessTransaction();
            }

            if (taxIncludedInItemPrice)
            {
                while select sum(SourceTaxAmountCur)
                from taxWorkTrans
                group by SourceTableId, SourceRecId, SourceCurrencyCode
                where (taxWorkTrans.SourceTableId   == salesQuotationLineTableId ||
                       taxWorkTrans.SourceTableId   == tableNum(MarkupTrans)) &&
                      taxWorkTrans.TaxDirection    != TaxDirection::UseTax      &&
                      taxWorkTrans.TaxOrigin       != TaxOrigin::TaxReversed
                {
                    sourceCurrency = Currency::find(taxWorkTrans.SourceCurrencyCode);
                    amountInclTax.insert(this.taxWorkTransSource(taxWorkTrans), CurrencyExchangeHelper::amount(amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans)), sourceCurrencyCode));
                    amountExclTax.insert(this.taxWorkTransSource(taxWorkTrans), CurrencyExchangeHelper::amount(amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)), sourceCurrencyCode));

                    if (amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans)) &&
                        amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)) + taxWorkTrans.SourceTaxAmountCur != amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans)))
                    {
                        counterMax++;
                        adjustRecId[counterMax] = taxWorkTrans.SourceRecId;
                        adjustedTableId[counterMax] = taxWorkTrans.SourceTableId;
                        pennyDiff[counterMax]   = amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)) +
                                                  taxWorkTrans.SourceTaxAmountCur -
                                                  amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans));
                    }
                }

                if (counterMax)
                {
                    for (counter = 1; counter <= counterMax; counter++)
                    {
                        this.adjustPennyDiff(pennyDiff[counter], adjustedTableId[counter], adjustRecId[counter]);
                    }
                }
            }

            if (taxCalculateTotal)
            {
                if (salesQuotationFormLetter.exchRate(taxDate)          != ExchangeRateHelper::exchRate(sourceCurrencyCode, taxDate)              ||
                    salesQuotationFormLetter.exchRateSecondary(taxDate) != ExchangeRateHelper::exchRateSecond(sourceCurrencyCode, taxDate)   ||
                    salesQuotationFormLetter.triangulation(taxDate)     != Currency::triangulation(sourceCurrencyCode, taxDate))
                {
                    this.adjustAmount(salesQuotationFormLetter.exchRate(taxDate),
                                      salesQuotationFormLetter.exchRateSecondary(taxDate));
                }
            }

            this.roundTaxOnTaxGroup();

            taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
            if (taxCalculationAdjustment)
            {
                taxCalculationAdjustment.parmLineAmountIncludesTax(salesQuotationFormLetter.isTaxIncluded());
                taxCalculationAdjustment.parmAmountInclTaxMap(amountInclTax);
                taxCalculationAdjustment.loadTaxAdjustments();
            }

            taxAmount = this.totalTaxAmount();
        }
        catch (errorEx) // errorEx is the same as Exception::Error
        {
            success = false;
			taxEventSourceLog.TaxProcessError(guid2Str(newGuid()),
											  errorEx.Message,
											  errorEx.StackTrace,
											  methodStr(TaxSalesQuotation, calc));
            throw Exception::Error;
        }
        finally
        {
            stopWatch.Stop();
            select count(RecId) from taxWorkTrans;
            taxEventSourceLog.CalculateTaxStop(identifier,
                                               SysCountryRegionCode::countryInfo(),
                                               tableId2Name(headingTableId),
                                               TaxTelemetryConstants::salesTax,
                                               stopWatch.ElapsedMilliseconds,
                                               taxableDocumentLines,
                                               markupTransTaxableDocumentLines,
                                               taxWorkTrans.RecId,
                                               salesQuotationFormLetter.isTaxIncluded(),
                                               headingTableId,
                                               tableId2Name(headingTableId),
                                               headingRecId,
                                               success);
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUsingTaxIntegrationQuotation</Name>
				<Source><![CDATA[
    private TaxAmount calcUsingTaxIntegrationQuotation()
    {
        TaxIntegrationDocumentObject document;
        if (TaxIntegrationConstructWithSourceRecordFlight::instance().isEnabled())
        {
            document = TaxIntegrationDocumentObject::constructWithRecord(salesQuotationFormLetter.getSource());
        }
        else
        {
            document = TaxIntegrationDocumentObject::construct(
                salesQuotationFormLetter.tableId(),
                salesQuotationFormLetter.recid());
        }
        this.setFieldsForTaxIntegrationDocumentObject(document);

        TaxIntegrationFacade::calculate(document);
        Map amountIncludingTax = document.getAmountIncludingTax();

        TaxCalculationAdjustment taxCalculationAdjustment;
        taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        if (taxCalculationAdjustment)
        {
            taxCalculationAdjustment.parmLineAmountIncludesTax(salesQuotationFormLetter.isTaxIncluded());
            taxCalculationAdjustment.parmAmountInclTaxMap(amountIncludingTax);
            taxCalculationAdjustment.loadTaxAdjustments();
        }

        return this.totalTaxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForTaxIntegrationDocumentObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields for <c>TaxIntegrationDocument</c> object.
    /// </summary>
    /// <param name = "_document">The <c>TaxIntegrationDocument</c>.</param>
    protected void setFieldsForTaxIntegrationDocumentObject(TaxIntegrationDocumentObject _document)
    {
        _document.setTransactionDate(this.taxDate);
        // This deliveryDateMarkup() is for header.
        _document.setDeliveryDate(salesQuotationFormLetter.deliveryDateMarkup());
        // Workaround for no document date in sales quotation,
        // referring to this.configureTaxForSalesQuotationLine().
        _document.setDocumentDate(salesQuotationFormLetter.invoiceDate());
        _document.setInvoiceDate(salesQuotationFormLetter.invoiceDate());

        _document.setTransactionCurrencyCode(salesQuotationFormLetter.currencyCode());

        _document.setCompany(this.getCompany());
        _document.setHeadingTableId(this.headingTableId());
        _document.setHeadingRecId(this.headingRecId());

        _document.setSign(-1);
        taxModuleType = this.taxModuleType();
        _document.setSource(this.getTaxModuleType());
        _document.setBusinessProcess(this.taxIntegrationBusinessProcess());
        _document.setPrepaid(this.isPrePayment());

        _document.setEUROTriangulation(this.getTriangulation());

        _document.setLegacyTax(this);
        _document.setShouldSkipDocumentCharge(skipTableMarkup);
        _document.setShouldSkipLineCharge(skipLineMarkup);

        _document.setCashDiscountPercent(cashDiscPercent);
        _document.setCashDiscountAmount(cashDiscAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarkup</Name>
				<Source><![CDATA[
    protected void calcMarkup(Map amountInclTax, Map amountExclTax)
    {
        TaxAmount   taxAmount;
        NoYes       moreMarkup;
        TaxBaseCur  baseAmount;
        AmountCur   lineAmount;
        DiscPct     cashDisc        = salesQuotationFormLetter.taxCashDiscPercent();

        moreMarkup  = true;
        parentSourceTableId = this.sourceTableId();
        parentSourceRecId = this.sourceRecId();
        while (moreMarkup)
        {
            markupTrans= salesQuotationFormLetter.nextMarkupLine();
            if (markupTrans)
            {
                markupAdminister= NoYes::Yes;

                this.configureTaxForMarkupLine();

                lineAmount = -salesQuotationFormLetter.markupAmount();

                // get the line amount excluding tax (base amount)
                if (salesQuotationFormLetter.isTaxIncluded())
                {
                    baseAmount = this.amountExclTax(
                                        lineAmount,
                                        false,
                                        false,
                                        0,
                                        '',
                                        '',
                                        markupTrans.RecId,
                                        markupTrans.TableId);
                }
                else
                {
                    baseAmount = lineAmount;
                }

                // If this is a Tax included scenario then store the line amount and base amounts for later use.
                if (salesQuotationFormLetter.isTaxIncluded())
                {
                    amountInclTax.insert(this.taxTransOrigin(markupTrans), lineAmount);
                    amountExclTax.insert(this.taxTransOrigin(markupTrans), baseAmount);
                    taxIncludedInItemPrice = true;
                }

                // deduct non tax portion of the cash discount from the base amount
                if (this.taxParameters().TaxLessCashDisc)
                {
                    baseAmount -= baseAmount * cashDisc / 100;
                }

                this.insertLineInInternal(baseAmount,
                                          0,
                                          '',
                                          '',
                                          0,
                                          salesQuotationFormLetter.markupDefaultDimension(),
                                          LedgerDimensionFacade::serviceCreateLedgerDimension(salesQuotationFormLetter.operationAccountMarkup(), salesQuotationFormLetter.markupDefaultDimension()),
                                          salesQuotationFormLetter.operationPostingMarkup());

                if (isAutoChargesSetupSequenceCompoundFeatureEnabled && taxMarkupCompound)
                {
                    taxMarkupCompound.processTaxLineCalc(tmpTaxMarkupCompound, this.headingRecId(), this.headingTableId(), this.sourceRecId(), this.sourceTableId());
                }

                if (taxCalculateLine)
                {
                    taxAmount = this.calcTax();
                    this.saveInProcessTransaction();
                }

                if (salesQuotationFormLetter.transTaxGroup() && salesQuotationFormLetter.transTaxItemGroup())
                {
                    markupTransTaxableDocumentLines++;
                }
            }
            else
            {
                markupAdminister= NoYes::No;
                moreMarkup  = false;
            }
        }
        parentSourceTableId = 0;
        parentSourceRecId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForMarkupLine</Name>
				<Source><![CDATA[
    protected void configureTaxForMarkupLine()
    {
        TransDate               taxCalculationDate;
        TaxCalculationDateType  taxCalculationDateType = this.taxParameters().TaxCalculationDateType;

        if (markupTrans)
        {
            markupAdminister = NoYes::Yes;

            switch (taxCalculationDateType)
            {
                case TaxCalculationDateType::DeliveryDate:
                    taxCalculationDate = salesQuotationFormLetter.deliveryDateMarkup();
                    break;

                case TaxCalculationDateType::DocumentDate,
                    TaxCalculationDateType::InvoiceDate:
                    taxCalculationDate = salesQuotationFormLetter.invoiceDate();
                    break;
            }

            this.insertIntersection(salesQuotationFormLetter.markupTaxGroup(),
                                    salesQuotationFormLetter.markupTaxItemGroup(),
                                    salesQuotationFormLetter.transTransId(),
                                    markupTrans.Txt,
                                    taxCalculationDate);

            if (! this.checkTaxCodesByLine())
            {
                throw error("@SYS22772");
            }
        }
        else
        {
            markupAdminister    = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForSalesQuotationLine</Name>
				<Source><![CDATA[
    private void configureTaxForSalesQuotationLine()
    {
        TaxCalculationDateType  taxCalculationDateType  = this.taxParameters().TaxCalculationDateType;
        TransDate               taxCalculationDate;

        switch (taxCalculationDateType)
        {
            case TaxCalculationDateType::DeliveryDate:
                taxCalculationDate = salesQuotationFormLetter.deliveryDate();
                break;

            case TaxCalculationDateType::DocumentDate,
                TaxCalculationDateType::InvoiceDate:
                taxCalculationDate = salesQuotationFormLetter.invoiceDate();
                break;
        }

        this.insertIntersection(salesQuotationFormLetter.transTaxGroup(),
                                salesQuotationFormLetter.transTaxItemGroup(),
                                salesQuotationFormLetter.transTransId(),
                                salesQuotationLine.ItemId,
                                taxCalculationDate);

        if (! this.checkTaxCodesByLine())
        {
            throw error("@SYS22772");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exciseTaxCalculationdate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// customer's excise calculation datetime
    /// </summary>
    /// <param name="_sourceRecId">
    /// _sourceRecId is a param
    /// </param>
    /// <param name="_sourceTableId">
    /// _sourceTableId is a param
    /// </param>
    /// <returns>
    /// returns the calculation date and time of excise
    /// </returns>
    protected TransDateTime exciseTaxCalculationdate_IN(RefRecId _sourceRecId, TableId _sourceTableId)
    {
        TransDateTime                   cusexciseTaxCalculationDateTime;
        CustomerCalculationDateType_IN  customerCalculationDateType;

        customerCalculationDateType = this.taxParameters().CustomerCalculationDateType_IN;
        switch (customerCalculationDateType)
        {
            case CustomerCalculationDateType_IN::DeliveryDate:
                cusexciseTaxCalculationDateTime = DateTimeUtil::newDateTime(salesQuotationFormLetter.deliveryDate(), 0, DateTimeUtil::getUserPreferredTimeZone());
                break;
            case CustomerCalculationDateType_IN::InvoiceDate:
                cusexciseTaxCalculationDateTime = DateTimeUtil::newDateTime(salesQuotationFormLetter.invoiceDate(), 0, DateTimeUtil::getUserPreferredTimeZone());
                break;
        }

        return cusexciseTaxCalculationDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(SalesQuotationCalcTax_Sales   _salesQuotationForm)
    {
        super();

        salesQuotationFormLetter = _salesQuotationForm;
        taxDate                  = salesQuotationFormLetter.invoiceDate();
        taxModuleType            =  TaxModuleType::Sales;
        headingTableId           = salesQuotationFormLetter.tableId();
        headingRecId             = salesQuotationFormLetter.recID();
        taxIncludedInItemPrice   = salesQuotationFormLetter.isTaxIncluded();
        skipLineMarkup           = salesQuotationFormLetter.parmSkipLineMarkup();
        skipTableMarkup          = salesQuotationFormLetter.parmSkipTableMarkup();
        salesQuotationFormLetter.tax(this);

        this.setCashDiscount(salesQuotationFormLetter.taxCashDiscPercent(), 0);
        this.setExchRates(salesQuotationFormLetter.currencyCode(), 0, 0, Currency::noYes2UnknownNoYes(salesQuotationFormLetter.triangulation(salesQuotationFormLetter.invoiceDate())));

        if (isAutoChargesSetupSequenceCompoundFeatureEnabled)
        {
            markupAutoOriginSource = _salesQuotationForm.getMarkupAutoOriginSource();
            if (TaxMarkupCompound::isRequiredBySource(this, _salesQuotationForm.isTaxIncluded()))
            {
                taxMarkupCompound = TaxMarkupCompound::construct(this);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCalc_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines specifics parameters for Localizarion BR. It is a subscriber to event <c>preCalcHandler_BR</c> in calc method.
    /// </summary>
    public void preCalc_BR()
    {
        useAndConsumption_BR = salesQuotationFormLetter.useAndConsumption_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLinesHaveTaxGroups</Name>
				<Source><![CDATA[
    protected boolean sourceLinesHaveTaxGroups()
    {
        return salesQuotationFormLetter.doTaxGroupExistsForDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>RecId</c> value of the transaction to tax. For instance, if the tax is called from a
    ///    <c>SalesQuotationLine</c> table, this method will return the <c>RecId</c> value of that <c>SalesQuotationLine</c>
    ///    record.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to tax.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived methods.
    /// </remarks>
    public RecId sourceRecId()
    {
        if (markupAdminister)
        {
            return markupTrans.RecId;
        }
        else
        {
            return salesQuotationLine.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>TableId</c> value of the transaction to tax. That is, if the tax is called from a
    ///    <c>SalesQuotationLine</c> table, this method will return the <c>TableId</c> value of the <c>SalesQuotationLine</c>
    ///    record.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived methods.
    /// </remarks>
    public TableId sourceTableId()
    {
        if (markupAdminister)
        {
            return markupTrans.TableId;
        }
        else
        {
            return salesQuotationLine.TableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction text for the current tax transaction.
    /// </summary>
    /// <returns>
    ///    The <c>ItemId</c> value of the <c>SalesQuotationLine</c> record if present; otherwise the sales
    ///    category of the <c>SalesQuotationLine</c> record.
    /// </returns>
    protected TransTxt transTxt()
    {
        if (salesQuotationLine.ItemId)
        {
            return(salesQuotationLine.ItemId);
        }
        else
        {
            return(EcoResCategory::find(salesQuotationLine.SalesCategory).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    public boolean useSalesTaxAdjustments()
    {
        boolean useSalesTaxAdjustment;

        if (salesQuotationFormLetter)
        {
            useSalesTaxAdjustment = salesQuotationFormLetter.useSalesTaxAdjustments();
        }

        return useSalesTaxAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIntegrationBusinessProcess</Name>
				<Source><![CDATA[
    internal TaxIntegrationBusinessProcess taxIntegrationBusinessProcess()
    {
        TaxIntegrationBusinessProcess bp;
        if (salesQuotationFormLetter)
        {
            bp = salesQuotationFormLetter.taxIntegrationBusinessProcess();
        }
        return bp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModuleType</Name>
				<Source><![CDATA[
    internal TaxModuleType taxModuleType()
    {
        TaxModuleType taxModuleTypelocal;
        if (salesQuotationFormLetter)
        {
            taxModuleTypelocal = salesQuotationFormLetter.taxModuleType();
        }
        return taxModuleTypelocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCalcHandler_BR</Name>
				<Source><![CDATA[
    [PreHandlerFor(classStr(TaxSalesQuotation), methodStr(TaxSalesQuotation, calc))]
    /// <summary>
    ///  Observes the event that fires after calling the <c>calc</c> method.
    /// </summary>
    /// <param name="_args">
    /// A <c>XppPrePostArgs</c> that encapsulates the arguments passed in call of <c>calc</c> method.
    /// </param>
    public static void preCalcHandler_BR(XppPrePostArgs _args)
    {
        TaxSalesQuotation taxSalesQuotation = _args.getThis();

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        taxSalesQuotation.preCalc_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>