<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvTaxExpensePost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TrvTaxExpensePost</c> class is for post tax for an expense line.
/// </summary>
class TrvTaxExpensePost extends TaxPost
{
    TrvExpTrans             trvExpTrans;
    TrvTaxDocumentExpense   trvTaxDocumentExpense;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate from the transaction line.
    /// </summary>
    /// <returns>
    /// The exchange rate from the transaction line.
    /// </returns>
    public  ExchRate exchRate()
    {
        return trvExpTrans.ExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate from the transaction line.
    /// </summary>
    /// <returns>
    /// The exchange rate from the transaction line.
    /// </returns>
    public ExchrateSecondary exchRateSecondary()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the initialization class as an object.
    /// </summary>
    /// <returns>
    /// The initialization class.
    /// </returns>
    /// <remarks>
    /// The initialization class is of a different type for each subclass.
    /// </remarks>
    protected Object getInitializationClass()
    {
        return trvTaxDocumentExpense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original document ID.
    /// </summary>
    /// <returns>
    /// The original record ID of the transaction header.
    /// </returns>
    /// <remarks>
    /// The parent tax lines sometimes change during posting. This method will return the original document
    /// ID.
    /// </remarks>
    protected RefRecId getOriginalHeadingRecId()
    {
        return trvExpTrans.expTable().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original transaction heading table ID.
    /// </summary>
    /// <returns>
    /// The original table ID of the transaction header.
    /// </returns>
    /// <remarks>
    /// The parenting of tax lines sometimes changes during posting. This method will return the original
    /// transaction heading table ID.
    /// </remarks>
    protected RefTableId getOriginalHeadingTableId()
    {
        return tablenum(TrvExpTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(NoYes              _post,
             Object                    _initializationClass,
             TmpTaxWorkTrans           _tmpTaxWorkTrans = null)
    {
        super();

        trvTaxDocumentExpense = _initializationClass as TrvTaxDocumentExpense;
        if (trvTaxDocumentExpense == null)
        {
            throw error("@SYS95118");
        }

        post                 = _post;
        taxWorkTrans         = _tmpTaxWorkTrans;

        taxModuleType        = TaxModuleType::Purch;

        trvExpTrans          = trvTaxDocumentExpense.parmTrvExpTrans();
        headingTableId       = tablenum(TrvExpTrans);
        headingRecId         = trvExpTrans.RecId;

        origHeadingTableId   = tablenum(TrvExpTable);
        origHeadingRecId     = trvExpTrans.expTable().RecId;

        if (!headingTableId || !headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (! this.checkParameters())
                throw error("@SYS18447");

            taxDate             = trvExpTrans.TransDate;
            sourceCurrencyCode  = trvExpTrans.ExchangeCode;
        }

        triangulation = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the transaction line that is currently being posted.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line that is being posted.
    /// </returns>
    public recId sourceRecId()
    {
        return trvExpTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to tax.
    /// </returns>
    public tableId sourceTableId()
    {
        return tablenum(TrvExpTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is the main entry point to execute transaction specific logic and to
    ///    post to TaxTrans and to post tax amounts to the Ledger.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <param name="_companyToPost">
    ///    The company to post; optional.
    /// </param>
    /// <returns>
    ///    The total tax amount.
    /// </returns>
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost = curext())
    {
        TaxAmount       taxAmount;

        this.initLedgerPosting(_ledgerPostingController);

        if (post)
        {
            this.saveAndPost(_ledgerPostingController, _companyToPost);

            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        else
            taxAmount = this.totalTaxAmount();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current transaction being posted supports subledger distributions or
    /// subledger journal lines.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>