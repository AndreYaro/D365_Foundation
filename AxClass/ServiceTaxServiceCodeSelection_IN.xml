<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ServiceTaxServiceCodeSelection_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ServiceTaxServiceCodeSelection_IN</c> class handles the service tax code selection.
/// </summary>
class ServiceTaxServiceCodeSelection_IN
{
    TableId            tableId;
    RefRecId           recId;
    CustVendTrans      invoiceTrans;
    CustVendTrans      paymentTrans;
    TaxTrans_IN        taxTransInvoice;
    TaxTrans_IN        taxTransMultiInvoice;
    TaxTrans_IN        taxTransMultiLine;
    TaxTrans_IN        taxTransPayment;
    SpecTrans          specTrans;
    SpecTrans          specTransMultiInvoice;
    SpecTrans          specTransMultiPayment;
    Voucher            relatedVoucher;
    Boolean            applyInvoiceServiceCode;
    VendTransOpen      vendTransOpen;
    VendTrans          vendTrans;
    CustTransOpen      custTransOpenPayment;
    CustTrans          custTransPayment;
    CustTransOpen      custTransOpenInvoice;
    CustTrans          custTransInvoice;
    LedgerJournalTrans ledgerJournalTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCustMultiInvWithDiffServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the 1st spec trans of customer invoice which has different Service accounting code than the given taxTrans
    /// </summary>
    /// <param name="_taxTransInvoice">
    /// The taxTrans
    /// </param>
    /// <returns>
    /// The specTrans which has different Service accounting code than the given taxTrans
    /// </returns>
    public SpecTrans findCustMultiInvWithDiffServiceCode(TaxTrans_IN _taxTransInvoice)
    {
        RefRecId                specRecId;
        SalesTable              salesTable;
        CustInvoiceTable        custInvoiceTable;
        CustTable               custTable;

        switch (tableId)
        {
            case tablenum(LedgerJournalTrans):
                specRecId = ledgerJournalTrans.RecId;
                break;
            case tablenum(SalesTable):
                salesTable = CustInvoiceJour::findFromCustTrans(invoiceTrans.Invoice, invoiceTrans.TransDate, invoiceTrans.AccountNum).salesTable();
                specRecId  = salesTable.RecId;
                break;
            case tablenum(CustInvoiceTable):
                select firstonly RecId from custInvoiceTable
                        where custInvoiceTable.InvoiceId == invoiceTrans.Invoice;
                specRecId = custInvoiceTable.RecId;
                break;
            case tablenum(CustTable):
                custTable  = CustInvoiceJour::findFromCustTrans(invoiceTrans.Invoice, invoiceTrans.TransDate, invoiceTrans.AccountNum).custTable_InvoiceAccount();
                specRecId  = custTable.RecId;
                break;
            default:
                break;
        }

        select firstonly specTransMultiInvoice
            where specTransMultiInvoice.SpecRecId   == specRecId
               && specTransMultiInvoice.SpecTableId == tableId
            join custTransOpenInvoice
                where custTransOpenInvoice.RecId    == specTransMultiInvoice.RefRecId
            join custTransInvoice
                where custTransInvoice.RecId        == custTransOpenInvoice.RefRecId
            join taxTransMultiLine
                where taxTransmultiLine.Voucher     == custTransInvoice.Voucher
                   && taxTransmultiLine.TransDate   == custTransInvoice.TransDate
                   && taxTransmultiLine.ServiceCodeTable != _taxTransInvoice.ServiceCodeTable;

        return specTransMultiInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustMultiPayWithDiffServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the 1st spec trans of customer payment which has different Service accounting code than the given taxTrans
    /// </summary>
    /// <param name="_taxTransPayment">
    /// The taxTrans
    /// </param>
    /// <returns>
    /// The specTrans which has different Service accounting code than the given taxTrans
    /// </returns>
    public SpecTrans findCustMultiPayWithDiffServiceCode(TaxTrans_IN _taxTransPayment)
    {
        LedgerTransVoucherLink  ledgerTransVoucherLink;
        LedgerTransVoucherLink  ledgerTransVoucherLinkLoc;
        RefRecId                specRecId;
        SalesTable              salesTable;
        CustInvoiceTable        custInvoiceTable;
        CustTable               custTable;

        switch (tableId)
        {
            case tablenum(LedgerJournalTrans):
                specRecId = ledgerJournalTrans.RecId;
                break;
            case tableId == tablenum(SalesTable):
                salesTable = CustInvoiceJour::findFromCustTrans(invoiceTrans.Invoice, invoiceTrans.TransDate, invoiceTrans.AccountNum).salesTable();
                specRecId  = salesTable.RecId;
                break;
            case tableId == tablenum(CustInvoiceTable):
                select firstonly RecId from custInvoiceTable
                    where custInvoiceTable.InvoiceId == invoiceTrans.Invoice;
                specRecId = custInvoiceTable.RecId;
                break;
            case tablenum(CustTable):
                custTable  = CustInvoiceJour::findFromCustTrans(invoiceTrans.Invoice, invoiceTrans.TransDate, invoiceTrans.AccountNum).custTable_InvoiceAccount();
                specRecId  = custTable.RecId;
                break;
            default:
                break;
        }

        select firstonly specTransMultiPayment
            where specTransMultiPayment.SpecRecId   == specRecId
               && specTransMultiPayment.SpecTableId == tableId
            join custTransOpenPayment
                where custTransOpenPayment.RecId == specTransMultiPayment.RefRecId
            join custTransPayment
                where custTransPayment.RecId     == custTransOpenPayment.RefRecId
            join Voucher, TransDate from ledgerTransVoucherLink
                where ledgerTransVoucherLink.Voucher      == custTransPayment.Voucher
                   && ledgerTransVoucherLink.TransDate    == custTransPayment.TransDate
            // Get Payment attached to the running invoice.
            join VoucherGroupId, TransDate, Voucher from ledgerTransVoucherlinkLoc
                where ledgerTransVoucherlinkLoc.VoucherGroupId == ledgerTransVoucherLink.VoucherGroupId
                   && ledgerTransVoucherlinkLoc.TransDate      == ledgerTransVoucherLink.TransDate
                   && ledgerTransVoucherlinkLoc.Voucher        != custTransPayment.Voucher
            join Voucher, TransDate, ServiceCodeTable from taxTransMultiLine
                where taxTransmultiLine.Voucher     == ledgerTransVoucherlinkLoc.Voucher
                   && taxTransmultiLine.TransDate   == ledgerTransVoucherlinkLoc.TransDate
                   && taxTransmultiLine.ServiceCodeTable != _taxTransPayment.ServiceCodeTable;

        return specTransMultiPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendMultiInvWithDiffServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the 1st spec trans of vendor invoice which has different Service accounting code than the given taxTrans
    /// </summary>
    /// <param name="_taxTransInvoice">
    /// The taxTrans
    /// </param>
    /// <returns>
    /// The specTrans which has different Service accounting code than the given taxTrans
    /// </returns>
    public SpecTrans findVendMultiInvWithDiffServiceCode(TaxTrans_IN _taxTransInvoice)
    {
        RefRecId   specRecId;
        PurchTable purchTable;
        VendTable  vendTable;

        switch (tableId)
        {
            case tablenum(LedgerJournalTrans):
                specRecId = ledgerJournalTrans.RecId;
                break;
            case tablenum(PurchTable):
                purchTable = VendInvoiceJour::findFromVendTrans(invoiceTrans.Invoice, invoiceTrans.TransDate, invoiceTrans.AccountNum).purchTable();
                specRecId  = purchTable.RecId;
                break;
            case tablenum(VendTable):
                vendTable  = VendInvoiceJour::findFromVendTrans(invoiceTrans.Invoice, invoiceTrans.TransDate, invoiceTrans.AccountNum).vendTable_InvoiceAccount();
                specRecId  = vendTable.RecId;
                break;
            default:
                break;
        }

        select firstonly specTransMultiInvoice
            where specTransMultiInvoice.SpecRecId   == specRecId
               && specTransMultiInvoice.SpecTableId == tableId
            join vendTransOpen// Of invoice
                where vendTransOpen.RecId == specTransMultiInvoice.RefRecId
            join vendTrans// Of invoice
                where vendTrans.RecId     == vendTransOpen.RefRecId
            join taxTransMultiLine
                where taxTransmultiLine.Voucher     == vendTrans.Voucher
                   && taxTransmultiLine.TransDate   == vendTrans.TransDate
                   && taxTransmultiLine.ServiceCodeTable != _taxTransInvoice.ServiceCodeTable;

        return specTransMultiInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendMultiPayWithDiffServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the 1st spec trans of vendor payment which has different Service accounting code than the given taxTrans
    /// </summary>
    /// <param name="_taxTransPayment">
    /// The taxTrans
    /// </param>
    /// <returns>
    /// The specTrans which has different Service accounting code than the given taxTrans
    /// </returns>
    public SpecTrans findVendMultiPayWithDiffServiceCode(TaxTrans_IN _taxTransPayment)
    {
        LedgerTransVoucherLink  ledgerTransVoucherLink;
        LedgerTransVoucherLink  ledgerTransVoucherLinkLoc;
        RefRecId                specRecId;
        PurchTable              purchTable;
        VendTransOpen           vendTransOpenPayment;
        VendTrans               vendTransPayment;
        VendTable               vendTable;

        switch (tableId)
        {
            case tablenum(LedgerJournalTrans):
                specRecId = ledgerJournalTrans.RecId;
                break;
            case tablenum(PurchTable):
                purchTable = VendInvoiceJour::findFromVendTrans(invoiceTrans.Invoice, invoiceTrans.TransDate, invoiceTrans.AccountNum).purchTable();
                specRecId  = purchTable.RecId;
                break;
            case tablenum(VendTable):
                vendTable  = VendInvoiceJour::findFromVendTrans(invoiceTrans.Invoice, invoiceTrans.TransDate, invoiceTrans.AccountNum).vendTable_InvoiceAccount();
                specRecId  = vendTable.RecId;
                break;
            default:
                break;
        }

        select firstonly specTransMultiPayment
            where specTransMultiPayment.SpecRecId   == specRecId
               && specTransMultiPayment.SpecTableId == tableId
            join RecId from vendTransOpenPayment
                where vendTransOpenPayment.RecId == specTransMultiPayment.RefRecId
            join RecId from vendTransPayment
                where vendTransPayment.RecId     == vendTransOpenPayment.RefRecId
            join Voucher, TransDate from ledgerTransVoucherLink
                where ledgerTransVoucherLink.Voucher      == vendTransPayment.Voucher
                   && ledgerTransVoucherLink.TransDate    == vendTransPayment.TransDate
            // Get Payment attached to the running invoice.
            join VoucherGroupId, TransDate, Voucher from ledgerTransVoucherlinkLoc
                where ledgerTransVoucherlinkLoc.VoucherGroupId  == ledgerTransVoucherLink.VoucherGroupId
                   && ledgerTransVoucherlinkLoc.TransDate       == ledgerTransVoucherLink.TransDate
                   && ledgerTransVoucherlinkLoc.Voucher         != vendTransPayment.Voucher
            join Voucher, TransDate, ServiceCodeTable from taxTransMultiLine
                where taxTransmultiLine.Voucher     == ledgerTransVoucherlinkLoc.Voucher
                   && taxTransmultiLine.TransDate   == ledgerTransVoucherlinkLoc.TransDate
                   && taxTransmultiLine.ServiceCodeTable != _taxTransPayment.ServiceCodeTable;

        return specTransMultiPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTrans</Name>
				<Source><![CDATA[
        public CustVendTrans parmInvoiceTrans(CustVendTrans _invoiceTrans = invoiceTrans)
    {
        invoiceTrans = _invoiceTrans;

        return invoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentTrans</Name>
				<Source><![CDATA[
        public CustVendTrans parmPaymentTrans(CustVendTrans _paymentTrans = paymentTrans)
    {
        paymentTrans = _paymentTrans;

        return paymentTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
        public RefRecId parmRecId(RefRecId _recId = recId)
    {
        recId = _recId;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
        public TableId parmTableId(TableId _tableId = tableId)
    {
        tableId = _tableId;

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update Service Code during the settlement for different type of transaction
    /// given that each transaction line might or might not have the same service accouting code
    /// </summary>
    public void processServiceCode()
    {
        switch (this.parmTableId())
        {
            case tablenum(LedgerJournalTrans):
                ledgerJournalTrans = LedgerJournalTrans::findRecId(recId, false);
                if (ledgerJournalTrans.isPaymentJournal_IN())
                {
                    this.updateServiceCodeForPaymentJournal();
                }
                else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                        || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                {
                    this.updateServiceForPurchaseInvoice();
                }
                else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                        || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
                {
                    this.updateServiceForSalesInvoice();
                }
                break;
            case tablenum(SalesTable),
                 tablenum(CustInvoiceTable): this.updateServiceForSalesInvoice();
                break;
            case tablenum(PurchTable),
                 tablenum(VendInvoicejour): this.updateServiceForPurchaseInvoice();
                break;
            case tablenum(VendTable),
                 tablenum(SalesTable): this.updateServiceForManualSettlement();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Service code in TaxTrans by given voucher number and transaction date
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number
    /// </param>
    /// <param name="_transDate">
    /// The transaction date
    /// </param>
    /// <param name="_serviceCodeTable">
    /// The ref of ServiceCodeTable_IN
    /// </param>
    private void updateServiceCode(Voucher _voucher, TransDate _transDate, RefRecId _serviceCodeTable)
    {
        TaxTrans_IN taxTransServ;

        ttsbegin;
        if (_serviceCodeTable && _voucher)
        {
            update_recordset taxTransServ
                setting ServiceCodeTable = _serviceCodeTable
                    where taxTransServ.Voucher   == _voucher
                       && taxTransServ.TransDate == _transDate;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceCodeForPaymentJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update service code during settlement of direct settlement between invoices and payments
    /// </summary>
    private void updateServiceCodeForPaymentJournal()
    {
        TransTaxInformation transTaxInformation;
        select firstonly ServiceCodeTable from  taxTransInvoice
           where taxTransInvoice.Voucher   == invoiceTrans.Voucher
              && taxTransInvoice.TransDate == invoiceTrans.TransDate
              && taxTransInvoice.ServiceCodeTable != 0;

        // Checking if invoice lines have multiple service codes attached. If so take first Service code from payment.
        select firstonly recId, ServiceCodeTable from taxTransMultiInvoice
            where taxTransMultiInvoice.Voucher      == invoiceTrans.Voucher
                && taxTransMultiInvoice.TransDate   == invoiceTrans.TransDate
                && taxTransMultiInvoice.ServiceCodeTable != 0
                && taxTransMultiInvoice.ServiceCodeTable != taxTransInvoice.ServiceCodeTable;

        // Checking if the payment journal has multiple invoices with diff Service Codes. If so take first service code from Payment.
        if (taxTransMultiInvoice.RecId == 0)
        {
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
            {
                this.findCustMultiInvWithDiffServiceCode(taxTransInvoice);
            }
            else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                    || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend )
            {
                this.findVendMultiInvWithDiffServiceCode(taxTransInvoice);
            }
        }

        // Invoice has service code attached, No Multiple Invoices, No Multiple Invoice Lines
        // If any of the condition fails Payment Service Code will prevail
        if (taxTransInvoice.ServiceCodeTable
            && taxTransMultiInvoice.RecId  == 0  // Multiple lines in invoice with different service code
            && specTransMultiInvoice.RecId == 0) // Multiple invoices attached to payment
        {
            relatedVoucher = TaxSettlement_IN::determineRelatedVoucher(invoiceTrans.Voucher, invoiceTrans.TransDate);
            this.updateServiceCode(relatedVoucher, invoiceTrans.TransDate, taxTransInvoice.ServiceCodeTable);
        }
        else
        {
            // If invoice has no service code or Multiple Invoices are attached against the current payment
            //or Multilines are there for an Invoice, use service code from payment.
            transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTrans);
            this.updateServiceCode(invoiceTrans.Voucher, invoiceTrans.TransDate, transTaxInformation.ServiceCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceForManualSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update service code during settlement of manual settlement between invoices and payments
    /// </summary>
    void updateServiceForManualSettlement()
    {
        relatedVoucher = TaxSettlement_IN::determineRelatedVoucher(paymentTrans.Voucher, paymentTrans.TransDate);

        select firstonly ServiceCodeTable from  taxTransInvoice
            where taxTransInvoice.Voucher     == invoiceTrans.Voucher
               && taxTransInvoice.TransDate   == invoiceTrans.TransDate
               && taxTransInvoice.ServiceCodeTable != 0;

        select firstonly RecId, ServiceCodeTable from taxTransPayment
            where taxTransPayment.Voucher    == relatedVoucher
                && taxTransPayment.TransDate == paymentTrans.TransDate
                && taxTransPayment.ServiceCodeTable != 0;

        //If Payment is more its Service Code will Prevail in Invoice
        //If invoice amount equals payment amount && payment date is earlier than invoice date
        //Then apply payment service code
        if (((abs(paymentTrans.AmountCur) > abs(invoiceTrans.AmountCur))
                ||((abs(paymentTrans.AmountCur) == abs(invoiceTrans.AmountCur))
                    && (paymentTrans.TransDate < invoiceTrans.TransDate)))
            && taxTransPayment.ServiceCodeTable)
        {
            this.updateServiceCode(invoiceTrans.Voucher, invoiceTrans.TransDate,taxTransPayment.ServiceCodeTable);
        }
        else if (taxTransInvoice.ServiceCodeTable)
        {
            this.updateServiceCode(relatedVoucher, paymentTrans.TransDate,taxTransInvoice.ServiceCodeTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceForPurchaseInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update service code for Purchase invoice which has payment attached
    /// </summary>
    public void updateServiceForPurchaseInvoice()
    {
        relatedVoucher = TaxSettlement_IN::determineRelatedVoucher(paymentTrans.Voucher,paymentTrans.TransDate);

        select firstonly ServiceCodeTable from  taxTransInvoice
            where taxTransInvoice.Voucher    == invoiceTrans.Voucher
                && taxTransInvoice.TransDate == invoiceTrans.TransDate
                && taxTransInvoice.ServiceCodeTable != 0;

        select firstonly ServiceCodeTable from  taxTransPayment
            where taxTransPayment.Voucher    == relatedVoucher
                && taxTransPayment.TransDate == paymentTrans.TransDate
                && taxTransPayment.ServiceCodeTable != 0;

        // Invoice has service code attached
        // Invoice Service Code will prevail

        // In all AP transaction accounting code attached with Invoice will prevail
        if (taxTransInvoice.ServiceCodeTable)
        {
            this.updateServiceCode(relatedVoucher, paymentTrans.TransDate, taxTransInvoice.ServiceCodeTable);
        }
        else if (taxTransPayment.ServiceCodeTable)
        {
            //If no invoice line is attached with service code, payment service code will prevail
            this.updateServiceCode(invoiceTrans.Voucher, invoiceTrans.TransDate, taxTransPayment.ServiceCodeTable);
        }
        else if (this.findVendMultiPayWithDiffServiceCode(taxTransPayment).RecId != 0)
        {
            //Use payment service code if any
            this.updateServiceCode(invoiceTrans.Voucher, invoiceTrans.TransDate, taxTransMultiLine.ServiceCodeTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceForSalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update service code for Sales invoice which has payment attached
    /// </summary>
    private void updateServiceForSalesInvoice()
    {
        relatedVoucher = TaxSettlement_IN::determineRelatedVoucher(paymentTrans.Voucher,paymentTrans.TransDate);

        select firstonly ServiceCodeTable from taxTransPayment
            where taxTransPayment.Voucher  == relatedVoucher
               && taxTransPayment.TransDate == paymentTrans.TransDate
               && taxTransPayment.ServiceCodeTable != 0;

        select firstonly ServiceCodeTable from taxTransInvoice
            where taxTransInvoice.Voucher   == invoiceTrans.Voucher
                && taxTransInvoice.TransDate == invoiceTrans.TransDate
                && taxTransInvoice.ServiceCodeTable != 0;

        // In all AR transaction accounting code attached with Payment will prevail
        if (taxTransPayment.ServiceCodeTable)
        {
            //Take the 1st payment service code
            this.updateServiceCode(invoiceTrans.Voucher, invoiceTrans.TransDate, taxTransPayment.ServiceCodeTable);
        }
        else if (this.findCustMultiPayWithDiffServiceCode(taxTransPayment).RecId == 0)
        {
            //Take the payment service code if any
            this.updateServiceCode(invoiceTrans.Voucher, invoiceTrans.TransDate, taxTransMultiLine.ServiceCodeTable);
        }
        else if (taxTransInvoice.ServiceCodeTable)
        {
            //Take invoice service code if there is no service code attached to payment
            this.updateServiceCode(relatedVoucher, paymentTrans.TransDate, taxTransInvoice.ServiceCodeTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construst instance of ServiceTaxServiceCodeSelection_IN
    /// </summary>
    /// <param name="_tableId">
    /// The Table id
    /// </param>
    /// <param name="_recId">
    /// The source rec id
    /// </param>
    /// <param name="_invoiceTrans">
    /// The invoice transaction
    /// </param>
    /// <param name="_paymentTrans">
    /// The payment transation
    /// </param>
    /// <returns>
    /// The instance of ServiceTaxServiceCodeSelection_IN
    /// </returns>
    public static ServiceTaxServiceCodeSelection_IN construct(
        TableId       _tableId,
        RefRecId      _recId,
        CustVendTrans _invoiceTrans,
        CustVendTrans _paymentTrans)
    {
        ServiceTaxServiceCodeSelection_IN serviceTaxServiceCodeSelection;

        if (_tableId
            && _invoiceTrans
            && _paymentTrans)
        {
            serviceTaxServiceCodeSelection = new ServiceTaxServiceCodeSelection_IN();
            if (serviceTaxServiceCodeSelection)
            {
                serviceTaxServiceCodeSelection.parmTableId(_tableId);
                serviceTaxServiceCodeSelection.parmRecId(_recId);
                serviceTaxServiceCodeSelection.parmInvoiceTrans(_invoiceTrans);
                serviceTaxServiceCodeSelection.parmPaymentTrans(_paymentTrans);
            }
        }

        return serviceTaxServiceCodeSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstServiceCodeFrmFTI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the service code of the first invoice line by given FTI invoice
    /// </summary>
    /// <param name="_refRecId">
    /// The ref of CustInvoiceTrans
    /// </param>
    /// <returns>
    /// The ref of ServiceCodeTable_IN
    /// </returns>
    public static RefRecId getFirstServiceCodeFrmFTI(RefRecId _refRecId)
    {
        CustInvoiceTrans  custInvoiceTrans;
        CustInvoiceTrans  custInvoiceTransFirst;
        CustInvoiceTrans_IN custInvoiceTrans_IN;

        select RecId from custInvoiceTrans
            where custInvoiceTrans.RecId == _refRecId
            join firstonly RecId from custInvoiceTransFirst
                order by RecId  // Important
                where custInvoiceTransFirst.RecId == custInvoiceTrans.RecId
                    join CustInvoiceTrans, ServiceCodeTable_IN from custInvoiceTrans_IN
                        where custInvoiceTrans_IN.CustInvoiceTrans == custInvoiceTransFirst.RecId
                            && custInvoiceTrans_IN.ServiceCodeTable_IN != 0;

        return custInvoiceTrans_IN.ServiceCodeTable_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstServiceCodeFrmJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the service code of the first invoice line by given Voucher
    /// </summary>
    /// <param name="_invoiceVoucher">
    /// The voucher number
    /// </param>
    /// <param name="_invoiceDate">
    /// The invoice date
    /// </param>
    /// <returns>
    /// The ref of ServiceCodeTable_IN
    /// </returns>
    public static RefRecId getFirstServiceCodeFrmJournal(
        Voucher   _invoiceVoucher,
        TransDate _invoiceDate)
    {
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTrans      ledgerJournalTransFirst;
        TransTaxInformation     transTaxInformation;

        select firstonly JournalNum from ledgerJournalTrans
           where ledgerJournalTrans.Voucher   == _invoiceVoucher
              && ledgerJournalTrans.TransDate == _invoiceDate
           join firstonly ledgerJournalTransFirst
               order by ledgerJournalTransFirst.RecId
                where ledgerJournalTransFirst.JournalNum == ledgerJournalTrans.JournalNum;

        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTransFirst);

        return transTaxInformation.ServiceCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>