<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResProjectResourceDataPopulate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Batch job class to populate project resource data.
/// </summary>
class ResProjectResourceDataPopulate extends SysOperationServiceBase
{
    private ProjOpsFinancialsLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Populate project resource data to <c>ResProjectResource</c> and relevant tables.
    /// </summary>
    public void populateData()
    {
        boolean populateSuccessful = true;
        BatchJob batchJob;
        
        ProjParameters projParameters = ProjParameters::find();
        if (projParameters && projParameters.ResPerfDataUpgradeStatus != ProjDataUpgradeStatus::InProgress)
        {
            try
            {
                ResProjectResourceEventHandler::updatePerfEnhancementStatusField(ProjDataUpgradeStatus::InProgress);
            }
            catch
            {
                populateSuccessful = false;
            }

            if (populateSuccessful)
            {
                try
                {
                    logger = ProjOpsFinancialsLogger::createLogger(classStr(ResProjectResourceDataPopulate));
                    using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity()
                        .activityContext(ProjOpsFinancialsInstrumentationActivites::ResProjectResourceBatchDataPopulate))
                    {
                        ResProjectResourceEventHandler::upgradeActivityTeamTableRootActivityAcrossAllCompanies();
                        ResProjectResourceEventHandler::insertAllResourceRecords();
                        ResProjectResourceEventHandler::updatePerfEnhancementStatusField(ProjDataUpgradeStatus::Completed);

                        this.logExecutionTelemetry(activityContext);
                    }
                }
                catch
                {
                    populateSuccessful = false;
                    System.Exception ex = CLRInterop::getLastException();
                    error(ex.Message);
                }
                finally
                {
                    if (!populateSuccessful)
                    {
                        ResProjectResourceEventHandler::updatePerfEnhancementStatusField(ProjDataUpgradeStatus::NotUpgraded);

                        // reset ttsLevel in case of unbalanced transactions
                        while (appl.ttsLevel() > 0)
                        {
                            ttsAbort;
                        }

                        if (this.isExecutingInBatch())
                        {
                            select firstonly forUpdate Status from batchJob
                                where batchJob.RecId == this.getCurrentBatchTask().BatchJobId;

                            if (batchJob)
                            {
                                ttsBegin;

                                batchJob.Status = BatchStatus::Error;
                                batchJob.update();
                
                                ttsCommit;
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExecutionTelemetry</Name>
				<Source><![CDATA[
    private void logExecutionTelemetry(SysInstrumentationActivityContext _activityContext)
    {
        ResProjectResource projectResources;
        select count(RecId) from projectResources;
        int numOfTotalRecords = int642int(projectResources.RecId);
        str numOfTotalRecordsStr = int2Str(numOfTotalRecords);

        str numOfResourcesStr;
        str numOfSchedulableResourcesStr;
        if (numOfTotalRecords)
        {
            select count(RecId) from projectResources
                where projectResources.SourceCompany == projectResources.RecipientCompany;
            int numOfResources = int642int(projectResources.RecId);
            numOfResourcesStr = int2Str(numOfResources);

            ResCalendarDateTimeRange resCalendarDateTimeRange;
            select count(RecId) from projectResources
                where projectResources.SourceCompany == projectResources.RecipientCompany
            exists join resCalendarDateTimeRange
                where resCalendarDateTimeRange.Resource == projectResources.Resource;
            int numOfSchedulableResources = int642int(projectResources.RecId);
            numOfSchedulableResourcesStr = int2Str(numOfSchedulableResources);
        }

        _activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::ResProjectResourceTotalRecords, numOfTotalRecordsStr);
        _activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::ResProjectResourceTotalResources, numOfResourcesStr);
        _activityContext.addCustomProperty(ProjOpsFinancialsInstrumentationActivites::ResProjectResourceTotalSchedulableResources, numOfSchedulableResourcesStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct <c>ResProjectResourceDataPopulate</c> object.
    /// </summary>
    /// <returns><c>ResProjectResourceDataPopulate</c> object.</returns>
    public static ResProjectResourceDataPopulate construct()
    {
        return new ResProjectResourceDataPopulate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>