<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceQueryDimensionFocusSim_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerBalanceQueryDimensionFocusSim_IT</c> class is used to retrieve a balance from the general
///    ledger by using the dimension focus balances simulations.
/// </summary>
public class LedgerBalanceQueryDimensionFocusSim_IT extends LedgerBalanceQueryBase
{
    public TmpAccountSum tmpAccountSum;
    public AmountMST accountingCurrencyDebitBalance;
    public AmountMST accountingCurrencyCreditBalance;
    public AmountMST reportingCurrencyBalance;
    public Qty quantityBalance;

    // dim hierarchy type cache
    public RefRecId dimAttrValueComboRecId;
    public DimensionHierarchyType dimAttrValueComboHierarchyType;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLedgerDimensionRange</Name>
				<Source><![CDATA[
    private void addLedgerDimensionRange(LedgerDimensionAccount _ledgerDiemension)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the accounting date range to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForAccountingDate(Query _query)
    {
        if (startAccountingDate != dateNull() || endAccountingDate != dateMax())
        {
            QueryBuildDataSource ds = _query.dataSourceTable(tablenum(DimensionFocusBalanceSim_IT));
            QueryBuildRange range = ds.addRange(fieldnum(DimensionFocusBalanceSim_IT, AccountingDate));
            range.value(SysQuery::range(startAccountingDate, endAccountingDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the simulation journal name range to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    ///
    protected void addRangeForJournalName(Query _query)
    {
        if (simulationJournalGroupId_IT)
        {
            QueryBuildDataSource ds = _query.dataSourceTable(tableNum(DimensionFocusBalanceSim_IT));
            SimulationJournalGroupLine_IT simulationJournalGroupLine;
            while select JournalName from simulationJournalGroupLine
                where SimulationJournalGroupLine.SimulationJournalGroupId == simulationJournalGroupId_IT
            {
                ds.addRange(fieldNum(DimensionFocusBalanceSim_IT, SimulationJournalNameId)).value(SimulationJournalGroupLine.JournalName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the general journal account entry ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForLine(Query _query)
    {
        // excluding debits and credits is handled in addToBalanceTotals for a dimension focus
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the fiscal period ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForPeriod(Query _query)
    {

        QueryBuildDataSource ds = _query.dataSourceTable(tablenum(DimensionFocusBalanceSim_IT));

        FiscalCalendarPeriod::addRangeForPeriodType(
            ds,
            fieldNum(DimensionFocusBalanceSim_IT, FiscalCalendarPeriodType),
            includeOpeningPeriod,
            includeOperatingPeriod,
            includeClosingPeriod || includeClosingPeriodBySystem);

        // PostingType range is related to includeClosingPeriodBySystem
        if (includeClosingPeriod != includeClosingPeriodBySystem)
        {
            QueryBuildRange range = ds.addRange(fieldnum(DimensionFocusBalanceSim_IT, IsSystemGeneratedUltimo));

            if (includeClosingPeriod)
            {
                range.value(SysQuery::value(NoYes::No));
            }
            else
            {
                range.value(SysQuery::value(NoYes::Yes));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the posting layer ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForPostingLayer(Query _query)
    {
        QueryBuildDataSource ds = _query.dataSourceTable(tablenum(DimensionFocusBalanceSim_IT));

        GeneralJournalEntry::addRangeForPostingLayer(ds, fieldnum(DimensionFocusBalanceSim_IT, PostingLayer), postingLayer);

        if (postingLayer == OperationsTax::DminusS)
        {
            // add a group by to separate OperationsTax::Current and OperationsTax::Tax
            ds.addGroupByField(fieldnum(DimensionFocusBalanceSim_IT, PostingLayer));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPostingLayerList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the posting layer ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForPostingLayerList(Query _query)
    {
        QueryBuildDataSource ds = _query.dataSourceTable(tablenum(DimensionFocusBalanceSim_IT));

        GeneralJournalEntry::addRangeForPostingLayerList(ds, fieldnum(DimensionFocusBalanceSim_IT, PostingLayer), postingLayerList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToBalanceTotals</Name>
				<Source><![CDATA[
    private void addToBalanceTotals(int _sign, DimensionFocusBalanceSim_IT _dimensionFocusBalanceSim)
    {
        if (excludeDebits)
        {
            accountingCurrencyCreditBalance -= _dimensionFocusBalanceSim.CreditAccountingCurrencyAmount * _sign;
            reportingCurrencyBalance += _dimensionFocusBalanceSim.CreditReportingCurrencyAmount * _sign;
        }
        else if (excludeCredits)
        {
            accountingCurrencyDebitBalance += _dimensionFocusBalanceSim.DebitAccountingCurrencyAmount * _sign;
            reportingCurrencyBalance += _dimensionFocusBalanceSim.DebitReportingCurrencyAmount * _sign;
        }
        else
        {
            if (groupByDate)
            {
                tmpAccountSum.TransDate = _dimensionFocusBalanceSim.AccountingDate;
                tmpAccountSum.Balance01 = (_dimensionFocusBalanceSim.DebitAccountingCurrencyAmount - _dimensionFocusBalanceSim.CreditAccountingCurrencyAmount) * _sign;
                tmpAccountSum.insert();
            }
            else
            {
                // there is no penalty for separating debits and credits in the
                // dimension focus balance tables so don't even check the option
                accountingCurrencyDebitBalance += _dimensionFocusBalanceSim.DebitAccountingCurrencyAmount * _sign;
                accountingCurrencyCreditBalance -= _dimensionFocusBalanceSim.CreditAccountingCurrencyAmount * _sign;
                reportingCurrencyBalance += (_dimensionFocusBalanceSim.DebitReportingCurrencyAmount + _dimensionFocusBalanceSim.CreditReportingCurrencyAmount) * _sign;
            }
        }

        quantityBalance += _dimensionFocusBalanceSim.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForDimAttrValueCombo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the dimension attribute value combination.
    /// </summary>
    /// <param name="_dimAttrValueCombo">
    /// The dimension attribute value combination.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The dimension attribute value combination is null.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The dimension hierarchy for the dimension attribute value combination does not exist.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The type of the dimension hierarchy of the dimension attribute value combination is not focus.
    /// </exception>
    public void calculateForDimAttrValueCombo(DimensionAttributeValueCombination _dimAttrValueCombo)
    {
        if (_dimAttrValueCombo == null)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (dimAttrValueComboRecId != _dimAttrValueCombo.RecId)
        {
            DimensionHierarchy dimHierarchy = DimensionHierarchy::getFirstDimensionHierarchyFromDimensionCombination(_dimAttrValueCombo.RecId);
            if (dimHierarchy == null)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            dimAttrValueComboRecId = _dimAttrValueCombo.RecId;
            dimAttrValueComboHierarchyType = dimHierarchy.StructureType;
        }

        if (dimAttrValueComboHierarchyType != DimensionHierarchyType::Focus)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.resetBalanceTotals();

        Query query = this.createQuery();

        QueryBuildDataSource ds = query.dataSourceTable(tablenum(DimensionFocusBalanceSim_IT));
        QueryBuildRange range = ds.addRange(fieldnum(DimensionFocusBalanceSim_IT, FocusLedgerDimension));
        range.value(SysQuery::value(_dimAttrValueCombo.RecId));

        QueryRun run = new QueryRun(query);

        while (run.next())
        {
            DimensionFocusBalanceSim_IT dimensionFocusBalanceSim = run.get(tablenum(DimensionFocusBalanceSim_IT)) as DimensionFocusBalanceSim_IT;

            int sign = this.getSign(dimensionFocusBalanceSim.PostingLayer, false);

            this.addToBalanceTotals(sign, dimensionFocusBalanceSim);
        }

        if (!groupByDate)
        {
            tmpAccountSum.Txt = _dimAttrValueCombo.DisplayValue;
            tmpAccountSum.Balance01 = accountingCurrencyDebitBalance + accountingCurrencyCreditBalance;
            tmpAccountSum.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForMainAccountRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for a range of main accounts.
    /// </summary>
    /// <param name = "_mainAccounts">A main account range.</param>
    /// <remarks>Use of this method assumes the caller has executed the <c>MainAccount::updateBalances</c> method already.</remarks>
    public void calculateForMainAccountRange(str _mainAccounts)
    {
        if (_mainAccounts == '')
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        DimensionHierarchy mainAccountDimSet = DimensionHierarchy::getMainAccountFocus();
        Query query = this.createQuery();

        QueryBuildDataSource focusBalanceDS = query.dataSourceTable(tableNum(DimensionFocusBalanceSim_IT));
        focusBalanceDS.addRange(fieldNum(DimensionFocusBalanceSim_IT, FocusDimensionHierarchy)).value(SysQuery::value(mainAccountDimSet.RecId));

        QueryBuildDataSource davcDS = focusBalanceDS.addDataSource(tableNum(DimensionAttributeValueCombination));
        davcDS.addLink(fieldNum(DimensionFocusBalanceSim_IT, FocusLedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));

        QueryBuildDataSource mainAccountDS = davcDS.addDataSource(tableNum(MainAccount));
        mainAccountDS.joinMode(JoinMode::ExistsJoin);

        mainAccountDS.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));

        MainAccount::addSecureRangeForChartOfAccounts(mainAccountDS);
        mainAccountDS.addRange(fieldNum(MainAccount, MainAccountId)).value(_mainAccounts);

        this.resetBalanceTotals();

        QueryRun run = new QueryRun(query);
        while (run.next())
        {
            DimensionFocusBalanceSim_IT dimensionFocusBalance = run.get(tablenum(DimensionFocusBalanceSim_IT)) as DimensionFocusBalanceSim_IT;

            int sign = this.getSign(dimensionFocusBalance.PostingLayer, false); // false == Don't invert natural sign

            this.addToBalanceTotals(sign, dimensionFocusBalance);
        }

        tmpAccountSum.Txt = _mainAccounts;
        tmpAccountSum.Balance01 = accountingCurrencyDebitBalance + accountingCurrencyCreditBalance;
        tmpAccountSum.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToBalanceTotalsByRange</Name>
				<Source><![CDATA[
    private void addToBalanceTotalsByRange(str _rangeValue, Query _query, boolean _inverted)
    {
        if (_rangeValue)
        {
            QueryBuildDataSource ds = _query.dataSourceTable(tablenum(DimensionFocusBalanceSim_IT));
            QueryBuildRange range = SysQuery::findOrCreateRange(ds, fieldnum(DimensionFocusBalanceSim_IT, FocusLedgerDimension));
            range.value(_rangeValue);

            QueryRun run = new QueryRun(_query);
            while (run.next())
            {
                DimensionFocusBalanceSim_IT dimensionFocusBalanceSim = run.get(tablenum(DimensionFocusBalanceSim_IT)) as DimensionFocusBalanceSim_IT;

                int sign = this.getSign(dimensionFocusBalanceSim.PostingLayer, _inverted);

                this.addToBalanceTotals(sign, dimensionFocusBalanceSim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRangeValue</Name>
				<Source><![CDATA[
    private str populateRangeValue(
        str _prevStr,
        MainAccount _mainAccount,
        DimensionHierarchy _mainAccountDimSet)
    {
        LedgerDimensionAccount focusLedgerDimension = LedgerBalanceQueryDimensionFocus::getFocusLedgerDimensionForMainAccount(_mainAccount, _mainAccountDimSet);
        str ret = _prevStr;

        if (focusLedgerDimension != 0)
        {
            int previousLength = strLen(ret);

            if (previousLength > 0)
            {
                ret += ' || ';
            }

            ret += strFmt(
                '(%1 == %2)',
                fieldstr(DimensionFocusBalanceSim_IT, FocusLedgerDimension),
                int642str(focusLedgerDimension));

            if (strLen(ret) == previousLength)
            {
                // string is overflowing
                throw error(Error::wrongUseOfFunction(funcname()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeValue</Name>
				<Source><![CDATA[
    private str getRangeValue(MainAccount _mainAccount, boolean _inverted)
    {
        str ret;
        DimensionHierarchy mainAccountDimSet = DimensionHierarchy::getMainAccountFocus();
        DimensionAttribute dimensionAttribute = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));
        DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, _mainAccount.MainAccountId);
        MainAccount mainAccount;
        DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;

        while select mainAccount
                where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    && (mainAccount.Type == DimensionLedgerAccountType::Blank
                        || mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss
                        || mainAccount.Type == DimensionLedgerAccountType::Revenue
                        || mainAccount.Type == DimensionLedgerAccountType::Expense
                        || mainAccount.Type == DimensionLedgerAccountType::BalanceSheet
                        || mainAccount.Type == DimensionLedgerAccountType::Asset
                        || mainAccount.Type == DimensionLedgerAccountType::Liability
                        || mainAccount.Type == DimensionLedgerAccountType::Equity)
            exists join dimAttrValueTotCrit
                where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
                    && dimAttrValueTotCrit.InvertTotalSign == _inverted
                    && dimAttrValueTotCrit.FromValue <= mainAccount.MainAccountId
                    && dimAttrValueTotCrit.ToValue >= mainAccount.MainAccountId
        {
            ret = this.populateRangeValue(
                    ret,
                    mainAccount,
                    mainAccountDimSet);
        }

        if (strLen(ret) > 0)
        {
            ret = strFmt('(%1)', ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the main account.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account for which to calculate the balance.
    /// </param>
    /// <remarks>
    /// Use the <c>getAccountingCurrencyAmount</c> method and the <c>getTmpData</c> method to retrieve the
    /// results.
    /// </remarks>
    public void calculateForMainAccount(MainAccount _mainAccount)
    {
        const boolean NotInverted = false;
        const boolean Inverted = true;

        if (_mainAccount == null)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_mainAccount.LedgerChartOfAccounts != LedgerChartOfAccounts::current())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        str rangeValueInverted = '';
        str rangeValueNotInverted = '';
        // empty means to do nothing

        LedgerDimensionAccount focusLedgerDimension;

        if (_mainAccount.Type == DimensionLedgerAccountType::Total)
        {
            rangeValueNotInverted = this.getRangeValue(_mainAccount, NotInverted);
            rangeValueInverted = this.getRangeValue(_mainAccount, Inverted);
        }
        else
        {
            focusLedgerDimension = LedgerBalanceQueryDimensionFocus::getFocusLedgerDimensionForMainAccount(_mainAccount);

            if (focusLedgerDimension == 0)
            {
                return;
            }

            rangeValueNotInverted = SysQuery::value(focusLedgerDimension);
        }

        Query query = this.createQuery();

        this.resetBalanceTotals();

        this.addToBalanceTotalsByRange(rangeValueNotInverted, query, NotInverted);
        this.addToBalanceTotalsByRange(rangeValueInverted, query, Inverted);

        tmpAccountSum.Txt = _mainAccount.MainAccountId;
        tmpAccountSum.Balance01 = accountingCurrencyDebitBalance + accountingCurrencyCreditBalance;
        tmpAccountSum.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    private Query createQuery()
    {
        Query query = new Query();
        query.addDataSource(tablenum(DimensionFocusBalanceSim_IT));
        QueryBuildDataSource ds = query.dataSourceTable(tablenum(DimensionFocusBalanceSim_IT));

        query.clearGroupBy();

        ds.addSelectionField(fieldnum(DimensionFocusBalanceSim_IT, DebitAccountingCurrencyAmount), SelectionField::Sum);
        ds.addSelectionField(fieldnum(DimensionFocusBalanceSim_IT, CreditAccountingCurrencyAmount), SelectionField::Sum);
        ds.addSelectionField(fieldnum(DimensionFocusBalanceSim_IT, DebitReportingCurrencyAmount), SelectionField::Sum);
        ds.addSelectionField(fieldnum(DimensionFocusBalanceSim_IT, CreditReportingCurrencyAmount), SelectionField::Sum);
        ds.addSelectionField(fieldnum(DimensionFocusBalanceSim_IT, Quantity), SelectionField::Sum);
        ds.addSelectionField(fieldnum(DimensionFocusBalanceSim_IT, PostingLayer), SelectionField::Max);

        this.addRangeForAccountingDate(query);
        if (postingLayerList && postingLayerList.elements() > 0)
        {
            this.addRangeForPostingLayerList(query);
        }
        else
        {
            this.addRangeForPostingLayer(query);
        }
        this.addRangeForPeriod(query);
        this.addRangeForLine(query);
        this.addRangeForJournalName(query);

        QueryBuildRange range = ds.addRange(fieldnum(DimensionFocusBalanceSim_IT, Ledger));
        range.value(SysQuery::value(ledgerRecId));

        if (groupByDate)
        {
            ds.addGroupByField(fieldNum(DimensionFocusBalanceSim_IT, AccountingDate));
        }

        // not supported by the DimensionFocusBalance table
        Debug::assert(!groupByCurrency);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyCreditBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency credit balance.
    /// </summary>
    /// <returns>
    /// The accounting currency credit balance.
    /// </returns>
    public AmountMST getAccountingCurrencyCreditBalance()
    {
        return accountingCurrencyCreditBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyDebitBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency debit balance.
    /// </summary>
    /// <returns>
    /// The accounting currency debit balance.
    /// </returns>
    public AmountMST getAccountingCurrencyDebitBalance()
    {
        return accountingCurrencyDebitBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency balance.
    /// </summary>
    /// <returns>The accounting currency balance.</returns>
    public AmountMST getAccountingCurrencyBalance()
    {
        return accountingCurrencyDebitBalance - accountingCurrencyCreditBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantityBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity balance.
    /// </summary>
    /// <returns>
    /// The quantity balance.
    /// </returns>
    public Qty getQuantityBalance()
    {
        return quantityBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency balance.
    /// </summary>
    /// <returns>
    /// The reporting currency balance.
    /// </returns>
    public AmountMST getReportingCurrencyBalance()
    {
        return reportingCurrencyBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record in the <c>TmpAccountSum</c> table.
    /// </summary>
    /// <returns>
    /// A record in the <c>TmpAccountSum</c> table.
    /// </returns>
    /// <remarks>
    /// This method is compatible with form datasources.
    /// </remarks>
    public TmpAccountSum getTmpData()
    {
        return tmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBalanceTotals</Name>
				<Source><![CDATA[
    private void resetBalanceTotals()
    {
        tmpAccountSum = null;
        accountingCurrencyDebitBalance = 0.0;
        accountingCurrencyCreditBalance = 0.0;
        reportingCurrencyBalance = 0.0;
        quantityBalance = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimHierarchyType</Name>
				<Source><![CDATA[
    public void setDimHierarchyType(RecId _dimAttrValueComboRecId = dimAttrValueComboRecId, DimensionHierarchyType _dimAttrValueComboHierarchyType = dimAttrValueComboHierarchyType)
    {
        dimAttrValueComboRecId = _dimAttrValueComboRecId;
        dimAttrValueComboHierarchyType = _dimAttrValueComboHierarchyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerBalanceQueryDimensionFocusSim_IT construct()
    {
        LedgerBalanceQueryDimensionFocusSim_IT dimensionFocusQuerySim = new LedgerBalanceQueryDimensionFocusSim_IT();

        return dimensionFocusQuerySim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFocusLedgerDimensionForMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger dimension for the main account focus for the main account.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account.
    /// </param>
    /// <param name="_mainAccountDimensionSetHierarchy">
    /// The main account dimension set hierarchy; optional.
    /// </param>
    /// <returns>
    /// The ledger dimension for the main account focus for the main account;
    /// otherwise, an empty ledger dimension.
    /// </returns>
    public static LedgerDimensionAccount getFocusLedgerDimensionForMainAccount(
        MainAccount _mainAccount,
        DimensionHierarchy _mainAccountDimensionSetHierarchy = null)
    {
        LedgerDimensionAccount ret;
        DimensionHierarchy dimHierFocus;

        if (_mainAccountDimensionSetHierarchy == null)
        {
            dimHierFocus = DimensionHierarchy::getMainAccountFocus();

            if (dimHierFocus == null)
            {
                ret = 0;
            }
        }
        else
        {
            dimHierFocus = _mainAccountDimensionSetHierarchy;
        }

        DimensionAttribute dimAttrMainAccount = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

        if (dimAttrMainAccount == null)
        {
            ret = 0;
        }

        DimensionAttributeValue dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimAttrMainAccount, _mainAccount.MainAccountId);

        if (dimAttrValue == null)
        {
            ret = 0;
        }

        if (dimAttrMainAccount
            && dimAttrValue
            && dimHierFocus)
        {
            DimensionStorage dimStorage = DimensionStorage::construct();
            dimStorage.addHierarchy(dimHierFocus.RecId, 1);
            dimStorage.setSegment(1, DimensionStorageSegment::constructFromValue(dimAttrValue.getValue(), dimAttrValue));

            ret = dimStorage.save();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>