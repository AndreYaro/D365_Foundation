<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessBatchKanban</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqEventProcessBatchKanban</c> class enables users to run the processing of events online or in a batch.
/// </summary>
public class ReqEventProcessBatchKanban extends ReqEventProcessBatchKanbanTask implements BatchRetryable
{
    Dialog                      dialog;
    DialogGroup                 kanbanRulesGroup;
    DialogGroup                 numberOfTasksGroup;
    DialogGroup                 sourceRequirementGroup;
    DialogField                 dlfPlanReferenceName;
    DialogField                 dlfPlanActivityId;
    DialogField                 dlfKanbanRuleId;
    DialogField                 dlfSalesId;
    DialogField                 dlfKanbanId;
    DialogField                 dlfNumberOfTasks;
    DialogField                 dlfFilterJobByStatus;

    PlanName                    planReferenceName;
    PlanActivityId              planActivityId;
    LeanReplenishmentRuleId     kanbanRuleId;
    int                         numberOfTasks;
    boolean                     filterByPlannedStatus;
    boolean                     kanbanRulesGroupEnabled;
    boolean                     sourceRequirementsGroupEnabled;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        numberOfTasks,
        filterByPlannedStatus,
        kanbanRulesGroupEnabled,
        sourceRequirementsGroupEnabled
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether the class is shown in the list of batch journal types.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSessionID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the session ID from <c>ReqPeggingEvent</c> records.
    /// </summary>
    protected void clearSessionID()
    {
        ReqPeggingEvent     reqPeggingEvent;

        ttsbegin;
        while select forupdate reqPeggingEvent
            where reqPeggingEvent.SessionId != 0
        {
            if (!isSessionActive(reqPeggingEvent.SessionId,
                                 reqPeggingEvent.SessionLoginDateTime,
                                 true))
            {
                reqPeggingEvent.SessionId            = 0;
                reqPeggingEvent.SessionLoginDateTime = DateTimeUtil::minValue();
                reqPeggingEvent.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the dialog object.
    /// </summary>
    /// <returns>
    ///    A dialog object.
    /// </returns>
    public Object dialog()
    {
        planReferenceName     = kanbanRulesGroupEnabled ? PlanReference::find(planReferenceRefRecId).PlanName : '';
        planActivityId        = kanbanRulesGroupEnabled ? PlanActivity::find(planActivityRefRecId).PlanActivityId : '';
        kanbanRuleId          = kanbanRulesGroupEnabled ? KanbanRule::find(kanbanRuleRefRecId).RuleId : '';
        filterByPlannedStatus = kanbanRulesGroupEnabled && filterByPlannedStatus;

        salesId  = sourceRequirementsGroupEnabled ? salesId : '';
        kanbanId = sourceRequirementsGroupEnabled ? kanbanId : '';

        dialog = super();

        kanbanRulesGroup = dialog.addGroup("@SYS321486");
        kanbanRulesGroup.frameOptionButton(FormFrameOptionButton::Radio);
        kanbanRulesGroup.optionValue(kanbanRulesGroupEnabled || !sourceRequirementsGroupEnabled);

        dlfPlanReferenceName = dialog.addFieldValue(extendedTypeStr(PlanName),planReferenceName,"@SYS131941");
        dlfPlanReferenceName.lookupButton(FormLookupButton::Always);
        kanbanRulesGroup.addFieldname(dlfPlanReferenceName.name());

        dlfPlanActivityId = dialog.addFieldValue(extendedTypeStr(PlanActivityId),planActivityId);
        dlfPlanActivityId.lookupButton(FormLookupButton::Always);
        kanbanRulesGroup.addFieldname(dlfPlanActivityId.name());

        dlfKanbanRuleId = dialog.addFieldValue(extendedTypeStr(LeanReplenishmentRuleId),kanbanRuleId);
        dlfKanbanRuleId.lookupButton(FormLookupButton::Always);
        kanbanRulesGroup.addFieldname(dlfKanbanRuleId.name());

        dlfFilterJobByStatus = dialog.addFieldValue(extendedTypeStr(NoYesId), filterByPlannedStatus, "@SYS4000045", "@SYS4000046");
        kanbanRulesGroup.addFieldname(dlfFilterJobByStatus.name());

        sourceRequirementGroup = dialog.addGroup("@SYS321487");
        sourceRequirementGroup.frameOptionButton(FormFrameOptionButton::Radio);
        sourceRequirementGroup.optionValue(sourceRequirementsGroupEnabled);

        dlfSalesId             = dialog.addFieldValue(extendedTypeStr(SalesId),salesId);
        sourceRequirementGroup.addFieldname(dlfSalesId.name());

        dlfKanbanId = dialog.addFieldValue(extendedTypeStr(KanbanId),kanbanId);
        sourceRequirementGroup.addFieldname(dlfKanbanId.name());

        dialog.addTabPage("@SYS321488");
        numberOfTasksGroup = dialog.addGroup("@SYS321488");
        dlfNumberOfTasks   = dialog.addFieldValue(extendedTypeStr(NumberOf),numberOfTasks);
        dlfNumberOfTasks.label("@SYS321488");
        numberOfTasksGroup.addFieldname(dlfNumberOfTasks.name());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the transaction reversal dialog properties.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>Runbase</c> class dialog object.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld1_1_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup on the plan reference dialog field.
    /// </summary>
    /// <remarks>
    /// The field name is determined by the kernel and cannot change.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fld1_1_lookup()
    {
        FormControl formControl;

        formControl = dlfPlanReferenceName.control();
        PlanReference::lookupPlanType(formControl,PlanTypes::ProductionFlow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld2_1_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup on the plan activity dialog field.
    /// </summary>
    /// <remarks>
    /// The field name is determined by the kernel and cannot change.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fld2_1_lookup()
    {
        PlanName        planNameLocal;
        PlanReference   planReference;
        FormControl     formControl;

        formControl   = dlfPlanActivityId.control();
        planNameLocal = dlfPlanReferenceName.value();

        if (planNameLocal)
        {
            planReference = PlanReference::findPlanName(planNameLocal);
        }

        PlanActivity::lookupPlanActivityType(formControl,[PlanActivityType::Process,PlanActivityType::Transfer],planReference.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld3_1_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup on the kanban rule dialog field.
    /// </summary>
    /// <remarks>
    /// The field name is determined by the kernel and cannot change.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fld3_1_lookup()
    {
        FormControl     formControl;

        formControl = dlfKanbanRuleId.control();
        KanbanRule::lookupRule(formControl,LeanReplenishmentStrategy::Event);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves values from the dialog and sets class variables accordingly.
    /// </summary>
    /// <returns>
    /// true if the method executes successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        kanbanRulesGroupEnabled = kanbanRulesGroup.optionValue();

        if (kanbanRulesGroupEnabled)
        {
            planReferenceName       = dlfPlanReferenceName.value();
            planActivityId          = dlfPlanActivityId.value();
            kanbanRuleId            = dlfKanbanRuleId.value();
            filterByPlannedStatus   = dlfFilterJobByStatus.value();
        }
        else
        {
            planReferenceName       = '';
            planActivityId          = '';
            kanbanRuleId            = '';
            filterByPlannedStatus   = false;
        }

        sourceRequirementsGroupEnabled = sourceRequirementGroup.optionValue();

        if (sourceRequirementsGroupEnabled)
        {
            salesId  = dlfSalesId.value();
            kanbanId = dlfKanbanId.value();
        }
        else
        {
            salesId  = '';
            kanbanId = '';
        }

        numberOfTasks = max(1,dlfNumberOfTasks.value());

        planReferenceRefRecId = planReferenceName ? PlanReference::findPlanName(planReferenceName).RecId : 0;
        planActivityRefRecId  = planActivityId ? PlanActivity::findPlanActivityId(planActivityId).RecId : 0;
        kanbanRuleRefRecId    = kanbanRuleId ? KanbanRule::findRuleId(kanbanRuleId).RecId : 0;

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStockReplenishmentEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds active stock replenishment rules and inserts them into the <c>ReqPeggingEvent</c> table for subsequent processing.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertStockReplenishmentEvents()
    {
        KanbanRule              kanbanRule;
        KanbanRuleVariable      kanbanRuleVariable;
        KanbanRuleEvent         kanbanRuleEvent;
        LeanCoverage            leanCoverage;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        ReqPeggingEvent         reqPeggingEventSelect;
        ReqPeggingEvent         reqPeggingEvent;
        TransDateTime           transDateTime = DateTimeUtil::getSystemDateTime();

        ForecastItemAllocationLine  forecastItemAllocationLine;
        #localMacro.insertPeggingEvent
        while select RecId from kanbanRule
            where kanbanRule.ReplenishmentStrategy == LeanReplenishmentStrategy::Event
                && kanbanRule.LegalEntity           == legalEntity
                && (kanbanRule.RuleId               == kanbanRuleId
                ||  !kanbanRuleId)
            exists join kanbanRuleVariable
                where kanbanRuleVariable.ParentRecId == kanbanRule.RecId
                exists join kanbanRuleEvent
                    where kanbanRuleEvent.ParentRecId             == kanbanRuleVariable.RecId
                        && kanbanRuleEvent.StockReplenishmentEvent == KanbanStockReplenishmentEventType::Batch
            exists join leanCoverageKanbanRule
                where leanCoverageKanbanRule.KanbanRule == kanbanRule.RecId
                    && leanCoverageKanbanRule.ValidFrom  <= transDateTime
                    && (leanCoverageKanbanRule.ValidTo   >= transDateTime
                    ||  !leanCoverageKanbanRule.ValidTo)
                exists join leanCoverage
                    where leanCoverage.RecId            == leanCoverageKanbanRule.Coverage
                            %1
            notexists join reqPeggingEventSelect
                where reqPeggingEventSelect.KanbanRule         == kanbanRule.RecId
                    && reqPeggingEventSelect.PeggingRequirement == 0
            {
                reqPeggingEvent.clear();
                reqPeggingEvent.KanbanRule = kanbanRule.RecId;
                reqPeggingEvent.insert();
            }
        #endMacro

        //skip replenishment events when running just a particular kanban or sales order
        if (!kanbanId && !salesId)
        {
            ttsbegin;
            #insertPeggingEvent(&& leanCoverage.RuleCoverageType == LeanRuleCoverageType::Product)

            #insertPeggingEvent(&& leanCoverage.RuleCoverageType == LeanRuleCoverageType::ProductFamily
                exists join forecastItemAllocationLine
                where forecastItemAllocationLine.AllocationId == leanCoverage.AllocationId
                && forecastItemAllocationLine.ItemId          != '')
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilterByPlannedStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmFilterByPlannedStatus(boolean _filterByPlannedStatus = filterByPlannedStatus)
    {
        filterByPlannedStatus = _filterByPlannedStatus;

        return filterByPlannedStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRuleId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanReplenishmentRuleId parmKanbanRuleId(LeanReplenishmentRuleId _kanbanRuleId = kanbanRuleId)
    {
        kanbanRuleId = _kanbanRuleId;
        return kanbanRuleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfTasks</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmNumberOfTasks(int _numberOfTasks = numberOfTasks)
    {
        numberOfTasks = _numberOfTasks;
        return numberOfTasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanActivityId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivityId parmPlanActivityId(PlanActivityId _planActivityId = planActivityId)
    {
        planActivityId = _planActivityId;
        return planActivityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanReferenceName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanName parmPlanReferenceName(PlanName _planReferenceName = planReferenceName)
    {
        planReferenceName = _planReferenceName;
        return planReferenceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes pending events that match the user specified criteria.
    /// </summary>
    protected void processEvents()
    {
        try
        {
            ttsbegin;
            // cleanup session IDs
            this.clearSessionID();
            //insert events for stock replenishment rules
            this.insertStockReplenishmentEvents();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (this.manageExceptionDeadlock())
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (this.manageExceptionUpdateConflict())
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (this.manageExceptionDuplicateKeyException())
            {
                retry;
            }
        }

        ReqEventProcessBatchKanbanTask              reqEventProcessBatchKanbanTask;
        ReqEventProcessBatchScheduleTask            reqEventProcessBatchScheduleTask = ReqEventProcessBatchScheduleTask::newStandard(true, true, kanbanRuleRefRecId);
        ReqEventProcessBatchDeleteUnusedKanbanTask  reqEventProcessBatchDeleteUnusedKanbanTask = ReqEventProcessBatchDeleteUnusedKanbanTask::newStandard(kanbanId, salesId);
        LeanKanbanJobStatus                         minJobStatus = filterByPlannedStatus ?
                                                                LeanKanbanJobStatus::Planned :
                                                                LeanKanbanJobStatus::NotPlanned;
        
        if (this.isInBatch())
        {
            //distribute to tasks if running in batch
            BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

            batchHeader.addRuntimeTask(reqEventProcessBatchDeleteUnusedKanbanTask, this.parmCurrentBatch().RecId);
            batchHeader.addRuntimeTask(reqEventProcessBatchScheduleTask, this.parmCurrentBatch().RecId);

            batchHeader.addDependency(reqEventProcessBatchScheduleTask, reqEventProcessBatchDeleteUnusedKanbanTask);


            for (int i = 1; i <= max(1,numberOfTasks); i++)
            {
                reqEventProcessBatchKanbanTask = ReqEventProcessBatchKanbanTask::newStandard(planReferenceRefRecId,
                                                                                             planActivityRefRecId,
                                                                                             kanbanRuleRefRecId,
                                                                                             kanbanId,
                                                                                             salesId,
                                                                                             minJobStatus);
                batchHeader.addRuntimeTask(reqEventProcessBatchKanbanTask,this.parmCurrentBatch().RecId);
                batchHeader.addDependency(reqEventProcessBatchScheduleTask, reqEventProcessBatchKanbanTask);
            }

            batchHeader.save();
        }
        else
        {
            //run single threaded
            reqEventProcessBatchKanbanTask = ReqEventProcessBatchKanbanTask::newStandard(planReferenceRefRecId,
                                                                                         planActivityRefRecId,
                                                                                         kanbanRuleRefRecId,
                                                                                         kanbanId,
                                                                                         salesId,
                                                                                         minJobStatus);
            reqEventProcessBatchKanbanTask.runOperation();
            reqEventProcessBatchDeleteUnusedKanbanTask.runOperation();
            reqEventProcessBatchScheduleTask.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the processing results in the <c>Infolog</c>.
    /// </summary>
    /// <remarks>
    ///    Results are reported by the <c>ReqEventProcessBatchKanbanTask</c> class.
    /// </remarks>
    protected void showResults()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         result  = false;
        Integer         version = conPeek(_packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = _packedClass;
                super(base);
                result = true;
                break;
            case 1:
                [version,numberOfTasks,base]   = _packedClass;
                filterByPlannedStatus          = false;
                kanbanRulesGroupEnabled        = true;
                sourceRequirementsGroupEnabled = false;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqEventProcessBatchKanban construct()
    {
        return new ReqEventProcessBatchKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the class description.
    /// </summary>
    /// <returns>
    ///    A descriptive string value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS321498";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqEventProcessBatchKanban  reqEventProcessBatchKanban;

        reqEventProcessBatchKanban = ReqEventProcessBatchKanban::newStandard();
        if (reqEventProcessBatchKanban)
        {
            if (reqEventProcessBatchKanban.prompt())
            {
                reqEventProcessBatchKanban.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ReqEventProcessBatchKanban</c> object.
    /// </summary>
    /// <param name="_planReferenceName">
    ///    A <c>PlanName</c> string identifier that is used as filter when it processes; optional.
    /// </param>
    /// <param name="_planActivityId">
    ///    A <c>PlanActivityId</c> string identifier that is used as filter when it processes; optional.
    /// </param>
    /// <param name="_kanbanRuleId">
    ///    A <c>LeanReplenishmentRuleId</c> string identifier that is used as filter when it processes;
    ///    optional.
    /// </param>
    /// <param name="_kanbanId">
    ///    A <c>KanbanId</c> string identifier that is used as filter when it processes; optional.
    /// </param>
    /// <param name="_salesId">
    ///    A <c>SalesId</c> string identifier that is used as filter when it processes; optional.
    /// </param>
    /// <param name="_numberOfTasks">
    ///    The number of parallel tasks used when it runs as batch jobs.
    /// </param>
    /// <param name="_filterByPlannedStatus">
    ///    A flag indicating if only events related to at least planned jobs should be processed; optional.
    /// </param>
    /// <returns>
    ///    A <c>ReqEventProcessBatchKanban</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessBatchKanban newStandard(
        PlanName                _planReferenceName      = '',
        PlanActivityId          _planActivityId         = '',
        LeanReplenishmentRuleId _kanbanRuleId           = '',
        KanbanId                _kanbanId               = '',
        SalesId                 _salesId                = '',
        int                     _numberOfTasks          = 1,
        boolean                 _filterByPlannedStatus  = false)
    {
        ReqEventProcessBatchKanban  reqEventProcessBatchKanban = ReqEventProcessBatchKanban::construct();

        reqEventProcessBatchKanban.parmPlanReferenceName(_planReferenceName);
        reqEventProcessBatchKanban.parmPlanActivityId(_planActivityId);
        reqEventProcessBatchKanban.parmKanbanRuleId(_kanbanRuleId);
        reqEventProcessBatchKanban.parmKanbanId(_kanbanId);
        reqEventProcessBatchKanban.parmSalesId(_salesId);
        reqEventProcessBatchKanban.parmNumberOfTasks(_numberOfTasks);
        reqEventProcessBatchKanban.parmFilterByPlannedStatus(_filterByPlannedStatus);

        return reqEventProcessBatchKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>