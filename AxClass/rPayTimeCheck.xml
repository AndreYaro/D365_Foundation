<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTimeCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class rPayTimeCheck
{
    TimeOfDay       timeFrom;
    TimeOfDay       timeTo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNotOverlapping</Name>
				<Source><![CDATA[
        private boolean checkNotOverlapping(TimeOfDay _time2From,
                                        TimeOfDay _time2To)
    {
        if (timeTo > _time2From && timeFrom <= _time2From)
        {
            return checkFailed("@RUP305");
        }

        if (timeFrom >= _time2From && timeTo <= _time2To)
        {
            return checkFailed("@RUP305");
        }

        if (timeFrom < _time2To && timeTo >= _time2To)
        {
            return checkFailed("@RUP305");
        }

        if (timeFrom <= _time2From && timeTo >= _time2To)
        {
            return checkFailed("@RUP305");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRecord</Name>
				<Source><![CDATA[
        #define.Value86400(86400)
    private boolean  checkRecord()
    {
        if (timeTo > #Value86400)
        {
            return checkFailed("@SYS8795");
        }

        if (timeFrom == timeTo || timeFrom > timeTo)
        {
            return checkFailed("@SYS8795");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void new(TimeOfDay       _timeFrom,
                    TimeOfDay       _timeTo)
    {
        timeFrom    = _timeFrom;
        timeTo      = _timeTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPayCalendarDateLine</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean checkPayCalendarDateLine(RPayCalendarDateLine _payCalendarDateLine)
    {
        RPayTimeCheck           payTimeCheck = new RPayTimeCheck(_payCalendarDateLine.FromTime,
                                                                 _payCalendarDateLine.ToTime);
        RPayCalendarDateLine    payCalendarDateLine;
        ;

        if (! payTimeCheck.checkRecord())
        {
            return false;
        }

        while select FromTime, ToTime from payCalendarDateLine
            where payCalendarDateLine.CalendarId          == _payCalendarDateLine.CalendarId          &&
                  payCalendarDateLine.TransDate           == _payCalendarDateLine.TransDate           &&
                  payCalendarDateLine.PayCalendarTimeCode == _payCalendarDateLine.PayCalendarTimeCode &&
                  payCalendarDateLine.RecId               != _payCalendarDateLine.RecId
        {
            if (! payTimeCheck.checkNotOverlapping(payCalendarDateLine.FromTime, payCalendarDateLine.ToTime))
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPayTimeLine</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean checkPayTimeLine(RPayTimeLine _payTimeLine)
    {
        RPayTimeCheck           payTimeCheck = new RPayTimeCheck(_payTimeLine.FromTime,
                                                                 _payTimeLine.ToTime);
        RPayTimeLine            payTimeLine;
        ;
        if (! payTimeCheck.checkRecord())
        {
            return false;
        }

        while select FromTime, ToTime from payTimeLine
            where payTimeLine.PayTimeId           == _payTimeLine.PayTimeId           &&
                  payTimeLine.Weekday             == _payTimeLine.Weekday             &&
                  payTimeLine.PayCalendarTimeCode == _payTimeLine.PayCalendarTimeCode &&
                  payTimeLine.RecId               != _payTimeLine.RecId
        {
            if (! payTimeCheck.checkNotOverlapping(payTimeLine.FromTime, payTimeLine.ToTime))
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>