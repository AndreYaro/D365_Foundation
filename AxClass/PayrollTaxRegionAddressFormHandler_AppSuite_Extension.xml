<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollTaxRegionAddressFormHandler_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(PayrollTaxRegionAddressFormHandler))]
public final class PayrollTaxRegionAddressFormHandler_AppSuite_Extension
{
    #PayrollConstants
    private boolean createTaxRegionRecords;         // once address has passed validation this will be set

    private PrlTmpGNIS  tmpGNIS;
    private PayrollGNIS gnisLocation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callerWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the value back to the caller table
    /// </summary>
    public void callerWrite()
    {
        next callerWrite();

        if (callerDS != null)
        {
            this.insertIntoTaxRegionTables();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrlTmpGNISTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the class variable <c>PrlTmpGNIS</c> table buffer.
    /// </summary>
    /// <returns>
    /// A <c>PrlTmpGNIS</c> table buffer.
    /// </returns>
    public PrlTmpGNIS getPrlTmpGNISTmp()
    {
        return tmpGNIS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTaxRegionTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>PayrollTaxRegionForSymmetry</c> table, which also creates a record in
    /// the parent table, <c>PayrollProviderTaxRegion</c>.
    /// </summary>
    private void insertIntoTaxRegionTables()
    {
        PayrollTaxRegionForSymmetry    taxRegionSymmetry;

        ttsbegin;

        if (gnisLocation != '')
        {
            taxRegionSymmetry = PayrollTaxRegionForSymmetry::findByGNIS(gnisLocation);
            if (!taxRegionSymmetry)
            {
                taxRegionSymmetry.gnis = gnisLocation;
                taxRegionSymmetry.TaxRegion = this.getCallerRecord().RecId;
                taxRegionSymmetry.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeMultipleAddressSelectForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>PayrollTaxRegionMultipleAddressSelect</c> form
    /// </summary>
    /// <returns>
    /// The address selected by the form;
    /// </returns>
    private PayrollGNIS invokeMultipleAddressSelectForm()
    {
        Args args = new Args(); 
        args.caller(this);
        gnisLocation = '';
        FormRun formRun = new MenuFunction(menuitemDisplayStr(PayrollTaxRegionMultipleAddressSelect), MenuItemType::Display).create(args);
        formRun.init();
        formRun.run();
        formRun.wait();

        if (formRun.closedOk())
        {
            gnisLocation = formRun.getGNISLocation();
        }

        return gnisLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAddressFieldsWithGNISData</Name>
				<Source><![CDATA[
    private boolean populateAddressFieldsWithGNISData(PayrollGNIS _gnisLocation)
    {
        LogisticsAddressCounty county;
        LogisticsAddressState state;
        
        int infologLines = infologLine();
        QueryRun qr = addressDS.queryRun();

        postalAddress = qr.get(tableNum(LogisticsPostalAddress));

        if (_gnisLocation != '')
        {
            select firstonly * from tmpGNIS
                where tmpGNIS.gnisLocation == _gnisLocation;

            addressDS.object(fieldNum(LogisticsPostalAddress, CountryRegionId)).setValue(tmpGNIS.Country);
            
            select firstonly StateId from state
                where state.CountryRegionId == tmpGNIS.Country
                    && state.Name == tmpGNIS.State;

            addressDS.object(fieldNum(LogisticsPostalAddress, State)).setValue(state.StateId);

            select firstonly CountyId from county
                where county.CountryRegionId == tmpGNIS.Country
                    && county.Name == tmpGNIS.County;
            
            county = LogisticsAddressCounty::findCountyCode(tmpGNIS.Country, tmpGNIS.County);
            addressDS.object(fieldNum(LogisticsPostalAddress, County)).setValue(county.CountyId);
            addressDS.object(fieldNum(LogisticsPostalAddress, City)).setValue(PayrollTaxEngineUtil::getLogisticsCityFromSymmetryCity(tmpGNIS.City));
        }

        return (infologLine() == infoLogLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the address passed in matches to a corresponding GNIS location.
    /// </summary>
    /// <param name="_postalAddressOrig">
    /// This parameter is not used by this overriden method.
    /// </param>
    /// <param name="_postalAddress">
    /// The address to validate.
    /// </param>
    /// <param name="_displayErrors">
    /// The boolean value that determines if a message box is displayed to the user with the errors.
    /// </param>
    /// <returns>
    /// true if the address can be linked to a GNIS location; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A lookup will be launched that will allow the user to select from
    /// multiple GNIS locations if more than 1 GNIS location matches
    /// the address.
    /// </remarks>
    public boolean validatePostalAddress(LogisticsPostalAddress _postalAddressOrig, LogisticsPostalAddress _postalAddress, boolean _displayErrors)
    {
        boolean success = true;
        LogisticsAddressCounty county = LogisticsAddressCounty::findCountyCode(_postalAddress.CountryRegionId, _postalAddress.County);
        LogisticsAddressState state = LogisticsAddressState::find(_postalAddress.CountryRegionId, _postalAddress.State);
        FormRun postalForm = addressDS.formRun();

        ///
        /// The entered address fields are passed to the tax engine which will return a list of matching GNIS records
        ///
        tmpGNIS = PayrollTaxEngineUtil::getGNISLocations(_postalAddress.ZipCode, _postalAddress.State, _postalAddress.City, county.Name);

        gnisLocation = '';
        select count(RecId) from tmpGNIS;
        if (tmpGNIS.RecId == 0)
        {
            if (_displayErrors)
            {
                Box::stop("@Payroll:AValidTaxRegionCouldNotBeIdentifiedFromTheInformationProvide");
            }
            success = false;
        }
        else if (tmpGNIS.RecId > 1)
        {
            gnisLocation = this.invokeMultipleAddressSelectForm();
            if (gnisLocation)
            {
                success = this.populateAddressFieldsWithGNISData(gnisLocation);
            }
            else
            {
                success = false;
            }
            if (!success)
            {
                // we want to return to PayrollTaxRegion form when we do not have
                // a valid value from the multiple tax region form
                postalForm.closeCancel();
            }
        }
        else
        {
            select firstonly tmpGNIS;

            // Default empty values onto the LogisticsPostalAddress form from the selected location
            int infoLogLines = infologLine();

            if (!_postalAddress.CountryRegionId)
            {
                addressDS.object(fieldNum(LogisticsPostalAddress, CountryRegionId)).setValue(tmpGNIS.Country);
            }

            if (!_postalAddress.State)
            {
                select firstonly StateId from state
                    where state.CountryRegionId == tmpGNIS.Country
                        && state.Name == tmpGNIS.State;
                addressDS.object(fieldNum(LogisticsPostalAddress, State)).setValue(state.StateId);
            }

            if (!_postalAddress.County)
            {
                select firstonly CountyId from county
                    where county.CountryRegionId == tmpGNIS.Country
                        && county.Name == tmpGNIS.County;
                addressDS.object(fieldNum(LogisticsPostalAddress, County)).setValue(county.CountyId);
            }

            if (!_postalAddress.City)
            {
                addressDS.object(fieldNum(LogisticsPostalAddress, City)).setValue(PayrollTaxEngineUtil::getLogisticsCityFromSymmetryCity(tmpGNIS.City));
            }

            success = (infoLogLines == infologLine());
            gnisLocation = tmpGNIS.gnisLocation;
        }

        if (success)
        {
            PayrollTaxRegionForSymmetry taxRegionSymmetry = PayrollTaxRegionForSymmetry::findByGNIS(gnisLocation);
            if (taxRegionSymmetry)
            {
                success = false;
                PayrollTaxRegion taxRegion = PayrollTaxRegion::find(taxRegionSymmetry.TaxRegion);
                LogisticsLocation taxRegionLocation = LogisticsLocation::find(taxRegion.LogisticsLocation);
                
                if (_displayErrors)
                {
                    Box::stop(strFmt("@Payroll:TheSelectedLocationIsAlreadyIdentifiedByTaxRegion1", taxRegionLocation.Description));
                }

                /* normally a validateWrite fail will not allow the form to close
                So, explicity call close in this case per FS requirement */
                postalForm.closeCancel();
            }
            else
            {
                // Disable the non-zip code fields
                addressDS.object(fieldNum(LogisticsPostalAddress,City)).enabled(false);
                addressDS.object(fieldNum(LogisticsPostalAddress,State)).enabled(false);
                addressDS.object(fieldNum(LogisticsPostalAddress,County)).enabled(false);
                addressDS.object(fieldNum(LogisticsPostalAddress,CountryRegionId)).enabled(false);
            }
        }
        
        boolean isvalid = next validatePostalAddress(_postalAddressOrig, _postalAddress, _displayErrors);
        success = success && isvalid;   

        // Set flag that indicates whether tax region records should be created for the new location or not
        createTaxRegionRecords = success;

        return success;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>