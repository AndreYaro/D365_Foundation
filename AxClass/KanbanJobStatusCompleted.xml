<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobStatusCompleted</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobStatusCompleted</c> class performs operations for kanban jobs that are in a
///    completed state.
/// </summary>
[LeanKanbanJobStatusFactoryAttribute(LeanKanbanJobStatus::Completed)]
public class KanbanJobStatusCompleted extends KanbanJobStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a kanban job with completed status can be deleted.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean canDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveReceivedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a kanban job can have a received quantity.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean canHaveReceivedQty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveScrapQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a kanban job can have scrap quantity.
    /// </summary>
    /// <returns>
    /// true if the job can have scrap quantity; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The 'end' status can have scrap quantity if the type allows for scrap quantity.
    /// </remarks>
    public boolean canHaveScrapQty()
    {
        return kanbanJob.type().canHaveScrapQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSynchronizeKanbanStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a status update must be synchronized to the parent kanban.
    /// </summary>
    /// <param name="_reset">
    /// A Boolean value that indicates whether the status is reset; optional.
    /// </param>
    /// <returns>
    /// true if the kanban status must be synchronized; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Call this method from an instance that represents the new status.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Cannot reset to final status.
    /// </exception>
    public boolean mustSynchronizeKanbanStatus(boolean _reset = false)
    {
        boolean     result = false;

        if (updateKanban)
        {
            if (_reset)
            {
                //can never happen since 'completed' is the final status. Cannot reset to 'completed'
                throw error(Error::wrongUseOfFunction(funcName()));
            }
            else
            {
                result = !kanbanJob.existLaterJob();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static KanbanJobStatus construct()
    {
        return new KanbanJobStatusCompleted();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>