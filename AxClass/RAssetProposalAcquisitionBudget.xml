<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetProposalAcquisitionBudget</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetProposalAcquisitionBudget extends RAssetproposalAcquisition implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        AmountCur           amountCur;

        runDate = this.checkFirstDate(runDate ? runDate : rAssetTable.AcquisitionDate,
                                      rAssetTable.AccountNum);

        if (! RAssetParameters::find().MultiAcq &&
            RAssetBudgetTrans::findRange(rAssetStandards.AssetId,
                                         this.assetTransType(),
                                         rAssetStandards.AssetStandardId,
                                         rAssetBudgetModelId))
        {
            return;
        }

        if (rAssetStandards.DisposalDate)
            return;

        if (rAssetStandards.Depreciation &&
            rAssetStandards.postingProfile(runDate))
        {
            amountCur = _assetAmount > 0 ? _assetAmount : this.currentAcquisitionValue(_assetStandardId);
            if (amountCur || ! _runFromBatch)
            {
                rAssetJournal.createVoucher();
                rAssetJournal.createTrans(amountCur,
                                          rAssetTable,
                                          runDate,
                                          rAssetStandards,
                                          rAssetBudgetModelId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentAcquisitionValue</Name>
				<Source><![CDATA[
    #define.Value2(2)
    public RAssetAmount currentAcquisitionValue(RAssetStandardId _assetStandardId)
    {
        RAssetAmount    rAssetAmount;
        RAssetScrap     rAssetScrap;

        if (rAssetTable.needAssembling())
        {
            while select * from rAssetScrap
                where rAssetScrap.AssetId    == rAssetTable.AccountNum
                   && rAssetScrap.Assembling == NoYes::Yes
                   && ! rAssetScrap.TransDate
            {
                 rAssetAmount += conPeek(InventTrans::calcCostValue(InventTransOriginRAssetScrap_RU::findInventTransOriginId(
                                                                        rAssetScrap.RecId)), #Value2) * -1;
            }

            rAssetAmount = CurrencyExchangeHelper::curAmount2CurAmount(rAssetAmount, CompanyInfoHelper::standardCurrency(), rAssetStandards.CurrencyCode, runDate);
        }
        else
        {
            rAssetAmount = rAssetStandards.AcquisitionPrice;
        }

        rAssetAmount = RAssetProposal::roundAmount(_assetStandardId,
                                                   rAssetTable,
                                                   runDate,
                                                   rAssetAmount,
                                                   rAssetStandards.CurrencyCode);

        return rAssetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _queryRun = queryRun)
    {
        _queryRun.query().dataSourceName(tableStr(RAssetTable)).addRange(fieldNum(RAssetTable, Status)).value(queryValue(RAssetStatus::Lended));
        super(_queryRun);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
