<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobPickingListCalcConsumption</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KsnbanJobPickingListCalcConsumption</c> class calculates the final inventory quantity when
///    the picking list line is physically updated.
/// </summary>
public class KanbanJobPickingListCalcConsumption
{
    KanbanJob           kanbanJobReported;
    Kanban              kanbanOwnerOfPickingList;
    RecordSortedList    listKanbanJobPickingListRecalculated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the final inventory consumption quantity for a picking list line.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    /// A <c>KanbanJobPickingList</c> record.
    /// </param>
    /// <returns>
    /// The inventory quantity to use on physical update of the line.
    /// </returns>
    public InventQty calculateConsumption(KanbanJobPickingList _kanbanJobPickingList)
    {
        KanbanJobPickingList    kanbanJobPickingListConsumption;

        if (this.mustRecalcConsumption(_kanbanJobPickingList))
        {
            if (this.totalReportedJobQuantity(_kanbanJobPickingList) > 0)
            {
                kanbanJobPickingListConsumption = this.kanbanJobPickingListReCalculated(_kanbanJobPickingList);
            }
            else
            {
                kanbanJobPickingListConsumption.data(_kanbanJobPickingList);
                kanbanJobPickingListConsumption.Quantity               = 0;
                kanbanJobPickingListConsumption.QuantityExcludingScrap = 0;
            }
        }
        else
        {
            kanbanJobPickingListConsumption = _kanbanJobPickingList;
        }

        return _kanbanJobPickingList.mustRegisterScrap() ? kanbanJobPickingListConsumption.Quantity : kanbanJobPickingListConsumption.QuantityExcludingScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJobPickingListReCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>KanbanJobPickingList</c> record that holds the recalculated quantity.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    /// The original <c>KanbanJobPickingList</c> record.
    /// </param>
    /// <returns>
    /// A <c>KanbanJobPickingList</c> record.
    /// </returns>
    protected KanbanJobPickingList kanbanJobPickingListReCalculated(KanbanJobPickingList _kanbanJobPickingList)
    {
        KanbanJobPickingList                kanbanJobPickingListRecalculated;
        KanbanJobPickingList                kanbanJobPickingList = _kanbanJobPickingList;

        if (!listKanbanJobPickingListRecalculated)
        {
            //recalculate pickinglist quantities reported quantity
            KanbanJobPickingListCreateAsList kanbanJobPickingListCreateAsList = KanbanJobPickingListCreateAsList::newStandard(kanbanJobReported,
                                                                                                                              kanbanOwnerOfPickingList,
                                                                                                                              this.totalReportedJobQuantity(_kanbanJobPickingList),
                                                                                                                              true);
            listKanbanJobPickingListRecalculated = kanbanJobPickingListCreateAsList.kanbanJobPickingListAsList();
        }

        //find in recordSortedList
        kanbanJobPickingListRecalculated.Job = _kanbanJobPickingList.Job;
        kanbanJobPickingListRecalculated.bom = _kanbanJobPickingList.bom;
        if (listKanbanJobPickingListRecalculated.find(kanbanJobPickingListRecalculated))
        {
            kanbanJobPickingList = kanbanJobPickingListRecalculated;
        }

        return kanbanJobPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRecalcConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the picking list quantity must be recalculated on physical update.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    /// The <c>KanbanJobPickingList</c> record to check.
    /// </param>
    /// <returns>
    /// true if the quantity must be recalculated; otherwise, false.
    /// </returns>
    protected boolean mustRecalcConsumption(KanbanJobPickingList _kanbanJobPickingList)
    {
        return    _kanbanJobPickingList.canRecalcConsumption()
               && this.totalReportedJobQuantity(_kanbanJobPickingList) != this.totalExpectedJobQuantity(_kanbanJobPickingList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobOwnerOfPickingList</Name>
				<Source><![CDATA[
        public KanbanJob parmKanbanJobOwnerOfPickingList(
        KanbanJob _kanbanJobOwnerOfPickingList
        )
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobReported</Name>
				<Source><![CDATA[
        public KanbanJob parmKanbanJobReported(KanbanJob _kanbanJobReported = kanbanJobReported)
    {
        kanbanJobReported = _kanbanJobReported;
        return kanbanJobReported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanOwnerOfPickingList</Name>
				<Source><![CDATA[
        public Kanban parmKanbanOwnerOfPickingList(Kanban _kanbanOwnerOfPickingList = kanbanOwnerOfPickingList)
    {
        kanbanOwnerOfPickingList = _kanbanOwnerOfPickingList;
        return kanbanOwnerOfPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalExpectedJobQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that is expected to be consumed for a given kanban job picking list line.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    /// The kanban job picking list line.
    /// </param>
    /// <returns>
    /// The quantity that is expected to be consumed for the picking list line.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method was called by using an unknown flushing principle.
    /// </exception>
    protected InventQty totalExpectedJobQuantity(KanbanJobPickingList _kanbanJobPickingList)
    {
        InventQty   totalQty;

        switch (_kanbanJobPickingList.FlushingPrinciple)
        {
            case FlushingPrincipKanban::Prepare:
            case FlushingPrincipKanban::End:
                // expect the original ordered quantity
                totalQty = kanbanOwnerOfPickingList.QuantityOrdered;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalReportedJobQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that is reported a given kanban job picking list line.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    /// The kanban job picking list line.
    /// </param>
    /// <returns>
    /// The quantity that is reported for the picking list line.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method was called by using an unknown flushing principle.
    /// </exception>
    protected InventQty totalReportedJobQuantity(KanbanJobPickingList _kanbanJobPickingList)
    {
        InventQty   totalQty;

        switch (_kanbanJobPickingList.FlushingPrinciple)
        {
            case FlushingPrincipKanban::Prepare:
                totalQty = kanbanJobReported.QuantityOrdered;
                break;
            case FlushingPrincipKanban::End:
                totalQty =   kanbanJobReported.QuantityReceived
                           + kanbanJobReported.QuantityScrapped;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanJobPickingListCalcConsumption construct()
    {
        return new KanbanJobPickingListCalcConsumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanJobPickingListCalcConsumption</c> class.
    /// </summary>
    /// <param name="_kanbanJobReported">
    ///    The kanban job that is being reported.
    /// </param>
    /// <param name="_kanbanOwnerOfPickingList">
    ///    The kanban that owns the picking list.
    /// </param>
    /// <returns>
    ///    A <c>KanbanJobPickingListCalcConsumption</c> object.
    /// </returns>
    /// <remarks>
    /// The method signature has changed so that the kanban that owns the picking list must be passed instead of the job.
    /// </remarks>
    public static KanbanJobPickingListCalcConsumption newStandard(
        KanbanJob _kanbanJobReported,
        Kanban    _kanbanOwnerOfPickingList
        )
    {
        KanbanJobPickingListCalcConsumption kanbanJobPickingListCalcConsumption = KanbanJobPickingListCalcConsumption::construct();
        kanbanJobPickingListCalcConsumption.parmKanbanJobReported(_kanbanJobReported);
        kanbanJobPickingListCalcConsumption.parmKanbanOwnerOfPickingList(_kanbanOwnerOfPickingList);

        return kanbanJobPickingListCalcConsumption;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
