<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupService</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimLPCleanupService
{
    protected SysGuidString  sessionId;
    private ToDate           toDate;
    private NoYes            updateRefTable;
    private InventSiteId     inventSiteId;
    private InventLocationId inventLocationId;
    private Batch            batch;
    private BatchHeader      batchHeader;
    private InventInstrumentationLogger logger;

    private static boolean separateUpdateFlightEnabled = InventDimLPCleanupBundleUpdateRefTablesFlight::instance().isEnabled()
                                                      && InventDimLPCleanupSeparateUpdateRefTableFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSessionId</Name>
				<Source><![CDATA[
    public SysGuidString parmSessionId(SysGuidString _sessionId = sessionId)
    {
        sessionId = _sessionId;
        return sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCleanupToDate</Name>
				<Source><![CDATA[
    public ToDate parmCleanupToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateRefTable</Name>
				<Source><![CDATA[
    public NoYes parmUpdateRefTable(NoYes _updateRefTable = updateRefTable)
    {
        updateRefTable = _updateRefTable;
        return updateRefTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDummyLPForCleanup</Name>
				<Source><![CDATA[
    public static WHSLicensePlateId getDummyLPForCleanup()
    {
        const WHSLicensePlateId dummyLP = 'DummyLPCleanup';
        return dummyLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSystem</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    protected void checkSystem()
    {
        batch = BatchHeader::getCurrentBatchTask();

        if (!batch)
        {
            throw error("@DataExpTool:ErrMsg_BatchJobSelect_1");
        }

        batchHeader = BatchHeader::construct(batch.BatchJobId);

        if (!batchHeader)
        {
            throw error("@DataExpTool:ErrMsg_BatchHeaderSelect_1");
        }

        if (InventTransArchiveService::existsNotFinishedInventTransArchiving()
            || InventTransArchiveService::existsAnotherInventTransArchivingJobRunning())
        {
            throw error("@SCM:AnotherTransArchivingNotFinished");
        }

        if (InventDimLPCleanupJob::existsNotFinishedInventDimLPCleanupJob()
            || InventDimLPCleanupService::existsAnotherInventDimLPCleanupJobRunning(batch.RecId))
        {
            throw error("@SCM:InventDimLPCleanupAnotherJobNotFinished");
        }

        if (InventDimLPCleanupService::existsInventUnusedDimCleanUpJobRunning())
        {
            throw error("@SCM:InventUnusedDimCleanupJobNotFinished");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareCleanupTasks</Name>
				<Source><![CDATA[
    public void prepareCleanupTasks(InventDimLPCleanupContract _contract)
    {
        #OCCRetryCount

        if (appl.ttsLevel() > 0)
        {
            throw error(strFmt("@SYS118114", funcName()));
        }

        this.checkSystem();
        this.parmCleanupToDate(_contract.parmToDate());
        this.parmUpdateRefTable(separateUpdateFlightEnabled ? _contract.parmUpdateRefTable() : NoYes::Yes);
        boolean isQueryRangeFlightEnabled = InventDimLPCleanupUIQureyRangeFlight::instance().isEnabled();
        this.parmInventSiteId(isQueryRangeFlightEnabled ? _contract.parmInventSiteId(): '');
        this.parmInventLocationId(isQueryRangeFlightEnabled ? _contract.parmInventLocationId(): '');

        int64 numberOfRecordsToProcess;
        sessionId = guid2Str(newGuid());

        InventDimLPCleanupJob cleanupJob = InventDimLPCleanupJob::create(toDate, sessionId, inventSiteId, inventLocationId, updateRefTable);

        try
        {
            logger = InventInstrumentationLogger::createLogger(classStr(InventDimLPCleanupService));
            using (var activityContext = logger.inventDimLPCleanupService().logMeasure(funcName()))
            {
                logger.inventDimLPCleanupService().logSessionId(activityContext, sessionId, batch.BatchJobId);
                numberOfRecordsToProcess = InventDimLPCleanupService::prepareInventDimLPCleanupTask(toDate, sessionId, inventSiteId, inventLocationId);
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                this.handleError();
                throw;
            }
        }

        if (numberOfRecordsToProcess)
        {
            try
            {
                numberOfRecordsToProcess -= this.deleteTasksNotMatchCriteria(sessionId);
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    this.handleError();
                    throw;
                }
            }
        }

        if (numberOfRecordsToProcess)
        {
            ttsbegin;
            cleanupJob.RecordCount = numberOfRecordsToProcess;
            cleanupJob.Status = InventDimLPCleanupStatus::Ready;
            cleanupJob.update();
            ttscommit;

            this.runBatch();
        }
        else
        {
            info(strFmt("@SCM:NoInventDimLPRecord", toDate));
            if (InventDimLPCleanupBatchTaskMergeFlight::instance().isEnabled())
            {
                ttsbegin;
                cleanupJob.StopRunning = NoYes::No;
                cleanupJob.Status = InventDimLPCleanupStatus::Complete;
                cleanupJob.update();
                ttscommit;
            }
            else
            {
                InventDimLPCleanupUpdateStatusTask::newFromParameters(sessionId).runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareInventDimLPCleanupTask</Name>
				<Source><![CDATA[
    internal static int64 prepareInventDimLPCleanupTask(ToDate _toDate, SysGuidString _sessionId, InventSiteId _inventSiteId, InventLocationId _inventLocationId)
    {
        InventDimLPCleanupTask  inventDimLPCleanupTask;
        InventDim               inventDim;
        InventSum               inventSum;
        int64                   recordsCount;

        const InventDimLPCleanupStatus status  = InventDimLPCleanupStatus::Ready;
        WHSLicensePlateId licensePlateId       = InventDimLPCleanupService::getDummyLPForCleanup();
        ToDateTime   toDateTime                = DateTimeUtil::newDateTime(_toDate, 86400);
        boolean isQueryRangeFlightEnabled = InventDimLPCleanupUIQureyRangeFlight::instance().isEnabled();

        if (InventDimLPCleanupUserLocationFlight::instance().isEnabled())
        {
            WMSLocation userLocation;
            WHSUserLocType userLoc = WHSParameters::find().UserLocType;

            insert_recordset inventDimLPCleanupTask(LicensePlateId, InventDimId, CleanupStatus, SessionId)
                select LicensePlateId, inventDimId, status, _sessionId from inventDim
                    order by inventDim.LicensePlateId, inventDim.InventSiteId, inventDim.InventLocationId
                    where inventDim.LicensePlateId != ''
                       && inventDim.LicensePlateId != licensePlateId
                       && inventDim.CreatedDateTime < toDateTime
                       && (isQueryRangeFlightEnabled && (!_inventSiteId     || (_inventSiteId     && inventDim.InventSiteId == _inventSiteId)))
                       && (isQueryRangeFlightEnabled && (!_inventLocationId || (_inventLocationId && inventDim.InventLocationId == _inventLocationId)))
                    exists join userLocation
                    where inventDim.InventLocationId == userLocation.inventLocationId
                       && inventDim.wMSLocationId    == userLocation.wMSLocationId
                       && userLocation.LocProfileId  == userLoc;

            recordsCount = inventDimLPCleanupTask.RowCount();

            // Considering that the same license plate ids maybe used across different Site/Warehouse, add InventDimId used in other dimensions as well
            if (isQueryRangeFlightEnabled && (_inventSiteId || _inventLocationId))
            {
                InventDimLPCleanupTask inventDimLPCleanupTaskExisted;
                insert_recordset inventDimLPCleanupTask(LicensePlateId, InventDimId, CleanupStatus, SessionId)
                select LicensePlateId, inventDimId, status, _sessionId from inventDim
                    order by inventDim.LicensePlateId, inventDim.InventSiteId, inventDim.InventLocationId
                    where inventDim.CreatedDateTime < toDateTime
                       && (!_inventSiteId     || (_inventSiteId     && inventDim.InventSiteId != _inventSiteId))
                       && (!_inventLocationId || (_inventLocationId && inventDim.InventLocationId != _inventLocationId))
                    join inventDimLPCleanupTaskExisted
                    where inventDim.LicensePlateId == inventDimLPCleanupTaskExisted.LicensePlateId
                       && inventDim.inventDimId    != inventDimLPCleanupTaskExisted.InventDimId
                    exists join userLocation
                    where inventDim.InventLocationId == userLocation.inventLocationId
                       && inventDim.wMSLocationId    == userLocation.wMSLocationId
                       && userLocation.LocProfileId  == userLoc;

                recordsCount += inventDimLPCleanupTask.RowCount();
            }

            delete_from inventDimLPCleanupTask
                where inventDimLPCleanupTask.SessionId == _sessionId
                exists join inventSum
                where inventSum.inventDimId            == inventDimLPCleanupTask.inventDimId
                   && inventSum.ClosedQty              == NoYes::No;

            recordsCount -= inventDimLPCleanupTask.RowCount();
        }
        else
        {
            insert_recordset inventDimLPCleanupTask(LicensePlateId, InventDimId, CleanupStatus, SessionId)
                select LicensePlateId, inventDimId, status, _sessionId from inventDim
                    order by inventDim.LicensePlateId, inventDim.InventSiteId, inventDim.InventLocationId
                    where inventDim.LicensePlateId != ''
                       && inventDim.LicensePlateId != licensePlateId
                       && inventDim.CreatedDateTime < toDateTime
                       && (isQueryRangeFlightEnabled && (!_inventSiteId     || (_inventSiteId     && inventDim.InventSiteId == _inventSiteId)))
                       && (isQueryRangeFlightEnabled && (!_inventLocationId || (_inventLocationId && inventDim.InventLocationId == _inventLocationId)))
                    notexists join inventSum
                    where inventSum.inventDimId == inventDim.inventDimId
                       && inventSum.ClosedQty == NoYes::No;

            recordsCount = inventDimLPCleanupTask.RowCount();

            // Considering that the same license plate ids maybe used across different Site/Warehouse, add InventDimId used in other dimensions as well
            if (isQueryRangeFlightEnabled && (_inventSiteId || _inventLocationId))
            {
                InventDimLPCleanupTask inventDimLPCleanupTaskExisted;
                insert_recordset inventDimLPCleanupTask(LicensePlateId, InventDimId, CleanupStatus, SessionId)
                    select LicensePlateId, inventDimId, status, _sessionId from inventDim
                        order by inventDim.LicensePlateId, inventDim.InventSiteId, inventDim.InventLocationId
                        where inventDim.CreatedDateTime < toDateTime
                           && (!_inventSiteId     || (_inventSiteId     && inventDim.InventSiteId != _inventSiteId))
                           && (!_inventLocationId || (_inventLocationId && inventDim.InventLocationId != _inventLocationId))
                    join inventDimLPCleanupTaskExisted
                        where inventDim.LicensePlateId == inventDimLPCleanupTaskExisted.LicensePlateId
                           && inventDim.inventDimId    != inventDimLPCleanupTaskExisted.InventDimId
                    notexists join inventSum
                        where inventSum.inventDimId == inventDim.inventDimId
                           && inventSum.ClosedQty == NoYes::No;

                recordsCount += inventDimLPCleanupTask.RowCount();
            }
        }

        return recordsCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTasksNotMatchCriteria</Name>
				<Source><![CDATA[
    private int64 deleteTasksNotMatchCriteria(SysGuidString _sessionId)
    {
        InventDimLPCleanupTask inventDimLPCleanupTask;
        int64 deletedRecordsCnt = 0;

        WHSInventoryTransaction whsInventoryTransaction;
        delete_from inventDimLPCleanupTask
            where inventDimLPCleanupTask.SessionId       == _sessionId
            exists join whsInventoryTransaction
            where whsInventoryTransaction.LicensePlateId == inventDimLPCleanupTask.LicensePlateId;

        deletedRecordsCnt += inventDimLPCleanupTask.RowCount();
            
        WHSLicensePlate whsLicensePlate;
        delete_from inventDimLPCleanupTask
            where inventDimLPCleanupTask.SessionId   == _sessionId
            exists join whsLicensePlate
            where whsLicensePlate.LicensePlateParent == inventDimLPCleanupTask.LicensePlateId;

        deletedRecordsCnt += inventDimLPCleanupTask.RowCount();

        WHSWorkLineCycleCount whsWorkLineCycleCount;
        delete_from inventDimLPCleanupTask
            where inventDimLPCleanupTask.SessionId    == _sessionId
            exists join whsWorkLineCycleCount
            where  whsWorkLineCycleCount.InventDimId  == inventDimLPCleanupTask.InventDimId
                && whsWorkLineCycleCount.AcceptReject == WHSAcceptReject::None;

        deletedRecordsCnt += inventDimLPCleanupTask.RowCount();

        WHSInventReserve whsInventReserve;
        delete_from inventDimLPCleanupTask
            where inventDimLPCleanupTask.SessionId == _sessionId
            exists join whsInventReserve
            where whsInventReserve.InventDimId     == inventDimLPCleanupTask.InventDimId
               && (whsInventReserve.AvailOrdered   != 0 || whsInventReserve.CWAvailOrdered   != 0
                || whsInventReserve.AvailPhysical  != 0 || whsInventReserve.CWAvailPhysical  != 0
                || whsInventReserve.ReservOrdered  != 0 || whsInventReserve.CWReservOrdered  != 0
                || whsInventReserve.ReservPhysical != 0 || whsInventReserve.CWReservPhysical != 0);

        deletedRecordsCnt += inventDimLPCleanupTask.RowCount();

        whsInventReserve.clear();
        delete_from inventDimLPCleanupTask
            where inventDimLPCleanupTask.SessionId == _sessionId
            exists join whsInventReserve
            where whsInventReserve.ParentInventDimId == inventDimLPCleanupTask.InventDimId
               && (whsInventReserve.AvailOrdered   != 0 || whsInventReserve.CWAvailOrdered   != 0
                || whsInventReserve.AvailPhysical  != 0 || whsInventReserve.CWAvailPhysical  != 0
                || whsInventReserve.ReservOrdered  != 0 || whsInventReserve.CWReservOrdered  != 0
                || whsInventReserve.ReservPhysical != 0 || whsInventReserve.CWReservPhysical != 0);

        deletedRecordsCnt += inventDimLPCleanupTask.RowCount();

        InventTrans inventTrans;
        delete_from inventDimLPCleanupTask
            where inventDimLPCleanupTask.SessionId == _sessionId
            exists join inventTrans
            where inventTrans.InventDimId   == inventDimLPCleanupTask.InventDimId
                && ((inventTrans.StatusIssue != StatusIssue::Sold && inventTrans.StatusReceipt == StatusReceipt::None)
                || (inventTrans.StatusIssue == StatusIssue::None && inventTrans.StatusReceipt != StatusReceipt::Purchased));

        deletedRecordsCnt += inventDimLPCleanupTask.RowCount();

        inventTrans.clear();
        delete_from inventDimLPCleanupTask
            where inventDimLPCleanupTask.SessionId == _sessionId
            exists join inventTrans
            where inventTrans.InventDimId      == inventDimLPCleanupTask.InventDimId
                && inventTrans.ModifiedDateTime  > DateTimeUtil::addDays(DateTimeUtil::utcNow(), -180);

        deletedRecordsCnt += inventDimLPCleanupTask.RowCount();

        return deletedRecordsCnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBatch</Name>
				<Source><![CDATA[
    internal void runBatch()
    {
        InventDimLPCleanupJob cleanupJob = InventDimLPCleanupJob::findBySessionId(sessionId);
        if (cleanupJob.StopRunning == NoYes::No)
        {
            InventDimLPCleanupService::createBatchTasks(batchHeader, batch, sessionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchTasks</Name>
				<Source><![CDATA[
    internal static void createBatchTasks(BatchHeader _batchHeader, Batch _currentBatch, SysGuidString _sessionId)
    {
        if (!_batchHeader)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        RunBaseBatch runBaseBatchTask = inventDimLPCleanupProcessTask::newFromParameters(_sessionId);

        runBaseBatchTask.batchInfo().parmGroupId(_currentBatch.GroupId);
        _batchHeader.addRuntimeTask(runBaseBatchTask, _currentBatch.BatchJobId);
        
        if (!InventDimLPCleanupBatchTaskMergeFlight::instance().isEnabled())
        {
            // Allow inventory dimensions cleanup task can be resumed and stopped, so batch job can be finished with ended status
            // even dependency job finished with error status.
            RunBaseBatch updateStatusTask = InventDimLPCleanupUpdateStatusTask::newFromParameters(_sessionId);
            updateStatusTask.batchInfo().parmGroupId(_currentBatch.GroupId);
            _batchHeader.addRuntimeTask(updateStatusTask, _currentBatch.BatchJobId);
            _batchHeader.addDependency(updateStatusTask, runBaseBatchTask, BatchDependencyStatus::FinishedOrError);
        }

        _batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleError</Name>
				<Source><![CDATA[
    private void handleError()
    {
        ttsbegin;
        InventDimLPCleanupJob cleanupJob = InventDimLPCleanupJob::findBySessionId(sessionId, true);
        cleanupJob.StopRunning = NoYes::Yes;
        cleanupJob.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnotherInventDimLPCleanupJobRunning</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    internal static boolean existsAnotherInventDimLPCleanupJobRunning(RecId _batchRecId = 0)
    {
        Batch    batchCheck;
        BatchJob batchJob;

        select firstOnly RecId from batchJob
            exists join batchCheck
            where batchCheck.BatchJobId   == batchJob.RecId
               && (batchCheck.Status      == BatchStatus::Executing || batchCheck.Status == BatchStatus::Waiting)
               && batchCheck.Company      == curext()
               && (!_batchRecId           || batchCheck.RecId != _batchRecId)
               && (batchCheck.ClassNumber == classNum(InventDimLPCleanupController)
                || batchCheck.ClassNumber == classNum(InventDimLPCleanupResume)
                || batchCheck.ClassNumber == classNum(InventDimLPCleanupProcessTask)
                || (batchCheck.ClassNumber == classNum(InventDimLPCleanupUpdateRefTable) && separateUpdateFlightEnabled)
                || (batchCheck.ClassNumber == classNum(InventDimLPCleanupUpdateStatusTask)
                    && !InventDimLPCleanupBatchTaskMergeFlight::instance().isEnabled()));

        return batchJob.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsInventUnusedDimCleanUpJobRunning</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    internal static boolean existsInventUnusedDimCleanUpJobRunning()
    {
        Batch    batchCheck;
        BatchJob batchJob;

        select firstOnly RecId from batchJob
            exists join batchCheck
            where batchCheck.BatchJobId  == batchJob.RecId
               && batchCheck.Status      == BatchStatus::Executing
               && batchCheck.Company     == curext()
               && batchCheck.ClassNumber == classNum(InventUnusedDimCleanUp);

        return batchJob.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>