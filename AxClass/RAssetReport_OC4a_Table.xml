<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC4a_Table</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_OC4a_Table extends RAssetReport_OC4_Base
{
    protected LedgerAccount controlAccount;
    protected real useValue;
    protected real useValueFromLastRepairs;
    protected date dtRevaluationLast;
    protected DialogField assetStandardField;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalFields</Name>
				<Source><![CDATA[
    public container additionalFields()
    {
        return super() + [fieldNum(RAssetDocument, StandardId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateRecord</Name>
				<Source><![CDATA[
    public boolean canCreateRecord()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret = super();

        if (!rAssetStandards.DisposalDate)
        {
            ret = checkFailed("@GLS116984");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cntScrapRowIntoReport</Name>
				<Source><![CDATA[
    protected Integer cntScrapRowIntoReport()
    {
        const int cntScrapRowIntoReport = 6;

        return cntScrapRowIntoReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    protected str comment()
    {
        return "@GLS116493";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog dlg = super();
        this.documentDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrintIfSingle</Name>
				<Source><![CDATA[
    public boolean doPrintIfSingle()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetName</Name>
				<Source><![CDATA[
    protected TempStr getAssetName()
    {
        return this.mergeStr(rAssetTable.Name, rAssetTable.Model);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    protected boolean getFromDialog()
    {
        super();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRAssetDocument</Name>
				<Source><![CDATA[
    public void initFromRAssetDocument(RAssetDocument _document)
    {
        super(_document);

        rAssetStandards = _document.findStandards();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReport</Name>
				<Source><![CDATA[
    protected boolean initReport()
    {
        boolean ret = super();

        select firstonly rAssetTrans
            order by TransDate desc
            where rAssetTrans.AccountNum == rAssetStandards.AssetId
                && rAssetTrans.AssetStandardId == rAssetStandards.AssetStandardId
                && (rAssetTrans.AssetTransType == RAssetTransType::Disposal
                    || rAssetTrans.AssetTransType == RAssetTransType::DisposalSale
                    || rAssetTrans.AssetTransType == RAssetTransType::DisposalScrap)
                && !rAssetTrans.StornoRecId;

        if (ret)
        {
            dtRevaluationLast = this.dateRevaluationLast(this.transDate() - 1);
            
            RAssetUse rAssetUse;
            select sum(UseValue) from rAssetUse
                where rAssetUse.AssetId == rAssetTable.AccountNum;

            useValue = rAssetUse.UseValue;

            select sum(UseValue) from rAssetUse
                where rAssetUse.AssetId == rAssetTable.AccountNum
                    && rAssetUse.UseDate > dtRevaluationLast;

            useValueFromLastRepairs = rAssetUse.UseValue;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStructScrapBlokCoordinate</Name>
				<Source><![CDATA[
    protected Struct initStructScrapBlokCoordinate()
    {
        Struct struct = super();

        struct.value(RowNumber, 20);
        struct.value(ScrapDocNumber, 'AK');
        struct.value(ScrapItemName, 'AR');
        struct.value(ScrapItemID, 'AZ');
        struct.value(Unit, 'BG');
        struct.value(ScrapQty, 'BN');
        struct.value(ScrapCostPrice, 'BT');
        struct.value(ScrapCostAmount, 'CA');
        struct.value(AccountNumDeb, 'CH');
        struct.value(AccountNumCred, 'CO');

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args _args)
    {
        if (_args.dataset() != tableNum(RAssetTable))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        rAssetTable = _args.record();

        super(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputUnPostingInvent</Name>
				<Source><![CDATA[
    protected boolean outputUnPostingInvent()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage01</Name>
				<Source><![CDATA[
    protected void printPage01()
    {
        super();

        HrmDescription hrmDescription = HcmPosition::findByPosition(emplTable.worker().primaryPositionId()).description();
        this.insertValueIntoDoc(ConstEmplTitle, hrmDescription
            ? hrmDescription
            : emplTable.worker().primaryPositionId());

        this.insertDateIntoDoc(ConstAcquisitionDate, acquisitionFirstTrans.TransDate);
        this.insertDateIntoDoc(ConstDateRevaluationLast, dtRevaluationLast);
        this.insertValueIntoDoc(ConstUseValue, useValue);
        this.insertValueIntoDoc(ConstUseValueFromLastRepairs, useValueFromLastRepairs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage03</Name>
				<Source><![CDATA[
    protected void printPage03()
    {
        super();

        this.outScrapBlok();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAsset_4a);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return rAssetStandards.DisposalDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>