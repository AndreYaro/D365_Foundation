<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableInteractionHelper_Retail_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SalesTableInteractionHelper)), Wrappable(false)]
public final class SalesTableInteractionHelper_Retail_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateSalesDeliveryAddressForPickupInStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the delivery address of a sales order or sales quotation that is set to store pickup with the proper warehouse, which is a store warehouse.
    /// Should be called when the delivery mode or warehouse changes.
    /// </summary>
    /// <param name = "_source">The sales order or sales quotation to updated.</param>
    [Hookable(false), Wrappable(false)]
    public void updateSalesDeliveryAddressForPickupInStore(RetailOrderHeaderMap _source)
    {
        if (RetailDlvMode::isPickupDeliveryMode(_source.DlvMode))
        {
            // gets the address of the location, when delivery mode is pickup and location address is found
            // _custAccount is sent ZERO so it never replies the delivery address of the customer
            var deliveryPostalAddress = this.findDeliveryAddressForSalesTableDlvMode(_source.DlvMode, "",  _source.InventLocationId);

            if (deliveryPostalAddress)
            {
                _source.DeliveryPostalAddress = deliveryPostalAddress;
                _source.setDeliveryName();
            }
        }
        else 
        {
            if (RetailPickupAddressUpdateWhenDlvModeIsUpdatedFlight::instance().isEnabled())
            {
                var isPreviousAddressForPickup = this.IsDeliveryAddressEqualToAnyPickupAddress(_source);
                if (isPreviousAddressForPickup)
                {
                    // defaults back to customer delivery address when the table buffer
                    // has pickup delivery address but the delivery mode has changed to "non-pickup" delivery mode.
                    _source.initFromCustTableMandatoryFields();
                }
            }
            else
            {
                if (RetailDlvMode::isPickupDeliveryMode(_source.orig().DlvMode))
                {
                    // defaults back to customer delivery address when is not pickup anymore
                    _source.initFromCustTableMandatoryFields();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineDeliveryAddressForPickupInStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the delivery address of a sales order line or sales quotation line that is set to store pickup with the proper warehouse, which is a store warehouse.
    /// Should be called when the delivery mode or warehouse changes.
    /// </summary>
    /// <param name = "_source">The sales order line or sales quotation line to updated.</param>
    [Hookable(false)]
    public void updateLineDeliveryAddressForPickupInStore(RetailOrderLineMap _source)
    {
        if (RetailDlvMode::isPickupDeliveryMode(_source.DlvMode))
        {
            // gets the address of the location, when delivery mode is pickup and location address is found
            // _custAccount is sent ZERO so it never replies the delivery address of the customer
            var deliveryPostalAddress = this.findDeliveryAddressForSalesLineDlvMode(_source.DlvMode, '', _source.inventDim().InventLocationId);

            if (deliveryPostalAddress)
            {
                _source.DeliveryPostalAddress = deliveryPostalAddress;
                _source.setDeliveryName();
            }
        }
        else if (RetailDlvMode::isPickupDeliveryMode(_source.orig().DlvMode))
        {
            // defaults back to customer delivery address when is not pickup anymore
            this.setDefaultDeliveryAddress(_source);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDeliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method copies the logic from SalesLine.initFromCustTable for delivery address and name
    /// </summary>
    /// <param name = "_source">The sales order line or sales quotation line to updated.</param>
    private void setDefaultDeliveryAddress(RetailOrderLineMap _source)
    {
        var custTable = CustTable::find(_source.CustAccount);

        var location = LogisticsLocationEntity::constructFromLocationRecId(
                LogisticsLocationDefault::findSimpleDefault(
                    custTable,
                    LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery)).RecId);

        _source.DeliveryPostalAddress = location.getPostalAddress().RecId;
        _source.DeliveryName = location.parmLocationDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsDeliveryAddressEqualToAnyPickupAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is checking if the delivery address from orderHeader is equal to any pick up address.
    /// </summary>
    /// <param name = "_source">The sales order header.</param>
    /// <returns>True if the current delivery address in the sales order table buffer is any pickup address. </returns>
    private boolean IsDeliveryAddressEqualToAnyPickupAddress(RetailOrderHeaderMap orderHeader)
    {
        if (!orderHeader) return false;

        RetailDlvModeTmp pickupDlvModes = RetailDlvMode::getPickupDeliveryModes();

        while select pickupDlvModes
        {
            var storePickupAddress = this.findDeliveryAddressForSalesTableDlvMode(pickupDlvModes.Code, "",  orderHeader.InventLocationId);

            if (storePickupAddress == orderHeader.DeliveryPostalAddress)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>