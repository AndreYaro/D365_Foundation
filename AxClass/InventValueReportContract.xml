<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventValueReportContract</c> class handles the parameters for the inventory value report.
/// </summary>
[
DataContractAttribute,
SysOperationContractProcessingAttribute(classStr(InventValueReportUIBuilder), 
SysOperationDataContractProcessingMode::CreateSeparateUIBuilderForEachContract),
SysOperationGroupAttribute('IdentificationGroup', "@SYS5711", '1'),
SysOperationGroupAttribute('DateIntervalGroup', "@SYS22142", '2')
]
public class InventValueReportContract implements SysOperationValidatable
{
    int64 transactionId;
    InventValueReportId reportId;
    DateCode dateInterval;
    FromDate fromDate;
    ToDate toDate;

    NoYes filler;
    NoYes includeNotPostedValue;

    NoYes viewConfigId;
    NoYes viewConfigIdTotal;
    NoYes viewInventColorId;
    NoYes viewInventColorIdTotal;
    NoYes viewInventStyleId;
    NoYes viewInventStyleIdTotal;
    NoYes viewInventVersionId;
    NoYes viewInventVersionIdTotal;
    // <GEERU>
    NoYes viewInventGTDId_RU;
    NoYes viewInventGTDIdTotal_RU;
    NoYes viewInventOwnerId_RU;
    NoYes viewInventOwnerIdTotal_RU;
    NoYes viewInventProfileId_RU;
    NoYes viewInventProfileIdTotal_RU;
    // <//GEERU>
    NoYes viewInventSizeId;
    NoYes viewInventSizeIdTotal;
    NoYes viewInventSiteId;
    NoYes viewInventSiteIdTotal;
    NoYes viewInventLocationId;
    NoYes viewInventLocationIdTotal;
    NoYes viewWMSLocationId;
    NoYes viewWMSLocationIdTotal;
    NoYes viewWMSPalletId;
    NoYes viewWMSPalletIdTotal;
    NoYes viewInventBatchId;
    NoYes viewInventBatchIdTotal;
    NoYes viewInventSerialId;
    NoYes viewInventSerialIdTotal;

    NoYes viewInventDimension1;
    NoYes viewInventDimension1Total;
    NoYes viewInventDimension2;
    NoYes viewInventDimension2Total;
    NoYes viewInventDimension3;
    NoYes viewInventDimension3Total;
    NoYes viewInventDimension4;
    NoYes viewInventDimension4Total;
    NoYes viewInventDimension5;
    NoYes viewInventDimension5Total;
    NoYes viewInventDimension6;
    NoYes viewInventDimension6Total;
    NoYes viewInventDimension7;
    NoYes viewInventDimension7Total;
    NoYes viewInventDimension8;
    NoYes viewInventDimension8Total;
    NoYes viewInventDimension9;
    NoYes viewInventDimension9Total;
    NoYes viewInventDimension10;
    NoYes viewInventDimension10Total;
    NoYes viewInventDimension11;
    NoYes viewInventDimension11Total;
    NoYes viewInventDimension12;
    NoYes viewInventDimension12Total;

    Query query;
    container packedQuery;

    boolean withDimensionSet;
    container printSettings;
    ReportName reportName;

    private InventValueBundleRecId maxBundleRecId, minBundleRecId;

    #define.Version6(6)
    #LOCALMACRO.Version6List
        transactionId,
        reportId,
        dateInterval,
        fromDate,
        toDate,
        filler,
        includeNotPostedValue,
        filler,
        filler,
        filler,
        filler,
        filler,
        viewConfigId,
        viewConfigIdTotal,
        viewInventColorId,
        viewInventColorIdTotal,
        viewInventSizeId,
        viewInventSizeIdTotal,
        viewInventSiteId,
        viewInventSiteIdTotal,
        viewInventLocationId,
        viewInventLocationIdTotal,
        viewWMSLocationId,
        viewWMSLocationIdTotal,
        viewWMSPalletId,
        viewWMSPalletIdTotal,
        viewInventBatchId,
        viewInventBatchIdTotal,
        viewInventSerialId,
        viewInventSerialIdTotal,
        viewInventDimension1,
        viewInventDimension1Total,
        viewInventDimension2,
        viewInventDimension2Total,
        viewInventDimension3,
        viewInventDimension3Total,
        viewInventDimension4,
        viewInventDimension4Total,
        viewInventDimension5,
        viewInventDimension5Total,
        viewInventDimension6,
        viewInventDimension6Total,
        viewInventDimension7,
        viewInventDimension7Total,
        viewInventDimension8,
        viewInventDimension8Total,
        viewInventDimension9,
        viewInventDimension9Total,
        viewInventDimension10,
        viewInventDimension10Total,
        // <GEERU>
        viewInventGTDId_RU,
        viewInventGTDIdTotal_RU,
        viewInventOwnerId_RU,
        viewInventOwnerIdTotal_RU,
        viewInventProfileId_RU,
        viewInventProfileIdTotal_RU,
        // </GEERU>
        viewInventStyleId,
        viewInventStyleIdTotal,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        packedQuery,
        withDimensionSet,
        printSettings,
        reportName
    #ENDMACRO
    #define.Version7(7)
    #LOCALMACRO.Version7List
        transactionId,
        reportId,
        dateInterval,
        fromDate,
        toDate,
        filler,
        includeNotPostedValue,
        filler,
        filler,
        filler,
        filler,
        filler,
        viewConfigId,
        viewConfigIdTotal,
        viewInventColorId,
        viewInventColorIdTotal,
        viewInventSizeId,
        viewInventSizeIdTotal,
        viewInventSiteId,
        viewInventSiteIdTotal,
        viewInventLocationId,
        viewInventLocationIdTotal,
        viewWMSLocationId,
        viewWMSLocationIdTotal,
        viewWMSPalletId,
        viewWMSPalletIdTotal,
        viewInventBatchId,
        viewInventBatchIdTotal,
        viewInventSerialId,
        viewInventSerialIdTotal,
        viewInventDimension1,
        viewInventDimension1Total,
        viewInventDimension2,
        viewInventDimension2Total,
        viewInventDimension3,
        viewInventDimension3Total,
        viewInventDimension4,
        viewInventDimension4Total,
        viewInventDimension5,
        viewInventDimension5Total,
        viewInventDimension6,
        viewInventDimension6Total,
        viewInventDimension7,
        viewInventDimension7Total,
        viewInventDimension8,
        viewInventDimension8Total,
        viewInventDimension9,
        viewInventDimension9Total,
        viewInventDimension10,
        viewInventDimension10Total,
        viewInventDimension11,
        viewInventDimension11Total,
        viewInventDimension12,
        viewInventDimension12Total,
        // <GEERU>
        viewInventGTDId_RU,
        viewInventGTDIdTotal_RU,
        viewInventOwnerId_RU,
        viewInventOwnerIdTotal_RU,
        viewInventProfileId_RU,
        viewInventProfileIdTotal_RU,
        // </GEERU>
        viewInventStyleId,
        viewInventStyleIdTotal,
        viewInventVersionId,
        viewInventVersionIdTotal,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        packedQuery,
        withDimensionSet,
        printSettings,
        reportName
    #ENDMACRO

    #define.CurrentVersion(8)
    #LOCALMACRO.CurrentList
        transactionId,
        reportId,
        dateInterval,
        fromDate,
        toDate,
        filler,
        includeNotPostedValue,
        filler,
        filler,
        filler,
        filler,
        filler,
        viewConfigId,
        viewConfigIdTotal,
        viewInventColorId,
        viewInventColorIdTotal,
        viewInventSizeId,
        viewInventSizeIdTotal,
        viewInventSiteId,
        viewInventSiteIdTotal,
        viewInventLocationId,
        viewInventLocationIdTotal,
        viewWMSLocationId,
        viewWMSLocationIdTotal,
        viewWMSPalletId,
        viewWMSPalletIdTotal,
        viewInventBatchId,
        viewInventBatchIdTotal,
        viewInventSerialId,
        viewInventSerialIdTotal,
        viewInventDimension1,
        viewInventDimension1Total,
        viewInventDimension2,
        viewInventDimension2Total,
        viewInventDimension3,
        viewInventDimension3Total,
        viewInventDimension4,
        viewInventDimension4Total,
        viewInventDimension5,
        viewInventDimension5Total,
        viewInventDimension6,
        viewInventDimension6Total,
        viewInventDimension7,
        viewInventDimension7Total,
        viewInventDimension8,
        viewInventDimension8Total,
        viewInventDimension9,
        viewInventDimension9Total,
        viewInventDimension10,
        viewInventDimension10Total,
        viewInventDimension11,
        viewInventDimension11Total,
        viewInventDimension12,
        viewInventDimension12Total,
        // <GEERU>
        viewInventGTDId_RU,
        viewInventGTDIdTotal_RU,
        viewInventOwnerId_RU,
        viewInventOwnerIdTotal_RU,
        viewInventProfileId_RU,
        viewInventProfileIdTotal_RU,
        // </GEERU>
        viewInventStyleId,
        viewInventStyleIdTotal,
        viewInventVersionId,
        viewInventVersionIdTotal,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        filler,
        packedQuery,
        withDimensionSet,
        printSettings,
        reportName,
        minBundleRecId,
        maxBundleRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (query != null)
        {
            packedQuery = query.pack();
        }
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateInterval</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('DateInterval'),
    SysOperationDisplayOrderAttribute('1'),
    SysOperationGroupMemberAttribute('DateIntervalGroup')
    ]
    public DateCode parmDateInterval(DateCode _dateInterval = dateInterval)
    {
        dateInterval = _dateInterval;

        return dateInterval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('FromDate'),
    SysOperationDisplayOrderAttribute('2'),
    SysOperationGroupMemberAttribute('DateIntervalGroup')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeNotPostedValue</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('IncludeNotPostedValue')
    ]
    public int parmIncludeNotPostedValue(int _includeNotPostedValue = includeNotPostedValue)
    {
        includeNotPostedValue = _includeNotPostedValue;

        return includeNotPostedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ReportId'),
    SysOperationGroupMemberAttribute('IdentificationGroup'),
    SysOperationLabelAttribute(literalStr("@SYS5468"))
    ]
    public InventValueReportId parmReportId(InventValueReportId _reportId = reportId)
    {
        reportId = _reportId;

        return reportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportName</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ReportName')
    ]
    public ReportName parmReportName(ReportName _reportName = reportName)
    {
        reportName = _reportName;

        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSRSPrintSettings</Name>
				<Source><![CDATA[
    public container parmSRSPrintSettings(container _printSettings = printSettings)
    {
        printSettings = _printSettings;
        return printSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ToDate'),
    SysOperationDisplayOrderAttribute('3'),
    SysOperationGroupMemberAttribute('DateIntervalGroup')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('TransactionId')
    ]
    public CreatedTransactionId parmTransactionId(CreatedTransactionId _transactionId = transactionId)
    {
        transactionId = _transactionId;

        return transactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewConfigId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewConfigId')
    ]
    public int parmViewConfigId(int _viewConfigId = viewConfigId)
    {
        viewConfigId = _viewConfigId;

        return viewConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewConfigIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewConfigIdTotal')
    ]
    public int parmViewConfigIdTotal(int _viewConfigIdTotal = viewConfigIdTotal)
    {
        viewConfigIdTotal = _viewConfigIdTotal;

        return viewConfigIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventBatchId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventBatchId')
    ]
    public int parmViewInventBatchId(int _viewInventBatchId = viewInventBatchId)
    {
        viewInventBatchId = _viewInventBatchId;

        return viewInventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventBatchIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventBatchIdTotal')
    ]
    public int parmViewInventBatchIdTotal(int _viewInventBatchIdTotal = viewInventBatchIdTotal)
    {
        viewInventBatchIdTotal = _viewInventBatchIdTotal;

        return viewInventBatchIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventColorId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventColorId')
    ]
    public int parmViewInventColorId(int _viewInventColorId = viewInventColorId)
    {
        viewInventColorId = _viewInventColorId;

        return viewInventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventColorIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventColorIdTotal')
    ]
    public int parmViewInventColorIdTotal(int _viewInventColorIdTotal = viewInventColorIdTotal)
    {
        viewInventColorIdTotal = _viewInventColorIdTotal;

        return viewInventColorIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventGTDId_RU</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventGTDId')
    ]
    public int parmViewInventGTDId_RU(int _viewInventGTDId = viewInventGTDId_RU)
    {
        viewInventGTDId_RU = _viewInventGTDId;

        return viewInventGTDId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventGTDId_RUTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventGTDIdTotal')
    ]
    public int parmViewInventGTDId_RUTotal(int _viewInventGTDIdTotal = viewInventGTDIdTotal_RU)
    {
        viewInventGTDIdTotal_RU = _viewInventGTDIdTotal;

        return viewInventGTDIdTotal_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventLocationId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventLocationId')
    ]
    public int parmViewInventLocationId(int _viewInventLocationId = viewInventLocationId)
    {
        viewInventLocationId = _viewInventLocationId;

        return viewInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventLocationIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventLocationIdTotal')
    ]
    public int parmViewInventLocationIdTotal(int _viewInventLocationIdTotal = viewInventLocationIdTotal)
    {
        viewInventLocationIdTotal = _viewInventLocationIdTotal;

        return viewInventLocationIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventOwnerId_RU</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventOwnerId')
    ]
    public int parmViewInventOwnerId_RU(int _viewInventOwnerId = viewInventOwnerId_RU)
    {
        viewInventOwnerId_RU = _viewInventOwnerId;

        return viewInventOwnerId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventOwnerId_RUTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventOwnerIdTotal')
    ]
    public int parmViewInventOwnerId_RUTotal(int _viewInventOwnerIdTotal = viewInventOwnerIdTotal_RU)
    {
        viewInventOwnerIdTotal_RU = _viewInventOwnerIdTotal;

        return viewInventOwnerIdTotal_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventProfileId_RU</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventProfileId')
    ]
    public int parmViewInventProfileId_RU(int _viewInventProfileId = viewInventProfileId_RU)
    {
        viewInventProfileId_RU = _viewInventProfileId;

        return viewInventProfileId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventProfileId_RUTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventProfileIdTotal')
    ]
    public int parmViewInventProfileId_RUTotal(int _viewInventProfileIdTotal = viewInventProfileIdTotal_RU)
    {
        viewInventProfileIdTotal_RU = _viewInventProfileIdTotal;

        return viewInventProfileIdTotal_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventSerialId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventSerialId')
    ]
    public int parmViewInventSerialId(int _viewInventSerialId = viewInventSerialId)
    {
        viewInventSerialId = _viewInventSerialId;

        return viewInventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventSerialIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventSerialIdTotal')
    ]
    public int parmViewInventSerialIdTotal(int _viewInventSerialIdTotal = viewInventSerialIdTotal)
    {
        viewInventSerialIdTotal = _viewInventSerialIdTotal;

        return viewInventSerialIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventSiteId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventSiteId')
    ]
    public int parmViewInventSiteId(int _viewInventSiteId = viewInventSiteId)
    {
        viewInventSiteId = _viewInventSiteId;

        return viewInventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventSiteIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventSiteIdTotal')
    ]
    public int parmViewInventSiteIdTotal(int _viewInventSiteIdTotal = viewInventSiteIdTotal)
    {
        viewInventSiteIdTotal = _viewInventSiteIdTotal;

        return viewInventSiteIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventSizeId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventSizeId')
    ]
    public int parmViewInventSizeId(int _viewInventSizeId = viewInventSizeId)
    {
        viewInventSizeId = _viewInventSizeId;

        return viewInventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventSizeIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventSizeIdTotal')
    ]
    public int parmViewInventSizeIdTotal(int _viewInventSizeIdTotal = viewInventSizeIdTotal)
    {
        viewInventSizeIdTotal = _viewInventSizeIdTotal;

        return viewInventSizeIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventStyleId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventStyleId')
    ]
    public int parmViewInventStyleId(int _viewInventStyleId = viewInventStyleId)
    {
        viewInventStyleId = _viewInventStyleId;

        return viewInventStyleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventStyleIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventStyleIdTotal')
    ]
    public int parmViewInventStyleIdTotal(int _viewInventStyleIdTotal = viewInventStyleIdTotal)
    {
        viewInventStyleIdTotal = _viewInventStyleIdTotal;

        return viewInventStyleIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventVersionId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventVersionId')
    ]
    public int parmViewInventVersionId(int _viewInventVersionId = viewInventVersionId)
    {
        viewInventVersionId = _viewInventVersionId;

        return viewInventVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventVersionIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventVersionIdTotal')
    ]
    public int parmViewInventVersionIdTotal(int _viewInventVersionIdTotal = viewInventVersionIdTotal)
    {
        viewInventVersionIdTotal = _viewInventVersionIdTotal;

        return viewInventVersionIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewWMSLocationId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewWMSLocationId')
    ]
    public int parmViewWMSLocationId(int _viewWMSLocationId = viewWMSLocationId)
    {
        viewWMSLocationId = _viewWMSLocationId;

        return viewWMSLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewWMSLocationIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewWMSLocationIdTotal')
    ]
    public int parmViewWMSLocationIdTotal(int _viewWMSLocationIdTotal = viewWMSLocationIdTotal)
    {
        viewWMSLocationIdTotal = _viewWMSLocationIdTotal;

        return viewWMSLocationIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewWMSPalletId</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewWMSPalletId')
    ]
    public int parmViewWMSPalletId(int _viewWMSPalletId = viewWMSPalletId)
    {
        viewWMSPalletId = _viewWMSPalletId;

        return viewWMSPalletId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewWMSPalletIdTotal</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewWMSPalletIdTotal')
    ]
    public int parmViewWMSPalletIdTotal(int _viewWMSPalletIdTotal = viewWMSPalletIdTotal)
    {
        viewWMSPalletIdTotal = _viewWMSPalletIdTotal;

        return viewWMSPalletIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWithDimensionSet</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('WithDimensionSet')
    ]
    public int parmWithDimensionSet(int _withDimensionSet = withDimensionSet)
    {
        withDimensionSet = _withDimensionSet;

        return withDimensionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension1</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension1')
    ]
    public int parmviewInventDimension1(int _viewInventDimension1 = viewInventDimension1)
    {
        viewInventDimension1 = _viewInventDimension1;
    
        return viewInventDimension1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension1Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension1Total')
    ]
    public int parmViewInventDimension1Total(int _viewInventDimension1Total = viewInventDimension1Total)
    {
        viewInventDimension1Total = _viewInventDimension1Total;
    
        return viewInventDimension1Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension2</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension2')
    ]
    public int parmviewInventDimension2(int _viewInventDimension2 = viewInventDimension2)
    {
        viewInventDimension2 = _viewInventDimension2;
    
        return viewInventDimension2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension2Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension2Total')
    ]
    public int parmViewInventDimension2Total(int _viewInventDimension2Total = viewInventDimension2Total)
    {
        viewInventDimension2Total = _viewInventDimension2Total;
    
        return viewInventDimension2Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension3</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension3')
    ]
    public int parmviewInventDimension3(int _viewInventDimension3 = viewInventDimension3)
    {
        viewInventDimension3 = _viewInventDimension3;
    
        return viewInventDimension3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension3Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension3Total')
    ]
    public int parmViewInventDimension3Total(int _viewInventDimension3Total = viewInventDimension3Total)
    {
        viewInventDimension3Total = _viewInventDimension3Total;
    
        return viewInventDimension3Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension4</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension4')
    ]
    public int parmviewInventDimension4(int _viewInventDimension4 = viewInventDimension4)
    {
        viewInventDimension4 = _viewInventDimension4;
    
        return viewInventDimension4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension4Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension4Total')
    ]
    public int parmViewInventDimension4Total(int _viewInventDimension4Total = viewInventDimension4Total)
    {
        viewInventDimension4Total = _viewInventDimension4Total;
    
        return viewInventDimension4Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension5</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension5')
    ]
    public int parmviewInventDimension5(int _viewInventDimension5 = viewInventDimension5)
    {
        viewInventDimension5 = _viewInventDimension5;
    
        return viewInventDimension5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension5Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension5Total')
    ]
    public int parmViewInventDimension5Total(int _viewInventDimension5Total = viewInventDimension5Total)
    {
        viewInventDimension5Total = _viewInventDimension5Total;
    
        return viewInventDimension5Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension6</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension6')
    ]
    public int parmviewInventDimension6(int _viewInventDimension6 = viewInventDimension6)
    {
        viewInventDimension6 = _viewInventDimension6;
    
        return viewInventDimension6;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension6Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension6Total')
    ]
    public int parmViewInventDimension6Total(int _viewInventDimension6Total = viewInventDimension6Total)
    {
        viewInventDimension6Total = _viewInventDimension6Total;
    
        return viewInventDimension6Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension7</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension7')
    ]
    public int parmviewInventDimension7(int _viewInventDimension7 = viewInventDimension7)
    {
        viewInventDimension7 = _viewInventDimension7;
    
        return viewInventDimension7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension7Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension7Total')
    ]
    public int parmViewInventDimension7Total(int _viewInventDimension7Total = viewInventDimension7Total)
    {
        viewInventDimension7Total = _viewInventDimension7Total;
    
        return viewInventDimension7Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension8</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension8')
    ]
    public int parmviewInventDimension8(int _viewInventDimension8 = viewInventDimension8)
    {
        viewInventDimension8 = _viewInventDimension8;
    
        return viewInventDimension8;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension8Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension8Total')
    ]
    public int parmViewInventDimension8Total(int _viewInventDimension8Total = viewInventDimension8Total)
    {
        viewInventDimension8Total = _viewInventDimension8Total;
    
        return viewInventDimension8Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension9</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension9')
    ]
    public int parmviewInventDimension9(int _viewInventDimension9 = viewInventDimension9)
    {
        viewInventDimension9 = _viewInventDimension9;
    
        return viewInventDimension9;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension9Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension9Total')
    ]
    public int parmViewInventDimension9Total(int _viewInventDimension9Total = viewInventDimension9Total)
    {
        viewInventDimension9Total = _viewInventDimension9Total;
    
        return viewInventDimension9Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension10</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension10')
    ]
    public int parmviewInventDimension10(int _viewInventDimension10 = viewInventDimension10)
    {
        viewInventDimension10 = _viewInventDimension10;
    
        return viewInventDimension10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension10Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension10Total')
    ]
    public int parmViewInventDimension10Total(int _viewInventDimension10Total = viewInventDimension10Total)
    {
        viewInventDimension10Total = _viewInventDimension10Total;
    
        return viewInventDimension10Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension11</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension11')
    ]
    public int parmviewInventDimension11(int _viewInventDimension11 = viewInventDimension11)
    {
        viewInventDimension11 = _viewInventDimension11;
    
        return viewInventDimension11;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension11Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension11Total')
    ]
    public int parmViewInventDimension11Total(int _viewInventDimension11Total = viewInventDimension11Total)
    {
        viewInventDimension11Total = _viewInventDimension11Total;
    
        return viewInventDimension11Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmviewInventDimension12</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension12')
    ]
    public int parmviewInventDimension12(int _viewInventDimension12 = viewInventDimension12)
    {
        viewInventDimension12 = _viewInventDimension12;
    
        return viewInventDimension12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewInventDimension12Total</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('ViewInventDimension12Total')
    ]
    public int parmViewInventDimension12Total(int _viewInventDimension12Total = viewInventDimension12Total)
    {
        viewInventDimension12Total = _viewInventDimension12Total;
    
        return viewInventDimension12Total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxBundleRecId</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysOperationControlVisibilityAttribute(false)]
    public InventValueBundleRecId parmMaxBundleRecId(InventValueBundleRecId _maxBundleRecId = maxBundleRecId)
    {
        maxBundleRecId = _maxBundleRecId;

        return maxBundleRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinBundleRecId</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysOperationControlVisibilityAttribute(false)]
    public InventValueBundleRecId parmMinBundleRecId(InventValueBundleRecId _minBundleRecId = minBundleRecId)
    {
        minBundleRecId = _minBundleRecId;

        return minBundleRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportLayoutParameters</Name>
				<Source><![CDATA[
    public void setReportLayoutParameters()
    {
        #localmacro.SetInventDimReportParameter
            this.parmView%1(inventValueReport.viewInventDimParm().isFieldIdEnabled(fieldNum(InventDim, %1)));
            this.parmView%1Total(inventValueReport.totalInventDimParm().isFieldIdEnabled(fieldNum(InventDim, %1)));
        #endmacro

        InventValueReport inventValueReport = InventValueReport::findByReportId(this.parmReportId());

        #SetInventDimReportParameter(ConfigId)

        #SetInventDimReportParameter(InventColorId)

        #SetInventDimReportParameter(InventStyleId)

        #SetInventDimReportParameter(InventVersionId)

        // <GEERU>
        #SetInventDimReportParameter(InventGTDId_RU)
        #SetInventDimReportParameter(InventProfileId_RU)
        #SetInventDimReportParameter(InventOwnerId_RU)
        // </GEERU>

        #SetInventDimReportParameter(InventSizeId)

        #SetInventDimReportParameter(InventSiteId)

        #SetInventDimReportParameter(InventLocationId)

        #SetInventDimReportParameter(WMSLocationId)

        #SetInventDimReportParameter(WMSPalletId)

        #SetInventDimReportParameter(InventBatchId)

        #SetInventDimReportParameter(InventSerialId)

        #SetInventDimReportParameter(InventDimension1);
        #SetInventDimReportParameter(InventDimension2);
        #SetInventDimReportParameter(InventDimension3);
        #SetInventDimReportParameter(InventDimension4);
        #SetInventDimReportParameter(InventDimension5);
        #SetInventDimReportParameter(InventDimension6);
        #SetInventDimReportParameter(InventDimension7);
        #SetInventDimReportParameter(InventDimension8);
        #SetInventDimReportParameter(InventDimension9);
        #SetInventDimReportParameter(InventDimension10);
        #SetInventDimReportParameter(InventDimension11);
        #SetInventDimReportParameter(InventDimension12);

        this.parmIncludeNotPostedValue(inventValueReport.IncludeNotPostedValue);

        this.parmWithDimensionSet(InventValueReportController::hasDimensionSet(inventValueReport.DimensionFocus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #Version6:
                [version, #Version6List] = _packedClass;
                if (packedQuery)
                {
                    query = new Query(packedQuery);
                }
                break;
            case #Version7:
                [version, #Version7List] = _packedClass;
                if (packedQuery)
                {
                    query = new Query(packedQuery);
                }
                break;
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                if (packedQuery)
                {
                    query = new Query(packedQuery);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean isValid = true;

        if (fromDate != dateNull() && toDate != dateNull() && fromDate > toDate)
        {
            isValid = checkFailed("@SYS91020");
        }

        if (reportId == '')
        {
            isValid = checkFailed("@SYS323603");
        }

        if (reportId != '' && InventValueReport::findByReportId(reportId).RecId == 0)
        {
            isValid = checkFailed(strFmt("@SYS323604", reportId));
        }

        if (dateInterval != '')
        {
            if (!LedgerPeriodCode::checkExist(dateInterval))
            {
                isValid = false;
                dateInterval = '';
            }
        }

        if (isValid)
        {
            if ((fromDate != dateNull() && year(fromDate) < (year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) - 1))
             || (toDate   != dateNull() && year(toDate)   < (year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) - 1)))
            {
                if (Box::yesNo(strFmtLB("@SYS322631"), DialogButton::No) != DialogButton::Yes)
                {
                    isValid = false;
                }
            }
        }

        if (isValid)
        {
            if (InventTransArchiveFeature::isEnabled() &&
                InventTransArchiveProcessHistoryTable::existsOverlapPeriodDate(fromDate, toDate))
            {
                if (Box::yesNo(strFmtLB("@SCM:ReportImpactedByArchivedTransactions"), DialogButton::Yes) != DialogButton::Yes)
                {
                    isValid = false;
                }
            }         
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueReportContract construct()
    {
        return new InventValueReportContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustFromAndToDateToDateInterval</Name>
				<Source><![CDATA[
    internal void adjustFromAndToDateToDateInterval()
    {
        if (this.parmDateInterval() != '')
        {
            LedgerPeriodCode ledgerPeriodCode = LedgerPeriodCode::find(this.parmDateInterval());
            if (ledgerPeriodCode.RecId != 0)
            {
                this.parmFromDate(ledgerPeriodCode.fromDate());
                this.parmToDate(ledgerPeriodCode.toDate());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>