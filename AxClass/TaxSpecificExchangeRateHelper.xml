<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSpecificExchangeRateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxSpecificExchangeRateHelper</c> is a utility class for VAT specific exchange rate feature.
/// </summary>
internal final class TaxSpecificExchangeRateHelper
{
    #ISOCountryRegionCodes

    private ExchangeRateTypeRecId originalExchangeRateType;
    private LedgerRecId ledgerRecId;
    private CurrencyCode transactionCurrencyCode;
    private CurrencyCode accountingCurrencyCode;
    private CurrencyCode reportingCurrencyCode;
    private TransactionType transactionType;
    private RefTableId sourceTableId;
    private RefRecId sourceRecId;
    private VatDueDate_W dateOfVATRegister;
    private TaxParameters taxParameters;

    private boolean shouldSetExchRateForSameCurrency = TaxIntegrationSpecExchRateForSameCurrencyFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(
        RefTableId _sourceTableId,
        RefRecId _sourceRecId,
        TransactionType _transactionType,
        CurrencyCode _transactionCurrencyCode,
        VatDueDate_W _dateOfVATRegister,
        LedgerRecId _ledgerRecId = Ledger::current())
    {
        this.sourceTableId = _sourceTableId;
        this.sourceRecId = _sourceRecId;
        this.transactionType = _transactionType;
        this.transactionCurrencyCode = _transactionCurrencyCode;
        this.dateOfVATRegister = _dateOfVATRegister;

        this.ledgerRecId = _ledgerRecId ? _ledgerRecId : Ledger::current();
        this.accountingCurrencyCode = Ledger::accountingCurrencyByLedger(ledgerRecId);
        this.reportingCurrencyCode = Ledger::reportingCurrencyByLedger(ledgerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxSpecificExchangeRateEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tax specific exchange rate feature is enabled.
    /// </summary>
    /// <returns>true if tax specific exchange rate feature is enabled; otherwise, false.</returns>
    internal static boolean isTaxSpecificExchangeRateEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(TaxSpecificExchangeRateFeature::instance())
            && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN, #isoBR])
            && TaxParameters::find().BankExchRate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxSpecificExchRateEnabledByBusinessProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tax specific exchange rate feature is enabled for specific business process.
    /// </summary>
    /// <param name = "_process">The business process.</param>
    /// <returns>true if tax specific exchange rate feature is enabled; otherwise, false.</returns>
    internal static boolean isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess _process)
    {
        return Tax::isTaxIntegrationEnabledForBusinessProcess(_process)
            && TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxSpecificExchRateEnabledByTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax specific exchagne rate feature is enabled for specific transaction document.
    /// </summary>
    /// <param name = "_tableId">The table id.</param>
    /// <param name = "_recId">The record id.</param>
    /// <returns>true if tax specific exchange rate feature is enabled; otherwise, false.</returns>
    internal static boolean isTaxSpecificExchRateEnabledByTable(RefTableId _tableId, RefRecId _recId)
    {
        if (!_tableId || !_recId)
        {
            return false;
        }

        TaxIntegrationBusinessProcess process = TaxIntegrationUtils::getBusinessProcessByTable(_tableId, _recId);
        return TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(process);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map which including all currency code and exchange rate of specific source document.
    /// </summary>
    /// <param name = "_sourceTableId">The source table id.</param>
    /// <param name = "_sourceRecId">The source record id.</param>
    /// <returns>The map with currency code and exchange rate.</returns>
    internal static Map getExchangeRateMap(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        Map exchangeRateMap = new Map(Types::String, Types::Real);

        TaxSpecificExchangeRate taxSpecificExchangeRate;

        while select CurrencyCode, ExchangeRate from taxSpecificExchangeRate
            where taxSpecificExchangeRate.SourceTableId == _sourceTableId
                && taxSpecificExchangeRate.SourceRecId == _sourceRecId
        {
            exchangeRateMap.add(taxSpecificExchangeRate.CurrencyCode, taxSpecificExchangeRate.ExchangeRate);
        }

        return exchangeRateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromTaxSpecificExchangeRateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>TaxSpecificExchangeRate</c> records from origin transaction for new transaction.
    /// </summary>
    /// <param name = "_sourceTableIdOrig">Origin transaction document table id.</param>
    /// <param name = "_sourceRecIdOrig">Origin transaction document record id.</param>
    /// <param name = "_sourceTableIdNew">New transaction document table id.</param>
    /// <param name = "_sourceRecIdNew">New transaction document record id.</param>
    /// <param name = "_dateOfVATRegister">Date of VAT register.</param>
    /// <param name = "_keepOriginalExchangeRate">Keep original exchange rate.</param>
    internal static void copyFromTaxSpecificExchangeRateType(
        RefTableId _sourceTableIdOrig,
        RefRecId _sourceRecIdOrig,
        RefTableId _sourceTableIdNew,
        RefRecId _sourceRecIdNew,
        VatDueDate_W _dateOfVATRegister = dateNull(),
        NoYes _keepOriginalExchangeRate = NoYes::No)
    {
        if (TaxSpecificExchangeRate::exist(_sourceTableIdNew, _sourceRecIdNew))
        {
            TaxSpecificExchangeRate::deleteBySourceRecord(_sourceTableIdNew, _sourceRecIdNew);
        }

        TaxSpecificExchangeRate taxSpecifcExchangeRateOrig;
        TaxSpecificExchangeRate taxSpecifcExchangeRateNew;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(TaxSpecificExchangeRate));

        while select ExchangeRate, CurrencyCode, DateOfVATRegister, KeepOriginalExchangeRate from taxSpecifcExchangeRateOrig
            where taxSpecifcExchangeRateOrig.SourceTableId == _sourceTableIdOrig
                && taxSpecifcExchangeRateOrig.SourceRecId == _sourceRecIdOrig
        {
            taxSpecifcExchangeRateNew.clear();
            taxSpecifcExchangeRateNew.SourceTableId = _sourceTableIdNew;
            taxSpecifcExchangeRateNew.SourceRecId = _sourceRecIdNew;
            taxSpecifcExchangeRateNew.DateOfVATRegister = _dateOfVATRegister ? _dateOfVATRegister : taxSpecifcExchangeRateOrig.DateOfVATRegister;
            taxSpecifcExchangeRateNew.ExchangeRate = taxSpecifcExchangeRateOrig.ExchangeRate;
            taxSpecifcExchangeRateNew.CurrencyCode = taxSpecifcExchangeRateOrig.CurrencyCode;
            taxSpecifcExchangeRateNew.KeepOriginalExchangeRate = taxSpecifcExchangeRateOrig.KeepOriginalExchangeRate ? NoYes::Yes : _keepOriginalExchangeRate;

            recordInsertList.add(taxSpecifcExchangeRateNew);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferTaxSpecificExchangeRateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the <c>TaxSpecificExchangeRate</c> to new source record Id.
    /// </summary>
    /// <param name="_oldSourceTableId">
    /// The old source table ID.
    /// </param>
    /// <param name="_oldSourceRecId">
    /// The old source record ID.
    /// </param>
    /// <param name="_newSourceTableId">
    /// The new source table ID.
    /// </param>
    /// <param name="_newSourceRecId">
    /// The new source record ID.
    /// </param>
    internal static void transferTaxSpecificExchangeRateType(
        RefTableId _oldSourceTableId,
        RefRecId _oldSourceRecId,
        RefTableId _newSourceTableId,
        RefRecId _newSourceRecId)
    {
        TaxSpecificExchangeRate taxSpecificExchangeRate;

        taxSpecificExchangeRate.skipDataMethods(true);
        taxSpecificExchangeRate.skipEvents(true);

        update_recordset taxSpecificExchangeRate
            setting SourceTableId = _newSourceTableId,
                SourceRecId = _newSourceRecId
            where taxSpecificExchangeRate.SourceTableId == _oldSourceTableId
                && taxSpecificExchangeRate.SourceRecId == _oldSourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainTaxSpecificExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains the tax specific exchange rate for the given currency code.
    /// </summary>
    /// <param name = "_targetCurrencyCode">The target currency code.</param>
    internal void maintainTaxSpecificExchangeRate(CurrencyCode _targetCurrencyCode)
    {
        if (dateOfVatRegister
            && (shouldSetExchRateForSameCurrency
                || transactionCurrencyCode != _targetCurrencyCode))
        {
            if (!TaxSpecificExchangeRate::existByCurrencyCode(sourceTableId, sourceRecId, _targetCurrencyCode))
            {
                CurrencyExchangeRate exchangeRate = this.getExchangeRateForSalesTax(_targetCurrencyCode, AifErrorType::None);

                TaxSpecificExchangeRate::saveTaxSpecificExchangeRate(
                    sourceTableId,
                    sourceRecId,
                    transactionCurrencyCode,
                    _targetCurrencyCode,
                    exchangeRate,
                    dateOfVatRegister,
                    NoYes::No);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainAccountingCurrencyTaxSpecificExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains the tax specific exchange rate for accounting currency code.
    /// </summary>
    internal void maintainAccountingCurrencyTaxSpecificExchangeRate()
    {
        this.maintainTaxSpecificExchangeRate(accountingCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maintainReportingCurrencyTaxSpecificExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains the tax specific exchange rate for reporting currency code.
    /// </summary>
    internal void maintainReportingCurrencyTaxSpecificExchangeRate()
    {
        this.maintainTaxSpecificExchangeRate(reportingCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateForSalesTax</Name>
				<Source><![CDATA[
    internal CurrencyExchangeRate getExchangeRateForSalesTax(CurrencyCode _targetCurrencyCode, AifErrorType _aifErrorType = AifErrorType::None)
    {
        CurrencyExchangeRate currencyExchangeRate;

        if (!taxParameters)
        {
            taxParameters = TaxParameters::find();
        }

        if (_targetCurrencyCode != transactionCurrencyCode)
        {
            currencyExchangeRate = this.getExchangeRate(transactionType, _targetCurrencyCode);

            if (!currencyExchangeRate)
            {
                if (transactionType == TransactionType::Sales)
                {
                    currencyExchangeRate = this.getExchangeRateOfRateType(taxParameters.SalesTaxPayableExchangeRateType, _targetCurrencyCode);
                }
                else if (transactionType == TransactionType::Purchase)
                {
                    // if there is no exchange rate for Purchase transaction type, then use the exchange rate of Sales type.
                    currencyExchangeRate = this.getExchangeRate(TransactionType::Sales, _targetCurrencyCode);

                    if (!currencyExchangeRate)
                    {
                        taxParameters = TaxParameters::find();
                        currencyExchangeRate = this.getExchangeRateOfRateType(taxParameters.SalesTaxReceivableExchangeRateType, _targetCurrencyCode);

                        if (!currencyExchangeRate)
                        {
                            currencyExchangeRate = this.getExchangeRateOfRateType(taxParameters.SalesTaxPayableExchangeRateType, _targetCurrencyCode);
                        }
                    }
                }
            }

            if (currencyExchangeRate == 0)
            {
                ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrencyToCurrency(transactionCurrencyCode, _targetCurrencyCode);
                exchangeRateHelper.parmExchangeDate(dateOfVATRegister);
                currencyExchangeRate = exchangeRateHelper.getExchangeRate1();

                if (_aifErrorType != AifErrorType::None)
                {
                    if (!originalExchangeRateType)
                    {
                        if (transactionType == TransactionType::Purchase && taxParameters.SalesTaxReceivableExchangeRateType)
                        {
                            originalExchangeRateType = taxParameters.SalesTaxReceivableExchangeRateType;
                        }
                        else
                        {
                            originalExchangeRateType = taxParameters.SalesTaxPayableExchangeRateType;
                        }
                    }

                    Description exchangeRateTypeDescription;
                    if (originalExchangeRateType)
                    {
                        exchangeRateTypeDescription = ExchangeRateType::find(originalExchangeRateType).Description;
                    }

                    warning(strFmt("@SYS321719", exchangeRateTypeDescription, transactionCurrencyCode, _targetCurrencyCode, dateOfVATRegister));
                }
            }
        }
        else if (shouldSetExchRateForSameCurrency)
        {
            currencyExchangeRate = 1;
        }

        return currencyExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate type and exchange rate from currency exchange rate type for sales tax.
    /// </summary>
    /// <param name = "_localTransactionType">The transaction type.</param>
    /// <param name = "_targetCurrencyCode">The target currency code.</param>
    /// <returns>Exchange rate.</returns>
    private CurrencyExchangeRate getExchangeRate(
        TransactionType _localTransactionType,
        CurrencyCode _targetCurrencyCode)
    {
        CurrencyExchangeRate exchangeRate;

        if (!originalExchangeRateType)
        {
            originalExchangeRateType = LedgerSalesTaxExchangeRateTypeCurrency::getExchangeRateTypeOfTransactionType(
                Ledger::current(),
                transactionCurrencyCode,
                _localTransactionType);
        }

        exchangeRate = this.getExchangeRateOfRateType(originalExchangeRateType, _targetCurrencyCode);

        return exchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithExchangeRateMapAndVATDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TaxSpecificExchangeRate</c> with new exchagne rate and Date of vat register.
    /// </summary>
    /// <param name = "_sourceTableId">The source table Id.</param>
    /// <param name = "_sourceRecId">The source record Id.</param>
    /// <param name = "_exchRateMap">The exchange rate map.</param>
    /// <param name = "_vatDueDate">The date of vat register.</param>
    internal static void updateWithExchangeRateMapAndVATDueDate(
        RefTableId _sourceTableId,
        RefRecId _sourceRecId,
        Map _exchRateMap,
        VatDueDate_W _vatDueDate)
    {
        ttsbegin;
        TaxSpecificExchangeRate taxSpecificExchangeRate;

        while select forupdate taxSpecificExchangeRate
            where taxSpecificExchangeRate.SourceTableId == _sourceTableId
                && taxSpecificExchangeRate.SourceRecId == _sourceRecId
        {
            if (_exchRateMap.exists(taxSpecificExchangeRate.CurrencyCode))
            {
                CurrencyExchangeRate exchangeRate = _exchRateMap.lookup(taxSpecificExchangeRate.CurrencyCode);
                if (exchangeRate != taxSpecificExchangeRate.ExchangeRate || _vatDueDate != taxSpecificExchangeRate.DateOfVATRegister)
                {
                    taxSpecificExchangeRate.ExchangeRate = exchangeRate;
                    taxSpecificExchangeRate.DateOfVATRegister = _vatDueDate;
                    taxSpecificExchangeRate.update();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateOfRateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate by specific exchange rate type.
    /// </summary>
    /// <param name = "_localExchangeRateType">The exchange rate type.</param>
    /// <param name = "_toCurrencyCode">Target currency code.</param>
    /// <returns>Exchange rate.</returns>
    private CurrencyExchangeRate getExchangeRateOfRateType(
        ExchangeRateTypeRecId _localExchangeRateType,
        CurrencyCode _toCurrencyCode)
    {
        ExchangeRateHelper exchangeRateHelperTriangularTo;
        ExchangeRateHelper exchangeRateHelperTriangularFrom;
        CurrencyExchangeRate exchangeRate;

        if (_localExchangeRateType)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(ledgerRecId, transactionCurrencyCode, dateOfVATRegister);
            exchangeRateHelper.parmErrorType(AifErrorType::None);
            exchangeRateHelper.parmExchangeRateTypeRecId(_localExchangeRateType);
            exchangeRateHelper.parmToCurrency(_toCurrencyCode);
            exchangeRate = exchangeRateHelper.getExchangeRate1();

            if (!exchangeRate)
            {
                CurrencyCode triangulationCurrency = ExchangeRateCurrencyPairCalculationRules::findCalculationRule(
                    _localExchangeRateType,
                    curext(),
                    transactionCurrencyCode,
                    _toCurrencyCode).CurrencyTriangulation;

                if (triangulationCurrency)
                {
                    exchangeRateHelperTriangularTo = ExchangeRateHelper::newExchangeDate(ledgerRecId, transactionCurrencyCode, dateOfVATRegister);
                    exchangeRateHelperTriangularTo.parmToCurrency(triangulationCurrency);
                    exchangeRateHelperTriangularTo.parmExchangeRateTypeRecId(_localExchangeRateType);
                    exchangeRateHelperTriangularTo.parmErrorType(AifErrorType::None);

                    exchangeRateHelperTriangularFrom = ExchangeRateHelper::newExchangeDate(ledgerRecId, triangulationCurrency, dateOfVATRegister);
                    exchangeRateHelperTriangularFrom.parmToCurrency(_toCurrencyCode);
                    exchangeRateHelperTriangularFrom.parmExchangeRateTypeRecId(_localExchangeRateType);
                    exchangeRateHelperTriangularFrom.parmErrorType(AifErrorType::None);

                    exchangeRate = exchangeRateHelperTriangularTo.getExchangeRate1() * exchangeRateHelperTriangularFrom.getExchangeRate1() / 100;
                }
            }
        }

        return exchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSourceRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading table id and heading record id for VAT specific exchange rate purpose.
    /// </summary>
    /// <param name = "_tmpTaxWorkTrans">The <c>TmpTaxWorkTrans</c> record.</param>
    /// <returns>An container with heading table id and heading record id.</returns>
    internal static container determineSourceRecordId(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        RefTableId sourceTableId;
        RefRecId sourceRecId;

        if (_tmpTaxWorkTrans.SourceTableId == tableNum(LedgerJournalTrans))
        {
            sourceTableId = _tmpTaxWorkTrans.SourceTableId;
            sourceRecId = _tmpTaxWorkTrans.SourceRecId;
        }
        else
        {
            sourceTableId = _tmpTaxWorkTrans.HeadingTableId;
            sourceRecId = _tmpTaxWorkTrans.HeadingRecId;
        }

        return [sourceTableId, sourceRecId];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>