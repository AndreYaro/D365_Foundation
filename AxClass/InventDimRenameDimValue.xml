<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimRenameDimValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
using xpp = Microsoft.Dynamics.Ax.Xpp;
using model = Microsoft.Dynamics.AX.Metadata.MetaModel;
using core = Microsoft.Dynamics.AX.Metadata.Core.MetaModel;

public class InventDimRenameDimValue extends RunBase
{
    ItemId          itemId;
    FieldName       dimFieldName;
    InventDim       inventDim;
    InventDim       inventDimOrig;
    boolean         updateCaller;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        itemId,
        dimFieldName,
        inventDim,
        inventDimOrig,
        updateCaller
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNotExists</Name>
				<Source><![CDATA[
    protected boolean checkNotExists()
    {
        #InventDimDevelop

        switch (dimFieldName)
        {
            case fieldStr(InventDim, InventBatchId):
                if (InventBatch::exist(inventDim.InventBatchId, itemId))
                {
                    return checkFailed("@SYS57613");
                }
                break;
            case fieldStr(InventDim, InventSerialId):
                if (InventSerial::exist(inventDim.InventSerialId, itemId))
                {
                    return checkFailed("@SYS57613");
                }
                break;
            // Added License Plate & Inventory Status
            case fieldStr(InventDim, LicensePlateId):
                if (WHSLicensePlate::exist(inventDim.LicensePlateId))
                {
                    return checkFailed("@SYS57613");
                }
                break;
            case fieldStr(InventDim, InventStatusId):
                if (WHSInventStatus::exist(inventDim.InventStatusId))
                {
                    return checkFailed("@SYS57613");
                }
                break;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the field ID value that matches the field name.
    /// </summary>
    /// <returns>
    ///    An <c>InventDim</c> field ID.
    /// </returns>
    protected FieldId dimFieldId()
    {
        return fieldName2id(tableNum(InventDim), dimFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if a given table should be skipped in the rename process.
    /// </summary>
    /// <param name = "_tableId">The ID of the table.</param>
    /// <returns>true if the table should be skipped; otherwise, false.</returns>
    [Hookable]    
    protected boolean skipTable(TableId _tableId)
    {
        switch (_tableId)
        {
            case tableNum(InventDimCombination):
            case tableNum(BOMConfigRule):
            case tableNum(ConfigChoice):
            case tableNum(SalesInvoiceTmp):
            case tableNum(SalesInvoiceLocalizationTmp):
            case tableNum(ProdPickListTmp):
            case tableNum(InventSerial):
            case tableNum(InventBatch):
            case tableNum(ProdBOMParmChangeItem):
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRenamer</Name>
				<Source><![CDATA[
    private InventDimRenameTable createRenamer(TableId _tableId, boolean _useBase)
    {
        InventDimRenameTable renamer;

        if (_useBase)
        {
            renamer = InventDimRenameTable::newBase(tableId2Name(_tableId));
        }
        else
        {
            renamer = InventDimRenameTable::newFromTable(tableId2Name(_tableId));
        }

        renamer.parmItemId(this.parmItemId());
        renamer.parmDimFieldName(this.parmDimFieldName());
        renamer.parmInventDim(this.parmInventDim());
        renamer.parmInventDimOrig(this.parmInventDimOrig());

        return renamer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleTable</Name>
				<Source><![CDATA[
    protected void handleTable(TableId _tableId)
    {
        if (this.skipTable(_tableId))
        {
            return;
        }

        InventDimRenameTable baseRenamer = this.createRenamer(_tableId, true);
        if (!baseRenamer.isRenameRequired())
        {
            return;
        }

        InventDimRenameTable renamer = this.createRenamer(_tableId, false);
        if (classIdGet(renamer) == classIdGet(baseRenamer))
        {
            renamer = baseRenamer;
        }

        renamer.renameInventDimValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimFieldName</Name>
				<Source><![CDATA[
    public FieldName parmDimFieldName(FieldName _dimFieldName = dimFieldName)
    {
        dimFieldName = _dimFieldName;
        return dimFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        inventDim = _inventDim;
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimOrig</Name>
				<Source><![CDATA[
    public InventDim parmInventDimOrig(InventDim _inventDimOrig = inventDimOrig)
    {
        inventDimOrig = _inventDimOrig;
        return inventDimOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateCaller</Name>
				<Source><![CDATA[
    public boolean parmUpdateCaller(boolean _updateCaller = updateCaller)
    {
        updateCaller = _updateCaller;
        return updateCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        super();

        try
        {
            ttsbegin;
            this.updateCaller();

            var listOfTables = xpp.MetadataSupport::GetAllTables().GetEnumerator();
            while (listOfTables.MoveNext())
            {
                model.AxTable currentTable = listOfTables.Current;

                if (currentTable.TableType == Core.TableType::Regular &&
                    currentTable.TableGroup != Core.TableGroup::Staging)
                {
                    this.handleTable(tableName2Id(currentTable.Name));
                }
            }
            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        FieldId     dimFieldId;
        Integer     version     = RunBase::getVersion(_packedClass);

        #LOCALMACRO.CurrentList1
            itemId,
            dimFieldId,
            inventDim,
            inventDimOrig,
            updateCaller
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion   :
                [version,#CurrentList] = _packedClass;
                break;
            case 1:
                [version,#CurrentList1] = _packedClass;
                dimFieldName = legacyID2Name(UtilElementType::TableField, dimFieldId, tableStr(InventDim));
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    protected void updateCaller()
    {
        #InventDimDevelop

        if (!updateCaller)
        {
            return;
        }

        switch (dimFieldName)
        {
            case fieldStr(InventDim, InventBatchId):
                InventBatch inventBatch = InventBatch::find(inventDimOrig.InventBatchId, itemId, true);
                inventBatch.InventBatchId = inventDim.InventBatchId;
                inventBatch.update();
                break;
            case fieldStr(InventDim, InventSerialId):
                InventSerial inventSerial = InventSerial::find(inventDimOrig.InventSerialId, itemId, true);
                inventSerial.InventSerialId = inventDim.InventSerialId;
                inventSerial.update();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerForm</Name>
				<Source><![CDATA[
    void updateCallerForm(FormObjectSet formDataSource)
    {
        switch (this.dimFieldId())
        {
            case fieldNum(InventDim, InventBatchId):
                InventBatch inventBatch = InventBatch::find(inventDimOrig.InventBatchId, itemId);
                formDataSource.research();
                formDataSource.findRecord(inventBatch);
                break;
            case fieldNum(InventDim, InventSerialId):
                InventSerial inventSerial = InventSerial::find(inventDimOrig.InventSerialId, itemId);
                formDataSource.research();
                formDataSource.findRecord(inventSerial);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (!itemId)
        {
            return checkFailed("@SYS16661");
        }

        if (!inventDim.(this.dimFieldId()))
        {
            return checkFailed(strFmt("@SYS53724",fieldId2pname(tableNum(InventDim), this.dimFieldId())));
        }

        if (inventDimOrig.(this.dimFieldId()) == inventDim.(this.dimFieldId()))
        {
            return checkFailed(strFmt("@SYS70880",fieldId2pname(tableNum(InventDim), this.dimFieldId())));
        }

        if (!this.checkNotExists())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimRenameDimValue construct()
    {
        return new InventDimRenameDimValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS74517";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventBatch</Name>
				<Source><![CDATA[
    public static InventDimRenameDimValue newInventBatch(InventBatch _inventBatch)
    {
        InventDimRenameDimValue     inventDimRenameDimValue = InventDimRenameDimValue::construct();
        InventDim                   inventDimOld;
        InventDim                   inventDimNew;

        inventDimRenameDimValue.parmDimFieldName(fieldStr(InventDim, InventBatchId));
        inventDimRenameDimValue.parmItemId(_inventBatch.ItemId);

        inventDimNew.InventBatchId = _inventBatch.InventBatchId;
        inventDimRenameDimValue.parmInventDim(inventDimNew);

        inventDimOld.InventBatchId = _inventBatch.orig().InventBatchId;
        inventDimRenameDimValue.parmInventDimOrig(inventDimOld);

        inventDimRenameDimValue.parmUpdateCaller(false);

        return inventDimRenameDimValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventSerial</Name>
				<Source><![CDATA[
    public static InventDimRenameDimValue newInventSerial(InventSerial _inventSerial)
    {
        InventDimRenameDimValue     inventDimRenameDimValue = InventDimRenameDimValue::construct();
        InventDim                   inventDimOld;
        InventDim                   inventDimNew;

        inventDimRenameDimValue.parmDimFieldName(fieldStr(InventDim, InventSerialId));
        inventDimRenameDimValue.parmItemId(_inventSerial.ItemId);

        inventDimNew.InventSerialId = _inventSerial.InventSerialId;
        inventDimRenameDimValue.parmInventDim(inventDimNew);

        inventDimOld.InventSerialId = _inventSerial.orig().InventSerialId;
        inventDimRenameDimValue.parmInventDimOrig(inventDimOld);

        inventDimRenameDimValue.parmUpdateCaller(false);

        return inventDimRenameDimValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Check if the given table is SSRS temporary data table.
    /// </summary>
    /// <param name = "_tableId">
    ///   Table ID to check.
    /// </param>
    /// <returns>
    ///   true if the table is SSRS temporary data table; else false.
    /// </returns>
    [Hookable(true)]
    private boolean isTmp(TableId _tableId)
    {
        if (_tableId == tableNum(SalesInvoiceTmp)
         || _tableId == tableNum(SalesInvoiceLocalizationTmp)
         || _tableId == tableNum(ProdPickListTmp))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>