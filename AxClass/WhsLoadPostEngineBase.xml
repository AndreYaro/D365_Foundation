<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadPostEngineBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WhsLoadPostEngineBase extends WHSLoadPostEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createShipments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a shipment
    /// </summary>
    /// <param name="_validate">
    ///    Not used.
    /// </param>
    /// <returns>
    ///    Boolean value indicating if errors occurred
    /// </returns>
    /// <remarks>
    ///    Changes made to this method should also be considered for the WHSWarehouseRelease.createShipment method.
    /// </remarks>
    public boolean createShipments(boolean _validate = false)
    {
        boolean ret = WhsWarehouseRelease::createShipmentsForLoadPostEngine(this);

        loadTable.reread();
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipReservation</Name>
				<Source><![CDATA[
    protected boolean mustSkipReservation()
    { 
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserves the quantity left on the order.
    /// </summary>
    /// <param name="_validate">
    /// Determines whether it is only validated for reservation or not.
    /// </param>
    /// <returns>
    /// True if the order lines are reserved successfully.
    /// </returns>
    /// <remarks>
    /// The load might have been posted already and there might be work created for the lines. We find the quantity left to
    /// reserve by taking work created quantity into consideration.
    /// </remarks>
    public boolean reserveOrder(boolean _validate = false)
    {
        if (this.mustSkipReservation())
        {
            return true;
        }

        WHSReservation          reservation;
        WHSLoadLine             loadLine;
        InventTable             inventTable;
        InventModelGroupItem    inventModelGroupItem;
        InventModelGroup        inventModelGroup;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventQty               qtyToReserve;
        boolean                 retOrder = true;
        Set                     salesIds = new Set(Types::String);
        Set                     transferIds = new Set(Types::String);

        // If the Warehouse is not enabled to reserve at Load Posting, just return true.
        if (InventLocation::find(loadTable.InventLocationId).ReserveAtLoadPost)
        {
            var loadReleaseReservPolicy = InventLocation::find(loadTable.InventLocationId).LoadReleaseReservationPolicy;

            while select loadLine
                order by RecId // Order by RecId to avoid running lines created by splitting load lines during reservation.
                where loadLine.LoadId       == loadTable.LoadId
                &&    loadLine.InventQty    > loadLine.WorkCreatedQty
            {
                // the loadline might have been posted once so we try to adjust the qty that we reserve based on already created work.
                qtyToReserve = loadLine.InventQty - loadLine.WorkCreatedQty;

                boolean retLine = WHSLoadLine::reserveLoadLineHandlingQty(loadLine, qtyToReserve);

                if (loadReleaseReservPolicy == WHSLoadReleaseReservationPolicy::Error)
                {
                    retOrder = retOrder && retLine;
                }

                if (!this.mustCheckFulfillmentRateForWarehouse(loadTable.InventLocationId))
                {
                    if (loadLine.InventTransType == InventTransType::Sales)
                    {
                        if (!salesIds.in(loadLine.OrderNum))
                        {
                            salesIds.add(loadLine.OrderNum);
                        }
                    }
                    else if (loadLine.InventTransType == InventTransType::TransferOrderShip && loadLine.TransportRequest == NoYes::No)
                    {
                        if (!transferIds.in(loadLine.OrderNum))
                        {
                            transferIds.add(loadLine.OrderNum);
                        }
                    }
                }

                if (!retLine)
                {
                    this.createError(loadLine.LoadId,
                                    literalStr("@WAX2737"),
                                    strFmt('%1', qtyToReserve),
                                    strFmt('%1', loadLine.ItemId),
                                    strFmt('%1', loadLine.OrderNum),
                                    "",
                                    NoYes::No);
                }
            }

            if (!salesIds.empty())
            {
                SetEnumerator se = salesIds.getEnumerator();
                
                while (se.moveNext())
                {
                    WHSFulfillmentRateValidator::checkFulfillmentRateForSales(SalesTable::find(se.current()));
                }
            }

            if (!transferIds.empty())
            {
                SetEnumerator se = transferIds.getEnumerator();
                
                while (se.moveNext())
                {
                    WHSFulfillmentRateValidator::checkFulfillmentRateForTransfer(InventTransferTable::find(se.current()));
                }
            }
        }
        else
        {
            reservation = WHSReservation::construct();

            // Loop over non-reserved invent trans records for this loadLine and call to reserve them.
            while select inventTrans
                where inventTrans.StatusIssue   >  StatusIssue::ReservPhysical
                   && inventTrans.StatusReceipt == StatusReceipt::None
                join TableId
                    from loadLine
                    order by loadLine.InventTransId
                        where loadLine.LoadId       == loadTable.LoadId
                           && loadLine.ShipmentId   == ''
                join TableId
                    from inventTransOrigin
                        where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                           && inventTransOrigin.InventTransId   == loadLine.InventTransId
                join TableId
                    from inventTable
                        where inventTable.ItemId    == loadLine.ItemId
                join TableId
                    from inventModelGroupItem
                        where inventModelGroupItem.ItemId           == inventTable.ItemId
                           && inventModelGroupItem.ItemDataAreaId   == inventTable.DataAreaId
                join TableId
                    from inventModelGroup
                        where inventModelGroup.ModelGroupId     == inventModelGroupItem.ModelGroupId
                           && inventModelGroup.DataAreaId       == inventModelGroupItem.ModelGroupDataAreaId
                           && inventModelGroup.NegativePhysical == NoYes::Yes
            {
                // Pass in negative qty
                reservation.reserveInventoryHandlingQty(inventTrans,
                    PdsGlobal::pdsIsCWItem(inventTrans.ItemId) ? inventTrans.PdsCWQty : inventTrans.Qty);
            }
        }

        return retOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates items on the load.
    /// </summary>
    /// <param name="_validate">
    /// Determines whether the items should be validated or not.
    /// </param>
    /// <returns>
    /// True if all the items in the load are validated.
    /// </returns>
    /// <remarks>
    /// Items in the load should have conversation factors set up.
    /// </remarks>
    boolean validateItems(boolean _validate = false)
    {
        WHSLoadLine     loadLine;
        boolean         ret = true;

        while select ItemId, InventDimId from loadLine
            group by loadLine.ItemId, loadLine.InventDimId
            where loadLine.LoadId == loadTable.LoadId
        {
            if (!WHSInventTable::hasConversionFactors(loadLine.ItemId, loadLine.InventDimId))
            {
                ret = ret && (!this.createError(loadTable.LoadId,
                                                literalStr("@WAX858"),
                                                loadLine.ItemId,
                                                '',
                                                '',
                                                '',
                                                NoYes::Yes));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates load.
    /// </summary>
    /// <param name="_validate">
    /// Determines whether the load should be validated or not.
    /// </param>
    /// <returns>
    /// True if the load is validated.
    /// </returns>
    boolean validateLoad(boolean _validate = false)
    {
        WHSParameters       parameters;
        boolean             ret = true;

        if (InventLocation::find(loadTable.InventLocationId).whsEnabled)
        {
            if (loadTable.Invalid)
            {
                ret = (!this.createError(loadTable.LoadId,
                                         literalStr("@WAX5526"),
                                         '',
                                         '',
                                         '',
                                         '',
                                         NoYes::Yes));
            }

            if (ret)
            {
                parameters = WHSParameters::find();

                if (!parameters.UserLocType || !parameters.ShipFinalLocType)
                {
                    ret = (!this.createError(loadTable.LoadId,
                                             literalStr("@WAX631"),
                                             '',
                                             '',
                                             '',
                                             '',
                                             NoYes::Yes));
                }
            }

            if (ret)
            {
                if (!loadTable.LoadTemplateId)
                {
                    ret = (!this.createError(loadTable.LoadId,
                                            literalStr("@WAX4826"),
                                            '',
                                            '',
                                            '',
                                            '',
                                            NoYes::Yes));
                }
                else
                {
                    if (loadTable.displayWeightRemaining() < 0)
                    {
                        WHSLoadWeight totalLoad = loadTable.LoadWeight;
                        if (!WHSPostError::find(loadTable.LoadId,
                                                literalStr("@WAX630"),
                                                strFmt('%1', totalLoad),
                                                strFmt('%1', loadTable.LoadTipWeight),
                                                '',
                                                '').ErrorOverride)
                        {
                            ret = (!this.createError(loadTable.LoadId,
                                                     literalStr("@WAX630"),
                                                     strFmt('%1', totalLoad),
                                                     strFmt('%1', loadTable.LoadTipWeight),
                                                     '',
                                                     '',
                                                     NoYes::No));
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that LoadLines are valid for warehouse processing.
    /// </summary>
    /// <param name="_validate">
    /// Required parameter for all post methods.
    /// </param>
    /// <returns>
    /// Are the load lines valid
    /// </returns>
    public boolean validateLoadLines(boolean _validate = false)
    {
        WHSLoadLine         loadLine;
        SalesLine           salesLine;
        InventDim           inventDim;        
        boolean             ret = true;
        Set                 salesIds = new Set(Types::String);
        InventLocation      inventLocation = InventLocation::find(loadTable.InventLocationId);

        if (inventLocation.WHSEnabled)
        {
            if (WHSLoadTable::hasLoadInvalidLines(loadTable.LoadId))
            {
                ret = !this.createError(loadTable.LoadId,
                                literalStr("@WAX5526"),
                                '',
                                '',
                                '',
                                '',
                                NoYes::Yes);
            }

            if (ret)
            {
                while select ItemId from loadLine
                    where loadLine.LoadId == loadTable.LoadId
                        join SalesType, SalesId from salesLine
                        where salesLine.InventTransId == loadLine.InventTransId
                            join InventLocationId from inventDim
                            where inventDim.InventDimId == loadLine.InventDimId
                {
                    if (salesLine.SalesType     != SalesType::Sales
                        && salesLine.SalesType  != SalesType::ItemReq)
                    {
                        ret = (!this.createError(loadTable.LoadId,
                                                literalStr("@WAX1015"),
                                                salesLine.SalesId,
                                                '',
                                                '',
                                                '',
                                                NoYes::Yes));
                        break;
                    }
                    if (!InventLocation::find(inventDim.InventLocationId).whsEnabled)
                    {
                        ret = (!this.createError(loadTable.LoadId,
                                                literalStr("@WAX1016"),
                                                inventDim.InventLocationId,
                                                '',
                                                '',
                                                '',
                                                NoYes::Yes));
                        break;
                    }
                    if (!salesIds.in(salesLine.SalesId))
                    {
                        salesIds.add(salesLine.SalesId);
                        ret = this.checkCreditLimit(salesLine.SalesId);
                        
                        if (ret)
                        {
                            ret = this.checkCustomerIsNotOnHold(salesLine.SalesTable());
                        }

                        if (!ret)
                        {
                            break;
                        }
                       
                        if (this.mustCheckFulfillmentRateForWarehouse(inventDim.InventLocationId))
                        {
                            WHSFulfillmentRateValidator::checkFulfillmentRateForSales(SalesTable::find(salesLine.SalesId));
                        }
                    }
                }

                if (this.mustCheckFulfillmentRateForWarehouse(loadTable.InventLocationId))
                {
                    WHSLoadLine         loadLineTransferLine;
                    InventTransferTable transferTable;
                    InventTransferLine  transferLine;

                    while select transferTable
                    exists join transferLine
                        where transferLine.TransferId == transferTable.TransferId
                    exists join loadLineTransferLine
                        where loadLineTransferLine.LoadId == loadTable.LoadId
                            && loadLineTransferLine.InventTransId == transferLine.InventTransId
                            && loadLineTransferLine.InventTransType == InventTransType::TransferOrderShip
                    {
                        WHSFulfillmentRateValidator::checkFulfillmentRateForTransfer(transferTable);
                    }
                }

            }
            
            if (ret)
            {
                WHSInventQty qtyToRelease;
                // Find the total quantity to be released from all load lines grouped by source document line
                Map quantitiesToRelease = new Map(Types::String, Types::Integer);
                while select sum(InventQty), sum(WorkCreatedQty), InventTransId from loadLine
                    group by loadLine.InventTransId
                       where loadLine.LoadId == loadTable.LoadId
                {
                    qtyToRelease = loadLine.InventQty - loadLine.WorkCreatedQty;
                    quantitiesToRelease.insert(loadLine.InventTransId, qtyToRelease);
                } 
                
                // Compare quantities to release with not yet picked quantity on the source document line
                InventTrans         inventTrans;
                InventTransOrigin   inventTransOrigin;            
                WHSInventQty        notPickedQty;           
                while select sum(Qty), sum(PdsCWQty), ItemId from inventTrans
                    group by inventTrans.InventTransOrigin, inventTransOrigin.InventTransId, inventTrans.ItemId
                       where inventTrans.StatusIssue               >  StatusIssue::Picked
                          && inventTrans.StatusReceipt             == StatusReceipt::None
                        join InventTransId from inventTransOrigin
                           where inventTransOrigin.RecId           == inventTrans.inventTransOrigin
                        exists join loadLine
                            where loadLine.InventTransId           == inventTransOrigin.InventTransId
                               && loadLine.LoadId                  == loadTable.LoadId
                {
                    notPickedQty = PdsGlobal::pdsIsCWItem(inventTrans.ItemId) ? -inventTrans.PdsCWQty : -inventTrans.Qty;
                    qtyToRelease = quantitiesToRelease.lookup(inventTransOrigin.InventTransId);
                    if (qtyToRelease > notPickedQty)
                    {
                        ret = (!this.createError(loadTable.LoadId,
                                         literalStr("@WAX:WAX_Message_Error_InsufficientQtyToPickForLoad"),
                                         inventTrans.ItemId,
                                         inventTransOrigin.InventTransId,
                                         loadTable.LoadId,
                                         '',
                                         NoYes::Yes));
                    }
                } 
            }

            if (ret)
            {
                
                while select sum(InventQty), InventTransId, InventTransType, ItemId from loadLine
                    group by loadLine.InventTransId, loadLine.InventTransType, loadLine.ItemId
                        where loadLine.LoadId == loadTable.LoadId
                            && loadLine.ShipmentId == ''
                {
                    if (!this.canLoadLinesTotalQuantityBeReleased(loadLine.InventTransType, loadLine.InventTransId, loadLine.InventQty))
                    {
                        ret = !this.createError(loadTable.LoadId, 
                                        literalStr("@WAX:WAX_Message_Error_InsufficientOrderLineQtyForLoad"), 
                                        loadLine.ItemId, 
                                        loadLine.InventTransId,
                                        loadTable.LoadId,
                                        '',
                                        true);
                    }
                }                
                
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLoadLinesTotalQuantityBeReleased</Name>
				<Source><![CDATA[
    private boolean canLoadLinesTotalQuantityBeReleased(
        InventTransType _sourceDocumentType,
        InventTransId   _sourceDocumentInventTransId,
        WHSInventQty    _totalLoadLineInventQty)
    {
        WHSReleasedQtyView releasedQtyView;

        select SumOfInventQty from releasedQtyView
            where releasedQtyView.InventTransId == _sourceDocumentInventTransId;

        return (releasedQtyView.SumOfInventQty + _totalLoadLineInventQty) <= this.maxReleaseHandlingQuantity(_sourceDocumentType, _sourceDocumentInventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLoadLineQuantityBeReleased</Name>
				<Source><![CDATA[
    private boolean canLoadLineQuantityBeReleased(WHSLoadLine _loadLine)
    {
        WHSReleasedQtyView releasedQtyView;

        select SumOfInventQty from releasedQtyView
            where  releasedQtyView.InventDimId      == _loadLine.InventDimId
                && releasedQtyView.InventTransId    == _loadLine.InventTransId;

        return (releasedQtyView.SumOfInventQty + _loadLine.InventQty) <= this.maxReleaseHandlingQuantity(_loadLine.InventTransType, _loadLine.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxReleaseHandlingQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty maxReleaseHandlingQuantity(InventTransType _sourceDocumentType, InventTransId _sourceDocumentInventTransId)
    {
        switch (_sourceDocumentType)
        {
            case InventTransType::Sales:
                return SalesLine::findInventTransId(_sourceDocumentInventTransId).maxReleaseHandlingQuantity();
                
            case InventTransType::TransferOrderShip:
                return WHSInventTransferLine::maxTransferLineReleaseQty(InventTransferLine::findTransIdShip(_sourceDocumentInventTransId));
        }

        // Don't break anyone who might have a custom InventTransType, if we can't handle the additional validation, succeed by default
        return realMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>planCrossDocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs planned cross docking for the load.
    /// </summary>
    /// <param name = "_validate">Determines whether the load should be validated or not.</param>
    /// <returns>True if the load is validated; otherwise, false</returns>
    [Hookable(false)]
	public final boolean planCrossDocking(boolean _validate = false)
    {
        boolean        ret = true;
        InventLocation warehouse = InventLocation::find(loadTable.InventLocationId);
        boolean whsLoadPostEngineBasePlanCrossDockingUseLiteralStrFlightEnabled = WhsLoadPostEngineBasePlanCrossDockingUseLiteralStrFlight::instance().isEnabled();

        if (warehouse.WHSEnabled)
        {
            
            ttsbegin;

            WHSLoadLine loadLine;

            while select forupdate loadLine
                where loadLine.LoadId == loadTable.LoadId
            {
                boolean crossDockExecuted = WHSCrossDockingPlanned::crossDock(loadLine);
                
                // LoadTable could be updated when we execute WHSCrossDockingPlanned::crossDock method above
                // When we creating WHSCrossDockingPlanned we always populating WHSLoadLine.crossDocEvaluated field
                // And update on WHSLoadLine also calling update on WHSLoadTable
                loadTable.reread();                

                if (!crossDockExecuted && warehouse.ReleaseToWarehouseRule == WHSReleaseToWarehouseRule::RequireFullReservation)
                {
                    ret = false;
                    
                    if (whsLoadPostEngineBasePlanCrossDockingUseLiteralStrFlightEnabled)
                    {
                        this.createError(loadTable.LoadId,
                                         literalStr("@WAX:LoadPostFailureForFullReservation"),
                                         '',
                                         '',
                                         '',
                                         '',
                                         true);
                    }
                    else
                    {
                        this.createError(loadTable.LoadId,
                                     "@WAX:LoadPostFailureForFullReservation",
                                     '',
                                     '',
                                     '',
                                     '',
                                     true);
                    }
                }
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckFulfillmentRateForWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if fulfillment rate for warehouse must be checked.
    /// </summary>
    /// <param name = "_inventLocationId">The warehouse Id.</param>
    /// <returns>true if the fulfillment rate must be checked; otherwise, false</returns>
    protected boolean mustCheckFulfillmentRateForWarehouse(InventLocationId _inventLocationId)
    {
        return !InventLocation::find(_inventLocationId).ReserveAtLoadPost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>