<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PersonSearchQueryBuilderAppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PersonSearchQueryBuilderAppSuite_Extension</c> class extends the query builder to add filter results
/// for customer and vendor accounts with the possibility of a dimension delimiter escape character.
/// </summary>
[ExtensionOf(classStr(PersonSearchQueryBuilder))]
public final class PersonSearchQueryBuilderAppSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createEntityQueryFromTemplate</Name>
				<Source><![CDATA[
    public void createEntityQueryFromTemplate()
    {
        next createEntityQueryFromTemplate();

        this.addFiltersForDelimitedCustVendValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFiltersForDelimitedCustVendValues</Name>
				<Source><![CDATA[
    private void addFiltersForDelimitedCustVendValues()
    {
        PersonSearchResultEntityFieldFilter entityFieldFilter;
        PersonSearchTemplateMetadataTmp templateMetadataTmp;

        while select entityFieldFilter
            where entityFieldFilter.TaskId == taskId
                && (entityFieldFilter.Category == PersonSearchResultCategory::Customer
                    || entityFieldFilter.Category == PersonSearchResultCategory::Vendor)
        exists join templateMetadataTmp
            where templateMetadataTmp.TemplateId == templateId
                && templateMetadataTmp.EntityName == entityFieldFilter.EntityName
                && templateMetadataTmp.EntityField == entityFieldFilter.EntityField
                && templateMetadataTmp.MetadataTypeId == extendedTypeNum(DimensionDisplayValue)
        {
            str escapedFilterValue = this.generateEscapedFilterValue(entityFieldFilter.FilterValue);

            if (escapedFilterValue != entityFieldFilter.FilterValue)
            {
                this.addFilterValue(entityFieldFilter, escapedFilterValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterValue</Name>
				<Source><![CDATA[
    private void addFilterValue(PersonSearchResultEntityFieldFilter _entityFieldFilter, str _newFilterValue)
    {
        PersonSearchResultEntityFieldFilter resolvedEntityFieldFilter = _entityFieldFilter.data();

        resolvedEntityFieldFilter.FilterValue = _newFilterValue;
        resolvedEntityFieldFilter.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateEscapedFilterValue</Name>
				<Source><![CDATA[
    private str generateEscapedFilterValue(str _filterValueToEscape)
    {
        // For query search, we expect a single delimited character. That needs to be escaped.
        // Both escape characters must be escaped for database insert.
        // Example: Search for US\-001 requires a filter value of US\\-001.
        //          String should be US\\\\-001 for database insert.
        const str escapedDelimiterFormat = '\\\\%1';

        str escapedFilterValue;

        List accountValueList = DimensionResolver::splitByDimensionIntegrationDelimiter(_filterValueToEscape);

        if (accountValueList && accountValueList.elements() > 1)
        {
            ListEnumerator accountValueListEnumerator = accountValueList.getEnumerator();

            str delimiter = DimensionParameters::getDimensionSegmentDelimiter();
            str escapedDelimiter = strFmt(escapedDelimiterFormat, delimiter);
            str filterValue;

            while (accountValueListEnumerator.moveNext())
            {
                if (!filterValue)
                {
                    filterValue = accountValueListEnumerator.current();
                }
                else
                {
                    filterValue = strFmt('%1%2%3', filterValue, escapedDelimiter, accountValueListEnumerator.current());
                }
            }

            escapedFilterValue = filterValue;
        }
        else
        {
            escapedFilterValue = _filterValueToEscape;
        }

        return escapedFilterValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>