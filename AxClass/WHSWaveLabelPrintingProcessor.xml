<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveLabelPrintingProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveLabelPrintingProcessor</c> processes the wave label printing step.
/// </summary>
internal class WHSWaveLabelPrintingProcessor extends RunBaseBatch implements SysErrorMessageHelpScopeIBatchProvider, BatchRetryable
{
    private WHSWaveId                   waveId;
    private WHSReleaseToWarehouseId     releaseToWarehouseId;
    private WHSWaveExecutionID          waveExecutionId;
    private WHSWaveStep                 waveStep;
    private WHSWaveLockManager          whsWaveLockManager;
    private WHSWaveMethodStatusHandler  waveMethodStatusHandler;
    private WHSWaveStepController       lockedWaveStepController;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        waveId,
        releaseToWarehouseId,
        waveExecutionId,
        waveStep
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWaveLabelPrintingProcessor construct()
    {
        return new WHSWaveLabelPrintingProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouseId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSReleaseToWarehouseId parmReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId = releaseToWarehouseId)
    {
        releaseToWarehouseId = _releaseToWarehouseId;

        return releaseToWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWaveExecutionID parmWaveExecutionId(WHSWaveExecutionID _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;

        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;

        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveStep</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWaveStep parmWaveStep(WHSWaveStep _waveStep = waveStep)
    {
        waveStep = _waveStep;

        return waveStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostEngine</Name>
				<Source><![CDATA[
    private void initFromPostEngine(WHSPostEngine _postEngine)
    {
        this.parmWaveId(_postEngine.parmWaveTable().WaveId);
        this.parmReleaseToWarehouseId(_postEngine.parmReleaseToWarehouseId());
        this.parmWaveExecutionId(_postEngine.parmWaveExecutionId());
        this.parmWaveStep(_postEngine.parmWaveTemplateLine().WaveStep);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPostEngine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSWaveLabelPrintingProcessor newFromPostEngine(WHSPostEngine _postEngine)
    {
        WHSWaveLabelPrintingProcessor wavelabelPrintingProcessor = WHSWaveLabelPrintingProcessor::construct();
        wavelabelPrintingProcessor.initFromPostEngine(_postEngine);

        return wavelabelPrintingProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process label printing step for the currently running wave.
    /// </summary>
    [Hookable(false)]
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            UserConnection                                  controllerConn;
            WHSInstrumentationWaveProcessingPerformanceTask perfTask;

            WHSWaveTable waveTable = WHSWaveTable::findEnsureRecordIsReadInsideTTS(waveId);

            if (appl.ttsLevel() != 0)
            {
                WHSInstrumentationWaveLabelPrintingPerformanceTask::logWaveLabelPrintingError(
                        "@WAX:WaveProcessingLabelPrintingStepUnexpectedErrorTTSNotZero",
                        waveTable.RecId,
                        waveExecutionId,
                        releaseToWarehouseId,
                        waveStep);

                // this should never happen because this is the batch task for the label printing step
                throw error("@WAX:WaveProcessingLabelPrintingStepUnexpectedErrorTTSNotZero");
            }

            try
            {
                perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newLabelPrintingProcessor(waveTable, waveExecutionId, funcName());

                // A user connection is used for the control record so that we can reduce the transaction scope for the actual processing of pending label printings
                controllerConn = new UserConnection();
                controllerConn.ttsbegin();

                // Insert control record
                lockedWaveStepController = WHSWaveStepController::createAndLockControlRecord(waveId, waveExecutionId, methodStr(WHSPostEngineBase, waveLabelPrinting), waveTable.InventLocationId, controllerConn);

                if (WHSParameters::find().WaveProgressLog)
                {
                    waveMethodStatusHandler = WHSWaveMethodStatusHandler::newWaveMethodStatusHandler(waveTable.waveId, methodStr(WHSPostEngineBase, waveLabelPrinting));
                }

                WHSWaveTemplateLine templateLine = WHSWaveTemplateLine::find(waveTable.WaveTemplateName, waveStep);
                WHSPrintLabels printLabels = WHSPrintLabels::newFromWave(waveTable.WaveId, templateLine.WaveStepCode, waveMethodStatusHandler);
                printLabels.printLabels();

                // Delete the control record which indicates we have safely ended this cycle of label printing
                this.deleteControlRecord();

                if (waveMethodStatusHandler)
                {
                    waveMethodStatusHandler.updateWaveStepProgressToCompleted();
                }

                controllerConn.ttscommit();
            }
            catch
            {
                // it's okay to have a general catch here because we catch all exceptions (we assume tts level 0), we abort the userConnection,
                //mark the wave as error, and then throw  meaning that we leave the handling of the exception to the caller, we are not ending the method gracefully.
                if (controllerConn != null)
                {
                    controllerConn.ttsabort();
                }
            
                // Create a wave error indicator to signal that other label printing tasks should stop and let the post label printing task call into wave cleanup.
                this.createWaveErrorIndicator();
                throw error(strFmt("@WAX:WaveLabelPrintingError", waveId));
            }
            finally
            {
                if (controllerConn != null)
                {
                    controllerConn.finalize();
                }
   
                if (perfTask != null)
                {
                    perfTask.endTask();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteControlRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the locked control record
    /// </summary>
    /// <remarks>
    /// The control record should already be selected with a pessimistic lock.
    /// This method should be called withing transaction scope of the select for this record.
    /// </remarks>
    private void deleteControlRecord()
    {
        if (lockedWaveStepController.RecId != 0)
        {
            lockedWaveStepController.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaveErrorIndicator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSWaveErroredIndicator</c> for the currently running wave to signal the error for parallel running tasks of this wave.
    /// </summary>
    private void createWaveErrorIndicator()
    {
        WHSWaveErroredIndicator::createRecordIfUnique(waveId, waveExecutionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@WAX:WaveLabelPrintingClassDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WhsWaveExecute));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSWaveExecute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    final public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public BatchInfo batchInfo()
    {
        BatchInfo ret = super();

        ret.parmRetryable(false);
        ret.parmRetriesOnFailure(0);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>