<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanOverviewQueryBuilderUnplanned</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanOverviewQueryBuilderUnplanned</c> class is the AIF query builder class for the kanban
///    quantity overview.
/// </summary>
public class KanbanOverviewQueryBuilderUnplanned extends KanbanOverviewQueryBuilderCell
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the query to fetch the products for the unplanned overview control.
    /// </summary>
    public void initialize()
    {
        RefRecId                wrkCtrResourceGroupRecId = this.wrkCtrResourceGroupRecId();

        query = this.buildItemRelationQueryBase();

        QueryBuildDataSource qbdsKanbanRule = query.dataSourceTable(tablenum(KanbanRule));

        QueryBuildDataSource qbdsKanbanFlow = qbdsKanbanRule.addDataSource(tablenum(KanbanFlow));
        qbdsKanbanFlow.joinMode(JoinMode::ExistsJoin);
        qbdsKanbanFlow.addLink(fieldnum(KanbanRule, KanbanFlow), fieldnum(KanbanFlow, RecId));

        QueryBuildDataSource qbdsPlanPlanActivityFirst = qbdsKanbanFlow.addDataSource(tablenum(PlanPlanActivity));
        qbdsPlanPlanActivityFirst.fetchMode(QueryFetchMode::One2One);
        qbdsPlanPlanActivityFirst.joinMode(JoinMode::InnerJoin);
        qbdsPlanPlanActivityFirst.addLink(fieldnum(KanbanFlow, FirstPlanPlanActivity), fieldnum(PlanPlanActivity, RecId));

        // Kanban Flow Activity Relationship
        QueryBuildDataSource qbdsKanbanFlowActivityRelationship = qbdsKanbanFlow.addDataSource(tablenum(KanbanFlowActivityRelationship));
        qbdsKanbanFlowActivityRelationship.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanFlowActivityRelationship.joinMode(JoinMode::OuterJoin);
        qbdsKanbanFlowActivityRelationship.addLink(fieldnum(KanbanFlow, RecId), fieldnum(KanbanFlowActivityRelationship, KanbanFlow));

        // Lean Prod Flow Plan Activity Relation
        QueryBuildDataSource qbdsLeanProdFlowPlanActivityRelation = qbdsKanbanFlowActivityRelationship.addDataSource(tablenum(LeanProdFlowPlanActivityRelation));
        qbdsLeanProdFlowPlanActivityRelation.joinMode(JoinMode::OuterJoin);
        qbdsLeanProdFlowPlanActivityRelation.addLink(fieldnum(KanbanFlowActivityRelationship, LeanProdFlowActivityRelation), fieldnum(LeanProdFlowPlanActivityRelation, RecId));

        // Sequence Plan Activity Relationship
        QueryBuildDataSource qbdsSequencePlanActivityRelationship = qbdsLeanProdFlowPlanActivityRelation.addDataSource(tablenum(PlanActivityRelationship));
        qbdsSequencePlanActivityRelationship.joinMode(JoinMode::OuterJoin);
        qbdsSequencePlanActivityRelationship.addLink(fieldnum(LeanProdFlowPlanActivityRelation, PlanActivityRelationship), fieldnum(PlanActivityRelationship, RecId));

        // Lean Production Flow Activity Work Cell - Plan Activity
        QueryBuildDataSource qbdsLeanProductionFlowActivity = qbdsKanbanFlow.addDataSource(tablenum(LeanProductionFlowActivity));
        qbdsLeanProductionFlowActivity.fetchMode(QueryFetchMode::One2One);
        qbdsLeanProductionFlowActivity.joinMode(JoinMode::ExistsJoin);
        QueryBuildRange queryBuildRange = qbdsLeanProductionFlowActivity.addRange(fieldnum(LeanProductionFlowActivity, PlanActivity));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.value(strfmt('((%1.%2 == %3.%4) || (%5.%6 == %7.%8) || (%9.%10 == %11.%12))',
            qbdsSequencePlanActivityRelationship.name(),
            fieldstr(PlanActivityRelationship, IndependentPlanActivity),
            qbdsLeanProductionFlowActivity.name(),
            fieldstr(LeanProductionFlowActivity, PlanActivity),
            qbdsSequencePlanActivityRelationship.name(),
            fieldstr(PlanActivityRelationship, DependentPlanActivity),
            qbdsLeanProductionFlowActivity.name(),
            fieldstr(LeanProductionFlowActivity, PlanActivity),
            qbdsPlanPlanActivityFirst.name(),
            fieldstr(PlanPlanActivity, PlanActivity),
            qbdsLeanProductionFlowActivity.name(),
            fieldstr(LeanProductionFlowActivity, PlanActivity)));

        queryBuildRange = qbdsLeanProductionFlowActivity.addRange(fieldnum(LeanProductionFlowActivity, WrkCtrResourceGroup));
        queryBuildRange.value(SysQuery::value(wrkCtrResourceGroupRecId));

        // Criteria - jobs not planned

        // Kanban
        QueryBuildDataSource qbdsKanban = qbdsKanbanRule.addDataSource(tablenum(Kanban));
        qbdsKanban.joinMode(JoinMode::ExistsJoin);
        qbdsKanban.addLink(fieldnum(KanbanRule, RecId), fieldnum(Kanban, KanbanRule));

        // Only manufacture kanbans can have process jobs
        queryBuildRange = qbdsKanban.addRange(fieldnum(Kanban, Type));
        queryBuildRange.value(SysQuery::value(LeanKanbanType::Manufacturing));

        // Kanban Job
        QueryBuildDataSource qbdsKanbanJob = qbdsKanban.addDataSource(tablenum(KanbanJob));
        qbdsKanbanJob.joinMode(JoinMode::ExistsJoin);
        qbdsKanbanJob.addLink(fieldnum(Kanban, RecId), fieldnum(KanbanJob, Kanban));

        queryBuildRange = qbdsKanbanJob.addRange(fieldnum(KanbanJob, Type));
        queryBuildRange.value(SysQuery::value(LeanKanbanJobType::Process));

        queryBuildRange = qbdsKanbanJob.addRange(fieldnum(KanbanJob, Status));
        queryBuildRange.value(SysQuery::value(LeanKanbanJobStatus::NotPlanned));

        queryBuildRange = qbdsKanbanJob.addRange(fieldnum(KanbanJob, Executable));
        queryBuildRange.value(SysQuery::value(NoYes::Yes));

        // Initialize query run
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanOverviewQueryBuilderUnplanned construct()
    {
        return new KanbanOverviewQueryBuilderUnplanned();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
