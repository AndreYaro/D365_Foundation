<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoice4PaymController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesInvoice4PaymController</c> class is the helper class for the associated SRS Report.
/// </summary>
public class SalesInvoice4PaymController extends SrsPrintMgmtFormLetterController implements BatchRetryable
{
    PrintCopyOriginal                   printCopyOriginal;
    RecordSortedList                    journalList;
    SalesInvoice4PaymJournalPrint_RU    salesInvoice4PaymJournalPrint;
    CustInvoice4PaymJour_RU             custInvoice4PaymJour;
    SalesInvoice4PaymContract           salesInvoice4PaymContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(SalesInvoice4PaymJournalPrint_RU))
        {
            // Set the caller
            salesInvoice4PaymJournalPrint = this.parmArgs().caller();
        }

        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU);

        formLetterReport.parmPrintType(printCopyOriginal);

        if (salesInvoice4PaymJournalPrint)
        {
            // Get the print settings
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesInvoice4PaymJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesInvoice4PaymJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(salesInvoice4PaymJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SRSReportParameters</c> values to the report contract.
    /// </summary>
    protected void preRunModifyContract()
    {
        SRSTmpDataStore srsTmpDataStore;

        if (!salesInvoice4PaymContract)
        {
            salesInvoice4PaymContract = this.parmReportContract().parmRdpContract();
        }

        salesInvoice4PaymContract.parmPrintCopyOriginal(printCopyOriginal);

        salesInvoice4PaymContract.parmRecordId(custInvoice4PaymJour.RecId);
        SrsReportRdlDataContract rdlCotract = this.parmReportContract().parmRdlContract();

        rdlCotract.parmLanguageId(custInvoice4PaymJour.LanguageId);
        rdlCotract.parmLabelLanguageId(custInvoice4PaymJour.LanguageId);

        if (salesInvoice4PaymJournalPrint)
        {
            // Pack the class and insert into the temporary store.
            srsTmpDataStore.Value = salesInvoice4PaymJournalPrint.pack();
            srsTmpDataStore.insert();

            // Set the rec id to contract parameter
            salesInvoice4PaymContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        Common                  printMgmtReferencedTable;

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(custInvoice4PaymJour);

        do
        {
            if (!custInvoice4PaymJour)
            {
                throw error("@SYS26348");
            }

            // Determine where to start looking for Print Mgmt settings
            if (SalesParameters::find().DeleteHeading == NoYes::Yes)
            {
                // The original SalesTable record no longer exists, so skip that Print Mgmt level
                // and start with the customer instead.
                printMgmtReferencedTable = CustTable::find(custInvoice4PaymJour.InvoiceAccount);

                if (printMgmtReferencedTable == null)
                {
                    printMgmtReferencedTable = CustTable::find(custInvoice4PaymJour.OrderAccount);
                }
            }
            else
            {
                printMgmtReferencedTable = custInvoice4PaymJour.salesTable();
            }
            formLetterReport.loadPrintSettings(custInvoice4PaymJour, printMgmtReferencedTable, custInvoice4PaymJour.LanguageId);
            this.outputReports();
        } while (journalList.next(custInvoice4PaymJour) && !this.parmCancelRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        PrintMgmtDocumentType   documentType = PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU;
        CustInvoice4PaymJour_RU record = _args.dataset() == tableNum(CustInvoice4PaymJour_RU) ? _args.record() : null;

        SalesInvoice4PaymController formLetterController = new SalesInvoice4PaymController();

        if (_args.caller() && _args.caller() is SalesFormLetter)
        {
            SalesFormLetter salesFormLetter = _args.caller();
            if (salesFormLetter.documentStatus() == DocumentStatus::FreeTextInvoice4Paym_RU)
            {
                documentType = PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU;
            }
        }
        else if (record && !record.SalesId)
        {
            documentType = PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU;
        }

        if (!NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(documentType, _args))
        {
            return;
        }

        formLetterController.parmArgs(_args);
        formLetterController.parmReportName(PrintMgmtDocType::construct(documentType).getDefaultReportFormat());
        formLetterController.parmShowDialog(false);
        formLetterController.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
