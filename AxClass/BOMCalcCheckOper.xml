<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcCheckOper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMCalcCheckOper</c> class is used when checking operation lines during BOM calculation
///    process.
/// </summary>
class BomCalcCheckOper extends BOMCalcCheckBase
{
    str     txtNoCostPrice;
    str     txtZeroCostPrice;
    str     txtNoResource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNoCostPrice</Name>
				<Source><![CDATA[
    protected void addNoCostPrice(
        RouteCostCategoryId     _costCategoryId,
        str _strText = txtNoCostPrice,
        Exception _exceptionType = exceptionType)
    {
        BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt(_strText, _costCategoryId));

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addZeroCostPrice</Name>
				<Source><![CDATA[
    protected void addZeroCostPrice(
        RouteCostCategoryId     _costCategoryId,
        str _strText = txtZeroCostPrice,
        Exception _exceptionType = exceptionType)
    {
        BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt(_strText, _costCategoryId));

        this.incNumOfMessages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a cost category has a price; if not, an error message is created.
    /// </summary>
    /// <param name="_costCategoryId">
    ///    The cost category ID to check.
    /// </param>
    /// <param name="_costPricePresent">
    ///    A Boolean value that indicates whether a cost category rate was found.
    /// </param>
    /// <param name="_strText">
    ///    The text to be displayed if validation fails.
    /// </param>
    /// <param name="_exceptionType">
    ///    The exception to throw if validation fails.
    /// </param>
    void checkNoCostPrice(
        RouteCostCategoryId _costCategoryId,
        boolean             _costPricePresent,
        str                 _strText        = txtNoCostPrice,
        Exception           _exceptionType  = exceptionType)
    {
        if (!checkNoCostPrice)
        {
            return;
        }

        if (!_costPricePresent)
        {
            this.addNoCostPrice(_costCategoryId, _strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a resource has been assigned to the operation.
    /// </summary>
    /// <param name="_wrkCtrId">
    ///    The resource ID to check.
    /// </param>
    /// <param name="_strText">
    ///    The error message to add to the Infolog if no resource is found.
    /// </param>
    /// <param name="_exceptionType">
    ///    The type of exception to raise if no resource is found.
    /// </param>
    void checkNoResource(WrkCtrId      _wrkCtrId,
                         str           _strText        = txtNoResource,
                         Exception     _exceptionType  = exceptionType)
    {
        if (!checkNoResource)
        {
            return;
        }

        if (!_wrkCtrId)
        {
            BOMCalcCheckBase::infologMsgAdd(_exceptionType, _strText);
            this.incNumOfMessages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUseFallBack</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates a warning if the price used for a cost category was supplied by another costing version,
    ///     specified as a fallback version.
    /// </summary>
    /// <param name="_costCategoryId">
    ///     Cost category ID.
    /// </param>
    /// <param name="_costingVersionId">
    ///     ID of the costing version to be used in the calculation.
    /// </param>
    /// <param name="_fallbackVersionId">
    ///     ID of the costing version used as a fallback.
    /// </param>
    public void checkUseFallBack(
        RouteCostCategoryId _costCategoryId,
        CostingVersionId    _costingVersionId,
        CostingVersionId    _fallbackVersionId)
    {
        if (!checkUseFallBack)
        {
            return;
        }

        if (_costingVersionId != _fallbackVersionId)
        {
            BOMCalcCheckBase::infologMsgAdd(exceptionType, strfmt("@SYS127874", _costCategoryId, _fallbackVersionId));
            this.incNumOfMessages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkZeroCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the price used for the specified cost category is zero; if so, an error message
    ///    is generated.
    /// </summary>
    /// <param name="_costCategoryId">
    ///    The cost category ID to check.
    /// </param>
    /// <param name="_price">
    ///    The cost category rate that was found.
    /// </param>
    /// <param name="_costPricePresent">
    ///    A Boolean value that indicates whether a cost category rate was found.
    /// </param>
    /// <param name="_strText">
    ///    The text to be displayed if validation fails.
    /// </param>
    /// <param name="_exceptionType">
    ///    The exception to throw if validation fails.
    /// </param>
    void checkZeroCostPrice(
        RouteCostCategoryId     _costCategoryId,
        Price                   _price,
        boolean                 _costPricePresent   = true,
        str                     _strText              = txtZeroCostPrice,
        Exception               _exceptionType        = exceptionType)
    {
        if (!checkNoCostPrice)
        {
            return;
        }

        if (_costPricePresent && _price == 0)
        {
            this.addZeroCostPrice(_costCategoryId, _strText, _exceptionType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        txtNoCostPrice          = "@SYS310453";
        txtZeroCostPrice        = "@SYS310454";
        txtNoResource           = "@SYS314928";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMCalcCheckOper construct()
    {
        return new BOMCalcCheckOper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCalcBase</Name>
				<Source><![CDATA[
    static BOMCalcCheckOper newBOMCalcBase(BOMCalcBase _parentBOMCalcBase)
    {
        BOMCalcCheckOper bomCalcCheckOper = BOMCalcCheckOper::construct();

        bomCalcCheckOper.initBOMCalcBase(_parentBOMCalcBase);

        return bomCalcCheckOper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>