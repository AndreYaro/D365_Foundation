<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFlowResourceRequirementsFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanFlowResourceRequirementsFlow</c> class provides an interface to a resource requirement
///    calculation for a specified <c>KanbanFlow</c> record.
/// </summary>
public class KanbanFlowResourceRequirementsFlow extends KanbanFlowResourceRequirementsBase
{
    boolean         includeUpstreamKanbanFlows;
    TransDateTime   dateTimeFrom;
    TransDateTime   dateTimeTo;
    KanbanRule      kanbanRule;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcResourceRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the resource requirements for the <c>KanbanFlow</c> object that is specified in the
    /// class constructor.
    /// </summary>
    /// <param name="_forceRecalc">
    /// A Boolean value that indicates whether a recalculation must be forced.
    /// </param>
    /// <returns>
    /// true if a calculation was performed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The result is cached. Subsequent calls will not compute the result again.
    /// </remarks>
    public boolean calcResourceRequirements(boolean _forceRecalc = false)
    {
        KanbanFlowActivityRelationship      kanbanFlowActivityRelationship;
        LeanProdFlowPlanActivityRelation    leanProdFlowPlanActivityRelation;
        PlanActivityRelationship            planActivityRelationship;
        PlanActivity                        planActivity;
        RefRecId                            previousPlanActivityRecId;
        boolean                             result;

        setPrefix(KanbanFlowResourceRequirementsBase::description());
        setPrefix(strFmt("@SYS14077",itemId));

        if (   !cachedResourceRequirement
            || _forceRecalc)
        {
            cachedResourceRequirement = true;
            result                    = true;
            this.init();

            if (this.validate())
            {
                //single activity flow
                if (   kanbanFlow.FirstPlanPlanActivity == kanbanFlow.LastPlanPlanActivity
                    || !kanbanFlow.FirstPlanPlanActivity)
                {
                    planActivity = kanbanFlow.lastPlanActivity();
                    if (planActivity)
                    {
                        this.calcPlanActivityResourceRequirements(planActivity,kanbanFlow.leanProductionFlow().RecId);
                    }
                }
                else
                {
                    //mulitple activity flow
                    while select TableId from kanbanFlowActivityRelationship
                        order by Sequence
                        where kanbanFlowActivityRelationship.KanbanFlow  == kanbanFlow.RecId
                        join ProductionFlow from leanProdFlowPlanActivityRelation
                            where leanProdFlowPlanActivityRelation.RecId == kanbanFlowActivityRelationship.LeanProdFlowActivityRelation
                        join planActivityRelationship
                            where planActivityRelationship.RecId         == leanProdFlowPlanActivityRelation.PlanActivityRelationship
                    {
                        planActivity = planActivityRelationship.independentActivity();
                        if (   planActivity
                            && planActivity.RecId != previousPlanActivityRecId)
                        {
                            this.calcPlanActivityResourceRequirements(planActivity,leanProdFlowPlanActivityRelation.ProductionFlow);
                            previousPlanActivityRecId = planActivity.RecId;
                        }

                        planActivity = planActivityRelationship.dependentActivity();
                        if (   planActivity
                            && planActivity.RecId != previousPlanActivityRecId)
                        {
                            this.calcPlanActivityResourceRequirements(planActivity,leanProdFlowPlanActivityRelation.ProductionFlow);
                            previousPlanActivityRecId = planActivity.RecId;
                        }
                    }
                }
            }

            if (result)
            {
                result = this.calcResourceRequirementsUpstream();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcResourceRequirementsUpstream</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the resource requirements of upstream connected kanban rules.
    /// </summary>
    /// <returns>
    ///    true if the calcualtion
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean calcResourceRequirementsUpstream()
    {
        InventQty                           qty    = inventQty;
        boolean                             result = true;

        if (includeUpstreamKanbanFlows)
        {
            // need inventory unit for connected rules
            if (inventQty != 0)
            {
                UnitOfMeasureRecId unitOfMeasureRecIdInvent = UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(itemId).inventUnitId());
                if (unitOfMeasureRecIdInvent != unitOfMeasure)
                {
                    qty = unitOfMeasureRecIdInvent
                        ? EcoResProductUnitConverter::convertForReleasedProduct(inventTable.ItemId,
                                                                                inventDimId,
                                                                                inventQty,
                                                                                unitOfMeasure,
                                                                                unitOfMeasureRecIdInvent,
                                                                                NoYes::Yes)
                                : 0;
                }
            }

            // find connected rules
            KanbanRulesConnectedResourceCalc kanbanRulesConnectedResourceCalc = KanbanRulesConnectedResourceCalc::newStandard(kanbanRule,itemId,inventDimId,dateTimeFrom,dateTimeTo,qty);

            List list = kanbanRulesConnectedResourceCalc.listKanbanRulesConnected();

            // for each rule calculate the resource requirements
            if (   list
                && list.elements())
            {
                ListEnumerator le = list.getEnumerator();
                while (le.moveNext())
                {
                    KanbanRule kanbanRuleCurrent = le.current();

                    if (kanbanRuleCurrent)
                    {
                        // consider only manufacturing resources
                        if (kanbanRuleCurrent.KanbanType == LeanKanbanType::Manufacturing)
                        {
                            KanbanFlowResourceRequirementsFlow kanbanFlowResourceRequirementsFlow = KanbanFlowResourceRequirementsFlow::newStandard(
                                                                                                                                               kanbanRuleCurrent,
                                                                                                                                               kanbanRuleCurrent.kanbanFlow(),
                                                                                                                                               itemId,
                                                                                                                                               inventDimId,
                                                                                                                                               qty,
                                                                                                                                               unitOfMeasure,
                                                                                                                                               includeInternalResources,
                                                                                                                                               includeSubcontractedResources,
                                                                                                                                               false);
                            this.addKanbanFlowResourceRequirements(kanbanFlowResourceRequirementsFlow);
                        }
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTimeFrom</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TransDateTime parmDateTimeFrom(TransDateTime _dateTimeFrom = dateTimeFrom)
    {
        dateTimeFrom = _dateTimeFrom;
        return dateTimeFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTimeTo</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TransDateTime parmDateTimeTo(TransDateTime _dateTimeTo = dateTimeTo)
    {
        dateTimeTo = _dateTimeTo;
        return dateTimeTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeUpstreamKanbanFlows</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmIncludeUpstreamKanbanFlows(boolean _includeUpstreamKanbanFlows = includeUpstreamKanbanFlows)
    {
        includeUpstreamKanbanFlows = _includeUpstreamKanbanFlows;
        return includeUpstreamKanbanFlows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;
        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanFlowResourceRequirementsFlow construct()
    {
        return new KanbanFlowResourceRequirementsFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new <c>KanbanFlowResourceRequirementsFlow</c> object.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    A <c>KanbanRule</c> buffer.
    /// </param>
    /// <param name="_kanbanFlow">
    ///    A <c>KanbanFlow</c> buffer that belongs to the kanban rule.
    /// </param>
    /// <param name="_itemId">
    ///    An <c>itemId</c> value.
    /// </param>
    /// <param name="_inventDimId">
    ///    An <c>InventDimId</c> value that represents product dimensions.
    /// </param>
    /// <param name="_inventQty">
    ///    A quantity value.
    /// </param>
    /// <param name="_unitOfMeasure">
    ///    The unit in which the quantity is stated.
    /// </param>
    /// <param name="_includeInternalResources">
    ///    A Boolean value that defines if internal resources are included in the calculation.
    /// </param>
    /// <param name="_includeSubcontractedResources">
    ///    A Boolean value that defines if subcontracted resources are included in the calculation.
    /// </param>
    /// <param name="_includeUpstreamKanbanFlows">
    ///    A Boolean value that defines if upstream kanban flows should be included in the calculation; optional.
    /// </param>
    /// <param name="_dateTimeFrom">
    ///    The from date and time at which the connected rules are active.
    /// </param>
    /// <param name="_dateTimeTo">
    ///    The to date and time at which the connected rules are active; optional.
    /// </param>
    /// <returns>
    ///    A <c>KanbanFlowResourceRequirementsFlow</c> object.
    /// </returns>
    /// <remarks>
    /// Kanban rule has been added as mandatory argument.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanFlowResourceRequirementsFlow newStandard(
        KanbanRule    _kanbanRule,
        KanbanFlow    _kanbanFlow,
        ItemId        _itemId,
        InventDimId   _inventDimId,
        InventQty     _inventQty,
        RefRecId      _unitOfMeasure,
        boolean       _includeInternalResources,
        boolean       _includeSubcontractedResources,
        boolean       _includeUpstreamKanbanFlows = false,
        TransDateTime _dateTimeFrom               = DateTimeUtil::getSystemDateTime(),
        TransDateTime _dateTimeTo                 = _dateTimeFrom
        )
    {
        KanbanFlowResourceRequirementsFlow  kanbanFlowResourceRequirements = KanbanFlowResourceRequirementsFlow::construct();

        kanbanFlowResourceRequirements.parmKanbanRule(_kanbanRule);
        kanbanFlowResourceRequirements.parmKanbanFlow(_kanbanFlow);
        kanbanFlowResourceRequirements.parmItemId(_itemId);
        kanbanFlowResourceRequirements.parmInventDimId(_inventDimId);
        kanbanFlowResourceRequirements.parmInventQty(_inventQty);
        kanbanFlowResourceRequirements.parmUnitOfMeasure(_unitOfMeasure);
        kanbanFlowResourceRequirements.parmIncludeInternalResources(_includeInternalResources);
        kanbanFlowResourceRequirements.parmIncludeSubcontractedResources(_includeSubcontractedResources);
        kanbanFlowResourceRequirements.parmIncludeUpstreamKanbanFlows(_includeUpstreamKanbanFlows);
        kanbanFlowResourceRequirements.parmDateTimeFrom(_dateTimeFrom);
        kanbanFlowResourceRequirements.parmDateTimeTo(_dateTimeTo);

        return kanbanFlowResourceRequirements;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>