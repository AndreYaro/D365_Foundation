<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_ProdLine_JournalBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_ProdLine_JournalBOM</c> class is used when working with the production picking
/// list journal.
/// </summary>
public class InventMov_ProdLine_JournalBOM extends InventMov_ProdLine
{
    ProdJournalBOM prodJournalBOM;
    InventJournalCheckConsolidatedQty inventJournalCheckConsolidatedQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return (prodJournalBOM.isProjMethodConsumed() ? prodJournalBOM.ActivityNumber : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustInventDimReservationCriteria</Name>
				<Source><![CDATA[
    public InventDim adjustInventDimReservationCriteria(InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        // We do not adjust dims for ProdJournalBOMs like we do for ProdBOM
        // So don't call super and return _inventDimCriteria
        return _inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveReservedWork</Name>
				<Source><![CDATA[
    public boolean canHaveReservedWork()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateOnHandDatePhysicalOnReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether physical date of on-hand inventory is allowed to be updated when returning items.
    /// </summary>
    /// <returns>
    ///    Always return false.
    /// </returns>
    public boolean canUpdateOnHandDatePhysicalOnReturn()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>childBuffer</Name>
				<Source><![CDATA[
    public Common childBuffer(Common _prodJournalBOM = prodJournalBOM)
    {
        prodJournalBOM = _prodJournalBOM as ProdJournalBOM;
        return prodJournalBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return prodJournalBOM.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransFromBuffer</Name>
				<Source><![CDATA[
    public void initInventTransFromBuffer(
        InventTrans         _inventTrans,
        InventMovement      _movement_orig)
    {
        super(_inventTrans, _movement_orig);

        _inventTrans.TransChildType    = this.transChildType();
        _inventTrans.TransChildRefId   = this.transChildRefId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransPhysical</Name>
				<Source><![CDATA[
    public void initInventTransPhysical(
        InventTrans         _inventTrans,
        TransDate           _datePhysical,
        PackingSlipId       _packingSlipId)
    {
        super(_inventTrans, _datePhysical, _packingSlipId);

        if (this.mustDoProjPhysicalPosting())
        {
            this.setProjAdjustRefId(_inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChildBuffer</Name>
				<Source><![CDATA[
    public InventTransChildRefId insertChildBuffer(
        InventDimId     _inventDimId,
        InventQty       _qtyNow,
        UnitQty         _qtyNowUnit,
        boolean         _splitMovement,
        Object          _updateClass = null,
        PdsCWInventQty  _cwQty = 0
        )
    {
        ProdJournalTransData    prodJournalTransData = _updateClass as ProdJournalTransData;
        ProdJournalBOM prodJournalBOMSum;

        if (!_splitMovement)
        {
            return prodJournalBOM.InventTransChildRefId;
        }

        if (! prodJournalTransData)
        {
            throw error(strFmt("@SYS19384",classStr(ProdJournalTransData)));
        }

        if (!BOMParameters::find().EnableTrackedComponents || 
            !ProdAsBuiltBOMCreatePickingListSplitBatchFlight::instance().isEnabled())
        {
            Query query = this.buildProdJournalBOMQuery(_inventDimId);
            QueryRun queryRun = new QueryRun(query);
                    
            if (queryRun.next())
            {
                prodJournalBOMSum                        = queryRun.get(tableNum(ProdJournalBOM));
                prodJournalBOMSum.bomConsump            +=  prodJournalBOM.bomConsump           ? -_qtyNowUnit : 0;
                prodJournalBOMSum.bomProposal           += -_qtyNowUnit;
                prodJournalBOMSum.InventConsump         +=  prodJournalBOM.InventConsump        ? -_qtyNow     : 0;
                prodJournalBOMSum.InventProposal        += -_qtyNow;
                prodJournalBOMSum.PdsCWInventConsump    += prodJournalBOM.PdsCWInventConsump    ? -_cwQty      : 0;
                prodJournalBOMSum.PdsCWInventProposal   += -_cwQty;

                prodJournalBOMSum.doUpdate();

                return prodJournalBOMSum.InventTransChildRefId;
            }
        }

        prodJournalBOM.bomConsump                =  prodJournalBOM.bomConsump        ? -_qtyNowUnit : 0;
        prodJournalBOM.bomProposal               = -_qtyNowUnit;
        prodJournalBOM.InventConsump             =  prodJournalBOM.InventConsump     ? -_qtyNow     : 0;
        prodJournalBOM.InventProposal            = -_qtyNow;
        prodJournalBOM.PdsCWInventConsump        = prodJournalBOM.PdsCWInventConsump ? -_cwQty      : 0;
        prodJournalBOM.PdsCWInventProposal       = -_cwQty;

        prodJournalBOM.setInventDimId(_inventDimId);
        prodJournalBOM.InventTransChildType      = InventTransChildType::ProdJournalBOM;
        prodJournalBOM.InventTransChildRefId     = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

        prodJournalTransData.create(true);

        return prodJournalBOM.InventTransChildRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProdJournalBOMQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to find the production journal lines for picking list.
    /// </summary>
    /// <param name = "_inventDimId">Dimension number.</param>
    /// <returns>The query used to find the production journal lines for picking list.</returns>
    protected Query buildProdJournalBOMQuery(InventDimId _inventDimId)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsProdJournalBOM = query.addDataSource(tableNum(ProdJournalBOM));
        
        qbdsProdJournalBOM.fields().clearFieldList();
        qbdsProdJournalBOM.fields().addField(fieldNum(ProdJournalBOM, RecId));
        qbdsProdJournalBOM.fields().addField(fieldNum(ProdJournalBOM, bomConsump));
        qbdsProdJournalBOM.fields().addField(fieldNum(ProdJournalBOM, bomProposal));
        qbdsProdJournalBOM.fields().addField(fieldNum(ProdJournalBOM, InventConsump));
        qbdsProdJournalBOM.fields().addField(fieldNum(ProdJournalBOM, InventProposal));
        qbdsProdJournalBOM.fields().addField(fieldNum(ProdJournalBOM, InventTransChildRefId));
        qbdsProdJournalBOM.fields().addField(fieldNum(ProdJournalBOM, PdsCWInventConsump));
        qbdsProdJournalBOM.fields().addField(fieldNum(ProdJournalBOM, PdsCWInventProposal));

        qbdsProdJournalBOM.update(true);
        qbdsProdJournalBOM.firstOnly(true);
        
        qbdsProdJournalBOM.addRange(fieldNum(ProdJournalBOM, JournalId)).value(queryValue(prodJournalBOM.JournalId));
        qbdsProdJournalBOM.addRange(fieldNum(ProdJournalBOM, InventTransId)).value(queryValue(prodJournalBOM.InventTransId));
        qbdsProdJournalBOM.addRange(fieldNum(ProdJournalBOM, InventDimId)).value(queryValue(_inventDimId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return prodJournalBOM.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId  itemId()
    {
        return prodJournalBOM.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean mustBeBookedPhysically()
    {
        if (prodJournalBOM.isProjMethodConsumed() && !this.mustDoProjPhysicalPosting())
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustClearChildRef</Name>
				<Source><![CDATA[
    // Must child reference be cleared when updating items picked or registered
    public boolean mustClearChildRef()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDoProjPhysicalAdjust</Name>
				<Source><![CDATA[
    public boolean mustDoProjPhysicalAdjust()
    {
        if (prodJournalBOM.InventReturnFlag &&
            this.prodTable().isProjMethodConsumed() &&
            this.mustDoProjPhysicalPosting())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDoProjPhysicalPosting</Name>
				<Source><![CDATA[
    public boolean mustDoProjPhysicalPosting()
    {
        return (prodJournalBOM.isProjMethodConsumed() && !prodBOM.prodTableRef().isProjMethodConsumed());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        ProdBOM         _prodBOM,
        ProdJournalBOM  _prodJournalBOM,
        InventType      _inventType = ProdBOMType::construct(_prodBOM)
        )
    {
        prodJournalBOM  = _prodJournalBOM;

        super(_prodBOM,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!prodBOM.RecId)
        {
            return null;
        }

        if (prodJournalBOM.RecId)
        {
            return InventMov_ProdLine_JournalBOM::newFromProdTable(prodBOM.orig(), prodJournalBOM.orig());
        }

        return InventMov_ProdLine::newFromProdBOM(prodBOM.orig());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAdjustInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the inventory quantity for the movement.
    /// </summary>
    /// <param name="_inventQty">
    ///    The inventory quantity to adjust.
    /// </param>
    /// <remarks>
    ///    The method does not call super() in order to avoid repeated unit conversion.
    /// </remarks>
    public void pdsAdjustInventoryQuantity(InventQty _inventQty)
    {
        if (_inventQty!= 0 && this.pdsCWItem())
        {
            UnitOfMeasure unitOfMeasureInvent = UnitOfMeasure::findBySymbol(this.inventTable().inventUnitId());
            UnitOfMeasure unitOfMeasureMovement = UnitOfMeasure::findBySymbol(this.transUnitId());

            this.addRemainPhysical(_inventQty);
            prodJournalBOM.InventConsump -= _inventQty;

            if (unitOfMeasureInvent.UnitOfMeasureClass == unitOfMeasureMovement.UnitOfMeasureClass)
            {
                UnitQty unitQty = UnitOfMeasureConverter::convert(
                                                            _inventQty,
                                                            unitOfMeasureInvent.RecId,
                                                            unitOfMeasureMovement.RecId,
                                                            NoYes::No,
                                                            this.inventTable().Product);

                this.addRemainPhysicalUnit(unitQty);
                prodJournalBOM.bomConsump -= unitQty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUpdateBufferWithAdjustedQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the document buffer after the inventory quantity adjustment.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The preferred inventory dimension to adjust quantities for; optional.
    /// </param>
    public void pdsUpdateBufferWithAdjustedQuantity(InventDimId _inventDimId = this.inventDimId())
    {
        super(_inventDimId);

        // update the journal line, so that the adjusted inventory and BOM consumption quantities are persisted.
        if (prodJournalBOM.selectForUpdate())
        {
            prodJournalBOM.doUpdate();
        }
        else
        {
            ProdJournalBOM prodJournalBOMLocal = ProdJournalBOM::findRecId(prodJournalBOM.RecId,true);
            prodJournalBOMLocal.InventConsump = prodJournalBOM.InventConsump;
            prodJournalBOMLocal.bomConsump    = prodJournalBOM.bomConsump;
            prodJournalBOMLocal.doUpdate();
            prodJournalBOM.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId projCategoryId()
    {
        return (prodJournalBOM.isProjMethodConsumed() ? prodJournalBOM.ProjCategoryId : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId()
    {
        return (prodJournalBOM.isProjMethodConsumed() ? prodJournalBOM.ProjId : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLedgerOrigin</Name>
				<Source><![CDATA[
    public ProjLedgerOrigin projLedgerOrigin()
    {
        if (this.projId())
        {
            return ProjOrigin::ProductionConsumed;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLinePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId projLinePropertyId()
    {
        return (prodJournalBOM.isProjMethodConsumed() ? prodJournalBOM.ProjLinePropertyId : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>projSalesCurrencyId</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode projSalesCurrencyId()
    {
        return (prodJournalBOM.isProjMethodConsumed() ? prodJournalBOM.ProjSalesCurrencyId : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>projSalesPrice</Name>
				<Source><![CDATA[
    public ProjSalesPriceCost projSalesPrice()
    {
        return (prodJournalBOM.isProjMethodConsumed() ? prodJournalBOM.ProjSalesPrice : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTaxGroupId</Name>
				<Source><![CDATA[
    public ProjTaxGroup projTaxGroupId()
    {
        return (prodJournalBOM.isProjMethodConsumed() ? prodJournalBOM.ProjTaxGroupId : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTaxItemGroupId</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup projTaxItemGroupId()
    {
        return (prodJournalBOM.isProjMethodConsumed() ? prodJournalBOM.ProjTaxItemGroupId : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransactionOrigin</Name>
				<Source><![CDATA[
    public ProjTransactionOrigin projTransactionOrigin()
    {
        if (this.projId())
        {
            return ProjOrigin::ProductionConsumed;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransId</Name>
				<Source><![CDATA[
    public ProjTransIdBase projTransId()
    {
        return (prodJournalBOM.isProjMethodConsumed() ? prodJournalBOM.ProjTransId : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        super(_dimId);

        prodJournalBOM.setInventDimId(_dimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjAdjustRefId</Name>
				<Source><![CDATA[
    public void setProjAdjustRefId(InventTrans _inventTrans)
    {
        if (_inventTrans.ProjAdjustRefId)
        {
            projAdjustRefId = _inventTrans.ProjAdjustRefId;
            return;
        }

        if (!_inventTrans.ProjId)
        {
            return;
        }

        if (!projAdjustRefId)
        {
            projAdjustRefId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        }

        _inventTrans.ProjAdjustRefId = projAdjustRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transChildRefId</Name>
				<Source><![CDATA[
        public InventTransChildRefId transChildRefId()
    {
        return prodJournalBOM.InventTransChildRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transChildType</Name>
				<Source><![CDATA[
    public InventTransChildType transChildType()
    {
        if (!prodJournalBOM)
        {
            return InventTransChildType::ProdJournalBOM;
        }

        return prodJournalBOM.InventTransChildType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol transUnitId()
    {
        return (prodJournalBOM.isProjMethodConsumed() ? prodJournalBOM.bomUnitId : super());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation = true)
    {
        if (!prodJournalBOM.InventReturnFlag)
        {
            super(_updateReservation);
        }
        else
        {
            InventMovement::construct(prodBOM).updateBuffer(_updateReservation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerPhysical</Name>
				<Source><![CDATA[
    public void updateLedgerPhysical(
        LedgerVoucher       _ledgerVoucher,
        InventTrans         _inventTrans,
        InventUpdate        _updateNow,
        InventOnhand        _inventOnhand
        ,InventTrans        _inventTransUpd = _inventTrans
        )
    {
        // <GEERU>
        super(_ledgerVoucher, _inventTrans, _updateNow, _inventOnhand, _inventTransUpd);
        // </GEERU>

        if (this.mustDoProjPhysicalPosting()
         && _inventTrans.isUpdatedPhysical()
         && !this.mustBeBookedPhysically()
            // If inventory is not financial updated project create a never ledger transaction in the project module
            // for consumed project production orders excluding ProdBOM of type Production
         && ProjPost::checkCreateProjCost(_inventTrans.ItemId, _inventTrans.ProjId))
        {
            ProjPost::newInventNeverLedger(_inventTrans,_ledgerVoucher.lastTransDate(),_ledgerVoucher.lastVoucher(), _inventTrans.CostAmountPhysical,false,ProjItemTransCostType::Accrued).postTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_ProdLine_JournalBOM</c> class based on the specified
    ///    records.
    /// </summary>
    /// <param name="_prodBOM">
    ///    The <c>ProdBOM</c> record for which the class is instantiated.
    /// </param>
    /// <param name="_prodJournalBOM">
    ///    The <c>ProdJournalBOM</c> record for which the class is instantiated.
    /// </param>
    /// <param name="_inventType">
    ///    The associated <c>InventType</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_ProdLine_JournalBOM</c> class.
    /// </returns>
    public static InventMov_ProdLine_JournalBOM newFromProdTable(
        ProdBOM         _prodBOM,
        ProdJournalBOM  _prodJournalBOM,
        InventType      _inventType = ProdBOMType::construct(_prodBOM))
    {
        return new InventMov_ProdLine_JournalBOM(_prodBOM, _prodJournalBOM, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLocationBlocking</Name>
				<Source><![CDATA[
    protected boolean checkLocationBlocking(InventDim _inventDimLocation = null)
    {
        boolean     ret             = true;
        InventDim   inventDimThis;

        if (!this.mustCheckLocationBlocking())
        {
            return true;
        }

        if (!_inventDimLocation.wmsLocationId)
        {
            inventDimThis = this.inventdim();
            if (!inventDimThis.wmsLocationId)
            {
                return true;
            }
        }
        else
        {
            inventDimThis = _inventDimLocation;
        }

        return this.checkSingleWMSLocationBlocking(inventDimThis.wmsLocation(), -prodJournalBOM.InventConsump);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty _qtyInvent)
    {
        super(_qtyInvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty transQty()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpiryCheckDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date against which to check the expiry date of an inventory batch.
    /// </summary>
    /// <returns>
    /// The date against which to check the expiry date.
    /// </returns>
    public TransDate getExpiryCheckDate()
    {
        if (InventTable::modelGroupByItemId(prodJournalBOM.ItemId).PickingListBatchExpirationDateValidationRule == WHSPickingListBatchExpirationDateValidation::ReservationDate)
        {
            return prodJournalBOM.TransDate;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventJournalCheckConsolidatedQty</Name>
				<Source><![CDATA[
    public InventJournalCheckConsolidatedQty parmInventJournalCheckConsolidatedQty(InventJournalCheckConsolidatedQty _inventJournalCheckConsolidatedQty = inventJournalCheckConsolidatedQty)
    {
        inventJournalCheckConsolidatedQty = _inventJournalCheckConsolidatedQty;
        return inventJournalCheckConsolidatedQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>