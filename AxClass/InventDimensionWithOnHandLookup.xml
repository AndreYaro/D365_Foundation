<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimensionWithOnHandLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimensionWithOnHandLookup</c> class is responsible for ensuring that
/// a lookup with multiples views, from which one is on-hand not filtered, are queried and filtered correctly.
/// </summary>
public class InventDimensionWithOnHandLookup
{
    public const int OnHandTabPage = 2;

    private Map lookupTabCollection;

    private FormStringControl callerControl;
    private FormTabControl    formTabControl;
    private int               numberOfTabPages;

    private int                                 selectedTabPage;
    private InventDimensionWithOnHandLookupTab  selectedTab;

    private Common              recordToPosition;

    private boolean onHandViewIsSelected;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRecordToPosition</Name>
				<Source><![CDATA[
    public Common parmRecordToPosition(Common _recordToPosition = recordToPosition)
    {
        recordToPosition = _recordToPosition;
        return recordToPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerControl</Name>
				<Source><![CDATA[
    public FormStringControl parmCallerControl(FormStringControl _callerControl = callerControl)
    {
        callerControl = _callerControl;
        return callerControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormTabControl</Name>
				<Source><![CDATA[
    public FormTabControl parmFormTabControl(FormTabControl _formTabControl = formTabControl)
    {
        formTabControl = _formTabControl;
        return formTabControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedControl</Name>
				<Source><![CDATA[
    public FormStringControl getSelectedControl()
    {
        if (selectedTab == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return selectedTab.parmTabPageControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWithTabCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class to be used in forms.
    /// </summary>
    /// <param name="_callerControl">
    ///    The form where controls are maintained.
    /// </param>
    /// <param name="_formTabControl">
    ///    The tab control on the lookup form.
    /// </param>
    /// <param name="_lookupTabCollection">
    ///    Map of <c>InventDimensionWithOnHandLookupTab</c> instances.
    /// </param>
    /// <param name="_recordToPosition">
    ///    The record to position for selected data source.
    /// </param>
    /// <returns>
    ///    An instance of this class to be used in a form.
    /// </returns>
    public static InventDimensionWithOnHandLookup newWithTabCollection(
        FormStringControl _callerControl,
        FormTabControl  _formTabControl,
        Map             _lookupTabCollection,
        Common          _recordToPosition
        )
    {
        InventDimensionWithOnHandLookup inventDimensionWithOnHandLookupHelper = new InventDimensionWithOnHandLookup();
        inventDimensionWithOnHandLookupHelper.init (_callerControl, _formTabControl, _lookupTabCollection, _recordToPosition);

        return inventDimensionWithOnHandLookupHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(
        FormStringControl   _callerControl,
        FormTabControl      _formTabControl,
        Map                 _lookupTabCollection,
        Common              _recordToPosition
        )
    {
        callerControl = _callerControl;
        formTabControl = _formTabControl;
        recordToPosition = _recordToPosition;

        lookupTabCollection = _lookupTabCollection;
        numberOfTabPages = lookupTabCollection.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTabChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overwrite base behavior to always filter lookup to support no filtering for on hand view and multiple data sources.
    /// </summary>
    public void lookupTabChanged()
    {
        if (onHandViewIsSelected)
        {
            // no filtering is required
            selectedTab.parmTabPageDataSource().executeQuery();
        }
        else
        {
            boolean filterLookup = this.filterLookupPreRun();

            SysTableLookup::filterLookupPostRun(filterLookup,
                                            callerControl.text(),
                                            selectedTab.parmTabPageControl(),
                                            selectedTab.parmTabPageDataSource());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set selected control and data source.
    /// </summary>
    public void setSelectMode()
    {
        selectedTabPage = formTabControl.tab();
        selectedTab = lookupTabCollection.lookup(selectedTabPage);

        onHandViewIsSelected = selectedTabPage == OnHandTabPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLookupPreRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Simulates the code that is performed in the kernel to enable filtering to work correctly in custom
    /// lookup forms with two or three data sources.
    /// </summary>
    /// <returns>
    ///    true if the value in the control contains a value on which to filter; otherwise, false.
    /// </returns>
    public boolean filterLookupPreRun()
    {
        return SysTableLookup::filterLookupPreRun_AllDS(callerControl,
                                    selectedTab.parmTabPageControl(),
                                    selectedTab.parmTabPageDataSource(),
                                    recordToPosition
                                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLookupPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Simulates the code that is performed in the kernel to enable filtering to work correctly in custom
    /// lookup forms.
    /// </summary>
    /// <param name="_isFiltered">
    /// The value returned from the <see cref="M:SysTableLookup::FilterLookupPreRun" /> method.
    /// </param>
    public void filterLookupPostRun(boolean _isFiltered)
    {
        if (onHandViewIsSelected)
        {
            // no filtering is required
            selectedTab.parmTabPageDataSource().executeQuery();
        }
        else
        {
            SysTableLookup::filterLookupPostRun(_isFiltered,
                                            callerControl.text(),
                                            selectedTab.parmTabPageControl(),
                                            selectedTab.parmTabPageDataSource());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>