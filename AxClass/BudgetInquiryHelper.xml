<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetInquiryHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetInquiryHelper</c> class has helper methods for budget inquiries.
/// </summary>
public class BudgetInquiryHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildDimensionNamesAndValuesForDimensionFocusNameTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds dimension attribute name and value pairs for specified dimension focus value.
    /// </summary>
    /// <param name = "_dimensionFocusNameTmp">
    /// The <c>DimensionFocusNameTmp</c> record.
    /// </param>
    /// <param name = "_dimensionFocusName">
    /// The dimension focus name.
    /// </param>
    /// <returns>
    /// A Map containing dimension attribute name and value pairs for specified dimension focus value.
    /// </returns>
    public static Map buildDimensionNamesAndValuesForDimensionFocusNameTmp(DimensionFocusNameTmp _dimensionFocusNameTmp, Name _dimensionFocusName)
    {
        Map dimensionAttributeValueSet = new Map(Types::String, Types::String);

        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(
            DimensionHierarchy::findByTypeAndName(
                DimensionHierarchyType::Focus, _dimensionFocusName).RecId);

        dimensionHierarchyLevelCollection.initializeEnumerator();

        // Build dimension attribute name and value pairs for selected dimension focus value.
        while (dimensionHierarchyLevelCollection.moveNext())
        {
            Name dimensionAttributeName = DimensionAttribute::find(dimensionHierarchyLevelCollection.currentDimensionAttributeId()).Name;

            // "DimValue%1" is the prefix for column names in DimensionFocusNameTmp table.
            DimensionDisplayValue dimensionDisplayValue = _dimensionFocusNameTmp.getFieldValue(
                strFmt(DimensionFocusNameTmp::getDimensionValueColumnPrefix(),
                    int2Str(dimensionHierarchyLevelCollection.currentLevel())));

            if (dimensionDisplayValue == '')
            {
                // Set the value to blank string.
                dimensionDisplayValue = SysQuery::valueEmptyString();
            }

            dimensionAttributeValueSet.insert(dimensionAttributeName, dimensionDisplayValue);
        }

        return dimensionAttributeValueSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionNamesAndValuesForFocusCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds dimension attribute name and value pairs for specified dimension focus value.
    /// </summary>
    /// <param name = "_dimensionAttributeValueCombination">
    /// The <c>DimensionAttributeValueCombination</c> record.
    /// </param>
    /// <param name = "_dimensionFocusName">
    /// The dimension focus name.
    /// </param>
    /// <returns>
    /// A Map containing dimension attribute name and value pairs for specified dimension focus value.
    /// </returns>
    public static Map buildDimensionNamesAndValuesForFocusCombination(DimensionAttributeValueCombination _dimensionAttributeValueCombination, Name _dimensionFocusName)
    {
        Map dimensionAttributeValueSet = new Map(Types::String, Types::String);

        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(
            DimensionHierarchy::findByTypeAndName(
                DimensionHierarchyType::Focus, _dimensionFocusName).RecId);

        dimensionHierarchyLevelCollection.initializeEnumerator();

        // Build dimension attribute name and value pairs for selected dimension focus value.
        while (dimensionHierarchyLevelCollection.moveNext())
        {
            DimensionAttribute dimensionAttribute = DimensionAttribute::find(dimensionHierarchyLevelCollection.currentDimensionAttributeId());
            Name dimensionAttributeName = dimensionAttribute.Name;
            DimensionRefFieldName dimensionValueColumnName = dimensionAttribute.DimensionValueColumnName;

            DimensionDisplayValue dimensionDisplayValue = _dimensionAttributeValueCombination.getFieldValue(dimensionValueColumnName);

            if (dimensionDisplayValue == '')
            {
                // Set the value to blank string.
                dimensionDisplayValue = SysQuery::valueEmptyString();
            }

            dimensionAttributeValueSet.insert(dimensionAttributeName, dimensionDisplayValue);
        }

        return dimensionAttributeValueSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFocusCombinationForLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a <c>DimensionAttributeValueCombination</c> record for a given dimension focus and source combination.
    /// </summary>
    /// <param name = "_dimensionFocus">
    /// The dimension focus name.
    /// </param>
    /// <param name = "_sourceCombinationRecId">
    /// The source combination <c>DimensionAttributeValueCombination</c> record ID.
    /// </param>
    /// <returns>
    /// The <c>DimensionAttributeValueCombination</c> record ID.
    /// </returns>
    public static LedgerDimensionBase getDimensionFocusCombinationForLedgerDimension(Name _dimensionFocus, LedgerDimensionBase _sourceCombinationRecId)
    {
        DimensionHierarchy dimensionHierarchy = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, _dimensionFocus);

        if (!dimensionHierarchy)
        {
            // If there is no dimension hierarchy for the given dimension focus, execution should not continue.
            return 0;
        }

        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(dimensionHierarchy.RecId);

        dimensionHierarchyLevelCollection.initializeEnumerator();

        DimensionStorage dimStorage = DimensionStorage::construct();
        dimStorage.addHierarchy(dimensionHierarchy.RecId);

        while (dimensionHierarchyLevelCollection.moveNext())
        {
            DimensionAttribute dimensionAttribute = DimensionAttribute::find(dimensionHierarchyLevelCollection.currentDimensionAttributeId());

            DimensionAttributeLevelValueView dimensionAttributeLevelValueView;

            select firstonly * from dimensionAttributeLevelValueView
                where dimensionAttributeLevelValueView.ValueCombinationRecId == _sourceCombinationRecId
                    && dimensionAttributeLevelValueView.DimensionAttribute == dimensionHierarchyLevelCollection.currentDimensionAttributeId();

            dimStorage.setSegment(dimensionHierarchyLevelCollection.currentLevel(), DimensionStorageSegment::constructFromLevelValueView(dimensionAttributeLevelValueView));
        }

        // Return the DimensionAttributeValueCombination record ID.
        return dimStorage.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFocusNameDisplayString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a string of the segmented dimension attribute value names from the focus dimension.
    /// </summary>
    /// <param name = "_dimensionFocus">
    /// The dimension focus name.
    /// </param>
    /// <param name = "_focusCombinationRecId">
    /// The focus combination <c>DimensionAttributeValueCombination</c> record ID.
    /// </param>
    /// <returns>
    /// The segmented dimension attribute value names.
    /// </returns>
    public static Name getDimensionFocusNameDisplayString(Name _dimensionFocus, LedgerDimensionBase _focusCombinationRecId)
    {
        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(
                    DimensionHierarchy::findByTypeAndName(
                        DimensionHierarchyType::Focus,
                        _dimensionFocus).RecId);

        Name dimensionAttributeValueSegmentedNames;
        str dimensionSegmentDelimiter = DimensionParameters::getDimensionSegmentDelimiter();

        dimensionHierarchyLevelCollection.initializeEnumerator();
        boolean isFirst = true;

        // Build dimension attribute value name for selected dimension focus value.
        while (dimensionHierarchyLevelCollection.moveNext())
        {
            DimensionAttribute dimensionAttribute = DimensionAttribute::find(dimensionHierarchyLevelCollection.currentDimensionAttributeId());

            DimensionAttributeLevelValueView dimensionAttributeLevelValueView;

            select firstonly AttributeValueRecId from dimensionAttributeLevelValueView
                where dimensionAttributeLevelValueView.ValueCombinationRecId == _focusCombinationRecId
                    && dimensionAttributeLevelValueView.DimensionAttribute == dimensionHierarchyLevelCollection.currentDimensionAttributeId();

            DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::find(dimensionAttributeLevelValueView.AttributeValueRecId);

            if (isFirst)
            {
                dimensionAttributeValueSegmentedNames = dimensionAttributeValue.getName();
                isFirst = false;
            }
            else
            {
                dimensionAttributeValueSegmentedNames += dimensionSegmentDelimiter + dimensionAttributeValue.getName();
            }
        }

        return dimensionAttributeValueSegmentedNames;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>