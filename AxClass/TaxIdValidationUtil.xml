<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIdValidationUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIdValidationUtil</c> class provides utility method for tax ID validation, get validation level and determin if validation is needed.
/// </summary>
internal class TaxIdValidationUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getValidationLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets validation level according to business process.
    /// </summary>
    /// <param name = "_taxIntegrationBusinessProc">The business process.</param>
    /// <param name = "_transactionHeadingTableId">The transaction header table ID.</param>
    /// <param name = "_documentStatus">The status of the document.</param>
    /// <returns>The validation level for tax id. </returns>
    public static TaxIdValidation getValidationLevel(
        TaxIntegrationBusinessProcess _taxIntegrationBusinessProc,
        TableId _transactionHeadingTableId,
        DocumentStatus _documentStatus)
    {
        TaxIdValidation taxIdValidation;
        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(_taxIntegrationBusinessProc))
        {
            switch (_taxIntegrationBusinessProc)
            {
                case (TaxIntegrationBusinessProcess::Purchase):
                    // For current release 10.0.15, always return error, as document split on different tax id is not enabled.
                    taxIdValidation = taxIdValidation::Error;
                    // For future release
                    //taxIdValidation = VendParameters::find().TaxIdValidation;
                    break;

                case (TaxIntegrationBusinessProcess::Sales):
                    // Respect the parameter only when multiple tax IDs are allowed. If not allowed, always raise error.
                    if (TaxIdValidationUtil::allowMultipleTaxIdInOneDocument(_transactionHeadingTableId, _documentStatus))
                    {
                        taxIdValidation = CustParameters::find().TaxIdValidation;
                    }
                    else
                    {
                        taxIdValidation = taxIdValidation::Error;
                    }
                    break;
                case (TaxIntegrationBusinessProcess::FTI):
                    taxIdValidation = taxIdValidation::Error;
                    break;

                case (TaxIntegrationBusinessProcess::Inventory):
                    // For current release 10.0.15, always return error, as document split on different tax id is not enabled.
                    taxIdValidation = taxIdValidation::Error;
                    // For future release
                    // taxIdValidation = InventoryParameters::find().TaxIdValidation;
                    break;
                case (TaxIntegrationBusinessProcess::Journal):
                case TaxIntegrationBusinessProcess::SADDocument:
                    taxIdValidation = taxIdValidation::Error;
                    break;
                case (TaxIntegrationBusinessProcess::Project):
                    taxIdValidation = taxIdValidation::Error;
                    break;
            }
        }
        return taxIdValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether validation for tax id is needed according to business process.
    /// </summary>
    /// <param name = "_taxIntegrationBusinessProc">The business process.</param>
    /// <param name = "_transactionHeadingTableId">The transaction header table ID.</param>
    /// <param name = "_documentStatus">The status of the document.</param>
    /// <returns>The validation is needed or not. </returns>
    public static boolean isValidationNeeded(
        TaxIntegrationBusinessProcess _taxIntegrationBusinessProc,
        TableId _transactionHeadingTableId,
        DocumentStatus _documentStatus)
    {
        return (TaxIdValidationUtil::getValidationLevel(_taxIntegrationBusinessProc,
                _transactionHeadingTableId,
                _documentStatus)
            != TaxIdValidation::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowMultipleTaxIdInOneDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether multiple tax IDs are allowed in the transaction table.
    /// </summary>
    /// <param name = "_transactionHeadingTableId">The transaction header table ID.</param>
    /// <param name = "_documentStatus">The status of the document.</param>
    /// <returns>Multiple tax IDs are allowed in this transaction or not. </returns>
    /// <remarks>We cannot allow multiple tax IDs for tables that are used for posting invoice or packing slip. </remarks>
    internal static boolean allowMultipleTaxIdInOneDocument(TableId _transactionHeadingTableId, DocumentStatus _documentStatus)
    {
        if (TaxIntegrationMultipleTaxIdForSalesOrderFlight::instance().isEnabled()
            // <c>SalesTable</c> and <c>SalesQuotationTable</c> are not used for posting. They are allowed to have multiple tax IDs.
            // <c>SalesParmTable</c> is used for posting. Confirmation and picking list are allowed to have multiple tax IDs.
            && (_transactionHeadingTableId == tableNum(SalesTable)
                || _transactionHeadingTableId == tableNum(SalesQuotationTable)
                || (_transactionHeadingTableId == tableNum(SalesParmTable)
                    && (_documentStatus == DocumentStatus::Confirmation
                        || _documentStatus == DocumentStatus::PickingList))))
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>