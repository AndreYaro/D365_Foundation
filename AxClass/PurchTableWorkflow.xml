<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   PurchTableWorkflow
extends TradeWorkflow
{
    PurchTable                  purchTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a purchase order can be submitted to workflow.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record that should be submitted.
    /// </param>
    /// <returns>
    /// true if workflow can be submitted; otherwise, false.
    /// </returns>
    protected boolean canSubmit(PurchTable _purchTable)
    {
        boolean             canSubmit   = true;

        if (!PurchTableWorkflow::isWorkflowSubmitEnhancementEnabled())
        {
            if (_purchTable.isPartiallyDistributed())
            {
                canSubmit  =  false;
            }
            else
            {
                canSubmit = _purchTable.checkFullyDistributedAndQualified();
            }
        }

        if (canSubmit && Project::Enabled())
        {
            canSubmit = PurchFormLetter_PurchOrder::validateProjWorkerForPurchOrder(_purchTable.PurchId);
        }

        if (canSubmit
            && BudgetControlDraftPODateValidationFlight::instance().isEnabled()
            && BudgetControlPurchaseOrderSettingsValidator::canUpdatedAccountingDateAffectBudgetForDraftPO(_purchTable.SourceDocumentHeader, _purchTable.AccountingDate, _purchTable.dataAreaId))
        {
            canSubmit = checkFailed(strFmt("@Budget:BudgetControlPOWorkflowSubmitError", _purchTable.AccountingDate,  LedgerFiscalCalendar::findFirstOpenStartDateInAnyYear(CompanyInfoHelper::fiscalCalendarRecId(), _purchTable.AccountingDate)));
        }

        return canSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void  new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    public PurchTable  parmPurchTable(PurchTable  _purchTable = purchTable)
    {
        purchTable = _purchTable;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a budget check for the purchase order when the workflow dialog run event occurs.
    /// </summary>
    protected void preWorkflowDialogRun()
    {
        if (purchTable.editAllowed(true))
        {
            if (purchTable.SystemEntryChangePolicy || purchTable.ManualEntryChangepolicy)
            {
                PriceDiscPolicyCheckPolicy checkPolicy = PriceDiscPolicyCheckPolicy::newFromParm(purchTable);

                if (checkPolicy.mustUpdateField(fieldNum(PriceDiscResultFields, MultiLineDiscCode)))
                {
                    purchTable.updateMultiLineDisc();
                }

                if (checkPolicy.mustUpdateField(fieldNum(PriceDiscResultFields, DiscPercent)))
                {
                    purchTable.updateFinalDisc();
                }
            }
            else
            {
                purchTable.updateMultiLineDisc();
                purchTable.updateFinalDisc();
            }
        }
        
        super();

        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            PurchTable::checkBudgetReservationBalance_PSN(purchTable.PurchId, purchTable.SourceDocumentHeader);
        }

        PurchTablePreWorkflowController::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a budget check before reactivating the purchase order workflow.
    /// </summary>
    /// <returns>
    /// true if the workflow was resubmitted; otherwise, false.
    /// </returns>
    public boolean reSubmit()
    {
        boolean                         ret = false;

        if (purchTable != null
            && this.canSubmit(purchTable)
            )
        {
            ret = super();

            if (ret)
            {
                VersioningPurchaseOrder::newPurchaseOrder(purchTable).reSubmitChangeRequest();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Activates the purchase order workflow.
    /// </summary>
    /// <remarks>
    ///    This method starts the workflow configuration by first displaying the submit dialog and then
    ///    calling the <c>submitToWorkflow</c> method on the <c>PurchTable</c> table where the actual
    ///    submission are performed..
    /// </remarks>
    public void submit()
    {
        WorkflowSubmitDialog            workflowSubmitDialog;

        if (purchTable != null)
        {   
            if (!PurchTableWorkflow::isWorkflowSubmitEnhancementEnabled())
            {
                // Tax is needed to be calculated first or else the Accounting Distribution allocation factor will not be calculated correctly.
                PurchTotals::newPurchTable(purchTable).calc();
            }
            
            if (this.canSubmit(purchTable))
            {
                workflowSubmitDialog = WorkflowSubmitDialog::construct(args.caller().getActiveWorkflowConfiguration());

                if (this.submitDialog(workflowSubmitDialog))
                {
                    purchTable.submitToWorkflow(workFlowTypeStr(PurchTableTemplate), workflowSubmitDialog.parmWorkflowComment(), false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowSubmitEnhancementEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isWorkflowSubmitEnhancementEnabled(boolean _checkStartedEventHandler = true)
    {
        return PurchTableWorkflowSubmitPerfEnhancementFeature::instance().isEnabled()
            && PurchParameters::find().OrderWorkflowAutoCalculation
            && !Ledger::isLedgerBudgetControlEnabled()
            && (!_checkStartedEventHandler || PurchTableWorkflow::isStandardWorkflowStartedEventHandlerEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePurchaseOrderVersioningSkip</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void handlePurchaseOrderVersioningSkip(VersioningPurchaseOrder _versioningPurchaseOrder, PurchTable _purchTable)
    {
        if (PurchTableWorkflow::isWorkflowSubmitEnhancementEnabled(false)
            && _versioningPurchaseOrder.getDocumentState() == VersioningDocumentState::InReview)
        {
            if (PurchTableWorkflowCalcTotalsContext::current()) // Calculation triggered from WF context.
            {
                _versioningPurchaseOrder.parmSkipChangeRequest(true);
            }
            else if (_purchTable.getAwaitingWorkflowTotalsCalculation())
            {
                throw info("@SCM:PurchTotalsAwaitingToBeCalculated");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStandardWorkflowStartedEventHandlerEnabled</Name>
				<Source><![CDATA[
    private static boolean isStandardWorkflowStartedEventHandlerEnabled()
    {
        boolean ret = false;

        using (var activityContext = PurchInstrumentationLogger::createLogger(classStr(PurchTableWorkflow)).workflowActivities().purchTableWorkflowStartupEventHandler())
        {   
            SysDictWorkflowType dictTemplate = new SysDictWorkflowType(workflowTypeStr(PurchTableTemplate));
            
            if (dictTemplate)
            {
                activityContext.addCustomProperty('ClassName', dictTemplate.startedEventHandler());
                ret = dictTemplate.startedEventHandler() == classStr(PurchTableTemplateEventHandler);
            }

            activityContext.addCustomProperty('ReturnValue', enum2Value(ret));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchTableWorkflow  construct()
    {
        return new PurchTableWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  _args)
    {
        PurchTableWorkflow  purchTableWorkflow  = TradeWorkflow::newTradeWorkflow(_args);
        PurchTable          purchTable          = _args.record();
  
        purchTable.selectForUpdate(true);

        purchTableWorkflow.parmPurchTable(purchTable);

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) &&
            ProjFundingLimitTrackingManager::hasLimitErrorSourceDocument(purchTable.SourceDocumentHeader))
        {
            checkFailed("@SYS4110061");
        }
        else
        {
            switch (_args.menuItemName())
            {
                case menuitemActionStr(PurchTableWorkflowSubmit) :
                    purchTableWorkflow.submit();
                    break;

                case menuitemActionStr(PurchTableWorkflowReSubmit) :
                    purchTableWorkflow.reSubmit();
                    break;

                default :
                    break;
            }

            if (FormDataUtil::getFormDataSource(purchTable))
            {
                if (PurchTableWorkflowRereadPurchTableFlight::instance().isEnabled())
                {
                    FormDataUtil::getFormDataSource(purchTable).reread();
                }
                else
                {
                    FormDataUtil::getFormDataSource(purchTable).research(true);
                }
            }

            if (_args.caller()
            && (_args.menuItemName() == menuitemActionStr(PurchTableWorkflowSubmit) ||
                _args.menuItemName() == menuitemActionStr(PurchTableWorkflowReSubmit)))
            {
                _args.caller().updateWorkFlowControls();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>