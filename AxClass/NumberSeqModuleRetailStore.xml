<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeqModuleRetailStore</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>NumberSeqModuleRetailStore</c> class is used to configure all the number sequences in the system.
/// </summary>
public class NumberSeqModuleRetailStore extends NumberSeqApplicationModule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures all the data types related to the Retail Stores that are in use by the module.
    /// </summary>
    /// <remarks>
    /// Detailed description of how to setup references for number sequences can
    /// be found in method loadModule() on the 'father' class: numberSeqReference.
    /// </remarks>
    protected void loadModule()
    {
        NumberSeqDataType dataType = NumberSeqDataType::construct();

        // Statement id in scope of operating unit
        dataType.parmdataTypeId(extendedtypenum(RetailStatementId));
        dataType.parmReferenceHelp(literalStr("@RET4085"));
        dataType.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        dataType.parmWizardIsManual(NoYes::No);
        dataType.parmWizardIsChangeDownAllowed(NoYes::No);
        dataType.parmWizardIsChangeUpAllowed(NoYes::No);
        dataType.parmsortField(1);

        datatype.addParameterType(NumberSeqParameterType::OperatingUnit, true, false);
        this.create(dataType);

        // Statement voucher in scope of operating unit
        dataType.parmdataTypeId(extendedtypenum(Voucher));
        dataType.parmReferenceHelp(literalStr("@RET4085"));
        dataType.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        dataType.parmWizardIsManual(NoYes::No);
        dataType.parmWizardIsChangeDownAllowed(NoYes::No);
        dataType.parmWizardIsChangeUpAllowed(NoYes::No);
        dataType.parmsortField(2);

        datatype.addParameterType(NumberSeqParameterType::OperatingUnit, true, false);
        this.create(dataType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence area.
    /// </summary>
    /// <returns>
    /// Area that the current application object is attached to.
    /// </returns>
    public NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::RBOStore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModulesMapSubsciber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subribe to delegate method, all subclasses of NumberSeqApplicationModule should subscribes.
    /// </summary>
    [SubscribesTo(classstr(NumberSeqGlobal),delegatestr(NumberSeqGlobal,buildModulesMapDelegate))]
    static void buildModulesMapSubsciber(Map numberSeqModuleNamesMap)
    {
        NumberSeqGlobal::addModuleToMap(classnum(NumberSeqModuleRetailStore), numberSeqModuleNamesMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>