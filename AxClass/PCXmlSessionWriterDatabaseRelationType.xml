<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionWriterDatabaseRelationType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlSessionWriterDatabaseRelationType</c> class writes session XML for the domain of the
/// database relation type.
/// </summary>
class PcXmlSessionWriterDatabaseRelationType
{
    int integerMax; // upper bound
    int integerMin; // lower bound

    boolean  enumTypeWritten;

    QueryRun queryRun;

    PCDatabaseRelationConstraintDefinition  systemTableConstraint;
    PCTableConstraintDatabaseColumnDef      column;

    Common              record;
    FieldId             fieldId;
    TableId             tableId;

    PCMetadataHelper    metadataHelper;

    PCXmlWriter                 tableConstraintTypeWriter;
    PCRuntimeCacheController    runtimeCacheController;

    #PC
    #PCTableConstraint
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfTableIsEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the source table of the system table constraint is empty.
    /// </summary>
    /// <param name="_tableIsEmpty">
    /// A Boolean value indicating if the source table is empty.
    /// </param>
    /// <remarks>
    /// If it is empty the constraint model will be invalid so an error must be thrown.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Throws an error if the table is empty.
    /// </exception>
    protected void checkIfTableIsEmpty(boolean _tableIsEmpty)
    {
        if (_tableIsEmpty)
        {
            throw error(strFmt("@SYS339193", systemTableConstraint.Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PCXmlSessionWriterAttributeType</c> class.
    /// </summary>
    /// <param name="_tableConstraintColumnCategoryAttribute">A table constraint column attribute reference.</param>
    protected void initialize
    (
        PCTableConstraintColumnCategoryAttribute    _tableConstraintColumnCategoryAttribute
    )
    {
        Query                               query;
        QueryBuildDataSource                qbds;

        systemTableConstraint   = PCDatabaseRelationConstraintDefinition::find(column.TableConstraintDefinition);

        fieldId = column.ReferencedFieldId;
        tableId = systemTableConstraint.ReferencedTableId;

        if (systemTableConstraint.Query != conNull())
        {
            query = new Query(systemTableConstraint.Query);
            qbds  = query.dataSourceTable(tableId);
        }
        else
        {
            query = new Query();
            qbds  = query.addDataSource(tableId);
        }

        // select distinct values
        qbds.addSelectionField(fieldId);
        qbds.addGroupByField(fieldId);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnumType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the relation type should be interpreted as an enumeration attribute type.
    /// </summary>
    /// <returns>
    /// true if the relation type is an enumeration data type; otherwise, false.
    /// </returns>
    protected boolean isEnumType()
    {
        return tableColumnType(record, fieldId) == Types::String
            || (tableColumnType(record, fieldId) == Types::Enum
            && !AttributeDataTypeDiscriminator::checkAttributeDataTypeTrueFalse(column.getDataType()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the relation type should be interpreted as an integer attribute type.
    /// </summary>
    /// <returns>
    /// true if the relation type is an integer data type; otherwise, false.
    /// </returns>
    protected boolean isIntType()
    {
        return tableColumnType(record, fieldId) == Types::Integer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        integerMin = intMax();
        integerMax = intMin();

        enumTypeWritten = false;

        metadataHelper = PCMetadataHelper::construct();

        tableConstraintTypeWriter = PCXmlWriter::construct();

        runtimeCacheController = PCRuntimeCacheController::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMetadataHelper</Name>
				<Source><![CDATA[
    public PCMetadataHelper parmMetadataHelper(PCMetadataHelper _metadataHelper = metadataHelper)
    {
        metadataHelper = _metadataHelper;

        return metadataHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimeCacheController</Name>
				<Source><![CDATA[
    public PCRuntimeCacheController parmRuntimeCacheController(PCRuntimeCacheController _runtimeCacheController = runtimeCacheController)
    {
        runtimeCacheController = _runtimeCacheController;

        return runtimeCacheController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIntegerBounds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the bounds of an integer attribute type.
    /// </summary>
    /// <param name="_currentValue">
    /// The current integer value.
    /// </param>
    protected void updateIntegerBounds(int _currentValue)
    {
        if (_currentValue > integerMax)
        {
            integerMax = _currentValue;
        }
        if (_currentValue < integerMin)
        {
            integerMin = _currentValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAttributeTypeDomain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes XML for the attribute type.
    /// </summary>
    /// <param name="_attributeTypeName">
    /// An attribute type name.
    /// </param>
    /// <param name="_tableConstraintColumnCategoryAttribute">
    /// A table constraint column attribute reference.
    /// </param>
    /// <param name="_parsedSystemTableConstraintTypes">
    /// A set that contains the record IDs of the system table constraint types already parsed.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_attributeType">
    /// The attribute type.
    /// </param>
    protected void writeAttributeTypeDomain(
        PCName                                      _attributeTypeName,
        PCTableConstraintColumnCategoryAttribute    _tableConstraintColumnCategoryAttribute,
        PCXmlSessionDatabaseRelationTypes           _parsedSystemTableConstraintTypes,
        PCXmlWriter                                 _componentTreeWriter,
        EcoResAttributeType                         _attributeType = null)
    {
        boolean                             tableIsEmtpy = true;
        PCXmlSessionDatabaseRelationType    xmlSessionDatabaseRelationType;
        boolean                             isEnumType;
        boolean                             isIntSet = _attributeType.IsEnumeration && AttributeDataTypeDiscriminator::checkAttributeDataTypeInteger(_attributeType.DataType);

        while (queryRun.next())
        {
            tableIsEmtpy = false;

            // get a row in the source table
            record = queryRun.get(tableId);

            isEnumType = this.isEnumType();
            // if type is enum of string write XML enum declaration
            if ( !enumTypeWritten && (isEnumType || isIntset) )
            {
                // write the start tag in the component tree writer
                this.writeComponentReferenceStartTag(tableConstraintTypeWriter, _attributeTypeName, _tableConstraintColumnCategoryAttribute, _attributeType);

                xmlSessionDatabaseRelationType = _parsedSystemTableConstraintTypes.findOrCreateType(column, _attributeType);

                // set this flag to ensure the start tags are only written once
                enumTypeWritten = true;

                if (runtimeCacheController.getRuntimeXml(column.TableId, column.RecId) != '')
                {
                    break;
                }
            }

            if (isEnumType)
            {
                // write enumeration value
                this.writeEnumerationValue(xmlSessionDatabaseRelationType, fieldId);
            }
            else if (this.isIntType())
            {
                if (_attributeType.IsEnumeration)
                {
                    xmlSessionDatabaseRelationType.addIntegerValue(record.(fieldId));
                }
                else
                {
                    // update the bounds of an integer attribute type
                    this.updateIntegerBounds(record.(fieldId));
                }
            }
        }

        this.checkIfTableIsEmpty(tableIsEmtpy);

        this.writeEndTags(_parsedSystemTableConstraintTypes, _componentTreeWriter, _attributeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeComponentReferenceEndTagInteger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the end tag of the component reference to the attribute type domain.
    /// </summary>
    /// <param name="_componentTreeWriter">
    /// The XML writer that is used to store the tree of components.
    /// </param>
    protected void writeComponentReferenceEndTagInteger(PCXmlWriter _componentTreeWriter)
    {
        _componentTreeWriter.writeStartElement(#integerDomainElement);
        _componentTreeWriter.writeAttributeString(#fromAttribute, int2str(integerMin));
        _componentTreeWriter.writeAttributeString(#toAttribute, int2str(integerMax));
        _componentTreeWriter.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeComponentReferenceStartTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the start tag of the component reference to the attribute type domain.
    /// </summary>
    /// <param name="_componentTreeWriter">
    /// The XML writer that is used to store the tree of components.
    /// </param>
    /// <param name="_attributeTypeName">
    /// The attribute type name.
    /// </param>
    /// <param name="_tableConstraintColumnCategoryAttribute">
    /// A table constraint column attribute reference.
    /// </param>
    /// <param name="_attributeType">
    /// The attribute type name.
    /// </param>
    protected void writeComponentReferenceStartTag
    (
        PCXmlWriter                                 _componentTreeWriter,
        PCName                                      _attributeTypeName,
        PCTableConstraintColumnCategoryAttribute    _tableConstraintColumnCategoryAttribute,
        EcoResAttributeType                         _attributeType = null
    )
    {
        if (_attributeType.IsEnumeration && AttributeDataTypeDiscriminator::checkAttributeDataTypeInteger(_attributeType.DataType))
        {
            _componentTreeWriter.writeStartElement(#IntegerSetDomainElement);
            _componentTreeWriter.writeAttributeString(#variableDomainAttribute, _attributeTypeName);
            _componentTreeWriter.writeAttributeString(#integerSetDomainId, PCXmlSessionDatabaseRelationType::createTypeId(column));
        }
        else
        {
            _componentTreeWriter.writeStartElement(#enumDomainElement);
            _componentTreeWriter.writeAttributeString(#variableDomainAttribute, _attributeTypeName);
            _componentTreeWriter.writeAttributeString(#enumDefinitionId, PCXmlSessionDatabaseRelationType::createTypeId(column));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeEndTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the attribute types ending tags.
    /// </summary>
    /// <param name="_parsedSystemTableConstraintTypes">
    /// A collection that contains the record IDs of the system table constraint types already parsed.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_attributeType">
    /// The attribute type associated with the table constraint column.
    /// </param>
    protected void writeEndTags(
        PCXmlSessionDatabaseRelationTypes   _parsedSystemTableConstraintTypes,
        PCXmlWriter                         _componentTreeWriter,
        EcoResAttributeType                 _attributeType = null)
    {
        str xmlComponentReference;

        if (AttributeDataTypeDiscriminator::checkAttributeDataTypeTrueFalse(column.getDataType()))
        {
            _componentTreeWriter.writeStartElement(#booleanDomainElement);
            _componentTreeWriter.writeEndElement();
        }
        else if (this.isIntType() && _attributeType.IsEnumeration)
        {
            tableConstraintTypeWriter.writeEndElement();
        }
        else if (this.isIntType())
        {
            // write the end tag if the type is integer
            this.writeComponentReferenceEndTagInteger(tableConstraintTypeWriter);
        }
        else if ( this.isEnumType() )
        {
            // write the end tags for enum declaration
            tableConstraintTypeWriter.writeEndElement();
        }

        xmlComponentReference = tableConstraintTypeWriter.writeToString();
        _parsedSystemTableConstraintTypes.addTypeReference(column, xmlComponentReference);

        _componentTreeWriter.writeRaw(xmlComponentReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeEnumerationValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the enumeration value.
    /// </summary>
    /// <param name="_xmlSessionDatabaseRelationType">
    /// A system table constraint attribute type.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    protected void writeEnumerationValue
    (
        PCXmlSessionDatabaseRelationType    _xmlSessionDatabaseRelationType,
        FieldId                             _fieldId
    )
    {
        str stringValue;

        if (tableColumnType(record, fieldId) == Types::String)
        {
            stringValue = any2str(record.(_fieldId));

            // if the value is empty it will be replace with the default blank value
            if ( stringValue == #emptyString )
            {
                _xmlSessionDatabaseRelationType.addValue("@SYS342443", #BlankValue);
            }
            else
            {
                _xmlSessionDatabaseRelationType.addValue(stringValue, stringValue);
            }
        }
        else
        {
            _xmlSessionDatabaseRelationType.addValue(enum2str(record.(_fieldId)), metadataHelper.getEnumSymbol(tableId, _fieldId, record));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeForExistingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the XML of a domain for an attribute which is part of a system table constraint, which has
    /// already been encountered.
    /// </summary>
    /// <param name="_parsedSystemTableConstraintTypes">
    /// A collection that contains the record IDs of the system table constraint types already parsed.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer used to store the tree of components.
    /// </param>
    protected void writeForExistingType(
        PCXmlSessionDatabaseRelationTypes   _parsedSystemTableConstraintTypes,
        PCXmlWriter                         _componentTreeWriter)
    {
        _componentTreeWriter.writeRaw(_parsedSystemTableConstraintTypes.lookupTypeReference(column));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeForNewType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the XML of a domain for an attribute which is part of a system table constraint, which has
    /// not already been encountered.
    /// </summary>
    /// <param name="_attributeTypeName">
    /// An attribute type name.
    /// </param>
    /// <param name="_tableConstraintColumnCategoryAttribute">
    /// A table constraint column attribute reference.
    /// </param>
    /// <param name="_parsedSystemTableConstraintTypes">
    /// A collection that contains the record IDs of the system table constraint types already parsed.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_attributeType">
    /// The XML writer used to store the tree of components.
    /// </param>
    protected void writeForNewType(
        Name                                        _attributeTypeName,
        PCTableConstraintColumnCategoryAttribute    _tableConstraintColumnCategoryAttribute,
        PCXmlSessionDatabaseRelationTypes           _parsedSystemTableConstraintTypes,
        PCXmlWriter                                 _componentTreeWriter,
        EcoResAttributeType                         _attributeType)
    {
        this.initialize(_tableConstraintColumnCategoryAttribute);

        this.writeAttributeTypeDomain(_attributeTypeName,
                                       _tableConstraintColumnCategoryAttribute,
                                       _parsedSystemTableConstraintTypes,
                                       _componentTreeWriter,
                                       _attributeType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the XML of a domain for an attribute which is part of a system table constraint.
    /// </summary>
    /// <param name="_attributeTypeName">
    /// An attribute type name.
    /// </param>
    /// <param name="_tableConstraintColumnCategoryAttribute">
    /// A table constraint column attribute reference.
    /// </param>
    /// <param name="_parsedSystemTableConstraintTypes">
    /// A collection that contains the record IDs of the system table constraint types that have already
    /// been parsed.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer that is used to store the tree of components.
    /// </param>
    /// <param name="_attributeType">
    /// The attribute type.
    /// </param>
    public void write(
        Name                                        _attributeTypeName,
        PCTableConstraintColumnCategoryAttribute    _tableConstraintColumnCategoryAttribute,
        PCXmlSessionDatabaseRelationTypes           _parsedSystemTableConstraintTypes,
        PCXmlWriter                                 _componentTreeWriter,
        EcoResAttributeType                         _attributeType = null)
    {
        str functionaName = funcName();

        PCContractNotNull::assertRecord(_tableConstraintColumnCategoryAttribute, functionaName);
        PCContractNotNull::assertObject(_parsedSystemTableConstraintTypes, functionaName);
        PCContractNotNull::assertObject(_componentTreeWriter, functionaName);

        column = _tableConstraintColumnCategoryAttribute.getDatabaseRelationConstraint();

        if (_parsedSystemTableConstraintTypes.columnHasBeenEncountered(column))
        {
            this.writeForExistingType(_parsedSystemTableConstraintTypes, _componentTreeWriter);
        }
        else
        {
            this.writeForNewType(_attributeTypeName,
                                 _tableConstraintColumnCategoryAttribute,
                                 _parsedSystemTableConstraintTypes,
                                 _componentTreeWriter,
                                 _attributeType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionWriterDatabaseRelationType construct()
    {
        return new PCXmlSessionWriterDatabaseRelationType();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>