<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostBundleTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Assigns items to bundles for a single level.
/// </summary>
class InventCostBundleTask extends InventCostTaskBase implements BatchRetryable
{
    BOMLevel            bomLevel;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        bomLevel
     #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns items to bundles for a single level and iteration.
    /// </summary>
    protected void doRun()
    {
        inventCostTaskController.assignBundle(bomLevel, inventClosing.NumOfIteration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    protected ClassDescription getTaskDescription()
    {
        return InventCostBundleTask::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMLevel</Name>
				<Source><![CDATA[
    public BOMLevel parmBOMLevel(BOMLevel _bomLevel = bomLevel)
    {
        bomLevel = _bomLevel;

        return bomLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version      = conPeek(_packedClass,1);
        container packedBase;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedBase] = _packedClass;
                return super(packedBase);
        }

        return super(_packedClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventCostBundleTask construct()
    {
        return new InventCostBundleTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYS4001006";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostBundleTask</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of the inventory closing.
    /// </param>
    /// <param name="_transDate">
    /// The date of the inventory closing.
    /// </param>
    /// <param name="_bomLevel">
    /// The level for which the inventory closing should be performed.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCostBundleTask</c> class.
    /// </returns>
    public static InventCostBundleTask newTask(
        Voucher             _voucher,
        TransDate           _transDate,
        BOMLevel            _bomLevel
        )
    {
        InventCostBundleTask inventCostBundleTask = InventCostBundleTask::construct();

        inventCostBundleTask.parmVoucher(_voucher);
        inventCostBundleTask.parmTransDate(_transDate);
        inventCostBundleTask.parmBOMLevel(_bomLevel);

        return inventCostBundleTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>