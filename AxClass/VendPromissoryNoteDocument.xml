<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNoteDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Handles promissory note printing.
/// </summary>
public class VendPromissoryNoteDocument extends VendOutPaym
{
    // The following fields can be directly persisted to a container as they are primitive data types or tables.
    BankPromissoryNoteQty numOfBlankNote;
    BankPromissoryNoteNumMethod noteNumMethod;
    BankPromissoryNoteNum firstNoteNum_ES;
    BankPromissoryNoteNum nextNoteNum_ES;
    BankPromissoryNoteStartNum nextNoteNum;
    Num mask;
    AddressCity city;
    boolean isFormat_ES;
    Counter numOfSlips;
    ReportPosition slipTop1;
    ReportPosition slipTop2;
    ReportPosition slipHeight;
    ReportPosition noteTop;
    TmpBankPromissoryNotePrintout tmpBankPromissoryNotePrintout;
    BankPromissoryNoteLayout bankPromissoryNoteLayout;
    BankPromissoryNoteQty numOfTestNotes;
    BankPromissoryNoteStartNum firstNoteNum;
    BankPromissoryNoteNum noteNum;
    Counter specTransLines;

    // The following fields cannot be directly persisted to a container as they are object type.
    DialogField dialogAccountId;
    DialogField dialogFromNoteNum;
    DialogField dialogNumOfBlankNote;
    DialogField dialogMask;
    DialogField dialogCity;

    Set createdNoteNumbers;

    // This list defines which fields will be persisted and restored via the system's
    // SysLastValue functionality.
    #DEFINE.SysLastValuesCurrentVersion(1)
    #LOCALMACRO.SysLastValuesList
        accountId,
        numOfBlankNote,
        noteNumMethod,
        firstNoteNum_ES,
        nextNoteNum_ES,
        printPaymAdvice,
        mask,
        city
    #ENDMACRO

    // This list defines how the object is serialized and unserialized as it is sent across the wire. This
    // list should contain all non-object types defined on this class declaration.
    #DEFINE.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        numOfBlankNote,
        noteNumMethod,
        firstNoteNum_ES,
        nextNoteNum_ES,
        nextNoteNum,
        mask,
        city,
        isFormat_ES,
        numOfSlips,
        slipTop1,
        slipTop2,
        slipHeight,
        noteTop,
        tmpBankPromissoryNotePrintout,
        bankPromissoryNoteLayout,
        numOfTestNotes,
        firstNoteNum,
        noteNum,
        specTransLines
    #ENDMACRO

    #DEFINE.Version4(4)
    #LOCALMACRO.CurrentListV4
        accountId,
        numOfBlankNote,
        noteNumMethod,
        firstNoteNum_ES,
        nextNoteNum_ES,
        printPaymAdvice,
        mask,
        city
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a printer settings dialog box for the specified payment document type.
    /// </summary>
    /// <param name="_documentType">
    /// The payment document type.
    /// </param>
    /// <returns>
    /// true if the printer settings dialog box was closed with the Ok button; otherwise, false.
    /// </returns>
    public boolean callPrinterSettings(PaymDocumentType _documentType)
    {
        boolean ok = true;
        Args args = new Args();

        if (_documentType != PaymDocumentType::Document)
        {
            return super(_documentType);
        }

        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings();
        printSettings.unpack(this.getPrinterSettings(_documentType));

        printSettings.fromPage(1);
        printSettings.toPage(99999999);
        printSettings.printMediumType(SRSPrintMediumType::Printer);

        args.caller(printSettings);
        args.name(formStr(SRSPrintDestinationSettingsForm));

        FormRun printSettingForm = classfactory.formRunClass(args);
        printSettingForm.init();
        printSettingForm.run();
        printSettingForm.wait(true);

        ok = printSettingForm.closedOk();

        if (ok)
        {
            this.updatePrinterSettings(_documentType, printSettings.pack());
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDataOk</Name>
				<Source><![CDATA[
    private boolean checkDataOk(LedgerJournalTrans _ledgerJournalTrans)
    {
        setPrefix(strFmt("@SYS25866", _ledgerJournalTrans.Voucher));

        if (_ledgerJournalTrans.AccountType != LedgerJournalACType::Vend)
        {
            return checkFailed(strFmt("@SYS78853", LedgerJournalACType::Vend));
        }

        if (_ledgerJournalTrans.VendTransId
            && !VendTrans::find(_ledgerJournalTrans.VendTransId).Approved
            && (_ledgerJournalTrans.SettleVoucher != SettlementType::None))
        {
            return checkFailed("@SYS3508");
        }

        if (!accountId)
        {
            return checkFailed("@SYS24651");
        }

        if (!BankAccountTable::find(accountId))
        {
            return checkFailed(strFmt("@SYS27061", accountId));
        }

        if (isFormat_ES && noteNumMethod == BankPromissoryNoteNumMethod::Fixed)
        {
            if (!nextNoteNum_ES)
            {
                return checkFailed("@SYS73997");
            }

            if (BankPromissoryNoteTable::find(accountId, nextNoteNum_ES).DocumentStatus != BankPromissoryNoteStatus::Created)
            {
                return checkFailed(strFmt("@SYS78843", nextNoteNum));
            }
        }
        else
        {
            if (!nextNoteNum)
            {
                return checkFailed("@SYS73997");
            }

            if (BankPromissoryNoteTable::find(accountId, this.formatNoteNum(nextNoteNum,mask)).DocumentStatus != BankPromissoryNoteStatus::Created)
            {
                return checkFailed(strFmt("@SYS78843", nextNoteNum));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    public boolean checkValues(
        LedgerJournalTrans _ledgerJournalTrans = null,
        RunbaseProgress _progress = null)
    {
        AmountMST paymAmountMST = _ledgerJournalTrans.calcAmountMST();

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank)
        {
            return BankAccountTable::checkIsActive(_ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.TransDate);
        }

        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            return BankAccountTable::checkIsActive(_ledgerJournalTrans.parmOffsetAccount(), _ledgerJournalTrans.TransDate);
        }

        if (paymAmountMST == 0)
        {
            return checkFailed(strFmt("@SYS82275", _ledgerJournalTrans.Voucher));
        }

        if (paymAmountMST < 0
            && _ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::VendPromissoryNoteRedraw)
        {
            return checkFailed(strFmt("@SYS26761", _ledgerJournalTrans.Voucher));
        }

        BankAccountTable bankAccountTable = BankAccountTable::find(_ledgerJournalTrans.BankAccountId);

        if (_ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::VendPromissoryNoteDraw
            && _ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::VendPromissoryNoteRedraw)
        {
            return checkFailed(strFmt("@SYS74155", LedgerJournalType::VendPromissoryNoteDraw, LedgerJournalType::VendPromissoryNoteRedraw));
        }

        if (!_ledgerJournalTrans.BankPromissoryNoteNum
            && _ledgerJournalTrans.CurrencyCode != bankAccountTable.CurrencyCode
            && !bankAccountTable.BankMultiCurrency)
        {
            return checkFailed("@SYS74142");
        }

        if (bankPromissoryNoteLayout.NoteFormType == BankPromissoryNoteFormType::FRStyle
            && Currency::find(_ledgerJournalTrans.CurrencyCode).CurrencyCodeISO != ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR))
        {
            return checkFailed(strFmt("@SYS97202",_ledgerJournalTrans.CurrencyCode));
        }

        LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTrans(
            _ledgerJournalTrans,
            LedgerJournalVoucher::Voucher,
            NoYes::No,
            NoYes::No,
            NoYes::No);

        ledgerJournalCheckPost.parmShowErrorOk(false);
        ledgerJournalCheckPost.parmCheckPaymStatus(false);

        if (_progress)
        {
            ledgerJournalCheckPost.progress(_progress);
        }

        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

        return ledgerJournalCheckPost.tableErrorLog() == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>city</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the promissory note city.
    /// </summary>
    /// <returns>
    ///     The city.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AddressCity city()
    {
        return city;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the epilogue of the media, such as an end record for a file.
    /// </summary>
    public void close()
    {
        this.printDocument();

        if (printPaymAdvice)
        {
            this.printPaymAdvice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(VendPromissoryNote);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToMm</Name>
				<Source><![CDATA[
    private BankPromissoryNoteLength convertToMm(BankPromissoryNoteLength _value, PrintPaperSizeUnit _unit)
    {
        return units2mm(_value, _unit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class ID of the parent class that corresponds to the <c>CustVendOutPaymRecord</c> class.
    /// </summary>
    /// <returns>
    /// The class ID.
    /// </returns>
    /// <remarks>
    /// The class must be inherited from the <c>CustVendOutPaymRecord</c> class.
    /// </remarks>
    public ClassId custVendOutPaymRecordRootClassId()
    {
        return classNum(VendOutPaymRecord_PN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a class that contains the methods that are described by the <c>RunBaseDialogable</c> interface
    /// </summary>
    /// <returns>
    /// A class that has the described methods.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        this.initNoteDialog();

        dialogAccountId = dialog.addFieldValue(extendedTypeStr(CompanyBankAccountId), accountId);
        if (isFormat_ES && noteNumMethod == BankPromissoryNoteNumMethod::Fixed)
        {
            dialogFromNoteNum = dialog.addFieldValue(extendedTypeStr(BankPromissoryNoteNum), firstNoteNum_ES, "@SYS4083");
        }
        else
        {
            dialogFromNoteNum = dialog.addFieldValue(extendedTypeStr(BankPromissoryNoteStartNum), firstNoteNum, "@SYS4083");
        }

        dialogNumOfBlankNote = dialog.addFieldValue(extendedTypeStr(BankPromissoryNoteQty), numOfBlankNote, "@SYS74040");
        if (isFormat_ES && noteNumMethod == BankPromissoryNoteNumMethod::Free)
        {
            dialogMask = dialog.addFieldValue(extendedTypeStr(NumberSequenceFormat),mask);
        }
        if (bankPromissoryNoteLayout.NoteFormType == BankPromissoryNoteFormType::FRStyle)
        {
            dialogCity = dialog.addFieldValue(extendedTypeStr(AddressCity), city);
        }

        dialogAccountId.allowEdit(false);
        dialogFromNoteNum.allowEdit(noteNumMethod == BankPromissoryNoteNumMethod::Free);

        this.dialogAddPrintDocument(PaymDocumentType::PaymAdvice, dialog, true, true, true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillNote</Name>
				<Source><![CDATA[
    private void fillNote(
        BankPromissoryNoteNum _bankPromissoryNoteNum,
        LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean firstNote = true;
        AmountCur amountCur;
        Counter notesLines;
        AmountCur decAmountCur;
        LogisticsPostalAddress postalAddress;

        VendTable vendTableLocal = VendTable::findByLedgerDimension(_ledgerJournalTrans.parmLedgerDimension());
        BankAccountTable bankAccountTable = BankAccountTable::find(accountId);
        Currency currency = Currency::find(bankAccountTable.CurrencyCode);
        Counter slipLines = this.slipTxtLines(bankPromissoryNoteLayout);
        Counter totalSpecLines = SpecTrans::getSpecTransCount(_ledgerJournalTrans.company(), _ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId);
        Counter startLines = 0;
        Counter endLines = slipLines;
        specTransLines = 0;

        if (_ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::VendPromissoryNoteRedraw)
        {
            amountCur = _ledgerJournalTrans.AmountCurCredit - _ledgerJournalTrans.AmountCurDebit;
        }
        else
        {
            amountCur = _ledgerJournalTrans.AmountCurDebit - _ledgerJournalTrans.AmountCurCredit;
        }

        BankPromissoryNoteTable::setPromissoryNoteDocStatus(
            accountId,
            _bankPromissoryNoteNum,
            BankPromissoryNoteStatus::Printed,
            _ledgerJournalTrans.TransDate,
            _ledgerJournalTrans.Voucher,
            _ledgerJournalTrans.parmAccount(),
            _ledgerJournalTrans.CurrencyCode,
            amountCur);

        if (slipLines < 7)
        {
            totalSpecLines = 0;
        }

        while (specTransLines < totalSpecLines || totalSpecLines == 0)
        {
            postalAddress = vendTableLocal.postalAddress();
            tmpBankPromissoryNotePrintout.clear();
            tmpBankPromissoryNotePrintout.RecipientName = vendTableLocal.name();
            tmpBankPromissoryNotePrintout.Address = postalAddress.Address;
            tmpBankPromissoryNotePrintout.CountryRegionId = postalAddress.CountryRegionId;
            tmpBankPromissoryNotePrintout.State = postalAddress.State;
            tmpBankPromissoryNotePrintout.County = postalAddress.County;
            tmpBankPromissoryNotePrintout.Street = postalAddress.Street;
            tmpBankPromissoryNotePrintout.City = postalAddress.City;
            tmpBankPromissoryNotePrintout.NumOfSlips = numOfSlips;
            tmpBankPromissoryNotePrintout.SlipHeight = slipHeight;
            tmpBankPromissoryNotePrintout.SlipTop1 = slipTop1;
            tmpBankPromissoryNotePrintout.SlipTop2 = slipTop2;
            tmpBankPromissoryNotePrintout.NoteTop = noteTop;
            tmpBankPromissoryNotePrintout.NoteNum = noteNum;
            tmpBankPromissoryNotePrintout.NoteFormType = bankPromissoryNoteLayout.NoteFormType;
            tmpBankPromissoryNotePrintout.Signature1 = NoYes::No;
            tmpBankPromissoryNotePrintout.Signature2 = NoYes::No;
            tmpBankPromissoryNotePrintout.TransDate = _ledgerJournalTrans.TransDate;
            tmpBankPromissoryNotePrintout.DueDate = _ledgerJournalTrans.Due;

            if (firstNote)
            {
                firstNote = false;
                tmpBankPromissoryNotePrintout.AccountId = accountId;
                tmpBankPromissoryNotePrintout.BankName = bankPromissoryNoteLayout.BankName ? bankAccountTable.Name : '';
                tmpBankPromissoryNotePrintout.RegistrationNum = bankPromissoryNoteLayout.BankNum  ? bankAccountTable.RegistrationNum : '';
                tmpBankPromissoryNotePrintout.AccountNum = bankPromissoryNoteLayout.BankNum  ? bankAccountTable.AccountNum : '';
                tmpBankPromissoryNotePrintout.AmountCur = amountCur;
                tmpBankPromissoryNotePrintout.CurrencyTxt = currency.Txt;

                switch (bankPromissoryNoteLayout.NoteFormType)
                {
                    case BankPromissoryNoteFormType::ESStyle,
                        BankPromissoryNoteFormType::MXStyle :
                        decAmountCur = amountCur - roundDown(amountCur, 1);
                        tmpBankPromissoryNotePrintout.AmountTxt = decAmountCur > 0.00 ? strFmt('***%1***', amountCur) : strFmt('***%1***', num2str(amountCur,1,0,1,1));
                        tmpBankPromissoryNotePrintout.Numerals2Letter  = amountCur != 0 ? numeralsToTxt_ES(amountCur,
                                                                                                    CurrencyGender::findByCurrencyCode(currency.CurrencyCode).Gender,
                                                                                                    true,
                                                                                                    currency.CurrencyCodeISO) : '';
                        break;

                    case BankPromissoryNoteFormType::FRStyle :
                        tmpBankPromissoryNotePrintout.AmountTxt = strFmt('**%1', num2str(_ledgerJournalTrans.amount(),0,2,0,0));
                        tmpBankPromissoryNotePrintout.BankName = bankAccountTable.Name;
                        tmpBankPromissoryNotePrintout.RegistrationNum = bankAccountTable.RegistrationNum;
                        tmpBankPromissoryNotePrintout.AccountNum = bankAccountTable.AccountNum;
                        tmpBankPromissoryNotePrintout.VendAccount = _ledgerJournalTrans.parmAccount();
                        tmpBankPromissoryNotePrintout.DocumentNum = _ledgerJournalTrans.DocumentNum;
                        break;

                    default :
                        tmpBankPromissoryNotePrintout.AmountTxt = strFmt('%1 %2***',currency.CurrencyCode, amountCur);
                        tmpBankPromissoryNotePrintout.Numerals2Letter = amountCur != 0 ? numeralsToTxt(amountCur) : '';
                }

                if (bankPromissoryNoteLayout.Signature1)
                {
                    if (!bankPromissoryNoteLayout.Signature1Limit)
                    {
                        tmpBankPromissoryNotePrintout.Signature1 = NoYes::Yes;
                    }
                    else
                    {
                        tmpBankPromissoryNotePrintout.Signature1 = bankPromissoryNoteLayout.Signature1Limit >= amountCur ? NoYes::Yes : NoYes::No;
                    }
                }

                if (bankPromissoryNoteLayout.Signature2)
                {
                    if (!bankPromissoryNoteLayout.Signature2Limit)
                    {
                        tmpBankPromissoryNotePrintout.Signature2 = NoYes::Yes;
                    }
                    else
                    {
                        tmpBankPromissoryNotePrintout.Signature2 = bankPromissoryNoteLayout.Signature2Limit >= amountCur ? NoYes::Yes : NoYes::No;
                    }
                }
            }
            else
            {
                this.setBlankNote(_ledgerJournalTrans);
                tmpBankPromissoryNotePrintout.Void = NoYes::Yes;
                tmpBankPromissoryNotePrintout.NoteNum = noteNum;
            }

            if (numOfSlips > 0)
            {
                switch (bankPromissoryNoteLayout.NoteFormType)
                {
                    case BankPromissoryNoteFormType::ESStyle :
                        tmpBankPromissoryNotePrintout.SlipTxt = "@SYS74003"+' '+noteNum+'\n\n';
                        endLines -= 2;
                        break;
                }

                if (totalSpecLines > 0)
                {
                    tmpBankPromissoryNotePrintout.SlipTxt += this.fillSlipTxt(
                        _ledgerJournalTrans,
                        startLines,
                        endLines,
                        noteNum,
                        bankPromissoryNoteLayout.NoteFormType);
                }

                if (_ledgerJournalTrans.PaymentNotes && specTransLines == totalSpecLines)
                {
                    notesLines = this.notesLines(_ledgerJournalTrans.PaymentNotes);
                    if (notesLines + this.notesLines(tmpBankPromissoryNotePrintout.SlipTxt) <= slipLines)
                    {
                        tmpBankPromissoryNotePrintout.SlipTxt += '\n'+_ledgerJournalTrans.PaymentNotes;
                    }
                    else
                    {
                        postalAddress = vendTableLocal.postalAddress();
                        tmpBankPromissoryNotePrintout.insert();
                        tmpBankPromissoryNotePrintout.clear();
                        tmpBankPromissoryNotePrintout.RecipientName = vendTableLocal.name();
                        tmpBankPromissoryNotePrintout.Address = postalAddress.Address;
                        tmpBankPromissoryNotePrintout.CountryRegionId = postalAddress.CountryRegionId;
                        tmpBankPromissoryNotePrintout.State = postalAddress.State;
                        tmpBankPromissoryNotePrintout.County = postalAddress.County;
                        tmpBankPromissoryNotePrintout.NumOfSlips = numOfSlips;
                        tmpBankPromissoryNotePrintout.SlipHeight = slipHeight;
                        tmpBankPromissoryNotePrintout.SlipTop1 = slipTop1;
                        tmpBankPromissoryNotePrintout.SlipTop2 = slipTop2;
                        tmpBankPromissoryNotePrintout.NoteTop = noteTop;
                        tmpBankPromissoryNotePrintout.NoteFormType = bankPromissoryNoteLayout.NoteFormType;
                        tmpBankPromissoryNotePrintout.Void = NoYes::Yes;

                        this.setBlankNote(_ledgerJournalTrans);

                        BankPromissoryNoteTable::setPromissoryNoteDocStatus(
                            accountId,
                            this.noteNum(),
                            BankPromissoryNoteStatus::NotPrinted,
                            _ledgerJournalTrans.TransDate,
                            '',
                            '',
                            bankAccountTable.CurrencyCode,
                            0);

                        tmpBankPromissoryNotePrintout.NoteNum = noteNum;
                        switch (bankPromissoryNoteLayout.NoteFormType)
                        {
                            case BankPromissoryNoteFormType::ESStyle :
                                tmpBankPromissoryNotePrintout.SlipTxt = "@SYS74003"+' '+noteNum+'\n\n';
                                break;
                        }
                        tmpBankPromissoryNotePrintout.SlipTxt += _ledgerJournalTrans.PaymentNotes + '\n\n';
                    }
                }
            }
            else
            {
                totalSpecLines = -1;
            }

            tmpBankPromissoryNotePrintout.insert();
            startLines  = specTransLines;
            endLines    = startLines + slipLines;

            if (totalSpecLines == 0)
            {
                totalSpecLines = -1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSlipTxt</Name>
				<Source><![CDATA[
    private ChequeSlipTxt fillSlipTxt(
        LedgerJournalTrans _ledgerJournalTrans,
        Counter _startLines,
        Counter _endLines,
        BankPromissoryNoteNum _noteNum,
        BankPromissoryNoteFormType _noteFormType)
    {
        SpecTrans specTrans;
        BankPromissoryNoteSlipTxt noteSlipTxt;
        AmountCur paymAmount;
        Counter lines;
        Counter endLines = _endLines;
        FromDate invoiceDate;
        AmountCur totalAmountCur;
        boolean totalPrinted;
        boolean printStartAmount;
        VendTrans vendTrans;
        VendTable vendTable = VendTable::findByLedgerDimension(_ledgerJournalTrans.parmLedgerDimension());
        VendTrans vendTransSettlement;
        VendSettlement vendSettlement;
        VendPromissoryNoteInvoice vendPromissoryNoteInvoice;
        CustVendTransDetails vendTransDetails = new CustVendTransDetails(vendTrans);
        container invoiceVendTransCompany;

        if (vendTable)
        {
            noteSlipTxt += strFmt('%1 : %2, %3\n', "@SYS9455", vendTable.AccountNum, vendTable.name());
            endLines -= 1;
        }

        switch (_noteFormType)
        {
            case BankPromissoryNoteFormType::ESStyle,
                BankPromissoryNoteFormType::FRStyle,
                BankPromissoryNoteFormType::MXStyle :
                noteSlipTxt += strFmt('%1  %2 %3 %4 %5 %6\n\n', "@SYS57610", "@SYS4726",  "@SYS9458", "@SYS7572", "@SYS1943", "@SYS14588");
                endLines -= 1;
                break;

            default :
                throw  error("@SYS74057");
        }

        Counter totalLines = SpecTrans::getSpecTransCount(_ledgerJournalTrans.company(), _ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId);

        while select crossCompany specTrans
            where specTrans.SpecTableId == _ledgerJournalTrans.TableId
                && specTrans.SpecRecId   == _ledgerJournalTrans.RecId
                && specTrans.SpecCompany == _ledgerJournalTrans.company()
        {
            lines++;
            vendTrans = specTrans.vendTrans();

            if (!vendTrans && _noteFormType == BankPromissoryNoteFormType::ESStyle)
            {
                while select crossCompany RecId from vendSettlement
                    where vendSettlement.RecId == specTrans.RefRecId
                       && vendSettlement.TableId == specTrans.RefTableId
                       && vendSettlement.DataAreaId == specTrans.RefCompany
                    join vendTransSettlement
                        where vendTransSettlement.RecId == vendSettlement.TransRecId
                    join vendPromissoryNoteInvoice
                        where vendPromissoryNoteInvoice.PromissoryNoteId == vendTransSettlement.PromissoryNoteID
                {
                    changecompany(specTrans.RefCompany)
                    {
                        if (vendPromissoryNoteInvoice)
                        {
                            // Set to null in case the company context changes
                            vendTrans = null;

                            invoiceVendTransCompany += [vendPromissoryNoteInvoice.InvoiceCompany];
                            select firstonly crossCompany:invoiceVendTransCompany vendTrans
                                where vendTrans.Voucher   == vendPromissoryNoteInvoice.InvoiceVoucher
                                    && vendTrans.TransDate == vendPromissoryNoteInvoice.InvoiceDate
                                    && vendTrans.Invoice   == vendPromissoryNoteInvoice.InvoiceId;
                        }

                        vendTransDetails.setCustVendTrans(vendTrans);
                        totalAmountCur += vendTrans.AmountCur - vendTransDetails.utilizedCashDisc();
                        if (lines > _startLines && lines <= endLines)
                        {
                            if (printStartAmount)
                            {
                                noteSlipTxt += strFmt('%1 %2\n\n',
                                                        strLFix("@SYS55313",62),
                                                        num2str(-(totalAmountCur - specTrans.Balance01),16, 2, -1, -1));
                                printStartAmount = false;
                            }
                            specTransLines++;
                            paymAmount = abs(vendTrans.AmountCur - vendTransDetails.utilizedCashDisc());
                            invoiceDate = vendTrans.DocumentDate ? vendTrans.DocumentDate : vendTrans.TransDate;
                            noteSlipTxt += strFmt('%1    %2        %3 %4    %5 %6\r\n',
                                                  invoiceDate,
                                                  strLFix(vendTrans.Invoice,15),
                                                  vendTrans.AmountCur,
                                                  vendTrans.CurrencyCode,
                                                  num2str(paymAmount,16, 2, -1, -1),
                                                  vendTrans.DueDate);

                            if (lines == endLines && totalLines != lines)
                            {
                                noteSlipTxt += strFmt(' \n%1 %2',
                                                      strLFix("@SYS7470",50),
                                                      num2str(totalAmountCur,16, 2, -1, -1));
                                totalPrinted = true;
                            }
                        }
                    }
                }
            }
            else
            {
                totalAmountCur += specTrans.Balance01;
                if (lines > _startLines && lines <= endLines)
                {
                    if (printStartAmount)
                    {
                        noteSlipTxt += strFmt('%1 %2\n\n',
                                                strLFix("@SYS55313",62),
                                                num2str(-(totalAmountCur - specTrans.Balance01),16, 2, -1, -1));
                        printStartAmount = false;
                    }
                    specTransLines++;
                    paymAmount     = -specTrans.Balance01;
                    invoiceDate    = vendTrans.documentInvoiceDate();
                    noteSlipTxt += strFmt('%1    %2        %3 %4    %5 %6\r\n',
                                          invoiceDate,
                                          strLFix(vendTrans.Invoice,15),
                                          vendTrans.AmountCur,
                                          vendTrans.CurrencyCode,
                                          num2str(paymAmount,16, 2, -1, -1),
                                          specTrans.vendTransOpen().DueDate);

                    if (lines == endLines && totalLines != lines)
                    {
                        noteSlipTxt += strFmt(' \n%1 %2',
                                              strLFix("@SYS7470",50),
                                              num2str(abs(totalAmountCur),16, 2, -1, -1));
                        totalPrinted = true;
                    }
                }
            }
        }

        if (!totalPrinted && totalLines == lines)
        {
            noteSlipTxt += strFmt(' \n%1 %2',
                                    strLFix("@SYS809",50),
                                    num2str(-totalAmountCur,16, 2, -1, -1));
        }
        return noteSlipTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatNoteNum</Name>
				<Source><![CDATA[
    private BankPromissoryNoteNum formatNoteNum(BankPromissoryNoteStartNum  _noteNum, Num _mask = '')
    {
        return NumberSeq::numInsertFormat(_noteNum, _mask);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    public void generatePaymentLines()
    {
        LedgerJournalTrans      ledgerJournalTrans;

        ttsbegin;

        setPrefix("@SYS17561");

        this.updateQuery();

        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

            if (this.checkValues(ledgerJournalTrans,this.parmProgress()))
            {
                if (!ledgerJournalTrans.BankPromissoryNoteNum)
                {
                    this.output(ledgerJournalTrans);
                    outPaymRecordList.addEnd(CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                              ledgerJournalTrans.PaymSpec,
                                                                              this,
                                                                              this.vendPaym(ledgerJournalTrans)));
                }
            }
            else
            {
                throw error("@SYS18447");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        accountId           = dialogAccountId.value();
        if (isFormat_ES && noteNumMethod == BankPromissoryNoteNumMethod::Fixed)
        {
            firstNoteNum_ES = dialogFromNoteNum.value();
        }
        else
        {
            firstNoteNum    = dialogFromNoteNum.value();
        }
        numOfBlankNote      = dialogNumOfBlankNote.value();
        noteNumMethod       = BankPromissoryNoteLayout::find(accountId).NoteNumMethod;
        printPaymAdvice     = dialogPrintPaymAdvice.value();
        if (isFormat_ES && noteNumMethod == BankPromissoryNoteNumMethod::Free)
        {
            mask            = dialogMask.value();
        }
        if (bankPromissoryNoteLayout.NoteFormType == BankPromissoryNoteFormType::FRStyle)
        {
            city            = dialogCity.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Restores the pertinent values from the <c>SysLastValue</c> table.
    /// </summary>
    /// <remarks>
    ///    <c>#CurrentList</c> and <c>#SysLastValues</c> lists are different and require specialized logic for
    ///    the <c>SysLastValues</c> implementation.
    /// </remarks>
    public void getLast()
    {
        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.

        // Restore the pertinent values from the SysLastValue table.
        if (xSysLastValue::existLast(this))
        {
            container packedValues = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                                    this.lastValueUserId(),
                                                    this.lastValueType(),
                                                    this.lastValueElementName(),
                                                    this.lastValueDesignName());
            this.unpackSysLastValues(packedValues);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNoteDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes required information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initNoteDialog()
    {
        if (firstNoteNum)
        {
            return;
        }

        accountId = this.parmBankAccountID();

        bankPromissoryNoteLayout    = BankPromissoryNoteLayout::find(accountId);
        noteNumMethod               = bankPromissoryNoteLayout.NoteNumMethod;
        if (bankPromissoryNoteLayout.NoteFormType == BankPromissoryNoteFormType::ESStyle && bankPromissoryNoteLayout.NoteFormat)
        {
            isFormat_ES = true;
        }

        if (bankPromissoryNoteLayout)
        {
            this.setNoteNum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the format to be displayed in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the format to be displayed.
    /// </returns>
    /// <remarks>
    /// The method must return the name of the format to be displayed in the user interface. Formats
    /// without an interface name cannot be used in electronic banking as export formats. Although, they
    /// can serve as parents for other formats.
    /// </remarks>
    public PaymInterfaceName interfaceName()
    {
        return "@SYS74003";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        numOfBlankNote  = 0;
        createdNoteNumbers    = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>noteNum</Name>
				<Source><![CDATA[
    private BankPromissoryNoteNum noteNum()
    {
        if (isFormat_ES && noteNumMethod == BankPromissoryNoteNumMethod::Fixed)
        {
            noteNum = nextNoteNum_ES;
            nextNoteNum_ES = this.setNextNoteNum_ES();
        }
        else
        {
            noteNum = this.formatNoteNum(nextNoteNum,mask);

            if (noteNumMethod == BankPromissoryNoteNumMethod::Fixed)
            {
                if (!BankPromissoryNoteTable::exist(accountId, num2str(nextNoteNum, 0, 0, 0, 0))) // The sequence is broken, find the next Pn
                {
                    nextNoteNum = NumberSeq::numRemoveFormat(BankPromissoryNoteTable::findNextFree(accountId), '');

                    if (!nextNoteNum)
                    {
                        throw error(strFmt("@SYS74038", accountId));
                    }

                    noteNum = this.formatNoteNum(nextNoteNum,mask);
                }
            }
            else
            {
                BankPromissoryNoteTable::createPromissoryNote(noteNum,accountId);
            }
            nextNoteNum ++;
            createdNoteNumbers.add(noteNum);
        }

        return noteNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notesLines</Name>
				<Source><![CDATA[
    private Counter notesLines(FreeTxt  _paymentNotes)
    {
        int lines   =  0;
        int pos     = -1;

        while (pos)
        {
            pos = strScan(_paymentNotes, '\n', pos+1, 255);
            lines++;
        }

        return lines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the media and creates a header.
    /// </summary>
    /// <remarks>
    /// An example of opening the media is creating a file, and an example of a header is a start record
    /// for the file.
    /// </remarks>
    public void open()
    {
        this.initNoteDialog();
        nextNoteNum = firstNoteNum;
        tmpBankPromissoryNotePrintout   = null;
        if (isFormat_ES && noteNumMethod == BankPromissoryNoteNumMethod::Fixed)
        {
            nextNoteNum_ES               = firstNoteNum_ES;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    public void output(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendPromissoryNoteJour  vendPromissoryNoteJour;
        SpecTrans               specTrans;

        if (this.checkDataOk(_ledgerJournalTrans))
        {
            if (numOfBlankNote > 0)
            {
                this.setBlankNote(_ledgerJournalTrans, numOfBlankNote);
                numOfBlankNote = 0;
            }

            this.noteNum();
            this.setPaymentRef(noteNum, _ledgerJournalTrans);
            this.fillNote(noteNum, _ledgerJournalTrans);

            if (_ledgerJournalTrans.PaymReference || _ledgerJournalTrans.BankPromissoryNoteNum)
            {
                _ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
                _ledgerJournalTrans.update();
                while select firstonly crossCompany specTrans
                    where specTrans.SpecTableId == _ledgerJournalTrans.TableId
                       && specTrans.SpecRecId   == _ledgerJournalTrans.RecId
                       && specTrans.SpecCompany == _ledgerJournalTrans.company()
                       && specTrans.RefTableId  == tableNum(VendTransOpen)
                {
                    changecompany(specTrans.SpecCompany)
                    {
                        // Set to null in case the company context changes
                        vendPromissoryNoteJour = null;

                        while select firstonly forupdate vendPromissoryNoteJour
                        where   vendPromissoryNoteJour.PromissoryNoteId == specTrans.vendTrans().PromissoryNoteID ||
                                vendPromissoryNoteJour.PromissoryNoteId == _ledgerJournalTrans.NegInstId
                        {
                            vendPromissoryNoteJour.DocumentNum  = _ledgerJournalTrans.BankPromissoryNoteNum;
                            vendPromissoryNoteJour.DocumentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            vendPromissoryNoteJour.update();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <returns>
    ///    A container storing the data to be persisted by <c>SysLastValues</c>.
    /// </returns>
    /// <remarks>
    ///    The pack and unpack pattern does not have provisions for supporting different serialization and
    ///    <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    ///    <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    ///    <c>RunBaseBatch</c> class. Derivative classes also implement this method so that an entire object
    ///    can be packed for <c>SysLastValues</c>.
    /// </remarks>
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion,#SysLastValuesList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    public void printDocument()
    {
        if (tmpBankPromissoryNotePrintout)
        {
            Args args = new Args();
            args.caller(this);

            switch (tmpBankPromissoryNotePrintout.NoteFormType)
            {
                case BankPromissoryNoteFormType::ESStyle :
                    new MenuFunction(menuitemOutputStr(BankPromissoryNote_ES), MenuItemType::Output).run(args);
                    break;

                case BankPromissoryNoteFormType::FRStyle :
                    new MenuFunction(menuitemOutputStr(BankPromissoryNote_FR), MenuItemType::Output).run(args);
                    break;

                default :
                    throw error("@SYS26828");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPaymAdvice</Name>
				<Source><![CDATA[
    public void printPaymAdvice()
    {
        Args args = new Args();

        if (BankPaymAdviceReportV2FeatureExposure::isEnabled())
        {
            BankPaymAdviceDefaultParameters defaultParameters = BankPaymAdviceDefaultParameters::newForPaymAdvicePrintRun(
                this.getPaymRecords(),
                new SrsPrintDestinationSettings(this.getPrinterSettings(PaymDocumentType::PaymAdvice)),
                printPaymAdvicePrintMgmt);

            args.parmObject(defaultParameters);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceVendV2), MenuItemType::Output).run(args);
        }
        else
        {
            args.caller(this);
            args.parmObject(this.getPaymRecords());
            args.parmEnumType(enumNum(NoYes));
            args.parmEnum(printPaymAdvicePrintMgmt);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceVend), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Persists the pertinent values to the <c>SysLastValue</c> table.
    /// </summary>
    /// <remarks>
    ///    <c>#CurrentList</c> and <c>#SysLastValues</c> lists are different, and require that we have
    ///    specialized logic for the <c>SysLastValues</c> implementation.
    /// </remarks>
    public void saveLast()
    {
        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.

        // Persist the pertinent values to the SysLastValue table.
        xSysLastValue::putValue(this.packSysLastValues(),
                                this.lastValueDataAreaId(),
                                this.lastValueUserId(),
                                this.lastValueType(),
                                this.lastValueElementName(),
                                this.lastValueDesignName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBlankNote</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setBlankNote(LedgerJournalTrans _ledgerJournalTrans,
                      BankNegInstQty     _blankNotes = 1)
    {
        while (_blankNotes > 0)
        {
            BankPromissoryNoteTable::setPromissoryNoteDocStatus(accountId,
                                                                this.noteNum(),
                                                                BankPromissoryNoteStatus::NotPrinted,
                                                                _ledgerJournalTrans.TransDate,
                                                                '',
                                                                '',
                                                                _ledgerJournalTrans.CurrencyCode,
                                                                0);
            _blankNotes--;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextNoteNum_ES</Name>
				<Source><![CDATA[
    private BankPromissoryNoteNum setNextNoteNum_ES()
    {
        BankPromissoryNoteTable    bankPromissoryNoteTable;

        select firstonly bankPromissoryNoteTable
            index AccountNoteIdx
            where bankPromissoryNoteTable.BankAccountID     == accountId
               && bankPromissoryNoteTable.PromissoryNoteNum != nextNoteNum_ES
               && bankPromissoryNoteTable.DocumentStatus    == BankPromissoryNoteStatus::Created;

        if (!bankPromissoryNoteTable)
        {
            throw error(strFmt("@SYS74038", accountId));
        }
        else
        {
            nextNoteNum_ES = bankPromissoryNoteTable.PromissoryNoteNum;
        }

        return nextNoteNum_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNoteNum</Name>
				<Source><![CDATA[
    private void setNoteNum()
    {
        BankPromissoryNoteTable bankPromissoryNoteTable;

        if (isFormat_ES && noteNumMethod == BankPromissoryNoteNumMethod::Fixed)
        {
            this.setNoteNum_ES();
        }
        else
        {
            switch (noteNumMethod)
            {
                case BankPromissoryNoteNumMethod::Free :
                    select maxof(PromissoryNoteNum) from bankPromissoryNoteTable
                        where bankPromissoryNoteTable.BankAccountID == accountId;

                    firstNoteNum = NumberSeq::numRemoveFormat(bankPromissoryNoteTable.PromissoryNoteNum, '') + 1;
                    break;

                case BankPromissoryNoteNumMethod::Fixed :
                    firstNoteNum = NumberSeq::numRemoveFormat(BankPromissoryNoteTable::findNextFree(accountId), '');
                    if (! firstNoteNum)
                    {
                        throw error(strFmt("@SYS74038", accountId));
                    }
                    break;

                default :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNoteNum_ES</Name>
				<Source><![CDATA[
    private void setNoteNum_ES()
    {
        nextNoteNum_ES = BankPromissoryNoteTable::findNextFree(accountId);
        if (!nextNoteNum_ES)
        {
            throw error(strFmt("@SYS74038", accountId));
        }
        firstNoteNum_ES = nextNoteNum_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentRef</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setPaymentRef(BankPromissoryNoteNum    _bankPromissoryNoteNum,
                       LedgerJournalTrans       _ledgerJournalTrans)
    {
        if (!_ledgerJournalTrans.PaymReference)
        {
            _ledgerJournalTrans.PaymReference           = _bankPromissoryNoteNum;
        }

        _ledgerJournalTrans.BankPromissoryNoteNum   = _bankPromissoryNoteNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>slipTxtLines</Name>
				<Source><![CDATA[
    private Counter slipTxtLines(BankPromissoryNoteLayout _bankPromissoryNoteLayout)
    {
        Counter                     slipLineMax;
        BankPromissoryNoteLength    noteDocMm;
        BankPromissoryNoteLength    slipTextAreaMm;
        BankPromissoryNoteLength    bottomMargin;

        switch (_bankPromissoryNoteLayout.NoteFormType)
        {
            case BankPromissoryNoteFormType::ESStyle :
                noteDocMm = 100;
                break;

            case BankPromissoryNoteFormType::FRStyle :
                noteDocMm = 100;
                break;

            default :
                throw  error("@SYS74057");
        }

        BankPromissoryNoteLength paperLength         = this.convertToMm(_bankPromissoryNoteLayout.PaperSize, _bankPromissoryNoteLayout.PaperSizeUnit) - bottomMargin;
        BankPromissoryNoteLength noteStartPosition   = this.convertToMm(_bankPromissoryNoteLayout.NoteStartPosition, _bankPromissoryNoteLayout.NotePositionUnit);
        bottomMargin        = 7.0;

        numOfSlips          = _bankPromissoryNoteLayout.NoteSlipCopies;
        BankPromissoryNoteLength areaAboveNote       = noteStartPosition;
        BankPromissoryNoteLength areaBelowNote       = paperLength - noteDocMm - noteStartPosition;

        if (paperLength + bottomMargin < noteDocMm)
        {
            throw error(strFmt("@SYS74058", (noteDocMm + bottomMargin)));
        }

        if (areaBelowNote < 0)
        {
            throw error("@SYS74059");
        }

        if (numOfSlips > 0)
        {
            numOfSlips = min(numOfSlips, 2);

            if (numOfSlips == 1)
            {
                if (areaAboveNote > areaBelowNote)
                {
                    slipTop1        = 0;
                    slipTextAreaMm  = areaAboveNote - 20;
                }
                else
                {
                    slipTop1        = any2int((noteStartPosition + noteDocMm + 20) * 100);
                    slipTextAreaMm  = areaBelowNote - 20;
                }
            }

            if (numOfSlips == 2)
            {
                if (areaAboveNote > 20 && areaBelowNote > 20)      // Note in the middle
                {
                    slipTextAreaMm  = min(areaAboveNote, areaBelowNote) - 20;
                    slipTop1        = 0;
                    slipTop2        = any2int((noteStartPosition + noteDocMm + 10) * 100);
                }
                else
                {
                    slipTextAreaMm = slipTextAreaMm / 2;
                    if (areaAboveNote > areaBelowNote)    // both slips on top of note
                    {
                        slipTextAreaMm = (areaAboveNote - 20) / 2;
                        slipTop1 = 0;
                        slipTop2 = any2int((slipTextAreaMm + 10) * 100);
                    }
                    else  // both slips below note
                    {
                        slipTextAreaMm = (areaBelowNote - 20) / 2;
                        slipTop1 = any2int((noteStartPosition + noteDocMm + 10) * 100);
                        slipTop2 = any2int((noteStartPosition + noteDocMm + slipTextAreaMm + 20) * 100);
                    }
                }
            }

            slipLineMax = any2int(slipTextAreaMm * 0.24);

            if (slipLineMax <= 0)
            {
                throw error (strFmt("@SYS56616", numOfSlips));
            }
        }

        slipHeight  = any2int(slipTextAreaMm * 100);
        noteTop     = any2int((noteStartPosition * 100));

        return slipLineMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpBankPromissoryNotePrintout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the promissory notes to be printed.
    /// </summary>
    /// <returns>
    ///     A <c>TmpBankPromissoryNotePrintout</c> instance.
    /// </returns>
    public TmpBankPromissoryNotePrintout tmpBankPromissoryNotePrintout()
    {
        return tmpBankPromissoryNotePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         isSuccessful;
        Version         version = RunBase::getVersion(_packedClass);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                isSuccessful = super(base);

                break;
            case #Version4:
                [version, #CurrentListV4, base] = _packedClass;
                isSuccessful = super(base);

                break;
            default :
                return false;
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <param name="_packedValues">
    ///    The values stored by the <c>SysLastValues</c> framework that are to be unpacked.
    /// </param>
    /// <remarks>
    ///    The pack and unpack pattern does not have provisions for supporting different serialization and
    ///    <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    ///    <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    ///    <c>RunBaseBatch</c> class. Derivative classes also implement this method so that an entire object
    ///    can be unpacked for <c>SysLastValues</c>.
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        container baseClassPackedValues;
        Version version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList, baseClassPackedValues] = _packedValues;
                super(baseClassPackedValues);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the export format criteria to be applied to the <c>QueryRun</c> object supplied to the
    /// class.
    /// </summary>
    protected void updateQuery()
    {
        queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).findRange(fieldNum(LedgerJournalTrans, JournalNum)).value(queryValue(ledgerJournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the state of internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object from which this method is called; the default value is null.
    /// </param>
    /// <returns>
    /// true if the internal variables are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method must validate the state of the internal variables. It is called before closing the
    /// dialog, and should be called in the <c>run</c> method. It must only contain code that adds warnings
    /// to the infolog. throw is not allowed within this method. The method should generally return errors
    /// using the <c>Global::CheckFailed</c> method. Export formats that are designed to handle only one
    /// method of payment per payment media must call the <c>checkUniquePaymMode</c> method.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!accountId)
        {
            ret = checkFailed("@SYS28489");
        }
        else
        {
            ret = BankAccountTable::checkIsActive(accountId);
        }

        if (!BankPromissoryNoteLayout::find(accountId))
        {
            ret = checkFailed(strFmt("@SYS74041",accountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return new VendPromissoryNoteDocument().interfaceName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>