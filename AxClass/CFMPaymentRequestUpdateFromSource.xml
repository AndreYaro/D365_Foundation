<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestUpdateFromSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class updates payment request from source
/// </summary>
public abstract class CFMPaymentRequestUpdateFromSource extends RunBase
{
    CFMPaymentRequestTable paymentRequestTable;
    CFMParameters cfmParameters;
    AmountCur paymentRequestAdjust;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMPaymentRequestUpdateFromSource</c> class.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// The payment request.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMPaymentRequestUpdateFromSource</c> class.
    /// </returns>
    public static CFMPaymentRequestUpdateFromSource construct(CFMPaymentRequestTable _paymentRequestTable)
    {
        if (!_paymentRequestTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CFMPaymentRequestSourceTypeAttribute extensionAttribute = new CFMPaymentRequestSourceTypeAttribute(_paymentRequestTable.SourceType);
        CFMPaymentRequestUpdateFromSource paymentRequestUpdateFromSource = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMPaymentRequestUpdateFromSource), extensionAttribute);

        if (!paymentRequestUpdateFromSource)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        paymentRequestUpdateFromSource.initialize(_paymentRequestTable);

        return paymentRequestUpdateFromSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether payment request is allowed to be updated from source.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// The payment request.
    /// </param>
    /// <returns>
    /// True if update is allowed; otherwise False.
    /// </returns>
    public static boolean isUpdateAllowed(CFMPaymentRequestTable _paymentRequestTable)
    {
        boolean ret;

        if (_paymentRequestTable.Outdated &&
            (_paymentRequestTable.Status == CFMPaymentRequestStatus::Confirmed ||
            _paymentRequestTable.Status == CFMPaymentRequestStatus::Scheduled) &&
            !_paymentRequestTable.unpostedJournalExist())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args || !_args.record() || _args.dataset() != tableNum(CFMPaymentRequestTable))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CFMPaymentRequestUpdateFromSource paymentRequestUpdateFromSource = CFMPaymentRequestUpdateFromSource::construct(_args.record());

        if (paymentRequestUpdateFromSource)
        {
            paymentRequestUpdateFromSource.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLineAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts payment request line amounts according to current source amount.
    /// </summary>
    protected void adjustLineAmounts()
    {
        CFMPaymentRequestLine  paymentRequestLine;
        AmountCur lineAmountSum;
        AmountCur lineAdjustSum;

        ttsBegin;

        AmountCur paymentRequestAmount = paymentRequestTable.amountCurBalance();
        paymentRequestAdjust  = abs(this.sourceAmount()) - paymentRequestAmount;

        while select forUpdate paymentRequestLine
            where paymentRequestLine.PaymentRequestTable == paymentRequestTable.RecId
        {
            AmountCur lineAmount = paymentRequestLine.BalanceAmountCur;
            AmountCur lineAdjust = CurrencyExchangeHelper::amount(paymentRequestAdjust * ( lineAmount + lineAmountSum) / paymentRequestAmount - lineAdjustSum, paymentRequestTable.CurrencyCode);

            paymentRequestLine.BalanceAmountCur += lineAdjust;
            paymentRequestLine.update();

            lineAmountSum += lineAmount;
            lineAdjustSum += lineAdjust;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels payment request workflow
    /// </summary>
    protected void cancelWorkflow()
    {
        if (paymentRequestTable.isWorkFlowResubmitRequired(paymentRequestAdjust))
        {
            CFMPaymentRequestWorkflowManager::cancelWorkflow(paymentRequestTable, "@SYS303429");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearOutdatedSignAndUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>Outdated</c> sign of the payment request.
    /// </summary>
    protected void clearOutdatedSignAndUpdate()
    {
        paymentRequestTable.Outdated = false;
        paymentRequestTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>completePaymentRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes payment request if necessary.
    /// </summary>
    protected void completePaymentRequest()
    {
        if (!paymentRequestTable.SourceRefRecId)
        {
            // No sourceRefRecId means that source open transaction was deleted due to full settlement - need to update payment date and complete PR
            paymentRequestTable.PaymentDate = this.sourceLastPaymentDate();
            paymentRequestTable.Status = CFMPaymentRequestStatus::Completed;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance from the payment request source.
    /// </summary>
    protected abstract void initFromSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance from payment request.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// The payment request.
    /// </param>
    protected void initialize(CFMPaymentRequestTable _paymentRequestTable)
    {
        paymentRequestTable = _paymentRequestTable;
        cfmParameters = CFMParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resubmitWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resubmits payment request workflow.
    /// </summary>
    protected void resubmitWorkflow()
    {
        CFMPaymentRequestWorkflowManager::submitWorkflow(paymentRequestTable, strFmt("@PaymRequestAutoSubmitt2Workflow", paymentRequestTable.PaymentRequestId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs payment request update from source.
    /// </summary>
    public void run()
    {
        if (CFMPaymentRequestUpdateFromSource::isUpdateAllowed(paymentRequestTable))
        {
            this.updatePaymentRequest();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment request source amount.
    /// </summary>
    /// <returns>
    /// The payment request source amount.
    /// </returns>
    protected abstract AmountCur sourceAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLastPaymentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the latest date of payments settled with payment request source.
    /// </summary>
    /// <returns>
    /// The latest date of payments settled with payment request source.
    /// </returns>
    protected abstract TransDate sourceLastPaymentDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates payment request discounts according to source cash discounts.
    /// </summary>
    protected void updateCashDiscounts()
    {
        CFMPaymentRequestCashDiscCreate::createPaymRequestCashDiscounts(paymentRequestTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates payment request from source.
    /// </summary>
    protected void updatePaymentRequest()
    {
        ttsBegin;

        changeCompany(paymentRequestTable.SourceDataAreaId)
        {
            paymentRequestTable.selectForUpdate(true);

            this.initFromSource();
            this.adjustLineAmounts();
            this.updateCashDiscounts();
            this.completePaymentRequest();
            this.cancelWorkflow();
            this.clearOutdatedSignAndUpdate();
            this.resubmitWorkflow();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>