<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceSelect</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjInvoiceSelect
{
    Query                           query;
    Query                           queryUsed;
    QueryRun                        queryRun;
    QueryBuildDataSource            queryDataSourceProposal;
    QueryBuildRange                 queryBuildRangeLineProperty;
    Num                             parmId;
    ProjProposalJour                projProposalJour;
    boolean                         isInInvoicingWorkflow;
    boolean                         lateSelection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Num _parmId)
    {
        parmId = _parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInInvoicingWorkflow</Name>
				<Source><![CDATA[
    public boolean parmIsInInvoicingWorkflow(boolean _isInInvoicingWorkflow = isInInvoicingWorkflow)
    {
        isInInvoicingWorkflow = _isInInvoicingWorkflow;

        return isInInvoicingWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLateSelection</Name>
				<Source><![CDATA[
    public boolean parmLateSelection(boolean _lateSelection = lateSelection)
    {
        lateSelection = _lateSelection;

        return lateSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryUsed</Name>
				<Source><![CDATA[
    public Query parmQueryUsed(Query _queryUsed = queryUsed)
    {
        queryUsed = _queryUsed;

        return queryUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjectProposalJournalQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query from project proposal journal records.
    /// </summary>
    protected void buildProjectProposalJournalQuery()
    {
        query = new Query();

        queryDataSourceProposal = query.addDataSource(tableNum(ProjProposalJour));

        if (ProjParameters::find().EnableInvoiceProposalWorkflow)
        {
            queryDataSourceProposal.addRange(fieldNum(ProjProposalJour, LineProperty)).value(queryValue(ProjLinePropertyCode::Approved));
        }
        else
        {
            queryDataSourceProposal.addRange(fieldNum(ProjProposalJour, LineProperty)).value(queryValue(ProjLinePropertyCode::Approved));
            queryDataSourceProposal.addRange(fieldNum(ProjProposalJour, LineProperty)).value(queryValue(ProjLinePropertyCode::Open));
        }

        queryDataSourceProposal.findRange(fieldNum(ProjProposalJour, LineProperty)).status(1);
       
        ProjInvoiceSelect::buildProjProposalLinesUnionQuery(queryDataSourceProposal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjProposalLinesUnionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Query that filters out invoice proposal without any lines when proj ops is enabled.
    /// </summary>
    /// <param name = " _qbdsProjProposalJour">Instance of <c>ProjProposalJour<c> query build data source.</param>
    public static void buildProjProposalLinesUnionQuery(QueryBuildDataSource _qbdsProjProposalJour)
    {
        if (_qbdsProjProposalJour && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsProjProposalLinesUnion = _qbdsProjProposalJour.addDataSource(tableNum(ProjProposalLinesUnionView));
            qbdsProjProposalLinesUnion.joinMode(JoinMode::ExistsJoin);
            qbdsProjProposalLinesUnion.relations(false);
            qbdsProjProposalLinesUnion.fetchMode(QueryFetchMode::One2One);
            qbdsProjProposalLinesUnion.addLink(fieldNum(ProjProposalJour, ProposalId), fieldNum(ProjProposalLinesUnionView, ProposalId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public boolean run()
    {
        #OCCRetryCount
        
        this.buildProjectProposalJournalQuery();

        queryRun = new QueryRun(query);

        if (this.mustShowQueryPrompt() && !queryRun.prompt())
        {
            return false;
        }

        if (this.parmLateSelection())
        {
            this.parmQueryUsed(queryRun.query());
            return true;
        }

        try
        {
            ttsbegin;
            
            this.createProjectInvoiceParameters();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectInvoiceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates project invoice parameter table records.
    /// </summary>
    protected void createProjectInvoiceParameters()
    {
        ProjInvoiceParmTable projInvoiceParmTable;
        boolean skipRecord;
        
        queryRun.reset();

        while (queryRun.next())
        {
            projProposalJour = queryRun.get(tableNum(ProjProposalJour));
            skipRecord = false;

            if (ProjParameters::find().EnableInvoiceProposalWorkflow)
            {
                if (isInInvoicingWorkflow)
                {
                    skipRecord = !projProposalJour.isPostingUsingWorkflow();
                }
                else
                {
                    skipRecord = projProposalJour.isPostingUsingWorkflow();
                }
            }

            if (!skipRecord)
            {
                projInvoiceParmTable.clear();
                projInvoiceParmTable.initFromProjProposalJour(projProposalJour);
                projInvoiceParmTable.ParmId             = parmId;
                projInvoiceParmTable.ParmJobStatus      = ParmJobStatus::Waiting;
                projInvoiceParmTable.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowQueryPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to continue show prompt.
    /// </summary>
    /// <returns>
    /// true if must show prompt; otherwise, false.
    /// </returns>
    protected boolean mustShowQueryPrompt()
    { 
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>