<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KeyVaultClientHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper for the <c>KeyVaultClient</c> class.
/// </summary>
public static class KeyVaultClientHelper
{
    private const str Owner = 'KeyVaultClientHelper';
    private const str CacheName = 'SecretSettingsProvider';
    private static SysGlobalCache globalCache = classfactory.globalCache();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>KeyVaultClient</c> basrd on provided propertis.
    /// </summary>
    /// <param name = "_keyVaultUrl">The key vault URL.</param>
    /// <param name = "_keyVaultClientId">The client ID of the AD Application associated to a key vault for use in certificate based authentication.</param>
    /// <param name = "_keyVaultSecretKey">The secret key associated to a AD application used for authenticating to a key vault</param>
    /// <param name = "_throwIfSecretNotFound">Indicates to throw an exception if the secret is not found.</param>
    /// <param name = "_enableCache">Indicates to enable caching of values returned from key vault.</param>
    /// <returns>The <c>KeyVaultClient</c> object.</returns>
    public static KeyVaultClient createClient(
        KeyVaultDefaultUrl _keyVaultUrl,
        KeyVaultAppClientId _keyVaultClientId,
        KeyVaultSecretKey _keyVaultSecretKey,
        boolean _throwIfSecretNotFound = false,
        boolean _enableCache = true)
    {
        KeyVaultPropertyContract contract = new KeyVaultPropertyContract();
        contract.parmThrowIfSecretNotFound(_throwIfSecretNotFound);
        contract.parmArraySeperator(System.Environment::NewLine);
        contract.parmNoCertificateInstall(true);

        contract.parmKeyVaultUrl(_keyVaultUrl);
        contract.parmKeyVaultInteractiveClientId(_keyVaultClientId);
        contract.parmKeyVaultClientSecretKey(_keyVaultSecretKey);

        if (_enableCache)
        {
            contract.parmEnableCache(true);
            contract.parmCacheName(cacheName);
        }

        return KeyVaultClient::createFromDataContract(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrCreateClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets from cahe or creates the <c>KeyVaultClient</c> based on provided propertis.
    /// </summary>
    /// <param name = "_keyVaultUrl">The key vault URL.</param>
    /// <param name = "_keyVaultClientId">The client ID of the AD Application associated to a key vault for use in certificate based authentication.</param>
    /// <param name = "_keyVaultSecretKey">The secret key associated to a AD application used for authenticating to a key vault</param>
    /// <param name = "_throwIfSecretNotFound">Indicates to throw an exception if the secret is not found.</param>
    /// <param name = "_enableCache">Indicates to enable caching of values returned from key vault.</param>
    /// <param name = "_cacheRef">Cache identificator.</param>
    /// <returns>The <c>KeyVaultClient</c> object.</returns>
    [Hookable(false)]
    public static KeyVaultClient getOrCreateClient(
        KeyVaultDefaultUrl _keyVaultUrl,
        KeyVaultAppClientId _keyVaultClientId,
        KeyVaultSecretKey _keyVaultSecretKey,
        boolean _throwIfSecretNotFound = false,
        boolean _enableCache = true,
        container _cacheRef = conNull())
    {
        KeyVaultClient keyVaultClient;

        str clientCacheName = _keyVaultUrl + (prmIsDefault(_cacheRef) ? '' : any2Str(conPeek(_cacheRef, 2)));

        if (FeatureStateProvider::isFeatureEnabled(KeyVaultCacheFeature::instance()))
        {
            keyVaultClient = KeyVaultClientHelper::getClientFromCache(clientCacheName);
        }

        if (!keyVaultClient)
        {
            keyVaultClient = KeyVaultClientHelper::createClient(
                _keyVaultUrl,
                _keyVaultClientId,
                _keyVaultSecretKey,
                _throwIfSecretNotFound,
                _enableCache);
            keyVaultClient.parmCacheRef(_cacheRef);

            if (FeatureStateProvider::isFeatureEnabled(KeyVaultCacheFeature::instance()))
            {
                globalCache.set(Owner, clientCacheName, keyVaultClient);
            }
        }

        return keyVaultClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCachedKeyVaultClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes <c>>KeyVaultClient</c> object from cache.
    /// </summary>
    /// <param name = "_keyVaultUrl">
    /// Url of key vault client.
    /// </param>
    [Hookable(false)]
    public static void removeCachedKeyVaultClient(KeyVaultDefaultUrl _keyVaultUrl)
    {
        KeyVaultClient keyVaultClient = KeyVaultClientHelper::getClientFromCache(_keyVaultUrl);

        if (keyVaultClient)
        {
            globalCache.remove(Owner, _keyVaultUrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientFromCache</Name>
				<Source><![CDATA[
    private static KeyVaultClient getClientFromCache(KeyVaultDefaultUrl _keyVaultUrl)
    {
        var keyVaultClient = KeyVaultClientHelper::globalCache.get(Owner, _keyVaultUrl);
        return keyVaultClient is KeyVaultClient ? keyVaultClient : null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>