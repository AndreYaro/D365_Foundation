<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UnifiedPricingSeedDataGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class UnifiedPricingSeedDataGenerator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        UnifiedPricingSeedDataGenerator::initializeIfNeeded();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeIfNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a few entities when the feature is enabled.
    /// </summary>
    internal static void initializeIfNeeded()
    {
        // There will be multiple steps in a sinle tts.
        // - Add <c>PriceAttributeDefinition</c>.
        // - Add <c>PriceComponentCode</c>.
        // - Add <c>PriceComponentCodeAttribute</c>.
        // - Add <c>PriceTree</c>.
        // - Add <c>PriceComponentCodeSetup</c>.
        // - etc.
       
        ttsbegin;

        if (!UnifiedPricingSeedDataGenerator::isInitialized())
        {
            UnifiedPricingSeedDataGenerator::initPriceComponentCodeSetup();

            UnifiedPricingSeedDataGenerator::initPriceAttributeDefinition();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInitialized</Name>
				<Source><![CDATA[
    private static boolean isInitialized()
    {
        PriceAttributeDefinition definition;
        
        select firstonly RecId from definition;

        return definition.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceComponentCodeSetup</Name>
				<Source><![CDATA[
    private static void initPriceComponentCodeSetup()
    {
        PriceTree tree = PriceTree::findOrCreateDefault();

        container priceComponents = [
            PriceComponent::BasePrice,
            PriceComponent::SalesTradeAgreement,
            PriceComponent::SalesAgreement,
            PriceComponent::PriceAdjustment,
            PriceComponent::ProductDiscount,
            PriceComponent::AutoCharge,
            PriceComponent::ShippingDiscount,
            PriceComponent::TenderDiscount,
            PriceComponent::Rebate
        ];

        ttsbegin;
        
        PriceComponentCodeSetup componentCodeSetup;
        delete_from componentCodeSetup where componentCodeSetup.PriceTreeName == tree.Name;

        for (int i = 1, len = conLen(priceComponents); i <= len; i++)
        {
            PriceComponent component = conPeek(priceComponents, i);

            PriceComponentCode defaultComponentCode = PriceComponentCode::findOrCreateDefault(conPeek(priceComponents, i));

            componentCodeSetup.clear();
            componentCodeSetup.PriceTreeName = tree.Name;
            componentCodeSetup.PriceComponent = component;
            componentCodeSetup.PriceComponentCodeName = defaultComponentCode.Name;
            componentCodeSetup.CalculationSequence = i;
            componentCodeSetup.insert();
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceAttributeDefinition</Name>
				<Source><![CDATA[
    private static void initPriceAttributeDefinition()
    {
        container priceGroupDefaultAttributes = conNull();
        container productDiscountDefualtAttributes = conNull();

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            priceGroupDefaultAttributes += [PricePredefinedField::RetailChannel, PricePredefinedField::RetailAffiliation, PricePredefinedField::RetailLoyaltyTier];
        }

        productDiscountDefualtAttributes += [
            PricePredefinedField::ProductCategory, 
            PricePredefinedField::Product, 
            PricePredefinedField::ProductVariant,
            PricePredefinedField::Catalog,
            PricePredefinedField::Size,
            PricePredefinedField::Color,
            PricePredefinedField::Style,
            PricePredefinedField::Configuration
        ];

        Map defaultAttributes = new Map(Types::Enum, Types::Container);
        defaultAttributes.insert(PriceComponent::PriceGroup, priceGroupDefaultAttributes);
        defaultAttributes.insert(PriceComponent::ProductDiscount, productDiscountDefualtAttributes);
        
        ttsbegin;

        PriceAttributeDefinition definition;
        PriceComponentCodeAttribute componentCodeAttribute;
        delete_from definition;

        MapEnumerator enumerator = new MapEnumerator(defaultAttributes);

        while (enumerator.moveNext())
        {
            PriceComponent priceComponent = enumerator.currentKey();
            container attributes = enumerator.currentValue();

            for (int i = 1, len = conLen(attributes); i <= len; i++)
            {
                PricePredefinedField field = conPeek(attributes, i);

                definition.clear();
                definition.PriceComponent = priceComponent;
                definition.AttributeType = PriceAttributeType::Predefined;
                definition.PredefinedField = field;
                definition.Name = enum2Symbol(enumNum(PricePredefinedField), field);
                definition.AttributeSource = definition.attributeSource();
                definition.DisplayOrder = PriceAttributeDefinition::nextDisplayOrder(priceComponent);
                definition.Status = PriceAttributeStatus::Added;
                definition.insert();
            }

            PriceAttributeDefinition::publish(priceComponent);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>