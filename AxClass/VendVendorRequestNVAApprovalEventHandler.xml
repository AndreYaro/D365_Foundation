<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorRequestNVAApprovalEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendVendorRequestNVAApprovalEventHandler</c> class handles the event for the vendor request approval
/// workflow element.
/// </summary>
public class VendVendorRequestNVAApprovalEventHandler implements
    WorkflowElementStartedEventHandler,
    WorkflowElementCanceledEventHandler,
    WorkflowElementDeniedEventHandler,
    WorkflowElementCompletedEventHandler,
    WorkflowElementReturnedEventHandler
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Cancels a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    A value that obtains the workflow context of the workflow item that fired the event.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequestManager::getVendorRequestWorkflowElementEvent(_workflowElementEventArgs);
        VendVendorRequestManager::construct(vendorRequest.RequestEntityType).updateRequestStateToWorkflowCanceled(vendorRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This event is fired when the requestor approves the approval workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when an approve action is applied to a workflow item.
    /// </remarks>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequestManager::getVendorRequestWorkflowElementEvent(_workflowElementEventArgs);
        VendVendorRequestManager::construct(vendorRequest.RequestEntityType).approveRequest(vendorRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This event is fired when the requestor rejects the approval workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that fired the event.
    /// </param>
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequestManager::getVendorRequestWorkflowElementEvent(_workflowElementEventArgs);
        VendVendorRequestManager::construct(vendorRequest.RequestEntityType).rejectRequest(vendorRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This event is fired when the requestor return the approval workflow item
    ///    and ask for more information or suggest change to the information.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that fired the event.
    /// </param>
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequestManager::getVendorRequestWorkflowElementEvent(_workflowElementEventArgs);
        VendVendorRequestManager::construct(vendorRequest.RequestEntityType).updateRequestStateToChangeRequested(vendorRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the workflow context of the workflow item that fired the event and sets the status to pending.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The <paramref name="_workflowElementEventArgs" /> parameter that is used to get the workflow
    ///    context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when a start event occurs for a workflow item.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequestManager::getVendorRequestWorkflowElementEvent(_workflowElementEventArgs);
        VendVendorRequestManager::construct(vendorRequest.RequestEntityType).updateRequestStateToPendingApproval(vendorRequest.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>