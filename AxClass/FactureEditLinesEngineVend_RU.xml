<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureEditLinesEngineVend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureEditLinesEngineVend_RU extends FactureEditLinesEngineCustVend_RU
{
    QueryBuildRange vendInvoiceGroupRange;
    QueryBuildRange vendPaymentGroupRange;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressDefaultSec</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddress addressDefaultSec()
    {
        LogisticsPostalAddress logisticsPostalAddress;
        PurchTable             purchTable;
        VendInvoiceJour        vendInvoiceJour;
        CustTable              custTable;

        if (buyerControl.text())
        {
            custTable = CustTable::find(buyerControl.text());
            logisticsPostalAddress = custTable.postalAddress();
        }

        if (! logisticsPostalAddress)
        {
            switch (sourceRecord.TableId)
            {
                case tablenum(PurchTable)     :
                    purchTable             = sourceRecord as PurchTable;
                    logisticsPostalAddress = purchTable.deliveryAddress();
                    break;

                case tablenum(VendInvoiceJour):
                    vendInvoiceJour        = sourceRecord as VendInvoiceJour;
                    logisticsPostalAddress = vendInvoiceJour.PurchId ? PurchTable::find(vendInvoiceJour.PurchId).deliveryAddress() : null;
                    break;
            }
        }

        if (!logisticsPostalAddress)
        {
            logisticsPostalAddress = LogisticsLocationEntity::findPostalAddress(CompanyInfo::find(), LogisticsLocationRoleType::Invoice);
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowedInventProfileTypes</Name>
				<Source><![CDATA[
    public Set allowedInventProfileTypes()
    {
        Set inventProfileTypeSet = super();

        inventProfileTypeSet.remove(InventProfileType_RU::CommissionPrincipalAgent);

        return inventProfileTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commContractPartnerType</Name>
				<Source><![CDATA[
    protected ModuleCustVend commContractPartnerType()
    {
        return ModuleCustVend::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commPartner</Name>
				<Source><![CDATA[
    public CustVendAC commPartner()
    {
        return buyerControl.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentControlOK</Name>
				<Source><![CDATA[
    protected boolean contragentControlOK()
    {
        return vendorControl.text() ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInit</Name>
				<Source><![CDATA[
    public void contragentInit()
    {
        if (sourceRecord)
        {
            super();
        }
        else
        {
            this.contragent((select firstonly AccountNum from vendTable order by AccountNum).AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInitDefault</Name>
				<Source><![CDATA[
    public void contragentInitDefault()
    {
        vendorControl.text(contragent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaChanged</Name>
				<Source><![CDATA[
    public void criteriaChanged(boolean _clear = true)
    {
        super(_clear);

        this.contragent(vendorControl.text());

        if (correctionTypeControl.selection() == FactureCorrectionType_RU::Revision || vatOnPaymentControl.value())
        {
            factureReportDateControl.dateValue(dateNull());
            this.maxInvoiceDate(factureDateControl.dateValue());
        }

        this.setVisibleControls();        
        
        vendInvoiceJourDS.executeQuery();
        vendInvoiceTransDS.executeQuery();
        markupDS.executeQuery();
        this.buildTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates invoice journal queryRun with vendPaymentGroup and vendInvoiceGroup values
    /// </summary>
    /// <param name="_jourDs">
    /// <c>FormDataSource</c> object to be updated
    /// </param>
    /// <returns>
    /// True if datasource changed successfully
    /// </returns>
    public boolean dsExecuteInvoiceJour(FormDataSource _jourDs)
    {
        boolean ret = super(_jourDs);

        if (ret && vendInvoiceGroupRange)
        {
            vendInvoiceGroupRange.value(vendInvoiceGroupControl.text());
        }

        if (ret && vendPaymentGroupRange)
        {
            vendPaymentGroupRange.value(vendPaymentGroupControl.text());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsExecuteMarkup</Name>
				<Source><![CDATA[
    public void dsExecuteMarkup()
    {
        MarkupTrans      markupCursor = markupDS.cursor();
        VendInvoiceJour  tJour        = vendInvoiceJourDS.cursor();
        VendInvoiceTrans tTrans;

        super();

        select markupCursor
            where   markupCursor.CustVendPosted_RU                         &&
                  ! markupCursor.ItemPosted_RU
        exists join tTrans
            where (
                   markupCursor.TransTableId  == tTrans.TableId            &&
                   markupCursor.TransRecId    == tTrans.RecId              &&
                   tTrans.PurchID             == tJour.PurchId             &&
                   tTrans.InvoiceId           == tJour.InvoiceId           &&
                   tTrans.InvoiceDate         == tJour.InvoiceDate         &&
                   tTrans.NumberSequenceGroup == tJour.NumberSequenceGroup &&
                   tTrans.InternalInvoiceId   == tJour.InternalInvoiceId
                  )
                  ||
                  (
                   markupCursor.TransTableId  == tJour.TableId             &&
                   markupCursor.TransRecId    == tJour.RecId
                  );

        markupDS.positionToRecord(markupCursor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsInitInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes ranges on invoice journal datasource
    /// </summary>
    public void dsInitInvoiceJour()
    {
        boolean invoiceGroupingEnabled = VendParameters::find().VendInvoiceGroupingEnable;
        boolean paymentGroupingEnabled = VendParameters::find().VendPaymentGroupingEnable;

        super();

        this.invoiceJourDatasource().object(fieldnum(VendInvoiceJour, VendInvoiceGroup)).visible(invoiceGroupingEnabled);
        this.invoiceJourDatasource().object(fieldnum(VendInvoiceJour, VendPaymentGroup)).visible(paymentGroupingEnabled);

        QueryBuildDataSource ds = this.invoiceJourDatasource().query().dataSourceTable(this.invoiceJourDatasource().table());

        if (invoiceGroupingEnabled)
        {
            vendInvoiceGroupRange = findOrCreateRange_W(ds, fieldnum(VendInvoiceJour, VendInvoiceGroup));
            vendInvoiceGroupRange.status(RangeStatus::Hidden);
        }
        if (paymentGroupingEnabled)
        {
            vendPaymentGroupRange = findOrCreateRange_W(ds, fieldnum(VendInvoiceJour, VendPaymentGroup));
            vendPaymentGroupRange.status(RangeStatus::Hidden);
        }

        if (dsCommContract)
        {
            findOrCreateRange_W(
                dsCommContract,
                fieldNum(AgreementHeaderExt_RU, AgencyAgreement),
                queryValue(AgencyAgreement_RU::SaleCommission));
        }

        commJourAccountRange = dsCommExistsJour.addRange(fieldNum(CommReportTransItem_RU, CustAccount));
        commJourAccountRange.status(RangeStatus::Hidden);

        commTransAccountRange = dsCommReportTrans.addRange(fieldNum(CommReportTransItem_RU, CustAccount));
        commTransAccountRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscExistsFacture</Name>
				<Source><![CDATA[
    protected boolean endDiscExistsFacture(Common _jour)
    {
        VendInvoiceJour localVendInvoiceJour = _jour as VendInvoiceJour;
        ;

        return FactureTrans_RU::existExtraLines(FactureModule_RU::Vend,
                                                localVendInvoiceJour.PurchId,
                                                localVendInvoiceJour.InvoiceId,
                                                localVendInvoiceJour.InvoiceDate,
                                                localVendInvoiceJour.NumberSequenceGroup,
                                                localVendInvoiceJour.InternalInvoiceId,
                                                FactureLineType_RU::InvoiceEndDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscGroup</Name>
				<Source><![CDATA[
    protected FormGroupControl endDiscGroup()
    {
        return vendEndDiscGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extFactureIdNumSeqCode</Name>
				<Source><![CDATA[
    public NumberSequenceCode extFactureIdNumSeqCode()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJourByTrans</Name>
				<Source><![CDATA[
    protected void findJourByTrans(Common _trans)
    {
        CustVendInvoiceTrans localCustVendInvoiceTrans = _trans;

        tmpJour = VendInvoiceJour::findFromVendInvoiceTrans(localCustVendInvoiceTrans.SalesPurchId_RU,
                                                            localCustVendInvoiceTrans.InvoiceNum,
                                                            localCustVendInvoiceTrans.InvoiceDate,
                                                            localCustVendInvoiceTrans.NumberSequenceGroupId_RU,
                                                            localCustVendInvoiceTrans.PurchInternalInvoiceId_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransByJour</Name>
				<Source><![CDATA[
    protected void findTransByJour(Common _jour)
    {
        VendInvoiceTrans        tmpInvoiceTrans;
        CommReportTransItem_RU  tmpReportTransItem;
        CustVendInvoiceJour     localCustVendInvoiceJour = _jour;

        if (dsCommReportTrans && dsCommReportTrans.enabled())
        {
            rslTmpTrans = new RecordSortedList(tableNum(VendInvoiceTrans));
            rslTmpTrans.sortOrder(fieldNum(VendInvoiceTrans, RecId),
                                  fieldNum(VendInvoiceTrans, RefCommReportTrans_RU));

            tmpReportTransItem = vendCommReportTransItemDS.getFirst();
            while (tmpReportTransItem)
            {
                tmpInvoiceTrans = VendInvoiceTrans::findRecId(tmpReportTransItem.RefVendInvoiceTrans);
                tmpInvoiceTrans.RefCommReportTrans_RU   = tmpReportTransItem.RecId;

                rslTmpTrans.ins(tmpInvoiceTrans);
                tmpReportTransItem = vendCommReportTransItemDS.getNext();
            }
        }
        else
        {
            rslTmpTrans = null;
            select tmpTrans
                where tmpTrans.SalesPurchId_RU           == localCustVendInvoiceJour.Num                   &&
                      tmpTrans.InvoiceNum                == localCustVendInvoiceJour.InvoiceId             &&
                      tmpTrans.InvoiceDate               == localCustVendInvoiceJour.InvoiceDate           &&
                      tmpTrans.NumberSequenceGroupId_RU  == localCustVendInvoiceJour.NumberSequenceGroupId &&
                      tmpTrans.PurchInternalInvoiceId_RU == localCustVendInvoiceJour.PurchInternalInvoiceId_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeTrans</Name>
				<Source><![CDATA[
    public IncludeInFacture_RU includeTrans(boolean _set, Common _trans, IncludeInFacture_RU _include)
    {
        IncludeInFacture_RU     ret;
        CustVendInvoiceTrans    invoiceTrans = _trans;
        CommReportTransItem_RU  tmpReportTransItem;

        if (_set && dsCommReportTrans && dsCommReportTrans.enabled())
        {
            tmpReportTransItem = vendCommReportTransItemDS.getFirst();
            while (tmpReportTransItem)
            {
                if (tmpReportTransItem.RefVendInvoiceTrans == _trans.RecId)
                {
                    invoiceTrans.RefCommReportTrans_RU = tmpReportTransItem.RecId;
                    ret = super(_set, invoiceTrans, _include);

                }
                tmpReportTransItem = vendCommReportTransItemDS.getNext();
            }
        }
        else
        {
            ret = super(_set, _trans, _include);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrect</Name>
				<Source><![CDATA[
    public void initCorrect()
    {
        correctControl.value(VendInvoiceJour::findRecId(sourceRecord.RecId).Correct_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes correction type field in <c>FactureEditLines_RU</c> form.
    /// </summary>
    public void initCorrectionType()
    {
        VendInvoiceJour callerVendInvoiceJour;

        switch (sourceRecord.TableId)
        {
            case tablenum(PurchTable)      :
                select firstonly callerVendInvoiceJour
                    where   callerVendInvoiceJour.PurchId == sourceRecord.(fieldnum(PurchTable, PurchId)) &&
                          ! callerVendInvoiceJour.FacturedFully_RU;
                break;

            case tablenum(VendInvoiceJour) :
                callerVendInvoiceJour = VendInvoiceJour::findRecId(sourceRecord.RecId);
                break;
        }

        correctionTypeControl.selection(callerVendInvoiceJour.CorrectionType_RU);
        this.refreshFactureExternalIdControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreditNote</Name>
				<Source><![CDATA[
    public void initCreditNote()
    {
        VendInvoiceJour callerVendInvoiceJour;

        switch (sourceRecord.TableId)
        {
            case tablenum(PurchTable)      :
                select firstonly callerVendInvoiceJour
                    where   callerVendInvoiceJour.PurchId == sourceRecord.(fieldnum(PurchTable, PurchId)) &&
                          ! callerVendInvoiceJour.FacturedFully_RU;
                break;

            case tablenum(VendInvoiceJour) :
                callerVendInvoiceJour = VendInvoiceJour::findRecId(sourceRecord.RecId);
                break;
        }

        creditNoteControl.value(callerVendInvoiceJour.creditNote());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventProfileType</Name>
				<Source><![CDATA[
    public void initInventProfileType()
    {
        InventProfileType_RU    inventProfileType;
        ;
        inventProfileType = VendInvoiceJour::findRecId(sourceRecord.RecId).InventProfileType_RU;
        if (inventProfileType == InventProfileType_RU::NotSpecified ||
            ! this.allowedInventProfileTypes().in(inventProfileType))
        {
            inventProfileType = InventProfileType_RU::General;
        }
        inventProfileTypeControl.selection(inventProfileType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProcessVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets access to <c>FormCheckBoxControl</c> control that reperesents Vat on payment value on the form.
    /// </summary>
    public void initProcessVAT()
    {
        processVATControl.enabled(! vatOnPaymentControl.value());

        if (vatOnPaymentControl.value())
        {
            processVATControl.value(NoYes::No);
        }
        else
        {
            processVATControl.value(PurchBookVATProcessParameters_RU::find(purchBookVATProcessParametersControl.value()).ProcessVAT);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVATOnPayment</Name>
				<Source><![CDATA[
    public void initVATOnPayment()
    {
        vatOnPaymentControl.value(VendInvoiceJour::findRecId(sourceRecord.RecId).vatOnPayment_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMarkup</Name>
				<Source><![CDATA[
    public void insertMarkup(MarkupTrans _trans,
                             NoYes       _updateJour = NoYes::No)
    {
        if (_trans.fullyFactured_RU())
            return;

        super(_trans, _updateJour);

        if (_updateJour)
        {
            switch (_trans.TransTableId)
            {
                case tablenum(VendInvoiceJour)  :
                    this.insertJourWithUpdate(VendInvoiceJour::findRecId(_trans.TransRecId));
                    break;
                case tablenum(VendInvoiceTrans) :
                    tmpTrans = VendInvoiceTrans::findRecId(_trans.TransRecId);

                    this.insertJourWithUpdate(VendInvoiceJour::findFromVendInvoiceTrans(tmpTrans.SalesPurchId_RU,
                                                                                        tmpTrans.InvoiceNum,
                                                                                        tmpTrans.InvoiceDate,
                                                                                        tmpTrans.NumberSequenceGroupId_RU,
                                                                                        tmpTrans.PurchInternalInvoiceId_RU));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourAccountField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourAccountField()
    {
        return fieldnum(VendInvoiceJour, InvoiceAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourAmountField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourAmountField()
    {
        return fieldnum(VendInvoiceJour, InvoiceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourCorrectField()
    {
        return fieldStr(VendInvoiceJour, Correct_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectFieldDS</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourCorrectFieldDS()
    {
        return vendInvoiceJourDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCorrectionTypeField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourCorrectionTypeField()
    {
        return fieldnum(VendInvoiceJour, CorrectionType_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourCurrencyField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourCurrencyField()
    {
        return fieldnum(VendInvoiceJour, CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourDatasource</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourDatasource()
    {
        return vendInvoiceJourDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourDateField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourDateField()
    {
        return fieldnum(VendInvoiceJour, InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourDefaultDimensionField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourDefaultDimensionField()
    {
        return fieldStr(VendInvoiceJour, DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourFacturedField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourFacturedField()
    {
        return fieldStr(VendInvoiceJour, FacturedFully_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourFacturedFieldDS</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourFacturedFieldDS()
    {
        return vendInvoiceJourDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourIdField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourIdField()
    {
        return fieldnum(VendInvoiceJour, InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventOwnerIdFieldDS</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourInventOwnerIdFieldDS()
    {
        return vendInvoiceJourDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventProfileTypeField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourInventProfileTypeField()
    {
        return fieldStr(VendInvoiceJour, InventProfileType_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourInventProfileTypeFieldDS</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourInventProfileTypeFieldDS()
    {
        return vendInvoiceJourDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourRecIdField</Name>
				<Source><![CDATA[
    protected fieldId invoiceJourRecIdField()
    {
        return fieldnum(VendInvoiceJour, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourVATOnPaymentField</Name>
				<Source><![CDATA[
    protected fieldName invoiceJourVATOnPaymentField()
    {
        return fieldStr(VendInvoiceJour, vatOnPayment_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJourVATOnPaymentFieldDS</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceJourVATOnPaymentFieldDS()
    {
        return vendInvoiceJourDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLinkFieldNum</Name>
				<Source><![CDATA[
    protected fieldId invoiceLinkFieldNum()
    {
        return fieldnum(VendInvoicePurchLink, OrigPurchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLinkTableNum</Name>
				<Source><![CDATA[
    protected tableId invoiceLinkTableNum()
    {
        return tablenum(VendInvoicePurchLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTransDatasource</Name>
				<Source><![CDATA[
    protected FormDataSource invoiceTransDatasource()
    {
        return vendInvoiceTransDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourTableId</Name>
				<Source><![CDATA[
    protected tableId jourTableId()
    {
        return tablenum(VendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendInvoiceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates lookup for VendInvoiceGroup control
    /// </summary>
    public void lookupVendInvoiceGroup()
    {
        SysTableLookup          lookup  = SysTableLookup::newParameters(tablenum(VendInvoiceJour), vendInvoiceGroupControl);
        Query                   query   = new Query();
        QueryBuildDataSource    ds      = query.addDataSource(tablenum(VendInvoiceJour));
        ds.addGroupByField(fieldnum(VendInvoiceJour, VendInvoiceGroup));
        ds.addRange(fieldnum(VendInvoiceJour, FacturedFully_RU)).value(queryValue(NoYes::No));
        ds.addRange(fieldnum(VendInvoiceJour, VendInvoiceGroup)).value(SysQuery::valueNot(''));
        ds.addRange(fieldnum(VendInvoiceJour, InvoiceAccount)).value(queryValue(this.contragent()));
        if (origSalesPurchId)
        {
            ds = ds.addDataSource(tablenum(VendInvoicePurchLink));
            ds.joinMode(JoinMode::ExistsJoin);
            ds.relations(true);
            ds.addRange(fieldnum(VendInvoicePurchLink, OrigPurchId)).value(queryValue(origSalesPurchId));
        }

        lookup.addLookupfield(fieldnum(VendInvoiceJour, VendInvoiceGroup));
        lookup.parmQuery(query);
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupVendPaymentGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates lookup for VendPaymentGroup control
    /// </summary>
    void lookupVendPaymentGroup()
    {
        SysTableLookup          lookup = SysTableLookup::newParameters(tablenum(VendPaymentGroupLookup), vendPaymentGroupControl);
        Query                   query  = new Query();
        QueryBuildDataSource    qbds   = query.addDataSource(tablenum(VendPaymentGroupLookup));

        lookup.addLookupfield(fieldnum(VendPaymentGroupLookup, VendPaymentGroup));

        qbds.addRange(fieldnum(VendPaymentGroupLookup, AccountNum)).value(contragent);

        lookup.parmQuery(query);

        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainDataSource</Name>
				<Source><![CDATA[
    protected FormDataSource mainDataSource()
    {
        return vendInvoiceJourDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun mainQueryRun()
    {
        return vendInvoiceJourDS.queryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offReportType</Name>
				<Source><![CDATA[
    protected OffReportType_RU offReportType()
    {
        return creditNoteControl.value()               ?
               OffReportType_RU::VendFactureCreditNote :
               OffReportType_RU::VendFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDS</Name>
				<Source><![CDATA[
    protected void researchDS()
    {
        ;
        FactureEditLinesEngine_RU::dsResearch(vendInvoiceTransDS);
        FactureEditLinesEngine_RU::dsResearch(markupDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffExistsFacture</Name>
				<Source><![CDATA[
    protected boolean roundOffExistsFacture(Common _jour)
    {
        VendInvoiceJour localVendInvoiceJour = _jour as VendInvoiceJour;
        ;

        return FactureTrans_RU::existExtraLines(FactureModule_RU::Vend,
                                                localVendInvoiceJour.PurchId,
                                                localVendInvoiceJour.InvoiceId,
                                                localVendInvoiceJour.InvoiceDate,
                                                localVendInvoiceJour.NumberSequenceGroup,
                                                localVendInvoiceJour.InternalInvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffGroup</Name>
				<Source><![CDATA[
    protected FormGroupControl roundOffGroup()
    {
        return vendRoundOffGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceRecord</Name>
				<Source><![CDATA[
    public void setSourceRecord(Common _sourceRecord)
    {
        super(_sourceRecord);

        if (_sourceRecord.TableId == tablenum(PurchTable))
        {
            origSalesPurchId = _sourceRecord.(fieldnum(PurchTable, PurchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleContragents</Name>
				<Source><![CDATA[
    public void setVisibleContragents()
    {
        customerControl.visible(false);
        vendorControl.visible(true);
        employeeControl.visible(false);
        factureCustomerControl.visible(false);
        factureCustomerControl.mandatory(false);
        factureVendorControl.visible(false);
        factureVendorControl.mandatory(false);
        sellerControl.visible(false);
        buyerControl.visible(true);

        taxCorrectionContragentTypeControl.visible(false);
        taxCorrectionContragentTypeControl.selection(FactureTaxCorrectionContragentType_RU::Vendor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    public void setVisibleControls()
    {
        super();

        factureExtIdNumSegGroupIdControl.visible(false);
        processVATGroupControl.visible(true);
        this.parmVendInvoiceGroupControl().visible(VendParameters::find().VendInvoiceGroupingEnable);
        this.parmVendPaymentGroupControl().visible(VendParameters::find().VendPaymentGroupingEnable);
        factureReportDateControl.visible(correctionTypeControl.selection() != FactureCorrectionType_RU::Revision 
                                      && vatOnPaymentControl.value() == NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleTabs</Name>
				<Source><![CDATA[
    public void setVisibleTabs()
    {
        custTabControl.visible(false);
        vendTabControl.visible(true);
        emplTabControl.visible(false);
        ledgTabControl.visible(false);
        addrTabPageControl.visible(isTableUserEnabled(tablenum(LogisticsPostalAddress), AccessType::View));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    protected tableId transTableId()
    {
        return tablenum(VendInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeControl</Name>
				<Source><![CDATA[
    protected FormTreeControl treeControl()
    {
        return vendTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCommReportedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies whether report for principal line quantity should be used in facture line.
    /// </summary>
    /// <returns>
    /// True if report for principal line quantity should be used in facture line; otherwise false.
    /// </returns>
    public boolean useCommReportedQty()
    {
        return (super() && buyerControl.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueBeforeFactureDate</Name>
				<Source><![CDATA[
    protected str valueBeforeFactureDate()
    {
        const str TwoDots = '..';
        const str Parm = '\%1';

        return TwoDots + strfmt(Parm, maxInvoiceDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>