<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsSalesWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsSalesWorkTransactionType</c> class handles logic specific to the sales orders work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::Sales)]
class WhsSalesWorkTransactionType extends WHSOutboundShipmentWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    protected boolean hasInventTransOrigin()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeConnectedToPackingWork</Name>
				<Source><![CDATA[
    internal boolean canBeConnectedToPackingWork()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutbound</Name>
				<Source><![CDATA[
    public boolean isOutbound()
    {
        // Method exists in parent but cannot be removed because of binary compatibility
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSLocDirSales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateSales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        // Method exists in parent but cannot be removed because of binary compatibility
        return super(_hasTargetLicensePlate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        this.addInventTransIdRange(_parameters.inventTransId, _parameters.query, tableNum(SalesLine), fieldNum(SalesLine, InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleOrderLocationDirectiveScopeSupported</Name>
				<Source><![CDATA[
    protected internal boolean isSingleOrderLocationDirectiveScopeSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderLineByInventTransId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderLineByInventTransId(InventTransId _inventTransId)
    {
        return SalesLine::findInventTransId(_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuerySingleOrder</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuerySingleOrder(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        if (_parameters.orderNum)
        {
            SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(SalesTable)), fieldNum(SalesTable, SalesId)).value(queryValue(_parameters.orderNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinalPutLocationRequirements</Name>
				<Source><![CDATA[
    public WHSMessage validateFinalPutLocationRequirements(
        WMSLocation         _location,
        WHSLocationProfile  _locationProfile)
    {
        // Method exists in parent but cannot be removed because of binary compatibility
        return super(_location, _locationProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceOrder</Name>
				<Source><![CDATA[
    public void openSourceOrder(WHSWorkTable _whsWorkTable)
    {
        super(_whsWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceOrderMenuItemDisplayStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str sourceOrderMenuItemDisplayStr()
    {
        return menuitemDisplayStr(SalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderByWorkOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderByWorkOrder(WHSWorkOrderInterface _workOrder)
    {
        return SalesTable::find(_workOrder.parmOrderNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderLineNumFromInventTransId</Name>
				<Source><![CDATA[
    public LineNum findOrderLineNumFromInventTransId(InventTransId _inventTransId)
    {
        return SalesLine::findInventTransId(_inventTransId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustPurchaseOrder</Name>
				<Source><![CDATA[
    public CustPurchaseOrder findCustPurchaseOrder(WHSLicensePlateLabel _label)
    {
        return SalesTable::find(_label.OrderNum).PurchOrderFormNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountNum</Name>
				<Source><![CDATA[
    public AccountNum findAccountNum(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        AccountNum accountNum;

        if (_whsWorkLine.InventTransId)
        {
            accountNum = SalesLine::findInventTransId(_whsWorkLine.InventTransId).CustAccount;
        }
        else if (_whsWorkTable.OrderNum)
        {
            accountNum = SalesTable::find(_whsWorkTable.OrderNum).CustAccount;
        }
        else
        {
            accountNum = "@WAX402";
        }
        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountName</Name>
				<Source><![CDATA[
    public AccountName findAccountName(AccountNum _accountNum)
    {
        AccountName accountName;

        if (!_accountNum)
        {
            accountName = '';
        }
        else if (_accountNum != "@WAX402")
        {
            accountName = CustTable::find(_accountNum).name();
        }
        else
        {
            accountName = "@WAX402";
        }

        return accountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderedAndRemainQty</Name>
				<Source><![CDATA[
    public container findOrderedAndRemainQty(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        // Method exists in parent but cannot be removed because of binary compatibility
        return super(_whsWorkTable, _whsWorkLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress findToAddress(WhsWorkTable _whsWorkTable, WHSLicensePlateLabel _label)
    {
        return SalesTable::find(_label.OrderNum).deliveryAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShippingOverpickQty</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the validateShippingOverpick method. Extenders should move their logic to wrap or override the validateShippingOverpickHandlingQuantity method.', true, 30\9\2019)]
    public boolean validateShippingOverpickQty(WHSWorkLine _workLine, InventQty _overpickInventQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _workLine.ItemId);

        return this.validateShippingOverpickHandlingQuantity(_workLine, _overpickInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShippingOverpickHandlingQuantity</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected boolean validateShippingOverpickHandlingQuantity(
        WHSWorkLine         _workLine,
        InventHandlingQty   _overpickInventHandlingQty)
    {
        // Method exists in parent but cannot be removed because of binary compatibility
        return super(_workLine, _overpickInventHandlingQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        // Method exists in parent but cannot be removed because of binary compatibility
        super(_workTable, _cancellingProductReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrderTransQty</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the adjustOrderTrans method. Extenders should move their logic to wrap or override the adjustOrderTransHandlingQuantities method.', true, 30\9\2019)]
    public void adjustOrderTransQty(
        WHSWorkLine      _workLine,
        InventQty        _inventDiffQty,
        InventQty        _workLineInventQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _workLine.ItemId);

        this.adjustOrderTransHandlingQuantities(_workLine, _inventDiffQty, _workLineInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrderTransHandlingQuantities</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected void adjustOrderTransHandlingQuantities(
        WHSWorkLine         _workLine,
        InventHandlingQty   _inventDiffHandlingQty,
        InventHandlingQty   _workLineInventHandlingQty)
    {
        // Method exists in parent but cannot be removed because of binary compatibility
        super(_workLine, _inventDiffHandlingQty, _workLineInventHandlingQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLineByInventTransId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSOutboundShippableOrderLineMap orderLineByInventTransId(InventTransId _inventTransId)
    {
        return SalesLine::findInventTransId(_inventTransId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLineByLoadLineRefRecId</Name>
				<Source><![CDATA[
    internal WHSOutboundShippableOrderLineMap orderLineByLoadLineRefRecId(RefRecId _loadLineRefRecId)
    {
        return WHSLoadLine::findbyRecId(_loadLineRefRecId).getOrderCommonFromLoadLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        QueryBuildDataSource qbdsSalesLine = _query.dataSourceTable(tableNum(SalesLine));
        QueryBuildDataSource qbdsInventDim = qbdsSalesLine.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);

        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSiteId)).value(queryValue(_locDirTable.InventSiteId));
        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsShipmentProcessingPolicy</Name>
				<Source><![CDATA[
    internal boolean supportsShipmentProcessingPolicy()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>