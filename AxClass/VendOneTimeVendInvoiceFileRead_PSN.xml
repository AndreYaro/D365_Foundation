<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOneTimeVendInvoiceFileRead_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reads the uploaded file one time vendor file.
/// </summary>
public class VendOneTimeVendInvoiceFileRead_PSN
{
    #VendOneTimeVendorInvoice_PSN

    boolean                                isProcessImport;
    str                                    inValidColumnNames;
    Map                                    importFileColumnArrangement;
    VendOneTimeVendStagingDataContract_PSN vendOneTimeVendStagingDataContract;
    CommaStreamIo                          importFile;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads data from the import file.
    /// </summary>
    /// <param name="_fileUrl">
    /// File url for the imported file.
    /// </param>
    /// <param name="_accountStructureName">
    /// Name of the account structure selected by the user.
    /// </param>
    /// <returns>
    /// Returns the list of the rows to be imported.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List readFile(VendOneTimeVendInvoiceUrl _fileUrl, Name _accountStructureName)
    {
        container row;
        Name      columnName;
        Counter   rowCounter, columnCounter;
        List      savedRowDataList;
        Map       dimensionAttributeValueMap;
        RecId     dimensionAttributeRecId;

        dimensionAttributeValueMap = new Map(Types::Int64, Types::String);
        savedRowDataList           = new List(Types::Container);

        importFileColumnArrangement = new Map(Types::Integer, Types::String);
        importFile                  = CommaStreamIo::constructForRead(File::UseFileFromURL(_fileUrl));

        if (strLen(_fileUrl) > 500)
        {
            VendInstrumentation::logTelemetry(
                this.toString(),
                this.toString(),
                funcName(),
                'fileUrl',
                VendInvoiceInUseConstants::LongUrlForVendInvoiceImport);
        }

        if (this.checkPrerequisite())
        {
            while (importFile.status() == IO_Status::Ok)
            {
                rowCounter++;
                row = importFile.read();

                if (rowCounter == #CounterStartValue && !con2Str(row))
                {
                    throw error("@SYP4860720");
                }

                if (con2Str(row))
                {
                    vendOneTimeVendStagingDataContract = new VendOneTimeVendStagingDataContract_PSN();

                    for (columnCounter = #CounterStartValue; columnCounter <= conLen(row); columnCounter++)
                    {
                        columnName              = importFileColumnArrangement.lookup(columnCounter);
                        dimensionAttributeRecId = DimensionAttribute::findByName(columnName).RecId;

                        if (dimensionAttributeRecId)
                        {
                            dimensionAttributeValueMap.insert(dimensionAttributeRecId, conPeek(row, columnCounter));
                        }
                        else
                        {
                            this.saveRowData(columnName, conPeek(row, columnCounter));
                        }
                    }

                    vendOneTimeVendStagingDataContract.parmDimensionAttributeValuePair(dimensionAttributeValueMap.pack());
                    vendOneTimeVendStagingDataContract.parmAccountStructureName(_accountStructureName);
                    savedRowDataList.addEnd(vendOneTimeVendStagingDataContract.pack());
                }
            }
        }

        importFile = null;

        return savedRowDataList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrerequisite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if import file mataches with the list of predefined columns.
    /// </summary>
    /// <returns>
    /// True if all the prerequisites are met. Otherwise, false.
    /// </returns>
    private boolean checkPrerequisite()
    {
        boolean     isValid   = true;
        container   headerRow = importFile.read();

        // Checks if the import file contains data or not.
        if (conLen(headerRow) == 1)
        {
            isValid = checkFailed("@SYP4860720");
        }
        else if (!this.canProcessImport(headerRow) && inValidColumnNames)
        {
            isValid = checkFailed(strFmt("@SYP4860712", inValidColumnNames));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if import file has valid columns to be imported.
    /// </summary>
    /// <param name="_headerRow">
    /// Header row of the import file.
    /// </param>
    /// <returns>
    /// True if header row matches with the predefined columns.
    /// </returns>
    private boolean canProcessImport(container _headerRow)
    {
        boolean           isValid;
        Counter           errorCount;
        List              columnList;
        Map               checkedColumnList;
        MapIterator       mapIterator;
        ListEnumerator    columnListEnumerator;
        Name              dimensionAttributeName;

        this.saveImportFileColumnStructure(_headerRow);
        isValid              = true;
        mapIterator          = new MapIterator(importFileColumnArrangement);
        checkedColumnList    = new Map(Types::String, Types::String);
        columnList           = VendOneTimeVendInvoiceFileRead_PSN::getDefinedColumnList();
        columnListEnumerator = columnList.getEnumerator();

        while (mapIterator.more())
        {
            columnListEnumerator.reset();

            while (columnListEnumerator.moveNext())
            {
                if (this.getFormattedString(columnListEnumerator.current()) == this.getFormattedString(mapIterator.value())
                && !checkedColumnList.exists(mapIterator.value()))
                {
                    isValid = true;
                    checkedColumnList.insert(mapIterator.value(), columnListEnumerator.current());
                    columnListEnumerator.reset();
                    columnListEnumerator.moveNext();
                    break;
                }

                isValid = false;
            }

            dimensionAttributeName = mapIterator.value();

            if (!isValid && DimensionAttribute::findByName(dimensionAttributeName).RecId)
            {
                isValid = true;
            }

            if (!isValid)
            {
                errorCount++;

                if (!inValidColumnNames)
                {
                    inValidColumnNames = mapIterator.value();
                }
                else
                {
                    inValidColumnNames += ', ' + mapIterator.value();
                }
            }
            mapIterator.next();
        }

        if (errorCount > 0)
        {
            isValid = false;
        }
        else
        {
            isValid = true;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreDefinedColumnCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets column count from predefined column list.
    /// </summary>
    /// <returns>
    /// Returns total number of predefined columns.
    /// </returns>
    private int getPreDefinedColumnCount()
    {
        return VendOneTimeVendInvoiceFileRead_PSN::getDefinedColumnList().elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinedColumnList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates list of predefined columns for the import file.
    /// </summary>
    /// <returns>
    /// List of predefined columns.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static List getDefinedColumnList()
    {
        List columnList;

        columnList = new List(Types::String);

        columnList.addEnd("@SYS103034");
        columnList.addEnd("@SYS79838");
        columnList.addEnd("@SYS79840");
        columnList.addEnd("@SYS79844");
        columnList.addEnd("@SYS129167");
        columnList.addEnd("@SYS3815");
        columnList.addEnd("@SYS7437");
        columnList.addEnd("@SYS323504");
        columnList.addEnd("@SYS323505");
        columnList.addEnd("@SYS22249");
        columnList.addEnd("@SYS23890");
        columnList.addEnd("@SYS84689");
        columnList.addEnd("@SYS1517");
        columnList.addEnd("@SYS22457");
        columnList.addEnd("@SYS68772");
        columnList.addEnd("@SYS23725");
        columnList.addEnd("@SYS71686");
        columnList.addEnd("@SYS129064");
        columnList.addEnd("@SYS128425");
        columnList.addEnd("@SYS14475");
        columnList.addEnd("@SYS57610");
        columnList.addEnd("@SYS14588");
        columnList.addEnd("@SYS15682");
        columnList.addEnd("@SYS12836");
        columnList.addEnd("@SYS319915");
        columnList.addEnd("@SYS136906");
        columnList.addEnd("@SYS14578");
        columnList.addEnd("@SYS190813");
        columnList.addEnd("@SYS11770");
        columnList.addEnd("@SYS129097");
        columnList.addEnd("@SYS13864");
        columnList.addEnd("@SYS134485");
        columnList.addEnd("@SYS323506");
        columnList.addEnd("@SYS130809");
        columnList.addEnd("@SYS343426");
        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            columnList.addEnd("@Budgeting_BudgetReservationPS:ReservationLine");
        }

        return columnList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormattedErrorMessage</Name>
				<Source><![CDATA[
    private str getFormattedErrorMessage(str _errorMessage)
    {
        return subStr(_errorMessage, 0, strLen(_errorMessage) -1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormattedString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats string by trimming and converting it into lowercase.
    /// </summary>
    /// <param name="_input">
    /// String to be formatted.
    /// </param>
    /// <returns>
    /// Trims string and convert it into lower case.
    /// </returns>
    private str getFormattedString(str _input)
    {
        return strRTrim(strLTrim(strLwr(_input)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveImportFileColumnStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves column structure of the import file.
    /// </summary>
    /// <param name="_columnNameRow">
    /// Row in the import file.
    /// </param>
    private void saveImportFileColumnStructure(container _columnNameRow)
    {
        Counter columnCounter;

        for (columnCounter = #CounterStartValue; columnCounter<=conLen(_columnNameRow); columnCounter++)
        {
            importFileColumnArrangement.insert(columnCounter, conPeek(_columnNameRow, columnCounter));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRowData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves row data from import file into <c>VendOneTimeVendStagingDataContract</c>.
    /// </summary>
    /// <param name="_columnName">
    /// Column name of the import file.
    /// </param>
    /// <param name="_value">
    /// Value of the column in the import file,
    /// </param>
    private void saveRowData(str _columnName, str _value)
    {
        switch (this.getFormattedString(_columnName))
        {
            case "@SYS103034":
                vendOneTimeVendStagingDataContract.parmVendRecordType(_value);
                break;

            case "@SYS1517":
                vendOneTimeVendStagingDataContract.parmBankAccountId(_value);
                break;

            case "@SYS68772":
                vendOneTimeVendStagingDataContract.parmBankAccountNumber(_value);
                break;

            case "@SYS71686":
                vendOneTimeVendStagingDataContract.parmBankIBAN(_value);
                break;

            case "@SYS22457":
                vendOneTimeVendStagingDataContract.parmBankRoutingNumber(_value);
                break;

            case "@SYS23725":
                vendOneTimeVendStagingDataContract.parmBankSWIFTNumber(_value);
                break;

            case "@SYS22249":
                vendOneTimeVendStagingDataContract.parmCity(_value);
                break;

            case "@SYS7437":
                vendOneTimeVendStagingDataContract.parmCountryRegionId(_value);
                break;

            case "@SYS14588":
                vendOneTimeVendStagingDataContract.parmDueDate(_value);
                break;

            case "@SYS128425":
                vendOneTimeVendStagingDataContract.parmInvoiceDescription(_value);
                break;

            case "@SYS57610":
                vendOneTimeVendStagingDataContract.parmInvoiceDate(_value);
                break;

            case "@SYS129064":
                vendOneTimeVendStagingDataContract.parmInvoiceNumber(_value);
                break;

            case "@SYS319915":
                vendOneTimeVendStagingDataContract.parmItemName(_value);
                break;

            case "@SYS12836":
                vendOneTimeVendStagingDataContract.parmItemNumber(_value);
                break;

            case "@SYS8343":
                vendOneTimeVendStagingDataContract.parmLedgerAccount(_value);
                break;

            case "@SYS129097":
                vendOneTimeVendStagingDataContract.parmLineAmount(_value);
                break;

            case "@SYS15682":
                vendOneTimeVendStagingDataContract.parmLineNumber(_value);
                break;

            case "@SYS129167":
                vendOneTimeVendStagingDataContract.parmOrganizationName(_value);
                break;

            case "@SYS134485":
                vendOneTimeVendStagingDataContract.parmPercent(_value);
                break;

            case "@SYS79838":
                vendOneTimeVendStagingDataContract.parmPersonFirstName(_value);
                break;

            case "@SYS79844":
                vendOneTimeVendStagingDataContract.parmPersonLastName(_value);
                break;

            case "@SYS79840":
                vendOneTimeVendStagingDataContract.parmPersonMiddleName(_value);
                break;

            case "@SYS14475":
                vendOneTimeVendStagingDataContract.parmPostingDate(_value);
                break;

            case "@SYS136906":
                vendOneTimeVendStagingDataContract.parmProcurementCategory(_value);
                break;

            case "@SYS14578":
                vendOneTimeVendStagingDataContract.parmQuantity(_value);
                break;

            case "@SYS323505":
                vendOneTimeVendStagingDataContract.parmStreet(_value);
                break;

            case "@SYS23890":
                vendOneTimeVendStagingDataContract.parmTax1099RegNum(_value);
                break;

            case "@SYS84689":
                vendOneTimeVendStagingDataContract.parmTaxIDType(_value);
                break;

            case "@SYS190813":
                vendOneTimeVendStagingDataContract.parmUnit(_value);
                break;

            case "@SYS11770":
                vendOneTimeVendStagingDataContract.parmUnitPrice(_value);
                break;

            case "@SYS3815":
                vendOneTimeVendStagingDataContract.parmVendGroupId(_value);
                break;

            case "@SYS323504":
                vendOneTimeVendStagingDataContract.parmZipCode(_value);
                break;

            case "@SYS13864":
                vendOneTimeVendStagingDataContract.parmAccountingDistributionLineNumber(_value);
                break;

            case "@SYS323506":
                vendOneTimeVendStagingDataContract.parmState(_value);
                break;

            case "@SYS130809":
                vendOneTimeVendStagingDataContract.parmProcurementCategoryHierarchy(_value);
                break;

            case "@Budgeting_BudgetReservationPS:ReservationLine":
                this.processBudgetReservationLineField(_value);
                break;

            default:
                vendOneTimeVendStagingDataContract.parmAccountStructureName(_value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendOneTimeVendInvoiceFileRead_PSN construct()
    {
        return new VendOneTimeVendInvoiceFileRead_PSN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudgetReservationLineField</Name>
				<Source><![CDATA[
    private void processBudgetReservationLineField(str _budgetReservationLineReference)
    {
        if (_budgetReservationLineReference && PublicSectorUtils::isBudgetReservationEnabled())
        {
            ListEnumerator budgetReservationLineReferenceEnum;
            budgetReservationLineReferenceEnum = strSplit(_budgetReservationLineReference, ' ').getEnumerator();

            budgetReservationLineReferenceEnum.moveNext();
            vendOneTimeVendStagingDataContract.parmBudgetReservationDocumentNumber(budgetReservationLineReferenceEnum.current());

            if (budgetReservationLineReferenceEnum.moveNext())
            {
                vendOneTimeVendStagingDataContract.parmBudgetReservationLineNumber(budgetReservationLineReferenceEnum.current());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>