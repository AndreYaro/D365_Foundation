<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLoadDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSLoadDP</c> class declares the variables and tables required for the
///    <c>WHSLoad</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(WHSLoad))
]
public class  WhsLoadDP extends SrsReportDataProviderPreProcessTempDB
{
    WMSLocationId   prevLocation;
    str             custOrderNum;
    str             custAccount;
    str             purchOrderNum;
    DlvTermId       dlvTermId;
    Notes           notes;
    WHSLoadTable    whsLoadTable;
    WHSLoadLine     whsLoadLine;
    WHSLoadTmp      whsLoadTmp;
    
    private WMSLocationId finalWMSLocationId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWHSLoadTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the <c>WHSLoadTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(WHSLoadTmp))
    ]
    public WHSLoadTmp getWHSLoadTmp()
    {
        select  whsLoadTmp;

        return  whsLoadTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWHSLoadTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the details of the <c>WHSLoad</c> report into the temporary table.
    /// </summary>
    private void insertWHSLoadTmp()
    {
        this.initializeWHSLoadTmp();

        whsLoadTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWHSLoadTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the record of the temporary table for the <c>WHSLoad</c> report
    /// </summary>
    protected void initializeWHSLoadTmp()
    {
        whsLoadTmp.CustAccount              = custAccount;
        whsLoadTmp.DlvMode                  = dlvTermId;
        whsLoadTmp.ItemId                   = whsLoadLine.ItemId;
        whsLoadTmp.Name                     = InventTable::name(whsLoadLine.ItemId, whsLoadLine.inventDim());
        whsLoadTmp.Notes                    = notes;
        whsLoadTmp.PurchOrderFormNum        = purchOrderNum;
        whsLoadTmp.Qty                      = whsLoadLine.Qty;
        whsLoadTmp.CarrierCode              = whsLoadTable.CarrierCode;
        whsLoadTmp.LoadArrivalUTCDateTime   = whsLoadTable.LoadArrivalUTCDateTime;
        whsLoadTmp.LoadFloorStack           = whsLoadTable.LoadFloorStack;
        whsLoadTmp.LoadId                   = whsLoadTable.LoadId;
        whsLoadTmp.LoadSchedShipUTCDateTime = whsLoadTable.LoadSchedShipUTCDateTime;
        whsLoadTmp.LoadTemplateId           = whsLoadTable.LoadTemplateId;
        whsLoadTmp.LoadTipVolume            = whsLoadTable.LoadTipVolume;
        whsLoadTmp.LoadTipWeight            = whsLoadTable.LoadTipWeight;
        whsLoadTmp.LoadWeightRemain         = whsLoadTable.displayWeightRemaining();
        whsLoadTmp.OrderNum                 = whsLoadTable.OrderNum;
        whsLoadTmp.PackingQty               = whsLoadLine.PackingQty;
        whsLoadTmp.uom                      = whsLoadLine.uom;
        whsLoadTmp.wmsLocationId            = finalWMSLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the required data for the <c>WHSLoad</c> report and
    ///    inserts it into the <c>WHSLoadTmp</c> temporary table.
    /// </summary>
    public void processReport()
    {
        DocuRef docuRef;

        QueryRun queryRun = new QueryRun(this.parmQuery());

        WHSLoadId prevLoadId;

        while (queryRun.next())
        {
            whsLoadTable = queryRun.get(tableNum(WHSLoadTable));
            whsLoadLine = queryRun.get(tableNum(WHSLoadLine));

            if (prevLoadId != whsLoadTable.LoadId)
            {
                finalWMSLocationId = whsLoadTable.getFinalLoc();
                
                notes = '';
                while select Notes from docuRef
                    where docuRef.TypeId       == WHSParameters::find().LoadNoteType &&
                          docuRef.RefRecId     == whsLoadTable.RecId &&
                          docuRef.RefTableId   == whsLoadTable.TableId &&
                          docuRef.RefCompanyId == whsLoadTable.DataAreaId
                {
                    notes += docuRef.Notes + '\n';
                }
            }

            this.retrieveCustomer();
            this.retrieveTermsOfDelivery();

            this.insertWHSLoadTmp();

            prevLoadId = whsLoadTable.LoadId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCustomer</Name>
				<Source><![CDATA[
	/// <summary>
	/// Retrieves customer information from load. If there are multiple orders with different customers in the load, customer info is left empty.
	/// </summary>
        void retrieveCustomer()
    {
        SalesTable      salesTable;
        InventTransType prevInventTransType;
        NoYes           prevTransportRequest;
        WHSOrderNum     prevOrderNum;
        AccountNum      prevAccountNum;
        WHSLoadLine     whsLoadLine2;
        boolean         multOrderNum = false;
        boolean         multAccountNum = false;

        while select OrderNum, InventTransType,TransportRequest from whsLoadLine2
            group by OrderNum, InventTransType, TransportRequest
            where whsLoadTable.LoadId == whsLoadLine2.LoadId
        {
            if (prevOrderNum)
            {
                multOrderNum = true;
                break;
            }

            prevOrderNum            = whsLoadLine2.OrderNum;
            prevInventTransType     = whsLoadLine2.InventTransType;
            prevTransportRequest    = whsloadline2.TransportRequest;
        }

        if (multOrderNum == false)
        {
            if (prevInventTransType == InventTransType::Sales && prevTransportRequest == NoYes::No)
            {
                salestable = salesTable::find(prevOrderNum);

                custOrderNum  = salesTable.SalesId;
                purchOrderNum = salesTable.PurchOrderFormNum;
                custAccount   = salesTable.CustAccount;
            }
        }
        else
        {
            while select OrderNum, InventTransType, TransportRequest from whsLoadLine2
                where whsLoadTable.LoadId == whsLoadLine2.LoadId
                outer join CustAccount from salesTable
                    where salesTable.SalesId     == whsLoadLine2.OrderNum
            {
                if (prevAccountNum)
                {
                    if (salesTable.CustAccount          != prevAccountNum       ||
                        whsLoadLine2.InventTransType    != prevInventTransType  ||
                        whsLoadLine2.TransportRequest   != prevTransportRequest)
                    {
                        multAccountNum = true;
                        break;
                    }
                }

                prevAccountNum          = salesTable.CustAccount;
                prevInventTransType     = whsLoadLine2.InventTransType;
                prevTransportRequest    = whsLoadLine2.TransportRequest;
            }

            if (multAccountNum == false)
            {
                if (prevInventTransType == InventTransType::Sales && prevTransportRequest == NoYes::No)
                {
                    custAccount = prevAccountNum;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTermsOfDelivery</Name>
				<Source><![CDATA[
	/// <summary>
	/// Retrieves delivery terms of the load.
	/// </summary>
	/// <remarks>
	/// If the load has multiple shipments, delivery terms is left empty.
	/// </remarks>
        void retrieveTermsOfDelivery()
    {
        WHSShipmentTable    whsShipmentTable;

        select count(RecId) from whsShipmentTable
            where whsShipmentTable.LoadId == whsLoadTable.LoadId;

        if (whsShipmentTable.RecId == 1)
        {
            select DlvTermId from whsShipmentTable
                where whsShipmentTable.LoadId == whsLoadTable.LoadId;

            dlvTermId = whsShipmentTable.DlvTermId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>