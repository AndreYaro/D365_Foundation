<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchBaileeNonSSRSPrintMgmtAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>PurchBaileeNonSSRSPrintMgmtAdapter</c> used for adoptation of print management for
/// "Acceptance report in storage" excel report
/// </summary>
[NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::PurchaseOrderBailee)]
class PurchBaileeNonSSRSPrintMgmtAdapter extends NonSSRSPrintMgmtAdapter
{
    PurchInvoiceJournalPrint    purchInvoiceJournalPrint;
    RecordSortedList            journalList;
    VendInvoiceJour             vendInvoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodeType</Name>
				<Source><![CDATA[
        protected PrintMgmtNodeType getNodeType()
    {
        return PrintMgmtNodeType::PurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to initialize class
    /// </summary>
    /// <remarks>
    /// Empty, in this case initialization depends on record processed
    /// </remarks>
    protected void initialize()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>PrintMgmtReportRun</c> object depending on parameters passed into this class
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initPrintMgmtReportRun()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(
            PrintMgmtHierarchyType::Purch,
            PrintMgmtNodeType::PurchTable,
            printMgmtDocumentType);

        if (purchInvoiceJournalPrint)
        {
            printMgmtReportRun.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(purchInvoiceJournalPrint.parmPrinterSettingsFormLetterCopy()));
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(purchInvoiceJournalPrint.parmPrinterSettingsFormLetter()));
            printMgmtReportRun.parmForcePrintJobSettings(!purchInvoiceJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            //forcePrintJobSettings is reversal to usePrintManagement
            printMgmtReportRun.parmForcePrintJobSettings(false);
        }

        printMgmtReportRun.parmSSRS(PrintMgmtSSRS::NonSSRS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes print management settings for the list of specified records
    /// </summary>
    /// <exception cref="Exception::Error">
    /// When object parameter not set
    /// </exception>
    /// <exception cref="Exception::Error">
    /// When record fetched from list, but it's not initialized
    /// </exception>
    protected void runPrintMgmt()
    {
        boolean nextRecord;

        printCopyOriginal = this.parmArgs().parmEnum();

        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        if (!journalList)
        {
            throw error("@SYS26348");
        }
        if (SysDictClass::isEqualOrSuperclass(classIdGet(args.caller()), classNum(FormletterJournalPrint)))
        {
            purchInvoiceJournalPrint = args.caller();
        }

        nextRecord = journalList.first(vendInvoiceJour);

        while (nextRecord)
        {
            if (!vendInvoiceJour)
            {
                throw error("@SYS26348");
            }

            this.initPrintMgmtReportRun();

            this.loadPrintSettings(vendInvoiceJour, vendInvoiceJour.purchTable(), vendInvoiceJour.LanguageId);
            this.outputReports();

            nextRecord = journalList.next(vendInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets rec id of record being processed
    /// </summary>
    protected void setRecordId()
    {
        recordId = vendInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static PurchBaileeNonSSRSPrintMgmtAdapter construct()
    {
        return new PurchBaileeNonSSRSPrintMgmtAdapter();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>