<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayFundCtypeSplitSum</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayFundCtypeSplitSum
{
    RPayCounterTable rPayCounterTable;
    RPayTrans        rPayTrans;
    RPayAmount       baseAmount,
                     deductionAmount,
                     fundAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calc(KeySum _pennyDiffSum = null)
    {
        RpayFundEmplSum        rpayFundEmplSum;
        RpayFundEmplDeduction  rpayFundEmplDeduction;
        RpayFundDeductionTable rpayFundDeductionTable;
        boolean                include;
        RHRMEmplTable          emplTable;
        RPayAmount             baseDeductionAmount;
        real                   tmpAmount, amountSum, amountSumRnd;

        if (!this.checkPayCtype())
        {
            return;
        }

        select firstonly EmployeeId, PayMainEmplId from emplTable
            where emplTable.EmployeeId == rPayTrans.Emplid;

        select firstonly rpayFundEmplSum
            where rpayFundEmplSum.PayPeriod       == rPayTrans.PayPeriod          &&
                  rpayFundEmplSum.CorrectedPeriod == rPayTrans.CorrectedPeriod    &&
                  rpayFundEmplSum.RpayCounterUnit == rPayCounterTable.CounterUnit &&
                  (rpayFundEmplSum.EmplId         == emplTable.EmployeeId         ||
                   rpayFundEmplSum.EmplId         == emplTable.PayMainEmplId);

        if (! rpayFundEmplSum.RecId)
        {
            return;
        }

        baseDeductionAmount = rPayTrans.Amount;

        while select rpayFundDeductionTable order by RPayFundDeductionType desc, RPayRateTaxValue
            join DeductionAmount, BaseDeductionAmount from rpayFundEmplDeduction
                where rpayFundEmplDeduction.PayPeriod             == rpayFundEmplSum.PayPeriod          &&
                      rpayFundEmplDeduction.CorrectedPeriod       == rpayFundEmplSum.CorrectedPeriod    &&
                      rpayFundEmplDeduction.EmplId                == rpayFundEmplSum.EmplId             &&
                      rpayFundEmplDeduction.RPayCounterUnit       == rpayFundEmplSum.RPayCounterUnit    &&
                      rpayFundEmplDeduction.RPayFundDeductionCode == rpayFundDeductionTable.RPayFundDeductionCode
        {
            if (rpayFundDeductionTable.RPayRateTaxValue)
            {
                continue;
            }

            switch (rpayFundDeductionTable.RpayFundDeductionType)
            {
                case RpayFundDeductionType::FundDeduction:
                    include = true;
                    break;
                case RpayFundDeductionType::TaxDeduction:
                    include = this.includeInTaxDeduction(rpayFundDeductionTable);
                    break;
                case RpayFundDeductionType::CtypeDeduction:
                    include = this.includeInCtypeDeduction(rpayFundDeductionTable);
                    break;
            }

            if (include && rpayFundEmplDeduction.BaseDeductionAmount)
            {
                deductionAmount += baseDeductionAmount * rpayFundEmplDeduction.DeductionAmount / rpayFundEmplDeduction.BaseDeductionAmount;
                baseDeductionAmount -= deductionAmount;
            }
        }

        if (rPayTrans.Amount > 0)
        {
            baseAmount = max(0, rPayTrans.Amount - deductionAmount);
        }
        else
        {
            baseAmount = min(0, rPayTrans.Amount - deductionAmount);
        }

        if (rpayFundEmplSum.BaseAmount)
        {
            tmpAmount  = baseAmount * rpayFundEmplSum.FundAmount / rpayFundEmplSum.BaseAmount;
            fundAmount = CurrencyExchangeHelper::amount(tmpAmount);

            if (_pennyDiffSum)
            {
                if (_pennyDiffSum.numOfTrans() && _pennyDiffSum.key2Index_W(rPayCounterTable.CounterUnit))
                {
                    [amountSum, amountSumRnd] = _pennyDiffSum.index2Data(_pennyDiffSum.key2Index_W(rPayCounterTable.CounterUnit));
                }

                amountSum += tmpAmount;

                fundAmount = CurrencyExchangeHelper::amount(amountSum - amountSumRnd);
                _pennyDiffSum.updateNow(rPayCounterTable.CounterUnit, [tmpAmount, fundAmount]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPayCtype</Name>
				<Source><![CDATA[
    private boolean checkPayCtype()
    {
        RPayFundMember rPayFundMember;

        select firstonly RecId from rPayFundMember
            where rPayFundMember.CounterUnit == rPayCounterTable.CounterUnit &&
                  rPayFundMember.PayCostType == rPayTrans.PayCtype;

        return rPayFundMember.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount getBaseAmount()
    {
        return baseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount getFundAmount()
    {
        return fundAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInCtypeDeduction</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean includeInCtypeDeduction(RpayFundDeductionTable _rpayFundDeductionTable)
    {
        RPayFundCtypeDeductionMember rPayFundCtypeDeductionMember;

        select firstonly RecId from rPayFundCtypeDeductionMember
            where rPayFundCtypeDeductionMember.RpayFundDeductionCode == _rpayFundDeductionTable.RpayFundDeductionCode &&
                  rPayFundCtypeDeductionMember.RPayCostType          == rPayTrans.PayCtype;

        return rPayFundCtypeDeductionMember.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInTaxDeduction</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean includeInTaxDeduction(RpayFundDeductionTable _rpayFundDeductionTable)
    {
        RPayFundTaxDeductionMember rPayFundTaxDeductionMember;
        RpayTaxIncomeTable         rpayTaxIncomeTable;
        RPayTable                  rPayTable = RPayTable::find(rPayTrans.PayCtype);

        if (!rPayTable.RpayTaxIncomeCode)
        {
            return false;
        }

        rpayTaxIncomeTable = RpayTaxIncomeTable::find(rPayTable.RpayTaxIncomeCode);

        if (! rpayTaxIncomeTable.RpayTaxDeductionCode)
        {
            return false;
        }

        select firstonly RecId from rPayFundTaxDeductionMember
            where rPayFundTaxDeductionMember.RpayFundDeductionCode == _rpayFundDeductionTable.RpayFundDeductionCode &&
                  rPayFundTaxDeductionMember.RpayTaxDeductionCode  == rpayTaxIncomeTable.RpayTaxDeductionCode;

        return rPayFundTaxDeductionMember.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(RPayCounterUnit _payCounterUnit,
                    RPayTrans       _payTrans)
    {
        rPayCounterTable = RPayCounterTable::find(_payCounterUnit);
        rPayTrans        = _payTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
