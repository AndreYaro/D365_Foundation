<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterServiceBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FormletterServiceBatchTask</c> class performs the posting routines in the
///    <c>FormletterService</c> class when the multithread function in the batch framework is used.
/// </summary>
class FormletterServiceBatchTask
extends FormletterBatchTask implements BatchRetryable
{
    FormLetter              formLetter;
    container               packedFormLetter;
    DocumentStatus          documentStatus;
    PurchRFQUpdateType      purchRFQUpdateType;
    container               packedParmTableRecordIdList;
    boolean                 runningAsService;

    private FormLetterServiceInstrumentationLogger instrumentationLogger;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        packedFormLetter,
        documentStatus,
        purchRFQUpdateType,
        packedParmTableRecordIdList,
        runningAsService
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>FormletterServiceBatchTask</c> class.
    /// </summary>
    /// <returns>
    ///    A container that has the current instance of the <c>FormletterServiceBatchTask</c> class.
    /// </returns>
    public container pack()
    {
        if (formLetter)
        {
            packedFormLetter = formLetter.pack();
        }
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
        public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        documentStatus = _documentStatus;
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetter</Name>
				<Source><![CDATA[
        public FormLetter parmFormLetter(FormLetter _formLetter = formLetter)
    {
        formLetter = _formLetter;

        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedParmTableRecordIdList</Name>
				<Source><![CDATA[
        public container parmPackedParmTableRecordIdList(container _packedParmTableRecordIdList = packedParmTableRecordIdList)
    {
        packedParmTableRecordIdList = _packedParmTableRecordIdList;

        return packedParmTableRecordIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunningAsService</Name>
				<Source><![CDATA[
        public boolean parmRunningAsService(boolean _runningAsService = runningAsService)
    {
        runningAsService = _runningAsService;
        return runningAsService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        using (var activityContext = this.instrumentationLogger().formLetterServiceTaskActivities().run())
        {
            FormletterServiceMultithread formletterService;

            formletterService = FormletterServiceMultithread::newFormletterServiceMultiThread(packedFormLetter, this.parmDocumentStatus(), this.parmFormletterType(), packedContract);
            formletterService.parmPackedParmTableRecordIdList(this.parmPackedParmTableRecordIdList());
            formletterService.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter to the current instance of the
    ///    <c>FormLetterMultiThread</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container to use to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if the deserialization was successful; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);
        container       packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, packedBase] = _packedClass;

                return super(packedBase);
            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static FormletterServiceBatchTask construct()
    {
        return new FormletterServiceBatchTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Describes the <c>FormletterServiceBatchTask</c> class.
    /// </summary>
    /// <returns>
    ///    The label that contains the description of the <c>FormletterServiceBatchTask</c> class.
    /// </returns>
    /// <remarks>
    ///    The description is used by the batch framework as the description for the job.
    /// </remarks>
    protected static ClassDescription description()
    {
        return "@SYS116261";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Constructs a <c>FormletterServiceBatchTask</c> class.
    /// </summary>
    /// <param name="_formLetter">
    ///   The <c>Formletter</c> object to pass to the <c>FormletterServiceBatchTask</c> class.
    /// </param>
    /// <param name="_formletterType">
    ///   The <c>FormletterType</c> object to pass to the <c>FormletterServiceBatchTask</c> class.
    /// </param>
    /// <param name="_documentStatus">
    ///   The <c>DocumentType</c> object to pass to the <c>FormletterServiceBatchTask</c> class.
    /// </param>
    /// <param name="_packedParmTableRecordIdList">
    ///   A packed list containing records for <c>FormletterParmTable</c> records to post.
    /// </param>
    /// <param name="_runningAsService">
    ///   A boolean value indicating whether the class is running under the <c>SysOperation</c> framework.
    /// </param>
    /// <param name="_formLetterContract">
    ///   The <c>FormletterContract</c> object to pass to the <c>FormletterServiceBatchTask</c> class.
    /// </param>
    /// <returns>
    ///   The constructed <c>FormletterServiceBatchTask</c> class.
    /// </returns>
    public static FormletterServiceBatchTask newFormletter(FormLetter           _formLetter,
                                                           FormletterType       _formletterType,
                                                           DocumentStatus       _documentStatus,
                                                           container            _packedParmTableRecordIdList,
                                                           boolean              _runningAsService,
                                                           FormLetterContract   _formLetterContract)
    {
        FormletterServiceBatchTask  formletterServiceBatchTask;
        formletterServiceBatchTask = FormletterServiceBatchTask::construct();

        formletterServiceBatchTask.parmFormLetter(_formLetter);
        formletterServiceBatchTask.parmFormletterType(_formletterType);
        formletterServiceBatchTask.parmDocumentStatus(_documentStatus);
        formletterServiceBatchTask.parmPackedParmTableRecordIdList(_packedParmTableRecordIdList);
        formletterServiceBatchTask.parmRunningAsService(_runningAsService);
        formletterServiceBatchTask.parmFormletterContract(_formLetterContract);
        return formletterServiceBatchTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal FormLetterServiceInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = FormLetterServiceInstrumentationLogger::createLoggerByType(this.parmFormletterType(), classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>