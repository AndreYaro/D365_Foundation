<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscCreateJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscCreateJournal</c> class is used to create a trade agreement journal.
/// </summary>
/// <remarks>
/// The intention is to create a shortcut from the <c>PriceDiscTable</c> form viewing trade agreements,
/// to the price discount journal editing the viewed agreements. In case no trade agreements are
/// selected for editing an empty journal is opened.
/// </remarks>
class PriceDiscCreateJournal extends RunBase
{
    Args                    args;
    DialogField             dialogJournalName;
    DialogField             dialogJournalDescription;
    PriceDiscJournalName    priceDiscJournalName;
    Name                    journalDescription;
    Array                   recordsMarked;
    FormDataSource          callerDataSource;
    PriceDiscAdmTable       priceDiscAdmTable;
    container               packedRecordList;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        priceDiscJournalName,
        journalDescription,
        priceDiscAdmTable,
        packedRecordList
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the user input.
    /// </summary>
    /// <param name="calledFrom">
    /// The object being called; optional.
    /// </param>
    /// <returns>
    /// true if applied user input is valid; otherwise, false.
    /// </returns>
    public boolean checkCloseDialog(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (ret
            && !PriceDiscAdmName::find(dialogJournalName.value()).RecId)
        {
            //The value '%1' in field '%2' is not found in the related table '%3'.
            ret = checkFailed(strFmt("@GLS180006", priceDiscJournalName, fieldId2pname(tableNum(PriceDiscAdmName),fieldNum(PriceDiscAdmName, JournalName)), tableId2pname(tableNum(PriceDiscAdmName))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPackedRecordIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of record IDs of the selected records from the callers data source.
    /// </summary>
    /// <returns>
    /// A container type containing a packed list object.
    /// </returns>
    protected container createPackedRecordIdList()
    {
        List                priceDiscTableRecIdList = new List(extendedTypeId2Type(extendedTypeNum(RefRecId)));
        Common              common;

        for (common = callerDataSource.getFirst(true); common; common = callerDataSource.getNext())
        {
            priceDiscTableRecIdList.addEnd(common.RecId);
        }
        return priceDiscTableRecIdList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the AOT.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase       dialog = super();

        // Select the journal name and write a description for the new journal
        dialog.caption("@GLS180000");

        // Singular: "Edit the selected trade agreement line in a new journal"  Plural:  "Edit the selected trade agreement lines in a new journal"  "Open a new empty journal"
        dialog.addText(recordsMarked.lastIndex() > 0 ? (recordsMarked.lastIndex() == 1 ? "@GLS180001" : "@GLS180002") : "@GLS180003" );
        dialogJournalName           = dialog.addFieldValue(extendedTypeStr(PriceDiscJournalName), priceDiscJournalName);
        dialogJournalDescription    = dialog.addFieldValue(extendedTypeStr(Name), journalDescription,"@SYS25589", "@SYS27840");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the values from the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        priceDiscJournalName = dialogJournalName.value();
        journalDescription   = dialogJournalDescription.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:CopyTradeAgreementRecordsToNewJournal";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCallerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates internal form data source variables.
    /// </summary>
    protected void initCallerDataSource()
    {
        callerDataSource    = FormDataUtil::getFormDataSource(args.record());
        recordsMarked       = callerDataSource.recordsMarked();

        if (!recordsMarked.exists(1))
        {
            callerDataSource.mark(callerDataSource.getPosition());
            recordsMarked       = callerDataSource.recordsMarked();
        }

        packedRecordList = this.createPackedRecordIdList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openJournalForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the price discount journal form.
    /// </summary>
    protected void openJournalForm()
    {
        Args    localArgs = new Args();
        FormRun formRun;

        localArgs.caller(this);

        priceDiscAdmTable.initFromPriceDiscAdmName(PriceDiscAdmName::find(priceDiscJournalName));

        localArgs.record(priceDiscAdmTable);
        formRun = new MenuFunction(menuitemDisplayStr(PriceDiscAdm), MenuItemType::Display).create(localArgs);
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        priceDiscAdmTable = PriceDiscCreateJournal::makeJournal(priceDiscJournalName,journalDescription, packedRecordList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>args</c> object.
    /// </summary>
    /// <param name="_args">
    /// An object of <c>Args</c> class.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// Missing <c>Args</c> class object is passed.
    /// </exception>
    public static void checkArgs(Args _args)
    {
        if (!_args)
        {
            throw error("@SYS25407");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>PriceDiscCreateJournal</c> class.
    /// </summary>
    /// <returns>
    /// A <c>PriceDiscCreateJournal</c> object.
    /// </returns>
    static PriceDiscCreateJournal construct()
    {
        return new PriceDiscCreateJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args  _args)
    {
        PriceDiscCreateJournal priceDiscCreateJournal;

        PriceDiscCreateJournal::checkArgs(_args);

        priceDiscCreateJournal = PriceDiscCreateJournal::newFromArgs(_args, true);

        priceDiscCreateJournal.initCallerDataSource();

        if (priceDiscCreateJournal.prompt())
        {
            priceDiscCreateJournal.runOperation();

            priceDiscCreateJournal.openJournalForm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>PriceDiscAdmTable</c> record.
    /// </summary>
    /// <param name="_priceDiscJournalName">
    /// A <c>PriceDiscJournalName</c> extended type.
    /// </param>
    /// <param name="_journalDescription">
    /// A <c>journalDescription</c> extended type.
    /// </param>
    /// <param name="_priceDisctableRecIdList">
    /// A container type.
    /// </param>
    /// <returns>
    /// A <c>PriceDiscAdmTable</c> record.
    /// </returns>
    public static PriceDiscAdmTable makeJournal(
        PriceDiscJournalName    _priceDiscJournalName,
        Name                    _journalDescription,
        container               _priceDisctableRecIdList)
    {
        PriceDiscTable      priceDiscTable;
        PriceDiscAdmTrans   priceDiscAdmTrans;
        RecordInsertList    priceDiscAdmTransInsertList         = new RecordInsertList(tableNum(PriceDiscAdmTrans), true);
        List                priceDiscTableRecIdList             = List::create(_priceDisctableRecIdList);
        ListEnumerator      priceDiscTableRecIdListEnumerator   = priceDiscTableRecIdList.getEnumerator();
        PriceDiscAdmTable   priceDiscAdmTable;
        LineNum             lineNum;

        ttsbegin;
        priceDiscAdmTable.JournalName     = _priceDiscJournalName;
        priceDiscAdmTable.Name            = _journalDescription;
        priceDiscAdmTable.DefaultRelation = PriceDiscAdmName::find(_priceDiscJournalName).DefaultRelation;
        priceDiscAdmTable.insert();

        while (priceDiscTableRecIdListEnumerator.moveNext())
        {
            select firstonly priceDiscTable
                where priceDiscTable.RecId == priceDiscTableRecIdListEnumerator.current();

            lineNum++;
            PriceDiscCreateJournal::initPriceDiscAdmTrans(priceDiscAdmTrans, priceDiscTable, priceDiscAdmTable, lineNum);
            priceDiscAdmTransInsertList.add(priceDiscAdmTrans);
        }
        priceDiscAdmTransInsertList.insertDatabase();
        ttscommit;

        return priceDiscAdmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceDiscAdmTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init PriceDiscAdmTrans record.
    /// </summary>
    /// <param name="_priceDiscAdmTrans">
    /// A <c>PriceDiscAdmTrans</c> table.
    /// </param>
    /// <param name="_priceDiscTable">
    /// A <c>PriceDiscTable</c> table.
    /// </param>
    /// <param name="_priceDiscAdmTable">
    /// A <c>PriceDiscAdmTable</c> table.
    /// </param>
    /// <param name="_lineNum">
    /// A line number.
    /// </param>
    public static void initPriceDiscAdmTrans(
		PriceDiscAdmTrans _priceDiscAdmTrans, 
		PriceDiscTable    _priceDiscTable, 
		PriceDiscAdmTable _priceDiscAdmTable, 
		LineNum           _lineNum)
    {
        _priceDiscAdmTrans.initFromPriceDiscTable(_priceDiscTable);
        _priceDiscAdmTrans.JournalNum = _priceDiscAdmTable.JournalNum;
        _priceDiscAdmTrans.LineNum    = _lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of the <c>PriceDiscCreateJournal</c> class from an <c>Args</c> object.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    /// <param name="_getLast">
    /// Controls whether the user's previous selections should be retrieved.
    /// </param>
    /// <returns>
    /// A <c>PriceDiscCreateJournal</c> object.
    /// </returns>
    public static PriceDiscCreateJournal newFromArgs(Args _args, boolean _getLast = true)
    {
        PriceDiscCreateJournal priceDiscCreateJournal;

        PriceDiscCreateJournal::checkArgs(_args);

        priceDiscCreateJournal = PriceDiscCreateJournal::construct();

        priceDiscCreateJournal.getLast();

        priceDiscCreateJournal.parmArgs(_args);

        return priceDiscCreateJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>