<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMLevelCalcAll</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BOMLevelCalcAll</c> is responsible for triggering both planning and costing BOM level recalculation.
/// </summary>
public class BOMLevelCalcAll extends RunBaseBatch implements BatchRetryable
{
    private BOMLevelCalc bomLevelCalc;
    private ReqBOMLevelCalc reqBomLevelCalc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPUpgradeCodeRunBaseRunCalled', 'The current stack frame is already inside the new session.')]
    public void run()
    {
        if (!bomLevelCalc)
        {
            bomLevelCalc = BOMLevelCalc::construct();
        }
        if (!reqBomLevelCalc)
        {
            reqBomLevelCalc = ReqBOMLevelCalc::construct();
        }

        if (this.isInBatch())
        {
            BatchHeader header = this.getCurrentBatchHeader();
            header.addRuntimeTask(bomLevelCalc, this.parmCurrentBatch().RecId);
            header.addRuntimeTask(reqBomLevelCalc, this.parmCurrentBatch().RecId);
            header.save();
        }
        else
        {
            bomLevelCalc.run();
            reqBomLevelCalc.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentBatchHeader</Name>
				<Source><![CDATA[
    public BatchHeader getCurrentBatchHeader()
    {
        return BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomLevelCalc</Name>
				<Source><![CDATA[
    public BOMLevelCalc parmBomLevelCalc(BOMLevelCalc _bomLevelCalc = bomLevelCalc)
    {
        bomLevelCalc = _bomLevelCalc;
        return bomLevelCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqBomLevelCalc</Name>
				<Source><![CDATA[
    public ReqBomLevelCalc parmReqBomLevelCalc(ReqBomLevelCalc _reqBomLevelCalc = reqBomLevelCalc)
    {
        reqBomLevelCalc = _reqBomLevelCalc;
        return reqBomLevelCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static BOMLevelCalcAll newStandard(
        BOMLevelCalc _bomLevelCalc = null,
        ReqBOMLevelCalc _reqBomLevelCalc = null)
    {
        var bomLevelCalcAll = new BOMLevelCalcAll();
        bomLevelCalcAll.parmBomLevelCalc(_bomLevelCalc);
        bomLevelCalcAll.parmReqBomLevelCalc(_reqBomLevelCalc);
        return bomLevelCalcAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS112515";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(xArgs _args)
    {
        BOMLevelCalcAll bomLevelCalc = BOMLevelCalcAll::newStandard();

        if (! bomLevelCalc.prompt())
        {
            return;
        }

        bomLevelCalc.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>