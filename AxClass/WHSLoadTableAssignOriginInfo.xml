<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadTableAssignOriginInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLoadTableAssignOriginInfo</c> class assigns origin information to a <c>WHSLoadTable</c> record.
/// </summary>
public class WHSLoadTableAssignOriginInfo
{
    protected UnknownNoYes              oneOrder                    = UnknownNoYes::Unknown;
    private   UnknownNoYes              updateSourceAndDestination  = UnknownNoYes::Unknown;
    
    protected boolean                   isModified = false;
    private   WHSOrderNum               orderNum;
    
    protected WHSLoadArrivalUTCDateTime arrivalUTCDateTime;
    
    private   WHSPackingSlipType        packingSlipType;

    protected WHSLoadLine               firstLoadLine;
    protected WHSLoadTable              loadTable;
    private   boolean                   isAssigningAfterAddingLoadLines;

    protected UnknownNoYes              oneAccount                  = UnknownNoYes::Unknown;
    protected WHSAccountNum             singleCustVendAccount;
    protected WHSCustVendRef            singleCustVendReference;
    protected WHSAccountNum             custVendAccountNumber;
    protected WHSCustVendRef            custVendReferenceNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSLoadTableAssignOriginInfo</c> class from a <c>WHSLoadTable</c> record.
    /// </summary>
    /// <param name = "_loadTable">The load to populate.</param>
    /// <returns>A new instance of the <c>WHSLoadTableAssignOriginInfo</c> class.</returns>
    public static WHSLoadTableAssignOriginInfo newFromLoadTable(WHSLoadTable _loadTable)
    {
        var instance = new WHSLoadTableAssignOriginInfo();
        instance.loadTable = _loadTable;
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadTable</Name>
				<Source><![CDATA[
    final protected WHSLoadTable parmLoadTable()
    {
        return this.loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLoadTableAssignAfterAddingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSLoadTableAssignOriginInfo</c> class from a <c>WHSLoadTable</c> record used to assign after load lines have been added to the load.
    /// </summary>
    /// <param name = "_loadTable">The load to populate.</param>
    /// <returns>A new instance of the <c>WHSLoadTableAssignOriginInfo</c> class.</returns>
    public static WHSLoadTableAssignOriginInfo newFromLoadTableAssignAfterAddingLines(WHSLoadTable _loadTable)
    {
        var instance = WHSLoadTableAssignOriginInfo::newFromLoadTable(_loadTable);
        instance.isAssigningAfterAddingLoadLines = true;
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assign</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assign the origin information on the load header.
    /// </summary>
    /// <param name="_loadLineAddRemove">
    ///     The <c>AddRemove</c> enum value describing whether a load line has just been added or removed.
    /// </param>
    /// <returns>
    ///    true if <c>WHSLoadTable</c> buffer was modified; otherwise, false.
    /// </returns>
    public boolean assign(AddRemove _loadLineAddRemove)
    {
        if (loadTable.LoadId)
        {
            if (this.init(_loadLineAddRemove))
            {
                this.assignFromFirstLoadLine();

                if (oneAccount == UnknownNoYes::No)
                {
                    this.assignForMultipleAccounts();
                    this.assignOneAccountAndReferenceIfFound();
                }

                if (oneOrder == UnknownNoYes::No)
                {
                    this.assignForMultipleOrders();
                }

                if (this.populateFieldsOnLoadTable(loadTable))
                {
                    isModified = true;
                }
            }
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private boolean init(AddRemove _loadLineAddRemove)
    {
        WHSLoadLine otherOrderLoadLine;
        WHSLoadLine sameOrderLoadLine;
        WHSLoadLine otherOrderTypeLoadLine;

        select firstonly RecId, OrderNum, InventTransType, TransportRequest, InventTransId
            from firstLoadLine
            where firstLoadLine.LoadId  == loadTable.LoadId
            outer join OrderNum
                from otherOrderLoadLine
                where otherOrderLoadLine.LoadId             == firstLoadLine.LoadId
                    && (otherOrderLoadLine.OrderNum         != firstLoadLine.OrderNum
                    && otherOrderLoadLine.InventTransType   == firstLoadLine.InventTransType)
            outer join RecId
                from sameOrderLoadLine
                where sameOrderLoadLine.LoadId              == firstLoadLine.LoadId
                    && sameOrderLoadLine.OrderNum            == firstLoadLine.OrderNum
                    && sameOrderLoadLine.InventTransType     == firstLoadLine.InventTransType
                    && sameOrderLoadLine.TransportRequest    == firstLoadLine.TransportRequest
                    && sameOrderLoadLine.RecId               != firstLoadLine.RecId
            outer join RecId
                from otherOrderTypeLoadLine
                where otherOrderTypeLoadLine.LoadId         == firstLoadLine.LoadId
                    && (   otherOrderTypeLoadLine.InventTransType    != firstLoadLine.InventTransType
                        || otherOrderTypeLoadLine.TransportRequest   != firstLoadLine.TransportRequest);

        boolean mustInitialize;
        if (this.isAssigningAfterAddingLoadLines)
        {
            mustInitialize = (firstLoadLine.RecId != 0 && _loadLineAddRemove == AddRemove::Add);
        }
        else
        {
            mustInitialize = firstLoadLine.RecId && !(_loadLineAddRemove == AddRemove::Add && !otherOrderLoadLine.OrderNum && sameOrderLoadLine.RecId);
        }
        
        if (mustInitialize)
        {
            if (!otherOrderLoadLine.OrderNum && !otherOrderTypeLoadLine.RecId)
            {
                // All load line are associated with same order
                oneOrder                    = UnknownNoYes::Yes;
                updateSourceAndDestination  = UnknownNoYes::Yes;

                orderNum = firstLoadLine.OrderNum;
            }
            else
            {
                oneOrder = UnknownNoYes::No;

                if (otherOrderTypeLoadLine.RecId || (_loadLineAddRemove == AddRemove::Add && loadTable.AccountNum == ''))
                {
                    //we may have two orders for the same customer/vendor so we need to re-examine if we have same account
                    if (otherOrderLoadLine.OrderNum)
                    {
                        oneAccount = UnknownNoYes::Unknown;
                    }
                    else
                    {
                        oneAccount = UnknownNoYes::No;
                    }
                }
            }
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFieldsOnLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the fields on the load table record based on the origin information discovered.
    /// </summary>
    /// <param name = "_loadTable">The record to populate</param>
    /// <returns>true if the record was modified; otherwise, false.</returns>
    protected boolean populateFieldsOnLoadTable(WHSLoadTable _loadTable)
    {
        if (_loadTable.AccountNum != custVendAccountNumber ||
            _loadTable.OrderNum != orderNum ||
            updateSourceAndDestination == UnknownNoYes::Yes ||
            packingSlipType != _loadTable.PackingSlipType)
        {
            _loadTable.OrderNum                   = orderNum;
            _loadTable.AccountNum                 = custVendAccountNumber;
            _loadTable.CustVendRef                = custVendReferenceNumber;
            _loadTable.PackingSlipType            = packingSlipType;
            if (arrivalUTCDateTime)
            {
                _loadTable.eta                    = arrivalUTCDateTime;
            }
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignForMultipleOrders</Name>
				<Source><![CDATA[
    protected void assignForMultipleOrders()
    {
        orderNum = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignForMultipleAccounts</Name>
				<Source><![CDATA[
    protected void assignForMultipleAccounts()
    {
        arrivalUTCDateTime      = DateTimeUtil::minValue();
        custVendAccountNumber   = '';
        custVendReferenceNumber = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignOneAccountAndReferenceIfFound</Name>
				<Source><![CDATA[
    private void assignOneAccountAndReferenceIfFound()
    {
        if (!custVendAccountNumber && singleCustVendAccount)
        {
            custVendAccountNumber = singleCustVendAccount;
        }

        if (!custVendReferenceNumber && singleCustVendReference)
        {
            custVendReferenceNumber = singleCustVendReference;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromFirstLoadLine</Name>
				<Source><![CDATA[
    private void assignFromFirstLoadLine()
    {
        if (firstLoadLine.TransportRequest)
        {
            this.assignFromTransportRequest();
        }
        else
        {
            switch (firstLoadLine.InventTransType)
            {
                case InventTransType::Sales:
                    this.assignFromSales();
                    break;

                case InventTransType::Purch:
                    this.assignFromPurch();
                    break;

                case InventTransType::TransferOrderShip:
                    this.assignFromTransferOrderShip();
                    break;

                default:
                    this.assignDefaultFromFirstLoadLineInventTransType(firstLoadLine.InventTransType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignDefaultFromFirstLoadLineInventTransType</Name>
				<Source><![CDATA[
    protected void assignDefaultFromFirstLoadLineInventTransType(InventTransType _inventTransType)
    {
        if (!this.assignFromFirstLoadLineForDefaultInventTransType())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromFirstLoadLineForDefaultInventTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes information from the first load line to the load table, for the extended inventory transaction types.
    /// </summary>
    /// <returns>true if the load table was initialized; otherwise, false.</returns>
    protected boolean assignFromFirstLoadLineForDefaultInventTransType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromTransportRequest</Name>
				<Source><![CDATA[
    private void assignFromTransportRequest()
    {
        if (oneOrder == UnknownNoYes::Yes)
        {
            TMSTransportRequestTable transportRequestTable = firstLoadLine.tmsTransportRequestTable();

            this.initTransportRequestOriginDestination(transportRequestTable);
            isModified  = true;
        }

        oneAccount = UnknownNoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromSalesTable</Name>
				<Source><![CDATA[
    protected void assignFromSalesTable(SalesTable _salesTable)
    {
        oneAccount              = UnknownNoYes::Yes;
        custVendAccountNumber   = _salesTable.CustAccount;
        custVendReferenceNumber = _salesTable.CustomerRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromSales</Name>
				<Source><![CDATA[
    private void assignFromSales()
    {
        WHSLoadLine projLoadLine;
        SalesLine salesLine;

        // Check if any lines on the load are item requirements.
        select firstOnly RecId from projLoadLine
            where projLoadLine.LoadId == loadTable.LoadId
            exists join salesLine
                where salesLine.InventTransId   == projLoadLine.InventTransId
                        && salesLine.SalesType    == SalesType::ItemReq;

        if (projLoadLine.RecId != 0)
        {
            // if some lines on the load are item requirements, check if any lines aren't item requirements.
            select firstOnly RecId from projLoadLine
                where projLoadLine.LoadId == loadTable.LoadId
                exists join salesLine
                    where salesLine.InventTransId   == projLoadLine.InventTransId
                            && salesLine.SalesType    != SalesType::ItemReq;

            packingSlipType = projLoadLine.RecId == 0 ? WHSPackingSlipType::Project : WHSPackingSlipType::Both;
        }
        else
        {
            packingSlipType = WHSPackingSlipType::Sales;
        }

        if (oneOrder == UnknownNoYes::Yes)
        {
            SalesTable salesTable = firstLoadLine.orderHeader() as SalesTable;
            this.assignFromSalesTable(salesTable);
        
            this.initSalesOriginDestination(firstLoadLine.getOrderCommonFromLoadLine() as SalesLine);
            isModified = true;
        }
        else
        {
            this.initializeOneAccountFromSales();

            if (oneAccount == UnknownNoYes::No)
            {
                this.assignSalesOriginDestinationForMultiAccount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOneAccountFromSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes one account from sales.
    /// </summary>
    protected void initializeOneAccountFromSales()
    {
        if (oneAccount == UnknownNoYes::Unknown)
        {
            SalesTable salesTable = this.findOriginSalesTable();

            if (salesTable)
            {
                this.initSalesOriginDestination(firstLoadLine.getOrderCommonFromLoadLine() as SalesLine);
                this.assignFromSalesTable(salesTable);
            }
            else
            {
                oneAccount = UnknownNoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignSalesOriginDestinationForMultiAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the information related to origin and destination from the first load line to the load table
    /// when the load is for multiple sales orders with different customer accounts.
    /// </summary>
    protected void assignSalesOriginDestinationForMultiAccount()
    {
        SalesLine localSalesLine = firstLoadLine.getOrderCommonFromLoadLine() as SalesLine;
        if (localSalesLine)
        {
            this.initSalesOriginDestination(localSalesLine);
            isModified = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignPurchOriginDestinationForMultiAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the information related to origin and destination from the first load line to the load table
    /// when the load is for multiple purchase orders with different vendor accounts.
    /// </summary>
    protected void assignPurchOriginDestinationForMultiAccount()
    {
        PurchLine localPurchLine = firstLoadLine.getOrderCommonFromLoadLine() as PurchLine;
        if (localPurchLine)
        {
            this.initPurchOriginDestination(localPurchLine.purchTable(), localPurchLine);
            isModified = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromPurchTable</Name>
				<Source><![CDATA[
    protected void assignFromPurchTable(PurchTable _purchTable)
    {
        oneAccount  = UnknownNoYes::Yes;
        custVendAccountNumber   = _purchTable.OrderAccount;
        custVendReferenceNumber = _purchTable.VendorRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromPurch</Name>
				<Source><![CDATA[
    private void assignFromPurch()
    {
        if (oneOrder == UnknownNoYes::Yes)
        {
            PurchTable purchTable = firstLoadLine.orderHeader() as PurchTable;

            this.assignFromPurchTable(purchTable);

            PurchLine purchLine   = firstLoadLine.getOrderCommonFromLoadLine() as PurchLine;
            arrivalUTCDateTime = purchLine.deliveryTransDateTime();

            this.initPurchOriginDestination(purchTable, purchLine);
            isModified = true;
        }
        else
        {
            if (oneAccount == UnknownNoYes::Unknown)
            {
                this.initializeOneAccountFromPurch();
            }

            if (oneAccount == UnknownNoYes::No)
            {
                this.assignPurchOriginDestinationForMultiAccount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOneAccountFromPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes one account from purchase.
    /// </summary>
    protected void initializeOneAccountFromPurch()
    {
        PurchTable purchTable = this.findOriginPurchTable();

        if (purchTable)
        {
            this.initPurchOriginDestination(purchTable, firstLoadLine.getOrderCommonFromLoadLine() as PurchLine);
            this.assignFromPurchTable(purchTable);
        }
        else
        {
            oneAccount = UnknownNoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromInventTransferTable</Name>
				<Source><![CDATA[
    protected void assignFromInventTransferTable(InventTransferTable _transferTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFromTransferOrderShip</Name>
				<Source><![CDATA[
    private void assignFromTransferOrderShip()
    {
        if (oneOrder == UnknownNoYes::Yes)
        {
            InventTransferTable transferTable = firstLoadLine.orderHeader() as InventTransferTable;
            this.assignFromInventTransferTable(transferTable);
            this.initTransferOriginDestination(transferTable);
            isModified = true;
        }
        else
        {
            this.assignTransferOriginDestinationForMultiShipOrder();
        }

        oneAccount = UnknownNoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignTransferOriginDestinationForMultiShipOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the information related to origin and destination to the load table when the load is for multiple transfer orders.
    /// </summary>
    protected void assignTransferOriginDestinationForMultiShipOrder()
    {
        InventTransferTable transferTable = firstLoadLine.orderHeader() as InventTransferTable;
        this.initTransferOriginDestination(transferTable);
        isModified = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a purchase order which represents common purchase order information across all load lines.
    /// </summary>
    /// <returns>
    ///    A <c>PurchTable</c> record representing a common purchase order, but with only the OrderAccount, VendorRef, and DeliveryDate fields selected.
    /// </returns>
    /// <remarks>
    ///    The method should not be called unless all load lines are associated with purchase order lines.
    /// </remarks>
    protected PurchTable findOriginPurchTable()
    {
        PurchTable  purchTable;
        PurchTable  purchTableReturn;
        boolean     recordAlreadyFound;
        VendAccount vendorAccount;
        VendRef     vendorReference;
        boolean     vendorAccountSet;
        boolean     vendorReferenceSet;
        boolean     singleCustVendAccountFound = true;
        boolean     singleCustVendReferenceFound = true;

        SysDaQueryObject purchQueryObject = this.buildPurchTableQueryForVendorLoadAssignment(purchTable);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();
        SysDaSearchObject searchObject = new SysDaSearchObject(purchQueryObject);
 
        while (searchStatement.next(searchObject))
        {
            if (singleCustVendAccountFound
                && vendorAccountSet
                && vendorAccount != purchTable.OrderAccount)
            {
                singleCustVendAccountFound = false;
            }

            if (singleCustVendReferenceFound
                && vendorReferenceSet
                && vendorReference != purchTable.VendorRef)
            {
                singleCustVendReferenceFound = false;
            }

            if (!singleCustVendAccountFound
                && !singleCustVendReferenceFound)
            {
                break; // No need to keep looping if we already know that there are multiple accounts and references.
            }

            vendorAccount = purchTable.OrderAccount;
            vendorReference = purchTable.VendorRef;
            vendorAccountSet = true;
            vendorReferenceSet = true;

            purchTableReturn.data(purchTable);
        }

        if (singleCustVendAccountFound)
        {
            singleCustVendAccount = vendorAccount;
        }

        if (singleCustVendReferenceFound)
        {
            singleCustVendReference = vendorReference;
        }

        if (!singleCustVendAccountFound
            || !singleCustVendReferenceFound)
        {
            // This means there are multiple combinations of account number / customer ref.
            return null;
        }

        return purchTableReturn;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOriginSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a sales order which represents common sales order information across all load lines.
    /// </summary>
    /// <returns>
    ///    A <c>SalesTable</c> record representing a common sales order, but with only the CustAccount and CustomerRef fields selected.
    /// </returns>
    /// <remarks>
    ///    The method should not be called unless all load lines are associated with sales order lines.
    /// </remarks>
    protected SalesTable findOriginSalesTable()
    {
        SalesTable  salesTable;
        SalesTable  salesTableReturn;
        boolean     recordAlreadyFound;
        CustAccount customerAccount;
        CustRef     customerReference;
        boolean     customerAccountSet;
        boolean     customerReferenceSet;
        boolean     singleCustVendAccountFound = true;
        boolean     singleCustVendReferenceFound = true;

        var salesQueryObject = this.buildSalesTableQueryForCustomerLoadAssignment(salesTable);
        var searchStatement = new SysDaSearchStatement();
        while (searchStatement.next(new SysDaSearchObject(salesQueryObject)))
        {
            if (singleCustVendAccountFound
                && customerAccountSet
                && customerAccount != salesTable.CustAccount)
            {
                singleCustVendAccountFound = false;
            }

            if (singleCustVendReferenceFound
                && customerReferenceSet
                && customerReference != salesTable.CustomerRef)
            {
                singleCustVendReferenceFound = false;
            }

            if (!singleCustVendAccountFound
                && !singleCustVendReferenceFound)
            {
                break; // No need to keep looping if we already know that there are multiple accounts and references.
            }

            customerAccount = salesTable.CustAccount;
            customerReference = salesTable.CustomerRef;
            customerAccountSet = true;
            customerReferenceSet = true;

            salesTableReturn.data(salesTable);
        }

        if (singleCustVendAccountFound)
        {
            singleCustVendAccount = customerAccount;
        }

        if (singleCustVendReferenceFound)
        {
            singleCustVendReference = customerReference;
        }

        if (!singleCustVendAccountFound
            || !singleCustVendReferenceFound)
        {
            // This means there are multiple combinations of account number / customer ref.
            return null;
        }

        return salesTableReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPurchTableQueryForVendorLoadAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query object for retrieving a purchase order which represents common purchase order information across all load lines.
    /// </summary>
    /// <param name = "_purchTable">The <c>PurchTable</c> record to query against.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c> object.</returns>
    protected SysDaQueryObject buildPurchTableQueryForVendorLoadAssignment(PurchTable _purchTable)
    {
        return this.buildOptimizedPurchTableQueryForCommonPurchOrderOnLoadLines(_purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOptimizedPurchTableQueryForCommonPurchOrderOnLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query that will for the specified Load return all the different purchase orders across all load lines based on Order Account / Vendor ref / Delivery Date .
    /// </summary>
    /// <param name = "_purchTable">The <c>PurchTable</c> record to query against.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c> object.</returns>
    protected SysDaQueryObject buildOptimizedPurchTableQueryForCommonPurchOrderOnLoadLines(PurchTable _purchTable)
    {

        SysDaQueryObject purchTableQueryObject = new SysDaQueryObject(_purchTable);
        purchTableQueryObject.projection().add(fieldStr(PurchTable, OrderAccount));
        purchTableQueryObject.projection().add(fieldStr(PurchTable, VendorRef));
        purchTableQueryObject.projection().add(fieldStr(PurchTable, DeliveryDate));


        purchTableQueryObject.groupByClause()
            .add(fieldStr(PurchTable, OrderAccount))
            .add(fieldStr(PurchTable, VendorRef))
            .add(fieldStr(PurchTable, DeliveryDate));
        
        WHSLoadLine accountLoadLine;
        SysDaQueryObject accountLoadLineJoinQuery = new SysDaQueryObject(accountLoadLine);
        
        accountLoadLineJoinQuery.whereClause(new SysDaEqualsExpression(
                new SysDaFieldExpression(accountLoadLine, fieldStr(WHSLoadLine, LoadId)),
                new SysDaFieldExpression(loadTable, fieldStr(WHSLoadTable, LoadId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(accountLoadLine, fieldStr(WHSLoadLine, OrderNum)),
                new SysDaFieldExpression(_purchTable, fieldStr(PurchTable, PurchId)))));
 
        purchTableQueryObject.joinClause(SysDaJoinKind::ExistsJoin, accountLoadLineJoinQuery);


        return purchTableQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesTableQueryForCustomerLoadAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query object for retrieving a sales order which represents common sales order information across all load lines.
    /// </summary>
    /// <param name = "_salesTable">The <c>SalesTable</c> record to query against.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c> object.</returns>
    protected SysDaQueryObject buildSalesTableQueryForCustomerLoadAssignment(SalesTable _salesTable)
    {
        SysDaQueryObject salesTableQueryObject = new SysDaQueryObject(_salesTable);
        salesTableQueryObject.projection()
            .add(fieldStr(SalesTable, CustAccount))
            .add(fieldStr(SalesTable, CustomerRef));

        salesTableQueryObject.groupByClause()
            .add(fieldStr(SalesTable, CustAccount))
            .add(fieldStr(SalesTable, CustomerRef));

        WHSLoadLine accountLoadLine;
        SysDaQueryObject accountLoadLineJoinQuery = new SysDaQueryObject(accountLoadLine);
        accountLoadLineJoinQuery.projection().add(fieldStr(WHSLoadLine, TableId));
        accountLoadLineJoinQuery.whereClause(new SysDaEqualsExpression(
                new SysDaFieldExpression(accountLoadLine, fieldStr(WHSLoadLine, LoadId)),
                new SysDaValueExpression(loadTable.LoadId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(accountLoadLine, fieldStr(WHSLoadLine, OrderNum)),
                new SysDaFieldExpression(_salesTable, fieldStr(SalesTable, SalesId))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(accountLoadLine, fieldStr(WHSLoadLine, InventTransType)),
                new SysDaValueExpression(InventTransType::Sales))));
        
        salesTableQueryObject.joinClause(SysDaJoinKind::ExistsJoin, accountLoadLineJoinQuery);

        return salesTableQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchOriginDestination</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes origin and destination address information based on a purchase order and purchase order line.
    /// </summary>
    /// <param name="_purchTable">
    ///    The <c>PurchTable</c> buffer to initialize the addresses from.
    /// </param>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> buffer to initialize the destination address from.
    /// </param>
    protected void initPurchOriginDestination(PurchTable _purchTable, PurchLine _purchLine)
    {
        loadTable.initOriginAddress(TMSAddressPhone::initFromVendAccount(_purchTable.OrderAccount));
        loadTable.initDestinationAddress(TMSAddressPhone::initFromPurchLine(_purchLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesOriginDestination</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes origin and destination address information based on a sales order and sales order line.
    /// </summary>
    /// <param name="_salesLine">
    ///    The <c>SalesLine</c> buffer to initialize the addresses from.
    /// </param>
    protected void initSalesOriginDestination(SalesLine _salesLine)
    {
        loadTable.initOriginAddress(TMSAddressPhone::initFromInventLocation(_salesLine.inventDim().inventLocation()));
        loadTable.initDestinationAddress(TMSAddressPhone::initFromSalesLine(_salesLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransferOriginDestination</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes origin and destination address information based on a transfer order.
    /// </summary>
    /// <param name="_transferTable">
    ///    The <c>InventTransferTable</c> buffer to initialize the addresses from.
    /// </param>
    protected void initTransferOriginDestination(InventTransferTable _transferTable)
    {
        loadTable.initOriginAddress(TMSAddressPhone::initFromInventLocation(InventLocation::find(_transferTable.InventLocationIdFrom), false, _transferTable.FromPostalAddress));
        loadTable.initDestinationAddress(TMSAddressPhone::initFromInventLocation(InventLocation::find(_transferTable.InventLocationIdTo), false, _transferTable.ToPostalAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransportRequestOriginDestination</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes origin and destination address information based on a transport request.
    /// </summary>
    /// <param name="_transportRequestTable">
    ///    The <c>TMSTransportRequestTable</c> buffer to initialize the addresses from.
    /// </param>
    protected void initTransportRequestOriginDestination(TMSTransportRequestTable _transportRequestTable)
    {
        loadTable.initOriginAddress(_transportRequestTable.originAddress(), _transportRequestTable.OriginHubCode);
        loadTable.initDestinationAddress(_transportRequestTable.destinationAddress(), _transportRequestTable.DestinationHubCode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>