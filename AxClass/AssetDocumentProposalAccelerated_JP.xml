<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentProposalAccelerated_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset accelerated depreciation proposal.
/// </summary>
[AssetDocumentProposalTypeAttribute_JP(AssetDocumentProposalType_JP::AcceleratedDepreciation)]
class AssetDocumentProposalAccelerated_JP extends AssetDocumentProposal_JP implements BatchRetryable
{
    private const str FeatureReference = 'JP-00024';

    DialogRunbase     dialogAccelerated;
    AssetTransDate    assetTransDate;
    DialogField       dialogDepDate;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        assetTransDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <C>AssetTransTypeJournal</C> of accelerated depreciation
    /// </summary>
    /// <returns>
    /// Returns intance of <C>AssetTransTypeJournal</C>
    /// </returns>
    AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::ExtraordinaryDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYP4880033";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialogAccelerated = super();

        dialogAccelerated.caption("@SYP4880033");

        dialogAccelerated.addGroup("@SYS22526");
        dialogDepDate = dialogAccelerated.addFieldValue(extendedTypeStr(AssetTransDate), assetTransDate, "@SYS14656","@SYS71107");

        return dialogAccelerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.parmBatchEnabled())
            {
                ledgerNameId = dialogJournalName.value();
                postingLayer = dialogPostingLayer.value();
                journalName = LedgerJournalName::find(ledgerNameId);
                this.updatePostingLayer(journalName.CurrentOperationsTax, RangeStatus::Hidden);
            }

            assetTransDate = dialogDepDate.value();
            ret = this.checkDateIsValid(assetTransDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query query;
        QueryBuildRange queryRange;

        super();

        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        query = new Query(queryStr(AssetProposalAccelerated_JP));
        query.name("@FixedAssetsIncentiveDepreciation:SYP4880033");
        query.dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook, Depreciation)).value(queryValue(NoYes::Yes));
        queryRange = query.dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook, DepreciationAcceleratedProfile_JP));
        queryRange.value(SysQuery::valueNotEmptyString());
        queryRange.status(RangeStatus::Hidden);
        queryRange = query.dataSourceTable(tableNum(AssetBookTable)).addRange(fieldNum(AssetBookTable,CurrentOperationsTax));
        queryRange.status(RangeStatus::Locked);

        if (FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
        {
            QueryBuildDataSource qbdsAssetBook = query.dataSourceTable(tableNum(AssetBook));
            qbdsAssetBook.addOrderByField(fieldNum(AssetBook, AssetId), SortOrder::Ascending);
            qbdsAssetBook.addOrderByField(fieldNum(AssetBook, BookId), SortOrder::Ascending);

            QueryBuildDataSource qbdsAssetDocumentAccelerated = query.dataSourceTable(tableNum(AssetDocumentAcceleratedDepTable_JP));
            qbdsAssetDocumentAccelerated.addOrderByField(fieldNum(AssetDocumentAcceleratedDepTable_JP, ValidFrom), SortOrder::Ascending);
        }

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBundleReady</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the bundle is full for the sub tasks of a batch.
    /// </summary>
    /// <param name="_bookCount">
    /// The number of asset books.
    /// </param>
    /// <returns>
    /// true if the bundle is full; otherwise, false.
    /// </returns>
    public boolean isBundleReady(int _bookCount)
    {
        boolean isReady;

        isReady = _bookCount >= this.getMaxBooksInTaskBoundry();

        return isReady;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        AssetJournal                        assetJournal;
        AssetBook                           assetBook;
        AssetTableMethod_JP                 assetTableMethod;
        AssetAmount                         depAmount;
        AssetTransDate                      depDate;
        container                           acceleratedEntryContainer;
        AssetDocumentAcceleratedDepTable_JP accDepDocTable;
        Map                                 assetTableMethodMap = new Map(Types::Container, Types::Class);
        Counter                             transactionCount = 0;
        AssetTableInterval                  assetTableInterval;
        boolean                             isIdlePeriodActive;
        int                                 numOfIdlePeriods;

        // Running as periodic batch process.
        if (this.parmBatchEnabled() && this.isInBatch())
        {
            this.buildTasks();
        }
        else
        {
            this.createAndLockJournalForBatchProcessing();

            assetJournal = new AssetJournal(journalNum, this.assetTransType());
            this.addAssetBookStatusRange(queryRun);

            ttsbegin;

            while (queryRun.next())
            {
                if (queryRun.changed(tablenum(AssetDocumentAcceleratedDepTable_JP)) || queryRun.changed(tablenum(AssetBook)))
                {
                    accDepDocTable = queryRun.get(tableNum(AssetDocumentAcceleratedDepTable_JP));
                    assetBook  = queryRun.get(tablenum(AssetBook));

                    AssetAccrual accrual = assetBook.depreciationProfile().Accrual;

                    if (assetTableMethodMap.exists([assetBook.AssetId, assetBook.BookId]))
                    {
                        assetTableMethod = assetTableMethodMap.lookup([assetBook.AssetId, assetBook.BookId]);
                    }
                    else
                    {
                        assetTableMethod = AssetTableMethod::construct(assetBook, assetTransDate, '', false, false, false, true);
                        acceleratedEntryContainer = AssetDocumentAcceleratedDep_JP::getAcceleratedDocumentEntryList(
                            assetBook.AssetId,
                            assetBook.BookId,
                            (assetBook.LastDepreciationDateAccelerated_JP?
                                assetBook.LastDepreciationDateAccelerated_JP + 1 : assetBook.DepreciationStartDate));
                        assetTableMethod.parmAcceleratedEntryContainer_JP(acceleratedEntryContainer);
                        assetTableMethodMap.insert([assetBook.AssetId, assetBook.BookId], assetTableMethod);
                    }

                    while (assetTableMethod.next())
                    {
                        depDate = assetTableMethod.parmPeriodEnd();
                        assetTableInterval = assetTableMethod.getAssetTableInterval_JP();
                        TransDate validToEndOfPeriod = assetTableInterval.endPeriod(accDepDocTable.ValidTo);

                        if ((accrual != AssetAccrual::Yearly
                                && depDate > accDepDocTable.ValidTo)
                            || (accrual == AssetAccrual::Yearly
                                && depDate > validToEndOfPeriod))
                        {
                            break;
                        }
                        else if (depDate < accDepDocTable.ValidFrom)
                        {
                            // use calc() to move to next period
                            assetTableMethod.calc();
                        }
                        else
                        {
                            isIdlePeriodActive = AssetIdlePeriodTable_JP::exists(assetBook.AssetId, assetBook.BookId, depDate);
                            numOfIdlePeriods   = AssetIdlePeriodAssign_JP::findNumOfIdlePeriods(assetBook.AssetId, assetBook.BookId, assetTableInterval, depDate);

                            assetTableMethod.parmAssetIdlePeriods(numOfIdlePeriods);
                            assetTableMethod.parmIsAssetIdlePeriodActive(isIdlePeriodActive);

                            depAmount = assetTableMethod.calc();

                            if (depAmount)
                            {
                                assetJournal.createTrans(
                                    -1 * depAmount,
                                    assetBook,
                                    depDate,
                                    '',
                                    0,
                                    0,
                                    false,
                                    0,
                                    0,
                                    dateNull(),
                                    false,
                                    false,
                                    AssetDocumentType_JP::AssetAcceleratedDepreciation,
                                    assetTableMethod.parmAssetDocumentEntry_JP().RecId);
                                transactionCount++;
                            }
                        }
                    }

                    // Commit transaction when asset dep book is changed and the
                    // number of transactions created is over the limit.
                    if (transactionCount >= this.getMaxJournalLinesInTransactionBoundry())
                    {
                        ttscommit;
                        ttsbegin;
                        transactionCount = 0;
                    }
                }
            }

            ttscommit;

            this.updateJournalTotals();
            this.unlockJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version    = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (ret)
        {
            ret = this.validateDepreciationProfiles();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDepreciationProfiles</Name>
				<Source><![CDATA[
    private boolean validateDepreciationProfiles()
    {
        Map depreciationProfileMap = new Map(Types::String, Types::Enum);
        Map errorMap = new Map(Types::String, Types::String);
        int numberOfErrors;
        int maxNumberOfErrors = 10;
        boolean ret = true;

        if (FeatureStateProvider::isFeatureEnabled(AssetDepCalculation_AcceleratedFeature_JP::instance()))
        {
            QueryRun validateQueryRun = new QueryRun(queryRun.query());

            this.addAssetBookStatusRange(validateQueryRun);

            while (validateQueryRun.next())
            {
                if (validateQueryRun.changed(tablenum(AssetBook)))
                {
                    AssetBook assetBook = validateQueryRun.get(tablenum(AssetBook));

                    AssetDepreciationYear depreciationYear;
                    if (!depreciationProfileMap.exists(assetBook.DepreciationProfile))
                    {
                        depreciationYear = AssetDepreciationProfile::find(assetBook.DepreciationProfile).DepreciationYear;
                        depreciationProfileMap.add(assetBook.DepreciationProfile, depreciationYear);
                    }
                    else
                    {
                        depreciationYear = depreciationProfileMap.lookup(assetBook.DepreciationProfile);
                    }

                    AssetDepreciationYear acceleratedDepreciationYear;
                    if (!depreciationProfileMap.exists(assetBook.DepreciationAcceleratedProfile_JP))
                    {
                        acceleratedDepreciationYear = AssetDepreciationProfile::find(assetBook.DepreciationAcceleratedProfile_JP).DepreciationYear;
                        depreciationProfileMap.add(assetBook.DepreciationAcceleratedProfile_JP, acceleratedDepreciationYear);
                    }
                    else
                    {
                        acceleratedDepreciationYear = depreciationProfileMap.lookup(assetBook.DepreciationAcceleratedProfile_JP);
                    }

                    if (depreciationYear != acceleratedDepreciationYear)
                    {
                        ret = false;

                        if (!errorMap.exists(strUpr(assetBook.DepreciationProfile) + strUpr(assetBook.DepreciationAcceleratedProfile_JP)))
                        {
                            numberOfErrors++;

                            errorMap.insert(strUpr(assetBook.DepreciationProfile) + strUpr(assetBook.DepreciationAcceleratedProfile_JP),
                                strFmt("@FixedAssets:DepreciationYearMustBeTheSameJP",
                                    assetBook.DepreciationAcceleratedProfile_JP,
                                    acceleratedDepreciationYear,
                                    assetBook.DepreciationProfile,
                                    depreciationYear));

                            if (numberOfErrors >= maxNumberOfErrors)
                            {
                                break;
                            }
                        }
                    }
                }
            }

            if (numberOfErrors > 0)
            {
                MapEnumerator mapEnumerator = errorMap.getEnumerator();
                while(mapEnumerator.moveNext())
                {
                    checkFailed(mapEnumerator.currentValue());
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAssetBookStatusRange</Name>
				<Source><![CDATA[
    private void addAssetBookStatusRange(QueryRun _queryRun)
    {
        _queryRun.query().dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,Status)).value(queryValue(AssetStatus::Open));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>