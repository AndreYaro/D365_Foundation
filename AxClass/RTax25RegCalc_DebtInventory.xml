<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_DebtInventory</Name>
	<SourceCode>
		<Declaration><![CDATA[
class  RTax25RegCalc_DebtInventory extends RTax25RegCalc implements BatchRetryable
{
    RTax25RegCalc_DebtInventoryMultiply calc, calcFinal;
    BatchHeader                         batchHeader;
    int                                 maxThreads;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        ;

        super();

        calcFinal = RTax25RegCalc_DebtInventoryMultiply::construct(registerType, 0, registerJournalTrans.RecId, this.isInBatch());

        if (maxThreads > 1)
        {
            // Get the header for this batch.
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            calcFinal.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
            calcFinal.batchInfo().parmCaption(registerJournalTrans.RegisterId + ": " + "@SYP4860778");
            batchHeader.addRuntimeTask(calcFinal, this.parmCurrentBatch().RecId);

            this.distributeTrans();

            batchHeader.save();
        }
        else
        {
            calc = RTax25RegCalc_DebtInventoryMultiply::construct(registerType, 1, registerJournalTrans.RecId, this.isInBatch());
            calc.runOperation();
            calcFinal.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTasks(CustVend_RU _custVend, RecId _recIdFrom, RecId _recIdTo)
    {
        calc = RTax25RegCalc_DebtInventoryMultiply::construct(registerType, 1, registerJournalTrans.RecId, this.isInBatch());
        calc.parmRecIdRange(_custVend, _recIdFrom, _recIdTo);
        calc.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
        calc.batchInfo().parmCaption(registerJournalTrans.RegisterId + ": " + strfmt("%1 %2..%3", _custVend, _recIdFrom, _recIdTo));
        batchHeader.addRuntimeTask(calc, this.parmCurrentBatch().RecId);
        batchHeader.addDependency(calcFinal, calc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void distributeTrans()
    {
        CustTrans                           custTrans;
        VendTrans                           vendTrans;
        RecId                               custTransCount, vendTransCount;
        int                                 ctThread, vtThread;
        real                                ctFactor, vtFactor;
        RTax25DebtModel                     rTax25DebtModel;
        TransDate                           modelCalcDate;

        container splitThreads(real _minFactor)
        {
            int minValue, maxValue;
            minValue = real2int(decRound(maxThreads * _minFactor, 0));
            minValue = (minValue || !_minFactor) ? minValue : 1;
            maxValue = maxThreads - minValue;
            return [minValue, maxValue];
        }

        void createRangedTasks(CustVend_RU _custVend, int _threads, int64 _restTrans, RecId _maxRecId)
        {
            int   i;
            int64 recIdFrom, recIdTo,
              numForThread = _restTrans / _threads;

            for (i = 1; i <= _threads - 1; i++)
            {
                recIdTo = this.getNextRecId(_custVend, numForThread, recIdFrom);
                this.createTasks(_custVend, recIdFrom + 1, recIdTo);
                recIdFrom = recIdTo;
            }
            this.createTasks(_custVend, recIdFrom + 1, _maxRecId);
        }
        ;

        if (regType.badDebtModel())
        {
            rTax25DebtModel = RTax25DebtModel::findRecId(regType.badDebtModel());
            if (rTax25DebtModel)
            {
                modelCalcDate = conPeek(RTax25DebtModel::periodDates(rTax25DebtModel.PeriodType, dateTo), 2);
            }
        }

        if (! modelCalcDate || modelCalcDate == dateTo)
        {
            select maxof(RecId), count(OffsetRecId) from custTrans
            where custTrans.TransDate   <  dateTo + 1                                        &&
                  custTrans.TransType   != LedgerTransType::ExchAdjustment                   &&
                  custTrans.TransType   != LedgerTransType::AdvanceAdjustment_RU             &&
                  custTrans.TransType   != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                  custTrans.TransType   != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                  custTrans.TransType   != LedgerTransType::Tax                              &&
                  custTrans.Voucher     != custTrans.LastSettleVoucher                       &&
                  ((registerType        != RTax25RegisterType::DebtDebitInventory            &&
                    registerType        != RTax25RegisterType::DebtDebitInventoryRAP)        ||
                   custTrans.AmountCur  > 0)                                                 &&
                  (registerType         != RTax25RegisterType::DebtCreditInventory           ||
                   (custTrans.AmountCur < 0 && custTrans.Prepayment));
            custTransCount = custTrans.OffsetRecId;

            select maxof(RecId), count(OffsetRecId) from vendTrans
            where vendTrans.TransDate   <  dateTo + 1                                        &&
                  vendTrans.TransType   != LedgerTransType::ExchAdjustment                   &&
                  vendTrans.TransType   != LedgerTransType::AdvanceAdjustment_RU             &&
                  vendTrans.TransType   != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                  vendTrans.TransType   != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                  vendTrans.TransType   != LedgerTransType::Tax                              &&
                  vendTrans.Voucher     != vendTrans.LastSettleVoucher                       &&
                  ((registerType        != RTax25RegisterType::DebtDebitInventory            &&
                    registerType        != RTax25RegisterType::DebtDebitInventoryRAP)        ||
                   (vendTrans.AmountCur > 0 && vendTrans.Prepayment))                        &&
                  (registerType         != RTax25RegisterType::DebtCreditInventory           ||
                   vendTrans.AmountCur  < 0);
            vendTransCount = vendTrans.OffsetRecId;
        }

        if (custTransCount + vendTransCount)
        {
            ctFactor = custTransCount / (custTransCount + vendTransCount);
            vtFactor = vendTransCount / (custTransCount + vendTransCount);

            if (ctFactor < vtFactor)
            {
                [ctThread, vtThread] = splitThreads(ctFactor);
            }
            else
            {
                [vtThread, ctThread] = splitThreads(vtFactor);
            }
            if (ctThread)
            {
                createRangedTasks(CustVend_RU::Cust, ctThread, custTransCount, custTrans.RecId);
            }
            if (vtThread)
            {
                createRangedTasks(CustVend_RU::Vend, vtThread, vendTransCount, vendTrans.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextRecId</Name>
				<Source><![CDATA[
    private RecId getNextRecId(CustVend_RU _custVend, RecId _top, RecId _from)
    {
        Statement                     statement;
        str                           sqlStr;
        SqlStatementExecutePermission permission;
        ResultSet                     resultSet;
        SqlSystem                     sqlSystem = new sqlSystem();
        Connection                    connecton = new Connection();
        DictTable                     dt = new DictTable(_custVend == CustVend_RU::Cust ?
                                                         tablenum(CustTrans) : tablenum(VendTrans));
        ;

        sqlStr  = 'SELECT MAX(RECID) FROM ';
        sqlStr += '(SELECT TOP ' + int642str(_top) + ' RECID FROM ' + dt.name(DbBackend::Sql);
        sqlStr += ' WHERE DataAreaId = ' + sqlSystem.sqlLiteral(registerJournalTrans.dataAreaId);
        sqlStr += ' AND RECID > ' + sqlSystem.sqlLiteral(_from);
        sqlStr += ' AND TransDate < ' + sqlSystem.sqlLiteral(dateFrom);
        sqlStr += ' AND TransType != ' + sqlSystem.sqlLiteral(LedgerTransType::ExchAdjustment);
        sqlStr += ' AND TransType != ' + sqlSystem.sqlLiteral(LedgerTransType::AdvanceAdjustment_RU);
        sqlStr += ' AND TransType != ' + sqlSystem.sqlLiteral(LedgerTransType::RTax25_BadDebtCreditAmortisation);
        sqlStr += ' AND TransType != ' + sqlSystem.sqlLiteral(LedgerTransType::RTax25_BadDebtDebitAmortisation);
        sqlStr += ' AND TransType != ' + sqlSystem.sqlLiteral(LedgerTransType::Tax);
        sqlStr += ' AND Voucher != LastSettleVoucher';

        if (registerType == RTax25RegisterType::DebtDebitInventory ||
            registerType == RTax25RegisterType::DebtDebitInventoryRAP)
        {
            sqlStr += ' AND AmountCur > 0';
            if (_custVend == CustVend_RU::Vend)
            {
                sqlStr += ' AND Prepayment = ' + sqlSystem.sqlLiteral(NoYes::Yes);
            }
        }
        else
        {
            sqlStr += ' AND AmountCur < 0';
            if (_custVend == CustVend_RU::Cust)
            {
                sqlStr += ' AND Prepayment = ' + sqlSystem.sqlLiteral(NoYes::Yes);
            }
        }

        sqlStr += ' ORDER BY RECID ASC';
        sqlStr += ') as A';

        statement = connecton.createStatement();
        permission = new SqlStatementExecutePermission(sqlStr);
        permission.assert();
        resultSet = statement.executeQuery(sqlStr);
        CodeAccessPermission::revertAssert();

        resultSet.next();
        return resultSet.getInt64(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        super(_registerJournalTrans, _batch);

        if (this.isInBatch())
        {
            maxThreads = RTax25RegisterParameters::find(registerId, 1).Parameter ?
                         str2int(RTax25RegisterParameters::find(registerId, 1).Parameter) :
                         0;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCalc</Name>
				<Source><![CDATA[
    public void postCalc()
    {
    //   super(); do not change the register status
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>