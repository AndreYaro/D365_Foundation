<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTReportService_NO</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class SAFTReportService_NO extends SAFTReportService_Standard_W
{
    private const str DataContractObjectSuffix = '_NO';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs GER-configuration.
    /// </summary>
    /// <param name = "_dataContract">
    /// A data contract containing user's input.
    /// </param>
    public void run(SAFTReportContract_NO _dataContract)
    {
        dataContract = _dataContract;
        this.initQueriesForReport();
        this.applyParametersToQuery();
        this.runReport(dataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpTablesToContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all temporary tables to be passed in GER-configuration to the data base context.
    /// </summary>
    /// <param name = "_databaseContext">
    /// The instantiated object of the electronic reporting context to add temporarily tables to.
    /// </param>
    protected void addTmpTablesToContext(ERModelDefinitionDatabaseContext _databaseContext)
    {
        super(_databaseContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupLedgerTurnoverAndBalnceDP</Name>
				<Source><![CDATA[
    internal protected void setupLedgerTurnoverAndBalnceDP(LedgerTurnoverAndBalanceDP _provider)
    {
        LedgerTurnoverAndBalanceContract trialBalanceContract = _provider.parmDataContract();
        trialBalanceContract.parmPrintZeroBalances(true);
        _provider.parmDataContract(trialBalanceContract);
        
        Query mainAccountQuery = new Query();
        QueryBuildDataSource mainAccountDs = mainAccountQuery.addDataSource(tableNum(MainAccount));
        QueryBuildDataSource mainAccountUserModifiedDs = userModifiedQuery.dataSourceTable(tableNum(MainAccount));
        SysQuery::copyDataSource(mainAccountUserModifiedDs, mainAccountDs, true);
        this.copyFilters(userModifiedQuery, mainAccountQuery, mainAccountDs);

        _provider.parmQuery(mainAccountQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyParametersToQuery</Name>
				<Source><![CDATA[
    private void applyParametersToQuery()
    {
        SAFTReportContract_NO reportContract = dataContract as SAFTReportContract_NO;

        if (reportContract
            && !reportContract.parmIncludeZeroLines()
            && generalJournalQuery)
        {
            QueryBuildDataSource generalJournalViewDs = generalJournalQuery.dataSourceTable(tableNum(GeneralJournalForGDPdUView));

            findOrCreateRange_W(generalJournalViewDs, fieldNum(GeneralJournalForGDPdUView, GeneralJournalAccountEntryAccountingCurrencyAmount), SysQuery::valueNot(0));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProcessedObjectParameters</Name>
				<Source><![CDATA[
    protected void addProcessedObjectParameters(ERIFormatMappingRun _erRun)
    {
        super(_erRun);

        _erRun.withCreatingObjectParameter(this.getERModelName(), SAFTConstants_W::ERReportContractDatasourceName + DataContractObjectSuffix, dataContract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>