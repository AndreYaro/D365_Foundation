<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalCheckPostLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalCheckPostLedger</c> class is used when checking and posting a journal.
/// </summary>
/// <remarks>
///    The <c>JournalCheckPostLedger</c> class posts in Ledger. The module specific implementation must
///    inherit either the <c>JournalCheckPost</c> or the <c>JournalCheckPostLedger</c> class depending on
///    whether ledger posting is required or not.
/// </remarks>
// This class is used to check or post journals that have to be posted in the ledger module
abstract class JournalCheckPostLedger extends JournalCheckPost
{
    #DEFINE.CurrentVersion(10)
    #LOCALMACRO.CurrentList
        checkOnlyVoucher,
        voucher
    #ENDMACRO

    // Parameters
    boolean                 checkOnlyVoucher;
    Voucher                 voucher;

    // Dialog
    DialogField             dialogCheckOnlyVoucher;

    // Status variable
    boolean                 voucherDrawed;

    // Update result
    Integer                 numOfPostedVoucher;

    // Global objects
    Set                     setLedgerTransDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean ok = true;

        if (journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Post &&
            journalTableData.journalVoucherNum().numberSequenceTable().Manual)
        {
            transferErrors = false;

            ok = checkFailed(strFmt("@SYS71663",journalTableData.journalVoucherNum().numberSequenceTable().NumberSequence));
        }

        ok = ok && super(_journalTransList);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLedgerTransDate</Name>
				<Source><![CDATA[
    protected boolean checkLedgerTransDate(TransDate _transDate)
    {
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        RecId                   calendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());

        if (! setLedgerTransDate)
        {
            setLedgerTransDate = new Set(Types::Date);
        }

        if (! setLedgerTransDate.in(_transDate))
        {
            fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(calendarRecId,_transDate);

            if (! fiscalCalendarPeriod)
            {
                return checkFailed(strFmt("@SYS17614",date2StrUsr(_transDate, DateFlags::FormatAll)));
            }

            if (fiscalCalendarPeriod.currentLedgerPeriodStatus() !=  FiscalPeriodStatus::Open)
            {
                return checkFailed(strFmt("@SYS17615",date2StrUsr(_transDate, DateFlags::FormatAll)));
            }

            if (!LedgerFiscalCalendar::checkModuleIsOpen(this.ledgerSysModule(), _transDate,fiscalCalendarPeriod))
            {
                return false;
            }

            setLedgerTransDate.add(_transDate);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans(JournalTransData  _journalTransData)
    {
        boolean ok = super(_journalTransData);

        if (this.mustCheckLedgerTransDate(_journalTransData))
        {
            ok = ok && this.checkLedgerTransDate(_journalTransData.journalTrans().TransDate);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckLedgerTransDate</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustCheckLedgerTransDate(JournalTransData  _journalTransData)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <returns>
    ///    An object of <c>runbaseDialogable</c>.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built either by using the <c>dialog</c> system or by using a class that is created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        super();

        if (journalCheckPostType == JournalCheckPostType::Check && voucher)
        {
            dialogCheckOnlyVoucher  = dialog.addField(enumStr(NoYes),strFmt("@SYS69031",voucher),strFmt("@SYS69032",voucher));
            dialogCheckOnlyVoucher.value(checkOnlyVoucher);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (dialogCheckOnlyVoucher)
        {
            checkOnlyVoucher = dialogCheckOnlyVoucher.value();
        }
        else
        {
            checkOnlyVoucher = false;
        }

        voucher = checkOnlyVoucher ? voucher : '';

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedLines</Name>
				<Source><![CDATA[
    protected boolean hasChangedLines()
    {
        return voucherDrawed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransError</Name>
				<Source><![CDATA[
    protected boolean hasTransError(JournalTransMap _journalTrans)
    {
        return (super(_journalTrans) || journalTableData.journalErrorVoucherList().find(_journalTrans.Voucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoResult</Name>
				<Source><![CDATA[
    protected void infoResult()
    {
        if (! showInfoResult)
        {
            return;
        }

        if (journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Post)
        {
            super();
        }
        else
        {
            if (journalCheckPostType == JournalCheckPostType::Check)
            {
                if (! journalTableData.journalErrorTransList().count() && ! journalTableData.journalErrorVoucherList().count() && checkJournalResult)
                {
                    if (checkOnlyVoucher)
                    {
                        info(strFmt("@SYS26544",voucher));
                    }
                    else
                    {
                        info("@SYS17146");
                    }
                }
                else
                {
                    if (checkOnlyVoucher)
                    {
                        info(strFmt("@SYS69033",voucher));
                    }
                    else
                    {
                        info("@SYS62651");
                        if (journalTableData.journalErrorVoucherList().count())
                        {
                            info(strFmt("@SYS23001",journalTableData.journalErrorVoucherList().count(),journalTableData.journalErrorTransList().count()));
                        }
                    }
                }
            }
            else
            {
                if (journalTableData.journalTable().Posted)
                {
                    info("@SYS5815");
                }
                else
                {
                    info("@SYS23002");
                    if (journalTableData.journalErrorVoucherList().count())
                    {
                        info(strFmt("@SYS23001",journalTableData.journalErrorVoucherList().count(),journalTableData.journalErrorTransList().count()));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalErrorListCount</Name>
				<Source><![CDATA[
    public Integer journalErrorListCount()
    {
        return super() + journalTableData.journalErrorVoucherList().count();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSysModule</Name>
				<Source><![CDATA[
    abstract protected SysModule ledgerSysModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxt</Name>
				<Source><![CDATA[
    protected TransactionTextLarge ledgerTransTxt(JournalTransMap _journalTrans)
    {
        TransactionTxt transactionTxt;

        transactionTxt    = TransactionTxt::construct();
        transactionTxt.setType(this.ledgerTransTxtType());
        transactionTxt.setDate(_journalTrans.TransDate);
        transactionTxt.setVoucher(_journalTrans.Voucher);
        transactionTxt.setKey1(_journalTrans.JournalId);

        if (TransactionTextContext::isTypeSupported(this.ledgerTransTxtType()))
        {
            TransactionTextContext transactionTextContext = TransactionTextContext::newForTransactionType(this.ledgerTransTxtType());
            transactionTextContext.setTableBuffer(_journalTrans);
            transactionTxt.setTransactionTextContext(transactionTextContext);
        }

        return transactionTxt.txt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxtType</Name>
				<Source><![CDATA[
    abstract protected LedgerTransTxt ledgerTransTxtType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    abstract protected LedgerTransType ledgerTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerVoucher</Name>
				<Source><![CDATA[
    protected LedgerVoucher newLedgerVoucher(
        JournalTransMap     _journalTrans,
        boolean             _checkMode)
    {
        LedgerVoucher   ledgerVoucher;
        LedgerVoucherObject ledgerVoucherObject;

        if (_checkMode)
        {
            ledgerVoucher = LedgerVoucher::newLedgerCheck(journalTableData.journalTable().DetailSummary,
                                                                  this.ledgerSysModule(),
                                                                  journalTableData.journalVoucherNum().numberSequenceTable().NumberSequence,
                                                                  false,
                                                                  this.postingType());
        }
        else
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(journalTableData.journalTable().DetailSummary,
                                                                 this.ledgerSysModule(),
                                                                 journalTableData.journalVoucherNum().numberSequenceTable().NumberSequence,
                                                                 this.transactionLogType(),
                                                                 strFmt("@SYS76498", journalTableData.journalTable().JournalId, journalTableData.journalTable().Description),
                                                                 false,
                                                                 this.postingType());
        }

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(_journalTrans.Voucher,
                                                              _journalTrans.TransDate,
                                                              this.ledgerSysModule(),
                                                              this.ledgerTransType());

        ledgerVoucherObject.lastTransTxt(this.ledgerTransTxt(_journalTrans));
        ledgerVoucher.parmLedgerJournalId(_journalTrans.JournalId);
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        if (this.ledgerTransTxt(_journalTrans))
        {
            ledgerVoucherObject.parmHasDefaultDescription(true);
        }

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, #CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packJournalErrorTransList</Name>
				<Source><![CDATA[
    protected container packJournalErrorTransList()
    {
        if (voucher && journalTableData)
        {
            return JournalErrorTransList::packInitDb(journalTableData.journalTable());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packJournalErrorVoucherList</Name>
				<Source><![CDATA[
    protected container packJournalErrorVoucherList()
    {
        if (voucher && journalTableData)
        {
            return JournalErrorVoucherList::packInitDb(journalTableData.journalTable());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingType</Name>
				<Source><![CDATA[
    protected boolean postingType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    protected void postJournal(JournalTransList _journalTransList)
    {
        JournalTransList    voucherJournalTransList = journalTableData.journalStatic().newJournalTransList(journalTableData);
        Voucher             voucher_last;

        if (_journalTransList.first())
        {
            do
            {
                if  (! this.hasTransError(_journalTransList.item()))
                {
                    if (voucher_last && _journalTransList.item().Voucher != voucher_last)
                    {
                        this.postVoucher(voucherJournalTransList);
                        voucherJournalTransList = journalTableData.journalStatic().newJournalTransList(journalTableData);
                    }

                    voucherJournalTransList.add(_journalTransList.item());

                    voucher_last = _journalTransList.item().Voucher;
                }
            }
            while (_journalTransList.next());
        }

        if (voucherJournalTransList.count() > 0)
        {
            this.postVoucher(voucherJournalTransList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransLedger</Name>
				<Source><![CDATA[
    protected void postTransLedger(
        JournalTransData    _journalTransData,
        LedgerVoucher       _ledgerVoucher)
    {
        this.postTrans(_journalTransData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVoucher</Name>
				<Source><![CDATA[
    protected void postVoucher(JournalTransList _journalTransList)
    {
        JournalTransData        journalTransData = _journalTransList.journalTransData();
        LedgerVoucher           ledgerVoucher;
        LedgerVoucherObject     ledgerVoucherObject;
        boolean                 hasCustomTransactionText;

        if (_journalTransList.first())
        {
            setPrefix(this.prefixJournalTransVoucher(journalTransData));

            if (TransactionTextContext::isTypeSupported(this.ledgerTransTxtType()))
            {
                hasCustomTransactionText = true;
            }

            ledgerVoucher = this.newLedgerVoucher(_journalTransList.item(),false);

            do
            {
                var logger = InventInstrumentationLogger::createLogger(classStr(JournalCheckPostLedger));
                var activity = logger.activity(methodStr(JournalCheckPostLedger, postVoucher));

                using (var activityContext = logger.activityContext(activity))
                {
                    activityContext.addCustomProperty('Journal Id', journalTransData.journalTableData().journalTable().JournalId);
                    activityContext.addCustomProperty('Journal Type', int2Str(journalTransData.journalTableData().journalTable().JournalType));
                    activityContext.addCustomProperty('Line Number', any2Str(_journalTransList.item().LineNum));
                    if (hasCustomTransactionText)
                    {
                        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
                        ledgerVoucherObject.lastTransTxt(this.ledgerTransTxt(_journalTransList.Item()));
                    }

                    setPrefix(this.prefixJournalTransLine(journalTransData));

                    this.setJournalTransDataThrow(journalTransData);
                    this.postTransLedger(journalTransData, ledgerVoucher);
                }
            }
            while (_journalTransList.next());

            ledgerVoucher.end();

            numOfPostedLines    += _journalTransList.count();
            numOfPostedVoucher  += 1;
        }

        this.setJournalTransDataThrow(null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prefixJournalTransVoucher</Name>
				<Source><![CDATA[
    protected str prefixJournalTransVoucher(JournalTransData _journalTransData)
    {
        return fieldLabelValue(tableNum(JournalTransMap), fieldNum(JournalTransMap,Voucher),_journalTransData.journalTrans().Voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaAddIndirectComponentLedgerTrans</Name>
				<Source><![CDATA[
    // Description:     Add indirect component trans to ledger
    protected void psaAddIndirectComponentLedgerTrans(ProjJournalTrans          _tProjJournalTrans,
                                                      PSAIndirectComponentTrans _tIndirectComponentTrans,
                                                      LedgerVoucher             _oLedgerVoucher)
    {
        LedgerVoucherObject           oLedgerVoucherObject = _oLedgerVoucher.findLedgerVoucherObject();
        LedgerVoucherTransObject      oLedgerTransObject;
        ProjId                        sProjId;
        ProjCategoryId                sCategoryId;
        AmountCur                     rAmountCur;
        ProjLedgerStatus              eLedgerStatus;
        CurrencyExchangeHelper        currencyExchHelper;
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            sProjId                 = _tProjJournalTrans.ProjId;
            eLedgerStatus           = ProjRevRecHelper::getEmplLedgerStatus(ProjTable::find(sProjId));

            if (_tIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Cost    &&
            eLedgerStatus                                  != ProjLedgerStatus::Never           &&
            eLedgerStatus                                  != ProjLedgerStatus::None)
            {
                sCategoryId             = PSAIndirectComponent::find(_tIndirectComponentTrans.IndirectComponentId).ComponentCategory;
                rAmountCur              = CurrencyExchangeHelper::amount(_tIndirectComponentTrans.Amount, _tProjJournalTrans.CurrencyId);
                currencyExchHelper      = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), oLedgerVoucherObject.parmAccountingDate());
                ledgerDimensionDefaultAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(this.PSAIndirectComponentCreditAccount(sProjId, sCategoryId, 0), _tProjJournalTrans.DefaultDimension);
                // Create credit transaction
                oLedgerTransObject      = LedgerVoucherTransObject::newTransactionAmountDefault(oLedgerVoucherObject,
                                                                               LedgerPostingType::ProjPayrollAllocation,
                                                                               ledgerDimensionDefaultAccount,
                                                                                CompanyInfoHelper::standardCurrency(),
                                                                               -rAmountCur,
                                                                               currencyExchHelper);
                _oLedgerVoucher.addTrans(oLedgerTransObject);

                ledgerDimensionDefaultAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(this.PSAIndirectComponentDebitAccount(sProjId, sCategoryId, 0), _tProjJournalTrans.DefaultDimension);

                // Create debit transaction
                oLedgerTransObject      = LedgerVoucherTransObject::newTransactionAmountDefault(oLedgerVoucherObject,
                                                                               this.PSAIndirectComponentPostingType(sProjId, sCategoryId),
                                                                               ledgerDimensionDefaultAccount,
                                                                               CompanyInfoHelper::standardCurrency(),
                                                                               rAmountCur,
                                                                               currencyExchHelper);
                _oLedgerVoucher.addTrans(oLedgerTransObject);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIndirectComponentCreditAccount</Name>
				<Source><![CDATA[
    // Description:     Get the credit account
    protected LedgerDimensionDefaultAccount psaIndirectComponentCreditAccount(ProjId _sProjId, ProjCategoryId _sCategoryId, ProjFundingSourceRefId _sFundingSourceId)
    {
        return ProjPosting::getLedgerDimension(ProjAccountType::PayrollAllocation,
                                             _sProjId,
                                             _sCategoryId,
                                             _sFundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIndirectComponentDebitAccount</Name>
				<Source><![CDATA[
    // Description:     Get the debit account
    protected LedgerDimensionDefaultAccount psaIndirectComponentDebitAccount(ProjId _sProjId, ProjCategoryId _sCategoryId, ProjFundingSourceRefId  _sFundingSourceId)
    {
        LedgerDimensionDefaultAccount       ledgerDimension;
        ProjLedgerStatus                    eLedgerStatus;
        boolean                             bToBeCapitalize;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            eLedgerStatus       = ProjRevRecHelper::getEmplLedgerStatus(ProjTable::find(_sProjId));

            bToBeCapitalize     = ProjLineProperty::find(ProjLinePropertySetup::findLinePropertyId(_sProjId, _sCategoryId)).ToBeCapitalize;

            switch (eLedgerStatus)
            {
                case ProjLedgerStatus::BalanceSheet:
                if (bToBeCapitalize)
                    {
                        ledgerDimension = ProjPosting::getLedgerDimension(ProjAccountType::StatusAccount,
                                                                   _sProjId,
                                                                   _sCategoryId,
                                                                   _sFundingSourceId);
                    }
                    else
                    {
                        ledgerDimension = ProjPosting::getLedgerDimension(ProjAccountType::CostAccount,
                                                                   _sProjId,
                                                                   _sCategoryId, false);
                    }
                    break;
                case ProjLedgerStatus::Operations:
                ledgerDimension = ProjPosting::getLedgerDimension(ProjAccountType::CostAccount,
                                                                   _sProjId,
                                                                   _sCategoryId, false);
                    break;
            }
        }
        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIndirectComponentPostingType</Name>
				<Source><![CDATA[
    // Description:     Get the posting type
    protected LedgerPostingType psaIndirectComponentPostingType(ProjId _sProjId, ProjCategoryId _sCategoryId)
    {
        ProjLedgerStatus    eLedgerStatus;
        boolean             bToBeCapitalize;
        LedgerPostingType   eLedgerPostingType;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            eLedgerStatus       = ProjRevRecHelper::getEmplLedgerStatus(ProjTable::find(_sProjId));

            bToBeCapitalize     = ProjLineProperty::find(ProjLinePropertySetup::findLinePropertyId(_sProjId, _sCategoryId)).ToBeCapitalize;

            switch (eLedgerStatus)
            {
                case ProjLedgerStatus::BalanceSheet :
                if (bToBeCapitalize)
                    {
                        eLedgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                    }
                    else
                    {
                        eLedgerPostingType = LedgerPostingType::ProjCost;
                    }
                    break;
                case ProjLedgerStatus::Operations   :
                    eLedgerPostingType = LedgerPostingType::ProjCost;
                    break;
            }
        }

        return eLedgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaNewIndirectComponentLedgerVoucher</Name>
				<Source><![CDATA[
    // Description:     ledger voucher
    protected LedgerVoucher psaNewIndirectComponentLedgerVoucher(JournalTransMap    _mJournalTrans)
    {
        LedgerVoucher       oLedgerVoucher;
        LedgerVoucherObject oLedgerVoucherObject;
        NumberSeq           oNumberSeq;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            oNumberSeq     = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedTypeNum(PSAIndirectComponentLedgerTransVoucher)));

            oLedgerVoucher = LedgerVoucher::newLedgerPost(journalTableData.journalTable().DetailSummary,
                                                             this.ledgerSysModule(),
                                                             journalTableData.journalVoucherNum().numberSequenceTable().NumberSequence,
                                                             this.transactionLogType(),
                                                             strFmt("@SYS76498", journalTableData.journalTable().JournalId, journalTableData.journalTable().Description),
                                                             false,
                                                             this.postingType());

            oLedgerVoucherObject = LedgerVoucherObject::newVoucher(oNumberSeq.num(),
                                                              _mJournalTrans.TransDate,
                                                              this.ledgerSysModule(),
                                                              this.ledgerTransType());

            oLedgerVoucherObject.lastTransTxt(this.ledgerTransTxt(_mJournalTrans));

            oLedgerVoucher.parmLedgerJournalId(_mJournalTrans.JournalId);

            oLedgerVoucher.addVoucher(oLedgerVoucherObject);
        }

        return oLedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEnd</Name>
				<Source><![CDATA[
    protected Integer runEnd(boolean _deleteErrors = false)
    {
        Integer             ret;

        journalTableData.journalErrorTransList().deleteDb(voucher);

        ret = super(false);

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostEnd</Name>
				<Source><![CDATA[
    protected Integer runPostEnd()
    {
        JournalTableMap journalTable  = journalTableData.journalTable();
        Integer         ret;

        ret = super();

        if (this.numOfPostedLines() > 0)
        {
            TransactionLog::create(this.transactionLogType(), strFmt("@SYS76498", journalTable.JournalId, journalTable.Description));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostInit</Name>
				<Source><![CDATA[
    protected Integer runPostInit()
    {
        Integer             ret = super();

        numOfPostedVoucher = 0;
        this.updateVoucherDrawPost();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType transactionLogType()
    {
        JournalTableMap     journalTable        = journalTableData.journalTable();
        int                 journalType         = journalTable.JournalType;
        TransactionLogType  transactionLogType  = TransactionLogType::Unspecified;

        if (journalTable.TableId == tableNum(ProdJournalTable))
            switch (journalType)
        {
            case ProdJournalType::Picklist:
                transactionLogType = TransactionLogType::ProdPicklist;
                break;
            case ProdJournalType::ReportFinished:
                transactionLogType = TransactionLogType::ProdReportFinished;
                break;
            case ProdJournalType::RouteCard:
                transactionLogType = TransactionLogType::ProdRouteCard;
                break;
            case ProdJournalType::JobCard:
                transactionLogType = TransactionLogType::ProdJobCard;
                break;
        }

        return transactionLogType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList,base] = _packedClass;
                ret = super(base);
                break;

            default:
                this.initParmDefault();
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferRelations</Name>
				<Source><![CDATA[
    protected void updateTransferRelations(JournalTableData _toJournalTableData)
    {
        JournalError journalError;

        if (journalTableData.journalErrorVoucherList().count()) // Is there any errors on voucher level
        {
            if (journalTableData.journalErrorVoucherList().first())
            {
                do
                {
                    journalError = journalTableData.journalErrorVoucherList().item().data();
                    journalError.JournalId = _toJournalTableData.journalTable().JournalId;
                    journalError.Infolog   = JournalError::replacePrefix(journalError.Infolog,this.prefixJournalTable(journalId),this.prefixJournalTable(journalError.JournalId));
                    _toJournalTableData.journalErrorVoucherList().add(journalError);

                    this.updateTransferRelationsVoucher(journalError.Voucher,
                                                        journalTableData.journalTable().JournalId,
                                                        journalError.JournalId);
                }
                while (journalTableData.journalErrorVoucherList().next());
            }

            _toJournalTableData.journalErrorVoucherList().insertDb();

            info(strFmt("@SYS69439",journalTableData.journalErrorVoucherList().count(),_toJournalTableData.journalTable().JournalId));
        }

        super(_toJournalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferRelationsVoucher</Name>
				<Source><![CDATA[
    protected void updateTransferRelationsVoucher(
        Voucher             _voucher,
        JournalId           _fromJournalId,
        JournalId           _toJournalId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherDrawPost</Name>
				<Source><![CDATA[
    protected void updateVoucherDrawPost()
    {
        JournalTransData    journalTransData;
        JournalTransMap     journalTrans;

        JournalTransList    journalTransListNew = journalTableData.journalStatic().newJournalTransList(journalTableData);

        Voucher             voucher_last;

        if (journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Post && ! voucher)
        {
            journalTableData.journalTransList().reset();

            while (journalTableData.journalTransList().next())
            {
                journalTransData    = journalTableData.journalTransList().journalTransData();
                journalTrans        = journalTransData.journalTrans();

                if (! journalTableData.journalErrorTransList().find(journalTrans.LineNum))
                {
                    if (! journalTrans.Voucher)
                    {
                        journalTransData.initVoucher(voucher_last,false,false);

                        if (! journalTrans.Voucher)
                        {
                            this.setJournalTransDataThrow(journalTransData);
                            throw error("@SYS71652");
                        }

                        journalTrans.doUpdate();

                        if (journalTrans.Voucher)
                        {
                            voucherDrawed = true;
                        }
                    }

                    if (! journalTableData.journalVoucherList().find(journalTrans.Voucher))
                    {
                        journalTableData.journalVoucherList().addJournalTransData(journalTransData,false);
                    }

                    journalTableData.journalVoucherList().item().addTotal(journalTrans,false);

                    voucher_last = journalTransData.journalTrans().Voucher;
                }

                journalTransListNew.add(journalTrans);
            }

            journalTableData.journalTransList(journalTransListNew);  // List with voucher numbers
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>