<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightFeatureExtensionValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCatchWeightFeatureExtensionValidator</c> class validates whether any extender have taken a dependency on method marked as obsolete as part of 
/// implementing the catch weight for warehouse management feature.
/// The class contains extension points such that additional methods can be added in case these need to be verified as well, 
/// and extenders with existing dependencies which should remain can opt their model out of the validation in case the dependency is by design.
/// </summary>
[SysObsolete("The feature is now always enabled", false, 31\5\2023)]
final public class WHSCatchWeightFeatureExtensionValidator extends WHSFeatureExtensionValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildObsoletedMethodList</Name>
				<Source><![CDATA[
    protected List buildObsoletedMethodList()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInitialObsoleteMethodList</Name>
				<Source><![CDATA[
    final protected void buildInitialObsoleteMethodList(List _methods)
    {
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsReleaseToWarehouseForm), methodStr(WhsReleaseToWarehouseForm, addInventSumDimFromTransIdDimension)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsReservation), methodStr(WhsReservation, reserveInventory)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSSourceLineUpdater), methodStr(WHSSourceLineUpdater, setParameters)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsSrcLineChangeLoadLineUpdater), methodStr(WhsSrcLineChangeLoadLineUpdater, getloadLineDiffQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(WhsSrcLineChangeLoadLineUpdater), staticMethodStr(WhsSrcLineChangeLoadLineUpdater, newFromParameters)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsUnShip), methodStr(WhsUnShip, cancelDimTrackingWork)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsUnShip), methodStr(WhsUnShip, cancelWork)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsUnShip), methodStr(WhsUnShip, unShip)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(WHSUOMSeqGroupLineConversionEnumerator), staticMethodStr(WHSUOMSeqGroupLineConversionEnumerator, constructHighestToLowest)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(WhsWarehouseRelease), staticMethodStr(WhsWarehouseRelease, getReservedPhysicalQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkCreate), methodStr(WhsWorkCreate, processSplit)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkCreate), methodStr(WhsWorkCreate, splitTmpWorkLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkCreateMixedLPReceiving), methodStr(WHSWorkCreateMixedLPReceiving, createAndPostReturnOrderArrivalJournal)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkCreateReceiving), methodStr(WhsWorkCreateReceiving, registerInventTransferLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkCreateReceiving), methodStr(WhsWorkCreateReceiving, registerInventTransferLineNonLP)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkCreateReceiving), methodStr(WhsWorkCreateReceiving, registerPurchLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, adjustWorkLineQtyUpdate)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, createAndPostTransferJournal)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, createDimTrackingRecords)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, createNextWorkInventTrans)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, createQuarantineWork)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, moveLicensePlate)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, overPickByItem)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, pickFromLicensePlate)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, pickNonLicensePlateCheckDigit)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, updateQtyLeft)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecute), methodStr(WhsWorkExecute, validateShippingOverpick)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(WhsWorkExecute), staticMethodStr(WhsWorkExecute, validateShippingOverpickContainerItemVolumetrics)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassStaticMethod, classNum(WhsWorkExecute), staticMethodStr(WhsWorkExecute, validateShippingOverpickQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkExecutePutAwayToLocation), methodStr(WhsWorkExecutePutAwayToLocation, calculateMoveAllPutAwayQuantity)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkInventTransReservationCollectionBuilder), methodStr(WHSWorkInventTransReservationCollectionBuilder, addFromItem)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineAutoReallocatorBase), methodStr(WHSWorkLineAutoReallocatorBase, calculateInventQtyThatCanBeAutoReallocated)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineAutoReallocatorBase), methodStr(WHSWorkLineAutoReallocatorBase, createTmpReallocatedWorkLines)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineAutoReallocatorBase), methodStr(WHSWorkLineAutoReallocatorBase, reallocateWorkLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineAutoReallocatorProdPick), methodStr(WHSWorkLineAutoReallocatorProdPick, calculateQtyAvailForWorkCreationAboveLocationDims)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineAutoReallocatorProdPick), methodStr(WHSWorkLineAutoReallocatorProdPick, reallocateWorkLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineAutoReallocatorReplenishment), methodStr(WHSWorkLineAutoReallocatorReplenishment, calculateQtyAvailForWorkCreationAboveLocationDims)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineAutoReallocatorReplenishment), methodStr(WHSWorkLineAutoReallocatorReplenishment, reallocateWorkLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineManualReallocatorBase), methodStr(WHSWorkLineManualReallocatorBase, reallocateWorkLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineManualReallocatorBase), methodStr(WHSWorkLineManualReallocatorBase, runManualWorkLineReallocationPostUpdates)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineManualReallocatorBase), methodStr(WHSWorkLineManualReallocatorBase, runShortPickConfirmationPostUpdates)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineManualReallocatorProdPick), methodStr(WHSWorkLineManualReallocatorProdPick, calculateQtyAvailForWorkCreationAboveLocationDims)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineManualReallocatorProdPick), methodStr(WHSWorkLineManualReallocatorProdPick, reallocateWorkLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineReallocationParams), methodStr(WHSWorkLineReallocationParams, getInventQtyToReallocate)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineReallocationParams), methodStr(WHSWorkLineReallocationParams, getTotalReallocatedInventQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineReallocatorBase), methodStr(WHSWorkLineReallocatorBase, adjustWorkLineAndWITQuantities)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineReallocatorBase), methodStr(WHSWorkLineReallocatorBase, calculateQtyAvailForWorkCreationAboveLocationDims)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineReallocatorBase), methodStr(WHSWorkLineReallocatorBase, parmInitialWorkLineInventQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WHSWorkLineReallocatorBase), methodStr(WHSWorkLineReallocatorBase, parmShortPickInventQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkTransactionType), methodStr(WhsWorkTransactionType, reserveOverpickQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::ClassInstanceMethod, classNum(WhsWorkTransactionType), methodStr(WhsWorkTransactionType, validateShippingOverpickQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(InventTransferLine), tableMethodStr(InventTransferLine, updateLoadLines)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(SalesLine), tableMethodStr(SalesLine, maxReleaseQuantity)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableStaticMethod, tableNum(WHSContainerLine), tableStaticMethodStr(WHSContainerLine, createContainerLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSContainerLine), tableMethodStr(WHSContainerLine, getInventoryQuantity)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableStaticMethod, tableNum(WHSContainerTable), tableStaticMethodStr(WHSContainerTable, packItem)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSLoadLine), tableMethodStr(WHSLoadLine, calculateNewInventQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSLoadLine), tableMethodStr(WHSLoadLine, calculateOrigInventQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableStaticMethod, tableNum(WHSLoadLine), tableStaticMethodStr(WHSLoadLine, reserveLoadLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableStaticMethod, tableNum(WHSMixedLicensePlateReceiptLine), tableStaticMethodStr(WHSMixedLicensePlateReceiptLine, receiveLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableStaticMethod, tableNum(WHSProdBOMPool), tableStaticMethodStr(WHSProdBOMPool, adjustWavedQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableStaticMethod, tableNum(WHSProdTable), tableStaticMethodStr(WHSProdTable, pickMore)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableStaticMethod, tableNum(WHSPurchLine), tableStaticMethodStr(WHSPurchLine, registerPurchaseLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSTmpPackingLine), tableMethodStr(WHSTmpPackingLine, addTmpPackLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSTmpPackingLine), tableMethodStr(WHSTmpPackingLine, initializeExistingTmpPackingLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSTmpPackingLine), tableMethodStr(WHSTmpPackingLine, initializeTmpPackingLine)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableStaticMethod, tableNum(WHSWorkFrozen), tableStaticMethodStr(WHSWorkFrozen, createWorkFrozen)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableStaticMethod, tableNum(WHSWorkFrozen), tableStaticMethodStr(WHSWorkFrozen, findAndWriteWorkFrozen)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSWorkInventTrans), tableMethodStr(WHSWorkInventTrans, adjustQuantity)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSWorkInventTrans), tableMethodStr(WHSWorkInventTrans, createTransForSpecificDimensions)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSWorkInventTrans), tableMethodStr(WHSWorkInventTrans, increaseQty)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSWorkInventTrans), tableMethodStr(WHSWorkInventTrans, insertWithSpecificDimensions)));
        _methods.addEnd(new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSWorkQuarantine), tableMethodStr(WHSWorkQuarantine, execute)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildValidatedModuleSet</Name>
				<Source><![CDATA[
    protected Set buildValidatedModuleSet()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableCatchWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the catch weight feature can be enabled.
    /// </summary>
    /// <returns>
    /// true, if the feature can be enabled; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean canEnableCatchWeight()
    {
        return this.canEnableFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportErrors</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public boolean parmReportErrors(boolean _reportErrors = this.parmReportExtensionErrors())
    {
        return this.parmReportExtensionErrors(_reportErrors);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct as an instance of the <c>WHSCatchWeightFeatureExtensionValidator</c> class.
    /// </summary>
    /// <returns>
    /// The class instance.
    /// </returns>
    [Hookable(false)]
    static public WHSCatchWeightFeatureExtensionValidator construct()
    {
        return new WHSCatchWeightFeatureExtensionValidator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>