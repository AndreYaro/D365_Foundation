<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTRReportPurchaseRegisterHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxGSTRReportPurchaseRegisterHelper</c> class is used to provide helper method for purchase register report.
/// </summary>
internal class TaxGSTRReportPurchaseRegisterHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFromDateAndToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets From date and To date of the report, according to financial year in calendar and period specified.
    /// Financial year is a concept for purchase register report, and have format rquirement from legal.
    /// So as to avoid involving a new configuration, we re-used fiscal year of fiscal calendar to define the financial year,
    /// and do some validation to make sure the fiscal year is valid to be a financial year.
    /// </summary>
    /// <param name = "_fiscalCalendarId">The fiscal calendar Id.</param>
    /// <param name = "_financialYear">The financial year.</param>
    /// <param name = "_period">The period.</param>
    /// <returns>The container with From date and To date.</returns>
    public static container getFromDateAndToDate(FiscalCalendarID _fiscalCalendarId, FiscalYearName _financialYear, TaxGSTRTaxPeriod_IN _period)
    {
        TransDate fromDate, toDate;

        if (_fiscalCalendarId && _financialYear)
        {
            TaxGSTRFinancialYear_IN taxGSTRFiscalYear;

            select firstonly StartDate, EndDate from taxGSTRFiscalYear
                where taxGSTRFiscalYear.FiscalYear == _financialYear
                    && taxGSTRFiscalYear.CalendarId == _fiscalCalendarId;

            if (taxGSTRFiscalYear)
            {
                boolean isValid = TaxGSTRReportPurchaseRegisterHelper::validateFinancialYear(taxGSTRFiscalYear.StartDate, taxGSTRFiscalYear.EndDate);

                if (!isValid)
                {
                    error(strFmt("@TaxGSTRReport:FiscalYearFormatErrorMessage",  _financialYear, _fiscalCalendarId));
                }

                if (isValid && _period)
                {
                    Integer financialStartYear = year(taxGSTRFiscalYear.StartDate);
                    Integer financialStartMonth = mthOfYr(taxGSTRFiscalYear.StartDate);

                    Integer periodStartMonth, periodEndMonth;
                    [periodStartMonth, periodEndMonth] = TaxGSTRReportPurchaseRegisterHelper::getReportMonthOfPeriod(_period);

                    fromDate = TaxGSTRReportPurchaseRegisterHelper::getFirstDateOfMonthInFinancialYear(periodStartMonth, financialStartYear, financialStartMonth);

                    if (periodEndMonth)
                    {
                        toDate = endMth(TaxGSTRReportPurchaseRegisterHelper::getFirstDateOfMonthInFinancialYear(periodEndMonth, financialStartYear, financialStartMonth));
                    }
                    else
                    {
                        toDate = endMth(fromDate);
                    }
                }
            }
            else
            {
                error(strFmt("@TaxGSTRReport:FinancialYearIsNotValid", _financialYear, _fiscalCalendarId));
            }
        }

        return [fromDate, toDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinancialYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the financial year.
    /// The financial year must be one-year in length, and starts from month Jan, Apr, Jul, Oct.
    /// </summary>
    /// <param name = "_startDate">The start date.</param>
    /// <param name = "_endDate">The end date.</param>
    /// <returns>True if it is valid; otherwise, false.</returns>
    private static boolean validateFinancialYear(TransDate _startDate, TransDate _endDate)
    {
        boolean isValid;

        isValid = endMth(nextYr(_startDate)) == endMth(nextMth(_endDate));

        if (isValid)
        {
            isValid = mthOfYr(_startDate) mod 3 == 1;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCalendarForFinancialYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default calendar to generate financial year of the report.
    /// It is fiscal calendar of ledger by default.
    /// </summary>
    /// <returns>The fiscal calendar Id.</returns>
    public static FiscalCalendarID getDefaultCalendarForFinancialYear()
    {
        return FiscalCalendar::find(Ledger::fiscalCalendar()).CalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDateOfMonthInFinancialYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first date of the month in financial year specified with start year and start month.
    /// Currently, the financial year must be a one-year in length, e.g. 2020/4/1 to 2021/3/31.
    /// </summary>
    /// <param name = "_month">The month number.</param>
    /// <param name = "_financialStartYear">The fiancial start year number.</param>
    /// <param name = "_financialStartMonth">The fiancial start month number.</param>
    /// <returns>The date.</returns>
    private static TransDate getFirstDateOfMonthInFinancialYear(Integer _month, Integer _financialStartYear, Integer _financialStartMonth)
    {
        TransDate result;
        if (_month < _financialStartMonth)
        {
            result =  mkDate(1, _month, _financialStartYear + 1);
        }
        else
        {
            result = mkDate(1, _month, _financialStartYear);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportMonthOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report start/end month number according to period specified.
    /// </summary>
    /// <param name = "_period">The period.</param>
    /// <returns>The container with start month and end month.</returns>
    private static container getReportMonthOfPeriod(TaxGSTRTaxPeriod_IN _period)
    {
        Integer startMonth, endMonth;

        switch(_period)
        {
            case TaxGSTRTaxPeriod_IN::April:
                startMonth = 4;
                break;
            case TaxGSTRTaxPeriod_IN::May:
                startMonth = 5;
                break;
            case TaxGSTRTaxPeriod_IN::June:
                startMonth = 6;
                break;
            case TaxGSTRTaxPeriod_IN::July:
                startMonth = 7;
                break;
            case TaxGSTRTaxPeriod_IN::August:
                startMonth = 8;
                break;
            case TaxGSTRTaxPeriod_IN::September:
                startMonth = 9;
                break;
            case TaxGSTRTaxPeriod_IN::October:
                startMonth = 10;
                break;
            case TaxGSTRTaxPeriod_IN::November:
                startMonth = 11;
                break;
            case TaxGSTRTaxPeriod_IN::December:
                startMonth = 12;
                break;
            case TaxGSTRTaxPeriod_IN::January:
                startMonth = 1;
                break;
            case TaxGSTRTaxPeriod_IN::February:
                startMonth = 2;
                break;
            case TaxGSTRTaxPeriod_IN::March:
                startMonth = 3;
                break;
            case TaxGSTRTaxPeriod_IN::AprilJun:
                startMonth = 4;
                endMonth = 6;
                break;
            case TaxGSTRTaxPeriod_IN::JulySept:
                startMonth = 7;
                endMonth = 9;
                break;
            case TaxGSTRTaxPeriod_IN::OctDec:
                startMonth = 10;
                endMonth = 12;
                break;
            case TaxGSTRTaxPeriod_IN::JanMar:
                startMonth = 1;
                endMonth = 3;
                break;
        }

        return [startMonth, endMonth];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>