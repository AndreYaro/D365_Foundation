<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayLicensePlateLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to create LP for load.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::LicensePlateLoading)]
class WhsWorkExecuteDisplayLicensePlateLoad extends WHSWorkExecuteDisplay
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        switch (true)
        {
            case _control is WhsControlLicensePlateId:
                var fieldValues = _control.parmContext().fieldValues;
                var controlData = _control.parmContext().controlData;

                if (!WHSLicensePlate::exist(_control.parmData()))
                {
                    if (!controlData.validateLicensePlateQty(_control.parmData()))
                    {
                        return _control.fail(strFmt("@WAX:Error_InvalidLicensePlateQuantity", _control.parmData()));
                    }
                    if (WMSLocation::exist(_control.parmData(), fieldValues.parmInventLocationId()))
                    {
                        return _control.fail(strFmt("@WAX:Error_LicensePlateIdCannotBeSameAsExistingLocationId", _control.parmData()));
                    }

                    fieldValues.parmLicensePlateId(_control.parmData());
                    return true;
                }
                    
                if (WHSLicensePlate::isParentLicensePlate(_control.parmData()))
                {
                    return _control.fail("@WAX3934");
                }

                if (!controlData.validateLicensePlateInLocation(_control.parmData(), true))
                {
                    if (!controlData.validateLicensePlateQty(_control.parmData()))
                    {
                        return _control.fail(strFmt("@WAX:Error_InvalidLicensePlateQuantity", _control.parmData()));
                    }

                    fieldValues.parmLicensePlateId(_control.parmData());
                }
                else
                {
                    fieldValues.parmLicensePlateId(_control.parmData());

                    if (!controlData.validateLicensePlateQty(_control.parmData()))
                    {
                        return _control.fail(strFmt("@WAX:Error_InvalidLicensePlateQuantity", _control.parmData()));
                    }

                    fieldValues.parmItemId(controlData.getItemId());
                    pass.insert(#ContainerType, WHSLicensePlate::find(fieldValues.parmLicensePlateId()).ContainerTypeCode);
                    return true;
                }

                break;
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for LP load screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_location">
    /// Item location id.
    /// </param>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildLPLoad(container       _con,
                          WMSLocationId   _location = '',
                          ItemId          _itemId = '')
    {
        WHSRFControlData    controlData = new WHSRFControlData();
        InventTable         inventTable;
        container           ret = _con;
        WMSLocation         location;
        WHSInventTable      whsInventTable;
        WHSInventStatusId   inventStatusId;
        boolean             disableStatus;
        str                 dateFormat = WHSParameters::getDateFormat(pass.lookupStr(#UserId));

        if (_itemId)
        {
            inventTable = InventTable::find(_itemId);
        }

        ret += [this.buildControl(#RFLabel, 'LPLoad', WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _location, extendedTypeNum(WMSLocationId), '', 0)];

        if (_location && pass.exists(#InventLocationId))
        {
            location = WMSLocation::find(_location, pass.lookup(#InventLocationId));
        }

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];

        if (pass.exists(#ItemId) && pass.lookup(#ItemId) != '')
        {
            whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }
        }

        ret = this.buildProductDimensionsText(ret, inventTable.ItemId);

        ret = this.buildAdjustInTrackingDimensions(ret, inventTable.ItemId);

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];

        if (pass.exists(#LicensePlateId)        &&
            pass.lookup(#LicensePlateId) != ''  &&
            WHSLicensePlate::getTotalHandlingQtyOnLicensePlateWithDelta(pass.lookup(#LicensePlateId)))
        {
            disableStatus = true;
        }

        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));

        if (inventStatusId)
        {
            pass.insert(#SelectedValue, inventStatusId);
            ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookup(#SelectedValue), false);
        }
        else
        {
            ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookupStr(#SelectedValue), !disableStatus);
        }

        ret = this.buildAdjustmentType(ret, '', false, false, false, pass.lookupStr(#SelectedAdjustmentType));

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPLoadLoop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for LP load looping screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_location">
    /// Item location id.
    /// </param>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildLPLoadLoop(container       _con,
                              WMSLocationId   _location = '',
                              ItemId          _itemId = '')
    {
        WHSRFControlData    controlData = new WHSRFControlData();
        InventTable         inventTable;
        container           ret = _con;
        WHSInventTable      whsInventTable;
        int                 numLP       = pass.lookup(#NumLP);
        int                 currentLP   = pass.lookup(#CurrentLP);
        str                 dateFormat = WHSParameters::getDateFormat(pass.lookupStr(#UserId));

        if (_itemId)
        {
            inventTable = InventTable::find(_itemId);
        }

        ret += [this.buildControl(#RFLabel, #LPLoop, strFmt("@WAX1246", currentLP, numLP), 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _location, extendedTypeNum(WMSLocationId), '', 0, false)];

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookup(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

        whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

        if (whsInventTable.rfDescription1)
        {
            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
        }
        else
        {
            ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
        }

        if (whsInventTable.rfDescription2)
        {
            ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
        }

        ret = this.buildProductDimensionsText(ret, inventTable.ItemId, true, false);

        ret = this.buildTrackingDimensionsText(ret, inventTable.ItemId, null, false, true, false);

        ret += [this.buildControl(#RFText, #CurrentQty, "@SYS105177", 1, pass.lookup(#CurrentQty), extendedTypeNum(Qty), '', 0, false)];
        ret += [this.buildControl(#RFText, #CurrentUOM, "@WAX721", 1, pass.lookup(#CurrentUOM), extendedTypeNum(UnitOfMeasureSymbol), '', 0, false)];

        if (pass.exists(#SelectedValue) && pass.lookup(#SelectedValue) != '')
        {
            ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookupStr(#SelectedValue), false);
        }

        ret = this.buildAdjustmentType(ret, '', false, false, false, pass.lookup(#SelectedAdjustmentType));

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP)
        {
            ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, WHSLicensePlate::generateLicensePlateIdNoItem(), extendedTypeNum(WHSLicensePlateId), '', 0)];
        }
        else
        {
            ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        WHSWorkExecuteDisplay   workExecuteDisplay = WHSWorkExecuteDisplay::construct(WHSWorkExecuteMode::LicensePlateLoading);
        WhsWorkExecute          workExecute = WhsWorkExecute::construct();
        InventDim               inventDim;
        Qty                     qty;
        container               ret = conNull();
        container               con = _con;
        int                     hasError = 0;
        container               tmpFieldValues;
        boolean                 complete;
        WHSRFPassthrough        fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean                 addCancel = true;
        int                     numLP;
        Qty                     finalQty;
        UnitOfMeasureSymbol     finalUnitId;
        InventHandlingQty       inventHandlingQty;

        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        if (!pass.exists(#InventLocationId))
        {
            pass.insert(#InventLocationId, WHSWorkUserSession::find(userId).InventLocationId);
            pass.insert(#InventSiteId, InventLocation::find(pass.lookup(#InventLocationId)).InventSiteId);
        }

        hasError = this.hasError(_con);

        switch (step)
        {
            case 0,1:
                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                    pass.remove(#WorkComplete);
                    addCancel = false;
                }
                if (pass.exists(#MenuItem))
                {
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData && !step)
                    {
                        con = this.buildLPLoad(ret,
                                                fieldValues.lookupStr(#WMSLocationId),
                                                fieldValues.lookupStr(#ItemId));

                        con = this.updateModeStepPass(con, mode, step, pass);

                        step = 1;
                    }
                }
                if (step)
                {
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }
                    [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass, fieldValues);
                    hasError = this.hasError(con);
                    if (hasError && conPeek(conPeek(con, 3), #label) != "@WAX866")
                    {
                        ret = con;
                        addCancel = false;
                        break;
                    }
                }
                else
                {
                    step = 1;
                }

                if (   fieldValues.exists(#ItemId)
                    && fieldValues.lookup(#ItemId) != ''
                    && workExecute.itemIsDimTrackingControlled(fieldValues.lookup(#ItemId)))
                {
                    throw error("@WAX5839");
                }

                if (fieldValues.exists(#WMSLocationId)          &&
                    fieldValues.lookup(#WMSLocationId) != ''    &&
                    !WMSLocation::find(fieldValues.lookup(#WMSLocationId), pass.lookup(#InventLocationId)).whsLocationIsLPControlled())
                {
                    throw error("@WAX2975");
                }

                con = this.buildLPLoad(ret,
                                        fieldValues.lookupStr(#WMSLocationId),
                                        fieldValues.lookupStr(#ItemId));

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete)
                    {
                        inventHandlingQty = WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                                   pass.lookup(#UOM),
                                                                                   pass.lookupNum(#Qty),
                                                                                   pass.createProductInventDimFromPass().inventDimId);

                        [numLP, finalQty, finalUnitId] = WHSWorkCreateReceiving::unitizeQuantity(pass.lookup(#ItemId), inventHandlingQty, WHSLicensePlateGroupingPolicy::LicensePlateGrouping, inventDim.InventDimId);

                        pass.insert(#CurrentQty, finalQty);
                        pass.insert(#CurrentUOM, finalUnitId);
                        pass.insert(#NumLP, numLP);
                        pass.insert(#CurrentLP, 1);
                        pass.insert(#RunningQty, inventHandlingQty);

                        step = 2;

                        ret = conNull();
                        ret = this.buildLPLoadLoop(ret, pass.lookup(#WMSLocationId), pass.lookup(#ItemId));
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            case 2:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }
                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                hasError = this.hasError(con);
                if (hasError && conPeek(conPeek(con, 3), #label) != "@WAX866")
                {
                    ret = con;
                    addCancel = false;
                    break;
                }

                if (pass.exists(#WMSLocationId))
                {
                    if (WMSLocation::find(pass.lookup(#WMSLocationId), pass.lookup(#InventLocationId)).whsLocationIsLPControlled()  &&
                        !pass.exists(#LicensePlateId))
                    {
                        fieldValues.insert(#LicensePlateId, '');
                    }
                    if (fieldValues.exists(#LicensePlateId) && WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP)
                    {
                        pass.insert(#LicensePlateId, WHSLicensePlate::generateLicensePlateIdNoItem());
                        fieldValues.insert(#LicensePlateId, WHSLicensePlate::generateLicensePlateIdNoItem());
                    }
                }

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete)
                    {
                        inventDim = pass.createInventDimFromPass();
                        qty = pass.lookupNum(#CurrentQty);

                        if (PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId))
                            && !pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight))
                        {
                            if (WHSInventTable::isCatchWeightTagTracked(pass.lookupStr(#ItemId)))
                            {
                                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, 1);
                                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty,
                                            WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                                   pass.lookup(#CurrentUOM),
                                                                                   qty,
                                                                                   inventDim.inventDimId));

                                step = #CatchWeightTagCapture;
                                ret = conNull();
                                ret = this.buildCWTagCapture(ret, false);
                                break;
                            }
                            else
                            {
                                // Insert nominal weight
                                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight,
                                            PdsCatchWeight::inventQty(pass.lookup(#ItemId),
                                                                      WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                                                             pass.lookup(#CurrentUOM),
                                                                                                             qty,
                                                                                                             inventDim.inventDimId)));
                            }
                        }

                        if (pass.exists(#LicensePlateId))
                        {
                            WHSLicensePlate::createLicensePlate(pass.lookup(#LicensePlateId));

                            WHSAdjustmentTypeCode selectedAdjustmentTypeCode = pass.lookup(#SelectedAdjustmentType);

                            WHSInventAdjustmentCreateParameters params = WHSInventAdjustmentCreateParameters::construct();
                            params.WorkUserId = userId;
                            params.ItemId = pass.lookup(#ItemId);
                            params.InventDim = inventDim;
                            params.AdjustmentQty = qty;
                            params.AdjustmentUnit = pass.lookup(#CurrentUOM);
                            params.WmsLocationId = pass.lookup(#WMSLocationId);
                            params.InventLocationId = inventDim.InventLocationId;
                            params.AdjustmentTypeCode = selectedAdjustmentTypeCode;
                            params.LicensePlateId = pass.lookup(#LicensePlateId);
                            params.WorkCreatedBy = WHSWorkUser::getWorkerEmployeeRecId(userId);
                            params.AdjustmentCatchWeight = pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);

                            if (WHSLocationLicensePlatePositioningSequencer::newFromLicensePlateAtLocation(params.LicensePlateId, inventDim.wmsLocation()).isLicensePlatePositioningAtLocationEnabled())
                            {
                                params.LocationLicensePlatePosition = WHSLocationLicensePlatePositioning::find(params.LicensePlateId).LicensePlatePosition;
                            }

                            params.InventCountingReasonCode = WHSAdjustmentType::find(selectedAdjustmentTypeCode).DefaultCountingReasonCode;

                            WHSInventAdjustmentCreate createAdj = WHSInventAdjustmentCreate::newFromParams(params);
                            createAdj.run();
                        }

                        inventHandlingQty = pass.lookupNum(#RunningQty) - WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                                                                 pass.lookup(#CurrentUOM),
                                                                                                                 pass.lookupNum(#CurrentQty),
                                                                                                                 inventDim.inventDimId);
                                                                                      
                        pass.insert(#RunningQty, inventHandlingQty);

                        if (inventHandlingQty)
                        {
                            [numLP, finalQty, finalUnitId] = WHSWorkCreateReceiving::unitizeQuantity(
                                                                                        pass.lookup(#ItemId),
                                                                                        pass.lookupNum(#RunningQty),
                                                                                        WHSLicensePlateGroupingPolicy::LicensePlateGrouping);
                            pass.insert(#CurrentQty, finalQty);
                            pass.insert(#CurrentUOM, finalUnitId);
                            pass.insert(#CurrentLP, str2int(pass.lookup(#CurrentLP)) + 1);

                            pass.remove(#LicensePlateId);
                            pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);

                            ret = conNull();
                            ret = this.addErrorLabel(ret, "@WAX2976", WHSRFColorText::Success);
                            ret = this.buildLPLoadLoop(ret, pass.lookup(#WMSLocationId), pass.lookup(#ItemID));
                        }
                        else
                        {
                            pass = this.resetPassthrough(con, false);
                            pass.insert(#WorkComplete, 1);
                            con = conPoke(con, 2, pass.pack());
                            step = 0;
                            workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                            ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(conPeek(ret, 2));
                        }
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            case #CatchWeightTagCapture:
                ret = this.processCWTagCaptureLPLoad(hasError, _con);
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        if (addCancel)
        {
            ret = this.addCancelButton(ret, 1, true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor method for class instance.
    /// </summary>
    /// <returns>
    /// A newly created instance of <c>WHSWorkExecuteDisplayLicensePlateLoad</c> class.
    /// </returns>
    static WHSWorkExecuteDisplayLicensePlateLoad construct()
    {
        WHSWorkExecuteDisplayLicensePlateLoad   workExecuteDisplayLicensePlateLoad;

        workExecuteDisplayLicensePlateLoad = new WHSWorkExecuteDisplayLicensePlateLoad();

        return workExecuteDisplayLicensePlateLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCWTagCaptureLPLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the catch weight tag capture display step for license plate loading.
    /// </summary>
    /// <param name="_hasError">
    /// True if mobile device screen has an error message; otherwise False.
    /// </param>
    /// <param name="_con">
    /// The current mobile device container being built.
    /// </param>
    /// <returns>
    /// An updated mobile device container.
    /// </returns>
    // Advanced Warehousing for AX - Blue Horseshoe Solutions, Inc.
    private container processCWTagCaptureLPLoad(
        boolean     _hasError,
        container   _con)
    {
        container           ret = _con;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        
        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        container tmpFieldValues;
        [ret, tmpFieldValues] = WHSRFControlData::processData(ret, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);
        boolean hasError = this.hasError(ret);

        if (hasError)
        {
            return ret;
        }

        if (!fieldValues.empty())
        {
            boolean complete;
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                this.createCatchWeightTagFromPass();
                
                // Remove current Tag Id and increment Tag Counter
                pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag);
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter,
                            (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                // Increment total catch weight value
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight,
                            (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight)
                                + pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight)));

                // Check to see if all tags have been captured
                if (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter)
                    > pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight);
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);

                    step = 2;
                    ret = conNull();
                    ret += [this.buildControl(#RFLabel, #Scan, "@WAX:CatchWeightAssignCatchWeightTag", 1, '', #WHSRFUndefinedDataType, '', 0)];
                    ret = this.updateModeStepPass(ret, mode, step, pass);
                    ret = this.displayForm(ret);
                }
                else
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight);

                    ret = conNull();
                    ret = this.buildCWTagCapture(ret, false);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>