<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentReconciliationClearing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankDocumentReconciliationClearing</c> class contains business logic to clear bank documents as reconciled.
/// </summary>
public class BankDocumentReconciliationClearing
{
    protected List listOfBankDocumentRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doClearBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs clearing of bank document.
    /// </summary>
    protected void doClearBankDocument()
    {
        RefRecId bankDocumentRecId;
        BankReconciliationMatchingMatch bankReconciliationMatchingMatch;
        ListEnumerator enumerator;

        ttsBegin;
        bankReconciliationMatchingMatch = BankReconciliationMatchingMatch::construct(null, BankReconciliationMatchingType::DocumentClear);

        enumerator = listOfBankDocumentRecId.getEnumerator();

        while (enumerator.moveNext())
        {
            bankDocumentRecId = enumerator.current();

            bankReconciliationMatchingMatch.addEntry(
                BankReconciliationMatchingEntry::construct(
                    BankReconciliationMatchingEntryType::BankDocument,
                    bankDocumentRecId));
        }

        bankReconciliationMatchingMatch.matchedEventHandler += eventhandler(this.setDocumentReconciled);

        bankReconciliationMatchingMatch.processMatch();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiallizeListOfDocumentRecid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize bank document record id list.
    /// </summary>
    /// <param name="_containerOfRecid">
    /// A container with bank document record id.
    /// </param>
    protected void initiallizeListOfDocumentRecid(container _containerOfRecid)
    {
        int i;

        for (i = 1; i <= conLen(_containerOfRecid); i++)
        {
            listOfBankDocumentRecId.addEnd(conPeek(_containerOfRecid, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        listOfBankDocumentRecId = new List(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentReconciled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the result as reconciled.
    /// </summary>
    /// <param name="_statementList">
    /// The statement list.
    /// </param>
    /// <param name="_documentList">
    /// The bank document list.
    /// </param>
    /// <param name="_matchingType">
    /// The matching type.
    /// </param>
    public void setDocumentReconciled(
        List _statementList,
        List _documentList,
        BankReconciliationMatchingType _matchingType)
    {
        ListEnumerator enumerator;
        BankReconciliationMatchingEntry matchingEntry;

        ttsBegin;

        enumerator = _documentList.getEnumerator();
        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();
            BankDocumentProcessor::submitBankDocument(BankDocumentTable::find(matchingEntry.parmRefRecId()), BankDocumentStatusChangeType::Reconcile);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBankDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the bank document.
    /// </summary>
    /// <param name="_containerOfDocumentRecId">
    /// A container with batch of record ids.
    /// </param>
    public static void clearBankDocument(container _containerOfDocumentRecId)
    {
        BankDocumentReconciliationClearing clearing;

        clearing = BankDocumentReconciliationClearing::newFromBankDocumentIds(_containerOfDocumentRecId);

        clearing.doClearBankDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>BankDocumentReconciliationClearing</c>.
    /// </summary>
    /// <returns>
    /// A new instance of <c>BankDocumentReconciliationClearing</c>.
    /// </returns>
    public static BankDocumentReconciliationClearing construct()
    {
        BankDocumentReconciliationClearing clearing;

        clearing = new BankDocumentReconciliationClearing();

        return clearing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankDocumentIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>BankDocumentReconciliationClearing</c> from a container of bank document record ids.
    /// </summary>
    /// <param name="_containerOfDocumentRecId">
    /// A container with set of bank document record ids.
    /// </param>
    /// <returns>
    /// A new instance of <c>BankDocumentReconciliationClearing</c>.
    /// </returns>
    public static BankDocumentReconciliationClearing newFromBankDocumentIds(container _containerOfDocumentRecId)
    {
        BankDocumentReconciliationClearing clearing;

        if (_containerOfDocumentRecId && (conLen(_containerOfDocumentRecId) == 1))
        {
            BankDocumentTable bankDocumentTable = BankDocumentTable::find(conPeek(_containerOfDocumentRecId, 1));

            if (bankDocumentTable.BankDocumentBookType == BankDocumentBookType::Cheque
                && bankDocumentTable.IsCancelled == NoYes::Yes)
            {
                clearing = new BankDocumentReconciliationClearingCheque();
            }
            else if (bankDocumentTable.BankDocumentBookType == BankDocumentBookType::CustPayment
                && bankDocumentTable.IsCancelled == NoYes::Yes)
            {
                clearing = new BankDocumentReconciliationClearingCustTrans();
            }
        }

        if (!clearing)
        {
            clearing = new BankDocumentReconciliationClearing();
        }

        clearing.initiallizeListOfDocumentRecid(_containerOfDocumentRecId);

        return clearing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FormDataSource formDataSource;
        BankDocumentTableView bankDocumentTableView;
        container containerOfRecId;

        if (!_args
            || !_args.record()
            || _args.record().TableId != tableNum(BankDocumentTableView)
            || !FormDataUtil::getFormDataSource(_args.record()))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        formDataSource = FormDataUtil::getFormDataSource(_args.record());
        bankDocumentTableView = formDataSource.getFirst(1);

        if (bankDocumentTableView)
        {
            while (bankDocumentTableView)
            {
                containerOfRecId += bankDocumentTableView.BankDocumentTableRecId;
                bankDocumentTableView = formDataSource.getNext();
            }
        }

        BankDocumentReconciliationClearing::clearBankDocument(containerOfRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>