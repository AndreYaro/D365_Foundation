<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxPurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AxPurchLine extends AxApplicationBase implements AxInventSiteDimensionable
{
    PurchLine               purchLine;
    AxInventDim_PurchLine   axInventDim;

    int                     inventItemBarcodeIdx;
    int                     inventTableIdx;
    int                     purchParametersIdx;
    int                     priceParametersIdx;
    int                     returnActionDefaultsIdx;

    int                     axPurchTableIdx;
    int                     priceDisc_PriceIdx;
    int                     priceDisc_LineDiscIdx;
    int                     vendExternalItemDescriptionIdx;
    int                     agreementLineIdx;
    int                     agreementLineDefaultIdx;
    str                     item;
    LineNum                 lineNum;

    boolean                 isIsPriceDiscPriceFieldsSetExecuted;
    boolean                 isPriceDiscPriceFieldsSet;
    boolean                 isIsPriceDiscLineFieldsSetExecuted;
    boolean                 isPriceDiscLineFieldsSet;
    boolean                 isSetPriceDiscLineFieldsOrPriceDiscFieldsExecuted;

    int                     axPurchLineIdx_W;
    #ISOCountryRegionCodes

    int                     axPurchLineIdx_IN;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementLineDefaultRecord</Name>
				<Source><![CDATA[
    public AgreementLineDefault agreementLineDefaultRecord(AgreementLineDefault _agreementLineDefault = null)
    {
        AgreementLineDefault       agreementLineDefault;

        if (!agreementLineDefaultIdx)
        {
            agreementLineDefaultIdx          = this.nextCacheIdx();
        }

        if (!prmisDefault(_agreementLineDefault))
        {
            this.tableCacheInsert(agreementLineDefaultIdx, _agreementLineDefault);
            agreementLineDefault = _agreementLineDefault;
        }
        else
        {
            if (this.tableCacheExist(agreementLineDefaultIdx))
            {
                agreementLineDefault = this.tableCacheLookup(agreementLineDefaultIdx);
            }
            else
            {
                if (purchLine.MatchingAgreementLine)
                {
                    agreementLineDefault = AgreementLine::find(purchLine.MatchingAgreementLine).agreementLineDefault();
                }
                else
                {
                    this.setMatchingAgreementLine();
                    if (!purchLine.RecId && this.axPurchTable().parmMatchingAgreement())
                    {
                        agreementLineDefault = AgreementLine::findLineForAutoMatch(purchLine, this.axPurchTable().parmMatchingAgreement(),true).agreementLineDefault();
                    }
                }
                this.tableCacheInsert(agreementLineDefaultIdx, agreementLineDefault);
            }
        }

        return agreementLineDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementLineRecord</Name>
				<Source><![CDATA[
    public AgreementLine agreementLineRecord(AgreementLine _agreementLine = null)
    {
        AgreementLine       agreementLine;

        if (!agreementLineIdx)
        {
            agreementLineIdx          = this.nextCacheIdx();
        }

        if (!prmisDefault(_agreementLine))
        {
            this.tableCacheInsert(agreementLineIdx, _agreementLine);
            agreementLine = _agreementLine;
        }
        else
        {
            if (this.tableCacheExist(agreementLineIdx))
            {
                agreementLine = this.tableCacheLookup(agreementLineIdx);
            }
            else
            {
                if (purchLine.MatchingAgreementLine)
                {
                    agreementLine = AgreementLine::find(purchLine.MatchingAgreementLine);
                }
                else
                {
                    this.setAgreementLineRecordFields();
                    if (!purchLine.RecId && this.axPurchTable().parmMatchingAgreement())
                    {
                        agreementLine = AgreementLine::findLineForAutoMatch(purchLine, this.axPurchTable().parmMatchingAgreement(),true);
                    }
                }
                this.tableCacheInsert(agreementLineIdx, agreementLine);
            }
        }

        return agreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateWithAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Associates the purchase line with the matching agreement line.
    /// </summary>
    protected void associateWithAgreementLine()
    {
        AgreementLine               agreementLine;

        agreementLine = this.agreementLineRecord();

        if (agreementLine.RecId)
        {
            this.parmMatchingAgreementLine(agreementLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>axInventDim</Name>
				<Source><![CDATA[
    public AxInventDim_PurchLine axInventDim(AxInventDim_PurchLine _axInventDim = axInventDim)
    {
        axInventDim = _axInventDim;

        return axInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>axPurchLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the a instance of related <C>AxPurchLine_IN</C>.
    /// </summary>
    /// <param name="_axPurchLine_IN">
    /// A instance of <C>AxPurchLine_IN</C>. Optional.
    /// </param>
    /// <returns>
    /// A instance of <C>AxPurchLine_IN</C>.
    /// </returns>
    public AxPurchLine_IN axPurchLine_IN(AxPurchLine_IN _axPurchLine_IN = null)
    {
        AxPurchLine_IN  axPurchLine_IN;
        PurchLine_IN    purchLine_IN;

        if (!axPurchLineIdx_IN)
        {
            axPurchLineIdx_IN = this.nextCacheIdx();
        }

        if (!prmisDefault(_axPurchLine_IN))
        {
            axPurchLine_IN = _axPurchLine_IN;

            this.classCacheInsert(axPurchLineIdx_IN, axPurchLine_IN);
            axPurchLine_IN.parentAxBC(this);
        }
        else
        {
            if (this.classCacheExist(axPurchLineIdx_IN))
            {
                axPurchLine_IN = this.classCacheLookup(axPurchLineIdx_IN);
            }
            else
            {
                purchLine_IN.selectForUpdate(true);
                purchLine_IN.data(purchLine.purchLine_IN());

                axPurchLine_IN = AxPurchLine_IN::newPurchLine_IN(purchLine_IN);

                this.classCacheInsert(axPurchLineIdx_IN, axPurchLine_IN);
                axPurchLine_IN.parentAxBC(this);
            }
        }

        return axPurchLine_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axPurchLine_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the a instance of related <C>AxPurchLine_W</C>.
    /// </summary>
    /// <param name="_axPurchLine_W">
    /// A instance of <C>AxPurchLine_W</C>. Optional.
    /// </param>
    /// <returns>
    /// A instance of <C>AxPurchLine_W</C>.
    /// </returns>
    public AxPurchLine_W axPurchLine_W(AxPurchLine_W _axPurchLine_W = null)
    {
        AxPurchLine_W   axPurchLine_W;
        PurchLine_W     purchLine_W;

        if (!axPurchLineIdx_W)
        {
            axPurchLineIdx_W = this.nextCacheIdx();
        }

        if (!prmisDefault(_axPurchLine_W))
        {
            axPurchLine_W = _axPurchLine_W;

            this.classCacheInsert(axPurchLineIdx_W, axPurchLine_W);
            axPurchLine_W.parentAxBC(this);
        }
        else
        {
            if (this.classCacheExist(axPurchLineIdx_W))
            {
                axPurchLine_W = this.classCacheLookup(axPurchLineIdx_W);
            }
            else
            {
                purchLine_W.selectForUpdate(true);
                purchLine_W.data(purchLine.purchLine_W());

                axPurchLine_W = AxPurchLine_W::newPurchLine_W(purchLine_W);

                this.classCacheInsert(axPurchLineIdx_W, axPurchLine_W);
                axPurchLine_W.parentAxBC(this);
            }
        }

        return axPurchLine_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axPurchTable</Name>
				<Source><![CDATA[
    public AxPurchTable axPurchTable(AxPurchTable _axPurchTable = null)
    {
        AxPurchTable axPurchTable;

        if (!axPurchTableIdx)
        {
            axPurchTableIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_axPurchTable))
        {
            this.classCacheInsert(axPurchTableIdx, _axPurchTable);
            axPurchTable = _axPurchTable;
        }
        else
        {
            if (this.classCacheExist(axPurchTableIdx))
            {
                axPurchTable = this.classCacheLookup(axPurchTableIdx);
            }
            else
            {
                this.setPurchId();
                axPurchTable = AxPurchTable::newPurchTable(PurchTable::find(this.parmPurchId()));

                this.classCacheInsert(axPurchTableIdx, axPurchTable);
            }
        }

        return axPurchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateRelatedRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is for updating or creating records that relates to the data in the AxBC class.
    /// </summary>
    /// <remarks>
    /// This is an internal method for the <c>AxBC</c> framework that must be overridden in the individual
    /// <c>AxBC</c> class if there is any code to execute in the <c>AxBC</c> class after the default values
    /// are set and before validation is performed. An example on how to do this can be seen in the
    /// <c>AXSalesLine</c> class.
    /// </remarks>
    protected void createOrUpdateRelatedRecords()
    {
        if (this.isSetMethodsCalledFromSave())
        {
            InventMovement::bufferSetRemainQty(this.currentRecord());

            this.setAxPurchTableFields();
            if (this.axPurchTable().isFieldModified(fieldNum(PurchTable, MarkupGroup)) || this.axPurchTable().isFieldModified(fieldNum(PurchTable, OrderAccount)))
            {
                SysTransactionScopeCache::set(classStr(AxPurchLine), [this.purchLine().TableId, this.purchLine().RecId, this.purchLine().RecVersion], true);

                this.purchLine().createMarkupTrans(this.axPurchTable().purchTable(),true);

                SysTransactionScopeCache::remove(classStr(AxPurchLine), [this.purchLine().TableId, this.purchLine().RecId, this.purchLine().RecVersion]);
            }

            if (TaxParameters::checkTaxParameters_IN() && this.purchLine().fieldChanged(fieldNum(PurchLine, PurchQty)))
            {
                this.purchLine().assessableValue_IN();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    public Common currentRecord(Common _purchLine = purchLine)
    {
        if (!prmisDefault(_purchLine))
        {
            super(_purchLine);
            purchLine = _purchLine as PurchLine;

            if (axPurchLineIdx_IN)
            {
                this.syncPurchLine_IN();
            }
        }
        else
        {
            super();
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an empty record from the table to which this AxBC class relates.
    /// </summary>
    /// <returns>
    ///    An empty record from the table to which this AxBC class relates.
    /// </returns>
    /// <remarks>
    ///    The table to which this AxBC class relates has the same name as the class without the first two
    ///    letters, a and x.
    /// </remarks>
    protected Common emptyRecord()
    {
        PurchLine localPurchLine;
        return localPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an error when an <c>inventDim</c> section is missing in an XML String.
    /// </summary>
    /// <remarks>
    /// The <c>end</c> method is used for processing incoming documents and is run before popping an
    /// <c>AxBC</c> object off the stack. The method is required because <c>AxBC</c> classes have the
    /// <c>AxInventDim</c> class as a child.Therefore this method must throw an error when no inventory
    /// dimension section has been encountered in the XML. This method is intended for internal use only
    /// and should not be called through the interface.
    /// </remarks>
    public void end()
    {
        super();
        lineNum = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMandatoryFieldsExemptionList</Name>
				<Source><![CDATA[
    protected void initMandatoryFieldsExemptionList()
    {
        super();
        this.setParmMethodAsNotMandatory(methodStr(AxPurchLine,parmPurchId));
        this.setParmMethodAsNotMandatory(methodStr(AxPurchLine,parmVendGroup));
        this.setParmMethodAsNotMandatory(methodStr(AxPurchLine,parmCurrencyCode));
        this.setParmMethodAsNotMandatory(methodStr(AxPurchLine,parmVendAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemBarcodeRecord</Name>
				<Source><![CDATA[
    public InventItemBarcode inventItemBarcodeRecord(InventItemBarcode _inventItemBarcode = null)
    {
        InventItemBarcode   inventItemBarcode;

        if (!inventItemBarcodeIdx)
        {
            inventItemBarcodeIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_inventItemBarcode))
        {
            this.tableCacheInsert(inventItemBarcodeIdx, _inventItemBarcode);
            inventItemBarcode = _inventItemBarcode;
        }
        else
        {
            if (this.tableCacheExist(inventItemBarcodeIdx))
            {
                inventItemBarcode = this.tableCacheLookup(inventItemBarcodeIdx);
            }
            else
            {
                this.setInventItemBarcodeRecordFields();
                inventItemBarcode = InventItemBarcode::findPurchBarcodeDimension(this.parmItemId(), InventDim::find(this.parmInventDimId()), '', this.parmPurchUnit());
                this.tableCacheInsert(inventItemBarcodeIdx, inventItemBarcode);
            }
        }

        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteDimensionLink</Name>
				<Source><![CDATA[
    protected InventSiteDimensionLink inventSiteDimensionLink()
    {
        return InventSiteDimensionLink::newDimensionTables(this.purchLine(), this.axInventDim().inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableRecord</Name>
				<Source><![CDATA[
    public InventTable inventTableRecord(InventTable _inventTable = null)
    {
        InventTable   inventTable;

        if (!inventTableIdx)
        {
            inventTableIdx          = this.nextCacheIdx();
        }

        if (!prmisDefault(_inventTable))
        {
            this.tableCacheInsert(inventTableIdx, _inventTable);
            inventTable = _inventTable;
        }
        else
        {
            if (this.tableCacheExist(inventTableIdx))
            {
                inventTable = this.tableCacheLookup(inventTableIdx);
            }
            else
            {
                this.setInventTableRecordFields();
                inventTable = InventTable::find(this.parmItemId());
                this.tableCacheInsert(inventTableIdx, inventTable);
            }
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAxPurchTableFieldsSet</Name>
				<Source><![CDATA[
    public boolean isAxPurchTableFieldsSet()
    {
        return this.isFieldSet(fieldNum(PurchLine, PurchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventItemBarcodeRecordFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isInventItemBarcodeRecordFieldsSet()
    {
        return this.isFieldSet(fieldNum(PurchLine, ItemId))
            || this.isFieldSet(fieldnum(PurchLine, PurchUnit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventTableRecordFieldsSet</Name>
				<Source><![CDATA[
    public boolean isInventTableRecordFieldsSet()
    {
        return this.isFieldSet(fieldNum(PurchLine, ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDisc_FieldsEmpty</Name>
				<Source><![CDATA[
    public boolean isPriceDisc_FieldsEmpty()
    {
        return purchLine.PurchPrice     == 0
            && purchLine.PurchMarkup    == 0
            && purchLine.LinePercent    == 0
            && purchLine.LineDisc       == 0
            && purchLine.MultiLnPercent == 0
            && purchLine.MultiLnDisc    == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDisc_LineDiscFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isPriceDisc_LineDiscFieldsSet()
    {
        AxPurchLine localPurchLine;

        if (!isIsPriceDiscLineFieldsSetExecuted)
        {
            localPurchLine           = this.axOrig() as AxPurchLine;
            isPriceDiscLineFieldsSet =
               this.isFieldSet(fieldNum(PurchLine, ItemId))                                                     ||
               this.isFieldSet(fieldNum(PurchLine, PurchUnit))                                                  ||
               this.isFieldSet(fieldNum(PurchLine, PurchQty))                                                   ||
               (this.axPurchTable().isFieldModified(fieldNum(PurchTable, DeliveryDate)) &&
               !this.purchLine().isInvoiceMatched())                                                            ||
               (this.axPurchTable().isFieldModified(fieldNum(PurchTable, OrderAccount)) &&
                this.priceParametersRecord().isPurchLineDiscVendAccountActive())                                ||
               (this.axPurchTable().isFieldModified(fieldNum(PurchTable, LineDisc))     &&
                !this.purchLine().isInvoiceMatched() &&
                this.priceParametersRecord().isPurchLineDiscGroupActive())                                      ||
               this.isInventTableRecordFieldsSet()                                                              ||
               (this.isInventTableRecordFieldsSet()             &&
                this.inventTableRecord().purchLineDisc() != localPurchLine.inventTableRecord().purchLineDisc()) ||
               (this.axInventDim().isPurchPriceDiscFieldsSet(this.inventTableRecord()) &&
                !this.purchLine().isInvoiceMatched() &&
                this.purchLine().LineDeliveryType != LineDeliveryType::DeliveryLine);
            isIsPriceDiscLineFieldsSetExecuted = true;
        }
        return isPriceDiscLineFieldsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDisc_PriceFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isPriceDisc_PriceFieldsSet()
    {
        if (!isIsPriceDiscPriceFieldsSetExecuted)
        {
            isPriceDiscPriceFieldsSet =
               this.isFieldSet(fieldNum(PurchLine, ItemId))                                             ||
               this.isFieldSet(fieldNum(PurchLine, PurchUnit))                                          ||
               this.isFieldSet(fieldNum(PurchLine, PurchQty))                                           ||
               (   SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                && this.axPurchTable().axPurchTable_RU().isFieldModified(fieldNum(PurchTable_RU, PriceAgreementDate_RU)))    ||
               this.isInventTableRecordFieldsSet()                                                      ||
               (this.axPurchTable().isFieldModified(fieldNum(PurchTable, OrderAccount)) &&
                this.priceParametersRecord().isPurchPriceVendAccountActive())                           ||
               (this.axPurchTable().isFieldModified(fieldNum(PurchTable, PriceGroupId)) &&
                this.priceParametersRecord().isPurchPriceGroupActive() &&
                !this.purchLine().isInvoiceMatched())                                                   ||
               (this.axInventDim().isPurchPriceDiscFieldsSet(this.inventTableRecord()) &&
                !this.purchLine().isInvoiceMatched() &&
                this.purchLine().LineDeliveryType != LineDeliveryType::DeliveryLine);
            isIsPriceDiscPriceFieldsSetExecuted = true;
        }
        return isPriceDiscPriceFieldsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceDisc_LineDiscParamsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>PriceDisc_LineDisc</c> object and sets parameters.
    /// </summary>
    /// <returns>
    /// The initialized <c>PriceDisc_LineDisc</c> record.
    /// </returns>
    protected PriceDisc_LineDisc initPriceDisc_LineDiscParamsSet()
    {
        PriceDisc_LineDisc priceDisc_LineDisc =  new PriceDisc_LineDisc();

        this.setPriceDisc_LineDiscFields();

        this.setPriceDisc_LineDiscParams(priceDisc_LineDisc);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.axPurchLine_W().isFieldSet(fieldNum(PurchLine_W, PriceAgreementDate_RU))
                        && this.axPurchLine_W().parmPriceAgreementDate_RU())
            {
                priceDisc_LineDisc.parmDiscDate(this.axPurchLine_W().parmPriceAgreementDate_RU());
            }
            priceDisc_LineDisc.parmAgreementHeaderExt_RU(this.axPurchTable().axPurchTable_RU().parmAgreementHeaderExt_RU());
        }

        return priceDisc_LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceDisc_PriceParamsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>PriceDisc_Price</c> object and sets parameters.
    /// </summary>
    /// <returns>
    /// The initialized <c>PriceDisc_Price</c> record.
    /// </returns>
    protected PriceDisc_Price initPriceDisc_PriceParamsSet()
    {
        PriceDisc_Price priceDisc_Price = new PriceDisc_Price();

        this.setPriceDisc_PriceFields();

        this.setPriceDisc_PriceParams(priceDisc_Price);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.axPurchLine_W().isFieldSet(fieldNum(PurchLine_W, PriceAgreementDate_RU))
                        && this.axPurchLine_W().parmPriceAgreementDate_RU())
            {
                priceDisc_Price.parmPriceDate(this.axPurchLine_W().parmPriceAgreementDate_RU());
            }
            priceDisc_Price.parmAgreementHeaderExt_RU(this.axPurchTable().axPurchTable_RU().parmAgreementHeaderExt_RU());
            priceDisc_Price.parmAgreementPartnerCode_RU(this.axPurchTable().parmInvoiceAccount());
        }
        

        return priceDisc_Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnActionDefaultsRecordFieldsSet</Name>
				<Source><![CDATA[
    public boolean isReturnActionDefaultsRecordFieldsSet()
    {
        return this.isFieldSet(fieldNum(PurchLine, ReturnActionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStorageDimFieldSet</Name>
				<Source><![CDATA[
    public boolean isStorageDimFieldSet(FieldId _fieldId)
    {
        return this.axInventDim().isFieldSet(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendExternalItemDescriptionFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isVendExternalItemDescriptionFieldsSet()
    {
        return this.isFieldSet(fieldNum(PurchLine, ItemId))                             ||
               this.axInventDim().isFieldSet(fieldNum(InventDim, ConfigId))             ||
               this.axPurchTable().isFieldModified(fieldNum(PurchTable, OrderAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineMatchingPolicy</Name>
				<Source><![CDATA[
    protected PurchMatchingPolicyOption lineMatchingPolicy()
    {
        PurchMatchingPolicyOption matchingPolicy;
        InventTable inventTable = null;
        VendTable vendTable;

        if (this.purchLine().isCategoryBased() == false)
        {
            inventTable = this.inventTableRecord();
        }

        vendTable = this.axPurchTable().orderAccount_VendTableRecord();

        matchingPolicy = PurchMatchingPolicyManager::findMatchingPolicy(inventTable, vendTable);

        return matchingPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        axInventDim = AxInventDim_PurchLine::newAxPurchLine(this);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDistributionTemplate</Name>
				<Source><![CDATA[
    public RefRecId parmAccountingDistributionTemplate(RefRecId _accountingDistributionTemplate = 0)
    {
        if (!prmisDefault(_accountingDistributionTemplate))
        {
            this.setField(fieldNum(PurchLine, AccountingDistributionTemplate), _accountingDistributionTemplate);
        }

        return purchLine.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipPriceDiscCalc</Name>
				<Source><![CDATA[
    public SalesPurchSkipPriceDiscCalc parmSkipPriceDiscCalc(SalesPurchSkipPriceDiscCalc _skipPriceDiscCalc = false)
    {
        if (!prmisDefault( _skipPriceDiscCalc))
        {
            this.setField(fieldNum(PurchLine, SkipPriceDiscCalc), _skipPriceDiscCalc);
        }

        return purchLine.SkipPriceDiscCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmActivityNumber(ProjActivityNumber _activityNumber = '')
    {
        if (!prmisDefault(_activityNumber))
        {
            this.setField(fieldNum(PurchLine, ActivityNumber), _activityNumber);
        }

        return purchLine.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressRefRecId</Name>
				<Source><![CDATA[
    public AddressRefRecId parmAddressRefRecId(AddressRefRecId _addressRefRecId = 0)
    {
        if (!prmisDefault(_addressRefRecId))
        {
            this.setField(fieldNum(PurchLine, AddressRefRecId), _addressRefRecId);
        }

        return purchLine.AddressRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressRefTableId</Name>
				<Source><![CDATA[
    public AddressRefTableId parmAddressRefTableId(AddressRefTableId _addressRefTableId = 0)
    {
        if (!prmisDefault(_addressRefTableId))
        {
            this.setField(fieldNum(PurchLine, AddressRefTableId), _addressRefTableId);
        }

        return purchLine.AddressRefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementSkipAutoLink</Name>
				<Source><![CDATA[
    public AgreementSkipAutoLink parmAgreementSkipAutoLink(AgreementSkipAutoLink _agreementSkipAutoLink = NoYes::No)
    {
        if (!prmisDefault(_agreementSkipAutoLink))
        {
            this.setField(fieldNum(PurchLine, AgreementSkipAutoLink), _agreementSkipAutoLink);
        }

        return purchLine.AgreementSkipAutoLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetBookId</Name>
				<Source><![CDATA[
    public AssetBookIdPurchSalesInvent parmAssetBookId(AssetBookIdPurchSalesInvent _assetBookId = '')
    {
        if (!prmisDefault(_assetBookId))
        {
            this.setField(fieldNum(PurchLine, AssetBookId), _assetBookId);
        }

        return purchLine.AssetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetGroup</Name>
				<Source><![CDATA[
    public AssetGroupId parmAssetGroup(AssetGroupId _assetGroup = '')
    {
        if (!prmisDefault(_assetGroup))
        {
            this.setField(fieldNum(PurchLine, AssetGroup), _assetGroup);
        }

        return purchLine.AssetGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    public AssetIdOpen parmAssetId(AssetIdOpen _assetId = '')
    {
        if (!prmisDefault(_assetId))
        {
            this.setField(fieldNum(PurchLine, AssetId), _assetId);
        }

        return purchLine.AssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTransTypePurch</Name>
				<Source><![CDATA[
    public AssetTransTypePurchEDT parmAssetTransTypePurch(AssetTransTypePurchEDT _assetTransTypePurch = AssetTransTypePurch::Acquisition)
    {
        if (!prmisDefault(_assetTransTypePurch))
        {
            this.setField(fieldNum(PurchLine, AssetTransTypePurch), _assetTransTypePurch);
        }

        return purchLine.AssetTransTypePurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBarCode</Name>
				<Source><![CDATA[
    public PurchBarCode parmBarCode(PurchBarCode _barCode = '')
    {
        if (!prmisDefault(_barCode))
        {
            this.setField(fieldNum(PurchLine, BarCode), _barCode);
        }

        return purchLine.BarCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBarCodeType</Name>
				<Source><![CDATA[
    public BarcodeSetupId parmBarCodeType(BarcodeSetupId _barCodeType = '')
    {
        if (!prmisDefault(_barCodeType))
        {
            this.setField(fieldNum(PurchLine, BarCodeType), _barCodeType);
        }

        return purchLine.BarCodeType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBlocked</Name>
				<Source><![CDATA[
    public LineStopped parmBlocked(LineStopped _blocked = NoYes::No)
    {
        if (!prmisDefault(_blocked))
        {
            this.setField(fieldNum(PurchLine, Blocked), _blocked);
        }

        return purchLine.Blocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCFOPTable_BR</Name>
				<Source><![CDATA[
    public RefRecId parmCFOPTable_BR(RefRecId _cfopTable_BR = 0)
    {
        if (!prmisDefault(_cfopTable_BR))
        {
            this.setField(fieldNum(PurchLine, cfopTable_BR), _cfopTable_BR);
        }

        return purchLine.cfopTable_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComplete</Name>
				<Source><![CDATA[
    public LineComplete parmComplete(LineComplete _complete = NoYes::No)
    {
        if (!prmisDefault(_complete))
        {
            this.setField(fieldNum(PurchLine, Complete), _complete);
        }

        return purchLine.Complete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfirmedDlv</Name>
				<Source><![CDATA[
    public PurchLineDlvDate parmConfirmedDlv(PurchLineDlvDate _confirmedDlv = dateNull())
    {
        if (!prmisDefault(_confirmedDlv))
        {
            this.setField(fieldNum(PurchLine, ConfirmedDlv), _confirmedDlv);
        }

        return purchLine.ConfirmedDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfirmedShipDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal PurchConfirmedShipDate parmConfirmedShipDate(PurchConfirmedShipDate _confirmedShipDate = dateNull())
    {
        if (!prmisDefault(_confirmedShipDate))
        {
            this.setField(fieldNum(PurchLine, ConfirmedShipDate), _confirmedShipDate);
        }

        return purchLine.ConfirmedShipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfirmedTaxAmount</Name>
				<Source><![CDATA[
    public TaxAmountCur parmConfirmedTaxAmount(TaxAmountCur _taxAmount = 0)
    {
        if (!prmisDefault(_taxAmount))
        {
            this.setField(fieldNum(PurchLine, ConfirmedTaxAmount), _taxAmount);
        }

        return purchLine.ConfirmedTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfirmedTaxWriteCode</Name>
				<Source><![CDATA[
    public TaxWriteCode parmConfirmedTaxWriteCode(TaxWriteCode _taxWriteCode = '')
    {
        if (!prmisDefault(_taxWriteCode))
        {
            this.setField(fieldNum(PurchLine, ConfirmedTaxWriteCode), _taxWriteCode);
        }

        return purchLine.ConfirmedTaxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountyOrigDest</Name>
				<Source><![CDATA[
    public AddressCountyOrigDest parmCountyOrigDest(AddressCountyOrigDest   _countyOrigDest = '')
    {
        if (!prmisDefault(_countyOrigDest))
        {
            this.setField(fieldNum(PurchLine, CountyOrigDest), _countyOrigDest);
        }

        return purchLine.CountyOrigDest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCovRef</Name>
				<Source><![CDATA[
    public PurchCovRef parmCovRef(PurchCovRef _covRef = PurchCovRef::None)
    {
        if (!prmisDefault(_covRef))
        {
            this.setField(fieldNum(PurchLine, CovRef), _covRef);
        }

        return purchLine.CovRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateFixedAsset</Name>
				<Source><![CDATA[
    public NoYes parmCreateFixedAsset(NoYes _createFixedAsset = NoYes::No)
    {
        if (!prmisDefault(_createFixedAsset))
        {
            this.setField(fieldNum(PurchLine, CreateFixedAsset), _createFixedAsset);
        }

        return purchLine.CreateFixedAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public str parmCurrencyCode(str _currencyCode = '')
    {
        DictField   dictField;

        if (!prmisDefault(_currencyCode))
        {
            dictField = new DictField(tableNum(PurchLine), fieldNum(PurchLine, CurrencyCode));
            this.validateInboundCurrencyString(_currencyCode,dictField);

            if (this.valueMappingInbound())
            {
                _currencyCode = this.axCurrencyCode(_currencyCode);
            }

            this.setField(fieldNum(PurchLine, CurrencyCode), _currencyCode);
        }

        if (this.valueMappingOutbound())
        {
            return this.axCurrencyCode(purchLine.CurrencyCode);
        }
        return purchLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerRef</Name>
				<Source><![CDATA[
    public CustRefLine parmCustomerRef(CustRefLine _customerRef = '')
    {
        if (!prmisDefault(_customerRef))
        {
            this.setField(fieldNum(PurchLine, CustomerRef), _customerRef);
        }

        return purchLine.CustomerRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustPurchaseOrderFormNum</Name>
				<Source><![CDATA[
    public CustPurchaseOrder parmCustPurchaseOrderFormNum(CustPurchaseOrder _custPurchaseOrderFormNum = '')
    {
        if (!prmisDefault(_custPurchaseOrderFormNum))
        {
            this.setField(fieldNum(PurchLine, CustPurchaseOrderFormNum), _custPurchaseOrderFormNum);
        }

        return purchLine.CustPurchaseOrderFormNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension(DimensionDefault _defaultDimension = 0)
    {
        if (!prmisDefault(_defaultDimension))
        {
            this.setField(fieldNum(PurchLine, DefaultDimension), _defaultDimension);
        }

        return purchLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryDate</Name>
				<Source><![CDATA[
    public PurchLineDlvDate parmDeliveryDate(PurchLineDlvDate _deliveryDate = dateNull())
    {
        if (!prmisDefault(_deliveryDate))
        {
            this.setField(fieldNum(PurchLine, DeliveryDate), _deliveryDate);

            if (#PdsApprovedVendorListEnabled)
            {
                this.pdsCheckApprovedVendorList();
            }
        }

        return purchLine.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryName</Name>
				<Source><![CDATA[
    public Name parmDeliveryName(Name _deliveryName = '')
    {
        if (!prmisDefault(_deliveryName))
        {
            this.setField(fieldNum(PurchLine, DeliveryName), _deliveryName);
        }

        return purchLine.DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressRecId parmDeliveryPostalAddress(LogisticsPostalAddressRecId _deliveryAddress = 0)
    {
        if (!prmisDefault(_deliveryAddress))
        {
            this.setField(fieldNum(PurchLine, DeliveryPostalAddress), _deliveryAddress);
        }

        return purchLine.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryType</Name>
				<Source><![CDATA[
    public TradeLineDlvTypeId parmDeliveryType(TradeLineDlvTypeId _deliveryType = TradeLineDlvType::None)
    {
        if (!prmisDefault(_deliveryType))
        {
            this.setField(fieldNum(PurchLine, DeliveryType), _deliveryType);
        }

        return purchLine.DeliveryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDepreciationStartDate</Name>
				<Source><![CDATA[
    public AssetDepreciationStartDate parmDepreciationStartDate(AssetDepreciationStartDate _depreciationStartDate = dateNull())
    {
        if (!prmisDefault(_depreciationStartDate))
        {
            this.setField(fieldNum(PurchLine, DepreciationStartDate), _depreciationStartDate);
        }

        return purchLine.DepreciationStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscAmount</Name>
				<Source><![CDATA[
    public PurchDiscAmount parmDiscAmount(PurchDiscAmount _discAmount = 0)
    {
        if (!prmisDefault(_discAmount))
        {
            this.setField(fieldNum(PurchLine, DiscAmount), _discAmount);
        }

        return purchLine.DiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscPercent</Name>
				<Source><![CDATA[
    public PurchDiscPercent parmDiscPercent(PurchDiscPercent _discPercent = 0)
    {
        if (!prmisDefault(_discPercent))
        {
            this.setField(fieldNum(PurchLine, DiscPercent), _discPercent);
        }

        return purchLine.DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditableInWorkflow</Name>
				<Source><![CDATA[
    public TradeEditableInWorkflow  parmEditableInWorkflow(TradeEditableInWorkflow  _editableInWorkflow = NoYes::No)
    {
        if (!prmisDefault(_editableInWorkflow))
        {
            this.setField(fieldNum(PurchLine, EditableInWorkflow), _editableInWorkflow);
        }

        return purchLine.EditableInWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExternalItemId</Name>
				<Source><![CDATA[
    public PurchExternalItemId parmExternalItemId(PurchExternalItemId _externalItemId = '')
    {
        if (!prmisDefault(_externalItemId))
        {
            this.setField(fieldNum(PurchLine, ExternalItemId), _externalItemId);
        }

        return purchLine.ExternalItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGSTHSTTaxType_CA</Name>
				<Source><![CDATA[
    public GSTHSTTaxType_CA parmGSTHSTTaxType_CA(GSTHSTTaxType_CA _gstHSTTaxType = GSTHSTTaxType_CA::None)
    {
        if (!prmisDefault(_gstHSTTaxType))
        {
            this.setField(fieldNum(PurchLine, gsthstTaxType_CA), _gstHSTTaxType);
        }

        return purchLine.gsthstTaxType_CA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyInventTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId parmInterCompanyInventTransId(TradeInventTransId _interCompanyInventTransId = '')
    {
        if (!prmisDefault(_interCompanyInventTransId))
        {
            this.setField(fieldNum(PurchLine, InterCompanyInventTransId), _interCompanyInventTransId);
        }

        return purchLine.InterCompanyInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyOrigin</Name>
				<Source><![CDATA[
    public InterCompanyOrigin parmInterCompanyOrigin(InterCompanyOrigin _interCompanyOrigin = InterCompanyOrigin::Source)
    {
        if (!prmisDefault(_interCompanyOrigin))
        {
            this.setField(fieldNum(PurchLine, InterCompanyOrigin), _interCompanyOrigin);
        }

        return purchLine.InterCompanyOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyOSOSourcingInventSiteId</Name>
				<Source><![CDATA[
    public SalesSourcingInventSiteId parmIntercompanyOSOSourcingInventSiteId(SalesSourcingInventSiteId _intercompanyOSOSourcingInventSiteId = '')
    {
        if (!prmisDefault(_intercompanyOSOSourcingInventSiteId))
        {
            this.setField(fieldNum(PurchLine, IntercompanyOSOSourcingInventSiteId), _intercompanyOSOSourcingInventSiteId);
        }

        return purchLine.IntercompanyOSOSourcingInventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntercompanyOSOSourcingInventLocationId</Name>
				<Source><![CDATA[
    public SalesSourcingInventLocationId parmIntercompanyOSOSourcingInventLocationId(SalesSourcingInventLocationId _intercompanyOSOSourcingInventLocationId = '')
    {
        if (!prmisDefault(_intercompanyOSOSourcingInventLocationId))
        {
            this.setField(fieldNum(PurchLine, IntercompanyOSOSourcingInventLocationId), _intercompanyOSOSourcingInventLocationId);
        }

        return purchLine.IntercompanyOSOSourcingInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntrastatFulfillmentDate_HU</Name>
				<Source><![CDATA[
    public IntrastatFulfillmentDate_HU parmIntrastatFulfillmentDate_HU(IntrastatFulfillmentDate_HU _intrastatFulfillmentDate_HU = dateNull())
    {
        if (!prmisDefault(_intrastatFulfillmentDate_HU))
        {
            this.setField(fieldNum(PurchLine, IntrastatFulfillmentDate_HU), _intrastatFulfillmentDate_HU);
        }

        return purchLine.IntrastatFulfillmentDate_HU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = '')
    {
        if (!prmisDefault(_inventDimId))
        {
            this.setField(fieldNum(PurchLine, InventDimId), _inventDimId);
        }

        return purchLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventInvoiceNow</Name>
				<Source><![CDATA[
    public InventQty parmInventInvoiceNow(InventQty _inventInvoiceNow = 0)
    {
        if (!prmisDefault(_inventInvoiceNow))
        {
            this.setField(fieldNum(PurchLine, InventInvoiceNow), _inventInvoiceNow);
        }

        return purchLine.InventInvoiceNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventReceivedNow</Name>
				<Source><![CDATA[
    public InventQty parmInventReceivedNow(InventQty _inventReceivedNow = 0)
    {
        if (!prmisDefault(_inventReceivedNow))
        {
            this.setField(fieldNum(PurchLine, InventReceivedNow), _inventReceivedNow);
        }

        return purchLine.InventReceivedNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventRefId</Name>
				<Source><![CDATA[
    public InventRefId parmInventRefId(InventRefId _inventRefId = '')
    {
        if (!prmisDefault(_inventRefId))
        {
            this.setField(fieldNum(PurchLine, InventRefId), _inventRefId);
        }

        return purchLine.InventRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventRefTransId</Name>
				<Source><![CDATA[
    public InventRefTransId parmInventRefTransId(InventRefTransId _inventRefTransId = '')
    {
        if (!prmisDefault(_inventRefTransId))
        {
            this.setField(fieldNum(PurchLine, InventRefTransId), _inventRefTransId);
        }

        return purchLine.InventRefTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId parmInventTransId(TradeInventTransId _inventTransId = '')
    {
        if (!prmisDefault(_inventTransId))
        {
            this.setField(fieldNum(PurchLine, InventTransId), _inventTransId);
        }

        return purchLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDeleted</Name>
				<Source><![CDATA[
    public VersioningIsDeleted parmIsDeleted(VersioningIsDeleted _isDeleted = NoYes::No)
    {
        if (!prmisDefault(_isDeleted))
        {
            this.setField(fieldNum(PurchLine, IsDeleted), _isDeleted);
        }

        return purchLine.IsDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsFinalized</Name>
				<Source><![CDATA[
    public PurchLineIsFinalized parmIsFinalized(PurchLineIsFinalized _isFinalized = NoYes::No)
    {
        if (!prmisDefault(_isFinalized))
        {
            this.setField(fieldNum(PurchLine, IsFinalized), _isFinalized);
        }

        return purchLine.IsFinalized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInvoiceMatched</Name>
				<Source><![CDATA[
    public PurchLineIsInvoiceMatched parmIsInvoiceMatched(PurchLineIsInvoiceMatched _isInvoiceMatched = NoYes::No)
    {
        if (!prmisDefault(_isInvoiceMatched))
        {
            this.setField(fieldNum(PurchLine, IsInvoiceMatched), _isInvoiceMatched);
        }

        return purchLine.IsInvoiceMatched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsModified</Name>
				<Source><![CDATA[
    public VersioningIsModified parmIsModified(VersioningIsModified _isModified = NoYes::No)
    {
        if (!prmisDefault(_isModified))
        {
            this.setField(fieldNum(PurchLine, IsModified), _isModified);
        }

        return purchLine.IsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPwp</Name>
				<Source><![CDATA[
    public NoYes parmIsPwp(NoYes _isPwp = NoYes::No)
    {
        if (!prmisDefault(_isPwp))
        {
            this.setField(fieldNum(PurchLine, IsPwp), _isPwp);
        }

        return purchLine.IsPwp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemBOMId</Name>
				<Source><![CDATA[
    public ItemBOMId parmItemBOMId(ItemBOMId _itemBOMId = '')
    {
        if (!prmisDefault(_itemBOMId))
        {
            this.setField(fieldNum(PurchLine, ItemBOMId), _itemBOMId);
        }

        return purchLine.ItemBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public str parmItemId(str _itemId = '')
    {
        DictField   dictField;
        if (!prmisDefault(_itemId))
        {
            dictField = new DictField(tableNum(PurchLine), fieldNum(PurchLine, ItemId));
            this.validateInboundItemIdString(_itemId,dictField);
            if (this.valueMappingInbound())
            {
                item = _itemId;
            }

            this.setField(fieldNum(PurchLine, ItemId), _itemId);
        }

        if (this.valueMappingOutbound())
        {
            return conPeek(this.axPurchItemId(purchLine.VendAccount,purchLine.ItemId,purchLine.inventDim()),1);
        }
        else
        {
            return purchLine.ItemId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemRefType</Name>
				<Source><![CDATA[
    public InventRefType parmItemRefType(InventRefType _itemRefType = InventRefType::None)
    {
        if (!prmisDefault(_itemRefType))
        {
            this.setField(fieldNum(PurchLine, ItemRefType), _itemRefType);
        }

        return purchLine.ItemRefType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemRouteId</Name>
				<Source><![CDATA[
    public ItemRouteId parmItemRouteId(ItemRouteId _itemRouteId = '')
    {
        if (!prmisDefault(_itemRouteId))
        {
            this.setField(fieldNum(PurchLine, ItemRouteId), _itemRouteId);
        }

        return purchLine.ItemRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimension(LedgerDimensionDefaultAccount _ledgerDimension = 0)
    {
        if (!prmisDefault(_ledgerDimension))
        {
            this.setField(fieldNum(PurchLine, LedgerDimension), _ledgerDimension);
        }

        return purchLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmount</Name>
				<Source><![CDATA[
    public PurchLineAmount parmLineAmount(PurchLineAmount _lineAmount = 0)
    {
        if (!prmisDefault(_lineAmount))
        {
            this.setField(fieldNum(PurchLine, LineAmount), _lineAmount);
        }

        return purchLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDeliveryType</Name>
				<Source><![CDATA[
    public LineDeliveryType parmLineDeliveryType(LineDeliveryType _lineDeliveryType = LineDeliveryType::OrderLine)
    {
        if (!prmisDefault(_lineDeliveryType))
        {
            this.setField(fieldNum(PurchLine, LineDeliveryType), _lineDeliveryType);
        }

        return purchLine.LineDeliveryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDisc</Name>
				<Source><![CDATA[
    public PurchLineDisc parmLineDisc(PurchLineDisc _lineDisc = 0)
    {
        if (!prmisDefault(_lineDisc))
        {
            this.setField(fieldNum(PurchLine, LineDisc), _lineDisc);
        }

        return purchLine.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineHeader</Name>
				<Source><![CDATA[
    public LineHeader parmLineHeader(LineHeader _lineHeader = '')
    {
        if (!prmisDefault(_lineHeader))
        {
            this.setField(fieldNum(PurchLine, LineHeader), _lineHeader);
        }

        return purchLine.LineHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNumber</Name>
				<Source><![CDATA[
    public TradeLineNumber parmLineNumber(TradeLineNumber _lineNumber = 0)
    {
        if (!prmisDefault(_lineNumber))
        {
            this.setField(fieldNum(PurchLine, LineNumber), _lineNumber);
        }

        return purchLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinePercent</Name>
				<Source><![CDATA[
    public PurchLinePercent parmLinePercent(PurchLinePercent _linePercent = 0)
    {
        if (!prmisDefault(_linePercent))
        {
            this.setField(fieldNum(PurchLine, LinePercent), _linePercent);
        }

        return purchLine.LinePercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmManualEntryChangepolicy</Name>
				<Source><![CDATA[
    public PriceDiscPolicyManual parmManualEntryChangepolicy(PriceDiscPolicyManual _manualEntryChangepolicy = 0)
    {
        if (!prmisDefault(_manualEntryChangepolicy))
        {
            this.setField(fieldNum(PurchLine, ManualEntryChangepolicy), _manualEntryChangepolicy);
        }

        return purchLine.ManualEntryChangepolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmManualModifiedField</Name>
				<Source><![CDATA[
    public FieldId parmManualModifiedField(FieldId _manualModifiedField = 0)
    {
        if (!prmisDefault(_manualModifiedField))
        {
            this.setField(fieldNum(PurchLine, ManualModifiedField), _manualModifiedField);
        }

        return purchLine.ManualModifiedField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchingAgreementLine</Name>
				<Source><![CDATA[
    public RefRecId parmMatchingAgreementLine(AgreementLineRecId _agreementLineRecId = 0)
    {
        if (!prmisDefault(_agreementLineRecId))
        {
            this.setField(fieldNum(PurchLine, MatchingAgreementLine), _agreementLineRecId);
        }

        return purchLine.MatchingAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchingPolicy</Name>
				<Source><![CDATA[
    public PurchMatchingPolicyOption parmMatchingPolicy(PurchMatchingPolicyOption _matchingPolciy = PurchMatchingPolicyOption::ThreeWayMatch)
    {
        if (!prmisDefault(_matchingPolciy))
        {
            this.setField(fieldNum(PurchLine, MatchingPolicy), _matchingPolciy);
        }

        return purchLine.MatchingPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRDropShipComment</Name>
				<Source><![CDATA[
    public MCRDropShipComment parmMCRDropShipComment(MCRDropShipComment _mcrDropShipComment = "")
    {
        if (!prmisDefault(_mcrDropShipComment))
        {
            this.setField(fieldNum(PurchLine, mcrDropShipComment), _mcrDropShipComment);
        }

        return purchLine.mcrDropShipComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRDropShipment</Name>
				<Source><![CDATA[
    public NoYes parmMCRDropShipment(NoYes _mcrDropShipment = NoYes::No)
    {
        if (!prmisDefault(_mcrDropShipment))
        {
            this.setField(fieldNum(PurchLine, mcrDropShipment), _mcrDropShipment);
        }

        return purchLine.mcrDropShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRDropShipStatus</Name>
				<Source><![CDATA[
    public MCRDropShipStatus parmMCRDropShipStatus(MCRDropShipStatus _mcrDropShipStatus = MCRDropShipStatus::None)
    {
        if (!prmisDefault(_mcrDropShipStatus))
        {
            this.setField(fieldNum(PurchLine, mcrDropShipStatus), _mcrDropShipStatus);
        }

        return purchLine.mcrDropShipStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCROrderLine2PriceHistoryRef</Name>
				<Source><![CDATA[
    public MCROrderLinePriceHistoryReference parmMCROrderLine2PriceHistoryRef(MCROrderLinePriceHistoryReference _mcrOrderLine2PriceHistoryRef = 0)
    {
        if (!prmisDefault(_mcrOrderLine2PriceHistoryRef))
        {
            this.setField(fieldNum(PurchLine, mcrOrderLine2PriceHistoryRef), _mcrOrderLine2PriceHistoryRef);
        }

        return purchLine.mcrOrderLine2PriceHistoryRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnDisc</Name>
				<Source><![CDATA[
    public PurchMultiLnDisc parmMultiLnDisc(PurchMultiLnDisc _multiLnDisc = 0)
    {
        if (!prmisDefault(_multiLnDisc))
        {
            this.setField(fieldNum(PurchLine, MultiLnDisc), _multiLnDisc);
        }

        return purchLine.MultiLnDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiLnPercent</Name>
				<Source><![CDATA[
    public PurchMultiLnPercent parmMultiLnPercent(PurchMultiLnPercent _multiLnPercent = 0)
    {
        if (!prmisDefault(_multiLnPercent))
        {
            this.setField(fieldNum(PurchLine, MultiLnPercent), _multiLnPercent);
        }

        return purchLine.MultiLnPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public ItemFreeTxt parmName(ItemFreeTxt _name = '')
    {
        if (!prmisDefault(_name))
        {
            this.setField(fieldNum(PurchLine, Name), _name);
        }

        return purchLine.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOperationType_MX</Name>
				<Source><![CDATA[
    public VendorOperationType_MX parmOperationType_MX(VendorOperationType_MX _vendorOperationType_MX = VendorOperationType_MX::Blank)
    {
        if (!prmisDefault(_vendorOperationType_MX))
        {
            this.setField(fieldNum(PurchLine, OperationType_MX), _vendorOperationType_MX);
        }

        return purchLine.OperationType_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverDeliveryPct</Name>
				<Source><![CDATA[
    public PurchOverDeliveryPct parmOverDeliveryPct(PurchOverDeliveryPct _overDeliveryPct = 0)
    {
        if (!prmisDefault(_overDeliveryPct))
        {
            this.setField(fieldNum(PurchLine, OverDeliveryPct), _overDeliveryPct);
        }

        return purchLine.OverDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedExtensions</Name>
				<Source><![CDATA[
    public SysExtensionSerializerPackedContainer parmPackedExtensions(SysExtensionSerializerPackedContainer _packedExtensions = conNull())
    {
        if (!prmisDefault(_packedExtensions))
        {
            this.setField(fieldNum(PurchLine, PackedExtensions), _packedExtensions);
        }

        return purchLine.PackedExtensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPDSCalculationId</Name>
				<Source><![CDATA[
    public PDSCalculationId parmPDSCalculationId(PDSCalculationId _pdsCalculationId = '')
    {
        if (!prmisDefault(_pdsCalculationId))
        {
            this.setField(fieldNum(PurchLine, pdsCalculationId), _pdsCalculationId);
        }

        return purchLine.pdsCalculationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWInventReceivedNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to get the PurchLine
    /// PdsCWInventReceivedNow field value.
    /// </summary>
    /// <param name="_qty">CW receive now</param>
    /// <returns>CW receive now</returns>
    public PdsCWQtyReceiveNow parmPdsCWInventReceivedNow(
        PdsCWQtyReceiveNow _qty = 0)
    {
        if (!prmisDefault(_qty))
        {
            this.setField(fieldNum(PurchLine, PdsCWInventReceivedNow), _qty);
        }

        return purchLine.PdsCWInventReceivedNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to get the PurchLine
    /// PdsCWQty field value.
    /// </summary>
    /// <param name="_qty">CW quantity</param>
    /// <returns>CW quantity</returns>
    public PdsCWInventQty parmPdsCWQty(PdsCWInventQty _qty = 0)
    {
        PurchQty purchQty;

        if (!prmisDefault(_qty))
        {
            this.setField(fieldNum(PurchLine, PdsCWQty), _qty);

            if (PdsGlobal::pdsIsCWItem(this.parmItemId()))
            {
                purchQty = PdsCatchWeight::inventQty(
                       purchLine.ItemId,
                       purchLine.PdsCWQty,
                       purchLine.PurchUnit);

                this.parmPurchQty(purchQty);
            }
        }

        return purchLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWRemainInventFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to get the PurchLine
    /// PdsCWRemainInventFinancial field value.
    /// </summary>
    /// <param name="_qty">CW remaining inventory financial</param>
    /// <returns>CW remaining inventory financial</returns>
    public PdsCWInventQty parmPdsCWRemainInventFinancial(PdsCWInventQty _qty = 0)
    {
        if (!prmisDefault(_qty))
        {
            this.setField(fieldNum(PurchLine, PdsCWRemainInventFinancial), _qty);
        }

        return purchLine.PdsCWRemainInventFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method can be call from the AIF framework to get the PurchLine
    /// PdsCWRemainInventPhysical field value.
    /// </summary>
    /// <param name="_qty">CW remaining inventory physical</param>
    /// <returns>CW remaining inventory physical</returns>
    public PdsCWInventQty parmPdsCWRemainInventPhysical(PdsCWInventQty _qty = 0)
    {
        if (!prmisDefault(_qty))
        {
            this.setField(fieldNum(PurchLine, PdsCWRemainInventPhysical), _qty);
        }

        return purchLine.PdsCWRemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanReference</Name>
				<Source><![CDATA[
    public PlanReferenceRefRecId parmPlanReference(PlanReferenceRefRecId _planReference = 0)
    {
        if (!prmisDefault(_planReference))
        {
            this.setField(fieldNum(PurchLine, PlanReference), _planReference);
        }

        return purchLine.PlanReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPort</Name>
				<Source><![CDATA[
    public IntrastatPortId parmPort(IntrastatPortId _port = '')
    {
        if (!prmisDefault(_port))
        {
            this.setField(fieldNum(PurchLine, Port), _port);
        }

        return purchLine.Port;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceUnit</Name>
				<Source><![CDATA[
    public PriceUnit parmPriceUnit(PriceUnit _priceUnit = 0)
    {
        if (!prmisDefault(_priceUnit))
        {
            this.setField(fieldNum(PurchLine, PriceUnit), _priceUnit);
        }

        return purchLine.PriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcurementCategory</Name>
				<Source><![CDATA[
    public PurchCategory parmProcurementCategory(PurchCategory _procurementCategory = 0)
    {
        if (!prmisDefault(_procurementCategory))
        {
            this.setField(fieldNum(PurchLine, ProcurementCategory), _procurementCategory);
        }

        return purchLine.ProcurementCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryId(ProjCategoryId _projCategoryId = '')
    {
        if (!prmisDefault(_projCategoryId))
        {
            this.setField(fieldNum(PurchLine, ProjCategoryId), _projCategoryId);
        }

        return purchLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = '')
    {
        if (!prmisDefault(_projId))
        {
            this.setField(fieldNum(PurchLine, ProjId), _projId);
        }

        return purchLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjLinePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjLinePropertyId(ProjLinePropertyId _projLinePropertyId = '')
    {
        if (!prmisDefault(_projLinePropertyId))
        {
            this.setField(fieldNum(PurchLine, ProjLinePropertyId), _projLinePropertyId);
        }

        return purchLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjSalesCurrencyId</Name>
				<Source><![CDATA[
    public str parmProjSalesCurrencyId(str _projSalesCurrencyId = '')
    {
        DictField   dictField;

        if (!prmisDefault(_projSalesCurrencyId))
        {
            dictField = new DictField(tableNum(PurchLine), fieldNum(PurchLine, ProjSalesCurrencyId));
            this.validateInboundCurrencyString(_projSalesCurrencyId,dictField);

            if (this.valueMappingInbound())
            {
                _projSalesCurrencyId = this.axCurrencyCode(_projSalesCurrencyId);
            }

            this.setField(fieldNum(PurchLine, ProjSalesCurrencyId), _projSalesCurrencyId);
        }

        if (this.valueMappingOutbound())
        {
            return this.axCurrencyCode(purchLine.ProjSalesCurrencyId);
        }
        return purchLine.ProjSalesCurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjSalesPrice</Name>
				<Source><![CDATA[
    public ProjSalesPriceCost parmProjSalesPrice(ProjSalesPriceCost _projSalesPrice = 0)
    {
        if (!prmisDefault(_projSalesPrice))
        {
            this.setField(fieldNum(PurchLine, ProjSalesPrice), _projSalesPrice);
        }

        return purchLine.ProjSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjSalesUnitId</Name>
				<Source><![CDATA[
    public str parmProjSalesUnitId(str _projSalesUnitId = '')
    {
        DictField   dictField;

        if (!prmisDefault(_projSalesUnitId))
        {
            dictField = new DictField(tableNum(PurchLine),fieldNum(PurchLine, ProjSalesUnitId));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_projSalesUnitId,dictField,this.mapPolicy().xmlMapUnitOfMeasureSymbol());
                _projSalesUnitId = this.axUnitOfMeasureSymbol(_projSalesUnitId);
            }
            else
            {
                this.validateInboundString(_projSalesUnitId,dictField);
            }

            this.setField(fieldNum(PurchLine, ProjSalesUnitId), _projSalesUnitId);
        }

        if (this.valueMappingOutbound())
        {
            return this.axUnitOfMeasureSymbol(purchLine.ProjSalesUnitId);
        }
        return purchLine.ProjSalesUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTaxGroupId</Name>
				<Source><![CDATA[
    public ProjTaxGroup parmProjTaxGroupId(ProjTaxGroup _projTaxGroupId = '')
    {
        if (!prmisDefault(_projTaxGroupId))
        {
            this.setField(fieldNum(PurchLine, ProjTaxGroupId), _projTaxGroupId);
        }

        return purchLine.ProjTaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTaxItemGroupId</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup parmProjTaxItemGroupId(ProjTaxItemGroup _projTaxItemGroupId = '')
    {
        if (!prmisDefault(_projTaxItemGroupId))
        {
            this.setField(fieldNum(PurchLine, ProjTaxItemGroupId), _projTaxItemGroupId);
        }

        return purchLine.ProjTaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransId</Name>
				<Source><![CDATA[
    public ProjItemTransId parmProjTransId(ProjItemTransId _projTransId = '')
    {
        if (!prmisDefault(_projTransId))
        {
            this.setField(fieldNum(PurchLine, ProjTransId), _projTransId);
        }

        return purchLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjWorker</Name>
				<Source><![CDATA[
    public HcmWorkerRecId parmProjWorker(HcmWorkerRecId _projWorker = 0)
    {
        if (!prmisDefault(_projWorker))
        {
            this.setField(fieldNum(PurchLine, ProjWorker), _projWorker);
        }

        return purchLine.ProjWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSARetainScheduleId</Name>
				<Source><![CDATA[
    public PSAPurchRetainScheduleId parmPSARetainScheduleId(PSAPurchRetainScheduleId _scheduleId = '')
    {
        if (!prmisDefault(_scheduleId))
        {
            this.setField(fieldNum(PurchLine, psaRetainScheduleId), _scheduleId);
        }

        return purchLine.psaRetainScheduleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPSATotalRetainAmount</Name>
				<Source><![CDATA[
    public AmountCur parmPSATotalRetainAmount(AmountCur _amount = 0)
    {
        if (!prmisDefault(_amount))
        {
            this.setField(fieldNum(PurchLine, psaTotalRetainAmount), _amount);
        }

        return purchLine.psaTotalRetainAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseType</Name>
				<Source><![CDATA[
    public PurchaseType parmPurchaseType(PurchaseType _purchaseType = PurchaseType::Journal)
    {
        if (!prmisDefault(_purchaseType))
        {
            this.setField(fieldNum(PurchLine, PurchaseType), _purchaseType);
        }

        return purchLine.PurchaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchCommitmentLine_PSN</Name>
				<Source><![CDATA[
    public RefRecId parmPurchCommitmentLine_PSN(RefRecId _purchCommitmentLine_PSN = 0)
    {
        if (!prmisDefault(_purchCommitmentLine_PSN))
        {
            this.setField(fieldNum(PurchLine, PurchCommitmentLine_PSN), _purchCommitmentLine_PSN);
        }

        return purchLine.PurchCommitmentLine_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    public PurchIdBase parmPurchId(PurchIdBase _purchId = '')
    {
        if (!prmisDefault(_purchId))
        {
            this.setField(fieldNum(PurchLine, PurchId), _purchId);
        }

        return purchLine.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchMarkup</Name>
				<Source><![CDATA[
    public PurchMarkup parmPurchMarkup(PurchMarkup _purchMarkup = 0)
    {
        if (!prmisDefault(_purchMarkup))
        {
            this.setField(fieldNum(PurchLine, PurchMarkup), _purchMarkup);
        }

        return purchLine.PurchMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchPrice</Name>
				<Source><![CDATA[
    public PurchPrice parmPurchPrice(PurchPrice _purchPrice = 0)
    {
        if (!prmisDefault(_purchPrice))
        {
            this.setField(fieldNum(PurchLine, PurchPrice), _purchPrice);
        }

        return purchLine.PurchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchQty</Name>
				<Source><![CDATA[
    public PurchOrderedQty parmPurchQty(PurchOrderedQty _purchQty = 0)
    {
        if (!prmisDefault(_purchQty))
        {
            this.setField(fieldNum(PurchLine, PurchQty), _purchQty);
        }

        return purchLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReceivedNow</Name>
				<Source><![CDATA[
    public PurchQty parmPurchReceivedNow(PurchQty _purchReceivedNow = 0)
    {
        if (!prmisDefault(_purchReceivedNow))
        {
            this.setField(fieldNum(PurchLine, PurchReceivedNow), _purchReceivedNow);
        }

        return purchLine.PurchReceivedNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqId</Name>
				<Source><![CDATA[
    public PurchReqId parmPurchReqId(PurchReqId _purchReqId = '')
    {
        if (!prmisDefault(_purchReqId))
        {
            this.setField(fieldNum(PurchLine, PurchReqId), _purchReqId);
        }

        return purchLine.PurchReqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReqLineRefId</Name>
				<Source><![CDATA[
    public PurchReqLineRefId parmPurchReqLineRefId(PurchReqLineRefId _purchReqLineRefId = nullValueBaseType(Types::Guid))
    {
        if (!prmisDefault(_purchReqLineRefId))
        {
            this.setField(fieldNum(PurchLine, PurchReqLineRefId), _purchReqLineRefId);
        }

        return purchLine.PurchReqLineRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchStatus</Name>
				<Source><![CDATA[
    public PurchStatus parmPurchStatus(PurchStatus _purchStatus = PurchStatus::None)
    {
        if (!prmisDefault(_purchStatus))
        {
            this.setField(fieldNum(PurchLine, PurchStatus), _purchStatus);
        }

        return purchLine.PurchStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchUnit</Name>
				<Source><![CDATA[
    public str parmPurchUnit(str _purchUnit = '')
    {
        DictField   dictField;

        if (!prmisDefault(_purchUnit))
        {
            dictField = new DictField(tableNum(PurchLine),fieldNum(PurchLine,PurchUnit));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_purchUnit,dictField,this.mapPolicy().xmlMapUnitOfMeasureSymbol());
                _purchUnit = this.axUnitOfMeasureSymbol(_purchUnit);
            }
            else
            {
                this.validateInboundString(_purchUnit,dictField);
            }

            this.setField(fieldNum(PurchLine, PurchUnit), _purchUnit);
        }

        if (this.valueMappingOutbound())
        {
            return this.axUnitOfMeasureSymbol(purchLine.PurchUnit);
        }
        return purchLine.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyOrdered</Name>
				<Source><![CDATA[
    public InventQty parmQtyOrdered(InventQty _qtyOrdered = 0)
    {
        if (!prmisDefault(_qtyOrdered))
        {
            this.setField(fieldNum(PurchLine, QtyOrdered), _qtyOrdered);
        }

        return purchLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRBOPackageLineNum</Name>
				<Source><![CDATA[
    public LineNum parmRBOPackageLineNum(LineNum _lineNum = 0)
    {
        if (!prmisDefault(_lineNum))
        {
            this.setField(fieldNum(PurchLine, rboPackageLineNum), _lineNum);
        }

        return purchLine.rboPackageLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainder</Name>
				<Source><![CDATA[
    public InventQty parmRemainder(InventQty _remainder = 0)
    {
        if (!prmisDefault(_remainder))
        {
            this.setField(fieldNum(PurchLine, Remainder), _remainder);
        }

        return purchLine.Remainder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainInventFinancial</Name>
				<Source><![CDATA[
    public InventQty parmRemainInventFinancial(InventQty _remainInventFinancial = 0)
    {
        if (!prmisDefault(_remainInventFinancial))
        {
            this.setField(fieldNum(PurchLine, RemainInventFinancial), _remainInventFinancial);
        }

        return purchLine.RemainInventFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainInventPhysical</Name>
				<Source><![CDATA[
    public InventQty parmRemainInventPhysical(InventQty _remainInventPhysical = 0)
    {
        if (!prmisDefault(_remainInventPhysical))
        {
            this.setField(fieldNum(PurchLine, RemainInventPhysical), _remainInventPhysical);
        }

        return purchLine.RemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainPurchFinancial</Name>
				<Source><![CDATA[
    public PurchQty parmRemainPurchFinancial(PurchQty _remainPurchFinancial = 0)
    {
        if (!prmisDefault(_remainPurchFinancial))
        {
            this.setField(fieldNum(PurchLine, RemainPurchFinancial), _remainPurchFinancial);
        }

        return purchLine.RemainPurchFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainPurchPhysical</Name>
				<Source><![CDATA[
    public PurchQty parmRemainPurchPhysical(PurchQty _remainPurchPhysical = 0)
    {
        if (!prmisDefault(_remainPurchPhysical))
        {
            this.setField(fieldNum(PurchLine, RemainPurchPhysical), _remainPurchPhysical);
        }

        return purchLine.RemainPurchPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqAttention</Name>
				<Source><![CDATA[
    public PurchReqAttention parmReqAttention(PurchReqAttention _reqAttention = '')
    {
        if (!prmisDefault(_reqAttention))
        {
            this.setField(fieldNum(PurchLine, ReqAttention), _reqAttention);
        }

        return purchLine.ReqAttention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanIdSched</Name>
				<Source><![CDATA[
    public ReqPlanIdSched parmReqPlanIdSched(ReqPlanIdSched _reqPlanIdSched = '')
    {
        if (!prmisDefault(_reqPlanIdSched))
        {
            this.setField(fieldNum(PurchLine, ReqPlanIdSched), _reqPlanIdSched);
        }

        return purchLine.ReqPlanIdSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPOId</Name>
				<Source><![CDATA[
    public ReqPOId parmReqPOId(ReqPOId _reqPOId = '')
    {
        if (!prmisDefault(_reqPOId))
        {
            this.setField(fieldNum(PurchLine, ReqPOId), _reqPOId);
        }

        return purchLine.ReqPOId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestedShipDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal PurchRequestedShipDate parmRequestedShipDate(PurchRequestedShipDate _requestedShipDate = dateNull())
    {
        if (!prmisDefault(_requestedShipDate))
        {
            this.setField(fieldNum(PurchLine, RequestedShipDate), _requestedShipDate);
        }

        return purchLine.RequestedShipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequester</Name>
				<Source><![CDATA[
    public PurchRequester parmRequester(PurchRequester _requester = 0)
    {
        if (!prmisDefault(_requester))
        {
            this.setField(fieldNum(PurchLine, Requester), _requester);
        }

        return purchLine.Requester;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailLineNumEx1</Name>
				<Source><![CDATA[
    public LineNum parmRetailLineNumEx1(LineNum _lineNum = 0)
    {
        if (!prmisDefault(_lineNum))
        {
            this.setField(fieldNum(PurchLine, RetailLineNumEx1), _lineNum);
        }

        return purchLine.RetailLineNumEx1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailPackageId</Name>
				<Source><![CDATA[
    public RetailPackageId parmRetailPackageId(RetailPackageId _packageId = '')
    {
        if (!prmisDefault(_packageId))
        {
            this.setField(fieldNum(PurchLine, RetailPackageId), _packageId);
        }

        return purchLine.RetailPackageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailTempValueEx2</Name>
				<Source><![CDATA[
    public RetailTempValueEx2 parmRetailTempValueEx2(RetailTempValueEx2 _retailTempValueEx2 = 0)
    {
        if (!prmisDefault(_retailTempValueEx2))
        {
            this.setField(fieldNum(PurchLine, RetailTempValueEx2), _retailTempValueEx2);
        }

        return purchLine.RetailTempValueEx2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnActionId</Name>
				<Source><![CDATA[
    public PurchReturnActionId parmReturnActionId(PurchReturnActionId _returnActionId = '')
    {
        if (!prmisDefault(_returnActionId))
        {
            this.setField(fieldNum(PurchLine, ReturnActionId), _returnActionId);
        }

        return purchLine.ReturnActionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnDispositionCodeId</Name>
				<Source><![CDATA[
    public ReturnDispositionCodeId parmReturnDispositionCodeId(ReturnDispositionCodeId _returnDispositionCodeId = '')
    {
        if (!prmisDefault(_returnDispositionCodeId))
        {
            this.setField(fieldNum(PurchLine, ReturnDispositionCodeId), _returnDispositionCodeId);
        }

        return purchLine.ReturnDispositionCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnStatus</Name>
				<Source><![CDATA[
    public ReturnStatusLine parmReturnStatus(ReturnStatusLine _returnStatus = ReturnStatusLine::None)
    {
        if (!prmisDefault(_returnStatus))
        {
            this.setField(fieldNum(PurchLine, ReturnStatus), _returnStatus);
        }

        return purchLine.ReturnStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScrap</Name>
				<Source><![CDATA[
    public NoYes parmScrap(NoYes _scrap = NoYes::No)
    {
        if (!prmisDefault(_scrap))
        {
            this.setField(fieldNum(PurchLine, Scrap), _scrap);
        }

        return purchLine.Scrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceAddress</Name>
				<Source><![CDATA[
    public Addressing parmServiceAddress(Addressing _serviceAddress = '')
    {
        if (!prmisDefault(_serviceAddress))
        {
            this.setField(fieldNum(PurchLine, ServiceAddress), _serviceAddress);
        }

        return purchLine.ServiceAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceDate</Name>
				<Source><![CDATA[
    public DlvDate parmServiceDate(DlvDate _serviceDate = dateNull())
    {
        if (!prmisDefault(_serviceDate))
        {
            this.setField(fieldNum(PurchLine, ServiceDate), _serviceDate);
        }

        return purchLine.ServiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShippingDateConfirmed</Name>
				<Source><![CDATA[
    public SalesShippingDateConfirmed parmShippingDateConfirmed(SalesShippingDateConfirmed _shippingDateConfirmed = dateNull())
    {
        if (!prmisDefault(_shippingDateConfirmed))
        {
            this.setField(fieldNum(PurchLine, ShippingDateConfirmed), _shippingDateConfirmed);
        }
        return purchLine.ShippingDateConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShippingDateRequested</Name>
				<Source><![CDATA[
    public SalesShippingDateRequested parmShippingDateRequested(SalesShippingDateRequested _shippingDateRequested = dateNull())
    {
        if (!prmisDefault(_shippingDateRequested))
        {
            this.setField(fieldNum(PurchLine, ShippingDateRequested), _shippingDateRequested);
        }
        return purchLine.ShippingDateRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipDistributionUpdate</Name>
				<Source><![CDATA[
    [SysObsolete('Update of purchase order header distribution is now deferred to confirmation of submission for review.', true, 30\06\2018)]
    public NoYes parmSkipDistributionUpdate(NoYes _skipDistributionUpdate = NoYes::No)
    {
        if (!prmisDefault(_skipDistributionUpdate))
        {
            this.setField(fieldNum(PurchLine, SkipDistributionUpdate), _skipDistributionUpdate);
        }

        return purchLine.SkipDistributionUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipUpdate</Name>
				<Source><![CDATA[
    public InterCompanySkipUpdate parmSkipUpdate(InterCompanySkipUpdate _skipUpdate = InterCompanySkipUpdate::No)
    {
        if (!prmisDefault(_skipUpdate))
        {
            this.setField(fieldNum(PurchLine, SkipUpdate), _skipUpdate);
        }

        return purchLine.SkipUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
    public RefRecId parmSourceDocumentLine(RefRecId _sourceDocumentLine = 0)
    {
        if (!prmisDefault(_sourceDocumentLine))
        {
            this.setField(fieldNum(PurchLine, SourceDocumentLine), _sourceDocumentLine);
        }

        return purchLine.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatisticValue_LT</Name>
				<Source><![CDATA[
    public LtIntrastatStatisticValue parmStatisticValue_LT(LtIntrastatStatisticValue _statisticValue_LT = 0)
    {
        if (!prmisDefault(_statisticValue_LT))
        {
            this.setField(fieldNum(PurchLine, StatisticValue_LT), _statisticValue_LT);
        }

        return purchLine.StatisticValue_LT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatProcId</Name>
				<Source><![CDATA[
    public IntrastatProcId parmStatProcId(IntrastatProcId _statProcId = '')
    {
        if (!prmisDefault(_statProcId))
        {
            this.setField(fieldNum(PurchLine, StatProcId), _statProcId);
        }

        return purchLine.StatProcId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatTriangularDeal</Name>
				<Source><![CDATA[
    public IntrastatTriangularDeal parmStatTriangularDeal(IntrastatTriangularDeal _statTriangularDeal = NoYes::No)
    {
        if (!prmisDefault(_statTriangularDeal))
        {
            this.setField(fieldNum(PurchLine, StatTriangularDeal), _statTriangularDeal);
        }

        return purchLine.StatTriangularDeal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStockedProduct</Name>
				<Source><![CDATA[
    public TradeStockedProduct parmStockedProduct(TradeStockedProduct _stockedProduct = NoYes::Yes)
    {
        return purchLine.StockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSystemEntryChangePolicy</Name>
				<Source><![CDATA[
    public PriceDiscPolicySystem parmSystemEntryChangePolicy(PriceDiscPolicySystem _systemEntryChangePolicy = 0)
    {
        if (!prmisDefault(_systemEntryChangePolicy))
        {
            this.setField(fieldNum(PurchLine, SystemEntryChangePolicy), _systemEntryChangePolicy);
        }

        return purchLine.SystemEntryChangePolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSystemEntrySource</Name>
				<Source><![CDATA[
    public PriceDiscSystemSource parmSystemEntrySource(PriceDiscSystemSource _systemEntrySource = PriceDiscSystemSource::None)
    {
        if (!prmisDefault(_systemEntrySource))
        {
            this.setField(fieldNum(PurchLine, SystemEntrySource), _systemEntrySource);
        }

        return purchLine.SystemEntrySource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMItemVendRebateGroupId</Name>
				<Source><![CDATA[
    public TAMItemVendRebateGroupId parmTAMItemVendRebateGroupId(TAMItemVendRebateGroupId _tamItemVendRebateGroupId = '')
    {
        if (!prmisDefault(_tamItemVendRebateGroupId))
        {
            this.setField(fieldNum(PurchLine, tamItemVendRebateGroupId), _tamItemVendRebateGroupId);
        }

        return purchLine.tamItemVendRebateGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax1099Amount</Name>
				<Source><![CDATA[
    public Tax1099Amount parmTax1099Amount(Tax1099Amount _tax1099Amount = 0)
    {
        if (!prmisDefault(_tax1099Amount))
        {
            this.setField(fieldNum(PurchLine, Tax1099Amount), _tax1099Amount);
        }

        return purchLine.Tax1099Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax1099Fields</Name>
				<Source><![CDATA[
    public Tax1099FieldsRecId parmTax1099Fields(Tax1099FieldsRecId _tax1099Fields = 0)
    {
        if (!prmisDefault(_tax1099Fields))
        {
            this.setField(fieldNum(PurchLine, Tax1099Fields), _tax1099Fields);
        }

        return purchLine.Tax1099Fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax1099RecId</Name>
				<Source><![CDATA[
    public Tax1099RecId parmTax1099RecId(Tax1099RecId _tax1099RecId = 0)
    {
        if (!prmisDefault(_tax1099RecId))
        {
            this.setField(fieldNum(PurchLine, Tax1099RecId), _tax1099RecId);
        }

        return purchLine.Tax1099RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax1099State</Name>
				<Source><![CDATA[
    public Tax1099State parmTax1099State(Tax1099State _tax1099State = '')
    {
        if (!prmisDefault(_tax1099State))
        {
            this.setField(fieldNum(PurchLine, Tax1099State), _tax1099State);
        }

        return purchLine.Tax1099State;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTax1099StateAmount</Name>
				<Source><![CDATA[
    public Tax1099StateAmount parmTax1099StateAmount(Tax1099StateAmount _tax1099StateAmount = 0)
    {
        if (!prmisDefault(_tax1099StateAmount))
        {
            this.setField(fieldNum(PurchLine, Tax1099StateAmount), _tax1099StateAmount);
        }

        return purchLine.Tax1099StateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAutogenerated</Name>
				<Source><![CDATA[
    public TaxAutoGenerated parmTaxAutogenerated(TaxAutoGenerated _taxAutoGenerated = NoYes::No)
    {
        if (!prmisDefault(_taxAutoGenerated))
        {
            this.setField(fieldNum(PurchLine, TaxAutogenerated), _taxAutoGenerated);
        }

        return purchLine.TaxAutogenerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup parmTaxGroup(TaxGroup _taxGroup = '')
    {
        if (!prmisDefault(_taxGroup))
        {
            this.setField(fieldNum(PurchLine, TaxGroup), _taxGroup);
        }

        return purchLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverrideSalesTax</Name>
				<Source><![CDATA[
    public NoYes parmOverrideSalesTax(NoYes _overrideSalesTax = NoYes::No)
    {
        if (!prmisDefault(_overrideSalesTax))
        {
            this.setField(fieldNum(PurchLine, OverrideSalesTax), _overrideSalesTax);
        }

        return purchLine.OverrideSalesTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxItemGroup</Name>
				<Source><![CDATA[
    public TaxItemGroup parmTaxItemGroup(TaxItemGroup _taxItemGroup = '')
    {
        if (!prmisDefault(_taxItemGroup))
        {
            this.setField(fieldNum(PurchLine, TaxItemGroup), _taxItemGroup);
        }

        return purchLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxServiceCode_BR</Name>
				<Source><![CDATA[
    public TaxServiceCodeId_BR parmTaxServiceCode_BR(TaxServiceCodeId_BR _taxServiceCode = '')
    {
        if (!prmisDefault(_taxServiceCode))
        {
            this.setField(fieldNum(PurchLine, TaxServiceCode_BR), _taxServiceCode);
        }

        return purchLine.TaxServiceCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdBaseCur_TH</Name>
				<Source><![CDATA[
    public TaxWithholdBaseCur parmTaxWithholdBaseCur_TH(TaxWithholdBaseCur _taxWithholdBaseCur_TH = 0)
    {
        if (_taxWithholdBaseCur_TH)
        {
            this.setField(fieldNum(PurchLine, TaxWithholdBaseCur_TH), _taxWithholdBaseCur_TH);
        }

        return purchLine.TaxWithholdBaseCur_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdGroup_TH</Name>
				<Source><![CDATA[
    public TaxWithholdGroup parmTaxWithholdGroup_TH(TaxWithholdGroup _taxWithholdGroup_TH = '')
    {
        if (_taxWithholdGroup_TH)
        {
            this.setField(fieldNum(PurchLine, TaxWithholdGroup_TH), _taxWithholdGroup_TH);
        }

        return purchLine.TaxWithholdGroup_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdItemGroupHeading_TH</Name>
				<Source><![CDATA[
    public TaxWithholdItemGroupId_TH parmTaxWithholdItemGroupHeading_TH(TaxWithholdItemGroupId_TH _taxWithholdItemGroupHeading_TH = 0)
    {
        if (!prmisDefault(_taxWithholdItemGroupHeading_TH))
        {
            this.setField(fieldNum(PurchLine, TaxWithholdItemGroupHeading_TH), _taxWithholdItemGroupHeading_TH);
        }

        return purchLine.TaxWithholdItemGroupHeading_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCode</Name>
				<Source><![CDATA[
    public IntrastatTransactionCodeId parmTransactionCode(IntrastatTransactionCodeId _transactionCode = '')
    {
        if (!prmisDefault(_transactionCode))
        {
            this.setField(fieldNum(PurchLine, TransactionCode), _transactionCode);
        }

        return purchLine.TransactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransport</Name>
				<Source><![CDATA[
    public IntrastatTransport parmTransport(IntrastatTransport _transport = '')
    {
        if (!prmisDefault(_transport))
        {
            this.setField(fieldNum(PurchLine, Transport), _transport);
        }

        return purchLine.Transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnderDeliveryPct</Name>
				<Source><![CDATA[
    public PurchUnderDeliveryPct parmUnderDeliveryPct(PurchUnderDeliveryPct _underDeliveryPct = 0)
    {
        if (!prmisDefault(_underDeliveryPct))
        {
            this.setField(fieldNum(PurchLine, UnderDeliveryPct), _underDeliveryPct);
        }

        return purchLine.UnderDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanningPriority</Name>
				<Source><![CDATA[
    public ReqPlanningPriority parmPlanningPriority(ReqPlanningPriority _planningPriority = 0)
    {
        if (!prmisDefault(_planningPriority))
        {
            this.setField(fieldNum(PurchLine, PlanningPriority), _planningPriority);
        }

        return purchLine.PlanningPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVariantId</Name>
				<Source><![CDATA[
    public RetailVariantId parmVariantId(RetailVariantId _variantId = '')
    {
        if (!prmisDefault(_variantId))
        {
            this.setField(fieldNum(PurchLine, VariantId), _variantId);
        }

        return purchLine.VariantId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    public str parmVendAccount(str _vendAccount = '')
    {
        DictField   dictField;

        if (!prmisDefault(_vendAccount))
        {
            dictField = new DictField(tableNum(PurchLine), fieldNum(PurchLine, VendAccount));

            if (this.valueMappingInbound())
            {
                this.validateInboundString(_vendAccount,dictField,this.mapPolicy().xMLMapVendAccount());
                _vendAccount = this.axVendAccount(_vendAccount);
            }
            else
            {
                this.validateInboundString(_vendAccount,dictField);
            }

            this.setField(fieldNum(PurchLine, VendAccount), _vendAccount);
        }

        if (this.valueMappingOutbound())
        {
            return this.axVendAccount(purchLine.VendAccount);
        }
        return purchLine.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendGroup</Name>
				<Source><![CDATA[
    public VendGroupId parmVendGroup(VendGroupId _vendGroup = '')
    {
        if (!prmisDefault(_vendGroup))
        {
            this.setField(fieldNum(PurchLine, VendGroup), _vendGroup);
        }

        return purchLine.VendGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorShipCalendarId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal PurchVendorShipCalendarId parmVendorShipCalendarId(PurchVendorShipCalendarId _vendorShipCalendarId = '')
    {
        if (!prmisDefault(_vendorShipCalendarId))
        {
            this.setField(fieldNum(PurchLine, ShipCalendarId), _vendorShipCalendarId);
        }

        return purchLine.ShipCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWfDeliveryDueState</Name>
				<Source><![CDATA[
    public TradeWorkflowState parmWfDeliveryDueState(TradeWorkflowState _wfDeliveryDueState = TradeWorkflowState::NotSubmitted)
    {
        if (!prmisDefault(_wfDeliveryDueState))
        {
            this.setField(fieldNum(PurchLine, WfDeliveryDueState), _wfDeliveryDueState);
        }

        return purchLine.WfDeliveryDueState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWfInvReceivedState</Name>
				<Source><![CDATA[
    public TradeWorkflowState parmWfInvReceivedState(TradeWorkflowState _wfInvReceivedState = TradeWorkflowState::NotSubmitted)
    {
        if (!prmisDefault(_wfInvReceivedState))
        {
            this.setField(fieldNum(PurchLine, WfInvReceivedState), _wfInvReceivedState);
        }

        return purchLine.WfInvReceivedState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowState</Name>
				<Source><![CDATA[
    public TradeWorkflowState  parmWorkflowState(TradeWorkflowState  _workflowState = TradeWorkflowState::NotSubmitted)
    {
        if (!prmisDefault(_workflowState))
        {
            this.setField(fieldNum(PurchLine, WorkflowState), _workflowState);
        }

        return purchLine.WorkflowState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckApprovedVendorList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method validates if the purchase line item has valid approved vendor list entry if controlled by AVL functionality.
    /// </summary>
    /// <returns>Returns True / false</returns>
    /// <remarks>
    /// <example>
    /// this.pdsCheckApprovedVendorList();
    /// </example>
    /// <syntax>
    /// private  boolean pdsCheckApprovedVendorList()
    /// </syntax>
    /// </remarks>
    public boolean pdsCheckApprovedVendorList()
    {
        PdsApprovedVendorListCheck  avlCheck;
        boolean                     ret = true;

        avlCheck = purchLine.type().pdsApprovedVendorListCheck();
        ret = avlCheck.validateCheck();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDisc_LineDisc</Name>
				<Source><![CDATA[
    public PriceDisc_LineDisc priceDisc_LineDisc(PriceDisc_LineDisc _priceDisc_LineDisc = null)
    {
        PriceDisc_LineDisc  priceDisc_LineDisc;

        if (!priceDisc_LineDiscIdx)
        {
            priceDisc_LineDiscIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_priceDisc_LineDisc))
        {
            this.classCacheInsert(priceDisc_LineDiscIdx, _priceDisc_LineDisc);
            priceDisc_LineDisc = _priceDisc_LineDisc;
        }
        else
        {
            if (this.classCacheExist(priceDisc_LineDiscIdx))
            {
                priceDisc_LineDisc = this.classCacheLookup(priceDisc_LineDiscIdx);
            }
            else
            {
                priceDisc_LineDisc = this.initPriceDisc_LineDiscParamsSet();

                this.classCacheInsert(priceDisc_LineDiscIdx, priceDisc_LineDisc);
            }
        }

        return priceDisc_LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDisc_Price</Name>
				<Source><![CDATA[
    public PriceDisc_Price priceDisc_Price(PriceDisc_Price _priceDisc_Price = null)
    {
        PriceDisc_Price  priceDisc_Price;

        if (!priceDisc_PriceIdx)
        {
            priceDisc_PriceIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_priceDisc_Price))
        {
            this.classCacheInsert(priceDisc_PriceIdx, _priceDisc_Price);
            priceDisc_Price = _priceDisc_Price;
        }
        else
        {
            if (this.classCacheExist(priceDisc_PriceIdx))
            {
                priceDisc_Price = this.classCacheLookup(priceDisc_PriceIdx);
            }
            else
            {
                priceDisc_Price = this.initPriceDisc_PriceParamsSet();

                this.classCacheInsert(priceDisc_PriceIdx, priceDisc_Price);
            }

            if (
                (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])) &&
                this.purchParametersRecord().PriceDateType == PurchPriceDateType::DeliveryDate)
            {
                priceDisc_Price.parmPriceDate(this.parmDeliveryDate());
            }
        }

        return priceDisc_Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceParametersRecord</Name>
				<Source><![CDATA[
    public PriceParameters priceParametersRecord(PriceParameters _priceParameters = null)
    {
        PriceParameters  priceParameters;

        if (!priceParametersIdx)
        {
            priceParametersIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_priceParameters))
        {
            this.tableCacheInsert(priceParametersIdx, _priceParameters);
            priceParameters = _priceParameters;
        }
        else
        {
            if (this.tableCacheExist(priceParametersIdx))
            {
                priceParameters = this.tableCacheLookup(priceParametersIdx);
            }
            else
            {
                priceParameters = PriceParameters::find();
                this.tableCacheInsert(priceParametersIdx, priceParameters);
            }
        }

        return priceParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    public PurchLine purchLine(PurchLine _purchLine = purchLine)
    {
        if (!prmisDefault(_purchLine))
        {
            this.setCurrentRecordFromExternal(_purchLine);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParametersRecord</Name>
				<Source><![CDATA[
    public PurchParameters purchParametersRecord(PurchParameters _purchParameters = null)
    {
        PurchParameters  purchParameters;

        if (!purchParametersIdx)
        {
            purchParametersIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_purchParameters))
        {
            this.tableCacheInsert(purchParametersIdx, _purchParameters);
            purchParameters = _purchParameters;
        }
        else
        {
            if (this.tableCacheExist(purchParametersIdx))
            {
                purchParameters = this.tableCacheLookup(purchParametersIdx);
            }
            else
            {
                purchParameters = PurchParameters::find();
                this.tableCacheInsert(purchParametersIdx, purchParameters);
            }
        }

        return purchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInternalValues</Name>
				<Source><![CDATA[
    public void resetInternalValues()
    {
        super();

        axInventDim.inventDim(purchLine.inventDim());
        item = '';

        isIsPriceDiscPriceFieldsSetExecuted                 = false;
        isPriceDiscPriceFieldsSet                           = false;
        isIsPriceDiscLineFieldsSetExecuted                  = false;
        isPriceDiscLineFieldsSet                            = false;
        isSetPriceDiscLineFieldsOrPriceDiscFieldsExecuted   = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnActionDefaultsRecord</Name>
				<Source><![CDATA[
    public ReturnActionDefaults returnActionDefaultsRecord(ReturnActionDefaults _returnActionDefaults = null)
    {
        ReturnActionDefaults   returnActionDefaults;

        if (!returnActionDefaultsIdx)
        {
            returnActionDefaultsIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_returnActionDefaults))
        {
            this.tableCacheInsert(returnActionDefaultsIdx, _returnActionDefaults);
            returnActionDefaults = _returnActionDefaults;
        }
        else
        {
            if (this.tableCacheExist(returnActionDefaultsIdx))
            {
                returnActionDefaults = this.tableCacheLookup(returnActionDefaultsIdx);
            }
            else
            {
                this.setReturnActionDefaultsRecordFields();
                returnActionDefaults = ReturnActionDefaults::find(ModuleInventPurchSales::Purch, this.parmReturnActionId());
                this.tableCacheInsert(returnActionDefaultsIdx, returnActionDefaults);
            }
        }

        return returnActionDefaults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountingDistributionTemplate</Name>
				<Source><![CDATA[
    protected void setAccountingDistributionTemplate()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, AccountingDistributionTemplate)))
        {
            return;
        }

        this.setAxPurchTableFields();
        this.setAssetId();
        this.setCreateFixedAsset();
        this.setProjId();
        this.setItemId();
        this.setProcurementCategory();
        this.setStockedProduct();

        if (this.isAxPurchTableFieldsSet() || this.axPurchTable().isFieldModified(fieldNum(PurchTable, AccountingDistributionTemplate)))
        {
            if (purchLine.canApplyAllocationOrDistributionTemplate())
            {
                this.parmAccountingDistributionTemplate(this.axPurchTable().parmAccountingDistributionTemplate());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivityNumber</Name>
				<Source><![CDATA[
    protected void setActivityNumber()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ActivityNumber)))
        {
            return;
        }
        this.setMatchingAgreementLine();
        if (this.agreementLineDefaultRecord())
        {
            this.parmActivityNumber(this.agreementLineDefaultRecord().ProjectActivityNumber);
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressRefRecId</Name>
				<Source><![CDATA[
    protected void setAddressRefRecId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, AddressRefRecId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressRefTableId</Name>
				<Source><![CDATA[
    protected void setAddressRefTableId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, AddressRefTableId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementLineRecordFields</Name>
				<Source><![CDATA[
    void setAgreementLineRecordFields()
    {
        this.setPurchId();
        this.setCurrencyCode();
        this.setInventTableRecordFields();
        this.setPurchQty();
        this.setPurchUnit();
        this.setInventDimId();
        this.setProcurementCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementSkipAutoLink</Name>
				<Source><![CDATA[
    protected void setAgreementSkipAutoLink()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, AgreementSkipAutoLink)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetBookId</Name>
				<Source><![CDATA[
    protected void setAssetBookId()
    {
        AssetBook       assetBook;
        AssetBookTable  assetBookTable;

        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, AssetBookId)))
        {
            return;
        }

        this.setAssetId();

        if (this.isFieldSet(fieldNum(PurchLine, AssetId)))
        {
            if (this.parmAssetId())
            {
                assetBook = AssetBook::find(this.parmAssetId(), AssetParameters::find().BookIdDefault);
                if (assetBook &&
                    AssetBookTable::find(AssetParameters::find().BookIdDefault).CurrentOperationsTax == CurrentOperationsTax::Current &&
                   (assetBook.Status == AssetStatus::NoAcquisition ||
                    assetBook.Status == AssetStatus::Open))
                {
                    this.parmAssetBookId(AssetParameters::find().BookIdDefault);
                }
                else
                {
                    assetBook = AssetBook::findOpenOrNotAcquiredAssetBookByAssetIdLayer(this.parmAssetId(), CurrentOperationsTax::Current);
                    this.parmAssetBookId(assetBook.BookId);
                }
            }
            else
            {
                this.parmAssetBookId('');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetGroup</Name>
				<Source><![CDATA[
    protected void setAssetGroup()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, AssetGroup)))
        {
            return;
        }
        this.setCreateFixedAsset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetId</Name>
				<Source><![CDATA[
    protected void setAssetId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, AssetId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAssetTransTypePurch</Name>
				<Source><![CDATA[
    protected void setAssetTransTypePurch()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, AssetTransTypePurch)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAxPurchTableFields</Name>
				<Source><![CDATA[
    public void setAxPurchTableFields()
    {
        this.setPurchId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBarCode</Name>
				<Source><![CDATA[
    protected void setBarCode()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, BarCode)))
        {
            return;
        }

        this.setInventItemBarcodeRecordFields();

        if (this.isInventItemBarcodeRecordFieldsSet())
        {
            this.parmBarCode(this.inventItemBarcodeRecord().ItemBarCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBarCodeType</Name>
				<Source><![CDATA[
    protected void setBarCodeType()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, BarCodeType)))
        {
            return;
        }

        this.setInventItemBarcodeRecordFields();

        if (this.isInventItemBarcodeRecordFieldsSet())
        {
            this.parmBarCodeType(this.inventItemBarcodeRecord().BarcodeSetupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBlocked</Name>
				<Source><![CDATA[
    protected void setBlocked()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, Blocked)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCFOPTable_BR</Name>
				<Source><![CDATA[
    protected void setCFOPTable_BR()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, cfopTable_BR)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setComplete</Name>
				<Source><![CDATA[
    protected void setComplete()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, Complete)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDlv</Name>
				<Source><![CDATA[
    protected void setConfirmedDlv()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ConfirmedDlv)))
        {
            return;
        }

        AxPurchTable axPurchTable = this.axPurchTable();
        if (axPurchTable.isFieldModified(fieldNum(PurchTable, ConfirmedDlv)) && !this.purchLine().isInvoiceMatched())
        {
            this.parmConfirmedDlv(axPurchTable.parmConfirmedDlv());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedShipDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected void setConfirmedShipDate()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ConfirmedShipDate)))
        {
            return;
        }

        AxPurchTable axPurchTable = this.axPurchTable();
        if (axPurchTable.isFieldModified(fieldNum(PurchTable, ConfirmedShipDate)) && !this.purchLine().isInvoiceMatched())
        {
            this.parmConfirmedShipDate(axPurchTable.parmConfirmedShipDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCovRef</Name>
				<Source><![CDATA[
    protected void setCovRef()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, CovRef)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCreateFixedAsset</Name>
				<Source><![CDATA[
    protected void setCreateFixedAsset()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, CreateFixedAsset)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
    protected void setCurrencyCode()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, CurrencyCode)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.parmCurrencyCode() != this.axPurchTable().parmCurrencyCode())
        {
            this.parmCurrencyCode(this.axPurchTable().parmCurrencyCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomerRef</Name>
				<Source><![CDATA[
    protected void setCustomerRef()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, CustomerRef)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustPurchaseOrderFormNum</Name>
				<Source><![CDATA[
    protected void setCustPurchaseOrderFormNum()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, CustPurchaseOrderFormNum)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultDimensionForPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates default dimension for purchase line.
    /// </summary>
    /// <param name = "_purchTable">Purchase order.</param>
    protected void updateDefaultDimensionForPurchLine(PurchTable _purchTable)
    {
        // Copy dimension from purchTable (the copy does not overwrite the dimension linked to the site)
        this.parmDefaultDimension(this.purchLine().copyDimension(_purchTable.DefaultDimension));

        // Merge current dimension with inventTable
        this.parmDefaultDimension(this.purchLine().mergeDimension(this.inventTableRecord().DefaultDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimension</Name>
				<Source><![CDATA[
    protected void setDefaultDimension()
    {
        PurchTable          localPurchTable;
        boolean             headerDefaultDimensionChanged;

        if (this.isMethodExecuted(funcName()))
        {
            return;
        }

        if (this.isSetMethodsCalledFromSave())
        {
            if (!this.isFieldSetExternally(fieldNum(PurchLine, DefaultDimension)))
            {
                if (this.isFieldSet(fieldNum(PurchLine, DefaultDimension)))
                {
                    return;
                }
            }

            localPurchTable  = this.axPurchTable().purchTable();
            this.setInventDimId();
            headerDefaultDimensionChanged = this.axPurchTable().isFieldModified(fieldNum(PurchTable, DefaultDimension)) ;
            this.inventSiteDimensionLink().axSetDefaultDimension(this,headerDefaultDimensionChanged);

            this.setAxPurchTableFields();

            if (this.shouldUpdateDefaultDimensionForPurchLine(headerDefaultDimensionChanged, localPurchTable))
            {
                this.updateDefaultDimensionForPurchLine(localPurchTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>DefaultDimension</c> field on a buffer.
    /// </summary>
    /// <param name="_dimension">
    ///    The new dimension value.
    /// </param>
    /// <remarks>
    ///    This method is part of the <c>AxInventSiteDimensionable</c> interface and is called from the
    ///    <c>InventSiteDimensionLink</c> class.
    /// </remarks>
    public void setDefaultDimensionValue(DimensionDefault _dimension)
    {
        this.setField(fieldNum(PurchLine, DefaultDimension), _dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryDate</Name>
				<Source><![CDATA[
    protected void setDeliveryDate()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, DeliveryDate)))
        {
            return;
        }

        this.setPriceDisc_PriceFields();
        this.setAxPurchTableFields();

        AxPurchTable axPurchTable = this.axPurchTable();
        if (this.isPriceDisc_PriceFieldsSet() ||
            (axPurchTable.isFieldModified(fieldNum(PurchTable, DeliveryDate)) && !this.purchLine().isInvoiceMatched()))
        {
            if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
            {
                if (this.priceDisc_Price().deliveryDays())
                {
                    this.calculateRequestedShipAndReceiptDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                        dateNull(), SchedDirection::Forward, this.priceDisc_Price().deliveryDays(), this.priceDisc_Price().calendarDays());
                }
                else
                {
                    this.calculateRequestedShipAndReceiptDate(axPurchTable.parmRequestedShipDate(), axPurchTable.parmDeliveryDate(), SchedDirection::Forward);
                }
            }
            else 
            {
                if (this.priceDisc_Price().deliveryDays())
                {
                    WorkCalendarSched workCalendarSched = new WorkCalendarSched();
                    SchedDate schedDate = workCalendarSched.schedDate(
                                                                SchedDirection::Forward,
                                                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),  // FromDate
                                                                this.priceDisc_Price().deliveryDays(),                                  // LeadTime
                                                                this.priceDisc_Price().calendarDays(),
                                                                VendTable::find(this.priceDisc_Price().parmAccountNum()).PurchCalendarId,
                                                                purchLine.type().internalCalendarId());

                    this.parmDeliveryDate(max(schedDate, axPurchTable.parmDeliveryDate()));
                }
                else
                {
                    this.parmDeliveryDate(axPurchTable.parmDeliveryDate());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryPostalAddress</Name>
				<Source><![CDATA[
    protected void setDeliveryPostalAddress()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, DeliveryPostalAddress)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryType</Name>
				<Source><![CDATA[
    protected void setDeliveryType()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, DeliveryType)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDepreciationStartDate</Name>
				<Source><![CDATA[
    protected void setDepreciationStartDate()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, DepreciationStartDate)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionEntitySpecifiers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the financial dimension entity specifiers for the record
    /// </summary>
    /// <remarks>
    ///    This method is called after the <c>setTableFields</c> method, so that all of the fields that are
    ///    entity specifiers are set.
    /// </remarks>
    protected void setDimensionEntitySpecifiers()
    {
        this.setField(fieldNum(PurchLine, DefaultDimension), this.currentRecord().mergeDimension(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditableInWorkflow</Name>
				<Source><![CDATA[
    protected void setEditableInWorkflow()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, EditableInWorkflow)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExternalItemId</Name>
				<Source><![CDATA[
    protected void setExternalItemId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ExternalItemId)))
        {
            return;
        }

        this.setVendExternalItemDescriptionFields();

        if (this.isVendExternalItemDescriptionFieldsSet())
        {
            this.parmExternalItemId(this.vendExternalItemDescription().externalItemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGSTHSTTaxType_CA</Name>
				<Source><![CDATA[
    protected void setGSTHSTTaxType_CA()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, gsthstTaxType_CA)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterCompanyInventTransId</Name>
				<Source><![CDATA[
    protected void setInterCompanyInventTransId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, InterCompanyInventTransId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterCompanyOrigin</Name>
				<Source><![CDATA[
    protected void setInterCompanyOrigin()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, InterCompanyOrigin)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIntrastatFulfillmentDate_HU</Name>
				<Source><![CDATA[
    protected void setIntrastatFulfillmentDate_HU()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, IntrastatFulfillmentDate_HU)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.isAxPurchTableFieldsSet() || this.axPurchTable().isFieldModified(fieldNum(PurchTable, IntrastatFulfillmentDate_HU)))
        {
            this.parmIntrastatFulfillmentDate_HU(this.axPurchTable().parmIntrastatFulfillmentDate_HU());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    protected void setInventDimId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, InventDimId)))
        {
            return;
        }

        this.axInventDim().setInventDimId();

        if (this.axInventDim().isFieldSet(fieldNum(InventDim, InventDimId)))
        {
            this.parmInventDimId(this.axInventDim().parmInventDimId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventItemBarcodeRecordFields</Name>
				<Source><![CDATA[
    protected void setInventItemBarcodeRecordFields()
    {
        this.setItemId();
        this.setPurchUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventReceivedNow</Name>
				<Source><![CDATA[
    protected void setInventReceivedNow()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, InventReceivedNow)))
        {
            return;
        }

        this.setItemId();
        this.setPurchUnit();
        this.setPurchReceivedNow();
        this.setInventTableRecordFields();
        this.setInventDimId();

        if (this.isFieldSet(fieldNum(PurchLine, ItemId))            ||
            this.isFieldSet(fieldNum(PurchLine, PurchUnit))         ||
            this.isFieldSet(fieldNum(PurchLine, PurchReceivedNow))  ||
            this.isInventTableRecordFieldsSet()                     ||
            this.isFieldSet(fieldNum(PurchLine, InventDimId)))
        {
            this.parmInventReceivedNow(EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.parmItemId(),
                                                                                                             this.parmInventDimId(),
                                                                                                             this.parmPurchReceivedNow(),
                                                                                                             this.parmPurchUnit(),
                                                                                                             this.inventTableRecord().inventUnitId(),
                                                                                                             NoYes::Yes));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefId</Name>
				<Source><![CDATA[
    protected void setInventRefId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, InventRefId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefTransId</Name>
				<Source><![CDATA[
    protected void setInventRefTransId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, InventRefTransId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTableRecordFields</Name>
				<Source><![CDATA[
    public void setInventTableRecordFields()
    {
        this.setItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransId</Name>
				<Source><![CDATA[
    protected void setInventTransId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, InventTransId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemBOMId</Name>
				<Source><![CDATA[
    protected void setItemBOMId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ItemBOMId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemId</Name>
				<Source><![CDATA[
    protected void setItemId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ItemId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemRefType</Name>
				<Source><![CDATA[
    protected void setItemRefType()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ItemRefType)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemRouteId</Name>
				<Source><![CDATA[
    protected void setItemRouteId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ItemRouteId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimension</Name>
				<Source><![CDATA[
    protected void setLedgerDimension()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, LedgerDimension)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount</Name>
				<Source><![CDATA[
    protected void setLineAmount()
    {
        AxPurchLine localPurchLine = this.axOrig() as AxPurchLine;
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, LineAmount)))
        {
            return;
        }

        this.setPurchPrice();
        this.setPriceUnit();
        this.setLineDisc();
        this.setLinePercent();
        this.setPurchQty();
        this.setPurchMarkup();
        this.setMultiLnDisc();
        this.setMultiLnPercent();
        this.setPurchQty();

        if (this.isFieldSet(fieldNum(PurchLine, PurchPrice))    ||
            this.isFieldSet(fieldNum(PurchLine, PriceUnit))     ||
            this.isFieldSet(fieldNum(PurchLine, LineDisc))      ||
            this.isFieldSet(fieldNum(PurchLine, LinePercent))   ||
            this.isFieldSet(fieldNum(PurchLine, PurchQty))      ||
            this.isFieldSet(fieldNum(PurchLine, PurchMarkup))   ||
            this.isFieldSet(fieldNum(PurchLine, MultiLnDisc))   ||
            this.isFieldSet(fieldNum(PurchLine, MultiLnPercent)))
        {
            this.parmLineAmount(this.currentRecord().calcLineAmountForced());
            return;
        }

        this.setCurrencyCode();

        if (this.isFieldSet(fieldNum(PurchLine, CurrencyCode)))
        {
            if (localPurchLine.parmCurrencyCode())
            {
                this.parmLineAmount(CurrencyExchangeHelper::curAmount2CurAmount(this.parmLineAmount(), localPurchLine.parmCurrencyCode(), this.parmCurrencyCode()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineDisc</Name>
				<Source><![CDATA[
    protected void setLineDisc()
    {
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        AgreementLine                   agreementLine;
        AxPurchLine                     localPurchLine = this.axOrig() as AxPurchLine;

        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, LineDisc)))
        {
            return;
        }

        if (this.isFieldSetExternally(fieldNum(PurchLine, LineAmount)))
        {
            this.parmLineDisc(0);
            return;
        }

        agreementLine = this.agreementLineRecord();
        if (agreementLine.RecId && agreementLine is AgreementLineQuantityCommitment)
        {
            agreementLineQuantityCommitment = agreementLine;
            this.parmLineDisc(agreementLineQuantityCommitment.LineDiscountAmount);
        }
        else
        {
            this.setPriceDisc_LineDiscFields();

            if (this.isPriceDisc_LineDiscFieldsSet())
            {
                this.parmLineDisc(this.priceDisc_LineDisc().discAmount());
            }
        }

        this.setCurrencyCode();

        if (this.isFieldSet(fieldNum(PurchLine, CurrencyCode)))
        {
            if (localPurchLine.parmCurrencyCode())
            {
                this.parmLineDisc(ExchangeRateHelper::curPrice2CurPrice(this.parmLineDisc(), localPurchLine.parmCurrencyCode(), this.parmCurrencyCode()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineHeader</Name>
				<Source><![CDATA[
    protected void setLineHeader()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, LineHeader)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNumber</Name>
				<Source><![CDATA[
    protected void setLineNumber()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, LineNumber)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLinePercent</Name>
				<Source><![CDATA[
    protected void setLinePercent()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, LinePercent)))
        {
            return;
        }

        if (this.isFieldSetExternally(fieldNum(PurchLine, LineAmount)))
        {
            this.parmLinePercent(0);
            return;
        }

        if (this.agreementLineRecord())
        {
            this.parmLinePercent(this.agreementLineRecord().LineDiscountPercent);
            return;
        }

        this.setPriceDisc_LineDiscFields();

        if (this.isPriceDisc_LineDiscFieldsSet())
        {
            this.parmLinePercent(this.priceDisc_LineDisc().discPct());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchingAgreementLine</Name>
				<Source><![CDATA[
    protected void setMatchingAgreementLine()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, MatchingAgreementLine)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchingPolicy</Name>
				<Source><![CDATA[
    protected void setMatchingPolicy()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, MatchingPolicy)))
        {
            return;
        }

        this.setItemId();
        this.setAxPurchTableFields();

        if (this.isFieldSet(fieldNum(PurchLine, ItemId))
            || this.isFieldSet(fieldNum(PurchLine, ProcurementCategory))
            || this.axPurchTable().isFieldModified(fieldNum(PurchTable, OrderAccount)))
        {
            // set the matching policy
            this.parmMatchingPolicy(this.lineMatchingPolicy());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMultiLnDisc</Name>
				<Source><![CDATA[
    protected void setMultiLnDisc()
    {
        AxPurchLine localPurchLine = this.axOrig() as AxPurchLine;
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, MultiLnDisc)))
        {
            return;
        }

        if (this.isFieldSetExternally(fieldNum(PurchLine, LineAmount)))
        {
            this.parmMultiLnDisc(0);
            return;
        }

        this.setCurrencyCode();

        if (this.isFieldSet(fieldNum(PurchLine, CurrencyCode)))
        {
            if (localPurchLine.parmCurrencyCode())
            {
                this.parmMultiLnDisc(ExchangeRateHelper::curPrice2CurPrice(this.parmMultiLnDisc(), localPurchLine.parmCurrencyCode(), this.parmCurrencyCode()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMultiLnPercent</Name>
				<Source><![CDATA[
    protected void setMultiLnPercent()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, MultiLnPercent)))
        {
            return;
        }

        if (this.isFieldSetExternally(fieldNum(PurchLine, LineAmount)))
        {
            this.parmMultiLnPercent(0);
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName</Name>
				<Source><![CDATA[
    protected void setName()
    {
        ItemFreeTxt itemName;

        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, Name)))
        {
            return;
        }

        this.setVendExternalItemDescriptionFields();
        this.setInventDimId();

        if (this.isVendExternalItemDescriptionFieldsSet() || this.axPurchTable().isFieldModified(fieldNum(PurchTable, LanguageId)))
        {
            if (this.vendExternalItemDescription().externalItemFreeTxt())
            {
                if (VendFormletterParameters::find().ExternalItemOverwriteAppend == OverwriteAppend::Overwrite)
                {
                    this.parmName(this.vendExternalItemDescription().externalItemFreeTxt());
                }
                else
                {
                    itemName = PurchParameters::nameAndOrDescription(this.inventTableRecord(), this.axPurchTable().parmLanguageId(), this.parmInventDimId());
                    if (itemName)
                    {
                        itemName += '\n';
                    }
                    itemName += this.vendExternalItemDescription().externalItemFreeTxt();
                    this.parmName(itemName);
                }
            }
            else
            {
                this.setProcurementCategory();
                if (this.isInventTableRecordFieldsSet() || this.isFieldSet(fieldNum(PurchLine, ProcurementCategory)) && this.isFieldSet(fieldNum(PurchLine, InventDimId)))
                {
                    EcoResCategory procurementCategory = EcoResCategory::find(this.parmProcurementCategory());
                    this.parmName(PurchParameters::nameAndOrDescription(this.inventTableRecord(), this.axPurchTable().parmLanguageId(), this.parmInventDimId(), procurementCategory));
                }
            }
            return;
        }

        this.setInventTableRecordFields();
        this.setAxPurchTableFields();

        if (this.isInventTableRecordFieldsSet() ||
            this.isAxPurchTableFieldsSet()      ||
            this.axPurchTable().isFieldSet(fieldNum(PurchTable, LanguageId)))
        {
            this.parmName(PurchParameters::nameAndOrDescription(this.inventTableRecord(), this.axPurchTable().parmLanguageId(), this.parmInventDimId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOperationType_MX</Name>
				<Source><![CDATA[
    protected void setOperationType_MX()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, OperationType_MX)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOverDeliveryPct</Name>
				<Source><![CDATA[
    protected void setOverDeliveryPct()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, OverDeliveryPct)))
        {
            return;
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            this.parmOverDeliveryPct(this.inventTableRecord().purchOverDeliveryPct());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWInventReceivedNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>PdsCWInventReceivedNow</c> field.
    /// </summary>
    protected void setPdsCWInventReceivedNow()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PdsCWInventReceivedNow)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>PdsCWQty</c> field.
    /// </summary>
    protected void setPdsCWQty()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PdsCWQty)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWRemainInventFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>PdsCWRemainInventFinancial</c> field.
    /// </summary>
    protected void setPdsCWRemainInventFinancial()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PdsCWRemainInventFinancial)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value for the <c>PdsCWRemainInventPhysical</c> field.
    /// </summary>
    protected void setPdsCWRemainInventPhysical()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PdsCWRemainInventPhysical)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPort</Name>
				<Source><![CDATA[
    protected void setPort()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, Port)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.isAxPurchTableFieldsSet() || this.axPurchTable().isFieldModified(fieldNum(PurchTable, Port)))
        {
            this.parmPort(this.axPurchTable().parmPort());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc_LineDiscFields</Name>
				<Source><![CDATA[
    protected void setPriceDisc_LineDiscFields()
    {
        this.setPriceDisc_PriceAndLineDiscFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc_LineDiscParams</Name>
				<Source><![CDATA[
    private void setPriceDisc_LineDiscParams(PriceDisc_LineDisc _priceDisc_LineDisc)
    {
        _priceDisc_LineDisc.parmModuleType(ModuleInventPurchSales::Purch);
        _priceDisc_LineDisc.parmItemId(this.parmItemId());
        _priceDisc_LineDisc.parmInventDim(this.axInventDim().inventDim());
        _priceDisc_LineDisc.parmUnitID(this.parmPurchUnit());
        _priceDisc_LineDisc.parmDiscDate(this.purchParametersRecord().PriceDateType == PurchPriceDateType::DeliveryDate ? this.axPurchTable().parmDeliveryDate() :  DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        _priceDisc_LineDisc.parmQty(this.parmPurchQty());
        _priceDisc_LineDisc.parmAccountNum(this.axPurchTable().parmOrderAccount());
        _priceDisc_LineDisc.parmCurrencyCode(this.axPurchTable().parmCurrencyCode());
        _priceDisc_LineDisc.parmAccountLineDiscCode(this.axPurchTable().parmLineDisc());
        _priceDisc_LineDisc.parmItemLineDiscCode(this.inventTableRecord().purchLineDisc());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc_PriceParams</Name>
				<Source><![CDATA[
    private void setPriceDisc_PriceParams(PriceDisc_Price _priceDisc_Price)
    {
        _priceDisc_Price.parmModuleType(ModuleInventPurchSales::Purch);
        _priceDisc_Price.parmItemId(this.parmItemId());
        _priceDisc_Price.parmInventDim(this.axInventDim().inventDim());
        _priceDisc_Price.parmUnitID(this.parmPurchUnit());
        _priceDisc_Price.parmPriceDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        _priceDisc_Price.parmQty(this.parmPurchQty());
        _priceDisc_Price.parmAccountNum(this.axPurchTable().parmOrderAccount());
        _priceDisc_Price.parmCurrencyCode(this.axPurchTable().parmCurrencyCode());
        _priceDisc_Price.parmPriceGroupId(this.axPurchTable().parmPriceGroupId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc_PriceAndLineDiscFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Price fields and the LineDiscount fields.
    /// </summary>
    /// <remarks>
    /// This method sets the fields for Price and Line Discount. Internally it also sets
    /// a flag so that subsequent calls do nothing, for performance reasons.
    /// </remarks>
    protected void setPriceDisc_PriceAndLineDiscFields()
    {
        if (!isSetPriceDiscLineFieldsOrPriceDiscFieldsExecuted)
        {
            this.setItemId();
            this.setPurchQty();
            this.setPurchUnit();
            this.setInventTableRecordFields();
            this.setAxPurchTableFields();
            this.axInventDim().setPurchPriceDiscFields(this.inventTableRecord());
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                this.axPurchLine_W().setPriceAgreementDate_RU();
            }

            isSetPriceDiscLineFieldsOrPriceDiscFieldsExecuted = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDisc_PriceFields</Name>
				<Source><![CDATA[
    protected void setPriceDisc_PriceFields()
    {
        this.setPriceDisc_PriceAndLineDiscFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDateControlChanged</Name>
				<Source><![CDATA[
    private boolean isPriceDateControlChanged()
    {
        if (this.purchParametersRecord().PriceDateType == PurchPriceDateType::DeliveryDate &&
             this.purchLine().fieldChanged(fieldNum(PurchLine, DeliveryDate)) &&
             !this.purchLine().isInvoiceMatched())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceUnit</Name>
				<Source><![CDATA[
    protected void setPriceUnit()
    {
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        AgreementLine                   agreementLine;

        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PriceUnit)))
        {
            return;
        }

        agreementLine = this.agreementLineRecord();
        if (agreementLine.RecId && agreementLine is AgreementLineQuantityCommitment)
        {
            agreementLineQuantityCommitment = agreementLine;
            this.parmPriceUnit(agreementLineQuantityCommitment.PriceUnit);
            return;
        }

        this.setPriceDisc_PriceFields();

        if (this.isPriceDisc_PriceFieldsSet() || this.isPriceDateControlChanged())
        {
            this.parmPriceUnit(this.priceDisc_Price().priceUnit());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcurementCategory</Name>
				<Source><![CDATA[
    protected void setProcurementCategory()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ProcurementCategory)))
        {
            return;
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            // Look up category from item
            this.parmProcurementCategory(
                EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                        this.parmItemId(),
                        EcoResCategoryNamedHierarchyRole::Procurement).Category);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCategoryId</Name>
				<Source><![CDATA[
    protected void setProjCategoryId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ProjCategoryId)))
        {
            return;
        }

        this.setMatchingAgreementLine();
        if (this.agreementLineDefaultRecord().ProjectCategory)
        {
            this.parmProjCategoryId(this.agreementLineDefaultRecord().ProjectCategory);
            return;
        }

        this.setProjId();
        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet() || this.isFieldSet(fieldNum(PurchLine, ProjId)))
        {
            if (this.isInventTableRecordFieldsSet() || !ProjValProjCategorySetUp::checkProjCategory(this.parmProjId(),this.parmProjCategoryId()))
            {
                if (!ProjValProjCategorySetUp::checkProjCategory(this.parmProjId(),this.inventTableRecord().ProjCategoryId))
                {
                    this.parmProjCategoryId('');
                }
                else
                {
                    this.parmProjCategoryId(this.inventTableRecord().ProjCategoryId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjId</Name>
				<Source><![CDATA[
    protected void setProjId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ProjId)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (!this.parmProjId() && this.axPurchTable().parmProjId())
        {
            this.parmProjId(this.axPurchTable().parmProjId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjLinePropertyId</Name>
				<Source><![CDATA[
    protected void setProjLinePropertyId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ProjLinePropertyId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesCurrencyId</Name>
				<Source><![CDATA[
    protected void setProjSalesCurrencyId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ProjSalesCurrencyId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesPrice</Name>
				<Source><![CDATA[
    protected void setProjSalesPrice()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ProjSalesPrice)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjSalesUnitId</Name>
				<Source><![CDATA[
    protected void setProjSalesUnitId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ProjSalesUnitId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjTaxGroupId</Name>
				<Source><![CDATA[
    protected void setProjTaxGroupId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ProjTaxGroupId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjTaxItemGroupId</Name>
				<Source><![CDATA[
    protected void setProjTaxItemGroupId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ProjTaxItemGroupId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPSARetainScheduleId</Name>
				<Source><![CDATA[
    protected void setPSARetainScheduleId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, psaRetainScheduleId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPSATotalRetainAmount</Name>
				<Source><![CDATA[
    protected void setPSATotalRetainAmount()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, psaTotalRetainAmount)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchaseType</Name>
				<Source><![CDATA[
    protected void setPurchaseType()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PurchaseType)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.parmPurchaseType() != this.axPurchTable().parmPurchaseType())
        {
            this.parmPurchaseType(this.axPurchTable().parmPurchaseType());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchCommitmentLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>PurchCommitmentLine_PSN</c> field of the <c>PurchLine</c> table.
    /// </summary>
    protected void setPurchCommitmentLine_PSN()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PurchCommitmentLine_PSN)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchId</Name>
				<Source><![CDATA[
    protected void setPurchId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PurchId)))
        {
            return;
        }

        if (!this.parmPurchId())
        {
            this.parmPurchId(this.axPurchTable().parmPurchId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchMarkup</Name>
				<Source><![CDATA[
    protected void setPurchMarkup()
    {
        AxPurchLine localPurchLine = this.axOrig() as AxPurchLine;
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PurchMarkup)))
        {
            return;
        }

        if (this.isFieldSetExternally(fieldNum(PurchLine, LineAmount)))
        {
            this.parmPurchMarkup(0);
            return;
        }

        this.setPriceDisc_PriceFields();

        if (this.isPriceDisc_PriceFieldsSet() || this.isPriceDateControlChanged())
        {
            this.parmPurchMarkup(this.priceDisc_Price().priceMarkup());
        }

        this.setCurrencyCode();

        if (this.isFieldSet(fieldNum(PurchLine, CurrencyCode)))
        {
            if (localPurchLine.parmCurrencyCode())
            {
                this.parmPurchMarkup(ExchangeRateHelper::curPrice2CurPrice(this.parmPurchMarkup(), localPurchLine.parmCurrencyCode(), this.parmCurrencyCode()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchPrice</Name>
				<Source><![CDATA[
    protected void setPurchPrice()
    {
        AgreementLineQuantityCommitment agreementLineQuantityCommitment;
        AgreementLine                   agreementLine;
        AxPurchLine                     localPurchLine = this.axOrig() as AxPurchLine;

        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PurchPrice)))
        {
            return;
        }

        if (this.isFieldSetExternally(fieldNum(PurchLine, LineAmount)))
        {
            this.parmPurchPrice(0);
            return;
        }

        agreementLine = this.agreementLineRecord();

        if (agreementLine.RecId)
        {
            agreementLineQuantityCommitment = AgreementLineQuantityCommitment::find(agreementLine.RecId);
            if (agreementLineQuantityCommitment.RecId)
            {
                this.parmPurchPrice(agreementLineQuantityCommitment.PricePerUnit);
            }
        }
        else
        {
            this.setPriceDisc_PriceFields();

            if (this.isPriceDisc_PriceFieldsSet() ||
                (this.purchParametersRecord().PriceDateType == PurchPriceDateType::DeliveryDate &&
                 this.purchLine().fieldChanged(fieldNum(PurchLine, DeliveryDate)) &&
                 !this.purchLine().isInvoiceMatched()))
            {
                PurchPrice price = this.priceDisc_Price().price();

                if (price
                    || !this.purchLine().purchTable().isInterCompanyOrder())
                {
                    this.parmPurchPrice(price);
                }
            }
        }

        this.setCurrencyCode();

        if (this.isFieldSet(fieldNum(PurchLine, CurrencyCode)))
        {
            if (localPurchLine.parmCurrencyCode())
            {
                this.parmPurchPrice(ExchangeRateHelper::curPrice2CurPrice(this.parmPurchPrice(), localPurchLine.parmCurrencyCode(), this.parmCurrencyCode()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchQty</Name>
				<Source><![CDATA[
    protected void setPurchQty()
    {
        PurchQty    purchQty;

        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PurchQty)))
        {
            return;
        }

        this.setPurchaseType();
        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            if (this.parmPurchaseType() != PurchaseType::ReturnItem)
            {
                this.setInventDimId();
                purchQty = this.inventTableRecord().purchStandardQty(this.parmInventDimId());

                this.setPurchUnit();

                UnitOfMeasureSymbol purchUnitId = this.inventTableRecord().purchUnitId();
                UnitOfMeasureSymbol inventUnitId = this.inventTableRecord().inventUnitId();

                if (this.isFieldSet(fieldNum(PurchLine, PurchUnit))     &&
                    this.parmPurchUnit() != purchUnitId                 &&
                    this.isFieldSet(fieldNum(PurchLine, InventDimId)))
                {
                    this.setItemId();

                    EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                            this.parmItemId(),
                                                                            this.parmInventDimId(),
                                                                            purchUnitId,
                                                                            inventUnitId,
                                                                            NoYes::Yes);

                    purchQty = productUnitConverter.convertValue(purchQty);

                    productUnitConverter.parmFromUnitOfMeasureSymbol(inventUnitId);
                    productUnitConverter.parmToUnitOfMeasureSymbol(this.parmPurchUnit());

                    purchQty = productUnitConverter.convertValue(purchQty);
                }

                this.parmPurchQty(purchQty);
            }
            return;
        }

        this.setPurchUnit();

        if (this.isFieldSet(fieldNum(PurchLine, PurchUnit)))
        {
            this.parmPurchQty(decRound(this.parmPurchQty(), UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.parmPurchUnit()))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReceivedNow</Name>
				<Source><![CDATA[
    protected void setPurchReceivedNow()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PurchReceivedNow)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchStatus</Name>
				<Source><![CDATA[
    protected void setPurchStatus()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PurchStatus)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchUnit</Name>
				<Source><![CDATA[
    protected void setPurchUnit()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, PurchUnit)))
        {
            return;
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            this.parmPurchUnit(this.inventTableRecord().purchUnitId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyOrdered</Name>
				<Source><![CDATA[
    protected void setQtyOrdered()
    {
        InventQty   inventQty;

        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, QtyOrdered)))
        {
            return;
        }

        this.setInventTableRecordFields();
        this.setItemId();
        this.setPurchQty();
        this.setPurchUnit();
        this.setStockedProduct();
        this.setInventDimId();

        if (purchLine.isStocked()                       &&
            (this.isInventTableRecordFieldsSet()             ||
             this.isFieldSet(fieldNum(PurchLine, ItemId))    ||
             this.isFieldSet(fieldNum(PurchLine, PurchQty))  ||
             this.isFieldSet(fieldNum(PurchLine, PurchUnit)) ||
             this.isFieldSet(fieldNum(PurchLine, InventDimId))))
        {
            inventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.parmItemId(),
                                                                                              this.parmInventDimId(),
                                                                                              this.parmPurchQty(),
                                                                                              this.parmPurchUnit(),
                                                                                              this.inventTableRecord().inventUnitId(),
                                                                                              NoYes::Yes);

            this.parmQtyOrdered(decRound(inventQty,InventTable::inventDecimals(this.parmItemId())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainInventPhysical</Name>
				<Source><![CDATA[
    protected void setRemainInventPhysical()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, RemainInventPhysical)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPurchFinancial</Name>
				<Source><![CDATA[
    protected void setRemainPurchFinancial()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, RemainPurchFinancial)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPurchPhysical</Name>
				<Source><![CDATA[
    protected void setRemainPurchPhysical()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, RemainPurchPhysical)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReqPlanIdSched</Name>
				<Source><![CDATA[
    protected void setReqPlanIdSched()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ReqPlanIdSched)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReqPOId</Name>
				<Source><![CDATA[
    protected void setReqPOId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ReqPOId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequestedShipDate</Name>
				<Source><![CDATA[
     [Hookable(false)]
    internal protected void setRequestedShipDate()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, RequestedShipDate)))
        {
            return;
        }

        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            this.setPriceDisc_PriceFields();
            this.setAxPurchTableFields();

            AxPurchTable axPurchTable = this.axPurchTable();
            if (this.isPriceDisc_PriceFieldsSet() ||
                (axPurchTable.isFieldModified(fieldNum(PurchTable, RequestedShipDate)) && !this.purchLine().isInvoiceMatched()))
            {
                if (this.priceDisc_Price().deliveryDays())
                {
                    PurchRequestedShipDate localPurchRequestedShipDate = this.parmRequestedShipDate() ? this.parmRequestedShipDate() : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    this.calculateRequestedShipAndReceiptDate(localPurchRequestedShipDate, dateNull(), SchedDirection::Forward, this.priceDisc_Price().deliveryDays(), this.priceDisc_Price().calendarDays());
                }
                else
                {
                    this.calculateRequestedShipAndReceiptDate(axPurchTable.parmRequestedShipDate(), axPurchTable.parmDeliveryDate(), SchedDirection::Forward);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnActionDefaultsRecordFields</Name>
				<Source><![CDATA[
    public void setReturnActionDefaultsRecordFields()
    {
        this.setReturnActionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnActionId</Name>
				<Source><![CDATA[
    protected void setReturnActionId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ReturnActionId)))
        {
            return;
        }

        this.setPurchaseType();

        if (this.parmPurchaseType() == PurchaseType::ReturnItem)
        {
            if (this.isFieldSet(fieldNum(PurchLine, PurchaseType)))
            {
                this.parmReturnActionId(this.purchParametersRecord().ReturnActionDefault);
            }
        }
        else
        {
            this.setPurchQty();

            if (this.isFieldSet(fieldNum(PurchLine, PurchQty)))
            {
                if (this.parmPurchQty() > 0)
                {
                    this.parmReturnActionId('');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnDispositionCodeId</Name>
				<Source><![CDATA[
    protected void setReturnDispositionCodeId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ReturnDispositionCodeId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScrap</Name>
				<Source><![CDATA[
    protected void setScrap()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, Scrap)))
        {
            return;
        }

        this.setPurchaseType();

        if (this.parmPurchaseType() != PurchaseType::ReturnItem)
        {
            this.setPurchQty();

            if (this.isFieldSet(fieldNum(PurchLine, PurchQty)))
            {
                if (this.parmPurchQty() <= 0)
                {
                    this.parmScrap(NoYes::No);
                    return;
                }
            }
        }

        this.setReturnActionDefaultsRecordFields();

        if (this.isReturnActionDefaultsRecordFieldsSet())
        {
            this.parmScrap(this.returnActionDefaultsRecord().Scrap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShippingDateConfirmed</Name>
				<Source><![CDATA[
    protected void setShippingDateConfirmed()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ShippingDateConfirmed)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShippingDateRequested</Name>
				<Source><![CDATA[
    protected void setShippingDateRequested()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ShippingDateRequested)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipUpdate</Name>
				<Source><![CDATA[
    protected void setSkipUpdate()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, SkipUpdate)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatisticValue_LT</Name>
				<Source><![CDATA[
    public LtIntrastatStatisticValue setStatisticValue_LT(RefRecId _statisticValue_LT = 0)
    {
        if (!prmisDefault(_statisticValue_LT))
        {
            this.setField(fieldNum(PurchLine, StatisticValue_LT), _statisticValue_LT);
        }

        return purchLine.StatisticValue_LT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatProcId</Name>
				<Source><![CDATA[
    protected void setStatProcId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, StatProcId)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.isAxPurchTableFieldsSet() || this.axPurchTable().isFieldModified(fieldNum(PurchTable, StatProcId)))
        {
            this.parmStatProcId(this.axPurchTable().parmStatProcId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatTriangularDeal</Name>
				<Source><![CDATA[
    protected void setStatTriangularDeal()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, StatTriangularDeal)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStockedProduct</Name>
				<Source><![CDATA[
    protected void setStockedProduct()
    {
        if (this.isMethodExecuted(funcName()))
        {
            return;
        }

        this.setInventTableRecordFields();
        this.setProcurementCategory();
        this.purchLine().setStockedProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStorageDimField</Name>
				<Source><![CDATA[
    public void setStorageDimField(FieldId _fieldId)
    {
        this.axInventDim().setDimFieldId(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    protected void setTableFields()
    {
        #ISOCountryRegionCodes

        super();

        useMapPolicy = false;

        if (!IntercompanyUpdatePriceDiscOnPurchaseDeliveryDateChangeFlight::instance().isEnabled()
            && purchLine.purchTable().isInterCompanyOrder()
            && !purchLine.purchTable().interCompanyEndpointActionPolicy().PriceDiscountSearch)
        {
            this.setFieldAsTouched(fieldNum(PurchLine, LinePercent));
            this.setFieldAsTouched(fieldNum(PurchLine, LineDisc));
        }

        this.setPurchId();
        this.setLineNumber();
        this.setItemId();
        this.setPurchStatus();
        this.setLedgerDimension();

        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            this.setVendorShipCalendarId();
            this.setRequestedShipDate();
            this.setConfirmedShipDate();
        }

        this.setDeliveryDate();
        this.setDeliveryPostalAddress();
        this.setName();
        this.setTaxGroup();
        this.setQtyOrdered();
        this.setPurchReceivedNow();
        this.setRemainPurchPhysical();
        this.setRemainPurchFinancial();
        this.setPriceUnit();
        this.setPurchPrice();
        this.setCurrencyCode();
        this.setLinePercent();
        this.setLineDisc();
        this.setLineAmount();
        this.setExternalItemId();
        this.setPurchUnit();
        this.setDefaultDimension();
        this.setConfirmedDlv();
        this.setAddressRefRecId();
        this.setInventTransId();
        this.setVendGroup();
        this.setVendAccount();
        this.setAddressRefTableId();
        this.setPurchQty();
        this.setPurchMarkup();
        this.setInventReceivedNow();
        this.setMultiLnDisc();
        this.setMultiLnPercent();
        this.setPurchaseType();
        this.setCovRef();
        this.setRemainInventPhysical();
        this.setTaxItemGroup();
        this.setTransactionCode();
        this.setTaxAutogenerated();
        this.setUnderDeliveryPct();
        this.setOverDeliveryPct();
        this.setTax1099Fields();
        this.setTax1099Amount();
        this.setBarCode();
        this.setBarCodeType();
        this.setInventRefId();
        this.setInventRefTransId();
        this.setItemRefType();
        this.setBlocked();
        this.setComplete();
        this.setReqPlanIdSched();
        this.setReqPOId();
        this.setItemRouteId();
        this.setItemBOMId();
        this.setLineHeader();
        this.setScrap();
        this.setReturnActionId();
        this.setProjCategoryId();
        this.setProjId();
        this.setInventDimId();
        this.setTransport();
        this.setStatProcId();
        this.setPort();
        this.setCreateFixedAsset();
        this.setAssetGroup();
        this.setAssetId();
        this.setAssetTransTypePurch();
        this.setAssetBookId();
        this.setProjLinePropertyId();
        this.setProjTaxItemGroupId();
        this.setProjTaxGroupId();
        this.setProjSalesPrice();
        this.setProjSalesCurrencyId();
        this.setSkipUpdate();
        this.setInterCompanyInventTransId();
        this.setProjSalesUnitId();
        this.setDeliveryType();
        this.setCustomerRef();
        this.setCustPurchaseOrderFormNum();
        this.setStatTriangularDeal();
        this.setTax1099State();
        this.setTax1099StateAmount();
        this.setShippingDateRequested();
        this.setShippingDateConfirmed();
        this.setInterCompanyOrigin();
        this.setReturnDispositionCodeId();
        this.setProcurementCategory();
        this.setStockedProduct();
        this.setMatchingPolicy();
        this.setMatchingAgreementLine();
        this.setAccountingDistributionTemplate();
        this.setAgreementSkipAutoLink();
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.setOperationType_MX();
        }
        if (BrazilParameters::isEnabled())
        {
            this.setCFOPTable_BR();
            this.setTaxServiceCode_BR();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.axPurchLine_W().setPriceAgreementDate_RU();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.axPurchLine_IN().setTableFields();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.setIntrastatFulfillmentDate_HU();
        }

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
        {
            this.setOverrideSalesTax();
        }

        this.setTAMItemVendRebateGroupId();

        useMapPolicy = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFieldsForce</Name>
				<Source><![CDATA[
    void setTableFieldsForce()
    {
        this.setTableFields();

        this.setDimensionEntitySpecifiers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTAMItemVendRebateGroupId</Name>
				<Source><![CDATA[
    protected void setTAMItemVendRebateGroupId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, tamItemVendRebateGroupId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax1099Amount</Name>
				<Source><![CDATA[
    protected void setTax1099Amount()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, Tax1099Amount)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax1099Fields</Name>
				<Source><![CDATA[
    protected void setTax1099Fields()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, Tax1099Fields)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.isAxPurchTableFieldsSet() || this.axPurchTable().isFieldModified(fieldNum(PurchTable, OrderAccount)))
        {
            this.parmTax1099Fields(this.axPurchTable().orderAccount_VendTableRecord().Tax1099Fields);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax1099State</Name>
				<Source><![CDATA[
    protected void setTax1099State()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, Tax1099State)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax1099StateAmount</Name>
				<Source><![CDATA[
    protected void setTax1099StateAmount()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, Tax1099StateAmount)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxAutogenerated</Name>
				<Source><![CDATA[
    protected void setTaxAutogenerated()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, TaxAutogenerated)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    protected void setTaxGroup()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, TaxGroup)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.isAxPurchTableFieldsSet()
            || (this.axPurchTable().isFieldModified(fieldNum(PurchTable, TaxGroup)) && !this.purchLine().isInvoiceMatched()))
        {
            this.parmTaxGroup(this.axPurchTable().parmTaxGroup());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOverrideSalesTax</Name>
				<Source><![CDATA[
    protected void setOverrideSalesTax()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, OverrideSalesTax)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.isAxPurchTableFieldsSet()
            || (this.axPurchTable().isFieldModified(fieldNum(PurchTable, OverrideSalesTax)) && !this.purchLine().isInvoiceMatched()))
        {
            this.parmOverrideSalesTax(this.axPurchTable().parmOverrideSalesTax());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroup</Name>
				<Source><![CDATA[
    protected void setTaxItemGroup()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, TaxItemGroup)))
        {
            return;
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            this.parmTaxItemGroup(this.inventTableRecord().purchTaxItemGroupId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxServiceCode_BR</Name>
				<Source><![CDATA[
    protected void setTaxServiceCode_BR()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, TaxServiceCode_BR)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionCode</Name>
				<Source><![CDATA[
    protected void setTransactionCode()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, TransactionCode)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.isAxPurchTableFieldsSet() || this.axPurchTable().isFieldModified(fieldNum(PurchTable, TransactionCode)))
        {
            this.parmTransactionCode(this.axPurchTable().parmTransactionCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransport</Name>
				<Source><![CDATA[
    protected void setTransport()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, Transport)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.isAxPurchTableFieldsSet() || this.axPurchTable().isFieldModified(fieldNum(PurchTable, Transport)))
        {
            this.parmTransport(this.axPurchTable().parmTransport());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnderDeliveryPct</Name>
				<Source><![CDATA[
    protected void setUnderDeliveryPct()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, UnderDeliveryPct)))
        {
            return;
        }

        this.setInventTableRecordFields();

        if (this.isInventTableRecordFieldsSet())
        {
            this.parmUnderDeliveryPct(this.inventTableRecord().purchUnderDeliveryPct());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendAccount</Name>
				<Source><![CDATA[
    protected void setVendAccount()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, VendAccount)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.parmVendAccount() != this.axPurchTable().parmOrderAccount())
        {
            this.parmVendAccount(this.axPurchTable().parmOrderAccount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendExternalItemDescriptionFields</Name>
				<Source><![CDATA[
    protected void setVendExternalItemDescriptionFields()
    {
        this.setItemId();
        this.axInventDim().setConfigId();
        this.setAxPurchTableFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendGroup</Name>
				<Source><![CDATA[
    protected void setVendGroup()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, VendGroup)))
        {
            return;
        }

        this.setAxPurchTableFields();

        if (this.parmVendGroup() != this.axPurchTable().parmVendGroup())
        {
            this.parmVendGroup(this.axPurchTable().parmVendGroup());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendorShipCalendarId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected void setVendorShipCalendarId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, ShipCalendarId)))
        {
            return;
        }

        AxPurchTable axPurchTable = this.axPurchTable();
        if (axPurchTable.parmVendorShipCalendarId() != this.parmVendorShipCalendarId()
            && axPurchTable.isFieldModified(fieldNum(PurchTable, ShipCalendarId))
            && !this.purchLine().isInvoiceMatched())
        {
            this.parmVendorShipCalendarId(axPurchTable.parmVendorShipCalendarId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowState</Name>
				<Source><![CDATA[
    protected void setWorkflowState()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(PurchLine, WorkflowState)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPurchLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Syncs <c>PurchTable_IN</c> buffer to <c>AxPurchTable_IN</c>
    /// </summary>
    private void syncPurchLine_IN()
    {
        AxPurchLine_IN axPurchLine_IN;
        PurchLine_IN   purchLine_IN;

        if (this.classCacheExist(axPurchLineIdx_IN))
        {
            axPurchLine_IN = this.classCacheLookup(axPurchLineIdx_IN);
        }
        purchLine_IN = this.purchLine().SysExtensionSerializerMap::getExtensionTable(tableNum(PurchLine_IN),false);

        if (axPurchLine_IN && purchLine_IN)
        {
            axPurchLine_IN.purchLine_IN(purchLine_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromInventDim</Name>
				<Source><![CDATA[
    public void updateFromInventDim()
    {
        //When updating axPurchLine through an instance of axInventDim_PurchLine only
        //this.setInventDimId() is allowed to be called, not the entire setTableFields()
        //as is done through the save-method.

        ttsbegin;

        runState        = AxBCRunState::Save;
        fieldModified   = new Set(Types::Integer);

        this.initRecord();

        this.inputStatus(InternalExternal::Internal);

        this.setInventDimId();
        inventDimIdDirtySaved = false;

        this.validateWrite();

        this.write();

        purchLine.InventDimId = InventDim::inventDimIdBlank();

        this.resetInternalValues();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAgreementLink</Name>
				<Source><![CDATA[
    protected void validateAgreementLink()
    {
        AgreementLine               agreementLine;
        AgreementLine               emptyAgreementLine;

        agreementLine = this.agreementLineRecord();

        if (agreementLine.RecId)
        {
            if (!agreementLine.isLinkValid(purchLine, false))
            {
                purchLine.unLinkAgreementLine();
                this.parmMatchingAgreementLine(0);
                this.agreementLineRecord(emptyAgreementLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueMapDependingFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the incoming value mapping of fields that depend on another field, such as the item,
    ///    state, and county fields.
    /// </summary>
    /// <remarks>
    ///    This method is used in the save method. Therefore the incoming value mapping is performed before
    ///    the fields are defaulted.
    /// </remarks>
    protected void valueMapDependingFields()
    {
        ItemId      valueMapedItemId;
        InventDim   valueMapedInventDim;

        if (this.valueMappingInbound())
        {
            if (purchLine.VendAccount && item)
            {
                [valueMapedItemId,valueMapedInventDim] = this.axPurchItemId(purchLine.VendAccount,item);

                this.parmItemId(valueMapedItemId);
                if (!InventDim::isInventDimEqualProductDim(EcoResProductDimGroupSetup::newItemId(purchLine.ItemId), valueMapedInventDim, InventDim::find(InventDim::inventDimIdBlank())))
                {
                    axInventDim.productDimensions(valueMapedInventDim);
                    this.parmInventDimId(InventDim::findOrCreate(axInventDim.inventDim()).InventDimId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendExternalItemDescription</Name>
				<Source><![CDATA[
    public VendExternalItemDescription vendExternalItemDescription(VendExternalItemDescription _vendExternalItemDescription = null)
    {
        VendExternalItemDescription     vendExternalItemDescription;

        if (!vendExternalItemDescriptionIdx)
        {
            vendExternalItemDescriptionIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_vendExternalItemDescription))
        {
            this.classCacheInsert(vendExternalItemDescriptionIdx, _vendExternalItemDescription);
            vendExternalItemDescription = _vendExternalItemDescription;
        }
        else
        {
            if (this.classCacheExist(vendExternalItemDescriptionIdx))
            {
                vendExternalItemDescription = this.classCacheLookup(vendExternalItemDescriptionIdx);
            }
            else
            {
                vendExternalItemDescription = new VendExternalItemDescription(this.parmItemId(), this.axInventDim().inventDim(), this.axPurchTable().parmOrderAccount());
                vendExternalItemDescription.findExternalDescription();

                this.classCacheInsert(vendExternalItemDescriptionIdx, vendExternalItemDescription);
            }
        }

        return vendExternalItemDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    protected void write()
    {
        SysExtensionSerializerExtensionMap sysExtensionSerializerExtensionMap;
        PurchLine_W retrievedRecord;

        this.associateWithAgreementLine();

        this.validateAgreementLink();

        if (axPurchLineIdx_W)
        {
            sysExtensionSerializerExtensionMap = this.axPurchLine_W().currentRecord();
            purchLine.SysExtensionSerializerMap::packExtensionTable(sysExtensionSerializerExtensionMap);
        }

        super();

        if (axPurchLineIdx_W)
        {
            retrievedRecord = purchLine.purchLine_W();
            if ((this.axPurchLine_W().parmPurchLine() == 0 && retrievedRecord.RecId) ||
                (this.axPurchLine_W().parmPurchLine() != 0 && retrievedRecord.RecVersion != this.axPurchLine_W().currentRecord().RecVersion))
            {
                this.classCacheDelete(axPurchLineIdx_W);
            }
            else
            {
                if (this.axPurchLine_W().parmPurchLine() == 0)
                {
                    this.axPurchLine_W().parmPurchLine(this.parmRecId());
                }
                this.axPurchLine_W().save();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static AxPurchLine construct()
    {
        return new AxPurchLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchLine</Name>
				<Source><![CDATA[
    public static AxPurchLine newPurchLine(PurchLine _purchLine)
    {
        AxPurchLine axPurchLine = AxPurchLine::construct();
        axPurchLine.purchLine(_purchLine);

        return axPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AxPurchLine</c> instance from the given <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_salesLine">
    /// The <c>SalesLine</c> record to initialize from.
    /// </param>
    public void initFromSalesLine(SalesLine _salesLine)
    {
        this.parmPurchPrice(ExchangeRateHelper::curPrice2CurPrice(_salesLine.SalesPrice, _salesLine.CurrencyCode, this.purchLine().CurrencyCode));
        this.parmPriceUnit(_salesLine.PriceUnit);
        this.parmPurchMarkup(ExchangeRateHelper::curPrice2CurPrice(_salesLine.SalesMarkup, _salesLine.CurrencyCode, this.purchLine().CurrencyCode));
        this.parmLinePercent(_salesLine.LinePercent);
        this.parmLineDisc(ExchangeRateHelper::curPrice2CurPrice(_salesLine.LineDisc, _salesLine.CurrencyCode, this.purchLine().CurrencyCode));
        this.parmMultiLnPercent(_salesLine.MultiLnPercent);
        this.parmMultiLnDisc(ExchangeRateHelper::curPrice2CurPrice(_salesLine.MultiLnDisc, _salesLine.CurrencyCode, this.purchLine().CurrencyCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AxPurchLine</c> instance from the given <c>VendInvoiceTrans</c> record.
    /// </summary>
    /// <param name = "_vendInvoiceTrans">
    /// The <c>VendInvoiceTrans</c> record to initialize from.
    /// </param>
    public void initFromVendInvoiceTrans(VendInvoiceTrans _vendInvoiceTrans)
    {
        this.parmPurchPrice(_vendInvoiceTrans.PurchPrice);
        this.parmPriceUnit(_vendInvoiceTrans.PriceUnit);
        this.parmPurchMarkup(_vendInvoiceTrans.PurchMarkup);
        this.parmLinePercent(_vendInvoiceTrans.LinePercent);
        this.parmLineDisc(_vendInvoiceTrans.LineDisc);
        this.parmMultiLnPercent(_vendInvoiceTrans.MultiLnPercent);
        this.parmMultiLnDisc(_vendInvoiceTrans.MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPricingFieldsFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the pricing fields of the <c>AxPurchLine</c> instance from the given <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_salesLine">
    /// The <c>SalesLine</c> record to initialize from.
    /// </param>
    public void initPricingFieldsFromSalesLine(SalesLine _salesLine)
    {
        if (_salesLine.ExpectedRetQty < 0
            && _salesLine.isIntercompanyOrigin())
        {
            this.parmPurchPrice(ExchangeRateHelper::curPrice2CurPrice(_salesLine.CostPrice * _salesLine.PriceUnit,
                Ledger::accountingCurrency(CompanyInfo::current()),
                this.purchLine().CurrencyCode));
        }
        else
        {
            this.parmPurchPrice(ExchangeRateHelper::curPrice2CurPrice(_salesLine.CostPrice, Ledger::accountingCurrency(CompanyInfo::current()), this.purchLine().CurrencyCode));
        }

        this.parmPriceUnit(_salesLine.PriceUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMarkupAndDiscountFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the markup and the discount values for the <c>AxPurchLine</c> instance.
    /// </summary>
    public void clearMarkupAndDiscountFields()
    {
        this.parmPurchMarkup(0);
        this.parmLinePercent(0);
        this.parmLineDisc(0);
        this.parmMultiLnPercent(0);
        this.parmMultiLnDisc(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AxPurchLine</c> instance.
    /// </summary>
    public void initValue()
    {
        this.parmPurchPrice(this.purchLine().PurchPrice);
        this.parmPriceUnit(this.purchLine().PriceUnit);
        this.parmPurchMarkup(this.purchLine().PurchMarkup);
        this.parmLinePercent(this.purchLine().LinePercent);
        this.parmLineDisc(this.purchLine().LineDisc);
        this.parmMultiLnPercent(this.purchLine().MultiLnPercent);
        this.parmMultiLnDisc(this.purchLine().MultiLnDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AxPurchLine</c> instance from the given <c>PurchLine</c> record.
    /// </summary>
    /// <param name = "_purchLine">
    /// The <c>PurchLine</c> record to initialize from.
    /// </param>
    public void initFromPurchLine(PurchLine _purchLine)
    {
        this.parmPurchPrice(_purchLine.PurchPrice);
        this.parmPriceUnit(_purchLine.PriceUnit);
        this.parmPurchMarkup(_purchLine.PurchMarkup);
        this.parmLinePercent(_purchLine.LinePercent);
        this.parmLineDisc(_purchLine.LineDisc);
        this.parmMultiLnPercent(_purchLine.MultiLnPercent);
        this.parmMultiLnDisc(_purchLine.MultiLnDisc);
        this.parmLineAmount(_purchLine.LineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields_PSA</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(AxPurchLine), methodStr(AxPurchLine, setTableFields))]
    public static void setTableFields_PSA(XppPrePostArgs _args)
    {
        AxPurchLine     thisAxPurchLine = _args.getThis();
        thisAxPurchLine.setPSARetainScheduleId();
        thisAxPurchLine.setPSATotalRetainAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFieldsPost_PMF</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(AxPurchLine), methodStr(AxPurchLine, setTableFields))]
    public static void setTableFieldsPost_PMF(XppPrePostArgs _args)
    {
        AxPurchLine axPurchLine = _args.getThis();

        axPurchLine.setPdsCWQty();
        axPurchLine.setPdsCWInventReceivedNow();
        axPurchLine.setPdsCWRemainInventPhysical();
        axPurchLine.setPdsCWRemainInventFinancial();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateDefaultDimensionForPurchLine</Name>
				<Source><![CDATA[
    protected boolean shouldUpdateDefaultDimensionForPurchLine(boolean _headerDefaultDimensionChanged, PurchTable _localPurchTable)
    {
        return (this.isAxPurchTableFieldsSet() ||
                _headerDefaultDimensionChanged ||
                this.isInventTableRecordFieldsSet()) && _localPurchTable.ProjId == this.purchLine().ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRequestedShipAndReceiptDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void calculateRequestedShipAndReceiptDate(
        DlvDate         _requestedShipDate,
        DlvDate         _requestedReceiptDate = dateNull(),
        SchedDirection  _calculateDirection = SchedDirection::Forward,
        Days            _leadtime = 0,
        CalendarDays    _useCalendarDays = NoYes::No)
    {
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled
            && this.parmPurchaseType() != PurchaseType::ReturnItem)
        {
            VendCustTransportPointCalculateInput input = this.createTransportPointInput(_calculateDirection, _leadtime, _useCalendarDays);
            input.RequestedShipDate = _requestedShipDate;
            input.RequestedReceiptDate = _requestedReceiptDate;
            VendCustTransportPointCalculateOutput output = VendCustTransportPointLine::calculateRequestedShipAndReceiptDate(input);
            if (output && output.RequestedShipDate != this.parmRequestedShipDate())
            {
                output = VendCustTransportPointLine::evaluateRequestedShipDate(input, output);
            }
            else if (output.RequestedReceiptDate != this.parmDeliveryDate())
            {
                output = VendCustTransportPointLine::evaluateRequestedReceiptDate(input, output);
            }
            
            purchLine.RequestedShipDate = output.RequestedShipDate;
            this.setFieldAsTouched(fieldNum(PurchLine, RequestedShipDate));
            purchLine.DeliveryDate = output.RequestedReceiptDate;
            this.setFieldAsTouched(fieldNum(PurchLine, DeliveryDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransportPointInput</Name>
				<Source><![CDATA[
    protected VendCustTransportPointCalculateInput createTransportPointInput(
        SchedDirection  _calculateDirection = SchedDirection::Forward,
        Days            _leadtime = 0,
        CalendarDays    _useCalendarDays = NoYes::No)
    {
        VendTable localVendTable = this.purchLine().vendTable_OrderAccount();
        PurchLine localPurchLine = this.purchLine();

        VendCustTransportPointCalculateInput input = VendCustTransportPointCalculateInput::construct();
        input.ShippingAddress =  localVendTable.postalAddress();
        input.ReceivingAddress = localPurchLine.deliveryAddress();
        input.DeliveryMode = localPurchLine.DlvMode;
        input.PurchaseCalendarId = localVendTable.PurchCalendarId;
        input.VendorShipCalendarId = localPurchLine.ShipCalendarId;
        if (localPurchLine.ItemId)
        {
            input.ItemCoverageGroupCalendarId = localPurchLine.type().internalCalendarId();
        }
        input.CalculateDirection = _calculateDirection;
        input.LeadTime = _leadtime;
        input.UseCalendarDays = _useCalendarDays;
        input.RequestedShipDateInPast = PurchParameters::find().RequestedShipDateInPast;

        return input;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>