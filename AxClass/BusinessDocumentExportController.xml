<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentExportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
using System.Diagnostics;

/// <summary>
/// The class implements integration logic for generating a business document and 
/// communication with the Business Document Submission Service for export channel scenarios.
/// </summary>
final internal class BusinessDocumentExportController
{
    private const str JsonEmtpyArray = '[]';
    private BusinessDocument businessDocument;
    private BusinessDocumentResubmitType resubmitType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method instantiates the controller based on the export channel business document.
    /// </summary>
    /// <param name = "_document">The business document.</param>
    /// <returns>The controller instance.</returns>
    public static BusinessDocumentExportController newDocument(BusinessDocument _document)
    {
        if (!_document)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        var controller = new BusinessDocumentExportController();

        controller.parmDocument(_document);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocument</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public BusinessDocument parmDocument(BusinessDocument _document = businessDocument)
    {
        businessDocument = _document;
        return businessDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResubmitType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public BusinessDocumentResubmitType parmResubmitType(BusinessDocumentResubmitType _resubmitType = resubmitType)
    {
        resubmitType = _resubmitType;
        return resubmitType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resubmit</Name>
				<Source><![CDATA[
    [Hookable(false)]
	public void resubmit()
    {
        Stopwatch stopwatch;
        boolean success;

        if (!businessDocument)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        str documentIdStr = strLwr(guid2StrWithoutBraces(businessDocument.UID));

        BusinessDocumentTelemetry::startEvent(
            BusinessDocumentInstrumentationConstants::ResubmitExportChannel,
            funcName());

        stopwatch = Stopwatch::StartNew();

        try
        {
            JObject response = BusinessDocumentServiceController::requestServiceForJSON(
                JsonEmtpyArray,
                this.getResubmitAction(),
                documentIdStr,
                false,
                BusinessDocumentWebHelper::HttpPost);

            if (response)
            {
                var exception = response.SelectToken(BusinessDocumentWebHelper::ExceptionToken);
                if (exception)
                {
                    BusinessDocumentWebHelper::showErrorLog(response);
                    success = false;
                }
                else
                {
                    success = true;
                }
            }
        }
        finally
        {
            stopwatch.Stop();
            BusinessDocumentTelemetry::finishEvent(
                BusinessDocumentInstrumentationConstants::ResubmitExportChannel,
                funcName(),
                success,
                stopwatch.ElapsedMilliseconds);
        }

        BusinessDocumentTelemetry::actionEvent(
            strFmt(BusinessDocumentInstrumentationConstants::Resubmit,
            enum2Str(this.parmResubmitType()),
            documentIdStr),
            funcName());
      
	}

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResubmitAction</Name>
				<Source><![CDATA[
    private str getResubmitAction()
    {
        str ret = BusinessDocumentServiceActions::Resubmit;

        switch (this.parmResubmitType())
        {
            case BusinessDocumentResubmitType::ResubmitFromFailedAction:
                ret = BusinessDocumentServiceActions::ResubmitFromFailedAction;

                break;

            case BusinessDocumentResubmitType::ResubmitToExecuteUpdateActions:
                throw Error(Error::wrongUseOfFunction(funcName()));

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>