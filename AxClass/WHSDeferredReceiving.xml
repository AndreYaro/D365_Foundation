<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSDeferredReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class WHSDeferredReceiving
{
    protected WHSContainerTypeCode containerTypeCode;
    protected WHSDeferredReceivingPolicyId deferredReceivingPolicyId;
    protected InventLocationId inventLocationId;
    protected WHSLicensePlateId licensePlateId;
    protected WHSLoadId loadId;
    protected WHSMenuItemName menuItemName;
    protected Qty currentQty;
    protected Qty totalQty;
    protected ItemId itemId;
    protected UnitOfMeasureSymbol uom;
    protected WHSDispositionCode dispositionCode;
    protected WHSReceiptId receiptId;
    protected WHSShipmentId shipmentId;
    protected UnitOfMeasureSymbol currentUOM;
    protected WHSUserId userId;
    protected InventDim passthroughInventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    protected internal void initFromParameters(WHSRFPassthrough _pass, WHSRFMenuItemTable _menuItemTable, WHSDefaultContainerTypeCode _defaultContainerCode)
    {
        this.parmReceiptId(_pass.parmReceiptId());
        this.parmLicensePlateId(_pass.parmLicensePlateId());
        this.parmUserId(_pass.parmUserId());
        this.parmPassthroughInventDim(_pass.createInventDimFromPass());

        this.parmMenuItemName(_menuItemTable.MenuItemName);
        this.parmDeferredReceivingPolicyId(_menuItemTable.DeferredReceivingPolicyId);
        this.parmContainerTypeCode(_defaultContainerCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerTypeCode</Name>
				<Source><![CDATA[
    internal WHSContainerTypeCode parmContainerTypeCode(WHSContainerTypeCode _containerTypeCode = containerTypeCode)
    {
        containerTypeCode = _containerTypeCode;
        return containerTypeCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeferredReceivingPolicyId</Name>
				<Source><![CDATA[
    internal WHSDeferredReceivingPolicyId parmDeferredReceivingPolicyId(WHSDeferredReceivingPolicyId _deferredReceivingPolicyId = deferredReceivingPolicyId)
    {
        deferredReceivingPolicyId = _deferredReceivingPolicyId;
        return deferredReceivingPolicyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    internal InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateId</Name>
				<Source><![CDATA[
    internal WHSLicensePlateId parmLicensePlateId(WHSLicensePlateId _licensePlateId = licensePlateId)
    {
        licensePlateId = _licensePlateId;
        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    internal WHSLoadId parmLoadId(WHSLoadId _loadId = loadId)
    {
        loadId = _loadId;
        return loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    internal WHSMenuItemName parmMenuItemName(WHSMenuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;
        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentQty</Name>
				<Source><![CDATA[
    internal Qty parmCurrentQty(InventQty _currentQty = currentQty)
    {
        currentQty = _currentQty;
        return currentQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalQty</Name>
				<Source><![CDATA[
    internal Qty parmTotalQty(InventQty _totalQty = totalQty)
    {
        totalQty = _totalQty;
        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    internal ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUOM</Name>
				<Source><![CDATA[
    internal UnitOfMeasureSymbol parmUOM(UnitOfMeasureSymbol _uom = uom)
    {
        uom = _uom;
        return uom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDispositionCode</Name>
				<Source><![CDATA[
    internal WHSDispositionCode parmDispositionCode(WHSDispositionCode _dispositionCode = dispositionCode)
    {
        dispositionCode = _dispositionCode;
        return dispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptId</Name>
				<Source><![CDATA[
    internal WHSReceiptId parmReceiptId(WHSReceiptId _receiptId = receiptId)
    {
        receiptId = _receiptId;
        return receiptId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentId</Name>
				<Source><![CDATA[
    internal WHSShipmentId parmShipmentId(WHSShipmentId _shipmentId = shipmentId)
    {
        shipmentId = _shipmentId;
        return shipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentUOM</Name>
				<Source><![CDATA[
    internal UnitOfMeasureSymbol parmCurrentUOM(UnitOfMeasureSymbol _currentUOM = currentUOM)
    {
        currentUOM = _currentUOM;
        return currentUOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    internal WHSUserId parmUserId(WHSUserId _userId = userId)
    {
        userId = _userId;
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPassthroughInventDim</Name>
				<Source><![CDATA[
    internal InventDim parmPassthroughInventDim(InventDim _passthroughInventDim = passthroughInventDim)
    {
        passthroughInventDim = _passthroughInventDim;
        return passthroughInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSDeferredReceiving construct()
    {
        return new WHSDeferredReceiving();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkCreationProcessSupported</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static boolean isWorkCreationProcessSupported(WHSWorkCreationProcess _workCreationProcess)
    {
        switch (_workCreationProcess)
        {
            case WHSWorkCreationProcess::PurchaseOrderItemReceiving:
            case WHSWorkCreationProcess::PurchaseOrderLineReceiving:
            case WHSWorkCreationProcess::TransferOrderItemReceiving:
            case WHSWorkCreationProcess::TransferOrderLineReceiving:
            case WHSWorkCreationProcess::LoadItemReceiving:
                return true;
            case WHSWorkCreationProcess::LicensePlateReceiving:
                return WHSDeferredLPReceivingFlight::instance().isEnabled();
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchTaskToProcessDeferredReceivingInBundle</Name>
				<Source><![CDATA[
    static container createBatchTaskToProcessDeferredReceivingInBundle()
    {
        WHSReceivingProcessingID receivingProcessingID = newGuid();

        BatchHeader header = BatchHeader::construct();
        header.parmRetriesOnFailure(0); // Do not retry - user can retry from the UI
        header.parmCaption(strFmt("@WAX:ExecuteDeferredReceivingBatchJobDescription", receivingProcessingID));
        WHSExecuteDeferredReceivingInBundle task = WHSExecuteDeferredReceivingInBundle::newFromReceivingProcessingId(receivingProcessingID);
        task.batchInfo().parmCaption(strFmt("@WAX:ExecuteDeferredReceivingBatchJobDescription", receivingProcessingID));
        header.addTask(task);
        header.save();

        return [receivingProcessingID, header.parmBatchHeaderId()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMixLPReceiptToBatchTask</Name>
				<Source><![CDATA[
    static internal void addMixLPReceiptToBatchTask(
        WHSMixedLicensePlateReceipt _mixedLicensePlateReceipt,
        WHSReceivingProcessingID _receivingProcessingID,
        RefRecId _batchHeaderId)
    {
        ttsbegin;

        WHSMixedLicensePlateReceiptLog log = WHSMixedLicensePlateReceiptLog::findOrCreateForMixedLicensePlateReceipt(_mixedLicensePlateReceipt.RecId, true);
        if (log.BatchJob != _batchHeaderId)
        {
            log.BatchJob =_batchHeaderId;
            log.update();
        }

        _mixedLicensePlateReceipt.ReceivingProcessingId = _receivingProcessingID;
        _mixedLicensePlateReceipt.CurrentUser = '';
        _mixedLicensePlateReceipt.ReceiptStatus = WHSMixedLicensePlateReceiptStatus::Processing;
        _mixedLicensePlateReceipt.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchTaskToProcessDeferredReceiving</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    static internal void createBatchTaskToProcessDeferredReceiving(WHSMixedLicensePlateReceipt _mixedLicensePlateReceipt)
    {
        ttsbegin;

        BatchHeader header = BatchHeader::construct();
        header.parmRetriesOnFailure(0); // Do not retry - user can retry from the UI
        header.parmCaption(strFmt("@WAX:ExecuteDeferredReceivingBatchJobDescription", _mixedLicensePlateReceipt.LicensePlateId));
        WHSExecuteDeferredReceiving task = WHSExecuteDeferredReceiving::newFromMixedLicensePlateReceipt(_mixedLicensePlateReceipt);
        task.batchInfo().parmCaption(strFmt("@WAX:ExecuteDeferredReceivingBatchJobDescription", _mixedLicensePlateReceipt.LicensePlateId));
        header.addTask(task);
        header.save();

        WHSMixedLicensePlateReceiptLog log = WHSMixedLicensePlateReceiptLog::findOrCreateForMixedLicensePlateReceipt(_mixedLicensePlateReceipt.RecId, true);
        log.BatchJob = header.parmBatchHeaderId();
        log.update();

        _mixedLicensePlateReceipt.CurrentUser = '';       
        _mixedLicensePlateReceipt.ReceiptStatus = WHSMixedLicensePlateReceiptStatus::Processing;
        _mixedLicensePlateReceipt.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDeferredReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates work for given WHSMixedLicensePlateReceipt record.
    /// </summary>
    /// <param name = "_mixedLicensePlateReceipt">Record for which work will be created</param>
    /// <returns>Work build Id of the created work.</returns>
    /// <remarks> User can also use WHSMixedLPReceiving::LPComplete::clicked() to process the record.</remarks>
    internal static WHSWorkBuildId processDeferredReceiving(WHSMixedLicensePlateReceipt _mixedLicensePlateReceipt)
    {
        WHSUserId userId = _mixedLicensePlateReceipt.CurrentUser;

        if (WHSDeferredReceivingMixedLPCurrentUserFlight::instance().isEnabled() && !userId)
        {
            WHSMixedLicensePlateReceiptLine mixedLicensePlateReceiptLine;
            select firstonly ReceivedByUser from mixedLicensePlateReceiptLine
                where mixedLicensePlateReceiptLine.MixedLPReceivingTable == _mixedLicensePlateReceipt.RecId;
            userId = mixedLicensePlateReceiptLine.ReceivedByUser;
        }

        if (!userId)
        {
            userId = WHSParameters::find().GenericWorkUserId;
        }

        WHSMixedLicensePlateCompleter mixedLicensePlateCompleter = WHSMixedLicensePlateCompleter::newFromLicensePlateIdAndUser(_mixedLicensePlateReceipt.LicensePlateId, userId);
        if (WHSDeferredReceivingLPConstructorRefactoringFlight::instance().isEnabled())
        {
            mixedLicensePlateCompleter.parmMustUpdateOutboundLoadLineWorkCreatedQty(false);
        }
        if (WHSDeferredReceivingDispositionCodeAndUnitizedQtyFlight::instance().isEnabled())
        {
            mixedLicensePlateCompleter.parmDispositionCode(_mixedLicensePlateReceipt.DispositionCode);
        }

        WHSWorkBuildId workBuildId = mixedLicensePlateCompleter.completeMixedLicensePlate();

        if(!WHSPrintLabelByCheckingDeferredReceivingInLPCompleterEnabledFlight::instance().isEnabled())
        {
            WHSRFMenuItemTable rfMenuItem = WHSRFMenuItemTable::find(_mixedLicensePlateReceipt.MenuItemName);

            WHSDeferredReceivingPolicy deferredReceivingPolicy = WHSDeferredReceivingPolicy::find(rfMenuItem.DeferredReceivingPolicyId);

            // Deferred receiving label print settings ignores menuItem.PrintLabel
            if (deferredReceivingPolicy.LabelPrintingOnDeferredReceivingAsyncProcessing != WHSDeferredReceivingPrintLabelProcessEnum::DoNotGenerateLabels)
            {
                using (var noPrintContext = WHSDeferredReceivingSkipPrintContext::construct())
                {
                    WHSLicensePlateLabelBuild labelBuild = new WHSLicensePlateLabelBuild(
                WHSWorkTable::getFirstWorkLineByWorkBuildId(workBuildId, userId).WorkId,
                null,
                _mixedLicensePlateReceipt.MenuItemName,
                userId);

                    if (WHSDeferredLPReceivingFlight::instance().isEnabled())
                    {
                        labelBuild.buildAllLicensePlateLabels(_mixedLicensePlateReceipt.LicensePlateId);
                    }
                    else
                    {
                        labelBuild.buildLicensePlateLabels();
                    }
                }
            }
        }
        
        return workBuildId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>