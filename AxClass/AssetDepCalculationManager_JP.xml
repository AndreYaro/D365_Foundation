<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepCalculationManager_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is a class to manage the Japan fixed asset depreciation calculation.
/// </summary>
class AssetDepCalculationManager_JP
{
    AssetDepBookMap_JP assetDepBookMap;
    AssetDepTableMethodInterface_JP assetDepTableMethodInterface;
    AssetDepCalculationArgs_JP calcArgs;
    AssetDepMethodChangeSettings_JP changeSettings;

    Map assetDepCalculators;
    Map assetDepProfileChanges;
    Map assetTableIntervals;
    AssetTransDate calcToDate;

    AssetAmount yearBeginningBalanceOfAccumulatedDep;
    AssetAmount allowableLimitForSumOfDepYTD;

    boolean isDepreciationExtProfile;     // Calculate extraordinary depreciation profile.
    boolean isDepreciationAccProfile;     // Calculate accelerated depreciation profile

    #AssetDepCalculation_JP

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addExtraDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add amount for accumulated extra depreciation amount
    /// </summary>
    /// <param name="_extraDepAmount">
    /// The amount to be added to accumuldated extra depreciation amount
    /// </param>
    public void addExtraDepAmount(AssetAmount _extraDepAmount)
    {
        AssetAmount accumulatedExtraDepAmount;

        accumulatedExtraDepAmount = calcArgs.parmAccumulatedExtraDepAmount();
        calcArgs.parmAccumulatedExtraDepAmount(accumulatedExtraDepAmount + _extraDepAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnpostedExtraDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unposted amount for extra ordinary depreciation, it includes accelerated and special depreciation.
    /// </summary>
    /// <param name="_unPostedExtraDepAmount">
    /// Unposted amount for extra ordinary depreciation, it includes accelerated and special depreciation.
    /// </param>
    public void parmUnpostedExtraDepAmount(AssetAmount _unPostedExtraDepAmount)
    {
        calcArgs.parmUnpostedAccumulatedExtraDepAmount(_unPostedExtraDepAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetIdlePeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Number of idle periods for an asset.
    /// </summary>
    /// <param name="_assetIdlePeriods">
    /// Number of idle periods for an asset.
    /// </param>
    public void parmAssetIdlePeriods(int _assetIdlePeriods)
    {
        calcArgs.parmAssetIdlePeriods(_assetIdlePeriods);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAssetIdlePeriodActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Idle period active for an asset.
    /// </summary>
    /// <param name="_isAssetIdlePeriodActive">
    /// Idle period active for an asset.
    /// </param>
    public void parmIsAssetIdlePeriodActive(boolean _isAssetIdlePeriodActive)
    {
        calcArgs.parmIsAssetIdlePeriodActive(_isAssetIdlePeriodActive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnpostedSpecialDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unposted amount for special depreciation.
    /// </summary>
    /// <param name="_unPostedSpecialDepAmount">
    /// Unposted amount for special depreciation.
    /// </param>
    public void parmUnpostedSpecialDepAmount(AssetAmount _unPostedSpecialDepAmount)
    {
        calcArgs.parmUnpostedAccumulatedSpecialDepAmount(_unPostedSpecialDepAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the depreciation amount based on parameters.
    /// </summary>
    /// <returns>
    /// The depreciation amount.
    /// </returns>
    public AssetAmount calc()
    {
        AssetAmount ret;
        AssetDepBookMap_JP assetDepBookMapLoc;
        AssetDepCalculation_JP curCalculatorLoc;
        AssetTableInterval assetTableInterval;
    	AssetTransDate periodStartDate;
        AssetTransDate nextPeriodStartDate;
	    // Update period date because of conceivable interval frequency change
	    periodStartDate = assetDepTableMethodInterface.parmPeriodStart_JP();
	    assetTableInterval = this.getAssetTableInterval(periodStartDate);
	    calcArgs.parmAssetTableInterval(assetTableInterval);
	    assetDepTableMethodInterface.parmPeriodEnd_JP(assetTableInterval.endPeriod(periodStartDate));

        // Update args for calculator
        calcArgs.initFromInterfaceByPeriod(assetDepTableMethodInterface);

        // Init the amount to depreciate for document if needed.
        if (calcArgs.parmAssetDocumentEntry())
        {
            calcArgs.parmDocumentAmountToDep(
                AssetDepTransMap_JP::calcAmountToDepreciate(
                    assetDepBookMap,
                    calcArgs.parmPeriodEnd(),
                    calcArgs.parmAssetTableInterval(),
                    calcArgs.parmAssetDocumentEntry().RecId));
        }

        if (AssetParameters::isManuallyChangeDepProfileEnable_JP())
        {
            this.updateArgs();
        }

        assetDepBookMapLoc = assetDepBookMap.data();
        if (assetDepBookMap.AcquisitionPrice == 0)
        {
            assetDepBookMapLoc.AcquisitionPrice = assetDepTableMethodInterface.getAmountToDepreciate();
            calcArgs.parmAllowableLimitForAccumulatedDep(assetDepBookMapLoc.AssetDepBookMap_JP::calcAllowableLimitForAccumulatedDep_JP());
        }

        curCalculatorLoc = this.getCalculator(calcArgs.parmPeriodstart());

        this.updateArgsForAdj(curCalculatorLoc.getAssetDepreciationMethod());

        // initialize args period attributes
	    if (!calcArgs.parmIsSpecialDepAllocation())
	    {
            calcArgs.initByCalculationPeriod(curCalculatorLoc);
	    }

        curCalculatorLoc.preRunCalc();

        if (calcArgs.parmIsAssetIdlePeriodActive())
        {
            //Do not calculate depreciation for idle period
            ret = 0;
        }
        else
        {
            ret = curCalculatorLoc.calc();
        }

        if (calcArgs.parmUseCatchUpMethod())
        {
            yearBeginningBalanceOfAccumulatedDep    = curCalculatorLoc.getBeginningBalanceOfAccumulatedDep(curCalculatorLoc.calcDepStartDateInCurYearBeyondChange());
            allowableLimitForSumOfDepYTD = curCalculatorLoc.getBeginningBalanceOfAccumulatedDep(calcArgs.parmPeriodEnd() + 1)
                - yearBeginningBalanceOfAccumulatedDep;
        }

        // move to next period and interval
        nextPeriodStartDate = assetDepTableMethodInterface.parmPeriodEnd_JP() + 1;
        assetTableInterval = this.getAssetTableInterval(nextPeriodStartDate);
    	assetDepTableMethodInterface.parmPeriodStart_JP(nextPeriodStartDate);
        assetDepTableMethodInterface.parmPeriodEnd_JP(assetTableInterval.endPeriod(nextPeriodStartDate));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateArgsForAdj</Name>
				<Source><![CDATA[
    private void updateArgsForAdj(AssetDepreciationMethod _depreciationMethod)
    {
        if (_depreciationMethod == AssetDepreciationMethod::NewStraightLine_JP)
        {
            AssetTransDate lastWriteUpDownAdjDate = AssetTrans::latestWriteUpDownAdjDate(calcArgs.parmAssetId(), calcArgs.parmAssetBookId(), calcArgs.parmPeriodEnd());

            if (lastWriteUpDownAdjDate)
            {
                TransDate adjPeriodStartDate = this.getStartOfAdjustmentPeriod(lastWriteUpDownAdjDate);

                if (adjPeriodStartDate <= calcArgs.parmPeriodEnd())
                {
                    calcArgs.parmStartAdjustmentPeriodDate(adjPeriodStartDate);
                    calcArgs.parmStartToDepreciateDate(max(adjPeriodStartDate, calcArgs.parmStartToDepreciateDate()));
                    calcArgs.parmServiceLifeAfterAdjustment(this.calcServiceLifeAfterAdjustment());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartOfAdjustmentPeriod</Name>
				<Source><![CDATA[
    internal TransDate getStartOfAdjustmentPeriod(TransDate _writeUpDownAdjDate)
    {
        AssetTableInterval deprInterval = calcArgs.parmAssetTableInterval();
        TransDate adjPeriodStartDate = deprInterval.startOfPeriod(_writeUpDownAdjDate);

        return adjPeriodStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServiceLifeAfterAdjustment</Name>
				<Source><![CDATA[
    private AssetServiceLife calcServiceLifeAfterAdjustment()
    {
        AssetTableInterval tableInterval = calcArgs.parmAssetTableInterval();
            
        int numberOfPeriodsPassed = tableInterval.numOfPeriods(calcArgs.parmDepreciationStartDate(), calcArgs.parmStartAdjustmentPeriodDate());
        int yearsPassed = round(tableInterval.periodToYear(numberOfPeriodsPassed), 0);
            
        return calcArgs.parmAssetServiceLife() - yearsPassed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowableLimitForSumOfDepYTD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the allowable limit for summary of depreciation from beginning of current year to current period end.
    /// </summary>
    /// <returns>
    /// The allowable limit for summary of depreciation from beginning of current year to current period end.
    /// </returns>
    /// <remarks>
    /// It must be used after call the <C>calc</C> method.
    /// </remarks>
    public AssetAmount getAllowableLimitForSumOfDepYTD()
    {
        return allowableLimitForSumOfDepYTD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTableInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a instance of a sub class of <C>AssetTableInterval</C> based on the specified date.
    /// </summary>
    /// <param name="_date">
    /// The date used to get the asset table interval.
    /// </param>
    /// <returns>
    /// An instance of a sub class of <C>AssetTableInterval</C>.
    /// </returns>
	public AssetTableInterval getAssetTableInterval(AssetTransDate _date)
    {
        AssetTableInterval ret;
        MapEnumerator enumerator;

        enumerator = assetTableIntervals.getEnumerator();
        while (enumerator.moveNext())
        {
            if (enumerator.currentKey() <= _date)
            {
                ret = enumerator.currentValue();
            }
            else
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBeginBalanceCalculationResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the beginning balance result which based on the cache calculated in process of calculation.
    /// </summary>
    /// <returns>
    /// The calculation cache of accumulated depreciation beginning balance amount
    /// </returns>
    public Map getBeginBalanceCalculationResult()
    {
        Map beginBalanceMap = new Map(Types::Date, Types::Real);
        Map tmpMap;
        AssetTransDate transDateLoc;
        AssetAmount amountLoc;
        MapEnumerator enumerator;
        MapEnumerator enumeratorResult;
        AssetDepCalculation_JP  calcLoc;

        enumerator = assetDepCalculators.getEnumerator();
        while (enumerator.moveNext())
        {
            calcLoc = enumerator.currentValue();
            tmpMap = calcLoc.getBeginBalanceOfAccumulatedDepResult();

            enumeratorResult = tmpMap.getEnumerator();
            while (enumeratorResult.moveNext())
            {
                transDateLoc = enumeratorResult.currentKey();
                amountLoc = enumeratorResult.currentValue();
                beginBalanceMap.insert(transDateLoc, amountLoc);
            }
        }

        return beginBalanceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get an instance of a sub class of <C>AssetDepCalculation_JP</C> based on specified date.
    /// </summary>
    /// <param name="_date">
    /// The date used to get the calculator.
    /// </param>
    /// <returns>
    /// An instance of a sub class of <C>AssetDepCalculation_JP</C>
    /// </returns>
    protected AssetDepCalculation_JP getCalculator(AssetTransDate _date)
    {
        AssetDepCalculation_JP  ret;
        MapEnumerator enumerator;

        enumerator = assetDepCalculators.getEnumerator();
        while (enumerator.moveNext())
        {
            if (enumerator.currentKey() <= _date)
            {
                ret = enumerator.currentValue();
            }
            else
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepProfileChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a record of <C>AssetDepProfileChange_JP</C> based on the specified date.
    /// </summary>
    /// <param name="_date">
    /// The date used to get the depreciation profile change.
    /// </param>
    /// <returns>
    /// A record of <C>AssetDepProfileChange_JP</C>.
    /// </returns>
    protected AssetDepProfileChange_JP getDepProfileChange(AssetTransDate _date)
    {
        AssetDepProfileChange_JP ret;
        MapEnumerator enumerator;

        enumerator = assetDepProfileChanges.getEnumerator();
        while (enumerator.moveNext())
        {
            if (enumerator.currentKey() <= _date)
            {
                ret = enumerator.currentValue();
            }
            else
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYearBeginningBalanceOfAccumulatedDep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the beginning balance of accumulated depreciation amountfor current year.
    /// </summary>
    /// <returns>
    /// The beginning balance of accumulated depreciation amountfor current year.
    /// </returns>
    /// <remarks>
    /// It must be used after call the <C>calc</C> method.
    /// </remarks>
    public AssetAmount getYearBeginningBalanceOfAccumulatedDep()
    {
        return yearBeginningBalanceOfAccumulatedDep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do all necessary initialization.
    /// </summary>
    protected void init()
    {
    	AssetTableInterval  assetTableInterval;
    	AssetTransDate      periodStartDate;

        this.initArgs();
        this.initCalculators();

        changeSettings = AssetDepMethodChangeSettings_JP::construct(calcArgs.parmAssetType());

	    // Update period date because of conceivable interval frequency change in the first proposal period
	    periodStartDate = assetDepTableMethodInterface.parmPeriodStart_JP();
	    assetTableInterval = this.getAssetTableInterval(periodStartDate);
	    calcArgs.parmAssetTableInterval(assetTableInterval);
	    assetDepTableMethodInterface.parmPeriodEnd_JP(assetTableInterval.endPeriod(periodStartDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitAdditional</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do additional initialization
    /// </summary>
    public void InitAdditional()
    {
        AssetTableInterval assetTableInterval;
        AssetTransDate periodStartDate;

        this.initAdditionalArgs();
        this.initAdditionalCalculators();

        // Update period date because of conceivable interval frequency change in the first proposal period
        periodStartDate = assetDepTableMethodInterface.parmPeriodStart_JP();
        assetTableInterval = this.getAssetTableInterval(periodStartDate);
        calcArgs.parmAssetTableInterval(assetTableInterval);
        assetDepTableMethodInterface.parmPeriodEnd_JP(assetTableInterval.endPeriod(periodStartDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdditionalArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do additional initialization for calcualtion arguments
    /// </summary>
    public void initAdditionalArgs()
    {
        AssetTableInterval assetTableInterval;

        calcArgs.parmIsSpecialDepAllocation(assetDepTableMethodInterface.isSpecialDepAllocationForReserve());
        if (calcArgs.parmIsSpecialDepAllocation())
        {
            calcArgs.parmSpecialDepAllocationStartDate(assetDepTableMethodInterface.getSpecialDepAllocationStartDate());
            calcArgs.parmSpecialDepReserveRecId(assetDepTableMethodInterface.parmSpecialDepReserveRecId());
            calcArgs.parmSpecialDepReserveTableId(assetDepTableMethodInterface.parmSpecialDepReserveTableId());
            calcArgs.parmSpecialDepReserveDate(assetDepTableMethodInterface.parmSpecialDepReserveDate());
            calcArgs.parmAssetAccrualFiscal(calcArgs.parmSpecialDepAllocationUnit());
            calcArgs.parmSpecialDepAllocationEndDate(
                AssetSpecialDepHelper_JP::calcAllocationEndDate(assetDepBookMap,
                    assetDepTableMethodInterface.parmSpecialDepReserveDate()));
            assetTableInterval  = AssetSpecialDepHelper_JP::assetTableIntervalForAllocationWithDepBookMap(assetDepBookMap);
            calcArgs.parmAssetTableInterval(assetTableInterval);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdditionalCalculators</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do additional initialization for calcualtors
    /// </summary>
    public void initAdditionalCalculators()
    {
        AssetDepCalculation_JP  assetDepCalculationLoc;

        if (calcArgs.parmIsSpecialDepAllocation())
        {
            assetDepCalculationLoc = AssetDepCalculationFactory_JP::newAssetDepCalculation(
                assetDepBookMap.AssetGroupDepBookMap_JP::effectiveDepreciationProfile(isDepreciationExtProfile).Method,
                calcArgs);
            assetDepCalculators.insert(dateNull(), assetDepCalculationLoc);
            assetTableIntervals = new Map(Types::Date, Types::Class);
            assetTableIntervals.insert(dateNull(), calcArgs.parmAssetTableInterval());
            assetDepCalculationLoc.init();
        }
        // Since pre tax deductible expense is not set when calculators are initialized,
        // we need to re-init calculators to make sure all calculators are initialized for pre deductible expense.
        if (calcArgs.parmIsForPreTaxDeduction())
        {
            assetDepCalculators = new Map(Types::Date, Types::Class);
            this.initCalculators();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the calculation arguments.
    /// </summary>
    protected void initArgs()
    {
        AssetParameters assetParameters = AssetParameters::find();

    	calcArgs.initFromAssetDepBookMap(assetDepBookMap, isDepreciationExtProfile, isDepreciationAccProfile);
        calcArgs.initFromAssetDepCalculationInterface(assetDepTableMethodInterface);

        calcArgs.parmUseCatchUpMethod(assetParameters.UseCatchUpMethod_JP);
        calcArgs.parmCatchUpInterval(assetParameters.DepreciationCatchUpInterval_JP);
        calcArgs.parmIsCalculationStarted(false);
        calcArgs.parmIsDepreciationDone(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCalculators</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the calculators.
    /// </summary>
    protected void initCalculators()
    {
        AssetDepCalculation_JP assetDepCalculationLoc;
        AssetDepProfileChange_JP assetDepProfileChange;
        AssetTransDate fromDate = dateNull();
        AssetTransDate toDate = dateMax();
        AssetTransDate prevEndDate = dateMax();
    	AssetDepreciationProfile depProfile;

	    // Append the default calculator
	    if (assetDepTableMethodInterface.parmIsDepreciationAcceleratedProfile_JP())
	    {
	        depProfile = assetDepBookMap.depreciationAcceleratedProfile_JP();
	    }
	    else
	    {
	        if (!isDepreciationExtProfile)
	        {
            	// Build all needed calculators based on calculation date range for depreciation profile changeover feature
                if (AssetParameters::isManuallyChangeDepProfileEnable_JP())
                {
                    while select validTimeState(fromDate, ToDate) * from assetDepProfileChange
                        order by assetDepProfileChange.ValidFrom
                        where assetDepProfileChange.SourceTableId == assetDepBookMap.TableId
                            && assetDepProfileChange.SourceRecId == assetDepBookMap.RecId
                    {
                        // Add a calculator for idle period
                        if (prevEndDate != dateMax() && prevEndDate+1 != assetDepProfileChange.ValidFrom)
                        {
                            assetDepCalculators.insert(prevEndDate+1, new AssetDepCalculation_Idle_JP(calcArgs));
                        }

                        assetDepCalculationLoc = AssetDepCalculationFactory_JP::newAssetDepCalculation(assetDepProfileChange.depreciationProfile().Method, calcArgs);
                        assetDepCalculationLoc.init();
                        assetDepCalculators.insert(assetDepProfileChange.ValidFrom, assetDepCalculationLoc);
                        assetDepProfileChanges.insert(assetDepProfileChange.ValidFrom, assetDepProfileChange);
                        assetTableIntervals.insert(assetDepProfileChange.ValidFrom, assetDepBookMap.AssetDepBookMap_JP::assetTableInterval(assetDepProfileChange.ValidFrom));

                        prevEndDate = assetDepProfileChange.ValidTo;
                    }
                    // Add a calculator for last idle period
                    if (prevEndDate != dateMax())
                    {
                        assetDepCalculators.insert(prevEndDate+1, new AssetDepCalculation_Idle_JP(calcArgs));
                    }
                }
        	}

	        depProfile = assetDepBookMap.AssetGroupDepBookMap_JP::effectiveDepreciationProfile(isDepreciationExtProfile);
	    }
	    assetDepCalculationLoc = AssetDepCalculationFactory_JP::newAssetDepCalculation(depProfile.Method, calcArgs);
        assetDepCalculationLoc.init();
    	assetDepCalculationLoc.initAdditionalAssetTableIntervals(assetTableIntervals);
        assetDepCalculators.insert(dateNull(), assetDepCalculationLoc);
    	assetTableIntervals.insert(dateNull(),
	        (assetDepTableMethodInterface.parmIsDepreciationAcceleratedProfile_JP() ?
	            assetDepBookMap.AssetDepBookMap_JP::assetTableIntervalForAcceleratedDep() :
	            assetDepBookMap.AssetDepBookMap_JP::assetTableInterval(dateNull(), false, isDepreciationExtProfile)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPeriodMovingOn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Judge if the period is moving on
    /// </summary>
    /// <returns>
    /// If true, the period is moving on
    /// </returns>
    protected boolean isPeriodMovingOn()
    {
        boolean ret = true;

        // PeriodEnd of calcArgs is assigned value in the calc() method.
        // Since the next() method is called before calc() method, periodEnd of calcArgs holds the end of last period.
        // If it is the first time to call this method, the periodEnd of calcArgs has not been initialized.
        AssetTransDate  lastPeriodEnd       = calcArgs.parmPeriodEnd();
        AssetTransDate  currentPeriodStart  = assetDepTableMethodInterface.parmPeriodStart_JP();
        if (lastPeriodEnd)
        {
            ret = lastPeriodEnd < currentPeriodStart
                && assetDepTableMethodInterface.parmPeriodStart_JP() <= assetDepTableMethodInterface.parmPeriodEnd_JP();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds an instance of <C>AssetDepCalculationManager_JP</C>
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A record which needs to calculate depreciation.
    /// </param>
    /// <param name="_assetDepTableMethodInterface">
    /// An object that implements <C>AssetDepTableMethodInterface_JP</C>.
    /// </param>
    /// <param name="_toDate">
    /// The max date that needs to calculate depreciation by this instance.
    /// </param>
	/// <param name="_isDepreciationExtProfile">
	/// A Boolean value that indicates whether extraordianry depreciation profile is used.
	/// </param>
    /// <param name="_isDepreciationAccProfile">
    /// A Boolean value that indicates whether accelerated depreciation profile is used.
    /// </param>
    protected void new(
        AssetDepBookMap_JP _assetDepBookMap,
        AssetDepTableMethodInterface_JP _assetDepTableMethodInterface,
    	AssetTransDate _toDate = dateMax(),
    	boolean _isDepreciationExtProfile = false,
        boolean _isDepreciationAccProfile = false)
    {
        assetDepBookMap = _assetDepBookMap;
        assetDepTableMethodInterface = _assetDepTableMethodInterface;
        calcArgs = new AssetDepCalculationArgs_JP();

        assetDepCalculators = new Map(Types::Date, Types::Class);
        assetDepProfileChanges = new Map(Types::Date, Types::Record);
        assetTableIntervals = new Map(Types::Date, Types::Class);
        calcToDate = _toDate;
    	isDepreciationExtProfile        = _isDepreciationExtProfile;
        isDepreciationAccProfile        = _isDepreciationAccProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checkes whtether it is allowed to do next loop calculation.
    /// </summary>
    /// <returns>
    /// true if allowed; otherwise, return false.
    /// </returns>
    public boolean next()
    {
        boolean ret;
        boolean isPeriodMovingOn;
    	boolean overDue;

        ret = !calcArgs.parmIsDepreciationDone();

        isPeriodMovingOn = this.isPeriodMovingOn();

        ret = ret && isPeriodMovingOn;

	    if ( ret && calcArgs.parmIsSpecialDepAllocation())
	    {
	        overDue = assetDepTableMethodInterface.parmPeriodEnd_JP() > calcArgs.parmSpecialDepAllocationEndDate();
	    }
	    else if (ret && isDepreciationExtProfile
	        && assetDepBookMap.depreciationExtProfile().Method == AssetDepreciationMethod::AdditionalDepreciation_JP)
	    {
	        overDue = assetDepTableMethodInterface.parmPeriodEnd_JP() > calcArgs.parmSpecialDepReserveEndDate();
	    }
	    ret = ret && !overDue;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcArgs</Name>
				<Source><![CDATA[
    public AssetDepCalculationArgs_JP parmCalcArgs(AssetDepCalculationArgs_JP _calcArgs = calcArgs)
    {
        calcArgs = _calcArgs;
        return calcArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainDepBeginBalanceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the main depreciation beginning balance.
    /// </summary>
    /// <param name="_depBeginBalanceMap">
    /// The map contains main depreciation begin balance by date.
    /// </param>
    public void setMainDepBeginBalanceMap(Map _depBeginBalanceMap)
    {
        calcArgs.parmReductionEntryBeginBalanceMap(_depBeginBalanceMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the calculation arguments based on the depreciation profile change.
    /// </summary>
    protected void updateArgs()
    {
        AssetDepProfileChange_JP curDepProfileChange;
        AssetDepProfileChange_JP prevDepProfileChange;
        AssetDepreciationMethod curDepMethod, prevDepMethod;
        AssetTransDate startDate;
        TransDate depYearStart;
        boolean isDepProfileChanged;
        container methodChange;

        startDate = calcArgs.parmPeriodstart();
        curDepProfileChange = this.getDepProfileChange(startDate);
        if (curDepProfileChange)
        {
            calcArgs.parmAssetTableInterval(this.getAssetTableInterval(startDate));
            calcArgs.parmAssetAccrualFiscal(curDepProfileChange.DepreciationProfile().accrualFiscal(false, AssetAccrualFiscal::FiscalPeriod));
            calcArgs.parmAssetDepRateSet(curDepProfileChange.DepreciationProfile().AssetDepRateSchedule_JP);
            calcArgs.parmNumOfYearsEquallyDivided(curDepProfileChange.depreciationProfile().NumOfYearsEquallyDivided_JP);
            calcArgs.parmSmoothDepForTheYearOver95_JP(curDepProfileChange.depreciationProfile().SmoothDepForTheYearOver95_JP);
            calcArgs.parmAssetServiceLife(curDepProfileChange.ServiceLife);
            calcArgs.parmStartToDepreciateDate(max(curDepProfileChange.ValidFrom, calcArgs.parmDepreciationStartDate()));

            if (AssetProfileChangeFromODBToOSL_JPFlight::instance().isEnabled())
            {
                calcArgs.parmProfileChangeValidFrom(curDepProfileChange.ValidFrom);
            }

            prevDepProfileChange = curDepProfileChange.findPrevious();
            isDepProfileChanged = (curDepProfileChange && prevDepProfileChange && curDepProfileChange.DepreciationProfile != prevDepProfileChange.DepreciationProfile);
            calcArgs.parmIsDepProfileChanged(isDepProfileChanged);
            if (isDepProfileChanged)
            {
                prevDepMethod = prevDepProfileChange.DepreciationProfile().Method;
                curDepMethod = curDepProfileChange.depreciationProfile().Method;
                methodChange = [prevDepMethod, curDepMethod];
                calcArgs.parmPrevDepMethod(prevDepMethod);
                calcArgs.parmIsUseEquallyDividedFormula(
                    changeSettings.isUseEquallyDividedFormulaEnabled(methodChange)
                    && curDepProfileChange.IsUseEquallyDividedFormula);

                if (AssetProfileChangeFromODBToOSL_JPFlight::instance().isEnabled() && prevDepMethod == AssetDepreciationMethod::OldDecliningBalance_JP
                    && curDepMethod == AssetDepreciationMethod::OldStraightLine_JP)
                {
                    depYearStart = LedgerFiscalCalendar::findFirstDayOfYear(calcArgs.parmFiscalCalendarRecId(), curDepProfileChange.ValidFrom);
                    calcArgs.parmStartToDepreciateDate(max(depYearStart, calcArgs.parmDepreciationStartDate()));

                    if (!calcArgs.parmPercentageOfAssetValueAtProfileChange())
                    {
                        calcArgs.parmPercentageOfAssetValueAtProfileChange(this.getPercentageOfAssetValueAtProfileChange());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPercentageOfAssetValueAtProfileChange</Name>
				<Source><![CDATA[
    private real getPercentageOfAssetValueAtProfileChange()
    {
        real ret = 0;

        AssetAmount acquisitionPrice;
        AssetAmount remainingBalance;
        AssetUndepBalanceLimit_JP remainingBalanceRate;
        [remainingBalanceRate, remainingBalance, acquisitionPrice] = AssetDepProfileChangeHelper_JP::calcRemainingBalanceRate(
            AssetDepBookMap_JP::findByAssetIdBookId(calcArgs.parmAssetId(), calcArgs.parmAssetBookId()),
            calcArgs.parmStartToDepreciateDate());

        if (acquisitionPrice > 0)
        {
            ret = remainingBalance / acquisitionPrice;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <C>AssetDepCalculationManager_JP</C> and initialize it.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A record which needs to calculate depreciation.
    /// </param>
    /// <param name="_assetDepTableMethodInterface">
    /// An object that implements <C>AssetDepTableMethodInterface_JP</C>.
    /// </param>
    /// <param name="_toDate">
    /// The max date that needs to calculate depreciation by this instance.
    /// </param>
	/// <param name="_isDepreciationExtProfile">
	/// A Boolean value that indicates whether there is an extended depreciation profile.
	/// </param>
    /// <param name="_isDepreciationAccProfile">
    /// A Boolean value that indicates whether there is an accelerated depreciation profile.
    /// </param>
    /// <returns>
    /// An new instance of <C>AssetDepCalculationManager_JP</C>.
    /// </returns>
    public static AssetDepCalculationManager_JP construct(
        AssetDepBookMap_JP  _assetDepBookMap,
        AssetDepTableMethodInterface_JP _assetDepTableMethodInterface,
	    AssetTransDate _toDate     = maxDate(),
	    boolean _isDepreciationExtProfile = false,
        boolean _isDepreciationAccProfile = false)
    {
        AssetDepCalculationManager_JP ret;

    	ret = new AssetDepCalculationManager_JP(_assetDepBookMap, _assetDepTableMethodInterface, _toDate, _isDepreciationExtProfile, _isDepreciationAccProfile);
        ret.init();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>