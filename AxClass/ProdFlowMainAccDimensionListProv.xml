<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdFlowMainAccDimensionListProv</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdFlowMainAccDimensionListProv</c> class is the account provider class for the account
/// defined in the production group
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::ProductionFlow)
]
class ProdFlowMainAccDimensionListProv extends MainAccountDimensionListProvider
{
    InventTable                         inventTable;
    LeanProductionFlowReferenceRefRecId productionFlowReferenceRefRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the dimensions of the main account dimension list provider.
    /// </summary>
    protected void initValues()
    {
        this.setProductionFlowRelatedValues();
        this.setProductRelatedValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        LedgerDimensionDefaultAccount       ledgerDimensionDefaultAccount;
        ProdGroup                           prodGroup;
        ProdParameters                      prodParameters;

        if (!(accountingRule is AccountingJournalizingRule)
            && productionFlowReferenceRefRecId)
        {
            LeanProductionFlowReference LeanProductionFlowReference = LeanProductionFlowReference::find(productionFlowReferenceRefRecId);
            SelectableDataArea contextDataAreaId = leanProductionFlowReference.legalEntityDataAreaId();

            changecompany(
            contextDataAreaId
            )
            {
                prodGroup = leanProductionFlowReference.prodGroup();
                prodParameters = ProdParameters::find();
            }

            if (prodGroup &&
                (prodGroup.LeanWIPServiceReceiptLedgerDimension
                || prodParameters.ProdPostingType == ProdPostingType::ProdGroup))
            {
                ledgerDimensionDefaultAccount = prodGroup.LeanWIPServiceReceiptLedgerDimension;
            }
            else
            {
                container cacheResult = LedgerCache::getValue(LedgerCacheScope::ProdFlowMainAccDimensionListProv, [InventAccountType::ProdLeanWIPServiceReceipt, inventTable.dataAreaId, inventTable.itemId]);

                if (cacheResult == conNull())
                {
                    changecompany(
                    contextDataAreaId
                    )
                    {
                        ledgerDimensionDefaultAccount = InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::ProdLeanWIPServiceReceipt));
                    }
                    LedgerCache::insertValue(LedgerCacheScope::ProdFlowMainAccDimensionListProv, [InventAccountType::ProdLeanWIPServiceReceipt, inventTable.dataAreaId, inventTable.itemId], [ledgerDimensionDefaultAccount]);
                }
                else
                {
                    [ledgerDimensionDefaultAccount] = cacheResult;
                }
            }

            if (ledgerDimensionDefaultAccount)
            {
                this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
            }
            else
            {
                // We want to add the account even if it is empty because we don't
                // want to try to resolve the account using other providers down the chain.
                MainAccountDimension mainAccountDimension = MainAccountDimension::newFromParameters(ledgerDimensionDefaultAccount, DebitCredit::Credit);
                mainAccountDimensionList.addEnd(mainAccountDimension);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(InventAccountType _inventAccountType)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            inventTable.ItemId);

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductionFlowRelatedValues</Name>
				<Source><![CDATA[
    protected void setProductionFlowRelatedValues()
    {
        Object sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();

        if (sourceDocumentLineItem is SourceDocumentLineItemIProductionFlow)
        {
            SourceDocumentLineItemIProductionFlow iProductionFlow = sourceDocumentLineItem as SourceDocumentLineItemIProductionFlow;
            productionFlowReferenceRefRecId = iProductionFlow.parmPlanReference();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductRelatedValues</Name>
				<Source><![CDATA[
    protected void setProductRelatedValues()
    {
        SourceDocumentLineItemIProduct          iProduct;

        Object sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();

        if (sourceDocumentLineItem is SourceDocumentLineItemIProduct)
        {
            iProduct            = sourceDocumentLineItem as SourceDocumentLineItemIProduct;
            inventTable         = iProduct.parmInventTable();
        }
        else
        {
            Object parentSourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem();
            if (parentSourceDocumentLineItem &&
                parentSourceDocumentLineItem is SourceDocumentLineItemIProduct)
            {
                iProduct            = parentSourceDocumentLineItem as SourceDocumentLineItemIProduct;
                inventTable         = iProduct.parmInventTable();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>