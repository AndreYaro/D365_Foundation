<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReportRSV1_2014</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayReportRSV1_2014 extends RunBaseBatch implements BatchRetryable
{
    RPayPFRegister                  pfRegisterTable;
    RPayPFRegister                  prevRegister;
    ComExcelDocument_RU             excelDocument;
    CompanyInfo                     companyInfo;
    Counter                         sheetNumber;
    Counter                         pageNumber;
    int                             sheet12Num, sheet12NumCancel;
    int                             sheet13Num;
    boolean                         printPersonal;

    #RPayPFReport_RSV1

    #define.CellSpace(3)
    #define.QtyLength(6)
    #define.PFRLength(14)
    #define.pageNumLength(6)
    #define.LawYear(2014)
    #define.filler('-')
    #define.mark('V')

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        pfRegisterTable,
        prevRegister
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkDocument()
    {
        if (! winApi::fileExists(RPayReportRSV1_2014::fullTemplateName()))
        {
            return checkFailed(strfmt("@SYS60367", RPayReportRSV1_2014::fullTemplateName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fillDocument()
    {
        RPayPFRegisterTrans trans;
        RPayPFBatches       batches;
        RpayPFregisterAdd   adds;
        RpayPFregisterStudents studs;
        int sec5Num;
        int sec3Num;
        RPayPFRegisterTotals totals;
        RPayPFRegister register;
        ;

        this.progressInit(RPayReportRSV1_2014::description(), 5, #AviFormLetter);
        setprefix(RPayReportRSV1_2014::description());
        sheetNumber = 1;
        this.fillTitle();
        sheetNumber++;
        this.fillSection1();

        sheetNumber++;
        sec3Num = sheetNumber;
        select firstonly totals
            where totals.RegisterRefRecId == pfRegisterTable.recId
               && totals.AddInfo == '01'
               && totals.LineNum >= 200
               && totals.LineNum <= 215
               && totals.Value != 0;
        if ( totals.RecId != 0 )
        {
            excelDocument.insertSheet(sec3Num, sheetNumber);
            sheetNumber++;
            this.fillSection2('01');
        }

        select firstonly totals
            where totals.RegisterRefRecId == pfRegisterTable.recId
               && totals.AddInfo == '03'
               && totals.LineNum >= 200
               && totals.LineNum <= 215
               && totals.Value != 0;
        if ( totals.RecId != 0 )
        {
            excelDocument.insertSheet(sec3Num, sheetNumber);
            sheetNumber++;
            this.fillSection2('03');
        }
        excelDocument.deleteWorkSheet(sec3Num);
        sheetNumber--;

        select firstonly recid from trans
            where trans.RegisterRefRecId == pfRegisterTable.RecId
               && trans.ListCode != RPayPFListCode::Normal;
        if ( trans.RecId != 0 )
        {
            sheetNumber++;
            this.fillSection2_2223();
        }
        else
        {
            excelDocument.deleteWorkSheet(sheetNumber + 1);
        }

        sheetNumber++;
        sec5Num = sheetNumber;

        select firstonly totals
            where totals.RegisterRefRecId == pfRegisterTable.recId
               && totals.AddInfo == this.RPayPFListCode2Code(RPayPFListCode::Extra1)
               && totals.LineNum >= 240
               && totals.LineNum <= 269
               && totals.Value != 0;
        if (totals.RecId)
        {
            excelDocument.insertSheet(sec5Num, sheetNumber);
            sheetNumber++;
            this.fillSection5(this.RPayPFListCode2Code(RPayPFListCode::Extra1));
        }

        select firstonly RecId from totals
            where totals.RegisterRefRecId == pfRegisterTable.recId
               && totals.AddInfo == this.RPayPFListCode2Code(RPayPFListCode::Extra2)
               && totals.LineNum >= 240
               && totals.LineNum <= 269
               && totals.Value != 0;
        if (totals.RecId)
        {
            excelDocument.insertSheet(sec5Num, sheetNumber);
            sheetNumber++;
            this.fillSection5(this.RPayPFListCode2Code(RPayPFListCode::Extra2));
        }

        excelDocument.deleteWorkSheet(sec5Num);
        sheetNumber--;

        select firstonly RecId from batches
            where batches.RegisterRefRecId == pfRegisterTable.RecId;
        if (batches.RecId != 0 && printPersonal)
        {
            sheetNumber++;
            this.fillSection6();
        }
        else
        {
           excelDocument.deleteWorkSheet(sheetNumber + 1);
        }

         select firstonly RecId from adds
            where adds.Type == RPayPFAddPremiumType::AddAmounts
               join RecId from register
                where register.RecId == adds.RegisterRefRecId
                   && register.Year == pfRegisterTable.Year
                   && register.Period == pfRegisterTable.Period
                   && register.CorrNum <= pfRegisterTable.CorrNum;
        if (adds.RecId != 0)
        {
            sheetNumber++;
            this.fillSection10();
        }
        else
        {
           excelDocument.deleteWorkSheet(sheetNumber + 1);
        }

        select firstonly RecId from studs
            where studs.RegisterRefRecId == pfRegisterTable.RecId;
        if (studs.RecId != 0)
        {
            sheetNumber++;
            this.fillSection11();
        }
        else
        {
           excelDocument.deleteWorkSheet(sheetNumber + 1);
        }

        select firstonly RecId from trans
            where trans.RegisterRefRecId == pfRegisterTable.RecId;
        if (trans.RecId && printPersonal)
        {
            sheetNumber++;
            sheet12Num = sheetNumber;
            sheetNumber++;
            sheet13Num = sheetNumber;
            sheetNumber++;
            sheet12NumCancel = sheetNumber;

            while select EmplId from trans
                group by EmplId
                where (trans.RegisterRefRecId == pfRegisterTable.RecId
                    || (trans.RegisterRefRecId == prevRegister.RecId
                     && trans.Type != RpayPensionFundExportKindOfCorrection::None))
                   && trans.LineType == RPayPFLineType::Month
            {
                progress.setText(strfmt("@GLS110792", trans.EmplId));
                progress.incCount();
                this.fillSection1213(trans.EmplId);
            }

            excelDocument.deleteWorkSheet(sheet12NumCancel);
            excelDocument.deleteWorkSheet(sheet13Num);
            excelDocument.deleteWorkSheet(sheet12Num);
        }
        else
        {
           excelDocument.deleteWorkSheet(sheetNumber+1);
           excelDocument.deleteWorkSheet(sheetNumber+1);
           excelDocument.deleteWorkSheet(sheetNumber+1);
        }

        this.fillRegularCells('TotalPages', this.pageNum2str(), #pageNumLength, #CellSpace, 1);
        excelDocument.activateWorksheet(1);
        excelDocument.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRegularCells</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillRegularCells(Bookmark _bookmark,
                                    str      _text,
                                    int      _maxLen,
                                    int      _cellSpace = #CellSpace,
                                    int      _workSheet = 0,
                                    boolean  _horizontal = true,
                                    str 1    _fillChar   = '',
                                    boolean  _fillCharBack = false)
    {
        int                             i, col, row;
        COM                             cell;
        COM                             comApplication, comDocument;
        COM                             comWorksheets, comWorksheet;
        Bookmark                        bookmark;
        ;

        if (!_bookmark || !_text || !_maxLen || !_cellSpace)
        {
            return;
        }

        comDocument = excelDocument.getComDocument();
        comApplication = comDocument.Application();
        bookmark = _bookmark;

        if (_workSheet)
        {
            comWorksheets = comDocument.Worksheets();
            comWorksheet  = comWorksheets.item(_workSheet);
            cell = comWorksheet.Range(bookmark);
        }
        else
        {
            cell = comApplication.Range(bookmark);
        }

        col = cell.Column();
        row = cell.Row();

        if (_fillChar && strlen(_text) <= _maxLen)
        {
            if (_fillCharBack)
            {
                _text = _text + strrep(_fillChar, _maxLen - strlen(_text));
            }
            else
            {
                _text = strrep(_fillChar, _maxLen - strlen(_text)) + _text;
            }
        }

        while (i < strlen(_text) && i < _maxLen)
        {
            i++;
            bookmark = COMExcelDocument_RU::numToNameCell(col, row);
            cell = _workSheet ? comWorksheet.Range(bookmark) : comApplication.Range(bookmark);
            cell.value2(substr(_text, i, 1));
            if (_horizontal)
            {
                col += _cellSpace;
            }
            else
            {
                row += _cellSpace;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection1</Name>
				<Source><![CDATA[
    private void fillSection1()
    {
        Map rowIndexes = new Map(Types::Integer, Types::String);
        Map colIndexes = new Map(Types::Integer, Types::String);
        ;

        progress.setText(strfmt("@GLS110792", 1));
        progress.incCount();
        pageNumber++;
        this.fillRegularCells('CZ2', this.pageNum2str(), #pageNumLength, #CellSpace, sheetNumber);

        colIndexes.insert(3, 'AR');
        colIndexes.insert(4, 'BD');
        colIndexes.insert(5, 'BO');
        colIndexes.insert(6, 'CB');
        colIndexes.insert(7, 'CU');
        colIndexes.insert(8, 'DN');

        rowIndexes.insert(100, '10');
        rowIndexes.insert(110, '11');
        rowIndexes.insert(111, '12');
        rowIndexes.insert(112, '13');
        rowIndexes.insert(113, '14');
        rowIndexes.insert(114, '15');
        rowIndexes.insert(120, '16');
        rowIndexes.insert(121, '17');
        rowIndexes.insert(130, '18');
        rowIndexes.insert(140, '19');
        rowIndexes.insert(141, '20');
        rowIndexes.insert(142, '21');
        rowIndexes.insert(143, '22');
        rowIndexes.insert(144, '23');
        rowIndexes.insert(150, '24');

        this.fillSections(100, 150, colIndexes, rowIndexes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection10</Name>
				<Source><![CDATA[
    private void fillSection10()
    {
        RPayPFRegisterAdd adds;
        RPayPFRegister register;
        boolean isFirstRow = true;
        #define.firstSheetRow(12)
        int rowNum = 1;
        real sum14 = 0;
        real over14 = 0;
        real sum13 = 0;
        real over13 = 0;
        real acc13 = 0;
        real add1 = 0;
        real add2 = 0;
        real add3 = 0;
        real med = 0;
        ;
        progress.setText(strfmt("@GLS110792", 7));
        progress.incCount();
        pageNumber++;

        this.fillRegularCells('CV2', this.pageNum2str(), #pageNumLength, #CellSpace, sheetNumber);

        while select adds
            where adds.Type == RPayPFAddPremiumType::AddAmounts
               join RecId from register
                where register.RecId == adds.RegisterRefRecId
                   && register.Year == pfRegisterTable.Year
                   && register.Period == pfRegisterTable.Period
                   && register.CorrNum <= pfRegisterTable.CorrNum
        {
            if ( !isFirstRow)
            {
                excelDocument.insertRow(#firstSheetRow + rowNum, sheetNumber);
            }

            excelDocument.insertValue('AddNum', rowNum, sheetNumber);
            excelDocument.insertValue('AddReason', enum2Value(adds.Reason), sheetNumber);
            excelDocument.insertValue('addExplanation', enum2Value(adds.Explanation), sheetNumber);
            excelDocument.insertValue('AddYear', year(adds.Period), sheetNumber);
            excelDocument.insertValue('AddMonth', mthofYr(adds.Period), sheetNumber);
            if (year(adds.Period) >= #LawYear)
            {
                excelDocument.insertValue('AddSum14', adds.PFIns, sheetNumber);
                excelDocument.insertValue('AddOverLimit14', adds.PFInsOverLimit, sheetNumber);
                excelDocument.insertValue('AddSum13', #filler, sheetNumber);
                excelDocument.insertValue('AddOverLimit13', #filler, sheetNumber);
                excelDocument.insertValue('AddPFAcc13', #filler, sheetNumber);

                sum14 += adds.PFIns;
                over14 += adds.PFInsOverLimit;
            }
            else
            {
                excelDocument.insertValue('AddSum14', #filler, sheetNumber);
                excelDocument.insertValue('AddOverLimit14', #filler, sheetNumber);
                excelDocument.insertValue('AddSum13', adds.PFIns, sheetNumber);
                excelDocument.insertValue('AddOverLimit13', adds.PFInsOverLimit, sheetNumber);
                excelDocument.insertValue('AddPFAcc13', adds.PFAcc, sheetNumber);

                sum13 += adds.PFIns;
                over13 += adds.PFInsOverLimit;
                acc13 += adds.PFAcc;
            }
            excelDocument.insertValue('AddPF1', adds.PFAdd1, sheetNumber);
            excelDocument.insertValue('AddPF2', adds.PFAdd2, sheetNumber);
            excelDocument.insertValue('AddPF3', adds.PFAdd3, sheetNumber);
            excelDocument.insertValue('AddMedIns', adds.MedIns, sheetNumber);

            add1 += adds.PFAdd1;
            add2 += adds.PFAdd2;
            add3 += adds.PFAdd3;
            med += adds.MedIns;

            excelDocument.insertValue('AddTotalSum14', sum14, sheetNumber);
            excelDocument.insertValue('AddTotalOverLimit14', over14, sheetNumber);
            excelDocument.insertValue('AddTotalSum13', sum13, sheetNumber);
            excelDocument.insertValue('AddTotalOverLimit13', over13, sheetNumber);
            excelDocument.insertValue('AddTotalPFAcc13', acc13, sheetNumber);
            excelDocument.insertValue('AddTotalPF1', add1, sheetNumber);
            excelDocument.insertValue('AddTotalPF2', add2, sheetNumber);
            excelDocument.insertValue('AddTotalPF3', add3, sheetNumber);
            excelDocument.insertValue('AddTotalMedIns', med, sheetNumber);

            isFirstRow = false;
            rowNum++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection11</Name>
				<Source><![CDATA[
    private void fillSection11()
    {
        RpayPFregisterStudents studs;
        boolean isFirstRow = true;
        int rowNum = 1;
        #define.firstSheetRow(12)

        real totalSum = 0;
        real pay1 = 0;
        real pay2 = 0;
        real pay3 = 0;
        ;

        progress.setText(strfmt("@GLS110792", 8));
        progress.incCount();
        pageNumber++;

        this.fillRegularCells('CW2', this.pageNum2str(), #pageNumLength, #CellSpace, sheetNumber);
        while select studs
            where studs.RegisterRefRecId == pfRegisterTable.RecId
        {
            if ( !isFirstRow)
            {
                excelDocument.insertRow(#firstSheetRow + rowNum, sheetNumber);
            }
            excelDocument.insertValue('StudNum', rowNum, sheetNumber);
            excelDocument.insertValue('studName', RHRMEmplTable::find(studs.emplId).personTable().fio(false) , sheetNumber);
            excelDocument.insertValue('studBrigade', strFmt("@SYS26868", studs.BrigadeNumber, studs.BrigadeDate), sheetNumber);
            excelDocument.insertValue('studUniversity', strFmt("@SYS26868", studs.UniversityNumber, studs.UniversityDate), sheetNumber);
            excelDocument.insertValue('studSum', studs.Payments, sheetNumber);
            excelDocument.insertValue('studPay1', studs.Payments1, sheetNumber);
            excelDocument.insertValue('studPay2', studs.Payments2, sheetNumber);
            excelDocument.insertValue('studPay3', studs.Payments3, sheetNumber);

            totalSum += studs.Payments;
            pay1 += studs.Payments1;
            pay2 += studs.Payments2;
            pay3 += studs.Payments3;
            isFirstRow = false;
            rowNum++;
        }

        excelDocument.insertValue('studTotalSum', totalSum, sheetNumber);
        excelDocument.insertValue('studTotalPay1', pay1, sheetNumber);
        excelDocument.insertValue('studTotalPay2', pay2, sheetNumber);
        excelDocument.insertValue('studTotalPay3', pay3, sheetNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection12</Name>
				<Source><![CDATA[
    private container fillSection12(
        RHRMEmplId                              _emplId,
        boolean                                 _corrective = false,
        RPayPFRegister                          _pfRegisterTableCorr = pfRegisterTable,
        RefRecId                                _corrCorrRegisterRecId = 0,
        RpayPensionFundExportKindOfCorrection   _kindOfCorrection = RpayPensionFundExportKindOfCorrection::None,
        RefRecId                                _registerRecId6 = 0,
        RefRecId                                _registerRecId9 = 0
        )
    {
        RHRMEmplTable emplTable;
        DirPersonName dirPersonName;
        Map rowIndexes = new Map(Types::String, Types::Integer);
        Map colIndexes = new Map(Types::String, Types::String);
        #define.YearLength(4)
        RPayPFRegisterTrans registerTrans;
        Set categories = new Set(Types::String);
        SetEnumerator se;
        RPayPFEmplCategory category;
        boolean isFirstCategory = true;
        boolean isFirstTrans = true;
        int categoryNum = 0;
        ReportPeriod_RU periodDate;
        real  sumIns14 = 0;
        real sumIns13 = 0;
        real sumAcc13 = 0;
        int rowNum = 1;
        Map correctings = new Map(Types::Container, Types::Container);
        MapEnumerator me;
        int corrYear;
        str corrPeriod;
        real tmp14;
        real tmp13Ins;
        real tmp13Acc;
        Set                         corrPeriodsSet = new Set(Types::Container);
        ReportPeriod_RU             startPeriodCorr = _pfRegisterTableCorr ? endmth(_pfRegisterTableCorr.dateStartQuarter()) : datenull();
        ReportPeriod_RU             endPeriodCorr = _pfRegisterTableCorr ? _pfRegisterTableCorr.dateEndQuarter() : datenull();
        RPayPFRegister              prevOrigRPayPFRegister;
        int                         prevYear;
        RPayReportSocialTaxPeriod   prevPeriod;
        RPayPFRegisterTrans         rPayPFRegisterTransExists, rPayPFRegisterTransNotExists;
        int                         insertSheetNum;

        #define.firstSheetRow(49)

        str makeCell(str _row, str _col, int _catNum)
        {
            str ret;
            ret = colIndexes.lookup(_col);
            ret += int2str(rowIndexes.lookup(_row) + _catNum*4);
            return ret;
        }

        void fillRow(str _row, Date _preiod, RPayPFLineType _lineType, RPayPFEmplCategory _cat)
        {
            RPayPFRegisterTrans     trans;
            RPayAmount              totalPayments, fundBase, overLimitBase, contractsFundBase;

            while select sum(TotalPayments), sum(FundBase), sum(OverLimitBase) from trans
                group by Agreement
                where (trans.RegisterRefRecId == pfRegisterTable.RecId ||
                       trans.RegisterRefRecId == _pfRegisterTableCorr.RecId ||
                       trans.RegisterRefRecId == _corrCorrRegisterRecId ||
                       trans.RegisterRefRecId == _registerRecId6 ||
                       trans.RegisterRefRecId == _registerRecId9)
                   && trans.Category == _cat
                   && (trans.LineType == _lineType
                    || (_lineType == RPayPFLineType::Total
                     && (trans.RegisterRefRecId == _registerRecId6
                      || trans.RegisterRefRecId == _registerRecId9)))
                   && trans.EmplId == _emplId
                   && (trans.Period == dateEndMth(_preiod)
                     || (_lineType == RPayPFLineType::Total
                      && (trans.Type != RpayPensionFundExportKindOfCorrection::None
                       && trans.RegisterRefRecId == pfRegisterTable.RecId
                       || trans.RegisterRefRecId != pfRegisterTable.RecId
                       || !_corrective)))
                   && trans.ListCode == RPayPFListCode::Normal
                   && (_corrective || _lineType == RPayPFLineType::Total || trans.Type == RpayPensionFundExportKindOfCorrection::None)
                   && (trans.Period >= dateStartQtr(_preiod)
                     && trans.Period <= dateEndQtr(_preiod)
                     || _lineType == RPayPFLineType::Month
                     || (trans.RegisterRefRecId != _registerRecId6
                       && trans.RegisterRefRecId != _registerRecId9))
            {
                if (trans.Agreement == RHRMSortOfWork::CivilContract)
                {
                    contractsFundBase += trans.FundBase;
                }

                totalPayments += trans.TotalPayments;
                fundBase += trans.FundBase;
                overLimitBase += trans.OverLimitBase;
            }
            if (!_corrective && _lineType == RPayPFLineType::Total)
            {
                while select sum(TotalPayments), sum(FundBase), sum(OverLimitBase) from trans
                    group by Agreement
                    where trans.RegisterRefRecId == prevOrigRPayPFRegister.RecId &&
                          trans.EmplId == _emplId &&
                          trans.LineType == RPayPFLineType::Total &&
                          trans.ListCode == RPayPFListCode::Normal
                join sum(TotalPayments), sum(FundBase), sum(OverLimitBase) from rPayPFRegisterTransExists
                    group by Agreement
                    where rPayPFRegisterTransExists.EmplId == trans.EmplId &&
                          rPayPFRegisterTransExists.RegisterRefRecId == prevRegister.RecId &&
                          rPayPFRegisterTransExists.LineType == trans.LineType &&
                          rPayPFRegisterTransExists.ListCode == trans.ListCode
                notexists join rPayPFRegisterTransNotExists
                    where rPayPFRegisterTransNotExists.EmplId == rPayPFRegisterTransExists.EmplId &&
                          rPayPFRegisterTransNotExists.RegisterRefRecId == pfRegisterTable.RecId
                {
                    if (trans.Agreement == RHRMSortOfWork::CivilContract)
                    {
                        contractsFundBase += trans.FundBase;
                    }

                    if (rPayPFRegisterTransExists.Agreement == RHRMSortOfWork::CivilContract)
                    {
                        contractsFundBase += rPayPFRegisterTransExists.FundBase;
                    }

                    totalPayments += trans.TotalPayments;
                    fundBase += trans.FundBase;
                    overLimitBase += trans.OverLimitBase;

                    totalPayments += rPayPFRegisterTransExists.TotalPayments;
                    fundBase += rPayPFRegisterTransExists.FundBase;
                    overLimitBase += rPayPFRegisterTransExists.OverLimitBase;
                }
            }
            excelDocument.insertValue(makeCell(_row, 'category', categoryNum), _cat, sheetNumber);
            excelDocument.insertValue(makeCell(_row, 'sum', categoryNum), totalPayments, sheetNumber);
            excelDocument.insertValue(makeCell(_row, 'sumbase', categoryNum), fundBase, sheetNumber);
            excelDocument.insertValue(makeCell(_row, 'sumover', categoryNum), overLimitBase, sheetNumber);
            excelDocument.insertValue(makeCell(_row, 'contracts', categoryNum), contractsFundBase, sheetNumber);
        }
        ;

        if (_corrective && _kindOfCorrection == RpayPensionFundExportKindOfCorrection::Cancellative)
        {
            insertSheetNum = sheet12NumCancel;
        }
        else
        {
            insertSheetNum = sheet12Num;
        }

        excelDocument.insertSheet(insertSheetNum, sheetNumber);
        sheetNumber++;

        pageNumber++;
        this.fillRegularCells('CV2', this.pageNum2Str() , #pageNumLength, #CellSpace, sheetNumber);

        emplTable = RHRMEmplTable::find(_emplId);

        dirPersonName = emplTable.personTable().dirPersonName();
        excelDocument.insertValue('transSurName', dirPersonName.LastName , sheetNumber);
        excelDocument.insertValue('transName', dirPersonName.FirstName , sheetNumber);
        excelDocument.insertValue('transSecondName', dirPersonName.MiddleName , sheetNumber);
        excelDocument.insertValue('transSNILS', emplTable.personTable().partySNILSasOfDate_RU(pfRegisterTable.ReportDate), sheetNumber);

        this.fillRegularCells('transYear', int2str(year(pfRegisterTable.Year)) , #YearLength, #CellSpace, sheetNumber);
        excelDocument.insertValue('transCodeType', this.getPeriodCode(pfRegisterTable.Period), sheetNumber);

        if (_corrective)
        {
            switch (_kindOfCorrection)
            {
                case RpayPensionFundExportKindOfCorrection::Correctional:
                    excelDocument.insertValue('transCorrCorr', #mark, sheetNumber);
                    break;
                case RpayPensionFundExportKindOfCorrection::Cancellative:
                    excelDocument.insertValue('transCorrCancel', #mark, sheetNumber);
                    break;
            }

            this.fillRegularCells('transCorrYear', int2str(year(_pfRegisterTableCorr.Year)) , #YearLength, #CellSpace, sheetNumber);
            excelDocument.insertValue('transCorrPeriodCode', this.getPeriodCode(_pfRegisterTableCorr.Period), sheetNumber);
        }
        else
        {
            excelDocument.insertValue('transCorrOrig', #mark, sheetNumber);
        }

        if (!_corrective || _kindOfCorrection == RpayPensionFundExportKindOfCorrection::Correctional)
        {
            rowIndexes.insert('year', 34);
            rowIndexes.insert('mth1', 35);
            rowIndexes.insert('mth2', 36);
            rowIndexes.insert('mth3', 37);

            colIndexes.insert('rowCode','U');
            colIndexes.insert('category','AF');
            colIndexes.insert('sum','AO');
            colIndexes.insert('sumbase','BH');
            colIndexes.insert('contracts','CE');
            colIndexes.insert('sumover','CZ');

            [prevPeriod, prevYear] = pfRegisterTable.getPreviousPeriod();

            select firstonly prevOrigRPayPFRegister
                where prevOrigRPayPFRegister.Year == mkdate(31, 12, prevYear) &&
                      prevOrigRPayPFRegister.Period == prevPeriod &&
                      prevOrigRPayPFRegister.CorrType == RPayPFCorrectionType::None;

            while select registerTrans group by Category
                where (registerTrans.RegisterRefRecId == pfRegisterTable.RecId ||
                       registerTrans.RegisterRefRecId == _pfRegisterTableCorr.RecId ||
                       registerTrans.RegisterRefRecId == _corrCorrRegisterRecId)
                   && (_corrective || registerTrans.Type == RpayPensionFundExportKindOfCorrection::None)
                   && (!_corrective || registerTrans.Period >= startPeriodCorr && registerTrans.Period <= endPeriodCorr)
                   && registerTrans.EmplId == _emplId
            {
                categories.add(registerTrans.Category);
            }

            if (!_corrective)
            {
                while select registerTrans
                    group by Category
                    where registerTrans.RegisterRefRecId == prevOrigRPayPFRegister.RecId &&
                          registerTrans.EmplId == _emplId &&
                          registerTrans.LineType == RPayPFLineType::Total &&
                          registerTrans.ListCode == RPayPFListCode::Normal
                exists join rPayPFRegisterTransExists
                    where rPayPFRegisterTransExists.EmplId == registerTrans.EmplId &&
                          rPayPFRegisterTransExists.RegisterRefRecId == prevRegister.RecId
                notexists join rPayPFRegisterTransNotExists
                    where rPayPFRegisterTransNotExists.EmplId == rPayPFRegisterTransExists.EmplId &&
                          rPayPFRegisterTransNotExists.RegisterRefRecId == pfRegisterTable.RecId
                {
                    categories.add(registerTrans.Category);
                }
            }

            se = categories.getEnumerator();
            while (se.moveNext())
            {
                category = se.current();

                if (!isFirstCategory)
                {
                    excelDocument.insertRows(30 + categoryNum*4, 33 + categoryNum*4, sheetNumber, 4, 1, sheetNumber);
                }

                periodDate = RPayReportRSV1_2014::getLastQuarterPeriodOrig(_corrective ? _pfRegisterTableCorr : pfRegisterTable);

                excelDocument.insertValue(makeCell('year', 'rowCode', categoryNum), int2str(400+categoryNum*10), sheetNumber);
                fillRow('year', periodDate, RPayPFLineType::Total, category);

                excelDocument.insertValue(makeCell('mth1', 'rowCode', categoryNum), int2str(400+categoryNum*10+1), sheetNumber);
                periodDate = dateStartQtr(periodDate);
                fillRow('mth1', periodDate, RPayPFLineType::Month, category);

                excelDocument.insertValue(makeCell('mth2', 'rowCode', categoryNum), int2str(400+categoryNum*10+2), sheetNumber);
                periodDate = dateMthFwd(periodDate, 1);
                fillRow('mth2', periodDate, RPayPFLineType::Month, category);

                excelDocument.insertValue(makeCell('mth3', 'rowCode', categoryNum), int2str(400+categoryNum*10+3), sheetNumber);
                periodDate = dateMthFwd(periodDate, 1);
                fillRow('mth3', periodDate, RPayPFLineType::Month, category);

                isFirstCategory = false;
                categoryNum++;
            }

            periodDate = dateStartMth(RPayReportRSV1_2014::getLastQuarterPeriodOrig(pfRegisterTable));

            select sum(PFIns) from registerTrans
                where (registerTrans.RegisterRefRecId == pfRegisterTable.RecId ||
                       registerTrans.RegisterRefRecId == _pfRegisterTableCorr.RecId ||
                       registerTrans.RegisterRefRecId == _corrCorrRegisterRecId ||
                       registerTrans.RegisterRefRecId == _registerRecId6 ||
                       registerTrans.RegisterRefRecId == _registerRecId9)
                   && registerTrans.LineType == RPayPFLineType::Month
                   && registerTrans.EmplId == _emplId
                   && (_corrective || registerTrans.Type == RpayPensionFundExportKindOfCorrection::None)
                   && (!_corrective || registerTrans.Period >= startPeriodCorr && registerTrans.Period <= endPeriodCorr)
                   && registerTrans.ListCode == RPayPFListCode::Normal;

            excelDocument.insertValue('transSumRub', (registerTrans.PFIns*100) div 100, sheetNumber);
            excelDocument.insertValue('transSumKop', (registerTrans.PFIns*100) mod 100, sheetNumber);
        }

        if (!_corrective)
        {
            //correction lines
            while select sum(PFIns), sum(PFAcc) from registerTrans group by Category, Period, Type
                where (registerTrans.RegisterRefRecId == pfRegisterTable.RecId
                    || registerTrans.RegisterRefRecId == prevRegister.RecId)
                   && registerTrans.Type != RpayPensionFundExportKindOfCorrection::None
                   && registerTrans.EmplId == _emplId
                   && registerTrans.LineType == RPayPFLineType::Month
                   && registerTrans.ListCode == RPayPFListCode::Normal
            {
                corrYear = year(registerTrans.Period);
                corrPeriod = this.getPeriodCodeOnDate(registerTrans.Period);
                corrPeriodsSet.add([corrYear, this.getPeriodOnDate(registerTrans.Period), registerTrans.Type]);

                if (correctings.exists([corrYear, corrPeriod]))
                {
                    [tmp14, tmp13Ins, tmp13Acc] = correctings.lookup([corrYear, corrPeriod]);
                }
                else
                {
                    [tmp14, tmp13Ins, tmp13Acc] = [0,0,0];
                }
                if (corrYear >= #LawYear)
                {
                    tmp14 += registerTrans.PFIns + registerTrans.PFAcc;
                    sumIns14 += registerTrans.PFIns + registerTrans.PFAcc;
                }
                else
                {
                    tmp13Ins += registerTrans.PFIns;
                    tmp13Acc += registerTrans.PFAcc;

                    sumIns13 += registerTrans.PFIns;
                    sumAcc13 += registerTrans.PFAcc;
                }

                correctings.insert([corrYear, corrPeriod], [tmp14, tmp13Ins, tmp13Acc]);
            }

            me = correctings.getEnumerator();
            while (me.moveNext())
            {
                if (!isFirstTrans)
                {
                    excelDocument.insertRow(#firstSheetRow + rowNum, sheetNumber);
                }

                [corrYear, corrPeriod] = me.currentKey();
                excelDocument.insertValue('transCorPeriiod', corrPeriod, sheetNumber);
                excelDocument.insertValue('transCorYear', corrYear, sheetNumber);

                [tmp14, tmp13Ins, tmp13Acc] = me.currentValue();
                excelDocument.insertValue('transCorSum14', tmp14, sheetNumber);
                excelDocument.insertValue('transCorIns13', tmp13Ins, sheetNumber);
                excelDocument.insertValue('transCorAcc13', tmp13Acc, sheetNumber);

                isFirstTrans = false;
                rowNum++;
            }

            excelDocument.insertValue('transCorSum14Total', sumIns14, sheetNumber);
            excelDocument.insertValue('transCorIns13Total', sumIns13, sheetNumber);
            excelDocument.insertValue('transCorAcc13Total', sumAcc13, sheetNumber);
        }

        return corrPeriodsSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection1213</Name>
				<Source><![CDATA[
    private void fillSection1213(RHRMEmplId _emplId)
    {
        SetEnumerator                           se;
        RPayPFRegister                          pfRegisterTablePrevOrig;
        RPayPFRegister                          pfRegisterTablePrevOrigCorr;
        RPayPFRegister                          pfRegisterTable6, pfRegisterTable9;
        container                               packedSet;
        RpayPensionFundExportKindOfCorrection   kindOfCorrection;
        ReportPeriod_RU                         corrYear;

        packedSet = this.fillSection12(_emplId);
        this.fillSection13(_emplId);

        se = Set::create(packedSet).getEnumerator();

        while (se.moveNext())
        {
            corrYear = mkdate(31, 12, conpeek(se.current(), 1));

            if (year(corrYear) >= #LawYear)
            {
                pfRegisterTablePrevOrig = RPayPFRegister::find(corrYear, conpeek(se.current(), 2));

                kindOfCorrection = conpeek(se.current(), 3);
                select firstonly recId from pfRegisterTablePrevOrigCorr
                    order by CorrNum desc
                    where pfRegisterTablePrevOrigCorr.Year == pfRegisterTablePrevOrig.Year &&
                          pfRegisterTablePrevOrigCorr.Period == pfRegisterTablePrevOrig.Period &&
                          pfRegisterTablePrevOrigCorr.CorrType != RPayPFCorrectionType::None;

                if (pfRegisterTablePrevOrig.Period < RPayReportSocialTaxPeriod::HalfYear &&
                    pfRegisterTable.Period > RPayReportSocialTaxPeriod::HalfYear)
                {
                    pfRegisterTable6 = RPayPFRegister::find(corrYear, RPayReportSocialTaxPeriod::HalfYear);
                }

                if (pfRegisterTablePrevOrig.Period < RPayReportSocialTaxPeriod::NineMonth &&
                    pfRegisterTable.Period > RPayReportSocialTaxPeriod::NineMonth)
                {
                    pfRegisterTable9 = RPayPFRegister::find(corrYear, RPayReportSocialTaxPeriod::NineMonth);
                }

                this.fillSection12(
                    _emplId,
                    true,
                    pfRegisterTablePrevOrig,
                    pfRegisterTablePrevOrigCorr.RecId,
                    kindOfCorrection,
                    pfRegisterTable6.RecId,
                    pfRegisterTable9.RecId);

                if (kindOfCorrection == RpayPensionFundExportKindOfCorrection::Correctional)
                {
                    this.fillSection13(
                        _emplId,
                        true,
                        pfRegisterTablePrevOrig,
                        pfRegisterTablePrevOrigCorr.RecId,
                        kindOfCorrection,
                        pfRegisterTable6.RecId,
                        pfRegisterTable9.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection13</Name>
				<Source><![CDATA[
    private void fillSection13(
        RHRMEmplId                              _emplId,
        boolean                                 _corrective = false,
        RPayPFRegister                          _pfRegisterTableCorr = pfRegisterTable,
        RefRecId                                _corrCorrRegisterRecId = 0,
        RpayPensionFundExportKindOfCorrection   _kindOfCorrection = RpayPensionFundExportKindOfCorrection::None,
        RefRecId                                _registerRecId6 = 0,
        RefRecId                                _registerRecId9 = 0
        )
    {
        RPayPFRegisterTrans         registerTrans;
        RPayPFSeniority             seniority;
        Map                         rowIndexes = new Map(Types::String, Types::Integer);
        Map                         colIndexes = new Map(Types::String, Types::String);
        int                         condNum = 1;
        ReportPeriod_RU             periodDate;
        int                         senNum;
        int                         senRowNum;
        ReportPeriod_RU             startPeriodCorr = _pfRegisterTableCorr ? endmth(_pfRegisterTableCorr.dateStartQuarter()) : datenull();
        ReportPeriod_RU             endPeriodCorr = _pfRegisterTableCorr ? _pfRegisterTableCorr.dateEndQuarter() : datenull();
        RefRecId                    seniorityRegisterRecId;
        int                         countRows, seniorityFirstRow;
        RPayPFRegister              prevOrigRPayPFRegister;
        int                         prevYear;
        RPayReportSocialTaxPeriod   prevPeriod;
        RPayPFRegisterTrans         rPayPFRegisterTransExists, rPayPFRegisterTransNotExists;

        str makeSeniorityCell(int _row, str _col)
        {
            return colIndexes.lookup(_col) + int2str(_row);
        }

        str makeCell(str _row, str _col, int _catNum)
        {
            str ret;
            ret = colIndexes.lookup(_col);
            ret += int2str(rowIndexes.lookup(_row) + _catNum*4);
            return ret;
        }

        void fillRow(str _row, Date _preiod, RPayPFLineType _lineType, RPayPFWorkCondCode _code)
        {
            RPayPFRegisterTrans trans;

            excelDocument.insertValue(makeCell(_row, 'condCode', condNum), enum2Value(_code), sheetNumber);

            while select sum(TotalPayments) from trans group by ListCode
                where (trans.RegisterRefRecId == pfRegisterTable.RecId ||
                       trans.RegisterRefRecId == _pfRegisterTableCorr.RecId ||
                       trans.RegisterRefRecId == _corrCorrRegisterRecId ||
                       trans.RegisterRefRecId == _registerRecId6 ||
                       trans.RegisterRefRecId == _registerRecId9)
                   && trans.WorkCondCode == _code
                   && (trans.LineType == _lineType
                    || (_lineType == RPayPFLineType::Total
                     && (trans.RegisterRefRecId == _registerRecId6
                      || trans.RegisterRefRecId == _registerRecId9)))
                   && trans.EmplId == _emplId
                   && (trans.Period == dateEndMth(_preiod)
                     || (_lineType == RPayPFLineType::Total
                      && (trans.Type != RpayPensionFundExportKindOfCorrection::None
                       && trans.RegisterRefRecId == pfRegisterTable.RecId
                       || trans.RegisterRefRecId != pfRegisterTable.RecId
                       || !_corrective)))
                   && (_corrective || _lineType == RPayPFLineType::Total || trans.Type == RpayPensionFundExportKindOfCorrection::None)
                   && (trans.Period >= dateStartQtr(_preiod)
                     && trans.Period <= dateEndQtr(_preiod)
                     || _lineType == RPayPFLineType::Month
                     || (trans.RegisterRefRecId != _registerRecId6
                       && trans.RegisterRefRecId != _registerRecId9))
                   && trans.ListCode != RPayPFListCode::Normal
            {
                if (trans.TotalPayments != 0)
                {
                    switch (trans.ListCode)
                    {
                        case RPayPFListCode::Extra1:
                            excelDocument.insertValue(makeCell(_row, 'sumbase', condNum), trans.TotalPayments, sheetNumber);
                        break;
                        case RPayPFListCode::Extra2:
                            excelDocument.insertValue(makeCell(_row, 'sumSpec', condNum), trans.TotalPayments, sheetNumber);
                        break;
                    }
                }
            }
        }

        void insertWorkCond()
        {
            periodDate = RPayReportRSV1_2014::getLastQuarterPeriodOrig(_corrective ? _pfRegisterTableCorr : pfRegisterTable);

            excelDocument.insertValue(makeCell('year', 'rowCode', condNum), int2str(700+(condNum - 1)*10), sheetNumber);
            fillRow('year', periodDate, RPayPFLineType::Total, registerTrans.WorkCondCode);

            excelDocument.insertValue(makeCell('mth1', 'rowCode', condNum), int2str(700+(condNum - 1)*10+1), sheetNumber);
            periodDate = dateStartQtr(periodDate);
            fillRow('mth1', periodDate, RPayPFLineType::Month, registerTrans.WorkCondCode);

            excelDocument.insertValue(makeCell('mth2', 'rowCode', condNum), int2str(700+(condNum - 1)*10+2), sheetNumber);
            periodDate = dateMthFwd(periodDate, 1);
            fillRow('mth2', periodDate, RPayPFLineType::Month, registerTrans.WorkCondCode);

            excelDocument.insertValue(makeCell('mth3', 'rowCode', condNum), int2str(700+(condNum - 1)*10+3), sheetNumber);
            periodDate = dateMthFwd(periodDate, 1);
            fillRow('mth3', periodDate, RPayPFLineType::Month, registerTrans.WorkCondCode);

            condNum++;
        }

        ;
        rowIndexes.insert('year', 8);
        rowIndexes.insert('mth1', 9);
        rowIndexes.insert('mth2', 10);
        rowIndexes.insert('mth3', 11);

        colIndexes.insert('rowCode','AO');
        colIndexes.insert('condCode','AZ');
        colIndexes.insert('sumbase','BI');
        colIndexes.insert('sumSpec','CL');
        colIndexes.insert('workNum', 'A');
        colIndexes.insert('workStart', 'E');
        colIndexes.insert('workEnd', 'R');
        colIndexes.insert('workCond', 'AS');
        colIndexes.insert('workInfo', 'BS');

        excelDocument.insertSheet(sheet13Num, sheetNumber);
        sheetNumber++;
        pageNumber++;
        this.fillRegularCells('CQ2', this.pageNum2str(), #pageNumLength, #CellSpace, sheetNumber);

        [prevPeriod, prevYear] = pfRegisterTable.getPreviousPeriod();

        select firstonly prevOrigRPayPFRegister
            where prevOrigRPayPFRegister.Year == mkdate(31, 12, prevYear) &&
                  prevOrigRPayPFRegister.Period == prevPeriod &&
                  prevOrigRPayPFRegister.CorrType == RPayPFCorrectionType::None;

        countRows = 0;
        while select WorkCondCode from registerTrans group by WorkCondCode
            where (registerTrans.RegisterRefRecId == pfRegisterTable.RecId ||
                   registerTrans.RegisterRefRecId == _pfRegisterTableCorr.RecId ||
                   registerTrans.RegisterRefRecId == _corrCorrRegisterRecId ||
                   registerTrans.RegisterRefRecId == _registerRecId6 ||
                   registerTrans.RegisterRefRecId == _registerRecId9)
               && (_corrective || registerTrans.Type == RpayPensionFundExportKindOfCorrection::None)
               && (!_corrective || registerTrans.Period >= startPeriodCorr && registerTrans.Period <= endPeriodCorr)
               && registerTrans.EmplId == _emplId
               && registerTrans.ListCode != RPayPFListCode::Normal
        {
            countRows ++;
        }

        if (!_corrective)
        {
            while select registerTrans
                group by WorkCondCode
                where registerTrans.RegisterRefRecId == prevOrigRPayPFRegister.RecId &&
                      registerTrans.EmplId == _emplId &&
                      registerTrans.LineType == RPayPFLineType::Total &&
                      registerTrans.ListCode != RPayPFListCode::Normal
            exists join rPayPFRegisterTransExists
                where rPayPFRegisterTransExists.EmplId == registerTrans.EmplId &&
                      rPayPFRegisterTransExists.RegisterRefRecId == prevRegister.RecId
            notexists join rPayPFRegisterTransNotExists
                where rPayPFRegisterTransNotExists.EmplId == rPayPFRegisterTransExists.EmplId &&
                      rPayPFRegisterTransNotExists.RegisterRefRecId == pfRegisterTable.RecId
            {
                countRows ++;
            }
        }

        if (countRows > 1)
        {
            excelDocument.insertRows(12, 15, sheetNumber, 4, countRows - 1, sheetNumber);
        }

        while select WorkCondCode from registerTrans group by WorkCondCode
            where (registerTrans.RegisterRefRecId == pfRegisterTable.RecId ||
                   registerTrans.RegisterRefRecId == _pfRegisterTableCorr.RecId ||
                   registerTrans.RegisterRefRecId == _corrCorrRegisterRecId ||
                   registerTrans.RegisterRefRecId == _registerRecId6 ||
                   registerTrans.RegisterRefRecId == _registerRecId9)
               && (_corrective || registerTrans.Type == RpayPensionFundExportKindOfCorrection::None)
               && (!_corrective || registerTrans.Period >= startPeriodCorr && registerTrans.Period <= endPeriodCorr)
               && registerTrans.EmplId == _emplId
               && registerTrans.ListCode != RPayPFListCode::Normal
        {
            insertWorkCond();
        }

        if (!_corrective)
        {
            while select registerTrans
                group by WorkCondCode
                where registerTrans.RegisterRefRecId == prevOrigRPayPFRegister.RecId &&
                      registerTrans.EmplId == _emplId &&
                      registerTrans.LineType == RPayPFLineType::Total &&
                      registerTrans.ListCode != RPayPFListCode::Normal
            exists join rPayPFRegisterTransExists
                where rPayPFRegisterTransExists.EmplId == registerTrans.EmplId &&
                      rPayPFRegisterTransExists.RegisterRefRecId == prevRegister.RecId
            notexists join rPayPFRegisterTransNotExists
                where rPayPFRegisterTransNotExists.EmplId == rPayPFRegisterTransExists.EmplId &&
                      rPayPFRegisterTransNotExists.RegisterRefRecId == pfRegisterTable.RecId
            {
                insertWorkCond();
            }
        }

        condNum = condNum > 1 ? condNum - 1 : condNum;

        if (_corrective)
        {
            select firstonly recId from seniority
                where seniority.EmplId == _emplId
                  && seniority.RegisterRefRecId == _corrCorrRegisterRecId;

            if (seniority.RecId)
            {
                seniorityRegisterRecId = _corrCorrRegisterRecId;
            }
            else
            {
                seniorityRegisterRecId = _pfRegisterTableCorr.recId;
            }
        }
        else
        {
            seniorityRegisterRecId = pfRegisterTable.RecId;
        }

        select count (recId) from seniority
            where seniority.EmplId == _emplId
              && seniority.RegisterRefRecId == seniorityRegisterRecId;

        countRows = any2int(seniority.RecId);

        select count (recId) from seniority
            where seniority.EmplId == _emplId
              && seniority.RegisterRefRecId == seniorityRegisterRecId
              && seniority.PositionList != '';

        countRows += any2int(seniority.RecId);

        seniorityFirstRow = 19 + condNum*4;

        if (countRows > 1)
        {
            excelDocument.insertRows(seniorityFirstRow, seniorityFirstRow, sheetNumber, 1, countRows - 1, sheetNumber);
        }

        senRowNum = 1;

        while select seniority
            where seniority.EmplId == _emplId
              && seniority.RegisterRefRecId == seniorityRegisterRecId
        {
            excelDocument.insertValue(makeSeniorityCell(seniorityFirstRow + senNum, 'workNum'), int2str(senRowNum), sheetNumber);
            excelDocument.insertValue(makeSeniorityCell(seniorityFirstRow + senNum, 'workStart'), date2str(seniority.startDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll), sheetNumber);
            excelDocument.insertValue(makeSeniorityCell(seniorityFirstRow + senNum, 'workEnd'), date2str(seniority.EndDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll), sheetNumber);
            excelDocument.insertValue(makeSeniorityCell(seniorityFirstRow + senNum, 'workCond'), seniority.SpecCond, sheetNumber);
            excelDocument.insertValue(makeSeniorityCell(seniorityFirstRow + senNum, 'workInfo'), seniority.SeniorityTypeId, sheetNumber);
            senNum++;
            senRowNum++;

            if (seniority.PositionList != '')
            {
                excelDocument.insertValue(makeSeniorityCell(seniorityFirstRow + senNum, 'workCond'), seniority.PositionList, sheetNumber);
                senNum++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection2</Name>
				<Source><![CDATA[
    private void fillSection2(RPayPFRegisterAddInfo _tariff)
    {
        Map rowIndexes = new Map(Types::Integer, Types::String);
        Map colIndexes = new Map(Types::Integer, Types::String);
        RPayPFRegisterTotals totals;
        str cell;
        #define.TariffLength(2)
        ;

        progress.setText(strfmt("@GLS110792", 2));
        progress.incCount();
        pageNumber++;

        this.fillRegularCells('CV2', this.pageNum2str(), #pageNumLength, #CellSpace, sheetNumber);
        this.fillRegularCells('Tariff', _tariff, #TariffLength, #CellSpace, sheetNumber);

        rowIndexes.insert(200, '12');
        rowIndexes.insert(201, '13');
        rowIndexes.insert(202, '14');
        rowIndexes.insert(203, '15');
        rowIndexes.insert(204, '16');
        rowIndexes.insert(205, '17');
        rowIndexes.insert(206, '18');
        rowIndexes.insert(207, '19');
        rowIndexes.insert(208, '20');

        rowIndexes.insert(210, '22');
        rowIndexes.insert(211, '23');
        rowIndexes.insert(212, '24');
        rowIndexes.insert(213, '25');
        rowIndexes.insert(214, '26');
        rowIndexes.insert(215, '27');

        colIndexes.insert(3, 'BO');
        colIndexes.insert(4, 'CC');
        colIndexes.insert(5, 'CP');
        colIndexes.insert(6, 'DC');

        while select totals
            where totals.RegisterRefRecId == pfRegisterTable.recId
               && totals.AddInfo == _tariff
               && totals.LineNum >= 200
               && totals.LineNum <= 215
               && totals.Value != 0
        {
            cell = colIndexes.lookup(totals.ColNum) + rowIndexes.lookup(totals.LineNum);
            excelDocument.insertValue(cell, totals.Value, sheetNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection2_2223</Name>
				<Source><![CDATA[
    private void fillSection2_2223()
    {
        Map rowIndexes = new Map(Types::Integer, Types::String);
        Map colIndexes = new Map(Types::Integer, Types::String);
        ;
        progress.setText(strfmt("@GLS110792", 3));
        progress.incCount();
        pageNumber++;

        this.fillRegularCells('CV2', this.pageNum2str(), #pageNumLength, #CellSpace, sheetNumber);

        colIndexes.insert(3, 'BN');
        colIndexes.insert(4, 'CA');
        colIndexes.insert(5, 'CN');
        colIndexes.insert(6, 'DA');

        rowIndexes.insert(220, '10');
        rowIndexes.insert(221, '11');
        rowIndexes.insert(223, '12');
        rowIndexes.insert(224, '13');
        rowIndexes.insert(225, '14');

        rowIndexes.insert(230, '22');
        rowIndexes.insert(231, '23');
        rowIndexes.insert(233, '24');
        rowIndexes.insert(234, '25');
        rowIndexes.insert(235, '26');

        this.fillSections(220, 235, colIndexes, rowIndexes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection5</Name>
				<Source><![CDATA[
    private void fillSection5(Name _addInfo)
    {
        RPayPFRegisterTotals totals;
        str cell;
        Map rowIndexes = new Map(Types::Integer, Types::String);
        Map colIndexes = new Map(Types::Integer, Types::String);
        ;

        progress.setText(strfmt("@GLS110792", 4));
        progress.incCount();
        pageNumber++;

        this.fillRegularCells('CV2', this.pageNum2str(), #pageNumLength, #CellSpace, sheetNumber);
        this.fillRegularCells('addBaseCode', _addInfo, #CellSpace, #CellSpace, sheetNumber);
        switch (pfRegisterTable.CertType)
        {
            case RPayPFCertType::Attestation :
                this.fillRegularCells('addWorkPlace', #mark, #CellSpace, #CellSpace, sheetNumber);
            break;

            case RPayPFCertType::SpecialEstimation :
                this.fillRegularCells('addSpec', #mark, #CellSpace, #CellSpace, sheetNumber);
            break;

            case RPayPFCertType::SpecEstimationAndAttestation :
                this.fillRegularCells('addWorkSpec', #mark, #CellSpace, #CellSpace, sheetNumber);
            break;
        }

        colIndexes.insert(3, 'CJ');
        colIndexes.insert(4, 'CU');
        colIndexes.insert(5, 'DF');
        colIndexes.insert(6, 'DQ');

        rowIndexes.insert(240, '14');
        rowIndexes.insert(241, '15');
        rowIndexes.insert(243, '16');
        rowIndexes.insert(244, '17');
        rowIndexes.insert(245, '18');

        rowIndexes.insert(246, '20');
        rowIndexes.insert(247, '21');
        rowIndexes.insert(249, '22');
        rowIndexes.insert(250, '23');
        rowIndexes.insert(251, '24');

        rowIndexes.insert(252, '26');
        rowIndexes.insert(253, '27');
        rowIndexes.insert(255, '28');
        rowIndexes.insert(256, '29');
        rowIndexes.insert(257, '30');

        rowIndexes.insert(258, '32');
        rowIndexes.insert(259, '33');
        rowIndexes.insert(261, '34');
        rowIndexes.insert(262, '35');
        rowIndexes.insert(263, '36');

        rowIndexes.insert(264, '38');
        rowIndexes.insert(265, '39');
        rowIndexes.insert(267, '40');
        rowIndexes.insert(268, '41');
        rowIndexes.insert(269, '42');

        while select totals
            where totals.RegisterRefRecId == pfRegisterTable.recId
               && totals.AddInfo == _addInfo
               && totals.LineNum >= 240
               && totals.LineNum <= 269
        {
            cell = colIndexes.lookup(totals.ColNum) + rowIndexes.lookup(totals.LineNum);
            excelDocument.insertValue(cell, totals.Value, sheetNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection6</Name>
				<Source><![CDATA[
    private void fillSection6()
    {
        #define.BatchRow(12)
        #define.CorrBatchRow(24)
        RPayPFBatches batches;
        ReportPeriod_RU lastPeriod = RPayReportRSV1_2014::getLastQuarterPeriodOrig(pfRegisterTable);
        int batchNum = 1, batchLinesAdded = 0;
        int corrBatchNum = 1, corrBatchLineAdded = 0;
        boolean isFirstRow = true;
        real totalBase = 0;
        real totalSum = 0;
        real totalQty = 0;
        real totalIns = 0;
        real totalAcc = 0;
        ;
        progress.setText(strfmt("@GLS110792", 5));
        progress.incCount();
        pageNumber++;

        this.fillRegularCells('CS2', this.pageNum2str(), #pageNumLength, #CellSpace, sheetNumber);

        //batches
        while select batches
            where batches.RegisterRefRecId == pfRegisterTable.RecId
               && batches.Type == RpayPensionFundExportKindOfCorrection::None
        {
            if ( !isFirstRow)
            {
                excelDocument.insertRow(#BatchRow + batchLinesAdded, sheetNumber);
                batchLinesAdded ++;
            }
            excelDocument.insertValue('batchNum', batchNum, sheetNumber);
            excelDocument.insertValue('BatchBase', batches.FundBase, sheetNumber);
            excelDocument.insertValue('batchSum', batches.PFIns + batches.PFAcc, sheetNumber);
            excelDocument.insertValue('batchQty', batches.Qty, sheetNumber);
            excelDocument.insertValue('batchDoc', batches.Number, sheetNumber);

            isFirstRow = false;
            totalBase += batches.FundBase;
            totalSum += batches.PFIns + batches.PFAcc;
            totalQty += batches.Qty;
            batchNum++;
        }

        excelDocument.insertValue('TotalBase', totalBase, sheetNumber);
        excelDocument.insertValue('TotalSum', totalSum, sheetNumber);
        excelDocument.insertValue('TotalQty', totalQty, sheetNumber);

        //corrective
        totalBase = 0;
        totalSum = 0;
        totalQty = 0;
        totalIns = 0;
        totalAcc = 0;
        isFirstRow = true;
        while select RecId, Period, PFIns, PFAcc, Qty, Number from batches
            where batches.RegisterRefRecId == pfRegisterTable.RecId
               && batches.Type != RpayPensionFundExportKindOfCorrection::None
        {
            if ( !isFirstRow)
            {
                excelDocument.insertRow(#CorrBatchRow + batchLinesAdded + corrBatchLineAdded, sheetNumber);
                corrBatchLineAdded ++;
            }

            excelDocument.insertValue('CorrNum', corrBatchNum, sheetNumber);
            excelDocument.insertValue('CorrPeriodCode', this.getPeriodCodeOnDate(batches.Period), sheetNumber);
            excelDocument.insertValue('CorrYear', year(batches.Period), sheetNumber);

            if (year(batches.Period) >= #LawYear)
            {
                excelDocument.insertValue('CorrSum', batches.PFIns + batches.PFAcc, sheetNumber);
                totalSum += batches.PFIns + batches.PFAcc;
                excelDocument.insertValue('CorrIns', '', sheetNumber);
                excelDocument.insertValue('CorrAcc', '', sheetNumber);
            }
            else
            {
                excelDocument.insertValue('CorrIns', batches.PFIns, sheetNumber);
                excelDocument.insertValue('CorrAcc', batches.PFAcc, sheetNumber);
                totalIns += batches.PFIns;
                totalAcc += batches.PFAcc;
                excelDocument.insertValue('CorrSum', '', sheetNumber);
            }

            excelDocument.insertValue('CorrQty', batches.Qty, sheetNumber);
            excelDocument.insertValue('CorrDoc', batches.Number, sheetNumber);

            isFirstRow = false;
            totalQty += batches.Qty;
            corrBatchNum++;
        }

        excelDocument.insertValue('CorrTotalSum', totalSum, sheetNumber);
        excelDocument.insertValue('CorrTotalIns', totalIns, sheetNumber);
        excelDocument.insertValue('CorrTotalAcc', totalAcc, sheetNumber);
        excelDocument.insertValue('CorrTotalQty', totalQty, sheetNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSections</Name>
				<Source><![CDATA[
    private void fillSections(int _startLine, int _endLine, Map _colIndexes, Map _rowIndexes)
    {
        RPayPFRegisterTotals totals;
        str cell;
        ;
        while select totals
            where totals.RegisterRefRecId == pfRegisterTable.recId
               && totals.LineNum >= _startLine
               && totals.LineNum <= _endLine
        {
            cell = _colIndexes.lookup(totals.ColNum) + _rowIndexes.lookup(totals.LineNum);
            excelDocument.insertValue(cell, totals.Value, sheetNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTitle</Name>
				<Source><![CDATA[
    private void fillTitle()
    {
        #define.INNLength(12)
        #define.KPPLength(9)
        #define.OKDPLength(8)
        #define.PhoneLength(14)
        #define.CorrNumLength(3)
        #define.QtyLength(6)
        #define.dayMthLength(2)
        #define.yearLength(4)
        #define.Sheet(1)

        #define.Space(' ')
        #define.Hyphen('-')
        #define.TerminationSymbol('Л')
        ;
        progress.setText("@SYS16146");
        progress.incCount();

        this.fillRegularCells('CV9', this.pageNum2str(), #pageNumLength, #CellSpace, sheetNumber);
        this.fillRegularCells('PFR', companyInfo.PFRegNum_RU, #PFRLength, #CellSpace, sheetNumber);
        this.fillRegularCells('CorrectionNum', this.formatByMask(pfRegisterTable.CorrNum, '000'), #CorrNumLength, #CellSpace, sheetNumber);
        this.fillRegularCells('ReportPeriodYear',   strFmt('%1', year(pfRegisterTable.Year)), 4, #CellSpace, sheetNumber);
        this.fillRegularCells('ReportPeriodCode',   strFmt('%1', this.getPeriodCode(pfRegisterTable.Period)), #CellSpace, #CellSpace, sheetNumber);
        this.fillRegularCells('CorrectionType',     this.RPayPFCorrectionType2Code(pfRegisterTable.CorrType), #CellSpace, #CellSpace, sheetNumber);
        this.fillRegularCells('Terminate',          pfRegisterTable.Termination == NoYes::Yes ? #TerminationSymbol : ' ', #CellSpace, #CellSpace, sheetNumber);
        excelDocument.insertValue('CompanyName',    companyInfo.Name, sheetNumber);

        this.fillRegularCells('INN',                CompanyInfoHelper::partyINNasOfDate_RU(companyInfo, pfRegisterTable.ReportDate), #INNLength,  #CellSpace, #Sheet, true, #Hyphen, true);
        this.fillRegularCells('KPP',                CompanyInfoHelper::partyKPPasOfDate_RU(companyInfo, pfRegisterTable.ReportDate), #KPPLength,   #CellSpace, sheetNumber);
        this.fillRegularCells('OKDP',               CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, pfRegisterTable.ReportDate), #OKDPLength,  #CellSpace, sheetNumber);
        this.fillRegularCells('CompanyPhone',       strReplace(companyInfo.phone(), ' ', ''), #PhoneLength);

        this.fillRegularCells('EmplQty',          this.formatByMask(int2str(pfregisterTable.InsuredPersonsNum), '000000'),  #QtyLength, #CellSpace, #Sheet, true, #Space);
        this.fillRegularCells('EmplQtyAvg',       this.formatByMask(int2str(pfRegisterTable.AverageHeadCount), '000000'),    #QtyLength, #CellSpace, #Sheet, true, #Space);

        excelDocument.insertValue('SignerType',  this.signerCodeType(pfRegisterTable.SignerCategory), sheetNumber);
        excelDocument.insertValue('Signer',  RHRMEmplTable::find(pfRegisterTable.Signer).personTable().fio(true), sheetNumber);

        this.fillRegularCells('reportDay', this.formatByMask(int2str(dayofmth(pfRegisterTable.ReportDate)), '00'), #dayMthLength, #CellSpace, #Sheet, true, #Space);
        this.fillRegularCells('reportMth', this.formatByMask(int2str(mthofyr(pfRegisterTable.ReportDate)), '00'), #dayMthLength, #CellSpace, #Sheet, true, #Space);
        this.fillRegularCells('reportYr', int2str(year(pfRegisterTable.ReportDate)), #yearLength, #CellSpace, #Sheet, true, #Space);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatByMask</Name>
				<Source><![CDATA[
    private str formatByMask(str _s, str _mask)
    {
        int len;
        str ret;
        len    = strlen(_s);

        ret = _mask + _s;

        ret = strdel(ret, 1, len);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodCode</Name>
				<Source><![CDATA[
    private str getPeriodCode(RPayReportSocialTaxPeriod _period)
    {
        switch (_period)
        {
            case RPayReportSocialTaxPeriod::Quarter:
                return '3';
            case RPayReportSocialTaxPeriod::HalfYear:
                return '6';
            case RPayReportSocialTaxPeriod::NineMonth:
                return '9';
            case RPayReportSocialTaxPeriod::Year:
                return '0';
        }
        return ' ';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodCodeOnDate</Name>
				<Source><![CDATA[
    private str getPeriodCodeOnDate(ReportPeriod_RU _period)
    {
        int mth = mthOfYr(_period);

        if (mth <= 3)
        {
            return '3';
        }

        if (mth <= 6)
        {
            return '6';
        }

        if (mth <= 9)
        {
            return '9';
        }

        return '0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodOnDate</Name>
				<Source><![CDATA[
    private RPayReportSocialTaxPeriod getPeriodOnDate(ReportPeriod_RU _period)
    {
        int mth = mthOfYr(_period);

        if (mth <= 3)
        {
            return RPayReportSocialTaxPeriod::Quarter;
        }

        if (mth <= 6)
        {
            return RPayReportSocialTaxPeriod::HalfYear;
        }

        if (mth <= 9)
        {
            return RPayReportSocialTaxPeriod::NineMonth;
        }

        return RPayReportSocialTaxPeriod::Year;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        companyInfo      = CompanyInfo::find();
        pageNumber = 1;

        if (pfRegisterTable.isCorrRegister())
        {
            printPersonal = false;
        }
        else
        {
            switch (Box::yesNoCancel("@SYP4881381", DialogButton::No))
            {
                case DialogButton::No :
                    printPersonal = false;
                    break;
                case DialogButton::Yes :
                    printPersonal = true;
                    break;
                default:
                    return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean makeDocument()
    {
        excelDocument = new ComExcelDocument_RU();

        if (! excelDocument.newFile(RPayReportRSV1_2014::fullTemplateName(), false))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum2str</Name>
				<Source><![CDATA[
    private str pageNum2str()
    {
        return this.formatByMask(int2str(pageNumber), '000000');
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPfRegisterTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayPFRegister parmPfRegisterTable(RPayPFRegister _pfRegisterTable = pfRegisterTable)
    {
        int prevYear;
        RPayReportSocialTaxPeriod prevPeriod;
        RPayPFCorrectionNum corrNum;
        ;

        if (pfRegisterTable.RecId != _pfRegisterTable.RecId)
        {
            [prevPeriod, prevYear] = _pfRegisterTable.getPreviousPeriod();

            select firstonly prevRegister
                order by CorrNum desc
                where prevRegister.Year == mkdate(31, 12, prevYear) &&
                      prevRegister.Period == prevPeriod &&
                      prevRegister.CorrType != RPayPFCorrectionType::None;

            corrNum = prevRegister.CorrNum;
        }

        pfRegisterTable = _pfRegisterTable;
        return pfRegisterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RPayPFCorrectionType2Code</Name>
				<Source><![CDATA[
    private str RPayPFCorrectionType2Code(RPayPFCorrectionType _type)
    {
        switch (_type)
        {
            case RPayPFCorrectionType::Payments:
                return '1';
            case RPayPFCorrectionType::PremiumsCalc:
                return '2';
            case RPayPFCorrectionType::MedIns:
                return '3';
        }
        return ' ';
    }

]]></Source>
			</Method>
			<Method>
				<Name>RPayPFListCode2Code</Name>
				<Source><![CDATA[
    private str RPayPFListCode2Code(RPayPFListCode _code)
    {
        switch (_code)
        {
            case RPayPFListCode::Extra1:
                return '1';
            case RPayPFListCode::Extra2:
                return '2';
        }
        return '0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.init() && this.checkDocument() && this.makeDocument())
        {
            try
            {
                this.fillDocument();
            }
            catch (Exception::Error)
            {
                if (excelDocument)
                {
                    excelDocument.closeDocument();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>signerCodeType</Name>
				<Source><![CDATA[
    private str signerCodeType(RPayPFOfficialsType _type)
    {
        str ret = '0';

        switch (_type)
        {
            case RPayPFOfficialsType::Payer :
                return '1';
            case RPayPFOfficialsType::Representative :
                return '2';
            case RPayPFOfficialsType::Successor :
                return '3';
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer  version = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP2988";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTemplateName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str fullTemplateName()
    {
        ResourceNode rn = SysResource::getResourceNode(resourceStr(RSV1_2014));
        rn.AOTload();
        return SysResource::saveToTempFile(rn, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastQuarterPeriodOrig</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReportPeriod_RU getLastQuarterPeriodOrig(RPayPFRegister _pfRegisterTable)
    {
        ReportPeriod_RU lastPeriod;

        switch (_pfRegisterTable.Period)
        {
            case RPayReportSocialTaxPeriod::Quarter:
                lastPeriod = mkdate(31, 3, year(_pfRegisterTable.Year));
                break;
            case RPayReportSocialTaxPeriod::HalfYear:
                lastPeriod = mkdate(31, 6, year(_pfRegisterTable.Year));
                break;
            case RPayReportSocialTaxPeriod::NineMonth:
                lastPeriod = mkdate(31, 9, year(_pfRegisterTable.Year));
                break;
            case RPayReportSocialTaxPeriod::Year:
                lastPeriod = mkdate(31, 12, year(_pfRegisterTable.Year));
                break;
        }

        return lastPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayReportRSV1_2014 report = new RPayReportRSV1_2014();
        ;
        report.parmPfRegisterTable(_args.record());
        report.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>