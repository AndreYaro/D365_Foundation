<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransactionInquiryUIHelperTCS_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a UI helper extends <c>TaxTransactionInquiryUIHelperTotal_IN</c>. If the form is to
/// show the TCS inquiry, this UI helper will be created and provide some methods to the form.
/// </summary>
class TaxTransactionInquiryUIHelperTCS_IN extends TaxTransactionInquiryUIHelperTotal_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateUIDesign</Name>
				<Source><![CDATA[
    protected void updateUIDesign()
    {
        super();

        registrationNumberCtrl.visible(true);
        settlementPeriodCtrl.visible(true);
        settlementPeriodCtrl.mandatory(false);
        registrationNumberCtrl.label("@TaxTransactionInquiry:TANNumber");
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check and throw more errors if there is any error only for this type of tax inquiry before clicking
    /// the inquiry button.
    /// </summary>
    protected void checkErrors()
    {
        super();

        TaxWithholdHead_IN taxWithholdHead_IN;
        if (settlementPeriodCtrl.text())
        {
            select firstonly RecId from taxWithholdHead_IN
                where taxWithholdHead_IN.Period == settlementPeriodCtrl.text()
                    && taxWithholdHead_IN.TaxType == TaxWithholdType_IN::TCS;
            if (!taxWithholdHead_IN.RecId)
            {
                throw error(strFmt("@TaxTransactionInquiry:WrongWTHTaxSettlementPeriods", settlementPeriodCtrl.text(), TaxWithholdType_IN::TCS));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInquiryMenuItemDisplayStr</Name>
				<Source><![CDATA[
    protected MenuItemNameDisplay getInquiryMenuItemDisplayStr()
    {
        return menuItemDisplayStr(TaxWithholdInquiryTrans_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInquiryViewTableId</Name>
				<Source><![CDATA[
    protected TableId getTaxInquiryViewTableId()
    {
        return tableNum(TaxWithholdInquiryView_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterQuery</Name>
				<Source><![CDATA[
    protected DisplayQueryString getFilterQuery()
    {
        return queryStr(TaxWithholdInquiry_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableFieldGroupName</Name>
				<Source><![CDATA[
    protected FieldGroupName getAvailableFieldGroupName()
    {
        return "@TaxTransactionInquiry:WithholdingTaxAvailableFields";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultSelectedFieldGroupName</Name>
				<Source><![CDATA[
    protected FieldGroupName getDefaultSelectedFieldGroupName()
    {
        return "@TaxTransactionInquiry:WithholdingTaxSelectedFields";
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceForTaxSettlementPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// The call back method of the event that the control is looking up reference. Popup a list of TCS tax settlement period
    /// that users can choose.
    /// </summary>
    /// <param name = "_formControl">the look up control</param>
    public void lookupReferenceForTaxSettlementPeriod(FormControl _formControl)
    {
        Query query = new Query();
        QueryBuildDataSource dsTaxWithholdHead_IN;

        dsTaxWithholdHead_IN = query.addDataSource(tableNum(TaxWithholdHead_IN));
        dsTaxWithholdHead_IN.addRange(fieldNum(TaxWithholdHead_IN, TaxType)).value(queryValue(TaxWithholdType_IN::TCS));

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(TaxWithholdHead_IN), _formControl);

        sysTableLookup.parmQuery(query);
        sysTableLookup.addSelectionField(fieldNum(TaxWithholdHead_IN, Period));
        sysTableLookup.addLookupfield(fieldnum(TaxWithholdHead_IN, Period));
        sysTableLookup.addLookupfield(fieldnum(TaxWithholdHead_IN, Name));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add ranges to the query of the tax transaction.
    /// </summary>
    /// <param name = "_queryBuildDataSource">the look up query</param>
    protected void addRanges(QueryBuildDataSource _queryBuildDataSource)
    {
        TaxWithholdRegNumbers_IN    taxWithholdRegNumbers_IN;
        TaxWithholdHead_IN          taxWithholdHead_IN;

        TaxRegistrationNumber_IN    registrationNumber  = taxInquiryArguments.getTaxRegistrationNumber();
        TaxSettlementPeriodId       settlementPeriod    = taxInquiryArguments.getSettlementPeriod();

        select firstonly RecId from taxWithholdRegNumbers_IN
            where taxWithholdRegNumbers_IN.RegistrationNumber == registrationNumber;

        select firstonly RecId from taxWithholdHead_IN
            where taxWithholdHead_IN.Period == settlementPeriod
                && taxWithholdHead_IN.TaxType == TaxWithholdType_IN::TCS;

        if (registrationNumber)
        {
            queryBuildDataSource.addRange(fieldNum(TaxWithholdInquiryView_IN, TaxWithholdRegNumber)).value(strFmt("%1", taxWithholdRegNumbers_IN.RecId));
        }

        if (settlementPeriod)
        {
            queryBuildDataSource.addRange(fieldNum(TaxWithholdInquiryView_IN, TaxWithholdSettlementPeriod)).value(strFmt("%1", taxWithholdHead_IN.RecId));
        }
        queryBuildDataSource.addRange(fieldNum(TaxWithholdInquiryView_IN, TaxType)).value(queryValue(TaxWithholdType_IN::TCS));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>