<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCleanupTrackingInventSumService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCleanupTrackingInventSumService</c> class provides the service operation for
///    cleaning up closed tracking dimension associated <c>InventSum</c> records.
/// </summary>
public class InventCleanupTrackingInventSumService extends InventCleanupInventSumService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTrackingDimensionFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies a filter on all tracking dimensions to ensure that at least one tracking dimension references a value.
    /// </summary>
    /// <param name="_query">
    ///    A <c>Query</c> object containing a query range on the <c>RecId</c> field.
    /// </param>
    protected void addTrackingDimensionFilter(Query _query)
    {
        _query.dataSourceTable(tableNum(InventDim)).findRange(fieldNum(InventDim, RecId)).value(this.trackingDimensionQueryExpression());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clean up closed <c>InventSum</c> records.
    /// </summary>
    /// <param name="_dataContract">
    ///    A <c>InventCleanupTrackingInventSumContract</c> object specifying the <c>InventSum</c> records
    ///    that should be cleaned up.
    /// </param>
    public void cleanup(InventCleanupTrackingInventSumContract  _dataContract)
    {
        if (FeatureStateProvider::isFeatureEnabled(InventCleanupAllClosedInventSumRecordsToggle::instance()))
        {
            this.cleanupClosedInventSum(_dataContract);
        }
        else
        {
            this.cleanupClosedInventSumWithTrackingDim(_dataContract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cleans up the specified <c>InventSum</c> record.
    /// </summary>
    /// <param name="_inventSum">
    ///    The <c>InventSum</c> record to be cleaned up.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record associated with the <c>InventSum</c> record.
    /// </param>
    /// <returns>
    ///    true if <c>InventSum</c> record was cleaned up; otherwise, false.
    /// </returns>
    protected boolean cleanUpInventSum(InventSum _inventSum, InventDim _inventDim)
    {
        if (!this.validateInventSumDelete(_inventSum))
        {
            return false;
        }

        InventDimId nonTrackingInventDimId = this.lookupNonTrackingInventDimId(_inventDim);

        if (!this.isInventSumExisting(_inventSum.ItemId, nonTrackingInventDimId))
        {
            this.insertClosedInventSum(_inventSum.ItemId, nonTrackingInventDimId);
        }

        this.deleteInventSum(_inventSum);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupNonTrackingInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Looks up the the inventory dimension ID associated with an <c>InventDim</c> record matching the specified parameter,
    ///    but where no tracking dimension values are specified.
    /// </summary>
    /// <param name="_trackingInventDim">
    ///    The <c>InventDim</c> record containing tracking dimension values.
    /// </param>
    /// <returns>
    ///    An inventory dimension ID associated with an <c>InventDim</c> record without tracking dimension values.
    /// </returns>
    protected InventDimId lookupNonTrackingInventDimId(InventDim _trackingInventDim)
    {
        InventDim   nonTrackingInventDim;

        nonTrackingInventDim.data(_trackingInventDim);
        nonTrackingInventDim.clearTrackingDimensions();
        return InventDim::findOrCreate(nonTrackingInventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackingDimensionFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a list of tracking dimension field ids.
    /// </summary>
    /// <returns>
    ///    A <c>List</c> object containing all tracking dimension field ids.
    /// </returns>
    protected List trackingDimensionFieldList()
    {
        return EcoResTrackingDimGroupSetup::dimFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackingDimensionQueryExpression</Name>
				<Source><![CDATA[
    private str trackingDimensionQueryExpression()
    {
        ListEnumerator          dimFieldList = this.trackingDimensionFieldList().getEnumerator();
        str                     filterRange; 

        while (dimFieldList.moveNext())
        {
            FieldId dimFieldId = dimFieldList.current();

            if (!filterRange)
            {
                filterRange = '(';
            }
            else
            {
                filterRange += ' || ';
            }

            filterRange += this.buildDimFieldNotEmptyRangeStr(dimFieldId, InventDim::emptyDimField(dimFieldId));
        }

        if (!filterRange)
        {
            filterRange = '(1==0)';
        }
        else
        {
            filterRange += ')';
        }

        return filterRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimFieldNotEmptyRangeStr</Name>
				<Source><![CDATA[
    protected str buildDimFieldNotEmptyRangeStr(FieldId _fieldId, anytype _emptyValue)
    {
        if (typeof(_emptyValue) == Types::Real
            || typeof(_emptyValue) == Types::Integer
            || typeof(_emptyValue) == Types::Int64
            || typeof(_emptyValue) == Types::Enum)
        {
            return strFmt('(%1.%2 != %3)', TableStr(InventDim), fieldId2name(tableNum(InventDim), _fieldId), _emptyValue);
        }
        else
        {
            return strFmt('(%1.%2 != "%3")', TableStr(InventDim), fieldId2name(tableNum(InventDim), _fieldId), _emptyValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupClosedInventSum</Name>
				<Source><![CDATA[
    private void cleanupClosedInventSum(InventCleanupTrackingInventSumContract  _dataContract)
    {
        #OCCRetryCount

        int                     cleanupCounter = 0;

        Query query = new Query(SysOperationHelper::base64Decode(_dataContract.parmQuery()));

        this.addModifiedDateTimeFilter(query, _dataContract.parmDeleteWhenNotUpdatedForDays());

        query.dataSourceTable(tableNum(InventSum)).addGroupByAndSelectionField(fieldNum(InventSum, ItemId));

        SysOperationProgress progress = this.showProgress();

        try
        {
            QueryRun queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                InventSum inventSum = queryRun.get(tableNum(InventSum));
                InventSum deleteInventSum;
                ttsbegin;

                deleteInventSum.skipEvents(true);
                deleteInventSum.skipDataMethods(true);
                deleteInventSum.skipDeleteActions(true);
                deleteInventSum.skipDeleteMethod(true);

                delete_from deleteInventSum
                where deleteInventSum.ItemId == inventSum.itemId
                    && deleteInventSum.Closed == true;

                ttscommit;

                cleanupCounter += deleteInventSum.rowCount();
            }

            info(strFmt("@SYS4006018",cleanupCounter));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        progress.kill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupClosedInventSumWithTrackingDim</Name>
				<Source><![CDATA[
    private void cleanupClosedInventSumWithTrackingDim(InventCleanupTrackingInventSumContract  _dataContract)
    {
        #OCCRetryCount

        int                     cleanedUpInTransactionScope = 0;
        int                     cleanupCounter = 0;

        Query query = new Query(SysOperationHelper::base64Decode(_dataContract.parmQuery()));

        this.addTrackingDimensionFilter(query);
        this.addModifiedDateTimeFilter(query, _dataContract.parmDeleteWhenNotUpdatedForDays());

        SysOperationProgress progress = this.showProgress();

        try
        {
            QueryRun queryRun = new QueryRun(query);

            int initialTtsLevel = appl.ttsLevel();
            cleanedUpInTransactionScope = 0;

            while (queryRun.next())
            {
                InventSum inventSum = this.readInventSum(queryRun);
                InventDim inventDim = this.readInventDim(queryRun);

                if ((appl.ttsLevel() - initialTtsLevel) == 0)
                {
                    ttsbegin;
                }

                if (this.cleanUpInventSum(inventSum, inventDim))
                {
                    cleanedUpInTransactionScope++;
                }

                if (cleanedUpInTransactionScope         >= _dataContract.parmCommitSize() &&
                    (appl.ttsLevel() - initialTtsLevel) == 1)
                {
                    ttscommit;
                    cleanupCounter += cleanedUpInTransactionScope;
                    cleanedUpInTransactionScope = 0;
                    ttsbegin;
                }
            }

            if ((appl.ttsLevel() - initialTtsLevel) == 1)
            {
                ttscommit;
                cleanupCounter += cleanedUpInTransactionScope;
            }

            info(strFmt("@SYS4006018",cleanupCounter));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        progress.kill();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>