<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayVacationCompensationReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayVacationCompensationReport extends RunBaseBatch implements BatchRetryable
{
    StartDate                   startReportDate;
    EndDate                     endReportDate;
    RHRMVacationTypeId          hrmReportVacationTypeId;
    ComExcelDocument_RU         excelDocument;
    Query                       queryEmplTable;
    QueryRun                    queryRun;

    DialogField                 dialogStartDate, dialogEndDate, dialogVacationTypeId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        startReportDate,
        endReportDate,
        hrmReportVacationTypeId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        dialog.addGroup("@GLS109172");

        dialogStartDate = dialog.addFieldValue(ExtendedTypeStr(StartDate), startReportDate);
        dialogEndDate   = dialog.addFieldValue(ExtendedTypeStr(EndDate), endReportDate);

        dialog.addGroup("@RUP1497");

        dialogVacationTypeId = dialog.addFieldValue(ExtendedTypeStr(RHRMVacationTypeId), hrmReportVacationTypeId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    #define.FirstRow(7)
    #define.VacationType(5)
    #define.EmplRows(8)
    #define.maxBlocksOnPage(6)
    private void fillDocument()
    {
        RHRMEmplTable                 emplTable;
        RPayVacationDetermineTime payVacationDetermineTime;
        RHRMVacationType          rhrmVacationType;
        StartDate                 startDate;
        EndDate                   endDate;
        int                       skip, emplSkip, copyRowFrom, copyRowTo;
        int                       i, countBlocks;
        Set                       set;
        SetEnumerator             setEnumerator;
        container                 con;

        this.progressInit("@RUP2435", SysQuery::countTotal(queryRun), #AviUpdate);

        if (startReportDate)
        {
            excelDocument.insertValue('StartDate', startReportDate);
        }

        excelDocument.insertValue('EndDate', endReportDate);

        if (hrmReportVacationTypeId)
        {
            excelDocument.insertValue('VacationType', RHRMVacationType::find(hrmReportVacationTypeId).Description);
            excelDocument.deleteRow(#FirstRow + 1);
            emplSkip = 1;
        }
        else
        {
            excelDocument.deleteRow(#VacationType);
            excelDocument.deleteRow(#VacationType);
            skip = 2;
        }

        copyRowFrom = #FirstRow - skip;

        while (queryRun.next())
        {
            copyRowTo = copyRowFrom + #EmplRows - emplSkip;

            emplTable = queryRun.get(tablenum(RHRMEmplTable));
            progress.setText(strfmt("@SYS33611", emplTable.EmployeeId));
            progress.incCount();

            if (!emplTable.PayEmploymentDate)
            {
                continue;
            }

            startDate = max(emplTable.PayEmploymentDate, startReportDate);
            endDate   = min(emplTable.PayResignedDate == datenull() ? maxdate() : emplTable.PayResignedDate, endReportDate);

            if (startDate > endDate)
            {
                continue;
            }

            excelDocument.insertRows(copyRowFrom, copyRowTo, 1, copyRowTo - copyRowFrom + 1);
            excelDocument.insertValue(comExcelDocument_RU::numToNameCell(6, copyRowFrom), emplTable.name());

            copyRowFrom ++;

            while select rhrmVacationType
                where rhrmVacationType.DurationRate &&
                     (rhrmVacationType.VacationTypeId == hrmReportVacationTypeId ||
                      !hrmReportVacationTypeId)
            {
                if (countBlocks >= #maxBlocksOnPage)
                {
                    excelDocument.insertPageBreak(comExcelDocument_RU::numToNameCell(1, copyRowFrom - 1));
                    countBlocks = 0;
                }

                if (! hrmReportVacationTypeId)
                {
                    excelDocument.insertRows(copyRowFrom, copyRowTo, 1, copyRowTo - copyRowFrom + 1);
                    excelDocument.insertValue(comExcelDocument_RU::numToNameCell(11, copyRowFrom), RHRMVacationType::find(rhrmVacationType.VacationTypeId).Description);
                    copyRowFrom ++;
                }

                payVacationDetermineTime = new RPayVacationDetermineTime(emplTable.EmployeeId, startDate, endDate, rhrmVacationType.VacationTypeId);
                set = payVacationDetermineTime.calc();
                setEnumerator = set.getEnumerator();

                while (setEnumerator.moveNext())
                {
                    con = setEnumerator.current();
                    excelDocument.insertRows(copyRowFrom, copyRowTo, 1, copyRowTo - copyRowFrom + 1);
                    excelDocument.insertValue(comExcelDocument_RU::numToNameCell(11, copyRowFrom), conpeek(con,1));
                    excelDocument.insertValue(comExcelDocument_RU::numToNameCell(19, copyRowFrom), conpeek(con,2));
                    excelDocument.insertValue(comExcelDocument_RU::numToNameCell(32, copyRowFrom), conpeek(con,3));
                    excelDocument.insertValue(comExcelDocument_RU::numToNameCell(27, copyRowFrom + 1), conpeek(conpeek(con,5),1));
                    excelDocument.insertValue(comExcelDocument_RU::numToNameCell(27, copyRowFrom + 2), conpeek(conpeek(con,5),2));
                    excelDocument.insertValue(comExcelDocument_RU::numToNameCell(27, copyRowFrom + 3), conpeek(conpeek(con,5),3));
                    excelDocument.insertValue(comExcelDocument_RU::numToNameCell(27, copyRowFrom + 4), conpeek(conpeek(con,4),1));
                    excelDocument.insertValue(comExcelDocument_RU::numToNameCell(27, copyRowFrom + 5), conpeek(conpeek(con,4),2));

                    copyRowFrom = copyRowTo + 1;
                    copyRowTo   = copyRowFrom + #EmplRows - 2;
                    countBlocks ++;
                }

                setEnumerator.reset();

                if (setEnumerator.moveNext())
                {
                    for (i = 1; i <= #EmplRows - 1; i++)
                    {
                        excelDocument.deleteRow(copyRowFrom);
                        copyRowTo = copyRowFrom + #EmplRows - emplSkip - 1;
                    }
                }
                else
                {
                    copyRowFrom = copyRowTo + 1;
                    copyRowTo   = copyRowFrom + #EmplRows - emplSkip - 1;
                }
            }

            if (! hrmReportVacationTypeId)
            {
                for (i = 1; i <= #EmplRows - emplSkip; i++)
                {
                    excelDocument.deleteRow(copyRowFrom);
                }
            }
        }

        for (i = 1; i <= #EmplRows - emplSkip + 1; i++)
        {
            excelDocument.deleteRow(copyRowFrom);
        }

        excelDocument.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            startReportDate         = dialogStartDate.value();
            endReportDate           = dialogEndDate.value();
            hrmReportVacationTypeId = dialogVacationTypeId.value();

            endReportDate = endReportDate ? endReportDate : RPayParameters::PayPeriod();

            if (startReportDate > endReportDate)
            {
                ret = checkFailed("@RUP2338");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        Query                   query;

        super();

        query = new Query();

        qbd   = query.addDataSource(tablenum(RHRMEmplTable));
        qbr   = qbd.addRange(fieldnum(RHRMEmplTable,EmployeeId));

        queryRun   = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean makeDocument()
    {
        resourceNode rn = SysResource::getResourceNode(this.name());
        str templateFile;

        rn.AOTload();
        templateFile = SysResource::saveToTempFile(rn, false);
        if (!WinAPI::fileExists(templateFile))
        {
            return checkFailed(strfmt("@SYS60367", templateFile));
        }

        excelDocument = new ComExcelDocument_RU();

        if (! excelDocument.newFile(templateFile, false))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.makeDocument())
        {
            this.fillDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    // can not be run on server because displays ms office report
    public boolean runsImpersonated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conpeek(_packedClass,1);
        container   conQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, conQueryRun] = _packedClass;
                queryRun                            = new QueryRun(conQueryRun);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP2435";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayVacationCompensationReport payVacationCompensationReport = new RPayVacationCompensationReport();

        if (payVacationCompensationReport.prompt())
        {
            payVacationCompensationReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>