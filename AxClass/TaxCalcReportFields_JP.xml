<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalcReportFields_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the tax amount for report.
/// </summary>
class TaxCalcReportFields_JP extends RunBase implements TaxReportIParameters_JP
{
    TmpTaxReportById                    tmpTaxReportById;
    TaxReportByCode_JP                  taxReportByCode;
    TransDate                           fromDate;
    TransDate                           toDate;
    TaxPeriod                           tPeriod;
    TaxRepVersion                       taxRepVersion;
    TaxVersion                          taxRepCounter;
    TransDate                           taxDueDate;
    TransDate                           transDate;
    Voucher                             voucher;
    NoYes                               reImbursement;
    NoYes                               labelOrdering;
    NoYes                               paymentFormOrder;
    NoYes                               amendment;
    CompanyRegNum                       altRegNum;
    TaxReportField                      trField;
    Amount                              amount;
    IdentLabel                          identLabel;
    Phone                               phoneNumber;
    TeleFax                             faxNumber;
    CalcMethod_JP                       calcMethod;
    TypeOfDeclaration_JP                typeOfDeclaration;
    Apellative_JP                       apellative;
    LedgerBadDebtDimension_JP           ledgerBadDebtDim;
    LedgerCollectedBadDebtDimension_JP  ledgerCollectedBadDebtDim;
    container                           packList;
    Map                                 mapTaxValue;
    Map                                 mapTaxAmount;
    private boolean                     isSecondTaxRaise;

    #TaxReportingCodes_JP
    #COSNumbers
    #define.105(105)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSecondTaxRaise</Name>
				<Source><![CDATA[
    private void setSecondTaxRaise()
    {
        TransDate dateForSecondTaxRaise = TaxParameters::find().DateForSecondTaxRaise_JP;

        isSecondTaxRaise = dateForSecondTaxRaise != dateNull()
            && dateForSecondTaxRaise <= this.parmToDate()
            && dateForSecondTaxRaise >= this.parmFromDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalsAndRound</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate total amount and round it.
    /// </summary>
    /// <param name="_tmpTaxReportById">
    /// The value of variable _tmpTaxReportById.
    /// </param>
    protected void calcTotalsAndRound(TmpTaxReportById _tmpTaxReportById)
    {
        TaxAmount   amount_XX;
        Percent     nationalTaxPercent;
        str         taxAmountKey;

        mapTaxValue = new  Map(Types::Real, Types::Class);
        mapTaxAmount = new Map(Types::String, types::Real);

        while select sum(Amount) from _tmpTaxReportById
            group by TaxReportField, TaxValue_JP, TaxType_JP
        {
            nationalTaxPercent = this.getNewNationalTaxPercent(_tmpTaxReportById.TaxValue_JP, _tmpTaxReportById.TaxType_JP);

            if (this.isTaxBaseAmount(_tmpTaxReportById.TaxReportField))
            {
                this.insertInTaxReportByCodeAndType(_tmpTaxReportById.TaxReportField, _tmpTaxReportById.Amount, _tmpTaxReportById.TaxType_JP, 0, '', _tmpTaxReportById.TaxValue_JP);
            }
            else
            {
                container reportingCodesToLeaveUnchanged = [#field_8208, #field_8214, #field_8215, #field_7208, #field_7214, #field_7215, #field_8210, #field_7210];

                this.insertInTaxReportByCodeAndType(
                        _tmpTaxReportById.TaxReportField,
                        conFind(reportingCodesToLeaveUnchanged, _tmpTaxReportById.TaxReportField) ?
                            _tmpTaxReportById.Amount:
                            _tmpTaxReportById.Amount  * nationalTaxPercent,
                        _tmpTaxReportById.TaxType_JP,
                        0,
                        '',
                        _tmpTaxReportById.TaxValue_JP,
                        false);

                taxAmountKey = this.getTaxAmountKeyWithType(_tmpTaxReportById.TaxReportField, _tmpTaxReportById.TaxType_JP, _tmpTaxReportById.TaxValue_JP);

                if (mapTaxAmount.exists(taxAmountKey))
                {
                    mapTaxAmount.insert(taxAmountKey, mapTaxAmount.lookup(taxAmountKey) + _tmpTaxReportById.Amount);
                }
                else
                {
                    mapTaxAmount.insert(taxAmountKey, _tmpTaxReportById.Amount);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNationalTaxPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the national tax percent
    /// </summary>
    /// <param name = "_taxValue">
    /// Tax value on the tax trans
    /// </param>
    /// <param name = "_isSecondTaxRaise">
    /// Controls whether to use the national tax percent when tax value = 10
    /// </param>
    /// <returns>The national tax percent</returns>
    public Percent getNationalTaxPercent(TaxValue _taxValue, boolean _isSecondTaxRaise)
    {
        Percent nationalTaxPercent;

        switch (real2int(_taxValue))
        {
            case 3:
                nationalTaxPercent = 1;
                break;

            case 5:
                nationalTaxPercent = 4/5;
                break;

            case 8:
                nationalTaxPercent = 6.3/8;
                break;

            case 10:
                if (_isSecondTaxRaise)
                {
                    nationalTaxPercent = 7.8/10;
                }
                break;
        }

        return nationalTaxPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewNationalTaxPercent</Name>
				<Source><![CDATA[
    private Percent getNewNationalTaxPercent(TaxValue _taxValue, TaxType_JP _taxType)
    {
        Percent nationalTaxPercent;

        switch (real2int(_taxValue))
        {
            case 3:
                nationalTaxPercent = 1;
                break;

            case 5:
                nationalTaxPercent = 4/5;
                break;

            case 8:
                if (_taxType == TaxType_JP::Reduced)
                {
                    nationalTaxPercent = 6.24/8;
                    break;
                }
                else
                {
                    nationalTaxPercent = 6.3/8;
                    break;
                }

            case 10:
                nationalTaxPercent = 7.8/10;
                break;
        }

        return nationalTaxPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// To distinguish the tax base amount by report Id
    /// </summary>
    /// <param name = "_taxReportField">
    /// Reporting code on the sales tax reporting codes
    /// </param>
    /// <returns>The yes or no</returns>
    public boolean isTaxBaseAmount(TaxReportField _taxReportField)
    {
        TaxTable taxTable;

        select firstonly RecId from taxTable
            where taxTable.RepFieldBaseOutgoing             == _taxReportField
                || taxTable.RepFieldBaseIncoming            == _taxReportField
                || taxTable.RepFieldBaseOutgoingCreditNote  == _taxReportField
                || taxTable.RepFieldBaseIncomingCreditNote  == _taxReportField
                || taxTable.RepFieldTaxFreeSales            == _taxReportField
                || taxTable.RepFieldBaseUseTax              == _taxReportField;

        return taxTable.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the key of map: TaxReportField - TaxValue
    /// </summary>
    /// <param name = "_taxReportField">
    /// Tax report field
    /// </param>
    /// <param name = "_taxValue">
    /// Tax value
    /// </param>
    /// <returns>The key of map: TaxReportField - TaxValue</returns>
    public str getTaxAmountKey(TaxReportField _taxReportField, TaxValue _taxValue)
    {
        return strFmt("%1 - %2", _taxReportField, _taxValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountKeyWithType</Name>
				<Source><![CDATA[
    private str getTaxAmountKeyWithType(TaxReportField _taxReportField, TaxType_JP _taxType, TaxValue _taxValue)
    {
        return strFmt("%1 - %2 - %3", _taxReportField, _taxType, _taxValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTaxReportByCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update taxReportByCode record.
    /// </summary>
    /// <param name="_field">
    /// The value of variable _field.
    /// </param>
    /// <param name="_amount">
    /// Amount value.
    /// </param>
    /// <param name="_taxInCostPrice">
    /// The value of variable _taxInCostPrice.
    /// </param>
    /// <param name="_txt">
    /// A string.
    /// </param>
    /// <param name="_taxValue">
    /// Tax value.
    /// </param>
    /// <param name= "_isBaseAmount">
    /// Is this base amount; otherwise amount will be added.
    /// </param>
    [SysObsolete('This method is no longer used.', false, 24\06\2024)]
    protected void insertInTaxReportByCode(
        TaxReportField   _field,
        TaxAmount        _amount,
        TaxAmount        _taxInCostPrice = 0,
        str              _txt = '',
        TaxValue         _taxValue = 0,
        boolean          _isBaseAmount = true)
    {
        ttsbegin;
        select firstonly forupdate taxReportByCode
            where taxReportByCode.SettlementPeriod == tPeriod
                && taxReportByCode.PeriodOfTaxationFrom == fromDate
                && taxReportByCode.PeriodOfTaxationTo == toDate
                && taxReportByCode.TypeOfDeclaration == typeOfDeclaration
                && taxReportByCode.TaxReportField == _field
                && taxReportByCode.TaxValue == _taxValue;

        if (taxReportByCode)
        {
            if (_isBaseAmount)
            {
                taxReportByCode.TaxAmount = real2int(abs(_amount));
            }
            else
            {
                taxReportByCode.TaxAmount += real2int(abs(_amount));
            }
            taxReportByCode.TaxInCostPriceAmount = _taxInCostPrice;
            if (amendment)
            {
                taxReportByCode.Version = NoYes::Yes;
            }
        }
        else
        {
            taxReportByCode.PeriodOfTaxationFrom = this.parmFromDate();
            taxReportByCode.PeriodOfTaxationTo   = this.parmToDate();
            taxReportByCode.SettlementPeriod     = this.parmTaxPeriod();
            taxReportByCode.CalcMethod           = this.parmCalcMethod();
            taxReportByCode.TypeOfDeclaration    = this.parmTypeOfDeclaration();
            taxReportByCode.Apellative           = CompanyInfo::find().CompanyRepresentative_JP;
            taxReportByCode.TaxReportField       = _field;
            taxReportByCode.TaxReportLayout      = TaxReportLayout::Japan;
            taxReportByCode.TaxAmount            = real2int(abs(_amount));
            taxReportByCode.TaxInCostPriceAmount = _taxInCostPrice;
            taxReportByCode.TaxValue             = _taxValue;

            if (amendment)
            {
                taxReportByCode.Version = NoYes::Yes;
            }
        }
        
        taxReportByCode.write();
        ttscommit;
        Map mapTaxReportFieldAmount = new Map(Types::Integer, Types::Real);

        if (mapTaxValue.exists(taxReportByCode.TaxValue))
        {
            mapTaxReportFieldAmount = mapTaxValue.lookup(taxReportByCode.TaxValue);
        }

        mapTaxReportFieldAmount.insert(taxReportByCode.TaxReportField, taxReportByCode.TaxAmount);
        mapTaxValue.insert(taxReportByCode.TaxValue, mapTaxReportFieldAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTaxReportByCodeAndType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record on the <c>TaxReportByCode_JP</c> table.
    /// </summary>
    /// <param name="_field">
    /// The value of variable _field.
    /// </param>
    /// <param name="_amount">
    /// Amount value.
    /// </param>
    /// <param name = "_taxType">
    /// Consumption tax type.
    /// </param>
    /// <param name="_taxInCostPrice">
    /// The value of variable _taxInCostPrice.
    /// </param>
    /// <param name="_txt">
    /// A string.
    /// </param>
    /// <param name="_taxValue">
    /// Tax value.
    /// </param>
    /// <param name = "_isBaseAmount">
    /// Is this base amount; otherwise amount will be added.
    /// </param>
    protected void insertInTaxReportByCodeAndType(
        TaxReportField   _field,
        TaxAmount        _amount,
        TaxType_JP       _taxType,
        TaxAmount        _taxInCostPrice = 0,
        str              _txt = '',
        TaxValue         _taxValue = 0,
        boolean          _isBaseAmount = true)
    {
        ttsbegin;
        select firstonly forupdate taxReportByCode
            where taxReportByCode.SettlementPeriod == tPeriod
                && taxReportByCode.PeriodOfTaxationFrom == fromDate
                && taxReportByCode.PeriodOfTaxationTo == toDate
                && taxReportByCode.TypeOfDeclaration == typeOfDeclaration
                && taxReportByCode.TaxReportField == _field
                && taxReportByCode.TaxValue == _taxValue
                && taxReportByCode.TaxType == _taxType;

        if (taxReportByCode)
        {
            if (_isBaseAmount)
            {
                taxReportByCode.TaxAmount = real2int(abs(_amount));
            }
            else
            {
                taxReportByCode.TaxAmount += real2int(abs(_amount));
            }
            taxReportByCode.TaxInCostPriceAmount = _taxInCostPrice;
            if (amendment)
            {
                taxReportByCode.Version = NoYes::Yes;
            }
        }
        else
        {
            taxReportByCode.PeriodOfTaxationFrom = this.parmFromDate();
            taxReportByCode.PeriodOfTaxationTo   = this.parmToDate();
            taxReportByCode.SettlementPeriod     = this.parmTaxPeriod();
            taxReportByCode.CalcMethod           = this.parmCalcMethod();
            taxReportByCode.TypeOfDeclaration    = this.parmTypeOfDeclaration();
            taxReportByCode.Apellative           = CompanyInfo::find().CompanyRepresentative_JP;
            taxReportByCode.TaxReportField       = _field;
            taxReportByCode.TaxReportLayout      = TaxReportLayout::Japan;
            taxReportByCode.TaxAmount            = real2int(abs(_amount));
            taxReportByCode.TaxInCostPriceAmount = _taxInCostPrice;
            taxReportByCode.TaxValue             = _taxValue;
            taxReportByCode.TaxType              = _taxType;

            if (amendment)
            {
                taxReportByCode.Version = NoYes::Yes;
            }
        }

        taxReportByCode.write();
        ttscommit;
        Map mapTaxReportFieldAmount = new Map(Types::Integer, Types::Real);
        Map mapTaxType = new Map(Types::Enum, Types::Class);

        if (mapTaxValue.exists(taxReportByCode.TaxValue))
        {
            mapTaxType = mapTaxValue.lookup(taxReportByCode.TaxValue);

            if (mapTaxType.exists(taxReportByCode.TaxType))
            {
                mapTaxReportFieldAmount = mapTaxType.lookup(taxReportByCode.TaxType);
            }
        }

        mapTaxReportFieldAmount.insert(taxReportByCode.TaxReportField, taxReportByCode.TaxAmount);
        mapTaxType.insert(taxReportByCode.TaxType, mapTaxReportFieldAmount);
        mapTaxValue.insert(taxReportByCode.TaxValue, mapTaxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntaxReportByCode_BadDebt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Update taxReportByCode record.
    /// </summary>
    /// <param name="_fromDate">
    /// The value of variable _fromDate.
    /// </param>
    /// <param name="_toDate">
    /// The value of variable _toDate.
    /// </param>
    /// <param name="_taxPeriod">
    /// Tax period.
    /// </param>
    protected void insertIntaxReportByCode_BadDebt(FromDate     _fromDate,
                                                   ToDate       _toDate,
                                                   TaxPeriod    _taxPeriod)
    {
        TaxTrans            taxTrans;
        LedgerJournalTrans  ledgerJournalTrans;
        AmountCur           amountCredit;
        AmountCur           amountDebit;
        AmountCur           difference;
        LedgerAccount       badDebtAccount;
        LedgerAccount       collectedBadDebtAccount;
        TaxTransGeneralJournalAccountEntry  taxTransGeneralJournalAccountEntry;
        DimensionAttributeValueCombination  dimAttrValueCombo;
        MainAccount                         mainAccount;

        void insertLedgerBadDebtDimension(LedgerBadDebtDimension_JP _ledgerDimension, TaxAmount taxAmount)
        {
            select forupdate taxReportByCode
                where taxReportByCode.BadDebtLedgerDimension == _ledgerDimension;

            if (taxReportByCode)
            {
                taxReportByCode.TaxAmount = real2int(abs(taxAmount));

                if (amendment)
                {
                    taxReportByCode.Version = NoYes::Yes;
                }

                taxReportByCode.update();
            }
            else
            {
                taxReportByCode.PeriodOfTaxationFrom   = this.parmFromDate();
                taxReportByCode.PeriodOfTaxationTo     = this.parmToDate();
                taxReportByCode.SettlementPeriod       = this.parmTaxPeriod();
                taxReportByCode.CalcMethod             = this.parmCalcMethod();
                taxReportByCode.TypeOfDeclaration      = this.parmTypeOfDeclaration();
                taxReportByCode.Apellative             = CompanyInfo::find().CompanyRepresentative_JP;
                taxReportByCode.BadDebtLedgerDimension = _ledgerDimension;
                taxReportByCode.TaxAmount              = real2int(abs(taxAmount));

                if (amendment)
                {
                    taxReportByCode.Version = NoYes::Yes;
                }

                taxReportByCode.insert();
            }
        }

        void insertLedgerCollectedBadDebtDimension(LedgerCollectedBadDebtDimension_JP _ledgerDimension, TaxAmount taxAmount)
        {
            select forupdate taxReportByCode
                where taxReportByCode.CollectedBadDebtLedgerDimension == _ledgerDimension;

            if (taxReportByCode)
            {
                taxReportByCode.TaxAmount           = real2int(abs(taxAmount));

                if (amendment)
                {
                    taxReportByCode.Version = NoYes::Yes;
                }

                taxReportByCode.update();
            }
            else
            {
                taxReportByCode.PeriodOfTaxationFrom            = this.parmFromDate();
                taxReportByCode.PeriodOfTaxationTo              = this.parmToDate();
                taxReportByCode.SettlementPeriod                = this.parmTaxPeriod();
                taxReportByCode.CalcMethod                      = this.parmCalcMethod();
                taxReportByCode.TypeOfDeclaration               = this.parmTypeOfDeclaration();
                taxReportByCode.Apellative                      = CompanyInfo::find().CompanyRepresentative_JP;
                taxReportByCode.CollectedBadDebtLedgerDimension = _ledgerDimension;
                taxReportByCode.TaxAmount                       = real2int(abs(taxAmount));

                if (amendment)
                {
                    taxReportByCode.Version = NoYes::Yes;
                }

                taxReportByCode.insert();
            }
        }
        ;

        ttsbegin;
        // Bad Debt
        badDebtAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerBadDebtDim);

        select sum(TaxBaseAmount)
            from taxTrans
                where taxTrans.TransDate        >= _fromDate
                    && taxTrans.TransDate        <= _toDate
                    && taxTrans.TaxPeriod        == _taxPeriod
        join taxTransGeneralJournalAccountEntry
            where taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                && taxTrans.TaxTransRefRecId == taxTransGeneralJournalAccountEntry.LedgerDimension;

        if (taxTrans.TaxBaseAmount)
        {
            insertLedgerBadDebtDimension(ledgerBadDebtDim,taxTrans.TaxBaseAmount);
        }

        select sum(AmountCurDebit), sum(AmountCurCredit)
            from ledgerJournalTrans
                where ledgerJournalTrans.TransDate  >= _fromDate
                    && ledgerJournalTrans.TransDate <= _toDate
                join MainAccount from dimAttrValueCombo
                    where dimAttrValueCombo.RecId   == ledgerJournalTrans.LedgerDimension
                    exists join mainAccount
                        where mainAccount.RecId             == dimAttrValueCombo.MainAccount
                            && mainAccount.MainAccountId    == badDebtAccount;

        if (ledgerJournalTrans.AmountCurDebit)
        {
            amountDebit = ledgerJournalTrans.AmountCurDebit;
        }

        if (ledgerJournalTrans.AmountCurCredit)
        {
            amountCredit = ledgerJournalTrans.AmountCurCredit;
        }

        select sum(AmountCurDebit), sum(AmountCurCredit)
            from ledgerJournalTrans
                where ledgerJournalTrans.TransDate  >= _fromDate
                    && ledgerJournalTrans.TransDate <= _toDate
                join MainAccount from dimAttrValueCombo
                    where dimAttrValueCombo.RecId   == ledgerJournalTrans.OffsetLedgerDimension
                    exists join mainAccount
                        where mainAccount.RecId             == dimAttrValueCombo.MainAccount
                            && mainAccount.MainAccountId    == badDebtAccount;

        if (ledgerJournalTrans.AmountCurCredit)
        {
            amountDebit += ledgerJournalTrans.AmountCurCredit;
        }

        if (ledgerJournalTrans.AmountCurDebit)
        {
            amountCredit += ledgerJournalTrans.AmountCurDebit;
        }

        difference = ((amountDebit > amountCredit)
                        ? (amountDebit - amountCredit)
                        : (amountCredit - amountDebit));

        insertLedgerBadDebtDimension(ledgerBadDebtDim,difference);

        amountCredit = 0;
        amountDebit  = 0;
        difference   = 0;

        // CollectedBadDebt
        collectedBadDebtAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerCollectedBadDebtDim);

        select sum(TaxBaseAmount)
            from taxTrans
                where taxTrans.TransDate       >= _fromDate
                    && taxTrans.TransDate       <= _toDate
                    && taxTrans.TaxPeriod       == _taxPeriod
        join taxTransGeneralJournalAccountEntry
            where taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                && taxTrans.TaxTransRefRecId == taxTransGeneralJournalAccountEntry.LedgerDimension;

        if (taxTrans.TaxBaseAmount)
        {
            insertLedgerCollectedBadDebtDimension(ledgerCollectedBadDebtDim,taxTrans.TaxBaseAmount);
        }

        select sum(AmountCurDebit), sum(AmountCurCredit)
            from ledgerJournalTrans
                where ledgerJournalTrans.TransDate  >= _fromDate
                    && ledgerJournalTrans.TransDate <= _toDate
                join MainAccount from dimAttrValueCombo
                    where dimAttrValueCombo.RecId   == ledgerJournalTrans.LedgerDimension
                    exists join mainAccount
                        where mainAccount.RecId             == dimAttrValueCombo.MainAccount
                            && mainAccount.MainAccountId    == collectedBadDebtAccount;

        if (ledgerJournalTrans.AmountCurDebit)
        {
            amountDebit = ledgerJournalTrans.AmountCurDebit;
        }

        if (ledgerJournalTrans.AmountCurCredit)
        {
            amountCredit = ledgerJournalTrans.AmountCurCredit;
        }

        select sum(AmountCurCredit), sum(AmountCurDebit)
            from ledgerJournalTrans
                where ledgerJournalTrans.TransDate  >= _fromDate
                    && ledgerJournalTrans.TransDate <= _toDate
                join MainAccount from dimAttrValueCombo
                    where dimAttrValueCombo.RecId   == ledgerJournalTrans.OffsetLedgerDimension
                    exists join mainAccount
                        where mainAccount.RecId             == dimAttrValueCombo.MainAccount
                            && mainAccount.MainAccountId    == collectedBadDebtAccount;

        if (ledgerJournalTrans.AmountCurCredit)
        {
            amountDebit += ledgerJournalTrans.AmountCurCredit;
        }

        if (ledgerJournalTrans.AmountCurDebit)
        {
            amountCredit += ledgerJournalTrans.AmountCurDebit;
        }

        difference = ((amountDebit > amountCredit)
                        ? (amountDebit - amountCredit)
                        : (amountCredit - amountDebit));

        insertLedgerCollectedBadDebtDimension(ledgerCollectedBadDebtDim,difference);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportById</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Update tmpTaxReportById record.
    /// </summary>
    /// <param name="_field">
    /// The value of variable _field.
    /// </param>
    /// <param name="_taxAmount">
    /// Amount value.
    /// </param>
    /// <param name="_taxInCostPrice">
    /// The value of variable _taxInCostPrice.
    /// </param>
    /// <param name="_txt">
    /// A string.
    /// </param>
    protected void insertInTmpTaxReportById(TaxReportField _field,
                                            TaxAmount      _taxAmount,
                                            TaxAmount      _taxInCostPrice = 0,
                                            str            _txt = '')
    {
        select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == _field;

        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount         += _taxAmount;
            tmpTaxReportById.TaxInCostPrice += _taxInCostPrice;
            tmpTaxReportById.update();
        }
        else
        {
            tmpTaxReportById.TaxReportField = _field;
            tmpTaxReportById.Amount         = _taxAmount;
            tmpTaxReportById.TaxInCostPrice = _taxInCostPrice;
            tmpTaxReportById.Description    = _txt;
            tmpTaxReportById.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionTaxItemsMultiplier</Name>
				<Source><![CDATA[
    private Percent getConsumptionTaxItemsMultiplier(TaxValue _taxvalue, TaxType_JP _taxType)
    {
        Percent percent;
        switch (real2int(_taxValue))
        {
            case 3:
                percent = 3/103;
                break;

            case 5:
                percent = 4/105;
                break;

            case 8:
                if (_taxType == TaxType_JP::Reduced)
                {
                    percent = 6.24/108;
                    break;
                }
                else
                {
                    percent = 6.3/108;
                    break;
                }

            case 10:
                percent = 7.8/110;
                break;
        }
        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateInConsTaxCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the record of the table <c>LedgerConsumptionTaxCalcTrans_JP</c> table.
    /// </summary>
    /// <param name="_fDate">
    /// From date.
    /// </param>
    /// <param name="_tDate">
    /// To date.
    /// </param>
    /// <param name="_tPeriod">
    /// Tax period.
    /// </param>
    /// <param name="_typeOfDeclaration">
    /// The type of declaration.
    /// </param>
    /// <param name="_calcMethod">
    /// Calcualation method.
    /// </param>
    /// <param name="_cpName">
    /// Apellative.
    /// </param>
    public void insertOrUpdateInConsTaxCalc(
        FromDate             _fDate,
        ToDate               _tDate,
        TaxPeriod            _tPeriod,
        TypeOfDeclaration_JP _typeOfDeclaration,
        CalcMethod_JP        _calcMethod,
        Name                 _cpName)
    {
        TaxReportByCode_JP                  taxReportByCode_JPCopy;
        LedgerConsumptionTaxCalcTrans_JP    consTaxCalcCopy;
        real                                amount1;
        real                                amount202;
        real                                amount203;
        real                                amount206;
        real                                amount208;
        real                                amount210;
        real                                amount214;
        real                                amount215;
        real                                amount7001;
        real                                amount7208;
        real                                amount7210;
        real                                amount7214;
        real                                amount7215;
        real                                amount8001;
        real                                amount8208;
        real                                amount8210;
        real                                amount8214;
        real                                amount8215;
        real                                amount8310;
        real                                amount9001;
        real                                amount9202;
        real                                amount9203;
        real                                amount9206;
        real                                amount9208;
        real                                amount9210;
        real                                amount9214;
        real                                amount9215;
        real                                amount90081;
        real                                ratioOfTaxableSales;
        TaxValue                            taxValue;
        TaxType_JP                          taxType;
        MapEnumerator                       mapEnumeratorTaxValue;
        MapEnumerator                       mapEnumeratorTaxType;
        MapEnumerator                       mapEnumeratorTaxReportFieldAmount;
        Map                                 mapTaxType;
        Map                                 mapTaxReportFieldAmount;

        void initReportFieldAmount(TaxReportField _taxReportField, TaxAmount _taxAmount)
        {
            switch (_taxReportField)
            {
                case #field_1:
                    amount1 = _taxAmount;
                    break;

                case #field_202:
                    amount202 = _taxAmount;
                    break;

                case #field_203:
                    amount203 = _taxAmount;
                    break;

                case #field_206:
                    amount206 = _taxAmount;
                    break;

                case #field_208:
                    amount208 = _taxAmount;
                    break;

                case #field_210:
                    amount210 = _taxAmount;
                    break;

                case #field_214:
                    amount214 = _taxAmount;
                    break;

                case #field_215:
                    amount215 = _taxAmount;
                    break;

                case #field_7001:
                    amount7001 = _taxAmount;
                    break;

                case #field_7208:
                    amount7208 = _taxAmount;
                    break;

                case #field_7210:
                    amount7210 = _taxAmount;
                    break;

                case #field_7214:
                    amount7214 = _taxAmount;
                    break;

                case #field_7215:
                    amount7215 = _taxAmount;
                    break;

                case #field_8001:
                    amount8001 = _taxAmount;
                    break;

                case #field_8208:
                    amount8208 = _taxAmount;
                    break;

                case #field_8210:
                    amount8210 = _taxAmount;
                    break;

                case #field_8214:
                    amount8214 = _taxAmount;
                    break;

                case #field_8215:
                    amount8215 = _taxAmount;
                    break;

                case #field_8310:
                    amount8310 = _taxAmount;
                    break;

                case #field_9001:
                    amount9001 = _taxAmount;
                    break;

                case #field_9202:
                    amount9202 = _taxAmount;
                    break;

                case #field_9203:
                    amount9203 = _taxAmount;
                    break;

                case #field_9206:
                    amount9206 = _taxAmount;
                    break;

                case #field_9208:
                    amount9208 = _taxAmount;
                    break;

                case #field_9210:
                    amount9210 = _taxAmount;
                    break;

                case #field_9214:
                    amount9214 = _taxAmount;
                    break;

                case #field_9215:
                    amount9215 = _taxAmount;
                    break;
            }
        }
        void initReportFieldAmounts()
        {
            mapEnumeratorTaxReportFieldAmount = mapTaxReportFieldAmount.getEnumerator();
            while (mapEnumeratorTaxReportFieldAmount.moveNext())
            {
                initReportFieldAmount(mapEnumeratorTaxReportFieldAmount.currentKey(), mapEnumeratorTaxReportFieldAmount.currentValue());
            }
        }

        void initTaxCalcItems()
        {
            select firstonly forupdate consTaxCalcCopy
                where consTaxCalcCopy.PeriodOfTaxationFrom  == _fDate
                    && consTaxCalcCopy.PeriodOfTaxationTo   == _tDate
                    && consTaxCalcCopy.SettlementPeriod     == _tPeriod
                    && consTaxCalcCopy.TypeOfDeclaration    == _typeOfDeclaration
                    && consTaxCalcCopy.TaxType              == taxType
                    && consTaxCalcCopy.TaxValue             == taxValue
                    && consTaxCalcCopy.DataLayout == '';

            if (!consTaxCalcCopy)
            {
                consTaxCalcCopy.PeriodOfTaxationFrom = _fDate;
                consTaxCalcCopy.PeriodOfTaxationTo   = _tDate;
                consTaxCalcCopy.SettlementPeriod     = _tPeriod;
                consTaxCalcCopy.TypeOfDeclaration    = _typeOfDeclaration;
                consTaxCalcCopy.CalcMethod           = _calcMethod;
                consTaxCalcCopy.Apellative           = _cpName;
                consTaxCalcCopy.TaxValue             = taxValue;
            }

            if (amendment)
            {
                consTaxCalcCopy.CalcMethod = _calcMethod;
                consTaxCalcCopy.Modified   = NoYes::No;
                consTaxCalcCopy.CalcItem6  = 0;
                consTaxCalcCopy.CalcItem11 = 0;
                consTaxCalcCopy.CalcItem18 = 0;
                consTaxCalcCopy.CalcItem19 = 0;
            }

            if (! amendment
                && consTaxCalcCopy.Version < TaxRepVersion::Latest)
            {
                consTaxCalcCopy.Apellative = _cpName;
            }

            consTaxCalcCopy.CalcItem1 = real2int(amount1 - amount9001);
            consTaxCalcCopy.CalcItem2 = amount202;
            consTaxCalcCopy.CalcItem3 = amount203;
            consTaxCalcCopy.CalcItem4 = consTaxCalcCopy.CalcItem1 + consTaxCalcCopy.CalcItem2 + consTaxCalcCopy.CalcItem3;
            consTaxCalcCopy.CalcItem5 = consTaxCalcCopy.CalcItem4;
            consTaxCalcCopy.CalcItem6 = consTaxCalcCopy.Modified
                ? consTaxCalcCopy.CalcItem6
                : amount206;
            consTaxCalcCopy.CalcItem7 = consTaxCalcCopy.CalcItem5 + consTaxCalcCopy.CalcItem6;

            if (consTaxCalcCopy.CalcItem7)
            {
                ratioOfTaxableSales = consTaxCalcCopy.CalcItem4 / consTaxCalcCopy.CalcItem7;
                ratioOfTaxableSales = round(ratioOfTaxableSales, 0.01);
            }
            else
            {
                ratioOfTaxableSales = 0.0;
            }

            consTaxCalcCopy.RatioOfTaxableSales = ratioOfTaxableSales;
        }

        void fillCalcItemsWithType()
        {
            consTaxCalcCopy.CalcItem8 = real2int(((amount208 + amount214 + amount215 + amount8208 + amount8214 + amount8215)
                                              - (amount9208 + amount9214 + amount9215 + amount7208 + amount7214 + amount7215)));

            Percent localPercentMultiplyer = this.getConsumptionTaxItemsMultiplier(taxValue, taxType);

            consTaxCalcCopy.CalcItem9 = real2int(consTaxCalcCopy.CalcItem8 * localPercentMultiplyer);
            consTaxCalcCopy.CalcItem10 = real2int(((amount210 + amount8210) - (amount9210 + amount7210)) * localPercentMultiplyer);
            consTaxCalcCopy.CalcItem12 = consTaxCalcCopy.CalcItem9 + consTaxCalcCopy.CalcItem10 + consTaxCalcCopy.CalcItem11;
            consTaxCalcCopy.CalcItem13 = consTaxCalcCopy.RatioOfTaxableSales >= 0.95 ? consTaxCalcCopy.CalcItem12 : 0.0;

            if (consTaxCalcCopy.RatioOfTaxableSales < 0.95)
            {
                if (_calcMethod == CalcMethod_JP::IndividualMethod)
                {
                    consTaxCalcCopy.CalcItem14 = real2int(((amount208 + amount8208) - (amount9208 + amount7208)) * localPercentMultiplyer);
                    consTaxCalcCopy.CalcItem15 = real2int(((amount215 + amount8215) - (amount9215 + amount7215)) * localPercentMultiplyer);
                    consTaxCalcCopy.CalcItem16 = consTaxCalcCopy.CalcItem14 + real2int(consTaxCalcCopy.CalcItem15 * ratioOfTaxableSales);
                    consTaxCalcCopy.CalcItem17 = 0;
                }
                else
                {
                    consTaxCalcCopy.CalcItem14 = 0;
                    consTaxCalcCopy.CalcItem15 = 0;
                    consTaxCalcCopy.CalcItem16 = 0;
                    consTaxCalcCopy.CalcItem17 = real2int(consTaxCalcCopy.CalcItem12 * ratioOfTaxableSales);
                }
            }
            else
            {
                consTaxCalcCopy.CalcItem14 = 0;
                consTaxCalcCopy.CalcItem15 = 0;
                consTaxCalcCopy.CalcItem16 = 0;
                consTaxCalcCopy.CalcItem17 = 0;
            }

            consTaxCalcCopy.CalcItem20 = (consTaxCalcCopy.RatioOfTaxableSales >= 0.95)
                                     ? (consTaxCalcCopy.CalcItem13 + consTaxCalcCopy.CalcItem18 + consTaxCalcCopy.CalcItem19)
                                     : ((consTaxCalcCopy.RatioOfTaxableSales < 0.95 && consTaxCalcCopy.CalcMethod == CalcMethod_JP::IndividualMethod)
                                     ? (consTaxCalcCopy.CalcItem16 + consTaxCalcCopy.CalcItem18 + consTaxCalcCopy.CalcItem19)
                                     : (consTaxCalcCopy.CalcItem17 + consTaxCalcCopy.CalcItem18 + consTaxCalcCopy.CalcItem19));

            if (consTaxCalcCopy.CalcItem20 < 0.0)
            {
                consTaxCalcCopy.CalcItem21 = abs(consTaxCalcCopy.CalcItem20);
                consTaxCalcCopy.CalcItem20 = 0.0;
            }
            else
            {
                consTaxCalcCopy.CalcItem21 = 0;
            }

            if (taxType != TaxType_JP::Reduced && taxValue == 8)
            {
                consTaxCalcCopy.CalcItem22 = amount8310
                    ? amount8310
                    : real2int((amount90081) * localPercentMultiplyer);
            }

            consTaxCalcCopy.TaxType = taxType;
        }

        void reset()
        {
            amount1 = 0;
            amount202 = 0;
            amount203 = 0;
            amount206 = 0;
            amount208 = 0;
            amount210 = 0;
            amount214 = 0;
            amount215 = 0;
            amount7001 = 0;
            amount7208 = 0;
            amount7210 = 0;
            amount7214 = 0;
            amount7215 = 0;
            amount8001 = 0;
            amount8208 = 0;
            amount8210 = 0;
            amount8214 = 0;
            amount8215 = 0;
            amount9001 = 0;
            amount9202 = 0;
            amount9203 = 0;
            amount9206 = 0;
            amount9208 = 0;
            amount9210 = 0;
            amount9214 = 0;
            amount9215 = 0;
            consTaxCalcCopy.clear();
        }

        select sum(TaxAmount) from taxReportByCode_JPCopy
             where taxReportByCode_JPCopy.CollectedBadDebtLedgerDimension == ledgerCollectedBadDebtDim;

        if (taxReportByCode_JPCopy)
        {
            amount90081 = taxReportByCode_JPCopy.TaxAmount;
        }

        if (mapTaxValue)
        {
            mapEnumeratorTaxValue = mapTaxValue.getEnumerator();
        }
        else
        {
            return;
        }

        while (mapEnumeratorTaxValue.moveNext())
        {
            
            taxValue = mapEnumeratorTaxValue.currentKey();

            ttsbegin;
            if (mapEnumeratorTaxValue.currentValue())
            {
                mapTaxType = mapEnumeratorTaxValue.currentValue();
                mapEnumeratorTaxType = mapTaxType.getEnumerator();
                while (mapEnumeratorTaxType.moveNext())
                {
                    taxType = mapEnumeratorTaxType.currentKey();
                    mapTaxReportFieldAmount = mapEnumeratorTaxType.currentValue();
                    reset();
                    initReportFieldAmounts();
                    initTaxCalcItems();

                    fillCalcItemsWithType();

                    consTaxCalcCopy.write();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateInConsTaxReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the record of the <c>LedgerConsumptionTaxReportTrans_JP</c> table.
    /// </summary>
    /// <param name="_fDate">
    /// From date.
    /// </param>
    /// <param name="_tDate">
    /// To date.
    /// </param>
    /// <param name="_tPeriod">
    /// Tax period.
    /// </param>
    /// <param name="_typeOfDeclaration">
    /// the type of declaration.
    /// </param>
    /// <param name="_calcMethod">
    /// Calcualation method.
    /// </param>
    /// <param name="_cpName">
    /// Apellative.
    /// </param>
    public void insertOrUpdateInConsTaxReport(
        FromDate              _fDate,
        ToDate                _tDate,
        TaxPeriod             _tPeriod,
        TypeOfDeclaration_JP  _typeOfDeclaration,
        CalcMethod_JP         _calcMethod,
        Name                  _cpName)
    {
        real                                amount1;
        real                                amount7001;
        real                                amount8001;
        real                                amount9001;
        real                                amount90080;
        real                                amount8208;
        real                                amount208;
        real                                tmpItem1;
        real                                tmpItem1a;
        real                                tmpItem9;
        TaxReportByCode_JP                  taxReportByCodeCopy;
        LedgerConsumptionTaxReportTrans_JP  consTaxReportCopy;
        LedgerConsumptionTaxCalcTrans_JP    consTaxCalcRep;
        LedgerConsumptionTaxCalcTrans_JP    consTaxCalc;
        TaxJurisdiction                     taxJuri;
        CompanyInfo                         companyInfo;
        TaxValue                            taxValue;
        TaxType_JP                          taxType;
        TaxAmount                           taxAmount;
        str                                 taxAmountKey;
        Map                                 mapTaxType;
        Map                                 mapTaxReportFieldAmount;
        MapEnumerator                       mapEnumeratorTaxValue;
        MapEnumerator                       mapEnumeratorTaxType;
        MapEnumerator                       mapEnumeratorTaxReportFieldAmount;
        Amount                              reportItem8;
        Amount                              reportItem9;
        Amount                              reportItem11;
        Amount                              reportItem12;
        Amount                              reportItem17;
        Amount                              reportItem18;
        Amount                              reportItem19;
        Amount                              reportItem20;
        Amount                              reportItem22;
        Amount                              reportItem23;

        #define.25(25)

        void initReportFieldAmounts()
        {
            mapEnumeratorTaxReportFieldAmount = mapTaxReportFieldAmount.getEnumerator();

            while (mapEnumeratorTaxReportFieldAmount.moveNext())
            {
                taxAmount = mapEnumeratorTaxReportFieldAmount.currentValue();
                switch (mapEnumeratorTaxReportFieldAmount.currentKey())
                {
                    case #field_1:
                        amount1 = taxAmount;
                        break;

                    case #field_7001:
                        amount7001 = taxAmount;
                        break;

                    case #field_8001:
                        amount8001 = taxAmount;
                        break;

                    case #field_8208:
                        amount8208 = taxAmount;
                        break;

                    case #field_9001:
                        amount9001 = taxAmount;
                        break;
                    
                    case #field_208:
                        amount208 = taxAmount;
                        break;

                }
            }
        }

        void fillTaxReportItemsWithType()
        {
            consTaxReportCopy.ReportItem1 = real2int(amount1);

            consTaxReportCopy.ReportItem2 = real2int(this.trunc1000(amount1) * this.getNewNationalTaxPercent(taxValue, taxType) * taxValue / 100);

            taxAmountKey = this.getTaxAmountKeyWithType(#field_8001, taxType, taxValue);
            if (mapTaxAmount.exists(taxAmountKey))
            {
                consTaxReportCopy.TaxAmount = abs(mapTaxAmount.lookup(taxAmountKey));
            }

            consTaxReportCopy.ReportItem5 = real2int(amount7001);
            
            if (taxType != TaxType_JP::Reduced && taxValue == 8)
            {
                consTaxReportCopy.ReportItem6 = real2int(amount90080 * this.getConsumptionTaxItemsMultiplier(taxValue, taxType));
            }
            consTaxReportCopy.ReportItem7 = consTaxReportCopy.ReportItem4 + consTaxReportCopy.ReportItem5 + consTaxReportCopy.ReportItem6;

            if (consTaxReportCopy.ReportItem7 - consTaxReportCopy.ReportItem2 - consTaxReportCopy.ReportItem3 > 0)
            {
                consTaxReportCopy.ReportItem8 = (consTaxReportCopy.ReportItem7 - consTaxReportCopy.ReportItem2 - consTaxReportCopy.ReportItem3);
                reportItem8 += consTaxReportCopy.ReportItem8;
            }

            if ((consTaxReportCopy.ReportItem2 + consTaxReportCopy.ReportItem3) - consTaxReportCopy.ReportItem7 > 0)
            {
                consTaxReportCopy.ReportItem9 = ((consTaxReportCopy.ReportItem2 + consTaxReportCopy.ReportItem3) - consTaxReportCopy.ReportItem7);
                reportItem9 += consTaxReportCopy.ReportItem9;
            }

            if (consTaxReportCopy.ReportItem9 - consTaxReportCopy.ReportItem10 > 0)
            {
                consTaxReportCopy.ReportItem11 = consTaxReportCopy.ReportItem9 - consTaxReportCopy.ReportItem10;
                reportItem11 += consTaxReportCopy.ReportItem11;
            }
            if (consTaxReportCopy.ReportItem10 - consTaxReportCopy.ReportItem9 > 0)
            {
                consTaxReportCopy.ReportItem12 = consTaxReportCopy.ReportItem10 - consTaxReportCopy.ReportItem9;
                reportItem12 += consTaxReportCopy.ReportItem12;
            }

            consTaxReportCopy.ReportItem17 = consTaxReportCopy.ReportItem8;
            reportItem17 += consTaxReportCopy.ReportItem17;
            consTaxReportCopy.ReportItem18 = consTaxReportCopy.ReportItem9;
            reportItem18 += consTaxReportCopy.ReportItem18;

            real multiplier;
            if (taxValue == 8 && taxType != TaxType_JP::Reduced)
            {
                multiplier = 17/63;
            }
            if ((taxValue == 8 && taxType == TaxType_JP::Reduced) || taxValue == 10)
            {
                multiplier = 22/78;
            }

            Amount curAmount = real2int((consTaxReportCopy.reportItem2 - consTaxReportCopy.ReportItem5 - consTaxReportCopy.ReportItem4 - consTaxReportCopy.ReportItem6) * multiplier);
            if (curAmount < 0)
            {
                consTaxReportCopy.ReportItem19 = -1 * curAmount;
                reportItem19 += consTaxReportCopy.ReportItem19;
            }
            else
            {
                consTaxReportCopy.ReportItem20 = curAmount;
                reportItem20 += consTaxReportCopy.ReportItem20;
            }

            consTaxReportCopy.ReportItem21 = consTaxReportCopy.ReportItem21;
            
            if (consTaxReportCopy.ReportItem20 > consTaxReportCopy.ReportItem21)
            {
                consTaxReportCopy.ReportItem22 = consTaxReportCopy.ReportItem20 - consTaxReportCopy.ReportItem21;
                reportItem22 += consTaxReportCopy.ReportItem22;
            }
            if (consTaxReportCopy.ReportItem20 < consTaxReportCopy.ReportItem21)
            {
                consTaxReportCopy.ReportItem23 = consTaxReportCopy.ReportItem21 - consTaxReportCopy.ReportItem20;
                reportItem23 += consTaxReportCopy.ReportItem23;
            }

            consTaxReportCopy.ReportItem26     = ((consTaxReportCopy.ReportItem11 + this.trunc1000(consTaxReportCopy.ReportItem22))
                                         - (consTaxReportCopy.ReportItem8 + consTaxReportCopy.ReportItem12
                                         + this.trunc1000(consTaxReportCopy.ReportItem19) + consTaxReportCopy.ReportItem23));
            consTaxReportCopy.TaxType = taxType;
            consTaxReportCopy.ReportItem4_1 = amount208;
        }

        void initTaxReportItems()
        {
            select firstonly forupdate consTaxReportCopy
                where ((consTaxReportCopy.PeriodOfTaxationFrom == _fDate
                    && consTaxReportCopy.PeriodOfTaxationTo == _tDate)
                    || (consTaxReportCopy.InterimFrom == _fDate
                    && consTaxReportCopy.InterimTo == _tDate))
                    && consTaxReportCopy.TypeOfDeclaration    == _typeOfDeclaration
                    && consTaxReportCopy.TaxType == taxType
                    && consTaxReportCopy.TaxValue == taxValue
                    && consTaxReportCopy.DataLayout == '';

            if (consTaxReportCopy)
            {
                select firstonly consTaxCalc
                    where consTaxCalc.PeriodOfTaxationFrom == _fDate
                        && consTaxCalc.PeriodOfTaxationTo == _tDate
                        && consTaxCalc.SettlementPeriod == _tPeriod
                        && consTaxCalc.Version == TaxRepVersion::Latest
                        && consTaxCalc.TypeOfDeclaration == _typeOfDeclaration
                        && consTaxCalc.TaxType == taxType
                        && consTaxCalc.TaxValue == taxValue
                        && consTaxCalc.DataLayout == '';

                if (consTaxCalc)
                {
                    consTaxReportCopy.ReportItem3   = (consTaxCalc.CalcItem21 + consTaxCalc.CalcItem22);
                    consTaxReportCopy.ReportItem4   = consTaxCalc.CalcItem20;
                    consTaxReportCopy.ReportItem15  = consTaxCalc.CalcItem4;
                    consTaxReportCopy.ReportItem16  = consTaxCalc.CalcItem7;
                    real ratioOfTaxableSales;

                    if (consTaxReportCopy.ReportItem16)
                    {
                        ratioOfTaxableSales = consTaxReportCopy.ReportItem15 / consTaxReportCopy.ReportItem16;
                        ratioOfTaxableSales = round(ratioOfTaxableSales, 0.01);
                    }
                    else
                    {
                        ratioOfTaxableSales = 0.0;
                    }

                    consTaxReportCopy.RatioOfTaxableSales = ratioOfTaxableSales;
                }
            }
            else
            {
                select firstonly consTaxCalc
                    where consTaxCalc.PeriodOfTaxationFrom == _fDate
                        && consTaxCalc.PeriodOfTaxationTo == _tDate
                        && consTaxCalc.SettlementPeriod == _tPeriod
                        && consTaxCalc.TypeOfDeclaration == _typeOfDeclaration
                        && consTaxCalc.TaxType == taxType
                        && consTaxCalc.TaxValue == taxValue
                        && consTaxCalc.DataLayout == '';

                if (consTaxCalc)
                {
                    consTaxReportCopy.ReportItem3   = (consTaxCalc.CalcItem21 + consTaxCalc.CalcItem22);
                    consTaxReportCopy.ReportItem4   = consTaxCalc.CalcItem20;
                    consTaxReportCopy.ReportItem15  = consTaxCalc.CalcItem4;
                    consTaxReportCopy.ReportItem16  = consTaxCalc.CalcItem7;
                    real ratioOfTaxableSales;

                    if (consTaxReportCopy.ReportItem16)
                    {
                        ratioOfTaxableSales = consTaxReportCopy.ReportItem15 / consTaxReportCopy.ReportItem16;
                        ratioOfTaxableSales = round(ratioOfTaxableSales, 0.01);
                    }
                    else
                    {
                        ratioOfTaxableSales = 0.0;
                    }

                    consTaxReportCopy.RatioOfTaxableSales = ratioOfTaxableSales;
                }

                if (_typeOfDeclaration == TypeOfDeclaration_JP::Interim)
                {
                    consTaxReportCopy.InterimFrom   = _fDate;
                    consTaxReportCopy.InterimTo     = _tDate;
                }
                else if (consTaxCalc.TypeOfDeclaration == TypeOfDeclaration_JP::Final)
                {
                    consTaxReportCopy.PeriodOfTaxationFrom = _fDate;
                    consTaxReportCopy.PeriodOfTaxationTo   = _tDate;
                }

                consTaxReportCopy.CalcMethod        = _calcMethod;
                consTaxReportCopy.TypeOfDeclaration = _typeOfDeclaration;
                consTaxReportCopy.TaxValue          = taxValue;
            }

            if (amendment)
            {
                consTaxReportCopy.ReportItem10 = 0;
                consTaxReportCopy.ReportItem13 = 0;
                consTaxReportCopy.ReportItem21 = 0;
                consTaxReportCopy.ReportItem24 = 0;
                consTaxReportCopy.ReportItem25 = 0;
                consTaxReportCopy.Comments                    = "";
                consTaxReportCopy.NameOfTaxAccountant         = "";
                consTaxReportCopy.BankAccount                 = "";
                consTaxReportCopy.Modified                    = NoYes::No;
                consTaxReportCopy.Modified13                  = NoYes::No;
                consTaxReportCopy.Modified24                  = NoYes::No;
                consTaxReportCopy.Modified25                  = NoYes::No;
                consTaxReportCopy.InstallmentBasis            = NoYes::No;
                consTaxReportCopy.DeferredPaymentBasis        = NoYes::No;
                consTaxReportCopy.PercentageOfCompletionBasis = NoYes::No;
                consTaxReportCopy.CashBasisAccounting         = NoYes::No;
                consTaxReportCopy.ExceptionalTaxCalcTreatment = NoYes::No;
                consTaxReportCopy.IndividualMethod            = NoYes::No;
                consTaxReportCopy.LumpsumMethod               = NoYes::No;
                consTaxReportCopy.FullyDeductible             = NoYes::No;
                consTaxReportCopy.DocumentSubmittedLaw30      = NoYes::No;
                consTaxReportCopy.DocumentSubmittedLaw332     = NoYes::No;
                consTaxReportCopy.TaxableSalesBenchmarkPeriod = NoYes::No;
                consTaxReportCopy.CalcMethod                            = _calcMethod;
            }

            if (! amendment
                && (consTaxReportCopy.Version == TaxRepVersion::Original
                || consTaxReportCopy.Version == TaxRepVersion::Correct
                || consTaxReportCopy.Version == TaxRepVersion::Latest))
            {
                companyInfo = CompanyInfo::find();

                select firstonly TaxJurisdictionName  from taxJuri
                        where taxJuri.TaxPeriod == _tPeriod;

                if (taxJuri)
                {
                    consTaxReportCopy.TaxationOfficeName = taxJuri.TaxJurisdictionName;
                }

                consTaxReportCopy.AccountingPersonnel = companyInfo.AccountingPersonnel_JP;

                select firstonly Apellative from consTaxCalcRep
                    where consTaxCalcRep.PeriodOfTaxationFrom == _fDate
                        && consTaxCalcRep.PeriodOfTaxationTo == _tDate
                        && consTaxCalcRep.SettlementPeriod == _tPeriod
                        && consTaxCalcRep.TypeOfDeclaration == _typeOfDeclaration
                        && consTaxCalcRep.TaxValue == taxValue
                        && consTaxCalcRep.DataLayout == '';

                if (consTaxCalcRep)
                {
                    consTaxReportCopy.CompanyRepresentative = consTaxCalcRep.Apellative;
                }
            }
        }

        void reset()
        {
            amount1 = 0;
            amount7001 = 0;
            amount8001 = 0;
            amount8208 = 0;
            amount9001 = 0;
            amount208 = 0;

            consTaxReportCopy.clear();
        }

        select firstonly TaxAmount
            from taxReportByCodeCopy
                where taxReportByCodeCopy.BadDebtLedgerDimension == ledgerBadDebtDim;

        if (taxReportByCodeCopy)
        {
            amount90080 = taxReportByCodeCopy.TaxAmount;
        }

        if (mapTaxValue)
        {
            mapEnumeratorTaxValue = mapTaxValue.getEnumerator();

            ttsbegin;
            while (mapEnumeratorTaxValue.moveNext())
            {
                taxValue = mapEnumeratorTaxValue.currentKey();
                if (mapEnumeratorTaxValue.currentValue())
                {
                    mapTaxType = mapEnumeratorTaxValue.currentValue();
                    mapEnumeratorTaxType = mapTaxType.getEnumerator();
                    while (mapEnumeratorTaxType.moveNext())
                    {
                        taxType = mapEnumeratorTaxType.currentKey();
                        mapTaxReportFieldAmount = mapEnumeratorTaxType.currentValue();
                        reset();
                        initReportFieldAmounts();
                        initTaxReportItems();
                        fillTaxReportItemsWithType();

                        consTaxReportCopy.write();
                    }
                }
            }
            ttscommit;
        }

        ttsbegin;
        while select forupdate consTaxReportCopy
            where consTaxReportCopy.PeriodOfTaxationFrom == this.parmFromDate()
                && consTaxReportCopy.PeriodOfTaxationTo == this.parmToDate()
                && consTaxReportCopy.DataLayout == ''
        {
            if (reportItem8 < 0)
            {
                consTaxReportCopy.ReportItem8 = 0;
            }

            if (reportItem9 < 0)
            {
                consTaxReportCopy.ReportItem9 = 0;
            }

            if (reportItem11 < 0)
            {
                consTaxReportCopy.ReportItem11 = 0;
            }

            if (reportItem12 < 0)
            {
                consTaxReportCopy.ReportItem12 = 0;
            }

            if (reportItem17 < 0)
            {
                consTaxReportCopy.ReportItem17 = 0;
            }

            if (reportItem18 < 0)
            {
                consTaxReportCopy.ReportItem18 = 0;
            }

            if (reportItem19 < 0)
            {
                consTaxReportCopy.ReportItem19 = 0;
            }

            if (reportItem20 < 0)
            {
                consTaxReportCopy.ReportItem20 = 0;
            }

            if (reportItem22 < 0)
            {
                consTaxReportCopy.ReportItem22 = 0;
            }

            if (reportItem23 < 0)
            {
                consTaxReportCopy.ReportItem23 = 0;
            }

            consTaxReportCopy.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmendment</Name>
				<Source><![CDATA[
    public NoYes parmAmendment(NoYes _amendment = amendment)
    {
        amendment = _amendment;

        return amendment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcMethod</Name>
				<Source><![CDATA[
    public CalcMethod_JP parmCalcMethod(CalcMethod_JP _calcMethod = calcMethod)
    {
        calcMethod = _calcMethod;

        return calcMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerBadDebtDim</Name>
				<Source><![CDATA[
    public LedgerCollectedBadDebtDimension_JP parmLedgerBadDebtDim(LedgerCollectedBadDebtDimension_JP _ledgerBadDebtDim = ledgerBadDebtDim)
    {
        ledgerBadDebtDim = _ledgerBadDebtDim;

        return ledgerBadDebtDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerCollectedBadDebtDim</Name>
				<Source><![CDATA[
    public LedgerBadDebtDimension_JP parmLedgerCollectedBadDebtDim(LedgerBadDebtDimension_JP _ledgerCollectedBadDebtDim = ledgerCollectedBadDebtDim)
    {
        ledgerCollectedBadDebtDim = _ledgerCollectedBadDebtDim;

        return ledgerCollectedBadDebtDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackList</Name>
				<Source><![CDATA[
    public container parmPackList(container _packList = packList)
    {
        packList = _packList;
        return packList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = tPeriod)
    {
        tPeriod = _taxPeriod;

        return tPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepCounter</Name>
				<Source><![CDATA[
    public TaxVersion parmTaxRepCounter(TaxVersion _taxRepCounter = taxRepCounter)
    {
        taxRepCounter = _taxRepCounter;

        return taxRepCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReportByCode</Name>
				<Source><![CDATA[
    public TaxReportByCode_JP parmTaxReportByCode(TaxReportByCode_JP _taxReportByCode = taxReportByCode)
    {
        taxReportByCode = _taxReportByCode;

        return taxReportByCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepVerison</Name>
				<Source><![CDATA[
    public TaxRepVersion parmTaxRepVerison(TaxRepVersion _taxRepVersion = taxRepVersion)
    {
        taxRepVersion = _taxRepVersion;

        return taxRepVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTaxReportById</Name>
				<Source><![CDATA[
    public TmpTaxReportById parmTmpTaxReportById(TmpTaxReportById _tmpTaxReportById = tmpTaxReportById)
    {
        tmpTaxReportById = _tmpTaxReportById;

        return tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeOfDeclaration</Name>
				<Source><![CDATA[
    public TypeOfDeclaration_JP parmTypeOfDeclaration(TypeOfDeclaration_JP _typeOfDeclaration = typeOfDeclaration)
    {
        typeOfDeclaration = _typeOfDeclaration;

        return typeOfDeclaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate the tax for report.
    /// </summary>
    /// <param name="_taxCalcReportFields">
    /// The record value of TaxCalcReportFields_JP.
    /// </param>
    /// <param name="_check">
    /// True or false.
    /// </param>
    /// <returns>
    ///    True or false.
    /// </returns>
    public static boolean calcOnServer(TaxCalcReportFields_JP _taxCalcReportFields, boolean _check = true)
    {
        TaxCalcReportFields_JP::getBadDebtLedgerDimension(_taxCalcReportFields);

        TmpTaxReportById tmpTaxReportByIdLoc = TaxTrans::taxAmountByReportId_Table(
            _taxCalcReportFields.parmFromDate(),
            _taxCalcReportFields.parmToDate(),
            _taxCalcReportFields.parmTaxPeriod(),
            _taxCalcReportFields.parmTaxRepVerison(),
            _taxCalcReportFields.parmTaxRepCounter(),
            false);

        _taxCalcReportFields.insertIntaxReportByCode_BadDebt(
            _taxCalcReportFields.parmFromDate(),
            _taxCalcReportFields.parmToDate(),
            _taxCalcReportFields.parmTaxPeriod());

        if (_check)
        {
            _taxCalcReportFields.calcTotalsAndRound(tmpTaxReportByIdLoc);

            if (_taxCalcReportFields.parmAmendment() == NoYes::Yes || 
                !LedgerConsumptionTaxCalcTrans_JP::existByTaxReportParametersVersion(_taxCalcReportFields, TaxRepVersion::Latest, ''))
            {
                _taxCalcReportFields.insertOrUpdateInConsTaxCalc(
                    _taxCalcReportFields.parmFromDate(),
                    _taxCalcReportFields.parmToDate(),
                    _taxCalcReportFields.parmTaxPeriod(),
                    _taxCalcReportFields.parmTypeOfDeclaration(),
                    _taxCalcReportFields.parmCalcMethod(),
                    CompanyInfo::find().CompanyRepresentative_JP);
            }

            if (_taxCalcReportFields.parmAmendment() == NoYes::Yes ||
                !LedgerConsumptionTaxReportTrans_JP::existByTaxReportParametersVersion(_taxCalcReportFields, TaxRepVersion::Latest, ''))
            {
                _taxCalcReportFields.insertOrUpdateInConsTaxReport(
                    _taxCalcReportFields.parmFromDate(),
                    _taxCalcReportFields.parmToDate(),
                    _taxCalcReportFields.parmTaxPeriod(),
                    _taxCalcReportFields.parmTypeOfDeclaration(),
                    _taxCalcReportFields.parmCalcMethod(),
                    CompanyInfo::find().CompanyRepresentative_JP);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxCalcReportFields_JP construct()
    {
        return new TaxCalcReportFields_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBadDebtLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets bad debt ledger dimension.
    /// </summary>
    /// <param name="_taxCalcReportFields">
    /// The tax calculation report fields.
    /// </param>
    public static void getBadDebtLedgerDimension(TaxCalcReportFields_JP _taxCalcReportFields)
    {
        LedgerBadDebtAccounts_JP        ledgerBadDebtAccounts;

        select firstonly BadDebtLedgerDimension, CollectedBadDebtLedgerDimension from ledgerBadDebtAccounts
            where ledgerBadDebtAccounts.BadDebtLedgerDimension != 0
                && ledgerBadDebtAccounts.CollectedBadDebtLedgerDimension != 0;

        // Change default dimension

        _taxCalcReportFields.parmLedgerBadDebtDim(TaxCalcReportFields_JP::getLedgerDimensionFromDefaultAccount(ledgerBadDebtAccounts.BadDebtLedgerDimension));
        _taxCalcReportFields.parmLedgerCollectedBadDebtDim(TaxCalcReportFields_JP::getLedgerDimensionFromDefaultAccount(ledgerBadDebtAccounts.CollectedBadDebtLedgerDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionFromDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Wrapper for method LedgerDimensionFacade::serviceCreateLedgerDimension(...).
    /// </summary>
    /// <param name="_defaultAccount">
    ///    The ID of the <c>DimensionAttributeValueCombination</c> record that represents the default account.
    /// </param>
    /// <param name="_defaultDimension">
    ///    The ID of a default dimension set to use; optional.
    /// </param>
    /// <returns>
    ///    The ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </returns>
    /// <remarks>
    ///    Calling this method with empty default account will not throw an exception.
    /// </remarks>
    static LedgerDimensionAccount getLedgerDimensionFromDefaultAccount(
        LedgerDimensionDefaultAccount   _defaultAccount,
        DimensionDefault                _defaultDimension = 0)
    {
        if (!_defaultAccount)
            return 0;
        else
            return LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultAccount, _defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a new TaxCalcReportFields_JP class instance.
    /// </summary>
    /// <param name="_taxReport_JP">
    /// Refer to _taxReport_JP instance.
    /// </param>
    /// <returns>
    ///    The value of the TaxCalcReportFields_JP.
    /// </returns>
    public static TaxCalcReportFields_JP newTaxReport(TaxReport_JP _taxReport_JP)
    {
        TaxCalcReportFields_JP taxCalcReportFields_JP = new TaxCalcReportFields_JP();

        taxCalcReportFields_JP.parmTaxRepVerison(_taxReport_JP.taxRepVersion());
        taxCalcReportFields_JP.parmTaxPeriod(_taxReport_JP.taxPeriod());
        taxCalcReportFields_JP.parmFromDate(_taxReport_JP.fromDate());
        taxCalcReportFields_JP.parmToDate(_taxReport_JP.toDate());
        taxCalcReportFields_JP.parmTransDate(_taxReport_JP.transDate());
        taxCalcReportFields_JP.parmTypeOfDeclaration(_taxReport_JP.parmTypeOfDeclaration());
        taxCalcReportFields_JP.parmCalcMethod(_taxReport_JP.calcMethod());
        taxCalcReportFields_JP.parmAmendment(_taxReport_JP.amendment());
        taxCalcReportFields_JP.parmTaxRepCounter(0);
        taxCalcReportFields_JP.setSecondTaxRaise();

        // save pack list
        taxCalcReportFields_JP.parmPackList(taxCalcReportFields_JP.pack());

        return taxCalcReportFields_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trunc1000</Name>
				<Source><![CDATA[
    private real trunc1000(real _value)
    {
        return (real2int(_value / 1000) * 1000);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>