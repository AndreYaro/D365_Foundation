<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalCalendarsFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FiscalCalendarsFormEventHandler</c> class implements event handlers for the <c>FiscalCalendars</c> form.
/// </summary>
public class FiscalCalendarsFormEventHandler
{
    #ISOCountryRegionCodes


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>onInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the form OnInitialized event.
    /// </summary>
    /// <param name="sender">The FiscalCalendars form.</param>
    /// <param name="e">The event arguments.</param>
    [FormEventHandler(formStr(FiscalCalendars),  FormEventType::Initialized)]
    public static void onInitialized(xFormRun _sender, FormEventArgs _e)
    {
        // <GIN>
        if (AssetParameters::isDepreciationCompaniesActEnable_IN())
        {
            // Add data source FiscalCalendarYear is order to update the Total days when modefity Days.
            FormGroupControl YearGroup = _sender.design().controlName(formControlStr(FiscalCalendars, YearGroup));
            YearGroup.dataSource(tableId2Name(tableNum(FiscalCalendarYear)));
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>FiscalCalendarYear_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for <c>Active</c> method.
    /// </summary>
    /// <param name="_sender">The records for table FiscalCalendarYear.</param>
    /// <param name="_e">The event args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(FiscalCalendars, FiscalCalendarYear), FormDataSourceEventType::Activated)]
    public static void FiscalCalendarYear_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        // <GIN>
        FiscalCalendarsFormEventHandler::updateCalendarTypeDesign_IN(_sender.formRun());
        FiscalCalendarsFormEventHandler::updateTotalDaysDesign_IN(_sender.formRun());
        FiscalCalendarsFormEventHandler::updateButtonDesign(_sender.formRun());
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>FiscalCalendarPeriod_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for <c>Active</c> method.
    /// </summary>
    /// <param name="_sender">The records for table FiscalCalendarPeriod.</param>
    /// <param name="_e">The event args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(FiscalCalendars, FiscalCalendarPeriod), FormDataSourceEventType::Activated)]
    public static void FiscalCalendarPeriod_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        // <GIN>
        FiscalCalendarsFormEventHandler::updateDaysDesign_IN(_sender.formRun());
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>Days_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for the event 'Modified' of the form data field Days in the form data source FiscalPeriod_IN.
    /// </summary>
    /// <param name="_sender">The data field.</param>
    /// <param name="_e">The event args.</param>
    [FormDataFieldEventHandler(formDataFieldStr(FiscalCalendars, FiscalPeriod_IN, Days), FormDataFieldEventType::Modified)]
    public static void Days_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        // <GIN>
        if (AssetParameters::isDepreciationCompaniesActEnable_IN())
        {
            FormGridControl fiscalPeriodGrid = _sender.datasource().formRun().design().controlName(formControlStr(FiscalCalendars, fiscalPeriodGrid));
            FormGroupControl YearGroup = _sender.datasource().formRun().design().controlName(formControlStr(FiscalCalendars, YearGroup));

            YearGroup.setFocus();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>CalendarTypeGroup_CalendarType_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for the event 'Modified' of the Calendar type control.
    /// </summary>
    /// <param name="_sender">The calendar type control.</param>
    /// <param name="_e">The event args.</param>
    [FormControlEventHandler(formControlStr(FiscalCalendars, CalendarTypeGroup_CalendarType), FormControlEventType::Modified)]
    public static void CalendarTypeGroup_CalendarType_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        // <GIN>
        if (AssetParameters::isDepreciationCompaniesActEnable_IN())
        {
            FormComboBoxControl calendarType                = _sender as FormComboBoxControl;
            FormDataSource      fiscalCalendar_DS           = _sender.formRun().dataSource(formDataSourceStr(FiscalCalendars, FiscalCalendar));
            FiscalCalendar_IN   fiscalCalendar_IN           = FiscalCalendar_IN::findByFiscalCalendar(fiscalCalendar_DS.cursor().RecId, true);

            if (fiscalCalendar_IN.RecId)
            {
                ttsbegin;
                fiscalCalendar_IN.CalendarType = calendarType.selection();
                fiscalCalendar_IN.update();
                ttscommit;
            }
            else
            {
                ttsbegin;
                fiscalCalendar_IN.FiscalCalendar    = fiscalCalendar_DS.cursor().RecId;
                fiscalCalendar_IN.CalendarType      = calendarType.selection();
                fiscalCalendar_IN.insert();
                ttscommit;
            }

            // If the year was not created in an IN company, the periods in fiscalCalendarPeriod_IN may not exist.
            // So it needs check and insertion.
            if (calendarType.selection() == CalendarType_IN::DayBased)
            {
                FiscalCalendarPeriod    fiscalCalendarPeriod;
                FiscalCalendarPeriod_IN fiscalCalendarPeriod_IN;
                FiscalCalendarYear      fiscalCalendarYear;

                RecordInsertList insertPeriodList = new RecordInsertList(tableNum(FiscalCalendarPeriod_IN));

                ttsbegin;
                while select fiscalCalendarPeriod join fiscalCalendarYear
                    where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                    && fiscalCalendarYear.FiscalCalendar == fiscalCalendar_DS.cursor().RecId
                {
                    if (FiscalCalendarPeriod_IN::existByFiscalCalendarPeriod(fiscalCalendarPeriod.RecId))
                    {
                        fiscalCalendarPeriod_IN = FiscalCalendarPeriod_IN::findByFiscalCalendarPeriod(fiscalCalendarPeriod.RecId, true);
                        fiscalCalendarPeriod_IN.Days = fiscalCalendarPeriod.Type == FiscalPeriodType::Operating ?
                            fiscalCalendarPeriod.EndDate - fiscalCalendarPeriod.StartDate + 1 : 0;
                        fiscalCalendarPeriod_IN.update();
                    }
                    else
                    {
                        fiscalCalendarPeriod_IN.FiscalCalendarPeriod = fiscalCalendarPeriod.RecId;
                        fiscalCalendarPeriod_IN.Days = fiscalCalendarPeriod.Type == FiscalPeriodType::Operating ?
                            fiscalCalendarPeriod.EndDate - fiscalCalendarPeriod.StartDate + 1 : 0;
                        insertPeriodList.add(fiscalCalendarPeriod_IN);
                    }
                }

                insertPeriodList.insertDatabase();
                ttscommit;
            }

            FiscalCalendarsFormEventHandler::updateTotalDaysDesign_IN(_sender.formRun());
            FiscalCalendarsFormEventHandler::updateDaysDesign_IN(_sender.formRun());
            FiscalCalendarsFormEventHandler::updateDaysValue_IN(_sender.formRun());
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDayBasedCalendarCreatedInOtherCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the current legal entity is not in India, check whether the calendar is a 'Day based' calendar which is created or modified in an India company.
    /// </summary>
    /// <param name = "_fiscalCalendar">The data source <c>FiscalCalendar</c>.</param>
    /// <returns>Whether the calendar is a 'Day based' calendar.</returns>
    public static boolean isDayBasedCalendarCreatedInOtherCountry(FormDataSource _fiscalCalendar)
    {
        // <GIN>
        FiscalCalendar_IN fiscalCalendar_IN;

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            fiscalCalendar_IN = FiscalCalendar_IN::findByFiscalCalendar(_fiscalCalendar.cursor().RecId);

            if (fiscalCalendar_IN && fiscalCalendar_IN.CalendarType == CalendarType_IN::DayBased)
            {
                return true;
            }
        }

        return false;
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalendarTypeDesign_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the visibility and selection of the Calendar type control.
    /// </summary>
    /// <param name = "_formRun">The parent form.</param>
    public static void updateCalendarTypeDesign_IN(FormRun _formRun)
    {
        // <GIN>
        FormDataSource      fiscalCalendar_DS    = _formRun.dataSource(formDataSourceStr(FiscalCalendars, FiscalCalendar));
        FormComboBoxControl calendarType         = _formRun.design().controlName(formControlStr(FiscalCalendars, CalendarTypeGroup_CalendarType));

        if (AssetParameters::isDepreciationCompaniesActEnable_IN())
        {
            calendarType.visible(true);
            calendarType.selection(FiscalCalendar_IN::findByFiscalCalendar(fiscalCalendar_DS.cursor().RecId).CalendarType);
        }
        else
        {
            calendarType.visible(false);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDaysDesign_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the visibility of the Days column in period.
    /// </summary>
    /// <param name = "_formRun">The parent form.</param>
    public static void updateDaysDesign_IN(FormRun _formRun)
    {
        // <GIN>
        FormDataSource fiscalCalendar_DS = _formRun.dataSource(formDataSourceStr(FiscalCalendars, FiscalCalendar));

        FiscalCalendarPeriod fiscalCalendarPeriod = _formRun.dataSource(formdatasourcestr(FiscalCalendars, fiscalCalendarPeriod)).cursor() as FiscalCalendarPeriod;
        FormIntControl days  = _formRun.design().controlName(formControlStr(FiscalCalendars, FiscalPeriod_IN_Days));

        if (AssetParameters::isDepreciationCompaniesActEnable_IN() &&
            FiscalCalendar_IN::findByFiscalCalendar(fiscalCalendar_DS.cursor().RecId).CalendarType == CalendarType_IN::DayBased)
        {
            days.visible(true);
            days.allowEdit(fiscalCalendarPeriod.Type == FiscalPeriodType::Operating);
        }
        else
        {
            days.visible(false);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDaysValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the values of the Days column in period.
    /// </summary>
    /// <param name = "_formRun">The parent form.</param>
    public static void updateDaysValue_IN(FormRun _formRun)
    {
        // <GIN>
        FormDataSource fiscalCalendar_DS        = _formRun.dataSource(formDataSourceStr(FiscalCalendars, FiscalCalendar));
        FormDataSource fiscalPeriod_IN_DS       = _formRun.dataSource(formDataSourceStr(FiscalCalendars, FiscalPeriod_IN));

        if (AssetParameters::isDepreciationCompaniesActEnable_IN() &&
            FiscalCalendar_IN::findByFiscalCalendar(fiscalCalendar_DS.cursor().RecId).CalendarType == CalendarType_IN::DayBased)
        {
            fiscalPeriod_IN_DS.linkType(FormLinkType::OuterJoin);
        }
        else
        {
            fiscalPeriod_IN_DS.linkType(FormLinkType::Passive);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalDaysDesign_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the visibility of the total days control.
    /// </summary>
    /// <param name = "_formRun">The parent form.</param>
    public static void updateTotalDaysDesign_IN(FormRun _formRun)
    {
        // <GIN>
        FormDataSource      fiscalCalendar_DS    = _formRun.dataSource(formDataSourceStr(FiscalCalendars, FiscalCalendar));
        FormIntControl      totalDays            = _formRun.design().controlName(formControlStr(FiscalCalendars, fiscalYear_M_displayTotalDays_IN));

        if (AssetParameters::isDepreciationCompaniesActEnable_IN())
        {
            boolean isDayBasedCalendar = FiscalCalendar_IN::findByFiscalCalendar(fiscalCalendar_DS.cursor().RecId).CalendarType == CalendarType_IN::DayBased;

            totalDays.visible(isDayBasedCalendar);
        }
        else
        {
            totalDays.visible(false);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateButtonDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the design of the buttons.
    /// </summary>
    /// <param name = "_formRun">The parent form.</param>
    public static void updateButtonDesign(FormRun _formRun)
    {
        // <GIN>
        FormDataSource              fiscalCalendar_DS   = _formRun.dataSource(formDataSourceStr(FiscalCalendars, FiscalCalendar));
        FormDropDialogButtonControl newYear             = _formRun.design().controlName(formControlStr(FiscalCalendars, NewYear));
        FormButtonControl           deleteCalendar      = _formRun.design().controlName(formControlStr(FiscalCalendars, DeleteCalendar));

        boolean isDayBased = FiscalCalendarsFormEventHandler::isDayBasedCalendarCreatedInOtherCountry(fiscalCalendar_DS);

        newYear.enabled(!isDayBased);
        deleteCalendar.enabled(!isDayBased);
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>RuntimeFormExtensionApplier_Post_OnFormInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change form link type to outer join for data source FiscalPeriod_IN of form <c>FiscalCalendars</c>.
    /// </summary>
    /// <param name = "_args">The <c>XppPrePostArgs</c>.</param>
    /// <remarks>Init method cannot be overrided in Extension form to set jointype, hence use the following logic as a work around.</remarks>
    [PostHandlerFor(classStr(RuntimeFormExtensionApplier), staticMethodStr(RuntimeFormExtensionApplier, OnFormInit))]
    public static void RuntimeFormExtensionApplier_Post_OnFormInit(XppPrePostArgs _args)
    {

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>