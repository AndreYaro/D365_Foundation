<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJourWConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The checking and creating the missing records in <c>CustInvoiceJour_W</c>.
/// </summary>
public class CustInvoiceJourWConsistencyCheck extends SysConsistencyCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the process of checking and fixing the missing lines in <c>CustInvoiceJour_W</c>.
    /// </summary>
    public void run()
    {
        FromDate fromDate = this.consistencyCheckJob.parmFromDate();
        Counter numOfRecords;

        switch (this.checkFix())
        {
            case CheckFix::Check:
                numOfRecords = this.checkMissingRecords(fromDate);
                this.updateNotCorrected();
                if (numOfRecords > 0)
                {
                    info(strFmt("@AccountsPayable:ConsistencyCheckCustInvoiceJourWCheckInfo", numOfRecords));
                }
                break;

            case CheckFix::Fix:
                numOfRecords = this.fixMissingRecords(fromDate);
                this.updateCorrected(numOfRecords);
                info(strFmt("@AccountsPayable:ConsistencyCheckCustInvoiceJourWFixInfo.", numOfRecords));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMissingRecords</Name>
				<Source><![CDATA[
    private Counter checkMissingRecords(FromDate _fromDate)
    {
        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_W custInvoiceJourW;

        select count(RecId) from custInvoiceJour
            where custInvoiceJour.InvoiceDate >= _fromDate
        notexists join custInvoiceJourW
            where custInvoiceJourW.CustInvoiceJour == custInvoiceJour.RecId;

        return custInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixMissingRecords</Name>
				<Source><![CDATA[
    private Counter fixMissingRecords(FromDate _fromDate)
    {
        CustInvoiceJour custInvoiceJour;
        CustInvoiceJour_W custInvoiceJourW;
        Counter numOfRecords = 0;

        ttsbegin;
        while select RecId from custInvoiceJour
            where custInvoiceJour.InvoiceDate >= _fromDate
        notexists join custInvoiceJourW
            where custInvoiceJourW.CustInvoiceJour == custInvoiceJour.RecId
        {
            CustInvoiceJour_W custInvoiceJourWLocal;
            custInvoiceJourWLocal.CustInvoiceJour = custInvoiceJour.RecId;
            custInvoiceJourWLocal.insert();
            numOfRecords++;
        }
        ttscommit;

        return numOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the id of the parent class.
    /// </summary>
    /// <returns>The class id of the parent class.</returns>
    public ClassId treeParentClassId()
    {
        return classNum(CustConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustInvoiceJourWConsistencyCheck construct()
    {
        return new CustInvoiceJourWConsistencyCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@AccountsPayable:ConsistencyCheckCustInvoiceJourWDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return strFmt("@AccountsPayable:ConsistencyCheckCustInvoiceJourWHelpText", "@SYS1557");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>