<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCreate_Tax25ExchDiff_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalCreate_Tax25ExchDiff_RU extends LedgerJournalCreate_Tax25_RU
{
    #AviFiles
    #define.TransactionDate(1)
    #define.ExchAdjIncome(4)
    #define.ExchAdjExpense(6)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected void createTrans(JournalId  _journalNum)
    {
        SysOperationProgress            operationProgress;
        RTax25RegisterId                regId = RTax25RegisterTable::find(RTax25RegisterType::TaxExchangeAdj).RegisterId;
        RTax25RegisterJournalTable      journalTable;
        RTax25RegisterJournalTrans      journalTrans;
        LineNum                         lineNum;
        LedgerJournalTrans              ledgerJournalTrans;
        CustVendTrans                   custVendTrans;
        AdvanceAdjustmentParameters_W   advanceParameters = AdvanceAdjustmentParameters_W::find();
        CustVendExchAdjParm_W           exchAdjParm;
        LedgerDimensionDefaultAccount   defaultAccount, offsetDefaultAccount;
        DimensionDefault                defaultDimension;
        EmplTrans_RU                    emplTrans;
        RTax25Query                     query;

        this.createVoucher(_journalNum);

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption(strFmt("@SYS26868", "@GLS112745", registerJournalTable.EndDate));
        operationProgress.setAnimation(#AviUpdate);

        ttsbegin;

        while select TableId from journalTable
            where journalTable.EndDate == registerJournalTable.EndDate
        join journalTrans
            where journalTrans.JournalNum          == journalTable.JournalNum &&
                  journalTrans.FiscalYear          == journalTable.FiscalYear &&
                  journalTrans.PeriodType          == journalTable.PeriodType &&
                  journalTrans.PeriodNum           == journalTable.PeriodNum  &&
                  ! journalTrans.Cancelled                                    &&
                  journalTrans.RegisterId          == regId
        {
            query = RTax25Query::newParameters(RTax25RegisterType::TaxExchangeAdj,
                                               journalTrans,
                                               ! RTax25RegisterTrans::existAny(journalTrans.JournalNum,
                                                                               regId,
                                                                               journalTrans.PeriodType,
                                                                               journalTrans.PeriodNum,
                                                                               journalTrans.FiscalYear));
            if (query.first())
            {
                do
        {
            ledgerJournalTrans.clear();
            ledgerJournalTrans.LineNum           = lineNum;
            ledgerJournalTrans.JournalNum        = _journalNum;
            ledgerJournalTrans.Voucher           = voucher;
            ledgerJournalTrans.CurrencyCode      = CompanyInfoHelper::standardCurrency();
            ledgerJournalTrans.TransDate         = query.getField(#TransactionDate);
            ledgerJournalTrans.ExchRate          = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
            ledgerJournalTrans.AccountType       = LedgerJournalACType::Ledger;
            ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;

                    switch (query.getRecord().RefTableId)
            {
                case tableNum(CustTrans) :
                    custVendTrans   = new DictTable(tableNum(CustTrans)).makeRecord();
                            ledgerJournalTrans.CustTransId = query.getRecord().RefRecId;
                    offsetDefaultAccount           = advanceParameters.rTax25OffsetLedgerDimensionCust;
                            if (query.getField(#ExchAdjIncome) != 0)
                        defaultAccount = advanceParameters.rTax25CustProfitLedgerDimension;
                    else
                        defaultAccount = advanceParameters.rTax25CustLossLedgerDimension;
                    break;

                case tableNum(VendTrans) :
                    custVendTrans       = new DictTable(tableNum(VendTrans)).makeRecord();
                            ledgerJournalTrans.VendTransId = query.getRecord().RefRecId;
                    offsetDefaultAccount           = advanceParameters.rTax25OffsetLedgerDimensionVend;
                            if (query.getField(#ExchAdjIncome) != 0)
                        defaultAccount = advanceParameters.rTax25VendProfitLedgerDimension;
                    else
                        defaultAccount = advanceParameters.rTax25VendLossLedgerDimension;
                    break;

                case tableNum(EmplTrans_RU) :
                    offsetDefaultAccount = advanceParameters.rTax25OffsetLedgerDimensionEmpl;
                            if (query.getField(#ExchAdjIncome) != 0)
                        defaultAccount = advanceParameters.rTax25EmplProfitLedgerDimension;
                    else
                        defaultAccount = advanceParameters.rTax25EmplLossLedgerDimension;
                            break;
            }

                    if (query.getRecord().RefTableId != tableNum(EmplTrans_RU))
            {
                select firstonly custVendTrans
                            where custVendTrans.TableId == query.getRecord().RefTableId &&
                                  custVendTrans.RecId   == query.getRecord().RefRecId;

                ledgerJournalTrans.AccountAgreementId_RU = AgreementHeaderExt_RU::findByDefaultDimension(custVendTrans.DefaultDimension).AgreementId;

                exchAdjParm = CustVendExchAdjParm_W::newFromParm(custVendTrans, true, false, LedgerTransType::AdvanceAdjustment_RU);
                ledgerJournalTrans.DefaultDimension = exchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(custVendTrans.DefaultDimension);
            }
            else
            {
                        emplTrans = EmplTrans_RU::findRecId(query.getRecord().RefRecId);
                exchAdjParm = CustVendExchAdjParm_W::newFromParmEmpl(emplTrans, true, false, LedgerTransType::AdvanceAdjustment_RU);
                ledgerJournalTrans.DefaultDimension = exchAdjParm.rTax25ExchAdjDimension().getDefaultDimension(LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(emplTrans.LedgerDimension));
            }

                    if (query.getField(#ExchAdjIncome) != 0)
            {
                        ledgerJournalTrans.AmountCurCredit = query.getField(#ExchAdjIncome);
            }
            else
            {
                        ledgerJournalTrans.AmountCurDebit = query.getField(#ExchAdjExpense);
            }

            ledgerJournalTrans.parmLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(defaultAccount, defaultDimension));
            ledgerJournalTrans.parmOffsetLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(offsetDefaultAccount, defaultDimension));
            ledgerJournalTrans.Txt = "@GLS112727";

            ledgerJournalTrans.insert();

            lineNum ++;
        }
                while (query.next());
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stornoTxt</Name>
				<Source><![CDATA[
    protected str stornoTxt()
    {
        return "@GLS112746";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>