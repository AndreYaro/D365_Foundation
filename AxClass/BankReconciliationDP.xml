<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationDP</c> class is the report data provider class for the <c>BankReconciliation</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(SrsTmpTblMarshallerContract))]
public class BankReconciliationDP extends SrsReportDataProviderPreProcessTempDB
{
    private BankReconciliationTmp bankReconciliationTmp;
    private BankReconciliationPrintoutTmp bankReconciliationPrintoutTmp;
    private int voucherVisibility;
    private BankAccountTable bankAccountTable;
    private BankAccountTrans tempBankAccountTrans;
    private BankDepositNum depositNum;
    private PaymReference paymReference;
    private TransDate transDate;
    private Voucher voucher;
    private AmountCur notReconciledBalance;
    private AmountCur reconciledBalance;
    private AmountCur correctedAmountCur;
    private DirPartyName custVendName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankReconciliationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>BankReconciliationTmp</c> Temp Table.
    /// </summary>
    /// <returns>
    /// Data from <c>BankReconciliationTmp</c>.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(BankReconciliationTmp))]
    public BankReconciliationTmp getBankReconciliationTmp()
    {
        select bankReconciliationTmp;
        return bankReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankReconciliationPrintoutTmp</Name>
				<Source><![CDATA[
    private void initBankReconciliationPrintoutTmp()
    {
        SrsTmpTblMarshallerContract contract = this.parmDataContract() as SrsTmpTblMarshallerContract;

        //Temp Table Object that was returned from SRSDataCarrier
        new SRSReportRunPermission().assert();
        bankReconciliationPrintoutTmp = SRSTmpTblMarshaller::getTmpTbl(contract.parmTmpTableDataRecId());

        SRSTmpTblMarshaller::deleteTmpTblData(contract.parmTmpTableDataRecId());
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankReconciliationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the <c>BankReconciliationTmp</c> table.
    /// </summary>
    private void insertBankReconciliationTmp()
    {
        bankReconciliationTmp.AccountId = bankReconciliationPrintoutTmp.AccountId;
        bankReconciliationTmp.Name = bankAccountTable.Name;
        bankReconciliationTmp.CurrencyCode = bankReconciliationPrintoutTmp.CurrencyCode;
        bankReconciliationTmp.AccountStatementDate = bankReconciliationPrintoutTmp.AccountStatementDate;
        bankReconciliationTmp.AccountStatementNum = bankReconciliationPrintoutTmp.BankAccountStatementNum;
        bankReconciliationTmp.ReconcileDate = bankReconciliationPrintoutTmp.ReconcileDate;
        bankReconciliationTmp.EndingBalance = bankReconciliationPrintoutTmp.EndingBalance;
        bankReconciliationTmp.PrevAccountStatementDate = bankReconciliationPrintoutTmp.PrevAccountStatementDate;
        bankReconciliationTmp.NotReconciledBalance = notReconciledBalance;
        bankReconciliationTmp.BalanceUltimoAccount = reconciledBalance + bankReconciliationPrintoutTmp.BankAccountBalance;
        bankReconciliationTmp.BalanceBankAccount = bankReconciliationPrintoutTmp.BankAccountBalance;
        bankReconciliationTmp.BalanceReconciled = reconciledBalance;
        bankReconciliationTmp.BalanceUltimoStatement = notReconciledBalance + bankReconciliationPrintoutTmp.EndingBalance;
        bankReconciliationTmp.TransDate = transDate;
        bankReconciliationTmp.Voucher = voucher;
        bankReconciliationTmp.AmountCur = correctedAmountCur;
        bankReconciliationTmp.PaymReference = paymReference;
        bankReconciliationTmp.DepositNum = depositNum;
        bankReconciliationTmp.VoucherVisibility = voucherVisibility;
        bankReconciliationTmp.CustVendName = custVendName;
        bankReconciliationTmp.insert();

        voucherVisibility = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printNotReconciledTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>notReconciledBalance</c>, <c>depositNum</c>, <c>transDate</c>, <c>voucher</c>, and
    /// <c>correctedAmountCur</c> values from the <c>BankAccountTransBal</c> table.
    /// </summary>
    private void printNotReconciledTransactions()
    {
        BankAccountTrans bankAccountTransBal;

        while select bankAccountTransBal
            order by TransDate, Voucher
            where bankAccountTransBal.AccountId == bankReconciliationPrintoutTmp.AccountId
                && bankAccountTransBal.TransDate <= bankReconciliationPrintoutTmp.AccountStatementDate
                && ((bankAccountTransBal.Included == false
                    && bankAccountTransBal.Reconciled == false)
                    || (bankAccountTransBal.AccountStatementDate > bankReconciliationPrintoutTmp.AccountStatementDate
                        && (bankAccountTransBal.Reconciled == true
                            || bankAccountTransBal.Included == true)))

        {
            tempBankAccountTrans = bankAccountTransBal;

            depositNum = '';
            depositNum = tempBankAccountTrans.DepositNum;
            tempBankAccountTrans.DepositNum = '';

            paymReference = '';
            paymReference = tempBankAccountTrans.PaymReference;
            tempBankAccountTrans.PaymReference = '';

            transDate = dateNull();
            transDate = tempBankAccountTrans.TransDate;
            tempBankAccountTrans.TransDate = dateNull();

            voucher = '';
            voucher = tempBankAccountTrans.Voucher;
            tempBankAccountTrans.Voucher = '';

            correctedAmountCur = tempBankAccountTrans.correctedAmountCur(false, 0);
            voucherVisibility = 1;

            custVendName = this.findRelatedCustVendName(tempBankAccountTrans);

            this.insertBankReconciliationTmp();

            notReconciledBalance += (bankAccountTransBal.AmountCur + bankAccountTransBal.AmountCorrect);
        }

        custVendName = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReconciledTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>reconciledBalance</c>, <c>depositNum</c>, <c>transDate</c>, <c>voucher</c>, and
    /// <c>correctedAmountCur</c> values from the <c>BankAccountTransBal</c> table.
    /// </summary>
    private void printReconciledTransactions()
    {
        BankAccountTrans bankAccountTransBal;

        while select bankAccountTransBal
            order by TransDate
            where bankAccountTransBal.AccountId == bankReconciliationPrintoutTmp.AccountId
                && bankAccountTransBal.AccountStatement == bankReconciliationPrintoutTmp.BankAccountStatementNum
                && bankAccountTransBal.AccountStatementDate == bankReconciliationPrintoutTmp.AccountStatementDate
                && (bankAccountTransBal.Included == true
                    || bankAccountTransBal.Reconciled == true)

        {
            tempBankAccountTrans = bankAccountTransBal;
            depositNum = '';
            depositNum = tempBankAccountTrans.DepositNum;
            tempBankAccountTrans.DepositNum = '';

            paymReference = '';
            paymReference = tempBankAccountTrans.PaymReference;
            tempBankAccountTrans.PaymReference = '';

            transDate = dateNull();
            transDate = tempBankAccountTrans.TransDate;
            tempBankAccountTrans.TransDate = dateNull();

            voucher = '';
            voucher = tempBankAccountTrans.Voucher;
            tempBankAccountTrans.Voucher = '';

            correctedAmountCur = tempBankAccountTrans.correctedAmountCur(false, 0);
            voucherVisibility = 2;

            custVendName = this.findRelatedCustVendName(tempBankAccountTrans);

            this.insertBankReconciliationTmp();
            reconciledBalance += (bankAccountTransBal.AmountCur + bankAccountTransBal.AmountCorrect);
        }

        custVendName = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedCustVendName</Name>
				<Source><![CDATA[
    private DirPartyName findRelatedCustVendName(BankAccountTrans _bankAccountTrans)
    {
        return _bankAccountTrans.findRelatedCustVendAccountInfo().AccountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic for <c>BankPaymAdviceCust</c> report.
    /// </summary>
    /// <remarks>
    /// The voucherVisibility and newPage variables are used for controlling the design at the SRS.
    /// </remarks>
    public void processReport()
    {
        this.initBankReconciliationPrintoutTmp();

        if (bankReconciliationPrintoutTmp.AccountId)
        {
            bankAccountTable = BankAccountTable::find(bankReconciliationPrintoutTmp.AccountId);
        }

        voucherVisibility = 0;
        this.printNotReconciledTransactions();

        voucherVisibility = 3;
        this.insertBankReconciliationTmp();

        this.printReconciledTransactions();

        voucherVisibility = 4;
        this.insertBankReconciliationTmp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>