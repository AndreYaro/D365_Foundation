<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterJournalPrint</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormletterJournalPrint</c> class is a base class that is used by specialized classes for printing of formletter documents.
/// </summary>
abstract class FormletterJournalPrint
implements SysPackable
{
    boolean             proforma;
    NoYes               printFormletter;
    RecordSortedList    journalList;
    container           printerSettingsFormletter;
    container           printerSettingsFormletterCopy;
    boolean             usePrintManagement;
    container           formletterProformaPrintPacked;

    // <GEERU>
    boolean             printFacture;
    boolean             printAcceptanceReport;
    boolean             printInventBaileeReport;
    boolean             printBillOfLading;
    boolean             printTransportInvoice;
    NoYes               printProductLabel;
    NoYes               printShelfLabel;
    NoYes               sendAsXml = true;

    Set                 factureList;
    RecordSortedList    factureSortedList;

    #isoCountryRegionCodes
    // </GEERU>

    // <GIN>
    boolean             printGRN;
    NoYes               printExciseFormLetter;
    // </GIN>

    #define.currentVersion(3)
    #LOCALMACRO.CurrentList
        proforma,
        printFormletter,
        printerSettingsFormletter,
        printerSettingsFormletterCopy,
        usePrintManagement,
        formletterProformaPrintPacked,
        // <GEERU>
        printFacture,
        printAcceptanceReport,
        printInventBaileeReport,
        printBillOfLading,
        printTransportInvoice,
        // </GEERU>
        // <GIN>
        printGRN,
        printExciseFormLetter,
        // </GIN>
        printProductLabel,
        printShelfLabel,
        sendAsXml
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Prints the document.
    /// </summary>
    abstract protected void doPrint()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterSorting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sorting parameters for the journal being processed.
    /// </summary>
    /// <param name="_sortingTableId">
    ///    The ID of the journal table.
    /// </param>
    /// <param name="_recIdField">
    ///    The record ID field in the journal table.
    /// </param>
    /// <param name="_sortingSubTableId">
    ///    The ID of subjournal table; optional.
    /// </param>
    /// <returns>
    ///    A <c>Container</c> object that contains the sorting parameters.
    /// </returns>
    protected container formLetterSorting(TableId    _sortingTableId,
                                          FieldId    _recIdField,
                                          TableId    _sortingSubTableId = 0)
    {
        return FormLetterSortingParameters::formLetterSorting(_sortingTableId, _recIdField, _sortingSubTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the printer settings.
    /// </summary>
    /// <param name="_originalCopy">
    ///    A value from the <c>PrintSetupOriginalCopy</c> enumeration type.
    /// </param>
    /// <returns>
    ///    A <c>Container</c> with printer settings.
    /// </returns>
    public container getPrinterSettingsFormletter(PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        if (_originalCopy == PrintSetupOriginalCopy::Copy)
        {
            return printerSettingsFormLetterCopy;
        }
        else
        {
            return printerSettingsFormLetter;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFactureList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the facture sorted list with sorting parameters.
    /// </summary>
    protected void initFactureList()
    {
        SetEnumerator   se;

        if (!factureList)
        {
            return;
        }
        se = factureList.getEnumerator();

        factureSortedList = new RecordSortedList(tableNum(FactureJour_RU));
        factureSortedList.sortOrderFromContainer(this.formLetterSorting(tableNum(FactureJour_RU), fieldNum(FactureJour_RU, RecId)));

        while (se.moveNext())
        {
            factureSortedList.ins(se.current(),false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalList</Name>
				<Source><![CDATA[
    private void initJournalList(Set _journalList)
    {
        SetEnumerator   se = _journalList.getEnumerator();

        journalList = this.newJournalList();
        while (se.moveNext())
        {
            journalList.ins(se.current(),false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a record sorted list.
    /// </summary>
    /// <returns>
    /// The constructed record sorted list.
    /// </returns>
    abstract public RecordSortedList newJournalList()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureList_RU</Name>
				<Source><![CDATA[
    public Set parmFactureList_RU(Set _factureList = factureList)
    {
        factureList = _factureList;
        return factureList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormletterProformaPrintPacked</Name>
				<Source><![CDATA[
    public container parmFormletterProformaPrintPacked(container _formletterProformaPrintPacked = formletterProformaPrintPacked)
    {
        formletterProformaPrintPacked = _formletterProformaPrintPacked;

        return formletterProformaPrintPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintAcceptanceReport_RU</Name>
				<Source><![CDATA[
    public boolean parmPrintAcceptanceReport_RU(boolean _printAcceptanceReport = printAcceptanceReport)
    {
        printAcceptanceReport = _printAcceptanceReport;
        return printAcceptanceReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintBillOfLading_RU</Name>
				<Source><![CDATA[
    public boolean  parmPrintBillOfLading_RU(boolean _printBillOfLading = printBillOfLading)
    {
        printBillOfLading = _printBillOfLading;
        return printBillOfLading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsFormLetter</Name>
				<Source><![CDATA[
    public container parmPrinterSettingsFormLetter(container _printerSettingsFormLetter = printerSettingsFormLetter)
    {
        printerSettingsFormLetter = _printerSettingsFormLetter;
        return printerSettingsFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsFormLetterCopy</Name>
				<Source><![CDATA[
    public container parmPrinterSettingsFormLetterCopy(container _printerSettingsFormLetterCopy = printerSettingsFormLetterCopy)
    {
        printerSettingsFormLetterCopy = _printerSettingsFormLetterCopy;
        return printerSettingsFormLetterCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFacture_RU</Name>
				<Source><![CDATA[
    public boolean parmPrintFacture_RU(boolean _printFacture = printFacture)
    {
        printFacture = _printFacture;
        return printFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFormletter</Name>
				<Source><![CDATA[
    public NoYes parmPrintFormletter(NoYes _printFormletter = printFormletter)
    {
        printFormletter = _printFormletter;
        return printFormletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintGRN_IN</Name>
				<Source><![CDATA[
    public boolean parmPrintGRN_IN(boolean _printGRN = printGRN)
    {
        printGRN = _printGRN;
        return printGRN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintInventBaileeReport_RU</Name>
				<Source><![CDATA[
    public boolean parmPrintInventBaileeReport_RU(boolean _printInventBaileeReport = printInventBaileeReport)
    {
        printInventBaileeReport = _printInventBaileeReport;
        return printInventBaileeReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintProductLabel</Name>
				<Source><![CDATA[
    public NoYes parmPrintProductLabel(NoYes _printProductLabel = printProductLabel)
    {
        printProductLabel = _printProductLabel;
        return printProductLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintShelfLabel</Name>
				<Source><![CDATA[
    public NoYes parmPrintShelfLabel(NoYes _printShelfLabel = printShelfLabel)
    {
        printShelfLabel = _printShelfLabel;
        return printShelfLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintTransportInvoice_RU</Name>
				<Source><![CDATA[
    public boolean parmPrintTransportInvoice_RU(NoYes _printTransportInvoice = printTransportInvoice)
    {
        printTransportInvoice = _printTransportInvoice;
        return printTransportInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProforma</Name>
				<Source><![CDATA[
    public boolean parmProforma(boolean _proforma = proforma)
    {
        proforma = _proforma;
        return proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePrintManagement</Name>
				<Source><![CDATA[
    public boolean parmUsePrintManagement(boolean _usePrintManagement = usePrintManagement)
    {
        usePrintManagement = _usePrintManagement;
        return usePrintManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSendAsXml</Name>
				<Source><![CDATA[
    public NoYes parmSendAsXml(NoYes _sendAsXml = sendAsXml)
    {
        sendAsXml = _sendAsXml;
        return sendAsXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintJournals</Name>
				<Source><![CDATA[
    private boolean mustPrintJournals()
    {
        if (this.parmPrintFormletter())
        {
            return true;
        }
        
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            (this.parmPrintAcceptanceReport_RU()
            || this.parmPrintFacture_RU()
            || this.parmPrintInventBaileeReport_RU()
            || this.parmPrintBillOfLading_RU()
            || this.parmPrintTransportInvoice_RU()))
        {
            return true;
        }
        // </GEERU>

        // <GIN>
        if (this.parmPrintGRN_IN()
          || (TaxParameters::isExciseEnable_IN() &&
              this.parmPrintExciseFormletter_IN()))
        {
            return true;
        }
        // </GIN>

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Prints and sends XML documents for each journal.
    /// </summary>
    /// <param name="_journalList">
    ///    A <c>Set</c> object that contains the journals to be processed.
    /// </param>
    public void printJournal(Set _journalList)
    {
        this.initJournalList(_journalList);

        if (this.mustPrintJournals())
        {
			if (journalList.len() > 0
            // <GEERU>
            || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
             && factureList && factureList.elements() > 0)
            // </GEERU>
            )
            {
                this.doPrint();

                if (this.parmSendAsXml())
                {
                    this.sendAsXML();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints product or shelf labels in the report.
    /// </summary>
    /// <param name="_args">
    /// An instance of the <c>Args</c> class with required arguments.
    /// </param>
    /// <param name="_journalSet">
    /// Set of journal records to be printed.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An Exception is thrown if the first parameter is null.
    /// </exception>
    public void printLabels(Args _args, Set _journalSet)
    {
        VendPackingSlipJour vendPackingSlipJour;

        if (!_args)
        {
            throw error("@SYS30498");
        }

        if (!journalList)
        {
            this.initJournalList(_journalSet);
        }

        if (this.parmPrintProductLabel())
        {
            _args.record(vendPackingSlipJour);
            RetailCreateSpecificLabel::runPrint(_args, journalList, RetailLabelTypeBase::ItemLabel);
        }

        if (this.parmPrintShelfLabel())
        {
            _args.record(vendPackingSlipJour);
            RetailCreateSpecificLabel::runPrint(_args, journalList, RetailLabelTypeBase::ShelfLabel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sends the document in XML format.
    /// </summary>
    /// <remarks>
    ///    The method must be overridden in specialized class if sending XML is supported by the document.
    /// </remarks>
    protected void sendAsXML()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormletterContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes an instance of the <c>FormletterJournalPrint</c> class.
    /// </summary>
    /// <param name="_formLetterContract">
    ///   An instance of the <c>FormletterContract</c> class.
    /// </param>
    /// <returns>
    ///   An instance of the <c>FormletterJournalPrint</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The function has been incorrectly called.
    /// </exception>
    static public FormletterJournalPrint newFromFormletterContract(FormLetterContract _formLetterContract)
    {
        var formLetterType = FormletterTypeBase::singletonFromFormletterType(_formLetterContract.getFormLetterType());
        if (formLetterType)
        {
            FormletterJournalPrint formletterJournalPrint;
            formletterJournalPrint = formLetterType.formletterJournalPrint(_formLetterContract);
            if (formletterJournalPrint)
            {
                formletterJournalPrint.parmProforma(_formLetterContract.parmProforma());
                formletterJournalPrint.parmUsePrintManagement(_formLetterContract.parmUsePrintManagement());
                formletterJournalPrint.parmPrintFormletter(_formLetterContract.parmPrintFormletter());
                formletterJournalPrint.parmPrinterSettingsFormLetter(SysOperationHelper::base64Decode(_formLetterContract.parmPrintersettingsFormletter()));
                formletterJournalPrint.parmPrinterSettingsFormLetterCopy(SysOperationHelper::base64Decode(_formLetterContract.parmPrintersettingsFormletterCopy()));
                // <GEERU>
                formletterJournalPrint.parmPrintFacture_RU(_formLetterContract.parmPrintFacture_RU());
                formletterJournalPrint.parmPrintAcceptanceReport_RU(_formLetterContract.parmPrintAcceptanceReport_RU());
                formletterJournalPrint.parmPrintInventBaileeReport_RU(_formLetterContract.parmPrintInventBaileeReport_RU());
                // </GEERU>

                // <GIN>
                formletterJournalPrint.parmPrintGRN_IN(_formLetterContract.parmPrintGRN_IN());
                formletterJournalPrint.parmPrintExciseFormletter_IN(_formLetterContract.parmPrintExciseFormletter_IN());
                // </GIN>

                return formletterJournalPrint;
            }
        }
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchJournalPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes an instance of the <c>FormletterJournalPrint</c> class.
    /// </summary>
    /// <param name="_formLetterContract">
    ///   An instance of the <c>FormletterContract</c> class.
    /// </param>
    /// <returns>
    ///   An instance of the <c>FormletterJournalPrint</c> class.
    /// </returns>
    static FormletterJournalPrint newPurchJournalPrint(FormLetterContract  _formLetterContract)
    {
        switch (_formLetterContract.getDocumentStatus())
        {
            case DocumentStatus::PurchaseOrder :
                return  PurchPurchOrderJournalPrint::construct();
            case DocumentStatus::ConfirmationRequest :
                return  PurchConfirmationRequestPrint::construct();
            case DocumentStatus::ReceiptsList:
                return  PurchReceiptListJournalPrint::construct();

            case DocumentStatus::PackingSlip:
                return  PurchPackingSlipJournalPrint::newFromFormletterContract(_formLetterContract);

            // <GEEPL>
            case DocumentStatus::PlSAD :
            // </GEEPL>
            case DocumentStatus::Invoice,
                 DocumentStatus::ApproveJournal:
            return PurchInvoiceJournalPrint::newFromFormletterContract(_formLetterContract);

            // <GEERU>
            case DocumentStatus::Invoice4Paym_RU:
                return PurchInvoice4PaymJournalPrint_RU::construct();
            case DocumentStatus::Facture_RU:
                return PurchFactureJournalPrint_RU::construct();

            // </GEERU>
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchRFQJournalPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes an instance of the <c>FormletterJournalPrint</c> class.
    /// </summary>
    /// <param name="_formLetterContract">
    ///   An instance of the <c>FormletterContract</c> class.
    /// </param>
    /// <returns>
    ///   An instance of the <c>FormletterJournalPrint</c> class.
    /// </returns>
    static FormletterJournalPrint newPurchRFQJournalPrint(FormLetterContract  _formLetterContract)
    {
        switch (_formLetterContract.getDocumentStatus())
        {
            case DocumentStatus::RFQ :
            case DocumentStatus::RFQAccept :
            case DocumentStatus::RFQReject :
            case DocumentStatus::RFQReSend :
                return PurchRFQJournalPrint::construct();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesJournalPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes an instance of the <c>FormletterJournalPrint</c> class.
    /// </summary>
    /// <param name="_formLetterContract">
    ///   An instance of the <c>FormletterContract</c> class.
    /// </param>
    /// <returns>
    ///   An instance of the <c>FormletterJournalPrint</c> class.
    /// </returns>
    static FormletterJournalPrint newSalesJournalPrint(FormLetterContract  _formLetterContract)
    {
        switch (_formLetterContract.getDocumentStatus())
        {
            case DocumentStatus::Confirmation :
                return  SalesConfirmJournalPrint::construct();

            case DocumentStatus::PickingList :
            case DocumentStatus::ProjectPickingList:
                return  SalesPickingListJournalPrint::construct();

            case DocumentStatus::PackingSlip,
                DocumentStatus::ProjectPackingSlip,
                // <GBR>
                DocumentStatus::DeliverySlip_BR,
                DocumentStatus::DeliverySlipProject_BR:
                // </GBR>
                return  SalesPackingSlipJournalPrint::newFromFormletterContract(_formLetterContract);

            case DocumentStatus::Invoice,
                 DocumentStatus::ProjectInvoice:
            return SalesInvoiceJournalPrint::newFromFormletterContract(_formLetterContract);
            // <GEERU>

            case DocumentStatus::Invoice4Paym_RU:
                return SalesInvoice4PaymJournalPrint_RU::construct();

            case DocumentStatus::Facture_RU:
                return SalesFactureJournalPrint_RU::newFromFormletterContract(_formLetterContract);
            // </GEERU>
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintExciseFormletter_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the PrintExciseFormLetter_IN parameter.
    /// </summary>
    /// <param name="_printExciseFormletter">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the PrintExciseFormLetter_IN parameter.
    /// </returns>
    public NoYes parmPrintExciseFormletter_IN(NoYes _printExciseFormletter = printExciseFormLetter)
    {
        printExciseFormLetter = _printExciseFormletter;
        return printExciseFormLetter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>