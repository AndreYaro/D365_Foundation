<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPriceGroupListDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjPriceGroupListDP</c> class provides data for the <c>ProjPriceGroupList</c> report,
///    contains the declaration of the global variables, and contains the variable declarations to be used
///    in this class.
/// </summary>
/// <remarks>
///    This class provides methods to fetch the data that is used by the <c>ProjPriceGroupList</c> report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(ProjPriceGroupListContract))
]

class ProjPriceGroupListDP extends SRSReportDataProviderBase
{
    TmpProjPriceGroupList   tmpProjPriceGroupList;
    PriceDiscGroup          priceDiscGroup;
    ProjTable               projTable;
    ProjInvoiceTable        projInvoiceTable;
    CustTable               custTable;
    boolean                 includeProject;
    boolean                 includeInvoice;
    boolean                 includeCustomer;
    ProjPriceGroupID        priceGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpProjPriceGroupList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table to retrieve the data table.
    /// </summary>
    /// <returns>
    ///    The required report data from temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('TmpProjPriceGroupList')
    ]
    public TmpProjPriceGroupList getTmpProjPriceGroupList()
    {
        select tmpProjPriceGroupList;
        return tmpProjPriceGroupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the temporary table with the values from the <c>CustTable</c> table.
    /// </summary>
    public void initFromCustTable()
    {
        tmpProjPriceGroupList.ProjPriceGroup        = priceDiscGroup.GroupId;
        tmpProjPriceGroupList.ProjPriceGroupType    = ProjListStateProjType::Customer;
        tmpProjPriceGroupList.id                    = custTable.AccountNum;
        tmpProjPriceGroupList.Name                  = custTable.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the temporary table with the values from the <c>ProjInvoiceTable</c> class.
    /// </summary>
    public void initFromProjInvoiceTable()
    {
        tmpProjPriceGroupList.ProjPriceGroup        = priceDiscGroup.GroupId;
        tmpProjPriceGroupList.ProjPriceGroupType    = ProjListStateProjType::InvoiceProject;
        tmpProjPriceGroupList.id                    = projInvoiceTable.ProjInvoiceProjId;
        tmpProjPriceGroupList.Name                  = projInvoiceTable.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the temporary table with the values from the <c>ProjTable</c> table.
    /// </summary>
    public void initFromProjTable()
    {
        tmpProjPriceGroupList.ProjPriceGroup        = priceDiscGroup.GroupId;
        tmpProjPriceGroupList.ProjPriceGroupType    = ProjListStateProjType::Project;
        tmpProjPriceGroupList.id                    = projTable.ProjId;
        tmpProjPriceGroupList.Name                  = projTable.Name;
        tmpProjPriceGroupList.ProjType              = projTable.Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        Query                   queryAttachedPriceGroup;
        QueryRun                queryRunAttachedPriceGroup;

        QueryBuildDataSource    queryBuildDS_PriceGroup;
        QueryBuildDataSource    queryBuildDS_AttachedPriceGroup;

        QueryBuildRange         criteriaProjPriceGroup;
        QueryBuildRange         criteriaPriceGroupType;
        QueryBuildRange         criteriaPriceGroupModule;
        Query                   query;
        QueryRun                queryRun;

        ProjPriceGroupListContract contract = this.parmDataContract() as ProjPriceGroupListContract;

        priceGroup          = contract.parmPriceGroupID();
        includeProject      = contract.parmIncludeProject();
        includeInvoice      = contract.parmIncludeInvoice();
        includeCustomer     = contract.parmIncludeCustomer();

        // Query in PriceDiscGroup, find matching price group
        query   = new Query();
        queryBuildDS_PriceGroup  = query.addDataSource(tableNum(PriceDiscGroup));

        criteriaProjPriceGroup   = queryBuildDS_PriceGroup.addRange(fieldNum(PriceDiscGroup, GroupId));
        criteriaProjPriceGroup.value(priceGroup);
        criteriaPriceGroupType   = queryBuildDS_PriceGroup.addRange(fieldNum(PriceDiscGroup, Type));
        criteriaPriceGroupType.value(any2Str(PriceGroupType::PriceGroup));
        criteriaPriceGroupModule = queryBuildDS_PriceGroup.addRange(fieldNum(PriceDiscGroup, Module));
        criteriaPriceGroupModule.value(any2Str(ModuleInventCustVend::Cust));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            priceDiscGroup = queryRun.get(tableNum(PriceDiscGroup));

            if (includeProject)
            {
                // Query in ProjTable, find matching records
                queryAttachedPriceGroup         = new Query();
                queryBuildDS_AttachedPriceGroup = queryAttachedPriceGroup.addDataSource(tableNum(ProjTable));

                criteriaProjPriceGroup  = queryBuildDS_AttachedPriceGroup.addRange(fieldNum(ProjTable, ProjPriceGroup));
                criteriaProjPriceGroup.value(priceDiscGroup.GroupId);

                queryRunAttachedPriceGroup      = new QueryRun(queryAttachedPriceGroup);

                // Save to tmpProjPriceGroupList table
                while (queryRunAttachedPriceGroup.next())
                {
                    projTable = queryRunAttachedPriceGroup.get(tableNum(ProjTable));
                    tmpProjPriceGroupList.clear();
                    this.initFromProjTable();
                    tmpProjPriceGroupList.insert();
                }
            }

            if (includeInvoice)
            {
                // Query in ProjInvoiceTable, find matching records
                queryAttachedPriceGroup         = new Query();
                queryBuildDS_AttachedPriceGroup = queryAttachedPriceGroup.addDataSource(tableNum(ProjInvoiceTable));
                criteriaProjPriceGroup  = queryBuildDS_AttachedPriceGroup.addRange(fieldNum(ProjInvoiceTable, ProjPriceGroup));
                criteriaProjPriceGroup.value(priceDiscGroup.GroupId);

                queryRunAttachedPriceGroup      = new QueryRun(queryAttachedPriceGroup);

                // Save to tmpProjPriceGroupList table
                while (queryRunAttachedPriceGroup.next())
                {
                    projInvoiceTable = queryRunAttachedPriceGroup.get(tableNum(ProjInvoiceTable));
                    tmpProjPriceGroupList.clear();
                    this.initFromProjInvoiceTable();
                    tmpProjPriceGroupList.insert();
                }
            }

            if (includeCustomer)
            {
                // Query in CustTable, find matching records
                queryAttachedPriceGroup = new Query();
                queryBuildDS_AttachedPriceGroup = queryAttachedPriceGroup.addDataSource(tableNum(CustTable));

                criteriaProjPriceGroup  = queryBuildDS_AttachedPriceGroup.addRange(fieldNum(CustTable, PriceGroup));
                criteriaProjPriceGroup.value(priceDiscGroup.GroupId);

                queryRunAttachedPriceGroup      = new QueryRun(queryAttachedPriceGroup);

                // Save to tmpProjPriceGroupList table
                while (queryRunAttachedPriceGroup.next())
                {
                    custTable = queryRunAttachedPriceGroup.get(tableNum(CustTable));
                    tmpProjPriceGroupList.clear();
                    this.initFromCustTable();
                    tmpProjPriceGroupList.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>