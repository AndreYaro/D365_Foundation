<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableStatusDelayUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used responsible for delay updating purchase order status from purchase lines.
/// </summary>
internal final class PurchTableStatusDelayUpdate
{
    private static PurchTableStatusDelayUpdate singleton;
    private Map purchIdDataAreaIdData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a singleton instance of <c>PurchTableStatusDelayUpdate</c> .
    /// </summary>
    /// <returns>
    /// A singleton <c>PurchTableStatusDelayUpdate</c> instance.
    /// </returns>
    [Hookable(false)]
    internal static PurchTableStatusDelayUpdate instance()
    {
        if (!singleton)
        {
            singleton = new PurchTableStatusDelayUpdate();
        }

        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        purchIdDataAreaIdData = new Map(Types::Int64, Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    private void registerEventHandlers()
    {
        appl.onTtsNotifyAbort += eventhandler(this.onTtsAbort);
        appl.onTtsNotifyPreCommit += eventhandler(this.onTtsPreCommit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterEventHandlers</Name>
				<Source><![CDATA[
    private void unregisterEventHandlers()
    {
        appl.onTtsNotifyAbort -= eventhandler(this.onTtsAbort);
        appl.onTtsNotifyPreCommit -= eventhandler(this.onTtsPreCommit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsAbort</Name>
				<Source><![CDATA[
    private void onTtsAbort()
    {
        this.unregisterEventHandlers();
        this.fetchAndClearCurrentTransactionData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsPreCommit</Name>
				<Source><![CDATA[
    private void onTtsPreCommit()
    {
        this.unregisterEventHandlers();
        this.updatePurchStatus(this.fetchAndClearCurrentTransactionData());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlTransactionIdFromDatabase</Name>
				<Source><![CDATA[
    private CreatedTransactionId getSqlTransactionIdFromDatabase()
    {
        Statement statement;
        Connection connection;

        try
        {
            connection = new Connection();
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery('SELECT CURRENT_TRANSACTION_ID()');
            resultSet.next();
            
            return resultSet.getInt64(1);
        }
        finally
        {
            if (statement)
            {
                statement.close();
            }
            if (connection)
            {
                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInTransaction</Name>
				<Source><![CDATA[
    private static boolean isInTransaction()
    {
        return appl && appl.ttsLevel() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDelayUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether delay updating purchase order status.
    /// </summary>
    /// <param name = "_purchId">The purchase order number to be checked</param>
    /// <param name = "_dataAreadId">The data aread id to be checked</param>
    /// <returns>True when delay updating purchase order status; Otherwise false</returns>
    [Hookable(false)]
    internal boolean isDelayUpdating(PurchId _purchId, DataAreaId _dataAreadId)
    {
        boolean ret = false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchAndClearCurrentTransactionData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetchs and clears map data.
    /// </summary>
    /// <returns>The set that contains purchid and dataareaid.</returns>
    private Set fetchAndClearCurrentTransactionData()
    {
        Set purchIdDataAreaIdSet;
        CreatedTransactionId key = this.getSqlTransactionIdFromDatabase();

        if (purchIdDataAreaIdData.exists(key))
        {
            purchIdDataAreaIdSet = purchIdDataAreaIdData.lookup(key) as Set;
            purchIdDataAreaIdData.remove(key);
        }

        return purchIdDataAreaIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchStatus</Name>
				<Source><![CDATA[
    private void updatePurchStatus(Set _purchIdDataAreaIdSet)
    {
        if (_purchIdDataAreaIdSet && _purchIdDataAreaIdSet.elements())
        {
            SetEnumerator sePurchIdDataAreaIdSet = _purchIdDataAreaIdSet.getEnumerator();
            while (sePurchIdDataAreaIdSet.moveNext())
            {
                PurchId purchId;
                DataAreaId dataAreadId;
                [purchId, dataAreadId] = sePurchIdDataAreaIdSet.current();
                changecompany(dataAreadId)
                {
                    PurchTable purchTable = PurchTable::find(purchId, true);
                    if (purchTable)
                    {
                        purchTable.updateStatusFromPurchLines();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>