<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJobCardController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdJobCardController</c> class is the controller class for the <c>ProdJobCard</c> report.
/// </summary>
class ProdJobCardController extends SrsReportRunController implements BatchRetryable
{
    #define.BarcodeFontName('BarcodeFontName')
    #define.BarcodeFontSize('BarcodeFontSize')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barcodeHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>JmgBarcodeHelper</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>JmgBarcodeHelper</c> class.
    /// </returns>
    protected JmgBarcodeHelper barcodeHelper()
    {
        return JmgBarcodeHelper::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first query.
    /// </summary>
    /// <returns>
    /// The first query.
    /// </returns>
    protected Query getQuery()
    {
        return this.getFirstQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
/// <summary>
    /// Provides the ability to modify the report contract before the dialog box is displayed to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract, common use case is to add or change a query. This
    /// method is called only during the interactive scenario, before rendering the UI to user.For batch
    /// scenario, we do not call this method, because there is no user interaction and contract values are
    /// already saved in batch.Do not initialize any instance variables in this code if they are used
    /// during the lifetime of controller, because these will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        if (args)
        {
            this.parmShowDialog(!args.parmEnum());
        }
        this.setRanges();
        this.setPrintSettings();
    }
]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method to change report contract before running report.
    /// </summary>
    protected void preRunModifyContract()
    {
        SrsReportDataContract dataContract = this.parmReportContract();
        SrsReportRdlDataContract contract = dataContract.parmRdlContract();
        JmgBarcodeHelper barcodeHelper = this.barcodeHelper();

        contract.setValue(#BarcodeFontName, barcodeHelper.getBarcodeFontName());
        contract.setValue(#BarcodeFontSize, barcodeHelper.getBarcodeFontSize());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the print settings.
    /// </summary>
    public void setPrintSettings()
    {
        if (args && (args.caller() is ProdUpdRelease))
        {
            ProdUpdRelease prodUpdRelease = args.caller();
            ProdParmRelease prodParmRelease = prodUpdRelease.parmParmBuffer();

            SrsReportDataContract dataContract = this.parmReportContract();
            dataContract.parmPrintSettings(new SRSPrintDestinationSettings(prodParmRelease.SetupPrintJob));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges.
    /// </summary>
    public void setRanges()
    {
        ProdParmRelease         prodParmRelease;
        Query                   query = this.getQuery();

        if (args)
        {
            QueryBuildDataSource queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(ProdTable));
            QueryBuildRange queryBuildRangeProd = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(ProdTable,ProdId));

            if (args.caller() is ProdUpdRelease)
            {
                ProdUpdRelease prodUpdRelease = args.caller();
                prodParmRelease = prodUpdRelease.parmParmBuffer();
                queryBuildRangeProd.value(prodParmRelease.ProdId);
            }

            if (args.dataset())
            {
                switch (args.dataset())
                {
                    case(tableNum(ProdTable)) :
                        ProdTable prodTable = args.record();
                        queryBuildRangeProd.value(prodTable.ProdId);
                        break;
                    case(tableNum(ProdJournalBOM)) :
                        ProdJournalBOM prodJournalBOM = args.record();
                        queryBuildRangeProd.value(prodJournalBOM.ProdId);
                        break;
                    case(tableNum(ProdParmRelease)) :
                        prodParmRelease = args.record();
                        queryBuildRangeProd.value(prodParmRelease.ProdId);
                        break;
                    default:
                        throw error(strFmt("@SYS23396",funcName()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        ProdJobCardController::showReport(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showReport</Name>
				<Source><![CDATA[
/// <summary>
    /// Displays the <c>ProdJobCard</c>Microsoft SQL Server Reporting Services report.
    /// </summary>
    /// <param name="_args">
    /// The arguments of the <c>ProdJobCard</c>Microsoft SQL Server Reporting Services report.
    /// </param>
    /// <param name="_controller">
    /// An instance of the <c>ProdJobCardController</c> class.
    /// </param>
    public static void showReport(Args _args, ProdJobCardController _controller = new ProdJobCardController())
    {
        _controller.parmReportName(ssrsReportStr(ProdJobCard,Report));
        _controller.parmArgs(_args);
        _controller.startOperation();
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
