<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransRevenueProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjTransRevenueProposal
extends ProjTransRevenue
{
    ProjProposalRevenue projProposalRevenue;
    ProjRevenueTrans    projRevenueTrans;
    ProjTransStatus     proposalTransStatus;

    boolean             calcTransTurnover;
    AmountCur           transTurnover;
    boolean             calcLedgerSalesAmountMST;
    AmountMST           ledgerSalesAmountMST;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether revenue from this transaction can be accrued.
    /// </summary>
    /// <returns>
    /// true if revenue from this transaction can be accrued; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This value is based on project line property and funding source type associated with this
    /// transaction.
    /// </remarks>
    public boolean canBeAccrued()
    {
        boolean     ret;

        ret = super();

        if (this.smaSubscriptionId())
        {
            if (SMASubscriptionTable::find(this.smaSubscriptionId()).canBeAccrued())
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjCategoryId categoryId()
    {
        return projRevenueTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projRevenueTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projRevenueTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projProposalRevenue.projProposalJour().FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransDate</Name>
				<Source><![CDATA[
    TransDate getTaxTransDate()
    {
        return projRevenueTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxBuffer</Name>
				<Source><![CDATA[
    boolean hasTaxBuffer()
    {
        if (projRevenueTrans)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerSalesAmountMST()
    {
        AmountMST                   ret;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjTrans                   projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueProposal)))
        {
            if (!calcLedgerSalesAmountMST)
            {
                calcLedgerSalesAmountMST = true;
                while select projProposalRevenueDetail
                where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                    join projRevenueTransSale
                        where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalRevenueSale(projProposalRevenue, projProposalRevenueDetail, projRevenueTransSale);
                    ledgerSalesAmountMST += projTransSale.ledgerSalesAmountMST();
                }
            }

            ret = ledgerSalesAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projRevenueTrans.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalRevenue _projProposalRevenue)
    {
        projProposalRevenue = _projProposalRevenue;
        projRevenueTrans    = ProjRevenueTrans::find(projProposalRevenue.TransId);

        super(_projProposalRevenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin of revenues on this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjOriginRevenue::Journal</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    ProjOrigin originRevenue()
    {
        return projRevenueTrans.TransactionOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjId projId()
    {
        return projRevenueTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjProposalId proposalId()
    {
        return projProposalRevenue.ProposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalTransStatus</Name>
				<Source><![CDATA[
    private ProjTransStatus proposalTransStatus()
    {
        ProjProposalRevenueDetail  projProposalRevenueDetail;
        ProjRevenueTransSale       projRevenueTransSale;

        if (!proposalTransStatus)
        {
            select SaleRefRecId from projProposalRevenueDetail
            where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                join TransStatus from projRevenueTransSale
                    where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId;

            proposalTransStatus = projRevenueTransSale.TransStatus;
        }

        return proposalTransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projProposalRevenue.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific revenue transaction.
    /// </remarks>
    public Qty qty()
    {
        boolean invoiced   = ProjProposalJour::find(projProposalRevenue.ProposalId).LineProperty   == ProjLinePropertyCode::Invoiced;

        if (invoiced)
        {
            return (select projInvoiceRevenue
                    where projInvoiceRevenue.ProjInvoiceId == ProjProposalJour::find(projProposalRevenue.ProposalId).ProjInvoiceId
                       && projInvoiceRevenue.TransId       == this.transId()).Qty;
        }
        else
        {
            if (this.proposalTransStatus()   == ProjTransStatus::CreditnoteProposal)
            {
                return -projRevenueTrans.Qty;
            }
            else
            {
                return projRevenueTrans.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projProposalRevenue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projRevenueTrans.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projRevenueTrans.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    SalesPrice salesPrice()
    {
        SalesPrice  ret;
        Qty         qty;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueProposal)))
        {
            qty = this.qty();
            ret = qty ? CurrencyExchangeHelper::price(this.transTurnover() / qty, this.currencyIdSales()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaBasePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the base price of the subscription that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMABasePrice smaBasePrice()
    {
        return projRevenueTrans.smaBasePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaEnddate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date for the subscription that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// A null date.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMAEnddate smaEnddate()
    {
        return projRevenueTrans.smaEnddate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the index to use for the calculation of the indexed sales price for the subscription that
    /// is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMAIndex smaIndex()
    {
        return projRevenueTrans.smaIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date for the subscription that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// A null date.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMAStartDate smaStartDate()
    {
        return projRevenueTrans.smaStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaSubscriptionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the subscription that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMASubscriptionId smaSubscriptionId()
    {
        return projRevenueTrans.smaSubscriptionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaSubscriptionPeriodType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the subscription type of the subscription associated with this transaction.
    /// </summary>
    /// <returns>
    /// The <c>SMASubscriptionPeriodType::Regular</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMASubscriptionPeriodType smaSubscriptionPeriodType()
    {
        return projRevenueTrans.smaSubscriptionPeriodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjProposalRevenue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projProposalRevenue.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projProposalRevenue.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    TransDate   transDate()
    {
        return projProposalRevenue.projRevenueTrans().TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projProposalRevenue.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur                   ret;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjTrans                   projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueProposal)))
        {
            if (!calcTransTurnover)
            {
                calcTransTurnover = true;
                while select projProposalRevenueDetail
                where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                    join projRevenueTransSale
                        where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalRevenueSale(projProposalRevenue, projProposalRevenueDetail, projRevenueTransSale);
                    transTurnover += projTransSale.transTurnover();
                }
            }

            ret = transTurnover;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnoverGTE</Name>
				<Source><![CDATA[
    public AmountCur transTurnoverGTE()
    {
        ITaxDocumentLine               taxDocumentLineObject;
        AmountCur                      inclTaxAmount;
        AmountCur                      balanceGTE;
        AmountCur                      balance            = this.transTurnover();
        ITaxDocument                   taxDocumentObject;

        select firstonly projRevenueTrans where projRevenueTrans.TransId == projProposalRevenue.TransId;

        if (projRevenueTrans.TransactionOrigin == ProjOrigin::FeeJournal)
        {
            TaxEngineProjRevenueTransHeader revenueTransHeader = TaxEngineProjRevenueTransHeader::findOrCreateByProjProposalJour(projProposalRevenue.projProposalJour());
            taxDocumentObject = TaxBusinessService::getTaxDocumentBySource(revenueTransHeader.TableId, revenueTransHeader.RecId);
        }
        else if (projRevenueTrans.TransactionOrigin == ProjOrigin::Subscription)
        {
            TaxEngineProjRevenueSubTransHeader revenueSubTransheader = TaxEngineProjRevenueSubTransHeader::findOrCreateByProjProposalJour(projProposalRevenue.projProposalJour());
            taxDocumentObject = TaxBusinessService::getTaxDocumentBySource(revenueSubTransheader.TableId, revenueSubTransheader.RecId);
        }

        if (taxDocumentObject)
        {
            taxDocumentLineObject = taxDocumentObject.findLineBySource(projProposalRevenue.TableId, projProposalRevenue.RecId);
            inclTaxAmount = taxDocumentLineObject.getInclTax().amountTransactionCurrency();

            if (inclTaxAmount)
            {
                if (balance < 0)
                {
                    balanceGTE = CurrencyExchangeHelper::amount(abs(balance) - abs(inclTaxAmount)) * -1;
                }
                else
                {
                    balanceGTE = CurrencyExchangeHelper::amount(balance - abs(inclTaxAmount));
                }
            }
            else
            {
                balanceGTE = balance;
            }
        }
        else
        {
            balanceGTE = balance;
        }
        return balanceGTE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransTxt txt()
    {
        return projProposalRevenue.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    Voucher voucherInvoice()
    {
        Voucher ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>