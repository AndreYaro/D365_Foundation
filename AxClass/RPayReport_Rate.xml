<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport_Rate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The rates report.
/// </summary>
class RPayReport_Rate extends OXMLExcelReport_RPay implements BatchRetryable
{
    QueryRun        queryRun;
    Counter         pageNumber;
    RPayRateType    rateType;
    DialogField     dialogRateType;

    #define.Prolog('PROLOG')
    #define.Header('HEADER')
    #define.TypeHeader('TYPEHEADER')
    #define.RateHeader('RATEHEADER')
    #define.RateBody('RATEBODY')
    #define.CritHeader('CRITHEADER')
    #define.CritBody('CRITBODY')

    #define.pageWidth(9)

    #define.CurrentVersion(1)
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        rateType
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        RPayRateTypeAC      prevType;
        RPayRateCode        prevRate;
        RPayRateCriterion   prevCrit;
        RecId               prevRateTransId;

        RPayRateTrans       rateTrans;
        RPayRateCritTrans   critTrans;

        currentHeight = 0;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.execute(#Prolog);

        this.execute(#Header);

        this.updateQuery();
        queryRun.reset();
        isReportEmpty = true;
        while (queryRun.next())
        {
            rateTrans = queryRun.get(tableNum(RPayRateTrans));
            critTrans = queryRun.get(tableNum(RPayRateCritTrans));

            if (rateTrans.RateTypeAC != prevType)
            {
                this.execute(#TypeHeader);
                prevType = rateTrans.RateTypeAC;
                prevRate = '';
                prevRateTransId = 0;
                prevCrit = 0;
            }

            if (rateTrans.PayRate != prevRate)
            {
                this.execute(#RateHeader);
                prevRate = rateTrans.PayRate;
                prevRateTransId = 0;
                prevCrit = 0;
            }

            if (rateTrans.RecId != prevRateTransId)
            {
                this.execute(#RateBody);
                if (critTrans.RecId)
                {
                    this.execute(#critHeader);
                }
                prevRateTransId = rateTrans.RecId;
                prevCrit = 0;
            }

            if (critTrans)
            {
                this.execute(#CritBody);
                prevCrit = critTrans.Criterion;
            }
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;

        this.updateQuery();
        dialog = super();

        dialog.addGroup("@SYS2163");
        dialogRateType = dialog.addFieldValue(enumStr(RPayRateType), rateType);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RPayReport_Rate';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCritBody</Name>
				<Source><![CDATA[
    #define.critname('critname')
    #define.critdata('critdata')
    private void fillCritBody()
    {
        RPayRateCritTrans critTrans = QueryRun.get(tableNum(RPayRateCritTrans));
        this.insertValueToSection(#critname, critTrans.Criterion);
        this.insertValueToSection(#critdata, critTrans.Value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCritHeader</Name>
				<Source><![CDATA[
    #define.critTitle('critTitle')
    #define.critValueTitle('critValueTitle')
    private void fillCritHeader()
    {
        this.insertValueToSection(#critTitle, "@SYS1046");
        this.insertValueToSection(#critValueTitle, "@SYS41043");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Prolog:
                this.fillProlog();
                break;
            case #Header:
                this.fillHeader();
                break;
            case #TypeHeader:
                this.fillTypeHeader();
                break;
            case #RateHeader:
                this.fillRateHeader();
                break;
            case #RateBody:
                this.fillRateBody();
                break;
            case #CritHeader:
                this.fillCritHeader();
                break;
            case #CritBody:
                this.fillCritBody();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    #define.Title('title')
    #define.datetime('datetime')
    #define.companyName('companyname')
    #define.pageNumber('pagenum')
    private void fillHeader()
    {
        utcdatetime dateTime = DateTimeUtil::applyTimeZoneOffset(
            DateTimeUtil::utcNow(),
            DateTimeUtil::getCompanyTimeZone());

        this.insertValueToSection(#dateTime,        dateTime);
        this.insertValueToSection(#Title, "@GLS105157");
        this.insertValueToSection(#companyName,     CompanyInfo::find().Name);
        this.insertValueToSection(#pageNumber,      strFmt("@SYS24160", pageNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    #define.ratetype_title('ratetype_title')
    #define.ratetype('ratetype')
    private void fillProlog()
    {
        this.insertValueToSection(#ratetype_title, "@RUP239");
        this.insertValueToSection(#ratetype, enum2Value(rateType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRateBody</Name>
				<Source><![CDATA[
    #define.valueDate('valuedate')
    #define.value('value')
    private void fillRateBody()
    {
        RPayRateTrans           rateTrans = queryRun.get(tableNum(RPayRateTrans));

        this.insertValueToSection(#valuedate, strFmt("@SYS82282", rateTrans.RateDate));
        this.insertValueToSection(#value, RPayReport_Rate::getDisplayValueForReport(rateTrans.displayValue(), rateTrans.PayRate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRateHeader</Name>
				<Source><![CDATA[
    #define.rateid('rateid')
    #define.ratename('ratename')
    #define.defaultValue('defaultValue')
    #define.defaultTitle('defaultTitle')
    #define.dateTitle('dateTitle')
    #define.valueTitle('valueTitle')
    private void fillRateHeader()
    {
        RPayRateTrans   rateTrans = queryRun.get(tableNum(RPayRateTrans));
        RPayRateTable   rateTable = RPayRateTable::find(rateTrans.PayRate);

        this.insertValueToSection(#rateId, rateTrans.PayRate);
        this.insertValueToSection(#ratename, RPayRateTable::find(rateTrans.PayRate).Name);
        this.insertValueToSection(#defaultValue, RPayReport_Rate::getDisplayValueForReport(rateTable.RateDefaultValue, rateTable.PayRate));
        this.insertValueToSection(#defaultTitle, "@SYS40175");
        this.insertValueToSection(#dateTitle, "@SYS80056");
        this.insertValueToSection(#valueTitle, "@SYS41043");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTypeHeader</Name>
				<Source><![CDATA[
    #define.ratetypeTitle('ratetypeTitle')
    #define.ratetypeid('ratetypeid')
    #define.ratetypename('ratetypename')
    private void fillTypeHeader()
    {
        RPayRateTrans    rateTrans = queryRun.get(tableNum(RPayRateTrans));

        this.insertValueToSection(#ratetypeTitle, enum2Value(rateTrans.LineType));
        this.insertValueToSection(#ratetypeid, rateTrans.RateTypeAC);

        switch (rateTrans.LineType)
        {
            case RPayRateType::EmplGroup:
                this.insertValueToSection(#rateTypeName, RPayGroupTable::find(rateTrans.RateTypeAC).Name);
                break;
            case RPayRateType::Employee:
                this.insertValueToSection(#rateTypeName, RHRMEmplTable::emplId2Name(rateTrans.rateTypeAc));
                break;
            case RPayRateType::HrmOrganization:
                this.insertValueToSection(#rateTypeName, RPayHRMOrganization::find(rateTrans.RateTypeAC).description);
                break;
            case RPayRateType::Person:
                this.insertValueToSection(#rateTypeName, RHRMPersonTable::find(rateTrans.RateTypeAC).fio());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        rateType = dialogRateType.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    public boolean init()
    {
        boolean ret = super();

        if (ret)
        {
            pageNumber = 1;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        queryRun = this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private QueryRun initQueryRun()
    {
        Query                   query;

        QueryBuildDataSource    rateTransDS;
        QueryBuildDataSource    critTransDS;

        query = new Query();

        rateTransDS = query.addDataSource(tableNum(RPayRateTrans));

        critTransDS = rateTransDS.addDataSource(tableNum(RPayRateCritTrans));
        critTransDS.joinMode(JoinMode::OuterJoin);
        critTransDS.relations(true);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Prolog);
        this.addSection(#Header);
        this.addSection(#TypeHeader);
        this.addSection(#RateHeader);
        this.addSection(#RateBody);
        this.addSection(#CritHeader);
        this.addSection(#CritBody);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayReport_Rate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.prologCells(4)
        #define.headerCells(5)
        RPayRateTrans rateTrans;

        select count(RecId) from rateTrans where rateTrans.LineType == rateType;

        return #prologCells + int642int(#headerCells*rateTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container       packedQR;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQR] = packedClass;

                queryRun = SysQuery::isPackedOk(packedQR) ?
                                        new QueryRun(packedQR)
                                      : this.initQueryRun();

                break;
            default:
                QueryRun = this.initQueryRun();
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        QueryBuildDataSource rateTransDS = queryRun.query().dataSourceTable(tableNum(RPayRateTrans));
        QueryBuildRange range;

        rateTransDS.sortClear();
        rateTransDS.addSortField(fieldNum(RPayRateTrans, RateTypeAC));
        rateTransDS.addSortField(fieldNum(RPayRateTrans, PayRate));
        rateTransDS.addSortField(fieldNum(RPayRateTrans, RateDate));

        range = findOrCreateRange_W(rateTransDS, fieldNum(RPayRateTrans, LineType), queryValue(rateType));
        range.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS105157";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayValueForReport</Name>
				<Source><![CDATA[
    private static str getDisplayValueForReport(str _rateValue, RPayRateCode _rateCode)
    {
        RPayRateTable           rateTable = RPayRateTable::find(_rateCode);
        RPayRateEnumValue       rateEnumValue;
        RPayTaxDeductionTable   taxDeductionTable;
        int                     valueInt;
        str                     valueStr;

        switch (rateTable.RateValueType)
        {
            case RPayRateValueType::Enum:
                valueInt = str2int(_rateValue);
                select firstOnly Description from rateEnumValue
                    where rateEnumValue.RefRateCode == rateTable.RecId
                       && rateEnumValue.Element == valueInt;
                valueStr = strFmt("@GLS106005", valueInt, rateEnumValue.Description);
                break;

            case RpayRateValueType::TaxDeductionValue:
                valueInt = str2int(_rateValue);
                select firstonly taxDeductionTable
                    where taxDeductionTable.RpayTaxDeductionCode == valueInt;
                valueStr = strFmt("@GLS106005", valueInt, taxDeductionTable.Name);
                break;
            default:
                valueStr = strFmt("@SYS82282", any2real(_rateValue));
                break;
        }

        return valueStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayReport_Rate               report = new RPayReport_Rate();

        report.parmArgs(_args);
        if (report.prompt())
        {
            if (report.init())
            {
                report.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>