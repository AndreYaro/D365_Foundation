<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAutomationStatementFormView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAutomationStatementFormView</c> is the bank automation statement form view that controls the form design.
/// </summary>
internal class BankAutomationStatementFormView
{
    // Dependencies
    private BankAutomationStatementFormViewMatchingStatusPresenter matchingCardPresenter;
    private BankAutomationStatementFormViewRelatedWorksheetPresenter relatedWorksheetPresenter;
    private BankAutomationStatementFormViewWorksheetCaller worksheetCaller;
    private FormRun statementFormRun;

    // View model
    private BankAutomationStatementFormViewModel statementViewModel;

    // Data sources
    private FormDataSource dsStatement;
    private FormDataSource dsReportEntry;
    private FormDataSource dsDocument;
    private FormDataSource dsGroupHeader;
    private FormDataSource dsOpeningBalance;
    private FormDataSource dsEndingBalance;
    private FormDataSource dsNetAmount;
    private FormDataSource dsTradingParty;
    private FormDataSource dsBankDocumentInformation;

    // Header controls
    private FormStringControl headerTitleControl;
    private FormCommandButtonControl addLineButtonControl;
    private FormCommandButtonControl removeLineButtonControl;
    private FormStaticTextControl headerReconciledStatusIndicatorControl;
    private FormStaticTextControl headerUnreconciledStatusIndicatorControl;

    // Line controls
    private FormRealControl editAmountControl;
    private FormRealControl editDebitAmountControl;
    private FormRealControl editCreditAmountControl;
    private FormButtonControl journalsButtonControl;
    private FormTabPageControl lineViewLinesTabPageControl;
    private FormFunctionButtonControl lineAccountingButtonControl;
    private FormFunctionButtonControl bankReconciliationDetailsControl;
    private FormFunctionButtonControl taxTransSourceBankStatementLineControl;
    private FormFunctionButtonControl voucherButtonLineControl;

    // Line grid controls
    private FormComboBoxControl lineGridMatchingStatusControl;
    private FormWindowControl lineGridMatchingRelationIndicatorControl;
    private FormCheckBoxControl lineGridReconciledStatusControl;
    private FormDateControl lineGridAccountingDateControl;
    private FormStringControl lineGridVoucherControl;

    // Variables
    private Set bankStatementLineFieldsAllSet;
    private Set bankStatementLineFieldsControlsSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankAutomationStatementFormView</c> class.
    /// </summary>
    /// <returns>
    /// An instance of <c>BankAutomationStatementFormView</c> class.
    /// </returns>
    internal static BankAutomationStatementFormView construct()
    {
        return new BankAutomationStatementFormView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BankAutomationStatementFormView</c> class from a <c>FormRun</c> object.
    /// </summary>
    /// <param name="_formRun">The form run object.</param>
    /// <returns>
    /// An instance of <c>BankAutomationStatementFormView</c> class.
    /// </returns>
    internal static BankAutomationStatementFormView newFromParameters(FormRun _formRun)
    {
        BankAutomationStatementFormView statementFormView;

        statementFormView = BankAutomationStatementFormView::construct();
        statementFormView.parmStatementFormRun(_formRun);
        statementFormView.init();

        return statementFormView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BankReconciliationStatementFormView</c> class.
    /// </summary>
    internal void init()
    {
        this.initDataSource();
        this.initStatementViewModel();
        this.initControls();
        this.initMatchingStatusCardsPresenter();
        this.initRelatedWorksheetPresenter();
        this.initWorksheetCaller();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementFormRun</Name>
				<Source><![CDATA[
    internal FormRun parmStatementFormRun(FormRun _statementFormRun = statementFormRun)
    {
        statementFormRun = _statementFormRun;

        return statementFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSDocument</Name>
				<Source><![CDATA[
    internal FormDataSource parmDSDocument(FormDataSource _dsDocument = dsDocument)
    {
        dsDocument = _dsDocument;

        return dsDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSEndingBalance</Name>
				<Source><![CDATA[
    internal FormDataSource parmDSEndingBalance(FormDataSource _dsEndingBalance = dsEndingBalance)
    {
        dsEndingBalance = _dsEndingBalance;

        return dsEndingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSGroupHeader</Name>
				<Source><![CDATA[
    internal FormDataSource parmDSGroupHeader(FormDataSource _dsGroupHeader = dsGroupHeader)
    {
        dsGroupHeader = _dsGroupHeader;

        return dsGroupHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSNetAmount</Name>
				<Source><![CDATA[
    internal FormDataSource parmDSNetAmount(FormDataSource _dsNetAmount = dsNetAmount)
    {
        dsNetAmount = _dsNetAmount;

        return dsNetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDSOpeningBalance</Name>
				<Source><![CDATA[
    internal FormDataSource getDSOpeningBalance()
    {
        return dsOpeningBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSReportEntry</Name>
				<Source><![CDATA[
    internal FormDataSource parmDSReportEntry(FormDataSource _dsReportEntry = dsReportEntry)
    {
        dsReportEntry = _dsReportEntry;

        return dsReportEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSStatement</Name>
				<Source><![CDATA[
    internal FormDataSource parmDSStatement(FormDataSource _dsStatement = dsStatement)
    {
        dsStatement = _dsStatement;

        return dsStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSTradingParty</Name>
				<Source><![CDATA[
    internal FormDataSource parmDSTradingParty(FormDataSource _dsTradingParty = dsTradingParty)
    {
        dsTradingParty = _dsTradingParty;

        return dsTradingParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSource</Name>
				<Source><![CDATA[
    private void initDataSource()
    {
        dsStatement = statementFormRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankStmtISOAccountStatement));
        dsReportEntry = statementFormRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankStmtISOReportEntry));
        dsDocument = statementFormRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankStmtISODocument));
        dsGroupHeader = statementFormRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankStmtISOGroupHeader));
        dsOpeningBalance = statementFormRun.dataSource(formDataSourceStr(BankAutomationStatementForm, OpeningBalance));
        dsEndingBalance = statementFormRun.dataSource(formDataSourceStr(BankAutomationStatementForm, EndingBalance));
        dsNetAmount = statementFormRun.dataSource(formDataSourceStr(BankAutomationStatementForm, NetAmount));
        dsTradingParty = statementFormRun.dataSource(formDataSourceStr(BankAutomationStatementForm, TradingParty));
        dsBankDocumentInformation = statementFormRun.dataSource(formDataSourceStr(BankAutomationStatementForm, BankStatementLineBankDocumentInformation));

        this.initBalanceDSByType(dsOpeningBalance, formDataSourceStr(BankAutomationStatementForm, OpeningBalance), BankStatementBalanceType::Opening);
        this.initBalanceDSByType(dsEndingBalance, formDataSourceStr(BankAutomationStatementForm, EndingBalance), BankStatementBalanceType::Closing);
        this.initBalanceDSByType(dsNetAmount, formDataSourceStr(BankAutomationStatementForm, NetAmount), BankStatementBalanceType::NetAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBalanceDSByType</Name>
				<Source><![CDATA[
    private void initBalanceDSByType(FormDataSource _dataSource, str _dataSourceName, BankStatementBalanceType _type)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSourceName);
        QueryBuildRange qbr = qbds.addRange(fieldNum(BankStmtISOCashBalance, BankStatementBalanceType));
        qbr.value(queryValue(_type));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStatementViewModel</Name>
				<Source><![CDATA[
    private void initStatementViewModel()
    {
        statementViewModel = BankAutomationStatementFormViewModel::newFromAutomationStatementView(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    private void initControls()
    {
        this.initFieldControls();
        this.initHeaderInfoControls();
        this.initButtonControls();
        this.initViewForLineAmountControls();
        this.initGridControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMatchingStatusCardsPresenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank statement matching status cards controls.
    /// </summary>
    private void initMatchingStatusCardsPresenter()
    {
        matchingCardPresenter = BankAutomationStatementFormViewMatchingStatusPresenter::construct(statementFormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedWorksheetPresenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank statement related worksheet presenter.
    /// </summary>
    private void initRelatedWorksheetPresenter()
    {
        relatedWorksheetPresenter = BankAutomationStatementFormViewRelatedWorksheetPresenter::construct(statementFormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorksheetCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank reconciliation worksheet caller.
    /// </summary>
    private void initWorksheetCaller()
    {
        worksheetCaller = BankAutomationStatementFormViewWorksheetCaller::construct(statementFormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingCardPresenter</Name>
				<Source><![CDATA[
    internal BankAutomationStatementFormViewMatchingStatusPresenter getMatchingCardPresenter()
    {
        return matchingCardPresenter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedWorksheetPresenter</Name>
				<Source><![CDATA[
    internal BankAutomationStatementFormViewRelatedWorksheetPresenter getRelatedWorksheetPresenter()
    {
        return relatedWorksheetPresenter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorksheetCaller</Name>
				<Source><![CDATA[
    internal BankAutomationStatementFormViewWorksheetCaller getWorksheetCaller()
    {
        return worksheetCaller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldControls</Name>
				<Source><![CDATA[
    private void initFieldControls()
    {
        editAmountControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, editAmount));
        editDebitAmountControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, editDebitAmount));
        editCreditAmountControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, editCreditAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderInfoControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank automation statement form header information controls.
    /// </summary>
    private void initHeaderInfoControls()
    {
        headerTitleControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, HeaderTitle));
        headerReconciledStatusIndicatorControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, HeaderReconciledStatusIndicator));
        headerUnreconciledStatusIndicatorControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, HeaderUnreconciledStatusIndicator));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initButtonControls</Name>
				<Source><![CDATA[
    private void initButtonControls()
    {
        this.initLineButtonControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initViewForLineAmountControls</Name>
				<Source><![CDATA[
    private void initViewForLineAmountControls()
    {
        boolean isBioColumn = BankParameters::find().BankStatementShowDrCrAmount;

        editAmountControl.visible(!isBioColumn);
        editDebitAmountControl.visible(isBioColumn);
        editCreditAmountControl.visible(isBioColumn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineButtonControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank automation statement form line level button controls.
    /// </summary>
    private void initLineButtonControls()
    {
        // Buttons visible when statement open
        addLineButtonControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, AddLineButton));
        removeLineButtonControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, RemoveLineButton));

        // Buttons visible when statement matched or reconciled
        bankReconciliationDetailsControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, BankReconciliationDetails));
        taxTransSourceBankStatementLineControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, TaxTransSourceBankStatementLine));
        voucherButtonLineControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, VoucherButtonLine));
        journalsButtonControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, JournalsButton));
        lineAccountingButtonControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, StatementLineSubLedgerJournal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGridControls</Name>
				<Source><![CDATA[
    private void initGridControls()
    {
        lineViewLinesTabPageControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, LineViewLines));
        lineGridMatchingRelationIndicatorControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, MatchingRelationIndicator));
        lineGridMatchingStatusControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, BankStmtISOReportEntry_BankStatementLineMatchingStatus));
        lineGridReconciledStatusControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, BankStatementLine_Reconciled));
        lineGridAccountingDateControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, BankStmtISOReportEntry_AccountingDate));
        lineGridVoucherControl = statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, BankStmtISOReportEntry_Voucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchMatchingStatusFormPart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design based on switching the matching status card.
    /// </summary>
    /// <param name="_statusType">The matching status card type to be switched.</param>
    internal void switchMatchingStatusFormPart(BankAutomationStatementFormViewMatchingStatusType _statusType)
    {
        matchingCardPresenter.setFocusToStatusCardByStatusType(_statusType);
        matchingCardPresenter.refreshBookQueryToMatchingStatusType(_statusType);
        this.updateFormDetailsViewDesignToMatchingStatusType(_statusType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAllMatchingStatusCardsStatisticsContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes bank automation statement form all the matching status card content.
    /// </summary>
    internal void refreshAllMatchingStatusCardsStatisticsContent()
    {
        matchingCardPresenter.refreshAllMatchingStatusCardsStatisticsContent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDetailsViewDesignToMatchingStatusType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design based on the matching status card.
    /// </summary>
    /// <param name="_statusType">The matching status card type to be refreshed.</param>
    internal void updateFormDetailsViewDesignToMatchingStatusType(BankAutomationStatementFormViewMatchingStatusType _statusType)
    {
        this.updateLineViewLinesGridCaption(_statusType);
        this.updateGridButtonVisibilityByMatchingStatus(_statusType);
        this.updateGridControlVisibilityByMatchingStatus(_statusType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineViewLinesGridCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line view lines grid caption based on the matching status card.
    /// </summary>
    /// <param name = "_statusType">The matching status card type to be updated to caption.</param>
    internal void updateLineViewLinesGridCaption(BankAutomationStatementFormViewMatchingStatusType _statusType)
    {
        lineViewLinesTabPageControl.caption(strFmt("@Bank:BankStatementLineTabPageCaptionConnector", "@GLS221268", enum2Str(_statusType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGridButtonVisibilityByMatchingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line button visibility based on the matching status card.
    /// </summary>
    /// <param name="_statusType">The matching status card type to be updated.</param>
    internal void updateGridButtonVisibilityByMatchingStatus(BankAutomationStatementFormViewMatchingStatusType _statusType)
    {
        addLineButtonControl.visible(BankAutomationStatementLineInteractionHelper::isAddLineButtonVisible(_statusType));
        removeLineButtonControl.visible(BankAutomationStatementLineInteractionHelper::isRemoveLineButtonVisible(_statusType));
        bankReconciliationDetailsControl.visible(BankAutomationStatementLineInteractionHelper::isBankReconciliationButtonVisible(_statusType));
        taxTransSourceBankStatementLineControl.visible(BankAutomationStatementLineInteractionHelper::isTaxTransButtonVisible(_statusType));
        voucherButtonLineControl.visible(BankAutomationStatementLineInteractionHelper::isVoucherLineButtonVisible(_statusType));
        journalsButtonControl.visible(BankAutomationStatementLineInteractionHelper::isJournalsLineButtonVisible(_statusType));
        lineAccountingButtonControl.visible(BankAutomationStatementLineInteractionHelper::isLineAccountingButtonVisible(_statusType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGridControlVisibilityByMatchingStatus</Name>
				<Source><![CDATA[
    private void updateGridControlVisibilityByMatchingStatus(BankAutomationStatementFormViewMatchingStatusType _statusType)
    {
        lineGridMatchingRelationIndicatorControl.visible(BankAutomationStatementLineInteractionHelper::isMatchingRelationIndicatorVisible(_statusType));
        lineGridMatchingStatusControl.visible(BankAutomationStatementLineInteractionHelper::isGridMatchingStatusVisible(_statusType));
        lineGridReconciledStatusControl.visible(BankAutomationStatementLineInteractionHelper::isGridReconciledStatusVisible(_statusType));
        lineGridAccountingDateControl.visible(BankAutomationStatementLineInteractionHelper::isGridAccountingDateAndVoucherVisible(_statusType));
        lineGridVoucherControl.visible(BankAutomationStatementLineInteractionHelper::isGridAccountingDateAndVoucherVisible(_statusType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportEntryButtonStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line button enabled or disabled based on the line status and statement status.
    /// </summary>
    /// <param name="_statementLine">The statement line to set button status.</param>
    internal void setReportEntryButtonStatus(BankStmtISOReportEntry _statementLine)
    {
        BankStmtISOAccountStatement statement = dsStatement.cursor();
        editAmountControl.allowEdit(BankAutomationStatementLineInteractionHelper::isEditAmountAllowEdit(statement, _statementLine));
        bankReconciliationDetailsControl.enabled(BankAutomationStatementLineInteractionHelper::isBankReconciliationButtonEnabled(statement, _statementLine));
        taxTransSourceBankStatementLineControl.enabled(BankAutomationStatementLineInteractionHelper::isTaxTransButtonEnabled(statement, _statementLine));
        voucherButtonLineControl.enabled(BankAutomationStatementLineInteractionHelper::isVoucherLineButtonEnabled(statement, _statementLine));
        lineAccountingButtonControl.enabled(BankAutomationStatementLineInteractionHelper::isVoucherLineButtonEnabled(statement, _statementLine));
        journalsButtonControl.enabled(BankAutomationStatementLineInteractionHelper::isJournalsLineButtonEnabled(statement, _statementLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before form is closed.
    /// </summary>
    internal void formClosePre()
    {
        statementViewModel.formClosePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueEndingBalancePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ending balance.
    /// </summary>
    /// <param name="_endingBalance">Ending balance.</param>
    internal void initValueEndingBalancePost(BankStmtISOCashBalance _endingBalance)
    {
        statementViewModel.dsEndingBalanceInitValuePost(_endingBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueGroupHeaderPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values of <c>BankStmtISOGroupHeader</c>.
    /// </summary>
    /// <param name="_groupHeader">Given <c>BankStmtISOGroupHeader</c> buffer.</param>
    internal void initValueGroupHeaderPost(BankStmtISOGroupHeader _groupHeader)
    {
        statementViewModel.dsGroupHeaderInitValuePost(_groupHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueNetAmountPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the net amount.
    /// </summary>
    /// <param name="_netAmount">Net amount.</param>
    internal void initValueNetAmountPost(BankStmtISOCashBalance _netAmount)
    {
        statementViewModel.dsNetAmountInitValuePost(_netAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueOpeningBalancePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the opening balance.
    /// </summary>
    /// <param name="_openingBalance">Opening balance.</param>
    internal void initValueOpeningBalancePost(BankStmtISOCashBalance _openingBalance)
    {
        statementViewModel.dsOpeningBalanceInitValuePost(_openingBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values of <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    /// <param name="_statement">The <c>BankStmtISOAccountStatement</c> record to initialize.</param>
    internal void initValueStatementPost(BankStmtISOAccountStatement _statement)
    {
        statementViewModel.dsStatementInitValuePost(_statement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActiveGroupHeaderPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Links active <c>BankStmtISOGroupHeader</c> record.
    /// </summary>
    internal void linkActiveGroupHeaderPre()
    {
        statementViewModel.dsGroupHeaderLinkActivePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActiveStatementPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Links active <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    internal void linkActiveStatementPre()
    {
        statementViewModel.dsStatementLinkActivePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeReportEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the active <c>BankStmtISOReportEntry</c> record.
    /// </summary>
    /// <param name="_reportEntry">The <c>BankStmtISOReportEntry</c> record to which to change.</param>
    internal void changeReportEntry(BankStmtISOReportEntry _reportEntry)
    {
        statementViewModel.dsReportEntryActivePost(_reportEntry);
        this.setReportEntryButtonStatus(_reportEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeReportEntryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// before writing the <c>BankStmtISOReportEntry</c> record.
    /// </summary>
    /// <param name="_reportEntry">Given <c>BankStmtISOReportEntry</c> buffer.</param>
    internal void writeReportEntryPre(BankStmtISOReportEntry _reportEntry)
    {
        statementViewModel.dsReportEntryWritePre(_reportEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReportEntryPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>BankStmtISOReportEntry</c> record.
    /// </summary>
    /// <param name="_statementLine">Given <c>BankStmtISOReportEntry</c> buffer.</param>
    internal void deleteReportEntryPost(BankStmtISOReportEntry _statementLine)
    {
        if (_statementLine && dsStatement.cursor())
        {
            this.refreshStatement(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedCreditAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies credit amount.
    /// </summary>
    internal void modifiedCreditAmount()
    {
        statementViewModel.amountModified(editCreditAmountControl.realValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDebitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies debit amount.
    /// </summary>
    internal void modifiedDebitAmount()
    {
        statementViewModel.amountModified(editDebitAmountControl.realValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls after modifying field <c>BankAccountTable</c> of table <c>BankStmtISOAccountStatement</c>.
    /// </summary>
    /// <param name="_statement">Given <c>BankStmtISOAccountStatement</c> buffer.</param>
    internal void modifyBankAccountTable(BankStmtISOAccountStatement _statement)
    {
        statementViewModel.fieldModifiedBankAccountTablePost(_statement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroupHeaderPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>BankStmtISOGroupHeader</c> record.
    /// </summary>
    internal void createGroupHeaderPre()
    {
        statementViewModel.dsGroupHeaderCreatePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteGroupHeaderPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>BankStmtISOGroupHeader</c> record.
    /// </summary>
    /// <param name="_ret">Indicates whether <c>BankStmtISOGroupHeader</c> record to be validated.</param>
    /// <returns>Returns true if validation is passed. Otherwise, returns false.</returns>
    internal boolean validateWriteGroupHeaderPost(boolean _ret)
    {
        return statementViewModel.dsGroupHeaderValidateWritePost(_ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeGroupHeaderPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the <c>BankStmtISOGroupHeader</c> record.
    /// </summary>
    internal void writeGroupHeaderPost()
    {
        statementViewModel.dsGroupHeaderWritePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTradingPartyPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls before writing the <c>TradingParty</c> record.
    /// </summary>
    /// <param name="_tradingParty">The trading party record.</param>
    /// <returns>Whether to write the trading party record.</returns>
    internal boolean writeTradingPartyPre(BankStmtISOPartyIdentification _tradingParty)
    {
        boolean doWrite;

        //only write when the Name or ID is not empty
        if (_tradingParty.Name || _tradingParty.PartyIdOrganisationGenericOrgId)
        {
            doWrite = true;
        }

        return doWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    /// <param name="_ret">Indicates whether <c>BankStmtISOReportEntry</c> record to be validated.</param>
    /// <returns>Returns true if validation is passed. Otherwise, returns false.</returns>
    internal boolean validateWriteStatementPost(boolean _ret)
    {
        return statementViewModel.dsStatementValidateWritePost(_ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDocumentPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the <c>BankStmtISODocument</c> record.
    /// </summary>
    /// <param name="_document">Given <c>BankStmtISODocument</c> buffer.</param>
    internal void writeDocumentPre(BankStmtISODocument _document)
    {
        statementViewModel.dsDocumentWritePre(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the active <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    /// <param name="_statement">The <c>BankStmtISOAccountStatement</c> record to which to change.</param>
    internal void changeStatement(BankStmtISOAccountStatement _statement)
    {
        statementViewModel.dsStatementActivePost(_statement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatementPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    internal void createStatementPre()
    {
        statementViewModel.dsStatementCreatePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions after creating <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    internal void createStatementPost()
    {
        BankStmtISOAccountStatement statementLocal;

        statementLocal = dsStatement.cursor();

        statementLocal.FromDateTime = DateTimeUtil::getSystemDateTime();
        statementLocal.ToDateTime = DateTimeUtil::getSystemDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStatementPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls before writing the <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    /// <param name="_statement">Given <c>BankStmtISOAccountStatement</c> buffer.</param>
    internal void writeStatementPre(BankStmtISOAccountStatement _statement)
    {
        statementViewModel.dsStatementWritePre(_statement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls after writing the <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    internal void writeStatementPost()
    {
        statementViewModel.dsStatementWritePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>BankStmtISOAccountStatement</c> record.
    /// </summary>
    internal void deleteStatementPost()
    {
        statementViewModel.dsStatementDeletePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteGroupHeaderPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>BankStmtISOGroupHeader</c> record.
    /// </summary>
    internal void deleteGroupHeaderPost()
    {
        statementViewModel.dsGroupHeaderDeletePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshStatement</Name>
				<Source><![CDATA[
    private void refreshStatement(boolean _isCheckReread)
    {
        boolean isRefresh = true;

        if (_isCheckReread)
        {
            if (!BankStmtISOAccountStatement::find(dsStatement.cursor().recid).equal(dsStatement.cursor()))
            {
                dsStatement.reread();
            }
            else
            {
                isRefresh = false;
            }
        }

        if (isRefresh)
        {
            dsStatement.refresh();
            dsStatement.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets header title text, reconciled status has unique color indicator.
    /// </summary>
    /// <param name="_statement">Given <c>BankStmtISOAccountStatement</c> buffer.</param>
    internal void setHeaderTitle(BankStmtISOAccountStatement _statement)
    {
        BankStmtISOGroupHeader groupHeader = dsGroupHeader.cursor();
        if (groupHeader.dispBankName())
        {
            headerTitleControl.text(strFmt('%1 : %2',
                groupHeader.dispBankName(),
                _statement.Identification));
        }
        else
        {
            headerTitleControl.text(_statement.Identification);
        }

        this.setHeaderStatusIndicator(_statement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderStatusIndicator</Name>
				<Source><![CDATA[
    private void setHeaderStatusIndicator(BankStmtISOAccountStatement _statement)
    {
        switch (_statement.Status)
        {
            case BankStatementStatus::Reconciled:
                headerReconciledStatusIndicatorControl.visible(true);
                headerUnreconciledStatusIndicatorControl.visible(false);
                headerReconciledStatusIndicatorControl.text(enum2Str(_statement.Status));
                break;
            default:
                headerReconciledStatusIndicatorControl.visible(false);
                headerUnreconciledStatusIndicatorControl.visible(true);
                headerUnreconciledStatusIndicatorControl.text(enum2Str(_statement.Status));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the bank automation statement form when any statement update triggered from other forms.
    /// </summary>
    /// <param name = "_forceRefresh">Whehter is force refresh.</param>
    internal void refreshBook(boolean _forceRefresh = false)
    {
        BankStmtISOReportEntry statementLine = dsReportEntry.cursor();
        NoYes isOrigReconciled = statementLine.Reconciled;
        statementLine.reread();

        if (_forceRefresh || isOrigReconciled != statementLine.Reconciled)
        {
            dsStatement.research(true);
            // Active the <c>BankAutomationStatementInteraction</c> selectionChanged method to refresh the form completely.
            dsStatement.selectionChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatementAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets statement allow edit property.
    /// </summary>
    /// <param name="_isStatementEditable"> Whether statement is editable.</param>
    internal void setStatementAllowEdit(boolean _isStatementEditable)
    {
        dsStatement.allowEdit(_isStatementEditable);
        dsStatement.allowDelete(_isStatementEditable);
        dsEndingBalance.allowEdit(_isStatementEditable);
        dsOpeningBalance.allowEdit(_isStatementEditable);
        dsNetAmount.allowEdit(_isStatementEditable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportEntryAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow edit property of statement line fields.
    /// </summary>
    /// <param name="_isStatementEditable">A boolean value indicating whether statement is editable.</param>
    /// <param name="_isLineEditable">A boolean value indicating whether statement line is editable.</param>
    /// <param name="_isLineFinancialEditable">A boolean value indicating whether financial tab of statement line is editable.</param>
    /// <param name="_isLineAllowedMarkedNew">A boolean value indicating whether the bank statement line is allowed to be marked as new bank document.</param>
    internal void setReportEntryAllowEdit(
        boolean _isStatementEditable,
        boolean _isLineEditable,
        boolean _isLineFinancialEditable,
        boolean _isLineAllowedMarkedNew)
    {
        // Editable derive from the statement
        dsTradingParty.allowEdit(_isLineEditable);
        dsBankDocumentInformation.allowEdit(_isLineFinancialEditable);
        // Set fields editable
        this.setReportEntryFieldsAllowEdit(_isStatementEditable, _isLineEditable, _isLineFinancialEditable, _isLineAllowedMarkedNew);

        dsReportEntry.allowDelete(_isLineEditable);
        dsReportEntry.allowCreate(_isLineEditable);
        // Set form part of line details editable
        this.setBankStatementLineDetailsFormPartDataSourceAllowEdit(_isLineEditable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportEntryFieldsAllowEdit</Name>
				<Source><![CDATA[
    private void setReportEntryFieldsAllowEdit(
        boolean _isStatementEditable,
        boolean _isLineEditable,
        boolean _isLineFinancialEditable,
        boolean _isLineAllowedMarkedNew)
    {
        DictTable dictTable;
        DictField dictField;
        int i;
        FieldId fieldId;
        SetEnumerator fieldsEnumerator;
        SetEnumerator controlsEnumerator;
        FormControl formControl;

        if (bankStatementLineFieldsAllSet == null)
        {
            bankStatementLineFieldsAllSet = new Set(Types::Integer);
            dictTable = new dictTable(tableNum(BankStmtISOReportEntry));

            for (i = 1; i <= dictTable.fieldCnt(); i++)
            {
                fieldId = dictTable.fieldCnt2Id(i);
                dictField = new DictField(tableNum(BankStmtISOReportEntry), fieldId);
                if (!dictField.isSystem())
                {
                    bankStatementLineFieldsAllSet.add(fieldId);
                }
            }
        }
        if (bankStatementLineFieldsControlsSet == null)
        {
            bankStatementLineFieldsControlsSet = new Set(Types::Class);
            bankStatementLineFieldsControlsSet.add(editAmountControl);
            bankStatementLineFieldsControlsSet.add(editDebitAmountControl);
            bankStatementLineFieldsControlsSet.add(editCreditAmountControl);
        }

        fieldsEnumerator = bankStatementLineFieldsAllSet.getEnumerator();

        while (fieldsEnumerator.moveNext())
        {
            fieldId = fieldsEnumerator.current();
            dsReportEntry.object(fieldId).allowEdit(_isLineEditable);
        }

        controlsEnumerator = bankStatementLineFieldsControlsSet.getEnumerator();
        while (controlsEnumerator.moveNext())
        {
            formControl = controlsEnumerator.current();
            formControl.allowEdit(_isLineEditable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankStatementLineDetailsFormPartDataSourceAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the allow edit property of statement line details fields on form part.
    /// </summary>
    /// <param name = "_allowEdit">A boolean value indicating whether statement line details is editable.</param>
    internal void setBankStatementLineDetailsFormPartDataSourceAllowEdit(boolean _allowEdit = false)
    {
        FormPartReferenceControl formPart = statementFormRun.getPartControlByName(identifierStr(BankStatementLineDetails));
        if (formPart)
        {
            FormRun formPartFormRun = formPart.getPartFormRun();
            if (formPartFormRun)
            {
                FormDataSource formPartStatementLineDS = formPartFormRun.dataSource(formDataSourceStr(BankStatementLineDetails, BankStmtISOReportEntry));
                if (formPartStatementLineDS)
                {
                    formPartStatementLineDS.allowEdit(_allowEdit);
                    if (_allowEdit)
                    {
                        formPart.expand(true);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceSelectCurrentViewFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the corresponding form control forcibly in the current view to avoid the undesired form view option switch.
    /// </summary>
    internal void forceSelectCurrentViewFormControl()
    {
        switch (statementFormRun.viewOptionHelper().getViewOption())
        {
            case FormViewOption::Grid:
                statementFormRun.selectControl(statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, TabPageGrid)));
                break;
            case FormViewOption::Details:
                statementFormRun.selectControl(statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, LineViewLines)));
                break;
            case FormViewOption::Header:
                statementFormRun.selectControl(statementFormRun.design().controlName(formControlStr(BankAutomationStatementForm, HeaderDetailsTab)));
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>