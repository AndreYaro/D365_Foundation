<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRReturnOverride_MiscCharge</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRReturnOverride_MiscCharge</c> is a child of the <c>MCRReturnOverride</c> class
/// and handles the miscellaneous charge functionality for return overrides.
/// </summary>
class MCRReturnOverride_MiscCharge extends MCRReturnOverride
{
    #Retail
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateOverUnderPercent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the percent of the product total the passed miscellaneous charge
    ///     is over or under.
    /// </summary>
    /// <param name="_productTotal">
    /// The total amount of the product.
    /// </param>
    /// <param name="_userMarkup">
    /// The amount the user has marked up the product amount.
    /// </param>
    /// <returns>
    /// The percent of the product total the passed miscellaneous charge
    ///     is over or under.
    /// </returns>
    MCRMiscChargeOverridePercent calculateOverUnderPercent(LineAmount _productTotal, MarkupValue _userMarkup)
    {
        real pct;

        if (_productTotal == 0)
        {
            // If product total was 0, we cannot get a percentage change
            // (would be division by zero).  So, return 0.
            return 0;
        }

        // Convert from decimal to percent and negate the sign since the product
        // total will always be negative because its for a return.
        pct = -100 * (_userMarkup / _productTotal);

        return pct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRoleAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the group passed in is allowed to
    ///     generate miscellaneous charges for the passed percent.
    /// </summary>
    /// <param name="_roleRefRecId">
    /// The authorization group to evaluate if the change can be made.
    /// </param>
    /// <param name="_percent">
    /// The percent of change occuring.
    /// </param>
    /// <returns>
    /// true if the group passed in is allowed to generate miscellanous charges; otherwise, false.
    /// </returns>
    boolean isRoleAllowed(SysSecurityRoleRecId _roleRefRecId, MCRMiscChargeOverridePercent  _percent)
    {
        if (#MCRPriceOverrideEnabled)
        {
            boolean ret = false;
            MCRMiscChargeOverridePercent percent;
            MCRPriceOverrideMarkUpGroup priceOverrideMarkupGroups;
            percent = _percent;

            if (percent > 0) // compare against max cost adjustment
            {
                // A MCRMaxCostAdjustment of 0 means the user can adjust the
                // the misc. charges upward for a return by any amount.
                select firstonly RoleRefRecID from priceOverrideMarkupGroups
                where priceOverrideMarkupGroups.RoleRefRecID == _roleRefRecId
                join returnOverrideGroups
                where returnOverrideGroups.PriceOverrideRefRecID == priceOverrideMarkupGroups.RecId
                && (returnOverrideGroups.MCRMaxCreditAdjustment >= percent
                    || returnOverrideGroups.MCRMaxCreditAdjustment == 0);
            }
            else if (percent < 0) // compare against max credit adjustment
            {
                // A Negative percent means there's a user entered net credit to the
                // customer.  Since the MCRMaxCrediAdjustment field is always a positve
                // percent we need to flip the sign before doing the compare in the
                // query.
                percent = -percent;

                // A MCRMaxCrediAdjustment of 0 means the user can adjust the
                // the misc. charges downward for a return by any amount.
                select firstonly RoleRefRecID from priceOverrideMarkupGroups
                where priceOverrideMarkupGroups.RoleRefRecID == _roleRefRecId
                join returnOverrideGroups
                where returnOverrideGroups.PriceOverrideRefRecID == priceOverrideMarkupGroups.RecId
                && (returnOverrideGroups.MCRMaxCreditAdjustment >= percent
                    || returnOverrideGroups.MCRMaxCreditAdjustment == 0);
            }

            if (percent == 0 || returnOverrideGroups)
            {
                ret = true;
            }

            return ret;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the user is allowed to create total miscellaneous
    ///     charges for the passed return sales order.
    /// </summary>
    /// <param name="_userId">
    /// The user ID of the user to determine if they are allowed to create miscellaneous charges.
    /// </param>
    /// <param name="_salesTableReturn">
    /// The sales order return that is being changed.
    /// </param>
    /// <returns>
    /// true if the user is allowed to create total miscellaneous charges; otherwise, false.
    /// </returns>
    public boolean isUserAllowed(UserId _userId, SalesTable _salesTableReturn)
    {
        if (#MCRPriceOverrideEnabled)
        {
            container authorizationGroups;
            int idx;
            boolean authGroupValid = false;
            LineAmount productTotal;
            MarkupValue userMarkup;
            MCRMiscChargeOverridePercent percent;
            MCRSalesOrderTotals   salesOrderTotals;
            salesOrderTotals = new MCRSalesOrderTotals(_salesTableReturn);
            userMarkup = SalesTableType_ReturnItem::MCRGetUserEnteredAdjustments(_salesTableReturn);
            productTotal = salesOrderTotals.getTotalProduct();

            percent = this.calculateOverUnderPercent(productTotal, userMarkup);

            authorizationGroups = MCRAssistantUserRole::getRolesForUser(_userId);
            if (conPeek(authorizationGroups, 1))
            {
                for (idx = 1;  idx <= conLen(authorizationGroups);  idx++)
                {
                    // Validate the user's group is allowed to create misc charges for
                    // the amount on the return.
                    authGroupValid = this.isRoleAllowed(conPeek(authorizationGroups, idx), percent);

                    if (authGroupValid)
                    {
                        break;
                    }
                }
            }

            if (!authGroupValid && !suppressError)
            {
                error(strFmt("@MCR23112", userMarkup));
            }

            return authGroupValid;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>