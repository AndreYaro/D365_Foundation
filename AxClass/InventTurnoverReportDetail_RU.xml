<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTurnoverReportDetail_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class filters <c>InventTrans</c> and <c>InventSettlement</c> forms opened from <c>InventTurnoverReport_RU</c> form.
/// </summary>
class InventTurnoverReportDetail_RU extends RunBase
{
    #AVIFiles
    FromDate                        fromDate;
    ToDate                          toDate;
    InventSumDateFinancialDim_RU    dimensionCriteria;
    container                       activeDimensions;
    Set                             activeDimensionsSet;
    RecordReferenceList_RU          collectedInventTrans;
    Query                           queryFromDialog;
    DimensionFocusRecId             dimensionFocusId;

    InventSettlement                collectedInventSettlement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSettlements</Name>
				<Source><![CDATA[
    private Counter calcSettlements(boolean _physical, Counter _counterFrom = 0)
    {
        QueryRun    queryRun = new QueryRun(this.getSettlementsQuery(_physical));
        Counter     counter  = _counterFrom;

        while (queryRun.next())
        {
            counter++;
            progress.setText(strFmt("%1: %2", "@SYS4946", counter));
            collectedInventSettlement.data(queryRun.get(tableNum(InventSettlement)));
            collectedInventSettlement.doInsert();
            progress.incCount();
        }

        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransFinancial</Name>
				<Source><![CDATA[
    private void calcTransFinancial()
    {
        QueryRun    queryRun = new QueryRun(this.getTransFinancialQuery());
        int         i;

        while (queryRun.next())
        {
            i++;
            progress.setText(strFmt("%1: %2", "@SYS53515", i));
            collectedInventTrans.addRecord(queryRun.get(tableNum(InventTrans)));
            progress.incCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTransPhysical</Name>
				<Source><![CDATA[
    private void calcTransPhysical()
    {
        QueryRun    queryRun = new QueryRun(this.getTransPhysicalQuery());
        int         i;

        while (queryRun.next())
        {
            i++;
            progress.setText(strFmt("%1: %2", "@SYS13387", i));
            collectedInventTrans.addRecord(queryRun.get(tableNum(InventTrans)));
            progress.incCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    private void cleanup()
    {
        if (collectedInventTrans)
        {
            collectedInventTrans.cleanup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines details form caption
    /// </summary>
    /// <returns>
    ///     Details form caption
    /// </returns>
    public str getCaption()
    {
        SetEnumerator   e         = activeDimensionsSet.getEnumerator();
        DictTable       dictTable = new DictTable(tableNum(InventSumDateFinancialDim_RU));
        str             dimCaption;

        while (e.moveNext())
        {
            DictField dictField = dictTable.fieldObject(e.current());
            if (dimCaption)
            {
                dimCaption += ", ";
            }
            dimCaption += strFmt("%1: %2", dictField.label(), dimensionCriteria.(dictField.id()));
        }

        return strFmt("%1-%2, %3", fromDate, toDate, dimCaption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeFromDialog</Name>
				<Source><![CDATA[
    private QueryBuildRange getRangeFromDialog(FieldId _fieldIdDim)
    {
        return queryFromDialog.dataSourceTable(tableNum(InventSumDateFinancialDim_RU)).findRange(_fieldIdDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementsQuery</Name>
				<Source><![CDATA[
    private Query getSettlementsQuery(boolean _physical)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsSettlement = query.addDataSource(tableNum(InventSettlement));
        QueryBuildDataSource    qbdsTrans      = this.queryAddInventTrans(qbdsSettlement, _physical);

        qbdsTrans.addLink(fieldNum(InventSettlement, TransRecId), fieldNum(InventTrans, RecId));
        qbdsTrans.fields().clearFieldList();

        qbdsSettlement.addRange(fieldNum(InventSettlement, Cancelled)).value(queryValue(NoYes::No));
        qbdsSettlement.addRange(fieldNum(InventSettlement, InventTransCurrency_RU)).value(queryValue(InventTransCurrency_RU::PrimaryCur));
        qbdsSettlement.addRange(fieldNum(InventSettlement, TransDate)).value(queryRange(fromDate, toDate));
        qbdsSettlement.addSortField(fieldNum(InventSettlement, TransDate));

        this.queryAddDimRange(qbdsSettlement, fieldNum(InventSumDateFinancialDim_RU, ItemId), fieldNum(InventSettlement, ItemId));
        this.queryAddAccountRange(query, qbdsSettlement, fieldNum(InventSettlement, BalanceSheetLedgerDimension), fieldStr(InventSettlement, BalanceSheetLedgerDimension), fieldStr(InventSettlement, Posted));
        this.queryAddFinancialDimRanges(query, qbdsSettlement);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransFinancialQuery</Name>
				<Source><![CDATA[
    private Query getTransFinancialQuery()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsTrans = this.queryAddInventTrans(query, false);

        this.queryAddStornoRange(qbdsTrans, false);
        qbdsTrans.addRange(fieldNum(InventTrans, DateStatus)).value(queryRange(fromDate, toDate));

        this.queryAddInventTransPosting(query,
                                        qbdsTrans,
                                        fieldNum(InventTrans, Voucher),
                                        fieldNum(InventTrans, DateFinancial),
                                        InventTransPostingType::Financial);

        this.queryAddInventDim(qbdsTrans);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransPhysicalQuery</Name>
				<Source><![CDATA[
    private Query getTransPhysicalQuery()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbdsTrans = this.queryAddInventTrans(query, true);

        this.queryAddStornoRange(qbdsTrans, true);
        qbdsTrans.addRange(fieldNum(InventTrans, DateStatus)).value(queryRange(fromDate, toDate));

        this.queryAddInventTransPosting(query,
                                        qbdsTrans,
                                        fieldNum(InventTrans, VoucherPhysical),
                                        fieldNum(InventTrans, DatePhysical),
                                        InventTransPostingType::Physical);

        this.queryAddInventDim(qbdsTrans);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionActive</Name>
				<Source><![CDATA[
    private boolean isDimensionActive(FieldId _fieldId)
    {
        return activeDimensionsSet.in(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionFiltered</Name>
				<Source><![CDATA[
    private boolean isDimensionFiltered(FieldId _fieldIdDim)
    {
        QueryBuildRange     qbr = this.getRangeFromDialog(_fieldIdDim);

        if (qbr)
        {
            return qbr.value() != SysQuery::valueUnlimited();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinInventSettlement</Name>
				<Source><![CDATA[
    private void joinInventSettlement(FormDataSource _inventSettlementDS)
    {
        QueryBuildDataSource  qbdsSettlement = _inventSettlementDS.query().dataSourceName(_inventSettlementDS.name());

        qbdsSettlement.addSortField(fieldNum(InventSettlement, TransDate));

        setPrefix(this.caption());

        this.progressInit(this.caption(), 0, #AVISearch);

        collectedInventSettlement.setTmp();
        this.calcSettlements(true, this.calcSettlements(false));

        _inventSettlementDS.cursor().setTmp();
        _inventSettlementDS.cursor().setTmpData(collectedInventSettlement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinInventTrans</Name>
				<Source><![CDATA[
    private void joinInventTrans(FormDataSource _inventTransDS)
    {
        QueryBuildDataSource  qbdsTrans = _inventTransDS.query().dataSourceName(_inventTransDS.name());

        qbdsTrans.addSortField(fieldNum(InventTrans, DateStatus));

        setPrefix(this.caption());

        this.progressInit(this.caption(), 0, #AVISearch);

        collectedInventTrans = RecordReferenceList_RU::construct();

        this.calcTransPhysical();
        this.calcTransFinancial();

        collectedInventTrans.flush();
        collectedInventTrans.join(qbdsTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        dimensionFocusId = InventParameters::find().InventSumDateFinancialDimensionFocus_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveDimensions</Name>
				<Source><![CDATA[
    public container parmActiveDimensions(container _activeDimensions = activeDimensions)
    {
        if (! prmisDefault(_activeDimensions))
        {
            activeDimensions    = _activeDimensions;
            activeDimensionsSet = Set::create(activeDimensions);
        }

        return activeDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionFocusId</Name>
				<Source><![CDATA[
    public DimensionFocusRecId parmDimensionFocusId(DimensionFocusRecId _dimensionFocusId = dimensionFocusId)
    {
        dimensionFocusId = _dimensionFocusId;

        return dimensionFocusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionCriteria</Name>
				<Source><![CDATA[
    public InventSumDateFinancialDim_RU parmDimensionCriteria(InventSumDateFinancialDim_RU _dimensionCriteria = dimensionCriteria)
    {
        if (! prmisDefault(_dimensionCriteria))
        {
            dimensionCriteria.data(_dimensionCriteria);
        }

        return dimensionCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryFromDialog</Name>
				<Source><![CDATA[
    public Query parmQueryFromDialog(Query _queryFromDialog = queryFromDialog)
    {
        queryFromDialog = _queryFromDialog;

        return queryFromDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddAccountRange</Name>
				<Source><![CDATA[
    private void queryAddAccountRange(Query                _query,
                                      QueryBuildDataSource _qbds,
                                      FieldId              _fieldIdRange,
                                      FieldName            _fieldNameRange,
                                      FieldName            _fieldNamePosted)
    {
        if (this.isDimensionActive(fieldNum(InventSumDateFinancialDim_RU, Account)) && ! dimensionCriteria.Account)
        {
            findOrCreateRange_W(_qbds,
                                _fieldIdRange,
                                strFmt("((%1.%2 == 0) || (%1.%3 == 0))", _qbds.name(), _fieldNameRange, _fieldNamePosted));
        }
        else
        {
            str accountRangeValue = dimensionCriteria.Account;

            if (!accountRangeValue)
            {
                QueryBuildRange accountRange = this.getRangeFromDialog(fieldNum(InventSumDateFinancialDim_RU, Account));
                if (accountRange)
                {
                    accountRangeValue = accountRange.value();
                }
            }

            if (accountRangeValue)
            {
                SysQuery::addDimensionAttributeRange(_query,
                    _qbds.name(),
                    _fieldNameRange,
                    DimensionComponent::DimensionAttribute,
                    accountRangeValue,
                    DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddDimRange</Name>
				<Source><![CDATA[
    private void queryAddDimRange(QueryBuildDataSource _qbds, FieldId _fieldIdDim, FieldId _fieldIdRange)
    {
        if (this.isDimensionActive(_fieldIdDim))
        {
            if (typeOf(dimensionCriteria.(_fieldIdDim)) == Types::String && ! dimensionCriteria.(_fieldIdDim))
            {
                findOrCreateRange_W(_qbds, _fieldIdRange, SysQuery::valueEmptyString());
            }
            else
            {
                findOrCreateRange_W(_qbds, _fieldIdRange, queryValue(dimensionCriteria.(_fieldIdDim)));
            }
        }
        else
        {
            QueryBuildRange qbrFromDialog = this.getRangeFromDialog(_fieldIdDim);
            if (qbrFromDialog)
            {
                findOrCreateRange_W(_qbds, _fieldIdRange, qbrFromDialog.value());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddFinancialDimRanges</Name>
				<Source><![CDATA[
    private void queryAddFinancialDimRanges(Query _query, QueryBuildDataSource _qbds)
    {
        DimensionHierarchyLevel dimensionHierarchyLevel;
        DimensionAttribute      dimAttr;
        int                     idx;
        Range                   range;

        while select Level from dimensionHierarchyLevel
            order by Level
            where dimensionHierarchyLevel.DimensionHierarchy == dimensionFocusId
            join RecId, Name from dimAttr
                where dimAttr.RecId == dimensionHierarchyLevel.DimensionAttribute
        {
            FieldId fieldId = fieldId2Ext(fieldNum(InventSumDateFinancialDim_RU, Dimension), dimensionHierarchyLevel.Level);

            if (this.isDimensionActive(fieldId))
            {
                if (dimensionCriteria.(fieldId))
                {
                    range = dimensionCriteria.(fieldId);
                }
                else
                {
                    range = SysQuery::valueEmptyString();
                }

                SysQuery::addDimensionAttributeRange(_query,
                    _qbds.name(),
                    fieldStr(InventTransPosting, DefaultDimension),
                    DimensionComponent::DimensionAttribute,
                    range,
                    dimAttr.Name);
            }
            else
            {
                QueryBuildRange qbrDimAttr = null;
                QueryBuildRange qbrFromDialog = null;
                for (idx = 1; idx <= queryFromDialog.dataSourceCount(); idx++)
                {
                    QueryBuildDataSource qbdsDim = queryFromDialog.dataSourceNo(idx);
                    if (qbdsDim.table() == tableNum(DimensionAttributeValueSetItemView))
                    {
                        qbrDimAttr = qbdsDim.findRange(fieldNum(DimensionAttributeValueSetItemView, DimensionAttribute));
                        if (qbrDimAttr && str2int64(qbrDimAttr.value()) == dimAttr.RecId)
                        {
                            qbrFromDialog = qbdsDim.findRange(fieldNum(DimensionAttributeValueSetItemView, DisplayValue));
                            break;
                        }
                    }
                }

                if (qbrFromDialog && qbrFromDialog.value())
                {
                    range = qbrFromDialog.value();

                    SysQuery::addDimensionAttributeRange(_query,
                        _qbds.name(),
                        fieldStr(InventTransPosting, DefaultDimension),
                        DimensionComponent::DimensionAttribute,
                        range,
                        dimAttr.Name);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddInventDim</Name>
				<Source><![CDATA[
    private void queryAddInventDim(QueryBuildDataSource _qbdsTrans)
    {
        QueryBuildDataSource    qbdsDim = _qbdsTrans.addDataSource(tableNum(InventDim));

        qbdsDim.addLink(fieldNum(InventTrans, InventDimId), fieldNum(InventDim, InventDimId));
        qbdsDim.joinMode(JoinMode::InnerJoin);
        qbdsDim.fetchMode(QueryFetchMode::One2One);
        qbdsDim.fields().clearFieldList();

        this.queryAddDimRange(qbdsDim, fieldNum(InventSumDateFinancialDim_RU, InventSiteId),     fieldNum(InventDim, InventSiteId));
        this.queryAddDimRange(qbdsDim, fieldNum(InventSumDateFinancialDim_RU, InventLocationId), fieldNum(InventDim, InventLocationId));
        this.queryAddDimRange(qbdsDim, fieldNum(InventSumDateFinancialDim_RU, InventProfileId),  fieldNum(InventDim, InventProfileId_RU));

        if (this.isDimensionActive(fieldNum(InventSumDateFinancialDim_RU, InventProfileType)) ||
            this.isDimensionFiltered(fieldNum(InventSumDateFinancialDim_RU, InventProfileType)))
        {
            QueryBuildDataSource qbdsInventProfile = qbdsDim.addDataSource(tableNum(InventProfile_RU));
            qbdsInventProfile.addLink(fieldNum(InventDim, InventProfileId_RU), fieldNum(InventProfile_RU, InventProfileId));
            qbdsInventProfile.joinMode(JoinMode::InnerJoin);
            qbdsInventProfile.fetchMode(QueryFetchMode::One2One);

            this.queryAddDimRange(qbdsInventProfile, fieldNum(InventSumDateFinancialDim_RU, InventProfileType), fieldNum(InventProfile_RU, InventProfileType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddInventTrans</Name>
				<Source><![CDATA[
    private QueryBuildDataSource queryAddInventTrans(Object        _parent,
                                                     boolean       _physical)
    {
        QueryBuildDataSource    qbds          = _parent.addDataSource(tableNum(InventTrans));
        StatusIssue             statusIssue   = _physical ? StatusIssue::Deducted   : StatusIssue::Sold;
        StatusReceipt           statusReceipt = _physical ? StatusReceipt::Received : StatusReceipt::Purchased;

        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds.addRange(fieldNum(InventTrans, StatusIssue)).value(strFmt("((%1.%2 == %4) || (%1.%3 == %5))",
                                                                        qbds.name(),
                                                                        fieldStr(InventTrans, StatusIssue),
                                                                        fieldStr(InventTrans, StatusReceipt),
                                                                        statusIssue + 0,
                                                                        statusReceipt + 0));

        this.queryAddDimRange(qbds, fieldNum(InventSumDateFinancialDim_RU, ItemId), fieldNum(InventTrans, ItemId));

        QueryBuildDataSource qbdsInventTransOrigin = qbds.addDataSource(tableNum(InventTransOrigin));
        qbdsInventTransOrigin.joinMode(JoinMode::ExistsJoin);
        qbdsInventTransOrigin.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransOrigin, RecId));
        qbdsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(SysQuery::valueNot(InventTransType::SummedUp));

        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddInventTransPosting</Name>
				<Source><![CDATA[
    private void queryAddInventTransPosting(Query                   _query,
                                            QueryBuildDataSource    _qbdsTrans,
                                            FieldId                 _fieldIdVoucher,
                                            FieldId                 _fieldIdTransDate,
                                            InventTransPostingType  _inventTransPostingType)
    {
        QueryBuildDataSource qbdsTransPosting = _qbdsTrans.addDataSource(tableNum(InventTransPosting));

        qbdsTransPosting.joinMode(JoinMode::InnerJoin);
        qbdsTransPosting.fetchMode(QueryFetchMode::One2One);
        qbdsTransPosting.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransPosting, InventTransOrigin));
        qbdsTransPosting.addLink(_fieldIdVoucher,   fieldNum(InventTransPosting, Voucher));
        qbdsTransPosting.addLink(_fieldIdTransDate, fieldNum(InventTransPosting, TransDate));
        qbdsTransPosting.addRange(fieldNum(InventTransPosting, InventTransPostingType)).value(queryValue(_inventTransPostingType));

        if (this.isDimensionActive(fieldNum(InventSumDateFinancialDim_RU, Account)))
        {
            if (dimensionCriteria.Account)
            {
                SysQuery::addDimensionAttributeRange(_query,
                    qbdsTransPosting.name(),
                    fieldStr(InventTransPosting, LedgerDimension),
                    DimensionComponent::DimensionAttribute,
                    dimensionCriteria.Account,
                    DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name);
            }
            else
            {
                findOrCreateRange_W(qbdsTransPosting,
                                fieldNum(InventTransPosting, LedgerDimension),
                                strFmt("((%1.%2 == 0) || (%1.%3 == 0))", qbdsTransPosting.name(), fieldStr(InventTransPosting, LedgerDimension), fieldStr(InventTransPosting, IsPosted)));
            }
        }
        else
        {
            QueryBuildRange qbrFromDialog = this.getRangeFromDialog(fieldNum(InventSumDateFinancialDim_RU, Account));
            if (qbrFromDialog && qbrFromDialog.value())
            {
                SysQuery::addDimensionAttributeRange(_query,
                    qbdsTransPosting.name(),
                    fieldStr(InventTransPosting, LedgerDimension),
                    DimensionComponent::DimensionAttribute,
                    qbrFromDialog.value(),
                    DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name);
            }
        }

        this.queryAddFinancialDimRanges(_query, qbdsTransPosting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddStornoRange</Name>
				<Source><![CDATA[
    private void queryAddStornoRange(QueryBuildDataSource _qbdsTrans, boolean _physical)
    {
        this.queryAddDimRange(_qbdsTrans,
                              fieldNum(InventSumDateFinancialDim_RU, Storno),
                              _physical ? fieldNum(InventTrans, StornoPhysical_RU) : fieldNum(InventTrans, Storno_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new instance of <c>InventTurnoverReportDetail_RU</c> class.
    /// </summary>
    /// <param name="_fromDate">
    ///     Start date.
    /// </param>
    /// <param name="_toDate">
    ///     End date.
    /// </param>
    /// <param name="_dimensionCriteria">
    ///     Dimensions criteria.
    /// </param>
    /// <param name="_activeDimensions">
    ///     Active dimensions packed set.
    /// </param>
    /// <param name="_queryFromDialog">
    ///     Query from the invent turnover report dialog form.
    /// </param>
    /// <returns>
    ///     New instance of <c>InventTurnoverReportDetail_RU</c> class.
    /// </returns>
    public static InventTurnoverReportDetail_RU construct(FromDate                      _fromDate,
                                                          ToDate                        _toDate,
                                                          InventSumDateFinancialDim_RU  _dimensionCriteria,
                                                          Set                           _activeDimensions,
                                                          Query                         _queryFromDialog)
    {
        InventTurnoverReportDetail_RU   reportDetail = new InventTurnoverReportDetail_RU();

        reportDetail.parmFromDate(_fromDate);
        reportDetail.parmToDate(_toDate);
        reportDetail.parmDimensionCriteria(_dimensionCriteria);
        reportDetail.parmActiveDimensions(_activeDimensions.pack());
        reportDetail.parmQueryFromDialog(new Query(_queryFromDialog.pack()));

        return reportDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS35554";
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFormClose</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cleans up class instance after details form is closed.
    /// </summary>
    /// <param name="_formRun">
    ///     Details form formrun.
    /// </param>
    public static void onFormClose(FormRun _formRun)
    {
        if (classIdGet(_formRun.args().caller()) == classNum(InventTurnoverReportDetail_RU))
        {
            InventTurnoverReportDetail_RU reportDetail = _formRun.args().caller();
            reportDetail.cleanup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFormInit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inits class instance when details form is inited.
    /// </summary>
    /// <param name="_formRun">
    ///     Details form formrun.
    /// </param>
    /// <param name="_ds">
    ///     Details form data source.
    /// </param>
    public static void onFormInit(FormRun        _formRun,
                                  FormDataSource _ds)
    {
        if (classIdGet(_formRun.args().caller()) == classNum(InventTurnoverReportDetail_RU))
        {
            InventTurnoverReportDetail_RU reportDetail = _formRun.args().caller();
            switch (_ds.table())
            {
                case tableNum(InventTrans):
                    reportDetail.joinInventTrans(_ds);
                    break;
                case tableNum(InventSettlement):
                    reportDetail.joinInventSettlement(_ds);
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
            _formRun.design().caption(_formRun.design().caption() + " " + reportDetail.getCaption());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>