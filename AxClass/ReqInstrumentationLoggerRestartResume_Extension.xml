<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqInstrumentationLoggerRestartResume_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ReqInstrumentationLogger))]
internal final class ReqInstrumentationLoggerRestartResume_Extension
{
    private ReqCalcRestartResumeInstrumentationActivities reqActivities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>restartResume</Name>
				<Source><![CDATA[
    public ReqCalcRestartResumeInstrumentationActivities restartResume()
    { 
        if (!reqActivities)
        {
            reqActivities = ReqCalcRestartResumeInstrumentationActivities::newFromLogger(this);
        }

        return reqActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessInformation</Name>
				<Source><![CDATA[
    public void logProcessInformation(ReqProcessId _recoveredProcessId, Batch _currentBatchTask)
    {
        str bool2Str(boolean _bool)
        {
            return _bool ? 'true' : 'false';
        }

        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(ReqCalcRestartResumeInstrumentationActivities::ParmRecoveredProcessId, _recoveredProcessId);
        serializer.setValue(ReqCalcRestartResumeInstrumentationActivities::ParmIsExecutingInBatch, bool2Str(_currentBatchTask.RecId != 0));
        serializer.setValue(ReqCalcRestartResumeInstrumentationActivities::ParmBatchJobId, int642Str(_currentBatchTask.BatchJobId));
        serializer.setValue(ReqCalcRestartResumeInstrumentationActivities::ParmBatchTaskId, int642Str(_currentBatchTask.RecId));

        instrumentationLogger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBatchRetryDetails</Name>
				<Source><![CDATA[
    public void logBatchRetryDetails(str _infoMessage, Batch _currentBatchTask, int _maximumRestartResumeAttempts)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(ReqCalcRestartResumeInstrumentationActivities::ParmInfoMessage, _infoMessage);
        serializer.setValue(ReqCalcRestartResumeInstrumentationActivities::ParmBatchRetriesOnFailure, int642Str(_currentBatchTask.retriesOnFailure));
        serializer.setValue(ReqCalcRestartResumeInstrumentationActivities::ParmBatchRetryCount, int642Str(_currentBatchTask.retryCount));
        serializer.setValue(ReqCalcRestartResumeInstrumentationActivities::ParmMaximumRestartResumeAttempts, int642Str(_maximumRestartResumeAttempts));

        instrumentationLogger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRecoveredReqProcessThreadListInformation</Name>
				<Source><![CDATA[
    public void logRecoveredReqProcessThreadListInformation(str _infoMessage, RefRecId _recoveredReqProcessThreadListId)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(ReqCalcRestartResumeInstrumentationActivities::ParmInfoMessage, _infoMessage);
        serializer.setValue(ReqCalcRestartResumeInstrumentationActivities::ParmRecoveredReqProcessThreadListRecId, int642Str(_recoveredReqProcessThreadListId));

        instrumentationLogger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>