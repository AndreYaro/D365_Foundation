<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxEmplLoanLucreReverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayTaxEmplLoanLucreReverse
{
    Set             dedPeriodSet, reversedTrans;
    RHRMEmplId      emplId;
    RPayModuleCode  moduleCode;
    RefRecId        loanLucreRef;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyFilterLoanLucre</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayEmplStandardDeductionTable applyFilterLoanLucre(StartDate _startDate, EndDate _endDate, NoYes _allowStorno)
    {
        RPayEmplStandardDeductionTable  emplLoanLucre;
        RPayStandardDeductionTable      stdDedTable;

        select RecId from emplLoanLucre
            where    emplLoanLucre.ReverseBorrowingGain == _allowStorno
                && ((emplLoanLucre.StartDate >= _startDate &&  emplLoanLucre.StartDate <= _endDate)
                ||  (emplLoanLucre.EndDate   >= _startDate &&  emplLoanLucre.EndDate   <= _endDate)
                ||  (emplLoanLucre.EndDate   == dateNull() &&  emplLoanLucre.StartDate <= _endDate))
                && (!loanLucreRef || emplLoanLucre.RecId == loanLucreRef)
            exists join stdDedTable
                where  stdDedTable.DeductionCode == emplLoanLucre.DeductionCode
                    && stdDedTable.DeductionType == RPayStandardDeductionType::Borrowing;

        return emplLoanLucre;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFilterPayTrans</Name>
				<Source><![CDATA[
    private RPayTrans applyFilterPayTrans(RPayEmplStandardDeductionTable  _emplLoanLucre)
    {
        RPayTrans   payTrans;

        select payTrans
            where  payTrans.Emplid          == emplId
                && payTrans.PayModuleCode   == moduleCode
                && payTrans.SourceTableId   == _emplLoanLucre.TableId
                && payTrans.SourceRecId     == _emplLoanLucre.RecId;

        return payTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPeriodFunctor</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean applyPeriodFunctor(StartDate _startDate, EndDate _endDate)
    {
        this.applyReverse(_startDate, _endDate, NoYes::Yes, TransLinkType_RU::Original);
        this.applyReverse(_startDate, _endDate, NoYes::No, TransLinkType_RU::Storno);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyReverse</Name>
				<Source><![CDATA[
    private void applyReverse(StartDate _startDate, EndDate _endDate, NoYes _lucreAllowStorno, TransLinkType_RU _transTypeApplTo)
    {
        RPayEmplStandardDeductionTable  emplLoanLucre;
        RPayTrans                       payTrans, payTrans2reverse;
        StartDate   startDate;
        EndDate     endDate;

        emplLoanLucre = this.applyFilterLoanLucre(startDate, endDate, _lucreAllowStorno);

        while (emplLoanLucre)
        {
            payTrans = this.applyFilterPayTrans(emplLoanLucre);
            while (payTrans)
            {
                if (this.isTransTypeValid(payTrans, _transTypeApplTo))
                {
                    payTrans2reverse = this.payTrans2Reverse(payTrans);
                    this.reverseTrans(payTrans2reverse);
                }

                next payTrans;
            }

            next emplLoanLucre;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeductionPeriods</Name>
				<Source><![CDATA[
    private void initDeductionPeriods()
    {
        RPayRateTrans           rateTrans;
        RPayTaxDeductionTable   taxDeduction;
        RPayRateTypeAC          emplIdAC = emplId; //type casting

        dedPeriodSet = new Set(Types::Container);

        while select RateDate, RateValue from rateTrans
            order by RateDate desc
            where  rateTrans.LineType   == RPayRateType::Employee
                && rateTrans.RateTypeAC == emplIdAC
            exists join taxDeduction
                where  taxDeduction.RpayRateCodeValue       == rateTrans.PayRate
                    && taxDeduction.ReverseBorrowingGain    == NoYes::Yes
        {
            this.mergePeriods(rateTrans.RateDate, dateEndYr(rateTrans.RateDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransTypeValid</Name>
				<Source><![CDATA[
    //_trantype
    // Original - select only original transactions
    // Reversed - select only reversed transactions

    private boolean isTransTypeValid(RPayTrans _payTransOriginal, TransLinkType_RU _transType)
    {
        TransLink_RU    transLink;
        SysInt64        reversalGroup;

        boolean ret;
        Counter nodesCnt;

        if (reversedTrans.in(_payTransOriginal.RecId))
        {
            return false;
        }

        select firstonly ReversalGroup from transLink
            where  transLink.RefTableId    == _payTransOriginal.TableId
                && transLink.RefSec        == _payTransOriginal.RecId;

        reversalGroup = transLink.ReversalGroup;

        select count(RecId) from transLink
            where  transLink.ReversalGroup == reversalGroup
                && transLink.TransLinkType == TransLinkType_RU::Storno;

        nodesCnt = int642int(transLink.RecId, true);

        if (_transType == TransLinkType_RU::Original)
        {
            ret = (nodesCnt == 0) || (frac(nodesCnt / 2) == 0);
        }
        else
        {
            ret = (nodesCnt != 0) || (frac(nodesCnt / 2) != 0);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergePeriods</Name>
				<Source><![CDATA[
    private void mergePeriods(StartDate _startDate, EndDate _endDate)
    {
        SetIterator si = new SetIterator(dedPeriodSet);
        StartDate   start;
        EndDate     end;
        container   con;

        if (_endDate == dateNull())
        {
            return;
        }

        while (si.more())
        {
            con     = si.value();
            start   = conPeek(con, 1);
            end     = conPeek(con, 2);

            if (start > _endDate)
            {
                break;
            }

            if ((start < _startDate && end > _startDate) ||
                (start > _startDate && start < _endDate))
            {
                _startDate = min(start, _startDate);
                _endDate   = max(end, _endDate);

                si.delete();
                continue;
            }

            si.next();
        }

        dedPeriodSet.add([_startDate, _endDate]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RHRMEmplId parmEmplId(RHRMEmplId _emplId = emplId)
    {
        emplId = _emplId;
        return emplId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payTrans2Reverse</Name>
				<Source><![CDATA[
    private RPayTrans payTrans2Reverse(RPayTrans _payTransOriginal)
    {
        RPayTrans       payTrans;
        TransLink_RU    transLink;
        RefRecId        refSec;

        payTrans.data(_payTransOriginal);
        refSec = payTrans.RecId;

        while (refSec)
        {
            if (TransLink_RU::canReverse(payTrans.TableId, payTrans.RecId))
            {
                return payTrans;
            }
            else
            {
                select firstonly * from transLink
                    where  transLink.RefPri        == payTrans.RecId
                        && transLink.TransLinkType == TransLinkType_RU::Storno;

                refSec = transLink.RefSec;

                if (refSec)
                {
                    payTrans = RPayTrans::find(refSec);
                }
            }
        }

        return payTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refLoanLucre</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId refLoanLucre(RefRecId _loanLucreRef = loanLucreRef)
    {
        loanLucreRef = _loanLucreRef;
        return loanLucreRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTrans</Name>
				<Source><![CDATA[
    private void reverseTrans(RPayTrans _reverseTrans)
    {
        Args        args;
        RPayReverse payReverse;
        ;

        args = new Args();
        args.record(_reverseTrans);
        args.parmEnumType(enumNum(RPayReverseType));
        args.parmEnum(RPayReverseType::Reverse);

        payReverse = RPayReverse::newFromTable(args);
        payReverse.runOperation();

        reversedTrans.add(_reverseTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean run()
    {
        SetEnumerator   se;

        StartDate   startDate;
        EndDate     endDate;
        boolean     funcRet = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(RPayBorrowingGain)) == false)
        {
            return false;
        }

        moduleCode = configurationKeyStr(RPayBorrowingGain);

        this.initDeductionPeriods();
        se = dedPeriodSet.getEnumerator();

        reversedTrans = new Set(Types::Int64);

        ttsbegin;
        while (funcRet && se.moveNext())
        {
            [startDate, endDate] = se.current();
            funcRet = this.applyPeriodFunctor(startDate, endDate);
        }
        ttscommit;

        return funcRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RPayTaxEmplLoanLucreReverse construct(RHRMEmplId _emplId, RefRecId _loanLucreRef = 0)
    {
        RPayTaxEmplLoanLucreReverse taxEmplLLReverse = new RPayTaxEmplLoanLucreReverse();
        taxEmplLLReverse.parmEmplId(_emplId);
        taxEmplLLReverse.refLoanLucre(_loanLucreRef);

        return taxEmplLLReverse;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>