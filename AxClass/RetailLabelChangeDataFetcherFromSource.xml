<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLabelChangeDataFetcherFromSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Fetches the data for the label change journal lines from the given source.
/// </summary>
abstract class RetailLabelChangeDataFetcherFromSource implements RetailLabelChangeDataFetcher
{
    RetailLabelChangeSourceId sourceId;
    TransDate priceDate;
    RetailItemQtyFilter itemQtyFilter;
    RetailLabelChangeItemQtyValidator itemQtyValidator;
    NoYes initQty;

    QueryRun qr;
    Common line;
    InventDim inventDim;
    RetailStoreTable storeTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity for the current line.
    /// </summary>
    /// <returns>
    /// Quantity for the current line.
    /// </returns>
    protected Qty calcQty()
    {
        return line.(this.lineQtyFieldId());
    }
]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the current line.
    /// </summary>
    /// <returns>
    /// A container with the data for the current line.
    /// </returns>
    public container current()
    {
        ItemId itemId = line.(this.lineItemIdFieldId());
        SalesQty qty = this.qty();
        UnitOfMeasureSymbol unitId = this.unitId();
        UnitOfMeasureSymbol saleUnitId = InventTableModule::find(ItemId, ModuleInventPurchSales::Sales).UnitId;

        if (unitId != saleUnitId)
        {
            qty = UnitOfMeasureConverter::convert(
                qty,
                UnitOfMeasure::unitOfMeasureIdBySymbol(unitId),
                UnitOfMeasure::unitOfMeasureIdBySymbol(saleUnitId),
                NoYes::Yes);
        }

        return [itemId,
                this.variantId(),
                qty,
                saleUnitId,
                storeTable.StoreNumber,
                storeTable.OMOperatingUnitID,
                storeTable.generatesItemLabels,
                storeTable.generatesShelfLabels,
                storeTable.createLabelsForZeroPrice];
    }
]]></Source>
			</Method>
			<Method>
				<Name>fetchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the next line.
    /// </summary>
    /// <returns>
    /// true if the operation was successful; false otherwise.
    /// </returns>
    protected boolean fetchLine()
    {
        boolean result = false;

        if (this.hasCurrent())
        {
            result = this.fetchNextStore();
        }

        if (!result)
        {
            result = qr.next();

            if (result)
            {
                line = qr.get(this.lineTableId());
                inventDim = qr.get(tableNum(InventDim));
                this.fetchStore();
            }
        }

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>fetchNextStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the next store for the current line.
    /// </summary>
    /// <returns>
    /// true if nest store was found; false otherwise.
    /// </returns>
    protected boolean fetchNextStore()
    {
        return false;
    }
]]></Source>
			</Method>
			<Method>
				<Name>fetchStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches retail store.
    /// </summary>
    /// <returns>
    /// true if fetch succeeded; false otherwise.
    /// </returns>
    protected boolean fetchStore()
    {
        select firstOnly StoreNumber, generatesItemLabels, generatesShelfLabels, createLabelsForZeroPrice, OMOperatingUnitID from storeTable
            order by StoreNumber asc
            where storeTable.inventLocation == InventDim.InventLocationId
                && storeTable.inventLocationDataAreaId == InventDim.dataAreaId;

        return storeTable ? true : false;
    }
]]></Source>
			</Method>
			<Method>
				<Name>hasCurrent</Name>
				<Source><![CDATA[
    private boolean hasCurrent()
    {
        return line ? true : false;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a query for fetching of data for label change journals generation.
    /// </summary>
    /// <returns>
    /// Initialized query object.
    /// </returns>
    protected Query initQuery()
    {
        Query query;
        QueryBuildDataSource qbds_line, qbds_inventDim;
        QueryBuildFieldList qbfl;
        QueryBuildRange qbr;

        void addLineSelectionField(FieldId _fieldId)
        {
            if (_fieldId)
            {
                qbds_line.addSelectionField(_fieldId, SelectionField::Database);
            }
        }

        query = new Query();
        qbds_line = query.addDataSource(this.lineTableId());
        qbfl = qbds_line.fields();
        qbfl.clearFieldList();
        addLineSelectionField(this.lineItemIdFieldId());
        addLineSelectionField(this.lineVariantIdFieldId());
        addLineSelectionField(this.lineQtyFieldId());
        addLineSelectionField(this.lineUnitIdFieldId());
        addLineSelectionField(this.lineDeliveryDateFieldId());
        qbr = qbds_line.addRange(this.lineJournalNumFieldId());
        qbr.value(queryValue(sourceId));
        qbr = qbds_line.addRange(this.lineItemIdFieldId());
        qbr.value(SysQuery::valueNotEmptyString());
        qbds_inventDim = qbds_line.addDataSource(tableNum(InventDim));
        qbds_inventDim.relations(true);
        qbds_inventDim.joinMode(JoinMode::InnerJoin);
        qbds_inventDim.addSortField(fieldNum(InventDim, InventLocationId), SortOrder::Ascending);

        return query;
    }
]]></Source>
			</Method>
			<Method>
				<Name>lineDeliveryDateFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DeliveryDate field Id in the line table.
    /// </summary>
    /// <returns>
    /// DeliveryDate field Id.
    /// </returns>
    abstract protected FieldId lineDeliveryDateFieldId()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>lineItemIdFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ItemId field Id in the line table.
    /// </summary>
    /// <returns>
    /// ItemId field Id.
    /// </returns>
    abstract protected FieldId lineItemIdFieldId()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>lineJournalNumFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the JournalNum field Id in the line table.
    /// </summary>
    /// <returns>
    /// JournalNum field Id.
    /// </returns>
    abstract protected FieldId lineJournalNumFieldId()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>lineQtyFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Qty field Id in the line table.
    /// </summary>
    /// <returns>
    /// Qty field Id.
    /// </returns>
    abstract protected FieldId lineQtyFieldId()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>lineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line table Id.
    /// </summary>
    /// <returns>
    /// Line table Id.
    /// </returns>
    abstract protected TableId lineTableId()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>lineUnitIdFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the UnitId field Id in the line table.
    /// </summary>
    /// <returns>
    /// UnitId field Id.
    /// </returns>
    abstract protected FieldId lineUnitIdFieldId()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>lineVariantIdFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VariantId field Id in the line table.
    /// </summary>
    /// <returns>
    /// VariantId field Id.
    /// </returns>
    abstract protected FieldId lineVariantIdFieldId()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances the fetcher one step forward.
    /// </summary>
    /// <returns>
    /// true if the operation succeeded; false otherwise.
    /// </returns>
    public boolean moveNext()
    {
        boolean result = false;

        while (this.fetchLine())
        {
            if (this.validateLine())
            {
                result = true;
                break;
            }
        }

        return result;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the data fetcher class.
    /// </summary>
    /// <param name="_sourceId">
    /// Identifier of the source table header.
    /// </param>
    /// <param name="_priceDate">
    /// Price date.
    /// </param>
    /// <param name="_itemQtyFilter">
    /// Item quantity filter type.
    /// </param>
    /// <param name="_initQty">
    /// Determines whether ti initialize the quantity from source line.
    /// </param>
    protected void new(RetailLabelChangeSourceId _sourceId, TransDate _priceDate, RetailItemQtyFilter _itemQtyFilter, NoYes _initQty)
    {
        sourceId = _sourceId;
        priceDate = _priceDate;
        itemQtyFilter = _itemQtyFilter;
        itemQtyValidator = RetailLabelChangeItemQtyValidator::construct(_itemQtyFilter);
        initQty = _initQty;
        qr = new QueryRun(this.initQuery());
    }
]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity for the current line in the original ine unit of measure.
    /// </summary>
    /// <returns>
    /// Quantity for the current line.
    /// </returns>
    protected Qty qty()
    {
        Qty qty = 1;

        if (initQty)
        {
            qty = this.calcQty();
        }

        return qty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the fetcher to the beginning.
    /// </summary>
    /// <remarks>
    /// You must call moveNext to make it fetch the data for the first line.
    /// </remarks>
    public void reset()
    {
        qr.reset();
    }
]]></Source>
			</Method>
			<Method>
				<Name>shouldFetchNextStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the fetcher should fetch the next store.
    /// </summary>
    /// <returns>
    /// true if the fetcher should fetch the new store; false otherwise.
    /// </returns>
    protected boolean shouldFetchNextStore()
    {
        return false;
    }
]]></Source>
			</Method>
			<Method>
				<Name>storeMissingMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a message shown when there is no store related a line.
    /// </summary>
    /// <returns>
    /// A string messages.
    /// </returns>
    protected str storeMissingMessage()
    {
        return strFmt("@SYP4880941", line.(this.lineItemIdFieldId()));
    }
]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of measure for the current source line.
    /// </summary>
    /// <returns>
    /// Unit of measure for the current source line.
    /// </returns>
    protected UnitOfMeasureSymbol unitId()
    {
        FieldId fieldId = this.lineUnitIdFieldId();
        UnitOfMeasureSymbol unitid = '';

        if (fieldId)
        {
            unitId = line.(this.lineUnitIdFieldId());
        }

        return unitId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the currently fetched line.
    /// </summary>
    /// <returns>
    /// true if the validated succeeded; false otherwise.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws error in case no label setup is specified for an item and an action for an item having no label setup is set to Cancel in Retail parameters.
    /// </exception>
    protected boolean validateLine()
    {
        boolean productLabelValidationResult;

        boolean validateItemLabelSetup(RetailLabelTypeBase _labelType, boolean _dontShowWarnings = false, boolean _dontThrow = false)
        {
            RetailInventItemLabelSetup itemLabelSetup;
            boolean hasLabelSetup = false;
            Set organizationTypes = new Set(Types::Enum);
            organizationTypes.add(OMInternalOrganizationType::OperatingUnit);

            // Checl whether we have a label setup for the item of a given type applicable for the operating unit the store relates to.
            while select OMInternalOrganization, OMHierarchyType, RecId from itemLabelSetup
                where itemLabelSetup.LabelType == _labelType
                   && itemLabelSetup.ItemId == line.(this.lineItemIdFieldId())
            {
                if (OMInternalOrganization::isInternalOrganizationInSubHierarchy(
                        storeTable.OMOperatingUnitID,
                        itemLabelSetup.OMInternalOrganization,
                        itemLabelSetup.OMHierarchyType,
                        DateTimeUtil::utcNow(),
                        organizationTypes))
                {
                    hasLabelSetup = true;
                    break;
                }
            }

            // In case we do not have valid label setup, refer to the Action on item having no label setup parameter set up in Retail parameters.
            if (!hasLabelSetup)
            {
                switch (RetailParameters::find().ItemLabelSetupMissingAction)
                {
                    // Do nothing in case parameter says to include item.
                    case RetailItemLabelSetupMissingAction::IncludeItem:
                        if (!_dontShowWarnings)
                        {
                            warning(strFmt("@SYP4880938", line.(this.lineItemIdFieldId())), storeTable.StoreNumber);
                        }
                        break;
                    // Show warning and skip item in case parameters says skip item.
                    case RetailItemLabelSetupMissingAction::SkipItem:
                        if (!_dontShowWarnings)
                        {
                            warning(strFmt("@SYP4880939", line.(this.lineItemIdFieldId()), storeTable.StoreNumber));
                        }
                        return false;
                    // Cancel the whole operation in case the parameter says Cancel journals.
                    case RetailItemLabelSetupMissingAction::CancelJournals:
                        if (!_dontThrow)
                        {
                            throw error(strFmt("@SYP4880940", line.(this.lineItemIdFieldId())));
                        }
                        return false;
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
            }

            return true;
        }

        // Skip line if it is related to a warehouse that does not have any store related.
        if (!storeTable)
        {
            return checkFailed(this.storeMissingMessage());
        }

        // Skip line if the store has both print item labels and print shelf labels flags reset.
        if (!storeTable.generatesItemLabels && !storeTable.generatesShelfLabels)
        {
            return false;
        }

        if (storeTable.generatesItemLabels)
        {
            productLabelValidationResult = validateItemLabelSetup(RetailLabelTypeBase::ItemLabel, storeTable.generatesShelfLabels, storeTable.generatesShelfLabels);
            // Fail validation if we validate only Product labels setup.
            if (!productLabelValidationResult && !storeTable.generatesShelfLabels)
            {
                return false;
            }
        }

        if (storeTable.generatesShelfLabels)
        {
            // Skip line if it does not have valid shelf label setup and product label setup validation failed.
            if (!validateItemLabelSetup(RetailLabelTypeBase::ShelfLabel, storeTable.generatesItemLabels && productLabelValidationResult) && !productLabelValidationResult)
            {
                return false;
            }
        }

        // Validate line item quantity with itemQtyValidator if one is initialized.
        if (itemQtyValidator)
        {
            return itemQtyValidator.validate(line.(this.lineItemIdFieldId()), inventDim, priceDate);
        }

        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>variantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product variant Id.
    /// </summary>
    /// <returns>
    /// Variant number for the current line.
    /// </returns>
    /// <remarks>
    /// Gets the value of the VariantId field in the line if the field Id is specified; retrieves the variant number based on ItemId and InventDimId otherwise.
    /// </remarks>
    protected RetailVariantId variantId()
    {
        FieldId fieldId = this.lineVariantIdFieldId();
        RetailVariantId variantId;
        InventDIm inventDimLocal;

        if (fieldId)
        {
            variantId = line.(fieldId);
        }
        else
        {
            inventDimLocal.data(inventDim);
            inventDimLocal.clearNotSelectedDim(EcoResProductDimGroupSetup::inventDimParmProductDimensions());
            inventDimLocal = InventDim::findDim(inventDimLocal);
            variantId = InventDimCombination::find(line.(this.lineItemIdFieldId()), inventDim.inventDimId).RetailVariantId;
        }

        return variantId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constucts and initializes an instance of the fetcher class based on the source type provided.
    /// </summary>
    /// <param name="_sourceType">
    /// Type of source of the data fetcher.
    /// </param>
    /// <param name="_sourceId">
    /// Id of the source record.
    /// </param>
    /// <param name="_priceDate">
    /// Price date.
    /// </param>
    /// <param name="_itemQtyFilter">
    /// Item quantity filter type.
    /// </param>
    /// <param name="_initQty">
    /// A boolean determining whether to initialize the quantity of the lines from source.
    /// </param>
    /// <returns>
    /// An initialized instance of the data fetcher class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws error is the source type provided does not match any of the expected source types.
    /// </exception>
    public static RetailLabelChangeDataFetcherFromSource construct(
        RetailLabelChangeSourceType _sourceType,
        RetailLabelChangeSourceId _sourceId,
        TransDate _priceDate,
        RetailItemQtyFilter _itemQtyFilter,
        NoYes _initQty)
    {
        RetailLabelChangeDataFetcherFromSource fetcher = null;

        switch (_sourcetype)
        {
            case RetailLabelChangeSourceType::PurchaseOrder:
                fetcher = new RetailLabelChangeDataFetcher_PO(_sourceId, _priceDate, _itemQtyFilter, _initQty);
                break;
            case RetailLabelChangeSourceType::InventJournalTable:
                fetcher = new RetailLabelChangeDataFetcher_InventJour(_sourceId, _priceDate, _itemQtyFilter, _initQty);
                break;
            case RetailLabelChangeSourceType::InventTransferTable:
                fetcher = new RetailLabelChangeDataFetcher_Transfer(_sourceId, _priceDate, _itemQtyFilter, _initQty);
                break;
            case RetailLabelChangeSourceType::PriceDiscAdmTrans:
                fetcher = new RetailLabelChangeDataFetcher_PriceJour(_sourceId, _priceDate, _itemQtyFilter, _initQty);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return fetcher;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>