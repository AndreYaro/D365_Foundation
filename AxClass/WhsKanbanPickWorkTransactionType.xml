<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsKanbanPickWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsKanbanPickWorkTransactionType</c> class handles logic specific to the kanban picking work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::KanbanPick)]
class WhsKanbanPickWorkTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    protected boolean hasInventTransOrigin()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutbound</Name>
				<Source><![CDATA[
    public boolean isOutbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemRelatedPicking</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isItemRelatedPicking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSLocDirKanbanPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateKanbanPick);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::RawMaterialPicking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        this.addInventTransIdRange(_parameters.inventTransId, _parameters.query, tableNum(KanbanJobPickingListAll), fieldNum(KanbanJobPickingListAll, InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceOrder</Name>
				<Source><![CDATA[
    public void openSourceOrder(WHSWorkTable _whsWorkTable)
    {
        super(_whsWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceOrderMenuItemDisplayStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str sourceOrderMenuItemDisplayStr()
    {
        return menuitemDisplayStr(Kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderByWorkOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderByWorkOrder(WHSWorkOrderInterface _workOrder)
    {
        return Kanban::findKanbanId(_workOrder.parmOrderNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderedAndRemainQty</Name>
				<Source><![CDATA[
    public container findOrderedAndRemainQty(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        KanbanJobPickingListAll kanbanJobPickingListAll = KanbanJobPickingListAll::findInventTransId(_whsWorkLine.InventTransId, _whsWorkLine.DataAreaId);
        if (kanbanJobPickingListAll)
        {
            InventMovement inventMovement     = kanbanJobPickingListAll.inventMovement();
            return [-inventMovement.transQty(), -inventMovement.remainPhysical()];
        }
        return [0, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)    
    {
        WHSWaveTable::resetWhenWorkIsRemoved(_workTable.WaveId);
        WHSContainerTable::deleteRelatedToWorkContainersCreatedByContainerization(_workTable.WorkId);
        WhsProdPickWorkTransactionType::cancelLoadLinesForWork(_workTable.WorkId, this.parmDecrementLoadLineWorkCreatedQty());
        WHSWorkTable::updateWorkStatusToCancelledForOriginWork(_workTable.WorkId);
        this.cancelReplenishmentWork(_workTable.WorkId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ajust the container lines for the workline.
    /// </summary>
    /// <param name = "_workLine">The workline to cancel.</param>
    /// <param name = "_inventQty">The quantity to cancel.</param>
    [Hookable(false)]
    internal void adjustContainerLine(WHSWorkLine _workLine, InventQty _inventQty)
    {
        // we do not support containerization although when trying to cancel a work header we are trying to delete the container created via containerization.
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        QueryBuildDataSource qbdsKanbanJobPickingListAll = _query.dataSourceTable(tableNum(KanbanJobPickingListAll));
        QueryBuildDataSource qbdsInventDim = qbdsKanbanJobPickingListAll.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);

        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSiteId)).value(queryValue(_locDirTable.InventSiteId));
        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>