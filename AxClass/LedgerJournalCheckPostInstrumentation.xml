<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPostInstrumentation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalCheckPostInstrumentation</c> holds static methods to emit telemetry based on journal posting.
/// </summary>
internal final static class LedgerJournalCheckPostInstrumentation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLogger</Name>
				<Source><![CDATA[
    internal static SysInstrumentationLogger createLogger()
    {
        return SysInstrumentationLoggerFactory::CreateLogger(LedgerJournalInstrumentationConstants::SourceNameLedgerJournalPosting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCompletedJournalHeaderNotSetToPosted</Name>
				<Source><![CDATA[
    internal static void logCompletedJournalHeaderNotSetToPosted(LedgerJournalId _journalId, Counter _numberOfVouchers)
    {
        LedgerJournalTable ledgerJournal = LedgerJournalTable::find(_journalId);

        if (_numberOfVouchers && ledgerJournal.RecId != 0 && !ledgerJournal.Posted)
        {
            LedgerJournalCheckPostInstrumentation::createLogger().logError(LedgerJournalInstrumentationConstants::ErrorPostedFlagNotSetOnHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTmpVoucherWithContinuousNumberSequence</Name>
				<Source><![CDATA[
    internal static void logTmpVoucherWithContinuousNumberSequence(NumberSequenceId _numberSequenceId)
    {
        if (NumberSequenceTable::find(_numberSequenceId).Continuous == NoYes::Yes)
        {
            // Temporary vouchers with a continuous number sequence may result in blocking for the new number sequence generation
            LedgerJournalCheckPostInstrumentation::createLogger().logWarning(LedgerJournalInstrumentationConstants::WarningJournalHasTmpVoucherWithContinuousNumberSequence);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTtsLevelMismatch</Name>
				<Source><![CDATA[
    internal static void logTtsLevelMismatch(int _currentLevel, int _expectedLevel)
    {
        if (_currentLevel != _expectedLevel)
        {
            LedgerJournalCheckPostInstrumentation::createLogger().logError(strFmt(LedgerJournalInstrumentationConstants::ErrorTransactionScopeLevelMismatch, _expectedLevel, _currentLevel));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTelemetryForLargeNumberOfJournalLines</Name>
				<Source><![CDATA[
    internal static void logTelemetryForLargeNumberOfJournalLines(LedgerJournalId _journalNum)
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstonly count(RecId) from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _journalNum;

        if (ledgerJournalTrans.RecId > LedgerJournalInstrumentationConstants::JournalLineCountErrorThreshold)
        {
            LedgerJournalCheckPostInstrumentation::createLogger().logError(LedgerJournalInstrumentationConstants::JournalLineCountError);
        }
        else if (ledgerJournalTrans.RecId > LedgerJournalInstrumentationConstants::JournalLineCountWarningThreshold)
        {
            LedgerJournalCheckPostInstrumentation::createLogger().logWarning(LedgerJournalInstrumentationConstants::JournalLineCountWarning);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logJournalAlreadyPosted</Name>
				<Source><![CDATA[
    internal static void logJournalAlreadyPosted()
    {
        LedgerJournalCheckPostInstrumentation::createLogger().logError(LedgerJournalInstrumentationConstants::ErrorJournalAlreadyPosted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRetryDeadlock</Name>
				<Source><![CDATA[
    internal static void logRetryDeadlock()
    {
        SysInstrumentationProgressLogger::createLogger(
            LedgerJournalInstrumentationConstants::SourceNameLedgerJournalPosting,
            LedgerJournalInstrumentationConstants::InstrumentationNamespace).logRetryOnDeadlock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRetryUpdateConflict</Name>
				<Source><![CDATA[
    internal static void logRetryUpdateConflict()
    {
        SysInstrumentationProgressLogger::createLogger(
            LedgerJournalInstrumentationConstants::SourceNameLedgerJournalPosting,
            LedgerJournalInstrumentationConstants::InstrumentationNamespace).logRetryOnUpdateConflict();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>