<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCXMLPunchoutHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
/// <summary>
///    The <c>CatCXMLPunchoutHandler</c> class handles the CXML punch-out protocol.
/// </summary>
[ExportMetadataAttribute(enumstr(CatPunchoutEntityType), enumLiteralStr(CatPunchoutEntityType, cXML)),
    ExportAttribute(identifierstr(Dynamics.AX.Application.CatPunchoutHandler))]
public class CatCXMLPunchoutHandler extends CatPunchoutHandler
{
    private System.Net.HttpStatusCode   setupRequestResponseStatusCode;
    private str                         cXMLResponseStatusCode;
    private str                         cXMLResponseStatusMessage;
    private str                         punchOutSetupRequestUrl;
    private str                         punchOutSetupRequestResponseRedirectUrl;
    private str                         punchOutResponseXML;
    private CatPunchoutRequestRecId     punchoutRequestRecId;
    private ICatCXMLPunchOutLogger      catCXMLPunchOutLogger;
     
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeLogger</Name>
				<Source><![CDATA[
    protected void initializeLogger(ICatCXMLPunchOutLogger _catCXMLPunchOutLogger)
    {
        this.catCXMLPunchOutLogger = _catCXMLPunchOutLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CatCXMLPunchoutHandler construct()
    {
        CatCXMLPunchoutHandler handler = new CatCXMLPunchoutHandler();
        handler.initializeLogger(new CatCXMLPunchOutLogger());

        return new CatCXMLPunchoutHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetupRequestResponseStatusCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the setup request HTTPS response status code.
    /// </summary>
    /// <returns>
    /// The status code.
    /// </returns>
    public System.Net.HttpStatusCode getSetupRequestResponseStatusCode()
    {
        return setupRequestResponseStatusCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCXMLResponseStatusCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the setup request CXML response status code.
    /// </summary>
    /// <returns>
    /// The status code.
    /// </returns>
    public str getCXMLResponseStatusCode()
    {
        return cXMLResponseStatusCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCXMLResponseStatusMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the setup request CXML response status message.
    /// </summary>
    /// <returns>
    /// The status message.
    /// </returns>
    public str getCXMLResponseStatusMessage()
    {
        return cXMLResponseStatusMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPunchOutSetupRequestUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the setup request URL.
    /// </summary>
    /// <returns>
    /// The URL.
    /// </returns>
    public str getPunchOutSetupRequestUrl()
    {
        return punchOutSetupRequestUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPunchOutSetupRequestResponseRedirectUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get setup request response redirect URL.
    /// </summary>
    /// <returns>
    /// The URL.
    /// </returns>
    public str getPunchOutSetupRequestResponseRedirectUrl()
    {
        return punchOutSetupRequestResponseRedirectUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPunchOutResponseXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Punchout response cXML.
    /// </summary>
    /// <returns>
    /// The Punchout response cXML.
    /// </returns>
    public str getPunchOutResponseXML()
    {
        return punchOutResponseXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatSessionProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cat session properties
    /// </summary>
    /// <param name = "_externalCatalog">
    /// External catalog
    /// </param>
    /// <param name = "_catPropertyName">
    /// Catalog property name
    /// </param>
    /// <returns>
    /// Catalog property value
    /// </returns>
    private CatPropertyValue getCatSessionProperty(CatExternalCatalogRecId _externalCatalog, CatPropertyName _catPropertyName)
    {
        CatExternalCatalogProperties    catExternalCatalogProperties;

        select firstonly * from catExternalCatalogProperties
        where catExternalCatalogProperties.ExternalCatalog == _externalCatalog
        && catExternalCatalogProperties.Name == _catPropertyName;

        return catExternalCatalogProperties.editCatPropertyName(false, '');

    }

]]></Source>
			</Method>
			<Method>
				<Name>punchout</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Execute punchout to the external catalog site.
    /// </summary>
    /// <param name = "_catalog">
    /// An instance of the <c>CatExternalCatalog</c> data type.
    /// </param>
    protected void punchout(CatExternalCatalog _catalog)
    {
        System.Exception exception;
        try
        {
            XmlDocument setupRequestCXMLDocument = this.prepareSetupRequestCXmlDocument(_catalog.RecId);

            catCXMLPunchOutLogger.addToLog("@CXM:PrepareToStartPunchOut");
            System.Net.HttpWebResponse response = this.preparePunchOutSetupHttpWebRequest(setupRequestCXMLDocument).GetResponse();
            setupRequestResponseStatusCode = this.getPunchOutSetupResponseStatusCode(response);
            catCXMLPunchOutLogger.addToLog("@CXM:ResponseStatusCode" + " " + setupRequestResponseStatusCode.ToString());
                        
            this.navigateToPunchOutSetupResponseRedirectURL(response, _catalog.IsOpenedInNewWindow);
        }
        catch(exception)
        {
            if (punchoutRequestRecId)
            {
                this.discardPunchoutRequest(punchoutRequestRecId);
            }

            this.logErrorAndThrow(exception.Message);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>discardPunchoutRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discards punchout request and related punchout session data.
    /// </summary>
    /// <param name = "_recId">
    /// A <c>CatPunchoutRequestRecId</c> of the <c>CatPunchoutRequest</c> table.
    /// </param>
    public void discardPunchoutRequest(CatPunchoutRequestRecId _recId)
    {
        if (_recId)
        {
            ttsbegin;

            CatCXMLPunchoutRequest punchoutRequest = CatPunchoutRequest::find(_recId, true) as CatCXMLPunchoutRequest;
       
            if (!punchoutRequest.RecId)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            punchoutRequest.RequestStatus = CatPunchoutRequestStatus::Expired;

            CatCXMLPunchoutSession cXMLPunchoutSession = punchoutRequest.cXMLPunchoutSession(true);

            if (cXMLPunchoutSession.RecId)
            {
                cXMLPunchoutSession.delete();
            }
            else
            {
                punchoutRequest.delete();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateToPunchOutSetupResponseRedirectURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigate to the redirect url presented in the response.
    /// </summary>
    /// <param name = "_response">
    /// An instance of the <c>System.Net.HttpWebResponse</c> setup request response.
    /// </param>
    /// <param name = "_isOpenedInNewWindow">
    /// An instance of the <c>Boolean</c> data type.
    /// </param>
    protected void navigateToPunchOutSetupResponseRedirectURL(System.Net.HttpWebResponse _response, boolean _isOpenedInNewWindow)
    {
        XmlDocument responseCXmlDocument = this.getPunchOutSetupResponseXmlDocument(_response);

        if (this.validatePunchOutSetupResponseStatusCode(_response, responseCXmlDocument))
        {
            Browser browser = new Browser();
            browser.navigate(this.getPunchOutSetupRequestResponseRedirectUrl(), _isOpenedInNewWindow, false);
        }
        else
        {
            catCXMLPunchOutLogger.addToLog("@CXM:ReadPunchOutResponseMessageError");
            this.logErrorAndThrow("@SCM:ValidationForPunchOutSetupResponseStatusCodeFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPunchOutSetupResponseXmlDocument</Name>
				<Source><![CDATA[
    private XmlDocument getPunchOutSetupResponseXmlDocument(System.Net.HttpWebResponse _response)
    {
        System.String   responseString;

        catCXMLPunchOutLogger.addToLog("@CXM:ProcessResponseMessage");

        //Get the response
        using (System.IO.Stream responseStream = _response.GetResponseStream())
        {

            using(System.IO.StreamReader streamReader = new System.IO.StreamReader(responseStream))
            {
                responseString = streamReader.ReadToEnd();
            }

        }

        punchOutResponseXML = responseString;

        XmlDocument responseXmlDocument = new XmlDocument();
        responseXmlDocument.loadXml(responseString);

        return responseXmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPunchOutSetupResponseStatusCode</Name>
				<Source><![CDATA[
    private System.Net.HttpStatusCode getPunchOutSetupResponseStatusCode(System.Net.HttpWebResponse _response)
    {
        return _response.StatusCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preparePunchOutSetupHttpWebRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct HttpWebRequest for the punch out setup request.
    /// </summary>
    /// <param name = "_setupRequestCXmlDocument">
    /// An instance of the <c>XmlDocument</c> data type that contains the CXML document for the setup reqeust.
    /// </param>
    /// <returns>
    /// An instance of the <c>System.Net.HttpWebRequest</c>.
    /// </returns>
    protected System.Net.HttpWebRequest preparePunchOutSetupHttpWebRequest(XmlDocument _setupRequestCXmlDocument)
    {
        catCXMLPunchOutLogger.addToLog("@CXM:ExtractSupplierURLFromExternalCatalog");
        str supplierSetupRequestURL = this.getSupplierSetupURL(_setupRequestCXmlDocument);

        catCXMLPunchOutLogger.addToLog("@CXM:SupplierURL" + supplierSetupRequestURL);

        if (supplierSetupRequestURL == '')
        {
            catCXMLPunchOutLogger.addToLog("@CXM:MissingSupplierURLFromExternalCatalog");
            this.logErrorAndThrow(strFmt ('%1 %2',"@SCM:IncorrectSupplierSetupURL", strFmt("@SYS96434", supplierSetupRequestURL)));
        }

        System.Exception            exception;
        System.Net.HttpWebRequest   request;

        try
        {
            // Check the protocol
            if (!CatCXMLUseSystemDefaultSecurityProtocols::instance().isEnabled()
                && System.Net.ServicePointManager::get_SecurityProtocol() == System.Net.SecurityProtocolType::Ssl3 | System.Net.SecurityProtocolType::Tls)
            {
                SysSecurityProtocolTypeHelper::SetSecurityProtocolType(/*ssl3Support:*/ false);
            }

            System.Net.SecurityProtocolType secprotocol = System.Net.ServicePointManager::get_SecurityProtocol();

            catCXMLPunchOutLogger.addToLog(secprotocol.ToString());

            // Pass true to the constructor to enable error detection.
            System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding(false, true);
            System.Byte[] byteArray = encoding.GetBytes(_setupRequestCXmlDocument.ToString());

            catCXMLPunchOutLogger.addToLog("@CXM:SupplierURLWebRequestCreate");
            request = System.Net.WebRequest::CreateHttp(supplierSetupRequestURL);

            request.Method = 'POST';
            request.ContentType = 'text/xml; charset=utf-8';
            request.ContentLength = byteArray.Length;

            using(var dataStream = request.GetRequestStream())
            {
                dataStream.Write(byteArray, 0, byteArray.Length);
            }
        }
        catch (exception)
        {
            this.logErrorAndThrow(exception.Message);
        }

        return request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupplierSetupURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the supplier URL from the setup request CXML document.
    /// </summary>
    /// <param name = "_setupRequestCXmlDocument">
    /// An instance of the <c>XmlDocument</c> data type that contains the CXML document for the setup request.
    /// </param>
    /// <returns>
    /// The URL.
    /// </returns>
    protected str getSupplierSetupURL(XmlDocument _setupRequestCXmlDocument)
    {
        System.Exception exception;

        try
        {
            XmlNode supplierSetupURLNode = _setupRequestCXmlDocument.selectSingleNode('descendant::SupplierSetup/URL');
            if (supplierSetupURLNode && supplierSetupURLNode.innerText() != '')
            {
                punchOutSetupRequestUrl = this.getSecureUrl(supplierSetupURLNode.innerText());
            }
        }
        catch (exception)
        {
            this.logErrorAndThrow(exception.Message);
        }

        return punchOutSetupRequestUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseRedirectURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the redirect URL from the setup request response CXML document.
    /// </summary>
    /// <param name = "_responseCXmlDocument">
    /// An instance of the <c>XmlDocument</c> data type that contains the CXML document from the setup request response.
    /// </param>
    /// <returns>
    /// The URL.
    /// </returns>
    protected str getResponseRedirectURL(XmlDocument _responseCXmlDocument)
    {

        System.Text.Encoding            encodingUTF8;
        System.Byte[]                   byteArray;
        str                             supplierURL = '';
        str                             purchResponseXML;
        str                             encoding = '';
        System.String                   responseString;

      
        if (punchOutResponseXML)
        {
            responseString = this.getPunchOutResponseXML();
        }
        else
        {
            responseString = _responseCXmlDocument.outerXml();
        }

        catCXMLPunchOutLogger.parmSetupResponse(responseString);
        catCXMLPunchOutLogger.updateLogSetup();

        purchResponseXML = this.replaceNewLine(responseString);

        try
        {
            //Run it through to encode for UTF8 just to be sure, probably un-necessary
            catCXMLPunchOutLogger.addToLog("@CXM:EncodeMessage");

            encodingUTF8 = System.Text.Encoding::get_UTF8();
            byteArray = encodingUTF8.GetBytes(purchResponseXML);
            encoding = encodingUTF8.GetString(byteArray, 0, byteArray.Length);

            //If there is no data in the string just error.
            if (!System.String::IsNullOrEmpty(encoding))
            {
                supplierURL = this.parseSupplierURL(encoding);
            }
            else
            {
                return supplierURL;
            }

        }
        catch (Exception::Error)
        {
            catCXMLPunchOutLogger.addToLog("@CXM:ReadPunchOutResponseMessageError");
            return supplierURL;
        }

        //Set the punchOutSetupRequestResponseRedirectUrl property
        punchOutSetupRequestResponseRedirectUrl = '';

        if (supplierURL)
        {
            punchOutSetupRequestResponseRedirectUrl = this.getSecureURL(supplierURL);
        }

        return punchOutSetupRequestResponseRedirectUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseSupplierURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse the supplier URL
    /// </summary>
    /// <param name = "_encoding">
    /// The <c>str</c> data type
    /// </param>
    /// <returns>
    /// The supplier url
    /// </returns>
    private str parseSupplierURL(str _encoding)
    {
        
        System.Xml.XmlReaderSettings    readerSettings;
        str                             supplierURL     = '';
        str                             encoding        = _encoding;
        str                             stringstart     = '';
        str                             replaceAmp;
        int                             findAmp = 0;
        
        try
        {
            //get the first 5 characters as this should be the start of and XML doc we can test for.
            stringstart = subStr(encoding,1,5);

            if (stringstart == "<?xml" || stringstart == "<!DOC" || stringstart == "<cXML")
            {
                catCXMLPunchOutLogger.addToLog("@CXM:LoadResponseToStringReader");

                //Setup reader. Read the string parsed in and then load it into the XMLReader.
                using(System.IO.StringReader stringReader = new System.IO.StringReader(encoding))
                {
                    //Setup reader settings
                    readerSettings = new System.Xml.XmlReaderSettings();

                    //As the cXML files use DTD's then we needs to turn this parsing on otherwise the reader will fail.
                    readerSettings.set_DtdProcessing(System.Xml.DtdProcessing::Parse);

                    catCXMLPunchOutLogger.addToLog("@CXM:LoadStringtoXMLReader");

                    using(System.Xml.XmlReader xmlreader = System.Xml.XmlReader::Create(stringReader,readerSettings))
                    {
                        xmlreader.MoveToContent();

                        catCXMLPunchOutLogger.addToLog("@CXM:LocateRedirectURL");
                        
                        //If a vendor returns a URL that is encoded incorrectly with & XML reader won't read it.
                        replaceAmp = this.catCXMLPunchOutLogger.getCatSessionProperty("CLEANAMP");

                        if (replaceAmp == "TRUE" || replaceAmp == "true")
                        {
                            supplierURL = this.replaceAmp(encoding);
                        }

                        else
                        {
                            //Check for & to see if we can warn the user that this might be the issue.
                            findAmp = strFind(encoding,"&",1,strLen(encoding));

                            if (findAmp > 0)
                            {
                                catCXMLPunchOutLogger.addToLog("@CXM:ResponseMessageTextContainsAmpersand");
                            }

                            if (xmlreader.ReadToDescendant("URL"))
                            {
                                supplierURL = xmlreader.ReadElementString();
                            }
                        }

                        catCXMLPunchOutLogger.addToLog("@CXM:SupplierURL" + supplierURL);
                    }
                }
                        
                catCXMLPunchOutLogger.addToLog("@CXM:CloseStringXMLReader");
            }

            else
            {
                catCXMLPunchOutLogger.addToLog("@CXM:ReadPunchOutResponseMessageError");
                return supplierURL;
            }

        }
        catch (Exception::Error)
        {
            catCXMLPunchOutLogger.addToLog("@CXM:ReadPunchOutResponseMessageError");
            return supplierURL;
        }

        return supplierURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePunchOutSetupResponseStatusCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate setup request response status code and the response CXML status code.
    /// </summary>
    /// <param name = "_response"></param>
    /// An instance of the System.Net.HttpWebResponse.
    /// <param name = "_responseCXmlDocument">
    /// An instance of the <c>XmlDocument</c> data type that contains the CXML document from the setup request response.
    /// </param>
    /// <returns>
    /// true if the response status is OK; otherwise, false.
    /// </returns>
    protected boolean validatePunchOutSetupResponseStatusCode(System.Net.HttpWebResponse _response, XmlDocument _responseCXmlDocument)
    {
        System.Exception exception;

        boolean success = false;
        try
        {
            success = (this.getPunchOutSetupResponseStatusCode(_response) == System.Net.HttpStatusCode::OK || this.getPunchOutSetupResponseStatusCode(_response) == System.Net.HttpStatusCode::Created);

            if (success)
            {
                XmlNode responseStatus = _responseCXmlDocument.selectSingleNode('descendant::Response/Status');
                XmlNamedNodeMap attributes = responseStatus.attributes();

                cXmLResponseStatusMessage = attributes.getNamedItem('text').text();
                cXmLResponseStatusCode = attributes.getNamedItem('code').text();
            
                success = (cXmLResponseStatusCode == '200');

                str redirectURL = this.getResponseRedirectURL(_responseCXmlDocument);

                if (redirectURL == '')
                {
                    this.logErrorAndThrow(strFmt ("%1 %2 %3"
                                                  ,"@SCM:IncorrectSetupRequestResponseRedirectURL"
                                                  , strFmt("@SYS96434", redirectURL)
                                                  , strFmt("@SCM:CXMLResponseStatusCodeAndStatusMessage", cXmLResponseStatusCode, cXmLResponseStatusMessage)));
                }
            }
        }
        catch (exception)
        {
            this.logErrorAndThrow(exception.Message);
        }
        
        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSetupRequestCXmlDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare CXML document for the setup request.
    /// </summary>
    /// <param name = "_catalog">
    /// An instance of the <c>CatExternalCatalogRecId</c> Rec ID.
    /// </param>
    /// <returns>
    /// An instance of the <c>XmlDocument</c> CXML document.
    /// </returns>
    protected XmlDocument prepareSetupRequestCXmlDocument(CatExternalCatalogRecId _catalog)
    {
        str addShipTo;
        str punchouttz;

        if (!_catalog)
        {
            this.logErrorAndThrow(Error::missingRecord(tableStr(CatExternalCatalog)));
        }
        
        str buyerCookie;
        str returnURL;
 
        [buyerCookie, returnURL] = this.startPunchoutSession();

        var setupRequestMessage = this.getSetupRequestMessage(_catalog);
        
        System.Exception exception;
        XmlDocument setupRequestCXmlDocument;

        catCXMLPunchOutLogger.addToLog("@CXM:UpdateSetupResponseMessageFromExternalCatalog");

        try
        {
            // Pass null to ensure any external DTD references encountered by the reader are not resolved.
            setupRequestCXmlDocument = new XmlDocument();
            setupRequestCXmlDocument.xmlResolver(null);

            CatPropertyValue dtdprocess = this.GetCatSessionProperty(_catalog, 'PUNCHOUTDTDPROCESS');
            if (dtdprocess == "TRUE" || dtdprocess == "true")
            {
                setupRequestCXmlDocument.loadXml(setupRequestMessage, true);
            }
            else
            {
                setupRequestCXmlDocument.loadXml(setupRequestMessage);
            }
            
            XmlParseError xmlParseError = setupRequestCXmlDocument.parseError();

            if (xmlParseError.errorCode())
            {
                throw error(isSystemAdministrator() ? xmlParseError.toString() : xmlParseError.reason());
            }

            setupRequestCXmlDocument.selectSingleNode('descendant::cXML/@payloadID').innerText(this.getPayloadId());

            punchouttz = this.getCatSessionProperty(_catalog,'PUNCHOUTTZ');
            if (punchouttz == "TRUE" || punchouttz == "true")
            {
                setupRequestCXmlDocument.selectSingleNode('descendant::cXML/@timestamp').InnerText(this.getTimestampTZ());
            }
            else
            {
                setupRequestCXmlDocument.selectSingleNode('descendant::cXML/@timestamp').InnerText(this.getTimestamp());
            }


            setupRequestCXmlDocument.selectSingleNode('descendant::PunchOutSetupRequest/BuyerCookie').innerText(buyerCookie);
            setupRequestCXmlDocument.selectSingleNode('descendant::BrowserFormPost/URL').InnerText(returnURL);

            catCXMLPunchOutLogger.addToLog("@CXM:UpdateExtrinsics");
            this.addDynamicExtrinsics(_catalog, setupRequestCXmlDocument);

            //Check if the property is set to insert the ShipToAddress in the punchout request.
            addShipTo = this.getCatSessionProperty(_catalog,'PUNCHOUTSHIPTO');
            catCXMLPunchOutLogger.addToLog("@CXM:IsShipToAddressRequired" + " " + "PUNCHOUTSHIPTO" + " " + addShipTo);

            if (addShipTo == "true" || addShipTo == "TRUE")
            {
                this.insertShipToAddress(setupRequestCXmlDocument);
                catCXMLPunchOutLogger.addToLog("@CXM:AddressAdded");
            }

        }
        catch (exception)
        {
            this.logErrorAndThrow(strFmt("@SCM:FailedToOpenCXMLEntity", "@SYS98555"));
        }

        catCXMLPunchOutLogger.parmSetupRequest(setupRequestCXmlDocument.xml());
        catCXMLPunchOutLogger.updateLogSetup();
        
        return setupRequestCXmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetupRequestMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cXML request setup message template to be used for the session.
    /// </summary>
    /// <param name = "_catalog">External catalog for which the session is created.</param>
    /// <returns>Setup request message.</returns>
    private XML getSetupRequestMessage(CatExternalCatalogRecId _catalog)
    {
        XML message;

        unchecked(Uncheck::TableSecurityPermission)
        {
            message = CatExternalMessageFormat::findByExternalCatalog(_catalog).MessageBody;
        }

        if (message == '')
        {
            this.logErrorAndThrow(Error::missingRecord(tableStr(CatExternalMessageFormat)));
        }

        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startPunchoutSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts new punchout session.
    /// </summary>
    /// <returns>Container in form [buyerCookie, returnURL].</returns>
    private container startPunchoutSession()
    {
        guid punchOutId;
        str buyerCookie;
        str returnURL;

        if (isValidationPunchout)
        {
            punchOutId = newGuid();
            buyerCookie = guid2Str(punchOutId);

            this.initializeLogger(new CatCXMLPunchOutValidateSettingsLogger());
            catCXMLPunchOutLogger.initialize(punchOutId);

            var environment = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory::GetApplicationEnvironment();
            var aosHostUri = new System.Uri(environment.Infrastructure.HostUrl);

            returnURL = aosHostUri.AbsoluteUri;

        }
        else
        {

            [buyerCookie, returnURL] = this.createPunchoutSession();

            if (returnURL == '')
            {
                this.logErrorAndThrow(strFmt ('%1 %2',"@SCM:IncorrectBrowserFormPost", strFmt("@SYS96434", returnURL)));
            }
        }

        return [buyerCookie, returnURL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynamicExtrinsics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Injects dynamics extrinsics into the punchout setup request.
    /// </summary>
    /// <param name = "_externalCatalog">External catalog for which the request is created.</param>
    /// <param name = "_cxml">Punchout request message.</param>
    private void addDynamicExtrinsics(
        CatExternalCatalogRecId _externalCatalog,
        XmlDocument             _cxml)
    {
        XmlElement rootNode;

        rootNode = _cxml.selectSingleNode('/descendant::PunchOutSetupRequest');

        CatExternalMessageFormat    messageFormat;
        CatCXMLExtrinsic            extrinsic;
        
        while select extrinsic
            exists join messageFormat
                where extrinsic.MessageFormat           == messageFormat.RecId
                      && messageFormat.ExternalCatalog  == _externalCatalog
        {
            var value = CatCXMLExtrinsicValueProvider::getInstance(extrinsic.Value).value();
            var node = _cxml.createElement('Extrinsic');
            node.setAttribute('name', extrinsic.Name);
            node.InnerText(value);

            rootNode.InsertAfter(node,rootNode.FirstChild());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayloadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct payload ID.
    /// </summary>
    /// <returns>
    /// Payload id.
    /// </returns>
    protected str getPayloadId()
    {
        return guid2Str(newGuid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimestamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get time stamp.
    /// </summary>
    /// <returns>
    /// The current time stamp.
    /// </returns>
    protected str getTimestamp()
    {
        return DateTimeUtil::toStr(DateTimeUtil::utcNow());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimestampTZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get time stamp.
    /// </summary>
    /// <returns>
    /// The current time stamp.
    /// </returns>
    protected str getTimestampTZ()
    {
        str utcdatetimeTZ;

        //Appending Z to the end of the formatted string to support ISO8601 for UTC representation of time.
        utcdatetimeTZ = DateTimeUtil::toStr(DateTimeUtil::utcNow());
        utcdatetimeTZ = utcdatetimeTZ + '+00:00';

        return utcdatetimeTZ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPunchoutSession</Name>
				<Source><![CDATA[
    private container createPunchoutSession()
    {
        ttsbegin;

        this.checkPunchoutRequestAttributes();

        CatCXMLPunchoutSession punchoutSession;
        str buyerCookie;
        str returnURL;

        unchecked(Uncheck::TableSecurityPermission)
        {
            punchoutSession = CatCXMLPunchoutSession::createPunchoutSession();
            buyerCookie  = guid2Str(punchoutSession.PunchoutID);
            returnURL = punchoutSession.getBrowserFormPostURL();
        }

        if (punchoutSession.RecId)
        {
            CatCXMLPunchoutRequest punchoutRequest;
            punchoutRequest.initFromPunchoutRequestAttributes(punchoutRequestAttributes);
            punchoutRequest.CXMLPunchoutSession = punchoutSession.RecId;


            punchoutRequest.insert();
            punchoutRequestRecId = punchoutRequest.RecId;

            //Start the log.
            this.initializeLogger(new CatCXMLPunchOutLogger());
            catCXMLPunchOutLogger.initialize(punchoutSession.PunchoutId);
        }

        ttscommit;
        
        catCXMLPunchOutLogger.addToLog("@CXM:PunchoutSessionID" + buyerCookie);
        catCXMLPunchOutLogger.addToLog("@CXM:BasketPostbackURL" + returnURL);

        return [buyerCookie, returnURL];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertShipToAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Injects ShipTo Address in the punchout setup request.
    /// </summary>
    /// <param name = "_externalCatalog">
    /// External catalog for which the request is created.
    /// </param>
    /// <param name = "_cxml">
    /// Punchout request message.
    /// </param>
    private void insertShipToAddress(XmlDocument _cxml)
    {
        XmlElement                  rootNode;
        XmlElement                  shipToNode, addNode, nameNode, postAddNode, streetNode, cityNode, stateNode, zipNode, countryNode;
        LogisticsLocation           logisticsLocation;
        LogisticsPostalAddress      postAddress;
        CompanyInfo                 companyInfo;
        LogisticsLocationRole       logisticsLocationRole;

        companyInfo                     = CompanyInfo::findDataArea(curExt());
        logisticsLocationRole           = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery);
        logisticsLocation               = LogisticsLocationDefault::findSimpleDefault(companyInfo, logisticsLocationRole);
        postAddress                     = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
        
        rootNode = _cxml.selectSingleNode('/descendant::PunchOutSetupRequest');
        shipToNode  = _cxml.createElement('ShipTo');
        rootNode.appendChild(shipToNode);

        addNode     = _cxml.createElement('Address');

        if (CatCXMLPunchoutPrepareSetupRequestUseDeliveryAddressLocationIdFlight::instance().isEnabled())
        {
            addNode.setAttribute('addressID', logisticsLocation.LocationId);
        }
        else
        {
            addNode.setAttribute('addressID', '000000001');
        }
        
        shipToNode.appendChild(addNode);

        nameNode    = _cxml.createElement('Name');
        nameNode.setAttribute('xml:lang', SystemParameters::find(false).SystemLanguageId);
        nameNode.text(logisticsLocation.Description);
        addNode.appendChild(nameNode);

        postAddNode = _cxml.createElement('PostalAddress');
        addNode.appendChild(postAddNode);

        streetNode  = _cxml.createElement('Street');
        streetNode.text(postAddress.Street);
        postAddNode.appendChild(streetNode);

        cityNode    = _cxml.createElement('City');
        cityNode.text(postAddress.City);
        postAddNode.appendChild(cityNode);

        stateNode   = _cxml.createElement('State');
        stateNode.text(postAddress.State);
        postAddNode.appendChild(stateNode);

        zipNode     = _cxml.createElement('PostalCode');
        zipNode.text(postAddress.ZipCode);
        postAddNode.appendChild(zipNode);

        countryNode = _cxml.createElement('Country');
        countryNode.setAttribute('isoCountryCode',LogisticsAddressCountryRegion::find(postAddress.CountryRegionId).ISOcode);
        countryNode.text(postAddress.CountryRegionId);
        postAddNode.appendChild(countryNode);


    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceAmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace '&' in the URL
    /// </summary>
    /// <param name = "responsetxt">
    /// Response URL returned by the vendor.
    /// </param>
    /// <returns>
    /// URL after replacing '&'
    /// </returns>
    private str replaceAmp(str responsetxt)
    {
        System.String               URLStringclean, URLStringUnclean;
        int                         URLStart;
        int                         URLEnd;
        int                         XMLLength;
        int                         URLstringlen;
        str                         URLString;

        //find the length of the message
        XMLLength = strLen(responsetxt);
        
        //Find where the URL tag starts and endds. Should put check if nothing is found.
        URLStart = strScan(responsetxt,"<URL>",1,XMLLength);
        URLEnd = strScan(responsetxt,"</URL>",1,XMLLength);

        //Determine the length of the URL
        URLstringlen = URLEnd - URLStart;

        //Get the string between the tags as that should be the URL with the & to correct
        URLString = subStr(responsetxt,URLStart+5,URLstringlen-5);
        URLStringUnclean = URLString;

        //Clean the string by replacing the & with the encoded version.
        URLStringclean = URLStringUnclean.Replace("&","&amp;");

        //Return the cleaned version.
        return URLStringclean;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceNewLine</Name>
				<Source><![CDATA[
    private str replaceNewLine(System.String _responseString)
    {
        str replacenewline;
        str purchResponseXML;

        //Check if we need to strip out the new line form a specific vendors message.
        replacenewline = catCXMLPunchOutLogger.getCatSessionProperty("REPLACENEWLINE");
        catCXMLPunchOutLogger.addToLog("REPLACENEWLINE = " + replacenewline);

        catCXMLPunchOutLogger.addToLog("@CXM:BeforeReplaceNewLine");
        catCXMLPunchOutLogger.addToLog("@CXM:DashedLine");
        catCXMLPunchOutLogger.addToLog(_responseString);
        catCXMLPunchOutLogger.addToLog("@CXM:DashedLine");

        //Some vendors might return a response message that is txt and now formatted for XML so the reader will fail
        if (replacenewline == "TRUE" || replacenewline == "true")
        {
      
            purchResponseXML = _responseString.Replace("\r\n","").Replace("\n","").Replace("\r","");

            catCXMLPunchOutLogger.addToLog("@CXM:AfterReplaceNewLine");
            catCXMLPunchOutLogger.addToLog("@CXM:DashedLine");
            catCXMLPunchOutLogger.addToLog(purchResponseXML);
            catCXMLPunchOutLogger.addToLog("@CXM:DashedLine");

        }
        else
        {
            purchResponseXML = _responseString;
        }

        return purchResponseXML;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>