<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSFulfillmentRateValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSFulfillmentRateValidator</c> class is responsible
/// for validating fulfillment rate requirements.
/// </summary>
public class WHSFulfillmentRateValidator
{
    protected WHSFulfillmentRate fulfillmentRate;
    protected WHSFulfillmentType fulfillmentType;
    protected WHSIFulfillmentRateValidationCalculator calculator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSFulfillmentRateValidator construct()
    {
        return new WHSFulfillmentRateValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newValidator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>WHSFulfillmentRateValidator</c> class.
    /// </summary>
    /// <param name = "_fulfillmentRate">The fulfillment rate.</param>
    /// <param name = "_fulfillmentType">The fulfillment type.</param>
    /// <param name = "_calculator">A calculator that can calculate the values needed to validate if the fulfillment rate is met.</param>
    /// <returns>A new instance of the <c>WHSFulfillmentRateValidator</c> class.</returns>
    public static WHSFulfillmentRateValidator newValidator(
        WHSFulfillmentRate _fulfillmentRate,
        WHSFulfillmentType _fulfillmentType,
        WHSIFulfillmentRateValidationCalculator _calculator
        )
    {
        WHSFulfillmentRateValidator validator = WHSFulfillmentRateValidator::construct();

        validator.fulfillmentRate = _fulfillmentRate;
        validator.fulfillmentType = _fulfillmentType;
        validator.calculator = _calculator;

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFulfillmentRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified sales order meets the fulfillment requirements
    /// for releasing to warehouse.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order.
    /// </param>
    /// <param name="_errorTolerance">
    /// The parameter which determines how the application should handle fulfillment rate violation.
    /// </param>
    /// <returns>
    /// true if the sales order is fulfilled or doesn't have the fulfillment type; otherwise, false.
    /// </returns>
    public static boolean checkFulfillmentRate(SalesTable _salesTable, ErrorTolerance _errorTolerance)
    {
        WHSInstrumentationLogger logger = WHSInstrumentationLogger::createLogger(classStr(WHSFulfillmentRateValidator));
        WHSFulfillmentRateValidatorInstrumentationActivities instrumentationActivities = logger.fulfillmentRateValidator();

        boolean result = true;

        using (var activityContext = instrumentationActivities.checkFulfillmentRate(_salesTable.RecId))
        {
            if (_errorTolerance != ErrorTolerance::Accept)
            {
                WHSFulfillmentRate  fulfillmentRate;
                WHSFulfillmentType  fulfillmentType;

                [fulfillmentType, fulfillmentRate] = WHSFulfillmentRateRequirementsProvider::getFulfillmentTypeAndRate(_salesTable);

                if (!WHSFulfillmentRateValidator::isFulfillmentRateValid(_salesTable.SalesId, fulfillmentType, fulfillmentRate))
                {
                    str fulfillmentTypeText = enum2Str(fulfillmentType);
                    str fulfillmentRateViolationMessage = strFmt("@WAX2943", fulfillmentRate, fulfillmentTypeText, _salesTable.SalesId);

                    WHSFulfillmentRateValidator::outputValidationResult(fulfillmentRateViolationMessage, _errorTolerance);

                    result = false;
                }
            }

            instrumentationActivities.parmIsCheckFulfillmentRatePassed(activityContext, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFulfillmentRateForSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified sales order meets the fulfillment requirements
    /// for releasing to warehouse using the sales order form.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order.
    /// </param>
    /// <remarks>
    /// Fulfillment requirements violation will either be ignored,
    /// a warning will be written to infolog or an error will be thrown,
    /// depending on the error tolerance level.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an error if the fulfillment requirements are violated
    /// and the error tolerance is set to the error level.
    /// </exception>
    public static void checkFulfillmentRateForSales(SalesTable _salesTable)
    {
        ErrorTolerance errorTolerance = WHSFulfillmentRateRequirementsProvider::getErrorToleranceForSalesFormRelease(_salesTable);

        WHSFulfillmentRateValidator::checkFulfillmentRate(_salesTable, errorTolerance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFulfillmentRateValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the fulfillment rate of the sales order is valid.
    /// </summary>
    /// <param name="_salesId">
    /// The ID of the sales order.
    /// </param>
    /// <param name="_fulfillmentType">
    /// The type of the fulfillment requirements.
    /// </param>
    /// <param name="_fulfillmentRate">
    /// The required fulfillment rate.
    /// </param>
    /// <returns>
    /// true if the fulfillment rate of the sales order is valid; otherwise, false.
    /// </returns>
    public static boolean isFulfillmentRateValid(
        SalesId _salesId,
        WHSFulfillmentType _fulfillmentType,
        WHSFulfillmentRate _fulfillmentRate)
    {
        WHSIFulfillmentRateValidationCalculator calculator = WHSSalesOrderFulfillmentRateCalculator::newFromSalesId(_salesId);
        
        WHSFulfillmentRateValidator validator = WHSFulfillmentRateValidator::newValidator(_fulfillmentRate, _fulfillmentType, calculator);
    
        return validator.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the fulfillment rate is met.
    /// </summary>
    /// <returns>true if the rate is met; Otherwise, false.</returns>
    public boolean validate()
    {
        boolean result;
        
        switch (fulfillmentType)
        {
            case WHSFulfillmentType::None:
                result = true;
                break;
                
            case WHSFulfillmentType::Price:
                result = this.validateTypePrice();
                break;

            case WHSFulfillmentType::Qty:
                result = this.validateTypeQty();
                break;
        }
        

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTypeQty</Name>
				<Source><![CDATA[
    private boolean validateTypeQty()
    {
        WHSFulfillmentRateQuantities quantities = calculator.calculateQuantities();

        boolean result = quantities.TotalQuantity ? (quantities.FulfilledQuantity / quantities.TotalQuantity) * 100 >= fulfillmentRate : false;                
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTypePrice</Name>
				<Source><![CDATA[
    private boolean validateTypePrice()
    {
        WHSFulfillmentRateAmounts amounts = calculator.calculateAmounts();

        boolean result = amounts.TotalAmount ? (amounts.FulfilledAmount / amounts.TotalAmount) * 100 >= fulfillmentRate : false;

        return result;                
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFulfillmentRateForTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified transfer order meets the fulfillment requirements
    /// for releasing to warehouse.
    /// </summary>
    /// <param name="_inventTransferTable">
    /// The transfer order.
    /// </param>
    /// <returns>
    /// true if the transfer order is fulfilled or doesn't have the fulfillment type; otherwise, false.
    /// </returns>
    public static boolean checkFulfillmentRateForTransfer(InventTransferTable _inventTransferTable)
    {
        WHSFulfillmentPolicy fulfillmentPolicy = WHSFulfillmentRateRequirementsProvider::transferOrderFulfillmentPolicy();

        if (fulfillmentPolicy.FulfillmentErrorTolerance != ErrorTolerance::Accept)
        {
            if (!WHSFulfillmentRateValidator::isFulfillmentRateValidTransferOrder(_inventTransferTable.TransferId, fulfillmentPolicy.FulfillmentType, fulfillmentPolicy.FulfillmentRate))
            {
                str fulfillmentTypeText = enum2Str(fulfillmentPolicy.FulfillmentType);
                str fulfillmentRateViolationMessage = strFmt("@WAX:MessageForFulfillmentRate_Label", fulfillmentPolicy.FulfillmentRate, fulfillmentTypeText, _inventTransferTable.TransferId);
				
                WHSFulfillmentRateValidator::outPutValidationResult(fulfillmentRateViolationMessage, fulfillmentPolicy.FulfillmentErrorTolerance);
    
                return false;
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFulfillmentRateValidTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the fulfillment rate of the transfer order is valid.
    /// </summary>
    /// <param name="_transferId">
    /// The ID of the transfer order.
    /// </param>
    /// <param name="_fulfillmentType">
    /// The type of the fulfillment requirements.
    /// </param>
    /// <param name="_fulfillmentRate">
    /// The required fulfillment rate.
    /// </param>
    /// <returns>
    /// true if the fulfillment rate of the transfer order is valid; otherwise, false.
    /// </returns>
    public static boolean isFulfillmentRateValidTransferOrder(
        InventTransferId    _transferId,
        WHSFulfillmentType  _fulfillmentType,
        WHSFulfillmentRate  _fulfillmentRate)
    {
        WHSIFulfillmentRateValidationCalculator calculator = WHSTransferOrderFulfillmentRateCalculator::newFromTransferId(_transferId);
        
        WHSFulfillmentRateValidator validator = WHSFulfillmentRateValidator::newValidator(_fulfillmentRate, _fulfillmentType, calculator);
    
        return validator.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputValidationResult</Name>
				<Source><![CDATA[
    internal static void outputValidationResult(
        str			    _fulfillmentRateViolationMessage,
	    ErrorTolerance	_errorTolerance)
    {
        if (_errorTolerance == ErrorTolerance::Warning)
        {
            warning(_fulfillmentRateViolationMessage);
        }
        else if (_errorTolerance == ErrorTolerance::Error)
        {
            throw error(_fulfillmentRateViolationMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesFulfillmentRateFromPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified sales order meets the fulfillment requirements.
    /// for releasing to warehouse.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order.
    /// </param>
    /// <param name="_fulfillmentPolicy">
    /// The fulfillment policy used to validate the order
    /// </param>
    /// <returns>
    /// true if the sales order is fulfilled or doesn't have the fulfillment type; otherwise, false.
    /// </returns>
    public static boolean checkSalesFulfillmentRateFromPolicy(
        SalesTable              _salesTable,
        WHSFulfillmentPolicy    _fulfillmentPolicy)
    {
        if (_fulfillmentPolicy.FulfillmentErrorTolerance != ErrorTolerance::Accept)
        {
            if (!WHSFulfillmentRateValidator::isFulfillmentRateValid(_salesTable.SalesId, _fulfillmentPolicy.FulfillmentType, _fulfillmentPolicy.FulfillmentRate))
            {
                str fulfillmentTypeText = enum2Str(_fulfillmentPolicy.FulfillmentType);
                str fulfillmentRateViolationMessage = strFmt("@WAX2943", _fulfillmentPolicy.FulfillmentRate, fulfillmentTypeText, _salesTable.SalesId);

                WHSFulfillmentRateValidator::outputValidationResult(fulfillmentRateViolationMessage, _fulfillmentPolicy.FulfillmentErrorTolerance);

                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransferFulfillmentRateFromPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified transfer order meets the fulfillment requirements.
    /// for releasing to warehouse.
    /// </summary>
    /// <param name="_transferTable">
    /// The transfer order.
    /// </param>
    /// <param name="_fulfillmentPolicy">
    /// The fulfillment policy used to validate the order
    /// </param>
    /// <returns>
    /// true if the transfer order is fulfilled or doesn't have the fulfillment type; otherwise, false.
    /// </returns>
    public static boolean checkTransferFulfillmentRateFromPolicy(
        InventTransferTable     _transferTable,
        WHSFulfillmentPolicy    _fulfillmentPolicy)
    {
        if (_fulfillmentPolicy.FulfillmentErrorTolerance != ErrorTolerance::Accept)
        {
            if (!WHSFulfillmentRateValidator::isFulfillmentRateValidTransferOrder (_transferTable.TransferId, _fulfillmentPolicy.FulfillmentType, _fulfillmentPolicy.FulfillmentRate))
            {
                str fulfillmentTypeText = enum2Str(_fulfillmentPolicy.FulfillmentType);
                str fulfillmentRateViolationMessage = strFmt("@WAX:MessageForFulfillmentRate_Label", _fulfillmentPolicy.FulfillmentRate, fulfillmentTypeText, _transferTable.TransferId);

                WHSFulfillmentRateValidator::outputValidationResult(fulfillmentRateViolationMessage, _fulfillmentPolicy.FulfillmentErrorTolerance);

                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>