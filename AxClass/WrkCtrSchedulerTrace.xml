<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrSchedulerTrace</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.Services.Instrumentation;
using Microsoft.Dynamics.AX.Planning.JobScheduling;
using Microsoft.DynamicsOnline.Infrastructure.Components.SharedServiceUnitStorage;
using System.IO;
using System.IO.Compression;

/// <summary>
/// The <c>WrkCtrSchedulerTrace</c> class encapsulates the logic of intializing and saving scheduling traces.
/// </summary>
public class WrkCtrSchedulerTrace implements System.IDisposable
{
    private static readonly System.TimeSpan DownloadLinkLifeTime = System.TimeSpan::FromHours(1);

    /// <summary>
    /// The name of the BLOB container where scheduling traces are saved.
    /// </summary>
    public const str BlobCategoryName = 'schedulinglogs';

    private LoggingOptions loggingOptions;

    private boolean logOnlyOnErrorEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(WrkCtrParametersDim _parameters)
    {
        loggingOptions = new LoggingOptions();
        if (_parameters.EnableLog)
        {
            loggingOptions.TextLogStream = new MemoryStream();
            loggingOptions.ResultStream = new MemoryStream();
            loggingOptions.XmlOutputStream = new MemoryStream();
            loggingOptions.XmlSlotsOutputStream = new MemoryStream();

            logOnlyOnErrorEnabled = _parameters.LogOnlyOnErrorEnabled;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loggingOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exposes the object with logging parameters.
    /// </summary>
    /// <returns>The object with logging parameters.</returns>
    public LoggingOptions loggingOptions()
    {
        return loggingOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoggingOnlyOnErrorEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log only if scheduling error occurs
    /// </summary>
    /// <returns>True if a logging only on error is enabled; otherwise, false.</returns>
    public boolean isLoggingOnlyOnErrorEnabled()
    {
        return logOnlyOnErrorEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes the logging by saving the results into the BLOB file.
    /// </summary>
    /// <param name = "_name">The display name of the trace file.</param>
    public void saveAndClose(str _name)
    {
        UserConnection connection = new UserConnection();

        try
        {
            WrkCtrSchedulingLog log;

            log.setConnection(connection);
            log.DisplayName = _name;
            log.FileName = guid2Str(newGuid());
            log.SessionId = sessionId();

            var blobInfo = new SharedServiceUnitStorageData();
            blobInfo.Id = log.FileName;
            blobInfo.Category = BlobCategoryName;
            blobInfo.Name = strfmt('%1.zip', log.DisplayName);
            blobInfo.Accessibility = Accessibility::Private;
            blobInfo.Retention = Retention::Permanent;

            using (var logStream = this.packLogStreams())
            {
                var blobStorageService = new SharedServiceUnitStorage(SharedServiceUnitStorage::GetDefaultStorageContext());
                blobStorageService.UploadData(blobInfo, logStream);
            }

            // commit in a separate connection to avoid data loss if main connection is aborted e.g. on timeout
            connection.ttsbegin();
            log.insert();
            connection.ttscommit();
        }
        catch
        {
            error("@SCM:SchedulingLogFailed");
        }
        finally
        {
            connection.finalize();
            connection = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes the current instance of an object.
    /// </summary>
    public void Dispose()
    {
        if (loggingOptions)
        {
            loggingOptions.Dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDownloadLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the trace download link.
    /// </summary>
    /// <param name = "_fileName">The trace file name.</param>
    /// <returns>The download link which is valid for a limited time.</returns>
    public static str getDownloadLink(str _fileName)
    {
        var blobStorageService = new SharedServiceUnitStorage(SharedServiceUnitStorage::GetDefaultStorageContext());
        var blobInfo = blobStorageService.GetData(_fileName, WrkCtrSchedulerTrace::BlobCategoryName, BlobUrlPermission::Read, DownloadLinkLifeTime);

        return blobInfo.BlobLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delets the trace from the BLOB storage.
    /// </summary>
    /// <param name = "_fileName">The name of the file to delete.</param>
    public static void delete(str _fileName)
    {
        var blobStorageService = new SharedServiceUnitStorage(SharedServiceUnitStorage::GetDefaultStorageContext());
        blobStorageService.DeleteData(_fileName, WrkCtrSchedulerTrace::BlobCategoryName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packLogStreams</Name>
				<Source><![CDATA[
    private Stream packLogStreams()
    {
        var memoryStream = new MemoryStream();
        using (var archive = new ZipArchive(memoryStream, ZipArchiveMode::Create, true))
        {
            this.packStream(archive, loggingOptions.TextLogStream, 'Log.txt');
            this.packStream(archive, loggingOptions.ResultStream, 'Result.xml');
            this.packStream(archive, loggingOptions.XmlOutputStream, 'XmlModel.xml');
            this.packStream(archive, loggingOptions.XmlSlotsOutputStream, 'XmlSlots.xml');
        }

        memoryStream.Seek(0, SeekOrigin::Begin);
        return memoryStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packStream</Name>
				<Source><![CDATA[
    private void packStream(ZipArchive _archive, Stream _stream, str _name)
    {
        if (_stream != null)
        {
            _stream.Seek(0, SeekOrigin::Begin);
            var entry = _archive.CreateEntry(_name);
            using (var entryStream = entry.Open())
            {
                _stream.CopyTo(entryStream);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>