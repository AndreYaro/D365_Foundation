<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProcCategoryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportQueryAttribute(QueryStr(ProcCategory)),
    SRSReportParameterAttribute(classstr(ProcCategoryContract))
]
class ProcCategoryDP extends SRSReportDataProviderBase
{
    ProcCategoryTmpAllowedCategory      procCategoryTmpAllowedCategory;
    ProcCategoryTmpAccessPolicy         procCategoryTmpAccessPolicy;
    ProcCategoryAccessPolicyParameter   procCategoryAccessPolicyParameter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProcCategoryTmpAllowedCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>ProcCategoryTmpAllowedCategory</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ProcCategoryTmpAllowedCategory</c> table.
    /// </returns>

    [
        SRSReportDataSetAttribute(TableStr(ProcCategoryTmpAllowedCategory))
    ]
    public ProcCategoryTmpAllowedCategory getProcCategoryTmpAllowedCategory()
    {
        return procCategoryTmpAllowedCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    ///    Note that this is a framework class. Customizing this class may cause problems with future upgrades
    ///    to the software.
    /// </remarks>
    public void processReport()
    {
        int64                               selectedLegalEntity[1];

        Query                               mainQuery;
        QueryRun                            queryRun;
        QueryBuildDataSource                categoryDS, policyDS, translationDS;

        EcoResCategory                      ecoResCategory;
        EcoResCategoryTranslation           ecoResCategoryTranslation;
        utcdatetime                         dtFromDateTime;
        utcdatetime                         dtToDateTime;

        ListEnumerator listEnum;
        str dtFromDate;
        str dtToDate;
        List legalEntity;

        ProcCategoryContract contract = this.parmDataContract() as ProcCategoryContract;

        legalEntity = contract.parmLegalEntity();

        dtFromDateTime = DateTimeUtil::newDateTime(contract.parmFromDate(),0);
        dtToDateTime = DateTimeUtil::newDateTime(contract.parmToDate(),0);

        dtFromDate = date2str(contract.parmFromDate(), 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None);
        dtToDate = date2str(contract.parmToDate(), 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None);

        if (strlen(dtToDate) != 0 && DateTimeUtil::hour(dtToDateTime) == 0 && DateTimeUtil::minute(dtToDateTime) == 0 && DateTimeUtil::second(dtToDateTime) == 0)
        {
            dtToDateTime    = DateTimeUtil::addDays(dtToDateTime, 1);
            dtToDateTime    = DateTimeUtil::addSeconds(dtToDateTime,( DateTimeUtil::second(dtToDateTime) -1 ));
        }

        delete_from procCategoryTmpAccessPolicy;

        ttsbegin;

        //get the available categories for the selected Operating Units
        if (legalEntity.elements())
        {
            listEnum = legalEntity.getEnumerator();

            while (listEnum.moveNext())
            {
                selectedLegalEntity[1] = 0;
                selectedLegalEntity[1] = listEnum.current();
                this.saveAccessibleCategories(selectedLegalEntity, 0);
            }
        }

        mainQuery   = this.parmQuery();
        queryRun    = new QueryRun(mainQuery);

        categoryDS = mainQuery.dataSourceTable(tablenum(EcoResCategory));

        if (strlen(dtFromDate) == 0 && strlen(dtToDate) != 0)
        {
            dtFromDateTime  = DateTimeUtil::minValue();
        }
        else if (strlen(dtToDate) == 0 && strlen(dtFromDate) != 0)
        {
            dtToDateTime    = DateTimeUtil::maxValue();
        }

        SysQuery::findOrCreateRange(categoryDS, fieldnum(EcoResCategory, CreatedDateTime)).value(SysQuery::range(dtFromDateTime, dtToDateTime));

        policyDS = categoryDS.addDataSource(tablenum(ProcCategoryTmpAccessPolicy));
        policyDS.relations(false);
        policyDS.addLink(fieldnum(EcoResCategory, RecId), fieldnum(ProcCategoryTmpAccessPolicy, CategoryRecId));
        policyDS.joinMode(JoinMode::OuterJoin);
        policyDS.fetchMode(QueryFetchMode::One2One);

        translationDS = categoryDS.addDataSource(tablenum(EcoResCategoryTranslation));
        translationDS.relations(false);
        translationDS.addLink(fieldnum(EcoResCategory, RecId), fieldnum(EcoResCategoryTranslation, Category));
        translationDS.joinMode(JoinMode::OuterJoin);
        translationDS.fetchMode(QueryFetchMode::One2One);

        queryRun = new QueryRun(mainQuery);

        while (queryRun.next())
        {
            ecoResCategory                  = queryRun.get(tablenum(EcoResCategory));
            procCategoryTmpAccessPolicy     = queryRun.get(tablenum(ProcCategoryTmpAccessPolicy));
            ecoResCategoryTranslation       = queryRun.get(tablenum(EcoResCategoryTranslation));

            procCategoryTmpAllowedCategory.Category          = ecoResCategory.RecId;
            procCategoryTmpAllowedCategory.CategoryName      = ecoResCategory.Name;
            procCategoryTmpAllowedCategory.FriendlyName      = ecoResCategoryTranslation.FriendlyName;
            procCategoryTmpAllowedCategory.Description       = ecoResCategoryTranslation.Description;
            procCategoryTmpAllowedCategory.CreateDate        = ecoResCategory.CreatedDateTime;
            procCategoryTmpAllowedCategory.LastModifiedDate  = ecoResCategory.ModifiedDateTime;
            procCategoryTmpAllowedCategory.LastModifiedBy    = ecoResCategory.ModifiedBy;
            procCategoryTmpAllowedCategory.Status            = ecoResCategory.IsActive == NoYes::Yes? "@SYS300722" : "@SYS300723";
            procCategoryTmpAllowedCategory.LegalEntityName   = DirPartyTable::findRec(procCategoryTmpAccessPolicy.LegalEntity).Name;
            procCategoryTmpAllowedCategory.doInsert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAccessibleCategories</Name>
				<Source><![CDATA[
        //OrgType - 0=LE, 1=OU, 2=LE+OU
    private void saveAccessibleCategories(int64 _orgID[], int _orgType)
    {
        int         ruleIndex;
        Array       categoryAccessPolicyRules;
        DictEnum    dictEnum;
        int64       ruleType;

        dictEnum = new DictEnum(enumnum(SysPolicyRuleTypeEnum));
        ruleType = SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::CategoryAccessPolicyRule, SysPolicyTypeEnum::PurchasingPolicy).RecId;
        categoryAccessPolicyRules = SysPolicies::getPolicyRuleIDs(_orgID,
                                                ruleType,
                                                SysPolicyTypeEnum::PurchasingPolicy);

        for ( ruleIndex = 1; ruleIndex <= categoryAccessPolicyRules.lastIndex(); ruleIndex++)
        {
            while select * from procCategoryAccessPolicyParameter
                    where procCategoryAccessPolicyParameter.ProcurementCategoryAccessPolicyRule == categoryAccessPolicyRules.value(ruleIndex)
            {
                procCategoryTmpAccessPolicy.CategoryRecId   = procCategoryAccessPolicyParameter.ProcurementCategory;
                switch (_orgType)
                {
                    case 0:
                        procCategoryTmpAccessPolicy.LegalEntity     = _orgID[1];
                        procCategoryTmpAccessPolicy.OperatingUnit   = 0;
                        break;
                }
                procCategoryTmpAccessPolicy.doInsert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
