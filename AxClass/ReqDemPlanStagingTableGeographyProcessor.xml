<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanStagingTableGeographyProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanStagingTableGeographyProcessor</c> class is responsible for updating the staging table with geographical location data
///     such as country/region and state.
/// </summary>
[ReqDemPlanStagingTableProcessorAttribute]
class ReqDemPlanStagingTableGeographyProcessor extends ReqDemPlanStagingTableProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public ReqDemPlanStagingTableProcessorDesc description()
    {
        return "@DMP1442";
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
        public int64 execute(
        ReqDemPlanCubeStagingTable              _stagingTable,
        ReqDemPlanExportBaseDataContract        _dataContract,
        RefRecId                                _forecastVersion)
    {
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        LogisticsPostalAddress  postalAddress;
        CustPackingSlipTrans    custPackingSlipTrans;
        boolean                 countryAttributeEnabled = _dataContract.attributeManager().isAttributeEnabled(ReqDemPlanForecastAttributeType::LogisticsCountryRegionCode);
        boolean                 stateAttributeEnabled = _dataContract.attributeManager().isAttributeEnabled(ReqDemPlanForecastAttributeType::LogisticsAddressStateId);
        int64                   recordsProcessed = 0;

        if (countryAttributeEnabled || stateAttributeEnabled)
        {
            update_recordSet _stagingTable
                setting LogisticsCountryRegionCode  = postalAddress.CountryRegionId,
                        LogisticsAddressStateId     = postalAddress.State
                where _stagingTable.Version == _forecastVersion
                join inventTrans
                    where inventTrans.InventTransOrigin == _stagingTable.InventTransOrigin
                        && inventTrans.inventDimId      == _stagingTable.InventDimId
                        && inventTrans.RecId            == _stagingTable.InventTransRecId
                join inventTransOrigin
                where inventTransOrigin.RecId == _stagingTable.InventTransOrigin
                    && (inventTransOrigin.ReferenceCategory == InventTransType::Sales
                    || inventTransOrigin.ReferenceCategory == InventTransType::SalesQuotation)
                join custPackingSlipTrans
                    where custPackingSlipTrans.InventTransId  == inventTransOrigin.InventTransId
                        && custPackingSlipTrans.PackingSlipId == inventTrans.PackingSlipId
                join postalAddress
                    where postalAddress.RecId == custPackingSlipTrans.DeliveryPostalAddress;

            recordsProcessed += _stagingTable.RowCount();

            if (!stateAttributeEnabled)
            {
                update_recordSet _stagingTable
                setting LogisticsAddressStateId = ''
                where
                    _stagingTable.Version == _forecastVersion
                    && _stagingTable.LogisticsAddressStateId;

                recordsProcessed += _stagingTable.RowCount();
            }
        }

        return recordsProcessed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>