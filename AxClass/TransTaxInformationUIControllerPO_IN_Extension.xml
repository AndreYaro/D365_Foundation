<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransTaxInformationUIControllerPO_IN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UI controller class for controlling all Purchase Order on new tax information UI and transaction update.
/// </summary>
[ExtensionOf(classStr(TransTaxInformationUIControllerPO))]
final class TransTaxInformationUIControllerPO_IN_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initAllCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes UI controls for Tax information form.
    /// </summary>
    protected void initAllCtrls()
    {
        next initAllCtrls();
        // VAT
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            transTaxInformationDS.object(fieldNum(TransTaxInformation, ExciseDirectSettlement)).registerOverrideMethod(methodStr(FormDataObject, modified), methodStr(TransTaxInformationUIControllerPO, modifiedOfDirectSettlement), this);

            if (this.sourceTable.TableId == tableNum(VendInvoiceInfoLine))
            {
                transTaxInformationDeliveryInfoCtrl.parmTaxRateType().viewEditMode(ViewEditMode::Edit);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToExciseCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all Excise controls on Tax information form.
    /// </summary>
    protected void setEnabledToExciseCtrls()
    {
        next setEnabledToExciseCtrls();

        transTaxInformationExciseCtrl.parmDirectSettlement().enabled(
            TaxExciseTypeController_IN::isDirectSettlementAllowed(
                transTaxInformation.ExciseType,
                transTaxInformation.ExciseRecordType,
                this.getTaxDirection()));

        transTaxInformationExciseCtrl.parmDSA().enabled(
            TaxExciseTypeController_IN::isDSAAllowed(
                transTaxInformation.ExciseType,
                transTaxInformation.ExciseRecordType,
                this.parmTaxModelTaxable().getItemId()));

        transTaxInformationExciseCtrl.parmCENVATCreditAvailed().enabled(
            TaxExciseTypeController_IN::isCENVATCreditAvailedAllowed(
                transTaxInformation.ExciseRecordType,
                transTaxInformation.ExciseDirectSettlement,
                this.parmTaxModelTaxable().getQuantity()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedExciseField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to Excise fields.
    /// </summary>
    protected void modifiedExciseField()
    {
        next modifiedExciseField();
        TransTaxInformationHelper::updateExciseDSA(transTaxInformation, this.parmTaxModelTaxable().getItemId());
        TransTaxInformationHelper::updateExciseDirectSettlement(transTaxInformation, this.getTaxDirection());
        TransTaxInformationHelper::updateExciseCENVATCreditAvailed(transTaxInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedOfDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to direct settlement.
    /// </summary>
    /// <param name="_directSettlement">
    /// The form data source field.
    /// </param>
    protected void modifiedOfDirectSettlement(FormDataObject _directSettlement)
    {
        TransTaxInformationHelper::updateExciseCENVATCreditAvailed(transTaxInformation);

        transTaxInformationExciseCtrl.parmCENVATCreditAvailed().enabled(
            TaxExciseTypeController_IN::isCENVATCreditAvailedAllowed(
                transTaxInformation.ExciseRecordType,
                transTaxInformation.ExciseDirectSettlement,
                this.parmTaxModelTaxable().getQuantity()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToServiceTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all service tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToServiceTaxCtrls()
    {
        next setVisibleToServiceTaxCtrls();

        TaxItemGroupHeading taxItemGroupHeading;
        taxItemGroupHeading = TaxItemGroupHeading::find(this.parmTaxModelTaxable().getTaxItemGroup());
        
        if (this.getTaxModelTaxable().isForeignTransaction())
        {
            transTaxInformationServiceTaxCtrl.parmIsRecoverableServiceTax().visible(true);
        }
        else
        {
            if (taxItemGroupHeading.ServiceTaxBasis_IN == ServiceTaxBasis_IN::CashBasis)
            {
                transTaxInformationServiceTaxCtrl.parmIsRecoverableServiceTax().visible(false);
            }
            else if (taxItemGroupHeading.ReverseChargePercentage_IN != 0)
            {
                transTaxInformationServiceTaxCtrl.parmIsRecoverableServiceTax().visible(true);
            }
            else
            {
                transTaxInformationServiceTaxCtrl.parmIsRecoverableServiceTax().visible(false);
            }
        }

        if (this.parmTaxModelTaxable() is TaxModelDocLineVendInvoiceImpl_IN
            && this.parmTaxModelTaxable().getVendTable().isGTA())
        {
            transTaxInformationServiceTaxCtrl.parmServiceTaxConsignmentNoteNum().visible(true);
        }
        else
        {
            transTaxInformationServiceTaxCtrl.parmServiceTaxConsignmentNoteNum().visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToCustomsCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all customers tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToCustomsCtrls()
    {
        next setVisibleToCustomsCtrls();

        if (!(this.getTaxModelTaxable().isForeignTransaction()) || (purchLine.PurchaseType == PurchaseType::ReturnItem))
        {
            transTaxInformationCustomsCtrl.parmCustomsTab().visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get TaxModelTaxable
    /// </summary>
    /// <returns>The TaxModelTaxable_IN</returns>
    private TaxModelTaxable_IN getTaxModelTaxable()
    {
        TaxModelTaxable_IN	taxModelTaxable_IN = this.parmTaxModelTaxable();
        return taxModelTaxable_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedTaxWithholdSoftwareDeclReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to withholding tax software declaration received control.
    /// </summary>
    /// <param name="_taxWithholdSoftwareDeclReceivedField">
    /// The form data source field TaxWithholdSoftwareDeclReceived.
    /// </param>
    protected void modifiedTaxWithholdSoftwareDeclReceived(FormDataObject _taxWithholdSoftwareDeclReceivedField)
    {
        next modifiedTaxWithholdSoftwareDeclReceived(_taxWithholdSoftwareDeclReceivedField);

        TaxWithholdGroup tdsGroup;

        if (_taxWithholdSoftwareDeclReceivedField.getValue() == true)
        {
            switch (sourceTable.TableId)
            {
                case tableNum(PurchLine) :
                    tdsGroup = PurchLine_IN::findByPurchLine(sourceTable.RecId).TDSGroup;
                    break;

                case tableNum(VendInvoiceInfoLine) :
                    tdsGroup    = VendInvoiceInfoLineTaxExtension_IN::findByVendInvoiceInfoLineRecId(sourceTable.RecId).TDSGroup;
                    break;
            }

            if (!TaxWithholdCalculation_IN::validateTDSZeroRate(tdsGroup, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
            {
                _taxWithholdSoftwareDeclReceivedField.setValue(false);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get IN tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction.
    /// </returns>
    protected TaxDirection getTaxDirection()
    {
        TaxDirection taxDirection = next getTaxDirection();;
        TaxModelTaxable taxModelTaxableLocIN = this.parmTaxModelTaxable();

        if ((taxModelTaxableLocIN is TaxModelDocLinePurchLineImpl_IN
            || taxModelTaxableLocIN is TaxModelDocLineVendInvoiceImpl_IN)
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            taxDirection = taxModelTaxableLocIN.getQuantity() > 0 ? TaxDirection::IncomingTax : TaxDirection::OutgoingTax;
        }

        return taxDirection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>