<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetBalanceReportingDimensionProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetBalanceReportingDimensionProvider</c> class provides the reporting dimension structure record
/// creation to link <c>BudgetBalanceReportingDimension</c> records with the original <c>DimensionAttributeValueCombination</c>
/// table records.
/// </summary>
internal final class BudgetBalanceReportingDimensionProvider
{
    private BudgetBalanceProcessContract contract;
    private BudgetBalanceInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForContract</Name>
				<Source><![CDATA[
    internal static BudgetBalanceReportingDimensionProvider newForContract(BudgetBalanceProcessContract _contract)
    {
        BudgetBalanceReportingDimensionProvider reportingDimensionProvider = new BudgetBalanceReportingDimensionProvider();
        reportingDimensionProvider.contract = _contract;

        return reportingDimensionProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        logger = BudgetBalanceInstrumentationLogger::createLogger(classStr(BudgetBalanceReportingDimensionProvider));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCreateReportingStructureDimensions</Name>
				<Source><![CDATA[
    internal static BudgetBalanceReportingDimensionProvider runCreateReportingStructureDimensions(
        BudgetBalanceProcessContract _proocessContract,
        DimensionHierarchyId _dimHierarchyRecId)
    {
        BudgetBalanceReportingDimensionProvider dimensionProvider = BudgetBalanceReportingDimensionProvider::newForContract(_proocessContract);
        
        BudgetBalanceContract balanceContract = BudgetBalanceContract::newForProcessContract(_proocessContract, _dimHierarchyRecId);
        GeneralLedgerBalanceRecIdTmp budgetBalanceRecIdTmp = dimensionProvider.createLedgerDimensionSourceRebuildTmp();
        dimensionProvider.createReportingStructureDimensions(budgetBalanceRecIdTmp, balanceContract);

        return dimensionProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInitializeReportingStructureDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes <c>BudgetBalanceReportingDimensionReference</c> and <c>GeneralLedgerBalanceReportingDimension</c> table
    /// record creation which link original <c>DimensionAttributeValueCombination</c> tables records with flattened structured
    /// dimension value records (GeneralLedgerBalanceReportingDimension).
    /// </summary>
    /// <param name="_dimensionHierarchyRecId">
    /// The dimensionhierarchy record id.
    /// </param>
    /// <remarks>
    /// The initialization model processes records in chunks of records in individual transactions.
    /// the update model processes records not existed in BudgetBalanceReportingDimensionReference for delta updates.
    /// </remarks>
    internal void processInitializeReportingStructureDimensions(DimensionHierarchyId _dimensionHierarchyRecId)
    {
        using (var activityContext = logger.processActivities().getActivityContextForBalanceProcess(contract,
            methodStr(BudgetBalanceReportingDimensionProvider, processInitializeReportingStructureDimensions)))
        {
            GeneralLedgerBalanceRecIdTmp budgetBalanceRecIdTmp;

            try
            {
                budgetBalanceRecIdTmp = this.createLedgerDimensionSourceRebuildTmp();

                BudgetBalanceContract balanceContract = BudgetBalanceContract::newForProcessContract(
                    contract,
                    _dimensionHierarchyRecId);

                this.createReportingStructureDimensions(budgetBalanceRecIdTmp, balanceContract);
            }
            finally
            {
                budgetBalanceRecIdTmp.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUpdateAllReportingStructureDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes delta <c>BudgetBalanceReportingDimensionReference</c> and <c>BudgetBalanceReportingDimension</c> table
    /// record creation which link original <c>DimensionAttributeValueCombination</c> tables records with flattened structured
    /// dimension value records (BudgetBalanceReportingDimension).
    /// </summary>
    /// <param name = "_unprocessedBudgetEntryRecIds">A <c>BudgetBalanceRecIdTmp</c> temp table reference with
    /// <c>BudgetBalanceUnprocessedTransactions</c> records updated for delta processing.
    /// </param>
    internal void processUpdateAllReportingStructureDimensions(GeneralLedgerBalanceRecIdTmp _unprocessedBudgetEntryRecIds)
    {
        using (var activityContext = logger.processActivities().getActivityContextForBalanceProcess(contract,
            methodStr(BudgetBalanceReportingDimensionProvider, processUpdateAllReportingStructureDimensions)))
        {
            GeneralLedgerBalanceRecIdTmp budgetBalanceLedgerDimensionRecIdTmp;

            try
            {
                if (appl.ttsLevel() == 0)
                {
                    throw error("@Budget:BudgetBalanceUpdateProcessRequiresTransaction");
                }

                budgetBalanceLedgerDimensionRecIdTmp = this.createLedgerDimensionSourceUpdateTmp(_unprocessedBudgetEntryRecIds);

                DimensionHierarchy dimensionHierarchy;
                GeneralLedgerBalanceDimensionHierarchyState dimensionHierarchyState;

                while select dimensionHierarchy
                    where dimensionHierarchy.StructureType == DimensionHierarchyType::Focus
                    join dimensionHierarchyState
                        where dimensionHierarchyState.DimensionHierarchy == dimensionHierarchy.RecId
                            && dimensionHierarchyState.Tracking == NoYes::Yes
                {
                    BudgetBalanceContract balanceContract = BudgetBalanceContract::newForProcessContract(
                        contract,
                        dimensionHierarchy.RecId);

                    this.createReportingStructureDimensions(budgetBalanceLedgerDimensionRecIdTmp, balanceContract);
                }
            }
            finally
            {
                budgetBalanceLedgerDimensionRecIdTmp.dispose();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginalAccountToReportingStructureDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>BudgetBalanceReportingDimension</c> records from the original <c>DimensionAttributeValueCombination</c> tables records
    /// in a flattened structure format.
    /// </summary>
    /// <param name = "_balanceContract">The balance processing contract.</param>
    /// <returns>The inserted record count.</returns>
    private int64 createOriginalAccountToReportingStructureDimensions(BudgetBalanceContract _balanceContract)
    {
        BudgetBalanceSqlStatementProvider statementProvider = this.getBudgetBalanceSqlStatementProvider(_balanceContract);

        BudgetBalanceSqlStatement sqlStatement = statementProvider.buildOriginalAccountToReportingStructureDimensionsSqlStatement();

        return statementProvider.executeNonQuery(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUpdateOriginalAccountToDimensionsMappingChunks</Name>
				<Source><![CDATA[
    private void processUpdateOriginalAccountToDimensionsMappingChunks(
        BudgetBalanceContract _balanceContract)
    {
        using (var activityContextGenerateAccountReferences = logger.processActivities().getActivityContextForReportingDimensions(_balanceContract,
            methodStr(BudgetBalanceReportingDimensionProvider, processUpdateOriginalAccountToDimensionsMappingChunks)))
        {
            int64 recordCount = 1;

            while (recordCount > 0)
            {
                ttsbegin;
                recordCount = this.updateOriginalAccountToDimensionsMapping(_balanceContract);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCreateOriginalAccountToReportingStructureDimensionsChunks</Name>
				<Source><![CDATA[
    private void processCreateOriginalAccountToReportingStructureDimensionsChunks(
        BudgetBalanceContract _balanceContract)
    {
        using (var activityContextGenerateAccountReferences = logger.processActivities().getActivityContextForReportingDimensions(_balanceContract,
            methodStr(BudgetBalanceReportingDimensionProvider, processCreateOriginalAccountToReportingStructureDimensionsChunks)))
        {
            int64 recordCount = 1;

            // Question: How does this logic work as a chunk?
            while (recordCount > 0)
            {
                ttsbegin;
                recordCount = this.createOriginalAccountToReportingStructureDimensions(_balanceContract);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportingStructureDimensions</Name>
				<Source><![CDATA[
    internal void createReportingStructureDimensions(
        GeneralLedgerBalanceRecIdTmp _budgetBalanceLedgerDimensionRecIdTmp,
        BudgetBalanceContract _balanceContract)
    {
        System.Exception ex;

        if (contract.parmIsUpdate())
        {
            if (appl.ttsLevel() == 0)
            {
                throw error("@Budget:BudgetBalanceUpdateProcessRequiresTransaction");
            }
        }

        using (var activityContext = logger.processActivities().getActivityContextForReportingDimensions(_balanceContract,
            methodStr(BudgetBalanceReportingDimensionProvider, createReportingStructureDimensions)))
        {
            try
            {
                this.processGenerateAccountReferencesChunks(_budgetBalanceLedgerDimensionRecIdTmp, _balanceContract);
                this.processCreateOriginalAccountToReportingStructureDimensionsChunks(_balanceContract);
                this.processUpdateOriginalAccountToDimensionsMappingChunks(_balanceContract);
            }
            catch (ex)
            {
                if (GeneralLedgerBalanceExceptionHandler::shouldExceptionBeRetried(ex))
                {
                    retry;
                }

                throw ex;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAccountReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>BudgetBalanceReportingDimensionReference</c> to link original <c>DimensionAttributeValueCombination</c> tables records
    /// </summary>
    /// <param name = "_balanceContract">The balance processing contract.</param>
    /// <param name = "_budgetBalanceLedgerDimensionRecIdTmp">A <c>BudgetBalanceRecIdTmp</c> temp table instance containing
    /// BudgetAccountEntry.LedgerDimesion values to process.
    /// </param>
    /// <returns>The inserted record count.</returns>
    private int64 generateAccountReferences(BudgetBalanceContract _balanceContract, GeneralLedgerBalanceRecIdTmp _budgetBalanceLedgerDimensionRecIdTmp)
    {
        BudgetBalanceSqlStatementProvider statementProvider = this.getBudgetBalanceSqlStatementProvider(_balanceContract);

        BudgetBalanceSqlStatement sqlStatement = statementProvider.buildGenerateAccountReferencesSqlStatement(_budgetBalanceLedgerDimensionRecIdTmp);

        return statementProvider.executeNonQuery(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGenerateAccountReferencesChunks</Name>
				<Source><![CDATA[
    private void processGenerateAccountReferencesChunks(
        GeneralLedgerBalanceRecIdTmp _budgetBalanceLedgerDimensionRecIdTmp,
        BudgetBalanceContract _balanceContract)
    {
        using (var activityContextGenerateAccountReferences = logger.processActivities().getActivityContextForReportingDimensions(
            _balanceContract,
            methodStr(BudgetBalanceReportingDimensionProvider, processGenerateAccountReferencesChunks)))
        {
            int64 recordCount = 1;

            // Question: how can a recordCount be different from a second iteration.
            while (recordCount > 0)
            {
                ttsbegin;
                recordCount = this.generateAccountReferences(_balanceContract, _budgetBalanceLedgerDimensionRecIdTmp);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginalAccountToDimensionsMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BudgetBalanceReportingDimensionReference</c> to link original <c>DimensionAttributeValueCombination</c> tables records
    /// to the <c>BudgetBalanceReportingDimension</c> table records.
    /// </summary>
    /// <param name = "_balanceContract">The balance processing contract.</param>
    /// <returns>The updated record count.</returns>
    private int64 updateOriginalAccountToDimensionsMapping(BudgetBalanceContract _balanceContract)
    {
        BudgetBalanceSqlStatementProvider statementProvider = this.getBudgetBalanceSqlStatementProvider(_balanceContract);

        BudgetBalanceSqlStatement sqlStatement = statementProvider.buildUpdateOriginalAccountToDimensionsMappingSqlStatement();

        return statementProvider.executeNonQuery(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimensionSourceRebuildTmp</Name>
				<Source><![CDATA[
    internal GeneralLedgerBalanceRecIdTmp createLedgerDimensionSourceRebuildTmp()
    {
        GeneralLedgerBalanceRecIdTmp budgetBalanceRecIdTmp;
        BudgetTransactionLine budgetTransactionLine;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;
        System.Exception ex;

        try
        {
            insert_recordset budgetBalanceRecIdTmp (RecordId)
                select LedgerDimension from budgetTransactionLine
                    group by budgetTransactionLine.LedgerDimension;

            insert_recordset budgetBalanceRecIdTmp (RecordId)
                select BudgetSourceLedgerDimension from budgetSourceTrackingDetail
                    group by budgetSourceTrackingDetail.BudgetSourceLedgerDimension
                notexists join budgetBalanceRecIdTmp
                    where budgetBalanceRecIdTmp.RecordId == budgetSourceTrackingDetail.BudgetSourceLedgerDimension;

            return budgetBalanceRecIdTmp;
        }
        catch (ex)
        {
            if (GeneralLedgerBalanceExceptionHandler::shouldExceptionBeRetried(ex))
            {
                retry;
            }

            throw ex;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimensionSourceUpdateTmp</Name>
				<Source><![CDATA[
    private GeneralLedgerBalanceRecIdTmp createLedgerDimensionSourceUpdateTmp(GeneralLedgerBalanceRecIdTmp _unprocessedBudgetEntryRecIds)
    {
        GeneralLedgerBalanceRecIdTmp budgetBalanceRecIdTmp;

        BudgetTransactionLine budgetTransactionLine;
        System.Exception ex;

        try
        {
            insert_recordset budgetBalanceRecIdTmp (RecordId)
                select LedgerDimension from budgetTransactionLine
                    group by budgetTransactionLine.LedgerDimension
                join _unprocessedBudgetEntryRecIds
                    where budgetTransactionLine.BudgetTransactionHeader == _unprocessedBudgetEntryRecIds.RecordId;

            return budgetBalanceRecIdTmp;
        }
        catch (ex)
        {
            if (GeneralLedgerBalanceExceptionHandler::shouldExceptionBeRetried(ex))
            {
                retry;
            }

            throw ex;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetBalanceSqlStatementProvider</Name>
				<Source><![CDATA[
    private BudgetBalanceSqlStatementProvider getBudgetBalanceSqlStatementProvider(BudgetBalanceContract _balanceContract)
    {
        BudgetBalanceSqlStatementContract statementContract = BudgetBalanceSqlStatementContract::newFromBalanceContract(_balanceContract);

        return BudgetBalanceSqlStatementProvider::newForContract(statementContract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>