<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInstrumentation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInstrumentation</c> class provides the methods to log telemetry.
/// </summary>
internal static class VendInstrumentation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the telemetry for the specified values.
    /// </summary>
    /// <param name = "_featureNamespace">The feature or metric namespace for the context.</param>
    /// <param name = "_className">The class name for the context.</param>
    /// <param name = "_uniqueActivityName">The activity name for the context</param>
    /// <param name = "_customPropertyName">The property name or the key.</param>
    /// <param name = "_customPropertyValue">The value of the property.</param>
    internal static void logTelemetry(
        str _featureNamespace,
        ClassName _className,
        str _uniqueActivityName,
        str _customPropertyName,
        str _customPropertyValue)
    {
        try
        {
            using (SysInstrumentationActivityContext activityContext = VendInstrumentation::getActivityContext(_featureNamespace, _className, _uniqueActivityName))
            {
                activityContext.addCustomProperty(_customPropertyName, _customPropertyValue);
            }
        }
        catch
        {
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the <c>SysInstrumentationActivityContext</c> for the given class and activity.
    /// </summary>
    /// <param name = "_featureNamespace">The feature or metric namespace for the context.</param>
    /// <param name = "_className">The class name for the context.</param>
    /// <param name = "_uniqueActivityName">The activity name for the context</param>
    /// <returns>An instrumentation activity context.</returns>
    internal static SysInstrumentationActivityContext getActivityContext(
        str _featureNamespace,
        ClassName _className,
        str _uniqueActivityName)
    {
        return SysInstrumentationLoggerFactory::CreateLogger(_className).activityContextWithCustomProperties(SysInstrumentationActivity::construct(
            _uniqueActivityName,
            _featureNamespace));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>