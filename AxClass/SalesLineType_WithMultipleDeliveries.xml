<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType_WithMultipleDeliveries</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLineType_WithMultipleDeliveries</c> class controls the behavior of order lines with
/// multiple deliveries.
/// </summary>
/// <remarks>
/// An order line acts as a header of a delivery schedule, which always stores total delivery schedule
/// quantity and minimum dates. It can be used to manage commercial attributes of delivery lines.In
/// particular, when the order line starts to use a new trade agreement the user is prompted whether
/// they want new commercial attributes like price and discount to be copied to all the delivery lines.
/// </remarks>
public class SalesLineType_WithMultipleDeliveries
extends SalesLineType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the sales line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    /// true if sales order line can be linked to an agreement line; otherwise, false.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        SalesLineType salesLineType = SalesLineType::constructBasedOnSalesType(salesLine, salesTable);
        return salesLineType.canAgreementBeLinked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventBeReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line can be reserved.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  canInventBeReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line can be financially updated.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  canInventUpdFinancial()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line can be physically updated.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  canInventUpdPhysical()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityUpdateNonStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line quantity being updated is valid.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean checkQuantityUpdateNonStocked()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    public void deleting()
    {
        SalesDeliverySchedule   salesDeliverySchedule;
        SalesLine               deliveryLine;

        // delete all delivery lines
        while select forupdate deliveryLine
            join salesDeliverySchedule
            where salesDeliverySchedule.OrderLine    == salesLine.InventTransId
                && salesDeliverySchedule.DeliveryLine == deliveryLine.InventTransId
        {
            if (deliveryLine.validateDelete())
            {
                deliveryLine.deleteWithoutUpdatingDeliveryScheduleLines();
            }
            else
            {
                // The deletion of the delivery line failed.
                throw error("@SYS131423");
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total delivered quantity for a delivery schedule that is represented by the order
    /// line.
    /// </summary>
    /// <returns>
    /// The sum of values that are returned by the <c>deliveredInTotal</c> method that is called for all
    /// delivery lines.
    /// </returns>
    SalesQty deliveredInTotal()
    {
        SalesDeliverySchedule   salesDeliverySchedule;
        SalesLine               deliveryLine;
        SalesQty                qtySales;

        while select deliveryLine
            exists join salesDeliverySchedule
                where salesDeliverySchedule.OrderLine    == salesLine.InventTransId
                   && salesDeliverySchedule.DeliveryLine == deliveryLine.InventTransId
        {
            qtySales += deliveryLine.deliveredInTotal();
        }

        return qtySales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the alternative warning message for deleting the order line.
    /// </summary>
    /// <returns>
    /// The alternative warning message.
    /// </returns>
    /// <remarks>
    /// If an empty string is returned, the standard message can be used.
    /// </remarks>
    str getDeleteWarning()
    {
        // You are about to delete the entire delivery schedule. Do you want to proceed?
        return "@SYS136387";
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total invoiced quantity for a delivery schedule that is represented by the order
    /// line.
    /// </summary>
    /// <returns>
    /// The sum of values that are returned by the <c>invoicedInTotal</c> method that is called for all
    /// delivery lines.
    /// </returns>
    SalesQty invoicedInTotal()
    {
        SalesDeliverySchedule   salesDeliverySchedule;
        SalesLine               deliveryLine;
        SalesQty                qtySales;

        while select deliveryLine
            exists join salesDeliverySchedule
                where salesDeliverySchedule.OrderLine    == salesLine.InventTransId
                   && salesDeliverySchedule.DeliveryLine == deliveryLine.InventTransId
        {
            qtySales += deliveryLine.invoicedInTotal();
        }

        return qtySales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line can have miscellaneous charges that are associated with it.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean markupAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory movement that is associated with the line must be updated.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean mustInventUpdEstimated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    public void recalculateDeliveryScheduleOrderLine(SalesLine _salesLineOrig, boolean _resetPrice)
    {
        SalesDeliverySchedule       salesDeliverySchedule;
        SalesLine                   deliveryLine;

        select sum(SalesQty),count(RecId), minof(ShippingDateRequested), minof(ShippingDateConfirmed), minof(ReceiptDateRequested), minof(ReceiptDateConfirmed)
            , sum(PdsCWQty),sum(PdsCWRemainInventPhysical)
            from deliveryLine
            exists join salesDeliverySchedule
                  where salesDeliverySchedule.OrderLine     == salesLine.InventTransId
                     && salesDeliverySchedule.DeliveryLine  == deliveryLine.InventTransId;

        if (deliveryLine.RecId)
        {
            salesLine.SalesQty = deliveryLine.SalesQty;
            salesLine.PdsCWQty                   = deliveryLine.PdsCWQty;
            salesLine.PdsCWRemainInventPhysical = deliveryLine.PdsCWRemainInventPhysical;

            if (deliveryLine.ShippingDateRequested)
            {
                salesLine.ShippingDateRequested = deliveryLine.ShippingDateRequested;
            }
            salesLine.ShippingDateConfirmed = deliveryLine.ShippingDateConfirmed;
            salesLine.ReceiptDateRequested  = deliveryLine.ReceiptDateRequested;
            salesLine.ReceiptDateConfirmed  = deliveryLine.ReceiptDateConfirmed;

            if (_resetPrice &&
                salesLine.SalesQty != _salesLineOrig.SalesQty &&
                !salesLine.isLinkedToAgreement())
            {
                // SalesQty changed and not linked to agreement so looking for TA
                SalesShippingDateRequested shippingDateRequestedOrig = salesLine.ShippingDateRequested;

                salesLine.salesPurchLineInterface().resetPriceAgreement();
                salesLine.setPriceDisc(salesLine.inventDim());

                if (salesLine.DeliveryDateControlType == SalesDeliveryDateControlType::None)
                {
                    // new TA might have changed dates, but since DDC is off we revert that not to run out of sync with the DS lines.
                    salesLine.ReceiptDateRequested  = deliveryLine.ReceiptDateRequested;
                    salesLine.ReceiptDateConfirmed  = deliveryLine.ReceiptDateConfirmed;
                    salesLine.ShippingDateRequested = shippingDateRequestedOrig;
                    salesLine.ShippingDateConfirmed = deliveryLine.ShippingDateConfirmed;
                }
            }
        }
        else
        {
            // no DS line exist, converting to an order line without delivery lines
            salesLine.SalesQty = 0;
            salesLine.PdsCWQty = 0;
            salesLine.PdsCWRemainInventPhysical = 0;

            this.initSalesQty();
            // store QtyOrdered 0 so that orig() will return 0 and diff will be 0 when updating as a regular line later on
            salesLine.updateWithoutUpdatingDeliveryScheduleLines(true);

            salesLine.SalesStatus = SalesStatus::Backorder;
            salesLine.LineDeliveryType = LineDeliveryType::OrderLine;
            salesLine.SalesQty = _salesLineOrig.SalesQty;

            salesLine.PdsCWQty = _salesLineOrig.PdsCWQty;
            salesLine.PdsCWRemainInventPhysical = _salesLineOrig.PdsCWRemainInventPhysical;
            salesLine.salesQtyModified();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQtyAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>Quantity</c> field can be edited.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean salesQtyAllowEdit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SalesStatus</c> field to the minimum sales status on all delivery lines.
    /// </summary>
    /// <param name="_salesLine">
    /// The line on which to set the status.
    /// </param>
    /// <param name="_inventTransIdSum">
    /// An ignored parameter, which is used by other <c>SalesLineType</c> subclasses for lines that have
    /// associated inventory movements; optional.
    /// </param>
    void setSalesStatus(SalesLine _salesLine, InventTransIdSum _inventTransIdSum = null)
    {
        SalesDeliverySchedule salesDeliverySchedule;
        SalesLine             deliveryLine;

        select minof(SalesStatus) from deliveryLine
            exists join salesDeliverySchedule
                where salesDeliverySchedule.OrderLine      == _salesLine.InventTransId
                   && salesDeliverySchedule.DeliveryLine   == deliveryLine.InventTransId;

        _salesLine.SalesStatus = deliveryLine.SalesStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void updating()
    {
        SalesLine salesLine_Orig = salesLine.orig();

        if (salesLine.SalesQty  != salesLine_Orig.SalesQty && !salesLine.SkipDeliveryScheduleUpdate)
        {
            // Quantity cannot be changed on an order line with multiple deliveries.
            throw error("@SYS131424");
        }

        if (salesLine.SalesUnit != salesLine_Orig.SalesUnit)
        {
            // Unit cannot be changed on a Delivery Schedule.
            throw error("@SYS131415");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesLineType construct(SalesLine salesLine, SalesTable salesTable = salesLine.salesTable())
    {
        return new SalesLineType_WithMultipleDeliveries(salesLine, salesTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
