<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvert</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStdCostConvert</c> class provides the framework for the standard cost conversion
///    process.
/// </summary>
/// <remarks>
///    This is the parent class of a whole class hierarchy.For each different stage that will be done
///    during the conversion process, a separate child class exists.
/// </remarks>
abstract class InventStdCostConvert extends RunBaseBatch
{
    // Global variables
    InventStdCostConv             privateInventStdCostConv;
    RecId                         inventStdCostConvRecId;

    NoYes                         stopOnError;
    NoYes                         activateCostingVersion;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventStdCostConvRecId,
        stopOnError,
        activateCostingVersion
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the status of the invent standard cost conversion record that should be processed.
    /// </summary>
    /// <returns>
    ///    true if the record has been processed; otherwise, false.
    /// </returns>
    protected boolean checkStatus()
    {
        boolean     ret = true;

        if (this.inventStdCostConv().Status == InventStdCostConvStatus::Planned)
        {
            ret = checkFailed("@SYS121576");
        }

        if (this.inventStdCostConv().Status == InventStdCostConvStatus::Completed)
        {
            ret = checkFailed("@SYS121577");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the main entry point for the child classes.
    /// </summary>
    /// <remarks>
    ///    This abstract method must be overwritten in the child classes. It is the main entry point and will
    ///    be called from the <see cref="M:InventStdCostConvert.run" />.
    /// </remarks>
    protected abstract void execute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Suppresses the retrieving of the last values.
    /// </summary>
    /// <remarks>
    ///    This class must always run with the currently passed values, no last values should be retrieved
    ///    from the <see cref="T:SysLastValue" />.
    /// </remarks>
    public void getLast()
    {
        // This is a RunBaseBatch derivative class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // Do not get last values for this batch task
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the inventory standard cost conversion records.
    /// </summary>
    /// <returns>
    ///    A Boolean flag indicating if the initialization was successful.
    /// </returns>
    /// <remarks>
    ///    This will call the re-read of records that should be processed.
    /// </remarks>
    public boolean init()
    {
        boolean ret = super();

        this.rereadRecords();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventStdCostConv</Name>
				<Source><![CDATA[
    protected InventStdCostConv inventStdCostConv(boolean _reread = false)
    {
        if (!privateInventStdCostConv.RecId || privateInventStdCostConv.RecId != inventStdCostConvRecId)
        {
            privateInventStdCostConv = InventStdCostConv::find(inventStdCostConvRecId);
        }
        return privateInventStdCostConv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivateCostingVersion</Name>
				<Source><![CDATA[
    public boolean parmActivateCostingVersion(boolean _activateCostingVersion = activateCostingVersion)
    {
        activateCostingVersion = _activateCostingVersion;

        return activateCostingVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventStdCostConvRecId</Name>
				<Source><![CDATA[
    public RecId parmInventStdCostConvRecId(RecId _inventStdCostConvRecId = inventStdCostConvRecId)
    {
        inventStdCostConvRecId = _inventStdCostConvRecId;

        return inventStdCostConvRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStopOnError</Name>
				<Source><![CDATA[
    public boolean parmStopOnError(boolean _stopOnError = stopOnError)
    {
        stopOnError = _stopOnError;

        return stopOnError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves for the given inventory standard cost conversion record <c>recId</c>, the inventory
    ///    standard cost conversion records from the database.
    /// </summary>
    /// <remarks>
    ///    Always provides the current version of the inventory standard cost conversion records.
    /// </remarks>
    protected void rereadRecords()
    {
        this.inventStdCostConv(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the main sequence of the conversion.
    /// </summary>
    /// <remarks>
    ///    It will call into the <see cref="M:InventStdCostConvert.execute" /> which will be overwritten on
    ///    each child class.
    /// </remarks>
    public void run()
    {
        // Initialize parameters
        this.init();

        if (this.checkStatus())
        {
            this.execute();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls if the job can be executed on the new batch framework.
    /// </summary>
    /// <returns>
    ///    true if the job can be executed on the new batch framework; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventStdCostConvStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers the <see cref="T:InventStdCostConvUpd" /> to set the status of the inventory standard cost
    ///    conversion record according to the currently processed stage.
    /// </summary>
    /// <param name="_inventStdCostConvStatus">
    ///    The status to which the inventory standard cost conversion record should be set.
    /// </param>
    protected void setInventStdCostConvStatus(InventStdCostConvStatus   _inventStdCostConvStatus)
    {
        InventStdCostConvUpd inventStdCostConvUpd = InventStdCostConvUpd::newInventStdCostConvStatus(_inventStdCostConvStatus, this.inventStdCostConv());

        // Update the status of the conversion
        inventStdCostConvUpd.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  packedClass)
    {
        Integer  version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>InventStdCostConvert</c> class.
    /// </summary>
    /// <param name="_inventStdCostConvertWorkType">
    ///    The <c>InventStdCostConvertWorkType</c> value to initialize the class for.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventStdCostConvert</c> class based on the
    ///    <c>InventStdcostConvertWorkType</c> value.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The function was called by using an invalid conversion work type, the function is not used
    ///    correctly.
    /// </exception>
    public static InventStdCostConvert construct(InventStdCostConvertWorkType _inventStdCostConvertWorkType)
    {
        switch (_inventStdCostConvertWorkType)
        {
            case InventStdCostConvertWorkType::Init :
                return InventStdCostConvert_Init::construct();
            case InventStdCostConvertWorkType::Item :
                return InventStdCostConvert_Item::construct();
            case InventStdCostConvertWorkType::Level :
                return InventStdCostConvert_Level::construct();
            case InventStdCostConvertWorkType::End  :
                return InventStdCostConvert_End::construct();
            default :
                throw error(strFmt("@SYS19306",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description(InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        return _inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? "@SYS119346" : "@GLS112090";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
