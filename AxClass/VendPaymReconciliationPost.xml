<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymReconciliationPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendPaymReconciliationPost extends CustVendPaymReconciliationPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPaymentStatus</Name>
				<Source><![CDATA[
    public boolean checkPaymentStatus(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustVendPaymStatus vendPaymStatus;
        boolean ret;

        ret = false;

        if (_ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::None)
        {
            vendPaymStatus = VendPaymModeTable::find(_ledgerJournalTrans.PaymMode).PaymStatus;

            if ((vendPaymStatus == _ledgerJournalTrans.PaymentStatus) || (vendPaymStatus == CustVendPaymStatus::None))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalType</Name>
				<Source><![CDATA[
    public LedgerJournalType journalType()
    {
        return LedgerJournalType::Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNewJournals</Name>
				<Source><![CDATA[
    public void postNewJournals(RecordSortedList _createdJournals = this.createdJournals())
    {
        Args args;
        LedgerJournalTable ledgerJournalTable;

        args = new Args();
        args.caller(this);

        if (_createdJournals.first(ledgerJournalTable))
        {
            do
            {
                setPrefix(strFmt("@SYS28641", ledgerJournalTable.JournalName, ledgerJournalTable.JournalNum));
                args.record(ledgerJournalTable);

                new MenuFunction(menuitemActionStr(LedgerJourPostLJTransVendPaym), MenuItemType::Action).run(args);
            }
            while (_createdJournals.next(ledgerJournalTable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    public TransTxt transactionLogTxt()
    {
        return "@SYS82164";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    public TransactionLogType transactionLogType()
    {
        return TransactionLogType::VendPaymReconciliation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS63355";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>