<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPost_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Used to check if the ledger journal is validated.
/// </summary>
public class LedgerJournalCheckPost_CN extends LedgerJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournalReady</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journal is ready.
    /// </summary>
    /// <returns>
    /// true if the journal is ready.
    /// </returns>
    public boolean checkJournalReady()
    {
        #OCCRetryCount
        Counter progressTotal;
        boolean ret;
        boolean postingSuccess;
        boolean intercompanyPostingSuccess;

        if (!LedgerJournalCheckPost_CN::checkRestriction(ledgerJournalId))
        {
            throw error("@GLS54499");
        }

        ledgerJournalTable  = LedgerJournalTable::find(ledgerJournalId, true);
        ledgerJournalName   = ledgerJournalTable.ledgerJournalName();

        ttsbegin;

        if (this.parmInTransfer())
        {
            this.parmInTransfer(false);
        }
        else
        {
            if (!this.validate())
            {
                throw error(strFmt("@GeneralLedger:GeneralJournalPostPreValidateFail", ledgerJournalId));
            }

            if (!ledgerJournalTable.checkNotSystemBlocked()
                || !ledgerJournalTable.checkNotGroupBlocked()
                || !ledgerJournalTable.checkNotUserBlocked())
            {
                throw error(strFmt("@GeneralLedger:GeneralJournalPostPreValidateFail", ledgerJournalId));
            }

            this.updateSystemBlock(ledgerJournalTable, true);
        }

        ttscommit;

        try
        {
            progressTotal       = this.parmVoucher() ? 1 : ledgerJournalTable.numOfVouchers();

            if (progressTotal)
            {
                this.parmPostingResults().clearErrorLog();

                if (!this.parmPost())
                {
                    if (!this.parmProgress())
                    {
                        this.progressInit("@SYS13894", progressTotal, #AviFindFile);
                        this.parmProgress().setText("@SYS26577");
                    }
                    ret = this.checkJournal();
                }
                else
                {
                    this.progressInit("@SYS25781", progressTotal, #AviFormLetter);
                    this.parmProgress().setText("@SYS26577");

                    ttsbegin;

                    [postingSuccess, intercompanyPostingSuccess] = this.postJournal();
                    if (!postingSuccess || !intercompanyPostingSuccess)
                    {
                        if (this.parmTransferErrors())
                        {
                            this.parmInTransfer(true);
                        }
                        else
                        {
                            throw error("@SYS21628");
                        }
                    }
                    else
                    {
                        if (numOfVouchersBooked)
                        {
                            ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId, true);

                            [ledgerJournalTable.JournalTotalDebit,
                                ledgerJournalTable.JournalTotalCredit,
                                ledgerJournalTable.JournalTotalOffsetBalance] = LedgerJournalTable::journalBalanceMST(ledgerJournalId);

                            this.ledgerTransferToJournal(ledgerJournalId);

                            if (!this.parmErrorJournalDeleted())
                            {
                                ledgerJournalTable.Posted = NoYes::Yes;

                                if (this.parmTransferErrors())
                                {
                                    ledgerJournalTable.Log = strFmt("@SYS53324", this.numOfErrorsInList(), this.parmErrorLedgerJournalId());
                                }
                            }

                            ledgerJournalTable.update();

                            TransactionLog::create(TransactionLogType::LedgerJournal, ledgerJournalTable.JournalNum + ' ' + ledgerJournalTable.Name);
                        }
                    }

                    if (this.parmInTransfer())
                    {
                        ttsabort;
                    }
                    else
                    {
                        ttscommit;

                        LedgerJournalCheckPostCash::interCompanyTransferToCustPayment(this);
                    }
                }
            }
            else
            {
                if (!this.parmBeQuiet())
                {
                    info("@SYS27671");
                }
            }

            if (!this.parmInTransfer() || (this.numOfVouchersBooked()) <= 0)
            {	
		        this.removeSystemBlock();
            }
            this.progress(null);
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.removeSystemBlock();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRestriction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the voucher meets the voucher type rules.
    /// </summary>
    /// <param name="_journalNum">The journal number</param>
    /// <returns>
    /// True if the Voucher meets the voucher type rules; otherwise, false.
    /// </returns>
    public static boolean checkRestriction(LedgerJournalId _journalNum )
    {
        LedgerJournalTrans          ledgerJournalTrans;
        container                   voucherToCheck;
        LedgerVoucherTypeRule_CN    ledgerVoucherTypeRule;
        LedgerVoucherType_CN        ledgerVoucherType;
        boolean                     ret = true;

        if (LedgerJournalTable::find(_journalNum).JournalType != LedgerJournalType::AssetBudgets)
        {
            while select LedgerVoucherType_CN, Voucher, Voucher_CN
                from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _journalNum
            {
                if (!conFind(voucherToCheck, ledgerJournalTrans.Voucher))
                {
                    voucherToCheck += ledgerJournalTrans.Voucher;
                    ledgerVoucherType = LedgerVoucherType_CN::find(ledgerJournalTrans.LedgerVoucherType_CN);
                    if (ledgerVoucherType)
                    {
                        if (ledgerVoucherType.DefaultType == NoYes::No)
                        {
                            ledgerVoucherTypeRule = LedgerVoucherTypeRule_CN::newFromVoucher(_journalNum, ledgerJournalTrans.Voucher);
                            if (!ledgerVoucherTypeRule.checkVoucherTypeRule(ledgerVoucherType))
                            {
                                ret = false;
                            }
                        }
                    }
                    else
                    {
                        ret = false;
                    }
                    if (!ret)
                    {
                        // Voucher %1 doesn't meet the voucher type rules.
                        checkFailed(strFmt("@GLS60254", ledgerJournalTrans.Voucher_CN));
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAdjustmentForSYDM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the acquisition value is not adjusted for sum-year-digits depreciation method.
    /// </summary>
    /// <param name="_journalNum">The journal number.</param>
    /// <returns>
    /// True if the acquisition value is not adjusted for sum-year-digits depreciation method; otherwise, false.
    /// </returns>
    public static boolean validateAdjustmentForSYDM(ledgerJournalId _journalNum)
    {
        LedgerJournalTrans_Asset    ledgerJournalTransAssetForSYDM;
        LedgerJournalTrans          ledgerJournalTransForSYDM;
        boolean                     ret = true;

        while select TransType, RefRecId, AssetId, BookId from ledgerJournalTransAssetForSYDM
            join RecId from ledgerJournalTransForSYDM
            where ledgerJournalTransForSYDM.JournalNum == _journalNum
                && ledgerJournalTransAssetForSYDM.RefRecId == ledgerJournalTransForSYDM.RecId
        {
            ret = ret && ledgerJournalTransAssetForSYDM.IsNotAdjustedForSYDM_CN();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTable</Name>
				<Source><![CDATA[
    public static LedgerJournalCheckPost_CN newLedgerJournalTable(
        LedgerJournalTable   _ledgerJournalTable,
        NoYes                _post,
        NoYes                _transferErrors = NoYes::No)
    {
        LedgerJournalCheckPost_CN ledgerJournalCheckPost = new LedgerJournalCheckPost_CN();

        ledgerJournalCheckPost.parmJournalNum( _ledgerJournalTable.JournalNum);
        ledgerJournalCheckPost.parmPost(_post);
        ledgerJournalCheckPost.parmTransferErrors(_transferErrors);
        ledgerJournalCheckPost.parmDetailSummaryPosting(_ledgerJournalTable.DetailSummaryPosting);

        return ledgerJournalCheckPost;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>