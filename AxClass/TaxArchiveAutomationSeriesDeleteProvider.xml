<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxArchiveAutomationSeriesDeleteProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>TaxArchiveAutomationSeriesDeleteProvider</c> class is designed to handle
/// deleting the appropriate <c>TaxArchiveAutomationCriteria</c> records when <c>ProcessScheduleSeries</c> records are deleted.
/// </summary>
[ExportMetadata(extendedTypeStr(ProcessScheduleTypeName), 'TaxArchiveAutomation')]
[Export(identifierStr(Dynamics.AX.Application.ProcessScheduleIDeleteSeries))]
internal final class TaxArchiveAutomationSeriesDeleteProvider implements ProcessScheduleIDeleteSeries
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteSeries</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void deleteSeries(RefRecId _seriesRecId)
    {
        this.resetTaxArchiveTransStatus(_seriesRecId);
        this.deleteTaxArchiveAutomationCriteria(_seriesRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxArchiveAutomationCriteria</Name>
				<Source><![CDATA[
    private void deleteTaxArchiveAutomationCriteria(RefRecId _seriesRecId)
    {
        TaxArchiveAutomationCriteria automationCriteria;
        automationCriteria.skipDeleteActions(true);
        automationCriteria.skipDataMethods(true);
        automationCriteria.skipDatabaseLog(true);
        automationCriteria.skipEvents(true);

        delete_from automationCriteria
            where automationCriteria.ProcessScheduleSeries == _seriesRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTaxArchiveTransStatus</Name>
				<Source><![CDATA[
    private void resetTaxArchiveTransStatus(RefRecId _seriesRecId)
    {
        TaxArchiveAutomationCriteria automationCriteria;
        TaxArchiveTrans taxArchiveTrans;

        select firstonly forupdate Status from taxArchiveTrans
            exists join automationCriteria
                where automationCriteria.TaxArchiveTrans == taxArchiveTrans.RecId
                    && automationCriteria.ProcessScheduleSeries == _seriesRecId;

        // Only allow setting back to Ready if it's in an Archiving or Scheduled state. All other states need to remain.
        if (taxArchiveTrans.Status == LedgerArchiveStatus::Archiving 
            || taxArchiveTrans.Status == LedgerArchiveStatus::Scheduled)
        {
            ttsbegin;
            taxArchiveTrans.Status = LedgerArchiveStatus::Ready;
            taxArchiveTrans.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>