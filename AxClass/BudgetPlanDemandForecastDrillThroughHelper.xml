<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanDemandForecastDrillThroughHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanDemandForecastDrillThroughHelper</c> class will be used as a helper for the drill through functionality
/// from budget planning to demand forecast.
/// </summary>
public class BudgetPlanDemandForecastDrillThroughHelper extends BudgetPlanDrillThroughHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanDemandForecastDrillThroughHelper construct()
    {
        return new BudgetPlanDemandForecastDrillThroughHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryForInventoryDrillThrough</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the query for inventory drill through.
    /// </summary>
    /// <param name = "_inventAccountTypeConsump">The value of the <c>InventAccountType</c> for consumption.</param>
    /// <param name = "_inventAccountTypeDisc">The value of the <c>InventAccountType</c> for discount.</param>
    /// <param name = "_inventAccountTypeDiscExpense">The value of the <c>InventAccountType</c> for discount expense.</param>
    public void updateQueryForInventoryDrillThrough(
        Query             _query,
        InventAccountType _inventAccountTypeConsump,
        InventAccountType _inventAccountTypeDisc,
        InventAccountType _inventAccountTypeDiscExpense)
    {
        if (this.parmForecastModelId())
        {
            _query.dataSourceTable(tableNum(ForecastSales)).addRange(fieldnum(ForecastSales, ModelId)).value(this.parmForecastModelId());
        }

        this.createRangeCriteriaFromInventPosting(
            _inventAccountTypeConsump,
            _inventAccountTypeDisc,
            _inventAccountTypeDiscExpense);

        this.addRangesInQuery(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesInQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the ranges of different attributes of demand forecast in the query.
    /// </summary>
    /// <param name = "_query">The value of the <c>ForecastSales</c> query.</param>
    private void addRangesInQuery(Query _query)
    {
        str rangeCriteria;
        str rangePlaceHolder = '(%1.%2 == "%3")';

        QueryBuildDataSource forecastSalesDataSource = _query.dataSourceTable(tableNum(ForecastSales));

        Name forecastSalesDataSourceName = forecastSalesDataSource.name();

        if (!isItemRelationAll)
        {
            rangeCriteria = BudgetPlanUtility::addRangeCriteria(
                                items,
                                rangeCriteria,
                                forecastSalesDataSourceName,
                                fieldstr(ForecastSales, ItemId));

            rangeCriteria = BudgetPlanUtility::addRangeCriteria(
                                itemGroups,
                                rangeCriteria,
                                forecastSalesDataSourceName,
                                fieldstr(ForecastSales, ItemGroupId));

            rangeCriteria = BudgetPlanUtility::addRangeCriteria(
                                categories,
                                rangeCriteria,
                                forecastSalesDataSourceName,
                                fieldstr(ForecastSales, ProjCategoryId));
        }

        if (!isAccountRelationAll)
        {
            rangeCriteria = BudgetPlanUtility::addRangeCriteria(
                                accounts,
                                rangeCriteria,
                                forecastSalesDataSourceName,
                                fieldstr(ForecastSales, CustAccountId));

            rangeCriteria = BudgetPlanUtility::addRangeCriteria(
                                accountGroups,
                                rangeCriteria,
                                forecastSalesDataSourceName,
                                fieldstr(ForecastSales, CustGroupId));
        }

        rangeCriteria = BudgetPlanUtility::addRangeCriteria(
                                saleTaxGroups,
                                rangeCriteria,
                                forecastSalesDataSourceName,
                                fieldstr(ForecastSales, TaxGroupId));

        if (rangeCriteria)
        {
            forecastSalesDataSource.addRange(fieldnum(ForecastSales, ItemId)).value(rangeCriteria);
        }
        else if (!isAccountRelationAll && !isItemRelationAll)
        {
            forecastSalesDataSource.addRange(fieldnum(ForecastSales, ItemId)).value(SysQuery::valueEmptyString());
        }

        BudgetPlanDrillThroughHelper::appendDimensionRanges(forecastSalesDataSource, fieldNum(ForecastSales, DefaultDimension), dimensionAttributeValueMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>