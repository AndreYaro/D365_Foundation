<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSalesVATDetailsDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesVATDetailsReportDP_CN</c> class provides data for the <c>SalesVATDetailsReport_CN</c>
/// SQL Server Reporting Services (SSRS) report
/// </summary>
/// <remarks>
/// This is the Report Data Provider class for the <c>SalesVATDetailsReport_CN</c> SSRS report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(InventSalesVATDetailsContract_CN))
]
public class InventSalesVATDetailsDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    InventSalesVATDetailsTmp_CN     inventSalesVATDetailsTmp_CN;

    FromDate            fromDate;
    ToDate              toDate;
    CustAccount         custAccount;
    CustInvoiceId       custInvoiceId;
    TaxCode             salesTaxCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventSalesVATDetailsTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>SalesVATDetailsTmp_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>SalesVATDetailsTmp_CN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventSalesVATDetailsTmp_CN))
    ]
    public InventSalesVATDetailsTmp_CN getInventSalesVATDetailsTmp_CN()
    {
        select InventSalesVATDetailsTmp_CN;
        return InventSalesVATDetailsTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSalesVATDetailsTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates data achieved from query and inserts the results into the InventSalesVATDetailsTmp_CN table.
    /// </summary>
    private void initInventSalesVATDetailsTmp_CN()
    {
        Query q = new Query();
        QueryBuildDataSource taxTransDS = q.addDataSource(tableNum(TaxTrans));
        taxTransDS.addSelectionField(fieldNum(TaxTrans, TaxAmount));
        taxTransDS.addSelectionField(fieldNum(TaxTrans, TaxBaseAmount));
        taxTransDS.addSelectionField(fieldNum(TaxTrans, TaxValue));
        taxTransDS.addSelectionField(fieldNum(TaxTrans, TaxCode));
        taxTransDS.addRange(fieldNum(TaxTrans, TaxCode)).value(salesTaxCode);

        QueryBuildDataSource custInvoiceTransDS = taxTransDS.addDataSource(tableNum(CustInvoiceTrans));
        custInvoiceTransDS.addSelectionField(fieldNum(CustInvoiceTrans, Qty));
        custInvoiceTransDS.addSelectionField(fieldNum(CustInvoiceTrans, ItemId));
        custInvoiceTransDS.addSelectionField(fieldNum(CustInvoiceTrans, InvoiceId));
        custInvoiceTransDS.addSelectionField(fieldNum(CustInvoiceTrans, InvoiceDate));
        custInvoiceTransDS.joinMode(JoinMode::InnerJoin);
        custInvoiceTransDS.addLink(fieldNum(TaxTrans, SourceTableId), fieldNum(CustInvoiceTrans, TableId));
        custInvoiceTransDS.addLink(fieldNum(TaxTrans, SourceRecId), fieldNum(CustInvoiceTrans, RecId));
        custInvoiceTransDS.addRange(fieldNum(CustInvoiceTrans, InvoiceDate)).value(queryRange(fromDate, toDate));
        custInvoiceTransDS.addRange(fieldNum(CustInvoiceTrans, InvoiceId)).value(custInvoiceId);

        QueryBuildDataSource custInvoiceJourDS = custInvoiceTransDS.addDataSource(tableNum(CustInvoiceJour));
        custInvoiceJourDS.fetchMode(QueryFetchMode::One2One);
        custInvoiceJourDS.addSelectionField(fieldNum(CustInvoiceJour, OrderAccount));
        custInvoiceJourDS.addSelectionField(fieldNum(CustInvoiceJour, InvoiceAccount));
        custInvoiceJourDS.joinMode(JoinMode::InnerJoin);
        custInvoiceJourDS.relations(true);
        custInvoiceJourDS.addRange(fieldNum(CustInvoiceJour, InvoiceAccount)).value(custAccount);

        QueryBuildDataSource inventDimDS = custInvoiceTransDS.addDataSource(tableNum(InventDim));
        inventDimDS.addSelectionField(fieldNum(InventDim, InventLocationId));
        inventDimDS.fetchMode(QueryFetchMode::One2One);
        inventDimDS.addLink(fieldNum(CustInvoiceTrans, InventDimId), fieldNum(InventDim, inventDimId));
        inventDimDS.joinMode(JoinMode::OuterJoin);

        QueryBuildDataSource inventTableDS = custInvoiceTransDS.addDataSource(tableNum(InventTable));
        inventTableDS.addSelectionField(fieldNum(InventTable, ItemId));
        inventTableDS.addSelectionField(fieldNum(InventTable, Product));
        inventTableDS.fetchMode(QueryFetchMode::One2One);
        inventTableDS.joinMode(JoinMode::OuterJoin);
        inventTableDS.addLink(fieldNum(CustInvoiceTrans, ItemId), fieldNum(InventTable, ItemId));

        QueryRun qr = new QueryRun(q);

        while (qr.next())
        {
            TaxTrans         taxTransLocal         = qr.get(tableNum(TaxTrans));
            CustInvoiceTrans custInvoiceTransLocal = qr.get(tableNum(CustInvoiceTrans));
            CustInvoiceJour  custInvoiceJourLocal  = qr.get(tableNum(CustInvoiceJour));
            InventDim        inventDimLocal        = qr.get(tableNum(InventDim));
            InventTable      inventTableLocal      = qr.get(tableNum(InventTable));

            CustVendAC custAccountLocal = custInvoiceJourLocal.InvoiceAccount ? custInvoiceJourLocal.InvoiceAccount : custInvoiceJourLocal.OrderAccount;

            inventSalesVATDetailsTmp_CN.clear();

            inventSalesVATDetailsTmp_CN.Date            = custInvoiceTransLocal.InvoiceDate;
            inventSalesVATDetailsTmp_CN.CustAccount     = custAccountLocal;
            inventSalesVATDetailsTmp_CN.InvoiceId       = custInvoiceTransLocal.InvoiceId;
            inventSalesVATDetailsTmp_CN.ProductName     = inventTableLocal.itemName();
            inventSalesVATDetailsTmp_CN.Name            = inventTableLocal.itemGroup().Name;
            inventSalesVATDetailsTmp_CN.Warehouse       = inventDimLocal.InventLocationId;
            inventSalesVATDetailsTmp_CN.Quantity        = abs(custInvoiceTransLocal.Qty);
            inventSalesVATDetailsTmp_CN.Value           = abs(taxTransLocal.TaxValue);
            inventSalesVATDetailsTmp_CN.SalesTaxAmount  = abs(taxTransLocal.TaxAmount);
            inventSalesVATDetailsTmp_CN.Origin          = abs(taxTransLocal.TaxAmount) + abs(taxTransLocal.TaxBaseAmount);
            inventSalesVATDetailsTmp_CN.Price           = inventSalesVATDetailsTmp_CN.Origin / inventSalesVATDetailsTmp_CN.Quantity;
            inventSalesVATDetailsTmp_CN.TaxCode         = taxTransLocal.TaxCode;
            inventSalesVATDetailsTmp_CN.StartDate       = fromDate;
            inventSalesVATDetailsTmp_CN.EndDate         = toDate;

            inventSalesVATDetailsTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services report.
    /// </summary>
    /// <remarks>
    /// This method will be callled by SSRS at run time. The method will compute the data and populate the
    /// data tables that will be returned to SSRS
    /// </remarks>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00106, funcName());

        InventSalesVATDetailsContract_CN contract = this.parmDataContract() as InventSalesVATDetailsContract_CN;

        fromDate = contract.parmPeriodContract().parmFromDate();
        toDate = contract.parmPeriodContract().parmToDate();
        custAccount = contract.parmCustAccount();
        custInvoiceId = contract.parmInvoiceId();

        salesTaxCode = contract.parmSalesTaxCode();

        if (!fromDate)
        {
            fromDate = InventSRSHelper_CN::getCurrentPeriodDate();
        }
        if (!toDate)
        {
            toDate = InventSRSHelper_CN::getCurrentPeriodDate(false);
        }

        this.initInventSalesVATDetailsTmp_CN();

        select firstOnly recId from inventSalesVATDetailsTmp_CN;
        if (!inventSalesVATDetailsTmp_CN.RecId)
        {
            inventSalesVATDetailsTmp_CN.clear();
            inventSalesVATDetailsTmp_CN.StartDate   = fromDate;
            inventSalesVATDetailsTmp_CN.EndDate     = toDate;
            inventSalesVATDetailsTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>