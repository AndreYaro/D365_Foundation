<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductEntityToCrossTableDataAdaptor</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EcoResProductEntityToCrossTableDataAdaptor implements EcoResIProductCrossTableData
{
    EcoResProductEntity productEntity;
    EcoResProductData   productData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductEntityToCrossTableDataAdaptor construct()
    {
        return new EcoResProductEntityToCrossTableDataAdaptor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromEntity</Name>
				<Source><![CDATA[
    public static EcoResProductEntityToCrossTableDataAdaptor newFromEntity(EcoResProductEntity _productEntity)
    {
        var adaptor = EcoResProductEntityToCrossTableDataAdaptor::construct();
        adaptor.initProductData();
        adaptor.initFromEntity(_productEntity);
        return adaptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEntity</Name>
				<Source><![CDATA[
    protected void initFromEntity(EcoResProductEntity _productEntity)
    {
        productEntity = _productEntity;

        this.productData().identification().parmProductType(productEntity.ProductType);
        this.productData().identification().parmProductServiceType(productEntity.ServiceType);
        this.productData().identification().parmProductSubType(productEntity.ProductSubType);
        this.productData().identification().parmProductNumber(productEntity.ProductNumber);
        this.productData().identification().parmProductName(productEntity.ProductName);
        this.productData().identification().parmProductSearchName(productEntity.ProductSearchName);
        this.productData().identification().parmIsCatchWeightProduct(productEntity.IsCatchWeightProduct);
        this.productData().variant().parmColorGroupId(productEntity.ProductColorGroupId);
        this.productData().variant().parmSizeGroupId(productEntity.ProductSizeGroupId);
        this.productData().variant().parmStyleGroupId(productEntity.ProductStyleGroupId);
        this.productData().variant().parmConfigurationTechnology(productEntity.VariantConfigurationTechnology);
        this.productData().variant().parmProductDimensionGroupName(productEntity.ProductDimensionGroupName);
        this.productData().referenceGroups().parmGlobalStorageDimensionGroupName(productEntity.StorageDimensionGroupName);
        this.productData().referenceGroups().parmGlobalTrackingDimensionGroupName(productEntity.TrackingDimensionGroupName);
        this.productData().retail().parmIsRetailKit(productEntity.IsProductKit);
        this.productData().retail().parmRetailCategoryName(productEntity.RetailProductCategoryName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductData</Name>
				<Source><![CDATA[
    protected void initProductData()
    {
        productData = EcoResProductData::construct(false);

        // Subscribe
        this.productData().identification().productTypeChanged += eventhandler(this.onProductTypeChanged);
        this.productData().identification().productServiceTypeChanged += eventhandler(this.onProductServiceTypeChanged);
        this.productData().identification().productSubTypeChanged += eventhandler(this.onProductSubTypeChanged);
        this.productData().identification().productNumberChanged += eventhandler(this.onProductNumberChanged);
        this.productData().identification().productNameChanged += eventhandler(this.onProductNameChanged);
        this.productData().identification().productSearchNameChanged += eventhandler(this.onProductSearchNameChanged);
        this.productData().identification().isCatchWeightProductChanged += eventhandler(this.onIsCatchWeightProductChanged);
        this.productData().variant().colorGroupIdChanged += eventhandler(this.onColorGroupIdChanged);
        this.productData().variant().sizeGroupIdChanged += eventhandler(this.onSizeGroupIdChanged);
        this.productData().variant().styleGroupIdChanged += eventhandler(this.onStyleGroupIdChanged);
        this.productData().variant().configurationTechnologyChanged += eventhandler(this.onConfigurationTechnologyChanged);
        this.productData().variant().productDimensionGroupChanged += eventhandler(this.onProductDimensionGroupChanged);
        this.productData().referenceGroups().globalStorageDimensionGroupChanged += eventhandler(this.onGlobalStorageDimensionGroupChanged);
        this.productData().referenceGroups().globalTrackingDimensionGroupChanged += eventhandler(this.onGlobalTrackingDimensionGroupChanged);
        this.productData().retail().isRetailKitChanged += eventhandler(this.onIsRetailKitChanged);
        this.productData().retail().retailCategoryChanged += eventhandler(this.onRetailCategoryChanged);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductTypeChanged</Name>
				<Source><![CDATA[
    protected void onProductTypeChanged(EcoResProductIdentificationData _identification, EcoResProductType _productType)
    {
        productEntity.ProductType = _productType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductServiceTypeChanged</Name>
				<Source><![CDATA[
    protected void onProductServiceTypeChanged(EcoResProductIdentificationData _identification, EcoResProductServiceType _productServiceType)
    {
        productEntity.ServiceType = _productServiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductSubTypeChanged</Name>
				<Source><![CDATA[
    protected void onProductSubTypeChanged(EcoResProductIdentificationData _identification, EcoResProductSubType _productSubType)
    {
        productEntity.ProductSubType = _productSubType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductNumberChanged</Name>
				<Source><![CDATA[
    protected void onProductNumberChanged(EcoResProductIdentificationData _identification, EcoResProductNumber _productNumber)
    {
        productEntity.ProductNumber = _productNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductNameChanged</Name>
				<Source><![CDATA[
    protected void onProductNameChanged(EcoResProductIdentificationData _identification, EcoResProductName _productName)
    {
        productEntity.ProductName = _productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductSearchNameChanged</Name>
				<Source><![CDATA[
    protected void onProductSearchNameChanged(EcoResProductIdentificationData _identification, EcoResProductSearchName _productSearchName)
    {
        productEntity.ProductSearchName = _productSearchName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onIsCatchWeightProductChanged</Name>
				<Source><![CDATA[
    protected void onIsCatchWeightProductChanged(EcoResProductIdentificationData _identification, PdsCWProduct _isCatchWeightProduct)
    {
        productEntity.IsCatchWeightProduct = _isCatchWeightProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onColorGroupIdChanged</Name>
				<Source><![CDATA[
    protected void onColorGroupIdChanged(EcoResProductIdentificationData _identification, RetailColorGroupId _colorGroupId)
    {
        productEntity.ProductColorGroupId = _colorGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSizeGroupIdChanged</Name>
				<Source><![CDATA[
    protected void onSizeGroupIdChanged(EcoResProductIdentificationData _identification, RetailSizeGroupId _sizeGroupId)
    {
        productEntity.ProductSizeGroupId = _sizeGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onStyleGroupIdChanged</Name>
				<Source><![CDATA[
    protected void onStyleGroupIdChanged(EcoResProductIdentificationData _identification, RetailStyleGroupId _styleGroupId)
    {
        productEntity.ProductStyleGroupId = _styleGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onConfigurationTechnologyChanged</Name>
				<Source><![CDATA[
    protected void onConfigurationTechnologyChanged(EcoResProductIdentificationData _identification, EcoResVariantConfigurationTechnologyType _configurationTechnology)
    {
        productEntity.VariantConfigurationTechnology = _configurationTechnology;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onProductDimensionGroupChanged</Name>
				<Source><![CDATA[
    protected void onProductDimensionGroupChanged(EcoResProductIdentificationData _identification, RecId _productDimGroupRecId)
    {
        productEntity.ProductDimensionGroupName = this.productData().variant().parmProductDimensionGroupName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onGlobalStorageDimensionGroupChanged</Name>
				<Source><![CDATA[
    protected void onGlobalStorageDimensionGroupChanged(EcoResProductIdentificationData _identification, RecId _globalStorageDimGroupRecId)
    {
        productEntity.StorageDimensionGroupName = this.productData().referenceGroups().parmGlobalStorageDimensionGroupName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onGlobalTrackingDimensionGroupChanged</Name>
				<Source><![CDATA[
    protected void onGlobalTrackingDimensionGroupChanged(EcoResProductIdentificationData _identification, RecId _globalTrackingDimGroupRecId)
    {
        productEntity.TrackingDimensionGroupName = this.productData().referenceGroups().parmGlobalTrackingDimensionGroupName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onIsRetailKitChanged</Name>
				<Source><![CDATA[
    protected void onIsRetailKitChanged(EcoResProductIdentificationData _identification, boolean _isRetailKit)
    {
        productEntity.IsProductKit = _isRetailKit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onRetailCategoryChanged</Name>
				<Source><![CDATA[
    protected void onRetailCategoryChanged(EcoResProductIdentificationData _identification, RecId _retailCategoryRecId)
    {
        productEntity.RetailProductCategoryName = this.productData().retail().parmRetailCategoryName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productData</Name>
				<Source><![CDATA[
    public EcoResProductData productData()
    {
        return productData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowedProductSubTypes</Name>
				<Source><![CDATA[
    public Set parmAllowedProductSubTypes()
    {
        Set allowedProductSubTypes = new Set(Types::Enum);
        allowedProductSubTypes.add(EcoResProductSubtype::Product);
        allowedProductSubTypes.add(EcoResProductSubtype::ProductMaster);

        return allowedProductSubTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsUpdateOfExistingProduct</Name>
				<Source><![CDATA[
    public boolean parmIsUpdateOfExistingProduct()
    {
        return !productEntity.isNewRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReleased</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public boolean parmIsReleased()
    {
        return this.productData().identification().isReleasedProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntityId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public LegalEntityDataAreaId parmLegalEntityId()
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductType</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResProductType parmProductType(EcoResProductType _productType = EcoResProductType::Item)
    {
        return this.productData().identification().parmProductType(_productType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductSubType</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResProductSubType parmProductSubType(EcoResProductSubType _productSubType = EcoResProductSubType::Product)
    {
        return this.productData().identification().parmProductSubType(_productSubType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductNumber</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResProductNumber parmProductNumber(EcoResProductNumber _productNumber = '')
    {
        return this.productData().identification().parmProductNumber(_productNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResProductName parmProductName(EcoResProductName _productName = '')
    {
        return this.productData().identification().parmProductName(_productName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductSearchName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResProductSearchName parmProductSearchName(EcoResProductSearchName _productSearchName = '')
    {
        return this.productData().identification().parmProductSearchName(_productSearchName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVariantConfigurationTechnology</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResVariantConfigurationTechnologyType parmVariantConfigurationTechnology(
        EcoResVariantConfigurationTechnologyType _configurationTechnology = EcoResVariantConfigurationTechnologyType::PredefinedVariants)
    {
        return this.productData().variant().parmConfigurationTechnology(_configurationTechnology);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCatchWeightProduct</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public PdsCWProduct parmIsCatchWeightProduct(PdsCWProduct _isCatchWeightProduct = NoYes::No)
    {
        return this.productData().identification().parmIsCatchWeightProduct(_isCatchWeightProduct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductDimensionGroupName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResProductDimensionGroupName parmProductDimensionGroupName(EcoResProductDimensionGroupName _productDimGroupName = '')
    {
        return this.productData().variant().parmProductDimensionGroupName(_productDimGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductDimensionGroupRecId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RecId parmProductDimensionGroupRecId(RecId _productDimGroupRecId = 0)
    {
        return this.productData().variant().parmProductDimensionGroupRecId(_productDimGroupRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGlobalStorageDimensionGroupName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResStorageDimensionGroupName parmGlobalStorageDimensionGroupName(EcoResStorageDimensionGroupName _storageDimGroupName = '')
    {
        return this.productData().referenceGroups().parmGlobalStorageDimensionGroupName(_storageDimGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGlobalStorageDimensionGroupRecId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RecId parmGlobalStorageDimensionGroupRecId(RecId _storageDimGroupRecId = 0)
    {
        return this.productData().referenceGroups().parmGlobalStorageDimensionGroupRecId(_storageDimGroupRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGlobalTrackingDimensionGroupName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResTrackingDimensionGroupName parmGlobalTrackingDimensionGroupName(EcoResStorageDimensionGroupName _trackingDimGroupName = '')
    {
        return this.productData().referenceGroups().parmGlobalTrackingDimensionGroupName(_trackingDimGroupName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGlobalTrackingDimensionGroupRecId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RecId parmGlobalTrackingDimensionGroupRecId(RecId _trackingDimGroupRecId = 0)
    {
        return this.productData().referenceGroups().parmGlobalTrackingDimensionGroupRecId(_trackingDimGroupRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRetailKit</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public boolean parmIsRetailKit(boolean _isRetailKit = false)
    {
        return this.productData().retail().parmIsRetailKit(_isRetailKit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailCategoryName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResCategoryName parmRetailCategoryName(EcoResCategoryName _retailCategoryName = '')
    {
        return this.productData().retail().parmRetailCategoryName(_retailCategoryName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColorGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use parmProductData() instead.', true, 30\11\2017)]
    public RetailColorGroupId parmColorGroupId(RetailColorGroupId _colorGroupId = '')
    {
        return this.productData().variant().parmColorGroupId(_colorGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSizeGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use parmProductData() instead.', true, 30\11\2017)]
    public RetailSizeGroupId parmSizeGroupId(RetailSizeGroupId _sizeGroupId = '')
    {
        return this.productData().variant().parmSizeGroupId(_sizeGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStyleGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use parmProductData() instead.', true, 30\11\2017)]
    public RetailStyleGroupId parmStyleGroupId(RetailStyleGroupId _styleGroupId = '')
    {
        return this.productData().variant().parmStyleGroupId(_styleGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [SysObsolete('Use parmProductData() instead.', true, 30\11\2017)]
    public ItemId parmItemId(ItemId _itemId = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchName</Name>
				<Source><![CDATA[
    [SysObsolete('Use parmProductData() instead.', true, 30\11\2017)]
    public ItemNameAlias parmSearchName(ItemNameAlias _searchName = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorageDimensionGroupName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResStorageDimensionGroupName parmStorageDimensionGroupName(EcoResStorageDimensionGroupName _storageDimGroupName = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorageDimensionGroupRecId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RecId parmStorageDimensionGroupRecId(RecId _storageDimGroupRecId = 0)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackingDimensionGroupName</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public EcoResTrackingDimensionGroupName parmTrackingDimensionGroupName(EcoResStorageDimensionGroupName _trackingDimGroupName = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackingDimensionGroupRecId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public RecId parmTrackingDimensionGroupRecId(RecId _trackingDimGroupRecId = 0)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public ItemGroupId parmItemGroupId(ItemGroupId _itemGroupId = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemModelGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public InventModelGroupId parmItemModelGroupId(InventModelGroupId _itemModelGroupId = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservationHierarchyName</Name>
				<Source><![CDATA[
    // This method is not used. Keeping it only for backward compability, but not moving it to productData().
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public WHSReservationHierarchyName parmReservationHierarchyName(WHSReservationHierarchyName _reservationHierarchyName = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryUnitSymbol</Name>
				<Source><![CDATA[
    [SysObsolete('Use parmProductData() instead.', true, 30\11\2017)]
    public UnitOfMeasureSymbol parmInventoryUnitSymbol(UnitOfMeasureSymbol _unitSymbol = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseUnitSymbol</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public UnitOfMeasureSymbol parmPurchaseUnitSymbol(UnitOfMeasureSymbol _unitSymbol = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUnitSymbol</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public UnitOfMeasureSymbol parmSalesUnitSymbol(UnitOfMeasureSymbol _unitSymbol = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMUnitSymbol</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public UnitOfMeasureSymbol parmBOMUnitSymbol(UnitOfMeasureSymbol _unitSymbol = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTaxItemGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public TaxItemGroup parmSalesTaxItemGroupId(TaxItemGroup _taxGroupId = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseTaxItemGroupId</Name>
				<Source><![CDATA[
    [SysObsolete('Use productData() instead.', true, 30\11\2017)]
    public TaxItemGroup parmPurchaseTaxItemGroupId(TaxItemGroup _taxGroupId = '')
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>