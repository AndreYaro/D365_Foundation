<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMRebateInventDimExistsJoinQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///		The class <c>TAMRebateInventDimExistsJoinQueryBuilder</c> builds the
///     exists join clause for the query selecting the inventory dimensions.
/// </summary>
public class TAMRebateInventDimExistsJoinQueryBuilder
{
    InventDim selectedInventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existsJoinInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds an exists join with InventDim.
    /// </summary>
    /// <param name = "_queryObject">
    ///     A <c>SysDaQueryObject</c> instance.
    /// </param>
    /// <param name = "_inventDimId">
    ///     The inventDim Id.
    /// </param>
    /// <param name = "_inventDim">
    ///		A <c>InventDim</c> record.
    /// </param>
    /// <param name = "_selectedInventDim">
    ///		A <c>InventDim</c> record.
    /// </param>
    /// <param name = "_selectedInventDim">
    ///		A <c>InventDim</c> record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryObject</c> instance.
    /// </returns>
    internal SysDaQueryObject existsJoinInventDim(SysDaQueryObject _queryObject, SysDaFieldExpression _inventDimId, InventDim _inventDim, InventDim _selectedInventDim = selectedInventDim)
    {
        SysDaQueryObject	    inventDimQueryObject    = new SysDaQueryObject(_selectedInventDim);
        SysDaQueryExpression    inventDimIdClause       = new SysDaEqualsExpression(
                                                            new SysDaFieldExpression(_selectedInventDim, fieldStr(InventDim, InventDimId)), _inventDimId);

        inventDimQueryObject.whereClause(inventDimIdClause.and(this.buildInventDimExistsJoinWhereClause(_inventDim, _selectedInventDim)));

        inventDimQueryObject.joinClauseKind(SysDaJoinKind::ExistsJoin);

        _queryObject.joinClause(SysDaJoinKind::ExistsJoin, inventDimQueryObject);

        return inventDimQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventDimExistsJoinWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the where clause for exists join with InventDim.
    /// </summary>
    /// <param name = "_inventDim">
    ///		A <c>InventDim</c> record.
    /// </param>
    /// <param name = "_selectedInventDim">
    ///		A <c>InventDim</c> record.
    /// </param>
    /// <returns>
    ///     A <c>SysDaQueryExpression</c> instance.
    /// </returns>
    private SysDaQueryExpression buildInventDimExistsJoinWhereClause(InventDim _inventDim, InventDim _selectedInventDim)
    {
        SysDaQueryExpression    whereClause     = new SysDaEqualsExpression(new SysDaValueExpression(true), new SysDaValueExpression(true));
        ListEnumerator          dimFields       = InventDimMetaDataCache::dimProductDimEnabledFieldList().getEnumerator();

        // Product dimensions
        while (dimFields.moveNext())
        {
            FieldId dimFieldId = dimFields.current();

            whereClause = whereClause
                            .and(new SysDaOrExpression(
                                    new SysDaEqualsExpression(
                                        new SysDaFieldExpression(_selectedInventDim, fieldId2Name(tableName2Id(tableStr(InventDim)), dimFieldId)),
                                        new SysDaFieldExpression(_inventDim, fieldId2Name(tableName2Id(tableStr(InventDim)), dimFieldId))),
                                    new SysDaEqualsExpression(
                                        new SysDaFieldExpression(_selectedInventDim, fieldId2Name(tableName2Id(tableStr(InventDim)), dimFieldId)),
                                        new SysDaValueExpression(''))));
        }

        whereClause = whereClause
                        .and(new SysDaOrExpression(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_selectedInventDim, fieldStr(InventDim, InventSiteId)),
                                    new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventSiteId))),
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_selectedInventDim, fieldStr(InventDim, InventSiteId)),
                                    new SysDaValueExpression(''))))
                        .and(new SysDaOrExpression(
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_selectedInventDim, fieldStr(InventDim, InventLocationId)),
                                    new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventLocationId))),
                                new SysDaEqualsExpression(
                                    new SysDaFieldExpression(_selectedInventDim, fieldStr(InventDim, InventLocationId)),
                                    new SysDaValueExpression(''))));

        return whereClause;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>