<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailRecommendationsService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.WindowsAzure.Storage;

/// <summary>
/// The <c>RetailRecommendationsService</c> class that exposes APIs to external services.
/// </summary>
public class RetailRecommendationsService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetDataLakeEndpoint</Name>
				<Source><![CDATA[
	/// <summary>
    /// Gets an endpoint to the associated Azure Data Lake with a read-only SAS token for
    /// blob containers. If Azure Data Lake or Recommendations feature have not been enabled,
    /// then no endpoint is returned.
    /// </summary>
    /// <returns>A response object containing the endpoint to the Azure Data Lake.</returns>
    public RetailRecommendationsServiceResponse GetDataLakeEndpoint()
    {
        RetailSharedParameters retailSharedParameters = RetailSharedParameters::find();
        BIMeasurementParameters entityStore = BIMeasurementParameters::find();
        
        const int SharedAccessTokenExpiryIntervalInHours = 8; // consider making this a user-controlled parameter
        str productVersion = RetailRecommendationsService::GetProductVersion();
        boolean isRecoEnabled = retailSharedParameters.RecoListEnabled;
        boolean isDataLakeEnabled = entityStore.CDSAEnabled;
        str dataLakeEndpoint = '';
        str errorMessage = '';

        if (isRecoEnabled && isDataLakeEnabled)
        {
            System.Exception ex = null;
			try
            {
				str connectionString = entityStore.getSecretContents();
                CloudStorageAccount storageAccount = CloudStorageAccount::Parse(connectionString);

                // Create a new read-only, blob-only access policy for the account.
                SharedAccessAccountPolicy policy = new SharedAccessAccountPolicy();
                policy.Permissions = SharedAccessAccountPermissions::Read | SharedAccessAccountPermissions::List;
                policy.Services = SharedAccessAccountServices::Blob;
                policy.ResourceTypes = SharedAccessAccountResourceTypes::Service | SharedAccessAccountResourceTypes::Container | SharedAccessAccountResourceTypes::Object;
                policy.SharedAccessExpiryTime = new System.DateTimeOffset(System.DateTime::UtcNow.AddHours(SharedAccessTokenExpiryIntervalInHours));

                // Generate the SAS token.
                str sasToken = storageAccount.GetSharedAccessSignature(policy);
                dataLakeEndpoint = storageAccount.BlobEndpoint.ToString() + sasToken;
            }
            catch (Exception::Error)
            {
                // X++ errors have already been logged
            }
			catch (ex)
            {
                errorMessage = ex.Message;
            }
        }

        return new RetailRecommendationsServiceResponse(productVersion, isRecoEnabled, isDataLakeEnabled, dataLakeEndpoint, errorMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetProductVersion</Name>
				<Source><![CDATA[
	private static str GetProductVersion()
    {
        Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider provider = Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider::get_Provider();
        str productVersion = provider.get_ApplicationVersion();
        return productVersion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>