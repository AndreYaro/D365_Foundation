<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationEditLinesForm_Sales_Confir</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesQuotationEditLinesFormFactoryAttribute(ModuleAxapta::SalesOrder, DocumentStatus::Confirmation)]
class SalesQuotationEditLinesForm_Sales_Confir extends SalesQuotationEditLinesForm_Sales implements BatchRetryable
{
    NumberSeq                       numberSeq;
    Num                             number;
    Voucher                         voucher;

    SalesCalcTax                    salesCalcTax;

    CustQuotationConfirmJour        custQuotationConfirmJour;

    CustQuotationConfirmTrans       custQuotationConfirmTrans;

    RecordSortedList                journalList;

    CustConfirmJour                 custConfirmJour;

    SalesQty                        updateNow;
    InventQty                       updateNowInvent;
    PdsCWInventQty                  updateCWNow;
    AmountCur                       lineValue;
    AmountCur                       lineValueInclTax;

    LineNum                         sumByLineNum = 1;

    RecordSortedList                recordListSalesQuotationParmLine;

    LedgerVoucher                   ledgerVoucher;
    boolean                         ledgerVoucherIsSet;
  
    #localmacro.LinePrefix
        setPrefix(#PreFixField(%1, ItemId)  + ' '
                + %2 );
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    NumberSeq allocateNumAndVoucher()
    {
        return NumberSeq::newGetNum(SalesParameters::numRefQuotationConfirmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLine</Name>
				<Source><![CDATA[
    protected void calcLine(SalesQuotationLine _salesQuotationLine, SalesQuotationParmLine _salesQuotationParmLine)
    {
        _salesQuotationLine = this.getSalesQuotationLine(_salesQuotationParmLine);
        updateNow           = _salesQuotationParmLine.DeliverNow;
        updateNowInvent     = _salesQuotationParmLine.InventNow;
        lineValue           = _salesQuotationLine.calcLineAmountExclTax(updateNow, _salesQuotationParmLine.salesQuotationParmTable().Transdate, tax);

        updateCWNow     = _salesQuotationParmLine.PdsCWDeliverNow;

        lineValueInclTax    = _salesQuotationLine.calcLineAmount(updateNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBlockedLevel</Name>
				<Source><![CDATA[
    protected boolean checkBlockedLevel()
    {
        boolean  ok = true;

        if (!CustTable::canCustomerBeUpdated(salesQuotationTable.CustAccount, salesQuotationTable.InvoiceAccount, this.documentStatus()))
        {
            ok = checkFailed(strFmt("@SYS7987",salesQuotationTable.CustAccount));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean checkDiscardLine()
    {
        boolean     cwItem = PdsGlobal::pdsIsCWItem(salesQuotationParmLine.ItemId);
        if (( !cwItem && salesQuotationParmLine.DeliverNow == 0)
            || (cwItem && salesQuotationParmLine.PdsCWDeliverNow == 0))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeading</Name>
				<Source><![CDATA[
    protected boolean checkHeading()
    {
        boolean     ok = true;

        if (! salesQuotationTable.RecId)
        {
            ok = checkFailed(strFmt("@SYS84605",salesQuotationTable.QuotationId));
        }

        if (!salesQuotationTable.CustAccount && !salesQuotationTable.BusRelAccount)
        {
            // Quotation %1 has no account reference for the customer/prospect table.
            ok = checkFailed(strFmt("@SYS84606",salesQuotationTable.QuotationId));
        }

        if (salesQuotationTable.CustAccount)
        {
            if (!CustTable::exist(salesQuotationTable.CustAccount))
            {
                ok = checkFailed(strFmt("@SYS84607",salesQuotationTable.CustAccount, salesQuotationTable.QuotationId));
            }
            if (!salesQuotationTable.InvoiceAccount)
            {
                ok = checkFailed(strFmt("@SYS84608",salesQuotationTable.QuotationId));
            }
        }
        else if (salesQuotationTable.BusRelAccount && !smmBusRelTable::find(salesQuotationTable.BusRelAccount))
        {
            ok = checkFailed(strFmt("@SYS84607",salesQuotationTable.BusRelAccount, salesQuotationTable.QuotationId));
        }

        if ((salesQuotationTable.InvoiceAccount) && (! CustTable::exist(salesQuotationTable.InvoiceAccount)))
        {
            ok = checkFailed(strFmt("@SYS84620",salesQuotationTable.InvoiceAccount,salesQuotationTable.QuotationId));
        }

        if (salesQuotationTable.CurrencyCode && ! Currency::exist(salesQuotationTable.CurrencyCode))
        {
            ok = checkFailed(strFmt("@SYS84610",salesQuotationTable.CurrencyCode,salesQuotationTable.QuotationId));
        }

        if (salesQuotationTable.QuotationStatus == SalesQuotationStatus::Confirmed
            && !salesQuotationTable.isIntegrationOwnerDynamics365Sales())
        {
            ok = checkFailed(strFmt("@SCM:QuotationAlreadyConfirmed", salesQuotationTable.quotationId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfSomethingIsPosted</Name>
				<Source><![CDATA[
    protected boolean checkIfSomethingIsPosted()
    {
        if (! salesQuotationLine)
        {
            return checkFailed("@SYS26185");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified <c>salesQuotationParmLineCheck</c> is valid or not.
    /// </summary>  
    /// <returns>true if the line is valid; otherwise, false.</returns>
    private boolean checkLines()
    {
        RecordSortedList            recordListSalesQuotationParmLineLocal = recordListSalesQuotationParmLine;
        SalesQuotationParmLine      salesQuotationParmLineCheck;      
        
        if (!recordListSalesQuotationParmLineLocal)
        {
            return true;
        }

        while (recordListSalesQuotationParmLineLocal.next(salesQuotationParmLineCheck))
        {
            if (salesQuotationParmLineCheck.ItemId && !this.checkProductNotStopped(salesQuotationParmLineCheck.ItemId,
                                                                                   salesQuotationParmLineCheck.inventDim(),
                                                                                   false))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSales</Name>
				<Source><![CDATA[
    protected boolean checkSales()
    {
        boolean  ok = true;

        // In transactions in order to get enforce selection of e.g. CustTable
        ttsBegin;

        if (!this.checkHeading() ||!this.checkBlockedLevel() || !this.checkLines())
        {
            ok = false;
        }

        if ((!salesQuotationTable.isIntegrationOwnerDynamics365Sales() || !SalesQuotationEditLinesValidateSalesIdManualFlight::instance().isEnabled()) &&
            (this.numRefSalesId().numberSequenceTable().Manual) &&
            (!salesQuotationParmTable.SalesIdManual))
        {
            ok = checkFailed("@SYS57631");
        }

        ttsCommit;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    public boolean createJournal()
    {
        journalList = this.newJournalList();

        this.researchSalesQuotationAutoCharges();

        salesQuotationTotals = SalesQuotationTotals::construct(salesQuotationParmTable,
                                                               SalesUpdate::All,
                                                               AccountOrder::None,
                                                               this.parmId(),
                                                               salesQuotationTable.QuotationId,
                                                               this.documentStatus());
        salesQuotationTotals.prepareTotalAmountCalculation();
        salesQuotationTotals.prepareQuantitiesCalculation();
        this.tax(salesQuotationTotals.tax());

        recordListSalesQuotationParmLine = salesQuotationTotals.recordSortedListLine();

        if (! this.checkSales())
        {
            throw error(strFmt("@SYS84612", salesQuotationParmTable.QuotationId));
        }

        this.insertJournal();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailSalesDiscountLine</Name>
				<Source><![CDATA[
    internal protected void createRetailSalesDiscountLine(SalesQuotationLine _salesQuotationLine, SalesLine _salesLine)
    {
        SalesQuotationEditLinesForm_Sales_Confir::createRetailSalesDiscountLineFromQuotationLine(_salesQuotationLine, _salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailSalesDiscountLineFromQuotationLine</Name>
				<Source><![CDATA[
    internal static void createRetailSalesDiscountLineFromQuotationLine(SalesQuotationLine _salesQuotationLine, SalesLine _salesLine)
    {
        RetailSalesDiscountLine discountLine;
        RetailSalesQuotationDiscountLine salesQuotationDiscountLine;

        while select * from salesQuotationDiscountLine
                where salesQuotationDiscountLine.InventTransId == _salesQuotationLine.InventTransId
        {
            discountLine.clear();
            discountLine.InventTransId = _salesLine.InventTransId;
            discountLine.initFromRetailSalesQuoteDiscountLine(salesQuotationDiscountLine);
            discountLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesQuotationLineTableQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for sales quotation line.
    /// </summary>
    /// <param name = "_salesQuotationLine">The sales quotation line.</param>
    /// <param name = "_quotationId">The quotation Id.</param>
    /// <returns>The query object.</returns>
    protected static SysDaQueryObject buildSalesQuotationLineTableQueryObject(
		SalesQuotationLine _salesQuotationLine, 
		QuotationIdBase    _quotationId)
    {
        SysDaQueryObject sdqosalesQuotationLine = new SysDaQueryObject(_salesQuotationLine);
        sdqosalesQuotationLine.forUpdateHint    = true;

        sdqosalesQuotationLine.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_salesQuotationLine, fieldStr(salesQuotationLine, QuotationId)),
            new SysDaValueExpression(_quotationId))
            .and(new SysDaNotEqualsExpression(
            new SysDaFieldExpression(_salesQuotationLine, fieldStr(salesQuotationLine, SalesQty)),
            new SysDaValueExpression(0))));
                       
        return sdqosalesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildsalesQuotationParmLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for sales quotation parm line.
    /// </summary>
    /// <param name = "_salesQuotationParmLine">The Sales quotation parm line.</param>
    /// <param name = "_salesQuotationLine">The sales quotation line.</param>
    /// <param name = "_salesQuotationParmTable">The sales quotation parm table.</param>
    /// <returns>The query object.</returns>
    protected static SysDaQueryObject buildsalesQuotationParmLineQueryObject(
        SalesQuotationParmLine  _salesQuotationParmLine,
        SalesQuotationLine      _salesQuotationLine,
        SalesQuotationParmTable _salesQuotationParmTable)
    {
        SysDaQueryObject sdqosalesQuotationParmLine = new SysDaQueryObject(_salesQuotationParmLine);

        sdqosalesQuotationParmLine.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_salesQuotationParmLine, fieldStr(SalesQuotationParmLine, SalesQuotationLineRecId)),
            new SysDaFieldExpression(_salesQuotationLine, fieldStr(salesQuotationLine, RecId)))
            .and(new SysDaEqualsExpression(
            new SysDaFieldExpression(_salesQuotationParmLine, fieldStr(SalesQuotationParmLine, ParmId)),
            new SysDaValueExpression(_salesQuotationParmTable.ParmId)))
            .and(new SysDaEqualsExpression(
            new SysDaFieldExpression(_salesQuotationParmLine, fieldStr(SalesQuotationParmLine, TableRefId)),
            new SysDaValueExpression(_salesQuotationParmTable.TableRefId)))
            .and(new SysDaEqualsExpression(
            new SysDaFieldExpression(_salesQuotationParmLine, fieldStr(SalesQuotationParmLine, Transfer)),
            new SysDaValueExpression(NoYes::Yes))));

        return sdqosalesQuotationParmLine;
      }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLines</Name>
				<Source><![CDATA[
    void createSalesLines(SalesQuotationTable   _salesQuotationTable    = salesQuotationTable,
                          SalesTable            _salesTable             = salesTableCreated)
    {
        SalesQuotationLine          salesQuotationLineUpdate;
        InventDim                   inventDim           = null;
        SalesLine                   salesLine;
        SalesQuotationParmLine      salesQuotationParmLineUpdate;
        Map                         mapOfOrderLinesWithMultipleDeliveries = new Map(Types::String, Types::String);
        SalesDeliverySchedule       salesDeliverySchedule;
        SalesLineForeignTradeCategory salesLineForeignTradeCategory;
        NoYes                       item_cancelled  = NoYes::No;

        boolean shouldUpdateRetail = this.shouldUpdateRetailSalesLineAndDiscountLine(salesQuotationTable);

        SalesLineCreateLineParameters salesLineCreateLineParameters = this.getCreateSalesLineParameters();
        SalesInstrumentationLogger instrumentationLogger = SalesInstrumentationLogger::createLogger(classStr(SalesQuotationEditLinesForm_Sales_Confir));

        SysDaQueryObject sdqoSalesQuotationLineTable  = SalesQuotationEditLinesForm_Sales_Confir::buildSalesQuotationLineTableQueryObject(
			salesQuotationLineUpdate, 
			salesQuotationTable.QuotationId);

        SysDaQueryObject sdqosalesQuotationParmLine   = SalesQuotationEditLinesForm_Sales_Confir::buildsalesQuotationParmLineQueryObject(
			salesQuotationParmLineUpdate, 
			salesQuotationLineUpdate, 
			salesQuotationParmTable);

        sdqoSalesQuotationLineTable.joinClause(SysDaJoinKind::ExistsJoin, sdqosalesQuotationParmLine);
        
        SysDaSearchObject    soSalesQuotationLineTable = new SysDaSearchObject(sdqoSalesQuotationLineTable);
        SysDaSearchStatement ssSalesQuotationLineTable = new SysDaSearchStatement();

        KittingISalesQuotation2Sales kittingHandler = this.kittingCreateISalesQuotation2Sales();
              
        while (ssSalesQuotationLineTable.nextRecord(soSalesQuotationLineTable))
        {
            using (var activityContext = instrumentationLogger.salesOrderLineCreationActivities().createFromSalesQuotation())
            {
                salesLine = this.initSalesLine(_salesTable, salesQuotationLineUpdate);
                this.createSalesLine(salesLine, salesLineCreateLineParameters);
            }

            TransTaxInformationHelper::copyTransTaxInformation(salesQuotationLineUpdate, salesLine);

            salesLine.createWarningIfNotReserved();

            if (kittingHandler)
            {
                kittingHandler.createKitLine(salesQuotationLineUpdate.InventTransId, salesLine);
            }

            // Fix retail extensions.
            if (shouldUpdateRetail)
            {
                this.updateRetailSalesLine(salesQuotationLineUpdate, SalesLine.RecId);
                this.createRetailSalesDiscountLine(salesQuotationLineUpdate, salesLine);
            }

            if (salesQuotationLineUpdate.isCategoryBased())
            {
                SalesQuotationLineForeignTradeCategory salesQuotationLineForeignTradeCategory = SalesQuotationLineForeignTradeCategory::findSalesQuotationLine(salesQuotationLineUpdate);
                if (salesQuotationLineForeignTradeCategory)
                {
                    salesLineForeignTradeCategory.initFromSQLineForeignTradeCategory(salesQuotationLineForeignTradeCategory);
                    salesLineForeignTradeCategory.initFromSalesLine(salesLine);
                    salesLineForeignTradeCategory.insert();
                }
            }

            // Transfer markup
            Markup::copy(false,
                            salesQuotationLineUpdate,
                            salesLine);

            if (salesQuotationLineUpdate.LineDeliveryType == LineDeliveryType::DeliveryLine)
            {
                salesDeliverySchedule.DeliveryLine = salesLine.InventTransId;
                SalesQuotationLine quotationLine = SalesQuotationDeliverySchedule::findOrderLineForDeliveryLine(salesQuotationLineUpdate.InventTransId);
                if (mapOfOrderLinesWithMultipleDeliveries.exists(quotationLine.InventTransId))
                {
                    // attach to an existing sales order line with multiple deliveries.
                    salesDeliverySchedule.OrderLine = mapOfOrderLinesWithMultipleDeliveries.lookup(quotationLine.InventTransId);
                }
                else
                {
                    SalesLine salesLineWithMultipleDeliveries = this.initializeSalesLineWithMultipleDeliveries(quotationLine, _salesTable);

                    salesLineWithMultipleDeliveries.createLine(false, false, false, true, false, false, false, true, false, false);

                    salesDeliverySchedule.OrderLine = salesLineWithMultipleDeliveries.InventTransId;

                    mapOfOrderLinesWithMultipleDeliveries.insert(quotationLine.InventTransId, salesLineWithMultipleDeliveries.InventTransId);

                    // Fix retail extensions.
                    if (shouldUpdateRetail)
                    {
                        this.updateRetailSalesLine(quotationLine, salesLineWithMultipleDeliveries.RecId);
                        this.createRetailSalesDiscountLine(quotationLine, salesLineWithMultipleDeliveries);
                    }
                }
                salesDeliverySchedule.insert();
            }
        }

        // recalculate all order lines with multiple deliveries.
        MapEnumerator mapEnumerator = mapOfOrderLinesWithMultipleDeliveries.getEnumerator();
        mapEnumerator.reset();
        while (mapEnumerator.moveNext())
        {
            salesLine = SalesLine::findInventTransId(mapEnumerator.currentValue(), true);
            this.recalculateSalesOrderLineWithMultipleDeliveries(salesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLineWithMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales order line record with multiple deliveries.
    /// </summary>
    /// <param name = "_quotationLine">A sales quotation line record used to initialize the sales line.</param>
    /// <param name = "_salesTable">The sales order header of the line to be initialized.</param>
    /// <returns>The initialized sales order line record.</returns>
    protected SalesLine initializeSalesLineWithMultipleDeliveries(SalesQuotationLine _quotationLine, SalesTable _salesTable)
    {
        SalesLine salesLineWithMultipleDeliveries;

        // create new sales order line with multiple deliveries
        salesLineWithMultipleDeliveries.clear();
        salesLineWithMultipleDeliveries.initFromSalesTable(_salesTable);

        salesLineWithMultipleDeliveries.SalesUnit = _quotationLine.SalesUnit;
        salesLineWithMultipleDeliveries.initFromItemOrCategory(
                        _quotationLine.ItemId,
                        _quotationLine.SalesCategory,
                        _quotationLine.Name);

        salesLineWithMultipleDeliveries.initFromSalesQuotationLine(_quotationLine);
        // Since initFromInventTable called by initFromItemOrCategory
        // sets SalesQty and related fields they are now reset to 0 to
        // avoid invent transactions.
        salesLineWithMultipleDeliveries.SalesQty = 0;

        return salesLineWithMultipleDeliveries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateSalesOrderLineWithMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the specific sales order line with multiple deliveries.
    /// </summary>
    /// <param name = "_salesLine">The sales order line record to be recalculated.</param>
    protected void recalculateSalesOrderLineWithMultipleDeliveries(SalesLine _salesLine)
    {
        _salesLine.recalculateDeliveryScheduleOrderLine(false);
        _salesLine.updateWithoutUpdatingDeliveryScheduleLines(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_salesTable">The sales order header of the line to be initialized.</param>
    /// <param name = "_salesQuotationLineUpdate">A <c>SalesQuotationLine</c> used to initialize the sales line.</param>
    /// <returns>The initialized <c>SalesLine</c> record.</returns>
    protected SalesLine initSalesLine(SalesTable _salesTable, SalesQuotationLine _salesQuotationLineUpdate)
    {
        #isoCountryRegionCodes

        RecId retailChannelId = salesQuotationTable.retailSalesQuotationTable().RetailChannel;
        SalesLine salesLine;
        salesLine.clear();
        salesLine.initValue(_salesTable.SalesType);

        salesLine.initFromSalesTable(_salesTable);

        salesLine.initFromItemOrCategory(
                _salesQuotationLineUpdate.ItemId,
                _salesQuotationLineUpdate.SalesCategory,
                _salesQuotationLineUpdate.Name,
                (retailChannelId == 0));

        salesLine.SalesQty        = _salesQuotationLineUpdate.SalesQty;
        salesLine.SalesUnit       = _salesQuotationLineUpdate.SalesUnit;

        salesLine.initFromSalesQuotationLine(_salesQuotationLineUpdate);

        salesLine.PdsCWQty  = _salesQuotationLineUpdate.PdsCWQty;

        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(salesLine, _salesQuotationLineUpdate);
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreateSalesLineParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parameters used to create the <c>SalesLine</c> record.
    /// </summary>
    /// <returns>The parameters used to create the <c>SalesLine</c> record</returns>
    protected SalesLineCreateLineParameters getCreateSalesLineParameters()
    {
        SalesLineCreateLineParameters salesLineCreateLineParameters = SalesLineCreateLineParameters::construct();
        salesLineCreateLineParameters.calcInventQty         = true;
        salesLineCreateLineParameters.searchMarkup          = false;
        salesLineCreateLineParameters.skipCreditLimitCheck  = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            salesLineCreateLineParameters.validation = true;
        }

        return salesLineCreateLineParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>SalesLine</c> record based on the passed parameters.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record to be created.</param>
    /// <param name = "_salesLineCreateLineParameters">The parameters used to create the <c>SalesLine</c> record.</param>
    protected void createSalesLine(SalesLine _salesLine, SalesLineCreateLineParameters _salesLineCreateLineParameters)
    {
        _salesLine.createLineFromParameters(_salesLineCreateLineParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTable</Name>
				<Source><![CDATA[
    boolean createSalesTable()
    {
        boolean retOk = true;

        // Validate customer account
        if (salesQuotationTable.CustAccount)
        {
            if (!CustTable::exist(salesQuotationTable.CustAccount))
            {
                retOk = checkFailed(strFmt("@SYS16734", salesQuotationTable.CustAccount));
            }
        }
        else
        {
            retOk = checkFailed("@SYS59637");
        }

        SalesTable salesTable;

        if (retOk)
        {
            salesTable = this.initializeSalesTable();

            salesTable.insert(true);    // skip auto creation of markup

            this.initTaxRegulationFromSalesQuotation(salesTable);

            this.parmSalesTableCreated(salesTable);
        }

        if (retOk)
        {
            custQuotationConfirmJour.SalesId = salesTable.SalesId;
        }

        return retOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales table record.
    /// </summary>
    /// <returns>The <c>SalesTable</c>.</returns>
    protected SalesTable initializeSalesTable()
    {
        SalesId tmpSalesId;

        SalesTable salesTable;
        salesTable.initValue(this.salesType());

        // Get salesId
        NumberSequenceReference numRefSalesId = this.numRefSalesId();
        if (!numRefSalesId.numberSequenceTable().Manual)
        {
            NumberSeq num = NumberSeq::newGetNum(numRefSalesId);
            tmpSalesId = num.num();

            if (SalesTable::exist(tmpSalesId))
            {
                num.abort();
                checkFailed("@SYS55111");
                checkFailed(strFmt("@SYS55112", tmpSalesId));
                throw error("@SYS23020");
            }

            num.used();
        }
        else
        {
            tmpSalesId = salesQuotationParmTable.SalesIdManual;

            if (SalesTable::exist(tmpSalesId))
            {
                checkFailed("@SYS55111");
                checkFailed(strFmt("@SYS55112", tmpSalesId));
                throw error("@SYS23020");
            }
        }

        salesTable.SalesId = tmpSalesId;

        CustTable custTable;
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            custTable = CustTable::find(salesQuotationTable.CustAccount);
            // Temporarily change the customer account to the surviving customer account if the
            // customer has been merged.
            if (custTable.MCRMergedParent)
            {
                salesQuotationTable.CustAccount = custTable.MCRMergedRoot;
            }
        }

        // initialize from SalesQuotationTable
        salesTable.initFromSalesQuotationTable(salesQuotationTable);
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Change the customer account back & inform the user.
            if (custTable.MCRMergedParent)
            {
                salesQuotationTable.CustAccount = custTable.AccountNum;
                info(strFmt("@MCR25707", custTable.AccountNum, custTable.MCRMergedParent));
            }
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence reference for the new sales order.
    /// </summary>
    /// <returns>
    /// The number sequence reference.
    /// </returns>
    [Wrappable]
    final protected NumberSequenceReference numRefSalesId()
    {
        return SalesParameters::numRefSalesId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SalesType</c> value.
    /// </summary>
    /// <returns>
    /// The <c>SalesType</c> value
    /// </returns>
    protected SalesType salesType()
    {
        return SalesType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    void displayProgress()
    {
        this.progressUpdate(strFmt("@SYS84613",salesQuotationTable.QuotationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::Confirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedEuroTriangulation</Name>
				<Source><![CDATA[
    protected UnknownNoYes fixedEuroTriangulation()
    {
        return(salesQuotationTable.fixedEuroTriangulation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    protected CustExchRate fixedExchRate()
    {
        return(salesQuotationTable.fixedExchRate(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRateSecondary</Name>
				<Source><![CDATA[
    protected ExchrateSecondary fixedExchRateSecondary()
    {
        return (salesQuotationTable.fixedExchRateSecondary());
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaption</Name>
				<Source><![CDATA[
    str formLetterCaption()
    {
        return "@SYS5368";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterSorting</Name>
				<Source><![CDATA[
    container formLetterSorting(TableId sortingTableId, FieldId recIdField)
    {
        container                       sortOrder;
        FormLetterSortingParameters     sortingParameters;

        while select FieldId
            from  sortingParameters
            order by Position, FieldId
            where sortingParameters.SortingTableId == sortingTableId
        {
            sortOrder += [sortingParameters.FieldId];
        }

        sortOrder += [recIdField];

        return sortOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInclTaxAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quotation amount inclusive of tax to insert record in to custQuotationConfirmJour table.
    /// </summary>
    void getInclTaxAmount_IN()
    {
        TaxAmountCur        inclTaxAmount;
        SalesQuotationLine  salesQuotationLineloc;

        while select RecId, TableId, TaxItemGroup from salesQuotationLineloc
            where salesQuotationLineloc.QuotationId == salesQuotationTable.QuotationId
        {
            if (FormulaDesigner_IN::isPriceInclTaxLine(salesQuotationLineloc.TaxItemGroup))
            {
                TmpTaxWorkTrans tmpTaxWorkTrans = this.tax().tmpTaxWorkTrans();
                TmpTaxCalc_IN tmpTaxCalc = this.tax().tmpTaxCalc_IN();
                while select tmpTaxWorkTrans
                    where tmpTaxWorkTrans.SourceRecId      == salesQuotationLineloc.RecId   &&
                          tmpTaxWorkTrans.SourceTableId    == salesQuotationLineloc.TableId &&
                          tmpTaxWorkTrans.TaxDirection     != TaxDirection::UseTax          &&
                          tmpTaxWorkTrans.TaxOrigin        != TaxOrigin::TaxReversed
                {
                    FormulaDesigner_IN formulaDesigner = FormulaDesigner_IN::findByTaxCode(tmpTaxWorkTrans.TaxItemGroup, tmpTaxWorkTrans.TaxCode);

                    if (formulaDesigner.PriceInclTax)
                    {
                        select tmpTaxCalc where
                            tmpTaxCalc.TaxCode         == tmpTaxWorkTrans.TaxCode       &&
                            tmpTaxCalc.SourceTableID   == salesQuotationLineloc.TableId &&
                            tmpTaxCalc.SourceRecID     == salesQuotationLineloc.RecId;

                        TaxableBasis_IN taxBasis = formulaDesigner.TaxableBasis;

                        if (taxBasis == TaxableBasis_IN::ExclAmount)
                        {
                            taxBasis = Tax::getTaxableBasis_IN(formulaDesigner);
                        }

                        if (TaxTable::find(tmpTaxWorkTrans.TaxCode).TaxType_IN != TaxType_IN::None
                            && (taxBasis == TaxableBasis_IN::LineAmount
                                || taxBasis == TaxableBasis_IN::Assessable))
                        {
                            if (!tmpTaxWorkTrans.SourceRegulateAmountCur)
                            {
                                inclTaxAmount += tmpTaxWorkTrans.SourceTaxAmountCur;
                            }
                            else
                            {
                                inclTaxAmount += tmpTaxWorkTrans.SourceRegulateAmountCur;
                            }

                            if (inclTaxAmount < 0)
                            {
                                inclTaxAmount += tmpTaxCalc.TaxOnCharges;
                            }
                            else
                            {
                                inclTaxAmount -= tmpTaxCalc.TaxOnCharges;
                            }
                        }
                        inclTaxAmount = CurrencyExchangeHelper::amount(inclTaxAmount);
                    }
                }
            }
        }
        if (inclTaxAmount)
        {
            custQuotationConfirmJour.QuotationAmount = custQuotationConfirmJour.QuotationAmount - abs(inclTaxAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    container getNumAndVoucher()
    {
        return [numberSeq.num(), ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQuotationLine</Name>
				<Source><![CDATA[
    protected SalesQuotationLine getSalesQuotationLine(SalesQuotationParmLine _salesQuotationParmLine, boolean _forUpdate = false)
    {
        SalesQuotationLine  localSalesQuotationLine;

        localSalesQuotationLine.selectForUpdate(_forUpdate);

        select firstonly localSalesQuotationLine
            where localSalesQuotationLine.RecId == _salesQuotationParmLine.SalesQuotationLineRecId;

        if (! SalesQuotationTable::exist(localSalesQuotationLine.QuotationId))
        {
            throw error("@SYS84618");
        }

        return localSalesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal()
    {
        custQuotationConfirmJour.clear();
        custQuotationConfirmJour.initValue();

        custQuotationConfirmJour.QuotationConfirmId = number;

        if (!custQuotationConfirmJour.QuotationConfirmId)
        {
            // Quotation confirmation journal id must be filled in.
            throw error("@SYS100046");
        }

        custQuotationConfirmJour.ParmId             = this.parmId();
        custQuotationConfirmJour.QuotationDate      = salesQuotationParmTable.Transdate;

        custQuotationConfirmJour.initFromSalesQuotationTable(salesQuotationTable);

        custQuotationConfirmJour.setDocNum(salesQuotationTable);

        custQuotationConfirmJour.InterCompanyPosted = this.interCompanyPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkup</Name>
				<Source><![CDATA[
    protected void initMarkup()
    {
        markup = new Markup(salesQuotationTable.CurrencyCode);
        markup.setTax(this.tax());
        markup.parmExchRate(this.fixedExchRate(), this.fixedExchRateSecondary(), this.fixedEuroTriangulation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxRegulationFromSalesQuotation</Name>
				<Source><![CDATA[
    void initTaxRegulationFromSalesQuotation(SalesTable _salesTable)
    {
        TaxWorkRegulation::copy(salesQuotationTable, _salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournal</Name>
				<Source><![CDATA[
    protected void insertJournal()
    {
        ttsBegin;

        numberSeq           = this.allocateNumAndVoucher();
        [number, voucher]    = this.getNumAndVoucher();

        if (this.updateNow())
        {
            this.postUpdate();

            TransactionLog::create(this.transactionLogType(),this.transactionLogTxt());
            ttsCommit;

            if (TaxIntegrationUtils::isTransitDocumentEnabled())
            {
                this.transitDocument();
            }

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                TaxBusinessService::transferTaxDocument(salesQuotationParmTable, custQuotationConfirmJour);
            }
            // </GTE>
        }
        else
        {
            throw error("@SYS21533");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journal</Name>
				<Source><![CDATA[
    CustQuotationConfirmJour journal()
    {
        return custQuotationConfirmJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    protected RecordSortedList newJournalList()
    {
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(CustQuotationConfirmJour));
        recordSortedList.sortOrderFromContainer(this.formLetterSorting(tableNum(CustQuotationConfirmJour), fieldNum(CustQuotationConfirmJour, RecId)));

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupLine</Name>
				<Source><![CDATA[
    protected void postMarkupLine()
    {
        this.postMarkupOnTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    protected void postMarkupOnJour(SalesQuotationTable _salesQuotationTableMarkup)
    {
        markup.postJournal(1,
                           salesQuotationTotals.totalOrderBalance(_salesQuotationTableMarkup.RecId),
                           _salesQuotationTableMarkup,
                           _salesQuotationTableMarkup.DefaultDimension,
                           custQuotationConfirmJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    protected void postMarkupOnTrans()
    {
        markup.postJournal(updateNow,
                           lineValue,
                           salesQuotationLine,
                           salesQuotationLine.DefaultDimension,
                           custQuotationConfirmTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    protected void postMarkupTable()
    {
        QueryRun qR = new QueryRun(salesQuotationParmTable.querySalesQuotationParmSubTable());
        while (qR.next())
        {
            SalesQuotationTable salesQuotationTableMarkup = null;
            if (qR.changed(tableNum(SalesQuotationParmSubTable)))
            {
                SalesQuotationParmSubTable salesQuotationParmSubTable = qR.get(tableNum(SalesQuotationParmSubTable));
                salesQuotationTableMarkup = salesQuotationParmSubTable.salesQuotationTable();
            }

            if (!salesQuotationTableMarkup)
            {
                continue;
            }

            this.postMarkupOnJour(salesQuotationTableMarkup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    protected void postTax(boolean post)
    {
        salesCalcTax = SalesCalcTax::construct(this.journal());
        salesCalcTax.tax(this.tax());
        salesCalcTax.post(ledgerVoucher, post);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the report.
    /// </summary>
    protected void printJournal()
    {
        if (printFormletter && journalList.len() > 0)
        {
            custQuotationConfirmJour.printJournal(this, journalList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for sales quotation confirmation.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::Confirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildSalesQuotationTable</Name>
				<Source><![CDATA[
    QueryRun queryBuildSalesQuotationTable()
    {
        QueryBuildRange             queryBuildRangeStatus;
        QueryBuildRange             queryBuildRangeType;

        QueryRun localQueryRun = new SysQueryRun(queryStr(SalesQuotationUpdate));
        Query query = localQueryRun.query();
        QueryBuildDataSource salesQuotationTabledataSource = query.dataSourceTable(tableNum(SalesQuotationTable));
        salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable,CustAccount));

        QueryBuildDataSource salesQuotationLinedataSource = query.dataSourceTable(tableNum(SalesQuotationLine));
        salesQuotationLinedataSource.addRange(fieldNum(SalesQuotationLine, LineDeliveryType)).value('!='+SysQuery::value(LineDeliveryType::OrderLineWithMultipleDeliveries));

        salesQuotationLinedataSource.addSortField(fieldNum(SalesQuotationLine, QuotationId));
        salesQuotationLinedataSource.addSortField(fieldNum(SalesQuotationLine, LineNum));

        if (callerRecordsPackedMap == conNull())
        {
            salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationId)).value(salesQuotationTable.QuotationId);
            // Quotation type = Sales
            queryBuildRangeType = salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationType));
            queryBuildRangeType.value(enum2str(QuotationType::Sales));
            queryBuildRangeType.status(RangeStatus::Locked);

            QueryBuildRange queryBuildRangeTemplate = query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, TemplateName));
            queryBuildRangeTemplate.value(SysQuery::valueEmptyString());
            queryBuildRangeTemplate.status(RangeStatus::Locked);

            if (!skipQueryStatusFilter)
            {
                queryBuildRangeStatus = salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationStatus));
                
                if (SalesQuotationEditLinesEnumSymbolFlight::instance().isEnabled())
                {
                    queryBuildRangeStatus.value(enum2Symbol(enumNum(SalesQuotationStatus), SalesQuotationStatus::Sent));
                }
                else
                {
                    queryBuildRangeStatus.value(enum2str(SalesQuotationStatus::Sent));
                }

                queryBuildRangeStatus.status(RangeStatus::Locked);
            }
        }
        else
        {
            Map mapSalesQuotationRecord = Map::create(callerRecordsPackedMap);
            MapEnumerator mapSalesQuotationRecordEnumerator = mapSalesQuotationRecord.getEnumerator();

            numberOfRecords = 0;
            while (mapSalesQuotationRecordEnumerator.moveNext())
            {
                SalesQuotationTable localSalesQuotationTable = mapSalesQuotationRecordEnumerator.currentValue();

                if (!skipQueryStatusFilter)
                {
                    queryBuildRangeStatus = salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationStatus));
                    
                    if (SalesQuotationEditLinesEnumSymbolFlight::instance().isEnabled())
                    {
                        queryBuildRangeStatus.value(enum2Symbol(enumNum(SalesQuotationStatus), SalesQuotationStatus::Sent));
                    }
                    else
                    {
                        queryBuildRangeStatus.value(enum2str(SalesQuotationStatus::Sent));
                    }
           
                    queryBuildRangeStatus.status(RangeStatus::Locked);

                    // Quotation type = Sales
                    queryBuildRangeType = salesQuotationTabledataSource.addRange(fieldNum(SalesQuotationTable, QuotationType));
                    queryBuildRangeType.value(enum2str(QuotationType::Sales));
                    queryBuildRangeType.status(RangeStatus::Locked);

                    if (!localSalesQuotationTable.mayConfirmationBeUpdated())
                    {
                        if (localSalesQuotationTable.OpportunityId && this.parmUpdateOpportunity())
                        {
                            query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, OpportunityId)).value(queryValue(localSalesQuotationTable.OpportunityId));
                        }
                        else
                        {
                            query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(queryValue(localSalesQuotationTable.QuotationId));
                        }
                    }
                }

                if (localSalesQuotationTable.mayConfirmationBeUpdated())
                {
                    if (localSalesQuotationTable.OpportunityId && this.parmUpdateOpportunity())
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, OpportunityId)).value(queryValue(localSalesQuotationTable.OpportunityId));
                    }
                    else
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(queryValue(localSalesQuotationTable.QuotationId));
                    }

                    numberOfRecords++;
                }

                query.dataSourceTable(tableNum(InventDim)).addRange(fieldNum(InventDim, InventSiteId));
            }
        }

        return localQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        super();

        if (recordsUpdated > 0)
            info(strFmt("@SYS99552", recordsUpdated,"@SYS8985"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showReasonCode</Name>
				<Source><![CDATA[
    boolean showReasonCode()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    TransTxt transactionLogTxt()
    {
        return "@SYS84505";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    TransactionLogType transactionLogType()
    {
        return TransactionLogType::SalesQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    boolean updateNow()
    {
        this.initJournal();
        this.initMarkup();

        this.displayProgress();

        salesQuotationLine.clear();
        salesQuotationParmLine.clear();

        recordListSalesQuotationParmLine.first(salesQuotationParmLine);
        while (salesQuotationParmLine)
        {
            if (!this.checkDiscardLine())
            {
                salesQuotationLine = this.getSalesQuotationLine(salesQuotationParmLine);

                setPrefix(#PreFixField(salesQuotationLine, QuotationId));

                this.displayProgress();

                if (!salesQuotationLine.CustAccount)
                {
                    throw error(strFmt("@SYS99269",salesQuotationLine.QuotationId));
                }

                #LinePrefix(salesQuotationLine, salesQuotationLine.inventdim().preFixProductDim(EcoResProductDimGroupSetup::newItemId(salesQuotationLine.ItemId)))

                this.calcLine(salesQuotationLine, salesQuotationParmLine);

                // Create sales order if it wasn't created for previous line
                if (custQuotationConfirmJour.SalesId == ''
                    && !salesQuotationTable.isIntegrationOwnerDynamics365Sales())
                {
                    boolean updateOK = this.createSalesTable();
                    if (updateOK)
                    {
                        // Transfer markup to sales order header
                        Markup::copy(false,
                                 salesQuotationTable,
                                 this.parmSalesTableCreated());

                        // Create sales order lines
                        this.createSalesLines(salesQuotationTable, salesTableCreated);
                    }
                }

                // create Journal Line
                this.writeJournalLine();
                this.postMarkupLine();
            }

            if (!recordListSalesQuotationParmLine.next(salesQuotationParmLine))
            {
                break;
            }
        }

        if (!this.checkIfSomethingIsPosted())
        {
            return false;
        }

        progress.setText("@SYS25781");

        if (this.shouldCreateJournal())
        {
            this.writeJournal();
            this.postMarkupTable();
            this.postTax(false);
        }

        if (!salesQuotationTable.isIntegrationOwnerDynamics365Sales())
        {
            salesTableCreated.reread();
            salesTableCreated.calcEstimateForced();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// To create journal.
    /// </summary>
    /// <returns>True to create journal.</returns>
    protected boolean shouldCreateJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournal</Name>
				<Source><![CDATA[
    protected void writeJournal()
    {
        if (lineDeliveryName || lineDeliveryPostalAddress)
        {
            custQuotationConfirmJour.DeliveryPostalAddress     = lineDeliveryPostalAddress;
            custQuotationConfirmJour.DeliveryName              = lineDeliveryName;
        }

        custQuotationConfirmJour.SalesBalance      = salesQuotationTotals.totalBalance();
        custQuotationConfirmJour.CostValue         = salesQuotationTotals.totalCostValue();
        custQuotationConfirmJour.EndDisc           = salesQuotationTotals.totalEndDisc();
        custQuotationConfirmJour.SumLineDisc       = salesQuotationTotals.totalLineDisc();
        custQuotationConfirmJour.SumMarkup         = salesQuotationTotals.totalMarkup();
        custQuotationConfirmJour.SumTax            = salesQuotationTotals.totalTaxAmount();
        custQuotationConfirmJour.RoundOff          = salesQuotationTotals.totalRoundOff();

        custQuotationConfirmJour.RespiteDate       = salesQuotationParmUpdate.RespiteDate ? salesQuotationParmUpdate.RespiteDate
                                                                                   : salesQuotationTable.QuotationExpiryDate;
        custQuotationConfirmJour.QuotationAmount   = salesQuotationTotals.totalAmount();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            custQuotationConfirmJour.QuotationAmount   = salesQuotationTotals.totalAmountGTE();
        }
        // </GTE>

        custQuotationConfirmJour.insert();

        Docu::copy(salesQuotationTable, custQuotationConfirmJour);

        journalList.ins(custQuotationConfirmJour);

        this.writeTmpTaxWorkTrans(custQuotationConfirmJour.RecId);
        journalTmpTaxWorkTrans.copyFromTax(
            this.tax(),
            custQuotationConfirmJour.RecId,
            custQuotationConfirmJour.TableId);

        this.writeJournalSalesLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalLine</Name>
				<Source><![CDATA[
    protected void writeJournalLine()
    {
        Label   label = new Label(custQuotationConfirmJour.LanguageId);
        SalesQuotationTable lineSalesQuotationTable = salesQuotationLine.salesQuotationTable();

        super();

        custQuotationConfirmTrans.initFromSalesQuotationLine(salesQuotationLine);
        custQuotationConfirmTrans.setLinenum(sumByLineNum);
        sumByLineNum++;

        custQuotationConfirmTrans.SalesId               = custQuotationConfirmJour.SalesId;
        custQuotationConfirmTrans.QuotationConfirmId    = custQuotationConfirmJour.QuotationConfirmId;
        custQuotationConfirmTrans.QuotationDate         = custQuotationConfirmJour.QuotationDate;
        custQuotationConfirmTrans.ProjTransType         = QuotationProjTransType::Item;
        custQuotationConfirmTrans.Qty                   = updateNow;
        custQuotationConfirmTrans.InventQty             = updateNowInvent;
        custQuotationConfirmTrans.PdsCWQty              = updateCWNow;
        custQuotationConfirmTrans.LineAmount            = lineValue;
        custQuotationConfirmTrans.LineAmountTax         = lineValueInclTax - lineValue;

        custQuotationConfirmTrans.TaxWriteCode          = this.tax().taxWriteCode();

        custQuotationConfirmTrans.LineHeader = label.extractString(literalStr("@SYS84505"))    + ' ' + salesQuotationLine.QuotationId                   + ' '
                                      + label.extractString(literalStr("@SYS24704")) + ' ' + lineSalesQuotationTable.CustAccount  + ' '
                                      + label.extractString(literalStr("@SYS7924")) + ' ' + salesQuotationLine.deliveryAddress().Address                + ' '
                                      + (lineSalesQuotationTable.CustPurchaseOrder ? (label.extractString(literalStr("@SYS9452")) + ' ' + lineSalesQuotationTable.CustPurchaseOrder + ' ') : '')
                                      + custQuotationConfirmTrans.LineHeader;

        custQuotationConfirmTrans.LineAmountMST     = custQuotationConfirmJour.amountMST(custQuotationConfirmTrans.LineAmount);
        custQuotationConfirmTrans.LineAmountTaxMST  = custQuotationConfirmJour.amountMST(custQuotationConfirmTrans.LineAmountTax);

        if (InventReportDimHistory::canCreateHistory(custQuotationConfirmTrans))
        {
            InventReportDimHistory::addFromCustQuotationConfirmTrans(custQuotationConfirmTrans);
        }
        custQuotationConfirmTrans.insert();

        Docu::copy(salesQuotationLine, custQuotationConfirmTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalSalesLink</Name>
				<Source><![CDATA[
    protected void writeJournalSalesLink()
    {
        SalesQuotationParmLine              localSalesQuotationParmLine;
        CustQuotationConfirmSalesLink       custQuotationConfirmSalesLink;
        CustQuotationConfirmSalesLink       custQuotationConfirmSalesLinkRef;

        ttsBegin;

        while select localSalesQuotationParmLine
            index hint ParmIdQuotationIdIdx
            where localSalesQuotationParmLine.ParmId        == salesQuotationParmTable.ParmId
               && localSalesQuotationParmLine.QuotationId   == salesQuotationTable.QuotationId
        {
            custQuotationConfirmSalesLink.clear();
            custQuotationConfirmSalesLink.initFromSalesQuotationParmLine  (localSalesQuotationParmLine);
            custQuotationConfirmSalesLink.initFromSalesQuotationTable     (SalesQuotationTable::find(localSalesQuotationParmLine.OrigQuotationId));
            custQuotationConfirmSalesLink.initFromCustQuotationConfirmJour(custQuotationConfirmJour);

            // exist() can not be used - OrigSalesId is <blank>
            select firstonly RecId
                from custQuotationConfirmSalesLinkRef
                where custQuotationConfirmSalesLinkRef.QuotationConfirmId   == custQuotationConfirmSalesLink.QuotationConfirmId    &&
                      custQuotationConfirmSalesLinkRef.QuotationDate        == custQuotationConfirmSalesLink.QuotationDate  &&
                      custQuotationConfirmSalesLinkRef.OrigSalesId          == custQuotationConfirmSalesLink.OrigSalesId;
            if (!custQuotationConfirmSalesLinkRef.RecId)
            {
                custQuotationConfirmSalesLink.insert();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    [SysObsolete('The method has been deprecated, use TmpTaxWorkTrans.copyFromTax method instead.', false, 20\7\2020)]
    void writeTmpTaxWorkTrans(RecId headingRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@SYS84615";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailSalesLine</Name>
				<Source><![CDATA[
    private void updateRetailSalesLine(SalesQuotationLine _quoteLine, SalesLineRefRecId _salesLineRecId)
    {
        SalesQuotationEditLinesForm_Sales_Confir::updateRetailSalesLineFromQuotationLine(_quoteLine, _salesLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailSalesLineFromQuotationLine</Name>
				<Source><![CDATA[
    internal static void updateRetailSalesLineFromQuotationLine(SalesQuotationLine _quoteLine, SalesLineRefRecId _salesLineRecId)
    {
        RetailSalesQuotationLine retailQuoteLine = RetailSalesQuotationLine::findBySalesQuotationLine(_quoteLine.RecId);

        RetailSalesLine retailSalesLine = retailSalesLine::findBySalesLine(_salesLineRecId, true);

        if (!retailSalesLine)
        {
            retailSalesLine.SalesLine = _salesLineRecId;
        }

        retailSalesLine.LineManualDiscountAmount = retailQuoteLine.LineManualDiscountAmount;
        retailSalesLine.LineManualDiscountPercentage = retailQuoteLine.LineManualDiscountPercentage;
        retailSalesLine.PeriodicDiscount = retailQuoteLine.PeriodicDiscount;
        retailSalesLine.PeriodicPercentageDiscount = retailQuoteLine.PeriodicPercentageDiscount;
        retailSalesLine.LineDscAmount = retailQuoteLine.LineDscAmount;
        retailSalesLine.LinePercentageDiscount = retailQuoteLine.LinePercentageDiscount;
        retailSalesLine.TotalDiscount = retailQuoteLine.TotalDiscount;
        retailSalesLine.TotalPctDiscount = retailQuoteLine.TotalPctDiscount;
        retailSalesLine.Catalog = retailQuoteLine.Catalog;
        retailSalesLine.IsPriceOverridden = retailQuoteLine.IsPriceOverridden;
        retailSalesLine.OriginalPrice = retailQuoteLine.OriginalPrice;
        retailSalesLine.PriceOverrideReasonCode = retailQuoteLine.PriceOverrideReasonCode;
        // When converting a sales quote to a sales order, lock the price of the sales order lines.
        if (RetailPricingCustomizableFeatureToggle::isPreventUnintendedRecalculationEnabled())
        {
            retailSalesLine.IsPriceLocked = NoYes::Yes;
        }
        retailSalesLine.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    private void transitDocument()
    {
        CustQuotationConfirmTrans       custQuotationConfirmTransLoc;
        SalesQuotationParmLine          salesQuotationParmLineLoc;
        TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();

        transitDocManager.transit(salesQuotationParmTable, custQuotationConfirmJour);

        while select custQuotationConfirmTransLoc
                where custQuotationConfirmTransLoc.SalesId                  == custQuotationConfirmJour.SalesId
                    && custQuotationConfirmTransLoc.QuotationConfirmId      == custQuotationConfirmJour.QuotationConfirmId
                    && custQuotationConfirmTransLoc.QuotationDate           == custQuotationConfirmJour.QuotationDate
                join salesQuotationParmLineLoc
                    where salesQuotationParmLineLoc.InventTransId        == custQuotationConfirmTransLoc.InventTransId
                        && salesQuotationParmLineLoc.ParmId              == salesQuotationParmTable.ParmId
                        && salesQuotationParmLineLoc.TableRefId          == salesQuotationParmTable.TableRefId
                        && salesQuotationParmLineLoc.QuotationId         == salesQuotationParmTable.QuotationId
        {
            transitDocManager.transit(salesQuotationParmLineLoc, custQuotationConfirmTransLoc, custQuotationConfirmJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCreateISalesQuotation2Sales_delegate</Name>
				<Source><![CDATA[
    delegate void kittingCreateISalesQuotation2Sales_delegate(EventHandlerResult _resultValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCreateISalesQuotation2Sales</Name>
				<Source><![CDATA[
    protected KittingISalesQuotation2Sales kittingCreateISalesQuotation2Sales()
    {
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            EventHandlerResult resultValue = new EventHandlerResult();
            this.kittingCreateISalesQuotation2Sales_delegate(resultValue);
            return resultValue.hasResult() ? resultValue.result() as KittingISalesQuotation2Sales : null;
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateRetailSalesLineAndDiscountLine</Name>
				<Source><![CDATA[
    internal protected boolean shouldUpdateRetailSalesLineAndDiscountLine(SalesQuotationTable _salesQuotationTable)
    {
        return _salesQuotationTable.retailSalesQuotationTable().RetailChannel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>