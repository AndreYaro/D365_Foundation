<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookTransCalc_Sales_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class BookTransCalc_Sales_RU extends BookTransCalc_RU
{
    TmpSalesBookVATProcessLogTransOper_RU   tmpProcessLogTransOper;
    TransDate                               closingDate;
    RecordSortedList                        factureList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendGtd</Name>
				<Source><![CDATA[
    protected CountryGTD_RU appendGtd(CustTrans _custTrans)
    {
        FactureTrans_RU     factureTrans;
        CountryGTD_RU       countryGTD;
        Integer             maxLen = new DictField(tableNum(TmpSalesBookVATProcessLogTrans_RU), fieldNum(TmpSalesBookVATProcessLogTrans_RU, CountryGTD)).stringLen();

        const str comma = ', ';

        while select CountryRegionName, InventGTDId from factureTrans
            group by CountryRegionName, InventGTDId
            where factureTrans.FactureId   == factureJour.FactureId &&
                  factureTrans.Module      == factureJour.Module    &&
                  factureTrans.InvoiceDate == _custTrans.TransDate  &&
                  factureTrans.InvoiceId   == _custTrans.Invoice    &&
                  factureTrans.InventGTDId
        {
            if (countryGTD)
            {
                countryGTD += comma;
            }

            countryGTD += strFmt("@SYS76785", factureTrans.InventGTDId, factureTrans.CountryRegionName);

            if (strLen(countryGTD) >= maxLen)
            {
                break;
            }
        }

        return countryGTD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrepaymentStorno</Name>
				<Source><![CDATA[
    protected boolean isPrepaymentStorno()
    {
        return super() && factureJour.Module == FactureModule_RU::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosingDate</Name>
				<Source><![CDATA[
    protected TransDate parmClosingDate(TransDate _closingDate = closingDate)
    {
        closingDate = _closingDate;
        return closingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureList</Name>
				<Source><![CDATA[
    public RecordSortedList parmFactureList(RecordSortedList _factureList = factureList)
    {
        factureList = _factureList;
        return factureList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessLogTransOper</Name>
				<Source><![CDATA[
    public TmpSalesBookVATProcessLogTransOper_RU parmProcessLogTransOper(TmpSalesBookVATProcessLogTransOper_RU _processLogTransOper = tmpProcessLogTransOper)
    {
        tmpProcessLogTransOper = _processLogTransOper;
        return tmpProcessLogTransOper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAmountAdjustment</Name>
				<Source><![CDATA[
    protected void processAmountAdjustment()
    {
        CustTrans                   custPayment;
        CustVendTransPostingLog_RU  postingLog;
        BookStructVATAmounts_RU     amounts;
        Map                         mapFactureAmounts;
        Map                         mapMapSettledAmounts;
        MapEnumerator               mapEnumerator;
        NoYes                       reverseTrans;
        TransDate                   settlementDate;
        FactureId_RU                factureId;
        FactureDate_RU              factureDate;
        SalesPurchBookTransType_RU  salesPurchBookTransType;
        SalesBookTrans_RU           salesBookTrans;
        FactureJour_RU              factureJourOrig;
        MapEnumerator               enumerator;

        select firstonly postingLog
            where postingLog.RecId == factureJour.PostingLogRecId;

        if (! postingLog)
        {
            return;
        }

        factureId   = factureJour.FactureId;
        factureDate = factureJour.FactureDate;

        enumerator = FactureJour_RU::factureAmountAdjustments(factureJour, factureList, fromDate, true).getEnumerator();

        while (enumerator.moveNext())
        {
            factureJourOrig = FactureJour_RU::find(enumerator.currentKey(), factureJour.Module);

            if (factureJourOrig)
            {
                factureJour.FactureId            = factureJourOrig.FactureId;
                factureJour.FactureDate          = factureJourOrig.FactureDate;
                factureJour.FactureExternalId    = factureJourOrig.FactureExternalId;
                factureJour.FactureDate_External = factureJourOrig.FactureDate_External;
                factureJour.vatOnPayment         = factureJourOrig.vatOnPayment;
                factureJour.RecId                = factureJourOrig.RecId;
            }

            amounts = new BookStructVATAmounts_RU();

            mapFactureAmounts = Map::create(enumerator.currentValue());

            mapEnumerator = mapFactureAmounts.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                amounts.addSmallAmounts2(mapEnumerator.currentKey(), BookStructSmallVATAmounts_RU::create(mapEnumerator.currentValue()));
            }

            mapMapSettledAmounts = new Map(Types::Container, Types::Container);

            mapMapSettledAmounts.insert([postingLog.TransDate,
                                        0,
                                        postingLog.TransRecId,
                                        postingLog.OffSetRecId,
                                        0,
                                        NoYes::No,
                                        postingLog.TransDate,
                                        postingLog.TransCompany,
                                        postingLog.OffsetCompany],
                                        amounts.pack());

            if (postingLog.Reversed && factureJour.ReverseDate)
            {
                amounts.reverseAmounts();
                mapMapSettledAmounts.insert([factureJour.ReverseDate,
                                            0,
                                            postingLog.TransRecId,
                                            postingLog.OffSetRecId,
                                            0,
                                            NoYes::Yes,
                                            postingLog.TransDate,
                                            postingLog.TransCompany,
                                            postingLog.OffsetCompany],
                                            amounts.pack());
            }

            salesPurchBookTransType = SalesPurchBookTransType_RU::SumDiff;

            mapEnumerator = this.reduceSettlementMap_Adj(mapMapSettledAmounts).getEnumerator();

            factureJour.FactureDate = factureDate;

            while (mapEnumerator.moveNext())
            {
                amounts         = BookStructVATAmounts_RU::create(mapEnumerator.currentValue());
                settlementDate  = conPeek(mapEnumerator.currentKey(), 1);
                reverseTrans    = conPeek(mapEnumerator.currentKey(), 6);

                select sum(AmountInclVAT),
                       sum(AmountLiableToVAT20),
                       sum(AmountLiableToVAT10),
                       sum(AmountLiableToVAT0),
                       sum(AmountNotLiableToVAT),
                       sum(TaxAmountVAT20),
                       sum(TaxAmountVAT10) from salesBookTrans
                    where salesBookTrans.FactureId           == factureJour.FactureId &&
                          salesBookTrans.CorrectingFactureId == factureId             &&
                          salesBookTrans.SettlementDate      == settlementDate        &&
                          salesBookTrans.ReverseTrans        == reverseTrans          &&
                          salesBookTrans.TransType           == salesPurchBookTransType;

                amounts.subAmounts(salesBookTrans.AmountInclVAT,
                                   salesBookTrans.AmountLiableToVAT20,
                                   salesBookTrans.AmountLiableToVAT10,
                                   salesBookTrans.AmountLiableToVAT0,
                                   salesBookTrans.AmountNotLiableToVAT,
                                   salesBookTrans.TaxAmountVAT20,
                                   salesBookTrans.TaxAmountVAT10);

                if (amounts.amountInclVAT())
                {
                    custPayment = CustTrans::findByCompany(postingLog.OffsetCompany, postingLog.OffSetRecId);

                    salesPurchBookDataMap.clear();
                    salesPurchBookDataMap.FactureID            = factureJour.FactureId;
                    salesPurchBookDataMap.FactureExternalId    = factureJour.FactureExternalId;
                    salesPurchBookDataMap.FactureJour_RU       = factureJour.RecId;
                    salesPurchBookDataMap.CorrectingFactureId  = factureId;
                    salesPurchBookDataMap.AccountNum           = factureJour.CustVendInvoiceAccount;
                    salesPurchBookDataMap.AccountName          = this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount);

                    salesPurchBookDataMap.FactureDate          = factureJour.FactureDate;
                    salesPurchBookDataMap.FactureDate_External = factureJour.FactureDate_External ? factureJour.FactureDate_External : factureJour.FactureDate;
                    salesPurchBookDataMap.PaymentDate          = custPayment.TransDate;
                    salesPurchBookDataMap.SettlementDate       = settlementDate;

                    salesPurchBookDataMap.AmountInclVAT        = amounts.amountInclVAT();
                    salesPurchBookDataMap.AmountLiableToVAT20  = amounts.amountLiableToVAT20();
                    salesPurchBookDataMap.AmountLiableToVAT10  = amounts.amountLiableToVAT10();
                    salesPurchBookDataMap.AmountLiableToVAT0   = amounts.amountLiableToVAT0();
                    salesPurchBookDataMap.AmountNotLiableToVAT = amounts.amountNotLiableToVAT();
                    salesPurchBookDataMap.TaxAmountVAT20       = amounts.taxAmountVAT20();
                    salesPurchBookDataMap.TaxAmountVAT10       = amounts.taxAmountVAT10();

                    salesPurchBookDataMap.TransType            = salesPurchBookTransType;
                    salesPurchBookDataMap.PaymentRecIdRef      = custPayment.RecId;
                    salesPurchBookDataMap.PaymentCompany       = postingLog.OffsetCompany;
                    salesPurchBookDataMap.LineNum              = lineNum;

                    if (factureJour.ReverseDate)
                    {
                        salesPurchBookDataMap.Reversed    = reverseTrans;
                        salesPurchBookDataMap.ReverseDate = reverseTrans ? factureJour.FactureDate : factureJour.ReverseDate;
                    }

                    if (toDate >= #BookCorrectionDate)
                    {
                        salesPurchBookDataMap.CorrectedFactureExternalId = factureJourOrig.CorrectedFactureExternalId;
                        salesPurchBookDataMap.CorrectedFactureDate       = factureJourOrig.CorrectedFactureDate;

                        if (salesPurchBookDataMap.Reversed)
                        {
                            salesPurchBookDataMap.CorrectedFactureExternalId = salesPurchBookDataMap.FactureExternalId;
                            salesPurchBookDataMap.CorrectedFactureDate       = salesPurchBookDataMap.FactureDate_External;
                            if (salesPurchBookDataMap.ReverseDate)
                            {
                                salesPurchBookDataMap.CorrectedSalesPurchBookTable_RU =
                                    SalesBookTable_RU::findFirstByClosingDate(salesPurchBookDataMap.ReverseDate).RecId;
                            }
                        }
                    }

                    salesPurchBookDataMap.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAmountDiff</Name>
				<Source><![CDATA[
    protected void processAmountDiff()
    {
        FactureTrans_RU             factureTrans;
        CustTrans                   custPayment;
        CustVendTransPostingLog_RU  postingLog;
        BookStructVATAmounts_RU     amounts;
        Map                         mapMapSettledAmounts = new Map(Types::Container, Types::Container);
        MapEnumerator               mapEnumerator;
        NoYes                       reverseTrans;
        TransDate                   settlementDate;
        SalesPurchBookTransType_RU  salesPurchBookTransType;

        select firstonly postingLog
            where postingLog.RecId == factureJour.PostingLogRecId;

        if (! postingLog)
        {
            return;
        }

        amounts = new BookStructVATAmounts_RU();

        while select sum(LineAmountMST), sum(TaxAmountMST), sum(vatAmountMST) from factureTrans
            group by TaxCode
            where factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module    == factureJour.Module
        {
            amounts.addSmallAmounts(factureTrans.TaxCode,
                                    factureTrans.LineAmountMST + factureTrans.TaxAmountMST,
                                    factureTrans.LineAmountMST + factureTrans.TaxAmountMST - factureTrans.vatAmountMST,
                                    factureTrans.vatAmountMST);
        }

        mapMapSettledAmounts.insert([postingLog.TransDate,
                                    0,
                                    postingLog.TransRecId,
                                    postingLog.OffSetRecId,
                                    0,
                                    NoYes::No,
                                    postingLog.TransDate,
                                    postingLog.TransCompany,
                                    postingLog.OffsetCompany],
                                    amounts.pack());
        if (postingLog.Reversed && factureJour.ReverseDate)
        {
            amounts.reverseAmounts();
            mapMapSettledAmounts.insert([factureJour.ReverseDate,
                                        0,
                                        postingLog.TransRecId,
                                        postingLog.OffSetRecId,
                                        0,
                                        NoYes::Yes,
                                        postingLog.TransDate,
                                        postingLog.TransCompany,
                                        postingLog.OffsetCompany],
                                        amounts.pack());
        }

        switch (factureJour.FactureType)
        {
            case FactureType_RU::AmoutDifference :
                salesPurchBookTransType = SalesPurchBookTransType_RU::SumDiff;
                break;

            case FactureType_RU::ExchAdj :
                salesPurchBookTransType = SalesPurchBookTransType_RU::ExchAdj;
                break;

            case FactureType_RU::AdvanceAdjustment :
                salesPurchBookTransType = SalesPurchBookTransType_RU::AdvanceAdjustment;
                break;

            case FactureType_RU::VATAdjustment :
                salesPurchBookTransType = SalesPurchBookTransType_RU::VATAdjustment;
                break;
        }

        mapEnumerator = this.reduceSettlementMap(mapMapSettledAmounts).getEnumerator();
        while (mapEnumerator.moveNext())
        {
            amounts = BookStructVATAmounts_RU::create(mapEnumerator.currentValue());
            if (amounts.amountInclVAT())
            {
                settlementDate  = conPeek(mapEnumerator.currentKey(), 1);
                reverseTrans    = conPeek(mapEnumerator.currentKey(), 6);
                custPayment     = CustTrans::findByCompany(postingLog.OffsetCompany, postingLog.OffSetRecId);
                salesPurchBookDataMap.clear();

                salesPurchBookDataMap.FactureID         = factureJour.FactureId;
                salesPurchBookDataMap.FactureExternalId = factureJour.FactureExternalId;
                salesPurchBookDataMap.FactureJour_RU    = factureJour.RecId;
                salesPurchBookDataMap.AccountNum        = factureJour.CustVendInvoiceAccount;
                salesPurchBookDataMap.AccountName       = this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount);

                salesPurchBookDataMap.FactureDate          = factureJour.FactureDate;
                salesPurchBookDataMap.FactureDate_External = factureJour.FactureDate_External ? factureJour.FactureDate_External : factureJour.FactureDate;
                salesPurchBookDataMap.PaymentDate          = custPayment.TransDate;
                salesPurchBookDataMap.SettlementDate       = settlementDate;

                salesPurchBookDataMap.AmountInclVAT        = amounts.amountInclVAT();
                salesPurchBookDataMap.AmountLiableToVAT20  = amounts.amountLiableToVAT20();
                salesPurchBookDataMap.AmountLiableToVAT10  = amounts.amountLiableToVAT10();
                salesPurchBookDataMap.AmountLiableToVAT0   = amounts.amountLiableToVAT0();
                salesPurchBookDataMap.AmountNotLiableToVAT = amounts.amountNotLiableToVAT();
                salesPurchBookDataMap.TaxAmountVAT20       = amounts.taxAmountVAT20();
                salesPurchBookDataMap.TaxAmountVAT10       = amounts.taxAmountVAT10();

                salesPurchBookDataMap.TransType            = salesPurchBookTransType;
                salesPurchBookDataMap.PaymentRecIdRef      = custPayment.RecId;
                salesPurchBookDataMap.RefTableId           = custPayment.TableId;
                salesPurchBookDataMap.PaymentCompany       = postingLog.OffsetCompany;
                salesPurchBookDataMap.LineNum              = lineNum;

                if (factureJour.ReverseDate)
                {
                    salesPurchBookDataMap.Reversed    = reverseTrans;
                    salesPurchBookDataMap.ReverseDate = reverseTrans ? factureJour.FactureDate : factureJour.ReverseDate;
                }

                if (toDate >= #BookCorrectionDate)
                {
                    if (factureJour.FactureType == FactureType_RU::AdvanceAdjustment)
                    {
                        salesPurchBookDataMap.CorrectedFactureExternalId = factureJour.CorrectedFactureExternalId;
                        salesPurchBookDataMap.CorrectedFactureDate       = factureJour.CorrectedFactureDate;
                        if (factureJour.CorrectedPeriod)
                        {
                            salesPurchBookDataMap.CorrectedSalesPurchBookTable_RU =
                                SalesBookTable_RU::findFirstByClosingDate(factureJour.CorrectedPeriod).RecId;
                        }
                    }
                    else if (salesPurchBookDataMap.Reversed)
                    {
                        salesPurchBookDataMap.CorrectedFactureExternalId = salesPurchBookDataMap.FactureExternalId;
                        salesPurchBookDataMap.CorrectedFactureDate       = salesPurchBookDataMap.FactureDate_External;
                        if (salesPurchBookDataMap.ReverseDate)
                        {
                            salesPurchBookDataMap.CorrectedSalesPurchBookTable_RU =
                                SalesBookTable_RU::findFirstByClosingDate(salesPurchBookDataMap.ReverseDate).RecId;
                        }
                    }
                }

                salesPurchBookDataMap.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoice</Name>
				<Source><![CDATA[
    abstract protected void processInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPrepayment</Name>
				<Source><![CDATA[
    protected void processPrepayment()
    {
        FactureTrans_RU             factureTrans;
        CustTrans                   paymentTrans;
        CustTrans_W                 paymentTrans_W;
        BookStructVATAmounts_RU     amounts;

        select firstonly TransDate, DocumentNum, DocumentDate, RecId from paymentTrans
                where paymentTrans.AccountNum            == factureJour.CustVendInvoiceAccount &&
                      paymentTrans.Voucher               == factureJour.Voucher                &&
                      paymentTrans.CurrencyCode          == factureJour.CurrencyCode           &&
                      paymentTrans.Prepayment            == NoYes::Yes
            exists join paymentTrans_W
                where paymentTrans_W.CustTrans           == paymentTrans.RecId                 &&
                      paymentTrans_W.PrepaymentFactureId_W == factureJour.FactureId;

        amounts = new BookStructVATAmounts_RU();

        while select sum(LineAmountMST), sum(TaxAmountMST), sum(vatAmountMST) from factureTrans
            group by TaxCode
            where factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module    == factureJour.Module
        {
            amounts.addSmallAmounts(factureTrans.TaxCode,
                                    factureTrans.LineAmountMST + factureTrans.TaxAmountMST,
                                    factureTrans.LineAmountMST + factureTrans.TaxAmountMST - factureTrans.vatAmountMST,
                                    factureTrans.vatAmountMST);
        }

        if (amounts.amountInclVAT() || factureJour.HeaderRevision)
        {
            salesPurchBookDataMap.clear();

            salesPurchBookDataMap.FactureID         = factureJour.FactureId;
            salesPurchBookDataMap.FactureExternalId = factureJour.FactureExternalId;
            salesPurchBookDataMap.FactureJour_RU    = factureJour.RecId;
            salesPurchBookDataMap.AccountNum        = factureJour.CustVendInvoiceAccount;
            salesPurchBookDataMap.AccountName       = this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount);

            salesPurchBookDataMap.FactureDate          = factureJour.FactureDate;
            salesPurchBookDataMap.FactureDate_External = factureJour.FactureDate_External ? factureJour.FactureDate_External : factureJour.FactureDate;
            salesPurchBookDataMap.PaymentDate          = paymentTrans.DocumentDate ? paymentTrans.DocumentDate : paymentTrans.TransDate;
            salesPurchBookDataMap.PaymDocumentNum      = paymentTrans.DocumentNum;
            salesPurchBookDataMap.SettlementDate       = dateNull();

            salesPurchBookDataMap.AmountInclVAT        = amounts.amountInclVAT();
            salesPurchBookDataMap.AmountLiableToVAT20  = amounts.amountLiableToVAT20();
            salesPurchBookDataMap.AmountLiableToVAT10  = amounts.amountLiableToVAT10();
            salesPurchBookDataMap.AmountLiableToVAT0   = amounts.amountLiableToVAT0();
            salesPurchBookDataMap.AmountNotLiableToVAT = amounts.amountNotLiableToVAT();
            salesPurchBookDataMap.TaxAmountVAT20       = amounts.taxAmountVAT20();
            salesPurchBookDataMap.TaxAmountVAT10       = amounts.taxAmountVAT10();

            salesPurchBookDataMap.TransType            = SalesPurchBookTransType_RU::Prepayment;
            salesPurchBookDataMap.PaymentRecIdRef      = paymentTrans.RecId;
            salesPurchBookDataMap.RefTableId           = paymentTrans.TableId;
            salesPurchBookDataMap.PaymentCompany       = paymentTrans.company();
            salesPurchBookDataMap.LineNum              = lineNum;

            salesPurchBookDataMap.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPrepaymentStorno</Name>
				<Source><![CDATA[
    protected void processPrepaymentStorno()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxCorrection</Name>
				<Source><![CDATA[
    protected void processTaxCorrection()
    {
        FactureTrans_RU             factureTrans;
        BookStructVATAmounts_RU     amounts;

        amounts = new BookStructVATAmounts_RU();

        while select sum(LineAmountMST), sum(TaxAmountMST), sum(vatAmountMST) from factureTrans
            group by TaxCode
            where factureTrans.FactureId == factureJour.FactureId &&
                  factureTrans.Module    == factureJour.Module
        {
            amounts.addSmallAmounts(factureTrans.TaxCode,
                                    factureTrans.LineAmountMST + factureTrans.TaxAmountMST,
                                    factureTrans.LineAmountMST + factureTrans.TaxAmountMST - factureTrans.vatAmountMST,
                                    factureTrans.vatAmountMST);
        }

        if (amounts.amountInclVAT() || factureJour.HeaderRevision)
        {
            salesPurchBookDataMap.clear();

            salesPurchBookDataMap.FactureID         = factureJour.FactureId;
            salesPurchBookDataMap.FactureExternalId = factureJour.FactureExternalId;
            salesPurchBookDataMap.FactureJour_RU    = factureJour.RecId;
            salesPurchBookDataMap.AccountNum        = factureJour.CustVendInvoiceAccount;
            salesPurchBookDataMap.AccountName       = this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount);

            salesPurchBookDataMap.FactureDate          = factureJour.FactureDate;
            salesPurchBookDataMap.FactureDate_External = factureJour.FactureDate_External ? factureJour.FactureDate_External : factureJour.FactureDate;

            if (factureJour.Module == FactureModule_RU::TaxCorrectionSales_Vend &&
                VendTable::find(factureJour.CustVendInvoiceAccount).VATTaxAgent_RU)
            {
                salesPurchBookDataMap.PaymentDate          = factureJour.FactureDate;
            }
            else
            {
                salesPurchBookDataMap.PaymentDate          = dateNull();
            }

            salesPurchBookDataMap.SettlementDate       = factureJour.FactureDate;

            salesPurchBookDataMap.AmountInclVAT        = amounts.amountInclVAT();
            salesPurchBookDataMap.AmountLiableToVAT20  = amounts.amountLiableToVAT20();
            salesPurchBookDataMap.AmountLiableToVAT10  = amounts.amountLiableToVAT10();
            salesPurchBookDataMap.AmountLiableToVAT0   = amounts.amountLiableToVAT0();
            salesPurchBookDataMap.AmountNotLiableToVAT = amounts.amountNotLiableToVAT();
            salesPurchBookDataMap.TaxAmountVAT20       = amounts.taxAmountVAT20();
            salesPurchBookDataMap.TaxAmountVAT10       = amounts.taxAmountVAT10();

            salesPurchBookDataMap.TransType            = SalesPurchBookTransType_RU::TaxCorrection;

            salesPurchBookDataMap.PaymentRecIdRef      = 0;
            salesPurchBookDataMap.RefTableId           = 0;
            salesPurchBookDataMap.LineNum              = lineNum;

            if (toDate >= #BookCorrectionDate)
            {
                salesPurchBookDataMap.CorrectedFactureExternalId = factureJour.CorrectedFactureExternalId;
                salesPurchBookDataMap.CorrectedFactureDate       = factureJour.CorrectedFactureDate;
                if (factureJour.CorrectedPeriod)
                {
                    salesPurchBookDataMap.CorrectedSalesPurchBookTable_RU =
                        SalesBookTable_RU::findFirstByClosingDate(factureJour.CorrectedPeriod).RecId;
                }
            }
            salesPurchBookDataMap.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceSettlementMap</Name>
				<Source><![CDATA[
    protected Map reduceSettlementMap(Map _settlementMap)
    {
        Map           reducedMap = new Map(Types::Container, _settlementMap.valueType());
        TransDate     settlementDate,reverseDate;
        RecId         settlementRecId,transRecId,reverseTransRecId,paymentTransRecId;
        MapEnumerator mapEnumerator = _settlementMap.getEnumerator();
        NoYes         reverseTrans;
        CompanyId     transCompany;
        CompanyId     paymentCompany;

        while (mapEnumerator.moveNext())
        {
            [settlementDate,settlementRecId,transRecId,paymentTransRecId,reverseTransRecId,reverseTrans,reverseDate,transCompany,paymentCompany] = mapEnumerator.currentKey();
            if (this.checkDate(max(settlementDate, factureJour.FactureDate)))
            {
                if (reverseTrans)
                {
                    if (reducedMap.exists([reverseDate,reverseTransRecId,transRecId,paymentTransRecId,settlementRecId,!reverseTrans,reverseDate,transCompany,paymentCompany]))
                    {
                        reducedMap.remove([reverseDate,reverseTransRecId,transRecId,paymentTransRecId,settlementRecId,!reverseTrans,reverseDate,transCompany,paymentCompany]);
                    }
                    else
                    {
                        reducedMap.insert([settlementDate,settlementRecId,transRecId,paymentTransRecId,reverseTransRecId,reverseTrans,reverseDate,transCompany,paymentCompany],mapEnumerator.currentValue());
                    }
                }
                else
                {
                    reducedMap.insert([settlementDate,settlementRecId,transRecId,paymentTransRecId,reverseTransRecId,reverseTrans,reverseDate,transCompany,paymentCompany],mapEnumerator.currentValue());
                }
            }
        }

        return reducedMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceSettlementMap_Adj</Name>
				<Source><![CDATA[
    protected Map reduceSettlementMap_Adj(Map _settlementMap)
    {
        Map           reducedMap    = new Map(Types::Container, _settlementMap.valueType());
        TransDate     settlementDate,reverseDate;
        TransDate     facturePeriodStart, facturePeriodEnd;
        TransDate     settlePeriodStart, settlePeriodEnd;
        TransDate     reversePeriodStart, reversePeriodEnd;
        TransDate     checkDate;
        RecId         settlementRecId,transRecId,reverseTransRecId,paymentTransRecId;
        MapEnumerator mapEnumerator = _settlementMap.getEnumerator();
        NoYes         reverseTrans;
        CompanyId     transCompany;
        CompanyId     paymentCompany;
        boolean       vatOnPayment = factureJour.vatOnPayment || CustParameters::taxation_RU(factureJour.FactureDate) == CustTaxation_RU::OnPayment;

        while (mapEnumerator.moveNext())
        {
            [settlementDate,settlementRecId,transRecId,paymentTransRecId,reverseTransRecId,reverseTrans,reverseDate,transCompany,paymentCompany] = mapEnumerator.currentKey();

            if (!reverseTrans)
            {
                checkDate = vatOnPayment ? max(settlementDate, factureJour.FactureDate) : min(settlementDate, factureJour.FactureDate);
            }
            else
            {
                checkDate = vatOnPayment ? max(reverseDate, factureJour.FactureDate) : min(reverseDate, factureJour.FactureDate);
            }

            [facturePeriodStart, facturePeriodEnd] = BookDataCalc_RU::datePeriodBook(checkDate);

            if (((vatOnPayment && settlementDate <= toDate) || this.checkDate(settlementDate)) && toDate >= facturePeriodEnd)
            {
                if (reverseTrans)
                {
                    if (reducedMap.exists([reverseDate,reverseTransRecId,transRecId,paymentTransRecId,settlementRecId,!reverseTrans,reverseDate,transCompany,paymentCompany]))
                    {
                        reducedMap.remove([reverseDate,reverseTransRecId,transRecId,paymentTransRecId,settlementRecId,!reverseTrans,reverseDate,transCompany,paymentCompany]);
                    }

                    [ settlePeriodStart,  settlePeriodEnd  ] = BookDataCalc_RU::datePeriodBook(reverseDate);
                    [ reversePeriodStart, reversePeriodEnd ] = BookDataCalc_RU::datePeriodBook(settlementDate);

                    if (settlementDate > facturePeriodEnd && reversePeriodEnd > settlePeriodEnd)
                    {
                        reducedMap.insert([settlementDate,settlementRecId,transRecId,paymentTransRecId,reverseTransRecId,reverseTrans,reverseDate,transCompany,paymentCompany],mapEnumerator.currentValue());
                    }
                }
                else
                {
                    reducedMap.insert([settlementDate,settlementRecId,transRecId,paymentTransRecId,reverseTransRecId,reverseTrans,reverseDate,transCompany,paymentCompany],mapEnumerator.currentValue());
                }
            }
        }

        return reducedMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransCalc</Name>
				<Source><![CDATA[
    public static BookTransCalc_Sales_RU newTransCalc(CustTaxation_RU                       _taxation,
                                                      FactureJour_RU                        _factureJour,
                                                      SalesPurchBookDataMap_RU              _salesPurchBookData,
                                                      FromDate                              _fromDate,
                                                      ToDate                                _toDate,
                                                      boolean                               _bookTableMode,
                                                      TransDate                             _closingDate,
                                                      TmpSalesBookVATProcessLogTransOper_RU _tmpProcessLogTransOper = null,
                                                      RecordSortedList                      _factureList            = null,
                                                      boolean                               _fullCheck              = false,
                                                      SalesPurchBookLineNum_RU              _lineNum = 0)

    {
        const boolean exportVATOnPayment = false;

        BookTransCalc_Sales_RU bookTransCalc;

        // customer factures which are directly put to sales book
        if (_bookTableMode)
        {
            if (_factureJour.vatOnPayment || _taxation == CustTaxation_RU::OnPayment)
            {
                bookTransCalc = new BookTransCalc_Sales_OnPayment_RU();
            }
            else
            {
                bookTransCalc = new BookTransCalc_Sales_OnDelivery_RU();
            }
        }
        // export customer factures
        else if (_factureJour.ExportProcessing && _factureJour.ProcessingType != SalesBookFactureProcessingType_RU::None)
        {
            switch (_factureJour.ProcessingType)
            {
                case SalesBookFactureProcessingType_RU::VATZero               :
                case SalesBookFactureProcessingType_RU::VATZeroCorrection     :
                case SalesBookFactureProcessingType_RU::OverdueConfirmation   :
                    if (_factureJour.FactureType == FactureType_RU::Invoice && exportVATOnPayment)
                    {
                        bookTransCalc = new BookTransCalc_Sales_OnPaymentExp_RU();
                    }
                    else
                    {
                        bookTransCalc = new BookTransCalc_Sales_OnDeliveryExp_RU();
                    }
                    break;

                case SalesBookFactureProcessingType_RU::VATStandard           :
                case SalesBookFactureProcessingType_RU::VATStandardCorrection :
                    bookTransCalc = new BookTransCalc_Sales_OnDeliveryExp_RU();
                    break;

                default :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
            bookTransCalc.parmOperationRecId(SalesBookVATProcessParameters_RU::defaultParms(
                                            SalesBookVATProcessLogTrans_RU::factureType2type(_factureJour.ProcessingType)).RecId);
        }
        // factures for vendor
        else
        {
            if (_factureJour.FactureType == FactureType_RU::Prepayment && _factureJour.Module == FactureModule_RU::Vend)
            {
                bookTransCalc = new BookTransCalc_Sales_OnPaymentExp_RU();
                bookTransCalc.parmOperationRecId(SalesBookVATProcessParameters_RU::defaultParms(SalesBookProcessingType_RU::VATRestoration).RecId);
            }
            else
            {
                bookTransCalc = new BookTransCalc_Sales_OnDeliveryExp_RU();
                //for VAT restoring, operation code is dependent on the restored amount type (export/not liable/asset disposal)
                bookTransCalc.parmOperationRecId(0);
            }
        }

        bookTransCalc.parmFactureJour(_factureJour);
        bookTransCalc.parmDataMap(_salesPurchBookData);
        bookTransCalc.parmProcessLogTransOper(_tmpProcessLogTransOper);
        bookTransCalc.parmFromDate(_fromDate);
        bookTransCalc.parmToDate(_toDate);
        bookTransCalc.parmFactureList(_factureList);
        bookTransCalc.parmClosingDate(_closingDate);
        bookTransCalc.parmFullCheck(_fullCheck);
        bookTransCalc.parmLineNum(_lineNum);

        return bookTransCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>