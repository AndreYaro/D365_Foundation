<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCreate_TaxRemainGoods_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalCreate_TaxRemainGoods_RU extends LedgerJournalCreate_Tax25_RU
{
    CurrencyCode    currencyCode;
    ExchRate        exchRate;

    LedgerDimensionDefaultAccount defaultAccount;
    LedgerDimensionDefaultAccount offsetDefaultAccount;

    LineNum         lineNum;
    int             numSection;

    container       sectionTextDebit;
    container       sectionTextCredit;
    #define.Section1(1)
    #define.Section5(5)
    #define.OffsetAccount(9)
    #define.TaxParamPosition(4)
    #AviFiles
    #define.Section(11)
    #define.AccruedTA(5)
    #define.WrittenOffTA(7)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected void createTrans(JournalId _journalNum)
    {
        SysOperationProgress        operationProgress;
        RTax25RegisterJournalTable  journalTable;
        RTax25RegisterJournalTrans  journalTrans;
        RTax25RegisterJournalLink   journalLink;
        RTax25RegisterParameters    registerParameters;
        RTax25RegisterId            registerId;

        AmountCur                   amountCurDebit;
        AmountCur                   amountCurCredit;
        RTax25Query                 query;
        ;

        sectionTextDebit    = ["@GLS113827",
                               "@GLS113828",
                               "@GLS113829",
                               "@GLS113830"];

        sectionTextCredit   = ["@GLS113831",
                               "@GLS113832",
                               "@GLS113833",
                               "@GLS113834"];

        lineNum             = 1;
        registerId          = RTax25RegisterTable::find(RTax25RegisterType::TaxRemainGoods).RegisterId;
        currencyCode        = CompanyInfoHelper::standardCurrency();
        exchRate            = ExchangeRateHelper::exchRate(currencyCode, registerJournalTable.EndDate);

        registerParameters  = RTax25RegisterParameters::find(registerId, #OffsetAccount);
        offsetDefaultAccount = registerParameters.LedgerDimension;

        this.createVoucher(_journalNum);

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption(strFmt("@SYS26868", "@GLS111963", registerJournalTable.EndDate));
        operationProgress.setAnimation(#AviUpdate);

        ttsbegin;

        select firstonly JournalNum, FiscalYear, PeriodType, PeriodNum, EnableCorrective, RecId from journalTable
            order by Version desc
            where journalTable.EndDate == registerJournalTable.EndDate &&
                  journalTable.Accepted != RTax25CorrectionAccepted::Rejected &&
                  journalTable.RegisterJournalType == RTax25RegisterJournalType::ProfitTax;

        if (journalTable.EnableCorrective)
        {
            select journalTrans
                where ! journalTrans.Cancelled                                    &&
                        journalTrans.RegisterId          == registerId
                exists join journalLink
                    where journalLink.TransRecId == journalTrans.RecId &&
                            journalLink.TableRecId == journalTable.RecId;
        }
        else
        {
            select journalTrans
                where journalTrans.JournalNum          == journalTable.JournalNum &&
                        journalTrans.FiscalYear          == journalTable.FiscalYear &&
                        journalTrans.PeriodType          == journalTable.PeriodType &&
                        journalTrans.PeriodNum           == journalTable.PeriodNum  &&
                        ! journalTrans.Cancelled                                    &&
                        journalTrans.RegisterId          == registerId;
        }

        while (journalTrans)
        {
            query = RTax25Query::newParameters(RTax25RegisterType::TaxRemainGoods,
                                               journalTrans,
                                               ! RTax25RegisterTrans::existAny(journalTrans.JournalNum,
                                                                               registerId,
                                                                               journalTrans.PeriodType,
                                                                               journalTrans.PeriodNum,
                                                                               journalTrans.FiscalYear));
            query.createRegQuery(0, -1);
            query.addRangeValue(fieldName2Id(query.getRecord().TableId, 'BlockType'),
                SysQuery::valueNot(ReportBlockType::Header));

            if (query.first())
            {
                do
        {
                    numSection = query.getField(#Section);

            if (numSection == #Section5 ||
                       (numSection == #Section1 && query.getRecord().BlockType == ReportBlockType::Footer) ||
                       (numSection != #Section5 && numSection != #Section1 && query.getRecord().BlockType == ReportBlockType::Body))
            {
                continue;
            }

            registerParameters  = RTax25RegisterParameters::find(registerId, numSection + #TaxParamPosition);
            defaultAccount      = registerParameters.LedgerDimension;

                    amountCurDebit      = CurrencyExchange::round(query.getField(#AccruedTA), currencyCode);
                    amountCurCredit     = CurrencyExchange::round(query.getField(#WrittenOffTA), currencyCode);

            if (amountCurDebit)
            {
                        this.initTrans(_journalNum, query.getRecord().RTax25ProfitTable, amountCurDebit, 0);
            }

            if (amountCurCredit)
            {
                        this.initTrans(_journalNum, query.getRecord().RTax25ProfitTable, 0, amountCurCredit);
                    }
                }
                while (query.next());
            }

            next journalTrans;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    protected void initTrans(
        JournalId      _journalNum,
        RefRecId       _profitTableRecId,
        AmountCur      _amountCurDebit,
        AmountCur      _amountCurCredit)
    {
        #localMacro.amountRange
            '(((\%1 == 0) && (\%2)) || ((\%3 == 0) && (\%4)))'
        #endMacro
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTransTxt   txt = conPeek((_amountCurDebit != 0) ? sectionTextDebit : sectionTextCredit, numSection);
        DimensionDefault        defaultDimension;
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;
        str                     dimensionAttributeName = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute).Name;
        str                     rangeTxt;
        ;

        query = new Query();
        qbds  = query.addDataSource(tableNum(LedgerJournalTrans), literalStr(LedgerJournalTrans));
        qbds.firstOnly(true);
        qbds.update(true);
        qbds.addRange(fieldNum(LedgerJournalTrans, JournalNum)).value(_journalNum);
        qbds.addRange(fieldNum(LedgerJournalTrans, Txt)).value(txt);
        rangeTxt = strFmt(#amountRange, fieldStr(LedgerJournalTrans, AmountCurCredit), !_amountCurCredit, fieldStr(LedgerJournalTrans, AmountCurDebit), !_amountCurDebit);
        qbds.addRange(fieldNum(LedgerJournalTrans, RecId)).value(rangeTxt);

        SysQuery::addDimensionAttributeRange(query,
                                             qbds.name(),
                                             fieldStr(LedgerJournalTrans, LedgerDimension),
                                             DimensionComponent::DimensionAttribute,
                                             RTax25ProfitTable::find(_profitTableRecId).ProfitId,
                                             dimensionAttributeName);
        queryRun = new QueryRun(query);
        queryRun.next();
        ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

        if (ledgerJournalTrans.RecId)
        {
            ledgerJournalTrans.AmountCurCredit      += _amountCurCredit;
            ledgerJournalTrans.AmountCurDebit       += _amountCurDebit;
            ledgerJournalTrans.update();
        }
        else
        {
            ledgerJournalTrans.clear();
            ledgerJournalTrans.LineNum               = lineNum;
            ledgerJournalTrans.JournalNum            = _journalNum;
            ledgerJournalTrans.Voucher               = voucher;
            ledgerJournalTrans.CurrencyCode          = currencyCode;
            ledgerJournalTrans.TransDate             = LedgerFiscalCalendar::findFirstOpenStartDateInYear(CompanyInfoHelper::fiscalCalendarRecId(), registerJournalTable.EndDate);
            ledgerJournalTrans.AccountType           = LedgerJournalACType::Ledger;
            ledgerJournalTrans.OffsetAccountType     = LedgerJournalACType::Ledger;
            ledgerJournalTrans.ExchRate              = exchRate;

            ledgerJournalTrans.AmountCurCredit       = _amountCurCredit;
            ledgerJournalTrans.AmountCurDebit        = _amountCurDebit;

            ledgerJournalTrans.Txt                   = txt;
            defaultDimension                         = RTax25ProfitTable::profitRecId2DefaultDimension(_profitTableRecId);

            ledgerJournalTrans.parmLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(defaultAccount, defaultDimension));
            ledgerJournalTrans.parmOffsetLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(offsetDefaultAccount, defaultDimension));

            ledgerJournalTrans.insert();

            lineNum ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>stornoTxt</Name>
				<Source><![CDATA[
    protected str stornoTxt()
    {
        return "@GLS113835";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>