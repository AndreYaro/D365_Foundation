<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaSubscriptionBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SmaSubscriptionBase extends RunBaseBatch
{
    SysQueryRun                     queryRun;
    Counter                         numOf;
    SMASubscriptionId               subscriptionId;
    Args                            args;
    NoYes                           showInfolog;
    boolean                         showQtx;
    List                            createdList;
    List                            errorList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>action</Name>
				<Source><![CDATA[
    protected abstract void action()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToMessageList</Name>
				<Source><![CDATA[
    public void addToMessageList(str _message, boolean _error = false)
    {
        if (_error)
        {
            errorList.addEnd(_message);
        }
        else
        {
            createdList.addEnd(_message);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSwapBetweenCS</Name>
				<Source><![CDATA[
    public boolean canSwapBetweenCS()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaults</Name>
				<Source><![CDATA[
    void initDefaults(Args _args)
    {
        this.getLast();
        this.parmshowQueryValues(true);
        this.parmArgs(_args);

        this.initQuery();
        this.initFromArgs(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args = this.parmArgs())
    {
        #define.star("*")

        MultiSelectionHelper    multiSelectionHelper;

        QueryBuildRange         qBr;
        ProjTable               projTable;
        ProjGrant               projGrant, projGrantLocal;
        ProjInvoiceTable        projInvoiceTable;
        ProjFundingSource       projFundingSource;

        if (args && args.caller() && args.record())
        {
            multiSelectionHelper = MultiSelectionHelper::createFromCaller(args.caller());

            switch (args.record().TableId)
            {
                case tablenum(SMASubscriptionTable) :
                    multiSelectionHelper.createQueryRanges(this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)), fieldstr(SMASubscriptionTable, SubscriptionId));
                    break;

                case tablenum(SMASubscriptionGroup) :
                    multiSelectionHelper.createQueryRanges(this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionGroup)), fieldstr(SMASubscriptionGroup, GroupId));
                    break;

                case tablenum(ProjInvoiceTable) :
                    multiSelectionHelper.createQueryRanges(this.queryRun().query().dataSourceTable(tablenum(ProjTable)), fieldstr(ProjTable, ProjInvoiceProjId));
                    break;

                case tablenum(ProjCategory) :
                    multiSelectionHelper.createQueryRanges(this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)), fieldstr(SMASubscriptionTable, ProjCategoryId), fieldstr(ProjCategory, CategoryId));
                    break;

                case tablenum(ProjTable) :

                    projTable = multiSelectionHelper.getFirst();
                    while (projTable)
                    {
                        qBr = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).addRange(fieldnum(SMASubscriptionTable, ProjId));
                        qBr.value(projTable.ProjId + #star);
                        projTable = multiSelectionHelper.getNext();
                    }
                    break;

                case tablenum(ProjGrant) :

                    projGrantLocal = multiSelectionHelper.getFirst();
                    while select projTable
                        exists join projInvoiceTable
                            where projInvoiceTable.ProjInvoiceProjId  == projTable.ProjInvoiceProjId
                        exists join projFundingSource
                            where projFundingSource.ContractId == projInvoiceTable.ProjInvoiceProjId
                        exists join projGrant
                            where projGrant.RecId == projGrantLocal.RecId

                    {
                        qBr = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).addRange(fieldnum(SMASubscriptionTable, ProjId));
                        qBr.value(projTable.ProjId + #star);
                    }
                    break;

                default:
                    // "Invalid argument!"
                    throw error("@SYS111577");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNextDates</Name>
				<Source><![CDATA[
    public container initNextDates(ProjPeriodId _projPeriodId, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate       fromdate;
        TransDate       toDate;
        ProjPeriodLine  projPeriodLine = ProjPeriodLine::smaFindNextFromDate(_projPeriodId, _transDate);

        if (!projPeriodLine)
        {
            fromdate    = dateNull();
            toDate      = dateNull();
        }
        else
        {
            fromdate    = projPeriodLine.PeriodFrom;
            toDate      = projPeriodLine.PeriodTo;
        }

        return [fromdate, toDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        this.initQuery();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public void initQuery()
    {
        queryRun = SMASubscriptionTable::getQueryRun();
        queryRun.promptShowSorting(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        createdList = new List(Types::String);
        errorList   = new List(Types::String);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInfoLog</Name>
				<Source><![CDATA[
    public NoYes parmShowInfoLog(NoYes _showInfoLog = showInfoLog)
    {
        showInfoLog = _showInfoLog;

        return showInfoLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmshowQueryValues</Name>
				<Source><![CDATA[
    public NoYes parmshowQueryValues(NoYes _showQtx = showQtx)
    {
        showQtx = _showQtx;

        return showQtx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressSet</Name>
				<Source><![CDATA[
    public void progressSet(Counter _counter)
    {
        Counter counter = _counter;

        counter++;

        progress.setCount(counter);

        progress.setText(this.progressTransText(this.smaSubscriptionId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTransText</Name>
				<Source><![CDATA[
    public str progressTransText(SMASubscriptionId _subscriptionId)
    {
        // Processing Subscription %1
        return strfmt("@SYS84228", _subscriptionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a dialog
    /// box. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it in
    /// the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        SMASubscriptionTable            smaSubscriptionTable;
        Counter                         i;
        FormDataSource                  formDataSource;

        numOf = SysQuery::countLoops(queryRun);

        // Creating Subscriptions
        this.progressInit("@SYS84229", numOf, #AviUpdate);

        try
        {
            ttsbegin;

            while (queryRun.next())
            {
                if (queryRun.changed(tablenum(SMASubscriptionTable)))
                {
                    i++;
                    smaSubscriptionTable  = queryRun.get(tablenum(SMASubscriptionTable));

                    this.smaSubscriptionId(smaSubscriptionTable.SubscriptionId);

                    this.progressSet(i);

                    this.action();
                }
            }

            ttscommit;
        }
        catch (Exception::Error)
        {
            // operation %1 has been aborted due to an error on subscription %2.
            error(strfmt("@SYS84225", SMASubscriptionBase::description(),this.smaSubscriptionId()));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        this.showMessageList();

        if (this.parmArgs() && this.parmArgs().record() && FormDataUtil::getFormDataSource(this.parmArgs().record()))
        {
            formDataSource = FormDataUtil::getFormDataSource(this.parmArgs().record());
            formDataSource.reread();
            formDataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showMessageList</Name>
				<Source><![CDATA[
    protected void showMessageList()
    {
        ListIterator    createdIt   = new ListIterator(createdList);
        ListIterator    errorIt     = new ListIterator(errorList);

        if (!this.parmShowInfoLog())
        {
            return;
        }

        if (!createdList.empty())
        {
            setprefix(SMASubscriptionBase::description());
        }

        while (createdIt.more())
        {
            info(createdIt.value());
            createdIt.next();
        }

        if (!errorList.empty())
        {
            // Error
            setprefix("@SYS8500");
        }

        while (errorIt.more())
        {
            info(errorIt.value());

            errorIt.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    /// be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return showQtx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaSubscriptionId</Name>
				<Source><![CDATA[
    public SMASubscriptionId smaSubscriptionId(SMASubscriptionId _subscriptionId = subscriptionId)
    {
        subscriptionId = _subscriptionId;

        return subscriptionId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>