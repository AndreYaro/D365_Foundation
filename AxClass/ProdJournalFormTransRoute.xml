<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalFormTransRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalFormTransRoute extends ProdJournalFormTrans
{
    ProdJournalRoute    prodJournalRoute;

    FormRealControl     ctrlGridHours;
    FormRealControl     ctrlHours;
    FormRealControl     ctrlProjHours;

    FormRealControl     ctrlGridQtyGood;
    FormRealControl     ctrlQtyGood;
    FormRealControl     ctrlProjQtyGood;

    FormRealControl     ctrlGridQtyError;
    FormRealControl     ctrlQtyError;
    FormRealControl     ctrlProjQtyError;

    FormComboBoxControl ctrlErrorCause;

    FormGroupControl            ctrlProdTableInventDimGroup;
    FormFunctionButtonControl   ctrlInventDimParmFixedMenuButton;

    ProjJournalTransMapForm     projJournalTransMapFormHour;
    ProjJournalTransMapForm     projJournalTransMapFormQuantity;
    ProdJournalRouteProj        prodJournalRouteProjHour;
    FormDataSource              prodJournalRouteProjHour_ds;
    ProdJournalRouteProj        prodJournalRouteProjQuantity;
    FormDataSource              prodJournalRouteProjQuantity_ds;
    ProjSalesPriceCost          salesPrice;

    InventDimCtrl_Frm_Mov       inventDimFormSetupProdTable;

    ProdTable                   prodTable;

    InventDim                   prodTableInventDim;
    FormDataSource              prodTableInventDim_ds;

    PdsCWFormCtrl_ProdJournalRoute  cwFormCtrl;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>openProdRouteJobCurrentForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>ProdRouteJobCurrent</c> form.
    /// </summary>
    /// <param name = "_showJobPage">A boolean value controlling if the job page should be shown.</param>
    /// <returns>An object reference to the form used for linking to the opening form.</returns>
    public ObjectIdent openProdRouteJobCurrentForm(boolean _showJobPage)
    {
        var args = new Args();
        args.name(formstr(ProdRouteJobCurrent));
        args.caller();
        args.record(prodJournalRoute);

        var tmpFormRunRoute = classfactory.formRunClass(args);
    
        tmpFormRunRoute.init();
        Object object = tmpFormRunRoute;
        object.doVisibleJobPage(_showJobPage);

        tmpFormRunRoute.run();
        tmpFormRunRoute.wait();

        return new ObjectIdent(tmpFormRunRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
        super();

        if (cwFormCtrl)
        {
            cwFormCtrl.parmCWValidation().dataSourceActivePost();
            cwFormCtrl.dataSourceActivePost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePost</Name>
				<Source><![CDATA[
    public void datasourceCreatePost()
    {
        super();

        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceCreatePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    void datasourceInitPost(JournalTransMap _journalTrans)
    {
        super(_journalTrans);
        prodJournalRoute  = _journalTrans;

        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceInitPost(_journalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    void datasourceInitValuePost()
    {
        super();

        if (prodJournalRoute.isProjMethodConsumed())
        {
            prodJournalRouteProjHour.ProjTransDate = prodJournalRoute.TransDate;
            prodJournalRouteProjQuantity.ProjTransDate = prodJournalRoute.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePre</Name>
				<Source><![CDATA[
    void datasourceInitValuePre()
    {
        super();

        if (journalTableData)
            journalTransData.initFromJournalTable();

        if (prodJournalRoute.isProjMethodConsumed())
        {
            ProjTable projTable = prodJournalRoute.projTable();

            prodJournalRouteProjHour.ProjId = projTable.ProjId;
            this.projJournalTransMapFormHour().initFromProjTable(projTable);

            prodJournalRouteProjQuantity.ProjId = projTable.ProjId;
            this.projJournalTransMapFormQuantity().initFromProjTable(projTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceValidateWritePost</Name>
				<Source><![CDATA[
    boolean datasourceValidateWritePost(boolean _ret)
    {
        boolean ret = super(_ret);

        if (prodJournalRoute.isProjMethodConsumed())
        {
            ret = ret && this.projJournalTransMapFormHour().validateWritePost();
            ret = ret && this.projJournalTransMapFormQuantity().validateWritePost();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePost</Name>
				<Source><![CDATA[
    void datasourceWritePost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            prodJournalRouteProjHour.JournalId = prodJournalRoute.JournalId;
            prodJournalRouteProjHour.LineNum = prodJournalRoute.LineNum;
            prodJournalRouteProjHour.TransType = ProdRouteTransType::Time;
            if (prodJournalRouteProjHour.RecId)
                prodJournalRouteProjHour.update();
            else
                prodJournalRouteProjHour.insert();

            prodJournalRouteProjQuantity.JournalId = prodJournalRoute.JournalId;
            prodJournalRouteProjQuantity.LineNum = prodJournalRoute.LineNum;
            prodJournalRouteProjQuantity.TransType = ProdRouteTransType::Qty;
            if (prodJournalRouteProjQuantity.RecId)
                prodJournalRouteProjQuantity.update();
            else
                prodJournalRouteProjQuantity.insert();
        }

        super();
        FormDataUtil::getFormDataSource(prodJournalRoute).reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePre</Name>
				<Source><![CDATA[
    void datasourceWritePre()
    {
        if (prodJournalRoute.ProdPickList && prodJournalRoute.OprPriority && !prodJournalRoute.ProdPickListJournalId)
            prodJournalRoute.ProdPickList = NoYes::No;

        if (prodJournalRoute.ProdReportFinished)
        {
            if (inventDim.InventDimId)
            {
                prodJournalRoute.ProdInventDimId = InventDim::findOrCreate(inventDim).InventDimId;
            }
        }
        else
            prodJournalRoute.ProdInventDimId = '';

        super();

        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceWritePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    protected void enableButtonsActive()
    {
        ProdJobType     prodJobType = ProdJobType::construct(prodJournalRoute.JobType);
        super();

        boolean check = prodJobType.checkJournalHours(prodJournalRoute,true);
        ctrlGridHours.skip(!check);
        ctrlGridHours.allowEdit(check);

        check = !prodJournalRoute.OprPriority && prodJobType.checkJournalNumOfGood(prodJournalRoute,true);
        ctrlGridQtyGood.skip(!check);
        ctrlGridQtyGood.allowEdit(check);

        check = !prodJournalRoute.OprPriority && prodJobType.checkJournalNumOfError(prodJournalRoute,true);
        ctrlGridQtyError.skip(!check);
        ctrlGridQtyError.allowEdit(check);

        ctrlProjHours.enabled(prodJobType.checkJournalHours(prodJournalRoute,true));
        ctrlProjQtyGood.enabled(!prodJournalRoute.OprPriority && prodJobType.checkJournalNumOfGood(prodJournalRoute,true));
        ctrlProjQtyError.enabled(!prodJournalRoute.OprPriority && prodJobType.checkJournalNumOfError(prodJournalRoute,true));

        ctrlHours.enabled(prodJobType.checkJournalHours(prodJournalRoute,true));
        ctrlQtyGood.enabled(!prodJournalRoute.OprPriority && prodJobType.checkJournalNumOfGood(prodJournalRoute,true));
        ctrlQtyError.enabled(!prodJournalRoute.OprPriority && prodJobType.checkJournalNumOfError(prodJournalRoute,true));
        ctrlErrorCause.enabled(!prodJournalRoute.OprPriority && prodJobType.checkJournalNumOfError(prodJournalRoute,true));

        if (cwFormCtrl)
        {
            cwFormCtrl.updateDesign();
        }

        // <GEERU>
        if (ctrlReleaseCreate_RU)
        {
            ctrlReleaseCreate_RU.enabled(prodJournalRoute.ProdId && prodJournalRoute.prodTable().useReleaseFromProduction_RU());
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the <c>ProdTable</c> record tgat corresponds to the current <c>ProdJournalRoute</c> record.
    /// </summary>
    protected void fetchProdTable()
    {
        prodTable.data(ProdTable::find(prodJournalRoute.ProdId));
        prodTableInventDim.data(InventDim::find(prodTable.InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedCategoryHoursIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedCategoryHoursIdPost()
    {
        prodJournalRoute.setCategoryHours(prodJournalRoute.CategoryHoursId);

        this.fieldModifiedHourCategoryIdPost();
        this.fieldModifiedHourProjCostPricePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedCategoryQtyIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedCategoryQtyIdPost()
    {
        prodJournalRoute.setCategoryQty(prodJournalRoute.CategoryQtyId);

        this.fieldModifiedQuantityCategoryIdPost();
        this.fieldModifiedQuantityProjCostPricePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedEmplIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedEmplIdPost()
    {
        this.fieldModifiedHourEmplIdPost();
        this.fieldModifiedQuantityEmplIdPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourActivityNumberPost</Name>
				<Source><![CDATA[
    public void fieldModifiedHourActivityNumberPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedActivityNumberPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourCategoryIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedHourCategoryIdPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedCategoryIdPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourCurrencyPost</Name>
				<Source><![CDATA[
    public void fieldModifiedHourCurrencyPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedCurrencyPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourEmplIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedHourEmplIdPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedResourcePre();
            this.projJournalTransMapFormHour().fieldModifiedResourcePost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourLinePropertyIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedHourLinePropertyIdPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedLinePropertyIdPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourPricePost</Name>
				<Source><![CDATA[
    void fieldModifiedHourPricePost()
    {
        this.fieldModifiedHourProjCostPricePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourProjCostPricePost</Name>
				<Source><![CDATA[
    void fieldModifiedHourProjCostPricePost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedCostPricePost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourProjIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedHourProjIdPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedProjIdPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourProjTransDatePost</Name>
				<Source><![CDATA[
    void fieldModifiedHourProjTransDatePost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().parmJournalFormTrans(this);
            this.projJournalTransMapFormHour().fieldModifiedProjTransDatePost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourQtyPost</Name>
				<Source><![CDATA[
    void fieldModifiedHourQtyPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedQtyPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHoursPost</Name>
				<Source><![CDATA[
    void fieldModifiedHoursPost()
    {
        this.fieldModifiedHourQtyPost();

        // <GEERU>
        if (countryRegion_RU)
        {
            this.setPhysicalStorno_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourTransDatePost</Name>
				<Source><![CDATA[
    void fieldModifiedHourTransDatePost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedTransDatePost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourTxtPre</Name>
				<Source><![CDATA[
    void fieldModifiedHourTxtPre()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedTxtPre();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPdsCWQtyErrorPost</Name>
				<Source><![CDATA[
    void fieldModifiedPdsCWQtyErrorPost()
    {
        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldnum(prodJournalRoute,PdsCWQtyError));
        }

        this.fieldModifiedQuantityQtyPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPdsCWQtyGoodPost</Name>
				<Source><![CDATA[
    void fieldModifiedPdsCWQtyGoodPost()
    {
        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldnum(prodJournalRoute,PdsCWQtyGood));
        }

        this.fieldModifiedQuantityQtyPost();

        ProdRoute prodRoute = ProdRoute::find(prodJournalRoute.ProdId, prodJournalRoute.OprNum, prodJournalRoute.OprPriority);

        if (prodRoute.RecId)
        {
            prodJournalRoute.PdsCWQtyError = (prodJournalRoute.PdsCWQtyGood / (prodRoute.ErrorPct < 100 ? (100 - prodRoute.ErrorPct) / 100 : 1)) * (prodRoute.ErrorPct / 100);
            this.fieldModifiedPdsCWQtyErrorPost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProdIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedProdIdPost()
    {
        super();

        // Clear all job type related fields, since they are not valid for the new production id any longer
        ProdJobType::construct(RouteJobType::QueueBefore).initProdJournalRoute(null,
                                                                               prodJournalRoute,
                                                                               null);

        if (prodJournalRoute.ProdId)
        {
            ProjTable projTable = prodJournalRoute.projTable();

            prodJournalRouteProjHour.ProjId = projTable.ProjId;
            this.projJournalTransMapFormHour().initFromProjTable(projTable);

            prodJournalRouteProjQuantity.ProjId = projTable.ProjId;
            this.projJournalTransMapFormQuantity().initFromProjTable(projTable);

            this.fetchProdTable();
            this.updateDesign(InventDimFormDesignUpdate::Active);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProdReportFinishedPost</Name>
				<Source><![CDATA[
    void fieldModifiedProdReportFinishedPost()
    {
        this.updateInventDimOutputLocation(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyErrorPost</Name>
				<Source><![CDATA[
    void fieldModifiedQtyErrorPost()
    {
        this.fieldModifiedQuantityQtyPost();

        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldnum(prodJournalRoute,QtyError));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyGoodPost</Name>
				<Source><![CDATA[
    void fieldModifiedQtyGoodPost()
    {
        this.fieldModifiedQuantityQtyPost();

        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldnum(prodJournalRoute,QtyGood));
        }

        ProdRoute prodRoute = ProdRoute::find(prodJournalRoute.ProdId, prodJournalRoute.OprNum, prodJournalRoute.OprPriority);

        if (prodRoute.RecId)
        {
            prodJournalRoute.QtyError = (prodJournalRoute.QtyGood / (prodRoute.ErrorPct < 100 ? (100 - prodRoute.ErrorPct) / 100 : 1)) * (prodRoute.ErrorPct / 100);
            this.fieldModifiedQtyErrorPost();
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            this.setPhysicalStorno_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyPricePost</Name>
				<Source><![CDATA[
    void fieldModifiedQtyPricePost()
    {
        this.fieldModifiedQuantityProjCostPricePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityActivityNumberPost</Name>
				<Source><![CDATA[
    public void fieldModifiedQuantityActivityNumberPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedActivityNumberPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityCategoryIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedQuantityCategoryIdPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedCategoryIdPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityCurrencyPost</Name>
				<Source><![CDATA[
    public void fieldModifiedQuantityCurrencyPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedCurrencyPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityEmplIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedQuantityEmplIdPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedResourcePre();
            this.projJournalTransMapFormQuantity().fieldModifiedResourcePost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityLinePropertyIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedQuantityLinePropertyIdPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedLinePropertyIdPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityProjCostPricePost</Name>
				<Source><![CDATA[
    void fieldModifiedQuantityProjCostPricePost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedCostPricePost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityProjIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedQuantityProjIdPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedProjIdPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityProjTransDatePost</Name>
				<Source><![CDATA[
    void fieldModifiedQuantityProjTransDatePost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().parmJournalFormTrans(this);
            this.projJournalTransMapFormQuantity().fieldModifiedProjTransDatePost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityQtyPost</Name>
				<Source><![CDATA[
    void fieldModifiedQuantityQtyPost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedQtyPost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityTransDatePost</Name>
				<Source><![CDATA[
    void fieldModifiedQuantityTransDatePost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedTransDatePost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityTxtPre</Name>
				<Source><![CDATA[
    void fieldModifiedQuantityTxtPre()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedTxtPre();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedTransDatePost</Name>
				<Source><![CDATA[
    void fieldModifiedTransDatePost()
    {
        super();

        this.fieldModifiedHourTransDatePost();
        this.fieldModifiedQuantityTransDatePost();

        this.updateInventDimOutputLocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedWrkCtrIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedWrkCtrIdPost()
    {
        WrkCtrTable wrkCtrTable = prodJournalRoute.wrkCtrTable();
        ProdJobType prodJobType = ProdJobType::construct(prodJournalRoute.JobType);

        prodJournalRoute.Worker          = wrkCtrTable.Worker;

        prodJobType.setCostCategoryHoursFromResource(prodJournalRoute, wrkCtrTable);
        this.fieldModifiedCategoryHoursIdPost();

        prodJournalRoute.setCategoryQty(wrkCtrTable.QtyCategoryId);
        this.fieldModifiedCategoryQtyIdPost();

        prodJournalRoute.DefaultDimension = prodJournalRoute.copyDimension(prodJournalRoute.prodTable().DefaultDimension);
        prodJournalRoute.DefaultDimension = prodJournalRoute.mergeDimension(wrkCtrTable.DefaultDimension, prodJournalRoute.DefaultDimension);

        this.updateInventDimOutputLocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateHourTxt</Name>
				<Source><![CDATA[
    boolean fieldValidateHourTxt()
    {
        if (prodJournalRoute.isProjMethodConsumed())
            return this.projJournalTransMapFormHour().fieldValidateTxt();

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateProdReportFinishedPre</Name>
				<Source><![CDATA[
    boolean fieldValidateProdReportFinishedPre()
    {
        if (prodJournalRoute.ProdReportFinished)
        {
            if (! prodJournalRoute.ProdId)
                return checkFailed("@SYS26122");

            if (! prodJournalRoute.OprNum)
                return checkFailed("@SYS24422");

            if (ProdRoute::find(prodJournalRoute.ProdId,prodJournalRoute.OprNum,RouteOprPriority::Primary).OprNumNext != 0)
                return checkFailed("@SYS60015");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateQuantityTxt</Name>
				<Source><![CDATA[
    boolean fieldValidateQuantityTxt()
    {
        if (prodJournalRoute.isProjMethodConsumed())
            return this.projJournalTransMapFormQuantity().fieldValidateTxt();

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        super();

        if (cwFormCtrl)
        {
            cwFormCtrl.initPost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideProdTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Hides the fields of the production order on the form.
    /// </summary>
    protected void hideProdTableFields()
    {
        super();

        // Hide inventory dimensions controls.
        ctrlProdTableInventDimGroup.visible(false);

        // Disable the configuration of displayed inventory dimensions.
        ctrlInventDimParmFixedMenuButton.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    protected void initDatasourceAllow()
    {
        boolean allow = this.allowEditAndCreateLines();

        super();
        inventDim_ds.allowEdit(allow);
        inventDim_ds.allowCreate(allow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the instance of the class to use to configure the displayed inventory dimensions.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventDimCtrl_Frm_Mov</c> class.
    /// </returns>
    public InventDimCtrl_Frm_Mov inventDimSetupObject()
    {
        return inventDimFormSetupProdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the inventory movement that corresponds to the production order of the current journal line.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventMovement</c> class.
    /// </returns>
    public InventMovement inventMovement()
    {
        // If ProdId is empty, a movement with an empty record has to be returned.
        return InventMovement::construct(ProdTable::find(prodJournalRoute.ProdId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes the object, override the default and set up the catch weight form control
    /// class.
    /// </summary>
    /// <param name="_formRun">
    /// The form from which the method is being called.
    /// </param>
    public void new(FormRun _formRun)
    {
        super(_formRun);

        if (#PdsCatchWeightEnabled)
        {
            cwFormCtrl = PdsCWFormCtrl_ProdJournalRoute::construct();
            cwFormCtrl.parmFormRun(_formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlErrorCause</Name>
				<Source><![CDATA[
    FormComboBoxControl parmCtrlErrorCause(FormComboBoxControl _ctrlErrorCause = ctrlErrorCause)
    {
        ctrlErrorCause = _ctrlErrorCause;
        return ctrlErrorCause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridHours</Name>
				<Source><![CDATA[
    FormRealControl parmCtrlGridHours(FormRealControl _ctrlGridHours = ctrlGridHours)
    {
        ctrlGridHours = _ctrlGridHours;
        return ctrlGridHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridQtyError</Name>
				<Source><![CDATA[
    FormRealControl parmCtrlGridQtyError(FormRealControl _ctrlGridQtyError = ctrlGridQtyError)
    {
        ctrlGridQtyError = _ctrlGridQtyError;
        return ctrlGridQtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlGridQtyGood</Name>
				<Source><![CDATA[
    FormRealControl parmCtrlGridQtyGood(FormRealControl _ctrlGridQtyGood = ctrlGridQtyGood)
    {
        ctrlGridQtyGood = _ctrlGridQtyGood;
        return ctrlGridQtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlHours</Name>
				<Source><![CDATA[
    FormRealControl parmCtrlHours(FormRealControl _ctrlHours = ctrlHours)
    {
        ctrlHours = _ctrlHours;
        return ctrlHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlInventDimParmFixedMenuButton</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlInventDimParmFixedMenuButton(
        FormFunctionButtonControl _ctrlInventDimParmFixedMenuButton = ctrlInventDimParmFixedMenuButton)
    {
        ctrlInventDimParmFixedMenuButton = _ctrlInventDimParmFixedMenuButton;
        return ctrlInventDimParmFixedMenuButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlProdTableInventDimGroup</Name>
				<Source><![CDATA[
    public FormGroupControl parmCtrlProdTableInventDimGroup(
        FormGroupControl _ctrlProdTableInventDimGroup = ctrlProdTableInventDimGroup)
    {
        ctrlProdTableInventDimGroup = _ctrlProdTableInventDimGroup;
        return ctrlProdTableInventDimGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlProjHours</Name>
				<Source><![CDATA[
    public FormRealControl parmCtrlProjHours(FormRealControl _ctrlProjHours = ctrlProjHours)
    {
        ctrlProjHours = _ctrlProjHours;

        return ctrlProjHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlProjQtyError</Name>
				<Source><![CDATA[
    public FormRealControl parmCtrlProjQtyError(FormRealControl _ctrlProjQtyError = ctrlProjQtyError)
    {
        ctrlProjQtyError = _ctrlProjQtyError;

        return ctrlProjQtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlProjQtyGood</Name>
				<Source><![CDATA[
    public FormRealControl parmCtrlProjQtyGood(FormRealControl _ctrlProjQtyGood = ctrlProjQtyGood)
    {
        ctrlProjQtyGood = _ctrlProjQtyGood;

        return ctrlProjQtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlQtyError</Name>
				<Source><![CDATA[
    FormRealControl parmCtrlQtyError(FormRealControl _ctrlQtyError = ctrlQtyError)
    {
        ctrlQtyError = _ctrlQtyError;
        return ctrlQtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlQtyGood</Name>
				<Source><![CDATA[
    FormRealControl parmCtrlQtyGood(FormRealControl _ctrlQtyGood = ctrlQtyGood)
    {
        ctrlQtyGood = _ctrlQtyGood;
        return ctrlQtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPrice</Name>
				<Source><![CDATA[
    public ProjSalesPriceCost parmSalesPrice(ProjSalesPriceCost _salesPrice = salesPrice)
    {
        salesPrice = _salesPrice;

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalRouteProjHourInitPost</Name>
				<Source><![CDATA[
    void prodJournalRouteProjHourInitPost(ProdJournalRouteProj _prodJournalRouteProjHour)
    {
        prodJournalRouteProjHour    = _prodJournalRouteProjHour;
        prodJournalRouteProjHour_ds = FormDataUtil::getFormDataSource(_prodJournalRouteProjHour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalRouteProjQtyInitPost</Name>
				<Source><![CDATA[
    void prodJournalRouteProjQtyInitPost(ProdJournalRouteProj _prodJournalRouteProjQuantity)
    {
        prodJournalRouteProjQuantity    = _prodJournalRouteProjQuantity;
        prodJournalRouteProjQuantity_ds = FormDataUtil::getFormDataSource(_prodJournalRouteProjQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTableDatasourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the data source of the production order.
    /// </summary>
    /// <param name="_prodTable">
    ///    The table buffer that contains the production order record.
    /// </param>
    public void prodTableDatasourceInitPost(ProdTable _prodTable)
    {
        prodTable = _prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTableInventDimDatasourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the data source of the production order inventory dimensions.
    /// </summary>
    /// <param name="_inventDim">
    ///    The table buffer that contains inventory dimensions.
    /// </param>
    public void prodTableInventDimDatasourceInitPost(InventDim _inventDim)
    {
        prodTableInventDim       = _inventDim;
        prodTableInventDim_ds    = FormDataUtil::getFormDataSource(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projJournalTransMapFormHour</Name>
				<Source><![CDATA[
    ProjJournalTransMapForm projJournalTransMapFormHour()
    {
        if (!projJournalTransMapFormHour)
        {
            projJournalTransMapFormHour = ProjJournalTransMapForm::construct(prodJournalRouteProjHour, prodJournalRoute);
            projJournalTransMapFormHour.parmSalesPrice(salesPrice);
        }
        else
        {
            projJournalTransMapFormHour.parmProjJournalTransMap(prodJournalRouteProjHour);
            projJournalTransMapFormHour.parmChildBuffer(prodJournalRoute);
            projJournalTransMapFormHour.parmSalesPrice(salesPrice);
        }

        return projJournalTransMapFormHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projJournalTransMapFormQuantity</Name>
				<Source><![CDATA[
    ProjJournalTransMapForm projJournalTransMapFormQuantity()
    {
        if (!projJournalTransMapFormQuantity)
        {
            projJournalTransMapFormQuantity = ProjJournalTransMapForm::construct(prodJournalRouteProjQuantity, prodJournalRoute);
            projJournalTransMapFormQuantity.parmSalesPrice(salesPrice);
        }
        else
        {
            projJournalTransMapFormQuantity.parmProjJournalTransMap(prodJournalRouteProjQuantity);
            projJournalTransMapFormQuantity.parmChildBuffer(prodJournalRoute);
            projJournalTransMapFormQuantity.parmSalesPrice(salesPrice);
        }

        return projJournalTransMapFormQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPhysicalStorno_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets physical storno value.
    /// </summary>
    protected void setPhysicalStorno_RU()
    {
        prodJournalRoute.StornoPhysical_RU = (prodJournalRoute.Hours < 0 && prodJournalRoute.QtyGood < 0 && InventParameters::find().StornoPhysicalPosting_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the form design when the notification of the control activation is received.
    /// </summary>
    /// <param name="_movement">
    ///    The instance of the <c>InventMovement</c> class that represents the selected record.
    /// </param>
    protected void updateDesignActive(InventMovement _movement)
    {
        super(_movement);

        inventDimFormSetupProdTable.formActiveSetup(_movement.inventDimGroupSetup(), _movement);
        inventDimFormSetupProdTable.formSetControls(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignFieldChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the form design when the notification of the field modification is received.
    /// </summary>
    /// <param name="_movement">
    ///    The instance of the <c>InventMovement</c> class that represents the selected record.
    /// </param>
    protected void updateDesignFieldChange(InventMovement _movement)
    {
        super(_movement);

        inventDimFormSetupProdTable.formActiveSetup(_movement.inventDimGroupSetup(), _movement);
        inventDimFormSetupProdTable.formSetControls(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignInit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the form design when the notification of the control initialization is received.
    /// </summary>
    /// <param name="_movement">
    ///    The instance of the <c>InventMovement</c> class that represents the selected record.
    /// </param>
    protected void updateDesignInit(InventMovement _movement)
    {
        Set             validDataSources;

        if (!inventDimFormSetup)
        {
            validDataSources = new Set(Types::String);
            validDataSources.add(inventDim_ds.name());

            inventDimFormSetup = InventDimCtrl_Frm_Mov_ProdRepFinish::newFromFormMovement(
                formRun,
                _movement,
                validDataSources);
        }

        if (!inventDimFormSetupProdTable)
        {
            validDataSources = new Set(Types::String);
            validDataSources.add(prodTableInventDim_ds.name());

            inventDimFormSetupProdTable = InventDimCtrl_Frm_Mov_ProdRepFinish::newFromFormMovement(
                formRun,
                _movement,
                validDataSources);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDimOutputLocation</Name>
				<Source><![CDATA[
    private void updateInventDimOutputLocation(boolean _createInventDim = false)
    {
        InventDim   dataInventDim;

        if (prodJournalRoute.ProdReportFinished)
        {
            if (_createInventDim && !prodJournalRoute.ProdInventDimId)
            {
                inventDim_ds.create();
            }

            ProdTable prodTableLocal = ProdTable::find(prodJournalRoute.ProdId);
            dataInventDim = InventDim::find(prodTableLocal.InventDimId);
            dataInventDim.wmsLocationId = prodTableLocal.defaultOutputLocation(
                prodTableLocal.ItemId, prodJournalRoute.TransDate, prodJournalRoute.WrkCtrId);
        }
        inventDim.data(dataInventDim);

        inventDim_ds.setCurrent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedHourResourcePost</Name>
				<Source><![CDATA[
    void fieldModifiedHourResourcePost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormHour().fieldModifiedResourcePre();
            this.projJournalTransMapFormHour().fieldModifiedResourcePost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQuantityResourcePost</Name>
				<Source><![CDATA[
    void fieldModifiedQuantityResourcePost()
    {
        if (prodJournalRoute.isProjMethodConsumed())
        {
            this.projJournalTransMapFormQuantity().fieldModifiedResourcePre();
            this.projJournalTransMapFormQuantity().fieldModifiedResourcePost();
            FormDataUtil::getFormDataSource(prodJournalRoute).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedResourcePost</Name>
				<Source><![CDATA[
    void fieldModifiedResourcePost()
    {
        this.fieldModifiedHourResourcePost();
        this.fieldModifiedQuantityResourcePost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>