<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalLineTaxLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjAdvancedJournalLineTaxLine</c> is the taxable line class for project advanced journal lines.
/// </summary>
public class ProjAdvancedJournalLineTaxLine implements TaxableLine
{
    ProjAdvancedJournalLine projAdvancedJournalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJournalizedLine</Name>
				<Source><![CDATA[
    public Common getJournalizedLine()
    {
        return projAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLine</Name>
				<Source><![CDATA[
    public Common getSourceLine()
    {
        return projAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    public Qty getQuantity()
    {
        return projAdvancedJournalLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitAmount</Name>
				<Source><![CDATA[
    public PriceCur getUnitAmount()
    {
        return projAdvancedJournalLine.UnitCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionAmount</Name>
				<Source><![CDATA[
    public TaxBase getTransactionAmount()
    {
        return projAdvancedJournalLine.ExtendedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode getTransactionCurrency()
    {
        return projAdvancedJournalLine.CostCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyExchangeInformation</Name>
				<Source><![CDATA[
    public CurrencyExchangeHelper getCurrencyExchangeInformation()
    {
        CurrencyExchangeHelper currencyExchangeHelper;

        currencyExchangeHelper = CurrencyExchangeHelper::construct();
        if (projAdvancedJournalLine.AccountingDate)
        {
            currencyExchangeHelper.parmExchangeDate(projAdvancedJournalLine.AccountingDate);
        }
        else
        {
            currencyExchangeHelper.parmExchangeDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        return currencyExchangeHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationCompany</Name>
				<Source><![CDATA[
    public SelectableDataArea getDestinationCompany()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTaxDirection</Name>
				<Source><![CDATA[
    public TaxDirection getDefaultTaxDirection(TaxGroupData _taxGroupData, SelectableDataArea _taxObligationCompany)
    {
        TaxDirection taxDirection;

        if (_taxGroupData.UseTax == NoYes::Yes)
        {
            taxDirection = TaxDirection::UseTax;
        }
        else
        {
            if (_taxGroupData.ExemptTax == NoYes::Yes)
            {
                taxDirection = TaxDirection::TaxExemptPurchase;
            }
            else
            {
                changecompany(_taxObligationCompany)
                {
                    if ((_taxGroupData.IntracomVAT == NoYes::Yes && VendParameters::find().IntracomVAT)
                        || (_taxGroupData.ReverseCharge_W
                            && TaxTable::find(_taxGroupData.TaxCode).NegativeTax == NoYes::Yes))
                    {
                        taxDirection = TaxDirection::OutgoingTax;
                    }
                    else
                    {
                        taxDirection = TaxDirection::IncomingTax;
                    }
                }
            }
        }

        return taxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionText</Name>
				<Source><![CDATA[
    public Name getTransactionText()
    {
        return projAdvancedJournalLine.Text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateDate</Name>
				<Source><![CDATA[
    public TransDate getTaxRateDate(SelectableDataArea _taxObligationCompany)
    {
        return projAdvancedJournalLine.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup getTaxGroup()
    {
        return projAdvancedJournalLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    public TaxItemGroup getTaxItemGroup()
    {
        return projAdvancedJournalLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCode</Name>
				<Source><![CDATA[
    public TaxCode getTaxCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType getPostingType()
    {
        return LedgerPostingType::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSTTaxType_CA</Name>
				<Source><![CDATA[
    public GSTHSTTaxType_CA getGSTHSTTaxType_CA()
    {
        return GSTHSTTaxType_CA::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscountAmount</Name>
				<Source><![CDATA[
    public AmountCur getCashDiscountAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscountPercent</Name>
				<Source><![CDATA[
    public Percent getCashDiscountPercent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault getDefaultDimension()
    {
        return projAdvancedJournalLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount getOperationLedgerDimension(SelectableDataArea _taxObligationCompany)
    {
        switch (projAdvancedJournalLine.TransType)
        {
            case (ProjTransType::Hour):
                return ProjAdvancedJournalLine::getLedgerDimensionAccountForHour(projAdvancedJournalLine);

            case (ProjTransType::Cost):
                return ProjAdvancedJournalLine::getLedgerDimensionAccountForCost(projAdvancedJournalLine);
            
            case (ProjTransType::Item):
                return ProjAdvancedJournalLine::getLedgerDimensionAccountForItem(projAdvancedJournalLine);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableInventoriedLine</Name>
				<Source><![CDATA[
    public TaxableInventoriedLine getTaxableInventoriedLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstMiscellaneousCharge</Name>
				<Source><![CDATA[
    public boolean getFirstMiscellaneousCharge()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentMiscellaneousCharge</Name>
				<Source><![CDATA[
    public TaxableLine getCurrentMiscellaneousCharge()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextMiscellaneousCharge</Name>
				<Source><![CDATA[
    public boolean getNextMiscellaneousCharge()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrePayment</Name>
				<Source><![CDATA[
    public boolean isPrePayment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportAmountByUnit</Name>
				<Source><![CDATA[
    public boolean supportAmountByUnit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdvancedJournalLine</Name>
				<Source><![CDATA[
    public ProjAdvancedJournalLine parmProjAdvancedJournalLine(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        projAdvancedJournalLine = _projAdvancedJournalLine;

        return projAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>ProjAdvancedJournalLineTaxLine</c>.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    /// The project advanced journal line buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjAdvancedJournalLineTaxLine</c>.
    /// </returns>
    public static ProjAdvancedJournalLineTaxLine construct(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        ProjAdvancedJournalLineTaxLine ProjAdvancedJournalLineTaxLine = new ProjAdvancedJournalLineTaxLine();
        ProjAdvancedJournalLineTaxLine.parmProjAdvancedJournalLine(_projAdvancedJournalLine);

        return ProjAdvancedJournalLineTaxLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>