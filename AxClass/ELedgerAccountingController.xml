<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ELedgerAccountingController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controls the opperation to create the temporary table
/// </summary>
public class ELedgerAccountingController extends ERFormatMappingRunBaseController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the contract.
    /// </summary>
    /// <returns>true if the contract is valid, false otherwise.</returns>
    protected boolean validate()
    {
        boolean                         ret;
        ELedgerAccountingContract       contract;
        LedgerParameters                parameters = LedgerParameters::find();

        ret = super();

        if (ret && !CompanyInfo::find().Rfc_MX)
        {
            ret = checkFailed("@SYP4882134");
        }

        if (ret)
        {
            contract = this.getDataContractObject() as ELedgerAccountingContract;

            if (!contract.parmTrialBalance() &&
                !contract.parmAuxiliaryLedger() &&
                !contract.parmLedgerEntries())
            {
                ret = checkFailed("@SYP4882135");
            }

            if (year(contract.parmElectronicLedgerAccPeriod()) < 2015 || year(contract.parmElectronicLedgerAccPeriod()) > 2099)
            {
                ret = checkFailed("@Mexico:ELA_InvalidExecutionYear");
            }

            if (contract.parmTrialBalance())
            {
                ret = ret && this.validateTrialBalanceParam(contract, parameters);
            }

            if (contract.parmAuxiliaryLedger())
            {
                ret = ret && this.validateAuxiliaryLedgerParam(contract, parameters);
            }

            if (contract.parmLedgerEntries())
            {
                ret = ret && this.validateLedgerEntriesParam(contract, parameters);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTrialBalanceParam</Name>
				<Source><![CDATA[
    private boolean validateTrialBalanceParam(ELedgerAccountingContract _contract, LedgerParameters _parameters)
    {
        boolean ret = true;

        if (!_contract.parmConsolidateAccountGroupId())
        {
            ret = checkFailed("@SYP4882136");
        }

        if (!_parameters.ELedgerAccountingBalanceSheetFormatMapping)
        {
            ret = checkFailed("@Mexico:ELedgerAccounting_ControllerValidation_MissingBalanceSheetFormatMapping");
        }

        if (!_parameters.ELedgerAccountingChartOfAccountsFormatMapping)
        {
            ret = checkFailed("@Mexico:ELedgerAccounting_ControllerValidation_MissingChartOfAccountsFormatMapping");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAuxiliaryLedgerParam</Name>
				<Source><![CDATA[
    private boolean validateAuxiliaryLedgerParam(ELedgerAccountingContract _contract, LedgerParameters _parameters)
    {
        boolean ret = true;

        if (!_parameters.ELedgerAccountingAuxiliaryLedgerFormatMapping)
        {
            ret = checkFailed("@Mexico:ELedgerAccounting_ControllerValidation_MissingAuxiliaryLedgerFormatMapping");
        }

        ret = this.validateRequestType(_contract) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequestType</Name>
				<Source><![CDATA[
    private boolean validateRequestType(ELedgerAccountingContract _contract)
    {
        boolean ret = true;

        if (_contract.parmRequestType() == ELedgerAccRequestType_MX::Blank)
        {
            ret = checkFailed("@Mexico:ELA_InvalidRequestType");
        }
        else if ((_contract.parmRequestType() == ELedgerAccRequestType_MX::AF || _contract.parmRequestType() == ELedgerAccRequestType_MX::FC)
            && !_contract.parmOrderNum())
        {
            ret = checkFailed("@Mexico:ELA_OrderNumberRequired");
        }
        else if ((_contract.parmRequestType() == ELedgerAccRequestType_MX::CO || _contract.parmRequestType() == ELedgerAccRequestType_MX::DE)
            && !_contract.parmProcessNum())
        {
            ret = checkFailed("@Mexico:ELA_ProcessNumberRequired");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerEntriesParam</Name>
				<Source><![CDATA[
    private boolean validateLedgerEntriesParam(ELedgerAccountingContract _contract, LedgerParameters _parameters)
    {
        boolean ret = true;

        if (!_parameters.ELedgerAccountingLedgerEntriesFormatMapping)
        {
            ret = checkFailed("@Mexico:ELedgerAccounting_ControllerValidation_MissingLedgerEntriesFormatMapping");
        }

        ret = this.validateRequestType(_contract) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ELedgerAccountingController eLedgerAccountingController;
        eLedgerAccountingController = ELedgerAccountingController::newFromArgs(_args);

        eLedgerAccountingController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the ELedgerAccountingController object
    /// </summary>
    /// <param name="_args">
    /// The Args instance to create the new object
    /// </param>
    /// <returns>
    /// The new instance of the ELedgerAccountingController object
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ELedgerAccountingController newFromArgs(Args _args)
    {
        ELedgerAccountingController eLedgerAccountingController = new ELedgerAccountingController();

        eLedgerAccountingController.initializeFromArgs(_args);

        return eLedgerAccountingController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>