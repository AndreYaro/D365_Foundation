<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkManualUnBlock</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkManualUnblock</c> class handles the unblocking of multiple works for manual unblocking reasons.
/// </summary>
public class WHSWorkManualUnblock
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSWorkTable workArgs = _args.record() as WHSWorkTable;
        if (workArgs && FormDataUtil::isFormDataSource(workArgs))
        {
            FormDataSource dataSource = FormDataUtil::getFormDataSource(workArgs) as FormDataSource;
           
            for (WHSWorkTable work = dataSource.getFirst(true) ? dataSource.getFirst(true) : dataSource.cursor();
            work;
            work = dataSource.getNext())
            {
                try
                {
                    using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
                    {
                        WHSWorkManualUnblock::tryManualUnblockWork(work);
                    }
                }
                catch (Exception::Error)
                {
                    // Unblocking of the other works should continue if the unblocking of a work throws an error.
                }
            }
            dataSource.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryManualUnBlockWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to unblock the current work for the accepted manual unblock reasons.
    /// </summary>
    /// <param name = "_workTable">The work.</param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if the work cannot be unblocked.
    /// </exception>
    [Hookable(false)]
    public static void tryManualUnBlockWork(WHSWorkTable _workTable)
    {
        if (!_workTable.Frozen)
        {
            warning(strFmt("@WAX:WHSUnblockNotBlockedWorkErrorMessage", _workTable.WorkId));
            return;
        }

        WHSWorkManualUnblock::tryUnBlockWorkForManualUnBlockReasonTypes(_workTable.WorkId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUnBlockWorkForManualUnBlockReasonTypes</Name>
				<Source><![CDATA[
    private static void tryUnBlockWorkForManualUnBlockReasonTypes(WHSWorkId _workId)
    {
        ttsbegin;

        WHSWorkBlocking workBlocking = WHSWorkBlocking::newAllowManualUnBlockFromWorkId(_workId);

        WHSWorkUnBlockingValidationResult unblockingResult =
            workBlocking.tryUnblockReasonTypeList(WHSWorkManualUnblock::getManualOverrideUnblockReasonTypes());

        if (unblockingResult.parmCanUnBlockResult())
        {
            info(strFmt("@WAX:WHSWorkUnblockSuccesMessage", _workId));
        }
        else
        {
            // This will only be representative of the first unblocking error encountered in the list.
            error(unblockingResult.errorMessage());
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getManualOverrideUnblockReasonTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the work blocking reason types that are allowed for manual override.
    /// </summary>
    /// <returns>The list of reason types that are possible to manually unblock.</returns>
    protected internal static List getManualOverrideUnblockReasonTypes()
    {
        List manualUnblockReasonTypes = new List(Types::Enum);

        manualUnblockReasonTypes.addEnd(WHSWorkBlockingReasonType::HeldWave);
        manualUnblockReasonTypes.addEnd(WHSWorkBlockingReasonType::Undefined);
        manualUnblockReasonTypes.addEnd(WHSWorkBlockingReasonType::ExceedsReplenishmentOverflowCapacity);

        return manualUnblockReasonTypes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>