<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UnifiedPricingFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using IFeatureLifecycle = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureLifecycle;
using IFeatureMetadata = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata;
using FeatureLifecycleStage = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureLifecycleStage;

[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class UnifiedPricingFeature implements IFeatureLifecycle, IFeatureMetadata, IFeaturePrerequisites, IFeatureMetadataEnablementNotifiable
{
    private static UnifiedPricingFeature instance;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new UnifiedPricingFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static UnifiedPricingFeature instance()
    {
        return UnifiedPricingFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@UnifiedPricing:UnifiedPricingFeatureLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::SalesAndMarketing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@UnifiedPricing:UnifiedPricingFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        // For private preview environments with property-based pricing enabled, this feature should be enabled by default.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canEnable()
    {
        // return !UnifiedPricingFeature::isGUPFlightEnabled();
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        //if (UnifiedPricingFeature::isPreviewEnabled())
        //{
        //    return false;
        //}

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotEnableMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LabelString cannotEnableMessage()
    {
        return ''; // TODO: We need a message from PM.
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method thats called when feature gets enabled
    /// </summary>
    [Hookable(false)]
    void onEnabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method thats called when feature gets disabled
    /// </summary>
    [Hookable(false)]
    void onDisabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::PrivatePreview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreviewEnabled</Name>
				<Source><![CDATA[
    internal static boolean isPreviewEnabled()
    {
        // Becuase GUP is referencing ApplicationSuite, we have to use reflection to lookup the flight state of GUPGlobalEnableFeature.
        System.Type type = Microsoft.Dynamics.Ax.Xpp.ReflectionCallHelper::getType('GUPGlobalEnableFeature');

        System.Object[] parameter = new System.Object[0]();
        Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation.IFeature iFeature
                        = Microsoft.Dynamics.Ax.Xpp.ReflectionCallHelper::MakeStaticCall(type, 'instance', parameter)
                          as Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation.IFeature;

        return FeatureStateProvider::isFeatureEnabled(iFeature);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGUPFlightEnabled</Name>
				<Source><![CDATA[
    internal static boolean isGUPFlightEnabled()
    {
        return GUPEnableFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>