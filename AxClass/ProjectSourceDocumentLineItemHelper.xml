<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectSourceDocumentLineItemHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjectSourceDocumentLineItemHelper</c> class provides helper methods for source document
/// line items that are project related.
/// </summary>
class ProjectSourceDocumentLineItemHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>billingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustBillingCode</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>CustBillingCode</c> record of the source document line item.
    /// </returns>
    public static CustBillingCode billingCode(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocLineItemICustInvJournalizing  sourceDocLineItemICustInvJournalizing;
        CustBillingCode                 custBillingCode;

        if (_sourceDocumentLineItem is SourceDocLineItemICustInvJournalizing)
        {
            sourceDocLineItemICustInvJournalizing = _sourceDocumentLineItem as SourceDocLineItemICustInvJournalizing;

            if (sourceDocLineItemICustInvJournalizing.parmCustBillingCode())
            {
                changecompany (ProjectSourceDocumentLineItemHelper::getProjectLegalEntity(_sourceDocumentLineItem).DataArea)
                {
                    custBillingCode = CustBillingCode::find(sourceDocLineItemICustInvJournalizing.parmCustBillingCode(), _forUpdate);
                }
            }
        }

        return custBillingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateTransactionCurrencyPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current project distribution can update the transaction currency price line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// true if current source document line item is an expense report, processing mileage rate tiers and tax source document line item.
    /// otherwise, false.
    /// </returns>
    public static boolean canUpdateTransactionCurrencyPrice(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean                         canUpdatePrice;
        TrvExpTransSourceDocLineItem    trvExpTransSourceDocLineItem;
        BudgetReservationLine_PSN budgetReservationLine_PSN;

        if (_sourceDocumentLineItem is TrvExpTransSourceDocLineItem)
        {
            trvExpTransSourceDocLineItem = _sourceDocumentLineItem as TrvExpTransSourceDocLineItem;
        }
        else if (_sourceDocumentLineItem.parmParentSourceDocumentLineItem() is TrvExpTransSourceDocLineItem)
        {
            trvExpTransSourceDocLineItem = _sourceDocumentLineItem.parmParentSourceDocumentLineItem() as TrvExpTransSourceDocLineItem;
        }
        else if (_sourceDocumentLineItem is BudgetReservationSourceDocumentLineItem_PSN)
        {
            budgetReservationLine_PSN = _sourceDocumentLineItem.parmSourceDocumentLineImplementation();

            if (budgetReservationLine_PSN.UnitPrice)
            {
                canUpdatePrice = true;
            }
        }

        if (trvExpTransSourceDocLineItem)
        {
            TrvExpTrans trvExpTrans = trvExpTransSourceDocLineItem.parmExpenseLine() as TrvExpTrans;

            if (trvExpTrans.KMOwnCar || trvExpTrans.KMPrice || trvExpTrans.MappedToRequisitionLine)
            {
                canUpdatePrice = true;
            }
        }

        if (_sourceDocumentLineItem is TaxSourceDocSublineItem)
        {
            SourceDocumentLineItem parentSourceDocumentLineItem = _sourceDocumentLineItem.parmParentSourceDocumentLineItem();

            // Update the price If the parent source document is not of type ProjAdvancedJournalSourceDocumentLineItem.
            if (!(parentSourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem))
            {
                canUpdatePrice = true;
            }
        }

        return canUpdatePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether project extensions to the source document framework can handle a source document
    /// line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// true if project extensions to the source document framework can handle a source document line item;
    /// otherwise, false.
    /// </returns>
    public static boolean canProcessProject(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        SourceDocumentLineItemIProject          sourceDocumentLineItemIProject;
        SourceDocumentLineItemIProduct          sourceDocumentLineItemIProduct;
        SourceDocumentLine                      sourceDocumentLine;
        boolean                                 canProcessProject;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProject = _sourceDocumentLineItem as SourceDocumentLineItemIProject;
            sourceDocumentLine             = _sourceDocumentLineItem.parmSourceDocumentLine();

            if (SysTransactionScopeCache::get(classStr(ProjectPosting), [sourceDocumentLine.RecId, sourceDocumentLine.RecVersion]))
            {
                canProcessProject = false;
            }
            else if (sourceDocumentLineItemIProject.parmProjectId())
            {
                canProcessProject = true;
            }

            if (canProcessProject &&
                _sourceDocumentLineItem is SourceDocumentLineItemIProduct)
            {
                sourceDocumentLineItemIProduct = _sourceDocumentLineItem as SourceDocumentLineItemIProduct;

                VendInvoiceInfoLine  vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(sourceDocumentLine.RecId);
                boolean isProjRetentionRelease;

                if (vendInvoiceInfoLine && !vendInvoiceInfoLine.ReceiveNow && vendInvoiceInfoLine.PSAReleaseAmount)
                {
                    isProjRetentionRelease = true;
                }

                if (sourceDocumentLineItemIProduct.parmStocked() && !isProjRetentionRelease)
                {
                    canProcessProject = false;
                }

                // Skips creation of project posted transaction for project purchase order created from direct delivery sales order with non-stocked item.
                SalesLine salesLineLocal;
                if (vendInvoiceInfoLine)
                {
                    salesLineLocal = vendInvoiceInfoLine.purchLine().salesLine();
                }
                
                if (canProcessProject
                    && !sourceDocumentLineItemIProduct.parmStocked()
                    && salesLineLocal
                    && salesLineLocal.DeliveryType == TradeLineDlvType::DropShip)
                {
                    canProcessProject = false;
                }
            }

            if (canProcessProject &&
                ProjectSourceDocumentLineItemHelper::isIntercompany(_sourceDocumentLineItem))
            {
                canProcessProject = false;
            }
        }

        return canProcessProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessProjectFromLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether project extensions to the source document framework can handle a source document
    /// line item.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of the source document line.
    /// </param>
    /// <returns>
    /// true if project extensions to the source document framework can handle a source document line item;
    /// otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is exposed so a client can call with a record ID and push to the server by using a
    /// single RPC. If the <c>canProcessProject</c> method was used instead, a
    /// <c>SourceDocumentLineItem</c> instance would have to be constructed on the client which would cause
    /// a significant number of RPCs.
    /// </remarks>
    public static boolean canProcessProjectFromLineRecId(RecId _sourceDocumentLineRecId)
    {
        SourceDocumentLineItem lineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(_sourceDocumentLineRecId));

        return ProjectSourceDocumentLineItemHelper::canProcessProject(lineItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>committedCostOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project committed cost origin of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// The project committed cost origin of the source document line item.
    /// </returns>
    public static CommittedCostOrig committedCostOrig(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        CommittedCostOrig           committedCostOrig;
        int                         enumId;
        SourceDocumentTypeEnumValue sourceDocumentTypeEnumValue;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            enumId = enumName2Id(_sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumName);
            sourceDocumentTypeEnumValue = _sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumValue;

            if (enumId == enumNum(SourceDocument_ProductRequisition) && sourceDocumentTypeEnumValue == SourceDocument_ProductRequisition::PurchaseRequisition)
            {
                committedCostOrig = CommittedCostOrig::PurchaseRequisition;
            }
            else if (enumId == enumNum(SourceDocument_ProductOrder) && sourceDocumentTypeEnumValue == SourceDocument_ProductOrder::PurchaseOrder)
            {
                committedCostOrig = CommittedCostOrig::PurchaseOrder;
            }
            else if (enumId == enumNum(SourceDocument_VendorInvoice) && sourceDocumentTypeEnumValue == SourceDocument_VendorInvoice::VendorInvoice)
            {
                committedCostOrig = CommittedCostOrig::VendorInvoice;
            }
            else if (enumId == enumNum(SourceDocument_ExpenseReport) && sourceDocumentTypeEnumValue == SourceDocument_ExpenseReport::ExpenseReport)
            {
                committedCostOrig = CommittedCostOrig::ExpenseManagement;
            }
            else if (enumId == enumNum(SourceDocument_TravelRequisition) && sourceDocumentTypeEnumValue == SourceDocument_TravelRequisition::TravelRequisition)
            {
                committedCostOrig = CommittedCostOrig::TravelRequisition;
            }
            else if (enumId == enumNum(SourceDocument_ProjectTimesheets) && sourceDocumentTypeEnumValue == SourceDocument_ProjectTimesheets::Timesheets)
            {
                committedCostOrig = CommittedCostOrig::Timesheets;
            }
            else if (enumId == enumNum(BudgetReservation_SourceDocument_PSN) && sourceDocumentTypeEnumValue == enum2int(BudgetReservation_SourceDocument_PSN::BudgetReservation))
            {
                committedCostOrig = CommittedCostOrig::BudgetReservation_PSN;
            }
            else if (enumId == enumNum(SourceDocument_ProjAdvancedJournal) && sourceDocumentTypeEnumValue == SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal)
            {
                committedCostOrig = CommittedCostOrig::ProjAdvancedJournal;
            }
            else
            {
                throw error(strFmt("@SYS22828", funcName()));
            }
        }

        return committedCostOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the project cost amount of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// The currency code of the project cost amount.
    /// </returns>
    public static CurrencyCode currencyIdCost(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        CurrencyCode    currencyIdCost;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            switch (ProjectSourceDocumentLineItemHelper::projTransType(_sourceDocumentLineItem))
            {
                case ProjTransType::Cost:
                case ProjTransType::Item:
                case ProjTransType::Hour:
                    currencyIdCost = _sourceDocumentLineItem.parmTransactionCurrencyCode();
                    break;

                case ProjTransType::Revenue:
                    currencyIdCost = '';
                    break;

                default:
                    throw error(strFmt("@SYS22828", funcName()));
            }
        }

        return currencyIdCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account for the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// The customer account for the source document line item.
    /// </returns>
    public static CustVendAC custAccount(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        CustVendAC              custAccount;
        SourceDocument          sourceDocument;
        SourceDocumentIParty    sourceDocumentIParty;
        CustVendTable           custVendTable;

        sourceDocument = _sourceDocumentLineItem.parmSourceDocument();
        if (sourceDocument is SourceDocumentIParty)
        {
            sourceDocumentIParty = sourceDocument as SourceDocumentIParty;
            custVendTable = sourceDocumentIParty.parmPartyAccount();
            if (custVendTable.TableId == tableNum(CustTable))
            {
                custAccount = custVendTable.AccountNum;
            }
        }

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBillingCodeVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustBillingCodeVersion</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// The <c>custBillingCodeVersion</c> record of the source document line item.
    /// </returns>
    public static CustBillingCodeVersion custBillingCodeVersion(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        CustInvoiceLineSourceDocLineItem       custInvoiceLineSourceDocLineItem;
        CustBillingCodeVersion                 custBillingCodeVersion;

        if (_sourceDocumentLineItem is CustInvoiceLineSourceDocLineItem)
        {
            custInvoiceLineSourceDocLineItem = _sourceDocumentLineItem as CustInvoiceLineSourceDocLineItem;
            custBillingCodeVersion = CustBillingCodeVersion::findByDate(custInvoiceLineSourceDocLineItem.parmCustBillingCode(), _sourceDocumentLineItem.parmAccountingDate());
        }

        return custBillingCodeVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the accounting date of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// The accounting date of the source document line item.
    /// </returns>
    public static AccountingDate custInvoiceAccountingDate(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        AccountingDate                          accountingDate;

        if ( _sourceDocumentLineItem is SourceDocLineItemICustInvJournalizing)
        {
            accountingDate = _sourceDocumentLineItem.parmAccountingDate();
        }

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CompanyInfo</c> record of a source document line implementation object.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// An instance of the <c>SourceDocumentLineImplementation</c> class.
    /// </param>
    /// <returns>
    /// A <c>CompanyInfo</c> record.
    /// </returns>
    public static CompanyInfo getProjectLegalEntity(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        SourceDocumentLineItemITimesheets       sourceDocumentLineItemITimesheets;
        SourceDocumentLineItemIExpenseReport    sourceDocumentLineItemIExpenseReport;
        TrvExpTrans                             trvExpTrans;

        if (_sourceDocumentLineItem is TSTimesheetTransSourceDocLineItem)
        {
            sourceDocumentLineItemITimesheets = _sourceDocumentLineItem as SourceDocumentLineItemITimesheets;
            return CompanyInfo::findRecId(sourceDocumentLineItemITimesheets.parmProjectLegalEntity());
        }
        else if (_sourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem)
        {
            ProjAdvancedJournalSourceDocumentLineItem projAdvancedJournalSourceDocumentLineItem = _sourceDocumentLineItem as ProjAdvancedJournalSourceDocumentLineItem;
            return CompanyInfo::findDataArea(projAdvancedJournalSourceDocumentLineItem.parmProjectDataAreaId());
        }
        else if (_sourceDocumentLineItem is SourceDocumentLineItemIExpenseReport)
        {
            sourceDocumentLineItemIExpenseReport = _sourceDocumentLineItem as SourceDocumentLineItemIExpenseReport;
            trvExpTrans = sourceDocumentLineItemIExpenseReport.parmExpenseLine() as TrvExpTrans;
            if (trvExpTrans.InterCompanyLE && trvExpTrans.InterCompanyLE != trvExpTrans.ReferenceDataAreaId)
            {
                return CompanyInfo::findDataArea(trvExpTrans.InterCompanyLE);
            }
            else
            {
                return CompanyInfo::findRecId(trvExpTrans.LegalEntity);
            }
        }
        else
        {
            return CompanyInfo::findRecId(_sourceDocumentLineItem.parmLegalEntityRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIntercompanyLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a given source document line item should use intercompany ledger accounts.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// <c>SourceDocumentLineItem</c> to checked.
    /// </param>
    /// <returns>
    /// true if intercompany ledger account should be used; false otherwise.
    /// </returns>
    public static boolean hasIntercompanyLedgerAccount(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        VendorInvoiceSourceDoc  vendorInvoiceSourceDoc;

        if (_sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
        {
            vendorInvoiceSourceDoc = _sourceDocumentLineItem.parmSourceDocument();
            if (vendorInvoiceSourceDoc.parmPartyAccount().interCompanyTradingRelationActive())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProject</Name>
				<Source><![CDATA[
    public static boolean hasProject(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        SourceDocumentLineItemIProject    sourceDocumentLineItemIProject;

        boolean                         hasProject;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        sourceDocumentLineItemIProject = _sourceDocumentLineItem as SourceDocumentLineItemIProject;
        if (sourceDocumentLineItemIProject != null &&
            sourceDocumentLineItemIProject.parmProjectId() &&
            ProjectSourceDocumentLineItemHelper::isIntercompany(_sourceDocumentLineItem) == false)
        {
            hasProject = true;
        }

        return hasProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>implementsProject</Name>
				<Source><![CDATA[
    public static boolean implementsProject(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean implementsProject;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        if (_sourceDocumentLineItem is SourceDocumentLineItemIProject)
        {
            implementsProject = true;
        }

        return implementsProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>implementsProjectRevenue</Name>
				<Source><![CDATA[
    public static boolean implementsProjectRevenue(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean implementsProject;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        if (_sourceDocumentLineItem is SourceDocumentLineItemIProjectRevenue)
        {
            implementsProject = true;
        }

        return implementsProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>implementsProjectCustFreeInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a given source document line item is using customer Free Text Invoice document extension.
    /// line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// true if customer Free Text Invoice source document framework can handle a source document line item;
    /// otherwise, false.
    /// </returns>
    public static boolean implementsProjectCustFreeInvoice(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean implementsCustFreeInvoice;

        if (_sourceDocumentLineItem is CustInvoiceLineSourceDocLineItem)
        {
            implementsCustFreeInvoice = true;
        }

        return implementsCustFreeInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventDim</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>InventDim</c> record of the source document line item.
    /// </returns>
    public static InventDim inventDim(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocumentLineItemIInventory    sourceDocumentLineItemIInventory;
        InventDim                           inventDim;

        if (_sourceDocumentLineItem is SourceDocumentLineItemIInventory)
        {
            sourceDocumentLineItemIInventory = _sourceDocumentLineItem as SourceDocumentLineItemIInventory;

            if (sourceDocumentLineItemIInventory.parmInventoryDimensionId())
            {
                changecompany (ProjectSourceDocumentLineItemHelper::getProjectLegalEntity(_sourceDocumentLineItem).DataArea)
                {
                    inventDim = InventDim::find(sourceDocumentLineItemIInventory.parmInventoryDimensionId(), _forUpdate);
                }
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventTable</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>InventTable</c> record of the source document line item.
    /// </returns>
    public static InventTable inventTable(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocumentLineItemIProduct  sourceDocumentLineItemIProduct;
        InventTable                     inventTable;

        if (_sourceDocumentLineItem is SourceDocumentLineItemIProduct)
        {
            sourceDocumentLineItemIProduct = _sourceDocumentLineItem as SourceDocumentLineItemIProduct;

            inventTable = sourceDocumentLineItemIProduct.parmInventTable();
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAmountBased</Name>
				<Source><![CDATA[
    public static boolean isAmountBased(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean                     isAmountBased;
        int                         enumId;
        SourceDocumentTypeEnumValue sourceDocumentTypeEnumValue;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            enumId = enumName2Id(_sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumName);
            sourceDocumentTypeEnumValue = _sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumValue;

            if ((enumId == enumNum(SourceDocument_TravelRequisition) && sourceDocumentTypeEnumValue == SourceDocument_TravelRequisition::TravelRequisition)
				|| (enumId == enumNum(BudgetReservation_SourceDocument_PSN) && sourceDocumentTypeEnumValue == enum2int(BudgetReservation_SourceDocument_PSN::BudgetReservation)))
            {
                isAmountBased = true;
            }
        }

        return isAmountBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a given <c>SourceDocumentLineItem</c> is related to a project in another
    /// legal entity.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// <c>SourceDocumentLineItem</c> to be verified.
    /// </param>
    /// <returns>
    /// true if the given source document line is from a transaction for a project in a different legal
    /// entity; false otherwise.
    /// </returns>
    /// <remarks>
    /// All transactions related to projects in another legal entity are treated as non-project
    /// at the original company. They will be handled as project-related when they arrive at the
    /// company that owns the project, after the intercompany invoicing process.
    /// </remarks>
    public static boolean isIntercompany(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        SourceDocumentLineItemITimesheets       iTimesheet;
        SourceDocumentLineItemIExpenseReport    iExpense;
        TrvExpTrans                             trvExpTrans;
        VendorInvoiceLineSourceDocLineItem      vendorInvoiceSourceDocLine;

        if (_sourceDocumentLineItem is SourceDocumentLineItemITimesheets)
        {
            iTimesheet = _sourceDocumentLineItem as SourceDocumentLineItemITimesheets;
            if (iTimesheet.parmProjectLegalEntity() != _sourceDocumentLineItem.parmLegalEntityRecId())
            {
                return true;
            }
        }
        else if (_sourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem)
        {
            ProjAdvancedJournalSourceDocumentLineItem projAdvancedJournalSourceDocumentLineItem = _sourceDocumentLineItem as ProjAdvancedJournalSourceDocumentLineItem;

            if (projAdvancedJournalSourceDocumentLineItem.parmProjectLegalEntity() != projAdvancedJournalSourceDocumentLineItem.parmLegalEntityRecId())
            {
                return true;
            }
        }
        else if (_sourceDocumentLineItem is SourceDocumentLineItemIExpenseReport)
        {
            iExpense = _sourceDocumentLineItem as SourceDocumentLineItemIExpenseReport;
            trvExpTrans = iExpense.parmExpenseLine() as trvExpTrans;

            if (trvExpTrans.isIntercompany())
            {
                return true;
            }
        }
        else if (_sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
        {
            vendorInvoiceSourceDocLine = _sourceDocumentLineItem;
            if (vendorInvoiceSourceDocLine.parmProjectDataAreaId() != vendorInvoiceSourceDocLine.parmLegalEntityDataAreaId())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerPostingTypeProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a ledger posting type is for a project.
    /// </summary>
    /// <param name="_ledgerPostingType">
    /// The ledger posting type.
    /// </param>
    /// <returns>
    /// true if a ledger posting type is for a project; otherwise, false.
    /// </returns>
    public static boolean isLedgerPostingTypeProject(LedgerPostingType _ledgerPostingType)
    {
        switch (_ledgerPostingType)
        {
            case LedgerPostingType::ProjStatusAccountItem:
            case LedgerPostingType::ProjWIPCostvalue:
            case LedgerPostingType::ProjCost:
            case LedgerPostingType::ProjSalesvalue:
            case LedgerPostingType::ProjSalesvalueOffset:
            case LedgerPostingType::ProjTurnover:
            case LedgerPostingType::ProjNeverLedger:
            case LedgerPostingType::ProjNoLedger:
            case LedgerPostingType::IntercompanyCost:
            case LedgerPostingType::ProjOffsetAccountItem:
            case LedgerPostingType::ProjProcurementIntegration:
            return true;

            case LedgerPostingType::PurchAdvanceApplication:
                return (ProjParameters::find().PostPrepaymentCostToProject == NoYes::Yes) ? true : false;
    
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayrollMonetaryAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not a given monetary amount is used in payroll documents.
    /// </summary>
    /// <param name="_monetaryAmount">
    /// the <c>MonetaryAmount</c> to check
    /// </param>
    /// <returns>
    /// true if the <c>MonetaryAmount</c> is used in payroll documents.
    /// </returns>
    public static boolean isPayrollMonetaryAmount(MonetaryAmount _monetaryAmount)
    {
        boolean checkPayrollMonetaryAmount;

        checkPayrollMonetaryAmount = _monetaryAmount == MonetaryAmount::PayrollCost
                                || _monetaryAmount == MonetaryAmount::PayrollLiability;

        return checkPayrollMonetaryAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayrollProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the source document that is associated with the source document, belongs to payroll.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// true, if the source document that is associated with the source document, belongs to payroll; otherwise, false.
    /// </returns>
    public static boolean isPayrollProject(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean isPayrollProjectDocument;

        if (isConfigurationkeyEnabled(configurationKeyNum(PayrollAdministration))
            && (_sourceDocumentLineItem is PayrollEarningStatementSourceDocLineItem
                || _sourceDocumentLineItem is PayrollPayStatementSourceDocumentLine))
        {
            isPayrollProjectDocument = true;
        }

        return isPayrollProjectDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the source document line item is for a project.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// True if source document line item is for a project; otherwise, false.
    /// </returns>
    public static boolean isProject(RefRecId _sourceDocumentLine)
    {
        SourceDocumentLineItem              sourceDocumentLineItem;
        SourceDocumentLineItemIProject      sourceDocumentLineItemIProject;
        boolean                             isProject;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(_sourceDocumentLine);

        if (ProjectSourceDocumentLineItemHelper::implementsProject(sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProject = sourceDocumentLineItem as SourceDocumentLineItemIProject;

            if (sourceDocumentLineItemIProject.parmProjectId() &&
                ProjectSourceDocumentLineItemHelper::isIntercompany(sourceDocumentLineItem) == false)
            {
                isProject = true;
            }
        }

        return isProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the source document line is for accruing project revenue.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// True if source document line is for accruing project revenue; otherwise, false.
    /// </returns>
    public static boolean isProjectRevenue(RefRecId _sourceDocumentLine)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;
        boolean                 isProjectRevenue;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(_sourceDocumentLine));

        if (ProjectSourceDocumentLineItemHelper::implementsProjectRevenue(sourceDocumentLineItem))
        {
            isProjectRevenue = true;
        }

        return isProjectRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payrollProjTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>projTransType</c> for a <c>SourceDocumentLineItem</c>
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// the <c>SourceDocumentLineItem</c> to get the <c>projTransType</c> for.
    /// </param>
    /// <returns>
    /// The correct <c>projTransType</c>
    /// </returns>
    public static ProjTransType payrollProjTransType(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        PayrollEarningStatementSourceDocLineItem    earnignStatementSourceDocLineItem;
        ProjTransType                               projTransType;
        PayrollPayStatementSourceDocumentLine       payStatementSourceDocumentLine;

        if (_sourceDocumentLineItem is PayrollEarningStatementSourceDocLineItem)
        {
            earnignStatementSourceDocLineItem = _sourceDocumentLineItem as PayrollEarningStatementSourceDocLineItem;
            projTransType = earnignStatementSourceDocLineItem.parmProjectTransType();
        }
        else if (_sourceDocumentLineItem is PayrollPayStatementSourceDocumentLine)
        {
            payStatementSourceDocumentLine = _sourceDocumentLineItem as PayrollPayStatementSourceDocumentLine;
            projTransType = payStatementSourceDocumentLine.parmProjectTransType();
        }

        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ProjCategory</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>ProjCategory</c> record of the source document line item.
    /// </returns>
    public static ProjCategory projCategory(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocumentLineItemIProject  sourceDocumentLineItemIProject;
        ProjCategory                    projCategory;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProject = _sourceDocumentLineItem as SourceDocumentLineItemIProject;

            if (sourceDocumentLineItemIProject.parmProjectCategoryId())
            {
                changecompany (ProjectSourceDocumentLineItemHelper::getProjectLegalEntity(_sourceDocumentLineItem).DataArea)
                {
                    projCategory = ProjCategory::find(sourceDocumentLineItemIProject.parmProjectCategoryId(), _forUpdate);
                }
            }
        }

        return projCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategoryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project category type of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// The project category type of the source document line item.
    /// </returns>
    public static ProjCategoryType projCategoryType(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        ProjCategoryType    projectCategoryType;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            switch (ProjectSourceDocumentLineItemHelper::projTransType(_sourceDocumentLineItem))
            {
                case ProjTransType::Cost:
                    projectCategoryType = ProjCategoryType::Cost;
                    break;

                case ProjTransType::Item:
                    projectCategoryType = ProjCategoryType::Item;
                    break;

                case ProjTransType::Revenue:
                    projectCategoryType = ProjCategoryType::Revenue;
                    break;

                case ProjTransType::Hour:
                    projectCategoryType = ProjCategoryType::Hour;
                    break;

                default:
                    throw error(strFmt("@SYS22828", funcName()));
            }
        }

        return projectCategoryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ProjFundingSource</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>ProjFundingSource</c> record of the source document line item.
    /// </returns>
    public static ProjFundingSource projFundingSource(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocumentLineItemIProject  sourceDocumentLineItemIProject;
        ProjFundingSource               projFundingSource;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProject = _sourceDocumentLineItem as SourceDocumentLineItemIProject;

            if (sourceDocumentLineItemIProject.parmProjectFundingSourceRecId())
            {
                changecompany (ProjectSourceDocumentLineItemHelper::getProjectLegalEntity(_sourceDocumentLineItem).DataArea)
                {
                    projFundingSource = ProjFundingSource::find(sourceDocumentLineItemIProject.parmProjectFundingSourceRecId(), _forUpdate);
                }
            }
        }

        return projFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLineProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ProjLineProperty</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>ProjLineProperty</c> record of the source document line item.
    /// </returns>
    public static ProjLineProperty projLineProperty(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocumentLineItemIProject  sourceDocumentLineItemIProject;
        ProjLineProperty                projLineProperty;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProject = _sourceDocumentLineItem as SourceDocumentLineItemIProject;

            if (sourceDocumentLineItemIProject.parmProjectLineProperty())
            {
                changecompany (ProjectSourceDocumentLineItemHelper::getProjectLegalEntity(_sourceDocumentLineItem).DataArea)
                {
                    projLineProperty = ProjLineProperty::find(sourceDocumentLineItemIProject.parmProjectLineProperty(), _forUpdate);
                }
            }
        }

        return projLineProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project transaction origin of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// The project transaction origin of the source document line item.
    /// </returns>
    public static ProjOrigin projOrigin(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        ProjOrigin projOrigin = ProjectSourceDocumentLineItemHelper::initializeProjOrigin(_sourceDocumentLineItem);
        
        if (!projOrigin && ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            throw error(strFmt("@SYS22828", funcName()));
        }
        
        return projOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ProjTable</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>ProjTable</c> record of the source document line item.
    /// </returns>
    public static ProjTable projTable(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocumentLineItemIProject  sourceDocumentLineItemIProject;
        ProjTable                       projTable;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProject = _sourceDocumentLineItem as SourceDocumentLineItemIProject;

            if (sourceDocumentLineItemIProject.parmProjectId())
            {
                changecompany (ProjectSourceDocumentLineItemHelper::getProjectLegalEntity(_sourceDocumentLineItem).DataArea)
                {
                    projTable = ProjTable::find(sourceDocumentLineItemIProject.parmProjectId(), _forUpdate);
                }
            }
        }

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project transaction type of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// The project transaction type of the source document line item.
    /// </returns>
    public static ProjTransType projTransType(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        ProjTransType projTransType = ProjectSourceDocumentLineItemHelper::initializeProjTransType(_sourceDocumentLineItem);
        
        if (!projTransType && ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales <c>Currency</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The sales <c>Currency</c> record of the source document line item.
    /// </returns>
    public static Currency salesCurrency(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocumentLineItemIProjectRevenue   sourceDocumentLineItemIProjectRevenue;
        Currency                                currency;

        if (ProjectSourceDocumentLineItemHelper::implementsProjectRevenue(_sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProjectRevenue = _sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;

            if (sourceDocumentLineItemIProjectRevenue.parmProjectSalesCurrencyCode())
            {
                currency = Currency::find(sourceDocumentLineItemIProjectRevenue.parmProjectSalesCurrencyCode(), _forUpdate);
            }
        }

        return currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTaxGroupHeading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales <c>TaxGroupHeading</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The sales <c>TaxGroupHeading</c> record of the source document line item.
    /// </returns>
    public static TaxGroupHeading salesTaxGroupHeading(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocumentLineItemIProjectRevenue   sourceDocumentLineItemIProjectRevenue;
        TaxGroupHeading                         taxGroupHeading;

        if (ProjectSourceDocumentLineItemHelper::implementsProjectRevenue(_sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProjectRevenue = _sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;

            if (sourceDocumentLineItemIProjectRevenue.parmProjectSalesTaxGroup())
            {
                changecompany (ProjectSourceDocumentLineItemHelper::getProjectLegalEntity(_sourceDocumentLineItem).DataArea)
                {
                    taxGroupHeading = TaxGroupHeading::find(sourceDocumentLineItemIProjectRevenue.parmProjectSalesTaxGroup(), _forUpdate);
                }
            }
        }

        return taxGroupHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTaxItemGroupHeading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales <c>TaxItemGroupHeading</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The sales <c>TaxItemGroupHeading</c> record of the source document line item.
    /// </returns>
    public static TaxItemGroupHeading salesTaxItemGroupHeading(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocumentLineItemIProjectRevenue   sourceDocumentLineItemIProjectRevenue;
        TaxItemGroupHeading                     taxItemGroupHeading;

        if (ProjectSourceDocumentLineItemHelper::implementsProjectRevenue(_sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProjectRevenue = _sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;

            if (sourceDocumentLineItemIProjectRevenue.parmProjectItemSalesTaxGroup())
            {
                changecompany (ProjectSourceDocumentLineItemHelper::getProjectLegalEntity(_sourceDocumentLineItem).DataArea)
                {
                    taxItemGroupHeading = TaxItemGroupHeading::find(sourceDocumentLineItemIProjectRevenue.parmProjectItemSalesTaxGroup(), _forUpdate);
                }
            }
        }

        return taxItemGroupHeading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>smmActivities</c> record of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The <c>smmActivities</c> record of the source document line item.
    /// </returns>
    public static smmActivities smmActivities(SourceDocumentLineItem _sourceDocumentLineItem, boolean _forUpdate = false)
    {
        SourceDocumentLineItemIProject  sourceDocumentLineItemIProject;
        smmActivities                   smmActivities;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            sourceDocumentLineItemIProject = _sourceDocumentLineItem as SourceDocumentLineItemIProject;

            if (sourceDocumentLineItemIProject.parmProjectActivityNumber())
            {
                changecompany (ProjectSourceDocumentLineItemHelper::getProjectLegalEntity(_sourceDocumentLineItem).DataArea)
                {
                    smmActivities = smmActivities::find(sourceDocumentLineItemIProject.parmProjectActivityNumber(), _forUpdate);
                }
            }
        }

        return smmActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentHasProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified source document line item is part of a source document that has project information.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_sourceDocument">
    /// The source document to check for the existence of project; optional.
    /// </param>
    /// <returns>
    /// True if the specified source document line item is part of a source document that has project information.
    /// </returns>
    public static boolean sourceDocumentHasProject(
        SourceDocumentLineItem _sourceDocumentLineItem,
        SourceDocument         _sourceDocument = null)
    {
        PurchaseOrderSourceDocument             purchaseOrder;
        boolean                                 retval = false;
        UnknownNoYes                            unknownYesNo;
        SourceDocument                          sourceDocument;
        RefRecId                                custInvoiceTableRecId;
        CustInvoiceLine                         custInvoiceLine;
        CustInvoiceSourceDoc                    custInvoiceSourceDoc;
        SourceDocumentHeaderRecId               sourceDocumentHeaderRecId;

        if (_sourceDocumentLineItem || _sourceDocument)
        {
            sourceDocumentHeaderRecId = _sourceDocument? _sourceDocument.parmSourceDocumentHeader().RecId : _sourceDocumentLineItem.parmSourceDocumentHeaderRecId();
            unknownYesNo = SysTransactionScopeCache::get(classStr(ProjectSourceDocumentLineItemHelper), sourceDocumentHeaderRecId, UnknownNoYes::Unknown);

            if (unknownYesNo == UnknownNoYes::Unknown)
            {
                sourceDocument = _sourceDocument? _sourceDocument : _sourceDocumentLineItem.parmSourceDocument();

                // We always want to subscribe to accounting distribution event handlers unless we are absolutely sure that source document does not have project
                unknownYesNo = UnknownNoYes::Yes;

                if (sourceDocument is PurchaseOrderSourceDocument)
                {
                    purchaseOrder = sourceDocument as PurchaseOrderSourceDocument;
                    unknownYesNo = (purchaseOrder.parmProjId() != '') ? UnknownNoYes::Yes : UnknownNoYes::No;
                }
                else if (sourceDocument is CustInvoiceSourceDoc)
                {
                    custInvoiceSourceDoc = sourceDocument as CustInvoiceSourceDoc;

                    custInvoiceTableRecId = custInvoiceSourceDoc.parmCustInvoiceTableRecId();

                    select firstonly RecId from custInvoiceLine
                        where custInvoiceLine.ParentRecId == custInvoiceTableRecId &&
                              custInvoiceLine.ProjId != '';

                    unknownYesNo = custInvoiceLine.RecId ? UnknownNoYes::Yes : UnknownNoYes::No;
                }
                else if (sourceDocument is ProductReceiptSourceDocument)
                {
                    if (SourceDocumentDistributeDocumentToAllowSetBasedTransitionFlight::instance().isEnabled())
                    {
                        unknownYesNo = UnknownNoYes::No;
                    }
                }
                else if (sourceDocument is AdvancedLedgerEntrySourceDocument)
                {
                    if (SourceDocumentDistributeDocumentToAllowSetBasedTransitionFlight::instance().isEnabled())
                    {
                        if (_sourceDocumentLineItem)
                        {
                            AdvancedLedgerEntryLineSourceDocLineItem advancedLedgerEntryLineSourceDocLineItem =
                                _sourceDocumentLineItem as AdvancedLedgerEntryLineSourceDocLineItem;
                    
                            unknownYesNo = (advancedLedgerEntryLineSourceDocLineItem.parmProjectId() != '') ? UnknownNoYes::Yes : UnknownNoYes::No;
                        }
                        else
                        {
                            AdvancedLedgerEntryLine advancedLedgerEntryLine;
                            AdvancedLedgerEntryHeader advancedLedgerEntryHeader;

                            AdvancedLedgerEntrySourceDocument advancedLedgerEntrySourceDocument = sourceDocument as AdvancedLedgerEntrySourceDocument;

                            select firstonly RecId from advancedLedgerEntryHeader
                                where advancedLedgerEntryHeader.SourceDocumentHeader == advancedLedgerEntrySourceDocument.parmSourceDocumentHeader().RecId
                            join RecId from advancedLedgerEntryLine
                                where advancedLedgerEntryLine.AdvancedLedgerEntryHeader == advancedLedgerEntryHeader.RecId &&
                                    advancedLedgerEntryLine.ProjId != '';

                            unknownYesNo = (advancedLedgerEntryHeader.RecId != 0) ? UnknownNoYes::Yes : UnknownNoYes::No;
                        }
                    }
                }

                SysTransactionScopeCache::set(classStr(ProjectSourceDocumentLineItemHelper), sourceDocument.parmSourceDocumentHeader().RecId, unknownYesNo);
            }

            if (unknownYesNo == UnknownNoYes::Yes)
            {
                retval = true;
            }
            else
            {
                retval = false;
            }
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineItemTopParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SourceDocumentLineItem</c> class for the source document line
    /// item's top parent.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line.
    /// </param>
    /// <returns>
    /// A new instance of the <c>SourceDocumentLineItem</c> class for the source document line item's top
    /// parent.
    /// </returns>
    public static SourceDocumentLineItem sourceDocumentLineItemTopParent(RefRecId _sourceDocumentLine)
    {
        SourceDocumentLineItem  sourceDocumentLineItem;
        SourceDocumentLine      sourceDocumentLine;

        if (_sourceDocumentLine)
        {
            sourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLine);
            if (sourceDocumentLine)
            {
                sourceDocumentLineItem = SourceDocumentLineItem::getFromCache(sourceDocumentLine);
                if (sourceDocumentLineItem == null)
                {
                    sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);                    
                }
            }
        }

        return sourceDocumentLineItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project cost amount of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item
    /// </param>
    /// <param name="_sourceDocumentAmount">
    /// The source document amount; optional.
    /// </param>
    /// <returns>
    /// The project cost amount of the source document line item.
    /// </returns>
    public static Amount transCostAmount(SourceDocumentLineItem _sourceDocumentLineItem, SourceDocumentAmount _sourceDocumentAmount = null)
    {
        SourceDocumentAmountMap sourceDocumentAmountMap;
        SourceDocumentAmount    sourceDocumentAmount;
        Amount                  transCost;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            switch (ProjectSourceDocumentLineItemHelper::projTransType(_sourceDocumentLineItem))
            {
                case ProjTransType::Cost:
                case ProjTransType::Item:
                case ProjTransType::Hour:
                    sourceDocumentAmountMap = _sourceDocumentLineItem.parmSourceDocumentAmountMap();

                    if (sourceDocumentAmountMap.exists(MonetaryAmount::PayrollCost))
                    {
                        sourceDocumentAmount = sourceDocumentAmountMap.getSourceDocumentAmount(MonetaryAmount::PayrollCost);
                        transCost = sourceDocumentAmount.parmAmount();
                    }
                    else if (sourceDocumentAmountMap.exists(MonetaryAmount::PayrollLiability))
                    {
                        sourceDocumentAmount = sourceDocumentAmountMap.getSourceDocumentAmount(MonetaryAmount::PayrollLiability);
                        transCost = sourceDocumentAmount.parmAmount();
                    }
                    else if (sourceDocumentAmountMap.exists(MonetaryAmount::ExtendedPrice))
                    {
                        if (_sourceDocumentAmount && _sourceDocumentAmount.parmMonetaryAmount() == MonetaryAmount::WorkInProcess)
                        {
                            // There could be two monetary amounts on the source document map.  Ensure correct one is processed.
                            sourceDocumentAmount = sourceDocumentAmountMap.getSourceDocumentAmount(MonetaryAmount::WorkInProcess);
                            transCost = sourceDocumentAmount.parmAmount();
                        }
                        else
                        {
                            sourceDocumentAmount = sourceDocumentAmountMap.getSourceDocumentAmount(MonetaryAmount::ExtendedPrice);
                            transCost = sourceDocumentAmount.parmAmount();
                        }
                    }
                    break;

                case ProjTransType::Revenue:
                    transCost = 0;
                    break;

                default:
                    throw error(strFmt("@SYS22828", funcName()));
            }
        }

        return transCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project cost amount of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item
    /// </param>
    /// <returns>
    /// The project cost amount of the source document line item.
    /// </returns>
    public static Amount transCost(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        return ProjectSourceDocumentLineItemHelper::transCostAmount(_sourceDocumentLineItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project revenue amount of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item
    /// </param>
    /// <returns>
    /// The project revenue amount of the source document line item.
    /// </returns>
    public static AmountCur transTurnover(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        SourceDocumentLineItemIProjectRevenue   sourceDocumentLineItemIProjectRevenue;
        SourceDocumentLineItemIProductQuantity  sourceDocumentLineItemIProductQuantity;
        AmountCur                               transTurnover;
        
        if (ProjectSourceDocumentLineItemHelper::implementsProjectRevenue(_sourceDocumentLineItem))
        {
            if (_sourceDocumentLineItem is SourceDocumentLineItemIProductQuantity)
            {
                sourceDocumentLineItemIProductQuantity = _sourceDocumentLineItem as SourceDocumentLineItemIProductQuantity;
            }

            sourceDocumentLineItemIProjectRevenue = _sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;

            if (_sourceDocumentLineItem is SourceDocumentLineItemIProduct &&
            ProjectSourceDocumentLineItemHelper::verifyCostPriceEqualsSalesPrice(_sourceDocumentLineItem))
            {
                Amount transCost = ProjectSourceDocumentLineItemHelper::transCost(_sourceDocumentLineItem);
                
                CurrencyCode projectSalesCurrencyCode = sourceDocumentLineItemIProjectRevenue.parmProjectSalesCurrencyCode();
                CurrencyCode transactionCurrencyCode  = _sourceDocumentLineItem.parmTransactionCurrencyCode();

                transTurnover = (transactionCurrencyCode != projectSalesCurrencyCode) ?
                            CurrencyExchangeHelper::curAmount2CurAmount(transCost,
                                transactionCurrencyCode,
                                projectSalesCurrencyCode,
                                _sourceDocumentLineItem.parmAccountingDate(),
                                false) :
                            transCost;
            }
            else if (_sourceDocumentLineItem is TSTimesheetTransSourceDocLineItem)
            {
                TSTimesheetTransSourceDocLineItem tsTimesheetTransSourceDocLineItem = _sourceDocumentLineItem as TSTimesheetTransSourceDocLineItem;
                transTurnover = (tsTimesheetTransSourceDocLineItem && tsTimesheetTransSourceDocLineItem.parmQuantity() ? tsTimesheetTransSourceDocLineItem.parmQuantity() : 1) * sourceDocumentLineItemIProjectRevenue.parmProjectSalesPrice();
            }
            else if (_sourceDocumentLineItem is ProjAdvancedJournalSourceDocumentLineItem)
            {
                ProjAdvancedJournalSourceDocumentLineItem projAdvancedJournalSourceDocumentLineItem = _sourceDocumentLineItem as ProjAdvancedJournalSourceDocumentLineItem;
                transTurnover = CurrencyExchangeHelper::amount((projAdvancedJournalSourceDocumentLineItem ? projAdvancedJournalSourceDocumentLineItem.parmQuantity() : 0) * sourceDocumentLineItemIProjectRevenue.parmProjectSalesPrice(), sourceDocumentLineItemIProjectRevenue.parmProjectSalesCurrencyCode());
            }
            else
            {
                transTurnover = CurrencyExchangeHelper::amount((sourceDocumentLineItemIProductQuantity && sourceDocumentLineItemIProductQuantity.parmQuantity() ? sourceDocumentLineItemIProductQuantity.parmQuantity() : 1) * sourceDocumentLineItemIProjectRevenue.parmProjectSalesPrice(), sourceDocumentLineItemIProjectRevenue.parmProjectSalesCurrencyCode());
            }
        }

        return transTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project transaction text of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// The project transaction text of the source document line item.
    /// </returns>
    public static Description255 transTxt(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        Description255              transactionText;
        Common                      sourceDocumentLineImplementation;
        TrvExpTrans                 trvExpTrans;
        int                         enumId;
        SourceDocumentTypeEnumValue sourceDocumentTypeEnumValue;
        TSTimesheetTrans            tsTimesheetTrans;
        VendInvoiceTrans            vendInvoiceTrans;
        AdvancedLedgerEntryLine     advancedLedgerEntryLine;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            enumId = enumName2Id(_sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumName);
            sourceDocumentTypeEnumValue = _sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumValue;

            if (enumId == enumNum(SourceDocument_ExpenseReport) && sourceDocumentTypeEnumValue == SourceDocument_ExpenseReport::ExpenseReport)
            {
                sourceDocumentLineImplementation = _sourceDocumentLineItem.parmSourceDocumentLine().getSourceDocumentLineImplementation();
                trvExpTrans = sourceDocumentLineImplementation;
                transactionText = trvExpTrans.AdditionalInformation;
            }
            else if (enumId == enumNum(SourceDocument_ProjectTimesheets) && sourceDocumentTypeEnumValue == SourceDocument_ProjectTimesheets::Timesheets)
            {
                sourceDocumentLineImplementation = _sourceDocumentLineItem.parmSourceDocumentLine().getSourceDocumentLineImplementation();
                tsTimesheetTrans = sourceDocumentLineImplementation;
                transactionText = tsTimesheetTrans.ExtComment;
            }
            else if (enumId == enumNum(SourceDocument_AdvancedLedgerEntry)
                     && sourceDocumentTypeEnumValue == SourceDocument_AdvancedLedgerEntry::AdvancedLedgerEntry)
            {
                sourceDocumentLineImplementation = _sourceDocumentLineItem.parmSourceDocumentLine().getSourceDocumentLineImplementation();
                advancedLedgerEntryLine = sourceDocumentLineImplementation;
                transactionText = advancedLedgerEntryLine.TransactionText;
            }
            else if (enumId == enumNum(SourceDocument_VendorInvoice) && sourceDocumentTypeEnumValue == SourceDocument_VendorInvoice::VendorInvoice)
            {
                sourceDocumentLineImplementation = _sourceDocumentLineItem.parmSourceDocumentLine().getSourceDocumentLineImplementation();
                vendInvoiceTrans = VendInvoiceTrans::findRecId(sourceDocumentLineImplementation.RecId);
                transactionText = vendInvoiceTrans.Description ? vendInvoiceTrans.Description : vendInvoiceTrans.Name;                                 
            }
            else if (enumId == enumNum(SourceDocument_CustomerInvoice) && sourceDocumentTypeEnumValue == SourceDocument_CustomerInvoice::CustomerFreeTextInvoice)
            {
                CustInvoiceLine custInvoiceLine= _sourceDocumentLineItem.parmSourceDocumentLine().getSourceDocumentLineImplementation();
                transactionText = custInvoiceLine.Description;
            }
            else if (enumId == enumNum(SourceDocument_ProjAdvancedJournal) && sourceDocumentTypeEnumValue == SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal)
            {
                ProjAdvancedJournalLine projAdvancedJournalLine = _sourceDocumentLineItem.parmSourceDocumentLine().getSourceDocumentLineImplementation();
                transactionText = projAdvancedJournalLine.Text;
            }
        }

        return transactionText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the distribution template should be used or not.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <param name="_monetaryAmount">
    /// The amount for the line item
    /// </param>
    /// <returns>
    /// true if the distribution template should be used, otherwise false.
    /// </returns>
    public static boolean useTemplate(SourceDocumentLineItem _sourceDocumentLineItem, MonetaryAmount _monetaryAmount)
    {
        if (!_sourceDocumentLineItem.parmSourceDocumentLineItemConstraint().atMostOneDistribution() &&
            _sourceDocumentLineItem.parmSourceDocumentLineItemConstraint().proRateUsingDistributionTemplate() &&
            (_monetaryAmount != MonetaryAmount::TotalDiscountRounding &&
                 _monetaryAmount != MonetaryAmount::RoundingAmount))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor account for the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// The vendor account for the source document line item.
    /// </returns>
    public static CustVendAC vendAccount(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        CustVendAC              vendAccount;
        SourceDocument          sourceDocument;

        CustVendAC vendAccount(SourceDocumentIParty _sourceDocumentIParty)
        {
            CustVendTable   custVendTable;
            CustVendAC      ret;

            custVendTable = _sourceDocumentIParty.parmPartyAccount();
            if (custVendTable.TableId == tableNum(VendTable))
            {
                ret = custVendTable.AccountNum;
            }

            return ret;
        }

        if (_sourceDocumentLineItem is SourceDocumentIParty)
        {
            vendAccount = vendAccount(_sourceDocumentLineItem as SourceDocumentIParty);
        }
        else
        {
            sourceDocument = _sourceDocumentLineItem.parmSourceDocument();
            if (sourceDocument is SourceDocumentIParty)
            {
                vendAccount = vendAccount(sourceDocument as SourceDocumentIParty);
            }
        }

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntercompanyPartnerDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the other company in an intercompany trading transaction.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// <c>SourceDocumentLineItem</c> from an intercompany transaction..
    /// </param>
    /// <returns>
    /// The record ID of the intercompany partner.
    /// </returns>
    public static LegalEntityRecId getIntercompanyPartnerDataAreaId(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        VendorInvoiceSourceDoc  vendorInvoiceSourceDoc;
        DataAreaId              intercompanyPartnerId;
        LegalEntityRecId        companyRecId;

        if (_sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
        {
            vendorInvoiceSourceDoc = _sourceDocumentLineItem.parmSourceDocument();
            intercompanyPartnerId = vendorInvoiceSourceDoc.parmPartyAccount().interCompanyTradingPartnerCompanyID();
            companyRecId = CompanyInfo::findDataArea(intercompanyPartnerId).RecId;
        }

        return companyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTransactionCacheEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the clearing transaction scope cache event notification.
    /// </summary>
    [SubscribesTo(classStr(SourceDocumentLineStateAsyncTransition), staticDelegateStr(SourceDocumentLineStateAsyncTransition, clearingTransactionCache))]
    public static void clearTransactionCacheEventHandler()
    {
        SysTransactionScopeCache::clear(classStr(ProjectSourceDocumentLineItemHelper));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjCategoryTypeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the Project category type of the source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// True if category type is item ; otherwise false;
    /// </returns>
    public static boolean isProjCategoryTypeItem(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean isItemTypeCategory = false;

        ProjCategoryId projCategoryId;
        if (_sourceDocumentLineItem is SourceDocumentLineItemIProject)
        {
            SourceDocumentLineItemIProject iProject = _sourceDocumentLineItem as SourceDocumentLineItemIProject;
            projCategoryId = iProject.parmProjectCategoryId();
        }
        else if (_sourceDocumentLineItem is SourceDocumentLineItemIProjectRevenue)
        {
            SourceDocumentLineItemIProjectRevenue iProjectRevenue = _sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;
            projCategoryId = iProjectRevenue.parmProjectCategoryId();
        }

        if (projCategoryId)
        {
            ProjCategoryType categoryType = ProjCategory::find(projCategoryId).CategoryType;
            if (categoryType == ProjCategoryType::Item)
            {
                isItemTypeCategory = true;
            }
        }

        return isItemTypeCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the enum value for <c>ProjOrigin</c>.
    /// </summary>
    /// <param name = "_sourceDocumentLineItem">
    ///     The source document line item.
    /// </param>
    /// <returns>
    ///     The project transaction origin of the source document line item.
    /// </returns>
    protected static ProjOrigin initializeProjOrigin(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        ProjOrigin                          projOriginLocal;
        int                                 enumId;
        SourceDocumentTypeEnumValue         sourceDocumentTypeEnumValue;
        SourceDocumentLineImplementation    sourceDocumentLineImplementation;
        VendInvoiceInfoLine                 vendInvoiceInfoLine;
        VendInvoiceTrans                    vendInvoiceTrans;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            enumId = enumName2Id(_sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumName);
            sourceDocumentTypeEnumValue = _sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumValue;

            if (enumId == enumNum(SourceDocument_ProductRequisition) && sourceDocumentTypeEnumValue == SourceDocument_ProductRequisition::PurchaseRequisition)
            {
                projOriginLocal = ProjOrigin::PurchaseRequisition;
            }
            else if (enumId == enumNum(SourceDocument_ProductOrder) && sourceDocumentTypeEnumValue == SourceDocument_ProductOrder::PurchaseOrder)
            {
                projOriginLocal = ProjOrigin::PurchaseOrder;
            }
            else if (enumId == enumNum(SourceDocument_VendorInvoice) && sourceDocumentTypeEnumValue == SourceDocument_VendorInvoice::VendorInvoice)
            {
                projOriginLocal = ProjOrigin::PurchaseOrder;
                sourceDocumentLineImplementation = _sourceDocumentLineItem.parmSourceDocumentLine().getSourceDocumentLineImplementation();
                if (sourceDocumentLineImplementation)
                {
                    if (sourceDocumentLineImplementation.TableId == tableNum(VendInvoiceInfoLine))
                    {
                        vendInvoiceInfoLine = sourceDocumentLineImplementation;
                        if (vendInvoiceInfoLine.isNonPO())
                        {
                            projOriginLocal = ProjOrigin::VendorInvoice;
                        }
                    }

                    if (sourceDocumentLineImplementation.TableId == tableNum(VendInvoiceTrans))
                    {
                        VendInvoiceTrans = sourceDocumentLineImplementation;
                        if (VendInvoiceTrans.isNonPO())
                        {
                            projOriginLocal = ProjOrigin::VendorInvoice;
                        }
                    }
                }
            }
            else if (enumId == enumNum(SourceDocument_CustomerInvoice) && sourceDocumentTypeEnumValue == SourceDocument_CustomerInvoice::CustomerFreeTextInvoice)
            {
                projOriginLocal = ProjOrigin::FreeTextInvoice;
            }
            else if (enumId == enumNum(SourceDocument_TravelRequisition) && sourceDocumentTypeEnumValue == SourceDocument_TravelRequisition::TravelRequisition)
            {
                projOriginLocal = ProjOrigin::ExpenseManagement;
            }
            else if (enumId == enumNum(SourceDocument_ExpenseReport) && sourceDocumentTypeEnumValue == SourceDocument_ExpenseReport::ExpenseReport)
            {
                projOriginLocal = ProjOrigin::ExpenseManagement;
            }
            else if (enumId == enumNum(SourceDocument_ProjectTimesheets) && sourceDocumentTypeEnumValue == SourceDocument_ProjectTimesheets::Timesheets)
            {
                projOriginLocal = ProjOrigin::Timesheet;
            }

            else if (enumId == enumNum(SourceDocument_AdvancedLedgerEntry) && sourceDocumentTypeEnumValue == SourceDocument_AdvancedLedgerEntry::AdvancedLedgerEntry)
            {
                projOriginLocal = ProjOrigin::AdvancedLedgerEntry;
            }
            else if (enumId == enumNum(SourceDocument_EarningStatement) && sourceDocumentTypeEnumValue == SourceDocument_EarningStatement::EarningStatement)
            {
                projOriginLocal = ProjOrigin::PayrollEarningStatement;
            }
            else if (enumId == enumNum(SourceDocument_PayrollPayStatement) && sourceDocumentTypeEnumValue == SourceDocument_PayrollPayStatement::PayStatement)
            {
                projOriginLocal = ProjOrigin::PayrollPayStatement;
            }
            else if (enumId == enumNum(BudgetReservation_SourceDocument_PSN) && sourceDocumentTypeEnumValue == enum2int(BudgetReservation_SourceDocument_PSN::BudgetReservation))
            {
                projOriginLocal = ProjOrigin::BudgetReservation;
            }
            else if (enumId == enumNum(SourceDocument_ProjAdvancedJournal) && sourceDocumentTypeEnumValue == SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal)
            {
                projOriginLocal = ProjOrigin::ProjAdvancedJournal;
            }
        }
        return projOriginLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the enum value for <c>ProjOrigin</c>.
    /// </summary>
    /// <param name = "_sourceDocumentLineItem">
    ///     The source document line item.
    /// </param>
    /// <returns>
    ///     The project transaction type of the source document line item.
    /// </returns>
    protected static ProjTransType initializeProjTransType(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        ProjTransType                           projTransTypeLocal;
        int                                     enumId;
        SourceDocumentTypeEnumValue             sourceDocumentTypeEnumValue;
        SourceDocumentLineItemIProjectRevenue   iProjectRevenue;
        ProjCategoryId                          projCategoryId;
        ProjCategory                            projCategory;

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            enumId = enumName2Id(_sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumName);
            sourceDocumentTypeEnumValue = _sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumValue;

            if ((enumId == enumNum(SourceDocument_ProductRequisition) && sourceDocumentTypeEnumValue == SourceDocument_ProductRequisition::PurchaseRequisition) ||
                (enumId == enumNum(SourceDocument_ProductOrder) && sourceDocumentTypeEnumValue == SourceDocument_ProductOrder::PurchaseOrder) ||
                (enumId == enumNum(BudgetReservation_SourceDocument_PSN) && sourceDocumentTypeEnumValue == enum2int(BudgetReservation_SourceDocument_PSN::BudgetReservation)) ||
                (enumId == enumNum(SourceDocument_VendorInvoice) && sourceDocumentTypeEnumValue == SourceDocument_VendorInvoice::VendorInvoice) ||
                (enumId == enumNum(SourceDocument_ProjAdvancedJournal) && sourceDocumentTypeEnumValue == SourceDocument_ProjAdvancedJournal::ProjAdvancedJournal))
            {
                if (_sourceDocumentLineItem is SourceDocumentLineItemIProjectRevenue)
                {
                    iProjectRevenue = _sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;
                    projCategoryId = iProjectRevenue.parmProjectCategoryId();

                    select CategoryType from projCategory
                        where projCategory.CategoryId == projCategoryId;

                    switch (projCategory.CategoryType)
                    {
                        case ProjCategoryType::Cost:
                            projTransTypeLocal       = ProjTransType::Cost;
                            break;

                        case ProjCategoryType::Revenue:
                            projTransTypeLocal       = ProjTransType::Revenue;
                            break;

                        case ProjCategoryType::Hour:
                            projTransTypeLocal       = ProjTransType::Hour;
                            break;

                        default:
                            projTransTypeLocal       = ProjTransType::Item;
                            break;
                    }
                }
                else
                {
                    projTransTypeLocal = ProjTransType::Item;
                }
            }
            else if (enumId == enumNum(SourceDocument_CustomerInvoice) && sourceDocumentTypeEnumValue == SourceDocument_CustomerInvoice::CustomerFreeTextInvoice)
            {
                projTransTypeLocal = ProjTransType::Revenue;
            }
            else if (enumId == enumNum(SourceDocument_ProjectTimesheets) && sourceDocumentTypeEnumValue == SourceDocument_ProjectTimesheets::Timesheets)
            {
                projTransTypeLocal = ProjTransType::Hour;
            }

            else if (enumId == enumNum(SourceDocument_AdvancedLedgerEntry) && sourceDocumentTypeEnumValue == SourceDocument_AdvancedLedgerEntry::AdvancedLedgerEntry)
            {
                if (_sourceDocumentLineItem is SourceDocumentLineItemIProjectRevenue)
                {
                    iProjectRevenue = _sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;
                    projCategoryId = iProjectRevenue.parmProjectCategoryId();
                }

                select CategoryType from projCategory
                    where projCategory.CategoryId == projCategoryId;

                switch (projCategory.CategoryType)
                {
                    case ProjCategoryType::Cost:
                        projTransTypeLocal       = ProjTransType::Cost;
                        break;

                    case ProjCategoryType::Item:
                        projTransTypeLocal       = ProjTransType::Item;
                        break;

                    case ProjCategoryType::Revenue:
                        projTransTypeLocal       = ProjTransType::Revenue;
                        break;

                    case ProjCategoryType::Hour:
                        projTransTypeLocal       = ProjTransType::Hour;
                        break;
                }
            }

            else if (enumId == enumNum(SourceDocument_TravelRequisition) && sourceDocumentTypeEnumValue == SourceDocument_TravelRequisition::TravelRequisition)
            {
                projTransTypeLocal = ProjTransType::Cost;
            }
            else if (enumId == enumNum(SourceDocument_ExpenseReport) && sourceDocumentTypeEnumValue == SourceDocument_ExpenseReport::ExpenseReport)
            {
                projTransTypeLocal = ProjTransType::Cost;
            }
            else if ((enumId == enumNum(SourceDocument_EarningStatement) && sourceDocumentTypeEnumValue == SourceDocument_EarningStatement::EarningStatement)
                     || (enumId == enumNum(SourceDocument_PayrollPayStatement) && sourceDocumentTypeEnumValue == SourceDocument_PayrollPayStatement::PayStatement))
            {
                projTransTypeLocal = ProjectSourceDocumentLineItemHelper::payrollProjTransType(_sourceDocumentLineItem);
            }
        }
        return projTransTypeLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyCostPriceEqualsSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify if cost price equals sales price by the specified source document line item.
    /// </summary>
    /// <param name = "_sourceDocumentLineItem">
    /// Source document line item.
    /// </param>
    /// <returns>
    /// true if cost price should be set as sales price; otherwise, false.
    /// </returns>
    public static boolean verifyCostPriceEqualsSalesPrice(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        boolean costPriceEqualsSalesPrice;

        if (_sourceDocumentLineItem is SourceDocumentLineItemIProduct)
        {
            SourceDocumentLineItemIProduct sourceDocumentLineItemIProduct = _sourceDocumentLineItem as SourceDocumentLineItemIProduct;

            costPriceEqualsSalesPrice = !sourceDocumentLineItemIProduct.parmItemId() &&
                ProjParameters::find().DefaultCostPriceAsSalesPrice == NoYes::Yes &&
                ProjectSourceDocumentLineItemHelper::isProjCategoryTypeItem(_sourceDocumentLineItem);
        }

        return costPriceEqualsSalesPrice;
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPriceWithDiscountApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get purchase cost price with discount applied.
    /// </summary>
    /// <param name = "_purchPrice">Typically the value of either the <c>PurchLine</c> table PurchPrice field or <c>VendInvoiceInfoLine</c> table PurchPrice field.</param>
    /// <param name = "_dicountPrice">Typically the value of either the <c>PurchLine</c> table DiscAmount field or <c>VendInvoiceInfoLine</c> table LineDisc field.</param>
    /// <param name = "_discountPercentage">Typically the value of either the <c>PurchLine</c> table DiscPercent field or <c>VendInvoiceInfoLine</c> table LinePercent field.</param>
    /// <returns>Purchase cost price factoring in discount.</returns>
    public static Price getCostPriceWithDiscountApplied(Price _purchPrice, PurchLineDisc _dicountPrice, PurchLinePercent _discountPercentage)
    {
        Price purchasePrice = _purchPrice;
        purchasePrice = _dicountPrice ? purchasePrice - _dicountPrice : purchasePrice;
        purchasePrice = _discountPercentage ? purchasePrice * (100 - _discountPercentage) / 100 : purchasePrice;
        return purchasePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDiscountByRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applying the discount ratio to the specified amount.
    /// </summary>
    /// <param name = "_totalAmount">Specified amount to apply discount.</param>
    /// <param name = "_PurchPrice">Original cost price without discount.</param>
    /// <param name = "_discountPrice">Cost price discount price.</param>
    /// <param name = "_discountPercentage">Cost price discount percentage.</param>
    /// <returns>Amount with discount applied by ratio.</returns>
    public static AmountCur applyDiscountByRatio(AmountCur _totalAmount, Price _purchPrice, PurchLineDisc _discountPrice, PurchLinePercent _discountPercentage)
    {
        AmountCur amount = _totalAmount;

        // Since both the _discountPrice and _discountPercentage are discounted value apply to the unit price,
        // to apply this discount to the total amount, discount ratio factors are needed to be calculated first
        // to multiply to the total amount.
        if (amount && (_discountPrice || _discountPercentage))
        {
            Percent discAmountFactor = 1;
            if (_discountPrice && _purchPrice)
            {
                discAmountFactor = (_purchPrice - _discountPrice) / _purchPrice;
            }

            Percent discPercentFactor = 1;
            if (_discountPercentage)
            {
                discPercentFactor = 1 - (_discountPercentage / 100);
            }

            amount = amount * discAmountFactor * discPercentFactor;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountWithDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get amount with discount applied if the specified source document line item is purchase order or vendor invoice.
    /// </summary>
    /// <param name = "_sourceDocumentLineItem">Source document line item.</param>
    /// <param name = "_amount">Amount to apply discount to.</param>
    /// <returns>The amount with discount factored in if this is a purchase order or vendor invoice line item.</returns>
    public static AmountCur getAmountWithDiscount(SourceDocumentLineItem _sourceDocumentLineItem, AmountCur _amount)
    {
        AmountCur amount = _amount;

        if (amount)
        {
            if (_sourceDocumentLineItem && _sourceDocumentLineItem is PurchOrderLineSourceDocumentLineItem)
            {
                SourceDocumentLineItemIProjectRevenue sourceDocumentLineItemIProjectRevenue = _sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;
                
                PurchLine purchLine;

                select firstonly PurchPrice, LineDisc, LinePercent from purchLine
                    where purchLine.SourceDocumentLine == _sourceDocumentLineItem.parmSourceDocumentLine().RecId;

                if (purchLine.PurchPrice && (purchLine.LineDisc || purchLine.LinePercent))
                {
                    amount = ProjectSourceDocumentLineItemHelper::applyDiscountByRatio(amount, purchLine.PurchPrice, purchLine.LineDisc, purchLine.LinePercent);
                    CurrencyCode projectSalesCurrencyCode = sourceDocumentLineItemIProjectRevenue.parmProjectSalesCurrencyCode();
                    amount = CurrencyExchangeHelper::price(amount, projectSalesCurrencyCode);
                }
            }
            else if (_sourceDocumentLineItem && _sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
            {
                SourceDocumentLineItemIProjectRevenue sourceDocumentLineItemIProjectRevenue = _sourceDocumentLineItem as SourceDocumentLineItemIProjectRevenue;

                VendInvoiceInfoLine vendInvoiceLine;
            
                select firstonly PurchPrice, LineDisc, LinePercent from vendInvoiceLine
                    where vendInvoiceLine.SourceDocumentLine == _sourceDocumentLineItem.parmSourceDocumentLine().RecId;
            
                if (vendInvoiceLine.PurchPrice && (vendInvoiceLine.LineDisc || vendInvoiceLine.LinePercent))
                {
                    CurrencyCode projectSalesCurrencyCode = sourceDocumentLineItemIProjectRevenue.parmProjectSalesCurrencyCode();
                    amount = CurrencyExchangeHelper::price(amount, projectSalesCurrencyCode);
                }
            }
        }
        
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProjectVendorInvoiceRetentionForStockedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate transaction amount with project vendor invoice payment retention for the stocked item.
    /// </summary>
    /// <param name = "_vendInvoiceTransRecId">record ID of the <c>VendInvoiceTrans</c> record to find.</param>
    /// <param name = "_transAmount">Amount to calculate retention.</param>
    /// <returns>Calculated transaction amount by retainage.</returns>
    internal static AmountCur calcProjectVendorInvoiceRetentionForStockedItem(RecId _vendInvoiceTransRecId, AmountCur _transAmount)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceTrans vendInvoiceTrans = VendInvoiceTrans::findRecId(_vendInvoiceTransRecId);
        VendInvoiceJour vendInvoiceJour = vendInvoiceTrans.vendInvoiceJour();

        select firstOnly RecId from vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == vendInvoiceJour.ParmId
            && vendInvoiceInfoLine.InventTransId == vendInvoiceTrans.InventTransId;

        if (vendInvoiceInfoLine)
        {
            ProjectAccountingDistribution projectAccountingDistribution = ProjectAccountingDistribution::findByVendInvoiceInfoLine(vendInvoiceInfoLine.RecId);

            if (projectAccountingDistribution)
            {
                AccountingDistribution accountingDistribution = AccountingDistribution::find(projectAccountingDistribution.AccountingDistribution);
                SourceDocumentLineItem sourceDocumentLineItem = ProjectSourceDocumentLineItemHelper::sourceDocumentLineItemTopParent(accountingDistribution.SourceDocumentLine);

                if (sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
                {
                    VendorInvoiceLineSourceDocLineItem vendorInvoiceLineSourceDocLineItem = sourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem;
                    _transAmount = vendorInvoiceLineSourceDocLineItem.calcTransactionAmountForProjectVendorInvoiceRetention(accountingDistribution, _transAmount);
                }
            }
        }
        
        return _transAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project sales tax group from <c>SourceDocumentLineItem</c> object.
    /// </summary>
    /// <param name = "_sourceDocumentLineItem">
    /// An instance of <c>SourceDocumentLineItem</c> object.
    /// </param>
    /// <returns>
    /// The project sales tax group from <c>SourceDocumentLineItem</c> object.
    /// </returns>
    internal static ProjTaxGroup getSalesTaxGroup(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        ProjTaxGroup taxGroup;

        if (_sourceDocumentLineItem as TsTimesheetTransSourceDocLineItem)
        {
            TsTimesheetTransSourcedocLineItem sourceDocumentLineItemLocal = _sourceDocumentLineItem as TsTimesheetTransSourceDocLineItem;
            taxGroup = sourceDocumentLineItemLocal.parmProjectSalesTaxGroup();
        }
        else if (_sourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem)
        {
            VendorInvoiceLineSourceDocLineItem vendorInvoiceLineSourceDocLineItem = _sourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem;
            taxGroup = vendorInvoiceLineSourceDocLineItem.parmProjectSalesTaxGroup();
        }
        else if (_sourceDocumentLineItem as AdvancedLedgerEntryLineSourceDocLineItem)
        {
            AdvancedLedgerEntryLineSourceDocLineItem advancedLedgerEntryLineSourceDocLineItem = _sourceDocumentLineItem as AdvancedLedgerEntryLineSourceDocLineItem;
            taxGroup = advancedLedgerEntryLineSourceDocLineItem.parmProjectSalesTaxGroup();
        }
        else if (_sourceDocumentLineItem as CustinvoiceLineSourceDocLineItem)
        {
            CustinvoiceLineSourceDocLineItem custinvoiceLineSourceDocLineItem = _sourceDocumentLineItem as CustinvoiceLineSourceDocLineItem;
            taxGroup = custinvoiceLineSourceDocLineItem.parmProjectSalesTaxGroup();
        }
        else if (_sourceDocumentLineItem as PayrollEarningStatementSourceDocLineItem)
        {
            PayrollEarningStatementSourceDocLineItem payrollEarningStatementSourceDocLineItem = _sourceDocumentLineItem as PayrollEarningStatementSourceDocLineItem;
            taxGroup = payrollEarningStatementSourceDocLineItem.parmProjectSalesTaxGroup();
        }
        else if (_sourceDocumentLineItem as PurchReqSourceDocLineItem)
        {
            PurchReqSourceDocLineItem purchReqSourceDocLineItem = _sourceDocumentLineItem as PurchReqSourceDocLineItem;
            taxGroup = purchReqSourceDocLineItem.parmProjectSalesTaxGroup();
        }
        else if (_sourceDocumentLineItem as TrvExpTransSourceDocLineItem)
        {
            TrvExpTransSourceDocLineItem trvExpTransSourceDocLineItem = _sourceDocumentLineItem as TrvExpTransSourceDocLineItem;
            taxGroup = trvExpTransSourceDocLineItem.parmProjectSalesTaxGroup();
        }
        else if (_sourceDocumentLineItem as TrvRequisitionLineSourceDocLineItem)
        {
            TrvRequisitionLineSourceDocLineItem trvRequisitionLineSourceDocLineItem = _sourceDocumentLineItem as TrvRequisitionLineSourceDocLineItem ;
            taxGroup = trvRequisitionLineSourceDocLineItem.parmProjectSalesTaxGroup();
        }

        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectSubcontractLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the subcontract line on the project advanced journal line.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <returns>
    /// Returns the subcontract line on the project advanced journal line.
    /// </returns>
    public static str getProjectSubcontractLine(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        str subcontractLine = '';

        if (ProjectSourceDocumentLineItemHelper::implementsProject(_sourceDocumentLineItem))
        {
            int enumId = enumName2Id(_sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().TypeEnumName);
            
            if (enumId == enumNum(SourceDocument_ProjAdvancedJournal))
            {
                ProjAdvancedJournalLine projAdvancedJournalLine = _sourceDocumentLineItem.parmSourceDocumentLine().getSourceDocumentLineImplementation();
                if (projAdvancedJournalLine)
                {
                    subcontractLine = projAdvancedJournalLine.SubcontractLine;
                }
            }
        }
        return subcontractLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>