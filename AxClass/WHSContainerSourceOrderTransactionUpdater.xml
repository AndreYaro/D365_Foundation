<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSContainerSourceOrderTransactionUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSContainerSourceOrderTransactionUpdater
{
    internal WHSContainerTable containerTable;
    internal Map pickedQtyMap;
    internal boolean mustSendSourceDocumentInventoryTransactionUpdateAsyncRequest;
    internal List inventoryBlockingRecIdList;
    internal boolean isKittingEnabled;
    internal RecordSortedList sortedList;   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        inventoryBlockingRecIdList = new List(Types::Int64); // used only when the update of sourceDocument InventTrans is done async.
        mustSendSourceDocumentInventoryTransactionUpdateAsyncRequest = this.mustSendSourceDocumentInventoryTransactionUpdateAsyncRequest();
        isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

        if (isKittingEnabled)
        {
            sortedList = new RecordSortedList(tableNum(WHSLoadLine));
            sortedList.sortOrder(fieldNum(WHSLoadLine, RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSContainerTable parmContainer(WHSContainerTable _containerTable)
    {
        containerTable = _containerTable;
        return containerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContainerTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSContainerSourceOrderTransactionUpdater newFromContainerTable(WHSContainerTable _containerTable)
    {
        WHSContainerSourceOrderTransactionUpdater containerSourceOrderTransactionUpdater = new WHSContainerSourceOrderTransactionUpdater();
        containerSourceOrderTransactionUpdater.parmContainer(_containerTable);

        return containerSourceOrderTransactionUpdater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickContainerLinesConsiderKitting</Name>
				<Source><![CDATA[
    private void pickContainerLinesConsiderKitting(WHSContainerLine _containerLine)
    {
        if (isKittingEnabled)
        {
            boolean kittingIsKit = KittingDelegateHelper::isKitContainerLine(_containerLine);
            if (!kittingIsKit && WHSLoadLine::findbyRecId(_containerLine.LoadLine).RecId)
            {
                this.pickContainerLine(_containerLine);
            }
        }
        else
        {
            this.pickContainerLine(_containerLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSContainerLine getContainerLines()
    {
        WHSContainerLine containerLine;

        select containerLine
            where containerLine.ContainerId == containerTable.ContainerId
               && containerLine.ShipmentId  == containerTable.ShipmentId;

        return containerLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickContainerLines</Name>
				<Source><![CDATA[
    private void pickContainerLines()
    {       
                   
        WHSContainerLine containerLine = this.getContainerLines();

        while (containerLine.RecId)
        {
            this.pickContainerLinesConsiderKitting(containerLine);

            next containerLine;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickContainerToOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void pickContainerToOrder()
    {
        WHSContainerLine containerLine;         
                        
        ttsbegin;

        this.pickContainerLines();        

        if (isKittingEnabled)
        {
            KittingDelegateHelper::updateKitRecord(sortedList);
        }

        if (mustSendSourceDocumentInventoryTransactionUpdateAsyncRequest)
        {
            this.updateInventTransAsync(containerTable);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickContainerLine</Name>
				<Source><![CDATA[
    private void pickContainerLine(WHSContainerLine _containerLine)
    {
        Common common = this.getOrderCommonFromLoadLine(_containerLine);

        InventHandlingQty inventHandlingQty = this.determineInventHandlingQty(_containerLine);

        WhsInventTransPickIdAllocator pickIdAllocator = WHSInventTransPickIdAllocationConfigurationProvider::isInventTransPickIdAllocationEnabled()
            ? WhsLoadLineInventTransPickIdAllocator::newFromLoadLineRecIdAndPickedQuantity(_containerLine.LoadLine, inventHandlingQty)
            : null;
        using (var pickingContext = WhsInventPickingContext::newFromPickIdAllocator(pickIdAllocator))
        {
            this.pickSourceDocumentTransactionsForContainerLine(_containerLine, common, inventHandlingQty, inventoryBlockingRecIdList);
        }

        if (pickIdAllocator)
        {
            pickIdAllocator.allocationComplete();
        }

        WHSLoadLine loadLine = WHSLoadLine::findbyRecId(_containerLine.LoadLine, true);
        loadLine.PickedQty += inventHandlingQty;
        loadLine.PickedWeight += _containerLine.CapturedWeight;
        loadLine.update();
        
        if (sortedList)
        {
            sortedList.ins(loadLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickSourceDocumentTransactionsForContainerLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void pickSourceDocumentTransactionsForContainerLine(
        WHSContainerLine _containerLine,
        Common _common,
        InventHandlingQty inventHandlingQty,       
        List _inventoryBlockingRecIdList)
    {
        WHSParameters parameters = WHSParameters::find();
        InventDimId lastContainerTransactionInventDimIdOnFinalShippingLocation = containerTable.getLastContainerTransactionInventDimIdOnFinalShippingLocation(_containerLine, parameters.ShipFinalLocType);

        boolean isCWItem = PdsGlobal::pdsIsCWItem(_containerLine.ItemId);
        InventQty qty = isCWItem ? _containerLine.CapturedWeight : inventHandlingQty;
        PdsCWInventQty cwQty = isCWItem ? inventHandlingQty : 0;

        if (mustSendSourceDocumentInventoryTransactionUpdateAsyncRequest)
        {
            this.blockInventory(_containerLine, lastContainerTransactionInventDimIdOnFinalShippingLocation, qty, cwQty);
        }
        else
        {
            WHSInvent::pickQuantities(
                _common,
                lastContainerTransactionInventDimIdOnFinalShippingLocation,
                qty,
                cwQty,
                WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(_containerLine.ItemId)),
                UnknownNoYes::Unknown,
                true);
        }              
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSendSourceDocumentInventoryTransactionUpdateAsyncRequest</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustSendSourceDocumentInventoryTransactionUpdateAsyncRequest()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransAsync</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void updateInventTransAsync(WHSContainerTable _containerTable)
    {
        //Used for extension purposes only.
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockInventory</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void blockInventory(
        WHSContainerLine _containerLine,
        InventDimId _lastContainerTransactionInventDimIdOnFinalShippingLocation,
        InventQty _qty,
        PdsCWInventQty _cwQty)
    {
        //Used for extension purposes only.
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderCommonFromLoadLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Common getOrderCommonFromLoadLine(WHSContainerLine _containerLine)
    {
        return WHSLoadLine::findbyRecId(_containerLine.LoadLine).getOrderCommonFromLoadLine(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInventHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventHandlingQty determineInventHandlingQty(WHSContainerLine _containerLine)
    {
        return WHSCatchWeightHelper::convertInventQuantity(_containerLine.ItemId,
                                                                                _containerLine.UnitId,
                                                                                _containerLine.Qty,
                                                                                _containerLine.InventDimId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>