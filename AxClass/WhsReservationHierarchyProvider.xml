<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReservationHierarchyProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReservationHierarchyProvider</c> class provides different representations, e.g. Lists of a reservation heirarchy.
/// </summary>
class WhsReservationHierarchyProvider
{
    #WHSReservationHierarchy
    WHSReservationHierarchyCache    cache;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAboveLocationHierarchyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the level of the field in the reservation hierarchy that is just above location for an item.
    /// </summary>
    /// <param name="_inventTable">
    /// The item.
    /// </param>
    /// <returns>
    /// The level of the field in the reservation hierarchy that is just above location for an item.
    /// </returns>
    public WHSReservationHierarchyLevel getAboveLocationHierarchyLevel(InventTable _inventTable)
    {
        WHSReservationHierarchyLevel whsReservationHierarchyLevel;

        whsReservationHierarchyLevel = this.getLocationHierarchyLevel(_inventTable);

        if (whsReservationHierarchyLevel != #INVALIDHIERARCHYLEVEL)
        {
            whsReservationHierarchyLevel -= 1;
        }
        return whsReservationHierarchyLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchLevelAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the level of the batch dimension in the reservation hierarchy if this dimension is above location.
    /// </summary>
    /// <param name="_inventTable">
    /// The item that provides the reservation hierarchy.
    /// </param>
    /// <returns>
    /// The level of the batch dimension in the reservation hierarchy if this dimension is above location.
    /// </returns>
    public WHSReservationHierarchyLevel getBatchLevelAboveLocation(InventTable _inventTable)
    {
        List dimensionsAboveLocation;

        dimensionsAboveLocation = this.getDimListAboveLocationFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp);

        return WHSReservationHierarchyInventDimUtil::getInventDimFieldLevel(dimensionsAboveLocation, fieldNum(InventDim, InventBatchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBottomHierarchyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value of the level of at the bottom in the reservation hierarchy for an item.
    /// </summary>
    /// <param name="_inventTable">
    /// The item.
    /// </param>
    /// <returns>
    /// The value of the level of at the bottom in the reservation hierarchy for an item.
    /// </returns>
    public WHSReservationHierarchyLevel getBottomHierarchyLevel(InventTable _inventTable)
    {
        var whsReservationHierarchyElementData = this.getReservationHierarchyElementForBottomHierarchyLevel(_inventTable);

        if (whsReservationHierarchyElementData)
        {
            return whsReservationHierarchyElementData.parmLevel();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimFieldIdForBottomHierarchyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field id for the inventory dimension at the lowest level of the reservation hierarchy.
    /// </summary>
    /// <param name = "_inventTable">The item that provides the reservation hierarchy.</param>
    /// <returns>A fieldId on <c>InventDim</c> table.</returns>
    public FieldId getDimFieldIdForBottomHierarchyLevel(InventTable _inventTable)
    {
        var whsReservationHierarchyElementData = this.getReservationHierarchyElementForBottomHierarchyLevel(_inventTable);

        if (whsReservationHierarchyElementData)
        {
            return whsReservationHierarchyElementData.parmDimensionFieldId();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimFieldIdForBottomHierarchyLevelFromResHierRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field id for the inventory dimension at the lowest level of the reservation hierarchy.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <returns>A fieldId on <c>InventDim</c> table.</returns>
    internal FieldId getDimFieldIdForBottomHierarchyLevelFromResHierRecId(WHSReservationHierarchyRecId _reservationHierarchyRecId)
    {
        var whsReservationHierarchyElementData = this.getReservationHierarchyElementForBottomHierarchyLevelFromResHierRecId(_reservationHierarchyRecId);

        if (whsReservationHierarchyElementData)
        {
            return whsReservationHierarchyElementData.parmDimensionFieldId();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationHierarchyElementForBottomHierarchyLevel</Name>
				<Source><![CDATA[
    private WHSReservationHierarchyElementData getReservationHierarchyElementForBottomHierarchyLevel(InventTable _inventTable)
    {
        List list = this.getDimListAllFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp);

        if (list)
        {
            ListEnumerator le = list.getEnumerator();

            if (le.moveNext())
            {
                return le.current() as WHSReservationHierarchyElementData;
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationHierarchyElementForBottomHierarchyLevelFromResHierRecId</Name>
				<Source><![CDATA[
    private WHSReservationHierarchyElementData getReservationHierarchyElementForBottomHierarchyLevelFromResHierRecId(WHSReservationHierarchyRecId _reservationHierarchyRecId)
    {
        List list = cache.getDimListAll(_reservationHierarchyRecId, WHSReservationHierarchySortOrder::BottomUp);

        if (list)
        {
            ListEnumerator le = list.getEnumerator();

            if (le.moveNext())
            {
                return le.current() as WHSReservationHierarchyElementData;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the level of the specified dimension in the reservation hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    /// The item that provides the reservation hierarchy.
    /// </param>
    /// <param name="_inventDimFieldId">
    /// The ID of the field to search for.
    /// </param>
    /// <returns>
    /// The level of the specified dimension in the reservation hierarchy.
    /// </returns>
    public WHSReservationHierarchyLevel getDimLevel(InventTable _inventTable, FieldId _inventDimFieldId)
    {
        return this.getDimLevelFromReservationHierarchy(_inventTable.whsReservationHierarchy(), _inventDimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimLevelFromReservationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the level of the specified dimension in the reservation hierarchy.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <param name="_inventDimFieldId">
    /// The ID of the field to search for.
    /// </param>
    /// <returns>
    /// The level of the specified dimension in the reservation hierarchy.
    /// </returns>
    internal WHSReservationHierarchyLevel getDimLevelFromReservationHierarchy(WHSReservationHierarchyRecId _reservationHierarchyRecId, FieldId _inventDimFieldId)
    {
        ListEnumerator                      listEnumerator;
        WHSReservationHierarchyElementData  elementData;
        WHSReservationHierarchyLevel        result = #INVALIDHIERARCHYLEVEL;

        listEnumerator = cache.getDimListAll(_reservationHierarchyRecId,
                                             WHSReservationHierarchySortOrder::BottomUp).getEnumerator();

        while (result == #INVALIDHIERARCHYLEVEL && listEnumerator.moveNext())
        {
            elementData = listEnumerator.current();

            if (elementData.parmDimensionFieldId() == _inventDimFieldId)
            {
                result = elementData.parmLevel();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list containing the inventory dimensions in the hierarchy above the location.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    /// The <c>WHSReservationHierarchyRecId</c> ID used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A list containing the inventory dimensions in the hierarchy above the location.
    /// </returns>
    public List getDimListAboveLocation(
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListAboveLocation(_whsReservationHierarchyRecId, _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListAboveBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a list containing the inventory dimensions in the hierarchy above the batch.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    /// The <c>WHSReservationHierarchyRecId</c> ID used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A list containing the inventory dimensions in the hierarchy above the batch.
    /// </returns>
    internal List getDimListAboveBatch(
        WHSReservationHierarchyRecId        _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListAboveBatch(_whsReservationHierarchyRecId, _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListAboveLocationFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing the inventory dimensions in the hierarchy above the location.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing the inventory dimensions in the hierarchy above the location.
    /// </returns>
    public List getDimListAboveLocationFromInventTable(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListAboveLocation(_inventTable.whsReservationHierarchy(), _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListAllFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing the inventory dimensions in the hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing the inventory dimensions in the hierarchy.
    /// </returns>
    public List getDimListAllFromInventTable(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListAll(_inventTable.whsReservationHierarchy(), _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListAllFromReservationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing the inventory dimensions in the hierarchy.
    /// </summary>
    /// <param name="_reservationHierarchy">
    /// The <c>WHSReservationHierarchy</c> record used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing the inventory dimensions in the hierarchy.
    /// </returns>
    public List getDimListAllFromReservationHierarchy(
        WHSReservationHierarchy             _reservationHierarchy,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListAll(_reservationHierarchy.RecId, _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListAllFlexFromReservationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing the inventory dimensions allowed for flexible reservation.
    /// </summary>
    /// <param name="_reservationHierarchy">
    /// The <c>WHSReservationHierarchy</c> record used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing the flexible inventory dimensions.
    /// </returns>
    [Hookable(false)]
    internal List getDimListAllFlexFromReservationHierarchy(
        WHSReservationHierarchy             _reservationHierarchy,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return WhsReservationHierarchyProvider::removeDimensionsBelowLowestFlexReserveLevel(cache.getDimListAll(_reservationHierarchy.RecId, _sortOrder), _reservationHierarchy.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListBatchAndAboveFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> containing the inventory dimensions that are batch level and above in the hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> containing  the inventory dimensions above and including the batch.
    /// </returns>
    public List getDimListBatchAndAboveFromInventTable(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListBatchAndAbove(_inventTable.whsReservationHierarchy(), _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListBelowLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing  the inventory dimensions below LicensePlate.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing  the inventory dimensions from location and down.
    /// </returns>
    public List getDimListBelowLicensePlate(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListBelowLicensePlate(_inventTable.whsReservationHierarchy(), _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListBelowBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing  the inventory dimensions below Batch.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing  the inventory dimensions from Batch and down.
    /// </returns>
    [Hookable(false)]
    internal List getDimListBelowBatch(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListBelowBatch(_inventTable.whsReservationHierarchy(), _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListBelowLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing  the inventory dimensions below WMSLocationId.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing  the inventory dimensions below location.
    /// </returns>
    public List getDimListBelowLocation(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListBelowLocation(_inventTable.whsReservationHierarchy(), _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListBelowStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing  the inventory dimensions below status
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing  the inventory dimensions below status
    /// </returns>
    public List getDimListBelowStatus(InventTable _inventTable, WHSReservationHierarchySortOrder _sortOrder)
    {
        return cache.getDimListBelowStatus(_inventTable.whsReservationHierarchy(), _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListLocationAndDownFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing  the inventory dimensions from location and down.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing  the inventory dimensions from location and down.
    /// </returns>
    public List getDimListLocationAndDownFromInventTable(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return this.getDimListLocationAndDownFromReservationHierarchy(_inventTable.whsReservationHierarchy(), _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListLocationAndDownFromReservationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing  the inventory dimensions from location and down.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// An identifier of the reservation hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing  the inventory dimensions from location and down.
    /// </returns>
    internal List getDimListLocationAndDownFromReservationHierarchy(
        WHSReservationHierarchyRecId        _reservationHierarchyRecId,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListLocationAndDown(_reservationHierarchyRecId, _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimListStatusAndAboveFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing  the inventory dimensions above and including the status.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing  the inventory dimensions above and including the status.
    /// </returns>
    public List getDimListStatusAndAboveFromInventTable(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        return cache.getDimListStatusAndAbove(_inventTable.whsReservationHierarchy(), _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an empty list.
    /// </summary>
    /// <returns>
    /// An empty list.
    /// </returns>
    public List getEmptyList()
    {
        return new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list based on the parameters which contains the hierarchy including the item entry.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <param name="_transType">
    /// An <c>InventTransType</c> type which will be used to determine if the full hierarchy should be returned or only the hierarchy from location and down.
    /// </param>
    /// <returns>
    /// A <c>List</c> list based on the parameters which contains the hierarchy including the item entry.
    /// </returns>
    public List getHierarchyFromParameters(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder,
        InventTransType                     _transType)
    {
        if (WHSInvent::transTypeOnlyAffectsLocationAndBelow(_transType))
        {
            return this.getDimListLocationAndDownFromInventTable(_inventTable, _sortOrder);
        }

        return this.getHierarchyListAllFromInventTable(_inventTable, _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyLevelFromList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the hierarchy level of the first <c>WHSReservationHierarchyElementData</c> element in a given list.
    /// </summary>
    /// <param name="_list">
    ///     A list of <c>WHSReservationHierarchyElementData</c> elements.
    /// </param>
    /// <returns>
    ///     Returns the hierarchy level of the first <c>WHSReservationHierarchyElementData</c> element.
    /// </returns>
    public WHSReservationHierarchyLevel getHierarchyLevelFromList(List _list)
    {
        WHSReservationHierarchyLevel        whsReservationHierarchyLevel;
        WHSReservationHierarchyElementData  whsReservationHierarchyElementData;
        ListEnumerator                      le;

        whsReservationHierarchyLevel = #INVALIDHIERARCHYLEVEL;

        if (_list)
        {
            le = _list.getEnumerator();

            if (le.moveNext())
            {
                whsReservationHierarchyElementData = le.current();
                whsReservationHierarchyLevel = whsReservationHierarchyElementData.parmLevel();
            }
        }

        return whsReservationHierarchyLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyListAboveLocationInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing the hierarchy above the location including the item entry.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing the hierarchy above the location including the item entry.
    /// </returns>
    public List getHierarchyListAboveLocationInventTable(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        List hierarchyList;

        hierarchyList = this.getEmptyList();

        if (_sortOrder == WHSReservationHierarchySortOrder::BottomUp)
        {
            hierarchyList.appendList(this.getDimListAboveLocationFromInventTable(_inventTable, _sortOrder));
            hierarchyList.addEnd(WHSReservationHierarchyElementData::newFromItemLevel());
        }
        else
        {
            hierarchyList.addEnd(WHSReservationHierarchyElementData::newFromItemLevel());
            hierarchyList.appendList(this.getDimListAboveLocationFromInventTable(_inventTable, _sortOrder));
        }

        return hierarchyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyListAllFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>List</c> list containing the full hierarchy including the item entry.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_sortOrder">
    /// The order that the list should be returned in.
    /// </param>
    /// <returns>
    /// A <c>List</c> list containing the full hierarchy including the item entry.
    /// </returns>
    public List getHierarchyListAllFromInventTable(
        InventTable                         _inventTable,
        WHSReservationHierarchySortOrder    _sortOrder)
    {
        List hierarchyList;

        hierarchyList = this.getEmptyList();

        if (_sortOrder == WHSReservationHierarchySortOrder::BottomUp)
        {
            hierarchyList.appendList(this.getDimListAllFromInventTable(_inventTable, _sortOrder));
            hierarchyList.addEnd(WHSReservationHierarchyElementData::newFromItemLevel());
        }
        else
        {
            hierarchyList.addEnd(WHSReservationHierarchyElementData::newFromItemLevel());
            hierarchyList.appendList(this.getDimListAllFromInventTable(_inventTable, _sortOrder));
        }

        return hierarchyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationHierarchyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the level of the location field in the reservation hierarchy for an item.
    /// </summary>
    /// <param name="_inventTable">
    /// The item.
    /// </param>
    /// <returns>
    /// The level of the location field in the reservation hierarchy for an item.
    /// </returns>
    /// <remarks>
    /// If no level is found, #INVALIDHIERARCHYLEVEL is returned.
    /// </remarks>
    public WHSReservationHierarchyLevel getLocationHierarchyLevel(InventTable _inventTable)
    {
        List    list;

        list = this.getDimListLocationAndDownFromInventTable(_inventTable, WHSReservationHierarchySortOrder::TopDown);

        return this.getHierarchyLevelFromList(list);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusHierarchyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the level of the status field in the reservation hierarchy for an item.
    /// </summary>
    /// <param name="_inventTable">
    /// The item.
    /// </param>
    /// <returns>
    /// The level of the status field in the reservation hierarchy for an item.
    /// </returns>
    /// <remarks>
    /// If no level is found, #INVALIDHIERARCHYLEVEL is returned.
    /// </remarks>
    public WHSReservationHierarchyLevel getStatusHierarchyLevel(InventTable _inventTable)
    {
        List    list;

        list = this.getDimListStatusAndAboveFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp);

        return this.getHierarchyLevelFromList(list);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if batch is above location in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <returns>
    /// true if batch is above location in the reservation hierarchy; otherwise, false.
    /// </returns>
    public boolean isBatchAboveLocation(InventTable _inventTable)
    {
        return WHSReservationHierarchyInventDimUtil::isBatchAboveLocation(_inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemHasDimensionBelowLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Method determines if item has active dimensions below License Plate to be used for dim tracking creation during work execution
    /// </summary>
    /// <param name="_inventTable">
    ///    The item used to find the correct reservation hierarchy.
    /// </param>
    /// <returns>
    ///     true if item has active dimension below license plate; otherwise false
    /// </returns>
    public boolean itemHasDimensionBelowLicensePlate(InventTable _inventTable)
    {
        return !this.getDimListBelowLicensePlate(_inventTable, WHSReservationHierarchySortOrder::BottomUp).empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        cache = WHSReservationHierarchyCache::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSReservationHierarchyProvider construct()
    {
        return new WHSReservationHierarchyProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invalid reservation hierarchy level.
    /// </summary>
    /// <returns>
    /// The invalid reservation hierarchy level.
    /// </returns>
    public static WHSReservationHierarchyLevel invalidLevel()
    {
        #WHSReservationHierarchy

        return #INVALIDHIERARCHYLEVEL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyElementBelow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets information about the reservation hierarchy level that is below the specified one.
    /// </summary>
    /// <param name="_inventTable">
    /// The item.
    /// </param>
    /// <param name="_hierarchyLevel">
    /// The level of the reservation hierarchy.
    /// </param>
    /// <returns>
    /// Information about the reservation hierarchy level that is below the specified one.
    /// </returns>
    public WHSReservationHierarchyElementData getHierarchyElementBelow(InventTable _inventTable, WHSReservationHierarchyLevel _hierarchyLevel)
    {
        List hierarchyList = WHSReservationHierarchyProvider::construct().getDimListAllFromInventTable(_inventTable, WHSReservationHierarchySortOrder::TopDown);
        Enumerator hierarchyListEnumerator = hierarchyList.getEnumerator();
        WHSReservationHierarchyElementData hierarcyElementData;
        WHSReservationHierarchyLevel levelBelow = WHSReservationHierarchyProvider::invalidLevel();

        while (hierarchyListEnumerator.moveNext())
        {
            hierarcyElementData = hierarchyListEnumerator.current();
            if (hierarcyElementData.parmLevel() > _hierarchyLevel)
            {
                return hierarcyElementData;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHigherAndLowerDimensionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Building up data source and comparing two dimensions to check which is higher or lower.
    /// </summary>
    /// <param name = "_dataSource">The data source that contains the order specific information.</param>
    /// <param name = "_itemFieldId">Field ID used to join the incoming data source and warehouse inventory enabled table.</param>
    /// <param name = "_dataAreaFieldId">Data area ID to join the warehouse inventory enabled table to the incoming data source.</param>
    /// <param name = "_lowerDimensionFieldId">Lower dimension to specify for range.</param>
    /// <param name = "_higherDimensionFieldId">Higher dimension to specify for range.</param>
    public static void addHigherAndLowerDimensionCriteria(
        QueryBuildDataSource _dataSource,
        FieldId              _itemFieldId,
        FieldId              _dataAreaFieldId,
        FieldId              _lowerDimensionFieldId,
        FieldId              _higherDimensionFieldId)
    {
        QueryBuildDataSource whsEnabled_ds = _dataSource.addDataSource(tableNum(WHSInventEnabled));
        whsEnabled_ds.joinMode(JoinMode::ExistsJoin);
        whsEnabled_ds.addLink(_itemFieldId, fieldNum(WHSInventEnabled, ItemId), _dataSource.name());
        whsEnabled_ds.addLink(_dataAreaFieldId, fieldNum(WHSInventEnabled, DataAreaId), _dataSource.name());

        QueryBuildDataSource hierarchyItem_ds = whsEnabled_ds.addDataSource(tableNum(WHSReservationHierarchyItem));
        hierarchyItem_ds.joinMode(JoinMode::ExistsJoin);
        hierarchyItem_ds.addLink(fieldNum(WHSInventEnabled, ItemId), fieldNum(WHSReservationHierarchyItem, ItemId), whsEnabled_ds.name());
        hierarchyItem_ds.addLink(fieldNum(WHSInventEnabled, DataAreaId), fieldNum(WHSReservationHierarchyItem, ItemDataAreaId), whsEnabled_ds.name());

        QueryBuildDataSource hierarchyElementBelow_ds = hierarchyItem_ds.addDataSource(tableNum(WHSReservationHierarchyElement));
        hierarchyElementBelow_ds.joinMode(JoinMode::ExistsJoin);
        hierarchyElementBelow_ds.addLink(fieldNum(WHSReservationHierarchyItem, ReservationHierarchy),
            fieldNum(WHSReservationHierarchyElement, ReservationHierarchy), hierarchyItem_ds.name());

        hierarchyElementBelow_ds.addRange(fieldNum(WHSReservationHierarchyElement, DimensionFieldId)).value(queryValue(_lowerDimensionFieldId));

        QueryBuildDataSource hierarchyElementAbove_ds = hierarchyElementBelow_ds.addDataSource(tableNum(WHSReservationHierarchyElement));
        hierarchyElementAbove_ds.joinMode(JoinMode::ExistsJoin);
        hierarchyElementAbove_ds.addLink(fieldNum(WHSReservationHierarchyElement, ReservationHierarchy),
            fieldNum(WHSReservationHierarchyElement, ReservationHierarchy), hierarchyElementBelow_ds.name());

        hierarchyElementAbove_ds.addRange(fieldNum(WHSReservationHierarchyElement, DimensionFieldId)).value(queryValue(_higherDimensionFieldId));
        hierarchyElementAbove_ds.addRange(fieldNum(WHSReservationHierarchyElement, ReservationHierarchyLevel)).value(strFmt('(%1.%3 < %2.%3)',
            hierarchyElementAbove_ds.name(),
            hierarchyElementBelow_ds.name(),
            fieldId2Name(tableNum(WHSReservationHierarchyElement), fieldNum(WHSReservationHierarchyElement, ReservationHierarchyLevel))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFlexibleDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove flexible/ordered dimensions from the dimensions list
    /// </summary>
    /// <param name = "_hierarchyList">Dimensions list</param>
    /// <param name = "_itemId">Item number</param>
	internal static List removeFlexibleDimensions(List _hierarchyList, ItemId _itemId)
    {
        WHSReservationHierarchyElementPolicyProvider reservationHierarchyElementPolicyProvider = WHSReservationHierarchyElementPolicyProvider::singleton();
        List										 newHierarchyList = new List(Types::Class);//Do not update the list from parameters, it could be used in the WHSReservationHierarchyCache class
        ListIterator								 listIterator = new ListIterator(_hierarchyList);
        InventTable									 inventTable = InventTable::find(_itemId);
        WHSReservationHierarchyElementData			 elementData;

        while (listIterator.more())
        {
            elementData = listIterator.value();
            FieldId dimensionFieldId = elementData.parmDimensionFieldId();
                    
            if (!reservationHierarchyElementPolicyProvider.isReservationOnDemandOrderEnabled(inventTable.whsReservationHierarchy(), dimensionFieldId))
            {
                newHierarchyList.addEnd(elementData);
            }

            listIterator.next();
        }

        return newHierarchyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDimensionsBelowLowestFlexReserveLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes dimensions that are below the lowest flexible reservation level.
    /// </summary>
    /// <param name = "_hierarchyList">Dimensions list</param>
    /// <param name = "_reservationHierarchyRecId">Reservation hierarchy ID</param>
    /// <returns>Filtered list</returns>
    private static List removeDimensionsBelowLowestFlexReserveLevel(List _hierarchyList, WHSReservationHierarchyRecId _reservationHierarchyRecId)
    {
        List										 newHierarchyList = new List(Types::Class);//Do not update the list from parameters, it could be used in the WHSReservationHierarchyCache class
        ListIterator								 listIterator = new ListIterator(_hierarchyList);        
        WHSReservationHierarchyLevel                 lowestLevel = WHSReservationHierarchyElementPolicyProvider::singleton().getLowestLevelWithEnabledReservationOnDemandOrder(_reservationHierarchyRecId);

        while (listIterator.more())
        {
            WHSReservationHierarchyElementData elementData = listIterator.value();
                    
            if (elementData.parmLevel() <= lowestLevel)
            {
                newHierarchyList.addEnd(elementData);
            }

            listIterator.next();
        }

        return newHierarchyList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>