<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Process</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class extends the Production movement for Process Batch movements
/// </summary>
class InventMov_Process extends InventMov_Prod
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a flag if the movement can be estimated without error.
    /// Overrides default method
    /// </summary>
    /// <param name="_updateNow">
    /// InventUpd object
    /// </param>
    /// <param name="_this_orig">
    /// Original InventMovement object
    /// </param>
    /// <returns>
    /// returns flag
    /// </returns>
    public boolean checkUpdateEstimated(
        InventUpd_Estimated _updateNow,
        InventMovement      _this_orig)
    {
        boolean         ok = true;
        ProdQtySched    transQty = this.transQty();
        UnitQty         transQtyUnit = this.transQtyUnit();

        if (_this_orig)
        {
            ProdQtySched transQty_Orig = _this_orig.transQty();

            if (transQty * transQty_Orig < 0)
            {
                if (this.remainPhysicalUnit()  !=  transQtyUnit ||
                    this.remainFinancialUnit() != 0)
                {
                    ok = checkFailed("@SYS25506");
                }
            }

            if (abs(transQty) < abs(transQty_Orig)
                && transQty * transQty_Orig >= 0 )
            {
                if (this.remainPhysicalUnit() * _this_orig.remainPhysicalUnit()   < 0
                    || this.remainPhysicalUnit() * _this_orig.remainFinancialUnit()  < 0)
                {
                    ok = checkFailed("@SYS25508");
                }
            }
        }

        if (this.mustBeUnitControlled())
        {
            if ((transQty != 0
                    && transQtyUnit == 0)
                || (transQty == 0
                    && transQtyUnit != 0))
            {
                ok = checkFailed("@SYS18730");
            }

            if (transQty * transQtyUnit < 0)
            {
                ok = checkFailed("@SYS10214");
            }
        }

        if (ok)
        {
            if (prodTable.inventTable().PmfProductType != PmfProductType::MainItem
                && transQty <= 0)
            {
                return checkFailed("@SYS18731");
            }
            if (!prodTable.status().inventCheckUpdEst())
            {
                return false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    /// <param name="_prodTable">
    /// Production table
    /// </param>
    /// <param name="_inventType">
    /// Inventory type
    /// </param>
    protected void new(
        ProdTable       _prodTable,
        InventType      _inventType = ProdTableType_Pmf::construct(_prodTable))
    {
        prodTable       = _prodTable;

        super(prodTable, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a process movement from the original prodTable
    /// </summary>
    /// <returns>
    /// returns process movement
    /// </returns>
    public InventMovement newMovement_Orig()
    {
        return prodTable.RecId
            ? new InventMov_Process(prodTable.orig(),inventType)
            : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method adds to the CW Remain inventory physical.
    /// </summary>
    /// <param name="_qty">
    /// CW quantity
    /// </param>
    public void pdsCWAddRemainPhysical(PdsCWInventQty _qty)
    {
        prodTable.PdsCWRemainInventPhysical += _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns CW remain physicalInvent for batch order
    /// </summary>
    /// <returns>
    /// returns CW quantity
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return prodTable.PdsCWRemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the CW Remain inventory physical.
    /// </summary>
    /// <param name="_qty">
    /// CW quantity
    /// </param>
    public void pdsCWSetRemainPhysical(PdsCWInventQty _qty)
    {
        prodTable.PdsCWRemainInventPhysical = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the CW Batch Scheduled quantity.
    /// </summary>
    /// <returns>
    /// returns CW quantity
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return prodTable.PdsCWBatchSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the PdsCWUnitId.
    /// </summary>
    /// <returns>
    /// CW Unit Id
    /// </returns>
    public PdsCWUnitId pdsCWUnitId()
    {
        return prodTable.pdsCWUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks if movement must be remain controlled.
    /// </summary>
    /// <returns>true if item is not a planning item; otherwise false.</returns>
    public boolean mustBeRemainControlled()
    {
        return !InventTable::isPlanningItem(this.itemId()) && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <param name="_prodTable">
    /// Production table
    /// </param>
    /// <param name="_inventType">
    /// Inventory type
    /// </param>
    /// <returns>
    /// returns instance
    /// </returns>
    public static InventMov_Process construct(
        ProdTable   _prodTable,
        InventType  _inventType = ProdTableType_Pmf::construct(_prodTable))
    {
        return new InventMov_Process(_prodTable,
                                     _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsShouldRemoveReservationOnReservePhysicalTransReceipt</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean whsShouldRemoveReservationOnReservePhysicalTransReceipt()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>