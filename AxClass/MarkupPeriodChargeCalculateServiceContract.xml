<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupPeriodChargeCalculateServiceContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    DataContract,
    SysOperationAlwaysInitialize,
    SysOperationContractProcessing(classStr(MarkupPeriodChargeCalculateServiceUIBuilder))
]
internal class MarkupPeriodChargeCalculateServiceContract extends SysOperationDataContractBase implements SysOperationValidatable, SysOperationInitializable, SysPackable
{
    private const MarkupPeriodChargeCalculateDaysPerInvoice DefaultDaysPerFreeTextInvoice = 1;
    private const Days MaxInvoiceDateInvterval = 90;
    private const Days RecommendedInvoiceDateInvterval = 31;

    private MarkupPeriodChargeCalculateInvoiceAccount invoiceAccount;
    private MarkupPeriodChargeCalculateMaxInvoiceAge maxInvoiceAge;
    private MarkupPeriodChargeCalculateDaysPerInvoice daysPerFreeTextInvoice;
    private MarkupPeriodChargeCalculateInvoiceDateFrom invoiceDateFrom;
    private MarkupPeriodChargeCalculateInvoiceDateTo invoiceDateTo;
    private MarkupPeriodChargeRuleName periodChargeRuleName;

    private MarkupPeriodChargeCalculateServiceBundleId bundleId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        invoiceAccount,
        maxInvoiceAge,
        daysPerFreeTextInvoice,
        invoiceDateFrom,
        invoiceDateTo,
        periodChargeRuleName,
        bundleId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        if (!this.daysPerFreeTextInvoice)
        {
            this.daysPerFreeTextInvoice = DefaultDaysPerFreeTextInvoice;
        }

        if (!this.invoiceDateFrom && !this.invoiceDateTo && !this.maxInvoiceAge)
        {
            date todayDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
            this.invoiceDateFrom = todayDate;
            this.invoiceDateTo = todayDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
    [DataMember, SysOperationDisplayOrder('10')]
    public MarkupPeriodChargeCalculateInvoiceAccount parmInvoiceAccount(MarkupPeriodChargeCalculateInvoiceAccount _invoiceAccount = invoiceAccount)
    {
        invoiceAccount = _invoiceAccount;
        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodChargeRuleName</Name>
				<Source><![CDATA[
    [DataMember, SysOperationDisplayOrder('20')]
    public MarkupPeriodChargeCalculateRuleName parmPeriodChargeRuleName(MarkupPeriodChargeCalculateRuleName _periodChargeRuleName = periodChargeRuleName)
    {
        periodChargeRuleName = _periodChargeRuleName;
        return periodChargeRuleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDateFrom</Name>
				<Source><![CDATA[
    [DataMember, SysOperationDisplayOrder('30')]
    public MarkupPeriodChargeCalculateInvoiceDateFrom parmInvoiceDateFrom(MarkupPeriodChargeCalculateInvoiceDateFrom _invoiceDateFrom = invoiceDateFrom)
    {
        invoiceDateFrom = _invoiceDateFrom;
        return invoiceDateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDateTo</Name>
				<Source><![CDATA[
    [DataMember, SysOperationDisplayOrder('40')]
    public MarkupPeriodChargeCalculateInvoiceDateTo parmInvoiceDateTo(MarkupPeriodChargeCalculateInvoiceDateTo _invoiceDateTo = invoiceDateTo)
    {
        invoiceDateTo = _invoiceDateTo;
        return invoiceDateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxInvoiceAge</Name>
				<Source><![CDATA[
    [DataMember, SysOperationDisplayOrder('50')]
    public MarkupPeriodChargeCalculateMaxInvoiceAge parmMaxInvoiceAge(MarkupPeriodChargeCalculateMaxInvoiceAge _maxInvoiceAge = maxInvoiceAge)
    {
        maxInvoiceAge = _maxInvoiceAge;
        return maxInvoiceAge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDaysPerInvoice</Name>
				<Source><![CDATA[
    [DataMember, SysOperationDisplayOrder('60')]
    public MarkupPeriodChargeCalculateDaysPerInvoice parmDaysPerInvoice(MarkupPeriodChargeCalculateDaysPerInvoice _daysPerFreeTextInvoice = daysPerFreeTextInvoice)
    {
        daysPerFreeTextInvoice = _daysPerFreeTextInvoice;
        return daysPerFreeTextInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBundleId</Name>
				<Source><![CDATA[
    internal MarkupPeriodChargeCalculateServiceBundleId parmBundleId(MarkupPeriodChargeCalculateServiceBundleId _bundleId = bundleId)
    {
        bundleId = _bundleId;
        return bundleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        if (maxInvoiceAge > MaxInvoiceDateInvterval || (invoiceDateTo - invoiceDateFrom) > MaxInvoiceDateInvterval)
        {
            return checkFailed("@SCM:MarkupPeriodChargeCalculationMaxInvoiceIntervalError");
        }
        else if (maxInvoiceAge && maxInvoiceAge > RecommendedInvoiceDateInvterval)
        {
            if (Box::yesNo(strFmt("@SCM:MarkupPeriodChargeCalculationMaxInvoiceIntervalBoxWarning", maxInvoiceAge) , DialogButton::Yes) != DialogButton::Yes)
            {
                return false;
            }
        }
        else if (invoiceDateTo && invoiceDateFrom
            && (invoiceDateTo - invoiceDateFrom) > RecommendedInvoiceDateInvterval)
        {
            if (Box::yesNo(strFmt("@SCM:MarkupPeriodChargeCalculationMaxInvoiceIntervalBoxWarning", invoiceDateTo - invoiceDateFrom) , DialogButton::Yes) != DialogButton::Yes)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int     version = RunBase::getVersion(_packedClass);
        boolean result  = false;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                result = true;
                break;

            default :
                result = false;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>