<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReturnAcknowledgmentAndDocController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReturnAcknowledgmentAndDocController</c> class is the controller class for the
///    <c>ReturnAcknowledgmentAndDocument</c> reports.
/// </summary>
class ReturnAcknowledgmentAndDocController extends SrsReportRunController implements BatchRetryable
{
    str         returnReportType;
    boolean     isSendDoc;

    //Macros
    #define.ReturnAcknowledgment('ReturnAcknowledgment')
    #define.ReturnDocument('ReturnDocument')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReturnReportType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies from which menu item it is called.
    /// </summary>
    /// <returns>
    ///    The menu item name.
    /// </returns>
    public str getReturnReportType()
    {
        switch (this.parmArgs().menuItemName())
        {
            case menuitemOutputStr(ReturnAcknowledgment):
            case menuitemOutputStr(ReturnAcknowledgment_Action):
                returnReportType = #ReturnAcknowledgment;
                break;

            case menuitemOutputStr(ReturnDocument):
            case menuitemOutputStr(ReturnDocument_Action):
                returnReportType = #ReturnDocument;
                break;
        }
        return returnReportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides ability to modify the report contract before dialog is shown to user.
    /// </summary>
    /// <remarks>
    ///    Use this method to change the report contract, common use case is to add/change a Query Important
    ///    note: This method is called only during interactive scenario, before rendering the UI to user.For
    ///    batch scenario, we do not invoke this method, since there is no user interaction and contract
    ///    values are already saved in batch.DO NOT instantiate any instance varibles in this code if they are
    ///    used during the lifetime of controller, since these will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        this.getReturnReportType();
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()), this.parmReportContract().parmRdpContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method to change report contract before running report.
    /// </summary>
    protected void preRunModifyContract()
    {
        SalesTable  salesTable;

        if (this.parmArgs() && this.parmArgs().record())
        {
            salesTable = this.parmArgs().record();
            this.parmReportContract().parmRdlContract().parmLanguageId(salesTable.LanguageId);
            this.parmReportContract().parmRdlContract().parmLabelLanguageId(salesTable.LanguageId);            
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the report query ranges based on the caller.
    /// </summary>
    /// <param name="_query">
    ///    The hold of the <c>Query</c> object of the report.
    /// </param>
    /// <param name="_returnAcknowledgmentAndDocContract">
    ///    The contract of the <c>ReturnAcknowledgmentAndDocContract</c> object of the report.
    /// </param>
    public void setRanges(Query _query, ReturnAcknowledgmentAndDocContract _returnAcknowledgmentAndDocContract)
    {
        QueryBuildDataSource                queryBuildDataSource;
        QueryBuildDataSource                queryBuildDataSourceStatus;
        QueryBuildRange                     queryBuildRange;
        QueryBuildRange                     queryBuildRangeStatus;
        str                                 returnStatusFilter;
        ReturnAcknowledgmentAndDocContract  returnAcknowledgmentAndDocContract;
        SalesTable                          salesTable;

        queryBuildDataSource  = _query.dataSourceTable(tableNum(SalesTable));
        queryBuildRange       = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(SalesTable, SalesId));
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildDataSourceStatus  = _query.dataSourceTable(tableNum(SalesLine));
        queryBuildRange             = SysQuery::findOrCreateRange(queryBuildDataSourceStatus, fieldNum(SalesLine,ExpectedRetQty));
        queryBuildRange.value('<0');
        queryBuildRange.status(RangeStatus::Hidden);

        queryBuildDataSource    = _query.dataSourceTable(tableNum(FormLetterRemarks));
        queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(FormLetterRemarks,FormLetter));
        queryBuildRange.status(RangeStatus::Hidden);
        queryBuildRangeStatus   = SysQuery::findOrCreateRange(queryBuildDataSourceStatus, fieldNum(SalesLine,ReturnStatus));
        queryBuildRangeStatus.status(RangeStatus::Hidden);

        if (returnReportType == #ReturnAcknowledgment)
        {
            queryBuildRange.value(SysQuery::value(FormTextType::ReturnAcknowledgement));
            returnStatusFilter      = strFmt("%1, %2, %3, %4",SysQuery::value(ReturnStatusLine::Registered), SysQuery::value(ReturnStatusLine::Received),
                                        SysQuery::value(ReturnStatusLine::Quarantine),SysQuery::value(ReturnStatusLine::Invoiced));
            queryBuildRangeStatus.value(returnStatusFilter);
        }
        else
        {
            queryBuildRange.value(SysQuery::value(FormTextType::ReturnSendDocument));
            queryBuildRangeStatus.value('');
        }

        if (this.parmArgs() && this.parmArgs().record())
        {
            salesTable = this.parmArgs().record();
            returnAcknowledgmentAndDocContract = _returnAcknowledgmentAndDocContract;
            returnAcknowledgmentAndDocContract.parmRecordId(salesTable.RecId);
            returnAcknowledgmentAndDocContract.parmReportType(returnReportType);
            returnAcknowledgmentAndDocContract.parmIsSendDoc(true);

            if (this.parmArgs().caller()
                && (this.parmArgs().caller().name() == formStr(ReturnTable)
                    || this.parmArgs().caller().name() == formStr(ReturnTableListPage)))
            {
                queryBuildDataSource    = _query.dataSourceTable(tableNum(SalesTable));
                queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(SalesTable,ReturnItemNum));
                queryBuildRange.status(RangeStatus::Hidden);
                queryBuildRange.value(SysQuery::value(salesTable.ReturnItemNum));
                queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(SalesTable,ReturnStatus));
                queryBuildRange.status(RangeStatus::Hidden);
                queryBuildRange.value(SysQuery::value(salesTable.ReturnStatus));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    When this method returns true the query values will be added to the dialog.
    /// </summary>
    /// <param name="parameterName">
    ///    Name of the query parameter in the data contract.
    /// </param>
    /// <returns>
    ///    true if query values are to be shown otherwise false.
    /// </returns>
    /// <remarks>
    ///    Used by the query ui builder.
    /// </remarks>
    public boolean showQueryValues(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        ReturnAcknowledgmentAndDocController  controller = new ReturnAcknowledgmentAndDocController();

        controller.parmReportName(ssrsReportStr(ReturnAcknowledgmentAndDocument, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>