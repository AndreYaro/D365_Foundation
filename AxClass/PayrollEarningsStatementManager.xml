<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningsStatementManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class handles the functionality of ActionPane items on EarningsStatementListPage
/// </summary>

class PayrollEarningsStatementManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteEarningStatement</Name>
				<Source><![CDATA[
    private static boolean deleteEarningStatement(PayrollEarningStatementRecId _payrollEarningStatementRecId)
    {
        PayrollEarningStatement         payrollEarningStatement;
        PayrollEarningStatementLine     payrollEarningStatementLine;
        boolean                         isDeleted = false;

        if (_payrollEarningStatementRecId)
        {
            select firstonly RecId from payrollEarningStatementLine
                where payrollEarningStatementLine.EarningStatement == _payrollEarningStatementRecId
                &&  payrollEarningStatementLine.PaymentStatus == PayrollPaymentProcessingStatus::Processed;

            if (!payrollEarningStatementLine.RecId)
            {
                delete_from payrollEarningStatement where payrollEarningStatement.RecId == _payrollEarningStatementRecId;
                isDeleted = true;
            }
        }

        return isDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateEarningStatementLines</Name>
				<Source><![CDATA[
    private static void generateEarningStatementLines(Args _args)
    {
        PayrollEarningStatementGeneration   earningStatementGeneration;
        PayrollPayPeriod                    payrollPayPeriod;
        HcmPositionWorkerAssignment         hcmPositionWorkerAssignment;
        utcdatetime                         periodStartDateTime, periodEndDateTime;
        PayrollEarningStatement             payrollEarningStatement = _args.record();

        payrollPayPeriod = PayrollPayPeriod::find(payrollEarningStatement.PayPeriod);
        periodStartDateTime = datetobeginUtcDateTime(payrollPayPeriod.PeriodStartDate, DateTimeUtil::getCompanyTimeZone());
        periodEndDateTime = datetoendUtcDateTime(payrollPayPeriod.PeriodEndDate, DateTimeUtil::getCompanyTimeZone());

        hcmPositionWorkerAssignment = HcmPositionWorkerAssignment::getActivePositionWorkerAssignment(payrollEarningStatement.Worker, periodStartDateTime, periodEndDateTime);

        if (hcmPositionWorkerAssignment)
        {
            earningStatementGeneration = PayrollEarningStatementGeneration::construct();
            earningStatementGeneration.parmCallingRecord(HcmWorker::find(payrollEarningStatement.Worker));
            earningStatementGeneration.parmPayPeriodRecId(payrollEarningStatement.PayPeriod);
            earningStatementGeneration.parmSkipCompletionMsgDisplay(true);
            earningStatementGeneration.initQuery();
            earningStatementGeneration.setRange();
            earningStatementGeneration.runOperation();
        }
        else
        {
            error("@Payroll:TheWorkerIsNotAssignedToAPositionForThisPayPeriodAssignTheWo");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PayrollEarningStatement     payrollEarningStatement;
        FormDataSource              formDataSource = FormDataUtil::getFormDataSource(args.record());
        boolean                     showMsg = false;
        str                         msg;
        int64                       updatedLineCount, earningStatementCount;

        if (args.menuItemName() == menuitemActionStr(PayrollEarningsStatementDelete))
        {
            if (formDataSource.recordsMarked().lastIndex() > 1)
            {
                msg = "@Payroll:AreYouSureYouWantToDeleteAllMarkedRecords";
            }
            else if (formDataSource.recordsMarked().lastIndex() == 1)
            {
                msg = strFmt("@Payroll:YouAreAboutToDeleteARecordIn1DeleteRecord", "@Payroll:EarningsStatement");
            }
            else
            {
                return;
            }

            if (Box::confirm(msg, "@SYS311259"))
            {
                for (payrollEarningStatement = formDataSource.getFirst(1) ? formDataSource.getFirst(1) : formDataSource.cursor(); payrollEarningStatement; payrollEarningStatement = formDataSource.getNext())
                {
                    if (!PayrollEarningsStatementManager::deleteEarningStatement(payrollEarningStatement.RecId))
                    {
                        showMsg = true;
                    }
                }

                if (showMsg)
                {
                    info("@Payroll:OneOrMoreEarningStatementsWasNotDeletedBecauseTheLinesHaveBe");
                }
            }
        }
        else if (args.menuItemName() == menuitemActionStr(PayrollEarningsStatementRelease) ||
                args.menuItemName() == menuitemActionStr(PayrollEarningsStatementHold))
        {
            switch (args.parmEnumType())
            {
                case enumNum(PayrollPaymentProcessingStatus):
                    for (payrollEarningStatement = formDataSource.getFirst(1) ? formDataSource.getFirst(1) : formDataSource.cursor(); payrollEarningStatement; payrollEarningStatement = formDataSource.getNext())
                    {
                        updatedLineCount = PayrollEarningStatementLine::updateLinesStatusByHeader(payrollEarningStatement.RecId, args.parmEnum());

                        //
                        //Only check the next condition if updateLinesStatusByHeader returns a positive number
                        //Check If there is any line in an earning statement that does not have hold or release status to determine the earning statement has released or onHold.
                        //
                        if (updatedLineCount != 0 && !PayrollEarningStatementLine::lineBesideHeaderAndStatusExists(payrollEarningStatement.RecId, args.parmEnum()))
                        {
                            earningStatementCount += 1;
                        }
                    }

                    if (earningStatementCount >= 1)
                    {
                        info (strFmt("@SYS4000368", earningStatementCount));
                    }

                    break;
            }
        }
        else if (args && args.record() && args.menuItemName() == menuitemActionStr(PayrollEarningsStmtGenNoDialog))
        {
            PayrollEarningsStatementManager::generateEarningStatementLines(args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>