<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjPayrollProjDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjPayrollProjDP</c> class provides data for the <c>ProjListProjPayrollProj</c>
///    report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjStatementProject)),
    SRSReportParameterAttribute(classstr(ProjListProjPayrollContract))
]
class ProjListProjPayrollProjDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    NoYes                   timeMaterialBillingMethod;
    NoYes                   fixedPriceBillingMethod;
    TransDate               projFromDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    ProjListColumnData      actualVsBudget;
    ProjForecastModelId     forecastModelId;
    ProjListStateProjType   stateProjType;
    Level                   level;
    boolean                 skipBlankId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;

    ProjListProjTrans_PayRoll       listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjHelpClass           projHelpClass;
    ProjListProjPayrollTmp          projListProjPayrollTmp;

    ProjTable               projTable;

    QueryRun                qrun;

    ProjId                  projIdFound, projId;
    boolean                 firstRun;
    NumberSequenceFormat    oldLevelFormat;

    ProjQty                 qtyHour;
    AmountMST               payRollCost;
    int                     reportType;

    int                     hourQtyDecimals, valueAddedDecimals, grossMarginDecimals, amountDecimals;
    int                     showPayrollCost, showQtyHour;
    ProjLabel               valueFactorLabel,grossMarginPctLabel, headerLabel, periodLabel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the payroll cost amount and hour quantity.
    /// </summary>
    void calculate()
    {
        projHelpClass.parmProjStatement().parmProjId(projIdFound);
        projHelpClass.setParmField();

        switch (amountQty)
        {
            case ProjAmountQty::Amount:
                payRollCost     += projHelpClass.parmProjStatement().d100_PayrollAllocation();
                break;

            case ProjAmountQty::Qty:
                qtyHour         += projHelpClass.parmProjStatement().d100_PayrollAllocation_Qty();
                break;

            case ProjAmountQty::AmountQty:
                payRollCost     += projHelpClass.parmProjStatement().d100_PayrollAllocation();
                qtyHour         += projHelpClass.parmProjStatement().d100_PayrollAllocation_Qty();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the parameters to determine whether the line should be printed.
    /// </summary>
    /// <returns>
    ///    true if the line should be printed; otherwise, false.
    /// </returns>
    boolean checkPrintLine()
    {
        if ((!skipZero || this.lineValue()) && listProjTransLayout.canPrintId(projHelpClass.id()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeLineOne</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Evaluates whether the line should be printed and inserts it into the temporary table.
    /// </summary>
    /// <param name="projTableLocal">
    ///    A record buffer that contains the information about a project.
    /// </param>
    void executeLineOne(ProjTable projTableLocal)
    {
        if (stateProjType == ProjListStateProjType::Project)
        {
            if ((projTableLocal.level() <= level) ||
                (projTableLocal.levelFormat(level)   != oldLevelFormat))
            {
                if (this.checkPrintLine())
                {
                    projHelpClass.setName();
                    this.insertProjListProjPayrollTmp();
                    this.setFieldZero();
                }
            }
        }
        else if (this.checkPrintLine())
        {
            projHelpClass.setName();
            this.insertProjListProjPayrollTmp();
            this.setFieldZero();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjPayrollTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>projListProjPayrollTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>projListProjPayrollTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('projListProjPayrollTmp')]
    public ProjListProjPayrollTmp getProjListProjPayrollTmp()
    {
        select * from projListProjPayrollTmp;

        return projListProjPayrollTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjListProjTrans</c> class with the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans = ProjListProjTrans::construct(ProjListStateType::Payroll, ProjListStateId::Project);
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);

        listProjTrans.parmProjFromDate(projFromDate);
        listProjTrans.parmProjToDate(projToDate);
        listProjTrans.parmLedgerFromDate(ledgerFromDate);
        listProjTrans.parmLedgerToDate(ledgerToDate);

        listProjTrans.parmColumnData(actualVsBudget);
        listProjTrans.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmStateProjType(stateProjType);
        listProjTransLayout.parmLevel(level);
        listProjTransLayout.parmSkipBlank(skipBlankId);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjPayrollTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjPayrollTmp()
    {
        projListProjPayrollTmp.clear();

        projListProjPayrollTmp.Id            = projHelpClass.id();
        projListProjPayrollTmp.Name          = projHelpClass.name();

        projListProjPayrollTmp.QtyHour       = qtyHour;
        projListProjPayrollTmp.PayrollCost   = listProjTransLayout.showAmountReport(payRollCost, showAmount);

        // set labels
        projListProjPayrollTmp.HeaderLabel   = headerLabel;
        projListProjPayrollTmp.PeriodLabel   = periodLabel;
        projListProjPayrollTmp.IdLabel       = enum2str(stateProjType);

        // set decimal values
        projListProjPayrollTmp.DecimalPayrollCost = amountDecimals;
        projListProjPayrollTmp.DecimalHourQty = hourQtyDecimals;

        // set field visibility
        projListProjPayrollTmp.ShowQtyHour = showQtyHour;
        projListProjPayrollTmp.ShowPayrollCost = showPayrollCost;

        projListProjPayrollTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the payroll cost amount and hour quantity are zero.
    /// </summary>
    /// <returns>
    ///    true if the values are not zero; otherwise false.
    /// </returns>
    boolean lineValue()
    {
        return (payRollCost  != 0 || qtyHour != 0 );
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource qbdsProjTable = qrun.query().dataSourceTable(tablenum(ProjTable));
        qbdsProjTable.addSortField(fieldnum(ProjTable, ProjId));

        QueryBuildRange rangeHide = qbdsProjTable.addRange(fieldnum(ProjTable, Type));
        rangeHide.status(RangeStatus::Hidden);

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsPSAContractLineItems = qrun.query().dataSourceTable(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.enabled(true);
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                timeMaterialBillingMethod,
                fixedPriceBillingMethod);
        }
        else
        {
            if (timeMaterial == NoYes::Yes)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (fixedPrice)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (investment)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::Investment));
            }

            if (internalCost)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::Cost));
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::Internal));
            }

            if (!(timeMaterial || fixedPrice || investment || internalCost))
            {
                QueryBuildRange rangeEmptyString = qbdsProjTable.addRange(fieldnum(ProjTable, Type));
                rangeEmptyString.value(queryValue(SysQuery::valueEmptyString()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the project level and calls the <c>calculate</c> method.
    /// </summary>
    void printProject()
    {
        ProjTable           projTableLocal;
        ProjFundingSource   projFundingSourceLocal;

        projTableLocal  = qrun.get(tablenum(ProjTable));
        projIdFound     = projTableLocal.ProjId;
        projId          = ProjListProjHelpClass::setProjId(projTableLocal,stateProjType,level);

        if (stateProjType == ProjListStateProjType::FundingSource)
        {
            projFundingSourceLocal = qrun.get(tablenum(ProjFundingSource));
        }
        projHelpClass.setId(projTableLocal, projId, projFundingSourceLocal);

        if (! listProjTransLayout.canPrintId(projHelpClass.idNew()))
        {
            projHelpClass.setOld();

            return;
        }

        if (! firstRun && projHelpClass.checkIdChanged())
        {
            this.executeLineOne(projTableLocal);
        }

        this.calculate();

        projHelpClass.setOld();
        oldLevelFormat  = projTableLocal.levelFormat(level);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SQL Server
    ///    Reporting Services (SSRS) at run time. The method should compute the data and populates the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjPayrollContract contract = this.parmDataContract() as ProjListProjPayrollContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();

        timeMaterialBillingMethod = contract.parmTimeMaterialBillingMethod();
        fixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        projFromDate = contract.parmProjFromDate();
        projToDate = contract.parmProjToDate();
        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelId();

        stateProjType = contract.parmStateProjType();
        level = contract.parmLevel();
        skipBlankId = contract.parmSkipBlankId();
        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();

        reportType = contract.parmReportType();

        firstRun = true;

        this.initProjListTrans();

        headerLabel   = listProjTrans.formatSelection(showAmount);
        periodLabel   = listProjTrans.formatPeriodLabel('', DateFlags::None);

        [showQtyHour, showPayrollCost] = listProjTrans.setDisplayFlags(amountQty);

        [hourQtyDecimals, amountDecimals,
        grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        projHelpClass = ProjListProjHelpClass::newListProjConsumption(
                                projStatement::newProjListPayroll(
                                        listProjTrans,
                                        projListProjTrans2Period::columnData2ActualBudget(actualVsBudget),
                                        amountQty,
                                        forecastModelId),
                                stateProjType);

        qrun = new QueryRun(this.parmQuery());

        this.modifyQuery();
        this.setSortField();

        while (qrun.next())
        {
            this.printProject();
            firstRun = false;
        }

        if (this.checkPrintLine())
        {
            projHelpClass.setName();
            this.insertProjListProjPayrollTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the variables to zero.
    /// </summary>
    void setFieldZero()
    {
        payRollCost = 0;
        qtyHour     = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the sort field for the query.
    /// </summary>
    void setSortField()
    {
        qrun.query().dataSourceTable(tablenum(ProjTable)).sortClear();

        switch (stateProjType)
        {
            case ProjListStateProjType::Project:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjId));
                break;

            case ProjListStateProjType::Customer:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,CustAccount));
                break;

            case ProjListStateProjType::ProjGroup:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjGroupId));
                break;

            case ProjListStateProjType::WIPProject:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,wipProject));
                break;

            case ProjListStateProjType::InvoiceProject:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));
                break;

            case ProjListStateProjType::ResponsibleSales:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleSales));
                break;

            case ProjListStateProjType::Responsible:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsible));
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleFinancial));
                break;

            case ProjListStateProjType::Type:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,Type));
                break;

            case ProjListStateProjType::Sorting1:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 1);
                break;

            case ProjListStateProjType::Sorting2:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 2);
                break;

            case ProjListStateProjType::Sorting3:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 3);
                break;

            case ProjListStateProjType::Asset:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,AssetId));
                break;

            case ProjListStateProjType::FundingSource:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));

                qrun.query().dataSourceTable(tablenum(ProjTable)).addDataSource(tablenum(ProjInvoiceTable));
                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).joinMode(JoinMode::InnerJoin);
                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addLink(fieldnum(ProjTable,ProjInvoiceProjId),fieldnum(ProjInvoiceTable,ProjInvoiceProjId));

                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addDataSource(tablenum(ProjFundingSource));
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).joinMode(JoinMode::InnerJoin);
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).addLink(fieldnum(ProjInvoiceTable,ProjInvoiceProjId), fieldnum(ProjFundingSource,ContractId));
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).addSortField(fieldnum(ProjFundingSource,FundingSourceId));
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>