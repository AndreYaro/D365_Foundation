<?xml version="1.0" encoding="utf-8"?>

<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>HcmPositionAssignCostElement_Update</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// Update Cost Elements to multiple positions.
/// </summary>

class HcmPositionAssignCostElement_Update extends HcmPositionForecastAssignCostElement
{
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>allowBudgetCostElementDefaultDates</Name>
        <Source><![CDATA[
    /// <summary>
    /// Indicates if the default dates are allowed to set on the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <returns>
    /// true if default dates can be set; otherwise false.
    /// </returns>

    protected boolean allowBudgetCostElementDefaultDates()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>createQueryForForecastBudgetAccountLine</Name>
        <Source><![CDATA[
    /// <summary>
    /// Create the query for the table <c>HcmPositionForecastBudgetAccountLine</c> records to update.
    /// this method is overrided will return query based on the update cost element to positions scenario.
    /// </summary>
    /// <param name="_hcmTmpPositionForecastAssignCostElement">
    /// The <c>HcmTmpPositionForecastAssignCostElement</c> table record.
    /// </param>
    /// <param name="_budgetPurposeType">
    /// The <c>HcmBudgetPurposeType</c> table record.
    /// </param>
    /// <returns>
    /// Returns the query for <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </returns>
    /// <remarks>
    /// Query returns the records for <c>HcmPositionForecastBudgetAccountLine</c> table that are used to push cost element changes to the forecast positions.
    /// </remarks>

    protected Query createQueryForForecastBudgetAccountLine(HcmTmpPositionForecastAssignCostElement _hcmTmpPositionForecastAssignCostElement, HcmBudgetPurposeType _budgetPurposeType)
    {
        Query query;
        QueryBuildDataSource qbdsBudgetPurposeTypeDetail;
        QueryBuildDataSource qbdspositionForecastBudgetAcctLine;
        QueryBuildRange range;

        query = new Query();

        qbdsBudgetPurposeTypeDetail = query.addDataSource(tableNum(HcmBudgetPurposeTypeDetail));

        range = qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, BudgetPurposeType));
        range.value(queryValue(_budgetPurposeType.RecId));

        range = qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, LegalEntity));
        range.value(queryValue(this.parmCompanyId()));

        range = qbdsBudgetPurposeTypeDetail.addRange(fieldNum(HcmBudgetPurposeTypeDetail, RecId));
        range.value(this.formatValidDateRangeByScenario(fieldStr(HcmBudgetPurposeTypeDetail,  EffectiveDate),
                                                        fieldStr(HcmBudgetPurposeTypeDetail,  ExpirationDate)));

        qbdspositionForecastBudgetAcctLine = qbdsBudgetPurposeTypeDetail.addDataSource(tableNum(HcmPositionForecastBudgetAcctLine));

        qbdspositionForecastBudgetAcctLine.joinMode(JoinMode::OuterJoin);

        qbdspositionForecastBudgetAcctLine.relations(true);

        range = qbdspositionForecastBudgetAcctLine.addRange(fieldNum(HcmPositionForecastBudgetAcctLine , PositionForecastScenario));
        range.value(queryValue(_hcmTmpPositionForecastAssignCostElement.HcmPositionForecastScenario));

        return query;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isLineLockedForRecalculation</Name>
        <Source><![CDATA[
    /// <summary>
    /// Indicates whether editing is allowed for the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </summary>
    /// <param name="_positionForecastBudgetAcctLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    /// <param name="_budgetpurposetypedetail">
    /// The <c>HcmBudgetPurposeTypeDetail</c> table record.
    /// </param>
    /// <returns>
    /// true if line is locked for editing; otherwise false.
    /// </returns>

    protected boolean isLineLockedForRecalculation(HcmPositionForecastBudgetAcctLine _positionForecastBudgetAcctLine, HcmBudgetPurposeTypeDetail _budgetpurposetypedetail)
    {
        boolean isValid;

        if (_positionForecastBudgetAcctLine.IsLineLockedForRecalculation == NoYes::Yes &&
            (_positionForecastBudgetAcctLine.orig().AmountCur != _budgetpurposetypedetail.Amount ||
            _positionForecastBudgetAcctLine.orig().PercentageOfDefaultBasisAmount != _budgetpurposetypedetail.Percent))
        {
            isValid = true;
        }

        return isValid;
    }

]]></Source>
      </Method>
      <Method>
        <Name>processBudgetAccountLine</Name>
        <Source><![CDATA[
    /// <summary>
    /// Process records of the <c>HcmPositionForecastBudgetAcctLine</c> table.
    /// </summary>
    /// <param name="_positionForecastBudgetAcctLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    protected void processBudgetAccountLine(HcmPositionForecastBudgetAcctLine _positionForecastBudgetAcctLine)
    {
        if (_positionForecastBudgetAcctLine.validateWrite())
        {
            ttsbegin;
            _positionForecastBudgetAcctLine.write();
            ttscommit;
        }
    }

]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>