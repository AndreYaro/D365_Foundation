<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPostEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsPostEngine</c> class is used to handle wave posting.
/// </summary>
abstract class WhsPostEngine implements System.IDisposable
{
    #WHSStatusUpdateFrequency

    WHSWaveTable            waveTable;
    WHSWaveMethodStatus     waveMethodStatus;
    WHSParameters           whsParameters;
    WHSWaveExecutionID      waveExecutionId;
    WHSReleaseToWarehouseId releaseToWarehouseId;
    WHSWaveTemplateLine     waveTemplateLine;
    WHSWaveLockManager      whsWaveLockManager;
    WHSWaveProgressLog      createWaveProgressLog;
    WHSWaveStepRefRecId     currentRunningWaveStep;
    WHSWaveStep             lastRunWaveStep;

    protected WHSWaveMethodStatusHandler waveMethodStatusHandler;

    private boolean showInfoLogMessage;
    private boolean invalidLoadLinesExist;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes the object and releases all currently held locks.
    /// </summary>
    public void dispose()
    {
        if (whsWaveLockManager)
        {
            whsWaveLockManager.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWaveMethodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates wave method status record for each wave step.
    /// </summary>
    void initWaveMethodStatus()
    {
        WHSWaveTemplateLine templateLine;

        if (createWaveProgressLog)
        {
            while select PostMethodName from templateLine
                  group by PostMethodName, WaveStep
                  order by WaveStep
                  where templateLine.WaveTemplateName == waveTable.WaveTemplateName
            {
                // Create wave method status record for each wave step
                WHSWaveMethodStatus::createOrUpdateWaveMethodStatus(waveTable.WaveId,
                                                                    templateLine.PostMethodName,
                                                                    false,
                                                                    0,
                                                                    0,
                                                                    1);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        whsParameters           = WHSParameters::find();
        whsWaveLockManager      = WHSWaveLockManager::newStandard();
        createWaveProgressLog   = whsParameters.WaveProgressLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentRunningWaveStep</Name>
				<Source><![CDATA[
    public WHSWaveStepRefRecId parmCurrentRunningWaveStep(WHSWaveStepRefRecId _currentRunningWaveStep = currentRunningWaveStep)
    {
        currentRunningWaveStep = _currentRunningWaveStep;

        return currentRunningWaveStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastRunWaveStep</Name>
				<Source><![CDATA[
    public WHSWaveStep parmLastRunWaveStep(WHSWaveStep _lastRunWaveStep)
    {
        lastRunWaveStep = _lastRunWaveStep;

        return lastRunWaveStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastRunWaveStep</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveStep lastRunWaveStep()
    {
        return lastRunWaveStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouseId</Name>
				<Source><![CDATA[
    public WHSReleaseToWarehouseId parmReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId = releaseToWarehouseId)
    {
        releaseToWarehouseId = _releaseToWarehouseId;

        return releaseToWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    public WHSWaveExecutionID parmWaveExecutionId(WHSWaveExecutionID _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;

        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveTable</Name>
				<Source><![CDATA[
    public WHSWaveTable parmWaveTable(WHSWaveTable _waveTable = waveTable)
    {
        waveTable = _waveTable;

        return waveTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveTemplateLine</Name>
				<Source><![CDATA[
    public WHSWaveTemplateLine parmWaveTemplateLine(WHSWaveTemplateLine _waveTemplateLine = waveTemplateLine)
    {
        waveTemplateLine = _waveTemplateLine;

        return waveTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseLockWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Release the lock on the wave being processed.
    /// </summary>
    protected void releaseLockWaveId()
    {
        whsWaveLockManager.releaseForWaveId(waveTable.WaveId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryLockWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Try to acquire a lock on the wave to be processed.
    /// </summary>
    /// <param name="_throwErrorOnFailure">
    ///    A Boolean value that indicates if an error must be thrown in case the lock could not be acquired.
    /// </param>
    /// <returns>
    ///    true if the lock was acquired; otherwise, false.
    /// </returns>
    protected boolean tryLockWaveId(boolean _throwErrorOnFailure)
    {
        return whsWaveLockManager.tryLockForWaveId(
                                            waveTable.WaveId,
                                            whsParameters.WaveLockWait,
                                            _throwErrorOnFailure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLockWaveId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Try to reacquire a lock on the wave being processed to prevent that the wave lock connection times out.
    /// </summary>
    [Hookable(false)]
    protected void ensureLockWaveId()
    {
        whsWaveLockManager.ensureLockForWaveId(waveTable.WaveId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveLockManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>WHSWaveLockManager</c> instance used for processing this wave.
    /// </summary>
    /// <returns>An instance of the lock manager class used for locking the wave during processing.</returns>
    [Hookable(false)]
    internal whsWaveLockManager parmWaveLockManager()
    {
        return whsWaveLockManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveMethodStatusHandler</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveMethodStatusHandler parmWaveMethodStatusHandler(WHSWaveMethodStatusHandler _waveMethodStatusHandler = waveMethodStatusHandler)
    {
        waveMethodStatusHandler = _waveMethodStatusHandler;
        return waveMethodStatusHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyDimensionAboveLocationMissing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if all the dimensions above location are specified.
    /// </summary>
    /// <param name = "_inventDim">The dimension set to validate</param>
    /// <param name = "_reservationHierarchyAboveLocation">The reservation hierarchy.</param>
    /// <param name = "_loadLine">The load line</param>
    /// <returns>true if any dimensions is missing; otherwise, false.</returns>
    [Replaceable]
    protected boolean isAnyDimensionAboveLocationMissing(InventDim _inventDim, List _reservationHierarchyAboveLocation, WHSLoadLine _loadLine)
    {
        return WHSReservationHierarchyInventDimUtil::inventDimHasBlankValues(_inventDim, _reservationHierarchyAboveLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAnyDimAboveLocationMissing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates all loads that belong to the wave have dimensions above location specified.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///    The wave cannot be posted, because it has one or more invalid loads.
    /// </exception>
    protected void validateAnyDimAboveLocationMissing()
    {
        WHSWaveLine                     whsWaveLine;
        WHSLoadLine                     whsLoadLine;
        InventDim                       inventDim;
        WHSReservationHierarchyItem     whsReservationHierarchyItem;
        InventTable                     inventTable;
        List                            reservationHierarchyAboveLocation;
        WHSReservationHierarchyProvider whsReservationHierarchyProvider;

        whsReservationHierarchyProvider = WHSReservationHierarchyProvider::construct();

        while select whsLoadLine
            where whsLoadLine.Invalid == NoYes::No
        join TableId from inventTable
            where inventTable.ItemId == whsLoadLine.ItemId
        join ReservationHierarchy from whsReservationHierarchyItem
            where whsReservationHierarchyItem.ItemDataAreaId == inventTable.DataAreaId
            &&    whsReservationHierarchyItem.ItemId         == inventTable.ItemId
        join inventDim
            where inventDim.InventDimId == whsLoadLine.InventDimId
        exists join whsWaveLine
            where whsWaveLine.WaveId == waveTable.WaveId
            &&    whsWaveLine.ShipmentId == whsLoadLine.ShipmentId
        {
            WHSReservationHierarchyRecId prevWHSReservationHierarchyRecId;

            if (prevWHSReservationHierarchyRecId != whsReservationHierarchyItem.ReservationHierarchy)
            {
                reservationHierarchyAboveLocation = whsReservationHierarchyProvider.getDimListAboveLocation(whsReservationHierarchyItem.ReservationHierarchy, WHSReservationHierarchySortOrder::BottomUp);
                prevWHSReservationHierarchyRecId = whsReservationHierarchyItem.ReservationHierarchy;
            }

            if (this.isAnyDimensionAboveLocationMissing(inventDim, reservationHierarchyAboveLocation, whsLoadLine))
            {
                invalidLoadLinesExist = true;
                WHSMessage errorMessage = strFmt("@WAX5797", whsLoadLine.LoadId, whsLoadLine.ItemId, whsLoadLine.InventTransId);

                WHSPostEngine::createWaveExecutionHistoryLine(
                                                waveTable.WaveId,
                                                waveExecutionId,
                                                errorMessage,
                                                true);
                this.addInfoLogMessage(errorMessage);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSerialControlledItemMultipleQuantity</Name>
				<Source><![CDATA[
    private void validateSerialControlledItemMultipleQuantity()
    {
        WHSWaveLine whsWaveLine;
        WHSLoadLine whsLoadLine;
        InventDim   inventDim;
        InventTable inventTable;

        while select whsLoadLine
            where whsLoadLine.Invalid == NoYes::No
            && whsLoadLine.InventQty  > 1
        join inventTable
            where inventTable.ItemId == whsLoadLine.ItemId
        exists join inventDim
            where inventDim.InventDimId    == whsLoadLine.InventDimId
            &&    inventDim.inventSerialId != ''
        exists join whsWaveLine
            where whsWaveLine.WaveId     == waveTable.WaveId
            &&    whsWaveLine.ShipmentId == whsLoadLine.ShipmentId
        {
            if (inventTable.isItemSerialNumberControlled())
            {         
                invalidLoadLinesExist = true;
                WHSMessage errorMessage = strFmt("@WAX:ErrorLoadLineQtySerialControlledItemGreaterThanOne", whsLoadLine.ShipmentId, whsLoadLine.ItemId, whsLoadLine.InventTransId);

                WHSPostEngine::createWaveExecutionHistoryLine(
                                                waveTable.WaveId,
                                                waveExecutionId,
                                                errorMessage,
                                                true);
                this.addInfoLogMessage(errorMessage);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadLineItemsNotStoppedForInventoryOrSales</Name>
				<Source><![CDATA[
    private void validateLoadLineItemsNotStoppedForInventoryOrSales()
    {
        WHSWaveLine whsWaveLine;
        WHSLoadLine whsLoadLine;

        while select ShipmentId, InventTransId, ItemId, InventDimId, InventTransType from whsLoadLine
            where whsLoadLine.Invalid == NoYes::No
            exists join whsWaveLine
                where whsWaveLine.WaveId     == waveTable.WaveId
                    && whsWaveLine.ShipmentId == whsLoadLine.ShipmentId
        {
            if (this.canCreateWaveExecutionHistoryLineForLoadLineNotStoppedForInventoryOrSales(whsLoadLine))
            {
                invalidLoadLinesExist = true;
                WHSMessage errorMessage = strFmt("@WAX:Error_LoadLineItemStoppedForSalesOrInventory", strFmt("@SCM:FieldValuesPrefixInfo", fieldPName(WHSLoadLine, ShipmentId), whsLoadLine.ShipmentId,
                        fieldPName(WHSLoadLine, InventTransId), whsLoadLine.InventTransId, fieldPName(WHSLoadLine, ItemId), whsLoadLine.ItemId));

                WHSPostEngine::createWaveExecutionHistoryLine(
                    waveTable.WaveId, 
                    waveExecutionId,
                    errorMessage,
                    true);
                this.addInfoLogMessage(errorMessage);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateWaveExecutionHistoryLineForLoadLineNotStoppedForInventoryOrSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if wave processing history log record can be created based on load line not stopped for inventory or sales.
    /// </summary>
    /// <param name = "_loadLine">The load line record.</param>
    /// <returns>true if wave processing history log record can be created; otherwise, false.</returns>
    public boolean canCreateWaveExecutionHistoryLineForLoadLineNotStoppedForInventoryOrSales(WHSLoadLine _loadLine)
    {
        return InventItemInventSetup::find(_loadLine.ItemId, _loadLine.InventDimId).stopped()
            || (_loadLine.InventTransType == InventTransType::Sales
                && InventItemSalesSetup::find(_loadLine.ItemId, _loadLine.InventDimId).stopped());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIfInvalidLoadLinesExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for invalid load lines.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///    The wave cannot be posted, because it has one or more invalid load lines.
    /// </exception>
    protected void validateIfInvalidLoadLinesExist()
    {
        WHSWaveLine     whsWaveLine;
        WHSLoadLine     whsLoadLine;

        while select ShipmentId, ItemId, InventTransId from whsLoadLine
            where whsLoadLine.Invalid == NoYes::Yes
            exists join whsWaveLine
            where whsWaveLine.WaveId == waveTable.WaveId
                && whsWaveLine.ShipmentId == whsLoadLine.ShipmentId
        {
            invalidLoadLinesExist = true;
            WHSMessage errorMessage = strFmt("@WAX5522", whsLoadLine.ShipmentId, whsLoadLine.ItemId, whsLoadLine.InventTransId);

            WHSPostEngine::createWaveExecutionHistoryLine(
                waveTable.WaveId,
                waveExecutionId,
                errorMessage,
                true);
            this.addInfoLogMessage(errorMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoads</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates all loads that belong to the wave.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///    The wave cannot be posted, because it has one or more invalid loads.
    /// </exception>
    protected void validateLoads()
    {
        this.initDisplayInfoLogMessage();

        this.validateIfInvalidLoadLinesExist();
        this.validateAnyDimAboveLocationMissing();
        this.validateSerialControlledItemMultipleQuantity();
        this.validateLoadLineItemsNotStoppedForInventoryOrSales();

        this.validateInvalidLoadLinesExist();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDisplayInfoLogMessage</Name>
				<Source><![CDATA[
    private void initDisplayInfoLogMessage()
    {
        invalidLoadLinesExist = false;

        if (!WHSParameters::find().WaveExecutionHistoryLog)
        {
            showInfoLogMessage = true;            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInfoLogMessage</Name>
				<Source><![CDATA[
    private void addInfoLogMessage(SysInfoLogStr _infoLogStr)
    {
        if (showInfoLogMessage)
        {
            checkFailed(_infoLogStr);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvalidLoadLinesExist</Name>
				<Source><![CDATA[
    private void validateInvalidLoadLinesExist()
    {
        if (invalidLoadLinesExist)
        {
            throw error("@WAX:InvalidLoadLinesInWaveProcessing");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaveExecutionHistoryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a wave execution history record.
    /// </summary>
    /// <param name="_waveId">
    /// Wave id of the wave execution.
    /// </param>
    /// <param name="_waveExecutionId">
    /// Wave execution id.
    /// </param>
    /// <param name="_message">
    /// Wave execution message.
    /// </param>
    /// <param name="_fail">
    /// Determines whether the execution has failed or not.
    /// </param>
    /// <param name="_tmpWorkLine">
    /// Temporary work line created.
    /// </param>
    /// <param name="_workBuildId">
    /// Work build id of the wave execution.
    /// </param>
    public static void createWaveExecutionHistoryLine(WHSWaveId             _waveId,
                                                      WHSWaveExecutionID    _waveExecutionId,
                                                      WHSMessage            _message,
                                                      boolean               _fail,
                                                      WHSTmpWorkLine        _tmpWorkLine = null,
                                                      WHSWorkBuildId        _workBuildId = '')
    {
        if (_waveId && WHSParameters::find().WaveExecutionHistoryLog)
        {
            UserConnection conn = new UserConnection();

            try
            {
                conn.ttsbegin();

                WHSWaveExecutionHistory waveExecutionHistory;
                waveExecutionHistory.setConnection(conn);
                waveExecutionHistory.InventLocationId = _tmpWorkLine.InventLocationId;
                waveExecutionHistory.ShipmentId      = _tmpWorkLine.ShipmentId;
                WHSPostEngine::setWHSWaveExecutionHistoryValues(waveExecutionHistory, _waveId, _waveExecutionId, _tmpWorkLine.LoadId, _message, _fail, _workBuildId);
                WHSPostEngine::insertWaveExecutionHistoryBuffer(waveExecutionHistory);

                conn.ttscommit();
            }
            finally
            {
                conn.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMultipleWaveExecutionHistoryLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a wave execution history record.
    /// </summary>
    /// <param name="_waveId">
    /// Wave id of the wave execution.
    /// </param>
    /// <param name="_waveExecutionId">
    /// Wave execution id.
    /// </param>    
    /// <param name="_loadIdMessages">
    /// A map with messages for load Id's. For each message a new history record will be created.
    /// </param>
    /// <param name="_fail">
    /// Determines whether the execution has failed or not.
    /// </param>
    /// <param name="_workBuildId">
    /// Work build id of the wave execution.
    /// </param>
    internal static void createMultipleWaveExecutionHistoryLines(
        WHSWaveId               _waveId,
        WHSWaveExecutionID      _waveExecutionId,
        Map                     _loadIdMessages,
        boolean                 _fail,
        WHSWorkBuildId          _workBuildId)
    {
        if (_waveId && WHSParameters::find().WaveExecutionHistoryLog)
        {
            UserConnection conn = new UserConnection();

            try
            {
                conn.ttsbegin();

                MapEnumerator me = _loadIdMessages.getEnumerator();
                while (me.moveNext())
                {
                    WHSLoadId loadId = me.currentKey();
                    Set messages = me.currentValue();
                    SetEnumerator se = messages.getEnumerator();

                    while (se.moveNext())
                    {
                        WHSWaveExecutionHistory waveExecutionHistory;
                        waveExecutionHistory.setConnection(conn);

                        WHSPostEngine::setWHSWaveExecutionHistoryValues(waveExecutionHistory, _waveId, _waveExecutionId, loadId, se.current(), _fail, _workBuildId);
                        WHSPostEngine::insertWaveExecutionHistoryBuffer(waveExecutionHistory);
                    }
                }
                conn.ttscommit();
            }
            finally
            {
                conn.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSWaveExecutionHistoryValues</Name>
				<Source><![CDATA[
    private static void setWHSWaveExecutionHistoryValues(
        WHSWaveExecutionHistory _waveExecutionHistory,
        WHSWaveId               _waveId,
        WHSWaveExecutionID      _waveExecutionId,
        WHSLoadId               _loadId,
        WHSMessage              _message,
        boolean                 _fail,
        WHSWorkBuildId          _workBuildId)
    {
        _waveExecutionHistory.WaveId             = _waveId;
        _waveExecutionHistory.WaveExecutionID    = _waveExecutionId;
        _waveExecutionHistory.LoadId             = _loadId;

        if (!_waveExecutionHistory.InventLocationId)
        {
            _waveExecutionHistory.InventLocationId   = WHSWaveTable::find(_waveId).InventLocationId;
        }

        _waveExecutionHistory.Message            = _message;
        _waveExecutionHistory.TransDateTime      = DateTimeUtil::utcNow();
        _waveExecutionHistory.Fail               = _fail;
        _waveExecutionHistory.WorkBuildId        = _workBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWaveExecutionHistoryBuffer</Name>
				<Source><![CDATA[
    private static void insertWaveExecutionHistoryBuffer(WHSWaveExecutionHistory _waveExecutionHistory)
    {
        _waveExecutionHistory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWaveStepsStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls wave post methods in the order provided by the wave template.
    /// </summary>
    /// <param name="_waveId">
    /// The wave Id of the wave being processed.
    /// </param>
    /// <param name="_waveExecutionId">
    /// The wave execution Id of the current wave process.
    /// </param>
    /// <param name="_releaseToWarehouseId">
    /// The release to warehouse Id if of the current release if the wave was created and processed automatically at release; optional.
    /// </param>
    /// <param name="_lastRunWaveStep">
    /// The step number of the last run wave step in the wave template.
    /// </param>
    /// <returns>
    /// A container with a boolean value that informs if the wave ran successfully or not
    /// </returns>
    public static container executeWaveStepsStatic(
        WHSWaveId               _waveId,
        WHSWaveExecutionID      _waveExecutionId,
        WHSReleaseToWarehouseId _releaseToWarehouseId = '',
        WHSWaveStep             _lastRunWaveStep = 0)
    {
        container conResult;

        using (var baseEngine = WHSPostEngineBase::newFromParameters(_waveId, _waveExecutionId, _releaseToWarehouseId, _lastRunWaveStep))
        {
            conResult = baseEngine.executeWaveSteps();
        }

        return conResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWaveForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the provided wave can be posted to the warehouse for processing.
    /// </summary>
    /// <param name = "_waveTable">The <c>WHSWaveTable</c> record to validate.</param>
    /// <param name = "_waveExecutionId">The <c>WHSWaveExecutionID</c> to be used for posting. Used for logging purposes.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal static void validateWaveForPosting(WHSWaveTable _waveTable, WHSWaveExecutionID _waveExecutionId)
    {
        if (_waveTable.WaveStatus != WHSWaveStatus::Created)
        {
            WHSPostEngine::createWaveExecutionHistoryLine(_waveTable.WaveId, _waveExecutionId, strFmt("@WAX2074", _waveTable.WaveId), true);
            throw error(strFmt("@WAX2074", _waveTable.WaveId));
        }

        if (!_waveTable.InventLocationId)
        {
            WHSPostEngine::createWaveExecutionHistoryLine(_waveTable.WaveId, _waveExecutionId, "@WAX3315", true);
            throw error("@WAX3315");
        }

        WHSWaveTemplateTable waveTemplate = WHSWaveTemplateTable::find(_waveTable.WaveTemplateName);

        if (!waveTemplate.Valid)
        {
            WHSPostEngine::createWaveExecutionHistoryLine(_waveTable.WaveId, _waveExecutionId, "@WAX3162", true);
            throw error("@WAX3162");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a wave into warehouse.
    /// </summary>
    /// <param name="_waveTable">
    /// Wave record to be posted.
    /// </param>
    /// <param name="_releaseToWarehouseId">
    /// Release to warehouse id.
    /// </param>
    /// <returns>
    /// True if posted successfully.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception is thrown when the wave is executed already.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Exception is thrown when warehouse is not defined for the wave.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Exception is thrown when wave template is not valid.
    /// </exception>
    /// <exception cref="Exception::Deadlock">
    /// Deadlock exception is thrown when retry count exceeds maximum.
    /// </exception>
    public static boolean post(WHSWaveTable _waveTable, WHSReleaseToWarehouseId _releaseToWarehouseId = '')
    {
        WHSWaveTable        waveTable;
        WHSWaveExecutionID  waveExecutionId = WHSWaveExecutionHistory::getNewWaveExecutionId();
        boolean             valid;
        boolean             mustRevertWaveStateOnException;
        #OCCRetryCount

        try
        {
            //we need to read a fresh record here in case the wave is updated on another AOS
            waveTable = WHSWaveTable::findEnsureRecordIsReadInsideTTS(_waveTable.WaveId);

            using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newPerformanceTaskWithoutWaveStep(waveTable, waveExecutionId, 'postWave'))
            using (var appInsightsActivity = WHSWaveProcessingPostWaveApplicationInsightsActivity::newFromParameters(waveTable.WaveId, waveExecutionId, waveTable.InventLocationId))
            {
                WhsPostEngine::validateWaveForPosting(waveTable, waveExecutionId);

                if (WHSParameters::find().WaveProgressLog)
                {
                    WHSWaveMethodStatus::deleteWaveMethodStatus(waveTable.WaveId);
                }

                if (WHSPostEngine::canProcessWaveInBatch(waveTable, waveExecutionId))
                {
                    // This part of code is run in batch and the wave status change should not be in same transaction to make sure it is visible in UI
                    // The handling of state needs to be done in the catch block.
                    WHSPostEngine::tryUpdateWaveToExecutingUsingCon(waveTable.WaveId, waveExecutionId);
                    mustRevertWaveStateOnException = true;
                    [valid] = WHSPostEngine::executeWaveStepsStatic(waveTable.WaveId, waveExecutionId, _releaseToWarehouseId);
                }
                else
                {
                    // This part of code is not run in batch or is already in transaction and therefore it is alright to put it in a transaction
                    // to make sure the wave status is reverted if the execution fails.
                    ttsbegin;
                    WHSPostEngine::tryUpdateWaveToExecutingInCurrentCon(waveTable.WaveId, waveExecutionId);//state will be rolled back if we fail so no need to deal with it in clean up
                    [valid] = WHSPostEngine::executeWaveStepsStatic(waveTable.WaveId,  waveExecutionId, _releaseToWarehouseId);
                    ttscommit;
                }
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                mustRevertWaveStateOnException = WhsPostEngine::handlePostException(waveTable, waveExecutionId, mustRevertWaveStateOnException);
                                        
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                
                retry;
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                mustRevertWaveStateOnException = WhsPostEngine::handlePostException(waveTable, waveExecutionId, mustRevertWaveStateOnException);
                    
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                
                retry;
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::CLRError)
        {
            ApplicationUnhandledExceptionLogger::processUnhandledCLRException();

            WhsPostEngine::handlePostException(waveTable, waveExecutionId, mustRevertWaveStateOnException);
        }                      
        catch
        {
            WHSAugmentErrorMessage::augmentErrorMessage();
                            
            WhsPostEngine::handlePostException(waveTable, waveExecutionId, mustRevertWaveStateOnException);
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessWaveInBatch</Name>
				<Source><![CDATA[
    private static boolean canProcessWaveInBatch(WHSWaveTable _waveTable, WHSWaveExecutionID _waveExecutionId)
    {
        using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newFromWaveExecutionType(_waveTable, _waveExecutionId))
        {
            boolean canProcessWaveInBatch = _waveTable.canProcessInBatch();

            perfTask.setRunInBatch(canProcessWaveInBatch);

            return canProcessWaveInBatch;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWaveStatusAfterProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets wave status after successful wave processing.
    /// </summary>
    /// <param name = "_waveTable">Wave record to be set.</param>
    /// <param name = "_numWorkCreated">Number of work created; optional.</param>
    /// <param name = "_autoRelease">Should the wave be auto-released; optional.</param>
    public static void setWaveStatusAfterProcessing(
        WHSWaveTable        _waveTable,
        WHSNumWorkCreated   _numWorkCreated = _waveTable.numWorkCreated(),
        boolean             _autoRelease = _waveTable.waveTemplate().AutoReleaseWave)
    {
        WHSNumWorkRemaining numWorkRemaining = _waveTable.numWorkRemaining();
        _waveTable.HeldUTCDateTime = DateTimeUtil::utcNow();

        if (numWorkRemaining == _numWorkCreated) // Nothing started yet
        {
            _waveTable.WaveStatus = max(_waveTable.WaveStatus, WHSWaveStatus::Held);
        }
        else
        {
            _waveTable.WaveStatus = WHSWaveStatus::Held;
        }

        if (_waveTable.WaveStatus <= WHSWaveStatus::Released &&
            (_autoRelease || numWorkRemaining == 0))
        {
            _waveTable.WaveStatus = WHSWaveStatus::Released;
            _waveTable.ReleasedUTCDateTime = DateTimeUtil::utcNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUpdateWaveToExecutingUsingCon</Name>
				<Source><![CDATA[
    private static void tryUpdateWaveToExecutingUsingCon(
        WHSWaveId           _whsWaveId,
        WHSWaveExecutionID  _waveExecutionId
        )
    {
        WhsPostEngine::tryUpdateWaveToExecutingUsingReadPastAndPessimisticLock(_whsWaveId, _waveExecutionId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUpdateWaveToExecutingUsingReadPastAndPessimisticLock</Name>
				<Source><![CDATA[
    private static void tryUpdateWaveToExecutingUsingReadPastAndPessimisticLock(
        WHSWaveId           _whsWaveId,
        WHSWaveExecutionID  _waveExecutionId,
        boolean             _useUserConnection)
    {
        UserConnection conn;
        
        if (_useUserConnection)
        {
            conn = new UserConnection();
        }

        try
        {
            WHSWaveTable waveTable;
            if (conn)
            {
                conn.ttsbegin();
                waveTable.setConnection(conn);
            }

            waveTable.readPast(true);
            select firstonly pessimisticlock waveTable
                where waveTable.WaveId == _whsWaveId;

            if (!waveTable)
            {
                boolean isWhsPostEngineWaveTablePessimisticLockValidationFlightEnabled = WhsPostEngineWaveTablePessimisticLockValidationFlight::instance().isEnabled();
                
                str errorStr = strFmt("@WAX:WaveCouldNotBeSelectedwithPessimisticLockDuringUpdateToProcessing_Error", isWhsPostEngineWaveTablePessimisticLockValidationFlightEnabled ? _whsWaveId : waveTable.WaveId, WHSWaveStatus::Executing);
                WHSPostEngine::createWaveExecutionHistoryLine(isWhsPostEngineWaveTablePessimisticLockValidationFlightEnabled ? _whsWaveId : waveTable.WaveId, _waveExecutionId, errorStr, true);
                
                throw error(errorStr);
            }

            if (waveTable.WaveStatus != WHSWaveStatus::Created)
            {
                str errorStr = strFmt("@WAX2074", waveTable.WaveId);
                WHSPostEngine::createWaveExecutionHistoryLine(waveTable.WaveId, _waveExecutionId, errorStr, true);
                throw error(errorStr);
            }
        
            waveTable.WaveStatus = WHSWaveStatus::Executing;
            waveTable.ExecutingUTCDateTime = DateTimeUtil::utcNow();
            waveTable.update();
            
            if (conn)
            {
                conn.ttscommit();
            }
        }
        finally
        {
            if (conn)
            {
                conn.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUpdateWaveToExecutingInCurrentCon</Name>
				<Source><![CDATA[
    private static void tryUpdateWaveToExecutingInCurrentCon(
        WHSWaveId           _whsWaveId,
        WHSWaveExecutionID  _waveExecutionId)
    {
        ttsBegin;

        WhsPostEngine::tryUpdateWaveToExecutingUsingReadPastAndPessimisticLock(_whsWaveId, _waveExecutionId, false);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePostException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reports error in <c>WHSWaveExecutionHistory</c> and reverts wave state if <paramref name="_mustRevertWaveStateOnException"/> is set to true.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    /// <param name = "_waveExecutionId">The wave execution identifier.</param>
    /// <param name = "_mustRevertWaveStateOnException">Should wave state be reverted.</param>
    /// <returns>
    /// true if wave state should be reverted after handling this exception; otherwise false.
    /// </returns>
    /// <remarks>
    /// Clean up of the failed wave is handled by the <c>WHSWaveExecutionFailureHandler</c> on transaction events.
    /// </remarks>
    protected static boolean handlePostException(
        WHSWaveTable       _waveTable,
        WHSWaveExecutionID _waveExecutionId,
        boolean            _mustRevertWaveStateOnException)
    {
        boolean mustRevertWaveStateOnException = _mustRevertWaveStateOnException;
        //we only reset the status if we changed it in seperate connection - if not, it means that somebody else is processing this wave or we just rolled back the state because we updated in the same transaction.
        if (mustRevertWaveStateOnException)
        {
            // Handling can be called outside of the transaction.
            // Here, we are rolling back the wave state and the update needs to be in the transaction.
            ttsbegin;
            WHSWaveTable wave = WHSWaveTable::find(_waveTable.WaveId, true);
            wave.resetToStatusCreated();
            mustRevertWaveStateOnException = false;
            ttscommit;
        }        

        // Report errors in Execution History Log
        WHSPostEngine::createWaveExecutionHistoryLine(_waveTable.WaveId, _waveExecutionId, infolog.text(), true);

        WhsWaveNotificationManager::instance().handleNotificationsOnWaveExecuted(_waveTable, _waveExecutionId, 0, infolog.text());        

        return mustRevertWaveStateOnException;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>