<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUpgradeBlockedWorksWithNoBlockingReasonService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class that handles the blocked works with no blocking reason.
/// </summary>
[SysObsolete('This functionality is deprecated since all work should be upgraded to use work blocking', false, 24\06\2022)]
internal final class WHSUpgradeBlockedWorksWithNoBlockingReasonService
{
    private const Counter MaxRetries = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableBlockingReasonFeature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the usage of the Blocking Reasons feature.
    /// </summary>
    [Hookable(false)]
    internal void enableBlockingReasonFeature()
    {
        WHSInstrumentationLogger logger = WHSInstrumentationLogger::createLogger(classStr(WHSUpgradeBlockedWorksWithNoBlockingReasonService));

        using (var activityContext = logger.upgradeBlockedWorks().executeBlockedWorksUpgrade())
        {
            this.validateUpgradeWasNotExecuted();

            this.upgradeBlockedWorksWithNoBlockingReason();

            this.adjustBlockingReasonsForWorkModifiedDuringUpgrade();

            this.updateParameters();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBlockingReasonsForWorkModifiedDuringUpgrade</Name>
				<Source><![CDATA[
    private void adjustBlockingReasonsForWorkModifiedDuringUpgrade()
    {
        WHSWorkBlockingConsistencyChecks::removeReasonsFromNotFrozenWorks();

        WHSWorkBlockingConsistencyChecks::removeNoLongerAccurateReasons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeBlockedWorksWithNoBlockingReason</Name>
				<Source><![CDATA[
    private void upgradeBlockedWorksWithNoBlockingReason()
    {
        Counter numberOfRetries;
        boolean existsBlockedWorkWithNoReasons = true;

        while (existsBlockedWorkWithNoReasons)
        {
            if (numberOfRetries == MaxRetries)
            {
                throw error("@WAX:WHSNumberOfRetriesExcededUpgradeBlockingReasons");
            }

            WHSWorkBlockingConsistencyChecks::addReasonsForAllBlockedWorksWithNoBlockingReasons();

            existsBlockedWorkWithNoReasons = WHSWorkBlockingConsistencyChecks::existsBlockedWorkWithNoReasons();

            numberOfRetries++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParameters</Name>
				<Source><![CDATA[
    private void updateParameters()
    {
        ttsbegin;

        WHSParameters parameters = WHSParameters::find(true);

        parameters.EnableBlockingReasons = NoYes::Yes;
        parameters.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpgradeWasNotExecuted</Name>
				<Source><![CDATA[
    private void validateUpgradeWasNotExecuted()
    {
        ttsbegin;

        WHSParameters parameters = WHSParameters::find();

        if (parameters.EnableBlockingReasons)
        {
            throw error("@WAX:WHSBlockingReasonFeatureAlreadyEnabled");
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>