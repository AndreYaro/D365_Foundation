<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocumentCityCreator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is reponsible for creating city electronic fiscal documents.
/// </summary>
class EFDocumentCityCreator_BR
{
    EFDocumentCity_BR efDocumentCity;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>EFDocumentCity_BR</c> from a given <c>FiscalDocument_BR</c>.
    /// </summary>
    /// <param name="_fiscalDocument">
    /// <c>FiscalDocument_BR</c> to create the city fiscal document from.
    /// </param>
    /// <returns>
    /// <c>EFDocumentCity_BR</c> created for the given fiscal document.
    /// </returns>
    public EFDocumentCity_BR create(FiscalDocument_BR  _fiscalDocument)
    {
        efDocumentCity.FiscalDocument_BR    = _fiscalDocument.RecId;
        efDocumentCity.RPSNumber            = _fiscalDocument.FiscalDocumentNumber;
        efDocumentCity.RPSDate              = _fiscalDocument.FiscalDocumentDate;

        this.initRPSStatus(_fiscalDocument);
        this.initRPSType(_fiscalDocument);

        efDocumentCity.insert();

        return efDocumentCity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRPSStatus</Name>
				<Source><![CDATA[
        private void initRPSStatus(FiscalDocument_BR    _fiscalDocument)
    {
        #RPSFlags_BR

        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans;
        FiscalDocumentLine_BR       fiscalDocumentLine;

        if (!hasFieldAccess(tablenum(FiscalDocumentTaxTrans_BR), fieldnum(FiscalDocumentTaxTrans_BR, TaxValue), AccessType::View))
        {
            throw error("@SYS57330"); // Insufficient rights
        }

        select firstOnly TaxAmount, TaxBaseAmountExempt, TaxBaseAmountOther from fiscalDocumentTaxTrans
            join RecId from fiscalDocumentLine
                where   fiscalDocumentLine.FiscalDocument   == _fiscalDocument.RecId
                    &&  fiscalDocumentLine.RecId            == fiscalDocumentTaxTrans.FiscalDocumentLine
                    &&  fiscalDocumentTaxTrans.Type         == TaxType_BR::ISS;

        if (fiscalDocumentTaxTrans.TaxAmount)
        {
            efDocumentCity.RPSStatus = RPSStatus_BR::IssPayable;
        }
        else if (fiscalDocumentTaxTrans.TaxBaseAmountExempt || fiscalDocumentTaxTrans.TaxBaseAmountOther)
        {
            efDocumentCity.RPSStatus = RPSStatus_BR::IssExempt;
        }

        if (_fiscalDocument.DeliveryLogisticsPostalAddress)
        {
            if (LogisticsPostalAddress::findRecId(_fiscalDocument.DeliveryLogisticsPostalAddress).City != FiscalEstablishment_BR::findById(_fiscalDocument.FiscalEstablishment).postalAddress().City)
            {
                efDocumentCity.RPSStatus = RPSStatus_BR::IssOutsideCity;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRPSType</Name>
				<Source><![CDATA[
        private void initRPSType(FiscalDocument_BR    _fiscalDocument)
    {
        FiscalDocumentLine_BR fiscalDocumentLine;

        select count(RecId) from fiscalDocumentLine
            where   fiscalDocumentLine.FiscalDocument   == _fiscalDocument.RecId
                &&  fiscalDocumentLine.ItemType         != FiscalDocumentLineItemType_BR::Service;

        efDocumentCity.RPSType  = (fiscalDocumentLine.RecId ? RPSType_BR::RPSM : RPSType_BR::RPS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static EFDocumentCityCreator_BR construct()
    {
        return new EFDocumentCityCreator_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>