<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSplitWorkMultiLineValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class encapsulates the validation whether the selected work lines can be split from the passed work.
/// </summary>
internal class WHSSplitWorkMultiLineValidator
{
    private Map         selectedWorkLines;
    private WHSWorkId   workId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSelectedWorkLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Map parmSelectedWorkLines(Map _selectedWorkLines = selectedWorkLines)
    {
        selectedWorkLines = _selectedWorkLines;

        return selectedWorkLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkId parmWorkId(WHSWorkId _workId = workId)
    {
        workId = _workId;

        return workId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSelectedWorkLinesCanBeSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the selected <c>WHSWorkLine</c> records are eligible to be split from work header
    /// </summary>
    [Hookable(false)]
    internal WHSSplitWorkMultiLineValidatorResult validateSelectedWorkLinesCanBeSplit()
    {
        WHSSplitWorkMultiLineValidatorResult validationResult = this.validateWorkLineListIsNotEmpty();

        if (validationResult.parmCanSplitWorkResult())
        {
            validationResult = this.validateSelectedWorkLinesWereNotModified();
        }

        if (validationResult.parmCanSplitWorkResult())
        {
            validationResult = this.validateSplitWorkSession();
        }

        if (validationResult.parmCanSplitWorkResult())
        {
            validationResult = this.validateWorkTableIsValidToBeSplit();
        }
        
        if (validationResult.parmCanSplitWorkResult())
        {
            validationResult = this.validateSelectedWorkLinesAllowedToBeSplit();
        }

        if (validationResult.parmCanSplitWorkResult())
        {
            validationResult = this.validateNotAllInitialPicksSelected();
        }

        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSplitWorkSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if splitting work session is still valid.
    /// </summary>
    private WHSSplitWorkMultiLineValidatorResult validateSplitWorkSession()
    {
        WHSWorkTable workTable = WHSWorkTable::find(workId);

        if (!WHSWorkBeingSplitValidator::isWorkBeingSplitByCurrentUser(workTable.WorkId))
        {
            return WHSSplitWorkMultiLineValidatorResult::newFailureWithMessage("@WAX:WorkSplittingSessionNoLongerValid");
        }

        return WHSSplitWorkMultiLineValidatorResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkLineListIsNotEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if there are any selected line.
    /// </summary>
    private WHSSplitWorkMultiLineValidatorResult validateWorkLineListIsNotEmpty()
    {
        if (!selectedWorkLines || selectedWorkLines.elements() == 0)
        {
            return WHSSplitWorkMultiLineValidatorResult::newFailureWithMessage("@WAX:NoLinesSelectedForSplitting");
        }

        return WHSSplitWorkMultiLineValidatorResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNotAllInitialPicksSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that not all initial pick <c>WHSWorkLine</c> are selected.
    /// </summary>
    private WHSSplitWorkMultiLineValidatorResult validateNotAllInitialPicksSelected()
    {
        NumberOfRecords numberOfNotCancelledInitialPickLines = this.numberOfNotCancelledInitialPickLines();

        if (selectedWorkLines.elements() == numberOfNotCancelledInitialPickLines)
        {
            return WHSSplitWorkMultiLineValidatorResult::newFailureWithMessage("@WAX:AllInitialPicksSelected");
        }

        return WHSSplitWorkMultiLineValidatorResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfNotCancelledInitialPickLines</Name>
				<Source><![CDATA[
    private NumberOfRecords numberOfNotCancelledInitialPickLines()
    {
        WHSWorkLine initialPickWorkLine;
        LineNum     firstPutLineNum  = WHSWorkTable::getFirstPutWorkLine(workId).LineNum;

        select count(RecId) from initialPickWorkLine
            where initialPickWorkLine.LineNum < firstPutLineNum
               && initialPickWorkLine.WorkId        == workId
               && initialPickWorkLine.WorkType      == WHSWorkType::Pick
               && initialPickWorkLine.WorkStatus    != WHSWorkStatus::Cancelled
               && initialPickWorkLine.InventQtyWork >  0; // We can have Closed work lines with InventQty 0.

        return initialPickWorkLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSelectedWorkLinesAllowedToBeSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if all <c>WHSWorkLine</c> records are eligible to split.
    /// </summary>
    private WHSSplitWorkMultiLineValidatorResult validateSelectedWorkLinesAllowedToBeSplit()
    {
        WHSWorkTable workTable = WHSWorkTable::find(workId);

        MapEnumerator mapEnumerator = selectedWorkLines.getEnumerator();
        LineNum firstPutLineNum = WHSWorkTable::getFirstPutWorkLine(workId).LineNum;
        
        while (mapEnumerator.moveNext())
        {
            WHSWorkLine workLine = mapEnumerator.currentValue();

            WHSSplitWorkMultiLineValidatorResult result = this.validateWorkLineAllowedToBeSplit(workLine, firstPutLineNum, workId);

            if (!result.parmCanSplitWorkResult())
            {
                return result;
            }
        }

        return WHSSplitWorkMultiLineValidatorResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkLineAllowedToBeSplit</Name>
				<Source><![CDATA[
    private WHSSplitWorkMultiLineValidatorResult validateWorkLineAllowedToBeSplit(WHSWorkLine _workLine, LineNum _firstPutLineNum, WHSWorkId _workId)
    {
        WHSSplitWorkMultiLineValidatorResult result = this.workLineBelongsToWorkHeader(_workLine, _workId);

        if (result.parmCanSplitWorkResult())
        {
            result = this.isOpenPickBeforePutLine(_workLine, _firstPutLineNum);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOpenPickBeforePutLine</Name>
				<Source><![CDATA[
    private WHSSplitWorkMultiLineValidatorResult isOpenPickBeforePutLine(WHSWorkLine _workLine, LineNum _putLineNum)
    {
        if (!_workLine.isOpenPickBeforePutLine(_putLineNum))
        {
            return WHSSplitWorkMultiLineValidatorResult::newFailureWithMessage("@WAX:WorkNotAvailableToBeSplit");
        }

        return WHSSplitWorkMultiLineValidatorResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workLineBelongsToWorkHeader</Name>
				<Source><![CDATA[
    private WHSSplitWorkMultiLineValidatorResult workLineBelongsToWorkHeader(WHSWorkLine _workLine,  WHSWorkId _workId)
    {
        if (_workLine.WorkId != _workId)
        {
            return WHSSplitWorkMultiLineValidatorResult::newFailureWithMessage("@WAX:WHSWorkLinesFromDifferentWorkHeaders");
        }

        return WHSSplitWorkMultiLineValidatorResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTableIsValidToBeSplit</Name>
				<Source><![CDATA[
    private WHSSplitWorkMultiLineValidatorResult validateWorkTableIsValidToBeSplit()
    {
        WHSWorkTable workTable = WHSWorkTable::find(workId);

        this.validateWorkTable(workTable);
       
        if (!WHSAllowSplitWorkMultiLineValidator::canWorkBeSplit(workTable))
        {
            return WHSSplitWorkMultiLineValidatorResult::newFailureWithMessage("@WAX:WorkHeaderNotInStateToBeSplit");
        }

        return WHSSplitWorkMultiLineValidatorResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTable</Name>
				<Source><![CDATA[
    private void validateWorkTable(WHSWorkTable _workTable)
    {
        if (!_workTable)
        {
            throw error(error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSelectedWorkLinesWereNotModified</Name>
				<Source><![CDATA[
    private WHSSplitWorkMultiLineValidatorResult validateSelectedWorkLinesWereNotModified()
    {
        MapEnumerator mapEnumerator = selectedWorkLines.getEnumerator();
                
        while (mapEnumerator.moveNext())
        {
            WHSWorkLine selectedWorkLine = mapEnumerator.currentValue();
            
            WHSSplitWorkMultiLineValidatorResult result = this.validateWorkLineWasNotModified(selectedWorkLine);

            if (!result.parmCanSplitWorkResult())
            {
                return result;
            }
        }

        return WHSSplitWorkMultiLineValidatorResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecVersionOfWorkLineByRecId</Name>
				<Source><![CDATA[
    private RecVersion findRecVersionOfWorkLineByRecId(WHSWorkLineRecId _workLineRecId)
    {
        WHSWorkLine workLine;
        
        select firstonly RecVersion from workLine
                where workLine.RecId == _workLineRecId;

        return workLine.RecVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkLineWasNotModified</Name>
				<Source><![CDATA[
    private WHSSplitWorkMultiLineValidatorResult validateWorkLineWasNotModified(WHSWorkLine _selectedWorkLine)
    {
        RecVersion currentRecVersion = this.findRecVersionOfWorkLineByRecId(_selectedWorkLine.RecId);

        if (currentRecVersion != _selectedWorkLine.RecVersion)
        {
            return WHSSplitWorkMultiLineValidatorResult::newFailureWithMessage("@WAX:WorkModifiedMeanwhile");
        }

        return WHSSplitWorkMultiLineValidatorResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSelectedWorkLinesAndWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSSplitWorkMultiLineValidator</c> class.
    /// </summary>
    /// <param name="_selectedWorkLines">
    /// The selected work lines to be split.
    /// </param>
    /// <param name="_workId">
    /// The id of the work that will be split.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSSplitWorkMultiLineValidator</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSSplitWorkMultiLineValidator newFromSelectedWorkLinesAndWorkId(
        Map         _selectedWorkLines,
        WHSWorkId   _workId)
    {
        WHSSplitWorkMultiLineValidator whsSplitWorkMultiLineValidator = WHSSplitWorkMultiLineValidator::construct();

        whsSplitWorkMultiLineValidator.parmWorkId(_workId);

        whsSplitWorkMultiLineValidator.parmSelectedWorkLines(_selectedWorkLines);

        return WHSSplitWorkMultiLineValidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSSplitWorkMultiLineValidator construct()
    {
        return new WHSSplitWorkMultiLineValidator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>