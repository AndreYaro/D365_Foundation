<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationTreeServer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsLocationTreeServer extends WMSLocationTreeBase
{
    InventLocationId        inventLocationIdCaller;
    WMSStoreAreaType        wmsStoreAreaTypeCaller;
    WMSAisleId              wmsAisleIdCaller;

    InventLocationId        inventLocationIdCoordinate;
    WMSAisleId              wmsAisleIdCoordinate;
    WMSRackId               wmsRackIdCoordinate;
    WMSLevelId              wmsLevelIdCoordinate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aisles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the aisles for the specified warehouse.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the aisles are retrieved.
    /// </param>
    /// <returns>
    /// A container with the requested information.
    /// </returns>
    protected container aisles(InventLocationId _inventLocationId)
    {
        container               res;
        WMSLocation             wmsLocation;
        QueryRun                queryRun;
        WMSAisle                wmsAisle;

        inventLocationIdCoordinate = _inventLocationId;

        queryRun = new QueryRun(this.levelQuery(WMSLocationCoordinates::Aisle));
        while (queryRun.next())
        {
            wmsLocation = queryRun.get(tableNum(WMSLocation));
            wmsAisle = wmsLocation.wmsAisle();
            res += [[wmsAisle.AisleId, this.formatAisleId(wmsAisle.AisleId, int642int(wmsLocation.RecId)), wmsAisle.SortDescending]];
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the warehouses.
    /// </summary>
    /// <returns>
    /// A container with the requested information.
    /// </returns>
    protected container inventLocations()
    {
        container       res;
        WMSLocation     wmsLocation;
        QueryRun        queryRun;
        RecId           wmsLocationRecId;

        queryRun = new QueryRun(this.inventLocationsQuery());

        while (queryRun.next())
        {
            wmsLocation = queryRun.get(tableNum(WMSLocation));
            // Fields might not have been selected on the specified buffer
            wmsLocation.checkInvalidFieldAccess(false);

            wmsLocationRecId = wmsLocation.RecId;

            res += [[wmsLocation.InventLocationId, this.formatInventLocationId(wmsLocation.InventLocationId, int642int(wmsLocationRecId))]];
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationsQuery</Name>
				<Source><![CDATA[
    protected Query inventLocationsQuery()
    {
        return this.levelQuery(WMSLocationCoordinates::InventLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelQuery</Name>
				<Source><![CDATA[
        private Query levelQuery(int _levelNo)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        QueryBuildRange         queryBuildRange;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(WMSLocation));

        WMSLocation::addFilterforWHSEnabled(queryBuildDataSource, NoYes::No);

        if (_levelNo >= WMSLocationCoordinates::InventLocation && this.isLevelActive(inventLocationIdCaller, WMSLocationCoordinates::InventLocation))
        {
            if (_levelNo > WMSLocationCoordinates::InventLocation)
            {
                queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSLocation, InventLocationId));
                if (inventLocationIdCoordinate)
                {
                    queryBuildRange.value(queryValue(inventLocationIdCoordinate));
                }
                else
                {
                    queryBuildRange.value(SysQuery::valueEmptyString());
                }
            }
            if (_levelNo < WMSLocationCoordinates::Bin)
            {
                queryBuildDataSource.addSortField(fieldNum(WMSLocation, InventLocationId));
            }
        }
        if (_levelNo >= WMSLocationCoordinates::Aisle && this.isLevelActive(inventLocationIdCaller, WMSLocationCoordinates::Aisle))
        {
            if (_levelNo > WMSLocationCoordinates::Aisle)
            {
                queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSLocation, AisleId));
                queryBuildRange.value(queryValue(wmsAisleIdCoordinate));
            }
            if (_levelNo < WMSLocationCoordinates::Bin)
            {
                queryBuildDataSource.addSortField(fieldNum(WMSLocation, AisleId));
            }
        }
        if (_levelNo >= WMSLocationCoordinates::Rack && this.isLevelActive(inventLocationIdCaller, WMSLocationCoordinates::Rack))
        {
            if (_levelNo > WMSLocationCoordinates::Rack)
            {
                queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSLocation, Rack));
                queryBuildRange.value(queryValue(wmsRackIdCoordinate));
            }
            if (_levelNo < WMSLocationCoordinates::Bin)
            {
                queryBuildDataSource.addSortField(fieldNum(WMSLocation, Rack));
            }
        }
        if (_levelNo >= WMSLocationCoordinates::Shelf && this.isLevelActive(inventLocationIdCaller, WMSLocationCoordinates::Shelf))
        {
            if (_levelNo > WMSLocationCoordinates::Shelf)
            {
                queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSLocation, Level));
                queryBuildRange.value(queryValue(wmsLevelIdCoordinate));
            }
            if (_levelNo < WMSLocationCoordinates::Bin)
            {
                queryBuildDataSource.addSortField(fieldNum(WMSLocation, Level));
            }
        }

        switch (wmsLocationFormCaller)
        {
            case WMSLocationFormCaller::InventLocation:
                if (_levelNo <= WMSLocationCoordinates::InventLocation)
                {
                    queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSLocation, InventLocationId));
                    if (inventLocationIdCaller)
                    {
                        queryBuildRange.value(queryValue(inventLocationIdCaller));
                    }
                    else
                    {
                        queryBuildRange.value(SysQuery::valueEmptyString());
                    }
                }
                break;

            case WMSLocationFormCaller::WMSAisle:
                if (_levelNo <= WMSLocationCoordinates::InventLocation)
                {
                    queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSLocation, InventLocationId));
                    if (inventLocationIdCaller)
                    {
                        queryBuildRange.value(queryValue(inventLocationIdCaller));
                    }
                    else
                    {
                        queryBuildRange.value(SysQuery::valueEmptyString());
                    }
                }
                if (_levelNo <= WMSLocationCoordinates::Aisle)
                {
                    queryBuildRange = queryBuildDataSource.addRange(fieldNum(WMSLocation, AisleId));
                    queryBuildRange.value(queryValue(wmsAisleIdCaller));
                }
                break;
        }

        queryBuildDataSource.orderMode(OrderMode::GroupBy);
        if (showLocationCount && _levelNo < WMSLocationCoordinates::Bin)
        {
            queryBuildDataSource.addSelectionField(fieldNum(WMSLocation, RecId), SelectionField::Count);
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>racks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the rack for the specified aisle.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the racks are retrieved.
    /// </param>
    /// <param name="_aisleId">
    /// The aisle for which the racks are retrieved.
    /// </param>
    /// <returns>
    /// A container with the requested information.
    /// </returns>
    protected container racks(
        InventLocationId    _inventLocationId,
        WMSAisleId          _aisleId)
    {
        container       res;
        WMSLocation     wmsLocation;
        QueryRun        queryRun;

        inventLocationIdCoordinate  = _inventLocationId;
        wmsAisleIdCoordinate        = _aisleId;

        queryRun = new QueryRun(this.levelQuery(WMSLocationCoordinates::Rack));
        while (queryRun.next())
        {
            wmsLocation = queryRun.get(tableNum(WMSLocation));
            res += [[wmsLocation.Rack, this.formatRackId(wmsLocation)]];
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shelfLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the locations for the specified shelf.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the locations are retrieved.
    /// </param>
    /// <param name="_aisleId">
    /// The aisle for which the locations are retrieved.
    /// </param>
    /// <param name="_rackId">
    /// The rack for which the locations are retrieved.
    /// </param>
    /// <param name="_shelfId">
    /// The shelf for which the locations are retrieved.
    /// </param>
    /// <returns>
    /// A container with the requested information.
    /// </returns>
    protected container shelfLocations(
        InventLocationId    _inventLocationId,
        WMSAisleId          _aisleId,
        WMSRackId           _rackId,
        WMSLevelId          _shelfId)
    {
        container       res;
        WMSLocation     wmsLocation;
        QueryRun        queryRun;

        inventLocationIdCoordinate  = _inventLocationId;
        wmsAisleIdCoordinate        = _aisleId;
        wmsRackIdCoordinate         = _rackId;
        wmsLevelIdCoordinate        = _shelfId;

        queryRun = new QueryRun(this.levelQuery(WMSLocationCoordinates::Bin));
        while (queryRun.next())
        {
            wmsLocation = queryRun.get(tableNum(WMSLocation));
            res += [[wmsLocation.wmsLocationId, this.formatLocationId(wmsLocation)]];
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shelves</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about the shelves for the specified rack.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The warehouse for which the shelves are retrieved.
    /// </param>
    /// <param name="_aisleId">
    /// The aisle for which the shelves are retrieved.
    /// </param>
    /// <param name="_rackId">
    /// The rack for which the shelves are retrieved.
    /// </param>
    /// <returns>
    /// A container with the requested information.
    /// </returns>
    protected container shelves(
        InventLocationId    _inventLocationId,
        WMSAisleId          _aisleId,
        WMSRackId           _rackId)
    {
        container       res;
        WMSLocation     wmsLocation;
        QueryRun        queryRun;

        inventLocationIdCoordinate  = _inventLocationId;
        wmsAisleIdCoordinate        = _aisleId;
        wmsRackIdCoordinate         = _rackId;

        queryRun = new QueryRun(this.levelQuery(WMSLocationCoordinates::Shelf));
        while (queryRun.next())
        {
            wmsLocation = queryRun.get(tableNum(WMSLocation));
            res += [[wmsLocation.Level, this.formatLevelId(wmsLocation)]];
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class based on the provided parameters.
    /// </summary>
    /// <param name="_displayValues">
    /// Packed information about the information that is needed for the display.
    /// </param>
    /// <param name="_wmsLocationFormCaller">
    /// The current warehouse level that is displayed.
    /// </param>
    /// <param name="_callerId">
    /// Information about the caller that is used to restrict queries.
    /// </param>
    protected void updateFromCaller(
        container                   _displayValues,
        WMSLocationFormCaller       _wmsLocationFormCaller,
        container                   _callerId)
    {
        wmsLocationFormCaller   = _wmsLocationFormCaller;
        this.unpack(_displayValues);
        callerId                = _callerId;

        switch (wmsLocationFormCaller)
        {
            case WMSLocationFormCaller::None:
                break;
            case WMSLocationFormCaller::InventLocation:
                inventLocationIdCaller      = conPeek(callerId, 1);
                break;
            case WMSLocationFormCaller::WMSAisle:
                inventLocationIdCaller      = conPeek(callerId, 1);
                wmsAisleIdCaller            = conPeek(callerId, 2);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static WMSLocationTreeServer construct()
    {
        return new WMSLocationTreeServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAislesForWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about aisles in a warehouse to display.
    /// </summary>
    /// <param name="_displayValues">
    /// Packed information about the information that is needed for the display.
    /// </param>
    /// <param name="_wmsLocationFormCaller">
    /// The current warehouse level being displayed.
    /// </param>
    /// <param name="_callerId">
    /// Information about the caller used to restrict queries.
    /// </param>
    /// <param name="_coordinates">
    /// ID of the warehouse for which information is retrieved.
    /// </param>
    /// <returns>
    /// A container that contains the information that is needed for the tree.
    /// </returns>
    static public container getAislesForWarehouse(
        container               _displayValues,
        WMSLocationFormCaller   _wmsLocationFormCaller,
        container               _callerId,
        container               _coordinates)
    {
        InventLocationId    inventLocationId = conPeek(_coordinates, 1);
        WMSLocationTreeServer   wmsLocationTreeServer = WMSLocationTreeServer::newFromClient(_displayValues, _wmsLocationFormCaller, _callerId);
        return wmsLocationTreeServer.aisles(inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationsForShelf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about locations in a rack to display.
    /// </summary>
    /// <param name="_displayValues">
    /// Packed information about what information is needed for the display.
    /// </param>
    /// <param name="_wmsLocationFormCaller">
    /// The current warehouse level being displayed.
    /// </param>
    /// <param name="_callerId">
    /// Information about the caller that is used to restrict queries.
    /// </param>
    /// <param name="_coordinates">
    /// Coordinates of the shelf for which information is retrieved.
    /// </param>
    /// <returns>
    /// A container that contains information that is needed for the tree.
    /// </returns>
    static public container getLocationsForShelf(
        container               _displayValues,
        WMSLocationFormCaller   _wmsLocationFormCaller,
        container               _callerId,
        container               _coordinates)
    {
        InventLocationId        inventLocationId    = conPeek(_coordinates, 1);
        WMSAisleId              aisleId             = conPeek(_coordinates, 2);
        WMSRackId               rackId              = conPeek(_coordinates, 3);
        WMSLevelId              shelfId             = conPeek(_coordinates, 4);

        WMSLocationTreeServer   wmsLocationTreeServer = WMSLocationTreeServer::newFromClient(_displayValues, _wmsLocationFormCaller, _callerId);
        return wmsLocationTreeServer.shelfLocations(inventLocationId, aisleId, rackId, shelfId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRacksForAisle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about racks in an aisle to display.
    /// </summary>
    /// <param name="_displayValues">
    /// Packed information about what information is needed for the display.
    /// </param>
    /// <param name="_wmsLocationFormCaller">
    /// The current warehouse level being displayed.
    /// </param>
    /// <param name="_callerId">
    /// Information about the caller used to restrict queries.
    /// </param>
    /// <param name="_coordinates">
    /// Coordinates of the aisle for which information is retrieved.
    /// </param>
    /// <returns>
    /// A container that contains information that is needed for the tree.
    /// </returns>
    static public container getRacksForAisle(
        container               _displayValues,
        WMSLocationFormCaller   _wmsLocationFormCaller,
        container               _callerId,
        container               _coordinates)
    {
        InventLocationId        inventLocationId;
        WMSAisleId              aisleId;
        WMSLocationTreeServer   wmsLocationTreeServer = WMSLocationTreeServer::newFromClient(_displayValues, _wmsLocationFormCaller, _callerId);

        inventLocationId    = conPeek(_coordinates, 1);
        aisleId             = conPeek(_coordinates, 2);
        return wmsLocationTreeServer.racks(inventLocationId, aisleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShelvesForRack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about shelves in a rack to display.
    /// </summary>
    /// <param name="_displayValues">
    /// Packed information about what information is needed for display.
    /// </param>
    /// <param name="_wmsLocationFormCaller">
    /// The current warehouse level being displayed.
    /// </param>
    /// <param name="_callerId">
    /// Information about the caller used to restrict queries.
    /// </param>
    /// <param name="_coordinates">
    /// Coordinates of the rack for which information is retrieved.
    /// </param>
    /// <returns>
    /// A container that contains information needed for the tree.
    /// </returns>
    static public container getShelvesForRack(
        container               _displayValues,
        WMSLocationFormCaller   _wmsLocationFormCaller,
        container               _callerId,
        container               _coordinates)
    {
        InventLocationId        inventLocationId    = conPeek(_coordinates, 1);
        WMSAisleId              aisleId             = conPeek(_coordinates, 2);
        WMSRackId               rackId              = conPeek(_coordinates, 3);

        WMSLocationTreeServer   wmsLocationTreeServer = WMSLocationTreeServer::newFromClient(_displayValues, _wmsLocationFormCaller, _callerId);
        return wmsLocationTreeServer.shelves(inventLocationId, aisleId, rackId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains information about warehouses to display.
    /// </summary>
    /// <param name="_displayValues">
    /// Packed information about the information that is needed for display.
    /// </param>
    /// <param name="_wmsLocationFormCaller">
    /// The current warehouse level being displayed.
    /// </param>
    /// <param name="_callerId">
    /// Information about the caller that is used to restrict queries.
    /// </param>
    /// <returns>
    /// A container that contains information that is needed for the tree.
    /// </returns>
    static public container getWarehouses(
        container               _displayValues,
        WMSLocationFormCaller   _wmsLocationFormCaller,
        container               _callerId)
    {
        WMSLocationTreeServer   wmsLocationTreeServer = WMSLocationTreeServer::newFromClient(_displayValues, _wmsLocationFormCaller, _callerId);
        return wmsLocationTreeServer.inventLocations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the class based on information from the client.
    /// </summary>
    /// <param name="_displayValues">
    /// Packed information about what information is needed for display.
    /// </param>
    /// <param name="_wmsLocationFormCaller">
    /// The current warehouse level that is being displayed.
    /// </param>
    /// <param name="_callerId">
    /// Information about the caller that is used to restrict queries.
    /// </param>
    /// <returns>
    /// A new instance of the class.
    /// </returns>
    static protected WMSLocationTreeServer newFromClient(
        container               _displayValues,
        WMSLocationFormCaller   _wmsLocationFormCaller,
        container               _callerId)
    {
        WMSLocationTreeServer   wmsLocationTreeServer = WMSLocationTreeServer::construct();

        wmsLocationTreeServer.updateFromCaller(_displayValues, _wmsLocationFormCaller, _callerId);
        return wmsLocationTreeServer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>