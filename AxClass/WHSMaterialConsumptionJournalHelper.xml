<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMaterialConsumptionJournalHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMaterialConsumptionJournalHelper</c> class assist the material consumptions functionality in creating and interacting with production picking list journals.
/// </summary>
public class WHSMaterialConsumptionJournalHelper
{
    EcoResReleasedProductUnitConverter  ecoResReleasedProductUnitConverter;
    ProdJournalId                       existingJournalId;
    WHSUserId                           mobileDeviceUserId;

    ProdParametersDim                   prodParametersDim;
    ProdJournalTable                    prodJournalTable;
    ProdJournalTableData                prodJournalTableData;
    ProdJournalBOM                      prodJournalBOM;
    ProdJournalTransData                prodJournalTransData;
    ProdTable                           prodTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createNewProdJournalBOM</Name>
				<Source><![CDATA[
    private void createNewProdJournalBOM(
        ProdId                  _prodId,
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        InventHandlingQty       _remainingQtyToConsume, // In inventory unit
        UnitOfMeasureSymbol     _consumptionUnitId,
        WHSTransWeight          _weightToConsume)
    {
        prodJournalBOM.clear();
        prodJournalBOM.initValue();

        prodJournalBOM.ProdId    = _prodId;
        prodJournalBOM.ItemId    = _itemId;
        prodJournalBOM.BOMUnitId = _consumptionUnitId;

        prodJournalBOM.setInventDimId(_inventDimId);

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            prodJournalBOM.PdsCWInventConsump   = _remainingQtyToConsume;
            prodJournalBOM.InventConsump        = _weightToConsume;
            prodJournalBOM.BOMConsump           = ecoResReleasedProductUnitConverter.convert(_weightToConsume,
                                                                                            UnitOfMeasure::findBySymbol(InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId).RecId,
                                                                                            UnitOfMeasure::findBySymbol(prodJournalBOM.BOMUnitId).RecId,
                                                                                            NoYes::No,
                                                                                            _itemId,
                                                                                            _inventDimId);
        }
        else
        {
            prodJournalBOM.InventConsump    = _remainingQtyToConsume;
            prodJournalBOM.BOMConsump       = ecoResReleasedProductUnitConverter.convert(_remainingQtyToConsume,
                                                                                     UnitOfMeasure::findBySymbol(InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId).Recid,
                                                                                     UnitOfMeasure::findBySymbol(prodJournalBOM.BOMUnitId).RecId,
                                                                                     NoYes::No,
                                                                                     _itemId,
                                                                                     _inventDimId);
        }
        prodJournalBOM.DefaultDimension = prodJournalBOM.mergeDimension(ProdTable::find(prodJournalBOM.ProdId).DefaultDimension,
                                                                        prodJournalBOM.inventTable().DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickingListJournalLinesHandling</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create pick list journal lines for raw material consumption from the mobile device.
    /// </summary>
    /// <param name="_prodId">
    ///  The production order.
    /// </param>
    /// <param name="_itemId">
    ///  The item being consumed.
    /// </param>
    /// <param name="_inventDimId">
    ///  The inventory dimensions to consume from.
    /// </param>
    /// <param name="_proposedConsumption">
    ///  The quantity to consume.
    /// </param>
    /// <param name="_consumptionUnitId">
    ///  The item unit of measure being consumed.
    /// </param>
    /// <param name="_proposedWeightConsumption">
    /// The proposed weight to consume.
    /// </param>
    [Hookable(false)]
    public void createPickingListJournalLinesHandling(
                            ProdId                  _prodId,
                            ItemId                  _itemId,
                            InventDimId             _inventDimId,
                            ProdQty                 _proposedConsumption,
                            UnitOfMeasureSymbol     _consumptionUnitId,
                            WHSCapturedWeight       _proposedWeightConsumption = 0)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightHandlingWeightLogic(funcName(), _itemId, _proposedWeightConsumption))
        {
            this.createPickingListJournalLinesForConsumption(_prodId,
                                                        _itemId,
                                                        _inventDimId,
                                                        _proposedConsumption,
                                                        _consumptionUnitId,
                                                        _proposedWeightConsumption,
                                                        true);
        }
        else
        {
            this.createPickingListJournalLines(_prodId,
                                            _itemId,
                                            _inventDimId,
                                            _proposedConsumption,
                                            _consumptionUnitId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickingListJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create pick list journal lines for raw material consumption from the mobile device.
    /// </summary>
    /// <param name="_prodId">
    ///  The production order.
    /// </param>
    /// <param name="_itemId">
    ///  The item being consumed.
    /// </param>
    /// <param name="_inventDimId">
    ///  The inventory dimensions to consume from.
    /// </param>
    /// <param name="_proposedConsumption">
    ///  The quantity to consume.
    /// </param>
    /// <param name="_consumptionUnitId">
    ///  The item unit of measure being consumed.
    /// </param>
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    public void createPickingListJournalLines(
                                        ProdId                  _prodId,
                                        ItemId                  _itemId,
                                        InventDimId             _inventDimId,
                                        ProdQty                 _proposedConsumption,
                                        UnitOfMeasureSymbol     _consumptionUnitId)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _itemId);
        this.createPickingListJournalLinesForConsumption(_prodId,
                                                    _itemId,
                                                    _inventDimId,
                                                    _proposedConsumption,
                                                    _consumptionUnitId,
                                                    0,
                                                    false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickingListJournalLinesForConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create pick list journal lines for raw material consumption from the mobile device.
    /// </summary>
    /// <param name="_prodId">
    ///  The production order.
    /// </param>
    /// <param name="_itemId">
    ///  The item being consumed.
    /// </param>
    /// <param name="_inventDimId">
    ///  The inventory dimensions to consume from.
    /// </param>
    /// <param name="_proposedConsumption">
    ///  The quantity to consume, given in the provided unit.
    /// </param>
    /// <param name="_consumptionUnitId">
    ///  The item unit of measure being consumed.
    /// </param>
    /// <param name="_isCWItem">
    ///  Boolean to determine if item is catch weight.
    /// </param>
    private void createPickingListJournalLinesForConsumption(
                                                    ProdId                  _prodId,
                                                    ItemId                  _itemId,
                                                    InventDimId             _inventDimId,
                                                    ProdQty                 _proposedConsumption,
                                                    UnitOfMeasureSymbol     _consumptionUnitId,
                                                    WHSCapturedWeight       _proposedWeightConsumption,
                                                    boolean                 _isCWItem)
    {
        WHSCatchWeightTelemetryLogger::logCatchWeightConflictingQuantities(funcName(), _itemId, _proposedConsumption, _proposedWeightConsumption);

        ProdBOM                         prodBOM;
        InventTransOriginId             prevInventTransOriginId;
        Counter                         numOfValidTransaction;
        Counter                         transactionsLooped;

        ttsBegin;

        this.getProdTable(_prodId);
        InventDim inventDimCriteria = InventDim::find(_inventDimId);
        
        if (!this.validateBatchExpirationDate(inventDimCriteria.inventBatchId, _itemId))
        {
            throw error(strFmt("@WAX:Error_RegisterMaterialConsumptionBatchExpired", inventDimCriteria.inventBatchId, _itemId));
        }

        if (_isCWItem && WHSInventTable::isCatchWeightTagTracked(_itemId))
        {
            throw error(strFmt("@WAX:Error_MaterialConsumptionCWTagNotSupported", _itemId));
        }

        if (!this.validateBatchDispCodeForPicking(inventDimCriteria.inventBatchId, _itemId))
        {
            throw error(strFmt("@WAX5580", inventDimCriteria.inventBatchId));
        }

        InventHandlingQty remainingQtyToConsume = WHSCatchWeightHelper::convertInventQuantity(_itemId,
                                                                                      _consumptionUnitId,
                                                                                      _proposedConsumption,
                                                                                      _inventDimId);
        UnitOfMeasureDecimalPrecision   decimalPrecision;

        this.setupPickListJournalHandlers(prodTable.ProdId);

        List           listInventTrans = this.getListOfOpenTransactions(prodTable.ProdId, _itemId, inventDimCriteria);
        ListEnumerator listEnumerator = listInventTrans.getEnumerator();

        numOfValidTransaction = listInventTrans.elements();
        
        InventHandlingQty remainingWeightToConsume = _proposedWeightConsumption;

        boolean reserveAndUpdateProdBOM = this.mustReserveAndUpdateProdBOM(inventDimCriteria);

        while (listEnumerator.moveNext() && remainingQtyToConsume > 0)
        {
            InventHandlingQty   qtyToConsume = 0;
            InventTrans         inventTrans  = listEnumerator.current();

            if (inventTrans.InventTransOrigin != prevInventTransOriginId)
            {
                InventTransOrigin inventTransOrigin = inventTransOrigin::find(inventTrans.InventTransOrigin);
                prodBom = inventTransOrigin.originator(true) as prodBOM;

                if (WHSMaterialConsumptionJournalReUseProdBomFlight::instance().isEnabled())
                {
                    prevInventTransOriginId = inventTrans.InventTransOrigin;
                }
            }

            InventHandlingQty positiveTransactionQty = _isCWItem ? -inventTrans.PDSCWQty : -inventTrans.Qty;
            transactionsLooped++;

            qtyToConsume = this.determinQtyToConsume(remainingQtyToConsume,
                                                     positiveTransactionQty,
                                                     transactionsLooped < numOfValidTransaction);

            InventHandlingQty weightToConsume;
            
            if (_isCWItem)
            {
                decimalPrecision = InventTable::inventDecimals(_itemId);
                weightToConsume  = WHSCatchWeightHelper::calculateAverageWeight(qtyToConsume, remainingQtyToConsume, remainingWeightToConsume, decimalPrecision);
            }

            // If we are consuming more than what is current on the transaction then we need to increase prodBom qty overconsume
            if (qtyToConsume > positiveTransactionQty && reserveAndUpdateProdBOM)
            {
                // Increase ProdBom RemainingInventPhysical
                this.increaseProdBomQty(prodBOM, qtyToConsume - positiveTransactionQty);
            }

            remainingQtyToConsume -= qtyToConsume;
            remainingWeightToConsume -= weightToConsume;

            this.createProdJournalBOMForProdBOM(prodBOM,
                                                _inventDimId,
                                                qtyToConsume,
                                                weightToConsume);

            prodJournalTableData.initJournalId();
            prodJournalTransData.initFromJournalTable();
            prodJournalTransData.insert();

            if (inventTrans.StatusIssue == StatusIssue::OnOrder && reserveAndUpdateProdBOM)
            {
                this.reserveJournalLine(prodJournalBOM);
            }
        }

        if (remainingQtyToConsume > 0 && WHSMaterialOverConsumptionJournalUseExistingBOMFlight::instance().isEnabled())
        {
            prodBOM = ProdBOM::findByItemIdDim(prodTable.ProdId, _itemId, inventDimCriteria, true);

            if (prodBOM)
            {
                // If we are consuming more than what is current on the transaction then we need to increase prodBom qty overconsume
                if (reserveAndUpdateProdBOM)
                {
                    // Increase ProdBom RemainingInventPhysical
                    this.increaseProdBomQty(prodBOM, remainingQtyToConsume);
                }

                this.createProdJournalBOMForProdBOM(prodBOM,
                                                    _inventDimId,
                                                    remainingQtyToConsume,
                                                    remainingWeightToConsume);

                prodJournalTableData.initJournalId();
                prodJournalTransData.initFromJournalTable();
                prodJournalTransData.insert();

                remainingQtyToConsume = 0;
            }
        }

        if (remainingQtyToConsume > 0)
        {
            if (prodBom.ItemId && prodBom.InventDimId)
            {
                this.createNewProdJournalBOM(_prodId,
                                             prodBom.ItemId,
                                             prodBom.InventDimId,
                                             remainingQtyToConsume,
                                             _isCWItem ? prodBom.inventTable().bomUnitId() : prodBOM.UnitId,
                                             remainingWeightToConsume);
            }
            else
            {
                this.createNewProdJournalBOM(_prodId,
                                             _itemId,
                                             _inventDimId,
                                             remainingQtyToConsume,
                                             InventTable::find(_itemId).bomUnitId(),
                                             remainingWeightToConsume);
            }

            prodJournalTableData.initJournalId();
            prodJournalTransData.initFromJournalTable();
            prodJournalTransData.insert();

            // If we didn't auto reserve when creating the new prodBOM then we should manually reserve the inventory.
            if (!prodJournalBOM.prodBOM().mustBeAutoReserved() && reserveAndUpdateProdBOM)
            {
                this.reserveJournalLine(prodJournalBOM);
            }
        }

        // Write Journal Header
        if (prodJournalTable.JournalId)
        {
            prodJournalTable.write();
            existingJournalId = prodJournalTable.JournalId;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReserveAndUpdateProdBOM</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustReserveAndUpdateProdBOM(InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchExpirationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that batch tracked raw material can just be consumed if the batch's expiration date is valid.
    /// </summary>
    /// <returns>
    /// Returns true if the batch's expiration date is today or later; otherwise, false.
    /// </returns>
    private boolean validateBatchExpirationDate(InventBatchId _inventBatchId, ItemId _itemId)
    {
        return InventBatch::pdsCheckExpiryDate(_inventBatchId, _itemId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickingListJournalLinesByLP</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create journal lines for a license plate's physical inventory.
    /// </summary>
    /// <param name="_prodId">
    ///  The production order.
    /// </param>
    /// <param name="_inventDimId">
    ///  The inventory dimensions to consume from.
    /// </param>
    public void createPickingListJournalLinesByLP(
        ProdId                  _prodId,
        InventDimId             _inventDimId)
    {
        InventSum           inventSum;
        InventDim           inventDimLoop;
        InventDimParm       inventDimParm;
        InventTable         inventTable;
        InventTrans         pickedInventTrans;
        InventTransOrigin   inventTransOrigin;

        ttsBegin;

        InventDim inventDimCriteria = InventDim::find(_inventDimId);
        if (!inventDimCriteria.LicensePlateId)
        {
            throw error("@WAX756");
        }

        inventDimParm.initLicensePlateInventory();

        // Loop over the LP's picked inventory on the production.
        while select sum(Qty), sum(PdsCWQty) from pickedInventTrans
            group by InventTransOrigin, ItemId, InventDimId
            where pickedInventTrans.StatusIssue     == StatusIssue::Picked
               && pickedInventTrans.StatusReceipt   == StatusReceipt::None
            #InventDimExistsJoin(pickedInventTrans.inventDimId, inventDimLoop, inventDimCriteria, inventDimParm)
            exists join inventTransOrigin
                where inventTransOrigin.RecId               == pickedInventTrans.InventTransOrigin
                   && inventTransOrigin.ReferenceCategory   == InventTransType::ProdLine
                   && inventTransOrigin.ReferenceId         == _prodId
        {
            if (PdsGlobal::pdsIsCWItem(pickedInventTrans.ItemId))
            {
                this.createPickingListJournalLinesHandling(_prodId, pickedInventTrans.ItemId, pickedInventTrans.InventDimId, -pickedInventTrans.PdsCWQty, WHSCatchWeightHelper::inventHandlingUnitId(pickedInventTrans.ItemId), -pickedInventTrans.Qty);
            }
            else
            {
                this.createPickingListJournalLinesHandling(_prodId, pickedInventTrans.ItemId, pickedInventTrans.InventDimId, -pickedInventTrans.Qty, pickedInventTrans.inventTable().inventUnitId());
            }
        }

        // Loop over the LP's physical inventory and consume all qty.
        if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            while select PhysicalInvent, ItemId, InventDimId, PdsCWPhysicalInvent from inventSum
                where inventSum.ClosedQty      == NoYes::No
                   && inventSum.PhysicalInvent  > 0
                join ItemId, BOMUnitId from inventTable
                    where inventTable.ItemId == inventSum.ItemId &&
                    #InventDimFieldsFilter(inventSum, inventDimCriteria, inventDimParm)
            {
                this.createPickingListJournalLinesUptake(_prodId, inventSum, inventTable);
            }
        }
        else
        {
            while select PhysicalInvent, ItemId, InventDimId, PdsCWPhysicalInvent from inventSum
                where inventSum.ClosedQty      == NoYes::No
                   && inventSum.PhysicalInvent  > 0
                join ItemId, BOMUnitId from inventTable
                    where inventTable.ItemId == inventSum.ItemId
                #InventDimExistsJoin(inventSum.inventDimId, inventDimLoop, inventDimCriteria, inventDimParm)
            {
                this.createPickingListJournalLinesUptake(_prodId, inventSum, inventTable);
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickingListJournalLinesUptake</Name>
				<Source><![CDATA[
    private void createPickingListJournalLinesUptake(ProdId _prodId, InventSum _inventSum, InventTable _inventTable)
    {
        if (PdsGlobal::pdsIsCWItem(_inventSum.ItemId))
        {
            this.createPickingListJournalLinesHandling(_prodId, _inventSum.ItemId, _inventSum.InventDimId, _inventSum.PdsCWPhysicalInvent, WHSCatchWeightHelper::inventHandlingUnitId(_inventSum.ItemId), _inventSum.PhysicalInvent);
        }
        else
        {
            this.createPickingListJournalLinesHandling(_prodId, _inventSum.ItemId, _inventSum.InventDimId, _inventSum.PhysicalInvent, _inventTable.inventUnitId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdJournalBOMForProdBOM</Name>
				<Source><![CDATA[
    protected void createProdJournalBOMForProdBOM(
        ProdBOM             _prodBOM,
        InventDimId         _inventDimId,
        InventQty           _qtyToConsume,
        InventHandlingQty   _weightToConsume)
    {
        prodJournalBOM.clear();
        prodJournalBOM.initValue();
        prodJournalBOM.initFromProdBOM(_prodBOM);

        prodJournalBOM.setInventDimId(_inventDimId);
        if (PdsGlobal::pdsIsCWItem(_prodBOM.ItemId))
        {
            prodJournalBOM.PdsCWInventConsump   = _qtyToConsume;
            prodJournalBOM.InventConsump        = _weightToConsume;
            prodJournalBOM.BOMConsump           = ecoResReleasedProductUnitConverter.convert(_weightToConsume,
                                                                                             UnitOfMeasure::findBySymbol(InventTableModule::find(_prodBOM.ItemId, ModuleInventPurchSales::Invent).UnitId).Recid,
                                                                                             UnitOfMeasure::findBySymbol(_prodBOM.UnitId).RecId,
                                                                                             NoYes::No,
                                                                                             _prodBOM.ItemId,
                                                                                             _prodBOM.InventDimId);
        }
        else
        {
            prodJournalBOM.InventConsump    = _qtyToConsume;
            prodJournalBOM.BOMConsump       = ecoResReleasedProductUnitConverter.convert(_qtyToConsume,
                                                                                         UnitOfMeasure::findBySymbol(InventTableModule::find(_prodBOM.ItemId, ModuleInventPurchSales::Invent).UnitId).Recid,
                                                                                         UnitOfMeasure::findBySymbol(_prodBOM.UnitId).RecId,
                                                                                         NoYes::No,
                                                                                         _prodBOM.ItemId,
                                                                                         _prodBOM.InventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinQtyToConsume</Name>
				<Source><![CDATA[
    private InventQty determinQtyToConsume(
        InventQty   _remainingQtyToConsume,
        InventQty   _transactionQty,
        boolean     _moreValidTransactionAvail)
    {
        InventQty   qtyToConsume;

        if (_remainingQtyToConsume <= _transactionQty)
        {
            qtyToConsume = _remainingQtyToConsume;
        }
        else
        {
            // If there are still more valid transaction to consume against then don't over consume.
            if (_moreValidTransactionAvail)
            {
                // Use current remaining amount and then loop to next transaction.
                qtyToConsume = _transactionQty;
            }
            else
            {
                // Consume additional material against this prodBom since there are no more valid transaction to consume against.
                qtyToConsume = _remainingQtyToConsume;
            }
        }

        return qtyToConsume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Build up a list of <c>InventTrans</c> for a particular production order Id, item Id, and inventory dimensions.
    /// </summary>
    /// <param name="_prodId">
    ///  A production order Id.
    /// </param>
    /// <param name="_itemId">
    ///  An item Id.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///  The inventory dimensions.
    /// </param>
    /// <returns>
    ///  Returns a list of <c>InventTrans</c> for a particular production order Id, item Id, and inventory dimensions.
    /// </returns>
    public List getListOfOpenTransactions(
        ProdId      _prodId,
        ItemId      _itemId,
        InventDim   _inventDimCriteria)
    {
        List                    listInventTrans = new List(Types::Record);
        InventTrans             inventTrans;
        InventDim               inventDimJoin;
        InventDimParm           inventDimParm;
        InventTransOrigin       inventTransOrigin;

        inventDimParm.initFromInventDim(_inventDimCriteria);

        while select inventTrans
            order by StatusIssue asc
            where inventTrans.itemId            == _itemId
            &&    inventTrans.TransChildType    == InventTransChildType::None
            &&    (inventTrans.StatusIssue      == StatusIssue::Picked
            ||    inventTrans.StatusIssue       == StatusIssue::ReservPhysical
            ||    inventTrans.StatusIssue       == StatusIssue::ReservOrdered
            ||    inventTrans.StatusIssue       == StatusIssue::OnOrder)
            #WHSInventDimExistsJoin(inventTrans.InventDimId, inventDimJoin, _inventDimCriteria)
                exists join inventTransOrigin
                    where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                    &&    inventTransOrigin.ReferenceCategory   == InventTransType::ProdLine
                    &&    InventTransOrigin.ReferenceId         == _prodId
        {
            listInventTrans.addEnd(inventTrans);
        }

        if (listInventTrans.empty() && WHSMaterialConsumptionJournalUseBOMDimFlight::instance().isEnabled())
        {
            ProdBOM prodBom;

            while select inventTrans
            order by StatusIssue asc
                where inventTrans.itemId            == _itemId
                &&    inventTrans.TransChildType    == InventTransChildType::None
                &&    (inventTrans.StatusIssue      == StatusIssue::Picked
                ||    inventTrans.StatusIssue       == StatusIssue::ReservPhysical
                ||    inventTrans.StatusIssue       == StatusIssue::ReservOrdered
                ||    inventTrans.StatusIssue       == StatusIssue::OnOrder)
            exists join inventTransOrigin
                where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                &&    inventTransOrigin.ReferenceCategory   == InventTransType::ProdLine
                &&    InventTransOrigin.ReferenceId         == _prodId
            join TableId from prodBom
                where prodBom.InventTransId == inventTransOrigin.InventTransId
            #WHSInventDimExistsJoin(prodBom.InventDimId, inventDimJoin, _inventDimCriteria)
            {
                listInventTrans.addEnd(inventTrans);
            }
        }

        return listInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdTable</Name>
				<Source><![CDATA[
    private void getProdTable(ProdId _prodId)
    {
        // If prodId is different than the current production order cached then find production order and parameters.
        if (_prodId != prodTable.ProdId)
        {
            prodTable = ProdTable::find(_prodId);
            prodParametersDim = prodTable.prodParametersDim();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseProdBomQty</Name>
				<Source><![CDATA[
    private void increaseProdBomQty(
        ProdBOM             _prodBOM,
        InventHandlingQty   _inventQtyToIncrease)
    {
        if (PdsGlobal::pdsIsCWItem(_prodBOM.ItemId))
        {
            _prodBOM.PdsCWRemainPhysical += _inventQtyToIncrease;
            _prodBOM.RemainInventPhysical += WhsInvent::defaultCatchWeightReserveQuantity(_prodBOM.ItemId, _inventQtyToIncrease);
            _prodBOM.RemainBOMPhysical = ecoResReleasedProductUnitConverter.convert(_prodBOM.RemainInventPhysical,
                                                                                     UnitOfMeasure::findBySymbol(InventTableModule::find(_prodBOM.ItemId, ModuleInventPurchSales::Invent).UnitId).Recid,
                                                                                     UnitOfMeasure::findBySymbol(_prodBOM.UnitId).RecId,
                                                                                     NoYes::No,
                                                                                     _prodBOM.ItemId,
                                                                                     _prodBOM.InventDimId);
        }
        else
        {
            _prodBOM.RemainInventPhysical += _inventQtyToIncrease;
            _prodBOM.RemainBOMPhysical += ecoResReleasedProductUnitConverter.convert(_inventQtyToIncrease,
                                                                                     UnitOfMeasure::findBySymbol(InventTableModule::find(_prodBOM.ItemId, ModuleInventPurchSales::Invent).UnitId).Recid,
                                                                                     UnitOfMeasure::findBySymbol(_prodBOM.UnitId).RecId,
                                                                                     NoYes::No,
                                                                                     _prodBOM.ItemId,
                                                                                     _prodBOM.InventDimId);
        }
        _prodBOM.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        ecoResReleasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExistingJournalId</Name>
				<Source><![CDATA[
    public ProdJournalId parmExistingJournalId(ProdJournalId _existingJournalId = existingJournalId)
    {
        existingJournalId = _existingJournalId;

        return existingJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMobileDeviceUserId</Name>
				<Source><![CDATA[
    public WHSUserId parmMobileDeviceUserId(WHSUserId _mobileDeviceUserId = mobileDeviceUserId)
    {
        mobileDeviceUserId = _mobileDeviceUserId;

        return mobileDeviceUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveJournalLine</Name>
				<Source><![CDATA[
    private void reserveJournalLine(ProdJournalBOM  _prodJournalBOM)
    {
        InventDimParm           inventDimParm;
        PdsCWInventQty          cwQtyToReserve;
        InventQty               qtyToReserve;
        boolean                 cwForceActual;

        ttsBegin;

        // Create movement for the new pick
        InventMovement movement = InventMovement::construct(_prodJournalBOM.prodBOM(), InventMovSubType::None, _prodJournalBOM);
        
        if (PdsGlobal::pdsIsCWItem(_prodJournalBOM.ItemId))
        {
            cwQtyToReserve = _prodJournalBOM.PdsCWInventConsump - abs(movement.transIdSum().pdsCWReservPhysical());

            if (_prodJournalBOM.InventConsump 
                //Force reservation of actual CW quantity if we have a quantity and it is not reserved automatically
                && !prodJournalBOM.prodBOM().mustBeAutoReserved())
            {
                qtyToReserve = _prodJournalBOM.InventConsump - abs(movement.transIdSum().reservPhysical());
                cwForceActual = true;
            }
            else
            {
                qtyToReserve = WHSInvent::defaultCatchWeightReserveQuantity(_prodJournalBOM.ItemId, cwQtyToReserve);
            }
        }
        else
        {
            qtyToReserve = _prodJournalBOM.InventConsump - abs(movement.transIdSum().reservPhysical());
        }

        InventDim inventDim = _prodJournalBOM.inventDim();

        // Match on all fields
        inventDimParm.initFromInventDim(inventDim);

        // Create reservation class
        InventUpd_Reservation reservation = InventUpd_Reservation::newParameters(movement,
                                                                                 inventDim,
                                                                                 inventDimParm,
                                                                                 InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParm),
                                                                                 -qtyToReserve,
                                                                                 false,
                                                                                 false,
                                                                                 -cwQtyToReserve,
                                                                                 cwForceActual);

        reservation.parmAllowReserveReduction(false);
        reservation.parmAllowReserveOrdered(false);
        this.reserve(reservation);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserve</Name>
				<Source><![CDATA[
    protected void reserve(InventUpd_Reservation _reservation)
    {
        _reservation.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupPickListJournalHandlers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the pick list journal handlers.
    /// </summary>
    /// <param name = "_prodId">The production ID.</param>
    protected void setupPickListJournalHandlers(ProdId _prodId)
    {
        // Use existing Journal or create new Journal
        if (existingJournalId
        &&  this.consumeExistingJournal())
        {
            prodJournalTable = ProdJournalTable::find(existingJournalId, true);
            prodJournalTableData = JournalTableData::newTable(prodJournalTable);
            prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalBOM, prodJournalTableData);
        }
        else
        {
            prodJournalTableData = JournalTableData::newTable(prodJournalTable);
            prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalBOM, prodJournalTableData);
            prodJournalTableData.initBuffer(prodParametersDim.bomJournalNameId, _prodId, ProdJournalType::Picklist);

            // Link the new journal to the mobile device user so they create new lines against this journal until it is posted.
            prodJournalTable.RFUserId = mobileDeviceUserId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeExistingJournal</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean consumeExistingJournal()
    {
        return (ProdJournalTable::isPosted(existingJournalId) == NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMaterialConsumptionJournalHelper construct()
    {
        return new WHSMaterialConsumptionJournalHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingTransHandlingQtyForConsumptionForAllStatuses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total BOM quantity for all statuses.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order ID.
    /// </param>
    /// <param name = "_itemId">
    /// The BOM item ID.
    /// </param>
    /// <param name = "_inventDimCriteria">
    /// The inventory dimensions.
    /// </param>
    /// <returns>
    /// Returns the handling qty left to be consumed.
    /// </returns>
    [Hookable(false)]
    internal static InventHandlingQty getRemainingTransHandlingQtyForConsumptionForAllStatuses(
        ProdId      _prodId,
        ItemId      _itemId,
        InventDim   _inventDimCriteria)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), _itemId))
        {
            return WHSMaterialConsumptionJournalHelper::getRemainingTransQuantitiesForConsumptionForAllStatuses(_prodId, _itemId, _inventDimCriteria, true);
        }
        else
        {
            return WHSMaterialConsumptionJournalHelper::getRemainingTransQtyForConsumptionForAllStatuses(_prodId, _itemId, _inventDimCriteria);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingTransQtyForConsumptionForAllStatuses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total BOM quantity for all statuses.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order ID.
    /// </param>
    /// <param name = "_itemId">
    /// The BOM item ID.
    /// </param>
    /// <param name = "_inventDimCriteria">
    /// The inventory dimensions.
    /// </param>
    /// <returns>
    /// Returns the quantity left to be consumed.
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    public static InventQty getRemainingTransQtyForConsumptionForAllStatuses(
        ProdId      _prodId,
        ItemId      _itemId,
        InventDim   _inventDimCriteria)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _itemId);
        return WHSMaterialConsumptionJournalHelper::getRemainingTransQuantitiesForConsumptionForAllStatuses(_prodId, _itemId, _inventDimCriteria, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingTransQuantitiesForConsumptionForAllStatuses</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static InventHandlingQty getRemainingTransQuantitiesForConsumptionForAllStatuses(
        ProdId      _prodId,
        ItemId      _itemId,
        InventDim   _inventDimCriteria,
        boolean     isCWItem)
    {
        InventTrans         inventTrans;
        InventDim           inventDimJoin;
        InventTransOrigin   inventTransOrigin;

        select sum(Qty), sum(PdsCWQty) from inventTrans
            where inventTrans.itemId            == _itemId
            &&    inventTrans.TransChildType    == InventTransChildType::None
            &&    (inventTrans.StatusIssue      == StatusIssue::Picked
            ||     inventTrans.StatusIssue      == StatusIssue::ReservPhysical
            ||     inventTrans.StatusIssue      == StatusIssue::ReservOrdered
            ||     inventTrans.StatusIssue      == StatusIssue::OnOrder)
            #WHSInventDimExistsJoin(inventTrans.InventDimId, inventDimJoin, _inventDimCriteria)
        exists join inventTransOrigin
                where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                &&    inventTransOrigin.ReferenceCategory   == InventTransType::ProdLine
                &&    InventTransOrigin.ReferenceId         == _prodId;

        return isCWItem ?
                -inventTrans.PdsCWQty :
                -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingTransHandlingQtyForConsumptionForPickReservPhy</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventHandlingQty getRemainingTransHandlingQtyForConsumptionForPickReservPhy(
        ProdId          _prodId,
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimCriteriaParm = null)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), _itemId))
        {
            return WHSMaterialConsumptionJournalHelper::getRemainingTransQuantitiesForConsumptionForPickReservPhy(_prodId, _itemId, _inventDimCriteria, _inventDimCriteriaParm, true);
        }

        return WHSMaterialConsumptionJournalHelper::getRemainingTransQtyForConsumptionForPickReservPhy(_prodId, _itemId, _inventDimCriteria, _inventDimCriteriaParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingTransQtyForConsumptionForPickReservPhy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the BOM quantity that is in statuses picked or reserved.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order ID.
    /// </param>
    /// <param name = "_itemId">
    /// The BOM item ID.
    /// </param>
    /// <param name = "_inventDimCriteria">
    /// The inventory dimensions criteria.
    /// </param>
    /// <param name = "_inventDimCriteriaParm">
    /// The inventory dimensions criteria flags.
    /// </param>
    /// <returns>
    /// Returns the quantity left to be consumed.
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    public static InventQty getRemainingTransQtyForConsumptionForPickReservPhy(
        ProdId          _prodId,
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimCriteriaParm = null)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _itemId);
        return WHSMaterialConsumptionJournalHelper::getRemainingTransQuantitiesForConsumptionForPickReservPhy(_prodId,
                                                                                                            _itemId,
                                                                                                            _inventDimCriteria,
                                                                                                            _inventDimCriteriaParm,
                                                                                                            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingTransQuantitiesForConsumptionForPickReservPhy</Name>
				<Source><![CDATA[
    private static InventHandlingQty getRemainingTransQuantitiesForConsumptionForPickReservPhy(
        ProdId          _prodId,
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimCriteriaParm,
        boolean         _isCWItem)
    {
        InventTrans         inventTrans;
        InventDim           inventDimJoin;
        InventTransOrigin   inventTransOrigin;

        if (_inventDimCriteriaParm.isAllFlagNo())
        {
            select sum(Qty), sum(PdsCWQty) from inventTrans
                where inventTrans.itemId            == _itemId
                    &&    inventTrans.TransChildType    == InventTransChildType::None
                    &&    (inventTrans.StatusIssue      == StatusIssue::Picked
                    ||     inventTrans.StatusIssue      == StatusIssue::ReservPhysical)
                #WHSInventDimExistsJoin(inventTrans.InventDimId, inventDimJoin, _inventDimCriteria)
            exists join inventTransOrigin
                    where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                        &&    inventTransOrigin.ReferenceCategory   == InventTransType::ProdLine
                        &&    InventTransOrigin.ReferenceId         == _prodId;
        }
        else
        {
            select sum(Qty), sum(PdsCWQty) from inventTrans
                where inventTrans.itemId            == _itemId
                    &&    inventTrans.TransChildType    == InventTransChildType::None
                    &&    (inventTrans.StatusIssue      == StatusIssue::Picked
                    ||     inventTrans.StatusIssue      == StatusIssue::ReservPhysical)
                #InventDimExistsJoin(inventTrans.InventDimId, inventDimJoin, _inventDimCriteria, _inventDimCriteriaParm)
            exists join inventTransOrigin
                    where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                        &&    inventTransOrigin.ReferenceCategory   == InventTransType::ProdLine
                        &&    InventTransOrigin.ReferenceId         == _prodId;
        }

        return _isCWItem ?
                    -inventTrans.PdsCWQty :
                    -inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingTransQuantitiesForConsumptionForPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the BOM catch weight and inventory quantity that is in status picked.
    /// </summary>
    /// <param name = "_prodId">
    /// The production order ID.
    /// </param>
    /// <param name = "_itemId">
    /// The BOM item ID.
    /// </param>
    /// <param name = "_inventDimCriteria">
    /// The inventory dimensions criteria.
    /// </param>
    /// <param name = "_inventDimCriteriaParm">
    /// The inventory dimensions criteria flags.
    /// </param>
    /// <returns>
    /// Returns an instance of <c>PmfQtyDataCarrier</c> containing the catch weight and inventory quantity picked.
    /// </returns>
    [Hookable(false)]
    internal static PmfQtyDataCarrier getRemainingTransQuantitiesForConsumptionForPick(
        ProdId          _prodId,
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimCriteriaParm = null)
    {
        InventTrans         inventTrans;
        InventDim           inventDimJoin;
        InventTransOrigin   inventTransOrigin;

        if (_inventDimCriteriaParm.isAllFlagNo())
        {
            select sum(Qty), sum(PdsCWQty) from inventTrans
                where inventTrans.itemId            == _itemId
                    &&    inventTrans.TransChildType    == InventTransChildType::None
                    &&    inventTrans.StatusIssue      == StatusIssue::Picked
                #WHSInventDimExistsJoin(inventTrans.InventDimId, inventDimJoin, _inventDimCriteria)
            exists join inventTransOrigin
                    where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                        &&    inventTransOrigin.ReferenceCategory   == InventTransType::ProdLine
                        &&    InventTransOrigin.ReferenceId         == _prodId;
        }
        else
        {
            select sum(Qty), sum(PdsCWQty) from inventTrans
                where inventTrans.itemId            == _itemId
                    &&    inventTrans.TransChildType    == InventTransChildType::None
                    &&    inventTrans.StatusIssue      == StatusIssue::Picked
                #InventDimExistsJoin(inventTrans.InventDimId, inventDimJoin, _inventDimCriteria, _inventDimCriteriaParm)
            exists join inventTransOrigin
                    where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                        &&    inventTransOrigin.ReferenceCategory   == InventTransType::ProdLine
                        &&    InventTransOrigin.ReferenceId         == _prodId;
        }

        return PmfQtyDataCarrier::newStandard(-inventTrans.Qty, -inventTrans.PdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchNumberPickedForProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds if the batch exists on a picked transaction
    /// </summary>
    /// <param name = "_batchId">
    /// The batch ID to search for on picked transactions.
    /// </param>
    /// <param name = "_prodId">
    /// The production order ID.
    /// </param>
    /// <param name = "_itemId">
    /// The BOM line item.
    /// </param>
    /// <returns>
    /// true if a picked transaction is found; false, otherwise.
    /// </returns>
    public static boolean isBatchNumberPickedForProdBOM(
        InventBatchId   _batchId,
        ProdId          _prodId,
        ItemId          _itemId)
    {
        InventDim         bomLineDim;
        InventTrans       inventTrans;
        InventTransOrigin inventTransOrigin;
        
        select firstonly RecId from inventTrans
            where inventTrans.ItemId            == _itemId
            &&    inventTrans.TransChildType    == InventTransChildType::None
            &&    inventTrans.StatusIssue       == StatusIssue::Picked
            exists join bomLineDim
                where bomLineDim.inventDimId    == inventTrans.inventDimId
                &&    bomLineDim.inventBatchId  == _batchId
            exists join inventTransOrigin
                where inventTransOrigin.RecId             == inventTrans.InventTransOrigin
                &&    inventTransOrigin.ReferenceCategory == InventTransType::ProdLine
                &&    inventTransOrigin.ReferenceId       == _prodId;

        return inventTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusFromPickedOrReservedTransactionInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the status on the transaction that matches the rest of the given dimension.
    /// </summary>
    /// <param name = "_inventDimId">
    /// The given dimension ID.
    /// </param>
    /// <param name = "_itemId">
    /// The item on the BOM line.
    /// </param>
    /// <param name = "_prodId">
    /// The production order ID.
    /// </param>
    /// <returns>
    /// The inventory status on the dimension of the transaction.
    /// </returns>
    public static WHSInventStatusId statusFromPickedOrReservedTransactionInventDim(
        InventDimId _inventDimId,
        ItemId      _itemId,
        ProdId      _prodId)
    {
        InventDim         bomLineDim;
        InventDim         currentDim = InventDim::find(_inventDimId);
        InventDimParm     currentDimParm;
        InventTrans       inventTrans;
        InventTransOrigin inventTransOrigin;

        currentDimParm.initFromInventDim(currentDim);

        select firstonly inventDimId from inventTrans
            where inventTrans.ItemId            == _itemId
            &&    inventTrans.TransChildType    == InventTransChildType::None
            &&    (inventTrans.StatusIssue      == StatusIssue::Picked
            ||     inventTrans.StatusIssue      == StatusIssue::ReservPhysical)
            #InventDimExistsJoin(inventTrans.inventDimId, bomLineDim, currentDim, currentDimParm)
            exists join inventTransOrigin
                where inventTransOrigin.RecId             == inventTrans.InventTransOrigin
                &&    inventTransOrigin.ReferenceCategory == InventTransType::ProdLine
                &&    inventTransOrigin.ReferenceId       == _prodId;

        return InventDim::find(inventTrans.inventDimId).InventStatusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchDispCodeForPicking</Name>
				<Source><![CDATA[
    /// <summary>Validates that the selected batch is available for picking.</summary>
    /// <param name="_inventBatchId">The batch Id to consume from.</param>
    /// <param name="_itemId">The item being consumed.</param>     
    /// <returns>Returns true if the batch is available for picking.</returns>
    private boolean validateBatchDispCodeForPicking(InventBatchId _inventBatchId, ItemId _itemId)
    {
        boolean ret = true;        

        if (_inventBatchId
            && _itemId)
        {
            InventBatch inventBatch = InventBatch::find(_inventBatchId, _itemId);
            if (inventBatch)
            {
                ret = inventBatch.validateBatchDispCodeForPicking(WHSWorkTransType::ProdPick);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>