<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCExportDetailsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLCExportDetailsDP</c> class is the Report Data Provider class for the
///    <c>BankLCExportDetails</c> SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(BankLCExportDetailsContract))
]
class BankLCExportDetailsDP extends SRSReportDataProviderBase
{
    BankLCExportDetailsShipmentTmp  bankLCExportDetailsShipmentTmp;
    BankLCExportDetailsSalesLineTmp bankLCExportDetailsSalesLineTmp;
    BankLCExportDetailsTmp          bankLCExportDetailsTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSalesLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the query to fetch the <c>SalesLine</c> records that are related to the current
    ///    <c>BankLCExport</c> table.
    /// </summary>
    /// <param name="_salesId">
    ///    The specified <c>SalesId</c> ID that is used to find the <c>SalesLine</c> records.
    /// </param>
    /// <returns>
    ///    The created query.
    /// </returns>
    private Query createSalesLineQuery(SalesId   _salesId)
    {
        Query                   salesLineQuery;
        QueryBuildDataSource    salesLineDS;

        salesLineQuery  = new Query();
        salesLineDS     = salesLineQuery.addDataSource(tablenum(SalesLine));
        salesLineDS.addRange(fieldnum(SalesLine, SalesId)).value(SysQuery::value(_salesId));
        salesLineDS.addRange(fieldnum(SalesLine, LineDeliveryType)).value(SysQuery::value(LineDeliveryType::DeliveryLine));
        salesLineDS.addRange(fieldnum(SalesLine, LineDeliveryType)).value(SysQuery::value(LineDeliveryType::OrderLine));
        salesLineDS.addGroupByField(fieldnum(SalesLine, SalesId));
        salesLineDS.addGroupByField(fieldnum(SalesLine, ItemId));
        salesLineDS.addGroupByField(fieldnum(SalesLine, SalesUnit));
        salesLineDS.addSelectionField(fieldnum(SalesLine, SalesQty), SelectionField::Sum);

        return salesLineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the query to fetch the <c>BankLCExportLine</c> records that are related to the current
    ///    <c>BankLCExport</c> table.
    /// </summary>
    /// <param name="_bankLCExportRefRecId">
    ///    The specified <c>BankLCRefRecId</c> records to find the <c>BankLCExportLine</c> records.
    /// </param>
    /// <returns>
    ///    The created query.
    /// </returns>
    private Query createShipmentQuery(BankLCRefRecId _bankLCExportRefRecId)
    {
        Query                   shipmentQuery;
        QueryBuildDataSource    shipmentDS;

        shipmentQuery  = new Query();
        shipmentDS     = shipmentQuery.addDataSource(tablenum(BankLCExportLine));
        shipmentDS.addRange(fieldnum(BankLCExportLine, BankLC)).value(SysQuery::value(_bankLCExportRefRecId));

        return shipmentQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCExportDetailsSalesLineTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>BankLCExportDetailsSalesLineTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(BankLCExportDetailsSalesLineTmp))
    ]
    public  BankLCExportDetailsSalesLineTmp  getBankLCExportDetailsSalesLineTmp()
    {
        select bankLCExportDetailsSalesLineTmp;
        return bankLCExportDetailsSalesLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCExportDetailsShipmentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>BankLCExportDetailsShipmentTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(BankLCExportDetailsShipmentTmp))
    ]
    public  BankLCExportDetailsShipmentTmp  getBankLCExportDetailsShipmentTmp()
    {
        select bankLCExportDetailsShipmentTmp;
        return bankLCExportDetailsShipmentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCExportDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>BankLCExportDetailsTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(BankLCExportDetailsTmp))
    ]
    public  BankLCExportDetailsTmp  getBankLCExportDetailsTmp()
    {
        select bankLCExportDetailsTmp;
        return bankLCExportDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankLCExportDetailsSalesLineTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temporary table <c>BankLCExportDetailsSalesLineTmp</c>.
    /// </summary>
    /// <param name="_salesLine">
    /// The _salesLine use to init <c>BankLCExportDetailsSalesLineTmp</c>.
    /// </param>
    public void insertBankLCExportDetailsSalesLineTmp(SalesLine _salesLine)
    {
        bankLCExportDetailsSalesLineTmp.initFromSalesLine(_salesLine);
        bankLCExportDetailsSalesLineTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankLCExportDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temporary table <c>BankLCExportDetailsTmp</c>.
    /// </summary>
    /// <param name="_bankLCExport">
    /// The _bankLCExport use to init <c>BankLCExportDetailsTmp</c>.
    /// </param>
    public void insertBankLCExportDetailsTmp(BankLCExport _bankLCExport)
    {
        bankLCExportDetailsTmp.initFromBankLCExport(_bankLCExport);
        bankLCExportDetailsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankLCImportDetailsShipmentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temporary table <c>BankLCExportDetailsShipmentTmp</c>.
    /// </summary>
    /// <param name="_bankLCExportLine">
    /// The _bankLCExportLine use to init <c>BankLCExportDetailsShipmentTmp</c>.
    /// </param>
    public void insertBankLCImportDetailsShipmentTmp(BankLCExportLine _bankLCExportLine)
    {
        bankLCExportDetailsShipmentTmp.initFromBankLCExportLine(_bankLCExportLine);
        bankLCExportDetailsShipmentTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic which is used by the <c>BankLCExportDetails</c> report.
    /// </remarks>
    public void processReport()
    {
        QueryRun            salesLineQueryRun;
        QueryRun            shipmentQueryRun;
        SalesId             salesId;
        BankLCExport        bankLCExport;
        SalesLine           salesLine;
        BankLCExportLine    bankLCExportLine;

        BankLCExportDetailsContract bankLCExportDetailsContract = this.parmDataContract();
        salesId = bankLCExportDetailsContract.parmSalesId();

        bankLCExport = BankLCExport::findBySalesTable(salesId);

        if (bankLCExport && bankLCExport.RecId)
        {
            this.insertBankLCExportDetailsTmp(bankLCExport);

            salesLineQueryRun = new QueryRun(this.createSalesLineQuery(salesId));
            while (salesLineQueryRun.next())
            {
                if (salesLineQueryRun.changed(tablenum(SalesLine)))
                {
                    salesLine = salesLineQueryRun.get(tablenum(SalesLine));
                    this.insertBankLCExportDetailsSalesLineTmp(salesLine);
                }
            }

            shipmentQueryRun = new QueryRun(this.createShipmentQuery(bankLCExport.RecId));
            while (shipmentQueryRun.next())
            {
                if (shipmentQueryRun.changed(tablenum(BankLCExportLine)))
                {
                    bankLCExportLine = shipmentQueryRun.get(tablenum(BankLCExportLine));
                    this.insertBankLCImportDetailsShipmentTmp(bankLCExportLine);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
