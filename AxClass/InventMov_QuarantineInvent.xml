<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_QuarantineInvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_QuarantineInvent</c> class is used together with inventory quarantine orders.
/// </summary>
/// <remarks>
///    When a quarantine order is created, the <c>InventMov_Quarantine</c> class is used. When starting
///    the quarantine order, the <c>InventMov_QuarantineInvent</c> class is used to create the receipt
///    transactions that are in the quarantine warehouse.
/// </remarks>
//This movement corresponds to movements for the standard warehouse
[InventMovementFactoryAttribute(tableStr(InventQuarantineOrder),InventMovSubType::TransferReceipt)]
class InventMov_QuarantineInvent extends InventMov_Quarantine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInventTransBeFinancialUpdated</Name>
				<Source><![CDATA[
    public boolean canInventTransBeFinancialUpdated(InventTrans _inventTrans)
    {
        switch (inventDirection)
        {
            case InventDirection::Receipt:
            case InventDirection::Issue:
                if (_inventTrans.inventDim().inventLocation().InventLocationType != InventLocationType::Standard)
                {
                    return false;
                }
                break;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowManualMarking</Name>
				<Source><![CDATA[
    public boolean checkAllowManualMarking()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return inventQuarantineOrder.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    ///    zero if the whole movement is not marked; otherwise, the ID of the transaction origin.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTransDimTransferReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merges the specified <c>InventDim</c> value with the current transaction <c>InventDim</c> values.
    /// </summary>
    /// <param name="_toInventDim">
    ///    The specified <c>InventDim</c> value to which to merge.
    /// </param>
    /// <param name="_fromInventDim">
    ///    The specified <c>InventDim</c> value from which to merge.
    /// </param>
    /// <param name="_origFromDim">
    ///    The original <c>InventDim</c> value.
    /// </param>
    /// <returns>
    ///    The merged <c>InventDim</c> value.
    /// </returns>
    public InventDim mergeTransDimTransferReceipt(
        InventDim       _toInventDim,
        InventDim       _fromInventDim          = this.inventdim(),
        InventDim       _origFromDim            = _fromInventDim)
    {
        InventDimGroupFieldSetupEnumerator      enumerator                  = this.inventDimGroupSetup().getFieldSetupEnumerator();

        while (enumerator.moveNext())
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();
            FieldId inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isActive())
            {
                if (!_toInventDim.(inventDimFieldId))
                {
                    _toInventDim.(inventDimFieldId) = _fromInventDim.(inventDimFieldId);
                }
                else if (_toInventDim.(inventDimFieldId) && !InventDim::isFieldIdTransferTransitReceiptMergeable(inventDimFieldId))//keep location specific dimensions
                {
                    _toInventDim.(inventDimFieldId) = _fromInventDim.(inventDimFieldId);
                }
            }
            else
            {
                _toInventDim.clearField(inventDimFieldId);
            }
        }

        if (_toInventDim.wmsLocationId && !_toInventDim.wmsLocation())
        {
            _toInventDim.wmsLocationId = '';
            _toInventDim.wmsPalletId = '';
        }

        return _toInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>inventMovement</c> object must be auto-reserved.
    /// </summary>
    /// <returns>
    ///    true if the <c>inventMovement</c> object must be auto-reserved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is often called together with the <c>canBeReserved</c> method, which returns a default
    ///    Boolean value from the <c>inventType</c> class hierarchy.
    /// </remarks>
    public boolean mustBeAutoReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventQuarantineOrder.RecId)
        {
            return null;
        }

        return InventMov_QuarantineInvent::newFromInventQuarantineOrder(inventQuarantineOrder.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferIssue</Name>
				<Source><![CDATA[
    public InventMovement  newMovement_TransferIssue()
    {
        if (inventQuarantineOrder.Status == InventQuarantineStatus::Created)
        {
            return this;
        }

        return InventMovement::construct(this.buffer(),InventMovSubType::None,this.childBuffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferReceipt</Name>
				<Source><![CDATA[
    public InventMovement  newMovement_TransferReceipt()
    {
        if (inventQuarantineOrder.Status != InventQuarantineStatus::Created)
        {
            return this;
        }

        return InventMovement::construct(this.buffer(),InventMovSubType::None,this.childBuffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainFinancialUnit</Name>
				<Source><![CDATA[
    public UnitQty remainFinancialUnit()
    {
        if (inventDirection == InventDirection::Receipt)
        {
            return this.transIdSum().received();
        }

        return this.remainFinancial();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty   remainPhysical()
    {
        if (inventDirection == InventDirection::Receipt)
        {
            if (inventQuarantineOrder.Status == InventQuarantineStatus::Started ||
                inventQuarantineOrder.Status == InventQuarantineStatus::ReportedFinished)
            {
                return inventQuarantineOrder.Qty - inventQuarantineOrder.qtyEndedPhysical();
            }

            return this.transSign() * inventQuarantineOrder.RemainQty;
        }

        if (inventDirection == InventDirection::Issue)
        {
            return this.transSign() * (inventQuarantineOrder.Qty - inventQuarantineOrder.qtyStarted());
        }

        return this.transSign() * inventQuarantineOrder.RemainQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        inventQuarantineOrder.setInventDimId(_dimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transIdSum</Name>
				<Source><![CDATA[
    public InventTransIdSum transIdSum(boolean _reRead = false)
    {
        if (! transIdSum || _reRead)
        {
            transIdSum = InventTransIdSum_InventLocation::newStandard(this.inventTransOriginId(),this.transChildType() != InventTransChildType::None,this.transChildType(),this.transChildRefId());
        }

        return transIdSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transIdSumTransId</Name>
				<Source><![CDATA[
    protected InventTransIdSum transIdSumTransId(boolean _reRead = false)
    {
        if (this.transChildType() != InventTransChildType::None)
        {
            if (! transIdSumTransId || _reRead)
            {
                transIdSumTransId  = InventTransIdSum_InventLocation::newStandard(this.inventTransOriginId());
            }
        }
        else
        {
            transIdSumTransId = this.transIdSum(_reRead);
        }

        return transIdSumTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        if (inventDirection == InventDirection::Issue)
        {
            switch (inventQuarantineOrder.Status)
            {
                case InventQuarantineStatus::Started:
                case InventQuarantineStatus::ReportedFinished:
                    return -1;
            }
        }

        return inventQuarantineOrder.Status == InventQuarantineStatus::Created ? -1 : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventQuarantineOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMov_QuarantineInvent</c> class based on the specified record.
    /// </summary>
    /// <param name="_inventQuarantineOrder">
    ///    The record in the <c>InventQuarantineOrder</c> table for which the class is instantiated.
    /// </param>
    /// <param name="_inventType">
    ///    The associated <c>InventType</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_QuarantineInvent</c> class.
    /// </returns>
    public static InventMov_QuarantineInvent newFromInventQuarantineOrder(
        InventQuarantineOrder   _inventQuarantineOrder,
        InventType              _inventType = new InventType(_inventQuarantineOrder))
    {
        return new InventMov_QuarantineInvent(_inventQuarantineOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSerialNum</Name>
				<Source><![CDATA[
    public boolean checkSerialNum(InventTrans _inventTrans, InventSerialId _inventSerialId)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>