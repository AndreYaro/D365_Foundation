<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReportRSV1_2013</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayReportRSV1_2013 extends RunBaseBatch implements IRPayReportRunClass, BatchRetryable
{
    DialogField                     dfReportPeriod,
                                    dfPayYear,
                                    dfCorrecting,
                                    dfOfficialsType,
                                    dfResponsibleId;

    RPayReportSocialTaxPeriod       reportPeriod;
    RPayYearPeriod                  payYear;
    NoYes                           correcting;

    ComExcelDocument_RU             excelDocument;
    CompanyInfo                     companyInfo;
    RpayTaxParameters               payTaxParameters;
    RPayFundEmplSum                 rPayFundEmplSum;

    RPayCounterUnit                 tF, fF, sPP, ePP, fB;
    RPayGroup                       gr66, gr67,
                                    disFirst, disSecond, disThird,
                                    groupWorkers;
    RPayRateCode                    rounding, invalidRate, studentRate, piEmplRate;

    RpayFundDeductionCode           deductionCodeInvalids,
                                    deductionCodeExceedMax,
                                    deductionCode212;

    TransDate                       periodEndDate, mth1, mth2, mth3;

    Range                           wholePeriod,
                                    month1,
                                    month2,
                                    month3,
                                    beforeQuarter,
                                    currentQuarter,
                                    fromYearStart;

    Range                           codesToExclude,
                                    groupsInvalids;

    RPayPFReportCtrl                reportData;
    IRPayPFReportCommand            totalFundCommand, invalidsCommand, studentsCommand;

    IRPayPFReportDataIterator       dataIterator;

    QueryRun                        queryRun;
    Counter                         deletedWks;
    RPayPFOfficialsType             officialsType;
    RHRMEmplId                          responsibleId;
    Counter                         pageNumber;
    RPayPFReportParmContract        parmContract;
    RPayRateTable                   rateTableEmplQty;
    RPayRateTable                   rateTableDis;

    #RPayPFReport_RSV1
    #RPayPFReportRSV_Excel_2013

    #define.CellSpace(3)
    #define.QtyLength(6)

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        reportPeriod,
        payYear,
        correcting,
        officialsType,
        responsibleId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    private void checkAndPrepareParameters()
    {
        boolean ok = true;

        fF              = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 1, '',  '', false);
        studentRate     = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 7, '', '', false);
        groupWorkers    = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 8, "@RUP1230", "@RUP2160");
        rounding        = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 9, "@RUP2170", "@RUP108");

        payTaxParameters = RpayTaxParameters::find();
        companyInfo      = CompanyInfo::find();

        piEmplRate = RPayCounterTable::find(payTaxParameters.PensionFundInsurance).PayRateEmpl;
        rateTableEmplQty = RPayRateTable::find(piEmplRate);
        deductionCodeInvalids = payTaxParameters.PensionFundinvalidDeduction;

        codesToExclude  = deductionCodeInvalids;
        codesToExclude += deductionCodeExceedMax ? ((codesToExclude ? ',' : '') + deductionCodeExceedMax) : '';
        codesToExclude += deductionCode212       ? ((codesToExclude ? ',' : '') + deductionCode212)       : '';

        groupsInvalids  = disFirst;
        groupsInvalids += disSecond ? ((groupsInvalids ? ',' : '') + disSecond) : '';
        groupsInvalids += disThird  ? ((groupsInvalids ? ',' : '') + disThird)  : '';

        invalidRate = RpayFundDeductionTable::find(RpayTaxParameters::find().PensionFundinvalidDeduction).RpayRateCodeEmpl;

        if (groupWorkers)
        {
            this.checkCalculatedAvgQty();
        }

        rateTableDis = RPayRateTable::find(invalidRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCalculatedAvgQty</Name>
				<Source><![CDATA[
    protected boolean checkCalculatedAvgQty()
    {
        RPayAverageQuantity  averageQuantity;
        ReportPeriod_RU      dtIterator;
        boolean ret = true;

        for (dtIterator = endmth(dateStartYr(mth3)); dtIterator <= mth3; dtIterator = endmth(nextmth(dtIterator)))
        {
            averageQuantity = RPayAverageQuantity::find(groupWorkers, dtIterator);

            if (averageQuantity.RecId == 0)
            {
                ret = checkFailed(strfmt("@RUP3417", dtIterator, groupWorkers)) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();
        dialog.addGroup("@SYS28007");
        dfReportPeriod  = dialog.addFieldValue(EnumStr(RPayReportSocialTaxPeriod),   reportPeriod);
        dfPayYear       = dialog.addFieldValue(ExtendedTypeStr(RPayYearPeriod),              payYear,    "@SYS5563");
        dfCorrecting    = dialog.addFieldValue(EnumStr(NoYes),                       correcting, "@GLS111911");
        dialog.addGroup("@GLS102112");
        dfOfficialsType = dialog.addFieldValue(EnumStr(RPayPFOfficialsType), officialsType);
        dfResponsibleId = dialog.addFieldValue(ExtendedTypeStr(RHRMEmplId), responsibleId, "@SYS138179", "@RUP2143");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAddressInfo</Name>
				<Source><![CDATA[
    private void fillAddressInfo()
    {
        LogisticsAddressZipCode         zipCode;
        LogisticsAddressCountryRegion   countryRegion;
        LogisticsAddressState           state;
        LogisticsAddressCounty          county;
        LogisticsAddressCity            city;
        LogisticsAddressDistrict        district;
        LogisticsAddressStreet_RU       street;
        LogisticsAddressHouseNumber_RU  house;
        LogisticsAddressFlatNumber_RU   flat;
        LogisticsPostalAddress          address;

        address = companyInfo.postalAddress();

        countryRegion   = LogisticsAddressCountryRegion::find(address.CountryRegionId);
        state           = LogisticsAddressState::find(countryRegion.CountryRegionId, address.state);
        county          = LogisticsAddressCounty::find(countryRegion.CountryRegionId, state.stateId, address.county);
        city            = LogisticsAddressCity::findRecId(address.CityRecId);
        district        = LogisticsAddressDistrict::find_RU(address.District);
        street          = LogisticsAddressStreet_RU::findRecID(address.StreetId_RU);
        house           = LogisticsAddressHouseNumber_RU::findRecId(address.HouseId_RU);
        flat            = LogisticsAddressFlatNumber_RU::findRecId(address.FlatId_RU);
        zipCode         = LogisticsAddressZipCode::findRecId(address.ZipCodeRecId);

        excelDocument.insertValue('AddressZipCode',     zipCode.ZipCode);
        excelDocument.insertValue('AddressState',       strupr(strltrim(state.FullName_RU())));
        excelDocument.insertValue('AddressCounty',      strupr(strltrim(county.FullName_RU())));
        excelDocument.insertValue('AddressTown',        strupr(city.fullName_RU()));
        excelDocument.insertValue('AddressSettlement',  strupr(strltrim(district.fullName_RU())));
        excelDocument.insertValue('AddressStreet',      strupr(strltrim(street.fullName())));
        excelDocument.insertValue('AddressEstate',      address.BuildingCompliment);
        excelDocument.insertValue('AddressBuilding',    address.Building_RU);
        excelDocument.insertValue('AddressFlat',        address.Apartment_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    public void fillDocument()
    {
        this.progressInit(RPayReportRSV1_2013::description(), 5, #AviFormLetter);
        setprefix(RPayReportRSV1_2013::description());

        pageNumber = 1;
        this.fillTitle();
        pageNumber++;
        this.fillSection1();
        pageNumber++;
        this.fillSection2();
        pageNumber++;
        this.fillSection203();
        pageNumber++;
        this.fillSection2_2223();
        pageNumber++;
        this.fillSection3();
        pageNumber++;
        this.fillSection5();

        this.fillRegularCells('TotalPages', this.pageNum2str(), #CellSpace, #CellSpace, 1);

        excelDocument.activateWorksheet(1);
        excelDocument.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOfficials</Name>
				<Source><![CDATA[
    private void fillOfficials()
    {
        RHRMEmplTable   emplTable;

        switch (officialsType)
        {
            case RPayPFOfficialsType::Payer:
                excelDocument.insertValue('SignerType', '1');
                break;

            case RPayPFOfficialsType::Representative:
                excelDocument.insertValue('SignerType', '2');
                break;

            case RPayPFOfficialsType::Successor:
                excelDocument.insertValue('SignerType', '3');
                break;
        }

        if (responsibleId)
        {
            emplTable = RHRMEmplTable::find(responsibleId);
            excelDocument.insertValue('Signer', strupr(emplTable.personTable().fio(false)));
        }
        else
        {
            excelDocument.insertValue('Signer' , strupr(OfficialsTable_RU::findDirector().Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPeriod</Name>
				<Source><![CDATA[
    private void fillPeriod()
    {
        str period;

        switch (reportPeriod)
        {
            case RPayReportSocialTaxPeriod::Quarter:
                period = '03';
                break;
            case RPayReportSocialTaxPeriod::HalfYear:
                period = '06';
                break;
            case RPayReportSocialTaxPeriod::NineMonth:
                period = '09';
                break;
            case RPayReportSocialTaxPeriod::Year:
                period = '12';
                break;
            default:
                period = '00';
        }

        this.fillRegularCells('ReportPeriodType', period, 2, #CellSpace, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRegularCells</Name>
				<Source><![CDATA[
    protected void fillRegularCells(Bookmark _bookmark,
                                    str      _text,
                                    int      _maxLen,
                                    int      _cellSpace    = #CellSpace,
                                    int      _workSheet    = 0,
                                    boolean  _horizontal   = true,
                                    str 1    _fillChar     = '',
                                    boolean  _fillCharBack = false,
                                    str      _skipSymbol   = '')
    {
        int                             i, col, row;
        COM                             cell;
        COM                             comApplication, comDocument;
        COM                             comWorksheets, comWorksheet;
        Bookmark                        bookmark;
        str                             curSymbol;

        if (!_bookmark || !_text || !_maxLen || !_cellSpace)
        {
            return;
        }

        comDocument = excelDocument.getComDocument();
        comApplication = comDocument.Application();
        bookmark = _bookmark;

        if (_workSheet)
        {
            comWorksheets = comDocument.Worksheets();
            comWorksheet  = comWorksheets.item(_workSheet);
            cell = comWorksheet.Range(bookmark);
        }
        else
        {
            cell = comApplication.Range(bookmark);
        }

        col = cell.Column();
        row = cell.Row();

        if (_fillChar && strlen(_text) <= _maxLen)
        {
            if (_fillCharBack)
            {
                _text = _text + strrep(_fillChar, _maxLen - strlen(_text));
            }
            else
            {
                _text = strrep(_fillChar, _maxLen - strlen(_text)) + _text;
            }
        }

        while (i < strlen(_text) && i < _maxLen)
        {
            i++;
            bookmark = COMExcelDocument_RU::numToNameCell(col, row);
            cell = _workSheet ? comWorksheet.Range(bookmark) : comApplication.Range(bookmark);
            curSymbol = substr(_text, i, 1);
            if (curSymbol!=_skipSymbol)
                cell.value2(curSymbol);
            if (_horizontal)
            {
                col += _cellSpace;
            }
            else
            {
                row += _cellSpace;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection1</Name>
				<Source><![CDATA[
    private void fillSection1()
    {
        progress.setText(strfmt("@GLS110792", 1));
        progress.incCount();
        this.fillRegularCells('DG2', this.pageNum2str(), #CellSpace, #CellSpace, pageNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection2</Name>
				<Source><![CDATA[
    private void fillSection2()
    {
        progress.setText(strfmt("@GLS110792", 2));
        progress.incCount();

        this.fillRegularCells('DG2', this.pageNum2str(), #CellSpace, #CellSpace, pageNumber);

        excelDocument.insertValue(#S2R201C3, this.getValue(#S2R201C3).parmFundTotalAmount());
        excelDocument.insertValue(#S2R201C4, this.getValue(#S2R201C4).parmFundTotalAmount());
        excelDocument.insertValue(#S2R201C5, this.getValue(#S2R201C5).parmFundTotalAmount());
        excelDocument.insertValue(#S2R201C6, this.getValue(#S2R201C6).parmFundTotalAmount());

        excelDocument.insertValue(#S2R202C3, this.getValue(#S2R202C3).parmFundTotalAmount());
        excelDocument.insertValue(#S2R202C4, this.getValue(#S2R202C4).parmFundTotalAmount());
        excelDocument.insertValue(#S2R202C5, this.getValue(#S2R202C5).parmFundTotalAmount());
        excelDocument.insertValue(#S2R202C6, this.getValue(#S2R202C6).parmFundTotalAmount());

        excelDocument.insertValue(#S2R203C3, this.getValue(#S2R203C3).parmFundTotalAmount());
        excelDocument.insertValue(#S2R203C4, this.getValue(#S2R203C4).parmFundTotalAmount());
        excelDocument.insertValue(#S2R203C5, this.getValue(#S2R203C5).parmFundTotalAmount());
        excelDocument.insertValue(#S2R203C6, this.getValue(#S2R203C6).parmFundTotalAmount());

        excelDocument.insertValue(#S2R211C3, this.getValue(#S2R211C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R211C4, this.getValue(#S2R211C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R211C5, this.getValue(#S2R211C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R211C6, this.getValue(#S2R211C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R212C3, this.getValue(#S2R212C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R212C4, this.getValue(#S2R212C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R212C5, this.getValue(#S2R212C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R212C6, this.getValue(#S2R212C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R213C3, this.getValue(#S2R213C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R213C4, this.getValue(#S2R213C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R213C5, this.getValue(#S2R213C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R213C6, this.getValue(#S2R213C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R221C3, this.getValue(#S2R221C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R221C4, this.getValue(#S2R221C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R221C5, this.getValue(#S2R221C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R221C6, this.getValue(#S2R221C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R222C3, this.getValue(#S2R222C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R222C4, this.getValue(#S2R222C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R222C5, this.getValue(#S2R222C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R222C6, this.getValue(#S2R222C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R223C3, this.getValue(#S2R223C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R223C4, this.getValue(#S2R223C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R223C5, this.getValue(#S2R223C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R223C6, this.getValue(#S2R223C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R231C3, this.getValue(#S2R231C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R231C4, this.getValue(#S2R231C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R231C5, this.getValue(#S2R231C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R231C6, this.getValue(#S2R231C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R232C3, this.getValue(#S2R232C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R232C4, this.getValue(#S2R232C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R232C5, this.getValue(#S2R232C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R232C6, this.getValue(#S2R232C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R233C3, this.getValue(#S2R233C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R233C4, this.getValue(#S2R233C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R233C5, this.getValue(#S2R233C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R233C6, this.getValue(#S2R233C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R250C3, this.getValue(#S2R250C3).parmFundAmount() - this.getValue(#S2R252C3).parmDeductionPctBase());
        excelDocument.insertValue(#S2R250C4, this.getValue(#S2R250C4).parmFundAmount() - this.getValue(#S2R252C4).parmDeductionPctBase());
        excelDocument.insertValue(#S2R250C5, this.getValue(#S2R250C5).parmFundAmount() - this.getValue(#S2R252C5).parmDeductionPctBase());
        excelDocument.insertValue(#S2R250C6, this.getValue(#S2R250C6).parmFundAmount() - this.getValue(#S2R252C6).parmDeductionPctBase());

        excelDocument.insertValue(#S2R251C3, this.getValue(#S2R251C3).parmFundAmount());
        excelDocument.insertValue(#S2R251C4, this.getValue(#S2R251C4).parmFundAmount());
        excelDocument.insertValue(#S2R251C5, this.getValue(#S2R251C5).parmFundAmount());
        excelDocument.insertValue(#S2R251C6, this.getValue(#S2R251C6).parmFundAmount());

        excelDocument.insertValue(#S2R252C3, this.getValue(#S2R252C3).parmDeductionPctBase());
        excelDocument.insertValue(#S2R252C4, this.getValue(#S2R252C4).parmDeductionPctBase());
        excelDocument.insertValue(#S2R252C5, this.getValue(#S2R252C5).parmDeductionPctBase());
        excelDocument.insertValue(#S2R252C6, this.getValue(#S2R252C6).parmDeductionPctBase());

        excelDocument.insertValue(#S2R260C3, this.getValue(#S2R260C3).parmEmplCatQtyAll());
        excelDocument.insertValue(#S2R260C4, this.getValue(#S2R260C4).parmEmplCatQty());
        excelDocument.insertValue(#S2R260C5, this.getValue(#S2R260C5).parmEmplCatQty());
        excelDocument.insertValue(#S2R260C6, this.getValue(#S2R260C6).parmEmplCatQty());

        excelDocument.insertValue(#S2R261C3, this.getValue(#S2R261C3).parmPctBaseEmplQtyAll());
        excelDocument.insertValue(#S2R261C4, this.getValue(#S2R261C4).parmPctBaseEmplQty());
        excelDocument.insertValue(#S2R261C5, this.getValue(#S2R261C5).parmPctBaseEmplQty());
        excelDocument.insertValue(#S2R261C6, this.getValue(#S2R261C6).parmPctBaseEmplQty());

        excelDocument.insertValue(#S2R271C3, this.getValue(#S2R271C3).parmFundTotalAmount());
        excelDocument.insertValue(#S2R271C4, this.getValue(#S2R271C4).parmFundTotalAmount());
        excelDocument.insertValue(#S2R271C5, this.getValue(#S2R271C5).parmFundTotalAmount());
        excelDocument.insertValue(#S2R271C6, this.getValue(#S2R271C6).parmFundTotalAmount());

        excelDocument.insertValue(#S2R272C3, this.getValue(#S2R272C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R272C4, this.getValue(#S2R272C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R272C5, this.getValue(#S2R272C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R272C6, this.getValue(#S2R272C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R273C3, this.getValue(#S2R273C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R273C4, this.getValue(#S2R273C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R273C5, this.getValue(#S2R273C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R273C6, this.getValue(#S2R273C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R274C3, this.getValue(#S2R274C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R274C4, this.getValue(#S2R274C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R274C5, this.getValue(#S2R274C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R274C6, this.getValue(#S2R274C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R276C3, this.getValue(#S2R276C3).parmFundAmount());
        excelDocument.insertValue(#S2R276C4, this.getValue(#S2R276C4).parmFundAmount());
        excelDocument.insertValue(#S2R276C5, this.getValue(#S2R276C5).parmFundAmount());
        excelDocument.insertValue(#S2R276C6, this.getValue(#S2R276C6).parmFundAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection2_2223</Name>
				<Source><![CDATA[
    private void fillSection2_2223()
    {
        progress.setText(strfmt("@GLS110792", 2));
        progress.incCount();

        if (this.getValue(#S2R280C3).parmFundTotalAmount() +
            this.getValue(#S2R290C3).parmFundTotalAmount() == 0)
        {
            excelDocument.deleteWorkSheet(pageNumber);
            deletedWks += 1;
            pageNumber--;
            return;
        }

        this.fillRegularCells('DG2', this.pageNum2str(), #CellSpace, #CellSpace, pageNumber);

        excelDocument.insertValue(#S2R280C3, this.getValue(#S2R280C3).parmFundTotalAmount());
        excelDocument.insertValue(#S2R280C4, this.getValue(#S2R280C4).parmFundTotalAmount());
        excelDocument.insertValue(#S2R280C5, this.getValue(#S2R280C5).parmFundTotalAmount());
        excelDocument.insertValue(#S2R280C6, this.getValue(#S2R280C6).parmFundTotalAmount());

        excelDocument.insertValue(#S2R281C3, this.getValue(#S2R281C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R281C4, this.getValue(#S2R281C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R281C5, this.getValue(#S2R281C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R281C6, this.getValue(#S2R281C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R282C3, this.getValue(#S2R282C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R282C4, this.getValue(#S2R282C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R282C5, this.getValue(#S2R282C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R282C6, this.getValue(#S2R282C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R284C3, this.getValue(#S2R284C3).parmFundAmount());
        excelDocument.insertValue(#S2R284C4, this.getValue(#S2R284C4).parmFundAmount());
        excelDocument.insertValue(#S2R284C5, this.getValue(#S2R284C5).parmFundAmount());
        excelDocument.insertValue(#S2R284C6, this.getValue(#S2R284C6).parmFundAmount());

        excelDocument.insertValue(#S2R285C3, this.getValue(#S2R285C3).parmEmplQtyAll());
        excelDocument.insertValue(#S2R285C4, this.getValue(#S2R285C4).parmEmplQty());
        excelDocument.insertValue(#S2R285C5, this.getValue(#S2R285C5).parmEmplQty());
        excelDocument.insertValue(#S2R285C6, this.getValue(#S2R285C6).parmEmplQty());

        excelDocument.insertValue(#S2R290C3, this.getValue(#S2R290C3).parmFundTotalAmount());
        excelDocument.insertValue(#S2R290C4, this.getValue(#S2R290C4).parmFundTotalAmount());
        excelDocument.insertValue(#S2R290C5, this.getValue(#S2R290C5).parmFundTotalAmount());
        excelDocument.insertValue(#S2R290C6, this.getValue(#S2R290C6).parmFundTotalAmount());

        excelDocument.insertValue(#S2R291C3, this.getValue(#S2R291C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R291C4, this.getValue(#S2R291C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R291C5, this.getValue(#S2R291C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R291C6, this.getValue(#S2R291C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R292C3, this.getValue(#S2R292C3).parmDeductionAmount());
        excelDocument.insertValue(#S2R292C4, this.getValue(#S2R292C4).parmDeductionAmount());
        excelDocument.insertValue(#S2R292C5, this.getValue(#S2R292C5).parmDeductionAmount());
        excelDocument.insertValue(#S2R292C6, this.getValue(#S2R292C6).parmDeductionAmount());

        excelDocument.insertValue(#S2R294C3, this.getValue(#S2R294C3).parmFundAmount());
        excelDocument.insertValue(#S2R294C4, this.getValue(#S2R294C4).parmFundAmount());
        excelDocument.insertValue(#S2R294C5, this.getValue(#S2R294C5).parmFundAmount());
        excelDocument.insertValue(#S2R294C6, this.getValue(#S2R294C6).parmFundAmount());

        excelDocument.insertValue(#S2R295C3, this.getValue(#S2R295C3).parmEmplQtyAll());
        excelDocument.insertValue(#S2R295C4, this.getValue(#S2R295C4).parmEmplQty());
        excelDocument.insertValue(#S2R295C5, this.getValue(#S2R295C5).parmEmplQty());
        excelDocument.insertValue(#S2R295C6, this.getValue(#S2R295C6).parmEmplQty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection203</Name>
				<Source><![CDATA[
    private void fillSection203()
    {
        progress.setText(strfmt("@GLS110792", 2));
        progress.incCount();
        this.fillRegularCells('DG2', this.pageNum2str(), #CellSpace, #CellSpace, pageNumber);
        excelDocument.insertValue(#iS2R201C3, this.getValue(#iS2R201C3).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R201C4, this.getValue(#iS2R201C4).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R201C5, this.getValue(#iS2R201C5).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R201C6, this.getValue(#iS2R201C6).parmFundTotalAmount());

        excelDocument.insertValue(#iS2R202C3, this.getValue(#iS2R202C3).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R202C4, this.getValue(#iS2R202C4).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R202C5, this.getValue(#iS2R202C5).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R202C6, this.getValue(#iS2R202C6).parmFundTotalAmount());

        excelDocument.insertValue(#iS2R203C3, this.getValue(#iS2R203C3).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R203C4, this.getValue(#iS2R203C4).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R203C5, this.getValue(#iS2R203C5).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R203C6, this.getValue(#iS2R203C6).parmFundTotalAmount());

        excelDocument.insertValue(#iS2R211C3, this.getValue(#iS2R211C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R211C4, this.getValue(#iS2R211C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R211C5, this.getValue(#iS2R211C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R211C6, this.getValue(#iS2R211C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R212C3, this.getValue(#iS2R212C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R212C4, this.getValue(#iS2R212C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R212C5, this.getValue(#iS2R212C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R212C6, this.getValue(#iS2R212C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R213C3, this.getValue(#iS2R213C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R213C4, this.getValue(#iS2R213C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R213C5, this.getValue(#iS2R213C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R213C6, this.getValue(#iS2R213C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R221C3, this.getValue(#iS2R221C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R221C4, this.getValue(#iS2R221C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R221C5, this.getValue(#iS2R221C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R221C6, this.getValue(#iS2R221C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R222C3, this.getValue(#iS2R222C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R222C4, this.getValue(#iS2R222C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R222C5, this.getValue(#iS2R222C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R222C6, this.getValue(#iS2R222C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R223C3, this.getValue(#iS2R223C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R223C4, this.getValue(#iS2R223C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R223C5, this.getValue(#iS2R223C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R223C6, this.getValue(#iS2R223C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R231C3, this.getValue(#iS2R231C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R231C4, this.getValue(#iS2R231C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R231C5, this.getValue(#iS2R231C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R231C6, this.getValue(#iS2R231C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R232C3, this.getValue(#iS2R232C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R232C4, this.getValue(#iS2R232C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R232C5, this.getValue(#iS2R232C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R232C6, this.getValue(#iS2R232C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R233C3, this.getValue(#iS2R233C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R233C4, this.getValue(#iS2R233C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R233C5, this.getValue(#iS2R233C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R233C6, this.getValue(#iS2R233C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R250C3, this.getValue(#iS2R250C3).parmFundAmount() - this.getValue(#iS2R250C3).parmDeductionPctBase());
        excelDocument.insertValue(#iS2R250C4, this.getValue(#iS2R250C4).parmFundAmount() - this.getValue(#iS2R250C4).parmDeductionPctBase());
        excelDocument.insertValue(#iS2R250C5, this.getValue(#iS2R250C5).parmFundAmount() - this.getValue(#iS2R250C5).parmDeductionPctBase());
        excelDocument.insertValue(#iS2R250C6, this.getValue(#iS2R250C6).parmFundAmount() - this.getValue(#iS2R250C6).parmDeductionPctBase());

        excelDocument.insertValue(#iS2R251C3, this.getValue(#iS2R251C3).parmFundAmount());
        excelDocument.insertValue(#iS2R251C4, this.getValue(#iS2R251C4).parmFundAmount());
        excelDocument.insertValue(#iS2R251C5, this.getValue(#iS2R251C5).parmFundAmount());
        excelDocument.insertValue(#iS2R251C6, this.getValue(#iS2R251C6).parmFundAmount());

        excelDocument.insertValue(#iS2R252C3, this.getValue(#iS2R252C3).parmDeductionPctBase());
        excelDocument.insertValue(#iS2R252C4, this.getValue(#iS2R252C4).parmDeductionPctBase());
        excelDocument.insertValue(#iS2R252C5, this.getValue(#iS2R252C5).parmDeductionPctBase());
        excelDocument.insertValue(#iS2R252C6, this.getValue(#iS2R252C6).parmDeductionPctBase());

        excelDocument.insertValue(#iS2R260C3, this.getValue(#iS2R260C3).parmEmplCatQtyAll());
        excelDocument.insertValue(#iS2R260C4, this.getValue(#iS2R260C4).parmEmplCatQty());
        excelDocument.insertValue(#iS2R260C5, this.getValue(#iS2R260C5).parmEmplCatQty());
        excelDocument.insertValue(#iS2R260C6, this.getValue(#iS2R260C6).parmEmplCatQty());

        excelDocument.insertValue(#iS2R261C3, this.getValue(#iS2R261C3).parmPctBaseEmplQtyAll());
        excelDocument.insertValue(#iS2R261C4, this.getValue(#iS2R261C4).parmPctBaseEmplQty());
        excelDocument.insertValue(#iS2R261C5, this.getValue(#iS2R261C5).parmPctBaseEmplQty());
        excelDocument.insertValue(#iS2R261C6, this.getValue(#iS2R261C6).parmPctBaseEmplQty());

        excelDocument.insertValue(#iS2R271C3, this.getValue(#iS2R271C3).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R271C4, this.getValue(#iS2R271C4).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R271C5, this.getValue(#iS2R271C5).parmFundTotalAmount());
        excelDocument.insertValue(#iS2R271C6, this.getValue(#iS2R271C6).parmFundTotalAmount());

        excelDocument.insertValue(#iS2R272C3, this.getValue(#iS2R272C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R272C4, this.getValue(#iS2R272C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R272C5, this.getValue(#iS2R272C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R272C6, this.getValue(#iS2R272C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R273C3, this.getValue(#iS2R273C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R273C4, this.getValue(#iS2R273C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R273C5, this.getValue(#iS2R273C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R273C6, this.getValue(#iS2R273C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R274C3, this.getValue(#iS2R274C3).parmDeductionAmount());
        excelDocument.insertValue(#iS2R274C4, this.getValue(#iS2R274C4).parmDeductionAmount());
        excelDocument.insertValue(#iS2R274C5, this.getValue(#iS2R274C5).parmDeductionAmount());
        excelDocument.insertValue(#iS2R274C6, this.getValue(#iS2R274C6).parmDeductionAmount());

        excelDocument.insertValue(#iS2R276C3, this.getValue(#iS2R276C3).parmFundAmount());
        excelDocument.insertValue(#iS2R276C4, this.getValue(#iS2R276C4).parmFundAmount());
        excelDocument.insertValue(#iS2R276C5, this.getValue(#iS2R276C5).parmFundAmount());
        excelDocument.insertValue(#iS2R276C6, this.getValue(#iS2R276C6).parmFundAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection3</Name>
				<Source><![CDATA[

    #define.InvPerFirstPage(55)


    #define.TotalRow(55)

    private void fillSection3()
    {
        int             page, invalidPages;
        int             invalidCount, invalidTotal;
        int             curRow, i;
        int             invFirstPageNum = pageNumber;

        RPayAmount      fundTotalAmount, fundTotalAmountTotal,
                        fundAmountMth1, fundAmountMth1Total,
                        fundAmountMth2, fundAmountMth2Total,
                        fundAmountMth3, fundAmountMth3Total;

        RHRMEmplId      keyEmplId;

        container       tmpCon;

        TransDate       disStartDate, disEndDate, transDate;

        BookMark makeBookMark(int _page, str _colName, int _row)
        {
            return excelDocument.getWorkSheetName(invFirstPageNum - 1 + _page) + '!' + _colName + int2str(_row);
        }

        invalidPages = 0;
        invalidTotal = 0;
        invalidCount = 1;
        curRow       = 15;
        page         = 1;

        this.fillRegularCells('DE2', this.pageNum2str(), #CellSpace, #CellSpace, pageNumber);

        invalidsCommand.parmValue(connull());
        dataIterator = invalidsCommand.iterator();

        while (dataIterator.more())
        {
            tmpCon = dataIterator.value();

            if (tmpCon == connull())
            {
                break;
            }

            [keyEmplId] = conpeek(tmpCon, 1);
            [#emplValueList] = conpeek(tmpCon, 2);

            if (curRow == #InvPerFirstPage)
            {
                excelDocument.deleteRow(#TotalRow, pageNumber);
                curRow = 15;
                ++page;
                ++pageNumber;

                excelDocument.insertSheet(pageNumber, pageNumber);

                this.fillRegularCells('DE2', this.pageNum2str(), #CellSpace, #CellSpace, pageNumber);
            }

            excelDocument.insertValue(makeBookMark(page, 'A', curRow), invalidCount);
            excelDocument.insertValue(makeBookMark(page, 'F', curRow), strupr(RHRMPersonTable::findPayMainEmplId(keyEmplId).fio(false)));

            transDate = periodEndDate;
            for (i = 0; i < 5; i++)
            {
                disStartDate = this.invalidStartDate(keyEmplId, transDate);

                if (disStartDate)
                {
                    excelDocument.insertValue(makeBookMark(page, 'AV', curRow + i), date2str(disStartDate, 123, 2, 2, 2, 2, 4, DateFlags::None));
                    disEndDate = this.findUnDisRate(invalidRate, keyEmplId, disStartDate);

                    if (disEndDate)
                    {
                        excelDocument.insertValue(makeBookMark(page, 'BG', curRow + i), date2str(disEndDate - 1, 123, 2, 2, 2, 2, 4, DateFlags::None));
                    }

                    transDate = disStartDate - 1;
                }
                else
                {
                    break;
                }
            }

            excelDocument.insertValue(makeBookMark(page, 'BR', curRow), fundTotalAmount);
            excelDocument.insertValue(makeBookMark(page, 'CD', curRow), fundAmountMth1);
            excelDocument.insertValue(makeBookMark(page, 'CP', curRow), fundAmountMth2);
            excelDocument.insertValue(makeBookMark(page, 'DB', curRow), fundAmountMth3);

            fundTotalAmountTotal += fundTotalAmount;
            fundAmountMth1Total += fundAmountMth1;
            fundAmountMth2Total += fundAmountMth2;
            fundAmountMth3Total += fundAmountMth3;

            curRow += 5;
            ++invalidCount;

            dataIterator.moveNext();
        } //while (dataIterator.more())

        excelDocument.insertValue(makeBookMark(page, 'BR', #TotalRow), fundTotalAmountTotal);
        excelDocument.insertValue(makeBookMark(page, 'CD', #TotalRow), fundAmountMth1Total);
        excelDocument.insertValue(makeBookMark(page, 'CP', #TotalRow), fundAmountMth2Total);
        excelDocument.insertValue(makeBookMark(page, 'DB', #TotalRow), fundAmountMth3Total);

        excelDocument.deleteWorkSheet(pageNumber + 1);

        if (invalidCount == 1)
        {
             excelDocument.deleteWorkSheet(pageNumber);
             excelDocument.deleteWorkSheet(4);
             pageNumber -= 2;
             deletedWks += 2;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection5</Name>
				<Source><![CDATA[
    #define.InvPerFirstPage(37)
    #define.FirstDataRow(11)
    #define.TotalRow(37)

    private void fillSection5()
    {
        int             page, studentPages;
        int             studentCount, studentTotal;
        int             curRow, studentFirstPage;
        str             rateInfo;

        RPayRateTrans   rpayRateTrans;

        RPayAmount      fundTotalAmount, fundTotalAmountTotal,
                        fundAmountMth1, fundAmountMth1Total,
                        fundAmountMth2, fundAmountMth2Total,
                        fundAmountMth3, fundAmountMth3Total;

        RHRMEmplId      keyEmplId;

        container       tmpCon;

        TransDate       disStartDate = rPayRateTrans.RateDate, disEndDate = dateMax();

        BookMark makeBookMark(int _page, str _colName, int _row)
        {
            return excelDocument.getWorkSheetName(studentFirstPage + _page - 1) + '!' + _colName + int2str(_row);
        }

        void insertPageNumber()
        {
            this.fillRegularCells('DF2', this.pageNum2str(), #CellSpace, #CellSpace, pageNumber + 1);
        }

        studentPages = 0;
        studentTotal = 0;
        studentCount = 1;
        curRow       = #FirstDataRow;
        page         = 1;
        studentFirstPage = pageNumber + 1;

        insertPageNumber();

        studentsCommand.parmValue(connull());
        dataIterator = studentsCommand.iterator();

        while (dataIterator.more())
        {
            tmpCon = dataIterator.value();

            if (tmpCon == connull())
            {
                break;
            }

            [keyEmplId] = conpeek(tmpCon, 1);
            [#emplValueList] = conpeek(tmpCon, 2);

            if (curRow == #InvPerFirstPage)
            {
                excelDocument.deleteRow(#TotalRow, pageNumber+1);
                curRow = #FirstDataRow;
                ++page;
                ++pageNumber;

                excelDocument.insertSheet(pageNumber + 1, pageNumber + 1);
                insertPageNumber();
            }

            excelDocument.insertValue(makeBookMark(page, 'A', curRow), studentCount);
            excelDocument.insertValue(makeBookMark(page, 'F', curRow), strupr(RHRMPersonTable::findPayMainEmplId(keyEmplId).fio(false)));
            rpayRateTrans = this.rateTrans(studentRate, keyEmplId);
            if (rpayRateTrans.RecId)
            {
                rateInfo = strupr(rpayRateTrans.DocSeries) + ' ' + rpayRateTrans.DocNumber + ' ' + (rPayRateTrans.DocDate ? date2str(rPayRateTrans.DocDate, 123, 2, 2, 2, 2, 4, DateFlags::None) : '');
                excelDocument.insertValue(makeBookMark(page, 'AK', curRow), rateInfo);
                excelDocument.insertValue(makeBookMark(page, 'BB', curRow), rpayRateTrans.Notes);
            }

            excelDocument.insertValue(makeBookMark(page, 'BS', curRow), fundTotalAmount);
            excelDocument.insertValue(makeBookMark(page, 'CE', curRow), fundAmountMth1);
            excelDocument.insertValue(makeBookMark(page, 'CQ', curRow), fundAmountMth2);
            excelDocument.insertValue(makeBookMark(page, 'DC', curRow), fundAmountMth3);

            ++curRow;
            ++studentCount;

            fundTotalAmountTotal += fundTotalAmount;
            fundAmountMth1Total += fundAmountMth1;
            fundAmountMth2Total += fundAmountMth2;
            fundAmountMth3Total += fundAmountMth3;

            dataIterator.moveNext();
        } //while (dataIterator.more())

        excelDocument.insertValue(makeBookMark(page, 'BS', #TotalRow), fundTotalAmountTotal);
        excelDocument.insertValue(makeBookMark(page, 'CE', #TotalRow), fundAmountMth1Total);
        excelDocument.insertValue(makeBookMark(page, 'CQ', #TotalRow), fundAmountMth2Total);
        excelDocument.insertValue(makeBookMark(page, 'DC', #TotalRow), fundAmountMth3Total);

        excelDocument.deleteWorkSheet(pageNumber + 2);

        if (studentCount == 1)
        {
             excelDocument.deleteWorkSheet(pageNumber + 1);
             pageNumber -= 1;
             deletedWks += 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTitle</Name>
				<Source><![CDATA[
    private void fillTitle()
    {
        date companyRequisitesDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        System.Text.RegularExpressions.Regex cleaner = new System.Text.RegularExpressions.Regex('\\W');

        //removes all non-word characters, applies .net Regex.Replace fucntion to format string
        str format(str s, str pattern, str replacement)
        {
            return System.Text.RegularExpressions.Regex::Replace(cleaner.Replace(s,''), pattern, replacement);
        }

        #define.PFRLength(14)
        #define.INNLength(12)
        #define.KPPLength(9)
        #define.OGRNLength(15)
        #define.OKATOLength(11)
        #define.OKDPLength(8)
        #define.PhoneLength(15)
        #define.Sheet(1)

        #define.Space(' ')
        #define.Hyphen('-')

        progress.setText("@SYS16146");
        progress.incCount();

        this.fillRegularCells('DF9',              this.pageNum2str(), #CellSpace, #CellSpace, pageNumber);
        this.fillRegularCells('PFR',              format(companyInfo.PFRegNum_RU, '(...)(...)(.+)','$1 $2 $3'), #PFRLength, #CellSpace, #Sheet, true, '', false, #Space);

        this.fillRegularCells('CorrectionNum',    correcting ? 'XXX' : '000', 3, #CellSpace, #Sheet);
        this.fillPeriod();
        this.fillRegularCells('ReportPeriodYear', strFmt('%1', year(payYear)), 4, #CellSpace, #Sheet);

        excelDocument.insertValue('CompanyName',  strupr(companyInfo.Name));

        this.fillRegularCells('INN',              companyInfo.partyINNasOfDate_RU(companyRequisitesDate),                                      #INNLength,   #CellSpace, #Sheet, true, #Hyphen, true);
        this.fillRegularCells('KPP',              companyInfo.partyKPPasOfDate_RU(companyRequisitesDate),                                      #KPPLength,   #CellSpace, #Sheet);
        this.fillRegularCells('OGRN',             CompanyInfoHelper::partyOGRNasOfDate_RU(companyInfo, companyRequisitesDate),                                     #OGRNLength,  #CellSpace, #Sheet, true, #Hyphen, true);
        this.fillRegularCells('OKATO',            CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, companyRequisitesDate),                                    #OKATOLength, #CellSpace, #Sheet);
        this.fillRegularCells('OKDP',             format(CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, companyRequisitesDate), '(..)(..)(.+)','$1 $2 $3'),  #OKDPLength,  #CellSpace, #Sheet, true, '',      false, #Space);
        this.fillRegularCells('CompanyPhone',     companyInfo.Phone(),       #PhoneLength, #CellSpace, #Sheet);

        this.fillAddressInfo();
        this.fillRegularCells('EmplQty',          this.getEmplQtyByGroup(groupWorkers),  #QtyLength, #CellSpace, #Sheet, true, #Space);
        this.fillRegularCells('EmplQtyAvg',       this.getEmplQtyAvg(groupWorkers) ,     #QtyLength, #CellSpace, #Sheet, true, #Space);

        this.fillOfficials();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRate</Name>
				<Source><![CDATA[
    private RPayRateTrans findRate(RPayRateCode _payRateCode, RHRMEmplId _emplId, TransDate _transDate = periodEndDate)
    {
        TransDate               transDate = _transDate;
        RPayRateTrans           rPayRateTrans;

        do
        {
            rPayRateTrans = RPayRateTrans::find(_payRateCode, transDate, _emplId);

            if (! rPayRateTrans.RecId)
                break;

            transDate = rPayRateTrans.RateDate - 1;
        }
        while (! any2int(rPayRateTrans.RateValue));

        return rPayRateTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnDisRate</Name>
				<Source><![CDATA[
    private  TransDate findUnDisRate(RPayRateCode _payRateCode,
                                     RHRMEmplId       _emplId,
                                     TransDate    _startDate)
    {
        TransDate               transDate = _startDate;
        RPayRateTrans           rPayRateTrans;
        TransDate               currentPeriod, ret;
        boolean                 rateValue;

        if (rateTableDis.RateValueType == RPayRateValueType::CounterValue)
        {
            for (currentPeriod = dateEndMth(_startDate) + 1; currentPeriod <= periodEndDate; currentPeriod = endmth(nextMth(currentPeriod)))
            {
                rateValue = rateTableDis.getValue(RPayRateCallContext::construct(currentPeriod, _emplId)) == 0;
                if (rateValue)
                {
                    ret = dateEndMth(currentPeriod);
                    break;
                }
            }
        }
        else
        {
            select firstonly RateDate from rPayRateTrans order by RateDate asc
                 where rPayRateTrans.PayRate    == _payRateCode    &&
                       rPayRateTrans.RateDate   >  transDate       &&
                       rPayRateTrans.RateDate   <  periodEndDate   &&
                       rPayRateTrans.RateTypeAC == _emplId;

            ret = rPayRateTrans.RateDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplQtyAvg</Name>
				<Source><![CDATA[
    #define.RoundOffEmplQtyAvg(1.0)
    private str getEmplQtyAvg(RPayGroup _payGroup)
    {
        Query                   query;
        QueryBuildDataSource    qbds, qbdsGroupMember, qbdsFund, qbdsPerson, qbdsEmpl;
        QueryRun                queryRunQty;
        RPayAverageQuantity     rPayAverageQuantity;

        str                     strEmplQtyAvg;
        int                     roundDecimals;

        if (_payGroup)
        {
            query = new Query();
            qbds = query.addDataSource(tablenum(RPayAverageQuantity));

            qbds.addSelectionField(fieldnum(RPayAverageQuantity, AverageQty), SelectionField::Avg);
            qbds.addRange(fieldnum(RPayAverageQuantity, PayPeriod)).value(wholePeriod);
            qbds.addRange(fieldnum(RPayAverageQuantity, PayGroup)).value(_payGroup);
            qbdsGroupMember = qbds.addDataSource(tablenum(RPayGroupMember));
            qbdsGroupMember.addLink(fieldnum(RPayAverageQuantity, PayGroup), fieldnum(RPayGroupMember, PayGroup));
            if (RPayGroupTable::find(_payGroup).Type == RPayGroupType::Employee)
            {
                qbdsFund = qbdsGroupMember.addDataSource(tablenum(RPayFundEmplSum));
                qbdsFund.addLink(fieldnum(RPayGroupMember, PersonEmplId), fieldnum(RPayFundEmplSum, EmplId));
            }
            else
            {
                qbdsPerson = qbdsGroupMember.addDataSource(tableNum(RHRMPersonTable));
                qbdsPerson.addLink(fieldnum(RPayGroupMember, PersonEmplId), fieldnum(RHRMPersonTable, PersonnelNumber));
                qbdsPerson.addSelectionField(fieldNum(RHRMPersonTable, RecId));

                qbdsEmpl = qbdsPerson.addDataSource(tableNum(RHRMEmplTable));
                qbdsEmpl.addLink(fieldnum(RHRMPersonTable, RecId), fieldnum(RHRMEmplTable, RHRMPersonTable));
                qbdsEmpl.addRange(fieldNum(RHRMEmplTable, EmployeeId)).value(strFmt('(%1 == %2)',
                    fieldstr(RHRMEmplTable, PayMainEmplId),
                    fieldstr(RHRMEmplTable, EmployeeId)));

                qbdsFund = qbdsEmpl.addDataSource(tablenum(RPayFundEmplSum));
                qbdsFund.addLink(fieldnum(RHRMEmplTable, PayMainEmplId), fieldnum(RPayFundEmplSum, EmplId));
            }

            if (reportPeriod == RPayReportSocialTaxPeriod::Year || !correcting)
            {
                qbdsFund.addRange(fieldnum(RPayFundEmplSum, PayPeriod)).value(wholePeriod);
            }
            else
            {
                qbdsFund.addRange(fieldnum(RPayFundEmplSum, CorrectedPeriod)).value(wholePeriod);
            }

            queryRunQty = new QueryRun(query);
            queryRunQty.next();

            rPayAverageQuantity = queryRunQty.get(tablenum(RPayAverageQuantity));

            roundDecimals = strlen(int2str(real2int(1/#RoundOffEmplQtyAvg))) - 1;
            strEmplQtyAvg = num2str(round(rPayAverageQuantity.AverageQty, #RoundOffEmplQtyAvg), 1, roundDecimals, 1, 0);
        }

        return strEmplQtyAvg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplQtyByGroup</Name>
				<Source><![CDATA[
    private str getEmplQtyByGroup(RPayGroup _payGroup)
    {
        RPayGroupMember groupMember;
        RHRMEmplTable   emplTable;
        RHRMPersonTable personTable;
        RPayGroupTable  payGroupTable = RPayGroupTable::find(_payGroup);
        Set st = new Set(Types::String);

        boolean findHistory(RHRMEmplId _emplId)
        {
            RPayHistory payHistory, payHistoryDismiss;
            select firstonly recId from payHistory
                order by startDate desc, transTime desc
                where payHistory.Number        == _emplId &&
                     (payHistory.operationType == RHRMJournalType::Receive   ||
                      payHistory.operationType == RHRMJournalType::Transfer) &&
                      payHistory.StartDate     <= dateEndQtr(periodEndDate)
                notexists join payHistoryDismiss
                    where payHistoryDismiss.Number          == payHistory.Number        &&
                          payHistoryDismiss.operationType   == RHRMJournalType::Dismiss &&
                          payHistoryDismiss.StartDate       >= payHistory.StartDate     &&
                          payHistoryDismiss.StartDate       <  dateStartYr(payYear);

            return payHistory.RecId != 0;
        }

        void countMember(RPayPersonEmplId PersonEmplIdRate, RHRMEmplId emplIdHistory, str emplIdMain)
        {
            if (rateTableEmplQty.getValue(RPayRateCallContext::construct(dateEndQtr(periodEndDate), PersonEmplIdRate)) && findHistory(emplIdHistory))
            {
                st.add(emplIdMain);
            }
        }

        if (payGroupTable.Type == RPayGroupType::Employee)
        {
            while select PersonEmplId from groupMember
                where groupMember.PayGroup == _payGroup
                join EmployeeId, payMainEmplId from emplTable
                    where emplTable.EmployeeId == groupMember.PersonEmplId
            {
                countMember(groupMember.PersonEmplId, emplTable.EmployeeId, emplTable.PayMainEmplId);
            }
        }
        else
        {
            while select PersonEmplId from groupMember
                where groupMember.PayGroup == _payGroup
            join RecId from personTable
                where personTable.PersonnelNumber == groupMember.PersonEmplId
           join EmployeeId, payMainEmplId from emplTable
                where emplTable.RHRMPersonTable == personTable.RecId
            {
                countMember(groupMember.PersonEmplId, emplTable.EmployeeId, emplTable.PayMainEmplId);
            }
        }
        return int2str(st.elements());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean                 ret;
        date                    d;

        ret = super();

        if (ret)
        {
            responsibleId    = dfResponsibleId.value();
            officialsType    = dfOfficialsType.value();
            reportPeriod     = dfReportPeriod.value();
            payYear          = dfPayYear.value();
            correcting       = dfCorrecting.value();

            if (payYear == dateNull())
            {
                ret = checkFailed("@RUP2174");
            }
            else
            {
                periodEndDate = endmth(mkdate(1, reportPeriod * 3 + 3, year(payYear)));
            }

            if (ret && (periodEndDate <= 31\12\2004))
            {
                ret = checkFailed("@RUP1160");
            }
            else
            {
                d           = dateStartQtr(periodEndDate);
                wholePeriod = SysQuery::range(dateStartYr(d), dateEndQtr(d));
                month1      = SysQuery::range(d, endmth(d));
                mth1        = endmth(d);
                d           = nextmth(d);
                month2      = SysQuery::range(d, endmth(d));
                mth2        = endmth(d);
                d           = nextmth(d);
                month3      = SysQuery::range(d, endmth(d));
                mth3        = endmth(d);

                fromYearStart = SysQuery::range(dateStartYr(d), dateEndQtr(d));

                if (!correcting)
                {
                    beforeQuarter = SysQuery::range(dateStartYr(payYear), dateStartQtr(periodEndDate) - 1);
                    currentQuarter = SysQuery::range(dateStartQtr(periodEndDate), dateEndQtr(periodEndDate));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    protected RPayPFReportValueContract_RSV getValue(Bookmark _bookmark)
    {
        container  conValues, conValue;
        RPayPFReportValueContract_RSV retValue = new RPayPFReportValueContract_RSV();

        totalFundCommand.parmValue([_bookmark]);
        dataIterator = totalFundCommand.iterator();

        conValues = dataIterator.value();
        if (conValues)
        {
            conValue  = conpeek(conValues, 2);
            retValue.unpack(conValue);
        }
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected void initQuery()
    {
        Query q = new Query();

        q.addDataSource(tablenum(RHRMEmplTable));

        queryRun = new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidStartDate</Name>
				<Source><![CDATA[
    private TransDate invalidStartDate(RHRMEmplId _emplId, TransDate _transDate = datenull())
    {
        RPayRateTrans          rPayRateTrans;
        RPayRateCode           payRateCode;
        TransDate              currentPeriod;
        boolean                rateValue;

        payRateCode  = invalidRate;

        if (rateTableDis.RateValueType == RPayRateValueType::CounterValue)
        {
            for (currentPeriod = dateEndMth(dateStartYr(periodEndDate)); currentPeriod <= periodEndDate; currentPeriod = endmth(nextMth(currentPeriod)))
            {
                rateValue = rateTableDis.getValue(RPayRateCallContext::construct(currentPeriod, _emplId)) > 0;
                if (rateValue)
                {
                    return currentPeriod;
                }
            }
        }
        else
        {
            rPayRateTrans = this.rateTrans(payRateCode, _emplId, _transDate);

            if (rPayRateTrans.RecId)
            {
                return rPayRateTrans.RateDate;
            }
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    public boolean makeDocument()
    {
        excelDocument = new ComExcelDocument_RU();

        if (! excelDocument.newFile(RPayReportRSV1_2013::fullTemplateName(), false))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum2str</Name>
				<Source><![CDATA[
    private str pageNum2str()
    {
        int len;
        str tmpStr;
        #define.Mask('000')

        tmpStr = int2str(pageNumber);
        len    = strlen(tmpStr);
        tmpStr = #Mask + tmpStr;

        tmpStr = strdel(tmpStr, 1, len);

        return tmpStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    public container parmContract()
    {
        return parmContract.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    protected void prepareData()
    {
        this.checkAndPrepareParameters();

        parmContract = new RPayPFReportParmContract();
        parmContract.reportStartPeriod(dateStartYr(periodEndDate));
        parmContract.reportEndPeriod(periodEndDate);

        if (correcting)
        {
            parmContract.corrReportStartPeriod(dateStartYr(periodEndDate));
            parmContract.corrReportEndPeriod(periodEndDate);
        }

        parmContract.queryRun(queryRun.pack());

        reportData = RPayPFReportCtrl::construct(this);
        reportData.prepareData();

        totalFundCommand = new RPayPFReportCommandRSV_2013(reportData.reportData(), [#TotalAmountDS]);
        invalidsCommand  = new RPayPFReportCommandRSV_2013(reportData.reportData(), [#InvalidDS]);
        studentsCommand  = new RPayPFReportCommandRSV_2013(reportData.reportData(), [#StudentDS]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateTrans</Name>
				<Source><![CDATA[
    private RPayRateTrans rateTrans(RPayRateCode _rateCode, RHRMEmplId _emplId, TransDate _rateDate = dateNull())
    {
        RPayRateTrans          rPayRateTrans;

        if (prmisdefault(_rateDate))
        {
            rPayRateTrans = this.findRate(_rateCode, _emplId);
        }
        else
        {
            rPayRateTrans = this.findRate(_rateCode, _emplId, _rateDate);
        }

        if (rPayRateTrans.RecId)
        {
            return rPayRateTrans;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    public RPayPFReportCtrl reportData()
    {
        return new RPayPFReportCtrlRSV1_2013();
    }

]]></Source>
			</Method>
			<Method>
				<Name>round</Name>
				<Source><![CDATA[
    private RPayAmount round(RPayAmount _amount, RoundOff _round = 0)
    {
        if (rounding)
            return round(_amount, RPayRateTable::find(rounding).getValue(RPayRateCallContext::construct(periodEndDate)));

        if (_round)
            return round(_amount, _round);

        return _amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.makeDocument())
        {
            this.prepareData();
            this.fillDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer  version = conpeek(_packedClass,1);
        container packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RUP2988";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTemplateName</Name>
				<Source><![CDATA[
    public static str fullTemplateName()
    {
        resourceNode rn = SysResource::getResourceNode(resourceStr(RPayReportRSV1_2013));
        rn.AOTload();
        return SysResource::saveToTempFile(rn, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayReportRSV1_2013 report = new RPayReportRSV1_2013();

        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>