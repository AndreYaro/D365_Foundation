<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides activities and activity contexts for warehouse management instrumentation logging.
/// </summary>
internal final class WHSInstrumentationLogger implements SysInstrumentationILogger
{
    public const str InstrumentationNamespace = 'WarehouseManagement';
    
    private SysInstrumentationLogger instrumentationLogger;

    private static Map loggers;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(str _name, WHSInstrumentationDisabledByDefaultToggle _toggle)
    {
        if (_toggle
            && !_toggle.isEnabled())
        {
            instrumentationLogger = SysInstrumentationLogger::Construct(null);
        }
        else
        {
            instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(_name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activity</Name>
				<Source><![CDATA[
    public final SysInstrumentationActivity activity(str _activityName)
    {
        // 2nd parameter, _metricNamespace, is only applicable for Geneva
        // Building up the full namespace as part of ActivityType that will be available in Kusto in TraceEvents
        return SysInstrumentationActivity::construct(InstrumentationNamespace + '.' + _activityName, WHSInstrumentationLogger::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityContext</Name>
				<Source><![CDATA[
    public final SysInstrumentationActivityContext activityContext(SysInstrumentationActivity _activity)
    {
        return instrumentationLogger.activityContextWithCustomProperties(_activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRecordInformation</Name>
				<Source><![CDATA[
    internal final void logRecordInformation(Common _common)
    {
        instrumentationLogger.logInformation(strFmt('%1.RecId:%2', tableId2Name(_common.TableId), _common.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentStackTrace</Name>
				<Source><![CDATA[
    internal static str currentStackTrace(boolean _force = false)
    {
        boolean mustLogStackTrace = WHSInstrumentationLoggerStackTraceFlight::instance().isEnabled();

        if (_force || mustLogStackTrace)
        {
            var stackTrace = new System.Diagnostics.StackTrace(false);
            return stackTrace.ToString();
        }

        return 'Excluded for performance reasons';
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCallStack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the current call stack.
    /// </summary>
    /// <remarks>Only use in failure scenarios, as building the call stack is time consuming.</remarks>
    internal final void logCallStack()
    {
        instrumentationLogger.logInformation(strFmt('CallStack:%1', WHSInstrumentationLogger::currentStackTrace()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWarning</Name>
				<Source><![CDATA[
    internal final SysInstrumentationLogger logWarning(str _message)
    {
        instrumentationLogger.logWarning(_message);

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    public final SysInstrumentationLogger logInformation(str _message)
    {
        instrumentationLogger.logInformation(_message);

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    internal final SysInstrumentationLogger logError(str _message)
    {
        instrumentationLogger.logError(_message);

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAttributeValueInformation</Name>
				<Source><![CDATA[
    internal final void logAttributeValueInformation(Map _information)
    {
        var serializedInformation = new SysInstrumentationEventDataJsonSerializer();

        var parametersEnumerator = _information.getEnumerator();
        while (parametersEnumerator.moveNext())
        {
            serializedInformation.setValue(parametersEnumerator.currentKey(), parametersEnumerator.currentValue());
        }

        instrumentationLogger.logInformation(serializedInformation.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    internal final SysInstrumentationLogger logger()
    {
        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>properties</Name>
				<Source><![CDATA[
    internal final WHSInstrumentationLoggerProperties properties()
    {
        return WHSInstrumentationLoggerProperties::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    internal final boolean isEnabled()
    {
        return this.logger().getLogger() != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogger</Name>
				<Source><![CDATA[
    internal static WHSInstrumentationLogger createLogger(str _name)
    {
        return new WHSInstrumentationLogger(_name, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoggerForTable</Name>
				<Source><![CDATA[
    internal static WHSInstrumentationLogger createLoggerForTable(Common _common)
    {
        return new WHSInstrumentationLogger(tableId2Name(_common.TableId), null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDisabledByDefaultLogger</Name>
				<Source><![CDATA[
    internal static WHSInstrumentationLogger createDisabledByDefaultLogger(str _name, WHSInstrumentationDisabledByDefaultToggle _toggle)
    {
        return new WHSInstrumentationLogger(_name, _toggle);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or creates an instance of <c>WHSInstrumentationLogger</c> class.
    /// </summary>
    /// <param name = "_sourceName">Source for the logs.</param>
    /// <returns>An instance of the logger class.</returns>
    [Hookable(false)]
    internal static WHSInstrumentationLogger instance(str _sourceName)
    {
        if (!loggers)
        {
            loggers = new Map(Types::String, Types::Class); // Lazy initialization
        }

        if (!_sourceName)
        {
            _sourceName = InstrumentationNamespace; // Default source name
        }

        if (loggers.exists(_sourceName))
        {
            return loggers.lookup(_sourceName) as WHSInstrumentationLogger;
        }

        var logger = WHSInstrumentationLogger::createLogger(_sourceName);
        loggers.insert(_sourceName, logger);

        return logger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>