<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DeliverySlipTotals_DeliverySlip_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for calculating the totals for delivery slip taxes extends DeliverySlipTotals_BR class.
/// </summary>
abstract class  DeliverySlipTotals_DeliverySlip_BR extends DeliverySlipTotals_BR
{
    SalesTable          salesTable;
    SalesUpdate         specQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines discount code in sales record.
    /// </summary>
    /// <returns>
    /// Discount code.
    /// </returns>
    public CashDiscCode cashDiscCode()
    {
        return salesTable.CashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines discount percentage in sales record.
    /// </summary>
    /// <returns>
    /// Discount percentage.
    /// </returns>
    public DiscPct cashDiscPercent()
    {
        return salesTable.CashDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines currency code in sales record.
    /// </summary>
    /// <returns>
    /// Currency code.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return salesTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines exchange rate date based on type of exchange rate date in sales record.
    /// </summary>
    /// <returns>
    /// Exchange rate date.
    /// </returns>
    public ExchRate exchRate()
    {
        return salesTable.exchRate(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines exchange rate date based on type of exchange rate date in sales record.
    /// </summary>
    /// <returns>
    /// Exchange rate date.
    /// </returns>
    public ExchrateSecondary exchRateSecondary()
    {
        return salesTable.exchRateSecondary(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the <c>InvoiceAccount</c> field of the current order line.
    /// </summary>
    /// <returns>
    /// The value of the <c>InvoiceAccount</c> field of the current order line.
    /// </returns>
    protected CustAccount  invoiceAccount()
    {
        return salesTable.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intialize the current instance of  <c>DeliverySlipTotals_DeliverySlip_BR</c> object
    /// </summary>
    /// <param name="_salesTable">
    /// SalesTable record is set
    /// </param>
    /// <param name="_specQty">
    /// SalesUpdate quantity is set.
    /// </param>
    void new(SalesTable     _salesTable,
             SalesUpdate    _specQty)

    {
        super(_salesTable);

        salesTable  = _salesTable;
        specQty     = _specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxAmountCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to calculate tax amount for the type of sales.
    /// </summary>
    public void prepareTaxAmountCalculation()
    {
        super();

        // Project Accounting will calculate the taxes
        if (salesTable.SalesType == SalesType::ItemReq)
        {
            calculateTaxAmount = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines euro triangulation date in sales record.
    /// </summary>
    /// <returns>
    /// Euro triangulation date.
    /// </returns>
    public EUROTriangulation  triangulation()
    {
        return salesTable.euroTriangulation(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>DeliverySlipTotals_Parm_BR</c> class.
    /// </summary>
    /// <param name="_orderTable">
    /// Record is set.
    /// </param>
    /// <param name="_specQty">
    /// Quantity value is set.
    /// </param>
    /// <param name="_sumBy">
    /// AccountOrder value is set.
    /// </param>
    /// <param name="_parmId">
    /// ParmId value is set.
    /// </param>
    /// <param name="_sumSalesId">
    /// SalesId value is set.
    /// </param>
    /// <param name="_documentStatus">
    /// DocumentStatus value is set.
    /// </param>
    /// <returns>
    /// An instance of the <c>DeliverySlipTotals_Parm_BR</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static DeliverySlipTotals_DeliverySlip_BR construct(Common           _orderTable,
                                                        SalesUpdate      _specQty       = SalesUpdate::All,
                                                        AccountOrder     _sumBy         = AccountOrder::None,
                                                        ParmId           _parmId        = '',
                                                        SalesId          _sumSalesId    = '',
                                                        DocumentStatus   _documentStatus= DocumentStatus::None)
    {
        return new DeliverySlipTotals_Parm_BR(_orderTable, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>