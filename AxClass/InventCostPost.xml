<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostPost</c> class is used to post inventory cost transactions.
/// </summary>
/// <remarks>
///    This class posts the variances related to inventory cost transactions.When this class is changed,
///    make sure to check the corresponding logic in the <c>InventAdjustPostCancel</c> class.
/// </remarks>
public class InventCostPost
{
    // Parameters
    LedgerVoucher               ledgerVoucher;
    InventCostTransList         inventCostTransList;
    InventCostTransVarianceMap  inventCostTransVarianceMap;
    InventAdjustmentSpec        inventAdjustmentSpec;
    InventTable                 inventTable;
    InventTransCurrency_RU      inventTransCurrency;

    #ISOcountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRoundingVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an inventory cost variance buffer with a rounding variance.
    /// </summary>
    /// <param name="_costTrans">
    ///    The cost transaction.
    /// </param>
    /// <param name="_costAmount">
    ///    The rounding variance.
    /// </param>
    /// <param name="_costAmountSecCur">
    ///    The rounding variance in reporting currency.
    /// </param>
    /// <returns>
    ///    An inventory cost variance buffer.
    /// </returns>
    protected InventCostTransVariance createRoundingVariance(
        InventCostTrans     _costTrans,
        CostAmount          _costAmount,
        CostAmountSecCur_RU _costAmountSecCur)
    {
        InventCostTransVariance     variance;
        // <GEERU>
        boolean                     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        variance.initFromInventCostTrans(_costTrans);
        variance.VarianceType               = InventCostVarianceType::Rounding;
        variance.CostAmountPosted           = _costAmount;
        // <GEERU>
        if (countryRegion_RU)
        {
            variance.CostAmountPostedSecCur_RU  = _costAmountSecCur;
        }
        // </GEERU>

        return variance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostVarianceType2InventAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a variance type to an inventory account type.
    /// </summary>
    /// <param name="_varianceType">
    ///    The variance type.
    /// </param>
    /// <returns>
    ///    An inventory account type.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The variance type cannot be converted to an inventory account type.
    /// </exception>
    protected InventAccountType inventCostVarianceType2InventAccountType(InventCostVarianceType _varianceType)
    {
        switch (_varianceType)
        {
            case InventCostVarianceType::CostChange:
                return InventAccountType::InventStdCostChangeVariance;

            case InventCostVarianceType::LotSize:
                return InventAccountType::ProdStdCostLotSizeVariance;

            case InventCostVarianceType::ProdPrice:
                return InventAccountType::ProdStdCostProductionVariance;

            case InventCostVarianceType::PurchPrice:
                return InventAccountType::PurchStdCostPurchasePriceVariance;

            case InventCostVarianceType::Quantity:
                return InventAccountType::ProdStdCostQuantityVariance;

            case InventCostVarianceType::Revaluation:
                return InventAccountType::InventStdCostRevaluation;

            case InventCostVarianceType::Substitution:
                return InventAccountType::ProdStdCostSubstitutionVariance;

            case InventCostVarianceType::Rounding:
                return InventAccountType::InventStdCostRoundingVariance;
        }
        throw error(strFmt("@SYS12580", _varianceType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventAdjustmentSpec</Name>
				<Source><![CDATA[
    public InventAdjustmentSpec parmInventAdjustmentSpec(InventAdjustmentSpec _inventAdjustmentSpec = inventAdjustmentSpec)
    {
        inventAdjustmentSpec = _inventAdjustmentSpec;

        return inventAdjustmentSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventCostTransList</Name>
				<Source><![CDATA[
    public InventCostTransList parmInventCostTransList(InventCostTransList _inventCostTransList = inventCostTransList)
    {
        inventCostTransList = _inventCostTransList;

        return inventCostTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventCostTransVarianceMap</Name>
				<Source><![CDATA[
    public InventCostTransVarianceMap parmInventCostTransVarianceMap(InventCostTransVarianceMap _inventCostTransVarianceMap = inventCostTransVarianceMap)
    {
        inventCostTransVarianceMap = _inventCostTransVarianceMap;

        return inventCostTransVarianceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency_RU</Name>
				<Source><![CDATA[
    public InventTransCurrency_RU parmInventTransCurrency_RU(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;
        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmLedgerVoucher(LedgerVoucher _ledgerVoucher = ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts variances related to an inventory cost transaction.
    /// </summary>
    /// <param name="_costTrans">
    ///    The inventory cost transaction.
    /// </param>
    protected void postInventCostTrans(InventCostTrans _costTrans)
    {
        // Composit key for looking up the values

        if (inventCostTransVarianceMap)
        {
            str lookupKey = InventCostTransVarianceMap::buildKey(_costTrans);

            if (inventCostTransVarianceMap.exists(lookupKey))
            {
                RecId inventAdjustmentSpecRecId = InventAdjustPost::inventAdjustmentSpecRecId(inventAdjustmentSpec, inventTable);
                // Ok, there exists a recordSortedLst for this key.
                InventCostTransVarianceList varianceList = inventCostTransVarianceMap.lookup(lookupKey);
                this.postInventCostTransVarianceList(_costTrans, varianceList, inventAdjustmentSpecRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventCostTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the list of inventory cost transaction.
    /// </summary>
    protected void postInventCostTransList()
    {
        InventCostTrans     costTrans;

        boolean found = inventCostTransList.first(costTrans);
        while (found)
        {
            this.postInventCostTrans(costTrans);
            found = inventCostTransList.next(costTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventCostTransVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts an inventory cost variance.
    /// </summary>
    /// <param name="_costTrans">
    ///    The inventory cost transaction.
    /// </param>
    /// <param name="_variance">
    ///    The inventory variance.
    /// </param>
    /// <param name="_inventAdjustmentSpecRecId">
    ///    The inventory adjustment specification record id.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The variance is posted.
    /// </exception>
    protected void postInventCostTransVariance(
        InventCostTrans             _costTrans,
        InventCostTransVariance     _variance,
        RecId                       _inventAdjustmentSpecRecId)
    {
        // <GEERU>
        boolean                     ok;
        boolean                     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        RecId                       inventAdjustmentSpecRecId;

        // <GEERU>
        if (countryRegion_RU)
        {
            ok = true;
        }
        // </GEERU>
        if (_variance.IsPosted)
        {
            throw error(strFmt("@SYS22828",funcName()));
        }

        if (ledgerVoucher.parmCustomDetailLevel())
        {
            inventAdjustmentSpecRecId = InventAdjustPost::inventAdjustmentSpecRecId(inventAdjustmentSpec, inventTable);
        }

        _variance.Posting = InventPosting::accountType2LedgerPostingType(this.inventCostVarianceType2InventAccountType(_variance.VarianceType));
        _variance.PostingOffset = InventPosting::accountType2LedgerPostingType(InventAccountType::InventStdCostRoundingVariance);
        
        this.initializeInventCostTransVarianceFromInventCostTrans(_variance, _costTrans);

        // <GEERU>
        if ((countryRegion_RU
            && inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
            || ! countryRegion_RU)
        {
        // </GEERU>
            _variance.CostAmountPosted += CurrencyExchangeHelper::amount(_variance.CostAmount);
        // <GEERU>
            if (countryRegion_RU)
            {
                _variance.CostAmountSecCur_RU = 0;
            }
        }
        else
        {
            _variance.CostAmount                =  0;
            _variance.CostAmountPostedSecCur_RU += CurrencyExchangeHelper::amount(_variance.CostAmountSecCur_RU, CompanyInfoHelper::secondaryCurrency_RU());
        }
        // </GEERU>
        _variance.IsPosted = NoYes::Yes;

        // save the original "last" reference number + accounting date
        TransDate lastAccountingDate = ledgerVoucher.lastTransDate();
        Voucher lastReferenceNumber = ledgerVoucher.lastVoucher();

        LedgerVoucherObject ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject(_costTrans.Voucher, _costTrans.TransDate);

        if (ledgerVoucherObject == null)
        {
            // create a new ledger posting reference for the reference number + accounting date
            ledgerVoucherObject =
                LedgerVoucherObject::newVoucher(_costTrans.Voucher, _costTrans.TransDate, ledgerVoucher.parmSysModuleDefault());

            ledgerVoucher.addVoucher(ledgerVoucherObject);
        }

        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        // <GEERU>
        if ((countryRegion_RU
            && _variance.CostAmountPosted)
            || ! countryRegion_RU)
        {
        // </GEERU>

            LedgerVoucherTransObject ledgerVoucherTransObject;
            ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createLedgerVoucherTransObject(
                                        ledgerVoucherObject,
                                        _variance.Posting,
                                        _variance.LedgerDimension,
                                        CompanyInfoHelper::standardCurrency(),
                                        _variance.CostAmountPosted,
                                        exchangeRateHelper);

            ledgerVoucherTransObject.parmSourceRecId(inventAdjustmentSpecRecId);
            ledgerVoucherTransObject.parmCustomTransferLevel(_inventAdjustmentSpecRecId);

            if (_variance.VarianceType == InventCostVarianceType::Revaluation)
            {
                ledgerVoucherTransObject.parmSkipDimensionValidation(true);
            }

            ok = ledgerVoucher.addTrans(ledgerVoucherTransObject);

            // Offset of rounding must use dimensions of transaction instead
            ledgerVoucherTransObject = InventoryReportingCurrencyTriangulationHelper::createLedgerVoucherTransObject(
                                        ledgerVoucherObject,
                                        _variance.PostingOffset,
                                        _variance.OffsetLedgerDimension,
                                        CompanyInfoHelper::standardCurrency(),
                                        -_variance.CostAmountPosted,
                                        exchangeRateHelper);

            ledgerVoucherTransObject.parmSourceRecId(inventAdjustmentSpecRecId);
            ledgerVoucherTransObject.parmCustomTransferLevel(_inventAdjustmentSpecRecId);

            if (_variance.VarianceType == InventCostVarianceType::Revaluation)
            {
                ledgerVoucherTransObject.parmSkipDimensionValidation(true);
            }

            ok = ledgerVoucher.addTrans(ledgerVoucherTransObject) && ok;

        // <GEERU>
        }

        if (countryRegion_RU && ok)
        {
            LedgerBondClient_RU ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();
            if (ledgerBondClient && _variance.CostAmountPosted)
            {
                ledgerBondClient.bondLast2();
            }
        }
        // </GEERU>
        if (!ok)
        {
            throw error("@SYS21533");
        }

        // reset the original "last" reference number + accounting date to maintain backward compatibility
        ledgerVoucher.lastTransDate(lastAccountingDate);
        ledgerVoucher.lastVoucher(lastReferenceNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventCostTransVarianceFromInventCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventCostTrans</c> record from the specified <c>InventCostTransVariance</c> record.
    /// </summary>
    /// <param name="_variance">The inventory variance.</param>
    /// <param name="_costTrans">The inventory cost transaction.</param>
    protected void initializeInventCostTransVarianceFromInventCostTrans(
        InventCostTransVariance _variance,
        InventCostTrans         _costTrans)
    {
        if (InventPostingExtendParm_CN::checkExtendParmEnabled())
        {
            _variance.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(InventPosting::costItemExtendParm_CN(this.inventCostVarianceType2InventAccountType(_variance.VarianceType), InventPostingExtendParm_CN::constructInventDim(InventDim::find(_costTrans.FinancialInventDimId)), _variance.CostGroupId, _costTrans.ItemId), _variance.DefaultDimension);
            _variance.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(InventPosting::costItemExtendParm_CN(InventAccountType::InventStdCostRoundingVariance, InventPostingExtendParm_CN::constructInventDim(InventDim::find(_costTrans.FinancialInventDimId)), _variance.CostGroupId, _costTrans.ItemId), _costTrans.DefaultDimension);
        }
        else
        {
            InventPostingCostItemLedgerDimensionParameters searchParameters = this.buildCostItemLedgerDimensionParameter(this.inventCostVarianceType2InventAccountType(_variance.VarianceType), _variance, _costTrans);
            _variance.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(InventPosting::costItemLedgerDimensionFromParameter(searchParameters), _variance.DefaultDimension);
            
            searchParameters = this.buildCostItemLedgerDimensionParameter(InventAccountType::InventStdCostRoundingVariance, _variance, _costTrans);
            _variance.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(InventPosting::costItemLedgerDimensionFromParameter(searchParameters), _costTrans.DefaultDimension);   // Offset of rounding must use dimensions of transaction instead
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCostItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting cost ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <param name="_variance">The inventory variance.</param>
    /// <param name="_costTrans">The inventory cost transaction.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingCostItemLedgerDimensionParameters buildCostItemLedgerDimensionParameter(
        InventAccountType       _inventAccountType, 
        InventCostTransVariance _variance,
        InventCostTrans         _costTrans)
    {
        return InventPostingCostItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType, 
            _variance.CostGroupId, 
            _costTrans.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventCostTransVarianceList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts an inventory variance list.
    /// </summary>
    /// <param name="_costTrans">
    ///    The inventory cost transaction.
    /// </param>
    /// <param name="_varianceList">
    ///    The inventory variance list.
    /// </param>
    /// <param name="_inventAdjustmentSpecRecId">
    ///    The inventory adjustment specification record id.
    /// </param>

    protected void postInventCostTransVarianceList(
        InventCostTrans             _costTrans,
        InventCostTransVarianceList _varianceList,
        RecId                       _inventAdjustmentSpecRecId)
    {
        InventCostTransVariance variance;
        boolean                 found;
        CostAmount              costAmount;
        CostAmount              costAmountPosted;
        CostAmount              rounding;
        // <GEERU>
        CostAmount              costAmountSecCur;
        CostAmount              costAmountPostedSecCur;
        CostAmount              roundingSecCur;
        boolean                 countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        found = _varianceList.first(variance);
        while (found)
        {
            // When changes are made in this selection, please update the inventAdjustPostCancel.updateProduction method as well.
            if (variance.mustPost())
            {
                this.postInventCostTransVariance(_costTrans, variance, _inventAdjustmentSpecRecId);
                // Update the list
                _varianceList.insert(variance);
                costAmount += variance.CostAmount;
                costAmountPosted += variance.CostAmountPosted;
                // <GEERU>
                if (countryRegion_RU)
                {
                    costAmountSecCur       += variance.CostAmountSecCur_RU;
                    costAmountPostedSecCur += variance.CostAmountPostedSecCur_RU;
                }
                // </GEERU>
            }
            found = _varianceList.next(variance);
        }

        rounding = CurrencyExchangeHelper::amount(costAmount) - costAmountPosted;
        // <GEERU>
        if (countryRegion_RU)
        {
            roundingSecCur = CurrencyExchangeHelper::amount(costAmountSecCur, CompanyInfoHelper::standardCurrency()) - costAmountPostedSecCur;
        }
        // </GEERU>

        // <GEERU>
        if (rounding || (countryRegion_RU && roundingSecCur))
        // </GEERU>
        {
            // <GEERU>
            variance = this.createRoundingVariance(_costTrans, rounding, roundingSecCur);
            // </GEERU>
            this.postInventCostTransVariance(_costTrans, variance, _inventAdjustmentSpecRecId);
            _varianceList.insert(variance);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts variances related to a list of inventory cost transactions.
    /// </summary>
    /// <remarks>
    ///    The map of variances is updated with posting information.
    /// </remarks>
    public void updateNow()
    {
        this.postInventCostTransList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostPost construct()
    {
        return new InventCostPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts variances related to a list of inventory cost transactions.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher.
    /// </param>
    /// <param name="_inventTable">
    ///    An InventTable buffer.
    /// </param>
    /// <param name="_inventCostTransList">
    ///    The list of inventory cost transactions.
    /// </param>
    /// <param name="_inventCostTransVarianceMap">
    ///    The map with the variances related to the list of inventory cost transactions.
    /// </param>
    /// <param name="_inventAdjustmentSpec">
    ///    Specifies how the adjustment is summarized in general ledger. The default is total.
    /// </param>
    /// <param name="_inventTransCurrency">
    ///    Currency type of the operation. The default is primary currency, variant is reporting currency.
    /// </param>
    public static void post(LedgerVoucher               _ledgerVoucher,
                            InventTable                 _inventTable,
                            InventCostTransList         _inventCostTransList,
                            InventCostTransVarianceMap  _inventCostTransVarianceMap,
                            InventAdjustmentSpec        _inventAdjustmentSpec = InventAdjustmentSpec::Total,
                            InventTransCurrency_RU      _inventTransCurrency  = InventTransCurrency_RU::PrimaryCur)
    {
        InventCostPost      inventCostPost = InventCostPost::construct();
        // <GEERU>
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        inventCostPost.parmLedgerVoucher(_ledgerVoucher);
        inventCostPost.parmInventTable(_inventTable);
        inventCostPost.parmInventCostTransList(_inventCostTransList);
        inventCostPost.parmInventCostTransVarianceMap(_inventCostTransVarianceMap);
        inventCostPost.parmInventAdjustmentSpec(_inventAdjustmentSpec);
        // <GEERU>
        if (countryRegion_RU)
        {
            inventCostPost.parmInventTransCurrency_RU(_inventTransCurrency);
        }
        // </GEERU>
        inventCostPost.updateNow();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>