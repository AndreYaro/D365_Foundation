<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCountingControllerCZLT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCountingControllerCZLT</c> class is the controller for the <c>AssetCountingCZLT</c> report.
/// </summary>
public class AssetCountingControllerCZLT extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modifies the contract before the dialog is shown to the user.
    /// </summary>
    protected void prePromptModifyContract()
    {
        AssetCountingContractCZLT contract;
        TransDate                 transDate;

        super();

        contract = this.parmReportContract().parmRdpContract() as AssetCountingContractCZLT;
        transDate = contract.parmTransDate();
        if (!transDate)
        {
            contract.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        AssetCountingContractCZLT contract;
        HcmWorkerRecId            commission1;
        HcmWorkerRecId            commission2;
        HcmWorkerRecId            commission3;
        HcmWorkerRecId            commission4;
        HcmWorkerRecId            commission5;
        AssetBookId               valueModel;
        AssetLocationId           location;
        TransDate                 transDate;
        HcmResponsibleRecId       responsible;
        Query                     query;

        contract = this.parmReportContract().parmRdpContract() as AssetCountingContractCZLT;
        if (contract)
        {
            // Lookup values of commission members in the <c>HcmWorker</c> table and populate the corresponding
            //name parameters accordingly
            commission1 = contract.parmCommission1();
            if (commission1)
            {
                contract.parmCommissionName1(strFmt("@SYS76498", HcmWorker::worker2ProfessionalTitle(commission1),HcmWorker::worker2Name(commission1)));
            }

            commission2 = contract.parmCommission2();
            if (commission2)
            {
                contract.parmCommissionName2(strFmt("@SYS76498", HcmWorker::worker2ProfessionalTitle(commission2),HcmWorker::worker2Name(commission2)));
            }

            commission3 = contract.parmCommission3();
            if (commission3)
            {
                contract.parmCommissionName3(strFmt("@SYS76498", HcmWorker::worker2ProfessionalTitle(commission3),HcmWorker::worker2Name(commission3)));
            }

            commission4 = contract.parmCommission4();
            if (commission4)
            {
                contract.parmCommissionName4(strFmt("@SYS76498", HcmWorker::worker2ProfessionalTitle(commission4),HcmWorker::worker2Name(commission4)));
            }

            commission5 = contract.parmCommission5();
            if (commission5)
            {
                contract.parmCommissionName5(strFmt("@SYS76498", HcmWorker::worker2ProfessionalTitle(commission5),HcmWorker::worker2Name(commission5)));
            }

            contract.parmLanguageId(currentUserLanguage());

            valueModel = contract.parmValueModel();
            transDate = contract.parmTransDate();
            location = contract.parmLocation();
            responsible = contract.parmResponsible();
            if (responsible)
            {
                contract.parmResponsiblePerson(strFmt("@SYS76498", HcmWorker::worker2ProfessionalTitle(responsible), HcmWorker::worker2Name(responsible)));
            }

            // Create or update the existing ranges with values provided by the user via the report
            //static parameters
            query = this.getFirstQuery();

            //AssetTable ranges
            if (location)
            {
                findOrCreateRange_W(query.dataSourceTable(tableNum(AssetTable)),fieldNum(AssetTable, Location), location);
            }
            if (responsible)
            {
                findOrCreateRange_W(query.dataSourceTable(tableNum(AssetTable)),fieldNum(AssetTable, WorkerResponsible), queryValue(responsible));
            }

            //AssetBook ranges
            findOrCreateRange_W(query.dataSourceTable(tableNum(AssetBook)),fieldNum(AssetBook, Status),SysQuery::valueNot(AssetStatus::NoAcquisition));
            findOrCreateRange_W(query.dataSourceTable(tableNum(AssetBook)),fieldNum(AssetBook, BookId), valueModel);

            //AssetTrans ranges
            findOrCreateRange_W(query.dataSourceTable(tableNum(AssetTrans)),fieldNum(AssetTrans, TransType), queryValue(AssetTransType::Acquisition));
            findOrCreateRange_W(query.dataSourceTable(tableNum(AssetTrans)),fieldNum(AssetTrans, TransDate), strfmt('.. %1', transDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        #isoCountryRegionCodes

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00020, funcName());
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoCZ, GlobalizationConstants::FeatureReferenceCZ00021] ],
            funcName()
        );

        AssetCountingControllerCZLT controller = new AssetCountingControllerCZLT();
        controller.parmReportName(ssrsReportStr(AssetCountingCZLT, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>