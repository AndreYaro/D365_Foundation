<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlCopyErrorWarningResultsProc</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlCopyErrorWarningResultsProc</c> is a budget control stored procedure.
/// </summary>
[ExportMetadata(enumStr(BudgetControlSQLObjectType), BudgetControlSQLObjectType::StoredProcedure),
 ExportAttribute(identifierstr(Dynamics.AX.Application.BudgetControlISQLObject))]
internal final class BudgetControlCopyErrorWarningResultsProc implements BudgetControlISQLObject
{
    private const str procName = 'BudgetControlCopyErrorWarningResultsProc';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public str getName()
    {
        return procName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinition</Name>
				<Source><![CDATA[
    public str getDefinition()
    {
        str sqlStatementText;

        sqlStatementText = @"
    CREATE PROCEDURE [BudgetControlCopyErrorWarningResultsProc]
    (
         @PartitionId           BIGINT
        ,@BudgetSourceArray     VARCHAR(4000) -- 100 positions with a position size of 40 each
        ,@IsOpenTranRequired    INT = 1
        ,@logErrorFl            CHAR(1) = 'Y'
    )

    AS

    SET NOCOUNT ON;

    CREATE TABLE #BudgetSourceToFromPair
        ([FromID]                               BIGINT
        ,[ToID]                                 BIGINT
        )
    ;

    DECLARE  @SPName                            VARCHAR(126) = OBJECT_NAME(@@PROCID) -- the name of the stored proc
            ,@RetCode                           INT = 0
            ,@ErrorTrying                       VARCHAR(80) -- string describing command that failed
            ,@Error_Number                      INT -- from ERROR_NUMBER()
            ,@Error_Line                        INT -- from ERROR_LINE()
            ,@Error_State                       INT = 1 -- from ERROR_STATE()
            ,@Error_Severity                    INT = 16 -- from ERROR_SEVERITY()
            ,@Error_Procedure                   NVARCHAR(126) = OBJECT_NAME(@@PROCID) -- from ERROR_PROCEDURE()
            ,@ErrorMessage                      NVARCHAR(4000) = N'' -- from ERROR_MESSAGE()
            ,@extendedErrorFl                   CHAR(1) = 'Y'
            ,@TranCount                         INT

            ,@BudgetSourceArrayLength           INT
            ,@BudgetSourceArrayIndex            INT = 0
            ,@BudgetSourceArrayMemberLength      INT = 40 -- Total length of a single array position

            ,@FromBudgetSourceStart             INT = 1
            ,@FromBudgetSourceLength            INT = 20
            ,@ToBudgetSourceStart               INT = 21
            ,@ToBudgetSourceLength              INT = 20
    ;

    -- Check that a transaction is open
    SELECT @TranCount = @@TRANCOUNT;

    IF @IsOpenTranRequired = 1
    AND @TranCount = 0
      BEGIN
        SELECT @ErrorTrying = N'Cannot execute without an open transaction, @@TRANCOUNT=0';
        GOTO lblErrorTrap;
      END;

    -- Check that the passed in parameter is of the correct size
    SELECT @BudgetSourceArrayLength = LEN(@BudgetSourceArray);

    IF @BudgetSourceArrayLength = 0
    OR @BudgetSourceArrayLength % @BudgetSourceArrayMemberLength > 0
      BEGIN
        SELECT @ErrorTrying = N'@BudgetSourceArrayLength length must be a multiple of '
                            + CAST(@BudgetSourceArrayMemberLength AS NVARCHAR)
                            + N', actual length=' + CAST(@BudgetSourceArrayLength AS NVARCHAR);
        GOTO lblErrorTrap;
      END;

    BEGIN TRY
        WHILE @BudgetSourceArrayIndex < @BudgetSourceArrayLength
          BEGIN
            Insert INTO #BudgetSourceToFromPair
                (
                    [FromID]
                    ,[ToID]
                )
                SELECT
                     CAST(SUBSTRING(@BudgetSourceArray, @BudgetSourceArrayIndex + @FromBudgetSourceStart, @FromBudgetSourceLength) AS BIGINT)
                     ,CAST(SUBSTRING(@BudgetSourceArray, @BudgetSourceArrayIndex + @ToBudgetSourceStart, @ToBudgetSourceLength) AS BIGINT);

            SELECT @BudgetSourceArrayIndex = @BudgetSourceArrayIndex + @BudgetSourceArrayMemberLength;
          END;
    END TRY
    BEGIN CATCH
        SELECT @ErrorTrying = N'INSERT INTO BudgetSourceToFromPair failed at @BudgetSourceArrayIndex='
                            + CAST(@BudgetSourceArrayIndex AS NVARCHAR(20));

        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH;

    BEGIN TRY
        Insert INTO [BUDGETCHECKRESULTERRORWARNINGDETAIL]
            (       [BUDGETSOURCE]
                    ,[PRIMARYLEDGER]
                    ,[BUDGETCONTROLLEDGERDIMENSION]
                    ,[ACCOUNTINGCURRENCYAMOUNTOVERTHRESHOLD]
                    ,[ACCOUNTINGCURRENCYAMOUNTOVERAVAILABLE]
                    ,[SEQUENCENUMBER]
                    ,[BUDGETSOURCELEDGERDIMENSION]
                    ,[BUDGETGROUPMEMBER]
                    ,[CHECKRESULT]
                    ,[CHECKRESULTERRORWARNINGTYPE]
                    ,[CHECKRESULTERRORWARNING]
                    ,[PARTITION]
            )
            SELECT
                    budgetSourcePair.[ToID]
                    ,fromBCREWD.[PRIMARYLEDGER]
                    ,fromBCREWD.[BUDGETCONTROLLEDGERDIMENSION]
                    ,fromBCREWD.[ACCOUNTINGCURRENCYAMOUNTOVERTHRESHOLD]
                    ,fromBCREWD.[ACCOUNTINGCURRENCYAMOUNTOVERAVAILABLE]
                    ,fromBCREWD.[SEQUENCENUMBER]
                    ,fromBCREWD.[BUDGETSOURCELEDGERDIMENSION]
                    ,fromBCREWD.[BUDGETGROUPMEMBER]
                    ,fromBCREWD.[CHECKRESULT]
                    ,fromBCREWD.[CHECKRESULTERRORWARNINGTYPE]
                    ,fromBCREWD.[CHECKRESULTERRORWARNING]
                    ,@PartitionId
            FROM    #BudgetSourceToFromPair budgetSourcePair
            JOIN    [BUDGETCHECKRESULTERRORWARNINGDETAIL] fromBCREWD
                ON
                    fromBCREWD.[PARTITION] = @PartitionId AND
                    budgetSourcePair.[FromID] = fromBCREWD.[BUDGETSOURCE];
    END TRY
    BEGIN CATCH
        SELECT @ErrorTrying = N'INSERT INTO BUDGETCHECKRESULTERRORWARNINGDETAIL failed';

        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH;

    RETURN (0)

    -- error termination

    lblErrorTrap:

    EXEC [SysRaiseErrorProc]
         @callerProcedure       = @SPName
        ,@Error_Number          = @Error_Number
        ,@Error_Line            = @Error_Line
        ,@Error_State           = @Error_State
        ,@Error_Severity        = @Error_Severity
        ,@Error_Message         = @ErrorMessage
        ,@Error_Procedure       = @Error_Procedure
        ,@ErrorTrying           = @ErrorTrying
        ,@extendedErrorFl       = @extendedErrorFl
        ,@logErrorFl            = @logErrorFl
    ;

    IF @RetCode = 0
        BEGIN
            SELECT @RetCode = -1;
        END;

    RETURN (@RetCode)
        ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>