<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcXmlReader</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PcXmlReader
{
    XmlReader xmlReader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getContents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the contents of a node.
    /// </summary>
    /// <returns>
    /// The contents as a String value.
    /// </returns>
    public str getContents()
    {
        return xmlReader.readString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldMacroInt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an integer field value from a predefined macro value.
    /// </summary>
    /// <param name="_macro">
    /// A macro value.
    /// </param>
    /// <returns>
    /// An integer value.
    /// </returns>
    public int getFieldMacroInt(str _macro)
    {
        return str2int(xmlReader.getAttribute2(_macro));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldMacroStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string field value from a predefined macro value.
    /// </summary>
    /// <param name="_macro">
    /// A macro value.
    /// </param>
    /// <returns>
    /// A string value.
    /// </returns>
    public str getFieldMacroStr(str _macro)
    {
        return xmlReader.getAttribute2(_macro);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValueEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enumeration field value from a record buffer and a field ID.
    /// </summary>
    /// <param name="_record">
    /// A record buffer.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    /// <returns>
    /// An enumeration value represented as an Integer.
    /// </returns>
    public int getFieldValueEnum(
        Common _record,
        fieldId _fieldId
    )
    {
        str xmlAttributeName = fieldid2name(_record.TableId, _fieldId);
        int enumintValue = str2int(xmlReader.getAttribute2(xmlAttributeName));

        return enumintValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValueInt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an Integer field value from a record buffer and a field ID.
    /// </summary>
    /// <param name="_record">
    /// A record buffer.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    /// <returns>
    /// An Integer value.
    /// </returns>
    public int getFieldValueInt(
        Common _record,
        fieldId _fieldId
    )
    {
        str xmlAttributeName = fieldid2name(_record.TableId, _fieldId);
        int intValue = str2int(xmlReader.getAttribute2(xmlAttributeName));

        return intValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValueReal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Real field value from a record buffer and a field ID.
    /// </summary>
    /// <param name="_record">
    /// A record buffer.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    /// <returns>
    /// A Real value represented as an Integer.
    /// </returns>
    public real getFieldValueReal(
        Common _record,
        fieldId _fieldId
    )
    {
        str xmlAttributeName = fieldid2name(_record.TableId, _fieldId);
        real realValue = str2num(xmlReader.getAttribute2(xmlAttributeName));

        return realValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValueStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a String field value from a record buffer and a field ID.
    /// </summary>
    /// <param name="_record">
    /// A record buffer.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    /// <returns>
    /// A String value represented as an Integer.
    /// </returns>
    public str getFieldValueStr(
        Common _record,
        fieldId _fieldId
        )
    {
        str xmlAttributeName = fieldid2name(_record.TableId, _fieldId);
        str ret = xmlReader.getAttribute2(xmlAttributeName);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStartElement</Name>
				<Source><![CDATA[
        public boolean isStartElement()
    {
        return xmlReader.isStartElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToNextElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the reader to the next element.
    /// </summary>
    public void moveToNextElement()
    {
        xmlReader.read();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(str _xml)
    {
        xmlReader = PCRuntimeLibrary::createXmlReader(_xml);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateElementNameFromStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the name of the current element against the expected name.
    /// </summary>
    /// <param name="_expected">
    /// The expected name.
    /// </param>
    /// <returns>
    /// true if the current element name matched the expected name; otherwise, false.
    /// </returns>
    public boolean validateElementNameFromStr(str _expected)
    {
        str name = xmlReader.name();
        boolean ret = (name == _expected);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateElementNameFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the name of the current element against the table ID of a record buffer.
    /// </summary>
    /// <param name="_record">
    /// A record buffer.
    /// </param>
    /// <returns>
    /// true if the current element name matched the table name of the record buffer; otherwise, false.
    /// </returns>
    public boolean validateElementNameFromTable(Common _record)
    {
        tableName tableName = xmlReader.name();
        boolean ret = (_record.TableId == tablename2id(tableName));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCXmlReader construct(str _xml)
    {
        return new PCXmlReader(_xml);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>