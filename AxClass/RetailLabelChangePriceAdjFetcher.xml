<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLabelChangePriceAdjFetcher</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RetailLabelChangePriceAdjFetcher extends RetailLabelChangeDataFetcherBase
{
    FromDate activatedFromDate;
    FromDate modifiedFromDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSourceSpecificQuery</Name>
				<Source><![CDATA[
    protected Query createSourceSpecificQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildFieldList qbfl;

        // RetailGroupMemberLine
        qbds = query.addDataSource(tableNum(RetailGroupMemberLine));
        qbfl = qbds.fields();
        qbfl.clearFieldList();
        qbfl.addField(fieldNum(RetailGroupMemberLine, Product), SelectionField::Database);
        qbfl.addField(fieldNum(RetailGroupMemberLine, Variant), SelectionField::Database);
        // RetailPeriodicDiscountLine
        qbds = qbds.addDataSource(tableNum(RetailPeriodicDiscountLine));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);
        qbfl = qbds.fields();
        qbfl.clearFieldList();
        qbfl.addField(fieldNum(RetailPeriodicDiscountLine, TableId), SelectionField::Database);
        // RetailPeriodicDiscount
        qbds = qbds.addDataSource(tableNum(RetailPeriodicDiscount));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addRange(fieldNum(RetailPeriodicDiscount, PeriodicDiscountType)).value(queryValue(RetailDiscountOfferTypeBase::Promotion));
        if (activatedFromDate && modifiedFromDate)
        {
            // Extended query syntax
            qbds.addRange(fieldNum(RetailPeriodicDiscount, RecId)).value(
                strFmt(
                    '((((%1 == %6) || (%1 <= %3)) && ((%2 == %6) || (%2 >= %3)) && (%4 >= %5)) || ((%1 >= %7) && (%1 <= %3)) || ((%2 >= %8) && (%2 <= %9)))',
                    fieldStr(RetailPeriodicDiscount, ValidFrom),//1
                    fieldStr(RetailPeriodicDiscount, ValidTo),//2
                    date2StrXpp(priceDate),//3
                    fieldStr(RetailPeriodicDiscount, modifiedDateTime),//4
                    DateTimeUtil::toStr(DateTimeUtil::newDateTime(modifiedFromDate, 0)),//5
                    date2StrXpp(dateNull()),//6
                    date2StrXpp(activatedFromDate),//7
                    date2StrXpp(activatedFromDate - 1), //8
                    date2StrXpp(priceDate - 1) // 9
                    ));
        }
        qbfl = qbds.fields();
        qbfl.clearFieldList();
        qbfl.addField(fieldNum(RetailPeriodicDiscount, TableId), SelectionField::Database);

        qbds = qbds.addDataSource(tableNum(RetailDiscountPriceGroup));
        qbds.addLink(fieldNum(RetailDiscountPriceGroup, OfferId), fieldNum(RetailPeriodicDiscount, OfferId));
        qbds.joinMode(JoinMode::InnerJoin);

        qbds = qbds.addDataSource(tableNum(PriceDiscGroup));
        qbds.addLink(fieldNum(PriceDiscGroup, RecId), fieldNum(RetailDiscountPriceGroup, PriceDiscGroup));
        qbds.addRange(fieldNum(PriceDiscGroup, Module)).value(queryValue(ModuleInventCustVend::Cust));
        qbds.addRange(fieldNum(PriceDiscGroup, Type)).value(queryValue(PriceGroupType::PriceGroup));
        qbds.joinMode(JoinMode::InnerJoin);

        qbfl = qbds.fields();
        qbfl.clearFieldList();
        qbfl.addField(fieldNum(PriceDiscGroup, TableId), SelectionField::Database);
        // RetailChannelPriceGroup
        qbds = qbds.addDataSource(tableNum(RetailChannelPriceGroup));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);
        qbfl = qbds.fields();
        qbfl.clearFieldList();
        qbfl.addField(fieldNum(RetailChannelPriceGroup, TableId), SelectionField::Database);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemVariantId</Name>
				<Source><![CDATA[
    protected container getItemVariantId()
    {
        RetailGroupMemberLine groupMemberLine;

        groupMemberLine = qr.get(tableNum(RetailGroupMemberLine));
        itemId = (select firstOnly ItemId from InventTable where InventTable.Product == groupMemberLine.Product).ItemId;
        variantId = (select firstOnly RetailVariantId from InventDimCombination where InventDimCombination.DistinctProductVariant == groupMemberLine.Variant).RetailVariantId;

        return [itemId, variantId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemFieldId</Name>
				<Source><![CDATA[
    protected FieldId itemFieldId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemTableId</Name>
				<Source><![CDATA[
    protected TableId itemTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FromDate _activatedFromDate, FromDate _modifiedFromDate, priceDate _priceDate, RefRecId _hierarchyRecId, OMOperatingUnitRefRecId _operatingUnitId, EcoResCategoryId _categoryId, RetailItemQtyFilter _itemQtyFilter, NoYes _initWithQtyOnHand)
    {
        activatedFromDate = _activatedFromDate;
        modifiedFromDate = _modifiedFromDate;
        super(_priceDate, _hierarchyRecId, _operatingUnitId, _categoryId, _itemQtyFilter, _initWithQtyOnHand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productFieldId</Name>
				<Source><![CDATA[
    protected FieldId productFieldId()
    {
        return fieldNum(RetailGroupMemberLine, Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>productTableId</Name>
				<Source><![CDATA[
    protected TableId productTableId()
    {
        return tableNum(RetailGroupMemberLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>