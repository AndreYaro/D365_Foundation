<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The RetailPricingEngine class provides entry points to calculate
///  Retail-specific prices. These prices are specific to a particular
///  retail channel and allow AX the ability to calculate prices as they
///  would be on the particular channel.
/// </summary>
/// <remarks>
/// This class will read all data from the AX database. So for parity
///  between the channel and AX calculations, the same data will need to
///  be available in both places.
/// </remarks>
class RetailPricingEngine
{
    #define.RetailPricingCacheScope("RetailPricingCacheScope")

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToRetailTempOrderItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add to retail tmp order item.
    /// </summary>
    /// <param name="_tempOrderItem">
    /// Temporary order item table.
    /// </param>
    /// <param name="_itemId">
    /// Item Id.
    /// </param>
    /// <param name="_inventDimId">
    /// Inventory dimension Id.
    /// </param>
    /// <returns>
    /// Inventory dimension combination if available.
    /// </returns>
    public static InventDimCombination addToRetailTempOrderItem(
             RetailTempOrderItem _tempOrderItem,
             ItemId _itemId,
             InventDimId _inventDimId)
    {
        InventDimCombination inventDimCombination;
        InventDim inventDim;

        RetailPricingEngine::initRetailTempOrderItem(_tempOrderItem, _itemId);

        if (_inventDimId)
        {
            if (RetailPriceCheckSearchVariantWithoutInventoryDimensionFlight::instance().isEnabled())
            {
                InventDimId variantInventDimId = InventDim::findOrCreateProductInventDimId(_itemId, InventDim::find(_inventDimId));

                select firstOnly ItemId, InventDimId, RetailVariantId, DistinctProductVariant from inventDimCombination
                    where inventDimCombination.ItemId == _itemId && inventDimCombination.InventDimId == variantInventDimId;
            }
            else
            {
                select firstOnly ItemId, InventDimId, RetailVariantId, DistinctProductVariant from inventDimCombination
                    where inventDimCombination.ItemId == _itemId && inventDimCombination.InventDimId == _inventDimId;
            }

            if (inventDimCombination)
            {
                _tempOrderItem.RetailVariantId = inventDimCombination.RetailVariantId;
                _tempOrderItem.InventDimId = _inventDimId;
                _tempOrderItem.Variant = inventDimCombination.DistinctProductVariant;

                if (RetailPricingFeatureToggle::shouldUseRetailPricingDataManagerV3())
                {
                    _tempOrderItem.Product = inventDimCombination.DistinctProductVariant;
                }
            }

            if (RetailPricingFixGetPriceTradeAgreementsInventDimIdFlight::instance().isEnabled())
            {
                _tempOrderItem.InventDimId = _inventDimId;
            }

            if (!RetailPricingDisableGetPriceTradeAgreementsBySearchCriteriaFlight::instance().isEnabled())
            {
                _tempOrderItem.InventDimId = _inventDimId;

                select firstonly RecId, InventSiteId, InventLocationId from inventDim
                        where inventDim.inventDimId == _inventDimId;

                if (inventDim.RecId)
                {
                    _tempOrderItem.InventSiteId = inventDim.InventSiteId;
                    _tempOrderItem.InventLocationId = inventDim.InventLocationId;
                }
            }
        }

        _tempOrderItem.insert();
        
        return inventDimCombination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailTempOrderItem</Name>
				<Source><![CDATA[
    public static void initRetailTempOrderItem(
        RetailTempOrderItem     _tempOrderItem,
        ItemId                  _itemId)
    {
        InventTable inventTable = InventTable::find(_itemId);

        _tempOrderItem.clear();
        _tempOrderItem.itemId = _itemId;
        _tempOrderItem.Product = inventTable.Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderChannelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the channel record Id (if any) associated with the sales order
    /// </summary>
    /// <param name="_salesId">
    /// The Id of the sales order
    /// </param>
    /// <returns>
    /// Record Id of the channel if any is associated with the order. Otherwise, 0.
    /// </returns>
    public static RecId getOrderChannelId(SalesId _salesId)
    {
        RetailSalesTable retailSalesTable = RetailSalesTable::find(_salesId);

        if (retailSalesTable.RecId != 0)
        {
            return retailSalesTable.RetailChannel;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailPriceByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active retail channel price for a given Item.
    /// </summary>
    /// <param name="_storeId">
    /// The store Id of the channel where price is active.
    /// </param>
    /// <param name="_itemId">
    /// The item to find price for.
    /// </param>
    /// <param name="_uomId">
    /// The unit of measure of the item to find price for.
    /// </param>
    /// <param name="_inventDimId">
    /// The invent dim id to find price for.
    /// </param>
    /// <param name="_validDate">
    /// Valid date to find price for.
    /// </param>
    /// <param name="_variantId">
    /// Optional. If specified, price is filtered by given variant dimension values.
    /// </param>
    /// <returns>
    /// Retail channel price for the given item.
    /// </returns>
    public static Price getRetailPriceByItem(RetailStoreId       _storeId,
                                             ItemId              _itemId,
                                             UnitOfMeasureSymbol _uomId,
                                             InventDimId         _inventDimId,
                                             UTCDateTime         _validDate,
                                             RetailVariantId     _variantId)
    {
        List priceDiscountLines = new List(Types::Class);
        RetailStoreTable retailStore = RetailStoreTable::find(_storeId);

        System.DateTimeOffset validDate = RetailPricingEngine::getValidDate(_validDate, retailStore.ChannelTimeZone);

        RetailPriceDiscountLine priceDiscountLine = new RetailPriceDiscountLine();
        priceDiscountLine.parmChannelRefRecId(retailStore.RecId);
        priceDiscountLine.parmItemId(_itemId);
        priceDiscountLine.parmInventDimId(_inventDimId);
        priceDiscountLine.parmRetailVariantId(_variantId);
        priceDiscountLine.parmQty(1);
        priceDiscountLine.parmSalesUnit(_uomId);
        priceDiscountLines.addEnd(priceDiscountLine);

        RetailPricingCalculatorCreator::getInstance().createPriceCheck().calculatePrice(retailStore.RecId, priceDiscountLines, validDate);

        return priceDiscountLine.parmPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the valid date time in UTC.
    /// </summary>
    /// <param name="_validDate">
    /// The date time user inputs.
    /// </param>
    /// <param name="_retailChannelTimezone">
    /// The time zone of retail channel.
    /// </param>
    /// <returns>
    /// The valid date in UTC.
    /// </returns>
    internal static System.DateTimeOffset getValidDate(UTCDateTime _validDate, Timezone _retailChannelTimezone)
    {
        int offsetInMinutes = DateTimeUtil::getTimeZoneOffset(_validDate, _retailChannelTimezone);
        UTCDateTime pricingDate = DateTimeUtil::addMinutes(_validDate, -offsetInMinutes);
        System.DateTimeOffset validDate = new System.DateTimeOffset(pricingDate, System.TimeSpan::Zero);

        return validDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useRetailPricing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the sales line should have retail prices
    /// </summary>
    /// <param name="_salesLine">
    /// The sales order line to check for retail pricing
    /// </param>
    /// <returns>
    /// True if the line should get retail prices. False, otherwise.
    /// </returns>
    public static boolean useRetailPricing(SalesPurchLine _salesLine)
    {
        RetailSalesTable retailSalesTable;
        RetailSalesQuotationTable retailSalesQuotationTable;
        SalesPurchTable salesPurchTable;
        RecId channelId;
        SysGlobalObjectCache c;
        container cachedValue;
        boolean result = false;
        str cacheKey;

        if (_salesLine.TableId != tableNum(SalesLine) && _salesLine.TableId != tableNum(SalesQuotationLine))
        {
            return false;
        }

        c = new SysGlobalObjectCache();
        cacheKey = RetailPricingEngine::getCacheKey(_salesLine);
        cachedValue = c.find(#RetailPricingCacheScope, [cacheKey]);

        if (cachedValue == conNull())
        {
        salesPurchTable = _salesLine.salesPurchLineInterface().salesPurchTable();

        if (salesPurchTable.RecId == 0)
        {
            return false;
        }

        // only true if sales order has a retail channel Id specified
        if (salesPurchTable.TableId == tableNum(SalesTable))
        {
            SalesTable salesTable = salesPurchTable as SalesTable;
            retailSalesTable = salesTable.retailSalesTable();
            channelId = retailSalesTable.RetailChannel;
        }
        else if (salesPurchTable.TableId == tableNum(SalesQuotationTable))
        {
            SalesQuotationTable salesQuotationTable = salesPurchTable as SalesQuotationTable;
            retailSalesQuotationTable = salesQuotationTable.retailSalesQuotationTable();
            channelId = retailSalesQuotationTable.RetailChannel;
        }

            result = channelId != 0;
            c.insert(#RetailPricingCacheScope, [cacheKey], [result]);
        }
        else
        {
            [result] = cachedValue;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useRetailPricingEngineForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether to use retail pricing engine for sales order.
    /// </summary>
    /// <param name="_salesId">
    /// Sales Id.
    /// </param>
    /// <returns>
    /// True if use retail pricing engine.
    /// </returns>
    public static boolean useRetailPricingEngineForSalesOrder(SalesId _salesId)
    {
        RetailSalesTable retailSales;
        boolean ret = false;

        if (RetailParameters::isRetailEnabledAndInUse())
        {
            retailSales = RetailSalesTable::find(_salesId);

            if (retailSales)
            {
                ret = retailSales.RetailChannel != 0;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useRetailPricingEngineForSalesQuatation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether to use retail pricing engine for sales quotation.
    /// </summary>
    /// <param name="_quotationId">
    /// Quotation Id.
    /// </param>
    /// <returns>
    /// True if use retail pricing engine.
    /// </returns>
    public static boolean useRetailPricingEngineForSalesQuatation(QuotationId _quotationId)
    {
        RetailSalesQuotationTable retailQuotation;
        boolean ret = false;

        if (RetailParameters::isRetailEnabledAndInUse())
        {
            retailQuotation = RetailSalesQuotationTable::find(_quotationId);

            if (retailQuotation)
            {
                ret = retailQuotation.RetailChannel != 0;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    protected static str getCacheKey(SalesPurchLine _salesLine)
    {
        str tablePrefix;

        if (_salesLine.TableId == tableNum(SalesLine))
        {
            // used for sales order
            tablePrefix = 'S..';
        }
        else if (_salesLine.TableId == tableNum(SalesQuotationLine))
        {
            // used for sales quote
            tablePrefix = 'Q..';
        }

        return tablePrefix + _salesLine.salesPurchLineInterface().parmOrderId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMCROrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return true if the sales order is MCR one.
    /// </summary>
    /// <param name="_salesId">
    /// Sales Id.
    /// </param>
    /// <returns>
    /// true if the sales order is MCR one; false otherwise.
    /// </returns>
    public static boolean isMCROrder(SalesId _salesId)
    {
        RetailSalesTable retailSalesTable = RetailSalesTable::find(_salesId);
        RetailChannelTable retailChannel = RetailChannelTable::findByRecId(retailSalesTable.RetailChannel);

        return retailChannel && retailChannel.ChannelType == RetailChannelType::MCRCallCenter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMCRQuote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return true if the sales quote is MCR one.
    /// </summary>
    /// <param name="_quotationId">
    /// Quotation Id.
    /// </param>
    /// <returns>
    /// true if the sales quote is MCR one; false otherwise.
    /// </returns>
    public static boolean isMCRQuote(QuotationId _quotationId)
    {
        RetailSalesQuotationTable retailQuotationTable = RetailSalesQuotationTable::find(_quotationId);
        RetailChannelTable retailChannel = RetailChannelTable::findByRecId(retailQuotationTable.RetailChannel);

        return retailChannel && retailChannel.ChannelType == RetailChannelType::MCRCallCenter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceSimulatorTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return true if the transaction is a price simulator.
    /// </summary>
    /// <param name="_transactionId">
    /// Sales transaction id.
    /// </param>
    /// <returns>
    /// true if the sales transaction id is a price simulator transaction; false otherwise.
    /// </returns>
    internal static boolean isPriceSimulatorTrans(str _transactionId)
    {
        int64 transactionId;
        // See RetailPricingSimulator. We currently int642Str in getTransactionIdString.
        if (!System.Int64::TryParse(_transactionId, byref transactionId))
        {
            return false;
        }

        RetailPricingSimulatorSalesTransaction transaction = RetailPricingSimulatorSalesTransaction::findByRef(transactionId);

        return transaction.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>