<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamDeductionUpdate_ReverseMatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMDeductionUpdate_ReverseMatch</c> class manages the update of deductions
/// for the reverse match action.
/// </summary>
class TamDeductionUpdate_ReverseMatch extends TAMDeductionUpdate
{
    TAMDeductionUpdateHistory deductionUpdateHistory;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(TAMDeductionUpdateHistory _deductionUpdateHistory)
    {
        super(_deductionUpdateHistory);
        deductionUpdateHistory.data(_deductionUpdateHistory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMDeductionUpdateType</Name>
				<Source><![CDATA[
    protected TAMDeductionUpdateType parmTAMDeductionUpdateType()
    {
        return TAMDeductionUpdateType::ReverseMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    protected void update()
    {
        #OCCRetryCount
        CustSettlement              custSettlement;
        CustTable                   custTable;
        CustTrans                   custTrans;
        CustTransOpen               custTransOpen;
        TAMDeduction                deduction;
        TAMDeductionUpdateHistory   deductionUpdateHistoryLocal;
        LedgerJournalTable          ledgerJournalTable;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalCheckPost      ledgerJournalCheckPost;
        RecordSortedList            listLedgerJournalTrans;
        TAMPromotionParameters      tamPromotionParameters;
        RecId                       originalCustTransRecId;
        TAMDeductionUpdateHistory   deductionUpdateHistoryLocalOrig;
        LedgerJournalTrans          ledgerJournalTransOrig;


        deduction = TAMDeduction::find(deductionUpdateHistory.tamDeductionID, false);

        this.initLedgerJournalTable(ledgerJournalTable);

        // Store LedgerJournalTrans in a list.  Purpose is to initialize outside TTS
        // and insert all records at once inside TTS
        listLedgerJournalTrans = new RecordSortedList(tableNum(LedgerJournalTrans));
        listLedgerJournalTrans.sortOrder(fieldNum(LedgerJournalTrans, LineNum));

        // Initialize LedgerJournalTrans and add to list
        // Reverse match so amount is negative
        this.initLedgerJournalTrans(ledgerJournalTrans,
                                    deduction,
                                    - deductionUpdateHistory.AmountCur);

        listLedgerJournalTrans.ins(ledgerJournalTrans);

        // See CustOpenTransReverse form setSpecOffsetVoucher
        custTable = CustTable::find(deduction.AccountNum);
        SpecTransExecutionContext context = SpecTransExecutionContext::newFromSource(custTable);
        SpecTransManager specTransManager = SpecTransManager::newFromSpec(context.parmSpecContext());

        try
        {
            ttsbegin;

            // Record that match was reversed
            select firstonly forupdate deductionUpdateHistoryLocal
                where deductionUpdateHistoryLocal.RecId == deductionUpdateHistory.RecId;

            deductionUpdateHistoryLocal.Reversed = NoYes::Yes;
            deductionUpdateHistoryLocal.update();

            tamPromotionParameters = TAMPromotionParameters::find();

            // Reverse match's settlement
            select custSettlement
                join CurrencyCode from custTrans
                where custSettlement.TransRecId == custTrans.RecId
                exists join ledgerJournalTrans
                where custTrans.RecId == ledgerJournalTrans.CustTransId
                    && ledgerJournalTrans.RecId == deductionUpdateHistory.LedgerJournalTransRecId;

            custSettlement.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, custTrans.CurrencyCode);

            CustTrans::reverseTransact(custTable);
            specTransManager.deleteAll();

            // Insert reversal of match (credit to customer's account)
            ledgerJournalTable = this.insertJournalAndLines(ledgerJournalTable,
                                                            listLedgerJournalTrans);

            ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::Yes);
            ledgerJournalCheckPost.parmBeQuiet(true);

            ledgerJournalCheckPost.runOperation();

            //Find original match line
            select firstonly RecId from deductionUpdateHistoryLocalOrig
                exists join ledgerJournalTransOrig
                where deductionUpdateHistoryLocalOrig.LedgerJournalTransRecId == ledgerJournalTransOrig.RecId
                    && ledgerJournalTransOrig.CustTransId == custTrans.RecId;

            listLedgerJournalTrans.first(ledgerJournalTrans);

            this.initMapLJTransLineNumToSourceRecId(ledgerJournalTrans.LineNum, deductionUpdateHistoryLocalOrig.RecId);

            // Settle reversal of match with original match
            // Find CustTransOpen of original match
            select custTransOpen
                where custTransOpen.RecId == deductionUpdateHistory.CustTransOpenRecId
                join CurrencyCode from custTrans
                where custTrans.RecId   == custTransOpen.RefRecId
                    && custTrans.AccountNum == custTransOpen.AccountNum;

            if (custTransOpen
                && ! specTransManager.exist(curext(),
                                            custTransOpen.TableId,
                                            custTransOpen.RecId))
            {
                specTransManager.insert(curext(),
                                        custTransOpen.TableId,
                                        custTransOpen.RecId,
                                        custTransOpen.AmountCur,
                                        custTrans.CurrencyCode);

                originalCustTransRecId = custTransOpen.RecId;

                listLedgerJournalTrans.first(ledgerJournalTrans);

                // Reread to get CustTransId value because CustTransId assigned during posting
                ledgerJournalTrans.reread();

                // Find CustTransOpen of just posted reversal
                select custTransOpen
                    join CurrencyCode from custTrans
                    where custTransOpen.RefRecId == custTrans.RecId
                        && custTrans.RecId == ledgerJournalTrans.CustTransId;

                if (custTransOpen
                    && ! specTransManager.exist(curext(),
                                                custTransOpen.TableId,
                                                custTransOpen.RecId))
                {
                    // Mark reversal to be settled
                    specTransManager.insert(curext(),
                                            custTransOpen.TableId,
                                            custTransOpen.RecId,
                                            custTransOpen.AmountCur,
                                            custTrans.CurrencyCode);

                    CustTrans::settleTransaction(context, CustTransSettleTransactionParameters::construct());
                }
            }
            specTransManager.deleteAll();

            this.updateDeductionsAfterPost(ledgerJournalTable.JournalNum);
            this.insertDeductionUpdateHistory(listLedgerJournalTrans);
            this.updateCustOpenTranseAfterPost(originalCustTransRecId);

            ttscommit;
            this.parmUpdateOccurred(true);
        }

        catch (Exception::Error)
        {
            error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeductionsAfterPost</Name>
				<Source><![CDATA[
    private void updateDeductionsAfterPost(LedgerJournalId _ledgerJournalId)
    {
        TAMDeduction deduction;
        deduction = TAMDeduction::find(deductionUpdateHistory.tamDeductionID, true);

        ttsbegin;
        // Add match amount back to deduction and set status to open
        deduction.RemainAmountCur     += deductionUpdateHistory.AmountCur;
        deduction.MatchAmountCur      -= deductionUpdateHistory.AmountCur;
        deduction.tamDeductionStatus  = TAMDeductionStatus::Open;

        if (deduction.validateWrite())
        {
            deduction.update();
        }
        else
        {
            throw error("@SYS104318");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret;
        ret = true;

        // Must be a match update type
        if (deductionUpdateHistory.tamDeductionUpdateType != TAMDeductionUpdateType::Match)
        {
            ret = checkFailed(strFmt("@MCR27658",
                                     deductionUpdateHistory.tamDeductionUpdateType));
        }

        // Must not be reversed already
        if (ret
            && deductionUpdateHistory.Reversed)
        {
            ret = checkFailed("@MCR27659");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>TAMDeductionUpdate_ReverseMatch</c> object.
    /// </summary>
    /// <param name="_deductionUpdateHistory">
    /// The deduction record used to initalize the new object.
    /// </param>
    /// <returns>
    /// An initialized <c>TAMDeductionUpdate_ReverseMatch</c> object.
    /// </returns>
    public static TAMDeductionUpdate_ReverseMatch construct(TAMDeductionUpdateHistory _deductionUpdateHistory)
    {
        TAMDeductionUpdate_ReverseMatch tamDeductionUpdate_ReverseMatch;
        tamDeductionUpdate_ReverseMatch = new TAMDeductionUpdate_ReverseMatch(_deductionUpdateHistory);
        return tamDeductionUpdate_ReverseMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TAMDeductionUpdateHistory        deductionUpdateHistory;
        TAMDeductionUpdate_ReverseMatch  tamDeductionUpdate_ReverseMatch;

        if (_args.dataset() != tableNum(TAMDeductionUpdateHistory))
        {
            throw error(strFmt("@MCR27651",
                               classId2Name(classIdGet(tamDeductionUpdate_ReverseMatch)),
                                            tablePName(TAMDeductionUpdateHistory)));
        }

        deductionUpdateHistory = _args.record();

        tamDeductionUpdate_ReverseMatch = TAMDeductionUpdate_ReverseMatch::construct(deductionUpdateHistory);
        tamDeductionUpdate_ReverseMatch.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustOpenTranseAfterPost</Name>
				<Source><![CDATA[
    public void updateCustOpenTranseAfterPost(RecId _custTransOpenId)
    {
        TAMDeduction  deduction;
        CustTransOpen custTransOpenUpd;
        CustTrans     custTransOrigin;

        if(!_custTransOpenId)
        {
            return;
        }

        deduction = TAMDeduction::find(deductionUpdateHistory.tamDeductionID, true);

        ttsbegin;

        select forupdate custTransOpenUpd
            where custTransOpenUpd.RecId == _custTransOpenId;

        custTransOpenUpd.AmountCur -= deduction.RemainAmountCur;
        custTransOpenUpd.AmountMST -= deduction.RemainAmountMST;
        custTransOpenUpd.update();

        select forupdate custTransOrigin
            where custTransOrigin.RecId == custTransOpenUpd.RefRecId;

        if(custTransOrigin.Settlement)
        {

            custTransOrigin.SettleAmountCur += deduction.RemainAmountCur;
            custTransOrigin.SettleAmountMST += deduction.RemainAmountMST;
            custTransOrigin.update();
        }

        ttscommit;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>