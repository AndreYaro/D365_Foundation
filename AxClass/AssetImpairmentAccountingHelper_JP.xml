<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentAccountingHelper_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetImpairmentAccountingHelper_JP</c> class handles the Japan impairment accounting features.
/// </summary>
class AssetImpairmentAccountingHelper_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocate an amount to a list of <c>AssetImpairmentAllocationEntry_JP</c> instance.
    /// </summary>
    /// <param name="_entryList">
    /// The list that contains <c>AssetImpairmentAllocationEntry_JP</c> instances.
    /// </param>
    /// <param name="_base">
    /// The amount to be allocated.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code of ledger
    /// </param>
    /// <returns>
    /// The amount that was left after allocation.
    /// </returns>
    public static AssetAmount allocateEntries(List _entryList, AssetAmount _base, CurrencyCode _currencyCode = Ledger::accountingCurrency())
    {
        AssetAmount                       total;
        AssetAmount                       tmpTotal;
        AssetAmount                       base = _base;
        AssetAmount                       totalLimit;
        AssetAmount                       flow;
        AssetAmount                       tmpAmt;
        boolean                           fullyAllocated = false;
        ListEnumerator                    le = _entryList.getEnumerator();
        AssetImpairmentAllocationEntry_JP entry;

        while (le.moveNext())
        {
            entry = le.current();
            if (!entry.reachLimit())
            {
                total += entry.parmRateBasis();
                totalLimit += entry.parmLimit() - entry.parmCurrent();
            }
        }

        if (base >= totalLimit)
        {
            le.reset();
            while (le.moveNext())
            {
                entry = le.current();
                if (!entry.reachLimit())
                {
                    base -= entry.parmLimit() - entry.parmCurrent();
                    entry.parmCurrent(entry.parmLimit());
                }
            }
            fullyAllocated = true;
        }
        else
        {
            while (!fullyAllocated && base > 0)
            {
                fullyAllocated = true;
                flow = 0;
                tmpTotal = 0;
                le.reset();
                while (le.moveNext() && total > 0)
                {
                    entry = le.current();
                    if (!entry.reachLimit())
                    {
                        tmpAmt = base * entry.parmRateBasis() / total;
                        tmpAmt = CurrencyExchange::round(tmpAmt, _currencyCode);

                        if (tmpAmt + entry.parmCurrent() >= entry.parmLimit())
                        {
                            flow += tmpAmt + entry.parmCurrent() - entry.parmLimit();
                            entry.parmCurrent(entry.parmLimit());
                        }
                        else
                        {
                            fullyAllocated = false;
                            entry.parmCurrent(entry.parmCurrent() + tmpAmt);
                            tmpTotal += entry.parmRateBasis();
                        }

                        total -= entry.parmRateBasis();
                        base -= tmpAmt;
                    }
                }
                total = tmpTotal;
                base += flow;
            }
        }

        return base;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPostedImpairmentAmtPerEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total amount of impairment adjustment transactions of an asset book
    /// </summary>
    /// <param name="_entry">
    /// The asset document entry
    /// </param>
    /// <returns>
    /// The total amount of impairment adjustment transactions
    /// </returns>
    public static AssetAmount calcPostedImpairmentAmtPerEntry(AssetDocumentEntry_JP _entry)
    {
        AssetDocumentTrans_JP   docTrans;
        AssetDocumentTable_JP   docTable;
        AssetDepBookMap_JP      bookMap;
        AssetDepTransMap_JP     assetDepTransMap;

        bookMap = AssetDepBookMap_JP::findByAssetIdBookId(_entry.AssetId, _entry.BookId);
        assetDepTransMap = AssetDepTransMap_JP::getEmptyTableBuffer(AssetDepCalculationHelper_JP::determineAssetBookType(bookMap.TableId));

        select sum(AmountMST) from assetDepTransMap
            where assetDepTransMap.AssetId == bookMap.AssetId
                && assetDepTransMap.AssetBookId == bookMap.AssetBookId
                && assetDepTransMap.TransType == AssetTransType::WriteDownAdj
            exists join docTrans
                where docTrans.RefTableId == assetDepTransMap.TableId
                    && docTrans.RefRecId == assetDepTransMap.RecId
                    && docTrans.AssetDocumentEntry_JP == _entry.RecId
            exists join docTable
                where docTable.RecId == _entry.AssetDocumentTable_JP
                    && docTable.Type == AssetDocumentType_JP::AssetImpairment;

        return assetDepTransMap.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetSumCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an <c>AssetSumCalc</c> instance from asset id and book id regardless its book type.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_assetDate">
    /// The transaction date; optional.
    /// </param>
    /// <param name="_assetYear">
    /// The asset year; optional.
    /// </param>
    /// <returns>
    /// An <c>AssetSumCalc_Trans</c> instance for value model or <c>AssetSumCalc_DepBookTrans</c> for depreciation book.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws error if the combination of asset id and book id does not exist.
    /// </exception>
    public static AssetSumCalc createAssetSumCalc(
        AssetId     _assetId,
        AssetBookId _bookId,
        TransDate   _assetDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        AssetYear   _assetYear = AssetYear::All)
    {
        AssetBook       assetBook;
        AssetSumCalc    sumCalc;

        assetBook = AssetBook::find(_assetId, _bookId);

        if (!assetBook)
        {
            throw error(strFmt("@SYS95993", _assetId, _bookId));
        }

        sumCalc = AssetSumCalc_Trans::newAssetYear(_assetId, _bookId, _assetDate, _assetYear);

        return sumCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetSumCalcWithType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an <c>AssetSumCalc</c> instance from asset id and book id by knowning its book type.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id.
    /// </param>
    /// <param name="_bookId">
    /// The book id.
    /// </param>
    /// <param name="_assetDate">
    /// The transaction date; optional.
    /// </param>
    /// <param name="_assetYear">
    /// The asset year; optional.
    /// </param>
    /// <returns>
    /// An <c>AssetSumCalc_Trans</c> instance for value model or <c>AssetSumCalc_DepBookTrans</c> for depreciation book.
    /// </returns>
    public static AssetSumCalc createAssetSumCalcWithType(
        AssetId     _assetId,
        AssetBookId _bookId,
        TransDate   _assetDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        AssetYear   _assetYear = AssetYear::All)
    {
        return AssetSumCalc_Trans::newAssetYear(_assetId, _bookId, _assetDate, _assetYear);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllSharedAssetFullyAllocated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Valid the shared assets allocation of all CGU groups in method 2.
    /// </summary>
    /// <returns>
    /// If the allocation is valid.
    /// </returns>
    public static boolean isAllSharedAssetFullyAllocated()
    {
        AssetImpairmentCGUGroup_JP             cguGroup;
        AssetImpairmentCGUSharedAssets_JP      cguSharedAssets;
        AssetImpairmentCGUSharedAssetsAlloc_JP sharedAssetsAlloc;
        TmpPercent_JP                          percentTmp;
        boolean                                ret = true;

        insert_recordset percentTmp
            (Percent, RefRecId)
        select sum(Percent), SharedAsset from sharedAssetsAlloc
                group by SharedAsset
            exists join cguSharedAssets
                where cguSharedAssets.RecId == sharedAssetsAlloc.SharedAsset
            exists join cguGroup
                where cguGroup.RecId == cguSharedAssets.CGUGroup
                      && (cguGroup.Status == AssetImpairmentCGUGroupStatus_JP::Draft
                          || cguGroup.Status == AssetImpairmentCGUGroupStatus_JP::Active);

        while select percentTmp where percentTmp.Percent != 100
        {
            cguSharedAssets = AssetImpairmentCGUSharedAssets_JP::find(percentTmp.RefRecId);
            cguGroup = AssetImpairmentCGUGroup_JP::find(cguSharedAssets.cguGroup);

            ret = checkFailed(strFmt("@SYP4880634",
                                     cguSharedAssets.AssetId,
                                     cguSharedAssets.BookId,
                                     cguGroup.Name));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noYesUnchanged2TestResultStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts NoYesUnchanged to <c>AssetImpairmentCGUTestResultStr_JP</c> string.
    /// </summary>
    /// <param name="_val">
    /// The NoYesUnchange enum.
    /// </param>
    /// <returns>
    /// No, Yes or -
    /// </returns>
    public static AssetImpairmentCGUTestResultStr_JP noYesUnchanged2TestResultStr(NoYesUnchanged _val)
    {
        switch (_val)
        {
            case NoYesUnchanged::No:
                return "@SYP4880473";
            case NoYesUnchanged::Yes:
                return "@SYP4880467";
            default:
                return "@SYP4880478";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetImpairmentQueryBuilderMassiveImport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the <c>Query</c> instance for massive import asset books
    /// </summary>
    /// <param name="_postingLayer">
    /// The specific posting layer if the book type is value model.
    /// </param>
    /// <returns>
    /// The query to fatch asset books
    /// </returns>
    public static Query assetImpairmentQueryBuilderMassiveImport(CurrentOperationsTax _postingLayer = CurrentOperationsTax::Current)
    {
        Query                   query;
        QueryBuildDataSource    queryAssetBookDS;
        QueryBuildDataSource    queryAssetTableDS;
        QueryBuildDataSource    queryAssetBookTableDS;
        QueryBuildLink          queryBookTableLink;
        QueryBuildLink          queryAssetTableLink;
        QueryBuildRange         range;

        query = new Query();
        queryAssetBookDS = query.addDataSource(tableNum(AssetBook));

        queryAssetTableDS = queryAssetBookDS.addDataSource(tableNum(AssetTable));
        queryAssetTableLink = queryAssetTableDS.addLink(fieldNum(AssetBook, AssetId), fieldNum(AssetTable, AssetId));
        queryAssetTableDS.joinMode(JoinMode::InnerJoin);
        queryAssetTableDS.relations(true);
        queryAssetTableDS.fetchMode(QueryFetchMode::One2One);

        queryAssetBookTableDS = queryAssetBookDS.addDataSource(tableNum(AssetBookTable));
        queryBookTableLink = queryAssetBookTableDS.addLink(fieldNum(AssetBook, BookId), fieldNum(AssetBookTable, BookId));
        queryAssetBookTableDS.joinMode(JoinMode::InnerJoin);
        queryAssetBookTableDS.relations(true);
        queryAssetBookTableDS.fetchMode(QueryFetchMode::One2One);

        queryAssetBookDS.addRange(fieldNum(AssetBook, AssetGroup));
        queryAssetBookDS.addRange(fieldNum(AssetBook, AssetId));
        queryAssetBookDS.addRange(fieldNum(AssetBook, BookId));
        range = queryAssetBookTableDS.addRange(fieldNum(AssetBookTable, CurrentOperationsTax));
        range.value(queryValue(_postingLayer));
        range.status(RangeStatus::Locked);
        queryAssetBookDS.addRange(fieldNum(AssetBook, Status));

        queryAssetTableDS.addRange(fieldNum(AssetTable, AssetType));
        queryAssetTableDS.addRange(fieldNum(AssetTable, Department));
        queryAssetTableDS.addRange(fieldNum(AssetTable, Location));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>