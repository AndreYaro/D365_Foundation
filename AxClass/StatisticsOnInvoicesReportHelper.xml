<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StatisticsOnInvoicesReportHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>StatisticsOnInvoicesReportHelper</c> is used to operate with statistics on invoices model.
/// </summary>
public static class StatisticsOnInvoicesReportHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendorTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares data for Statistics in invoices report for vendor's transactions.
    /// </summary>
    /// <param name = "_fromDate">Start date for the period.</param>
    /// <param name = "_toDate">End date for the period.</param>
    /// <param name = "_postingProfile">The vendor posting profile.</param>
    /// <returns>The list of invoices.</returns>
    [SysClassName(classStr(StatisticsOnInvoicesReportLine))]
    public static List getVendorTransactions(date _fromDate, date _toDate, str _postingProfile)
    {
        List reportLines = new List(Types::Class);

        VendSettlement vendSettlement;
        VendTrans vendTrans;
        VendTrans vendPaymentTrans;

        while select sum(SettleAmountMST), sum(SettleAmountCur), DueDate, AccountNum, TransCompany, TransRecId from vendSettlement
        join AccountNum from vendTrans
            group by vendSettlement.DueDate
                ,vendSettlement.AccountNum
                ,vendSettlement.TransCompany
                ,vendSettlement.TransRecId
            where vendTrans.RecId == vendSettlement.TransRecId
                && vendTrans.dataAreaId == vendSettlement.TransCompany
                && vendTrans.AccountNum == vendSettlement.AccountNum
                && (vendTrans.TransType == LedgerTransType::Vend || vendTrans.TransType == LedgerTransType::Purch)
                && (vendTrans.PostingProfile == _postingProfile || !_postingProfile)
                && vendSettlement.SettleAmountCur < 0
                && ((vendSettlement.TransDate >= _fromDate && vendSettlement.TransDate <= _toDate)
                    || (vendSettlement.DueDate >= _fromDate && vendSettlement.DueDate <= _toDate))
                && vendSettlement.CanBeReversed
        {
            StatisticsOnInvoicesReportLine statisticsOnInvoicesReportLine = new StatisticsOnInvoicesReportLine();

            VendTrans vendInvoiceTrans = vendSettlement.custVendTrans();
            StatisticsOnInvoicesReportHelper::initFromVendTrans(statisticsOnInvoicesReportLine, vendInvoiceTrans);

            VendTransOpen vendTransOpen;

            select sum(AmountMST), sum(AmountCur) from vendTransOpen
                where vendTransOpen.dataAreaId == vendInvoiceTrans.dataAreaId
                    && vendTransOpen.AccountNum == vendInvoiceTrans.AccountNum
                    && vendTransOpen.RefRecId == vendInvoiceTrans.RecId
                    && vendTransOpen.DueDate == vendSettlement.DueDate;

            statisticsOnInvoicesReportLine.parmAmountCur(vendTransOpen.AmountCur + vendSettlement.SettleAmountCur);
            statisticsOnInvoicesReportLine.parmAmountMST(vendTransOpen.AmountMST + vendSettlement.SettleAmountMST);
            statisticsOnInvoicesReportLine.parmDueDate(vendSettlement.DueDate);

            CustVendTransDetails custVendTransDetails = new CustVendTransDetails(vendInvoiceTrans, _toDate);
            
            statisticsOnInvoicesReportLine.parmBalanceOnEndDateCur(custVendTransDetails.amountCurSettled());
            statisticsOnInvoicesReportLine.parmBalanceOnEndDateMST(custVendTransDetails.amountMSTSettled());
       
            custVendTransDetails = new CustVendTransDetails(vendInvoiceTrans, VendSettlement.DueDate);
            
            statisticsOnInvoicesReportLine.parmBalanceOnDueDateCur(custVendTransDetails.amountCurSettled());
            statisticsOnInvoicesReportLine.parmBalanceOnDueDateMST(custVendTransDetails.amountMSTSettled());

            if(!vendTransOpen.AmountMST)
            {
                statisticsOnInvoicesReportLine.parmIsPaid(true);
            }

            // closing payment
            if (statisticsOnInvoicesReportLine.parmIsPaid())
            {
                VendSettlement vendClosingSettlement;

                while select crosscompany OffsetCompany, OffsetRecid, OffsetAccountNum from vendClosingSettlement
                    order by vendClosingSettlement.TransDate desc, vendClosingSettlement.CreatedDateTime desc
                    where vendInvoiceTrans.RecId == vendClosingSettlement.TransRecId
                        && vendInvoiceTrans.dataAreaId == vendClosingSettlement.TransCompany
                        && vendInvoiceTrans.AccountNum == vendClosingSettlement.AccountNum
                        && vendSettlement.DueDate == vendClosingSettlement.DueDate
                        && vendClosingSettlement.SettleAmountCur < 0
                        && vendClosingSettlement.CanBeReversed
                {

                    changecompany(vendClosingSettlement.OffsetCompany)
                    {
                        vendPaymentTrans.clear();

                        select firstonly vendPaymentTrans
                            where vendPaymentTrans.RecId == vendClosingSettlement.OffsetRecid
                                && vendPaymentTrans.AccountNum == vendClosingSettlement.OffsetAccountNum
                                && vendPaymentTrans.TransType == LedgerTransType::Payment;

                        // payment creditor data
                        if (vendPaymentTrans)
                        {
                            VendTable vendTable = VendTable::findByCompany(vendPaymentTrans.DataAreaId, vendPaymentTrans.AccountNum);

                            VendGroup vendGroup = VendGroup::find(vendTable.VendGroup);
                            CompanyInfo companyInfo = vendTable.companyInfo();

                            // payment creditor data
                            statisticsOnInvoicesReportLine.parmPaymentCreditorAccountNum(vendTable.AccountNum);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorName(vendTable.name());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorAddress(vendTable.postalAddress().Address);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorCity(vendTable.postalAddress().City);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorCountry(vendTable.postalAddress().CountryRegionId);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorZipCode(vendTable.postalAddress().ZipCode);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorEmail(vendTable.email());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorFax(vendTable.telefax());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorPhone(vendTable.phone());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorGroupCode(vendGroup.VendGroup);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorGroupName(vendGroup.Name);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorTaxExemptNumber(vendTable.VATNum);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorTaxRegNum(vendTable.getVatNumPrimaryRegistrationNumber());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorBaseType(vendTable.DirPartyTable().baseType());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorCompanyIdSiret(vendTable.CompanyIdSiret);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorLineOfBusiness(LineOfBusiness::find(vendTable.LineOfBusinessId).Description);

                            // payment debtor data
                            statisticsOnInvoicesReportLine.parmPaymentDebtorAccountNum(companyInfo.DataArea);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorName(companyInfo.name());
                            statisticsOnInvoicesReportLine.parmPaymentDebtorAddress(companyInfo.postalAddress().Address);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorCity(companyInfo.postalAddress().City);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorCountry(companyInfo.postalAddress().CountryRegionId);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorZipCode(companyInfo.postalAddress().ZipCode);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorEmail(companyInfo.email());
                            statisticsOnInvoicesReportLine.parmPaymentDebtorFax(companyInfo.teleFax());
                            statisticsOnInvoicesReportLine.parmPaymentDebtorPhone(companyInfo.phone());
                            statisticsOnInvoicesReportLine.parmPaymentDebtorTaxExemptNumber(companyInfo.CoRegNum);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorTaxRegNum(companyInfo.getVatNumPrimaryRegistrationNumber());
                            statisticsOnInvoicesReportLine.parmPaymentDebtorBaseType(companyInfo.baseType());

                            // payment data
                            statisticsOnInvoicesReportLine.parmPaymentAmountCur(vendPaymentTrans.AmountCur);
                            statisticsOnInvoicesReportLine.parmPaymentAmountMST(vendPaymentTrans.AmountMST);
                            statisticsOnInvoicesReportLine.parmPaymentCorrect(vendPaymentTrans.Correct);
                            statisticsOnInvoicesReportLine.parmPaymentCurrencyCode(vendPaymentTrans.CurrencyCode);
                            statisticsOnInvoicesReportLine.parmPaymentExchRate(vendPaymentTrans.ExchRate);
                            statisticsOnInvoicesReportLine.parmPaymentDocumentDate(vendPaymentTrans.DocumentDate);
                            statisticsOnInvoicesReportLine.parmPaymentDocumentNum(vendPaymentTrans.DocumentNum);
                            statisticsOnInvoicesReportLine.parmPaymentPostingProfile(vendPaymentTrans.PostingProfile);
                            statisticsOnInvoicesReportLine.parmPaymentTransDate(vendPaymentTrans.TransDate);
                            statisticsOnInvoicesReportLine.parmPaymentTransType(LedgerTransType::Payment);
                            statisticsOnInvoicesReportLine.parmPaymentVoucher(vendPaymentTrans.Voucher);

                            StatisticsOnInvoicesReportHelper::fillVoucherTransactions(statisticsOnInvoicesReportLine);

                            break;
                        }
                    }
                }
            }

            if (vendPaymentTrans || vendTransOpen)
            {
                StatisticsOnInvoicesReportHelper::fillDaysData(statisticsOnInvoicesReportLine, _toDate);
                reportLines.addEnd(statisticsOnInvoicesReportLine);
            }
        }

        // open transes
        VendTransOpen vendTransOpen;
        VendTrans vendTransOffset;
        while select sum(AmountMST), sum(AmountCur), DueDate, RefRecId from vendTransOpen
            group by vendTransOpen.DueDate
                    ,vendTransOpen.RefRecId
                where (vendTransOpen.TransDate >= _fromDate && vendTransOpen.TransDate <= _toDate)
                    || (vendTransOpen.DueDate >= _fromDate && vendTransOpen.DueDate <= _toDate)
            join vendTrans
                where vendTrans.RecId == vendTransOpen.RefRecId
                && (vendTrans.PostingProfile == _postingProfile || !_postingProfile)
                && (vendTrans.TransType == LedgerTransType::Vend || vendTrans.TransType == LedgerTransType::Purch)
            notexists join vendTransOffset
                where vendTransOffset.OffsetRecid == vendTrans.RecId
                    && vendTransOffset.DataAreaId == vendTrans.DataAreaId
                    && vendTransOffset.AccountNum == vendTrans.AccountNum
                    && vendTransOffset.DueDate == vendTrans.DueDate
                    && vendTransOffset.TransType != LedgerTransType::ExchAdjustment
        {
            VendTrans vendInvoiceTrans = vendTransOpen.vendTrans();

            statisticsOnInvoicesReportLine statisticsOnInvoicesReportLine = new StatisticsOnInvoicesReportLine();
            StatisticsOnInvoicesReportHelper::initFromVendTrans(statisticsOnInvoicesReportLine, vendInvoiceTrans);

            statisticsOnInvoicesReportLine.parmDueDate(vendTransOpen.DueDate);
            statisticsOnInvoicesReportLine.parmAmountCur(vendTransOpen.AmountCur);
            statisticsOnInvoicesReportLine.parmAmountMST(vendTransOpen.AmountMST);
            statisticsOnInvoicesReportLine.parmIsPaid(false);

            StatisticsOnInvoicesReportHelper::fillDaysData(statisticsOnInvoicesReportLine, _toDate);
            reportLines.addEnd(statisticsOnInvoicesReportLine);
        }

        return reportLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares data for Statistics in invoices report for customer's transactions.
    /// </summary>
    /// <param name = "_fromDate">Start date for the period.</param>
    /// <param name = "_toDate">End date for the period.</param>
    /// <param name = "_postingProfile">The customer posting profile.</param>
    /// <returns>The list of invoices.</returns>
    [SysClassName(classStr(StatisticsOnInvoicesReportLine))]
    public static List getCustomerTransactions (date _fromDate, date _toDate, str _postingProfile)
    {
        List reportLines = new List(Types::Class);

        CustSettlement custSettlement;
        CustTrans custTrans;
        CustTrans custPaymentTrans;

        while select sum(SettleAmountMST), sum(SettleAmountCur), DueDate, AccountNum, TransCompany, TransRecId
            from custSettlement
            join AccountNum from custTrans
                group by custSettlement.DueDate
                    ,custSettlement.AccountNum
                    ,custSettlement.TransCompany
                    ,custSettlement.TransRecId
                where custTrans.RecId == custSettlement.TransRecId
                    && custTrans.dataAreaId == custSettlement.TransCompany
                    && custTrans.AccountNum == custSettlement.AccountNum
                    && (custTrans.TransType == LedgerTransType::Cust || custTrans.TransType == LedgerTransType::Sales)
                    && (custTrans.PostingProfile == _postingProfile || !_postingProfile)
                    && custSettlement.SettleAmountCur > 0
                    && ((custSettlement.TransDate >= _fromDate && custSettlement.TransDate <= _toDate)
                        || (custSettlement.DueDate >= _fromDate && custSettlement.DueDate <= _toDate))
                   && custSettlement.CanBeReversed
        {
            CustTrans custInvoiceTrans = custSettlement.custVendTrans();
            
            StatisticsOnInvoicesReportLine statisticsOnInvoicesReportLine = new StatisticsOnInvoicesReportLine();
            StatisticsOnInvoicesReportHelper::initFromCustTrans(statisticsOnInvoicesReportLine, custInvoiceTrans);

            CustTransOpen custTransOpen;

            select sum(AmountMST), sum(AmountCur) from custTransOpen
                where custTransOpen.dataAreaId == custInvoiceTrans.dataAreaId
                    && custTransOpen.AccountNum == custInvoiceTrans.AccountNum
                    && custTransOpen.RefRecId == custInvoiceTrans.RecId
                    && custTransOpen.DueDate == custSettlement.DueDate;

            statisticsOnInvoicesReportLine.parmAmountCur(custTransOpen.AmountCur + custSettlement.SettleAmountCur);
            statisticsOnInvoicesReportLine.parmAmountMST(custTransOpen.AmountMST + custSettlement.SettleAmountMST);
            statisticsOnInvoicesReportLine.parmDueDate(custSettlement.DueDate);

            CustVendTransDetails custVendTransDetails = new CustVendTransDetails(custInvoiceTrans, _toDate);
            
            statisticsOnInvoicesReportLine.parmBalanceOnEndDateCur(custVendTransDetails.amountCurSettled());
            statisticsOnInvoicesReportLine.parmBalanceOnEndDateMST(custVendTransDetails.amountMSTSettled());
       
            custVendTransDetails = new CustVendTransDetails(custInvoiceTrans, custSettlement.DueDate);
            
            statisticsOnInvoicesReportLine.parmBalanceOnDueDateCur(custVendTransDetails.amountCurSettled());
            statisticsOnInvoicesReportLine.parmBalanceOnDueDateMST(custVendTransDetails.amountMSTSettled());

            if (!custTransOpen.AmountMST)
            {
                statisticsOnInvoicesReportLine.parmIsPaid(true);
            }

            // closing payment
            if (statisticsOnInvoicesReportLine.parmIsPaid())
            {
                CustSettlement custClosingSettlement;

                while select crosscompany OffsetCompany, OffsetRecid, OffsetAccountNum from custClosingSettlement
                    order by custClosingSettlement.TransDate desc, custClosingSettlement.CreatedDateTime desc
                    where custInvoiceTrans.RecId == custClosingSettlement.TransRecId
                        && custInvoiceTrans.dataAreaId == custClosingSettlement.TransCompany
                        && custInvoiceTrans.AccountNum == custClosingSettlement.AccountNum
                        && custSettlement.DueDate == custClosingSettlement.DueDate
                        && custClosingSettlement.SettleAmountCur > 0
                        && custClosingSettlement.CanBeReversed
                {
                    changecompany(custClosingSettlement.OffsetCompany)
                    {
                        custPaymentTrans.clear();

                        select firstonly custPaymentTrans
                            where custPaymentTrans.RecId == custClosingSettlement.OffsetRecid
                                && custPaymentTrans.AccountNum == custClosingSettlement.OffsetAccountNum
                                && custPaymentTrans.TransType == LedgerTransType::Payment;

                        // payment creditor data
                        if (custPaymentTrans)
                        {
                            CustTable custTable = CustTable::findByCompany(custPaymentTrans.DataAreaId, custPaymentTrans.AccountNum);

                            CustGroup custGroup = CustGroup::find(custTable.CustGroup);
                            CompanyInfo companyInfo = custTable.companyInfo();

                            // payment creditor data
                            statisticsOnInvoicesReportLine.parmPaymentCreditorAccountNum(companyInfo.DataArea);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorName(companyInfo.name());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorAddress(companyInfo.postalAddress().Address);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorCity(companyInfo.postalAddress().City);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorCountry(companyInfo.postalAddress().CountryRegionId);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorZipCode(companyInfo.postalAddress().ZipCode);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorEmail(companyInfo.email());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorFax(companyInfo.teleFax());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorPhone(companyInfo.phone());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorTaxExemptNumber(companyInfo.CoRegNum);
                            statisticsOnInvoicesReportLine.parmPaymentCreditorTaxRegNum(companyInfo.getVatNumPrimaryRegistrationNumber());
                            statisticsOnInvoicesReportLine.parmPaymentCreditorBaseType(companyInfo.baseType());

                            // payment debtor data
                            statisticsOnInvoicesReportLine.parmPaymentDebtorAccountNum(custTable.AccountNum);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorName(custTable.name());
                            statisticsOnInvoicesReportLine.parmPaymentDebtorAddress(custTable.postalAddress().Address);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorCity(custTable.postalAddress().City);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorCountry(custTable.postalAddress().CountryRegionId);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorZipCode(custTable.postalAddress().ZipCode);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorEmail(custTable.email());
                            statisticsOnInvoicesReportLine.parmPaymentDebtorFax(custTable.telefax());
                            statisticsOnInvoicesReportLine.parmPaymentDebtorPhone(custTable.phone());
                            statisticsOnInvoicesReportLine.parmPaymentDebtorGroupCode(custGroup.CustGroup);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorGroupName(custGroup.Name);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorTaxExemptNumber(custTable.VATNum);
                            statisticsOnInvoicesReportLine.parmPaymentDebtorTaxRegNum(custTable.getVatNumPrimaryRegistrationNumber());
                            statisticsOnInvoicesReportLine.parmPaymentDebtorBaseType(custTable.DirPartyTable_FK().baseType());

                            // payment data
                            statisticsOnInvoicesReportLine.parmPaymentAmountCur(custPaymentTrans.AmountCur);
                            statisticsOnInvoicesReportLine.parmPaymentAmountMST(custPaymentTrans.AmountMST);
                            statisticsOnInvoicesReportLine.parmPaymentCorrect(custPaymentTrans.Correct);
                            statisticsOnInvoicesReportLine.parmPaymentCurrencyCode(custPaymentTrans.CurrencyCode);
                            statisticsOnInvoicesReportLine.parmPaymentExchRate(custPaymentTrans.ExchRate);
                            statisticsOnInvoicesReportLine.parmPaymentDocumentDate(custPaymentTrans.DocumentDate);
                            statisticsOnInvoicesReportLine.parmPaymentDocumentNum(custPaymentTrans.DocumentNum);
                            statisticsOnInvoicesReportLine.parmPaymentPostingProfile(custPaymentTrans.PostingProfile);
                            statisticsOnInvoicesReportLine.parmPaymentTransDate(custPaymentTrans.TransDate);
                            statisticsOnInvoicesReportLine.parmPaymentTransType(LedgerTransType::Payment);
                            statisticsOnInvoicesReportLine.parmPaymentVoucher(custPaymentTrans.Voucher);

                            StatisticsOnInvoicesReportHelper::fillVoucherTransactions(statisticsOnInvoicesReportLine);

                            break;
                        }
                    }
                }
            }

            if (custPaymentTrans || custTransOpen)
            {
                StatisticsOnInvoicesReportHelper::fillDaysData(statisticsOnInvoicesReportLine, _toDate);
                reportLines.addEnd(statisticsOnInvoicesReportLine);
            }
        }

        // open transes
        CustTransOpen custTransOpen;
        CustTrans custTransOffset;
        while select sum(AmountMST), sum(AmountCur), DueDate, RefRecId from custTransOpen
            group by custTransOpen.DueDate
                    ,custTransOpen.RefRecId
                where (custTransOpen.TransDate >= _fromDate && custTransOpen.TransDate <= _toDate)
                        || (custTransOpen.DueDate >= _fromDate && custTransOpen.DueDate <= _toDate)
            join custTrans
                where custTrans.RecId == custTransOpen.RefRecId
                && (custTrans.PostingProfile == _postingProfile || !_postingProfile)
                && (custTrans.TransType == LedgerTransType::Sales || custTrans.TransType == LedgerTransType::Cust)
            notexists join custTransOffset
                where custTransOffset.OffsetRecid == custTrans.RecId
                    && custTransOffset.DataAreaId == custTrans.DataAreaId
                    && custTransOffset.AccountNum == custTrans.AccountNum
                    && custTransOffset.DueDate == custTrans.DueDate
                    && custTransOffset.TransType != LedgerTransType::ExchAdjustment
        {
            StatisticsOnInvoicesReportLine statisticsOnInvoicesReportLine = new StatisticsOnInvoicesReportLine();

            CustTrans custInvoiceTrans = custTransOpen.custTrans();
            StatisticsOnInvoicesReportHelper::initFromCustTrans(statisticsOnInvoicesReportLine, custInvoiceTrans);

            statisticsOnInvoicesReportLine.parmDueDate(custTransOpen.DueDate);
            statisticsOnInvoicesReportLine.parmAmountCur(custTransOpen.AmountCur);
            statisticsOnInvoicesReportLine.parmAmountMST(custTransOpen.AmountMST);
            statisticsOnInvoicesReportLine.parmIsPaid(false);

            StatisticsOnInvoicesReportHelper::fillDaysData(statisticsOnInvoicesReportLine, _toDate);
            reportLines.addEnd(statisticsOnInvoicesReportLine);
        }

        return reportLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report line with data from the vendor ivnoice.
    /// </summary>
    /// <param name = "_statisticsOnInvoicesReportLine">Report line.</param>
    /// <param name = "_invoiceTrans">Vendor invoice transaction.</param>
    private static void initFromVendTrans(StatisticsOnInvoicesReportLine _statisticsOnInvoicesReportLine, VendTrans _invoiceTrans)
    {
        VendInvoiceJour invoiceJour = VendInvoiceJour::findFromVendTrans(_invoiceTrans.Invoice, _invoiceTrans.TransDate, _invoiceTrans.AccountNum);
        VendTrans_W vendTransDetails = VendTrans_W::findByVendTrans(_invoiceTrans.RecId);

        // invoice data
        _statisticsOnInvoicesReportLine.parmAccountType(LedgerJournalACType::Vend);
        _statisticsOnInvoicesReportLine.parmCorrect(_invoiceTrans.Correct);
        _statisticsOnInvoicesReportLine.parmCurrencyCode(_invoiceTrans.CurrencyCode);
        _statisticsOnInvoicesReportLine.parmExchRate(_invoiceTrans.ExchRate);
        _statisticsOnInvoicesReportLine.parmDocumentDate(_invoiceTrans.DocumentDate);
        _statisticsOnInvoicesReportLine.parmDocumentNum(_invoiceTrans.DocumentNum);
        _statisticsOnInvoicesReportLine.parmInvoice(_invoiceTrans.Invoice);
        _statisticsOnInvoicesReportLine.parmPaymReference(_invoiceTrans.PaymReference);
        _statisticsOnInvoicesReportLine.parmPaymMode(_invoiceTrans.PaymMode);
        _statisticsOnInvoicesReportLine.parmPaymentTerms(invoiceJour.Payment);
        _statisticsOnInvoicesReportLine.parmPostingProfile(_invoiceTrans.PostingProfile);
        _statisticsOnInvoicesReportLine.parmTransDate(_invoiceTrans.TransDate);
        _statisticsOnInvoicesReportLine.parmTransType(_invoiceTrans.TransType);
        _statisticsOnInvoicesReportLine.parmVoucher(_invoiceTrans.Voucher);
        _statisticsOnInvoicesReportLine.parmReceiveDate(vendTransDetails.PurchReceiptDate_W);
        _statisticsOnInvoicesReportLine.parmInvoiceDate(invoiceJour.InvoiceDate);

        VendTable vendTable = VendTable::find(_invoiceTrans.AccountNum);
        VendGroup vendGroup = VendGroup::find(vendTable.VendGroup);

        // invoice creditor data
        _statisticsOnInvoicesReportLine.parmCreditorAccountNum(_invoiceTrans.AccountNum);
        _statisticsOnInvoicesReportLine.parmCreditorName(vendTable.name());
        _statisticsOnInvoicesReportLine.parmCreditorAddress(vendTable.postalAddress().Address);
        _statisticsOnInvoicesReportLine.parmCreditorCity(vendTable.postalAddress().City);
        _statisticsOnInvoicesReportLine.parmCreditorCountry(vendTable.postalAddress().CountryRegionId);
        _statisticsOnInvoicesReportLine.parmCreditorZipCode(vendTable.postalAddress().ZipCode);
        _statisticsOnInvoicesReportLine.parmCreditorEmail(vendTable.email());
        _statisticsOnInvoicesReportLine.parmCreditorFax(vendTable.telefax());
        _statisticsOnInvoicesReportLine.parmCreditorPhone(vendTable.phone());
        _statisticsOnInvoicesReportLine.parmCreditorGroupCode(vendGroup.VendGroup);
        _statisticsOnInvoicesReportLine.parmCreditorGroupName(vendGroup.Name);
        _statisticsOnInvoicesReportLine.parmCreditorTaxExemptNumber(vendTable.VATNum);
        _statisticsOnInvoicesReportLine.parmCreditorTaxRegNum(vendTable.getVatNumPrimaryRegistrationNumber());
        _statisticsOnInvoicesReportLine.parmCreditorEnterpriseRegNum(vendTable.getEnterpriseNumberPrimaryRegistrationNumber());
        _statisticsOnInvoicesReportLine.parmCreditorPersonID(vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::PersonID));
        _statisticsOnInvoicesReportLine.parmCreditorBirthDate(vendTable.birthDate());
        _statisticsOnInvoicesReportLine.parmCreditorBaseType(vendTable.DirPartyTable().baseType());
        _statisticsOnInvoicesReportLine.parmCreditorCompanyIdSiret(vendTable.CompanyIdSiret);
        _statisticsOnInvoicesReportLine.parmCreditorLineOfBusiness(LineOfBusiness::find(vendTable.LineOfBusinessId).Description);
        
        CompanyInfo companyInfo = vendTable.companyInfo();

        // invoice debtor data
        _statisticsOnInvoicesReportLine.parmDebtorAccountNum(companyInfo.DataArea);
        _statisticsOnInvoicesReportLine.parmDebtorName(companyInfo.name());
        _statisticsOnInvoicesReportLine.parmDebtorAddress(companyInfo.postalAddress().Address);
        _statisticsOnInvoicesReportLine.parmDebtorCity(companyInfo.postalAddress().City);
        _statisticsOnInvoicesReportLine.parmDebtorCountry(companyInfo.postalAddress().CountryRegionId);
        _statisticsOnInvoicesReportLine.parmDebtorZipCode(companyInfo.postalAddress().ZipCode);
        _statisticsOnInvoicesReportLine.parmDebtorEmail(companyInfo.email());
        _statisticsOnInvoicesReportLine.parmDebtorFax(companyInfo.teleFax());
        _statisticsOnInvoicesReportLine.parmDebtorPhone(companyInfo.phone());
        _statisticsOnInvoicesReportLine.parmDebtorTaxExemptNumber(companyInfo.CoRegNum);
        _statisticsOnInvoicesReportLine.parmDebtorTaxRegNum(companyInfo.getVatNumPrimaryRegistrationNumber());
        _statisticsOnInvoicesReportLine.parmDebtorBaseType(companyInfo.baseType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report line with data from the customer ivnoice.
    /// </summary>
    /// <param name = "_statisticsOnInvoicesReportLine">Report line.</param>
    /// <param name = "_invoiceTrans">Customer invoice transaction.</param>
    private static void initFromCustTrans(StatisticsOnInvoicesReportLine _statisticsOnInvoicesReportLine,  CustTrans _invoiceTrans)
    {
        CustInvoiceJour invoiceJour = CustInvoiceJour::findFromCustTrans(_invoiceTrans.Invoice, _invoiceTrans.TransDate, _invoiceTrans.AccountNum);

        // invoice data
        _statisticsOnInvoicesReportLine.parmAccountType(LedgerJournalACType::Cust);
        _statisticsOnInvoicesReportLine.parmCorrect(_invoiceTrans.Correct);
        _statisticsOnInvoicesReportLine.parmCurrencyCode(_invoiceTrans.CurrencyCode);
        _statisticsOnInvoicesReportLine.parmExchRate(_invoiceTrans.ExchRate);
        _statisticsOnInvoicesReportLine.parmDocumentDate(_invoiceTrans.DocumentDate);
        _statisticsOnInvoicesReportLine.parmDocumentNum(_invoiceTrans.DocumentNum);
        _statisticsOnInvoicesReportLine.parmInvoice(_invoiceTrans.Invoice);
        _statisticsOnInvoicesReportLine.parmPaymReference(_invoiceTrans.PaymReference);
        _statisticsOnInvoicesReportLine.parmPaymMode(_invoiceTrans.PaymMode);
        _statisticsOnInvoicesReportLine.parmPaymentTerms(invoiceJour.Payment);
        _statisticsOnInvoicesReportLine.parmPostingProfile(_invoiceTrans.PostingProfile);
        _statisticsOnInvoicesReportLine.parmTransDate(_invoiceTrans.TransDate);
        _statisticsOnInvoicesReportLine.parmTransType(_invoiceTrans.TransType);
        _statisticsOnInvoicesReportLine.parmVoucher(_invoiceTrans.Voucher);
        
        CustTable custTable = CustTable::find(_invoiceTrans.AccountNum);
        CustGroup custGroup = CustGroup::find(custTable.CustGroup);
        CompanyInfo companyInfo = custTable.companyInfo();

        // invoice creditor data
        _statisticsOnInvoicesReportLine.parmCreditorAccountNum(companyInfo.DataArea);
        _statisticsOnInvoicesReportLine.parmCreditorName(companyInfo.name());
        _statisticsOnInvoicesReportLine.parmCreditorAddress(companyInfo.postalAddress().Address);
        _statisticsOnInvoicesReportLine.parmCreditorCity(companyInfo.postalAddress().City);
        _statisticsOnInvoicesReportLine.parmCreditorCountry(companyInfo.postalAddress().CountryRegionId);
        _statisticsOnInvoicesReportLine.parmCreditorZipCode(companyInfo.postalAddress().ZipCode);
        _statisticsOnInvoicesReportLine.parmCreditorEmail(companyInfo.email());
        _statisticsOnInvoicesReportLine.parmCreditorFax(companyInfo.teleFax());
        _statisticsOnInvoicesReportLine.parmCreditorPhone(companyInfo.phone());
        _statisticsOnInvoicesReportLine.parmCreditorTaxExemptNumber(companyInfo.CoRegNum);
        _statisticsOnInvoicesReportLine.parmCreditorTaxRegNum(companyInfo.getVatNumPrimaryRegistrationNumber());
        _statisticsOnInvoicesReportLine.parmCreditorEnterpriseRegNum(companyInfo.getEnterpriseNumberPrimaryRegistrationNumber());
        _statisticsOnInvoicesReportLine.parmCreditorPersonID(companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::PersonID));
        _statisticsOnInvoicesReportLine.parmCreditorBaseType(companyInfo.baseType());

        // invoice debtor data
        _statisticsOnInvoicesReportLine.parmDebtorAccountNum(custTable.AccountNum);
        _statisticsOnInvoicesReportLine.parmDebtorName(custTable.name());
        _statisticsOnInvoicesReportLine.parmDebtorAddress(custTable.postalAddress().Address);
        _statisticsOnInvoicesReportLine.parmDebtorCity(custTable.postalAddress().City);
        _statisticsOnInvoicesReportLine.parmDebtorCountry(custTable.postalAddress().CountryRegionId);
        _statisticsOnInvoicesReportLine.parmDebtorZipCode(custTable.postalAddress().ZipCode);
        _statisticsOnInvoicesReportLine.parmDebtorEmail(custTable.email());
        _statisticsOnInvoicesReportLine.parmDebtorFax(custTable.telefax());
        _statisticsOnInvoicesReportLine.parmDebtorPhone(custTable.phone());
        _statisticsOnInvoicesReportLine.parmDebtorGroupCode(custGroup.CustGroup);
        _statisticsOnInvoicesReportLine.parmDebtorGroupName(custGroup.Name);
        _statisticsOnInvoicesReportLine.parmDebtorTaxExemptNumber(custTable.VATNum);
        _statisticsOnInvoicesReportLine.parmDebtorTaxRegNum(custTable.getVatNumPrimaryRegistrationNumber());
        _statisticsOnInvoicesReportLine.parmDebtorBaseType(custTable.DirPartyTable_FK().baseType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDaysData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the intervals between dates.
    /// </summary>
    /// <param name = "_statisticsOnInvoicesReportLine">Report line.</param>
    /// <param name = "_toDate">The end of period date.</param>
    private static void fillDaysData(StatisticsOnInvoicesReportLine _statisticsOnInvoicesReportLine, date _toDate)
    {
        _statisticsOnInvoicesReportLine.parmDaysEndDue(_toDate - _statisticsOnInvoicesReportLine.parmDueDate());
        _statisticsOnInvoicesReportLine.parmDaysEndInvPost(_toDate - _statisticsOnInvoicesReportLine.parmTransDate());
        _statisticsOnInvoicesReportLine.parmDaysEndReceive(_toDate - _statisticsOnInvoicesReportLine.parmReceiveDate());


        _statisticsOnInvoicesReportLine.parmDaysPaymDue(_statisticsOnInvoicesReportLine.parmPaymentTransDate() - _statisticsOnInvoicesReportLine.parmDueDate());
        if(_statisticsOnInvoicesReportLine.parmDocumentDate())
        {
            _statisticsOnInvoicesReportLine.parmDaysPaymInv(_statisticsOnInvoicesReportLine.parmPaymentTransDate() - _statisticsOnInvoicesReportLine.parmDocumentDate());
            _statisticsOnInvoicesReportLine.parmDaysEndInv(_toDate - _statisticsOnInvoicesReportLine.parmDocumentDate());
        }
        else
        {
            _statisticsOnInvoicesReportLine.parmDaysPaymInv(_statisticsOnInvoicesReportLine.parmPaymentTransDate() - _statisticsOnInvoicesReportLine.parmTransDate());
            _statisticsOnInvoicesReportLine.parmDaysEndInv(_toDate - _statisticsOnInvoicesReportLine.parmTransDate());
        }
        _statisticsOnInvoicesReportLine.parmDaysPaymInvPost(_statisticsOnInvoicesReportLine.parmPaymentTransDate() - _statisticsOnInvoicesReportLine.parmTransDate());
        _statisticsOnInvoicesReportLine.parmDaysPaymEndReceive(_statisticsOnInvoicesReportLine.parmPaymentTransDate() - _statisticsOnInvoicesReportLine.parmReceiveDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillVoucherTransactions</Name>
				<Source><![CDATA[
    private static void fillVoucherTransactions(StatisticsOnInvoicesReportLine _statisticsOnInvoicesReportLine)
    {
        List voucherTransactions = new List(Types::Class);

        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;

        while select RecId from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.Voucher == _statisticsOnInvoicesReportLine.parmVoucher()
                && subledgerVoucherGeneralJournalEntry.AccountingDate == _statisticsOnInvoicesReportLine.parmInvoiceDate()
            join RecId from generalJournalEntry
                where GeneralJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
            join AccountingCurrencyAmount, PostingType from generalJournalAccountEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
            join MainAccountId from mainAccount
                where mainAccount.RecId == generalJournalAccountEntry.MainAccount
        {
            StatisticsOnInvoicesReportVoucherTransaction voucherTransaction = new StatisticsOnInvoicesReportVoucherTransaction();
            voucherTransaction.parmAccountingCurrencyAmount(generalJournalAccountEntry.AccountingCurrencyAmount);
            voucherTransaction.parmAccountName(mainAccount.MainAccountId);
            voucherTransaction.parmLedgerPostingType(generalJournalAccountEntry.PostingType);

            voucherTransactions.addEnd(voucherTransaction);
        }

        _statisticsOnInvoicesReportLine.parmVoucherTransactions(voucherTransactions);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>