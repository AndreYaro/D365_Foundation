<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
#RPayTaxCalcTypes
class rPayTaxCalc
{
    RPayTaxEmplLoanLucreReverse loanLucreReverse;

    RPayTaxCalcTypeFactory  taxTypeFactory;
    RPayTaxCalcContext      taxCalcContext;
    Map                     taxAmount2RefundDeduction;
    RPayAmount              limitationAmount;

    boolean isWithhold;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>imposeTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Imposes tax.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void imposeTax()
    {
        IRPayTaxCalcList        emplStateList,
                                taxCalcDataListDiff;
        RPayTaxCalcState        taxCalcState;

        //create list with employee's state
        emplStateList = taxTypeFactory.getTaxEmplStateList();

        //folds employee's state list to integral state which is represents imposed tax result
        //apply functor wich calculates tax amounts by equation Ti = (IncomeTotal - Dother - Dstd)*rate - T(i-1) for each emploiyee's tax state
        taxCalcState  = emplStateList.fold(taxTypeFactory.getImposeTaxFunctor(), taxTypeFactory.getCalcState(), taxCalcContext);

        taxAmount2RefundDeduction = taxCalcState.taxAmount2RefundDeduction();

        //map periods to stored data
        //apply functor dT = Ti - Ts for each period
        //dT - delta between stored tax and calculated tax
        //Ti - calculated tax in this session
        //Ts - stored tax in the database
        taxCalcDataListDiff = emplStateList.map(taxTypeFactory.getPeriodSubstractFunctor(taxCalcState), taxCalcContext);

        //persist imposed tax
        taxCalcDataListDiff.iter(taxTypeFactory.getImposeSerializerFunctor(), taxCalcContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void init(RHRMPayMainEmplId _mainEmplId, RPayAmount _limitationAmount, boolean _withhold)
    {
        taxCalcContext = new RPayTaxCalcContext();
        taxCalcContext.parmEmplId(_mainEmplId);
        taxCalcContext.parmPayPeriodOpen(RPayParameters::payPeriod(_mainEmplId));
        taxCalcContext.parmType(#BaseType);

        taxTypeFactory = RPayTaxCalcTypeFactory::construct(taxCalcContext);

        isWithhold          = _withhold;
        limitationAmount    = _limitationAmount;

        loanLucreReverse = RPayTaxEmplLoanLucreReverse::construct(_mainEmplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListPeriods2Withhold</Name>
				<Source><![CDATA[
        private RPayTaxCalcDataList initListPeriods2Withhold()
    {
        RPayTaxCalcDataList taxCalcDataListPeriods;

        Query query;
        QueryBuildDataSource qbdsSum;
        QueryRun qr;

        query = new Query();
        qbdsSum = query.addDataSource(tableNum(RPayTaxEmplSum));
        qbdsSum.addSelectionField(fieldNum(RPayTaxEmplSum, CorrectedPeriod));
        qbdsSum.addGroupByField(fieldNum(RPayTaxEmplSum, CorrectedPeriod));
        qbdsSum.orderMode(OrderMode::GroupBy);
        findOrCreateRange_W(qbdsSum, fieldNum(RPayTaxEmplSum, EmplId), queryValue(taxCalcContext.parmEmplId()));
        findOrCreateRange_W(qbdsSum, fieldNum(RPayTaxEmplSum, PayPeriod), queryValue(taxCalcContext.parmPayPeriodOpen()));

        qr = new QueryRun(query);

        taxCalcDataListPeriods = taxTypeFactory.getTaxCalcDataList() as RPayTaxCalcDataList;
        taxCalcDataListPeriods.parmQueryRun(qr);

        return taxCalcDataListPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares data for calculation.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void prepareData()
    {
        RPayTaxEmplSum      taxEmplSum;
        RPayTaxEmplTrans    taxEmplTrans;

        delete_from taxEmplTrans
            where taxEmplTrans.Manual == NoYes::No
            exists join taxEmplSum
                where taxEmplSum.EmplId    == taxCalcContext.parmEmplId()
                   && taxEmplSum.PayPeriod >= taxCalcContext.parmPayPeriodOpen()
                   && taxEmplSum.RecId     == taxEmplTrans.TaxSumRecId;

        delete_from taxEmplSum
            where taxEmplSum.EmplId    == taxCalcContext.parmEmplId()
               && taxEmplSum.PayPeriod >= taxCalcContext.parmPayPeriodOpen()
               && taxEmplSum.Source    == NoYes::No
            notexists join taxEmplTrans
                where taxEmplTrans.TaxSumRecId == taxEmplSum.RecId;

        RPayTaxSumYear::updateTaxSumYear(taxCalcContext.parmEmplId(), dateStartYr(taxCalcContext.parmPayPeriodOpen()) - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the calculation.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runCalc()
    {
        if (RHRMEmplTable::find(taxCalcContext.parmEmplId()).personTable().TaxPayBlocked)
        {
            return;
        }

        ttsbegin;
        this.prepareData();

        if (isWithhold)
        {
            loanLucreReverse.run();
        }

        this.imposeTax();

        if (isWithhold)
        {
            this.withholdTax();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withholdTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes into account tax withhold.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void withholdTax()
    {
        RPayTaxCalcDataList    withholdTaxPeriodsList = this.initListPeriods2Withhold();
        RPayTaxWithholdClosure withholdClosure = new RPayTaxWithholdClosure();

        withholdClosure.parmLimitWithholdAmount(limitationAmount);
        withholdClosure.parmTaxAmount2RefundDeduction(taxAmount2RefundDeduction);

        withholdTaxPeriodsList.iter(taxTypeFactory.getTaxWithholdFunctor(withholdClosure), taxCalcContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxForPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax for person.
    /// </summary>
    /// <param name="_mainEmplId">
    /// The primary employee id.
    /// </param>
    /// <param name="_limitationAmount">
    /// The amount limit.
    /// </param>
    /// <param name="_withhold">
    /// Withhold if true.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void calcTaxForPerson(RHRMPayMainEmplId _mainEmplId, RPayAmount _limitationAmount = 0, boolean _withhold = false)
    {
        RPayTaxCalc::run(RPayTaxCalc::packParms(_mainEmplId, _limitationAmount, _withhold));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayTaxCalc construct(RHRMPayMainEmplId _mainEmplId, RPayAmount _limitationAmount, boolean _withhold)
    {
        RPayTaxCalc taxCalc = new RPayTaxCalc();

        taxCalc.init(_mainEmplId, _limitationAmount,  _withhold);

        return taxCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs parameters of the calculation.
    /// </summary>
    /// <param name="_mainEmplId">
    /// The primary employee id.
    /// </param>
    /// <param name="_limitationAmount">
    /// The limitation amount.
    /// </param>
    /// <param name="_withhold">
    /// Withhold if true.
    /// </param>
    /// <returns>
    /// The parameters packed.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static container packParms(RHRMPayMainEmplId _mainEmplId, RPayAmount _limitationAmount, boolean _withhold)
    {
        return [_mainEmplId, _limitationAmount, _withhold];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the overall calculation.
    /// </summary>
    /// <param name="_packedParms">
    /// The packed parameters.
    /// </param>
    /// <returns>
    /// An empty container.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static container run(container _packedParms)
    {
        RPayTaxCalc taxCalc;

        taxCalc = RPayTaxCalc::construct(conPeek(_packedParms, 1),
                                         conPeek(_packedParms, 2),
                                         conPeek(_packedParms, 3));
        taxCalc.runCalc();

        return conNull();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>