<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_InventReceiptTotal</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_InventReceiptTotal extends RTax25RegCalc implements BatchRetryable
{
    #define.profitDescr(10)
    #define.receiptAmount(13)
    #define.issueAmount(16)
    #define.NumOfKeys(3)
    #define.NumOfData(2)
    #define.ConPos2(2)
    #define.ConPos3(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        RTax25RegisterJournalTrans  inventReceiptTrans;
        RefRecId                    profitTableRecId;
        RTax25Query                 query;
        KeySum                      totals;
        int                         idx;
        Amount                      receiptTotal, issueTotal;

        try
        {
            ttsbegin;

            super();

            inventReceiptTrans = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::InventReceipt,
                                                                                registerJournalTrans);
            query = RTax25Query::newParameters(RTax25RegisterType::InventReceipt, inventReceiptTrans, true);

            if (query.first())
            {
                this.progressInit("", query.getTotalRecCount());
                progress.setText("@SYS26577");

                totals = KeySum::construct(#NumOfKeys,#NumOfData, 1);

                do
                {
                    progress.incCount();

                    profitTableRecId = query.getRecord().rTax25ProfitTable;

                    totals.updateNow([RTax25ProfitTable::find(profitTableRecId).ProfitType, // profit type
                                      query.getField(#profitDescr),                          // profit description
                                      profitTableRecId],                                    // profit rec Id
                                     [query.getField(#receiptAmount),                          // receipt amount
                                      query.getField(#issueAmount)]);                        // issue amount
                }
                while (query.next());

                regQuery.addHeaderRecord();

                for (idx = 1; idx <= totals.numOfTrans(); idx ++)
                {
                    regQuery.addBodyRecord(conPeek(totals.index2Key(idx),#ConPos3),
                                           conIns(totals.index2Data(idx),1,conPeek(totals.index2Key(idx),#ConPos2)));
                    receiptTotal += conPeek(totals.index2Data(idx), 1);
                    issueTotal   += conPeek(totals.index2Data(idx), #ConPos2);
                }

                regQuery.addFooterRecord(0, ["", receiptTotal, issueTotal], 0);
            }

            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>