<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcSourceDocumentLineUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCSourceDocumentLineUtility</c> class is the utility class that is used to update fields and
/// data that is related to the source document line.
/// </summary>
class PcSourceDocumentLineUtility
{
    TransDate   transDate;
    InventDim   inventDim;
    InventQty   inventQty;
    InventDimId inventDimId;

    boolean isSourceLineEditable = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory dimension record.
    /// </summary>
    /// <returns>
    /// An inventory dimension record.
    /// </returns>
    public InventDim getInventDim()
    {
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory dimension Id.
    /// </summary>
    /// <returns>An inventory dimension Id.</returns>
    public InventDimId getInventDimId()
    {
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory quantity.
    /// </summary>
    /// <returns>An inventory quantity.</returns>
    public InventQty getInventQuantity()
    {
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIssueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the issue date.
    /// </summary>
    /// <returns>
    /// The issue date.
    /// </returns>
    public TransDate getIssueDate()
    {
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes issue values and validates that the item line can be processed for the product configuration.
    /// </summary>
    /// <param name="_itemLine">
    ///    The item line for the initialization.
    /// </param>
    /// <returns>
    /// true if a source line is valid; otherwise, false.
    /// </returns>
    protected boolean initializeFromCommon(Common _itemLine)
    {
        boolean isValidSourceLine = false;

        switch (_itemLine.TableId)
        {
            case tableNum(SalesLine):
                SalesLine salesLine = _itemLine as SalesLine;
                if (salesLine.RecId && salesLine.InventDimId && salesLine.InventTransId)
                {
                    inventDimId         = salesLine.InventDimId;
                    transDate           = InventTrans::findTransId(salesLine.InventTransId).DateStatus;
                    inventQty           = salesLine.QtyOrdered;
                    isValidSourceLine   = true;
                }
                break;
            case tableNum(SalesQuotationLine):
                SalesQuotationLine salesQuotationLine = _itemLine as SalesQuotationLine;
                if (salesQuotationLine.RecId && salesQuotationLine.InventDimId && salesQuotationLine.InventTransId)
                {
                    SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(salesQuotationLine.QuotationId);
                    inventDimId             = salesQuotationLine.InventDimId;
                    transDate               = InventTrans::findTransId(salesQuotationLine.InventTransId).DateStatus;
                    inventQty               = salesQuotationLine.QtyOrdered;
                    isSourceLineEditable    = salesQuotationTable.isWBSEditable() || salesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent;
                    isValidSourceLine       = true;
                }
                break;
            case tableNum(PurchLine):
                PurchLine purchaseOrderLine = _itemLine as PurchLine;
                if (purchaseOrderLine.RecId && purchaseOrderLine.InventDimId && purchaseOrderLine.InventTransId)
                {
                    inventDimId = purchaseOrderLine.InventDimId;
                    transDate   = InventTrans::findTransId(purchaseOrderLine.InventTransId).DateStatus;
                    inventQty   = purchaseOrderLine.QtyOrdered;
                    isValidSourceLine = true;
                }
                break;
            case tableNum(SalesBasketLine):
                SalesBasketLine salesBasketLine = _itemLine as SalesBasketLine;
                if (salesBasketLine.RecId && salesBasketLine.InventDimId)
                {
                    inventDimId         = salesBasketLine.InventDimId;
                    transDate           = InventTrans::findTransId(salesBasketLine.BasketTransId).DateStatus;
                    inventQty           = salesBasketLine.SalesQty;
                    isValidSourceLine   = true;
                }
                break;
            case tableNum(SalesQuotationBasketLine):
                SalesQuotationBasketLine salesQuotationBasketLine = _itemLine as SalesQuotationBasketLine;
                if (salesQuotationBasketLine.RecId && salesQuotationBasketLine.InventDimId)
                {
                    inventDimId         = salesQuotationBasketLine.InventDimId;
                    transDate           = InventTrans::findTransId(salesQuotationBasketLine.BasketTransId).DateStatus;
                    inventQty           = salesQuotationBasketLine.SalesQty;
                    isValidSourceLine   = true;
                }
                break;
            case tableNum(ProdTable):
                //
                //the record is created only after it is configured,
                //so it should be exempt from having RecID unless on re-configuration
                //
                ProdTable productionOrderLine = _itemLine as ProdTable;
                if (productionOrderLine.InventDimId)
                {
                    inventDimId         = productionOrderLine.InventDimId;
                    transDate           = InventTrans::findTransId(productionOrderLine.InventTransId).DateStatus;
                    inventQty           = productionOrderLine.QtySched;
                    isValidSourceLine   = true;
                }
                break;
        }

        return isValidSourceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes issue values and validates that the item line can be processed for the product configuration.
    /// </summary>
    /// <param name="_itemLine">
    ///    The item line to check.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_itemLine" /> parameter contains the wrong type of record.
    /// </exception>
    /// <remarks>
    ///    The current company must be the legal entity of the source document line when calling this method.
    ///    Otherwise the correct <c>InventDim</c> record will not be found, or in the case of virtual companies
    ///    the <c>company()</c> method on the selected <c>InventDim</c> record will yield an incorrect result.
    /// </remarks>
    public void initialize(Common _itemLine)
    {
        boolean isValidSourceLine = this.initializeFromCommon(_itemLine);

        if (!isValidSourceLine)
        {
            throw error(Error::missingRecord(funcName()));
        }

        // The current company context must be the legal entity of the source document line for this select to yield the correct result.
        inventDim = InventDim::find(inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceLineEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a value indicating if the source line is editable or not.
    /// </summary>
    /// <returns>True if the source line is editable; false, otherwise.</returns>
    public boolean isSourceLineEditable()
    {
        return isSourceLineEditable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the details of the specified item line.
    /// </summary>
    /// <param name="_itemLine">
    /// The item line to update.
    /// </param>
    /// <param name="_bomId">
    /// The BOM ID for the line.
    /// </param>
    /// <param name="_routeId">
    /// The route ID for the line.
    /// </param>
    /// <param name="_price">
    /// The price value for the line.
    /// </param>
    /// <param name="_deliveryDate">
    /// The delivery date value for the line.
    /// </param>
    /// <param name="_newInventDimId">
    /// The inventory dimension ID for the line.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether the item line will be updated in the database; optional.
    /// </param>
    /// <returns>
    /// The updated item line.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The parameters specified were not valid.
    /// </exception>
    public Common updateLineDetails(Common _itemLine, BOMId _bomId, RouteId _routeId, real _price, date _deliveryDate, InventDimId _newInventDimId, boolean _update= true)
    {
        RecVersion oldRecVersion;

        oldRecVersion = _itemLine.recVersion;
        _itemLine.selectForUpdate(true);
        _itemLine.reread();
        this.validateSourceLine(oldRecVersion, _itemLine);

        switch (_itemLine.TableId)
        {
            case tableNum(SalesLine)                :
                this.updateSalesLineDetails(_itemLine, _bomId, _routeId, _price, _deliveryDate, _newInventDimId, _update);
                break;
            case tableNum(SalesQuotationLine)       :
                this.updateSalesQuotationLineDetails(_itemLine,  _bomId, _routeId, _price, _newInventDimId, _update);
                break;
            case tableNum(PurchLine)                :
                this.updatePurchaseLineDetails(_itemLine,  _bomId, _routeId, _price, _deliveryDate, _newInventDimId, _update);
                break;
            case tableNum(SalesBasketLine)          :
                this.updateSalesBasketLineDetails(_itemLine,  _bomId, _routeId, _price, _deliveryDate, _newInventDimId, _update);
                break;
            case tableNum(SalesQuotationBasketLine) :
                this.updateSalesQuotationBasketLineDetails(_itemLine,  _bomId, _routeId, _price, _deliveryDate, _newInventDimId, _update);
                break;
            case tableNum(ProdTable)       :
                this.updateProductionLineDetails(_itemLine, _bomId, _routeId, _newInventDimId, _update);
                break;
            default:
                if (!this.updateCommonLineDetails(_itemLine, _bomId, _routeId, _price, _deliveryDate, _newInventDimId, _update))
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }
        return _itemLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommonLineDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates common line details.
    /// </summary>
    /// <param name="_itemLine">The item line to update.</param>
    /// <param name="_bomId">The BOM ID for the line.</param>
    /// <param name="_routeId">The route ID for the line.</param>
    /// <param name="_price">The price value for the line.</param>
    /// <param name="_deliveryDate">The delivery date value for the line.</param>
    /// <param name="_newInventDimId">The inventory dimension ID for the line.</param>
    /// <param name="_update">A Boolean value that indicates whether the item line will be updated in the database; optional.</param>
    /// <returns>true if common line details is updated; otherwise, false.</returns>
    protected boolean updateCommonLineDetails(Common _itemLine, BOMId _bomId, RouteId _routeId, real _price, date _deliveryDate, InventDimId _newInventDimId, boolean _update)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProductionLineDetails</Name>
				<Source><![CDATA[
    protected void updateProductionLineDetails(ProdTable _productionLine, BOMId _bomId, RouteId _routeId, InventDimId _newInventDimId, boolean _update= true)
    {
        _productionLine.InventDimId = _newInventDimId;
        _productionLine.bomId = _bomId;
        _productionLine.RouteId = _routeId;
        if (_productionLine && _update)
        {
            _productionLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchaseLineDetails</Name>
				<Source><![CDATA[
    protected void updatePurchaseLineDetails(PurchLine _purchaseLine, BOMId _bomId, RouteId _routeId, real _price, date _deliveryDate, InventDimId _newInventDimId, boolean _update= true)
    {
        if (_purchaseLine.InventDimId != _newInventDimId)
        {
            _purchaseLine.InventDimId = _newInventDimId;
            _purchaseLine.initFromProductDimensions(InventDim::find(_newInventDimId));
        }

        _purchaseLine.ItemBOMId = _bomId;
        _purchaseLine.ItemRouteId = _routeId;
        if (_price || _deliveryDate)
        {
            if (_purchaseLine)
            {
                // If the price is not equal to 0
                if (_price)
                {
                    _purchaseLine.PurchPrice   = _price;
                    _purchaseLine.LineAmount   = _purchaseLine.calcLineAmount();
                    _purchaseLine.setPriceDiscChangePolicy(PriceDiscSystemSource::ProductConfig);
                }
                if (_deliveryDate)
                {
                    _purchaseLine.ConfirmedDlv = _deliveryDate;
                }
            }
        }
        if (_update)
        {
            _purchaseLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesBasketLineDetails</Name>
				<Source><![CDATA[
    protected void updateSalesBasketLineDetails(SalesBasketLine _salesBasketLine, BOMId _bomId, RouteId _routeId, real _price, date _deliveryDate, InventDimId _newInventDimId, boolean _update= true)
    {
        _salesBasketLine.InventDimId = _newInventDimId;
        _salesBasketLine.ItemBOMId = _bomId;
        _salesBasketLine.ItemRouteId = _routeId;
        if (_price || _deliveryDate)
        {
            if (_salesBasketLine)
            {
                // If the price is not equal to 0
                if (_price)
                {
                    _salesBasketLine.SalesPrice   = _price;
                    _salesBasketLine.LineAmount   = _salesBasketLine.calcLineAmount();
                    if (_update)
                    {
                        _salesBasketLine.update();
                    }
                }

                // If the date is not equal to 0
                if (_deliveryDate)
                {
                    _salesBasketLine.ConfirmedDlv = _deliveryDate;
                    if (_update)
                    {
                        if (_price)
                        {
                            // If update has already been called then we only need doUpdate here
                            _salesBasketLine.doUpdate();
                        }
                        else
                        {
                            _salesBasketLine.update();
                        }
                    }
                }
            }
        }
        else
        {
            if (_update)
            {
                _salesBasketLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesLineDetails</Name>
				<Source><![CDATA[
    protected void updateSalesLineDetails(SalesLine _salesLine, BOMId _bomId, RouteId _routeId, real _price, date _deliveryDate, InventDimId _newInventDimId, boolean _update= true)
    {
        if (_salesLine.InventDimId != _newInventDimId)
        {
            _salesLine.InventDimId = _newInventDimId;
            _salesLine.initFromProductDimensions(InventDim::find(_newInventDimId));
        }
        _salesLine.ItemBOMId = _bomId;
        _salesLine.ItemRouteId = _routeId;

        if (_price || _deliveryDate)
        {
            if (_salesLine)
            {
                // If the price is not equal to 0
                if (SalesLineConfigureProductConfiguredPriceSetFlight::instance().isEnabled())
                {
                    if (_price)
                    {
                        _salesLine.SalesPrice   = _price;
                        _salesLine.LineAmount   = _salesLine.calcLineAmount();
                        _salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::ProductConfig);

                        if (_update)
                        {
                            _salesLine.update();
                        }
                    }
                    else 
                    {
                        if (_salesLine.salesPurchLineInterface().priceAgreementExists(_salesLine.inventDim()))
                        {
                            _salesLine.setPriceDisc(_salesLine.inventDim());

                            if (_update)
                            {
                                _salesLine.update();
                            }
                        }
                    }
                }
                else
                {
                    if (SalesLineConfigureProductTradeAgreementPriceSetFlight::instance().isEnabled()
                        && _salesLine.salesPurchLineInterface().priceAgreementExists(_salesLine.inventDim()))
                    {
                        _salesLine.setPriceDisc(_salesLine.inventDim());
                    }
                    else
                    {
                        _salesLine.SalesPrice   = _price;
                        _salesLine.LineAmount   = _salesLine.calcLineAmount();
                        _salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::ProductConfig);
                    }
                    if (_update)
                    {
                        _salesLine.update();
                    }
                }

                // If the date is not equal to 0
                if (_deliveryDate)
                {
                    _salesLine.ConfirmedDlv = _deliveryDate;

                    //  use the enhanced date update
                    _salesLine.ShippingDateConfirmed = _deliveryDate;
                    _salesLine.modifiedFieldDDC(fieldNum(SalesLine, ShippingDateConfirmed));
                    if (_salesLine.DeliveryDateControlType == SalesDeliveryDateControlType::None)
                    {
                        _salesLine.ReceiptDateConfirmed = _salesLine.ShippingDateConfirmed;
                    }
                    if (_update)
                    {
                        if (_price)
                        {
                            // If update has already been called then we only need doUpdate here
                            _salesLine.doUpdate();
                        }
                        else
                        {
                            _salesLine.update();
                        }
                    }
                    if (FormDataUtil::getFormDataSource(_salesLine))
                    {
                        FormDataUtil::getFormDataSource(_salesLine).reread();
                    }
                }
            }
        }
        else
        {
            if (_update)
            {
                _salesLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationBasketLineDetails</Name>
				<Source><![CDATA[
    protected void updateSalesQuotationBasketLineDetails(SalesQuotationBasketLine _salesQuotationBasketLine, BOMId _bomId, RouteId _routeId, real _price, date _deliveryDate, InventDimId _newInventDimId, boolean _update= true)
    {
        _salesQuotationBasketLine.InventDimId = _newInventDimId;
        _salesQuotationBasketLine.ItemBomId = _bomId;
        _salesQuotationBasketLine.ItemRouteId = _routeId;
        if (_price || _deliveryDate)
        {
            if (_salesQuotationBasketLine)
            {
                // If the price is not equal to 0
                if (_price)
                {
                    _salesQuotationBasketLine.SalesPrice   = _price;
                    _salesQuotationBasketLine.LineAmount   = _salesQuotationBasketLine.calcLineAmount();
                    if (_update)
                    {
                        _salesQuotationBasketLine.update();
                    }
                }

                // If the date is not equal to 0
                if (_deliveryDate)
                {
                    _salesQuotationBasketLine.ConfirmedDlv = _deliveryDate;
                    if (_update)
                    {
                        if (_price)
                        {
                            // If update has already been called then we only need doUpdate here
                            _salesQuotationBasketLine.doUpdate();
                        }
                        else
                        {
                            _salesQuotationBasketLine.update();
                        }
                    }
                }
            }
        }
        else
        {
            if (_update)
            {
                _salesQuotationBasketLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationLineDetails</Name>
				<Source><![CDATA[
    protected void updateSalesQuotationLineDetails(SalesQuotationLine _salesQuotationLine, BOMId _bomId, RouteId _routeId, real _price, InventDimId _newInventDimId, boolean _update= true)
    {
        if (_salesQuotationLine.InventDimId != _newInventDimId)
        {
            _salesQuotationLine.InventDimId = _newInventDimId;
            _salesQuotationLine.initFromProductDimensions(InventDim::find(_newInventDimId));
        }

        _salesQuotationLine.ItemBOMId = _bomId;
        _salesQuotationLine.ItemRouteId = _routeId;
        if (_price)
        {
            if (_salesQuotationLine)
            {
                // If the price is not equal to 0
                if (_price)
                {
                    _salesQuotationLine.SalesPrice   = _price;
                    _salesQuotationLine.LineAmount   = _salesQuotationLine.calcLineAmount();
                    _salesQuotationLine.setPriceDiscChangePolicy(PriceDiscSystemSource::ProductConfig);
                }
            }
        }
        if (_update)
        {
            _salesQuotationLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the source line is still current and has not been updated by another process.
    /// If not, throws an error.
    /// </summary>
    /// <param name="_original">
    /// Original record version.
    /// </param>
    /// <param name="_current">
    /// Current source line.
    /// </param>
    /// <exception cref="Exception::Error">
    /// throws error if current record version is different from the original one.
    /// </exception>
    protected void validateSourceLine(RecVersion _original, Common _current)
    {
        if (!this.isRecVersionEqual(_original, _current))
        {
            throw error(strFmt("@SYS4003943", tableId2name(_current.TableId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecVersionEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the source line is still current and has not been updated by another process.
    /// </summary>
    /// <param name = "_original"> Original record version. </param>
    /// <param name = "_current"> Current source line. </param>
    /// <returns> 
    /// True if the record is valid; otherwise false.
    /// </returns>
    protected boolean isRecVersionEqual(RecVersion _original, Common _current)
    {
        return _original == _current.recVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCSourceDocumentLineUtility construct()
    {
        return new PCSourceDocumentLineUtility();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>