<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResFrontLoadCapacity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reserve processor class that front loads capacity
/// from beginning of specified date range until specified capacity is reserved
/// </summary>
public class ResFrontLoadCapacity extends ResRemainingCapacity implements ResIReserveProcessor
{
    private Map resourceSchedules;
    private Map resourceReservationTypes;
    private real scheduleRemainingCapacity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert another schedule to be booked.
    /// </summary>
    /// <param name = "_array">Array of schedules.</param>
    /// <param name = "_position">Position where to insert the new schedule.</param>
    /// <param name = "_schedule">Schedule object.</param>
    /// <returns>Updated array of schedules.</returns>
    private Array insertSchedule(Array _array, int _position, ResIReservationSchedule _schedule)
    {
        int i;
        int arraySize = _array.lastIndex();
        Array newArray = new Array(Types::Class);

        for (i = 1; i <= arraySize; i++)
        {
            if (i < _position)
            {
                newArray.value(i, _array.value(i));
            }
            else
            {
                newArray.value(i + 1, _array.value(i));
            }
        }

        newArray.value(_position, _schedule);

        return newArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserves the remaining capacity of the specified schedules
    /// from the earliest schedule until expected capacity are reserved.
    /// </summary>
    /// <returns>True when the operation succeeds. Otherwise, false.</returns>
    public boolean reserve()
    {
        boolean result = true;
        ActivityResourceRecId activityResource;
        boolean resolveActivityResources;
        boolean activityResourceExistsBeforeReserve;
        Array activityResourceSchedules;
        int scheduleCount;
        ListEnumerator enum = schedules.getEnumerator();
        List activityResourceCreateByThisMethodList = new List(Types::Int64);

        ResReservationType reservationType;
        boolean isResource;
        ActivityRecId activity;
        ResCommitType commitment;

        ttsbegin;

        // create resourceSchedules map which sorted by scheduling start date with activity resource as key and schedules in an arry from the scheduling list
        // create resourceReservationTypes map which will cointains the list of resources with activity resource as key from scheduling list
        while (enum.moveNext() && result)
        {
            schedule = enum.current();
            result = result && this.resolveResourceCategory(schedule);
            [resolveActivityResources, activityResourceExistsBeforeReserve] = this.resolveActivityResources(schedule);
            result = result && resolveActivityResources;

            activityResource = schedule.ActivityResource();
            if (resolveActivityResources && !activityResourceExistsBeforeReserve)
            {
                activityResourceCreateByThisMethodList.addEnd(activityResource);
            }
            if (schedule.activity() && schedule.activityType() == PSARSEntityType::None)
            {
                schedule.activityType(ActivityFacade::getActivityType(schedule.activity()));
            }

            if (resourceSchedules.exists(activityResource))
            {
                //we will need to sort schedule objects by there start date
                activityResourceSchedules = resourceSchedules.lookup(activityResource);

                scheduleCount = activityResourceSchedules.lastIndex();
                for (int i = 1; i <= scheduleCount; i++)
                {
                    ResIReservationSchedule scheduleTmp = activityResourceSchedules.value(i);
                    if (scheduleTmp.Start() > schedule.Start())
                    {
                        activityResourceSchedules = this.insertSchedule(activityResourceSchedules, i, schedule);
                        resourceSchedules.remove(activityResource);
                        resourceSchedules.insert(activityResource, activityResourceSchedules);
                        break;
                    }
                    else if (i == activityResourceSchedules.lastIndex())
                    {
                        //last round of loop, insert element to the end
                        activityResourceSchedules = this.insertSchedule(activityResourceSchedules, i + 1, schedule);
                        resourceSchedules.remove(activityResource);
                        resourceSchedules.insert(activityResource, activityResourceSchedules);
                    }
                }
            }
            else
            {
                activityResourceSchedules = new Array(Types::Class);
                activityResourceSchedules.value(1, schedule);

                resourceSchedules.insert(activityResource, activityResourceSchedules);
                resourceReservationTypes.insert(activityResource,
                    [schedule.ReservationType(), schedule.Resource(),
                    schedule.Activity(), schedule.Commitment()]);
            }
        }

        MapEnumerator mapEnum = resourceSchedules.getEnumerator();

        // reserver each resource
        while (mapEnum.moveNext() && result)
        {
            scheduleRemainingCapacity = capacity;
            activityResource = mapEnum.currentKey();
            activityResourceSchedules = mapEnum.currentValue();
            [reservationType, isResource, activity, commitment] = resourceReservationTypes.lookup(activityResource);
            if (reservationType == ResReservationType::Assignment)
            {
                // limit schedule remaining capacity cannot be larger than task unfilled activity capacity
                PSARSEntityType entityType = schedule.activityType();
                if (commitment == ResCommitType::HardBook || entityType == PSARsEntityType::Quotation)
                {
                    unfilledActivityCapacity = ActivityFacade::getRemainingCapacityInSeconds(activity, commitment);
                    scheduleRemainingCapacity = scheduleRemainingCapacity <= unfilledActivityCapacity ? scheduleRemainingCapacity : unfilledActivityCapacity;
                }

                // when there is no more task remaining capacity, remove resource from this project / quotation team if the resource has no reservation in this activity
                if (scheduleRemainingCapacity <= 0)
                {
                    ListEnumerator activityResourceFirstCreateListEnum = activityResourceCreateByThisMethodList.getEnumerator();
                    while (activityResourceFirstCreateListEnum.moveNext())
                    {
                        if (activityResourceFirstCreateListEnum.current() == activityResource)
                        {
                            this.removeActivityResourceWithNoReservation(activityResource);
                            break;
                        }
                    }
                    continue;
                }
            }

            scheduleCount = activityResourceSchedules.lastIndex();
            for (int i = 1; i <= scheduleCount && scheduleRemainingCapacity > 0; i++)
            {
                schedule = activityResourceSchedules.value(i);
                switch (reservationType)
                {
                    case ResReservationType::Assignment:
                        if (this.validateAssignmentSchedulingDate())
                        {
                            result = result && this.assign();
                        }
                        break;
                    default:
                        result = result && this.book();
                        break;
                }
            }
        }
        ttscommit;

        this.postReserveOperations();

        return result && resourceSchedules.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>book</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books specified capacity from beginning of date range for the specified generic resource.
    /// </summary>
    /// <returns>True when the reserve operation succeeds.Otherwise, false.</returns>
    protected boolean book()
    {
        int64 rowCount;
        ActivityResourceRecId activityResource = schedule.ActivityResource();
        ResourceRecId resource = schedule.Resource();
        CalendarRecId calendar = schedule.parmCalendar();
        ActivityRecId activity = schedule.Activity();
        ResCommitType commitment = schedule.Commitment();

        if (!activityResource || !activity || !commitment || !calendar)
        {
            return false;
        }

        resource = resource ? resource : ActivityResourceFacade::getResource(activityResource);
        ResRollUpCoverage   rollUpCoverage  = resource ? ResRollUpCoverage::Availability : ResRollUpCoverage::Activity;
        ActivityResourceId  activityResourceId = this.getActivityResourceId(activityResource, resource, rollUpCoverage);
        AVTimeframeType     timeScale = this.TimeScale();

        // if cache table records do not exists, update cache table
        this.updateCachTable(rollUpCoverage, activityResourceId, schedule.Start(), schedule.end(), timeScale);

        if (timeScale == AVTimeframeType::Hour)
        {
            ResCalendarCapacityView calendarWorkHours;

            // we will book remaining capacity hour by hour as hourly remaining capacity is calculated based on current activity.
            while select Capacity, Hour
            from calendarWorkHours
                where calendarWorkHours.Calendar == calendar
                && calendarWorkHours.Hour >= schedule.Start()
                && calendarWorkHours.Hour <= schedule.End()
                && calendarWorkHours.Capacity > 0
            {
                this.processFrontLoadReserveActivityResource(ResReservationType::Booking, rollUpCoverage, activityResourceId, timeScale, calendarWorkHours.Capacity,
                    commitment, activityResource, calendar, activity, calendarWorkHours.Hour);
                if (scheduleRemainingCapacity <= 0 )
                {
                    break;
                }
            }
            rowCount = calendarWorkHours.RowCount();
        }
        else
        {
            ResCalendarCapacityWorkDaysView calendarWorkDays;

            // we will book remaining capacity day by day as daily remaining capacity is calculated based on current activity.
            while select Day, Capacity, Hours
            from calendarWorkDays
                where calendarWorkDays.Calendar == calendar
                && calendarWorkDays.Day >= schedule.Start()
                && calendarWorkDays.Day <= schedule.End()
                && calendarWorkDays.Capacity > 0
            {
                this.processFrontLoadReserveActivityResource(ResReservationType::Booking, rollUpCoverage, activityResourceId, timeScale, calendarWorkDays.Capacity,
                    commitment, activityResource, calendar, activity, calendarWorkDays.Day, int642int(calendarWorkDays.Hours));
                if (scheduleRemainingCapacity <= 0 )
                {
                    break;
                }
            }
            rowCount = calendarWorkDays.RowCount();
        }

        return rowCount && true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books specified capacity from beginning of date range for the specified resource.
    /// </summary>
    /// <returns>True when the reserve operation succeeds. Otherwise, false.</returns>
    protected boolean bookResource()
    {   
        return this.book();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns specified capacity from beginning of date range for the specified generic resource.
    /// </summary>
    /// <returns>True when the reserve operation succeeds. Otherwise, false.</returns>
    protected boolean assign()
    {
        int64 rowCount;
        ActivityResourceRecId activityResource = schedule.ActivityResource();
        CalendarRecId calendar = schedule.parmCalendar();
        ActivityRecId activity = schedule.Activity();
        ResCommitType commitment = schedule.Commitment();
        Seconds requestedCapacity = this.getRequestedCalendarCapacity(calendar);
        ResourceRecId resource = schedule.Resource();

        if (!activityResource || !activity || !commitment || !calendar)
        {
            return false;
        }

        if (scheduleRemainingCapacity <= 0 || requestedCapacity <= 0)
        {
            return true;
        }

        resource = resource ? resource : ActivityResourceFacade::getResource(activityResource);
        ResRollUpCoverage   rollUpCoverage  = ResRollUpCoverage::Assignment;
        ActivityResourceId  activityResourceId = this.getActivityResourceId(activityResource, resource, rollUpCoverage);
        AVTimeframeType     timeScale = this.TimeScale();

        utcdatetime startHour = (schedule.start() < taskStartDateTime) ? taskStartDateTime : schedule.start();
        utcdatetime endHour = (schedule.end() >  taskEndDateTime) ? taskEndDateTime : schedule.end();

        // if cache table records do not exists, update cache table
        this.updateCachTable(rollUpCoverage, activityResourceId, startHour, endHour, timeScale);

        if (timeScale == AVTimeframeType::Hour)
        {
            ResCalendarCapacityView calendarWorkHours;

            // we will assign remaining capacity hour by hour as hourly remaining capacity is calculated based on current activity
            while select Capacity, Hour
                from calendarWorkHours
                    where calendarWorkHours.Calendar == calendar
                    && calendarWorkHours.Hour >= startHour
                    && calendarWorkHours.Hour <= endHour
                    && calendarWorkHours.Capacity > 0
            {
                this.processFrontLoadReserveActivityResource(ResReservationType::Assignment, rollUpCoverage, activityResourceId, timeScale, calendarWorkHours.Capacity,
                    commitment, activityResource, calendar, activity, calendarWorkHours.Hour);
                if (scheduleRemainingCapacity  == 0)
                {
                    break;
                }
            }
            rowCount = calendarWorkHours.RowCount();
        }
        else
        {
            ResCalendarCapacityWorkDaysView calendarWorkDays;

            // we will assign remaining capacity day by day as daily remaining capacity is calculated based on current activity
            while select Day, Capacity, Hours
                from calendarWorkDays
                    where calendarWorkDays.Calendar == calendar
                    && calendarWorkDays.Day >= startHour
                    && calendarWorkDays.Day <= endHour
                    && calendarWorkDays.Capacity > 0
            {
                this.processFrontLoadReserveActivityResource(ResReservationType::Assignment, rollUpCoverage, activityResourceId, timeScale, calendarWorkDays.Capacity,
                    commitment, activityResource, calendar, activity, calendarWorkDays.Day, int642int(calendarWorkDays.Hours));
                if (scheduleRemainingCapacity  == 0)
                {
                    break;
                }
            }
            rowCount = calendarWorkDays.RowCount();
        }

        return rowCount && true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns specified capacity from beginning of date range for the specified resource.
    /// </summary>
    /// <returns>True when the reserve operation succeeds. Otherwise, false.</returns>
    protected boolean assignResource()
    {
        return this.assign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFrontLoadReserveActivityResource</Name>
				<Source><![CDATA[
    private void processFrontLoadReserveActivityResource(ResReservationType _resType, ResRollUpCoverage _rollUpCoverage, ActivityResourceId  _activityResourceId, AVTimeframeType _timeScale, int _calendarCapacity,
        ResCommitType _commitment, ActivityResourceRecId _activityResource, CalendarRecId _calendar, ActivityRecId _activity, utcdatetime _timeframe, int _hour = 1)
    {
        // calculate for the correct reserveUnitCapacity value
        this.updateActivityResourceRemainingCapacity(_rollUpCoverage, _activityResourceId, _timeframe, _timeScale, _calendarCapacity);

        if (remainingCapacity > 0)
        {
            // calculate the unit capacity to be reserved
            reserveUnitCapacity = remainingCapacity > scheduleRemainingCapacity ? scheduleRemainingCapacity : remainingCapacity;

            if (_resType == ResReservationType::Assignment)
            {
                // execute assignment by the specify calendar per for the specify timeframe which hours is the sum of hours for in that time frame
                this.assignByCalendarCapacity(_activityResource, _commitment, _calendar, _activity, reserveUnitCapacity, _timeframe, _hour, _timeScale);
            }
            else
            {
                // execute assignment by the specify calendar per for the specify timeframe which hours is the sum of hours for in that time frame
                this.bookByCalendarCapacity(_activityResource, _commitment, _calendar, _activity, reserveUnitCapacity, _timeframe, _hour, _timeScale);
            }

            // reduce schedule remaining capacity by reserved capacity
            scheduleRemainingCapacity -= reserveUnitCapacity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the front-loading reserve processor.
    /// </summary>
    protected void new()
    {
        super();
        resourceSchedules = new Map(Types::Int64, Types::Class);
        resourceReservationTypes = new Map(Types::Int64, Types::Container);        
        reserveProcessorType = ResBookingType::FrontLoadCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of the front-loading reserve processor.
    /// </summary>
    /// <returns>Instance of <c>ResFrontLoadCapacity.</c></returns>
    public static ResFrontLoadCapacity construct()
    {
        ResFrontLoadCapacity processor = new ResFrontLoadCapacity();
        return processor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>