<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgJobReportDeviationPosting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains functionality to open the <c>ProdJournalTableJobCard</c>, <c>ProdJournalTableRouteCard</c> and <c>ProdJournalTablePickList</c> menu items
/// intialized with specific quantities. This allows the journal lines to be defaulted to the current deviation.
/// </summary>
class JmgJobReportDeviationPosting
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>openProdJournalTableJobCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>ProdJournalTableJobCard</c> menu item and intitializes the line with the values specified.
    /// </summary>
    /// <param name = "_caller">The calling form.</param>
    /// <param name = "_prodRoute">The <c>ProdRoute</c> for which a journal should be created.</param>
    /// <param name = "_prodRouteTrans">The <c>ProdRouteTrans</c> to default the resources from.</param>
    /// <param name = "_hours">The hours that should be default on the journal line.</param>
    /// <param name = "_goodQty">The good quantity that should be defaulted on the journal line.</param>
    public static void openProdJournalTableJobCard(Object _caller, ProdRouteJob _prodRouteJob, ProdRouteTrans _prodRouteTrans, Qty _hours, Qty _goodQty)
    {
        if (_prodRouteJob)
        {
            date todaysDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            ProdJournalNameIdRouteJob journalNameId = ProdTable::find(_prodRouteJob.ProdId).prodParametersDim().JobCardJournalNameId;
            ProdJournalCreateJob prodJournalCreate = ProdJournalCreateJob::newParm(_prodRouteJob.ProdId, _prodRouteJob.JobId, todaysDate, _hours, _goodQty, journalNameId);
            prodJournalCreate.runOperation();

            JmgJobReportDeviationPosting::openJournalCreateMenuItem(prodJournalCreate, menuItemDisplayStr(ProdJournalTableJobCard), _prodRouteTrans, _caller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProdJournalTableRouteCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>ProdJournalTableRouteCard</c> menu item and intitializes the line with the values specified.
    /// </summary>
    /// <param name = "_caller">The calling form</param>
    /// <param name = "_prodRoute">The <c>ProdRoute</c> for which a journal should be created.</param>
    /// <param name = "_prodRouteTrans">The <c>ProdRouteTrans</c> to default the resources from.</param>
    /// <param name = "_hours">The hours that should be default on the journal line.</param>
    /// <param name = "_goodQty">The good quantity that should be defaulted on the journal line.</param>
    public static void openProdJournalTableRouteCard(Object _caller, ProdRoute _prodRoute, ProdRouteTrans _prodRouteTrans, Qty _hours, Qty _goodQty)
    {
        if (_prodRoute)
        {
            date todaysDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            ProdJournalNameIdRoute prodJournalNameIdRoute = ProdTable::find(_prodRoute.ProdId).prodParametersDim().RouteJournalNameId;
            ProdJournalCreateRoute prodJournalCreate = ProdJournalCreateRoute::newParm(
                                                           _prodRoute.ProdId,
                                                           todaysDate,
                                                           _goodQty,
                                                           prodJournalNameIdRoute,
                                                           '',
                                                           RouteAutoConsump::RouteDependent,
                                                           NoYes::No,
                                                           _prodRoute.OprNum,
                                                           _prodRoute.OprNum,
                                                           NoYes::No,
                                                           false,
                                                           0,
														   false,
                                                           _hours,
                                                           true,
                                                           _prodRoute.OprPriority);

            prodJournalCreate.runOperation();

            JmgJobReportDeviationPosting::openJournalCreateMenuItem(prodJournalCreate, menuItemDisplayStr(ProdJournalTableRouteCard), _prodRouteTrans, _caller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProdJournalTablePickList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>ProdJournalTablePickList</c> menu item and intitializes the line with the values specified.
    /// </summary>
    /// <param name = "_caller">The calling form.</param>
    /// <param name = "_prodBOM">The <c>ProdBOM</c> for which a journal should be created.</param>
    /// <param name = "_qtyToPost">The good quantity that should be defaulted on the journal line.</param>
    public static void openProdJournalTablePickList(Object _caller, ProdBOM _prodBOM, InventQty _qtyToPost)
    {
        if (_prodBOM)
        {
            ProdJournalNameIdBOM prodJournalNameIdBOM = _prodBOM.prodTable().prodParametersDim().BOMJournalNameId;
            date todaysDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            ProdJournalCreateBOM prodJournalCreate = ProdJournalCreateBOM::newConsumption(_prodBOM, prodJournalNameIdBOM, todaysDate, _qtyToPost);
            prodJournalCreate.runOperation();

            JmgJobReportDeviationPosting::openJournalCreateMenuItem(prodJournalCreate, menuItemDisplayStr(ProdJournalTablePickList), null, _caller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openJournalCreateMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>ProdJournalTable</c> form for the <c>ProdJournalCreate</c> instance and defaults the resource information to those of the <c>ProdRouteTrans</c>.
    /// </summary>
    /// <param name = "_prodJournalCreate">The <c>ProdJournalCreate</c> instance.</param>
    /// <param name = "_journalMenuName">The menu item name. This method can be used for both job card and route card.</param>
    /// <param name = "_prodRouteTrans">The <c>ProdRouteTrans</c>.</param>
    /// <param name = "_caller">The calling form.</param>
    private static void openJournalCreateMenuItem(ProdJournalCreate _prodJournalCreate, MenuItemName _journalMenuName, ProdRouteTrans _prodRouteTrans, Object _caller)
    {
        ProdJournalTable prodJournalTable = _prodJournalCreate.usedProdJournalTable();
        if (prodJournalTable)
        {
            MenuFunction journalMenu      = new MenuFunction(_journalMenuName, MenuItemType::Display);

            if (_prodRouteTrans)
            {
                JmgJobReportDeviationPosting::setResourceForProdJournalRouteLines(prodJournalTable, _prodRouteTrans);
            }

            if (journalMenu && journalMenu.checkAccessRights())
            {
                Args args = new Args();
                args.caller(_caller);
                args.record(ProdJournalTable::find(prodJournalTable.JournalId));
                journalMenu.formViewOption(FormViewOption::Details);
                journalMenu.openMode(OpenMode::Edit);
                journalMenu.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResourceForProdJournalRouteLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the resource assigned to the <c>ProdJournalRoute</c> line of the <c>ProdJournalTable</c> to be the resource assigned to the <c>ProdRouteTrans</c>.
    /// </summary>
    /// <param name = "_prodJournalTable">The <c>ProdJournalTable</c>.</param>
    /// <param name = "_prodRouteTrans">The <c>ProdRouteTrans</c>.</param>
    private static void setResourceForProdJournalRouteLines(ProdJournalTable _prodJournalTable, ProdRouteTrans _prodRouteTrans)
    {
        if (_prodRouteTrans)
        {
            ProdJournalRoute prodJournalRoute;
            DimensionDefault wrkCtrDefault    = WrkCtrTable::find(_prodRouteTrans.WrkCtrId).DefaultDimension;
            DimensionDefault prodRouteDefault = _prodRouteTrans.prodRoute().DefaultDimension;

            while select forupdate prodJournalRoute
                where prodJournalRoute.JournalId == _prodJournalTable.JournalId
            {
                prodJournalRoute.WrkCtrId         = _prodRouteTrans.WrkCtrId;
                prodJournalRoute.Worker           = _prodRouteTrans.Worker;
                prodJournalRoute.DefaultDimension = prodJournalRoute.mergeDimension(prodRouteDefault, wrkCtrDefault);
                prodJournalRoute.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>