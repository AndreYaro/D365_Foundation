<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FbciapAssetTransCreate_Acquisition_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the acquisiton transaction
/// </summary>
class FbciapAssetTransCreate_Acquisition_BR extends FBCIAPAssetTransCreate_BR
{
    FBCIAPAssetTable_BR     fbCIAPAssetTable;
    AssetTrans              assetTrans;

    FiscalDocument_BR       fiscalDocument;
    FiscalDocumentLine_BR   fiscalDocumentLine;

    boolean                 acquiredByJournal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
        public void create()
    {
        if (!assetTrans)
            return ;

        select firstonly forupdate fbCIAPAssetTrans
            where fbCIAPAssetTrans.OrigAssetTrans == assetTrans.RecId;

        // Do not process acquisiton if the CIAP asset is acquired or cloed
        if (FBCIAPAssetTable_BR::find(fbCIAPAssetTrans.FBCIAPAssetTable_BR).Status != FBCIAPAssetStatus_BR::NoAcquisition)
            return;

        this.findFiscalDocument();

        if (acquiredByJournal || fiscalDocument.RecId)
        {
            fbCIAPAssetTable = this.findOrCreateCIAPAsset(assetTrans);

            if (!fbCIAPAssetTrans)
            {
                fbCIAPAssetTrans.fbciapAssetTable_BR    = fbCIAPAssetTable .RecId;
                fbCIAPAssetTrans.fbciapAssessment_BR     = ciapAssessment.RecId;
                fbCIAPAssetTrans.TransType              = FBCIAPAssetTransType_BR::IM;
                fbCIAPAssetTrans.TransDate              = assetTrans.TransDate;
                fbCIAPAssetTrans.OrigAssetTrans         = assetTrans.RecId;
            }

            if (fiscalDocument.RecId)
            {
                this.initFromFiscalDocument();
            }

            this.writeCIAPAssetTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFiscalDocument</Name>
				<Source><![CDATA[
        private void findFiscalDocument()
    {
        FBBookingPeriodFiscalDocument_BR bookingPeriodFiscalDocument;

        if (!fiscalDocument)
        {
            select firstonly fiscalDocument
                where fiscalDocument.Direction == FiscalDocDirection_BR::Incoming
                    && (fiscalDocument.InventoryVoucher == assetTrans.Voucher || fiscalDocument.Voucher == assetTrans.Voucher)
                    && fiscalDocument.AccountingDate   == assetTrans.TransDate
                join fiscalDocumentLine
                where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
                    && fiscalDocumentLine.AssetId       == assetTrans.AssetId;

            if (!fiscalDocument)
            {
                acquiredByJournal = true;

                warning("@SYS4006725");
            }
            else
            {
                select RecId from bookingPeriodFiscalDocument
                    where bookingPeriodFiscalDocument.fbBookingPeriod_BR == bookingPeriod.RecId
                        && bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId;

                if (!bookingPeriodFiscalDocument)
                {
                    fiscalDocument.clear();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateCIAPAsset</Name>
				<Source><![CDATA[
        private FBCIAPAssetTable_BR findOrCreateCIAPAsset(AssetTrans _assetTrans)
    {
        AssetTable          assetTable;
        FBCIAPAssetTable_BR ciapAssetTable;

        // Find fixed asset without any transaction (added manually)
        select forupdate ciapAssetTable
            where ciapAssetTable.AssetTable == _assetTrans.AssetId
                && ciapAssetTable.FiscalEstablishment_BR == fiscalEstablishmentRecId
                && ciapAssetTable.FiscalEstablishmentDataArea == bookingPeriod.FiscalEstablishmentDataArea
                && ciapAssetTable.Status == FBCIAPAssetStatus_BR::NoAcquisition;

        if (!ciapAssetTable)
        {
            assetTable = AssetTable::find(_assetTrans.AssetId);

            setPrefix(strFmt('%1:%2', "@SYS25653", assetTable.AssetId));

            ciapAssetTable.initFromAssetTable(assetTable);
            ciapAssetTable.Status                   = FBCIAPAssetStatus_BR::Open;
            ciapAssetTable.DefaultDimension         = this.getCostCenter(assetTrans.DefaultDimension);
            ciapAssetTable.RemainingInstallments    = ciapAssetTable.Installments - 1;

            if (_assetTrans.PostingProfile)
            {
                ciapAssetTable.LedgerDimension      = DimensionAttributeValueCombination::find(assetTable.assetLedgerDimension(_assetTrans.PostingProfile, AssetTransType::Acquisition, _assetTrans.BookId)).RecId;
            }

            ciapAssetTable.insert();
        }
        else if (ciapAssetTable.Status == FBCIAPAssetStatus_BR::NoAcquisition)
        {
            ciapAssetTable.RemainingInstallments--;
            ciapAssetTable.Status = FBCIAPAssetStatus_BR::Open;
            ciapAssetTable.update();
        }

        return ciapAssetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxAmount</Name>
				<Source><![CDATA[
        private AmountMST findTaxAmount(TaxType_BR _taxtype)
    {
        FiscalDocumentTaxTrans_BR taxTrans;

        select sum(TaxAmountOther) from taxTrans
            where taxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                && taxTrans.Type == _taxtype;

        return taxTrans.TaxAmountOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostCenter</Name>
				<Source><![CDATA[
        private RecId getCostCenter(RecId _defaultDimension)
    {
        DefaultDimensionView defaultDimensionView;
        DimensionAttribute   dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;

        dimensionAttribute      = DimensionAttribute::find(BrazilParameters::find().CostCenterDimensionAttribute);

        select * from defaultDimensionView
            where defaultDimensionView.DefaultDimension == _defaultDimension
                && defaultDimensionView.DimensionAttributeId == dimensionAttribute.RecId;

        dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, defaultDimensionView.DisplayValue);

        return dimensionAttributeValue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFiscalDocument</Name>
				<Source><![CDATA[
        private void initFromFiscalDocument()
    {
        FBCIAPAssetTrans_FiscalDoc_BR fbCIAPAssetTrans_FiscalDoc;

        if (!fbCIAPAssetTrans.InstallmentNum && !fbCIAPAssetTrans.InstallmentAmount)
        {
            fbCIAPAssetTrans.icmsAmount             = this.findTaxAmount(TaxType_BR::ICMS);
            fbCIAPAssetTrans.icmsstAmount           = this.findTaxAmount(TaxType_BR::ICMSST);
            fbCIAPAssetTrans.icmsDiffAmount         = this.findTaxAmount(TaxType_BR::ICMSDiff);

            if (fbCIAPAssetTrans.icmsAmount || fbCIAPAssetTrans.icmsstAmount || fbCIAPAssetTrans.icmsDiffAmount)
            {
                fbCIAPAssetTrans.InstallmentNum         = 1;
                fbCIAPAssetTrans.InstallmentAmount      = FBCIAPCreditCalc_BR::calcInstallment(fbCIAPAssetTrans.icmsToRecover(), fbCIAPAssetTable.Installments);
            }

            this.writeCIAPAssetTrans();
        }

        select RecId from fbCIAPAssetTrans_FiscalDoc
            where fbCIAPAssetTrans_FiscalDoc.fbciapAssetTrans_BR == fbCIAPAssetTrans.RecId
                && fbCIAPAssetTrans_FiscalDoc.FiscalDocument_BR  == fiscalDocument.RecId;

        if (!fbCIAPAssetTrans_FiscalDoc)
        {
            fbCIAPAssetTrans_FiscalDoc.fbciapAssetTable_BR      = fbCIAPAssetTable.RecId;
            fbCIAPAssetTrans_FiscalDoc.FiscalDocument_BR        = fiscalDocument.RecId;
            fbCIAPAssetTrans_FiscalDoc.FiscalDocumentLine_BR    = fiscalDocumentLine.RecId;
            fbCIAPAssetTrans_FiscalDoc.fbciapAssetTrans_BR      = fbCIAPAssetTrans.RecId;
            fbCIAPAssetTrans_FiscalDoc.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTrans</Name>
				<Source><![CDATA[
        public AssetTrans parmAssetTrans(AssetTrans _assetTrans = assetTrans)
    {
        assetTrans = _assetTrans;

        return assetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCIAPAssetTrans</Name>
				<Source><![CDATA[
        private void writeCIAPAssetTrans()
    {
        if (!fbCIAPAssetTrans)
            fbCIAPAssetTrans.insert();
        else
            fbCIAPAssetTrans.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>