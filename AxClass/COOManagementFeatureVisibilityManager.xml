<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>COOManagementFeatureVisibilityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>COOManagementFeatureVisibilityManager</c> class handles event to hide or show Country of origin vendor certificates forms/controls/menu items.
/// </summary>
internal class COOManagementFeatureVisibilityManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>menuItemFeatureHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides or show Country Of Origin and Dual Use Products Item menu items.
    /// </summary>
    /// <param name = "_rootMenu">Root menu.</param>
    /// <param name = "_subMenu">Sub menu.</param>
    /// <param name = "_visible">Whether or not the submenu should be visible.</param>
    /// <remarks>This will only hide the individual menu items if they are contained in a group that we will also be hiding.</remarks>
    [SubscribesTo(classstr(SysMenuNavigationObjectFactory), staticdelegatestr(SysMenuNavigationObjectFactory, checkAddSubMenuDelegate))]
    public static void menuItemFeatureHandler(SysDictMenu _rootMenu, SysDictMenu _subMenu, SysBoxedBoolean _visible)
    {
        if (_subMenu.isMenuItem())
        {
            var metaElement = _subMenu.GetMenuItemMetaElement();
            if (metaElement != null)
            {
                switch (metaElement.Name)
                {
                    case menuItemDisplayStr(COODualUseCategories):
                    case menuItemDisplayStr(COODualUseCerts):
                    case menuItemDisplayStr(COODualUseCountries):
                    case menuItemDisplayStr(COORules):
                    case menuItemDisplayStr(COOVendorCerts):                 
                        {
                            _visible.value = isConfigurationkeyEnabled(configurationKeyNum(COOCertification));
                            break;
                        }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFeatureState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return to default dashboard when feature is not enabled
    /// </summary>
    /// <param name = "_sender">The form.</param>
    private static void checkFeatureState(xFormRun _sender)
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(COOCertification)))
        {
            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(DefaultDashboard), MenuItemType::Display);
            menuFunction.run();

            info("@SCM:COOFeatureErrorMessage");

            _sender.close();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingCOODualUseCategoriesFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>COODualUseCategories</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(COODualUseCategories), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingCOODualUseCategoriesFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        COOManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingCOODualUseCertsFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>COODualUseCerts</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(COODualUseCerts), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingCOODualUseCertsFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        COOManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingCOODualUseCountriesFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>COODualUseCountries</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(COODualUseCountries), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingCOODualUseCountriesFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        COOManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingCOORulesFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>COORules</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(COORules), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingCOORulesFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        COOManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingCOOVendorCertsFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>COOVendorCerts</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(COOVendorCerts), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingCOOVendorCertsFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        COOManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecoResProductDetailsExtendedInventTableDataSource_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides dual use product fields in the InventTable
    /// </summary>
    /// <param name="_sender">The form data source.</param>
    /// <param name="_e">Form data source event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(EcoResProductDetailsExtended, InventTable), FormDataSourceEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void ecoResProductDetailsExtendedInventTableDataSource_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.object(fieldNum(InventTable, COODualUseProduct)).visible(isConfigurationkeyEnabled(configurationKeyNum(COOCertification)));
        _sender.object(fieldNum(InventTable, COODualUseCode)).visible(isConfigurationkeyEnabled(configurationKeyNum(COOCertification)));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>