<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_Contabil_v400_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FBSpedFileCreator_Contabil_v400_BR extends FBSpedFileCreator_Contabil_v300_BR
{
    FBSpedContabilFiscalYearClosingDate_BR          fiscalYearClosingDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRecord0000</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block 0000 and its child blocks.
    /// </summary>
    protected void createRecord0000()
    {
        FBSpedRecord_BR         spedRecord;
        LogisticsPostalAddress  fiscalEstablishmentAddress = fiscalEstablishment.postalAddress();

        spedRecord  = FBSpedRecord_BR::constructEmpty('0000');

        spedRecord.addFieldString                   ('LECD');                                                   // LECD
        spedRecord.addFieldDate                     (fromDate);                                                 // DT_INI
        spedRecord.addFieldDate                     (toDate);                                                   // DT_FIN
        spedRecord.addFieldString                   (fiscalEstablishment.Name);                                 // NOME
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 14);  // CNPJ
        spedRecord.addFieldString                   (fiscalEstablishmentAddress.State);                         // UF
        spedRecord.addFieldString                   (this.keepAlphaAndNumbers(fiscalEstablishment.IENum_BR));   // IE
        spedRecord.addFieldNumericFilledWithZeros   (this.getCityCode(fiscalEstablishmentAddress), 7);          // COD_MUN
        spedRecord.addFieldString                   (this.keepAlphaAndNumbers(fiscalEstablishment.CCMNum_BR));  // IM

        if (situationType)
        {
            spedRecord.addFieldNumeric              (situationType);                                            // IND_SIT_ESP
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // IND_SIT_ESP
        }

        spedRecord.addFieldNumeric                  (openingPeriodSituation);                                   // IND_SIT_INI_PER
        spedRecord.addFieldNumeric                  (fiscalEstablishment.NIRE ? 1 : 0);                         // IND_NIRE
        spedRecord.addFieldNumeric                  (fileType);                                                 // IND_FIN_ESC
        if (fileType == FBSPEDFileType_BR::Substitute)
        {
            spedRecord.addFieldString               (fileHash);                                                 // COD_HASH_SUB
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // COD_HASH_SUB
        }
        spedRecord.addFieldEmpty                    ();                                                         // NIRE_SUBST
        spedRecord.addFieldNumeric                  (fiscalOrganization.IsLargeCompany ? 1 : 0);                // IND_GRANDE_PORTE
        spedRecord.addFieldNumeric                  (fiscalOrganization.SCPType);                               // TIP_ECD

        if (fiscalOrganization.SCPType == FBSCPType_BR::SCP)
        {
            spedRecord.addFieldNumeric              (this.keepNumbers(fiscalOrganization.SCPCode));             // COD_SCP
        }
        else
        {
            spedRecord.addFieldEmpty();                                                                         // COD_SCP
        }

        spedRecord.addFieldString                   ('N', 1);                                                   // IDENT_MF

        this.addRecord(spedRecord);

        this.createBlock0(spedRecord);
        this.createBlockI(spedRecord);
        this.createBlockJ(spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordI030</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the block I030 and its child blocks.
    /// </summary>
    /// <param name="_parentRecord">
    /// The parent record that the block I030 belongs to.
    /// </param>
    protected void createRecordI030(FBSpedRecord_BR _parentRecord)
    {
        FBSpedRecord_BR spedRecord;

        spedRecord  = FBSpedRecord_BR::constructEmpty('I030');

        spedRecord.addFieldString                   ('TERMO DE ABERTURA');                                      // DNRC_ABERT
        spedRecord.addFieldNumeric                  (bookNumber);                                               // NUM_ORD
        spedRecord.addFieldString                   ('DIÁRIO GERAL');                                           // NAT_LIVR
        spedRecord.addFieldString                   ('%QTD_LINHA%');                                            // QTD_LIN
        spedRecord.addFieldString                   (fiscalEstablishment.Name);                                 // NOME
        spedRecord.addFieldString                   (fiscalEstablishment.NIRE);                                 // NIRE
        spedRecord.addFieldNumericFilledWithZeros   (this.keepNumbers(fiscalEstablishment.CNPJCPFNum_BR), 14);  // CNPJ

        if (fiscalOrganization.ConstitutionArchiveDate)
        {
            spedRecord.addFieldDate                 (fiscalOrganization.ConstitutionArchiveDate);               // DT_ARQ
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // DT_ARQ
        }

        if (fiscalOrganization.ConversionArchiveDate)
        {
            spedRecord.addFieldDate                 (fiscalOrganization.ConversionArchiveDate);                 // DT_ARQ_CONV
        }
        else
        {
            spedRecord.addFieldEmpty                ();                                                         // DT_ARQ_CONV
        }

        spedRecord.addFieldString                   (fiscalEstablishment.postalAddress().City);                 // DESC_MUN
        spedRecord.addFieldDate                     (fiscalYearClosingDate);                                    // DT_EX_SOCIAL

        this.addChildRecord(_parentRecord, spedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecordJ005</Name>
				<Source><![CDATA[
    protected void createRecordJ005(FBSpedRecord_BR _parentRecord)
    {
        date                            beginPeriod, endPeriod;
        date                            previousBeginPeriod, previousEndPeriod;
        date                            rearrangedBeginPeriod, rearrangedEndPeriod;
        date                            lastDayOfPreviousPeriod;
        FBSpedRecord_BR                 spedRecord;
        LedgerTrialBalanceTmp           trialBalanceTmp, previousTrialBalanceTmp;
        SetEnumerator                   setOfPeriodsEnumerator;

        if (!addAccountingStatement)
        {
            return;
        }

        setOfPeriodsEnumerator = this.getAccountingStatementPeriods().getEnumerator();

        while (setOfPeriodsEnumerator.moveNext())
        {
            this.resetBalance();

            [beginPeriod, endPeriod] = setOfPeriodsEnumerator.current();
            [rearrangedBeginPeriod, rearrangedEndPeriod] = this.rearrangeAccountingStatementPeriod(beginPeriod, endPeriod);
            lastDayOfPreviousPeriod = rearrangedBeginPeriod - 1;

            trialBalanceTmp = this.calcTrialBalance(rearrangedBeginPeriod, rearrangedEndPeriod);

            this.updateAccountTreeCurrentBalance(trialBalanceTmp, rearrangedBeginPeriod, rearrangedEndPeriod);

            [previousBeginPeriod, previousEndPeriod] = this.rearrangeAccountingStatementPeriod(lastDayOfPreviousPeriod, lastDayOfPreviousPeriod);
            if (!(previousBeginPeriod <= rearrangedEndPeriod && rearrangedEndPeriod <= previousEndPeriod))
            {
                previousTrialBalanceTmp = this.calcTrialBalance(previousBeginPeriod, previousEndPeriod, false, true, false);
                this.updateAccountTreePreviousBalance(previousTrialBalanceTmp, previousBeginPeriod, previousEndPeriod);
            }

            previousBeginPeriod = rearrangedBeginPeriod;
            previousEndPeriod = rearrangedEndPeriod;
            previousTrialBalanceTmp = trialBalanceTmp;

            spedRecord  = FBSpedRecord_BR::constructEmpty('J005');

            spedRecord.addFieldDate     (rearrangedBeginPeriod); // DT_INI
            spedRecord.addFieldDate     (rearrangedEndPeriod);   // DT_FIN
            spedRecord.addFieldNumeric  (1);                     // ID_DEM
            spedRecord.addFieldEmpty    ();                      // CAB_DEM

            this.addChildRecord(_parentRecord, spedRecord);

            this.createRecordJ100(spedRecord);
            this.createRecordJ150(spedRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeClosingAmounts</Name>
				<Source><![CDATA[
    private boolean includeClosingAmounts(date _beginPeriod, date _endPeriod)
    {
        FiscalCalendarPeriod            fiscalCalendarPeriod;
        boolean includeClosing          = false;

        select firstOnly fiscalCalendarPeriod
        where fiscalCalendarPeriod.Type == FiscalPeriodType::Closing
            &&  fiscalCalendarPeriod.EndDate    <= _endPeriod
            &&  fiscalCalendarPeriod.StartDate  >= _beginPeriod
            &&  fiscalCalendarPeriod.FiscalCalendarYear == FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), _endPeriod).RecId;

        if (fiscalCalendarPeriod)
        {
            includeClosing  = true;
        }
        else
        {
            includeClosing  = false;
        }

        return includeClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FBSPEDContabilProcessorContract_BR _contract, FBFile_BR _fbFile)
    {
        super(_contract, _fbFile);

        fiscalYearClosingDate                = _contract.parmFiscalYearClosingDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rearrangeAccountingStatementPeriod</Name>
				<Source><![CDATA[
    private container rearrangeAccountingStatementPeriod(date _beginPeriod, date _endPeriod)
    {
        date                    rearrangedBeginPeriod, rearrangedEndPeriod;
        date                    periodEndDate;
        int                     periodMonths;

        switch (accStatementPeriod)
        {
            case FBSpedContabilAccStatementPeriod_BR::Monthly:
                periodMonths = 1;
                break;
            case FBSpedContabilAccStatementPeriod_BR::Quarterly:
                periodMonths = 3;
                break;
            case FBSpedContabilAccStatementPeriod_BR::HalfYearly:
                periodMonths = 6;
                break;
            case FBSpedContabilAccStatementPeriod_BR::Yearly:
                periodMonths = 12;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        rearrangedBeginPeriod = mkDate(1, 1, year(_beginPeriod));
        periodEndDate         = mkDate(31, 12, year(_beginPeriod));
        while (rearrangedEndPeriod < periodEndDate)
        {
            rearrangedEndPeriod = dateMthFwd(endmth(rearrangedBeginPeriod), periodMonths - 1);

            if (!(rearrangedBeginPeriod <= _beginPeriod && _endPeriod <= rearrangedEndPeriod))
            {
                rearrangedBeginPeriod = rearrangedEndPeriod + 1;
            }
            else
            {
                if (openingPeriodSituation != FBSpedContabilOpeningPeriodSituation_BR::Regular
                && rearrangedBeginPeriod < fromDate)
                {
                    rearrangedBeginPeriod = fromDate;
                }

                if (situationType != FBSpedContabilSituationType_BR::None
                && fiscalYearClosingDate < rearrangedEndPeriod)
                {
                    rearrangedEndPeriod = fiscalYearClosingDate;
                }

                return [rearrangedBeginPeriod, rearrangedEndPeriod];
            }
        }

        throw Exception::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountTreeBalance</Name>
				<Source><![CDATA[
    private void updateAccountTreeBalance(LedgerTrialBalanceTmp _trialBalanceTmp, date _beginPeriod, date _endPeriod, boolean _isPreviousPeriod)
    {
        container                       mainAccountCostCenter;
        FBSpedContabilAccountTree_BR    spedContabilAccountTree;
        MainAccountNum                  mainAccountNumber;
        str                             accountNatureCode;
        FieldId                         fieldId;

        while select    * from _trialBalanceTmp
        order by    _trialBalanceTmp.PrimaryFocus
        {
            if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                mainAccountCostCenter = this.getMainAccountCostCenterV2(_trialBalanceTmp.ReportingDimension);
            }
            else
            {
                mainAccountCostCenter = this.getMainAccountCostCenter(_trialBalanceTmp.LedgerDimension);
            }

            mainAccountNumber       = conPeek(mainAccountCostCenter, 1);

            ttsBegin;

            spedContabilAccountTree = FBSpedContabilAccountTree_BR::find(mainAccountNumber, true);

            if (spedContabilAccountTree)
            {
                if (!_isPreviousPeriod)
                {
                    spedContabilAccountTree.OpeningBalance  += _trialBalanceTmp.OpeningBalance;
                }

                accountNatureCode = this.getAccountNatureCode(MainAccount::findByMainAccountId(mainAccountNumber).getType());

                if (_isPreviousPeriod)
                {
                    fieldId = fieldnum(FBSpedContabilAccountTree_BR, PreviousEndingBalance);
                }
                else
                {
                    fieldId = fieldnum(FBSpedContabilAccountTree_BR, EndingBalance);
                }

                if ((accountNatureCode == Equity || accountNatureCode == AssetAccounts || accountNatureCode == LiabilityAccounts)
                     && this.includeClosingAmounts(_beginPeriod, _endPeriod))
                {
                    spedContabilAccountTree.(fieldId)   +=
                    _trialBalanceTmp.EndingBalance
                    -   (_trialBalanceTmp.ClosingAdjustments + _trialBalanceTmp.ClosingTransactions)
                    +   conPeek(this.calculateClosingAmounts(_trialBalanceTmp, _beginPeriod, _endPeriod), 3);
                }
                else
                {
                    spedContabilAccountTree.(fieldId)   +=
                    _trialBalanceTmp.EndingBalance
                    -   (_trialBalanceTmp.ClosingAdjustments + _trialBalanceTmp.ClosingTransactions);
                }

                spedContabilAccountTree.update();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountTreeCurrentBalance</Name>
				<Source><![CDATA[
    private void updateAccountTreeCurrentBalance(LedgerTrialBalanceTmp _trialBalanceTmp, date _beginPeriod, date _endPeriod)
    {
        this.updateAccountTreeBalance(_trialBalanceTmp, _beginPeriod, _endPeriod, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountTreePreviousBalance</Name>
				<Source><![CDATA[
    private void updateAccountTreePreviousBalance(LedgerTrialBalanceTmp _trialBalanceTmp, date _beginPeriod, date _endPeriod)
    {
        this.updateAccountTreeBalance(_trialBalanceTmp, _beginPeriod, _endPeriod, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordJ150</Name>
				<Source><![CDATA[
    protected void writeRecordJ150(FBSpedRecord_BR _parentRecord, int _level, int _left, int _right)
    {
        FBSpedContabilAccountTree_BR    spedContabilAccountTree, spedContabilAccountTreeAux;
        FBSpedRecord_BR                 spedRecord;

        while select spedContabilAccountTree
        where   spedContabilAccountTree.LeftValue               > _left
            &&  spedContabilAccountTree.RightValue              < _right
            &&  spedContabilAccountTree.AccountLevel            == _level
            &&  spedContabilAccountTree.IsAgglutinationAccount  == NoYes::Yes
        {
            if (this.getAccountNatureCode(spedContabilAccountTree.AccountType) == TotalAccounts)
            {
                select sum(OpeningBalance), sum(EndingBalance), sum(PreviousEndingBalance) from spedContabilAccountTreeAux
                where   spedContabilAccountTreeAux.LeftValue    > spedContabilAccountTree.LeftValue
                    &&  spedContabilAccountTreeAux.RightValue   < spedContabilAccountTree.RightValue;

                spedRecord  = FBSpedRecord_BR::constructEmpty('J150');

                spedRecord.addFieldString   (spedContabilAccountTree.AccountCode);                                                          // COD_AGL
                spedRecord.addFieldNumeric  (spedContabilAccountTree.AccountLevel);                                                         // NIVEL_AGL
                spedRecord.addFieldString   (spedContabilAccountTree.AccountDescription);                                                   // DESCR_COD_AGL
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.EndingBalance), 2);                                             // VL_CTA
                spedRecord.addFieldString   (spedContabilAccountTreeAux.EndingBalance > 0 ? 'N' : 'P');                                     // IND_DC_BAL
                spedRecord.addFieldNumeric  (abs(spedContabilAccountTreeAux.PreviousEndingBalance), 2);                                     // VL_CTA_ULT_DRE
                spedRecord.addFieldString   (spedContabilAccountTreeAux.PreviousEndingBalance > 0 ? 'N' : 'P');                             // IND_VL_ULT_DRE
                this.addExplNote( spedRecord);                                                                                              //NOTA_EXP_REF
                
                this.addChildRecord(_parentRecord, spedRecord);
            }

            this.writeRecordJ150(_parentRecord, _level + 1, spedContabilAccountTree.LeftValue, spedContabilAccountTree.RightValue);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>