<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPostingSetupCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventPostingSetupCache</c> class provides the caching of configuration of inventory posting.
/// </summary>
class InventPostingSetupCache
{
    // <GEERU>
    #ISOCountryRegionCodes
    // </GEERU>

    private const str AccountItemLedgerDimensionScope = 'InventPostingSetupCache_AILD';
    private const str ItemRelationExistsScope = 'InventPostingSetupCache_IRES';
    private const str AccountRelationExistsScope = 'InventPostingSetupCache_ERES';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>makeKeyAccItemLedgerDimFromParametersDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate raised before generating a cache key.
    /// </summary>
    /// <param name = "_cacheParameters">The cache parameters.</param>
    /// <param name = "_defaultKey">The key generated by default for the passed cache parameters.</param>
    /// <param name = "_makeKeyResult">An event handler result.</param>
    /// <remarks>Set the result for the <paramref name="_makeKeyResult"/> if you want to substitute the original key generation logic.
    /// You can either append extra information to the default key or completely replace it.
    /// </remarks>
    static delegate void makeKeyAccItemLedgerDimFromParametersDelegate(AccountItemLedgerDimensionCacheParameters _cacheParameters, str _defaultKey, EventHandlerResult _makeKeyResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears the cache.
    /// </summary>
    static public void clearCache()
    {
        SysGlobalObjectCache cache = classfactory.globalObjectCache();

        cache.clear(AccountItemLedgerDimensionScope);
        cache.clear(ItemRelationExistsScope);
        cache.clear(AccountRelationExistsScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountItemLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the specified posting ledger dimension.
    /// </summary>
    /// <param name="_accountType">
    ///    The account type.
    /// </param>
    /// <param name="_itemId">
    ///    The item number.
    /// </param>
    /// <param name="_itemGroup">
    ///    The account group.
    /// </param>
    /// <param name="_itemCategory">
    ///    The product category.
    /// </param>
    /// <param name="_accountNum">
    ///    The customer or vendor account numbers.
    /// </param>
    /// <param name="_accountGroup">
    ///    The customer or vendor group to which the transaction is attached.
    /// </param>
    /// <param name="_taxGroup">
    ///    The tax group for the inventory item.
    /// </param>
    /// <param name="_siteRelation">
    ///    The site ID.
    /// </param>
    /// <param name="_inventProfileId">
    ///    The inventory profile ID.
    /// </param>
    /// <param name="_catalog">
    ///    The catalog record ID.
    /// </param>
    /// <returns>
    ///    Returns a container with the ledger dimension.
    /// </returns>
    [SysObsolete('Use getAccountItemLedgerDimensionFromParameters instead', false, 30\11\2017)]
    static public container getAccountItemLedgerDimension(
        InventAccountType       _accountType,
        ItemId                  _itemId,
        ItemGroupId             _itemGroup,
        InventCategoryRelation  _itemCategory,
        CustVendAC              _accountNum,
        CustVendGroupId         _accountGroup,
        TaxGroup                _taxGroup,
        InventSiteRelation_CN   _siteRelation = '',
        InventProfileId_RU      _inventProfileId = '',
        CatalogRefRecId         _catalog = 0)
    {
        var cacheParameters = AccountItemLedgerDimensionCacheParameters::newFromParameters(
            _accountType,
            _itemId,
            _itemGroup,
            _itemCategory,
            _accountNum,
            _accountGroup,
            _taxGroup);

        cacheParameters.SiteRelation = _siteRelation;
        cacheParameters.InventProfileId = _inventProfileId;
        cacheParameters.Catalog = _catalog;
        
        return InventPostingSetupCache::getAccountItemLedgerDimensionFromParameters(cacheParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountItemLedgerDimensionFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the posting ledger dimension from the cache.
    /// </summary>
    /// <param name = "_cacheParameters">The aggregated cache relevant parameters.</param>
    /// <returns>A container with the ledger dimension.</returns>
    static public container getAccountItemLedgerDimensionFromParameters(AccountItemLedgerDimensionCacheParameters _cacheParameters)
    {
        var key = InventPostingSetupCache::makeKeyAccItemLedgerDimFromParameters(_cacheParameters);

        return classfactory.globalObjectCache().find(AccountItemLedgerDimensionScope, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountRelationExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a value indicating whether the account relation exists.
    /// </summary>
    /// <param name="_accountCode">
    /// Account code to use.
    /// </param>
    /// <param name="_accountRelation">
    /// Account relation to use.
    /// </param>
    /// <returns>
    /// A container holding a boolean if the value was cached; otherwise, conNull().
    /// </returns>
    public static container getAccountRelationExists(
        TableGroupAll   _accountCode,
        CustVendRel     _accountRelation)
    {
        SysGlobalObjectCache    sgoc = classFactory.globalObjectCache();

        container key = InventPostingSetupCache::makeKeyAccountRelationExists(_accountCode, _accountRelation);

        return sgoc.find(AccountRelationExistsScope, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemRelationExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a value indicating whether the item relation exists.
    /// </summary>
    /// <param name="_itemCode">
    /// Item code to use.
    /// </param>
    /// <param name="_itemRelation">
    /// Item relation to use.
    /// </param>
    /// <returns>
    /// A container holding a boolean if the value was cached; otherwise, conNull().
    /// </returns>
    public static container getItemRelationExists(
        InventPostingItemCode   _itemCode,
        ItemRelation            _itemRelation)
    {
        SysGlobalObjectCache    sgoc = classFactory.globalObjectCache();

        container key = InventPostingSetupCache::makeKeyItemRelationExists(_itemCode, _itemRelation);

        return sgoc.find(ItemRelationExistsScope, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAccountItemLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the specified posting ledger dimension into the cache.
    /// </summary>
    /// <param name="_accountType">
    ///    The account type.
    /// </param>
    /// <param name="_itemId">
    ///    The item number.
    /// </param>
    /// <param name="_itemGroup">
    ///    The account group.
    /// </param>
    /// <param name="_itemCategory">
    ///    The product category.
    /// </param>
    /// <param name="_accountNum">
    ///    The customer or vendor account numbers.
    /// </param>
    /// <param name="_accountGroup">
    ///    The customer or vendor group to which the transaction is attached.
    /// </param>
    /// <param name="_taxGroup">
    ///    The tax group for the inventory item.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The ledger dimension value to cache.
    /// </param>
    /// <param name="_siteRelation">
    ///    The site ID.
    /// </param>
    /// <param name="_inventProfileId">
    ///    The inventory profile ID.
    /// </param>
    /// <param name="_catalog">
    ///    The catalog record ID.
    /// </param>
    [SysObsolete('Use insertAccountItemLedgerDimensionFromParameter instead', false, 30\11\2017)]
    static public void insertAccountItemLedgerDimension(
        InventAccountType               _accountType,
        ItemId                          _itemId,
        ItemGroupId                     _itemGroup,
        InventCategoryRelation          _itemCategory,
        CustVendAC                      _accountNum,
        CustVendGroupId                 _accountGroup,
        TaxGroup                        _taxGroup,
        LedgerDimensionDefaultAccount   _ledgerDimension,
        InventSiteRelation_CN           _siteRelation = '',
        InventProfileId_RU              _inventProfileId = '',
        CatalogRefRecId                 _catalog = 0
        )
    {
        var cacheParameters = AccountItemLedgerDimensionCacheParameters::newFromParameters(
            _accountType,
            _itemId,
            _itemGroup,
            _itemCategory,
            _accountNum,
            _accountGroup,
            _taxGroup);

        cacheParameters.LedgerDimension = _ledgerDimension;
        cacheParameters.SiteRelation = _siteRelation;
        cacheParameters.InventProfileId = _inventProfileId;
        cacheParameters.Catalog = _catalog;

        InventPostingSetupCache::insertAccountItemLedgerDimensionFromParameters(cacheParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAccountItemLedgerDimensionFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the posting ledger dimension into the cache.
    /// </summary>
    /// <param name = "_cacheParameters">The aggregated cache relevant parameters.</param>
    static public void insertAccountItemLedgerDimensionFromParameters(AccountItemLedgerDimensionCacheParameters _cacheParameters)
    {
        var key = InventPostingSetupCache::makeKeyAccItemLedgerDimFromParameters(_cacheParameters);

        classfactory.globalObjectCache().insert(AccountItemLedgerDimensionScope, key, [_cacheParameters.LedgerDimension]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAccountRelationExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the requested value into the cache.
    /// </summary>
    /// <param name="_accountCode">
    /// Account code to use.
    /// </param>
    /// <param name="_accountRelation">
    /// Account relation to use.
    /// </param>
    /// <param name="_exists">
    /// Boolean indicating whether the account relation exists.
    /// </param>
    public static void insertAccountRelationExists(
        TableGroupAll   _accountCode,
        CustVendRel     _accountRelation,
        boolean         _exists)
    {
        SysGlobalObjectCache    sgoc = classFactory.globalObjectCache();

        container key = InventPostingSetupCache::makeKeyAccountRelationExists(_accountCode, _accountRelation);

        sgoc.insert(AccountRelationExistsScope, key, [_exists]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertItemRelationExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the requested value into the cache.
    /// </summary>
    /// <param name="_itemCode">
    /// Item code to use.
    /// </param>
    /// <param name="_itemRelation">
    /// Item relation to use.
    /// </param>
    /// <param name="_exists">
    /// Boolean indicating if the item relation exists.
    /// </param>
    public static void insertItemRelationExists(
        InventPostingItemCode   _itemCode,
        ItemRelation            _itemRelation,
        boolean                 _exists)
    {
        SysGlobalObjectCache    sgoc = classFactory.globalObjectCache();

        container key = InventPostingSetupCache::makeKeyItemRelationExists(_itemCode, _itemRelation);

        sgoc.insert(ItemRelationExistsScope, key, [_exists]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeKeyAccItemLedgerDimFromParameters</Name>
				<Source><![CDATA[
    static private container makeKeyAccItemLedgerDimFromParameters(AccountItemLedgerDimensionCacheParameters _cacheParameters)
    {
        var key = '';

        // Create fixed key part - Use a string for the key since at most 5 elements can exist in the key container
        key += curext(); // Global object cache is shared between legal entities, so we need to track this as well.
        key += '~';
        key += int2str(enum2int(_cacheParameters.AccountType));
        key += '~';
        key += _cacheParameters.ItemId;
        key += '~';
        key += _cacheParameters.ItemGroup;
        key += '~';
        key += int642str(_cacheParameters.ItemCategory);
        key += '~';
        key += _cacheParameters.AccountNum;
        key += '~';
        key += _cacheParameters.AccountGroup;
        key += '~';
        key += _cacheParameters.TaxGroup;

        key += '~';
        key += _cacheParameters.SiteRelation;

        key += '~';
        key += _cacheParameters.InventProfileId;

        key += '~';
        key += int642str(_cacheParameters.Catalog);

        var makeKeyResults = EventHandlerResult::newSingleResponse();

        InventPostingSetupCache::makeKeyAccItemLedgerDimFromParametersDelegate(_cacheParameters, key, makeKeyResults);

        if (makeKeyResults.hasResult())
        {
            key = makeKeyResults.result();
        }

        return [key];
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeKeyAccountRelationExists</Name>
				<Source><![CDATA[
    private static container makeKeyAccountRelationExists(
        TableGroupAll   _accountCode,
        CustVendRel     _accountRelation)
    {
        return [curext(), _accountCode, _accountRelation];
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeKeyItemRelationExists</Name>
				<Source><![CDATA[
    private static container makeKeyItemRelationExists(
        InventPostingItemCode   _itemCode,
        ItemRelation            _itemRelation)
    {
        return [curext(), _itemCode, _itemRelation];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>