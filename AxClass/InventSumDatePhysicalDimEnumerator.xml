<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDatePhysicalDimEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventSumDatePhysicalDimEnumerator</c> class is Enumerator of <c>InventSumDatePhysicalDim</c> class.
/// </summary>
class InventSumDatePhysicalDimEnumerator implements Enumerator
{
    TransDate       perDate;
    Query           query;
    QueryRun        queryRun;
    InventSum       currentInventSum;
    InventDim       currentInventDim;
    InventQty       currentOnHandQty;
    PdsCWInventQty  currentCWOnHandQty;
    InventDimParm   currentInventDimParm;

    boolean         atBeginning;
    boolean         atEnd;
    boolean         updateCurrent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private void buildQuery()
    {
        if (queryRun == null)
        {
            QueryBuildDataSource qbds = query.dataSourceTable(tableNum(InventSum));
            QueryBuildFieldList qbfl = qbds.fields();

            qbds.addGroupByField(fieldNum(InventSum, ItemId));

            qbfl.addField(fieldNum(InventSum, PostedQty), SelectionField::Sum);
            qbfl.addField(fieldNum(InventSum, PostedValue), SelectionField::Sum);
            qbfl.addField(fieldNum(InventSum, Received), SelectionField::Sum);
            qbfl.addField(fieldNum(InventSum, Deducted), SelectionField::Sum);
            qbfl.addField(fieldNum(InventSum, Picked), SelectionField::Sum);
            qbfl.addField(fieldNum(InventSum, Registered), SelectionField::Sum);
            qbfl.addField(fieldNum(InventSum, PdsCWPostedQty), SelectionField::Sum);
            qbfl.addField(fieldNum(InventSum, PdsCWReceived), SelectionField::Sum);
            qbfl.addField(fieldNum(InventSum, PdsCWDeducted), SelectionField::Sum);
            qbfl.addField(fieldNum(InventSum, PdsCWPicked), SelectionField::Sum);
            qbfl.addField(fieldNum(InventSum, PdsCWRegistered), SelectionField::Sum);

            queryRun = new QueryRun(query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current element in the collection.
    /// </summary>
    /// <returns>
    /// The current <c>anytype</c> element in the collection, which is an container including on hand quantity, catch-weight on hand quantity, invent sum and invent dimension.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The enumerator does not point to any element in the collection.
    /// </exception>
    public anytype current()
    {
        if (atBeginning)
        {
            throw error("@SYS125456");
        }

        if (updateCurrent)
        {
            this.getCurrentOnHand();
            updateCurrent = false;
        }

        return [currentOnHandQty, currentCWOnHandQty, currentInventSum, currentInventDim];
    }

]]></Source>
			</Method>
			<Method>
				<Name>definitionString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides the description for the <c>InventSumDatePhysicalDimBulk</c> class.
    /// </summary>
    /// <returns>
    ///     The description for the <c>InventSumDatePhysicalDimBulk</c> class.
    /// </returns>
    public str definitionString()
    {
        return new List(Types::Record).getEnumerator().definitionString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentOnHand</Name>
				<Source><![CDATA[
    private void getCurrentOnHand()
    {
        InventSumDatePhysicalDimBuffer inventSumBuffer = InventSumDatePhysicalDimBuffer::newParametersWithSelectedInventDimParm(perDate, currentInventSum, currentInventDim, currentInventDimParm);

        [currentOnHandQty, currentCWOnHandQty] = inventSumBuffer.cwOnHandQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Advances the enumerator to the next element of the collection.
    /// </summary>
    /// <returns>
    ///     true if the enumerator was advanced; otherwise, false.
    /// </returns>
    public boolean moveNext()
    {
        if (atBeginning)
        {
            this.buildQuery();
            atBeginning = false;
        }

        boolean ret = queryRun.next();
        if (ret)
        {
            currentInventSum = queryRun.get(tableNum(InventSum));
            currentInventDim = queryRun.get(tableNum(InventDim));
            updateCurrent = true;
        }
        else
        {
            atEnd = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes a new instance of the <c>InventSumDatePhysicalDimEnumerator</c> class.
    /// </summary>
    protected void new()
    {
        atBeginning = true;
        atEnd       = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerDate</Name>
				<Source><![CDATA[
    public TransDate parmPerDate(TransDate _perDate = perDate)
    {
        perDate = _perDate;

        return perDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = currentInventDimParm)
    {
        currentInventDimParm = _inventDimParm;

        return currentInventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enumerator to its initial position, which is before the first element in the collection.
    /// </summary>
    public void reset()
    {
        queryRun.reset();

        atBeginning = true;
        atEnd = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides the string representation of the collection element that enumerator points to.
    /// </summary>
    /// <returns>
    ///     The string representation of the collection element that enumerator points to.
    /// </returns>
    public str toString()
    {
        str toString;

        if (atBeginning)
        {
            toString = "@SYS344541";
        }
        else
        {
            toString = strFmt('%1 = %2, %3 = 4',
                                fieldId2name(tableNum(InventSum), fieldNum(InventSum, ItemId)),
                                currentInventSum.ItemId,
                                fieldId2name(tableNum(InventDim), fieldNum(InventDim, InventDimId)),
                                currentInventDim.InventDimId);

            if (atEnd)
            {
                toString = strFmt('%1 %2', toString, "@SYS344542");
            }
        }

        return toString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Construct an <c>InventSumDatePhysicalDimEnumerator</c> object.
    /// </summary>
    /// <returns>
    ///     return an <c>InventSumDatePhysicalDimEnumerator</c> object.
    /// </returns>
    public static InventSumDatePhysicalDimEnumerator construct()
    {
        return new InventSumDatePhysicalDimEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Construct an <c>InventSumDatePhysicalDimEnumerator</c> object by a date that is invent trans's invent date, and an InventSumCount query.
    /// </summary>
    /// <param name="_perDate">
    ///     A date that is used to compare with invent trans' invent date.
    /// </param>
    /// <param name="_query">
    ///     An InventSumCount query.
    /// </param>
    /// <returns>
    ///     return an <c>InventSumDatePhysicalDimEnumerator</c> object.
    /// </returns>
    public static InventSumDatePhysicalDimEnumerator newParameters(
        TransDate   _perDate,
        Query       _query)
    {
        InventSumDatePhysicalDimEnumerator ret = InventSumDatePhysicalDimEnumerator::construct();
        ret.parmPerDate(_perDate);
        ret.parmQuery(new Query(_query));

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>