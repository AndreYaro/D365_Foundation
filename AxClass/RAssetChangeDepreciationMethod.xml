<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetChangeDepreciationMethod</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetChangeDepreciationMethod extends RunBaseBatch implements BatchRetryable
{
    QueryRun                queryRun;
    RAssetYear              changeYear;
    DialogField             yearControl;
    RAssetTaxDeprProfileId  oldProfile;
    DialogField             oldProfileControl;
    RAssetTaxDeprProfileId  newProfile;
    DialogField             newProfileControl;

    DialogRunbase           dialog;

    #DEFINE.dialogOldProfileFieldNo(900)
    #DEFINE.dialogOldProfileCtrlName("Fld900_1")
    #DEFINE.dialogNewProfileFieldNo(901)
    #DEFINE.dialogNewProfileCtrlName("Fld901_1")

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        changeYear,
        oldProfile,
        newProfile
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        dialog.caption("@GLS116196");
        changeYear        = changeYear ? changeYear : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        yearControl       = dialog.addFieldValue(extendedTypeStr(RAssetYear), changeYear, "@SYS32606");

        oldProfileControl = new DialogField(dialog, extendedTypeStr(RAssetTaxDeprProfileId), #dialogOldProfileFieldNo);
        dialog.addCtrlDialogField(oldProfileControl.name());
        oldProfileControl.init(dialog);
        oldProfileControl.label("@GLS116164");
        oldProfileControl.lookupButton(FormLookupButton::Always);
        oldProfileControl.value(oldProfile);

        Debug::assert(oldProfileControl.fieldname() == #dialogOldProfileCtrlName);

        newProfileControl = new DialogField(dialog, extendedTypeStr(RAssetTaxDeprProfileId), #dialogNewProfileFieldNo);
        dialog.addCtrlDialogField(newProfileControl.name());
        newProfileControl.init(dialog);
        newProfileControl.label("@GLS116163");
        newProfileControl.lookupButton(FormLookupButton::Always);
        newProfileControl.value(newProfile);

        Debug::assert(newProfileControl.fieldname() == #dialogNewProfileCtrlName);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called after dialog() is called, making is possible to add controls after the main dialog()
    /// </summary>
    /// <param name="_dialog">
    /// Object for the <c>Dialog</c> from.
    /// </param>
    /// <remarks>
    ///  Adding Mutli-Select lookup for Billing classification.
    /// </remarks>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld900_1_lookup</Name>
				<Source><![CDATA[
    private void fld900_1_lookup()
    {
        this.lookupDeprProfile(oldProfileControl.control());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld901_1_lookup</Name>
				<Source><![CDATA[
    private void fld901_1_lookup()
    {
        this.lookupDeprProfile(newProfileControl.control());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ret = super();
        changeYear = yearControl.value();
        oldProfile = oldProfileControl.value();
        newProfile = newProfileControl.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDeprProfile</Name>
				<Source><![CDATA[
    private void lookupDeprProfile(FormControl _callingControl)
    {
        SysTableLookup       sysTableLookup = SysTableLookup::newParameters(tableNum(RAssetDeprProfile), _callingControl);
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(RAssetDeprProfile));

        sysTableLookup.addLookupfield(fieldNum(RAssetDeprProfile, DeprProfile));

        queryBuildDataSource.addRange(fieldNum(RAssetDeprProfile, DeprMethod)).value(queryValue(RAssetDeprMethod::StraightLine));
        queryBuildDataSource.addRange(fieldNum(RAssetDeprProfile, DeprMethod)).value(queryValue(RAssetDeprMethod::TaxLine));
        queryBuildDataSource.addRange(fieldNum(RAssetDeprProfile, DeprMethod)).value(queryValue(RAssetDeprMethod::TaxNonLinearGroup));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query                query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;
        ;

        super();

        qbds = query.addDataSource(tableNum(RAssetStandards));
        qbr = qbds.addRange(fieldNum(RAssetStandards, AssetStandardId));
        qbr.value(queryValue(RAssetParameters::standardTaxIdDefault()));
        qbr.status(RangeStatus::Locked);

        qbr = qbds.addRange(fieldNum(RAssetStandards, DisposalDate));
        qbr.value(queryValue(dateNull()));
        qbr.status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeYear</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetYear parmChangeYear(RAssetYear _changeYear = changeYear)
    {
        changeYear = _changeYear;

        return changeYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewProfile</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetTaxDeprProfileId parmNewProfile(RAssetTaxDeprProfileId _newProfile = newProfile)
    {
        newProfile = _newProfile;

        return newProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOldProfile</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetTaxDeprProfileId parmOldProfile(RAssetTaxDeprProfileId _oldProfile = oldProfile)
    {
        oldProfile = _oldProfile;

        return oldProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetStandards rAssetStandards;
        RAssetLifeHist  lifeHist, histNext;
        Counter         progressTotal;
        Counter         progressCounter;
        TransDate       changeDate = mkDate(1, 1, year(changeYear)) - 1;

        void insertLine(RAssetLifeTime         _lifeTime,
                        RAssetFactor           _factor,
                        RAssetDeprProfileRecId _assetDeprProfileRecId,
                        TransDate              _date)
        {
            RAssetLifeHist  lifeHistNew = RAssetLifeHist::find(rAssetStandards.AssetId,
                                                               rAssetStandards.AssetStandardId,
                                                               _date,
                                                               true);

            lifeHistNew.NewLife           = _lifeTime;
            lifeHistNew.NewFactor         = _factor;
            lifeHistNew.rAssetDeprProfile = _assetDeprProfileRecId;
            lifeHistNew.SubGroupId        = "";

            if (lifeHistNew.RecId)
            {
                lifeHistNew.doUpdate();
            }
            else
            {
                lifeHistNew.AssetStandardId = rAssetStandards.AssetStandardId;
                lifeHistNew.AccountNum      = rAssetStandards.AssetId;
                lifeHistNew.ChangeDate      = _date;
                lifeHistNew.doInsert();
            }
        }

        if (! changeDate)
            return;

        ttsbegin;

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@GLS116196", progressTotal, #AviFindFile);

        queryRun.query().dataSourceTable(tableNum(RAssetStandards)).update(true);

        while (queryRun.next())
        {
            rAssetStandards = queryRun.get(tableNum(RAssetStandards));

            progressCounter++;
            progress.setCount(progressCounter);
            progress.setText(strFmt("@GLS116356", rAssetStandards.AssetId, rAssetStandards.AssetGroup));

            if (rAssetStandards.deprProfile(changeDate).DeprProfile != oldProfile)
                continue;

            if (rAssetStandards.deprProfile(changeDate).DeprProfile == newProfile)
                continue;

            if (rAssetStandards.lastDepDate() > changeDate)
            {
                warning(strFmt("@GLS117109", rAssetStandards.AssetId));
                continue;
            }

            if (! (select firstonly RecId from rAssetLifeHist
                     where rAssetLifeHist.AccountNum      == rAssetStandards.AssetId &&
                           rAssetLifeHist.AssetStandardId == rAssetStandards.AssetStandardId).RecId)
            {
                insertLine(RAssetGroup::find(rAssetStandards.AssetGroup).Lifetime, 1, rAssetStandards.rAssetDeprProfile, dateNull());
                insertLine(RAssetGroup::find(rAssetStandards.AssetGroup).Lifetime, 1, RAssetDeprProfile::findByDeprProfile(newProfile).RecId, changeDate);
            }
            else
            {
                lifeHist = RAssetLifeHist::findDateLifeTime(rAssetStandards.AssetId, changeDate, rAssetStandards.AssetStandardId);

                insertLine(lifeHist.NewLife, 1, RAssetDeprProfile::findByDeprProfile(newProfile).RecId, changeDate);

                while select forupdate histNext
                    where histNext.AccountNum      == rAssetStandards.AssetId         &&
                          histNext.AssetStandardId == rAssetStandards.AssetStandardId &&
                          histNext.ChangeDate      >  changeDate
                {
                    insertLine(histNext.NewLife, 1, RAssetDeprProfile::findByDeprProfile(newProfile).RecId, histNext.ChangeDate);
                }
            }
            rAssetStandards.rAssetDeprProfile = RAssetDeprProfile::findByDeprProfile(newProfile).RecId;
            rAssetStandards.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version = conPeek(_packedClass, 1);
        container       packedQuery = conPeek(_packedClass, conLen(_packedClass));
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun  = new SysQueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (! changeYear)
            ret = checkFailed("@SYS62556");


        if (! oldProfile || ! newProfile)
            ret = checkFailed("@GLS117091");

        if (oldProfile == newProfile)
            ret = checkFailed("@GLS117092");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS116196";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetChangeDepreciationMethod  changeMethod;
        ;

        changeMethod = new RAssetChangeDepreciationMethod();
        if (changeMethod.prompt())
        {
            changeMethod.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>