<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport4SIF</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class RPayReport4SIF extends RunBase
{
    ComExcelDocument_RU             excelDocument;
    RPayReportSocialTaxPeriod       reportPeriod;
    RPayYearPeriod                  payYear;
    TransDate                       reportDate;
    RPay4FSSOfficialsType           officialsType;
    EmployeeId_RU                   responsibleId;
    DialogField                     dfReportPeriod;
    DialogField                     dfPayYear;
    DialogField                     dfResponsibleId;
    DialogField                     dfCorrecting;
    DialogField                     dfReportDate;
    DialogField                     dfOfficialsType;
    NoYes                           correcting;
    RPayCounterUnit                 fundSocialInsurance;
    RPayCounterUnit                 fundSocialPayments;
    RPayCounterUnit                 fundSick;
    RPayCounterUnit                 fundTraumaInsurance;
    RPayCounterUnit                 fundPayments;
    str                             pctPregnant;
    str                             pctSickChild1, pctSickChild2;
    str                             pctChildBorn;
    str                             pctFuneral;
    str                             pctInvalidChild;
    str                             pctFutureParent;
    str                             rateInsuranceCut;
    str                             rateInsuranceExtra;
    str                             pctIncident;
    str                             pctProfRisk;
    str                             pctHealing;
    RPayGroup                       groupWorkers;
    RPayGroup                       groupWomen;
    RPayGroup                       groupHarmful;
    str                             pctOverSick;
    str                             pctOverPregnant;
    str                             pctOverChild1, pctOverChild2;
    str                             pctOverFuneral;

    date                            periodEnd;

    str                             fromYearStart;
    str                             beforeQuarter;
    str                             thisQuarter;
    str                             month1;
    str                             month2;
    str                             month3;
    str                             mthnames[];
    CompanyInfo                     companyInfo;
    RPayRateCode                    rounding,
                                    invalidRate;
    RpayFundDeductionCode           deductionCodeInvalids,
                                    deductionCodeExceedMax,
                                    Article58_33Deduction,
                                    Article58_34Deduction;

    int                             currentSheet;
    Range                           sortOfWorkMain,
                                    sortOfWorkPluralistically;
    RoundOff                        roundValue;

    RPayRateTable                   rateTable;

    RPayAmount                      invalidFundTotal, invalidFund1Mth, invalidFund2Mth, invalidFund3Mth;
    RPayAmount                      invalidDedTotal,  invalidDed1Mth, invalidDed2Mth, invalidDed3Mth;

    Map             invalidAmountsMap;
    Counter         invalidRateQty, womenQty;

    RPayRateCode    medInspectionRate;
    container       staffPositionsData;

    #define.cellSpace(3)
    #define.EmplQtyLen(6)

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        reportPeriod,
        payYear,
        officialsType,
        responsibleId
    #endmacro

    #localmacro.InvalidAmounts
        invalidDedTotal,  invalidDed1Mth, invalidDed2Mth, invalidDed3Mth
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>advanceProgress</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void advanceProgress(int _tableNumber)
    {
        progress.setText(strfmt("@SYS55826", _tableNumber));
        progress.incCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calcCostType(str             _period,
                                     RPayCounterUnit _fund,
                                     str             _payCType,
                                     str             _payGroup = '',
                                     Range           _sortOfWork = '')
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds  = query.addDataSource(tablenum(RPayTrans));
        Query                   query1;
        QueryBuildDataSource    qbds2;
        RPayTrans               rPayTrans;
        RPayTrans               rPayTrans1;
        ;

        if (! _payCType)
        {
            return [0, 0, 0];
        }

        qbds.addSelectionField(fieldnum(RPayTrans, Amount), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(RPayTrans, QtyDay), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(RPayTrans, RecId), SelectionField::Count);

        if (correcting)
        {
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(_period);
        }
        else
        {
            qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(_period);
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(fromYearStart);
        }

        qbds.addRange(fieldnum(RPayTrans, PayCType)).value(_payCType);

        if (_payGroup)
        {
            qbds2 = qbds.addDataSource(tablenum(RPayGroupMember));
            qbds2.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RPayGroupMember, PersonEmplId));
            qbds2.addRange(fieldnum(RPayGroupMember, PayGroup)).value(_payGroup);
            qbds2.fetchMode(QueryFetchMode::One2One);
            qbds2.joinMode(JoinMode::ExistsJoin);
        }

        if (_sortOfWork)
        {
            qbds2 = qbds.addDataSource(tablenum(RHRMEmplTable));
            qbds2.joinMode(JoinMode::ExistsJoin);
            qbds2.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
            qbds2.fetchMode(QueryFetchMode::One2One);
            qbds2.addRange(fieldnum(RHRMEmplTable, SortOfWork)).value(_sortOfWork);
        }

        query1 = new Query(query.pack());

        qbds = query.dataSourceTable(tablenum(RPayTrans));
        qbds = qbds.addDataSource(tablenum(RpayFundEmplSum));
        qbds.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RpayFundEmplSum, EmplId));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds.addRange(fieldnum(RpayFundEmplSum, RpayCounterUnit)).value(_fund);

        if (correcting)
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(_period);
        }
        else
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, PayPeriod)).value(_period);
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }

        qbds = query.dataSourceTable(tablenum(RPayTrans));
        qbds = qbds.addDataSource(tablenum(RPayFundMember));
        qbds.addLink(fieldnum(RPayTrans, PayCType), fieldnum(RPayFundMember, PayCostType));
        qbds.addRange(fieldnum(RPayFundMember, CounterUnit)).value(con2str([fundSocialPayments, fundSick]));
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        rPayTrans = this.executeQuery(query, tablenum(RPayTrans));

        qbds = query1.dataSourceTable(tablenum(RPayTrans));
        qbds = qbds.addDataSource(tablenum(RPayFundMember));
        qbds.addLink(fieldnum(RPayTrans, PayCType), fieldnum(RPayFundMember, PayCostType));
        qbds.addRange(fieldnum(RPayFundMember, CounterUnit)).value(fundSocialPayments);
        qbds.addRange(fieldnum(RPayFundMember, CounterUnit)).value(fundSick);
        qbds.joinMode(JoinMode::ExistsJoin);

        rPayTrans1 = this.executeQuery(query1, tablenum(RPayTrans));

        return [rPayTrans.Amount + rPayTrans1.Amount,
                rPayTrans.QtyDay + rPayTrans1.QtyDay,
                rPayTrans.RecId  + rPayTrans1.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostTypeFromFund</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container calcCostTypeFromFund(str             _period,
                                             RPayCounterUnit _fund,
                                             Range           _sortOfWork = '')
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RPayTrans));
        QueryBuildDataSource    qbds2;
        RPayTrans               rPayTrans;

        ;

        if (! _fund)
        {
            return [0, 0, 0];
        }

        qbds.addSelectionField(fieldnum(RPayTrans, Amount), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(RPayTrans, QtyDay), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(RPayTrans, RecId), SelectionField::Count);

        if (correcting)
        {
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(_period);
        }
        else
        {
        qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(_period);
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(fromYearStart);
        }

        if (_sortOfWork)
        {
            qbds2 = qbds.addDataSource(tablenum(RHRMEmplTable));
            qbds2.joinMode(JoinMode::ExistsJoin);
            qbds2.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
            qbds2.fetchMode(QueryFetchMode::One2One);
            qbds2.addRange(fieldnum(RHRMEmplTable, SortOfWork)).value(_sortOfWork);
        }

        qbds = qbds.addDataSource(tablenum(RPayFundMember));
        qbds.addLink(fieldnum(RPayTrans, PayCType), fieldnum(RPayFundMember, PayCostType));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addRange(fieldnum(RPayFundMember, CounterUnit)).value(_fund);

        rPayTrans = this.executeQuery(query, tablenum(RPayTrans));

        return [rPayTrans.Amount,
                rPayTrans.QtyDay,
                rPayTrans.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFundBase</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calcFundBase(str _period,
                                      str _fundToInclude,
                                      str _fundToExclude = "")
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RPayTrans));
        QueryBuildDataSource    qbds2;
        RPayTrans               rPayTrans;

        ;

        if (! _fundToInclude)
        {
            return 0;
        }
        qbds.addSelectionField(fieldnum(RPayTrans, Amount), SelectionField::Sum);

        if (correcting)
        {
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(_period);
        }
        else
        {
            qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(_period);
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(fromYearStart);
        }

        qbds2 = qbds.addDataSource(tablenum(RPayFundMember));
        qbds2.addLink(fieldnum(RPayTrans, PayCType), fieldnum(RPayFundMember, PayCostType));
        qbds2.addRange(fieldnum(RPayFundMember, CounterUnit)).value(_fundToInclude + (_fundToExclude ? ',!' + _fundToExclude : ''));
        qbds2.joinMode(JoinMode::ExistsJoin);

        rPayTrans = this.executeQuery(query, tablenum(RPayTrans));

        return rPayTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvalids</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcInvalids()
    {
        Query                   query;
        QueryBuildDataSource    qbds, qbdsDeduction;
        QueryRun                queryRun;
        EmployeeTable_RU        emplTable;
        RPayHistory             payHistory;
        RPayFundEmplSum         rPayFundEmplSumLocal;
        ;

        query = new Query();
        qbds = query.addDataSource(tablenum(RPayFundEmplSum));

        qbds.addRange(fieldnum(RPayFundEmplSum, RpayCounterUnit)).value(fundSocialInsurance);
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldnum(RPayFundEmplDeduction, EmplId));
        qbds.addSelectionField(fieldnum(RPayFundEmplSum, RpayFundTotalAmount), SelectionField::Sum);

        qbdsDeduction = qbds.addDataSource(tablenum(RPayFundEmplDeduction));
        qbdsDeduction.relations(true);
        qbdsDeduction.joinMode(JoinMode::ExistsJoin);
        qbdsDeduction.addRange(fieldnum(RPayFundEmplDeduction, RpayFundDeductionCode)).value(deductionCodeInvalids);

        if (correcting)
        {
            qbds.addRange(fieldnum(RPayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }
        else
        {
            qbds.addRange(fieldnum(RPayFundEmplSum, PayPeriod)).value(fromYearStart);
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            rPayFundEmplSumLocal = queryRun.get(tablenum(RPayFundEmplSum));

            if (! rPayFundEmplSumLocal.RpayFundTotalAmount)
            {
                continue;
            }

            invalidDedTotal = this.getFundTotalDeductionAmount(fromYearStart,  fundSocialInsurance, deductionCodeInvalids, '', rPayFundEmplSumLocal.EmplId);

            if (invalidDedTotal != 0)
            {
                invalidFundTotal += this.getFundTotalAmountSum(fromYearStart, fundTraumaInsurance, false, '', rPayFundEmplSumLocal.EmplId) -
                                    this.getFundTotalDeductionAmount(fromYearStart,  fundTraumaInsurance, '', '', rPayFundEmplSumLocal.EmplId, true);

                invalidFund1Mth  += this.getFundTotalAmountSum(month1, fundTraumaInsurance, false, '', rPayFundEmplSumLocal.EmplId)-
                                    this.getFundTotalDeductionAmount(month1,  fundTraumaInsurance, '', '', rPayFundEmplSumLocal.EmplId, true);

                invalidFund2Mth  += this.getFundTotalAmountSum(month2, fundTraumaInsurance, false, '', rPayFundEmplSumLocal.EmplId) -
                                    this.getFundTotalDeductionAmount(month2,  fundTraumaInsurance, '', '', rPayFundEmplSumLocal.EmplId, true);

                invalidFund3Mth  += this.getFundTotalAmountSum(month3, fundTraumaInsurance, false, '', rPayFundEmplSumLocal.EmplId) -
                                    this.getFundTotalDeductionAmount(month3,  fundTraumaInsurance, '', '', rPayFundEmplSumLocal.EmplId, true);

                invalidDed1Mth   =  this.getFundTotalDeductionAmount(month1,  fundSocialInsurance, deductionCodeInvalids, '', rPayFundEmplSumLocal.EmplId);
                invalidDed2Mth   =  this.getFundTotalDeductionAmount(month2,  fundSocialInsurance, deductionCodeInvalids, '', rPayFundEmplSumLocal.EmplId);
                invalidDed3Mth   =  this.getFundTotalDeductionAmount(month3,  fundSocialInsurance, deductionCodeInvalids, '', rPayFundEmplSumLocal.EmplId);

                invalidAmountsMap.insert(rPayFundEmplSumLocal.EmplId, [#InvalidAmounts]);
            }
        }

        if (invalidAmountsMap.elements())
        {
            invalidFundTotal = this.round(invalidFundTotal, roundValue);
            invalidFund1Mth  = this.round(invalidFund1Mth, roundValue);
            invalidFund2Mth  = this.round(invalidFund2Mth, roundValue);
            invalidFund3Mth  = this.round(invalidFund3Mth, roundValue);
        }

        while select EmployeeId from emplTable
            where emplTable.EmployeeId == emplTable.EmployeeId
        exists join payHistory
            where payHistory.Number         == emplTable.EmployeeId &&
                  payHistory.StartDate      <= periodEnd        &&
                  payHistory.operationType  == RHRMJournalType::Receive
        {
            if (this.isEmployed(emplTable.EmployeeId) && this.isInvalid(emplTable.EmployeeId))
            {
                ++invalidRateQty;
            }
        }

        if (invalidRateQty < invalidAmountsMap.elements())
        {
            warning(strfmt("@RUP3416", invalidRateQty, invalidAmountsMap.elements()));
            invalidRateQty = invalidAmountsMap.elements();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPayment</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int calcPayment(str             _dates,
                              RPayCounterUnit _fund,
                              str             _payCType)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(EmployeeTable_RU));
        ;
        if (! _payCType)
        {
            return 0;
        }
        qbds.addSelectionField(fieldnum(EmployeeTable_RU, RecId), SelectionField::Count);
        qbds = qbds.addDataSource(tablenum(RPayTrans));
        qbds.addLink(fieldnum(EmployeeTable_RU, EmployeeId), fieldnum(RPayTrans, EmplId));
        if (correcting)
        {
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(_dates);
        }
        else
        {
            qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(_dates);
            qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(fromYearStart);
        }
        qbds.addRange(fieldnum(RPayTrans, PayCType)).value(_payCType);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds = query.dataSourceTable(tablenum(EmployeeTable_RU));
        qbds = qbds.addDataSource(tablenum(RpayFundEmplSum));
        qbds.addLink(fieldnum(EmployeeTable_RU, EmployeeId), fieldnum(RpayFundEmplSum, EmplId));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds.addRange(fieldnum(RpayFundEmplSum, RpayCounterUnit)).value(_fund);

        if (correcting)
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(_dates);
        }
        else
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, PayPeriod)).value(_dates);
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }

        return any2Int(this.executeQuery(query, tablenum(EmployeeTable_RU)).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStaffPositions</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcStaffPositions()
    {
        RHRMStaffList           rhrmStaffList;
        RHRMStaffListHistory    rhrmStaffListHistory,
                                rhrmStaffListHistoryExists;
        TransDate               transDate;
        RHRMStaffListFactor     totalFactorToCertify,
                                totalFactorCertified,
                                totalFactorCertifiedHarmful,
                                totalFactorCertifiedDangerous;
        int                     totalEmplNotAccetable,
                                totalEmplNotAccetableWithMedical;
        container               staffListEmploy;

        ;
        transDate = dateStartYr(payYear) - 1;
        while select RecId from rhrmStaffList
        exists join rhrmStaffListHistoryExists
            where rhrmStaffListHistoryExists.StaffListRefRecId == rhrmStaffList.RecId &&
                  rhrmStaffListHistoryExists.StartDate <= transDate &&
                  rhrmStaffListHistoryExists.Certified == NoYes::Yes
        {
            rhrmStaffListHistory = RHRMStaffListHistory::findLast(rhrmStaffList.RecId, transDate);

            if (rhrmStaffListHistory.Certified)
            {
                totalFactorToCertify += rhrmStaffListHistory.StaffListFactor;

                if (rhrmStaffListHistory.Class != RHRMClassOfWorkConditions::None)
                {
                    totalFactorCertified += rhrmStaffListHistory.StaffListFactor;

                    if (rhrmStaffListHistory.Class == RHRMClassOfWorkConditions::Harmful ||
                        rhrmStaffListHistory.Class == RHRMClassOfWorkConditions::Dangerous)
                    {
                        staffListEmploy = this.getStaffListEmploy(rhrmStaffList.RecId, transDate);

                        totalEmplNotAccetable            += conpeek(staffListEmploy, 1);
                        totalEmplNotAccetableWithMedical += conpeek(staffListEmploy, 2);

                        if (rhrmStaffListHistory.Class == RHRMClassOfWorkConditions::Harmful)
                        {
                            totalFactorCertifiedHarmful += rhrmStaffListHistory.StaffListFactor;
                        }
                        else
                        {
                            totalFactorCertifiedDangerous += rhrmStaffListHistory.StaffListFactor;
                        }
                    }
                }
            }
        }

        staffPositionsData = [totalFactorToCertify,
                totalFactorCertified,
                totalFactorCertifiedHarmful,
                totalFactorCertifiedDangerous,
                totalEmplNotAccetable,
                totalEmplNotAccetableWithMedical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void checkAndPrepareParameters()
    {
        setprefix("@RUP2178");

        fundSocialPayments      = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 1, "@RUP906",   "@RUP3420");
        fundSick                = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 2, "@RUP906",   "@RUP3421");
        pctPregnant             = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 3, "@RUP2170",  "@RUP2146");
        pctSickChild1           = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 4, "@RUP2170",  "@RUP2357");
        pctChildBorn            = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 5, "@RUP2170",  "@RUP2148");
        pctFuneral              = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 6, "@RUP2170",  "@RUP2149");
        pctInvalidChild         = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 7, "@RUP2170",  "@RUP2150");
        pctFutureParent         = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 8, "@RUP2170",  "@RUP2151");
        fundTraumaInsurance     = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 9, "@RUP906",   "@RUP3422");
        fundPayments            = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 10, "@RUP906",  "@RUP3423");
        rateInsuranceCut        = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 11, "@RUP2170", "@RUP2155");
        rateInsuranceExtra      = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 12, "@RUP2170", "@RUP2156");
        pctIncident             = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 13, "@RUP2170", "@RUP2157");
        pctProfRisk             = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 14, "@RUP2170", "@RUP2158");
        pctHealing              = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 15, "@RUP2170", "@RUP2159");
        groupWorkers            = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 16, "@RUP1230", "@RUP2160");
        groupWomen              = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 17, "@RUP1230", "@RUP2162");
        pctOverSick             = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 18, "@RUP2170", "@RUP2166");
        pctOverPregnant         = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 19, "@RUP2170", "@RUP2167");
        pctOverChild1           = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 20, "@RUP2170", "@RUP2358");
        pctOverFuneral          = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 21, "@RUP2170", "@RUP2169");
        pctSickChild2           = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 22, "@RUP2170", "@RUP2359");
        pctOverChild2           = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 23, "@RUP2170", "@RUP2360");
        groupHarmful            = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 24, "@RUP1230", "@RUP2361");
        rounding                = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 25, "@RUP2170", "@RUP108");
        Article58_34Deduction   = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 26, "@RUP2170", "@RUP2985", false);
        Article58_33Deduction   = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 27, "@RUP2170", "@RUP2986", false);
        medInspectionRate       = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReport4SIF_2013, 28, "@RUP2170", "@RUP3533");

        if (groupWorkers)
        {
            this.checkCalculatedAvgQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCalculatedAvgQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void checkCalculatedAvgQty()
    {
        RPayAverageQuantity  averageQuantity;
        ReportPeriod_RU      dtIterator = endmth(dateStartYr(periodEnd));

        for (dtIterator = endmth(dateStartYr(periodEnd)); dtIterator <= periodEnd; dtIterator = endmth(nextmth(dtIterator)))
        {
            averageQuantity = RPayAverageQuantity::Find(groupWorkers, dtIterator);

            if (averageQuantity.RecId == 0)
            {
                checkFailed(strfmt("@RUP3417", dtIterator, groupWorkers));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeDocument</Name>
				<Source><![CDATA[
    private void closeDocument()
    {
        excelDocument.visible(true);
        excelDocument.finalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataPreparation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void dataPreparation()
    {
        progress.setText("@RUP2171");
        progress.incCount();

        this.calcInvalids();
        this.calcStaffPositions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        dialog.addGroup("@SYS28007");
        dfReportDate    = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS117650", "@SYS74065");
        dfPayYear       = dialog.addFieldValue(extendedTypeStr(RPayYearPeriod), payYear, "@SYS5563", "@SYS5563");
        dfReportPeriod  = dialog.addFieldValue(enumStr(RPayReportSocialTaxPeriod), reportPeriod);
        dfCorrecting    = dialog.addFieldValue(enumStr(NoYes), correcting, "@GLS111911");
        dialog.addGroup("@GLS102112");
        dfOfficialsType = dialog.addFieldValue(enumStr(RPay4FSSOfficialsType), officialsType);
        dfResponsibleId = dialog.addFieldValue(extendedTypeStr(RHRMEmplId), responsibleId, "@SYS138179", "@RUP2143");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplAvgQtyByGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAverageQty emplAvgQtyByGroup(RPayGroup _payGroup)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RPayAverageQuantity));
        QueryBuildDatasource    qbdsFund, qbdsMember;
        RPayAverageQuantity     rPayAverageQuantity;

        qbds.addSelectionField(fieldnum(RPayAverageQuantity, AverageQty), SelectionField::Avg);
        qbds.addRange(fieldnum(RPayAverageQuantity, PayPeriod)).value(fromYearStart);
        qbds.addRange(fieldnum(RPayAverageQuantity, PayGroup)).value(_payGroup);

        qbdsMember = qbds.addDataSource(tablenum(RPayGroupMember));
        qbdsMember.addLink(fieldnum(RPayAverageQuantity, PayGroup), fieldnum(RPayGroupMember, PayGroup));
        qbdsFund = qbdsMember.addDataSource(tablenum(RPayFundEmplSum));
        qbdsFund.addLink(fieldnum(RPayGroupMember, PersonEmplId), fieldnum(RPayFundEmplSum, EmplId));

        if (reportPeriod == RPayReportSocialTaxPeriod::Year || !correcting)
        {
            qbdsFund.addRange(fieldnum(RPayFundEmplSum, PayPeriod)).value(fromYearStart);
        }
        else
        {
            qbdsFund.addRange(fieldnum(RPayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }

        rPayAverageQuantity = this.executeQuery(query, tablenum(RPayAverageQuantity));

        return this.round(rPayAverageQuantity.AverageQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Common executeQuery(Query _query, tableId _tableId)
    {
        QueryRun qr = new QueryRun(_query);

        qr.next();

        return qr.get(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAddress</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillAddress()
    {
        LogisticsPostalAddress logisticsPostalAddress = companyInfo.postalAddress();

        excelDocument.insertValue('AddressZipCode', logisticsPostalAddress.ZipCode, currentSheet);
        excelDocument.insertValue('Address_Line1', logisticsPostalAddress.countyFullName_RU(), currentSheet);
        excelDocument.insertValue('Address_Line2', logisticsPostalAddress.City ? logisticsPostalAddress.City : logisticsPostalAddress.stateFullName_RU(), currentSheet);
        excelDocument.insertValue('Address_Line3', LogisticsAddressDistrict::find_RU(logisticsPostalAddress.District).fullName_RU(), currentSheet);
        excelDocument.insertValue('Address_Line4', LogisticsAddressStreet_RU::findRecID(logisticsPostalAddress.StreetId_RU).fullName(), currentSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDocument()
    {
        this.fillTables();

        this.fillRegularCells('TotalPages', this.pageNum2str(), 3, #cellSpace, 1, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillEmplQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillEmplQty()
    {
        Counter  emplAvgQty, tmpQty, harmQty;

        womenQty = this.getEmplQty(groupWomen);
        this.fillWomen();

        harmQty = this.getEmplQty(groupHarmful);
        this.fillHarmfulQty(harmQty);

        this.fillRegularCells('InvalidQty', strFmt('%1', invalidRateQty), #EmplQtyLen, #cellSpace, currentSheet, true, true);

        emplAvgQty = any2int(decRound(this.emplAvgQtyByGroup(groupWorkers), 0)) div 1;
        tmpQty     = max(womenQty, max(invalidRateQty, harmQty)) div 1;

        if (emplAvgQty < tmpQty)
        {
            warning(strfmt("@RUP3418", emplAvgQty, tmpQty));
            emplAvgQty = tmpQty;
        }

        this.fillRegularCells('EmplQty', strFmt('%1', emplAvgQty), #EmplQtyLen, #cellSpace, currentSheet, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHarmfulQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillHarmfulQty(Counter _harmQty)
    {
        if (_harmQty < conpeek(staffPositionsData, 5))
        {
            warning(strfmt("@RUP3532",
                        _harmQty,
                        conpeek(staffPositionsData, 5)));
            _harmQty = conpeek(staffPositionsData, 5);
        }

        this.fillRegularCells('HarmQty', strFmt('%1', _harmQty), #EmplQtyLen, #cellSpace, currentSheet, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOfficials</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillOfficials()
    {
        RHRMEmplTable   emplTable;

        switch (officialsType)
        {
            case RPay4FSSOfficialsType::Payer:
                excelDocument.insertValue('Responsible', '1', currentSheet);
                break;

            case RPay4FSSOfficialsType::Representative:
                excelDocument.insertValue('Responsible', '2', currentSheet);
                break;

            case RPay4FSSOfficialsType::Successor:
                excelDocument.insertValue('Responsible', '3', currentSheet);
                break;
        }

        if (responsibleId)
        {
            emplTable = RHRMEmplTable::find(responsibleId);
            excelDocument.insertValue('ResponsibleName', RHRMEmplTable::find(emplTable.EmployeeId).personTable().fio(false), currentSheet);
        }
        else
        {
            excelDocument.insertValue('ResponsibleName' , OfficialsTable_RU::findDirector().Name, currentSheet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRegularCells</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillRegularCells(Bookmark _bookmark,
                                    str      _text,
                                    int      _maxLen,
                                    int      _cellSpace = #cellSpace,
                                    int      _workSheet = 0,
                                    boolean  _horizontal = true,
                                    boolean  _alignRight = false)
    {
        int                             i, col, row;
        COM                             cell;
        COM                             comApplication, comDocument;
        COM                             comWorksheets, comWorksheet;
        Bookmark                        bookmark;
        ;

        if (!_bookmark || !_text || !_maxLen || !_cellSpace)
        {
            return;
        }

        comDocument = excelDocument.getComDocument();
        comApplication = comDocument.Application();
        bookmark = _bookmark;

        if (_workSheet)
        {
            comWorksheets = comDocument.Worksheets();
            comWorksheet  = comWorksheets.item(_workSheet);
            cell = comWorksheet.Range(bookmark);
        }
        else
        {
            cell = comApplication.Range(bookmark);
        }

        col = cell.Column();
        row = cell.Row();

        if (_alignRight)
        {
            if (_horizontal)
            {
                col += _cellSpace * (_maxLen - strlen(_text));
            }
            else
            {
                row += _cellSpace * (_maxLen - strlen(_text));
            }
        }

        while (i < strlen(_text) && i < _maxLen)
        {
            i++;
            bookmark = COMExcelDocument_RU::numToNameCell(col, row);
            cell = _workSheet ? comWorksheet.Range(bookmark) : comApplication.Range(bookmark);
            cell.value2(substr(_text, i, 1));
            if (_horizontal)
            {
                col += _cellSpace;
            }
            else
            {
                row += _cellSpace;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSheetCommon</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillSheetCommon()
    {
        #define.FSSLength(10)
        #define.SubCodeLen(5)

        this.fillRegularCells('RegNumFSS', companyInfo.FSS_RU, #FSSLength, #cellSpace, currentSheet);
        this.fillRegularCells('SubCode' + int2str(currentSheet), companyInfo.SubordinateCode, #SubCodeLen,  #cellSpace, currentSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable1</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTable1()
    {
        Range prevPeriods = SysQuery::range(datenull(), dateStartYr(payYear) - 1);

        excelDocument.insertValue('T1R2PAST',     this.getFundAmountSum(fundSocialInsurance, beforeQuarter), currentSheet);
        excelDocument.insertValue('T1R2M1',       this.getFundAmountSum(fundSocialInsurance, month1), currentSheet);
        excelDocument.insertValue('T1R2M2',       this.getFundAmountSum(fundSocialInsurance, month2), currentSheet);
        excelDocument.insertValue('T1R2M3',       this.getFundAmountSum(fundSocialInsurance, month3), currentSheet);

        excelDocument.insertValue('T1R15PAST',    this.round(this.calcFundBase(beforeQuarter, fundSocialPayments),
                                                   roundValue));
        excelDocument.insertValue('T1R15M1',      this.round(this.calcFundBase(month1, fundSocialPayments),
                                                   roundValue));
        excelDocument.insertValue('T1R15M2',      this.round(this.calcFundBase(month2, fundSocialPayments),
                                                   roundValue));
        excelDocument.insertValue('T1R15M3',      this.round(this.calcFundBase(month3, fundSocialPayments),
                                                   roundValue));

        this.fillRegularCells('CZ2', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable10</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fillTable10()
    {
        boolean   ret;

        if (conpeek(staffPositionsData, 1))
        {
            excelDocument.insertValue('T12R1C3', conpeek(staffPositionsData, 1));
            excelDocument.insertValue('T12R1C4', conpeek(staffPositionsData, 2));
            excelDocument.insertValue('T12R1C5', conpeek(staffPositionsData, 3));
            excelDocument.insertValue('T12R1C6', conpeek(staffPositionsData, 4));

            excelDocument.insertValue('T12R2C7', conpeek(staffPositionsData, 5));
            excelDocument.insertValue('T12R2C8', conpeek(staffPositionsData, 6));

            this.fillRegularCells('DC2', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);
            ret = true;
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable2</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fillTable2()
    {
        RPayAmount              amount, amountC5, amount2Check;
        RPayDayHour             qty;
        int                     cnt;
        Counter                 wQty, tmpWqty;

        int countSick(Range _sortOfWork = '', RPayIllType _illType = 0, RPayCostType _costType = '')
        {
            RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable;
            TransLink_RU                    transLink;
            Query                           query = new Query();
            QueryBuildDataSource            qbds = query.addDataSource(tablenum(RPayAverageEarnEmplPeriodTable));
            QueryBuildDataSource            qbds2;
            QueryRun                        queryRun;
            int                             i;

            qbds.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, AverageEarnCodeType)).value(queryValue(RPayAverageEarnCodeType::SickList));
            qbds.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, PrevPaySickListId)).value(SysQuery::valueEmptyString());

            if (_sortOfWork || !prmisdefault(_illType))
            {
                qbds2 = qbds.addDataSource(tablenum(RHRMEmplTable));
                qbds2.joinMode(JoinMode::ExistsJoin);
                qbds2.addLink(fieldnum(RPayAverageEarnEmplPeriodTable, EmplId), fieldnum(EmployeeTable_RU, EmployeeId));
                qbds2.fetchMode(QueryFetchMode::One2One);
                if (_sortOfWork)
                {
                    qbds2.addRange(fieldnum(RHRMEmplTable, SortOfWork)).value(_sortOfWork);
                }

                if (!prmisdefault(_illType))
                {
                    qbds.addRange(fieldnum(RPayAverageEarnEmplPeriodTable, RpayIllType)).value(queryValue(_illType));
                }
            }

            qbds = qbds.addDataSource(tablenum(RPayAverageEarnValue));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldnum(RPayAverageEarnEmplPeriodTable, RecId), fieldnum(RPayAverageEarnValue, AverageEarnEmplPeriodRecid));
            qbds.fetchMode(QueryFetchMode::One2One);

            qbds = qbds.addDataSource(tablenum(RPayTrans));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldnum(RPayAverageEarnValue, RecId), fieldnum(RPayTrans, SourceRecId));

            if (!prmisdefault(_costType))
            {
                qbds.addRange(fieldnum(RPayTrans, PayCType)).value(_costType);
            }

            if (correcting)
            {
                qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(fromYearStart);
            }
            else
            {
                qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(fromYearStart);
                qbds.addRange(fieldnum(RPayTrans, CorrectedPeriod)).value(fromYearStart);
            }

            qbds = qbds.addDataSource(tablenum(RPayFundMember));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldnum(RPayTrans, PayCType), fieldnum(RPayFundMember, PayCostType));
            if (prmisdefault(_costType))
            {
                qbds.addRange(fieldnum(RPayFundMember, CounterUnit)).value(fundSick);
            }

            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                averageEarnEmplPeriodTable = queryRun.get(tablenum(RPayAverageEarnEmplPeriodTable));
                transLink = TransLink_RU::findSec(averageEarnEmplPeriodTable.TableId, averageEarnEmplPeriodTable.RecId);
                if (transLink.Reversed && transLink.TransLinkType == TransLinkType_RU::Storno)
                {
                    i--;
                }
                else
                {
                    i++;
                }
            }

            return i;
        }

        int countRecipients(str _payCType = '', Range _sortOfWork = '')
        {
            Query                   query = new Query();
            QueryBuildDataSource    qbds, qbds2;
            QueryRun                queryRun;
            int                     j;

            qbds = query.addDataSource(tablenum(RPayTrans));
            qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(fromYearStart);
            qbds.addRange(fieldnum(RPayTrans, PayCType)).value(_payCType);
            qbds.orderMode(OrderMode::GroupBy);
            qbds.addSortField(fieldnum(RPayTrans, EmplId));

            if (_sortOfWork)
            {
                qbds2 = qbds.addDataSource(tablenum(RHRMEmplTable));
                qbds2.joinMode(JoinMode::ExistsJoin);
                qbds2.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
                qbds2.fetchMode(QueryFetchMode::One2One);
                qbds2.addRange(fieldnum(RHRMEmplTable, SortOfWork)).value(_sortOfWork);
            }

            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                j ++;
            }

            return j;
        }
        ;

        excelDocument.insertValue('T2SickOccurencies', countSick());

        [amount, qty, cnt] = this.calcCostTypeFromFund(fromYearStart, fundSick);
        excelDocument.insertValue('T2R1Qty', qty);
        [amountC5, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverSick);
        amount += amountC5;
        excelDocument.insertValue('T2R1Pay', this.round(amount, roundValue));
        excelDocument.insertValue('T2R1C5', this.round(amountC5, roundValue));
        amount2Check = this.round(amount, roundValue);

        excelDocument.insertValue('T2SickOccurenciesPluralistically', countSick(sortOfWorkPluralistically));

        [amount, qty, cnt] = this.calcCostTypeFromFund(fromYearStart, fundSick, sortOfWorkPluralistically);
        excelDocument.insertValue('T2R2Qty', qty);
        [amountC5, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverSick, '', sortOfWorkPluralistically);
        amount += amountC5;
        excelDocument.insertValue('T2R2Pay', this.round(amount, roundValue));
        excelDocument.insertValue('T2R2C5', this.round(amountC5, roundValue));

        wQty = countSick('', RPayIllType::maternity_leave, pctPregnant);
        excelDocument.insertValue('T2PregnancyOccurenciesAll', wQty);
        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctPregnant);
        excelDocument.insertValue('T2R3Qty', qty);
        [amountC5, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverPregnant);
        amount += amountC5;
        excelDocument.insertValue('T2R3Pay', this.round(amount, roundValue));
        excelDocument.insertValue('T2R3C5', this.round(amountC5, roundValue));
        amount2Check += this.round(amount, roundValue);

        tmpWqty = countSick(sortOfWorkPluralistically, RPayIllType::maternity_leave, pctPregnant);
        excelDocument.insertValue('T2PregnancyOccurenciesPluralistically', tmpWqty);
        wQty = max(wQty, tmpWqty);

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctPregnant, '', sortOfWorkPluralistically);
        excelDocument.insertValue('T2R4Qty', qty);
        [amountC5, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverPregnant, '', sortOfWorkPluralistically);
        amount += amountC5;
        excelDocument.insertValue('T2R4Pay', this.round(amount, roundValue));
        excelDocument.insertValue('T2R4C5',  this.round(amountC5, roundValue));

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctFutureParent);
        excelDocument.insertValue('T2R5Qty', qty);
        excelDocument.insertValue('T2R5Pay', this.round(amount, roundValue));
        amount2Check += this.round(amount, roundValue);

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctChildBorn);
        excelDocument.insertValue('T2R6Qty', qty);
        excelDocument.insertValue('T2R6Pay', this.round(amount, roundValue));
        amount2Check += this.round(amount, roundValue);

        excelDocument.insertValue('T2R7C1Qty', countRecipients(con2str([pctSickChild1, pctSickChild2, pctOverChild1, pctOverChild2]), ''));

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctSickChild1, '', '');
        excelDocument.insertValue('T2R9Qty', cnt);
        [amountC5, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverChild1, '', '');
        amount += amountC5;
        excelDocument.insertValue('T2R9Pay', this.round(amount, roundValue));
        excelDocument.insertValue('T2R8C5', this.round(amountC5, roundValue));
        excelDocument.insertValue('T2R9C1Qty', countRecipients(pctSickChild1, ''));
        amount2Check += this.round(amount, roundValue);

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctSickChild2, '', '');
        excelDocument.insertValue('T2R10Qty', cnt);
        [amountC5, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverChild2, '', '');
        amount += amountC5;
        excelDocument.insertValue('T2R10Pay', this.round(amount, roundValue));
        excelDocument.insertValue('T2R9C5', this.round(amountC5, roundValue));
        excelDocument.insertValue('T2R10C1Qty', countRecipients(pctSickChild2, ''));
        amount2Check += this.round(amount, roundValue);

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctInvalidChild);
        excelDocument.insertValue('T2R14Qty', qty);
        excelDocument.insertValue('T2R14Pay', this.round(amount, roundValue));
        amount2Check += this.round(amount, roundValue);

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctFuneral);
        excelDocument.insertValue('T2R15Qty', qty);
        [amountC5, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverFuneral);
        amount += amountC5;
        excelDocument.insertValue('T2R15Pay', this.round(amount, roundValue));
        excelDocument.insertValue('T2R11C5', this.round(amountC5, roundValue));
        amount2Check += this.round(amount, roundValue);

        //adjust qty of women
        if (womenQty < wQty)
        {
            warning (strfmt("@RUP3419", womenQty, wQty));
            womenQty = wQty;
            this.fillWomen();
        }

        this.fillRegularCells('DC2', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable3</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTable3()
    {
        RPayAmount              amount;
        ;

        amount = this.getFundTotalAmountSum(fromYearStart,  fundSocialInsurance);
        excelDocument.insertValue('T3C3Total', this.round(amount, roundValue));
        amount = this.getFundTotalAmountSum(month1, fundSocialInsurance);
        excelDocument.insertValue('T3C3M1',    this.round(amount, roundValue));
        amount = this.getFundTotalAmountSum(month2,         fundSocialInsurance);
        excelDocument.insertValue('T3C3M2',    this.round(amount, roundValue));
        amount = this.getFundTotalAmountSum(month3,         fundSocialInsurance);
        excelDocument.insertValue('T3C3M3',    this.round(amount, roundValue));

        amount = this.getFundTotalDeductionAmount(fromYearStart,  fundSocialInsurance, '', strfmt('%1,%2', deductionCodeInvalids, deductionCodeExceedMax));
        excelDocument.insertValue('T3C4Total', this.round(amount, roundValue));
        amount = this.getFundTotalDeductionAmount(month1,         fundSocialInsurance, '', strfmt('%1,%2', deductionCodeInvalids, deductionCodeExceedMax));
        excelDocument.insertValue('T3C4M1',    this.round(amount, roundValue));
        amount = this.getFundTotalDeductionAmount(month2,         fundSocialInsurance, '', strfmt('%1,%2', deductionCodeInvalids, deductionCodeExceedMax));
        excelDocument.insertValue('T3C4M2',    this.round(amount, roundValue));
        amount = this.getFundTotalDeductionAmount(month3,         fundSocialInsurance, '', strfmt('%1,%2', deductionCodeInvalids, deductionCodeExceedMax));
        excelDocument.insertValue('T3C4M3',    this.round(amount, roundValue));

        amount = this.getFundTotalDeductionAmount(fromYearStart,  fundSocialInsurance, deductionCodeInvalids);
        excelDocument.insertValue('T3C5Total', this.round(amount, roundValue));
        amount = this.getFundTotalDeductionAmount(month1,         fundSocialInsurance, deductionCodeInvalids);
        excelDocument.insertValue('T3C5M1',    this.round(amount, roundValue));
        amount = this.getFundTotalDeductionAmount(month2,         fundSocialInsurance, deductionCodeInvalids);
        excelDocument.insertValue('T3C5M2',    this.round(amount, roundValue));
        amount = this.getFundTotalDeductionAmount(month3,         fundSocialInsurance, deductionCodeInvalids);
        excelDocument.insertValue('T3C5M3',    this.round(amount, roundValue));

        amount = this.getFundTotalDeductionAmount(fromYearStart,  fundSocialInsurance, deductionCodeExceedMax);
        excelDocument.insertValue('T3C6Total', this.round(amount, roundValue));
        amount = this.getFundTotalDeductionAmount(month1,         fundSocialInsurance, deductionCodeExceedMax);
        excelDocument.insertValue('T3C6M1',    this.round(amount, roundValue));
        amount = this.getFundTotalDeductionAmount(month2,         fundSocialInsurance, deductionCodeExceedMax);
        excelDocument.insertValue('T3C6M2',    this.round(amount, roundValue));
        amount = this.getFundTotalDeductionAmount(month3,         fundSocialInsurance, deductionCodeExceedMax);
        excelDocument.insertValue('T3C6M3',    this.round(amount, roundValue));

        if (Article58_34Deduction)
        {
            amount = this.getFundTotalDeductionAmount(fromYearStart,  fundSocialInsurance, Article58_34Deduction);
            excelDocument.insertValue('T3R6Total', this.round(amount, roundValue));
            amount = this.getFundTotalDeductionAmount(month1,         fundSocialInsurance, Article58_34Deduction);
            excelDocument.insertValue('T3R6M1',    this.round(amount, roundValue));
            amount = this.getFundTotalDeductionAmount(month2,         fundSocialInsurance, Article58_34Deduction);
            excelDocument.insertValue('T3R6M2',    this.round(amount, roundValue));
            amount = this.getFundTotalDeductionAmount(month3,         fundSocialInsurance, Article58_34Deduction);
            excelDocument.insertValue('T3R6M3',    this.round(amount, roundValue));
        }

        if (Article58_33Deduction)
        {
            amount = this.getFundTotalDeductionAmount(fromYearStart,  fundSocialInsurance, Article58_33Deduction);
            excelDocument.insertValue('T3R7Total', this.round(amount, roundValue));
            amount = this.getFundTotalDeductionAmount(month1,         fundSocialInsurance, Article58_33Deduction);
            excelDocument.insertValue('T3R7M1',    this.round(amount, roundValue));
            amount = this.getFundTotalDeductionAmount(month2,         fundSocialInsurance, Article58_33Deduction);
            excelDocument.insertValue('T3R7M2',    this.round(amount, roundValue));
            amount = this.getFundTotalDeductionAmount(month3,         fundSocialInsurance, Article58_33Deduction);
            excelDocument.insertValue('T3R7M3',    this.round(amount, roundValue));
        }

        this.fillRegularCells('CW2', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable31</Name>
				<Source><![CDATA[
    #define.InvPerFirstLastPage(40)
    #define.InvFirstLastPageNum(currentSheet)

    #define.InvPerFirstPage(40)
    #define.InvFirstPageNum(currentSheet + 1)

    #define.InvPerPage(40)
    #define.InvPageNum(currentSheet + 2)

    #define.InvPerLastPage(40)
    #define.InvLastPageNum(currentSheet + 3)

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fillTable31()
    {
        int                     page, invalidPages;
        int                     invalidCount, invalidTotal, invalidOnPage;
        int                     i;

        TransDate               disAssignDate, disCancelDate;
        EmployeeId_RU           emplId;
        MapEnumerator           mapEnum;

        RPayAmount      amountTotal, amountFirst,
                        amountSecond, amountThird;

        BookMark makeBookMark(int _page, str _colName, int _row)
        {
            return excelDocument.getWorkSheetName(#InvFirstLastPageNum - 1 + _page) + '!' + _colName + int2str(_row);
        }

        void insertInvalid(EmployeeId_RU _emplId, int _firstRow)
        {
            int                     curRow;
            ;
            curRow = _firstRow + invalidOnPage - 1;

            excelDocument.insertValue(makeBookMark(page, 'A', curRow), invalidCount);
            excelDocument.insertValue(makeBookMark(page, 'F', curRow), RHRMPersonTable::findPayMainEmplId(_emplId).fio());
            excelDocument.insertValue(makeBookMark(page, 'AV', curRow), date2str(disAssignDate, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));

            if (disAssignDate)
            {
                disCancelDate = this.findUnDisRate(invalidRate, _emplId, disAssignDate);
                if (disCancelDate)
                {
                    excelDocument.insertValue(makeBookMark(page, 'BG', curRow), date2str(disCancelDate - 1, 123, 2, 2, 2, 2, 4, DateFlags::FormatAll));
                }
            }

            amountTotal += invalidDedTotal;
            excelDocument.insertValue(makeBookMark(page, 'BR', curRow), invalidDedTotal);

            amountFirst += invalidDed1Mth;
            excelDocument.insertValue(makeBookMark(page, 'CD', curRow), invalidDed1Mth);

            amountSecond += invalidDed2Mth;
            excelDocument.insertValue(makeBookMark(page, 'CP', curRow), invalidDed2Mth);

            amountThird += invalidDed3Mth;
            excelDocument.insertValue(makeBookMark(page, 'DB', curRow), invalidDed3Mth);

            return;
        }
        ;

        invalidPages = 0;
        invalidTotal = invalidAmountsMap.elements();
        i            = 1;

        if (invalidTotal == 0)
        {
            excelDocument.deleteWorksheet(#InvLastPageNum);
            excelDocument.deleteWorksheet(#InvPageNum);
            excelDocument.deleteWorksheet(#InvFirstPageNum);
            return true;
        }

        this.fillRegularCells('DC2', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);

        if (invalidTotal > #InvPerFirstLastPage)
        {
            excelDocument.deleteWorksheet(#InvFirstLastPageNum);
            if (invalidTotal - (#InvPerFirstPage + #InvPerLastPage) > 0)
            {
                while (invalidTotal - (#InvPerFirstPage + #InvPerLastPage + #InvPerPage * i) > 0)
                {
                    i++;
                    excelDocument.insertSheet(#InvPageNum - 1,#InvPageNum - 1);
                }
                invalidPages = 2 + i;
            }
            else
            {
                excelDocument.deleteWorksheet(#InvPageNum - 1);
                invalidPages = 2;
            }
        }
        else
        {
            excelDocument.deleteWorksheet(#InvLastPageNum);
            excelDocument.deleteWorksheet(#InvPageNum);
            excelDocument.deleteWorksheet(#InvFirstPageNum);

            invalidPages = 1;
        }

        invalidCount  = 0;
        invalidOnPage = 0;
        page          = 1;

        mapEnum = invalidAmountsMap.getEnumerator();
        while (mapEnum.moveNext())
        {
            emplId            = mapEnum.currentKey();
            [#InvalidAmounts] = mapEnum.currentValue();
            disAssignDate     = this.isInvalid(emplId);

            invalidCount++;

            switch (invalidPages)
            {
                case 1 :
                    invalidOnPage = invalidCount;
                    insertInvalid(emplId, 14);
                break;

                case 2 :
                    if ((invalidCount != invalidTotal) && (invalidCount <= #InvPerFirstPage))
                    {
                        invalidOnPage++;
                        insertInvalid(emplId, 14);
                    }
                    else
                    {
                        if (page == 1)
                        {
                            page          = 2;
                            invalidOnPage = 0;
                            currentSheet++;
                            this.fillRegularCells('DC2', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);
                        }
                        invalidOnPage++;
                        insertInvalid(emplId, 14);
                    }
                break;

                default:
                    if (invalidCount <= #InvPerFirstPage)
                    {
                        invalidOnPage = invalidCount;
                        insertInvalid(emplId, 14);
                        if (invalidCount == #InvPerFirstPage)
                         invalidOnPage = 0;
                    }
                    else
                    {
                        if (invalidOnPage == 0)
                        {
                            page++;
                            currentSheet++;
                            this.fillRegularCells('DC2', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);
                        }
                            invalidOnPage++;
                            insertInvalid(emplId, 14);

                        if (invalidOnPage == #InvPerPage || invalidCount + 1 == invalidTotal)
                        {
                            invalidOnPage = 0;
                        }
                    }
                break;
            }
        }

        if (invalidPages > 0)
        {
            excelDocument.insertValue(makeBookMark(invalidPages, 'BR', 54), amountTotal);
            excelDocument.insertValue(makeBookMark(invalidPages, 'CD', 54), amountFirst);
            excelDocument.insertValue(makeBookMark(invalidPages, 'CP', 54), amountSecond);
            excelDocument.insertValue(makeBookMark(invalidPages, 'DB', 54), amountThird);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable5</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fillTable5()
    {
        RPayAmount      amount, amount2Check;
        RPayDayHour     qty;
        int             cnt;

        int countRecipients(str _payCType = '', Range _sortOfWork = '')
        {
            Query                   query = new Query();
            QueryBuildDataSource    qbds, qbds2;
            QueryRun                queryRun;
            int                     j;

            qbds = query.addDataSource(tablenum(RPayTrans));
            qbds.addRange(fieldnum(RPayTrans, PayPeriod)).value(fromYearStart);
            qbds.addRange(fieldnum(RPayTrans, PayCType)).value(_payCType);
            qbds.orderMode(OrderMode::GroupBy);
            qbds.addSortField(fieldnum(RPayTrans, EmplId));

            if (_sortOfWork)
            {
                qbds2 = qbds.addDataSource(tablenum(RHRMEmplTable));
                qbds2.joinMode(JoinMode::ExistsJoin);
                qbds2.addLink(fieldnum(RPayTrans, EmplId), fieldnum(RHRMEmplTable, EmployeeId));
                qbds2.fetchMode(QueryFetchMode::One2One);
                qbds2.addRange(fieldnum(RHRMEmplTable, SortOfWork)).value(_sortOfWork);
            }

            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                j ++;
            }

            return j;
        }
        ;

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverSick);
        excelDocument.insertValue('T8R1C3', this.calcPayment(fromYearStart, fundSocialInsurance, pctOverSick));
        excelDocument.insertValue('T8R1C4', qty);
        amount2Check = this.round(amount, roundValue);

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverPregnant);
        excelDocument.insertValue('T8R2C3', this.calcPayment(fromYearStart, fundSocialInsurance, pctOverPregnant));
        excelDocument.insertValue('T8R2C4', qty);
        amount2Check += this.round(amount, roundValue);

        excelDocument.insertValue('T5R3C3', countRecipients(con2str([pctOverChild1, pctOverChild2]), ''));

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverChild1);
        excelDocument.insertValue('T8R4C3', this.calcPayment(fromYearStart, fundSocialInsurance, pctOverChild1));
        excelDocument.insertValue('T8R4C4', cnt);
        amount2Check += this.round(amount, roundValue);

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverChild2);
        excelDocument.insertValue('T8R5C3', this.calcPayment(fromYearStart, fundSocialInsurance, pctOverChild2));
        excelDocument.insertValue('T8R5C4', cnt);
        amount2Check += this.round(amount, roundValue);

        [amount, qty, cnt] = this.calcCostType(fromYearStart, fundSocialInsurance, pctOverFuneral);
        excelDocument.insertValue('T8R6C3', this.calcPayment(fromYearStart, fundSocialInsurance, pctOverFuneral));
        excelDocument.insertValue('T8R6C4', cnt);
        amount2Check += this.round(amount, roundValue);

        this.fillRegularCells('EY2', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable6</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTable6()
    {
        RPayRateCallContext callContext;

        RPayAverageQty getAverageQty(str _groups)
        {
            Query                   query   = new Query();
            QueryBuildDataSource    qbds    = query.addDataSource(tablenum(RPayAverageQuantity));
            QueryBuildDatasource    qbdsFund, qbdsMember;
            RPayAverageQuantity     rPayAverageQuantity;

            if (! _groups)
            {
                return 0;
            }
            qbds.addSelectionField(fieldnum(RPayAverageQuantity, AverageQty), SelectionField::Avg);
            qbds.addRange(fieldnum(RPayAverageQuantity, PayPeriod)).value(fromYearStart);
            qbds.addRange(fieldnum(RPayAverageQuantity, PayGroup)).value(_groups);

            qbdsMember = qbds.addDataSource(tablenum(RPayGroupMember));
            qbdsMember.addLink(fieldnum(RPayAverageQuantity, PayGroup), fieldnum(RPayGroupMember, PayGroup));
            qbdsFund = qbdsMember.addDataSource(tablenum(RPayFundEmplSum));
            qbdsFund.addLink(fieldnum(RPayGroupMember, PersonEmplId), fieldnum(RPayFundEmplSum, EmplId));

            if (reportPeriod == RPayReportSocialTaxPeriod::Year || !correcting)
            {
                qbdsFund.addRange(fieldnum(RPayFundEmplSum, PayPeriod)).value(fromYearStart);
            }
            else
            {
                qbdsFund.addRange(fieldnum(RPayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
            }

            rPayAverageQuantity = this.executeQuery(query, tablenum(RPayAverageQuantity));

            return this.round(rPayAverageQuantity.AverageQty);
        }

        RPayAmount roundFundTotalAmountSum(str             _dates,
                                           RPayCounterUnit _fund,
                                           boolean         _useGroup = false,
                                           RPayGroup       _group = "")
        {
            return this.round(this.getFundTotalAmountSum(_dates, _fund, _useGroup, _group), roundValue);
        }
        ;

        excelDocument.insertValue('T9C4Total',roundFundTotalAmountSum(fromYearStart, fundTraumaInsurance) -
                                    this.round(this.getFundTotalDeductionAmount(fromYearStart, fundTraumaInsurance, '*', '', '', true)));
        excelDocument.insertValue('T9C4M1',   roundFundTotalAmountSum(month1, fundTraumaInsurance) -
                                    this.round(this.getFundTotalDeductionAmount(month1, fundTraumaInsurance, '*', '', '', true)));
        excelDocument.insertValue('T9C4M2',   roundFundTotalAmountSum(month2, fundTraumaInsurance) -
                                    this.round(this.getFundTotalDeductionAmount(month2, fundTraumaInsurance, '*', '', '', true)));
        excelDocument.insertValue('T9C4M3',   roundFundTotalAmountSum(month3, fundTraumaInsurance) -
                                    this.round(this.getFundTotalDeductionAmount(month3, fundTraumaInsurance, '*', '', '', true)));

        excelDocument.insertValue('T9C5Total', invalidFundTotal);
        excelDocument.insertValue('T9C5M1',   invalidFund1Mth);
        excelDocument.insertValue('T9C5M2',   invalidFund2Mth);
        excelDocument.insertValue('T9C5M3',   invalidFund3Mth);

        excelDocument.insertValue('T9C6',     this.round(this.calcFundBase(fromYearStart, fundPayments, fundTraumaInsurance),
                                               roundValue) +
                                    this.round(this.getFundTotalDeductionAmount(fromYearStart, fundTraumaInsurance, '*', '', '', true)));
        excelDocument.insertValue('T9C6M1',   this.round(this.calcFundBase(month1, fundPayments, fundTraumaInsurance),
                                               roundValue) +
                                    this.round(this.getFundTotalDeductionAmount(month1, fundTraumaInsurance, '*', '', '', true)));
        excelDocument.insertValue('T9C6M2',   this.round(this.calcFundBase(month2, fundPayments, fundTraumaInsurance),
                                               roundValue) +
                                    this.round(this.getFundTotalDeductionAmount(month2, fundTraumaInsurance, '*', '', '', true)));
        excelDocument.insertValue('T9C6M3',   this.round(this.calcFundBase(month3, fundPayments, fundTraumaInsurance),
                                               roundValue) +
                                    this.round(this.getFundTotalDeductionAmount(month3, fundTraumaInsurance, '*', '', '', true)));

        callContext = RPayRateCallContext::construct(periodEnd);

        excelDocument.insertValue('T9C7',     RPayRateTable::find(RPayCounterTable::find(fundTraumaInsurance).PayRate).GetValue(callContext));
        excelDocument.insertValue('T9C8',     RPayRateTable::find(rateInsuranceCut).GetValue(callContext));
        excelDocument.insertValue('T9C9',     date2strusr(RPayRateTrans::find(rateInsuranceExtra, periodEnd).RateDate, DateFlags::FormatAll));
        excelDocument.insertValue('T9C10',    RPayRateTable::find(rateInsuranceExtra).GetValue(callContext));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable7</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTable7()
    {
        RPayAmount      amount;
        str             payCostTypes;

        str merge(str a, str b)
        {
            return a + (a ? "@SYS35667" : '') + b;
        }

        payCostTypes = merge(merge(pctIncident, pctProfRisk), pctHealing);

        excelDocument.insertValue('T10R2PAST', this.getFundAmountSum(fundTraumaInsurance, beforeQuarter));
        excelDocument.insertValue('T10R2M1',   this.getFundAmountSum(fundTraumaInsurance, month1));
        excelDocument.insertValue('T10R2M2',   this.getFundAmountSum(fundTraumaInsurance, month2));
        excelDocument.insertValue('T10R2M3',   this.getFundAmountSum(fundTraumaInsurance, month3));

        [amount] = this.calcCostType(beforeQuarter, fundSocialInsurance, payCostTypes);
        excelDocument.insertValue('T10R10PAST',this.round(amount, roundValue));

        [amount] = this.calcCostType(month1, fundSocialInsurance, payCostTypes);
        excelDocument.insertValue('T10R10M1',  this.round(amount, roundValue));

        [amount] = this.calcCostType(month2, fundSocialInsurance, payCostTypes);
        excelDocument.insertValue('T10R10M2',  this.round(amount, roundValue));

        [amount] = this.calcCostType(month3, fundSocialInsurance, payCostTypes);
        excelDocument.insertValue('T10R10M3',  this.round(amount, roundValue));

        this.fillRegularCells('DA2', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable8</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fillTable8()
    {
        RPayAmount      amount, amount2Check;
        RPayDayHour     days;

        [amount, days] = this.calcCostType(fromYearStart, fundSocialInsurance, pctIncident);
        excelDocument.insertValue('T11R1C3', days);
        excelDocument.insertValue('T11R1C4', this.round(amount, roundValue));
        amount2Check = this.round(amount, roundValue);

        [amount, days] = this.calcCostType(fromYearStart, fundSocialInsurance, pctIncident, '', sortOfWorkPluralistically);
        excelDocument.insertValue('T11R2C3', days);
        excelDocument.insertValue('T11R2C4', this.round(amount, roundValue));
        amount2Check += this.round(amount, roundValue);

        [amount, days] = this.calcCostType(fromYearStart, fundSocialInsurance, pctProfRisk);
        excelDocument.insertValue('T11R4C3', days);
        excelDocument.insertValue('T11R4C4', this.round(amount, roundValue));
        amount2Check += this.round(amount, roundValue);

        [amount, days] = this.calcCostType(fromYearStart, fundSocialInsurance, pctProfRisk, '', sortOfWorkPluralistically);
        excelDocument.insertValue('T11R5C3', days);
        excelDocument.insertValue('T11R5C4', this.round(amount, roundValue));
        amount2Check += this.round(amount, roundValue);

        [amount, days] = this.calcCostType(fromYearStart, fundSocialInsurance, pctHealing);
        excelDocument.insertValue('T11R7C3', days);
        excelDocument.insertValue('T11R7C4', this.round(amount, roundValue));
        amount2Check += this.round(amount, roundValue);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTable9</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTable9()
    {
        excelDocument.insertValue('T13R1', this.calcPayment(fromYearStart, fundSocialInsurance, pctIncident));
        excelDocument.insertValue('T13R3', this.calcPayment(fromYearStart, fundSocialInsurance, pctProfRisk));

        this.fillRegularCells('DC2', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTables</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTables()
    {
        currentSheet = 1;
        progress.setText("@SYS16146");
        progress.incCount();
        this.fillTitle();

        currentSheet++;
        this.advanceProgress(1);
        this.fillTable1();

        currentSheet++;
        this.advanceProgress(2);
        if (this.fillTable2())
        {
            excelDocument.deleteWorkSheet(currentSheet);
            --currentSheet;
        }

        currentSheet++;
        this.advanceProgress(3);
        this.fillTable3();

        currentSheet++;
        this.advanceProgress(3);
        if (this.fillTable31())
        {
            excelDocument.deleteWorkSheet(currentSheet);
            --currentSheet;
        }

        currentSheet ++;
        this.advanceProgress(5);
        if (this.fillTable5())
        {
            excelDocument.deleteWorkSheet(currentSheet);
            --currentSheet;
        }

        currentSheet++;

        this.advanceProgress(6);
        this.fillTable6();

        this.advanceProgress(7);
        this.fillTable7();

        currentSheet++;
        this.advanceProgress(8);

        if (this.fillTable8())
        {
            excelDocument.deleteWorkSheet(currentSheet);
            --currentSheet;
        }
        else
        {
            this.advanceProgress(9);
            this.fillTable9();
        }

        currentSheet++;
        this.advanceProgress(10);

        if (!this.fillTable10())
        {
            excelDocument.deleteWorkSheet(currentSheet);
            --currentSheet;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTitle</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTitle()
    {
        int i;
        OKDP_RU okdp;

        #define.INNLength(12)
        #define.KPPLength(9)
        #define.OGRNLength(15)
        #define.CorrectSrc('000')
        #define.Correct('XXX')
        #define.PeriodNumLen(2)
        #define.OKATOLen(11)
        #define.PhoneLength(15)

        this.fillSheetCommon();

        this.fillRegularCells('CorrectNum',     correcting ? #Correct : #CorrectSrc, strlen(#Correct), #cellSpace, currentSheet);
        this.fillRegularCells('ReportPeriod',   this.reportPeriod2Str(), #PeriodNumLen, #cellSpace, currentSheet);
        this.fillRegularCells('PayYr',          strFmt('%1', year(payYear)), 4, #cellSpace, currentSheet);
        this.fillRegularCells('OKATO',          CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo,reportDate), #OKATOLen, #cellSpace, currentSheet, true, true);
        this.fillRegularCells('INN',            companyInfo.partyINNasOfDate_RU(reportDate), #INNLength, #cellSpace, currentSheet, true, true);
        this.fillRegularCells('KPP',            companyInfo.partyKPPasOfDate_RU(reportDate), #KPPLength, #cellSpace, currentSheet, true, true);
        this.fillRegularCells('OGRN',           CompanyInfoHelper::partyOGRNasOfDate_RU(companyInfo, reportDate), #OGRNLength, #cellSpace, currentSheet, true, true);
        this.fillRegularCells('Phone',          companyInfo.phone(), #PhoneLength, #cellSpace, currentSheet);
        excelDocument.insertValue('AddressZipCode',       companyInfo.postalAddress().ZipCode, currentSheet);

        okdp = strrem(CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, reportDate), '.- ');

        for (i = 1; i <= strlen(okdp); i += 2)
        {
            this.fillRegularCells('OKDP' + int2str((i div 2) + 1), substr(okdp, i, 2), 2, #cellSpace, currentSheet);
        }

        this.fillAddress();
        this.outputRow(companyInfo, 'CI_');
        this.outputRow(companyInfo.postalAddress(), 'CI_');
        this.fillEmplQty();
        this.fillOfficials();

        if (reportDate)
        {
            this.fillRegularCells('ReportDay' , (dayofmth(reportDate) < 10) ? '0' + int2str(dayofmth(reportDate)) : int2str(dayofmth(reportDate)), 2, #cellSpace, currentSheet);
            this.fillRegularCells('ReportMth' , (mthofyr(reportDate) < 10) ? '0' + int2str(mthofyr(reportDate)) : int2str(mthofyr(reportDate)), 2, #cellSpace, currentSheet);
            this.fillRegularCells('ReportYr', strFmt('%1', year(payYear)), 4, #cellSpace, currentSheet);
        }

        this.fillRegularCells('DD10', this.pageNum2str(), 3, #cellSpace, currentSheet, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillWomen</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillWomen()
    {
        this.fillRegularCells('WomenQty', strFmt('%1', womenQty), #EmplQtyLen, #cellSpace, 1, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDisRate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayRateTrans findDisRate(RPayRateCode _payRateCode, EmployeeId_RU _emplId)
    {
        TransDate               transDate = periodEnd;
        RPayRateTrans           rPayRateTrans;

        do
        {
            rPayRateTrans = RPayRateTrans::find(_payRateCode, transDate, _emplId);

            if (! rPayRateTrans.RecId)
            {
                break;
            }

            transDate = rPayRateTrans.RateDate - 1;
        }
        while (! any2int(rPayRateTrans.RateValue));

        return rPayRateTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnDisRate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDate findUnDisRate(RPayRateCode _payRateCode,
                                     EmployeeId_RU _emplId,
                                     TransDate    _startDate)
    {
        TransDate               transDate = _startDate;
        RPayRateTrans           rPayRateTrans;
        TransDate               currentPeriod, ret;
        boolean                 rateValue;
        ;

        if (rateTable.RateValueType == RPayRateValueType::CounterValue)
        {
            for (currentPeriod = dateEndMth(_startDate) + 1; currentPeriod <= periodEnd; currentPeriod = endmth(nextMth(currentPeriod)))
            {
                rateValue = rateTable.getValue(RPayRateCallContext::construct(currentPeriod, _emplId)) == 0;
                if (rateValue)
                {
                    ret = dateEndMth(currentPeriod);
                    break;
                }
            }
        }
        else
        {
            do
            {
                select firstonly RateDate, RateValue, RecId from rPayRateTrans order by RateDate asc
                     where rPayRateTrans.PayRate    == _payRateCode    &&
                           rPayRateTrans.RateDate   >  transDate       &&
                           rPayRateTrans.RateTypeAC == _emplId;

                if (! rPayRateTrans.RecId)
                {
                    break;
                }

                transDate = rPayRateTrans.RateDate;
            }
            while (any2int(rPayRateTrans.RateValue));

            ret = rPayRateTrans.RateDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTemplateName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str fullTemplateName()
    {
        resourceNode rn = SysResource::getResourceNode(this.resourceName());
        rn.AOTload();
        return SysResource::saveToTempFile(rn, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplAvgQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAverageQty getEmplAvgQty(RPayCounterUnit _fund, RPayCounterUnit _payGroup)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RPayAverageQuantity));
        QueryBuildDatasource    qbdsFund, qbdsMember;
        RPayAverageQuantity     rPayAverageQuantity;

        qbds.addSelectionField(fieldnum(RPayAverageQuantity, AverageQty), SelectionField::Avg);
        qbds.addRange(fieldnum(RPayAverageQuantity, PayPeriod)).value(fromYearStart);
        qbds.addRange(fieldnum(RPayAverageQuantity, PayGroup)).value(_payGroup);

        qbdsMember = qbds.addDataSource(tablenum(RPayGroupMember));
        qbdsMember.addLink(fieldnum(RPayAverageQuantity, PayGroup), fieldnum(RPayGroupMember, PayGroup));
        qbdsFund = qbdsMember.addDataSource(tablenum(RPayFundEmplSum));
        qbdsFund.addLink(fieldnum(RPayGroupMember, PersonEmplId), fieldnum(RPayFundEmplSum, EmplId));

        qbdsFund.addRange(fieldnum(RPayFundEmplSum, RpayCounterUnit)).value(_fund);

        if (reportPeriod == RPayReportSocialTaxPeriod::Year || !correcting)
        {
            qbdsFund.addRange(fieldnum(RPayFundEmplSum, PayPeriod)).value(fromYearStart);
        }
        else
        {
            qbdsFund.addRange(fieldnum(RPayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }

        rPayAverageQuantity = this.executeQuery(query, tablenum(RPayAverageQuantity));

        return this.round(rPayAverageQuantity.AverageQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Counter getEmplQty(RPayCounterUnit _payGroup)
    {
        RPayGroupMember groupMember;
        EmployeeTable_RU    emplTable;
        Set st = new Set(Types::String);

        boolean findHistory(EmployeeId_RU _emplId)
        {
            RPayHistory payHistory, payHistoryDismiss;
            select firstonly recId from payHistory
                order by startDate desc, transTime desc
                where payHistory.Number        == _emplId &&
                     (payHistory.operationType == RHRMJournalType::Receive   ||
                      payHistory.operationType == RHRMJournalType::Transfer) &&
                      payHistory.StartDate     <= periodEnd
                notexists join payHistoryDismiss
                    where payHistoryDismiss.Number          == payHistory.Number        &&
                          payHistoryDismiss.operationType   == RHRMJournalType::Dismiss &&
                          payHistoryDismiss.StartDate       >= payHistory.StartDate     &&
                          payHistoryDismiss.StartDate       <  dateStartYr(payYear);

            return payHistory.RecId != 0;
        }

        /*
        while select PersonEmplId from groupMember
            where groupMember.PayGroup == _payGroup
            join payMainEmplId_RU from emplTable
                where emplTable.EmplId == groupMember.EmplId
        */
        while select PersonEmplId from groupMember
            where groupMember.PayGroup == _payGroup
            join EmployeeId from emplTable
                where emplTable.EmployeeId == groupMember.PersonEmplId
        {
            if (findHistory(groupMember.PersonEmplId))
            {
                st.add(emplTable.EmployeeId);
            }
        }

        return st.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean     ret = super();
        date        d;

        if (ret)
        {
            payYear         = dfPayYear.value();
            reportPeriod    = dfReportPeriod.value();
            officialsType   = dfOfficialsType.value();
            responsibleId   = dfResponsibleId.value();
            correcting      = dfCorrecting.value();
            reportDate      = dfReportDate.value();

            if (payYear == dateNull())
            {
                ret = checkFailed("@RUP2174");
            }

            d               = mkdate(1, reportPeriod * 3 + 1, year(payYear));
            beforeQuarter   = SysQuery::range(dateStartYr(d), d - 1);
            thisQuarter     = SysQuery::range(d, dateEndQtr(d));
            fromYearStart   = SysQuery::range(dateStartYr(d), dateEndQtr(d));
            month1          = SysQuery::range(d, endmth(d));
            mthnames[1]     = strlwr(mthname(mthofyr(d)));
            d               = nextmth(d);
            month2          = SysQuery::range(d, endmth(d));
            mthnames[2]     = strlwr(mthname(mthofyr(d)));
            d               = nextmth(d);
            month3          = SysQuery::range(d, endmth(d));
            mthnames[3]     = strlwr(mthname(mthofyr(d)));
            periodEnd       = endmth(mkdate(1, (reportPeriod + 1) * 3, year(payYear)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundAmountSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount getFundAmountSum(RPayCounterUnit _fund, str _dates)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RpayFundEmplSum));
        RpayFundEmplSum         rpayFundEmplSum;

        if (! _fund)
        {
            return 0;
        }

        qbds.addSelectionField(fieldnum(RpayFundEmplSum, FundAmount), SelectionField::Sum);
        qbds.addRange(fieldnum(RpayFundEmplSum, RpayCounterUnit)).value(_fund);

        if (correcting)
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(_dates);
        }
        else
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, PayPeriod)).value(_dates);
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }

        RpayFundEmplSum = this.executeQuery(query, tablenum(RpayFundEmplSum));

        return this.round(rpayFundEmplSum.FundAmount, roundValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundTotalAmountSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount getFundTotalAmountSum(str             _dates,
                                               RPayCounterUnit _fund,
                                               boolean         _useGroup     = false,
                                               RPayGroup       _group        = '',
                                               EmployeeId_RU   _emplId       = '')
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RpayFundEmplSum));
        RpayFundEmplSum         rpayFundEmplSum;
        Amount                  amount;

        if (! _fund || (_useGroup && ! _group))
        {
            return 0;
        }
        qbds.addSelectionField(fieldnum(RpayFundEmplSum, RpayFundTotalAmount), SelectionField::Sum);
        qbds.addRange(fieldnum(RpayFundEmplSum, RpayCounterUnit)).value(_fund);

        if (_emplId)
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, EmplID)).value(_emplId);
        }

        if (correcting)
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(_dates);
        }
        else
        {
            qbds.addRange(fieldnum(RpayFundEmplSum, PayPeriod)).value(_dates);
            qbds.addRange(fieldnum(RpayFundEmplSum, CorrectedPeriod)).value(fromYearStart);
        }

        if (_useGroup)
        {
            qbds = qbds.addDataSource(tablenum(RPayGroupMember));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldnum(RpayFundEmplSum, EmplId), fieldnum(RPayGroupMember, PersonEmplId));
            qbds.addRange(fieldnum(RPayGroupMember, PayGroup)).value(_group);
        }

        rpayFundEmplSum = this.executeQuery(query, tablenum(RpayFundEmplSum));
        amount = rpayFundEmplSum.RpayFundTotalAmount;

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundTotalAmountSumMonthEmpl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount getFundTotalAmountSumMonthEmpl(range           _rangeMonth,
                                                      RPayCounterUnit _fund,
                                                      RPayGroup       _payGroup         = '',
                                                      Range           _groupsInvalids   = '',
                                                      EmployeeId_RU   _emplId           = '',
                                                      Range           _excludeGroups    = '')
    {
        RPayAmount              amount;
        Query                   query;
        QueryBuildDataSource    qbds, qbdsPayGroup1, qbdsPayGroup2;
        QueryRun                queryRun;
        QueryBuildRange         qbrCorrectedPeriod, qbrPayPeriod;
        RPayFundEmplSum         rPayFundEmplSum;
        ;

        if (! _fund)
        {
            return 0;
        }

        query = new Query();
        qbds = query.addDataSource(tablenum(RPayFundEmplSum));

        qbds.addRange(fieldnum(RPayFundEmplSum, RpayCounterUnit)).value(_fund);
        qbrCorrectedPeriod = qbds.addRange(fieldnum(RPayFundEmplSum, CorrectedPeriod));
        qbrCorrectedPeriod.value(_rangeMonth);
        qbds.addSelectionField(fieldnum(RPayFundEmplSum, RpayFundTotalAmount), SelectionField::Sum);

        if (!correcting)
        {
            qbrPayPeriod = qbds.addRange(fieldnum(RPayFundEmplSum, PayPeriod));
            qbrPayPeriod.value(thisQuarter);
        }

        if (_payGroup)
        {
            qbdsPayGroup1 = qbds.addDataSource(tablenum(RPayGroupMember));
            qbdsPayGroup1.joinMode(JoinMode::ExistsJoin);
            qbdsPayGroup1.addLink(fieldnum(RPayFundEmplSum, EmplId), fieldnum(RPayGroupMember, PersonEmplId));
            qbdsPayGroup1.addRange(fieldnum(RPayGroupMember, PayGroup)).value(_payGroup + (_excludeGroups ? ',!' + _excludeGroups : ''));
        }

        if (_groupsInvalids)
        {
            if (qbdsPayGroup1)
            {
                qbdsPayGroup1.fetchMode(QueryFetchMode::One2One);
            }
            qbds.fetchMode(QueryFetchMode::One2One);
            qbdsPayGroup2 = qbds.addDataSource(tablenum(RPayGroupMember));
            qbdsPayGroup2.fetchMode(QueryFetchMode::One2One);
            qbdsPayGroup2.joinMode(JoinMode::ExistsJoin);
            qbdsPayGroup2.addLink(fieldnum(RPayFundEmplSum, EmplId), fieldnum(RPayGroupMember, PersonEmplId));
            qbdsPayGroup2.addRange(fieldnum(RPayGroupMember, PayGroup)).value(_groupsInvalids);
        }

        if (_emplId)
        {
            qbds.addRange(fieldnum(RPayFundEmplDeduction, EmplId)).value(_emplId);
        }

        queryRun = new QueryRun(query);
        queryRun.next();

        rPayFundEmplSum = queryRun.get(tablenum(RPayFundEmplSum));
        amount = this.round(rPayFundEmplSum.RpayFundTotalAmount, roundValue);

        if (!correcting)
        {
            qbrCorrectedPeriod.value(beforeQuarter);
            qbrPayPeriod.value(_rangeMonth);
            queryRun = new  QueryRun(query);
            queryRun.next();
            rPayFundEmplSum = queryRun.get(tablenum(RPayFundEmplSum));
            amount += this.round(rPayFundEmplSum.RpayFundTotalAmount, roundValue);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundTotalDeductionAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount getFundTotalDeductionAmount(str             _period,
                                                     RPayCounterUnit _fund,
                                                     str             _deductionCodesToInclude = '',
                                                     str             _deductionCodesToExclude = '',
                                                     EmployeeId_RU   _emplId                  = '',
                                                     boolean         _excludeDeductionPercent = false)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tablenum(RpayFundEmplDeduction)), qbdsDeductionCodePct;
        RpayFundEmplDeduction   rpayFundEmplDeduction;
        ;

        if ( ! (_fund && (_deductionCodesToInclude || _deductionCodesToExclude)))
        {
            return 0;
        }

        qbds.addSelectionField(fieldnum(RpayFundEmplDeduction, DeductionAmount), SelectionField::Sum);
        qbds.addRange(fieldnum(RpayFundEmplDeduction, RpayCounterUnit)).value(_fund);

        if (correcting)
        {
            qbds.addRange(fieldnum(RpayFundEmplDeduction, CorrectedPeriod)).value(_period);
        }
        else
        {
            qbds.addRange(fieldnum(RpayFundEmplDeduction, PayPeriod)).value(_period);
            qbds.addRange(fieldnum(RpayFundEmplDeduction, CorrectedPeriod)).value(fromYearStart);
        }

        if (_deductionCodesToInclude)
        {
            qbds.addRange(fieldnum(RpayFundEmplDeduction, RpayFundDeductionCode)).value(_deductionCodesToInclude);
        }

        if (_deductionCodesToExclude)
        {
            _deductionCodesToExclude = '!' + strreplace(_deductionCodesToExclude, ',', ',!');
            qbds.addRange(fieldnum(RpayFundEmplDeduction, RpayFundDeductionCode)).value(_deductionCodesToExclude);
        }

        if (_emplId)
        {
            qbds.addRange(fieldnum(RpayFundEmplDeduction, EmplId)).value(_emplId);
        }

        if (_excludeDeductionPercent)
        {
            qbdsDeductionCodePct = qbds.addDataSource(tablenum(RPayFundDeductionTable));
            qbdsDeductionCodePct.addLink(fieldnum(RpayFundEmplDeduction, RpayFundDeductionCode), fieldnum(RPayFundDeductionTable, RpayFundDeductionCode));
            qbdsDeductionCodePct.joinMode(JoinMode::ExistsJoin);
            qbdsDeductionCodePct.addRange(fieldnum(RPayFundDeductionTable, RpayRateTaxValue)).value(Sysquery::valueEmptyString());
        }

        rpayFundEmplDeduction = this.executeQuery(query, tablenum(rpayFundEmplDeduction));

        return rpayFundEmplDeduction.DeductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected RPayReportName getReportName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStaffListEmploy</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getStaffListEmploy(RHRMStaffListRefRecId _rhrmStaffListRecId, TransDate _transDate)
    {
        RHRMStaffListHistoryCheck   rhrmStaffListHistoryCheck;
        Set                         emplByPositionSet, mainEmplsSet = new Set(Types::String);
        SetEnumerator               se;
        EmployeeId_RU               emplId;
        RPayRateTable               medInspecRateTable;
        EmployeeTable_RU            emplTable;
        int                         emplsWithMedical;

        medInspecRateTable = RPayRateTable::find(medInspectionRate);

        rhrmStaffListHistoryCheck = new RHRMStaffListHistoryCheck(_rhrmStaffListRecId, _transDate, true);

        emplByPositionSet = Set::create(rhrmStaffListHistoryCheck.getStaffListEmploySet());
        se = emplByPositionSet.getEnumerator();

        while (se.moveNext())
        {
            emplId = se.current();
            emplTable = EmployeeTable_RU::findByEmployeeId(emplId);

            if (!mainEmplsSet.in(emplTable.EmployeeId) &&
                medInspecRateTable.getValue(RPayRateCallContext::construct(_transDate, emplTable.EmployeeId)) == NoYes::Yes)
            {
                emplsWithMedical ++;
            }

            mainEmplsSet.add(emplTable.EmployeeId);
        }

        return [mainEmplsSet.elements(),
                emplsWithMedical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        RpayTaxParameters rpayTaxParameters = RpayTaxParameters::find();

        invalidAmountsMap = new Map(Types::String, Types::Container);

        fundSocialInsurance     = rpayTaxParameters.CounterUnit2011;
        deductionCodeInvalids   = rpayTaxParameters.FssInvalidDeduction;
        deductionCodeExceedMax  = rpayTaxParameters.FssBaseLimitDeduction;
        roundValue              = rpayTaxParameters.TaxSocialRound;

        companyInfo             = CompanyInfo::find();

        sortOfWorkMain          = strfmt('%1,%2', RHRMSortOfWork::Direct, RHRMSortOfWork::CivilContract);
        sortOfWorkPluralistically = strfmt('%1', RHRMSortOfWork::Pluralistically);

        invalidRate = RpayFundDeductionTable::find(rpayTaxParameters.FssInvalidDeduction).RpayRateCodeEmpl;
        rateTable   = RPayRateTable::find(invalidRate);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmployed</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isEmployed(RHRMEmplId _mainEmplId)
    {
        RPayHistory     payHistory, payHistoryDismiss;
        RHRMEmplTable   emplTableEmployee;

        void findHistory(RHRMEmplId _emplId)
        {
            select firstonly recId from payHistory
                order by startDate desc, transTime desc
                where payHistory.Number        == _emplId &&
                     (payHistory.operationType == RHRMJournalType::Receive   ||
                      payHistory.operationType == RHRMJournalType::Transfer) &&
                      payHistory.StartDate     <= periodEnd
            notexists join payHistoryDismiss
                where payHistoryDismiss.Number            == payHistory.Number        &&
                        payHistoryDismiss.operationType   == RHRMJournalType::Dismiss &&
                        payHistoryDismiss.StartDate       >  payHistory.StartDate     &&
                        payHistoryDismiss.StartDate       <= periodEnd;
        }

        findHistory(_mainEmplId);

        if (payHistory.RecId != 0)
        {
            return true;
        }

        while select employeeId from emplTableEmployee
            order by employeeId
            where emplTableEmployee.PayMainEmplId == _mainEmplId &&
                  emplTableEmployee.EmployeeId    != _mainEmplId
        {
            findHistory(emplTableEmployee.EmployeeId);

            if (payHistory.RecId != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvalid</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDate isInvalid(RHRMEmplId _emplId)
    {
        RPayRateCode            payRateCode;
        TransDate               currentPeriod;
        boolean                 rateValue;
        TransDate               periodStart;

        TransDate               disDate, unDisDate;

        payRateCode  = invalidRate;

        if (rateTable.RateValueType == RPayRateValueType::CounterValue)
        {
            for (currentPeriod = dateEndMth(dateStartYr(periodEnd)); currentPeriod <= periodEnd; currentPeriod = endmth(nextMth(currentPeriod)))
            {
                rateValue = rateTable.getValue(RPayRateCallContext::construct(currentPeriod, _emplId)) > 0;
                if (rateValue)
                {
                    return currentPeriod;
                }
            }
        }
        else
        {
            periodStart = dateStartYr(periodEnd);

            disDate =   this.findDisRate(payRateCode, _emplId).RateDate;

            if (! disDate)
            {
                return dateNull();
            }

            if (periodStart < disDate)
            {
                return disDate;
            }

            unDisDate = this.findUnDisRate(payRateCode, _emplId, disDate);

            if (! unDisDate)
            {
                return disDate;
            }

            if (unDisDate && periodStart < unDisDate)
            {
                return disDate;
            }
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean makeDocument()
    {
        boolean ret = false;

        FilePath templateFile = this.fullTemplateName();

        if (winApi::fileExists(templateFile))
        {
            excelDocument = new ComExcelDocument_RU();

            if (excelDocument.newFile(templateFile, false))
            {
                ret = true;
            }
        }
        else
        {
            error(strfmt("@SYS60367", templateFile));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputRow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void outputRow(Common _row, str _bookmarkPrefix)
    {
        COM         names;
        COM         name;
        str         fieldName;
        int         i;
        int         prefixLen = strlen(_bookmarkPrefix);
        int         iField;
        ;

        names = excelDocument.getComDocument();
        names = names.names();

        for (i = 1; i < names.count(); i++)
        {
            name        = names.item(i);
            fieldName   = name.name();

            if (substr(fieldName, 1, prefixLen) == _bookmarkPrefix)
            {
                iField = fieldname2id(_row.TableId, strdel(fieldName, 1, prefixLen));

                if (iField != 0)
                {
                    excelDocument.insertValue(name.name(), _row.(iField));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum2str</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str pageNum2str()
    {
        int len;
        str tmpStr;
        #define.Mask('000')

        tmpStr = int2str(currentSheet);
        len    = strlen(tmpStr);
        tmpStr = #Mask + tmpStr;

        tmpStr = strdel(tmpStr, 1, len);

        return tmpStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTotal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int progressTotal()
    {
        return 13;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportPeriod2Str</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str reportPeriod2Str()
    {
        str period;
        ;

        switch (reportPeriod)
        {
            case RPayReportSocialTaxPeriod::Quarter:
                period = '03';
                break;
            case RPayReportSocialTaxPeriod::HalfYear:
                period = '06';
                break;
            case RPayReportSocialTaxPeriod::NineMonth:
                period = '09';
                break;
            case RPayReportSocialTaxPeriod::Year:
                period = '12';
                break;
            default:
                period = '00';
        }

        return period;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected str resourceName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>round</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount round(RPayAmount _amount, RoundOff _round = 0)
    {
        if (rounding)
        {
            return round(_amount, RPayRateTable::find(rounding).getValue(RPayRateCallContext::construct(periodEnd)));
        }

        if (_round)
        {
            return round(_amount, _round);
        }

        return _amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.makeDocument())
        {
            try
            {
                this.progressInit("@RUP2178", this.progressTotal(), #AviFormLetter);
                progress.updateInterval(0);
                progress.setText("@RUP2171");
                progress.incCount();

                this.checkAndPrepareParameters();

                this.dataPreparation();

                this.fillDocument();
                this.closeDocument();
            }
            catch (Exception::Error)
            {
                this.closeDocument();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected str templateName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>