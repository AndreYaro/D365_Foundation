<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdPostProj_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles the posting of withholding taxes for Project invoice.
/// </summary>
class TaxWithholdPostProj_IN extends TaxWithholdPost_IN
{
    SalesCalcTax_ProjInvoice    salesCalcTax;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Exchange rate for this transaction.
    /// </summary>
    /// <returns>
    /// Exchange rate for this transaction.
    /// </returns>
    public CustExchRate exchRate()
    {
        return salesCalcTax.exchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Secondary exchange rate for this transaction.
    /// </summary>
    /// <returns>
    /// Secondary exchange rate for this transaction.
    /// </returns>
    public ExchrateSecondary exchRateSecondary()
    {
        return salesCalcTax.exchRateSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFromProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// object moving from the project
    /// </summary>
    /// <param name="_salesOrderTableId">
    /// <c>_salesOrderTableId</c> as a param
    /// </param>
    /// <param name="_salesOrderRecId">
    /// <c>_salesOrderRecId</c> as a param
    /// </param>
    protected void moveFromProject(tableId   _salesOrderTableId,
                                   recId     _salesOrderRecId)
    {
        while select forUpdate taxWithholdWorkTrans
            where taxWithholdWorkTrans.SourceTableId == _salesOrderTableId &&
                  taxWithholdWorkTrans.SourceRecId   == _salesOrderRecId
        {
            ttsBegin;
            taxWithholdWorkTrans.HeadingRecId       = headingRecId;
            taxWithholdWorkTrans.HeadingTableId     = headingTableId;
            taxWithholdWorkTrans.SourceTableId      = this.sourceTableId();
            taxWithholdWorkTrans.SourceRecId        = this.sourceRecId();

            taxWithholdWorkTrans.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instance for the taxwitholdpostproj_IN
    /// </summary>
    /// <param name="_post">
    ///  _Post as a param.
    /// </param>
    /// <param name="_salesCalcTax">
    /// _salesCalcTax as a param
    /// </param>
    /// <param name="_taxWithholdWorkTrans">
    /// _taxWithholdWorkTrans as a param.
    /// </param>
    public void new(
        NoYes                      _post,
        SalesCalcTax               _salesCalcTax,
        TmpTaxWithholdWorkTrans_IN _taxWithholdWorkTrans)
    {
        post                    = _post;
        salesCalcTax            = _salesCalcTax;
        taxWithholdWorkTrans    = _taxWithholdWorkTrans;
        taxModuleType           = TaxModuleType::SalesInvoice;
        headingTableId          = salesCalcTax.tableId();
        headingRecId            = salesCalcTax.recID();

        if (!headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            taxDate = salesCalcTax.invoiceDate();
            sourceCurrencyCode = salesCalcTax.currencyCode();
        }

        triangulation = salesCalcTax.triangulation(taxDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToTaxWithHoldTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posting for the TaxwitholdTrans
    /// </summary>
    /// <param name="_ledgerPostingController">
    ///<c> _ledgerPostingController </c> as a param
    /// </param>
    /// <param name="_taxWithholdTrans">
    /// <c> _taxWithholdTrans </c> as a param
    /// </param>
    /// <param name="_exchangeRateHelper">
    /// <c> _exchangeRateHelper </c> as a param
    /// </param>
    /// <param name="_taxWithholdData">
    /// <c> _taxWithholdData </c> as a param
    /// </param>
    protected void postToTaxWithHoldTrans(LedgerPostingController _ledgerPostingController, TaxWithholdTrans_IN _taxWithholdTrans, CurrencyExchangeHelper _exchangeRateHelper, container _taxWithholdData)
    {
        ProjInvoiceRevenue  projInvoiceRevenue;
        ProjInvoiceItem     projInvoiceItem;
        ProjInvoiceOnAcc    projInvoiceOnAcc;
        ProjInvoiceJour     projInvoiceJour;

        switch (_taxWithholdTrans.SourceTableId)
        {
            case tableNum(ProjInvoiceRevenue) :
                projInvoiceRevenue          = ProjInvoiceRevenue::findRecId(_taxWithholdTrans.SourceRecId);
                projInvoiceJour             = projInvoiceRevenue.projInvoiceJour();
                _taxWithholdTrans.ProjId    = projInvoiceRevenue.ProjId;
                _taxWithholdTrans.RecoverableAccount = _taxWithholdTrans.TaxType == TaxWithholdCodeType_IN::TDS ? true : false;

                // For project revenue, when parameter Tax liability is enabled, post interim account to tax withhold trans;
                if (TaxWithholdGroupHeading::find(_taxWithholdTrans.TaxWithholdGroup).TaxLiabilityOnPayment_IN)
                {
                    _taxWithholdTrans.IsTaxInterim = NoYes::Yes;
                }
                break;

            case tableNum(ProjInvoiceItem) :
                projInvoiceItem             = ProjInvoiceItem::findRecId(_taxWithholdTrans.SourceRecId);
                projInvoiceJour             = projInvoiceItem.projInvoiceJour();
                _taxWithholdTrans.ProjId    = projInvoiceItem.ProjId;
                _taxWithholdTrans.RecoverableAccount = _taxWithholdTrans.TaxType == TaxWithholdCodeType_IN::TDS ? true : false;

                // For project item transaction, when parameter Tax liability is enabled, post interim account to tax withhold trans;
                if (TaxWithholdGroupHeading::find(_taxWithholdTrans.TaxWithholdGroup).TaxLiabilityOnPayment_IN)
                {
                    _taxWithholdTrans.IsTaxInterim = NoYes::Yes;
                }

                // Set the sales id to make sure the origin tax can be found when doing credit note.
                SalesLine salesLine = projInvoiceItem.salesLine();
                if (salesLine.SalesId && projInvoiceItem.ItemType == ProjItemType::SalesOrder)
                {
                    _taxWithholdTrans.SalesId = salesLine.SalesId;
                    _taxWithholdTrans.LineNum = salesLine.LineNum;
                }
                break;

            case tableNum(ProjInvoiceOnAcc) :
                projInvoiceOnAcc            = ProjInvoiceOnAcc::findRecId(_taxWithholdTrans.SourceRecId);
                projInvoiceJour             = projInvoiceOnAcc.projInvoiceJour();
                _taxWithholdTrans.ProjId    = projInvoiceOnAcc.ProjId;
                _taxWithholdTrans.RecoverableAccount = _taxWithholdTrans.TaxType == TaxWithholdCodeType_IN::TDS ? true : false;

                // For project on account, when parameter Tax liability is enabled, post interim account to tax withhold trans;
                if (TaxWithholdGroupHeading::find(_taxWithholdTrans.TaxWithholdGroup).TaxLiabilityOnPayment_IN)
                {
                    _taxWithholdTrans.IsTaxInterim = NoYes::Yes;
                }
                break;
        }
        _taxWithholdTrans.CustAccount = projInvoiceJour.InvoiceAccount;
        _taxWithholdTrans.Nameofdeductee        = DirPartyTable::findRec(CustTable::find(_taxWithholdTrans.CustAccount).Party).Name;
        _taxWithholdTrans.TaxWithholdRegNumber  = TaxInformation_IN::find(projInvoiceJour.TaxInformation_IN).TAN;

        super(_ledgerPostingController, _taxWithholdTrans, _exchangeRateHelper, _taxWithholdData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>RecId</c> of the transaction line that is currently being posted.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the transaction line being posted.
    /// </returns>
    public recId sourceRecId()
    {
        return sourceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TableId</c> of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to be taxed.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return sourceRecord.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is the main entry point to execute transaction specific logic and to
    /// post to TaxWithholdTrans_IN and to post withhold tax amounts to the Ledger.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <returns>
    /// The total withhold tax amount.
    /// </returns>
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount   taxAmount;
        boolean     moreLines;

        System.Diagnostics.Stopwatch sw = System.Diagnostics.Stopwatch::StartNew();

        this.initLedgerPosting(_ledgerPostingController);

        ttsbegin;

        salesCalcTax.initCursor();
        moreLines = true;
        while (moreLines)
        {
            sourceRecord= salesCalcTax.nextLine();
            if (sourceRecord)
            {
                this.moveFromProject(salesCalcTax.transOrigTableId(),
                                     salesCalcTax.transOrigRecId());
            }
            else
            {
                moreLines   = false;
            }
        }
        ttscommit;

        if (post)
        {
            this.saveAndPostWHT(_ledgerPostingController);
            taxAmount = TaxWithholdPost_IN::taxTotalVoucherDate(voucher, taxDate);
        }
        else
        {
            taxAmount = this.totalTaxWithholdAmount();
        }

        sw.Stop();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00057, funcName(), GlobalizationInstrumentationHelper::DefaultFeatureVersion, SysCountryRegionCode::countryInfo(), sw.ElapsedMilliseconds);

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a Boolean value that indicates whether the current transaction being posted supports the
    /// <c>SubLedgerDistributions</c> or <c>SubLedgerJournalLines</c>. By default, the base implementation
    /// is that the transactions do not support sub-ledgers. If the individual transactions support
    /// sub-ledgers, they will have to override this and return true.
    /// </summary>
    /// <returns>
    /// true if the current transaction supports sub-ledgers; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>TaxWithholdPostProj_IN</c> class should use the <c>TaxWithholdUncommitted_IN</c> table.
    /// </summary>
    /// <returns>
    /// true if the <c>TaxWithholdPostProj_IN</c> class should use the <c>TaxWithholdUncommitted_IN</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>