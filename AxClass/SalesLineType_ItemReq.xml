<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType_ItemReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesLineTypeFactoryAttribute(SalesType::ItemReq, NoYes::No)]
class       SalesLineType_ItemReq
extends     SalesLineType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the sales line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateParameters</Name>
				<Source><![CDATA[
    public boolean checkUpdateParameters(boolean _dropInvent, Common _childBuffer)
    {
        boolean ret = super(_dropInvent, _childBuffer);

        if (_dropInvent && this.resetInventoryQuantityWhenUpdating())
        {
            ret = checkFailed("@SCM:SalesLineUpdateItemReqQuantityResetUpdate");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInventoryQuantityWhenUpdating</Name>
				<Source><![CDATA[
    private boolean resetInventoryQuantityWhenUpdating()
    {
        boolean ret = false;

        SalesLine salesLine_Orig = salesLine.orig();

        if ((salesLine.SalesId   != salesLine_Orig.SalesId || salesLine.ProjId    != salesLine_Orig.ProjId) &&
            (salesLine.RemainSalesPhysical != 0            || salesLine.RemainInventPhysical!= 0))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    public void deleted()
    {
        super();

        if (salesLine.SalesId)
        {
            SalesTable localSalesTable = SalesTable::find(salesLine.SalesId, true);

            if (localSalesTable.numberOfLines() == 0)
            {
                localSalesTable.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDeliveryDateControl</Name>
				<Source><![CDATA[
    boolean doDeliveryDateControl()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        salesLine.CurrencyCode  = Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPackingSlipBeUpdated</Name>
				<Source><![CDATA[
    boolean mayPackingSlipBeUpdated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeRegistered</Name>
				<Source><![CDATA[
    boolean  mayPickingListBeRegistered()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeUpdated</Name>
				<Source><![CDATA[
    boolean mayPickingListBeUpdated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsCWItemAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Denies the specification of catch weight items for this sales line type.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean pdsIsCWItemAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void  updating()
    {
        if (this.resetInventoryQuantityWhenUpdating())
        {
            SalesQty    salesQty    = salesLine.RemainSalesPhysical;
            InventQty   inventQty   = salesLine.RemainInventPhysical;

            salesLine.RemainSalesPhysical   = 0;
            salesLine.RemainInventPhysical  = 0;
            salesLine.update();
            salesLine.RemainSalesPhysical   = salesQty;
            salesLine.RemainInventPhysical  = inventQty;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesLineType::construct() instead.', false, 31\05\2017)]
    static SalesLineType construct(SalesLine salesLine, SalesTable salesTable = salesTable)
    {
        if (salesLine.ProjId)
            return new SalesLineType_ProjectItemReq(salesLine,salesTable);

        return new SalesLineType_ItemReq(salesLine,salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesLineReceiptDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set sales line receipt date.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> record.
    /// </param>
    public static void setSalesLineReceiptDate(SalesLine _salesLine)
    {
        PSAActivitySetup        psaActivitySetup;
        boolean                 useActivityStartDate    = false;
        Date                    systemDate              = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));

        if (_salesLine.SalesType != SalesType::ItemReq)
        {
            return;
        }

        ProjTable projTable = projTable::find(_salesLine.ProjId);
        if (!projTable)
        {
            return;
        }

        if (_salesLine.ActivityNumber)
        {
            psaActivitySetup = PSAActivitySetup::findActivityNumber(_salesLine.ActivityNumber);
            smmActivities smmActivity = smmActivities::find(_salesLine.ActivityNumber);
            HierarchyTreeTable hierarchyTreeTable = HierarchyTreeTable::findActivityRecId(smmActivity.RecId);

            if (psaActivitySetup && psaActivitySetup.PSASchedStart && !hierarchyTreeTable.isRootActivity())
            {
               useActivityStartDate = true;
            }
        }

        if (useActivityStartDate)
        {
            if (systemDate > psaActivitySetup.PSASchedStart)
            {
                _salesLine.ReceiptDateRequested      = systemDate;
                _salesLine.ShippingDateRequested     = _salesLine.ReceiptDateRequested;
                _salesLine.DeliveryDateControlType   = SalesDeliveryDateControlType::None;
            }
            else
            {
                _salesLine.ReceiptDateRequested      = psaActivitySetup.PSASchedStart;
                _salesLine.ShippingDateRequested     = _salesLine.ReceiptDateRequested;
                _salesLine.DeliveryDateControlType   = SalesDeliveryDateControlType::None;
            }
        }
        else
        {
            Date projStartDate = projTable.getStartDateForItemReq();
            if (projStartDate)
            {
                if (systemDate > projStartDate)
                {
                    _salesLine.ReceiptDateRequested      = systemDate;
                    _salesLine.ShippingDateRequested     = _salesLine.ReceiptDateRequested;
                    _salesLine.DeliveryDateControlType   = SalesDeliveryDateControlType::None;
                }
                else
                {
                    _salesLine.ReceiptDateRequested      = projStartDate;
                    _salesLine.ShippingDateRequested     = _salesLine.ReceiptDateRequested;
                    _salesLine.DeliveryDateControlType   = SalesDeliveryDateControlType::None;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
