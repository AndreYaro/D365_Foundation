<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMACaseServiceLevelAgreementProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Plug in for case service level agreements
/// </summary>
[ExportMetadataAttribute('CaseIServiceLevelAgreement', 'ServiceLevelAgreements'), ExportAttribute('Dynamics.AX.Application.CaseIServiceLevelAgreement')]
class SMACaseServiceLevelAgreementProvider implements CaseIServiceLevelAgreement
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLatestCompletionDateTime</Name>
				<Source><![CDATA[
    public void calcLatestCompletionDateTime(CaseDetail _caseDetail)
    {
        SMAServiceLevelAgreementTable   serviceLevelAgreement;
        SMALatestCompletionDateTime     lastStartDateTime;  
        WorkCalendarDateLine            workCalendarDateLine;
        SMALatestCompletionDateTime     slaEndDateTime;
        Seconds                         totalWorkingTime;
        Seconds                         workDoneForaDay;
        Seconds                         secSLA;
        Seconds                         secInProgress;
        ListEnumerator                  enumerator;
       
        // Is the service request still active?
        if (_caseDetail.ServiceLevelAgreementStatus == SMALogStatus::Open)
        {
            serviceLevelAgreement = SMAServiceLevelAgreementTable::find(_caseDetail.ServiceLevelAgreementId);

            secSLA          = serviceLevelAgreement.secondsToFinishRequest();
            secInProgress   = SMAServiceLevelAgreementLogTable::totalInProgress(SMAServiceLevelAgreementLogTable::tableId2LogType(_caseDetail.TableId), _caseDetail.RecId);

            // Find the first entry
            lastStartDateTime = SMAServiceLevelAgreementLogTable::lastStartDateTime(SMAServiceLevelAgreementLogTable::tableId2LogType(_caseDetail.TableId), _caseDetail.RecId);
            TransDate startDate = DateTimeUtil::date(lastStartDateTime);
            if (FeatureStateProvider::isFeatureEnabled(CaseServiceLevelAgreementFeature::instance()) && serviceLevelAgreement.CalendarId)
            {
                List workCalendarList = this.getListOfWorkCalendarDateLine(serviceLevelAgreement.CalendarId,startDate,secSLA);
                enumerator = workCalendarList.getEnumerator();
                if (enumerator.moveNext())
                {
                    workCalendarDateLine = enumerator.current();
                    Seconds startTimeFromMidnight = DateTimeUtil::time(lastStartDateTime);
                    if (startTimeFromMidnight < workCalendarDateLine.FromTime)
                    {
                        startTimeFromMidnight = workCalendarDateLine.FromTime;
                    }
                    else if (startTimeFromMidnight > workCalendarDateLine.ToTime)
                    {
                        startTimeFromMidnight = workCalendarDateLine.ToTime;
                    }
                    workDoneForaDay = workCalendarDateLine.ToTime - startTimeFromMidnight;
                    slaEndDateTime = this.calcSLAEndDateTimeCorrection(startDate,workDoneForaDay, serviceLevelAgreement.CalendarId, secSLA, secInProgress,enumerator,startTimeFromMidnight);
                }
            }
            else
            {
               slaEndDateTime = DateTimeUtil::addSeconds(lastStartDateTime, secSLA - secInProgress);
            }
              
            if (!serviceLevelAgreement.CalendarId)
            {
                _caseDetail.slaLatestCompletionDateTime = slaEndDateTime;
            }
            else
            {
                TransDate correctionStartDate = DateTimeUtil::date(lastStartDateTime) + 1;
                TransDate correctionEndDate = DateTimeUtil::date(slaEndDateTime);
                
                Days correctionDays = this.calcSLAEndDateCorrection(correctionStartDate, correctionEndDate, serviceLevelAgreement.CalendarId);

                _caseDetail.SLALatestCompletionDateTime = DateTimeUtil::addDays(slaEndDateTime, correctionDays);
            }
        }
        else
        {
            _caseDetail.slaLatestCompletionDateTime = DateTimeUtil::newDateTime(dateNull(),0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSLAEndDateCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Corrects SLA end date for closed for pickups dates in calendar
    /// </summary>
    /// <param name = "_startDate">SLA Start Date</param>
    /// <param name = "_endDate">SLA End Date</param>
    /// <param name = "_calendarID">Calendar Date</param>
    /// <returns>Number of days to be corrected</returns>
    private Days calcSLAEndDateCorrection(TransDate _startDate, TransDate _endDate, CalendarId _calendarID)
    {
        Days correctionDays = 0;

        while(_startDate <= _endDate)
        {
            if (!WorkCalendarDate::isPickupDate(_calendarID, DateTimeUtil::date(_startDate)))
            {
                _endDate = _endDate + 1;
                correctionDays++;
            }

            _startDate = _startDate + 1;
        }

        return correctionDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSLAEndDateTimeCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Corrects SLA end date for calendar with working time defined
    /// </summary>
    /// <param name = "_startDate">SLA Start Date</param>
    /// <param name = "_workDoneForaDay">SLA work done in one day</param>
    /// <param name = "_calendarID">Calendar Date</param>
    /// <param name = "_secSLA">SLA in seconds</param>
    /// <param name = "_secInProgress">Seconds in progress</param>
    /// <param name = "_workCalendarList">Work calendar list</param>
    /// <param name = "_startTimeFromMidnight">Start time from midnight</param>
    /// <returns>SLA end date time </returns>

    private utcdatetime calcSLAEndDateTimeCorrection(TransDate _startDate, Seconds _workDoneForaDay,  CalendarId _calendarID, Seconds _secSLA, Seconds _secInProgress, enumerator _workCalendarList, Seconds _startTimeFromMidnight)
    {
        WorkCalendarDate                workCalendarDate;
        WorkCalendarDateLine            nextDayStartTime;
        Seconds                         totalWorkingTime;
        Seconds                         remainingWorkSLA;    
        Seconds                         totalWorkDuration;
             
        remainingWorkSLA = _secSLA - _workDoneForaDay;
        if ( remainingWorkSLA < 0 )
        {
            totalWorkingTime = _startTimeFromMidnight + _secSLA;
        }
         
        while (remainingWorkSLA > 0 && _workCalendarList.moveNext())
        {
            _startDate += 1;
            nextDayStartTime = _workCalendarList.current();
            totalWorkDuration = nextDayStartTime.ToTime - nextDayStartTime.FromTime;
            if (!nextDayStartTime)
            {
                totalWorkingTime = remainingWorkSLA;
                break;
            }
            totalWorkingTime = nextDayStartTime.fromTime + remainingWorkSLA;
            if (totalWorkingTime <= nextDayStartTime.ToTime)
            {
                break;
            }
            remainingWorkSLA = remainingWorkSLA - totalWorkDuration;
        }

        SMALatestCompletionDateTime slaEndDateTimeCorrected  = DateTimeUtil::newDateTime(_startDate,totalWorkingTime - _secInProgress);
        return slaEndDateTimeCorrected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfWorkCalendarDateLine</Name>
				<Source><![CDATA[
    private List getListOfWorkCalendarDateLine(CalendarId _calendarId, TransDate _workCalendarStartDate, Seconds _secSLA)
    {
        WorkCalendarDate           workCalendarDate;
        WorkCalendarDateLine       calendarLine;
        int i = 0;
        List workCalendarLineList = new List(Types::AnyType);

        Seconds workDuration = workCalendarDate::calcWorkTimeSeconds(_calendarId,_workCalendarStartDate);
        if(workDuration > 0)
        {
            int rows = System.Math::Ceiling(_secSLA / workDuration);
            while select calendarLine where calendarLine.CalendarId == _calendarId && calendarLine.TransDate >= _workCalendarStartDate &&
            calendarLine.TransDate <= _workCalendarStartDate + rows
            { 
                i++;
                workCalendarLineList.addEnd(calendarLine);
            }
                  
        }
        return workCalendarLineList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcServiceLevelAgreementCompliance</Name>
				<Source><![CDATA[
    public void calcServiceLevelAgreementCompliance(CaseDetail _caseDetail)
    {
        SMAServiceLevelAgreementLogTable    serviceLevelAgreementLog;
        SMAServiceLevelAgreementTable       serviceLevelAgreement;
        Integer                             duration;

        serviceLevelAgreement = SMAServiceLevelAgreementTable::find(_caseDetail.ServiceLevelAgreementId);

        _caseDetail.Compliance = 0;

        if (_caseDetail.ServiceLevelAgreementStatus == SMALogStatus::Closed)
        {
            while select serviceLevelAgreementLog
                where serviceLevelAgreementLog.LogType == SMAServiceLevelAgreementLogType::Case
                    && serviceLevelAgreementLog.RefRecId == _caseDetail.RecId
            {
                duration += serviceLevelAgreementLog.duration();
            }

            if (duration > 0)
            {
                _caseDetail.Compliance = (serviceLevelAgreement.Days * 24 * 60 * 60) + (serviceLevelAgreement.Hours * 60 * 60) + (serviceLevelAgreement.Minutes * 60);

                if (_caseDetail.Compliance > 0)
                {
                    _caseDetail.Compliance = duration / _caseDetail.Compliance * 100;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCategoryHierarchyDetail</Name>
				<Source><![CDATA[
    public void initFromCategoryHierarchyDetail(CaseDetail _caseDetail, CaseCategoryHierarchyDetail _category)
    {
        _caseDetail.ServiceLevelAgreementId = _category.ServiceLevelAgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDateTime</Name>
				<Source><![CDATA[
    public CaseSMASLAStartDateTime startDateTime(CaseRecId _recId)
    {
        CaseSMASLAStartDateTime ret = DateTimeUtil::newDateTime(dateNull(),0);

        // Find the latest start date and time
        ret = SMAServiceLevelAgreementLogTable::firstStartDateTime(SMAServiceLevelAgreementLogType::Case, _recId);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>