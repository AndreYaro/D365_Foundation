<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PsaManageInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PSAManageInvoiceDP</c> report provides data for the <c>PSAManageInvoice</c>
/// SQL Server Reporting Services (SSRS) report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(PSAProjInvoiceContract))
]
class PsaManageInvoiceDP extends SrsReportDataProviderPreProcess
{
    PSAManageInvoiceTmp             tmpPSAManageInvoice;
    SysDocuBrandDetailsRegular      docuBrandDetails;
    PSAProjProposalProj             psaProjProposalProj;
    PSAProjInvoiceTaxTmp            tmpPSAProjInvoiceTax;
    CompanyInfo                     companyInfo;
    ProjInvoiceJour                 projInvoiceJour;
    ProjInvoiceEmpl                 projInvoiceEmpl;
    ProjInvoiceCost                 projInvoiceCost;
    ProjInvoiceItem                 projInvoiceItem;
    ProjInvoiceRevenue              projInvoiceRevenue;
    ProjInvoiceOnAcc                projInvoiceOnAcc;
    PSAProjInvoiceDetailLine        projInvoiceDetailLine;
    PSAProjInvoiceDetailTrans       psaProjInvoiceDetailTrans;
    PSAProjProposalRetain           psaProjProposalRetain;
    CustTable                       custTable;
    DocuRefSearch                   docuRef;
    LineNum                         lineNumForNonGrouped;
    PrePrintLevel                   prePrintLevel;
    InventTrans                     inventTrans;
    DocuRefSearch                   docuRefHeader;
    boolean                         printDocuHeader;
    boolean                         printDocuLine;
    FormletterProformaPrint         formletterProformaPrint;
    boolean                         showSepaNotification;
    CustDirectDebitMandate          custDirectDebitMandate;
    CustBankAccount                 custDirectDebitMandateBankAccount;

    // <GEEU>
    ProjInvoiceLocalizationTmp      projInvoiceLocalizationTmp;

    Counter                         lineNumber;
    boolean                         projCreditInvoicingSalesLine;

    #ISOCountryRegionCodes
    // </GEEU>

    #define.Category('')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillLocalizationField</Name>
				<Source><![CDATA[
    private void fillLocalizationField(Common _cursor, Char _lineSign)
    {
        if (_cursor.TableId == tableNum(ProjInvoiceEmpl))
        {
            tmpPSAManageInvoice.TransDate = projInvoiceEmpl.TransDate;
            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                tmpPSAManageInvoice.LineTaxAmount                = projInvoiceEmpl.TaxAmount;
            }
            // </GEEPL></GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                tmpPSAManageInvoice.LineTaxAmount                -= PSAProjInvoiceRPTHelperEE::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }
        }

        if (_cursor.TableId == tableNum(ProjInvoiceCost))
        {
            tmpPSAManageInvoice.TransDate = projInvoiceCost.TransDate;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                tmpPSAManageInvoice.LineTaxAmount                = projInvoiceCost.TaxAmount;
            }
            // </GEEPL></GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                tmpPSAManageInvoice.LineTaxAmount                -= PSAProjInvoiceRPTHelperEE::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                tmpPSAManageInvoice.TransDate                    = projInvoiceCost.TransDate;
            }
            // </GEEPL>
        }

        if (_cursor.TableId == tableNum(ProjInvoiceItem))
        {
            tmpPSAManageInvoice.TransDate = projInvoiceItem.TransDate;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                tmpPSAManageInvoice.LineTaxAmount                = projInvoiceItem.TaxAmount;
            }
            // </GEEPL></GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                tmpPSAManageInvoice.LineTaxAmount                -= PSAProjInvoiceRPTHelperEE::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                tmpPSAManageInvoice.pkWiUCode_PL                 = InventTable::find(projInvoiceItem.ItemId).pkWiUCode_PL;
                //tmpPSAManageInvoice.ItemPriceAfterDiscount       = CurrencyExchangeHelper::amount((tmpPSAProjInvoice.SalesPrice - tmpPSAProjInvoice.DiscAmount) * (1 - tmpPSAProjInvoice.DiscPercent / 100), projInvoiceItem.CurrencyId);

                if (projInvoiceItem.RefReturnInvoiceTrans_W || !projCreditInvoicingSalesLine)
                {
                    // If the line is not a credit note line or a correction line, show the line number.
                    lineNumber++;
                    tmpPSAManageInvoice.LineNumber               = lineNumber;
                }

                if (_lineSign)
                {
                    tmpPSAManageInvoice.LineSign                 = _lineSign;
                }
                else
                {
                    tmpPSAManageInvoice.LineSign                 = projCreditInvoicingSalesLine ? (projInvoiceItem.RefReturnInvoiceTrans_W ? '-' : '+') : '';
                }

                if (!projInvoiceItem.TaxWriteCode &&
                     projInvoiceItem.TaxGroupId   &&
                     projInvoiceItem.TaxItemGroupId)
                {
                    tmpPSAManageInvoice.TaxWriteCode             = TaxTable::getTaxWriteCodeVat(projInvoiceItem.TaxGroupId, projInvoiceItem.TaxItemGroupId);
                }
            }
            // </GEEPL>

            // <GEEHU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                tmpPSAManageInvoice.Intracode                    = EcoResCategory::commodityCode(projInvoiceItem.IntrastatCommodity);
                tmpPSAManageInvoice.ItemName                     = InventTable::find(projInvoiceItem.ItemId).itemName();
            }
            // </GEEHU>
        }

        if (_cursor.TableId == tableNum(ProjInvoiceRevenue))
        {
            tmpPSAManageInvoice.TransDate = projInvoiceRevenue.TransDate;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                tmpPSAManageInvoice.LineTaxAmount                = projInvoiceRevenue.TaxAmount;
            }
            // </GEEPL></GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                tmpPSAManageInvoice.LineTaxAmount                -= PSAProjInvoiceRPTHelperEE::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }

            // <GEELT>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
            {
                tmpPSAManageInvoice.SalesPrice                   = projInvoiceRevenue.salesPrice();
            }
            // </GEELT>

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                tmpPSAManageInvoice.TransDate                    = projInvoiceRevenue.TransDate;
                tmpPSAManageInvoice.Qty                          = projInvoiceRevenue.Qty;
            }
            // </GEEPL>
        }

        if (_cursor.TableId == tableNum(ProjInvoiceOnAcc))
        {
            tmpPSAManageInvoice.TransDate = projInvoiceRevenue.TransDate;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                tmpPSAManageInvoice.LineTaxAmount                = projInvoiceOnAcc.TaxAmount;
            }
            // </GEEPL></GEEHU>

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                tmpPSAManageInvoice.LineTaxAmount                -= PSAProjInvoiceRPTHelperEE::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                tmpPSAManageInvoice.TransDate                    = projInvoiceOnAcc.TransDate;
            }
            // </GEEPL>
        }
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            tmpPSAManageInvoice.WithReducedTax_JP = TaxTable::existTaxTransWithReducedTaxType_JP(_cursor);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]))
        {
            if (FeatureStateProvider::isFeatureEnabled(IntegrationTaxAuthoritiesSAFeature::instance()) && (projInvoiceJour.QRCode_SA))
            {
                tmpPSAManageInvoice.QRCode_SA = GenerateQRCode_SA::generateQRCodeFromBase64(projInvoiceJour.QRCode_SA);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPackingSlipInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the Packing slip information.
    /// </summary>
    /// <param name="_qty">
    /// Quantity in the packing slip.
    /// </param>
    /// <param name="_packingSlipId">
    /// ID of the packing slip.
    /// </param>
    /// <param name="_shippingDate">
    /// Date of the Packing slip.
    /// </param>
    /// <returns>
    /// String which contains Packing slip information.
    /// </returns>
    private str formatPackingSlipInfo(InventQty _qty, PackingSlipId _packingSlipId, date _shippingDate)
    {
        str infoStr = "@SYS14578" + strFmt(' : %1  ', _qty);

        if (_packingSlipId)
        {
            infoStr += "@SYS23437" + ': ' + _packingSlipId + '  ';
        }

        infoStr += "@SYS16056" + ': ' + date2str(_shippingDate,-1,-1,-1,-1,-1,-1, DateFlags::FormatAll);

        if (_qty || _shippingDate)
        {
            return infoStr;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    private void getCustTable(ProjProposalId _proposalId)
    {
        ProjFundingSource   projFundingSource;

        projFundingSource = ProjFundingSource::find(ProjProposalJour::find(_proposalId).FundingSource);

        if (projFundingSource.FundingType == ProjFundingType::Customer)
        {
            custTable = CustTable::findByPartyRecId(projFundingSource.Party);
        }

        else if (projFundingSource.FundingType ==ProjFundingType::Grant)
        {
            custTable = CustTable::find(projFundingSource.CustAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>ProjInvoiceLocalizationTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PSAManageInvoiceTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(ProjInvoiceLocalizationTmp))
    ]
    public ProjInvoiceLocalizationTmp getProjInvoiceLocalizationTmp()
    {
        return projInvoiceLocalizationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAManageInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>PSACustomerRetentionTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PSACustomerRetentionTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSAManageInvoiceTmp))
    ]
    public PSAManageInvoiceTmp getPSAManageInvoiceTmp()
    {
        return tmpPSAManageInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjInvoiceDetailAndTrans</Name>
				<Source><![CDATA[
    private void getPSAProjInvoiceDetailAndTrans(ProjTransIdBase _transId, ProjProposalId _proposalId)
    {
        select firstonly psaProjInvoiceDetailTrans
            where psaProjInvoiceDetailTrans.TransId == _transId
                && psaProjInvoiceDetailTrans.ProposalId == _proposalId;

        if (psaProjInvoiceDetailTrans)
        {
             select firstonly projInvoiceDetailLine
                where projInvoiceDetailLine.LineNum == psaProjInvoiceDetailTrans.LineNum
                    && projInvoiceDetailLine.ProposalId == psaProjInvoiceDetailTrans.ProposalId;
        }
        else
        {
            projInvoiceDetailLine = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjProposalRetain</Name>
				<Source><![CDATA[
    private void getPSAProjProposalRetain(ProjProposalId _proposalId)
    {
        select firstonly psaProjProposalRetain
            where psaProjProposalRetain.ProposalId == _proposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPSAManageInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the temporary table.
    /// </summary>
    /// <param name = "_tableID">
    ///     The tableId corresponding to the appropriate project transaction type for which the initialization will take place.
    /// </param>
    protected void initPSAManageInvoiceTmp(TableId _tableID)
    {
        Notes lineNotes;
        ProjTable projTable;
        ProjInvoiceEmplDetail projInvoiceEmplDetail;
        ProjInvoiceCostDetail projInvoiceCostDetail;
        ProjInvoiceItemDetail projInvoiceItemDetail;
        ProjInvoiceRevenueDetail projInvoiceRevenueDetail;
        ProjInvoiceOnAccDetail projInvoiceOnAccDetail;
        ProjInvoiceRevenue projInvoiceRev;

        ProjProposalJour projProposalJour = ProjProposalJour::find(projInvoiceJour.ProposalId);
        tmpPSAManageInvoice.clear();

        if (printDocuLine && docuRef != null)
        {
            lineNotes = Docu::concatDocuRefNotes(docuRef);
        }

        tmpPSAManageInvoice.CompanyPhone                = companyInfo.phone();
        tmpPSAManageInvoice.CompanyTelefax              = companyInfo.teleFax();
        tmpPSAManageInvoice.CompanyGiro                 = companyInfo.Giro;
        tmpPSAManageInvoice.CompanyCoRegNum             = companyInfo.CoRegNum;
        tmpPSAManageInvoice.CompanyDebitDirectId        = BankAccountTable::findByCompany(companyInfo.DataArea, companyInfo.Bank).DebitDirectId;
        tmpPSAManageInvoice.DeliveryName                = companyInfo.Name;
        tmpPSAManageInvoice.DeliveryAddress             = companyInfo.postalAddress().Address;
        tmpPSAManageInvoice.InvoiceNum                  = projInvoiceJour.ProjInvoiceId;
        tmpPSAManageInvoice.InvoiceDate                 = projInvoiceJour.InvoiceDate;
        tmpPSAManageInvoice.DueDate                     = projInvoiceJour.DueDate;
        tmpPSAManageInvoice.CustAccountExt              = projInvoiceJour.InvoiceAccount;
        tmpPSAManageInvoice.CustCompanyName             = projInvoiceJour.DeliveryName;
        tmpPSAManageInvoice.CustCompanyAddress          = custTable.address();
        tmpPSAManageInvoice.CustCompanyPhone            = custTable.phone();
        tmpPSAManageInvoice.CustCompanyTelefax          = custTable.telefax();
        tmpPSAManageInvoice.PaymTermId                  = custTable.PaymTermId;
        tmpPSAManageInvoice.ContractId                  = projInvoiceJour.ProjInvoiceProjId;
        tmpPSAManageInvoice.OurAccountNum               = projInvoiceJour.ourAccountNum();
        tmpPSAManageInvoice.CurrencyCode                = projInvoiceJour.CurrencyId;
        tmpPSAManageInvoice.CompanyLogo                 = FormLetter::companyLogo();
        tmpPSAManageInvoice.TotalDisc                   = projInvoiceJour.EndDisc;
        tmpPSAManageInvoice.LineTxt                     = projInvoiceDetailLine.Txt;
        tmpPSAManageInvoice.StandardCurrency            = Ledger::accountingCurrency();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
        {
            tmpPSAManageInvoice.SumTax                  = projInvoiceJour.SumTax - PSAProjInvoiceRPTHelperEE::calculateTotalExcludedTaxAmount(projInvoiceJour.LedgerVoucher);
        }
        else
        {
            tmpPSAManageInvoice.SumTax                  = projInvoiceJour.SumTax;
        }

        tmpPSAManageInvoice.SumMarkup                   = projInvoiceJour.SumMarkup;
        tmpPSAManageInvoice.TotalDisc                   = projInvoiceJour.EndDisc;
        tmpPSAManageInvoice.FormLetter_Txt              = FormLetterRemarks::find(projInvoiceJour.LanguageId, FormTextType::ProjectInvoice).Txt;
        tmpPSAManageInvoice.DocuRefNotes                = lineNotes;
        tmpPSAManageInvoice.smaSpecIndexCalc            = NoYes::No;
        tmpPSAManageInvoice.PackingSlipInfoVisibility   = NoYes::No;

        select psaProjProposalProj where psaProjProposalProj.ProjProposalId == projInvoiceJour.ProposalId;

        if (psaProjProposalProj)
        {
            tmpPSAManageInvoice.IndirectCost = psaProjProposalProj.calcTotalIndirectComponentInvoice(psaProjProposalProj);
        }

        if (!projInvoiceJour.isProforma())
        {
            select sum(LineAmount) from projInvoiceRevenueDetail
                join  RecId from projInvoiceRev
                where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRev.RecId
                   && projInvoiceRev.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                   && projInvoiceRev.InvoiceDate == projInvoiceJour.InvoiceDate
                   && projInvoiceRev.IsRetained == NoYes::Yes;

            if (projInvoiceRevenueDetail.LineAmount)
            {
                tmpPSAManageInvoice.RetainageAmount = projInvoiceRevenueDetail.LineAmount;
            }
        }
        else
        {
            select sum(RetainedNow) from psaProjProposalProj
                where psaProjProposalProj.ProjProposalId == projInvoiceJour.ProposalId;

            if (psaProjProposalProj.RetainedNow)
            {
                tmpPSAManageInvoice.RetainageAmount = psaProjProposalProj.RetainedNow;
            }
        }

        tmpPSAManageInvoice.psaInvoiceTxtPre    = projProposalJour.psaInvoiceTxtPre;
        tmpPSAManageInvoice.InvoiceGrouping     = projInvoiceDetailLine.InvoiceGrouping;

        if (projInvoiceDetailLine)
        {
            tmpPSAManageInvoice.ManageGroupingOrder     = projInvoiceDetailLine.LineNum;
        }
        else
        {
            tmpPSAManageInvoice.ManageGroupingOrder     = lineNumForNonGrouped;
        }

        if (_tableID == tableNum(ProjInvoiceEmpl))
        {
            projTable                              = ProjTable::find(projInvoiceEmpl.ProjId);

            tmpPSAManageInvoice.ProjId             = projTable.ProjId;
            tmpPSAManageInvoice.ProjName           = projTable.Name;
            tmpPSAManageInvoice.ProjCategory       = projInvoiceEmpl.CategoryId;
            tmpPSAManageInvoice.ProjType           = ProjTransType::Hour;
            tmpPSAManageInvoice.Qty                = projInvoiceEmpl.Qty;

            select SalesPrice, LineAmount from projInvoiceEmplDetail
                where projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmpl.RecId;

            tmpPSAManageInvoice.SalesPrice         = projInvoiceEmplDetail.SalesPrice;
            tmpPSAManageInvoice.TotalAmount        = projInvoiceEmplDetail.LineAmount;
        }

        if (_tableID == tableNum(ProjInvoiceCost))
        {
            projTable                              = ProjTable::find(projInvoiceCost.ProjId);

            tmpPSAManageInvoice.ProjId             = projTable.ProjId;
            tmpPSAManageInvoice.ProjName           = projTable.Name;
            tmpPSAManageInvoice.ProjCategory       = projInvoiceCost.CategoryId;
            tmpPSAManageInvoice.ProjType           = ProjTransType::Cost;
            tmpPSAManageInvoice.Qty                = projInvoiceCost.Qty;

            select SalesPrice, LineAmount from projInvoiceCostDetail
                where projInvoiceCostDetail.InvoiceRefRecId == projInvoiceCost.RecId;

            tmpPSAManageInvoice.SalesPrice         = projInvoiceCostDetail.SalesPrice;
            tmpPSAManageInvoice.TotalAmount        = projInvoiceCostDetail.LineAmount;
        }

        if (_tableID == tableNum(ProjInvoiceItem))
        {
            projTable                              = ProjTable::find(projInvoiceItem.ProjId);

            tmpPSAManageInvoice.ProjId             = projTable.ProjId;
            tmpPSAManageInvoice.ProjName           = projTable.Name;
            tmpPSAManageInvoice.ProjCategory       = projInvoiceItem.CategoryId;
            tmpPSAManageInvoice.ProjType           = ProjTransType::Item;
            tmpPSAManageInvoice.Qty                = projInvoiceItem.Qty;

            select SalesPrice, LineAmount from projInvoiceItemDetail
                where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId;

            tmpPSAManageInvoice.SalesPrice                  = projInvoiceItemDetail.SalesPrice;
            tmpPSAManageInvoice.TotalAmount                 = projInvoiceItemDetail.LineAmount;

            // Packing slip information to print on Invoice
            this.printInventTrans();
            if (inventTrans.RecId != 0 && ProjFormletterParameters::find().PckSlpInfoOnInvoice)
            {
                tmpPSAManageInvoice.PackingSlipInfoVisibility   = NoYes::Yes;
                tmpPSAManageInvoice.PackingSlipInfo             = this.printPackingSlipInfo();
            }
        }

        if (_tableID == tableNum(ProjInvoiceRevenue))
        {
            projTable                              = ProjTable::find(projInvoiceRevenue.ProjId);

            tmpPSAManageInvoice.ProjId             = projTable.ProjId;
            tmpPSAManageInvoice.ProjName           = projTable.Name;
            tmpPSAManageInvoice.ProjCategory       = projInvoiceRevenue.CategoryId;
            tmpPSAManageInvoice.ProjType           = ProjTransType::Revenue;
            tmpPSAManageInvoice.Qty                = projInvoiceRevenue.Qty;

            select SalesPrice, LineAmount from projInvoiceRevenueDetail
                where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId;

            tmpPSAManageInvoice.SalesPrice      = projInvoiceRevenueDetail.SalesPrice;
            tmpPSAManageInvoice.TotalAmount     = projInvoiceRevenueDetail.LineAmount;
            tmpPSAManageInvoice.smaBasePrice    = projInvoiceRevenue.smaBasePrice;
            tmpPSAManageInvoice.smaIndex        = projInvoiceRevenue.smaIndex;
        }

        if (_tableID == tableNum(ProjInvoiceOnAcc))
        {
            projTable                              = ProjTable::find(projInvoiceOnAcc.ProjId);

            tmpPSAManageInvoice.ProjId             = projTable.ProjId;
            tmpPSAManageInvoice.ProjName           = projTable.Name;
            tmpPSAManageInvoice.ProjCategory       = #Category;
            tmpPSAManageInvoice.ProjType           = ProjTransType::OnAccount;
            tmpPSAManageInvoice.Qty                = projInvoiceOnAcc.Qty;
            tmpPSAManageInvoice.SalesPrice         = projInvoiceOnAcc.salesPrice();

            select Amount from projInvoiceOnAccDetail
                where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId;

            tmpPSAManageInvoice.TotalAmount        = projInvoiceOnAccDetail.Amount;
        }

        tmpPSAManageInvoice.ShowSepaNotification    = showSepaNotification;
        tmpPSAManageInvoice.MandateReference        = custDirectDebitMandate.MandateReference;
        tmpPSAManageInvoice.MandateSWIFTNo          = custDirectDebitMandateBankAccount.SWIFTNo;

        unchecked (Uncheck::TableSecurityPermission)
        {
            tmpPSAManageInvoice.MandateBankIBAN = custDirectDebitMandateBankAccount.BankIBAN;
        }

        // PrePrintLevelShow used to print invoice according to selected paper format
        tmpPSAManageInvoice.PrePrintLevelShow         = prePrintLevel;

        // Document attachments shown on the Invoice
        if (printDocuHeader && docuRefHeader != null)
        {
            tmpPSAManageInvoice.DocuRefHeaderVisibility   = NoYes::Yes;
            tmpPSAManageInvoice.DocumentHeader            = Docu::concatDocuRefNotes(docuRefHeader);
            // Have to rewind docuRefSearch for use by next line
            docuRefHeader.init();
        }

        if (printDocuLine && docuRef != null)
        {
            tmpPSAManageInvoice.DocuRefLineVisibility     = NoYes::Yes;
            tmpPSAManageInvoice.DocumentLine              = lineNotes;
            // Have to rewind docuRefSearch for use by next line
            docuRef.init();
        }
        
        tmpPSAManageInvoice.CompanyVATNum = TaxTransactionTaxIDHelper::getTaxID(
            projInvoiceJour.TableId,
            projInvoiceJour.RecId,
            projInvoiceJour.InvoiceDate).getLegalEntityTaxID();

        // Tax Exempt Number shown on Invoice
        if (ProjFormletterParameters::find().PrintInvoiceVATNum)
        {
            tmpPSAManageInvoice.InvoiceVATNumVisibility = NoYes::Yes;
        }
        tmpPSAManageInvoice.InvoiceAccountVATNum = TaxTransactionTaxIDHelper::getTaxID(
            projInvoiceJour.TableId,
            projInvoiceJour.RecId,
            projInvoiceJour.InvoiceDate).getCounterPartyTaxID();

        // Subscription Index calculation shown on Invoice
        if (projInvoiceJour.SMASpecIndexCalc    &&
            ProjFormletterParameters::find().SMASpecIndexCalc)

        {
            tmpPSAManageInvoice.SMASpecIndexCalc = NoYes::Yes;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpPSAManageInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the specified record and inserts it in the temporary table.
    /// </summary>
    /// <param name="_cursor">
    /// The common cursor.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp
    /// table record.
    /// </param>
    public void insertTmpPSAManageInvoice(Common _cursor, char _lineSign = '')
    {
        ProjProposalJour projProposalJour = ProjProposalJour::find(projInvoiceJour.ProposalId);

        this.getCustTable(projInvoiceJour.ProposalId);
        this.getPSAProjProposalRetain(projInvoiceJour.ProposalId);
        this.initPSAManageInvoiceTmp(_cursor.TableId);

        if (TaxParameters::exist() && TaxParameters::find().TaxSpecifyLine)
        {
            this.initLineTaxAmount(_cursor);
        }

        // <GEEU>
        this.fillLocalizationField(_cursor, _lineSign);
        // </GEEU>

        // set Document Branding Header;
        this.setSysDocuBrandDetails();

        tmpPSAManageInvoice.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes the line tax amount for project invoice line
    /// </summary>
    /// <param name = "_cursor">Common object to hold table data.</param>
    private void initLineTaxAmount(Common _cursor)
    {
        switch (_cursor.TableId)
        {
            case tableNum(ProjInvoiceEmpl):
                tmpPSAManageInvoice.LineTaxAmount = projInvoiceEmpl.TaxAmount;
                break;

            case tableNum(ProjInvoiceCost):
                tmpPSAManageInvoice.LineTaxAmount = projInvoiceCost.TaxAmount;
                break;

            case tableNum(ProjInvoiceItem):
                tmpPSAManageInvoice.LineTaxAmount = projInvoiceItem.TaxAmount;
                break;

            case tableNum(ProjInvoiceRevenue):
                tmpPSAManageInvoice.LineTaxAmount = projInvoiceRevenue.TaxAmount;
                break;

            case tableNum(ProjInvoiceOnAcc):
                tmpPSAManageInvoice.LineTaxAmount = projInvoiceOnAcc.TaxAmount;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    private void setSysDocuBrandDetails()
    {
        SysDocuBrandDetailsRegular bufferTable = SysDocuBrandDetails::getDocuBrandDetailsRegular(this);
        docuBrandDetails.clear();
        docuBrandDetails.data(bufferTable.data());
        docuBrandDetails.PaymTermDescription     = PaymTerm::find(projInvoiceJour.Payment).Description;
        docuBrandDetails.CurrencySymbol          = Currency::find(projInvoiceJour.CurrencyId).Symbol;
        docuBrandDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    private Query modifyQuery(Query _query, ProjInvoiceJour _projInvoiceJour)
    {
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;

        qbds = _query.dataSourceTable(tableNum(ProjInvoiceJour));
        qbr = SysQuery::findOrCreateRange(qbds, fieldNum(ProjInvoiceJour, RecId));

        if (qbr)
        {
            qbr.value(queryValue(_projInvoiceJour.RecId));
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocuRefSearch instance to print the Document Header on the invoice.
    /// </summary>
    private void printDocumentHeader()
    {
        printDocuHeader = false;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Head) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))

        {
            docuRefHeader = DocuRefSearch::newTypeIdAndRestriction(ProjProposalJour::find(projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
            printDocuHeader = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the DocuRefSearch instance to print the Document Header on the invoice.
    /// </summary>
    /// <param name="_buffer">
    /// Common buffer for tables.
    /// </param>
    private void printDocumentLine(Common   _buffer)
    {
        ProjInvoiceItem     projItem;
        ProjInvoiceCost     projCost;
        ProjInvoiceEmpl     projEmpl;
        ProjInvoiceRevenue  projRevenue;
        ProjInvoiceOnAcc    projOnAcc;

        printDocuLine = false;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Line) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))
        {
            switch (_buffer.TableId)
            {
                case tableNum(ProjInvoiceItem)  :
                    projItem    = _buffer;

                    docuRef = DocuRefSearch::newTypeIdAndRestriction(ProjProposalItem::find(projItem.ProjTransId, projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
                    break;

                case tableNum(ProjInvoiceCost)  :
                    projCost    = _buffer;

                    docuRef = DocuRefSearch::newTypeIdAndRestriction(ProjProposalCost::find(projCost.TransId, projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
                    break;

                case tableNum(ProjInvoiceEmpl)  :
                    projEmpl    = _buffer;

                    docuRef = DocuRefSearch::newTypeIdAndRestriction(ProjProposalEmpl::find(projEmpl.TransId, projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
                    break;

                case tableNum(ProjInvoiceRevenue)  :
                    projRevenue = _buffer;

                    docuRef = DocuRefSearch::newTypeIdAndRestriction(ProjProposalRevenue::find(projRevenue.TransId, projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
                    break;

                case tableNum(ProjInvoiceOnAcc)  :
                    projOnAcc   = _buffer;

                    docuRef = DocuRefSearch::newTypeIdAndRestriction(ProjProposalOnAcc::find(projOnAcc.TransId, projInvoiceJour.ProposalId),
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External);
                    break;
            }
            printDocuLine = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventTrans object to use in packing slip information.
    /// </summary>
    private void printInventTrans()
    {
        InventTransOriginId inventTransOriginId;
        ProjItemTrans       localProjItemTrans;

        inventTransOriginId = InventTransOrigin::findByInventTransId(projInvoiceItem.InventTransId).RecId;

        if (projInvoiceItem.ProjTransId)
        {
            localProjItemTrans = ProjItemTrans::find(projInvoiceItem.ProjTransId);
        }

        if (localProjItemTrans)
        {
            select inventTrans
                  where inventTrans.InventTransOrigin == inventTransOriginId &&
                    inventTrans.ProjAdjustRefId == localProjItemTrans.ProjAdjustRefId &&
                    inventTrans.PackingSlipId;
        }
        else
        {
            select inventTrans
                  where inventTrans.InventTransOrigin == inventTransOriginId &&
                    !inventTrans.ProjAdjustRefId &&
                    inventTrans.PackingSlipId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPackingSlipInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Packing slip information.
    /// </summary>
    /// <returns>
    /// Formatted string containing packing slip information.
    /// </returns>
    private str printPackingSlipInfo()
    {
        SalesShippingDate shippingDate;
        InventTransOrigin inventTransOrigin = inventTrans.inventTransOrigin();

        InventQty salesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTransOrigin.ItemId,
																								   inventTrans.inventDimId,
																								   inventTrans.Qty,
																								   inventTransOrigin.inventTable().inventUnitId(),
																								   projInvoiceItem.SalesUnit,
																								   NoYes::Yes);

        if (inventTrans.PackingSlipId)
        {
            shippingDate = (select custPackingSlipTrans
                    where inventTrans.PackingSlipId == custPackingSlipTrans.PackingSlipId).DeliveryDate;
        }
        else
        {
            shippingDate = projInvoiceItem.DlvDate;
        }

        return this.formatPackingSlipInfo(salesQty * -1, inventTrans.PackingSlipId, shippingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services (SSRS) report.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SSRS at
    /// run time. The method should compute data and populate the data tables that will be returned to
    /// SSRS.
    /// </remarks>
    public void processReport()
    {
        PSAProjInvoiceContract contract = this.parmDataContract() as PSAProjInvoiceContract;
        // <GEPL>
        ProjInvoiceItem        loopProjInvoiceItem;
        // </GEPL>

        tmpPSAManageInvoice.setConnection(this.parmUserConnection());

        prePrintLevel = ProjFormletterParameters::find().PrePrintLevelInvoice;
        companyInfo   = CompanyInfo::find();
        if (contract.parmProjInvoiceJourRecId())
        {
            projInvoiceJour = ProjInvoiceJour::findRecId(contract.parmProjInvoiceJourRecId());
        }

        if (contract.parmFormLetterRecordId())
        {
            this.unpackFormLetter(contract.parmFormLetterRecordId());
        }

        showSepaNotification = this.showSepaNotification();

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]))
        {
            projInvoiceLocalizationTmp.setConnection(this.parmUserConnection());

            PSAProjInvoiceRPTHelperEE::createProjInvoiceLocalizationTmp(projInvoiceLocalizationTmp, projInvoiceJour);
        }
        // </GEEU>

        this.setNonGroupedLineNum(projInvoiceJour.ProposalId);

        // Get the Document attachment to display in header
        this.printDocumentHeader();

        while select projInvoiceEmpl
           where projInvoiceEmpl.ProjInvoiceId      == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceEmpl.InvoiceDate       == projInvoiceJour.InvoiceDate
        {
            this.getPSAProjInvoiceDetailAndTrans(projInvoiceEmpl.TransId, projInvoiceJour.ProposalId);

            // Get the Document attachment to display for each line
            this.printDocumentLine(projInvoiceEmpl);

            this.insertTmpPSAManageInvoice(projInvoiceEmpl);
        }

        while select projInvoiceCost
           where projInvoiceCost.ProjInvoiceId      == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceCost.InvoiceDate       == projInvoiceJour.InvoiceDate
        {
            this.getPSAProjInvoiceDetailAndTrans(projInvoiceCost.TransId, projInvoiceJour.ProposalId);

            // Get the Document attachment to display for each line
            this.printDocumentLine(projInvoiceCost);

            this.insertTmpPSAManageInvoice(projInvoiceCost);
        }

        while select projInvoiceItem
           where projInvoiceItem.ProjInvoiceId      == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceItem.InvoiceDate       == projInvoiceJour.InvoiceDate
        {
            this.getPSAProjInvoiceDetailAndTrans(projInvoiceItem.ProjTransId, projInvoiceJour.ProposalId);
            if (projInvoiceItem.ItemType == ProjItemType::SalesOrder)
            {
                this.printInventTrans();
            }

            // Get the Document attachment to display for each line
            this.printDocumentLine(projInvoiceItem);

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                if (!projCreditInvoicingSalesLine && projInvoiceItem.LineAmount < 0)
                {
                    // Since this is not a sales line based invoice, simulate correction and corrective lines by
                    // showing two report lines per project invoice item line.
                    projInvoiceItem.Qty = abs(projInvoiceItem.Qty);
                    projInvoiceItem.TaxAmount = abs(projInvoiceItem.TaxAmount);
                    projInvoiceItem.LineAmount = abs(projInvoiceItem.LineAmount);
                    this.insertTmpPSAManageInvoice(projInvoiceItem, '-');

                    projInvoiceItem.Qty = 0;
                    projInvoiceItem.TaxAmount = 0;
                    projInvoiceItem.LineAmount = 0;
                    this.insertTmpPSAManageInvoice(projInvoiceItem, '+');
                }
                else
                {
                    if (projCreditInvoicingSalesLine && projInvoiceItem.RefReturnInvoiceTrans_W)
                    {
                        projInvoiceItem.Qty        = abs(projInvoiceItem.Qty);
                        projInvoiceItem.LineAmount = abs(projInvoiceItem.LineAmount);
                        projInvoiceItem.TaxAmount  = abs(projInvoiceItem.TaxAmount);
                    }

                    this.insertTmpPSAManageInvoice(projInvoiceItem);

                    if (projCreditInvoicingSalesLine && projInvoiceItem.CreditNoteInternalRef_PL)
                    {
                        while select loopProjInvoiceItem
                            where loopProjInvoiceItem.ProjInvoiceId == projInvoiceItem.ProjInvoiceId &&
                                    loopProjInvoiceItem.InvoiceDate   == projInvoiceItem.InvoiceDate   &&
                                    !loopProjInvoiceItem.RefReturnInvoiceTrans_W &&
                                    loopProjInvoiceItem.CreditNoteInternalRef_PL == projInvoiceItem.CreditNoteInternalRef_PL
                        {
                            this.insertTmpPSAManageInvoice(loopProjInvoiceItem);
                        }
                    }
                }
            }
            else
            {
            // </GEEPL>
                this.insertTmpPSAManageInvoice(projInvoiceItem);
            // <GEEPL>
            }
            // </GEEPL>
        }

        while select projInvoiceRevenue
            where projInvoiceRevenue.ProjInvoiceId  == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceRevenue.InvoiceDate    == projInvoiceJour.InvoiceDate
                    && projInvoiceRevenue.IsRetained == NoYes::No // Donot consider retainage fee lines
        {
            this.getPSAProjInvoiceDetailAndTrans(projInvoiceRevenue.TransId, projInvoiceJour.ProposalId);

            // Get the Document attachment to display for each line
            this.printDocumentLine(projInvoiceRevenue);

            this.insertTmpPSAManageInvoice(projInvoiceRevenue);
        }

        while select projInvoiceOnAcc
            where projInvoiceOnAcc.ProjInvoiceId    == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceOnAcc.InvoiceDate      == projInvoiceJour.InvoiceDate
        {
            this.getPSAProjInvoiceDetailAndTrans(projInvoiceOnAcc.TransId, projInvoiceJour.ProposalId);

            // Get the Document attachment to display for each line
            this.printDocumentLine(projInvoiceOnAcc);

            this.insertTmpPSAManageInvoice(projInvoiceOnAcc);
        }

        tmpPSAProjInvoiceTax
            = PSAProjInvoiceTaxTmp::insertPSAProjInvoiceTmpForTax(
                projInvoiceJour,
                PSAProjInvoiceTaxTmp::getTaxSpec(projInvoiceJour, formletterProformaPrint));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNonGroupedLineNum</Name>
				<Source><![CDATA[
    private void setNonGroupedLineNum(ProjProposalId _proposalId)
    {
        PSAProjInvoiceDetailLine detailLine;

        select maxof(LineNum) from  detailLine where detailLine.ProposalId == _proposalId;

        lineNumForNonGrouped = detailLine.LineNum +  1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSepaNotification</Name>
				<Source><![CDATA[
    private boolean showSepaNotification()
    {
        if (projInvoiceJour.DirectDebitMandate)
        {
            select firstOnly custDirectDebitMandate
                    where custDirectDebitMandate.RecId == projInvoiceJour.DirectDebitMandate
                join custDirectDebitMandateBankAccount
                    where custDirectDebitMandateBankAccount.AccountID == custDirectDebitMandate.BankAccount &&
                            custDirectDebitMandateBankAccount.CustAccount == custDirectDebitMandate.CustAccount;

            if (custDirectDebitMandate && custDirectDebitMandateBankAccount)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAProjInvoiceTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to select all records from table <c>PSAProjInvoiceTaxTmp</c>.
    /// </summary>
    /// <returns>
    /// Returns the table object with all the data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PSAProjInvoiceTaxTmp))
    ]
    public PSAProjInvoiceTaxTmp getPSAProjInvoiceTax()
    {
        return tmpPSAProjInvoiceTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsRegular))
    ]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        select docuBrandDetails;
        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the formletter packed class.
    /// </summary>
    /// <param name="_formLetterRecId">
    /// The recid of tempstroe where formletter is stored.
    /// </param>
    private void unpackFormLetter(RecId _formLetterRecId)
    {
        SRSTmpDataStore srsTmpDataStore;
        container       formLetterPackedValue;

        if (_formLetterRecId)
        {
            ttsbegin;
            select forupdate firstonly Value from srsTmpDataStore
                where srsTmpDataStore.RecId == _formLetterRecId;

            if (srsTmpDataStore.RecId)
            {
                // get and delete first.
                formLetterPackedValue = srsTmpDataStore.Value;
                srsTmpDataStore.delete();

                // then create form letter
                if (projInvoiceJour.isProforma())
                {
                    formletterProformaPrint = FormletterProformaPrint::newUnpack(formLetterPackedValue);
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>