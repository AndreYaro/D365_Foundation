<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableTemplateEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTableTemplateEventHandler</c> class is used as the event handler for purchase order
/// workflow.
/// </summary>
/// <remarks>
/// This class implements the <c>WorkflowStartedEventHandler</c>, <c>WorkflowCanceledEventHandler</c>,
/// <c>WorkflowCompletedEventHandler</c> class interfaces and handles the updates that are required
/// when the different workflow event has ended.
/// </remarks>
class
    PurchTableTemplateEventHandler
implements
    WorkflowStartedEventHandler,
    WorkflowCompletedEventHandler,
    WorkflowCanceledEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the business logic when the workflow is started.
    /// </summary>
    /// <param name = "_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        #OCCRetryCount

        try
        {
            PurchTable purchTable = PurchTable::findRecId(_workflowEventArgs.parmWorkflowContext().parmRecId(), true);
            this.validateDistributionsAndCalcTotals(purchTable);
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the business logic when the workflow is canceled.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// If the change management value on the purchase order has been switched to no, the purchase orders
    /// are set to approved; otherwise, the user must submit the purchase again.
    /// </remarks>
    public void canceled(WorkflowEventArgs  _workflowEventArgs)
    {
        #OCCRetryCount

        try
        {
            WorkflowContext wfContext = _workflowEventArgs.parmWorkflowContext();
            PurchTable purchTable = PurchTable::findRecId(wfContext.parmRecId());

            ttsbegin;
            WorkflowTrackingTable lastWorkflowTrackingRecord;
            WorkflowTrackingStatusTable wfTrackingStatusTable;

            if (PurchTableTemplateEventHandlerFlight::instance().isEnabled())
            {
                // Finds the last workflow tracking record for the workflow context.
                select firstonly lastWorkflowTrackingRecord order by lastWorkflowTrackingRecord.CreatedDateTime desc where
                    ((lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::WorkItem &&
                      lastWorkflowTrackingRecord.TrackingType    != WorkflowTrackingType::Creation &&
                      lastWorkflowTrackingRecord.TrackingType    != WorkflowTrackingType::Approval) ||
                    ((lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Submission ||
                      lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::SubmitOnBehalf ||
                      lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Cancellation ||
                      lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Resume) &&
                      lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::Workflow) ||
                     (lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Cancellation &&
                      (lastWorkflowTrackingRecord.TrackingContext== WorkflowTrackingContext::Approval ||
                       lastWorkflowTrackingRecord.TrackingContext== WorkflowTrackingContext::Task ||
                    (PurchTableTemplateEventHandlerConsiderLineItemElementFlight::instance().isEnabled()
                    && lastWorkflowTrackingRecord.TrackingContext== WorkflowTrackingContext::LineItemElement))) ||
                     (lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Resubmission) ||
                     (lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::LineItemWorkflow &&
                      lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Creation)) &&
                     (lastWorkflowTrackingRecord.WorkflowTrackingStatusTable == Workflow::findTrackingStatusForDocument(purchTable).RecId ||
                      !PurchTableTemplateEventHandlerCancelOnlyNonCanceledV2Flight::instance().isEnabled())
                exists join wfTrackingStatusTable
                    where wfTrackingStatusTable.RecId            == lastWorkflowTrackingRecord.WorkflowTrackingStatusTable &&
                          wfTrackingStatusTable.ContextRecId     == wfContext.parmRecId() &&
                          wfTrackingStatusTable.ContextTableId   == wfContext.parmTableId() &&
                          wfTrackingStatusTable.ContextCompanyId == wfContext.parmCompanyId();

                if (lastWorkflowTrackingRecord
                    && (lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::Workflow ||
                        lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::Approval ||
                        lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::Task ||
                        lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::LineItemElement)
                     && lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Cancellation)
                {
                    if (purchTable.DocumentState != VersioningDocumentState::Draft)
                    {
                        purchTable.selectForUpdate(true);
                        VersioningPurchaseOrder::newPurchaseOrder(purchTable).cancelChangeRequest();
                    }
                }
            }
            else
            {
                // Finds the last workflow tracking record for the workflow context.
                select firstonly lastWorkflowTrackingRecord order by lastWorkflowTrackingRecord.CreatedDateTime desc where
                    ((lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::WorkItem &&
                      lastWorkflowTrackingRecord.TrackingType    != WorkflowTrackingType::Creation) ||
                    ((lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Submission ||
                      lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::SubmitOnBehalf ||
                      lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Cancellation ||
                      lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Resume) &&
                      lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::Workflow) ||
                     (lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Resubmission) ||
                     (lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::LineItemWorkflow &&
                      lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Creation)) &&
                     (lastWorkflowTrackingRecord.WorkflowTrackingStatusTable == Workflow::findTrackingStatusForDocument(purchTable).RecId ||
                      !PurchTableTemplateEventHandlerCancelOnlyNonCanceledV2Flight::instance().isEnabled())
                exists join wfTrackingStatusTable
                    where wfTrackingStatusTable.RecId            == lastWorkflowTrackingRecord.WorkflowTrackingStatusTable &&
                          wfTrackingStatusTable.ContextRecId     == wfContext.parmRecId() &&
                          wfTrackingStatusTable.ContextTableId   == wfContext.parmTableId() &&
                          wfTrackingStatusTable.ContextCompanyId == wfContext.parmCompanyId();

                if ( lastWorkflowTrackingRecord
                  && lastWorkflowTrackingRecord.TrackingContext == WorkflowTrackingContext::Workflow
                  && lastWorkflowTrackingRecord.TrackingType    == WorkflowTrackingType::Cancellation)
                {
                    if (purchTable.DocumentState != VersioningDocumentState::Draft)
                    {
                        purchTable.selectForUpdate(true);
                        VersioningPurchaseOrder::newPurchaseOrder(purchTable).cancelChangeRequest();
                    }
                }
            }

            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DocumentState</c> field on the <c>PurchTable</c> table to approved.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when the workflow is completed. The
    /// <c>WorkflowState</c> field on the <c>PurchTable</c> table is set to the
    /// <c>TradeWorkflowState::Approved</c> enumeration value.
    /// </remarks>
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            boolean skipUpdatePurchTable = _workflowEventArgs.parmWorkflowContext().parmSubWorkflowId() != emptyGuid();

            if (!skipUpdatePurchTable)
            {
                PurchTable purchTable = PurchTable::findRecId(_workflowEventArgs.parmWorkflowContext().parmRecId(), true);
                this.validateDistributionsAndCalcTotals(purchTable);
                VersioningPurchaseOrder::newPurchaseOrder(purchTable).approveWorkflowChangeRequest();
            }
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDistributionsAndCalcTotals</Name>
				<Source><![CDATA[
    private void validateDistributionsAndCalcTotals(PurchTable _purchTable)
    {
        if (_purchTable && PurchTableWorkflow::isWorkflowSubmitEnhancementEnabled(false))
        {
            using (PurchTableWorkflowCalcTotalsContext context = PurchTableWorkflowCalcTotalsContext::construct())
            {
                // Tax is needed to be calculated first or else the Accounting Distribution allocation factor will not be calculated correctly.
                PurchTotals::newPurchTable(_purchTable).calc();

                if (!_purchTable.isPartiallyDistributed() && _purchTable.checkFullyDistributedAndQualified())
                {
                    _purchTable.updateAwaitingWorkflowTotalsCalculation(false);
                }
                else
                {
                    throw error("@SCM:PurchTableWorkflowAccountingDistributionValidationFailed");
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>