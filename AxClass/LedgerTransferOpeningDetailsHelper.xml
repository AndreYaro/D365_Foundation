<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransferOpeningDetailsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal static class LedgerTransferOpeningDetailsHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAccountEntryDetailsSettled</Name>
				<Source><![CDATA[
    internal static NoYes isAccountEntryDetailsSettled(TransDate _accountingDate, FiscalCalendarPeriodRecId _fiscalCalendarPeriodRecId)
    {
        LedgerTransSettlement transSettlement;
        GeneralJournalAccountEntry accountEntry;
        GeneralJournalEntry journalEntry;

        select firstonly RecId from accountEntry
            where accountEntry.OriginalAccountEntry != 0
        exists join journalEntry
            where journalEntry.RecId == accountEntry.GeneralJournalEntry
                && journalEntry.AccountingDate == _accountingDate
                && journalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                && journalEntry.Ledger == Ledger::current()
        exists join transSettlement
            where transSettlement.TransRecId == accountEntry.RecId;

        return accountEntry.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSummarizedBalanceSettled</Name>
				<Source><![CDATA[
    internal static NoYes isSummarizedBalanceSettled(TransDate _accountingDate, FiscalCalendarPeriodRecId _fiscalCalendarPeriodRecId)
    {
        LedgerTransSettlement transSettlement;
        GeneralJournalAccountEntry accountEntry;
        GeneralJournalEntry journalEntry;
        MainAccount mainAccount;
        NoYes isAccountTypeCN = LedgerTransferOpeningDetailsHelper::isCommonAccountType_CN();

        select firstonly RecId from accountEntry
        exists join journalEntry
            where journalEntry.RecId == accountEntry.GeneralJournalEntry
                && journalEntry.AccountingDate == _accountingDate
                && journalEntry.FiscalCalendarPeriod == _fiscalCalendarPeriodRecId
                && journalEntry.Ledger == Ledger::current()
        exists join mainAccount
            where mainAccount.RecId == accountEntry.MainAccount
                && (mainAccount.Type == DimensionLedgerAccountType::BalanceSheet
                    || mainAccount.Type == DimensionLedgerAccountType::Asset
                    || mainAccount.Type == DimensionLedgerAccountType::Liability
                    || mainAccount.Type == DimensionLedgerAccountType::Equity
                    || (mainAccount.Type == DimensionLedgerAccountType::Common_CN && isAccountTypeCN))
        exists join transSettlement
            where transSettlement.TransRecId == accountEntry.RecId;

        return accountEntry.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalEntryHeaders</Name>
				<Source><![CDATA[
    internal static void createJournalEntryHeaders(
        Voucher _voucher,
        TransDate _accountingDate,
        AcknowledgementDate _acknowledgementDate,
        RefRecId _openingFiscalCalendarPeriodRecId,
        RefRecId _openingFiscalCalendarYearRecId,
        int _processSession,
        UTCTimeStamp _processTimeStamp)
    {
        GeneralJournalAccountEntryDetailsTmp entryDetails;
        GeneralJournalEntry journalEntry;
        LedgerPostingGeneralJournalController generalJournalController = LedgerPostingGeneralJournalController::newForGeneralLedgerCore();

        while select PostingLayer from entryDetails
            group by entryDetails.PostingLayer
            where entryDetails.ProcessSessionId == _processSession
                && entryDetails.ProcessUTCTimestamp == _processTimeStamp
        {
            journalEntry = null;
            journalEntry.SubledgerVoucher = _voucher;
            journalEntry.SubledgerVoucherDataAreaId = curExt();
            journalEntry.AccountingDate = _accountingDate;
            journalEntry.FiscalCalendarPeriod = _openingFiscalCalendarPeriodRecId;
            journalEntry.FiscalCalendarYear = _openingFiscalCalendarYearRecId;
            journalEntry.PostingLayer = entryDetails.PostingLayer;
            journalEntry.Ledger = Ledger::current();
            journalEntry.AcknowledgementDate = _acknowledgementDate == dateNull() ? _accountingDate : _acknowledgementDate;
            journalEntry.JournalNumber = NumberSeq::newGetNum(LedgerParameters::numRefGeneralJournalEntryJournalNumber()).num();

            GeneralJournalAccountEntry accountEntry;

            generalJournalController.addForUtility(journalEntry, accountEntry);
        }

        generalJournalController.transfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommonAccountType_CN</Name>
				<Source><![CDATA[
    internal static boolean isCommonAccountType_CN()
    {
        #isoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN])
                && LedgerParameters::find().CommonAccountType_CN;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>