<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsLocationLoadSumCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSLocationLoadSumCache</c> class holds cached information about the load on the
/// <c>WMSLocation</c> locations.
/// </summary>
class WmsLocationLoadSumCache
{
    const int CurrentVolumeSumKey= 1;
    const int CurrentWeightSumKey = 2;

    Map                 cachedLoadSums;
    Map                 lastUsedSumValuesMap;
    container           lastUsedKey;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToCache</Name>
				<Source><![CDATA[
    private Map addToCache(
        WMSLocationId           _wmsLocationId,
        InventLocationId        _inventLocationId,
        DataAreaId              _wmsLocationDataAreaId)
    {
        WMSLocationLoad wmsLocationLoadSummed;
        Map             sumValuesMapToInsert = new Map(Types::Integer,Types::Real);

        wmsLocationLoadSummed = this.selectWMSLocationLoadSums(_wmsLocationId, _inventLocationId, _wmsLocationDataAreaId);

        sumValuesMapToInsert.insert(CurrentVolumeSumKey, wmsLocationLoadSummed.CurrentVolumeAdjusted);
        sumValuesMapToInsert.insert(CurrentWeightSumKey, wmsLocationLoadSummed.CurrentWeightAdjusted);

        cachedLoadSums.insert(this.getKey(_wmsLocationId, _inventLocationId, _wmsLocationDataAreaId), sumValuesMapToInsert);

        return sumValuesMapToInsert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheForWMSLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the cached values for the <c>WMSLocation</c> location.
    /// </summary>
    /// <param name="_wmsLocation">
    /// The <c>WMSLocation</c> location for which cached values should be removed.
    /// </param>
    public void clearCacheForWMSLocation(WMSLocation _wmsLocation)
    {
        container key = this.getKey(_wmsLocation.wmsLocationId,_wmsLocation.InventLocationId,_wmsLocation.DataAreaId);

        cachedLoadSums.remove(key);

        //clear the last cachedValues to  cover the case where we delete and then try to find values for same key rigth after
        if (key == lastUsedKey)
        {
            this.clearLastCachedValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearEntireCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all cached values.
    /// </summary>
    public void clearEntireCache()
    {
        cachedLoadSums = new Map(Types::Container,Types::Class);
        this.clearLastCachedValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLastCachedValues</Name>
				<Source><![CDATA[
    private void clearLastCachedValues()
    {
        lastUsedSumValuesMap    = null;
        lastUsedKey             = conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current volume for a <c>WMSLocation</c> location.
    /// </summary>
    /// <param name="_wmsLocation">
    /// The <c>WMSLocation</c> location for which the current volume should be retrieved.
    /// </param>
    /// <returns>
    /// The current volume for the <c>WMSLocation</c> location.
    /// </returns>
    public WMSCurrentVolume getCurrentVolume(WMSLocation _wmsLocation)
    {
        return this.getValue(_wmsLocation.wmsLocationId,
                             _wmsLocation.InventLocationId,
                             _wmsLocation.DataAreaId,
                             CurrentVolumeSumKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current weight for a <c>WMSLocation</c> location.
    /// </summary>
    /// <param name="_wmsLocation">
    /// The <c>WMSLocation</c> location for which the current weight should be retrieved.
    /// </param>
    /// <returns>
    /// The current weight for the <c>WMSLocation</c> location.
    /// </returns>
    public WMSCurrentWeight getCurrentWeight(WMSLocation _wmsLocation)
    {
        return this.getValue(_wmsLocation.wmsLocationId,
                             _wmsLocation.InventLocationId,
                             _wmsLocation.DataAreaId,
                             CurrentWeightSumKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    private container getKey(
        WMSLocationId           _wmsLocationId,
        InventLocationId        _inventLocationId,
        DataAreaId              _wmsLocationDataAreaId)
    {
        return [_wmsLocationId,_inventLocationId,_wmsLocationDataAreaId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    private anytype getValue(
        WMSLocationId           _wmsLocationId,
        InventLocationId        _inventLocationId,
        DataAreaId              _wmsLocationDataAreaId,
        int                     _sumEntryIdentifer)
    {
        container key = this.getKey(_wmsLocationId,_inventLocationId,_wmsLocationDataAreaId);

        if ((lastUsedKey == key) && lastUsedSumValuesMap)
        {
            return lastUsedSumValuesMap.lookup(_sumEntryIdentifer);
        }

        if (!cachedLoadSums.exists(key))
        {
            lastUsedSumValuesMap = this.addToCache(_wmsLocationId,_inventLocationId,_wmsLocationDataAreaId);
        }
        else
        {
            lastUsedSumValuesMap = cachedLoadSums.lookup(key);
        }

        lastUsedKey = key;

        return lastUsedSumValuesMap.lookup(_sumEntryIdentifer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        cachedLoadSums = new Map(Types::Container,Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectWMSLocationLoadSums</Name>
				<Source><![CDATA[
    private WMSLocationLoad selectWMSLocationLoadSums(
        WMSLocationId           _wmsLocationId,
        InventLocationId        _inventLocationId,
        DataAreaId              _wmsLocationDataAreaId)
    {
        return WMSLocationLoad::selectSummedLoad(_wmsLocationId,_inventLocationId,_wmsLocationDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSLocationLoadSumCache construct()
    {
        return new WMSLocationLoadSumCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>