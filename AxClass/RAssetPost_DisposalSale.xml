<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetPost_DisposalSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetPost_DisposalSale extends RAssetPost_Disposal
{
    RAssetDisposalParameters rAssetDisposalParameters;
    RAssetAmount             rAssetAmount;
    CurrencyCode             rAssetCurrencyCode;
    CurrencyCode             currencyCode;
    LineAmount               lineAmount;
    DimensionDefault         sourceDefaultDimension;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetCreateDisposalLines</Name>
				<Source><![CDATA[
    public void assetCreateDisposalLines()
    {
        RassetDisposalValue       assetDisposalValue;
        RAssetStandards           assetStandardsLocal;
        LedgerBondClient_RU       ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();
        boolean                   defaultStandard  = rAssetStandardId == RAssetParameters::standardIdDefault();
        rAssetTrans               rassetBonusTrans;

        void addVoucherTrans(RAssetAmount                  _amount,
                             LedgerDimensionDefaultAccount _ledgerDimension,
                             LedgerDimensionDefaultAccount _offsetLedgerDimension,
                             RAssetPostValue               _postValue)
        {
            LedgerVoucherObject ledgerVoucherObject;
            boolean             switchAccounts = false;

            if (_amount)
            {
                if (ledgerBondClient)
                {
                    ledgerBondClient.addNewLogObject();
                }

                if (_postValue == RAssetPostValue::NBV ||
                    _postValue == RAssetPostValue::BalanceAcq)
                    switchAccounts = true;

                ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
                ledgerVoucherObject.parmPostingLayer(RAssetStandardTable::find(rAssetStandardId).CurrentOperationsTax);
                ledgerVoucher.addTrans(LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        this.getPostingType(_postValue, true),
                        LedgerDimensionFacade::serviceCreateLedgerDimension(switchAccounts ? _offsetLedgerDimension : _ledgerDimension, this.defaultDimension(transDate)),
                        currencyCode,
                        abs(_amount),
                        CurrencyExchangeHelper::newExchangeDate(Ledger::current(), transDate)));
                ledgerVoucher.addTrans(LedgerVoucherTransObject::newTransactionAmountDefault(
                        ledgerVoucherObject,
                        this.getPostingType(_postValue, false),
                        LedgerDimensionFacade::serviceCreateLedgerDimension(switchAccounts ? _ledgerDimension : _offsetLedgerDimension, this.defaultDimension(transDate)),
                        currencyCode,
                        -abs(_amount),
                        CurrencyExchangeHelper::newExchangeDate(Ledger::current(), transDate)));

                if (ledgerBondClient)
                {
                    ledgerBondClient.bondLastVRef2CurrentLog();
                    ledgerBondClient.removeCurrentLogObject();
                }
            }
        }

        assetStandardsLocal = RAssetStandards::find(rAssetTable.AccountNum, rAssetStandardId);

        rAssetCurrencyCode = assetStandardsLocal.CurrencyCode;
        lineAmount         = CurrencyExchangeHelper::curAmount2CurAmount(lineAmount, currencyCode, rAssetCurrencyCode, transDate);

        if (! defaultStandard && custInvoiceTrans.RecId)
        {
            addVoucherTrans(lineAmount,
                            assetStandardsLocal.assetLedgerDimension(rAssetStandardId,
                                                                     assetStandardsLocal.postingProfile(transDate),
                                                                     RAssetTransType::DisposalSale),
                            assetStandardsLocal.assetOffsetLedgerDimension(rAssetStandardId,
                                                                     assetStandardsLocal.postingProfile(transDate),
                                                                     RAssetTransType::DisposalSale,
                                                                     transDate),
                            RAssetPostValue::SaleValue);
        }

        while select rAssetDisposalParameters
            group by PostValue, ValueType
            where rAssetDisposalParameters.SoldScrap      == RAssetDisposalType::Sold &&
                  rAssetDisposalParameters.PostingProfile == assetStandardsLocal.postingProfile(transDate)
        {
            rAssetAmount = RassetDisposalValue::postValue(rAssetTable.AccountNum,
                                                          rAssetStandardId,
                                                          rAssetDisposalParameters.PostValue,
                                                          lineAmount,
                                                          transDate);

            if (defaultStandard)
            {
                currencyCode = (RAssetJournal::currencyBase() ? CompanyInfoHelper::standardCurrency() : currencyCode);
            }

            rAssetAmount = CurrencyExchangeHelper::curAmount2CurAmount(rAssetAmount, rAssetCurrencyCode, currencyCode, transDate);

            assetDisposalValue = new RassetDisposalValue(assetStandardsLocal.postingProfile(transDate),
                                                         RAssetDisposalType::Sold,
                                                         rAssetDisposalParameters.PostValue,
                                                         rAssetTable.AccountNum,
                                                         rAssetDisposalParameters.ValueType);

            if (assetDisposalValue.postThis(rAssetAmount, rAssetStandardId))
            {

                if (rAssetDisposalParameters.PostValue == RAssetPostValue::DepBonusRecovery)
                {
                    while select  rassetBonusTrans
                    where   rassetBonusTrans.AccountNum       == rAssetTable.AccountNum &&
                            rassetBonusTrans.AssetStandardId  == rAssetStandardId &&
                            rassetBonusTrans.PostingType      == RAssetPostingType::DepreciationBonus &&
                            !rassetBonusTrans.StornoRecId
                    {
                        addVoucherTrans(rassetBonusTrans.AmountCur,
                                        rassetBonusTrans.LedgerDimension,
                                        assetDisposalValue.offsetLedgerDimension(),
                                        rAssetDisposalParameters.PostValue);
                    }
                }
                else
                {
                    addVoucherTrans(rAssetAmount,
                                    assetDisposalValue.ledgerDimension(),
                                    assetDisposalValue.offsetLedgerDimension(),
                                    rAssetDisposalParameters.PostValue);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBonusRecoveryFromLedgerJournal</Name>
				<Source><![CDATA[
    private void createBonusRecoveryFromLedgerJournal()
    {
            RAssetTrans                 bonusRecoveryTrans;
            LedgerJournalTrans_RAsset   bonuslTrans_RAsset, tmpTrans_RAsset;
            LedgerJournalTrans          bonuslTrans, tmpTrans;
            ;
            tmpTrans        = ledgerJournalTrans;
            tmpTrans_RAsset = ledgerJournalTrans_RAsset;
    
            while select bonuslTrans_RAsset
            where   bonuslTrans_RAsset.ToFromRecId == ledgerJournalTrans.RecId &&
                    bonuslTrans_RAsset.DepreciationBonusId &&
                    bonuslTrans_RAsset.TransType == RAssetTransType::Depreciation
                    join bonuslTrans where bonuslTrans_RAsset.RefRecId == bonuslTrans.RecId
            {
    
                ledgerJournalTrans                          = bonuslTrans;
                ledgerJournalTrans_RAsset                   = bonuslTrans_RAsset;
    
                bonusRecoveryTrans                          = this.initFromLedgerJournalTrans();
                bonusRecoveryTrans.PostingType              = RAssetPostingType::DepreciationBonusRecovery;
                bonusRecoveryTrans.AmountCur                = bonuslTrans.amount();
                bonusRecoveryTrans.DepreciationBonusCost    = -bonusRecoveryTrans.AmountCur;
                bonusRecoveryTrans.AmountMST                = CurrencyExchangeHelper::mstAmount(rAssetTrans.AmountCur, rAssetTrans.CurrencyCode, rAssetTrans.TransDate);
                bonusRecoveryTrans.Txt                      = bonuslTrans.Txt;
                bonusRecoveryTrans.Open                     = NoYes::Yes;
                bonusRecoveryTrans.Voucher                  = ledgerVoucher.lastVoucher();
                bonusRecoveryTrans.insert();
    
                this.createTransLink(bonusRecoveryTrans);
            }
            ledgerJournalTrans          = tmpTrans;
            ledgerJournalTrans_RAsset   = tmpTrans_RAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBonusRecoveryFromRAssetBonusTrans</Name>
				<Source><![CDATA[
    private void createBonusRecoveryFromRAssetBonusTrans()
    {
            RAssetStandards             assetStandardsLocal;
            RAssetTrans                 bonusRecoveryTrans;
            RAssetDisposalParameters    disposalParameter;
            RAssetTrans                 rassetBonusTrans;
            CustInvoiceTrans_RU         custInvoiceTrans_RU;

            custInvoiceTrans_RU = custInvoiceTrans.custInvoiceTrans_RU();
            if (RassetDisposalValue::postValue(custInvoiceTrans_RU.AssetId_RU, rAssetStandardId, RAssetPostValue::DepBonusRecovery, 0, transDate))
            {
                while select  rassetBonusTrans
                where   rassetBonusTrans.AccountNum       == custInvoiceTrans_RU.AssetId_RU &&
                        rassetBonusTrans.AssetStandardId  == rAssetStandardId &&
                        rassetBonusTrans.PostingType      == RAssetPostingType::DepreciationBonus &&
                        !rassetBonusTrans.StornoRecId
                {
                    bonusRecoveryTrans              = this.initFromCustInvoiceTrans();
                    bonusRecoveryTrans.PostingType  = RAssetPostingType::DepreciationBonusRecovery;
                    assetStandardsLocal             = RAssetStandards::find(custInvoiceTrans_RU.AssetId_RU, rAssetStandardId);


                    disposalParameter = RassetDisposalValue::findDisposalParameter( rAssetTable.AccountNum, rAssetStandardId, assetStandardsLocal.postingProfile(transDate),RAssetDisposalType::Sold,RAssetPostValue::DepBonusRecovery, false);

                    bonusRecoveryTrans.AmountCur             = -rassetBonusTrans.AmountCur;
                    bonusRecoveryTrans.DepreciationBonusCost = -bonusRecoveryTrans.AmountCur;
                    bonusRecoveryTrans.DeprBonusId           = rassetBonusTrans.DeprBonusId;
                    bonusRecoveryTrans.AmountMST             = CurrencyExchangeHelper::mstAmount(rAssetTrans.AmountCur, rAssetTrans.CurrencyCode, rAssetTrans.TransDate);
                    bonusRecoveryTrans.LedgerDimension       = rassetBonusTrans.LedgerDimension;
                    bonusRecoveryTrans.OffsetLedgerDimension = disposalParameter.OffsetLedgerDimension;
                    bonusRecoveryTrans.AssetTransType        = RAssetTransType::Depreciation;
                    bonusRecoveryTrans.Txt                   = enum2str(RAssetPostingType::DepreciationBonusRecovery);
                    bonusRecoveryTrans.Open                  = NoYes::Yes;
                    bonusRecoveryTrans.Voucher               = ledgerVoucher.lastVoucher();
                    bonusRecoveryTrans.insert();
                }
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates FA transaction and links depreciation bonus recovery
    ///    transactions to the created FA transaction.
    /// </summary>
    protected void createTrans()
    {
        RAssetTrans bonusRecoveryTrans;

        super();
        if (rassetTrans)
        {
            while select forupdate bonusRecoveryTrans
                where bonusRecoveryTrans.PostingType     == RAssetPostingType::DepreciationBonusRecovery &&
                      bonusRecoveryTrans.AssetTransType  == RAssetTransType::Depreciation &&
                      bonusRecoveryTrans.Voucher         == rassetTrans.Voucher &&
                      bonusRecoveryTrans.AssetStandardId == rassetTrans.AssetStandardId &&
                      bonusRecoveryTrans.AccountNum      == rassetTrans.AccountNum &&
                      !bonusRecoveryTrans.LinkedTransRecId && !bonusRecoveryTrans.StornoRecId
            {
                bonusRecoveryTrans.LinkedTransRecId = rassetTrans.RecId;
                bonusRecoveryTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    private DimensionDefault defaultDimension(TransDate _transDate)
    {
        return LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(sourceDefaultDimension, rAssetStandards.defaultDimension(_transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type for the posting value type.
    /// </summary>
    /// <param name="_postValue">
    /// The posting value type.
    /// </param>
    /// <param name="_debit">
    /// true, if it is necessary to define the posting type for the debit side of the General Ledger transaction; otherwise, false - for the credit side.
    /// </param>
    /// <returns>
    /// The ledger posting type for the General Ledger transaction.
    /// </returns>
    public LedgerPostingType getPostingType(RAssetPostValue  _postValue,
                                            boolean          _debit)
    {
        switch (_postValue)
        {
            case RAssetPostValue::SaleValue:
                return LedgerPostingType::LedgerJournal;

            case RAssetPostValue::Gain:
                return LedgerPostingType::LedgerJournal;

            case RAssetPostValue::NBV:
                if (_debit)
                    return LedgerPostingType::LedgerJournal;
                break;
        }

        if (_debit)
            return LedgerPostingType::FixedAssetsDebit_RU;
        return LedgerPostingType::FixedAssetsCredit_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    public RAssetTrans initFromLedgerJournalTrans()
    {
        RAssetSumCalc rassetSumTrans;
        ;
        rAssetTrans = super();
        rassetSumTrans = RAssetSumCalc_Trans::newAssetPeriod(ledgerJournalTrans_RAsset.AssetId,
                                                             ledgerJournalTrans_RAsset.StandardId,
                                                             ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans));
        rAssetTrans.Txt       = '';
        rAssetTrans.AmountCur = -rassetSumTrans.netBookValue();
        rAssetTrans.AmountMST = CurrencyExchangeHelper::mstAmount(rAssetTrans.AmountCur, rAssetTrans.CurrencyCode, transDate);
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lossAmount</Name>
				<Source><![CDATA[
    public RAssetAmount lossAmount()
    {
        RAssetAmount lossAmount;
        ;
        switch (common.TableId)
        {
            case tableNum(CustInvoiceTrans):
                lossAmount = custInvoiceTrans.LineAmount;
                lossAmount += this.markupAmount();
                lossAmount  = CurrencyExchangeHelper::curAmount2CurAmount(lossAmount, custInvoiceTrans.CurrencyCode, rAssetStandards.CurrencyCode, transDate);
                break;

            case tableNum(LedgerJournalTrans):
                lossAmount   = CurrencyExchangeHelper::curAmount2CurAmount(ledgerJournalTrans_RAsset.sumDisposable(ledgerJournalTrans), ledgerJournalTrans.CurrencyCode, rAssetStandards.CurrencyCode, transDate);
                break;
        }
        lossAmount = RassetDisposalValue::postValue(rAssetStandards.AssetId,
                                                    rAssetStandards.AssetStandardId,
                                                    RAssetPostValue::Gain,
                                                    lossAmount,
                                                    transDate);

        return lossAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    private AmountCur markupAmount()
    {
        MarkupTrans  markupTrans;

        select sum(CustVendPosted_RU) from markupTrans
            where markupTrans.TransTableId == custInvoiceTrans.TableId &&
                  markupTrans.TransRecId   == custInvoiceTrans.RecId;
        return markupTrans.CustVendPosted_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        RAssetStatusType        rAssetStatusType;
        RAssetId                rAssetId;
        RAssetStandardIdDefault standardIdDefault = RAssetParameters::find().StandardIdDefault;

        if (custInvoiceTrans)
        {
            rAssetId               = custInvoiceTrans.custInvoiceTrans_RU().AssetId_RU;
            if (! rAssetId)
                return;

            sourceDefaultDimension = custInvoiceTrans.DefaultDimension;

            rAssetTable     = RAssetTable::find(rAssetId, true);
            rAssetStandards = RAssetStandards::find(rAssetId, rAssetStandardId, true);

            lineAmount      = custInvoiceTrans.LineAmount;
            lineAmount     += this.markupAmount();

            if (rAssetStandardId == standardIdDefault)
            {
                currencyCode = custInvoiceTrans.CurrencyCode;
            }
            else
            {
                currencyCode = rAssetStandards.CurrencyCode;
                lineAmount   = CurrencyExchangeHelper::curAmount2CurAmount(lineAmount, custInvoiceTrans.CurrencyCode, currencyCode, transDate);
            }

            ttsbegin;

            rAssetStatusType = RAssetStatusType::construct(rAssetTable);

            if (rAssetStatusType.updateLedger())
            {
                this.assetCreateDisposalLines();
                rAssetTable.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the main logic of the class.
    /// </summary>
    public void run()
    {
        switch (common.TableId)
        {
            case tablenum(LedgerJournalTrans):
                this.createBonusRecoveryFromLedgerJournal();
                break;
            case tablenum(CustInvoiceTrans):
                this.createBonusRecoveryFromRAssetBonusTrans();
                break;
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        RAssetStandards assetStandardsLocal;
        ;

        if (! rAssetTable)
        {
            lineAmount         = ledgerJournalTrans.amount();
            currencyCode       = ledgerJournalTrans.CurrencyCode;
            rAssetTable        = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);
        }

        if (! rAssetStandards)
            rAssetStandards = RAssetStandards::find(ledgerJournalTrans_RAsset.AssetId, ledgerJournalTrans_RAsset.StandardId, true);

        rAssetCurrencyCode = rAssetStandards.CurrencyCode;
        lineAmount = CurrencyExchangeHelper::curAmount2CurAmount(lineAmount, currencyCode, rAssetCurrencyCode, transDate);

        rAssetStandards.SaleValue        = lineAmount;
        rAssetStandards.DisposalDate     = transDate;

        rAssetStandards.doUpdate();
        this.createDeferrals(RassetDeferralsType::Disposal);
        select firstonly assetStandardsLocal
            where assetStandardsLocal.AssetId == rAssetTable.AccountNum &&
                  ! assetStandardsLocal.DisposalDate;

        if (! assetStandardsLocal)
        {
            rAssetTable.Status = RAssetStatus::Sold;
            rAssetTable.doUpdate();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
