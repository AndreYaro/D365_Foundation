<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvVisibilityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The base class that controls the visibility of expense fields based on setup and status.
/// </summary>
abstract class TrvVisibilityManager
{
    protected Common trvExpenseRecord;
    protected FormRun trvExpenseForm;
    protected str dataSourceName;
    protected container trvAdminCustomFieldsContainer;
    private ExpenseIVisibilityManager expenseVisibilityManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFormInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the instance of the calling form for the class.
    /// </summary>
    /// <param name = "_form">
    /// An instance of the calling form.
    /// </param>
    /// <returns>
    /// An instance of the calling form.
    /// </returns>
    public FormRun parmFormInstance(FormRun _form = trvExpenseForm)
    {
        trvExpenseForm = _form;
        return trvExpenseForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrvExpenseRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets an instance of the currrent calling entity for the class.
    /// </summary>
    /// <param name = "_trvExpenseRecord">
    /// The current record instance of the calling entity.
    /// </param>
    /// <returns>
    /// The current record instance of the calling entity.
    /// </returns>
    public Common parmTrvExpenseRecord(Common _trvExpenseRecord = trvExpenseRecord)
    {
        trvExpenseRecord = _trvExpenseRecord;
        return trvExpenseRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the name of the datasource to set field vibilities on for the class.
    /// </summary>
    /// <param name = "_dataSourceName">
    /// The name of the dataSource to set field visibilities on the form.
    /// </param>
    /// <returns>
    /// The name of the dataSource to set field visibilities on the form.
    /// </returns>
    public str parmDataSourceName(str _dataSourceName = dataSourceName)
    {
        dataSourceName = _dataSourceName;
        return dataSourceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenseVisibilityManager</Name>
				<Source><![CDATA[
    public ExpenseIVisibilityManager parmExpenseVisibilityManager(ExpenseIVisibilityManager _expenseVisibilityManager = expenseVisibilityManager)
    {
        expenseVisibilityManager = _expenseVisibilityManager;

        return expenseVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForAdminCustomFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility on the fields of the datasource.
    /// </summary>
    /// <param name = "_trvAdminCustomFieldsContainer">
    /// A container of <c>TrvAdminCustomFields</c> records for setting visibility.
    /// </param>
    /// <param name = "_formDataSource">
    /// An instance of the datasource on the calling form object.
    /// </param>
    /// <param name = "_isEditable">
    /// Specifies if the datasource is editable or read only.
    /// </param>
    void setVisibilityForAdminCustomFields(container _trvAdminCustomFieldsContainer, FormDataSource _formDataSource, boolean _isEditable = true)
    {
        FormDataObject formDataObject;
        TrvFieldVisibility trvFieldVisibility;
        TableId trvExpenseRecordTableId = _formDataSource.table();
        TrvAdminCustomFields trvAdminCustomFields;
        int rowCount;

        // Set the visibility on the form controls using the existing approach if the new <c>ExpenseIVisibilityManager</c> is not implemented
        // where as if the <c>ExpenseIVisibilityManager</c> is implemented set the form controls visibility by reading into the new visibility <c>ExpenseFieldsVisibility</c> setup.
        
        if (!this.parmExpenseVisibilityManager())
        {
            rowCount =  conlen(_trvAdminCustomFieldsContainer);

            // When setting visibilities we assume that if a control is hidden, it is irrelevant to the expense type and its visibility is not overriden by admin custom fields.
            for (int i = 1; i <= rowCount; i++)
            {
                trvAdminCustomFields = TrvAdminCustomFieldsCacheHelper::convertContainerToTableBuffer(_trvAdminCustomFieldsContainer, i);

                // Skip further execution if field is not on the current datasource table.
                if (trvAdminCustomFields.RefTableId != trvExpenseRecordTableId)
                {
                    continue;
                }

                formDataObject = _formDataSource.object(trvAdminCustomFields.RefFieldId);
                if (formDataObject)
                {
                    // When a field is displayed but the display setting is do not display, override visibility.
                    if ((formDataObject.visible() && trvAdminCustomFields.Visibility == TrvFieldVisibility::DoNotDisplay))
                    {
                        formDataObject.visible(false);
                    }
                    // When a field is editable but the display setting is read only, override editability.
                    else if ((formDataObject.allowEdit() && trvAdminCustomFields.Visibility == TrvFieldVisibility::ReadOnly))
                    {
                        formDataObject.allowEdit(false);
                    }
                }
                else if (trvAdminCustomFields.MethodName)
                {
                    this.setDisplayEditMethodVisibilitiesOnFormControl(trvAdminCustomFields.MethodName, trvAdminCustomFields.Visibility);
                }
            }
        }
        else
        {
            this.parmExpenseVisibilityManager().setVisibilityForExpenseFieldsConsideringRequiredMode(trvExpenseRecordTableId, _formDataSource, true);
        }

        // Alters editability of all datasources on the form based on editability of expense report/line.
        if (_isEditable != _formDataSource.allowEdit())
        {
            this.setDatasourceEditability(_isEditable);
        }

        // Call form method to update dimension control visibility as data source field visibility is not working.
        if (trvExpenseForm is TrvIDimensionEnabled)
        {
            TrvIDimensionEnabled dimensionForm = trvExpenseForm as TrvIDimensionEnabled;
            dimensionForm.setDimensionControlVisibility();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasourceEditability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets editability for all datasource of the form.
    /// </summary>
    /// <param name = "_isEditable">
    /// Specifies if the datasource is editable or read only.
    /// </param>
    private void setDatasourceEditability(boolean _isEditable)
    {
        int                 dataSourceCount, counter;
        FormDatasource      formDatasource;

        dataSourceCount = trvExpenseForm.dataSourceCount();

        for (counter = 0; counter < dataSourceCount; counter++)
        {
            formDatasource = trvExpenseForm.dataSource(counter);
            formDatasource.allowEdit(_isEditable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayEditMethodVisibilitiesOnFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibilities for controls on the form.
    /// </summary>
    /// <param name = "_formControlName">
    /// The name of the formcontrol for setting visibility.
    /// </param>
    /// <param name = "_trvFieldVisibility">
    /// determines if the object is visible and editable.
    /// </param>
    /// <param name = "_overrideVisibility">
    /// Specifies if the controls visibility is overriden, irrespective of the current visibility state.
    /// </param>
    /// <param name = "_allowEdit">
    /// Specifies if the control can be editable or not. Defaulted to true.
    /// </param>
    void setDisplayEditMethodVisibilitiesOnFormControl(str _formControlName, TrvFieldVisibility _trvFieldVisibility, boolean _overrideVisibility = false,
                                                       boolean _allowEdit = true)
    {
        FormDesign      formDesign;
        FormControl     formControl;

        formDesign = trvExpenseForm.design();

        // We assume that the form control would be named the same as the display/edit method, the constraint helps us efficiently find the form control.
        formControl = formDesign.controlName(_formControlName);

        // Look for any split related controls.
        if (!formControl)
        {
            _formControlName = strfmt("%1%2", "Split", _formControlName);
            formControl = formDesign.controlName(_formControlName);
        }

        if (formControl)
        {
            // When setting visibility for field groups we call override to show/hide to reset
            if (_overrideVisibility)
            {
                formControl.visible(_trvFieldVisibility != TrvFieldVisibility::DoNotDisplay);
                formControl.allowEdit((_trvFieldVisibility != TrvFieldVisibility::ReadOnly) && _allowEdit);
            }
            else
            {
                // When a field is displayed but the display setting is do not display, override visibility.
                if (formControl.visible() && _trvFieldVisibility == TrvFieldVisibility::DoNotDisplay)
                {
                    formControl.visible(false);
                }
                // When a field is editable but the display setting is read only, override editability.
                else if (formControl.allowEdit() && _trvFieldVisibility == TrvFieldVisibility::ReadOnly)
                {
                    formControl.allowEdit(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldVisibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of fields based on the setup.
    /// </summary>
    /// <param name = "_isVisible">
    /// Determines if we show or hide fields.
    /// </param>
    abstract void setFieldVisibilities(boolean _isVisible = true)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>