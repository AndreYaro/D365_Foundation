<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedRegisterSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TradeNonStockedRegisterSplit   extends RunBase
{
    TradeNonStockedRegisterTmp      tradeNonStockedRegisterTmp;
    InventQty                       splitQty;
    DialogField                     dialogSplitQty;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        TradeNonStockedRegisterTmp,
        SplitQty
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogField     qty;
        DialogRunbase   dialog = super();

        qty             = dialog.addFieldValue(extendedtypestr(UnitQty), tradeNonStockedRegisterTmp.Quantity, "@SYS14578","@SYS14578");
        qty.active(false);

        dialogSplitQty  = dialog.addFieldValue(extendedtypestr(UnitQty), splitQty, "@SYS19602", "@SYS19602");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        splitQty   = dialogSplitQty.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitQty</Name>
				<Source><![CDATA[
    InventQty parmSplitQty(InventQty _splitQty = splitQty)
    {
        splitQty = _splitQty;
        return splitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedRegisterTmp</Name>
				<Source><![CDATA[
    TradeNonStockedRegisterTmp parmTradeNonStockedRegisterTmp(TradeNonStockedRegisterTmp _tradeNonStockedRegisterTmp = tradeNonStockedRegisterTmp)
    {
        tradeNonStockedRegisterTmp = _tradeNonStockedRegisterTmp;
        return tradeNonStockedRegisterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        setprefix(TradeNonStockedRegisterSplit::description());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version      = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the specified quantity can split.
    /// </summary>
    /// <param name="_calledFrom">
    ///    The object from which it is called from.
    /// </param>
    /// <returns>
    ///    true if the split quantity is valid; otherwise, false.
    /// </returns>
    boolean validate(Object _calledFrom = null)
    {
        return tradeNonStockedRegisterTmp && splitQty < tradeNonStockedRegisterTmp.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static TradeNonStockedRegisterSplit construct()
    {
        return new TradeNonStockedRegisterSplit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description for the dialog.
    /// </summary>
    /// <returns>
    /// The description for the dialog.
    /// </returns>
    static ClassDescription description()
    {
        return "@SYS15396";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        TradeNonStockedRegisterSplit    tradeNonStockedRegisterSplit;
        TradeNonStockedRegisterTmp      tradeNonStockedRegisterTmp;
        Object                          callerForm;
        FormRun                         fr;

        if (! _args.caller() || ! _args.dataset())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        switch (_args.record().TableId)
        {
            case (tablenum(TradeNonStockedRegisterTmp)) :
                tradeNonStockedRegisterTmp      = _args.record();
                tradeNonStockedRegisterSplit    = TradeNonStockedRegisterSplit::newTradeNonStockedRegisterSplit(tradeNonStockedRegisterTmp);

                if (!tradeNonStockedRegisterSplit.prompt())
                {
                    return;
                }

                tradeNonStockedRegisterSplit.runOperation();

                callerForm = _args.caller();
                fr  = callerForm;

                callerForm.createPendingQuantityUpdated(tradeNonStockedRegisterTmp, tradeNonStockedRegisterSplit.parmSplitQty());

                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTradeNonStockedRegisterSplit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of <c>TradeNonStockedRegisterSplit</c> class.
    /// </summary>
    /// <param name="_tradeNonStockedRegisterTmp">
    ///    The <c>TradeNonStockedRegisterTmp</c> record to pass to the instance of the
    ///    <c>TradeNonStockedRegisterSplit</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>TradeNonStockedRegisterSplit</c> class.
    /// </returns>
    public static TradeNonStockedRegisterSplit newTradeNonStockedRegisterSplit(TradeNonStockedRegisterTmp _tradeNonStockedRegisterTmp)
    {
        TradeNonStockedRegisterSplit    tradeNonStockedRegisterSplit;

        tradeNonStockedRegisterSplit    = TradeNonStockedRegisterSplit::construct();
        tradeNonStockedRegisterSplit.getLast();
        tradeNonStockedRegisterSplit.parmtradeNonStockedRegisterTmp(_tradeNonStockedRegisterTmp);
        tradeNonStockedRegisterSplit.parmSplitQty(_tradeNonStockedRegisterTmp.quantity >= 0 ? 1 : -1);
        return tradeNonStockedRegisterSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>