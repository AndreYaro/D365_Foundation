<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPostJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxPostJournal extends TaxPost
{
    LedgerJournalTrans          ledgerJournalTransSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPostingReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a reference to a <c>LedgerPostingController</c> object.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <param name="_voucher">
    /// The voucher to use when adding the reference.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date to use when adding the reference.
    /// </param>
    /// <param name="_sourceTableId">
    /// The source table ID to use when adding the reference.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record ID to use when adding the reference.
    /// </param>
    protected void addPostingReference(
        LedgerPostingController _ledgerPostingController,
        Voucher _voucher,
        TransDate _transDate,
        TableId _sourceTableId = 0,
        RecId _sourceRecId = 0)
    {
        DocumentNum docNum;
        DocumentDate docDate;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerVoucherObject ledgerVoucherObject;

        if (_sourceRecId != 0)
        {
            CurrentOperationsTax operationTax = CurrentOperationsTax::Current;
            switch (_sourceTableId)
            {
                case tableNum(LedgerJournalTrans):
                    ledgerJournalTrans = LedgerJournalTrans::findRecId(_sourceRecId, false);
                    docNum = ledgerJournalTrans.DocumentNum;
                    docDate = ledgerJournalTrans.DocumentDate;
                    operationTax = ledgerJournalTrans.ledgerJournalTable().CurrentOperationsTax;
                    break;
                default:
                    break;
            }

            ledgerVoucherObject = LedgerVoucherObject::newVoucher(
                _voucher,
                _transDate,
                SysModule::Ledger,
                LedgerTransType::None,
                NoYes::No,
                operationTax,
                docNum,
                docDate);

            if (FinTagConfiguration::isFinTagConfigurationSet(ledgerJournalTrans.Company) && TaxPostJournalFinTagFlight::instance().isEnabled())
            {
                if (ledgerJournalTrans && ledgerJournalTrans.FinTag)
                {
                    ledgerVoucherObject.parmFinTag(ledgerJournalTrans.FinTag);
                }
            }

            if (ledgerJournalTrans && ledgerJournalTrans.correct())
            {
                ledgerVoucherObject.parmCorrection(true);
            }

            _ledgerPostingController.addReference(ledgerVoucherObject);
        }
        else
        {
            super(
                _ledgerPostingController,
                _voucher,
                _transDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowTaxUncommittedDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the tax posting will delete the <c>TaxUncommitted</c> records.
    /// </summary>
    /// <returns>
    ///    true if tax posting will delete the <c>TaxUncommitted</c> records; otherwise, false.
    /// </returns>
    protected boolean allowTaxUncommittedDelete()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChargeBePostedByTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the sales tax charge be posted will be posted to be tax.
    /// </summary>
    /// <returns>
    ///    true if the tax will post the sales tax charge; false if the transaction will post the sales tax
    ///    charge.
    /// </returns>
    protected boolean canChargeBePostedByTax()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canFindPostingReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if we can find a posting reference by given arguments.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <param name="_voucher">
    /// The voucher to use when finding the reference.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date to use when finding the reference.
    /// </param>
    /// <returns>
    /// True if the posting reference can be found. False otherwise.
    /// </returns>
    protected boolean canFindPostingReference(LedgerPostingController _ledgerPostingController,
                                              Voucher _voucher,
                                              TransDate _transDate)
    {
        boolean didFindReference = false;

        // If the journal configuration for New voucher is set to "One voucher only" we return false.
        if (!this.isOneVoucherJournal(_ledgerPostingController.getJournal()))
        {
            didFindReference = super(_ledgerPostingController, _voucher, _transDate);
        }

        return didFindReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the tax regulation records when posting.
    /// </summary>
    /// <param name="_companyToPost">
    ///    The company to post; optional.
    /// </param>
    protected void deleteTaxRegulation(SelectableDataArea _companyToPost = curext())
    {
        TaxWorkRegulation           taxWorkRegulation;
        TaxUncommitted              taxUncommitted;

        if (taxRegulationExist)
        {
            // since the adjustments for the journals are at the line level
            // we can delete all adjustments for those TaxUncommitted records
            // that were posted to TaxTrans.
            delete_from taxWorkRegulation
            exists join RecId from taxUncommitted
            where taxUncommitted.HeadingTableId == taxableDocument.getSourceHeader().TableId &&
                  taxUncommitted.HeadingRecId == taxableDocument.getSourceHeader().RecId &&
                  taxUncommitted.Company        == _companyToPost &&
                  taxUncommitted.TaxOrigin      != TaxOrigin::TaxReversed &&
                  taxWorkRegulation.HeadingTableId == taxUncommitted.SourceTableId &&
                  taxWorkRegulation.HeadingRecId == taxUncommitted.SourceRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the initialization class as an object.
    /// </summary>
    /// <returns>
    /// The initialization class.
    /// </returns>
    /// <remarks>
    /// The initialization class is of a different type for each subclass.
    /// </remarks>
    protected Object getInitializationClass()
    {
        return taxableDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the original document ID.
    /// </summary>
    /// <returns>
    ///    The original record ID of the transaction header.
    /// </returns>
    /// <remarks>
    ///    Parenting of tax lines sometimes changes during posting. This method will return the original
    ///    document ID.
    /// </remarks>
    protected RefRecId getOriginalHeadingRecId()
    {
        LedgerJournalTaxDocument ledgerJournalTaxDocument;

        ledgerJournalTaxDocument = taxableDocument as LedgerJournalTaxDocument;

        if (ledgerJournalTaxDocument.parmIntercompanyJournal())
        {
            changecompany (ledgerJournalTaxDocument.getOriginalCompany())
            {
                return LedgerJournalTable::find(ledgerJournalTaxDocument.getOriginalJournalNum(), false).RecId;
            }
        }
        else
        {
            return taxableDocument.getSourceHeader().RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the original transaction heading table ID.
    /// </summary>
    /// <returns>
    ///    The original Table Id of the transaction header.
    /// </returns>
    /// <remarks>
    ///    Parenting of tax lines sometimes changes during posting.  This method will
    ///    return the original transaction heading table id.
    /// </remarks>
    protected RefTableId getOriginalHeadingTableId()
    {
        return taxableDocument.getSourceHeader().TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the document ID.
    /// </summary>
    /// <returns>
    ///    The record ID of the transaction header.
    /// </returns>
    /// <remarks>
    ///    Parenting of tax lines sometimes changes during posting. For the journals, the parent does not
    ///    change.
    /// </remarks>
    RefRecId headingRecId()
    {
        return this.getOriginalHeadingRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction heading table ID.
    /// </summary>
    /// <returns>
    ///    The Table Id of the transaction header.
    /// </returns>
    /// <remarks>
    ///    Parenting of tax lines sometimes changes during posting.  For the Journals,
    ///    the parent does not change.
    /// </remarks>
    RefTableId headingTableId()
    {
        return this.getOriginalHeadingTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOneVoucherJournal</Name>
				<Source><![CDATA[
    private boolean isOneVoucherJournal(LedgerVoucher _journal)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalName ledgerJournalName;

        select firstonly NewVoucher from ledgerJournalName
        exists join ledgerJournalTable
            where   ledgerJournalTable.JournalNum == _journal.parmJournalNumber() &&
                    ledgerJournalName.JournalName == ledgerJournalTable.JournalName;

        return NewVoucher::OneVoucher == ledgerJournalName.NewVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNum</Name>
				<Source><![CDATA[
    LedgerJournalId journalNum()
    {
        LedgerJournalTable ledgerJournalTable;

        ledgerJournalTable = taxableDocument.getSourceHeader();

        return ledgerJournalTable.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(NoYes              _post,
             Object                    _initializationClass,
             TmpTaxWorkTrans           _tmpTaxWorkTrans = null)
    {
        super();

        taxableDocument = _initializationClass as TaxableDocument;
        if (taxableDocument == null)
        {
            throw error("@SYS95118");
        }

        post                 = _post;
        taxWorkTrans         = _tmpTaxWorkTrans;

        taxModuleType        = TaxModuleType::Voucher;

        headingTableId       = taxableDocument.getJournalizedDocument().TableId;
        headingRecId         = taxableDocument.getJournalizedDocument().RecId;
        origHeadingTableId   = taxableDocument.getSourceHeader().TableId;
        origHeadingRecId     = taxableDocument.getSourceHeader().RecId;

        if (!headingTableId || !headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (! this.checkParameters())
                throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideVoucherOnPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the posting should override the voucher when posting to the <c>TaxTrans</c>
    ///    table.
    /// </summary>
    /// <returns>
    ///    true if posting should override the voucher; otherwise, false.
    /// </returns>
    protected boolean overrideVoucherOnPost()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post(LedgerPostingController _ledgerPostingController,
                        TaxTrans                _taxTrans,
                        TaxAmount               _taxAmount,
                        TaxAmount               _chargeAmount,
                        CurrencyExchangeHelper  _exchRateHelper,
                        LedgerDimensionAccount  _ledgerDimension,
                        LedgerDimensionAccount  _operationLedgerDimension,
                        LedgerDimensionAccount  _taxOffsetUseTaxLedgerDimension,
                        LedgerDetailLevel       _ledgerDetailLevel  = LedgerDetailLevel::AsDefault,
                        ProjLedger              _projLedger = null
    ,LedgerDimensionAccount _offsetLedgerDimension = 0,
                        AmountMSTSecondary      _amountMSTSecondary    = 0
    )
    {
        ProjLedger          projLedger;
        LedgerJournalTrans  ledgerJournalTrans;
        // <GEEHU>
        TaxLedgerAccountGroup           taxLedgerAccountGroup;
        LedgerDimensionAccount          ledgerDimension;
        boolean                         isContinuousHU;
        DimensionDefault                dimensionDefault;
        // </GEEHU>
        // <GEERU>
        LedgerDimensionAccount          offsetLedgerDimension;
        // </GEERU>

        // <GEERU>
        offsetLedgerDimension = _offsetLedgerDimension;
        if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(TaxTrans_RU)))
        {
            if (prmisDefault(_offsetLedgerDimension))
            {
                offsetLedgerDimension = _taxTrans.taxTrans_RU().OffsetLedgerDimension_RU;
            }
        }
        // </GEERU>

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(_taxTrans.SourceRecId, false);

            // Check if this tax is related to a project transaction?
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Project ||
                ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Project)
            {
                projLedger = ProjLedger::newLedgerJournalTax(ledgerJournalTrans);
            }
        }

        // Initial tax transaction for Hungary requires that the deferred tax accounts be used. On the
        // VAT Due Date, the transaction gets reversed out of the deferred account and placed into the
        // Sales Tax account. The ledger dimension for the original transaction has to reflect the deferred
        // account value
        // <GEEHU>
        isContinuousHU = TaxContinuousHUHelper::isTransactionContinuousHU(_taxTrans.TaxItemGroup);
        if (isContinuousHU)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00008, funcName());

            taxLedgerAccountGroup = TaxLedgerAccountGroup::find(TaxTable::findAccountGroup(_taxTrans.TaxCode));
            dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_ledgerDimension);
            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(taxLedgerAccountGroup.taxLedgerDimension_HU(_taxTrans.TaxDirection), dimensionDefault);
        }
        else
        {
            ledgerDimension = _ledgerDimension;
        }
        // </GEEHU>

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
        {
            if (ledgerJournalTrans.correct())
            {
                _ledgerPostingController.getReference().parmIsCorrectionDefault(true);
            }
            else
            {
                _ledgerPostingController.getReference().parmIsCorrectionDefault(false);
            }
        }

        if (LedgerJournalTrans_W_Extension::isAutomaticDateDeterminationEnabled(ledgerJournalTrans))
        {
            useTaxExchangeRate = false;
        }

        super(
        _ledgerPostingController,
        _taxTrans,
        _taxAmount,
        _chargeAmount,
        _exchRateHelper,
        ledgerDimension,
        _operationLedgerDimension,
        _taxOffsetUseTaxLedgerDimension,
        _ledgerDetailLevel,
        projLedger
        // <GEERU>
        ,offsetLedgerDimension,
        _amountMSTSecondary
        // </GEERU>
        );

        // For Hungarian Continuous Tax, add two additional transactions to a new voucher initialized in the getVoucherForContinuousHU call
        // <GEEHU>
        if (isContinuousHU)
        {
            _taxTrans.postponeLedgerTrans_HU(this.getVoucherForContinuousHU(_taxTrans.taxTrans_W().VatDueDate_W, _ledgerPostingController), dimensionDefault);
        }
        // </GEEHU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFindPostingReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the tax posting should attempt to find the correct posting reference using the
    ///    voucher and transdate on the tax line.
    /// </summary>
    /// <returns>
    ///    true if tax should find the posting reference; otherwise, false.
    /// </returns>
    protected boolean postFindPostingReference()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a <c>TaxTrans</c> record.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <param name="_taxTrans">
    /// The transaction line that is being posted.
    /// </param>
    /// <param name="_exchangeRateHelper">
    /// An instance of the <c>CurrencyExchHalper</c> class that has the currency, exchange rates, and
    /// triangulation values set.
    /// </param>
    /// <param name="_voucher">
    /// Voucher for the primary journal in intercompany scenarios.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The LedgerDimension used for Posting; Optional.
    /// </param>
    /// <param name="_operationLedgerDimension">
    /// The OperationLedgerDimension used for Posting; Optional.
    /// </param>
    /// <param name="_taxOffsetUseTaxLedgerDimension">
    /// The TaxOffsetUseTaxLedgerDimension used for Posting; Optional.
    /// </param>
    /// <param name="_subledgerJournalAccountEntry">
    /// A <c>SubledgerJournalAccountEntry</c> record; Optional
    /// </param>
    [HookableAttribute(true)]
    protected void postToTaxTrans(LedgerPostingController _ledgerPostingController,
                                  TaxTrans                     _taxTrans,
                                  CurrencyExchangeHelper       _exchangeRateHelper,
                                  Voucher                      _voucher
        , LedgerDimensionAccount     _ledgerDimension =0,
                                  LedgerDimensionAccount       _operationLedgerDimension =0,
                                  LedgerDimensionAccount       _taxOffsetUseTaxLedgerDimension =0,
                                  SubledgerJournalAccountEntry _subledgerJournalAccountEntry = null
        )
    {
        LedgerJournalTaxDocument    ledgerJournalTaxDocument;
        MapEnumerator               taxMapEnumerator;
        LedgerJournalTrans          ledgerJournalTrans;
        TaxObligationCompany        taxObligationCompany;
        Voucher                     intercompanyVoucher;

        // <GIN>
        Voucher                     origTaxVoucher = _taxTrans.Voucher;
        // </GIN>

        ledgerJournalTaxDocument = taxableDocument as LedgerJournalTaxDocument;

        if (ledgerJournalTaxDocument.parmIntercompanyJournal())
        {
            // Unposted Tax Line was parented by primary company Journal line, posted tax line
            // must be parented by the intercompany journal line.
            _taxTrans.HeadingTableId = taxableDocument.getJournalizedDocument().TableId;

            taxObligationCompany = taxableDocument.getTaxObligationCompany();
            if (taxObligationCompany == TaxObligationCompany::Source)
            {
                if (ledgerJournalTransSource == null)
                {
                    ledgerJournalTransSource = LedgerJournalTrans::findTaxSource(this.journalNum(), taxableDocument.getReferenceNumber(), ledgerJournalTaxDocument.parmIntercompanyJournal(), _voucher);
                }

                _exchangeRateHelper.parmExchangeRate1(ledgerJournalTransSource.ExchRate);
                _exchangeRateHelper.parmExchangeRate2(ledgerJournalTransSource.ExchRateSecond);

                if (ledgerJournalTransSource == null)
                {
                    taxObligationCompany = TaxObligationCompany::Destination;
                }
                else
                {
                    _taxTrans.SourceRecId = ledgerJournalTransSource.RecId;
                }

                intercompanyVoucher = ledgerJournalTransSource.Voucher;
            }

            if (ledgerJournalTaxDocument.parmIntercompanyMap() &&
                taxObligationCompany == TaxObligationCompany::Destination)
            {
                // perform a reverse lookup to get the intercompany LedgerJournalTrans RecId using the
                // original LedgerJournalTrans RecId.
                taxMapEnumerator = ledgerJournalTaxDocument.parmIntercompanyMap().getEnumerator();
                while (taxMapEnumerator.moveNext())
                {
                    if (taxMapEnumerator.currentValue() == _taxTrans.SourceRecId)
                    {
                        _taxTrans.SourceRecId = taxMapEnumerator.currentKey();
                        break;
                    }
                }

                ledgerJournalTrans = LedgerJournalTrans::findRecId(_taxTrans.SourceRecId, false);
                _exchangeRateHelper.parmExchangeRate1(ledgerJournalTrans.ExchRate);
                _exchangeRateHelper.parmExchangeRate2(ledgerJournalTrans.ExchRateSecond);
                if (TaxInterCompanyJournalReportingCurrencyExRateFlight::instance().isEnabled())
                {
                    _exchangeRateHelper.parmReportingExchangeRate1(ledgerJournalTrans.ReportingCurrencyExchRate);
                    _exchangeRateHelper.parmReportingExchangeRate2(ledgerJournalTrans.ReportingCurrencyExchRateSecondary);
                }

                intercompanyVoucher = ledgerJournalTrans.Voucher;
            }

            // The voucher on the tax line was from the original transaction
            // we need the voucher from the intercompany journal instead
            _taxTrans.Voucher = intercompanyVoucher;
        }

        //<GIN>
        if (TaxParameters::isServiceTaxEnable_IN()
             && TaxTable::find(_taxTrans.TaxCode).TaxType_IN == TaxType_IN::ServiceTax)
        {
            _taxTrans.Voucher = origTaxVoucher;//Since it is related voucher
        }
        //</GIN>

        super(_ledgerPostingController,
              _taxTrans,
              _exchangeRateHelper,
              _voucher
              // <GIN>
              ,_ledgerDimension,_operationLedgerDimension,_taxOffsetUseTaxLedgerDimension
              // </GIN>
              );
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the record ID value of the transaction line that is currently being posted.
    /// </summary>
    /// <returns>
    ///    The record ID of the transaction line being posted.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public RecId sourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>TableId</c> value of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public TableId sourceTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is the main entry point to execute transaction-specific logic and to post to
    ///    <c>TaxTrans</c> table and to post tax amounts to the Ledger.
    /// </summary>
    /// <param name="_ledgerPostingController">
    ///    The ledger posting controller to use for ledger posting.
    /// </param>
    /// <param name="_companyToPost">
    ///    The company to post; optional.
    /// </param>
    /// <returns>
    ///    The total tax amount.
    /// </returns>
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost = curext())
    {
        TaxAmountCur taxAmount;

        if (post)
        {
            this.saveAndPost(_ledgerPostingController, _companyToPost);
            // Post the additional voucher for Hungarian Continuous Tax
            // <GEEHU>
            this.postVoucherForContinuousHU(_ledgerPostingController, voucher, taxDate);
            // </GEEHU>

            if (_ledgerPostingController.getReference())
            {
                voucher = _ledgerPostingController.getReference().parmVoucher();
                taxDate = _ledgerPostingController.getReference().parmTransDate();

                changecompany (_companyToPost)
                {
                    taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
                }
            }

            this.postTaxToISVForVoucher();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxToISVForVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Post tax to ISV for all unique tax documents for the journal and voucher.
    /// </summary>
    /// <param name="_journalNum">
    ///    The journal number.
    /// </param>
    private void postTaxToISVForVoucher()
    {
        LedgerJournalTrans ledgerJournalTransGroup, ledgerJournalTrans;

        LedgerJournalTable ledgerJournalTable = taxableDocument.getSourceHeader();

        TaxIntegrationBusinessProcess businessProcess =
            TaxIntegrationUtils::getBusinessProcessBySourceHeadingTable(ledgerJournalTable.TableId, ledgerJournalTable.RecId);
                
        if (TaxIntegrationUtils::isISVApiActivated(TaxServiceISVApiTypes::PostTax)
            && TaxIntegrationUtils::getTaxSolutionProviderTypeByBusinessProcess(businessProcess) == TaxSolutionProviderType::ISV
            && TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(ledgerJournalTable.JournalType))
        {
            while select JournalNum, Voucher from ledgerJournalTransGroup
                group by JournalNum, Voucher
                where ledgerJournalTransGroup.JournalNum == ledgerJournalTable.JournalNum
            {
                ledgerJournalTrans = TaxIntegrationISVTaxPostUtil::getMainLedgerJournalTrans(ledgerJournalTransGroup.JournalNum, ledgerJournalTransGroup.Voucher);

                TaxIntegrationCalculationInputPersisted packedTaxCalculationInput;

                update_recordset packedTaxCalculationInput
                    setting
                        JournalTableId = ledgerJournalTrans.TableId,
                        JournalRecId = ledgerJournalTrans.RecId
                    where packedTaxCalculationInput.HeadingTableId == ledgerJournalTrans.TableId
                        && packedTaxCalculationInput.HeadingRecId == ledgerJournalTrans.RecId;

                TaxModuleType taxModuleTypeLocal = (businessProcess == TaxIntegrationBusinessProcess::Project) ? TaxModuleType::Project : TaxModuleType::Voucher;
                TaxIntegrationFacade::postTaxToISV(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId, taxModuleTypeLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAdjustedBaseAmountForBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the adjusted base amount will be used instead of the base amount.
    /// </summary>
    /// <returns>
    ///    true if the adjusted base amount will replace the base amount; otherwise, false.
    /// </returns>
    protected boolean useAdjustedBaseAmountForBaseAmount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPostToTaxTransEventHandler_PL</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(TaxPostJournal), methodStr(TaxPostJournal, postToTaxTrans))]
    /// <summary>
    /// Event handler to handle tax transaction posting post event for the <c>postToTaxTrans</c> method.
    /// </summary>
    /// <param name="_args">
    /// The event args.
    /// </param>
    /// <remarks>
    /// This method updates the status on the <c>ExportSalesInvoiceDomesticTaxVoucher</c> record for the export sales domestic sales tax as posted.
    /// </remarks>
    public static void postPostToTaxTransEventHandler_PL(XppPrePostArgs _args)
    {
        #isoCountryRegionCodes
        TaxTrans                                taxTrans;
        LedgerJournalTrans                      ledgerJournalTrans;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if (_args.existsArg('_taxTrans'))
            {
                taxTrans = _args.getArg('_taxTrans');
                ledgerJournalTrans = LedgerJournalTrans::findRecId(taxTrans.SourceRecId, false);

                if (ledgerJournalTrans)
                {
                    CustInvoiceJourExportSalesVAT::updateExportSalesDomesticVATForPosting(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>