<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTaxPeriodicSettlement</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayTaxPeriodicSettlement extends RunBaseBatch implements BatchRetryable
{
    TransDate   transDate;
    FromDate    fromDate;
    ToDate      toDate;
    Yr          taxPeriod;
    NoYes       settlement;

    PaymentOrderBudgetReceiptClassCode_RU   budgetClassCode;
    RPayTaxVendor                           taxAuthorityVendor;
    RPayBranchFilterType                    branchFilterType;
    RPayTaxSettlement                       taxSettlement;

    QueryRun    queryRun;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        transDate,
        fromDate,
        toDate,
        budgetClassCode,
        settlement,
        taxPeriod,
        taxAuthorityVendor,
        branchFilterType
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>branchFilterType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayBranchFilterType branchFilterType(RPayBranchFilterType _branchFilterType = branchFilterType)
    {
        branchFilterType = _branchFilterType;
        return branchFilterType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetClassCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PaymentOrderBudgetReceiptClassCode_RU budgetClassCode(PaymentOrderBudgetReceiptClassCode_RU _budgetClassCode = budgetClassCode)
    {
        budgetClassCode = _budgetClassCode;
        return budgetClassCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(RPayTaxPeriodicSettlement), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate fromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret = super();

        if (taxSettlement)
        {
            transDate           = taxSettlement.TransDate;
            fromDate            = taxSettlement.FromDate;
            toDate              = taxSettlement.ToDate;
            budgetClassCode     = taxSettlement.BudgetReceiptClassCode;
            taxAuthorityVendor  = taxSettlement.TaxVendor;
            branchFilterType    = taxSettlement.BranchFilterType;
        }
        else
        {
            toDate      = endMth(dateMthFwd(RPayParameters::payPeriod(), -1));
            fromDate    = dateStartYr(toDate) ? dateStartYr(toDate) : dateStartYr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            toDate      = toDate ? toDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            transDate   = toDate;
        }

        taxPeriod = taxPeriod ? taxPeriod : year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query query = new Query();

        query.addDataSource(tablenum(Branches_RU));
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        RPayTaxSettlementUpdate rPayTaxSettlementUpdate;

        setprefix(RPayTaxPeriodicSettlement::description());

        if (! this.validate())
        {
            throw error("@SYS18738");
        }

        try
        {
            ttsbegin;

            rPayTaxSettlementUpdate = RPayTaxSettlementUpdate::construct(this);
            rPayTaxSettlementUpdate.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes settlement(NoYes _settlement = settlement)
    {
        settlement = _settlement;
        return settlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAuthorityVendor</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTaxVendor taxAuthorityVendor(RPayTaxVendor _taxAuthorityVendor = taxAuthorityVendor)
    {
        taxAuthorityVendor = _taxAuthorityVendor;
        return taxAuthorityVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Yr taxPeriod(Yr _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSettlement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTaxSettlement taxSettlement(RPayTaxSettlement _taxSettlement = taxSettlement)
    {
        taxSettlement = _taxSettlement;
        return taxSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDate toDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate transDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initParmDefault();
                }

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (! toDate)
        {
            ret = checkFailed("@GLS105013");
        }
        else if (fromDate > toDate)
        {
            ret = checkFailed("@GLS101164");
        }

        if (! taxPeriod)
        {
            ret = checkFailed("@RUP3245");
        }

        if (taxPeriod > year(dateMthFwd(RPayParameters::payPeriod(), -1)))
        {
            ret = checkFailed("@RUP3246");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP3220";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayTaxPeriodicSettlement rPayTaxPeriodicSettle = new RPayTaxPeriodicSettlement();

        rPayTaxPeriodicSettle.getLast();

        if (_args.parmEnum() == NoYes::Yes)
        {
            rPayTaxPeriodicSettle.taxSettlement(_args.record());
        }

        rPayTaxPeriodicSettle.init();

        rPayTaxPeriodicSettle.settlement(_args.parmEnum());
        rPayTaxPeriodicSettle.saveLast();

        if (rPayTaxPeriodicSettle.prompt())
        {
            rPayTaxPeriodicSettle.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>