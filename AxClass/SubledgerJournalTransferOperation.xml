<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalTransferOperation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalTransferOperation</c> class is used to transfer the subledger journal
/// entries.
/// </summary>
/// <remarks>
/// This class acts as the service for the <c>SubLedgerJournalTransferController</c> controller class.
/// </remarks>
class SubledgerJournalTransferOperation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the transfer of the subledger journal entries.
    /// </summary>
    /// <param name="subledgerJournalTransferRequest">
    /// A <c>subledgerJournalTransferRequest</c> object, which acts as the data contract.
    /// </param>
    public void executeTransfer(SubledgerJournalTransferRequest subledgerJournalTransferRequest)
    {
        SubledgerJournalTransferCommand subledgerJournalTransferCommand;
        SourceDocumentParameters sourceDocumentParameters = SubledgerJournalTransferOperation::findOrCreateTransferProcessParameterValues();

        int transferBundleSize = sourceDocumentParameters.TransferProcessTaskBundleSize;
        int transferLineLimit = sourceDocumentParameters.TransferProcessTaskLineLimit;

        subledgerJournalTransferCommand = new SubledgerJournalTransferCommand();

        subledgerJournalTransferRequest.parmTransferProcessBundleSize(transferBundleSize);
        subledgerJournalTransferRequest.parmTransferProcessLineLimit(transferLineLimit);

        subledgerJournalTransferCommand.executeTransfer(subledgerJournalTransferRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeBulkTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the transfer of the subledger journal entries across ledger and documents.
    /// </summary>
    /// <param name="subledgerJournalTransferRequest">
    /// A <c>subledgerJournalTransferRequest</c> object, which acts as the data contract.
    /// </param>
    public void executeBulkTransfer(SubledgerJournalTransferRequest subledgerJournalTransferRequest)
    {
        SubledgerJournalEntryNotTransferred subledgerJournalEntryNotTransferred;
        SourceDocumentParameters sourceDocumentParameters = SubledgerJournalTransferOperation::findOrCreateTransferProcessParameterValues();

        int transferBundleSize = sourceDocumentParameters.TransferProcessTaskBundleSize;
        int transferLineLimit = sourceDocumentParameters.TransferProcessTaskLineLimit;

        // intializing the in-memory temp table which captures the source document type specific info used for transfer
        SourceDocumentTmpTypeInformation sourceDocumentTmpTypeInformation = SourceDocumentType::getSourceDocumentTypeInformation(classStr(SubledgerJournalTransferController));

        while select crosscompany subledgerJournalEntryNotTransferred
            group by Ledger, SourceRelationType
        join ClassId, EnumTranslatedName, SourceRelationType from sourceDocumentTmpTypeInformation
            where sourceDocumentTmpTypeInformation.SourceRelationType == subledgerJournalEntryNotTransferred.SourceRelationType
        {
            SubledgerJournalTransferRule subledgerJournalTransferRule = SubledgerJournalTransferRule::findBestMatchRule(sourceDocumentTmpTypeInformation.ClassId, subledgerJournalEntryNotTransferred.Ledger);

            if (subledgerJournalTransferRule.TransferMode == SubledgerJournalTransferMode::AsynchronousBatch)
            {
                SubledgerJournalTransferRequest subledgerJournalTransferRequestObj = new SubledgerJournalTransferRequest();

                //Always force the summarization to be false as we do not support summarization when transfer mode is Asynchronous
                subledgerJournalTransferRequestObj.parmDoSummarization(NoYes::No);
                subledgerJournalTransferRequestObj.parmledgerId(subledgerJournalEntryNotTransferred.Ledger);
                subledgerJournalTransferRequestObj.parmSourceDocumentType(sourceDocumentTmpTypeInformation.ClassId);
                subledgerJournalTransferRequestObj.parmSourceDocumentTypeEnumTranslatedName(sourceDocumentTmpTypeInformation.EnumTranslatedName);
                subledgerJournalTransferRequestObj.parmSourceDocumentRelationType(sourceDocumentTmpTypeInformation.SourceRelationType);
                subledgerJournalTransferRequestObj.parmSubledgerJournalTransferMode(subledgerJournalTransferRule.TransferMode);
                subledgerJournalTransferRequestObj.parmExecutionId(subledgerJournalTransferRequest.parmExecutionId());
                subledgerJournalTransferRequestObj.parmProcessScheduleSeriesPatternRecId(subledgerJournalTransferRequest.parmProcessScheduleSeriesPatternRecId());
                subledgerJournalTransferRequestObj.parmTransferProcessBundleSize(transferBundleSize);
                subledgerJournalTransferRequestObj.parmTransferProcessLineLimit(transferLineLimit);

                new SubledgerJournalTransferCommand().executeTransfer(subledgerJournalTransferRequestObj);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performTransferOperation</Name>
				<Source><![CDATA[
    public void performTransferOperation()
    {
        SubledgerJournalEntryNotTransferred subledgerJournalEntryNotTransferred;
        SourceDocumentParameters sourceDocumentParameters = SubledgerJournalTransferOperation::findOrCreateTransferProcessParameterValues();

        int transferBundleSize = sourceDocumentParameters.TransferProcessTaskBundleSize;
        int transferLineLimit = sourceDocumentParameters.TransferProcessTaskLineLimit;

        // intializing the in-memory temp table which captures the source document type specific info used for transfer
        SourceDocumentTmpTypeInformation sourceDocumentTmpTypeInformation = SourceDocumentType::getSourceDocumentTypeInformation(classStr(SubledgerJournalTransferController));

        while select crosscompany subledgerJournalEntryNotTransferred
                group by Ledger, SourceRelationType
            join ClassId, EnumTranslatedName, SourceRelationType from sourceDocumentTmpTypeInformation
                where sourceDocumentTmpTypeInformation.SourceRelationType == subledgerJournalEntryNotTransferred.SourceRelationType
        {
            SubledgerJournalTransferRule subledgerJournalTransferRule = SubledgerJournalTransferRule::findBestMatchRule(sourceDocumentTmpTypeInformation.ClassId, subledgerJournalEntryNotTransferred.Ledger);

            if (subledgerJournalTransferRule.TransferMode == SubledgerJournalTransferMode::AsynchronousBatch)
            {
                SubledgerJournalTransferRequest subledgerJournalTransferRequestObj = new SubledgerJournalTransferRequest();

                //Always force the summarization to be false as we do not support summarization when transfer mode is Asynchronous
                subledgerJournalTransferRequestObj.parmDoSummarization(NoYes::No);
                subledgerJournalTransferRequestObj.parmledgerId(subledgerJournalEntryNotTransferred.Ledger);
                subledgerJournalTransferRequestObj.parmSourceDocumentType(sourceDocumentTmpTypeInformation.ClassId);
                subledgerJournalTransferRequestObj.parmSourceDocumentTypeEnumTranslatedName(sourceDocumentTmpTypeInformation.EnumTranslatedName);
                subledgerJournalTransferRequestObj.parmSourceDocumentRelationType(sourceDocumentTmpTypeInformation.SourceRelationType);
                subledgerJournalTransferRequestObj.parmSubledgerJournalTransferMode(subledgerJournalTransferRule.TransferMode);
                subledgerJournalTransferRequestObj.parmTransferProcessBundleSize(transferBundleSize);
                subledgerJournalTransferRequestObj.parmTransferProcessLineLimit(transferLineLimit);

                new SubledgerJournalTransferCommand().executeTransfer(subledgerJournalTransferRequestObj);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTransferProcessParameterValues</Name>
				<Source><![CDATA[
    public static SourceDocumentParameters findOrCreateTransferProcessParameterValues()
    {
        SourceDocumentParameters soureDocumentParameters;

        select firstonly soureDocumentParameters;

        if (soureDocumentParameters.NumberOfParallelTransferTask == 0 || 
            soureDocumentParameters.TransferProcessTaskBundleSize == 0 ||
            soureDocumentParameters.TransferProcessTaskLineLimit == 0)
        {
            ttsbegin;

            soureDocumentParameters = SourceDocumentParameters::find(true);

            if (soureDocumentParameters.TransferProcessTaskBundleSize == 0)
            {
                soureDocumentParameters.TransferProcessTaskBundleSize = 5000;
            }
            
            if (soureDocumentParameters.NumberOfParallelTransferTask == 0)
            {
                soureDocumentParameters.NumberOfParallelTransferTask = 5;
            }

            if (soureDocumentParameters.TransferProcessTaskLineLimit == 0)
            {
                soureDocumentParameters.TransferProcessTaskLineLimit = 10000;
            }

            soureDocumentParameters.update();

            ttscommit;
        }

        return soureDocumentParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfBatchTransferInstancesExecuting</Name>
				<Source><![CDATA[
    public static int64 numberOfBatchTransferInstancesExecuting()
    {
        Batch batch;
        
        select count(RecId) from batch
            where (batch.Status == BatchStatus::Executing || batch.Status == BatchStatus::Ready) &&
                (batch.ClassNumber == classNum(SubledgerJournalTransferController) ||
                batch.ClassNumber == classNum(SubledgerVoucherToGeneralLedgerTransferController));

        return batch.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfParallelTransferTask</Name>
				<Source><![CDATA[
    public static int numberOfParallelTransferTask(int64 _transferProcessTaskBundleSize, int64 _numberOfAccountingEventToTransfer)
    {
        System.Exception exception;

        int numberOfParallelTransferTask = SubledgerJournalTransferOperation::findOrCreateTransferProcessParameterValues().NumberOfParallelTransferTask;

        try
        {
            int numberOfExecutionNeededForTransfer = decRound((_numberOfAccountingEventToTransfer / _transferProcessTaskBundleSize), 0);
        
            if (numberOfExecutionNeededForTransfer > 0)
            {
                if (numberOfParallelTransferTask > numberOfExecutionNeededForTransfer)
                {
                    numberOfParallelTransferTask = numberOfExecutionNeededForTransfer;
                }
            }
            else
            {
                numberOfParallelTransferTask = 1;
            }
        }
        catch (exception)
        {
            //Exception was thrown while calculating the number if parallel threads, we will still return 1 thread
            numberOfParallelTransferTask = 1;
        }

        return numberOfParallelTransferTask;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>