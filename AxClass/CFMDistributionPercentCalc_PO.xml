<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMDistributionPercentCalc_PO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates a distribution percent on accounting distributions for purchase table.
/// </summary>
[CFMDistributionPercentSourceAttribute(NoYes::Yes, tableStr(PurchTable))]
public class CFMDistributionPercentCalc_PO extends CFMDistributionPercentCalc_Dist
{
    CFMReferenceDistributionHeaderTmp invoiceDistributionsHeader;
    CFMReferenceDistributionLinesTmp invoiceDistributionLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sourceCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode sourceCurrencyCode()
    {
        return this.purchTable().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    private PurchTable purchTable()
    {
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReferenceAccountingDistribution</Name>
				<Source><![CDATA[
    protected void processReferenceAccountingDistribution(AccountingDistributionRecId _originalAccountingDistributionRecId)
    {
        VendInvoiceJour vendInvoiceJour;
        VendInvoiceTrans vendInvoiceTrans;

        AccountingDistribution accountingDistribution;
        SourceDocumentLine sourceDocumentLine;
        CFMLedgerDimension cfmLedgerDimensionHeader = cfmDimensionConverter.convertDefaultDimension(this.headerDefaultDimension());

        while select LedgerDimension, TransactionCurrencyAmount from accountingDistribution
            where accountingDistribution.ReferenceDistribution == _originalAccountingDistributionRecId
               && accountingDistribution.ReferenceRole == AccountingDistributionReferenceRole::Matching
        join sourceDocumentLine
            where sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine
        join vendInvoiceJour
            where vendInvoiceJour.SourceDocumentHeader == accountingDistribution.SourceDocumentHeader
        exists join vendInvoiceTrans
            where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
               && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
               && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
               && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
               && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
               && vendInvoiceTrans.OrigPurchId == this.purchTable().PurchId
        {
            TaxGroup taxGroup;
            TaxItemGroup taxItemGroup;
            Int correction;

            [correction, taxGroup, taxItemGroup] = this.getSourceDocumentTaxData(sourceDocumentLine);

            CFMLedgerDimension cfmLedgerDimensionLine = paymentRequestsEnabled ? cfmDimensionConverter.convertLedgerDimension(accountingDistribution.LedgerDimension) : cfmLedgerDimensionHeader;
            Amount amountCur = correction * this.paymentSign() * accountingDistribution.TransactionCurrencyAmount;

            if (vendInvoiceJour.InvoiceAmount < 0)
            {
                this.addAmount(cfmLedgerDimensionLine, taxGroup, taxItemGroup, - amountCur);
            }
            else
            {
                this.addReferenceAmount(vendInvoiceJour, cfmLedgerDimensionLine, taxGroup, taxItemGroup, amountCur);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentSign</Name>
				<Source><![CDATA[
    protected Sign paymentSign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault headerDefaultDimension()
    {
        return this.purchTable().DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDistribution</Name>
				<Source><![CDATA[
    protected void fillDistribution()
    {
        super();

        this.fillWithReferenceDistributions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillWithReferenceDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills tmp table with reference data.
    /// </summary>
    protected void fillWithReferenceDistributions()
    {
        CFMDistributionDocument prepaymentDistributionDocument = CFMDistributionDocument::newForPrepaymentCalc(this.purchTable(), true);
        CFMDistributionDocument invoiceDistributionDocument = CFMDistributionDocument::newForDistTmp(invoiceDistributionsHeader, invoiceDistributionLines, this.sourceCurrencyCode());

        invoiceDistributionDocument.settleWithDistributionDocument(prepaymentDistributionDocument);

        while select LedgerDimension, TaxGroup, TaxItemGroup, Amount from invoiceDistributionLines
        {
            this.addAmount(invoiceDistributionLines.LedgerDimension,
                invoiceDistributionLines.TaxGroup,
                invoiceDistributionLines.TaxItemGroup,
                -invoiceDistributionLines.Amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReferenceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds amount to reference distribution temporary table.
    /// </summary>
    /// <param name="_invoice">
    /// The reference <c>VendInvoiceJour</c> record
    /// </param>
    /// <param name="_cfmLedgerDimension">
    /// Ledger dimension from source
    /// </param>
    /// <param name="_taxGroup">
    /// Tax group from source
    /// </param>
    /// <param name="_taxItemGroup">
    /// Tax item group from source
    /// </param>
    /// <param name="_amount">
    /// Amount from source
    /// </param>
    protected void addReferenceAmount(VendInvoiceJour _invoice, CFMLedgerDimension _cfmLedgerDimension, TaxGroup _taxGroup, TaxItemGroup _taxItemGroup, AmountCur _amount)
    {
        if (_amount == 0)
        {
            return;
        }

        //Lookup distribution header
        select firstOnly invoiceDistributionsHeader 
            where invoiceDistributionsHeader.HeaderRefRecId == _invoice.RecId;

        //if does not exist create new header
        if (invoiceDistributionsHeader.RecId == 0)
        {
            invoiceDistributionsHeader.ReferenceDistributionId = _invoice.InvoiceId;
            invoiceDistributionsHeader.TransDate = _invoice.InvoiceDate;
            invoiceDistributionsHeader.HeaderRefRecId = _invoice.RecId;
            invoiceDistributionsHeader.insert();
        }

        //lookup distribution line with the same analytics related to current distribution header
        select forupdate firstOnly invoiceDistributionLines
            where invoiceDistributionLines.DistributionHeader == invoiceDistributionsHeader.RecId
               && invoiceDistributionLines.LedgerDimension == _cfmLedgerDimension
               && invoiceDistributionLines.TaxGroup == _taxGroup
               && invoiceDistributionLines.TaxItemGroup == _taxItemGroup;

        if (invoiceDistributionLines.RecId == 0)
        {
            invoiceDistributionLines.DistributionHeader = invoiceDistributionsHeader.RecId;
            invoiceDistributionLines.LedgerDimension = _cfmLedgerDimension;
            invoiceDistributionLines.TaxGroup = _taxGroup;
            invoiceDistributionLines.TaxItemGroup = _taxItemGroup;
        }

        invoiceDistributionLines.Amount += _amount;
        invoiceDistributionLines.write();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>