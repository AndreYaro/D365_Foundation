<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvMileageHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for expense module that provides utility methods to calculate and consume mileage for expenses.
/// </summary>
class TrvMileageHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initMileageFields</Name>
				<Source><![CDATA[
        /// <summary>
    /// Initialize mileage specific fields on the data source - mileage rate, vehicle type and no. of passengers.
    /// </summary>
    /// <param name = "_expenseTransDataSource">Expense table form data source.</param>
    /// <param name = "_trvExpTrans">Expense trans buffer.</param>
    public static void initMileageFields(FormDataSource _expenseTransDataSource, TrvExpTrans _trvExpTrans)
    {
        FormDataObject      formDataObject;

        if (_expenseTransDataSource)
        {
            formDataObject = _expenseTransDataSource.object(fieldnum(TrvExpTrans, KMPrice));

            // Handle mileage rate field.
            if (formDataObject)
            {
                formDataObject.visible(true);
                formDataObject.enabled(false);
            }

            // Handle vehicle type and no. of passengers fields.
            if (_trvExpTrans.CostType)
            {
                formDataObject = _expenseTransDataSource.object(fieldnum(TrvExpTrans, VehicleType));

                if (formDataObject)
                {
                    formDataObject.visible(TrvMileageHelper::mileageRateTiersHasVehicleTypeSetup(_trvExpTrans.CostType, _trvExpTrans.TransDate));
                    formDataObject.enabled(true);
                }

                formDataObject = _expenseTransDataSource.object(fieldnum(TrvExpTrans, NumberOfPassengers));

                if (formDataObject)
                {
                    formDataObject.visible(TrvMileageHelper::mileageRateTiersHasPassengersSetup(_trvExpTrans.CostType, _trvExpTrans.TransDate));
                    formDataObject.enabled(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mileageRateTiersHasPassengersSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether passengers have been set up in mileage rate tiers.
    /// </summary>
    /// <param name="_trvCostType">
    /// The cost type of the expense category to which the mileage rate tiers have to be set up.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date of the expense.
    /// </param>
    /// <returns>
    /// True if the passengers are set up; otherwise, false.
    /// </returns>
    public static boolean mileageRateTiersHasPassengersSetup(TrvCostTypeEDT _trvCostType, TransDate _transDate)
    {
        TrvCostTypeRates    trvCostTypeRates;

        select firstonly RecId from trvCostTypeRates
        where trvCostTypeRates.RateType == TrvMileageRateType::Passenger
        && trvCostTypeRates.CostType == _trvCostType
        && (trvCostTypeRates.FromDate <= _transDate || !trvCostTypeRates.FromDate)
        && (trvCostTypeRates.ToDate   >= _transDate || !trvCostTypeRates.ToDate);

        return (trvCostTypeRates.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mileageRateTiersHasVehicleTypeSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether vehicles types have been set up in mileage rate tiers.
    /// </summary>
    /// <param name="_trvCostType">
    /// The cost type of the expense category to which the mileage rate tiers have to be set up.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date of the expense.
    /// </param>
    /// <returns>
    /// True if the vehicle types are set up; otherwise, false.
    /// </returns>
    public static boolean mileageRateTiersHasVehicleTypeSetup(TrvCostTypeEDT _trvCostType, TransDate _transDate)
    {
        TrvCostTypeRates    trvCostTypeRates;
        
        if (_trvCostType && _transDate)
        {
            select firstonly RecId from trvCostTypeRates
                where trvCostTypeRates.RateType == TrvMileageRateType::Mileage
                && trvCostTypeRates.CostType == _trvCostType
                && (trvCostTypeRates.FromDate <= _transDate || !trvCostTypeRates.FromDate)
                && (trvCostTypeRates.ToDate   >= _transDate || !trvCostTypeRates.ToDate);
        }

        return (trvCostTypeRates.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate amount for mileage expense line. Sets KmPrice, AmountCurr and AmountMST fields.
    /// </summary>
    /// <param name = "trvExpTrans">Expense table for which to calculate mileage</param>
    public static void calculateMileage(TrvExpTrans trvExpTrans)
    {
        TrvCostTypeRates                    costTypeRates;
        TrvCostRate                         passengerCostRate;
        TrvMileage                          usedMileage;
        AmountCur                           mileageAmount, passengerAmount;
        TrvExpTrans                         trvExpTransOtherOpenMileageLine;
        Map                                 multipleMileageTiers;
        MapEnumerator                       loopMileageTiers;

        if (TrvCostType::find(trvExpTrans.CostType).ExpType != TrvExpType::Transport || (!trvExpTrans.TransDate))
        {
            return;
        }

        select maxof(Qty) from costTypeRates
            where costTypeRates.CostType == trvExpTrans.CostType
                && costTypeRates.VehicleType == trvExpTrans.VehicleType
                && (costTypeRates.FromDate <= trvExpTrans.TransDate || !costTypeRates.FromDate)
                && (costTypeRates.ToDate   >= trvExpTrans.TransDate || !costTypeRates.ToDate)
                && costTypeRates.RateType == TrvMileageRateType::Mileage;

        // If it falls in multiple tiers. When mileage entered in expense report is greater than the mileage rate tier defined, then rate should be considered from
        // next mileage rate tier if exists or default rate should be considered from parameters form.
        if (usedMileage < costTypeRates.Qty && costTypeRates.Qty)
        {
            if (TrvExpenseHelper::isTrvExpMileageCalculationRevisedFlightEnabled())
            {
                mileageAmount = TrvMileageHelper::calcMultiTierMileageAmount(trvExpTrans);
            }
            else if (TrvMileageCalculationFeature::isEnabled())
            {
                container multipleTiers;
                int i;

                TrvInstrumentationHelper::logExpenseOperationsInformation("@Expense:MileageContainerTelemetry", classStr(TrvPost));

                multipleTiers = TrvPost::calculateMileageInfo(trvExpTrans, true);
                for (i = 1; i <= conLen(multipleTiers); i++)
                {
                    mileageAmount += conPeek(multipleTiers, i);
                }
            }
            else
            {
                TrvInstrumentationHelper::logExpenseOperationsInformation("@Expense:MileageMapTelemetry", classStr(TrvPost));

                multipleMileageTiers = TrvPost::calculateAllMileage(trvExpTrans, true);
                loopMileageTiers = multipleMileageTiers.getEnumerator();

                while (loopMileageTiers.moveNext())
                {
                    mileageAmount += loopMileageTiers.currentValue();
                }
            }
        }
        else // Otherwise, single tier.
        {
            trvExpTrans.kmPrice = TrvParameters::find().KmPrice;

            // No default mileage price has been setup.
            if (!trvExpTrans.kmPrice)
            {
                warning("@Expense:NoDefaultMileageRateSetupWarning");
            }

            mileageAmount = trvExpTrans.kmPrice * trvExpTrans.kmOwnCar;
        }
        
        // Apply passenger rate tiers
        passengerCostRate = TrvCostTypeRates::getPassengerRate(trvExpTrans.CostType, trvExpTrans.TransDate, trvExpTrans.VehicleType);
        passengerAmount = (trvExpTrans.NumberOfPassengers*trvExpTrans.kmOwnCar*passengerCostRate);

        trvExpTrans.AmountCurr = mileageAmount + passengerAmount;

        trvExpTrans.amountMST();

        if (trvExpTrans.AmountMST)
        {
            trvExpTrans.KMPrice = trvExpTrans.AmountMST/trvExpTrans.KMOwnCar;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerDefaultVehicleType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a vehicle type for the current worker for a specific expense category.The order of defaulting is:
    ///         1) From mileage transactions that already exist for the worker in <c>TrvKmSum</c>
    ///         2) From rate tier setup on the expense category
    /// </summary>
    /// <param name="_worker">
    ///     The employee or contractor for which the expense is being entered.
    /// </param>
    /// <param name="_costType">
    ///     The mileage expense catetgory.
    /// </param>
    /// <param name="_transDate">
    ///     The date on which the mileage expense was incurred.
    /// </param>
    /// <returns>
    ///     A vehicle type related to the expense category if one exists; else blank.
    /// </returns>
    public static TrvVehicleType getWorkerDefaultVehicleType(HcmWorkerRecId _worker, TrvCostTypeEDT _costType, TransDate _transDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TrvCostTypeRates costTypeRates;
        TrvCostType      costType;
        TrvPartyEmployeeRelationship    expenseWorkerSetup;
        TrvKmSum    kmSum;
        TrvVehicleType vehicleType;

        // See if the worker has any recorded mileage and default vehicle type from previous use
        select firstonly VehicleType from kmSum
            order by kmSum.Year, kmSum.FiscalCalendarYear desc
            join costTypeRates
            where kmSum.Worker == _worker &&
                kmSum.VehicleType != '' &&
                costTypeRates.CostType == _costType &&
                costTypeRates.VehicleType == kmSum.VehicleType &&
                (costTypeRates.FromDate <= _transDate || !costTypeRates.FromDate) &&
                (costTypeRates.ToDate   >= _transDate || !costTypeRates.ToDate);

        vehicleType = kmSum.VehicleType;

        if (!vehicleType)
        {
            // still no default value, check the cost type setup
            select firstonly VehicleType from costTypeRates
                order by costTypeRates.VehicleType
                join costType
                where costTypeRates.costType == costType.CostType &&
                    costType.ExpType == TrvExpType::Transport &&
                    costType.CostType == _costType &&
                    costType.IsInactive == 0 &&
                    (costTypeRates.FromDate <= _transDate || !costTypeRates.FromDate) &&
                    (costTypeRates.ToDate   >= _transDate || !costTypeRates.ToDate);

            vehicleType = costTypeRates.VehicleType;
        }
        return vehicleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRateTierExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts an approved mileage transaction when a new mileage rate tier is reached for the worker changing the
    /// reimbursement rate for the entered Mileage line.
    /// </summary>
    /// <param name = "_sourceTrans">The originating mileage expense transaction</param>
    /// <param name = "_qtyToAdd">The quantity for the new expense transaction</param>
    /// <param name = "_mileRate">The rate per unit for the new mileage transaction</param>
    /// <param name = "_passengerRate">The rate per passenger for the new mileage transaction</param>
    /// <returns>The RecId of the new expense transaction</returns>
    /// <remarks>This method avoids much of the validation performed by TrvExpTrans.insert().</remarks>
    static RefRecId insertRateTierExpense(TrvExpTrans _sourceTrans, TrvMileage _qtyToAdd, TrvCostRate _rate, TrvCostRate _passengerRate)
    {
        TrvExpTrans     newTrans;

        // prevent unnecessary use of this method
        Debug::assert(_sourceTrans.expType == TrvExpType::Transport);
        Debug::assert(_sourceTrans.ApprovalStatus == TrvAppStatus::Approved);

        newTrans.clear();
        _sourceTrans.copyFields(newTrans);
        newTrans.kmOwnCar    = _qtyToAdd;
        newTrans.kmPrice     = _rate;
        newTrans.AmountCurr  = newTrans.kmOwnCar * newTrans.kmPrice + _passengerRate;
        newTrans.amountMST();
        newTrans.updateNetTransactionAmount();
        newTrans.setCorrectedTaxAmountMST();
        // set parentRecId here temporarily, it's used in trvExpTransSourceDocumentLine to find the original mileage source document line
        // will clear the parentRecId field after successful posting.
        newTrans.ParentRecId = _sourceTrans.RecId;
        newTrans.ApprovalStatus = TrvAppStatus::Approved;
        newTrans.LineNumber = newTrans.calculateNextLineNumber();
        newTrans.ExpTransNumber = TrvExpTrans::GetNewExpTransNumber();

        newTrans.AmountCurr = CurrencyExchangeHelper::amount(newTrans.AmountCurr, newTrans.ExchangeCode);

        // project policies updates field values, and has to be done before super
        newTrans.validateProjExpPoliciesExpense();

        // before super, as the trvExpTrans.AccountingCurrencyReconciledAmount is updated, and orig values should be got before super
        newTrans.mapToRequisitionLine();

        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(newTrans);

        newTrans.calcIntercompanyAmounts();

        // by-pass the insert method
        newTrans.doInsert();
        
        if (newTrans.MappedToRequisitionLine)
        {
            TrvRequisitionTable::updateReconciliationStatus(newTrans.requisitionTable());
        }

        // Calculate and create taxUncommitted before sourcedoc implementation so that related distributions will be
        // created during line save instead of post.
        newTrans.createTaxUncommitted(true);
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(newTrans,true,SourceDocumentLineAccountingStatus::FullyDistributed);
        SysTransactionScopeCache::remove(classStr(AccountingDistributionRule), [newTrans.SourceDocumentLine, MonetaryAmount::ExtendedPrice]);

        return newTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMileageExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates an existing mileage expense when the miles entered crosses multiple rate tiers.
    /// </summary>
    /// <param name = "_expTrans">the expense transaction to update</param>
    /// <param name = "_qtyToAdd">the new quantity for the expense transaction</param>
    /// <param name = "_mileRate">the new rate per unit for the mileage transaction</param>
    /// <param name = "_passengerRate">the rate per passenger for the mileage transaction</param>
    public static void updateMileageExpense(TrvExpTrans _expTrans, TrvMileage _qtyToAdd, TrvCostRate _mileRate, TrvCostRate _passengerRate, Voucher _voucher)
    {
        if (_expTrans.KMOwnCar != _qtyToAdd || _expTrans.KMPrice != _mileRate ||
            _expTrans.AmountCurr != (_qtyToAdd  * _mileRate + _passengerRate) )
        {
            _expTrans.KMOwnCar = _qtyToAdd;
            _expTrans.KMPrice  = _mileRate;
            _expTrans.AmountCurr = _expTrans.KMOwnCar * _expTrans.KMPrice + _passengerRate;
            _expTrans.AmountMST();

            if (_expTrans.AmountCurr && _expTrans.KMOwnCar)
            {
                _expTrans.KMPrice = _expTrans.AmountCurr/_expTrans.KMOwnCar;
            }
            else
            {
                _expTrans.KMPrice = 0;
            }

            _expTrans.updateNetTransactionAmount();
            _expTrans.setCorrectedTaxAmountMST();
            _expTrans.Voucher = _voucher;
            // the update() method will update distribution accordingly
            _expTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMultiTierMileageAmount</Name>
				<Source><![CDATA[
    static AmountCur calcMultiTierMileageAmount(TrvExpTrans _expTrans, List consumedMileageList = null)
    {
        AmountCur mileageAmt;
        List rateTiers = new List(Types::Record);
        TrvCostTypeRates rateTier, prevTier;
        boolean useFiscalCalendarForMileageTotals = TrvParameters::find().UseFiscalCalendarForMileageTotals;
        FiscalCalendarYear fiscalCalendarYear;
        TrvKmSum kmSum;
        TrvMileage consumedMileage, mileageToConsume, mileageAvlInFirstTier, leftCapactity, slotCapacity;
        TrvExpTrans mileageLinesInReport;

        // Calculate Already Used Mileage
        if(useFiscalCalendarForMileageTotals)
        {
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), _expTrans.TransDate);
        }

        if (fiscalCalendarYear)
        {
            select sum(Km) from kmSum
                where kmSum.Worker == _expTrans.CreatingWorker
                    && kmSum.FiscalCalendarYear == fiscalCalendarYear.RecId
                    && kmSum.VehicleType == _expTrans.VehicleType;
        }
        else
        {
            select sum(Km) from kmSum
                where kmSum.Worker == _expTrans.CreatingWorker
                    && kmSum.Year == year(_expTrans.TransDate)
                    && kmSum.VehicleType == _expTrans.VehicleType;
        }

        TrvMileage consumedMileageInReport;
        if(!consumedMileageList)
        {
            select sum(KMOwnCar) from mileageLinesInReport
                where mileageLinesInReport.ExpNumber == _expTrans.ExpNumber
                    && mileageLinesInReport.ParentRecId == 0 // consider parent lines only.
                    && mileageLinesInReport.RecId != _expTrans.RecId; // don't consider current line, as we will calculate it now.
            consumedMileageInReport = mileageLinesInReport.KMOwnCar;
        }
        else
        {
            ListEnumerator enumerator = consumedMileageList.getEnumerator();
            while(enumerator.moveNext())
            {
                TrvMileage currKm = enumerator.current();
                consumedMileageInReport += currKm;
            }
        }

        consumedMileage = kmSum.Km + consumedMileageInReport;

        // get all tiers
        while select rateTier
            order by Qty
            where rateTier.CostType == _expTrans.CostType
                && (rateTier.FromDate <= _expTrans.TransDate || !rateTier.FromDate)
                && (rateTier.ToDate >= _expTrans.TransDate || !rateTier.ToDate)
                && rateTier.VehicleType == _expTrans.VehicleType
                && rateTier.RateType == TrvMileageRateType::Mileage
        {
            if(rateTier.Qty <= consumedMileage)
            {
                continue; // skip this tier(for calculation) as it has already been consumed completely
            }
            
            // calculate the mileage available in the first rate tier being added
            mileageAvlInFirstTier = (mileageAvlInFirstTier > 0) ?
                mileageAvlInFirstTier // mileageAvlInFirstTier has already been calculated in prev tier
                : (rateTier.Qty - consumedMileage); // calculate consumed
            
            rateTiers.addEnd(rateTier);
        }

        
        mileageToConsume = _expTrans.KMOwnCar;
        consumedMileage = 0; // reset this variable to calculate current _expTrans line mileage

        // go through all the tiers
        ListEnumerator ratesTierEnumerator = rateTiers.getEnumerator();

        // calculate Mileage Amount for each tier
        while(ratesTierEnumerator.moveNext() && mileageToConsume > 0)
        {
            rateTier = ratesTierEnumerator.current();
            if(!prevTier)
            {
                slotCapacity = mileageAvlInFirstTier;
            }
            else
            {
                slotCapacity = rateTier.Qty - prevTier.Qty;
            }
            consumedMileage = min(slotCapacity, mileageToConsume);
            mileageToConsume -= consumedMileage;
            mileageAmt += consumedMileage * rateTier.CostRate;
            prevTier = rateTier;
        }
        
        // all mileage tiers have been consumed, now we calculate the mileage amount using default rate tiers.
        if(mileageToConsume > 0)
        {
            TrvCostRate defaultRate = TrvParameters::find().KmPrice;

            mileageAmt += mileageToConsume * defaultRate;
        }


        return mileageAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllMileageLinesInExpenseReport</Name>
				<Source><![CDATA[
    public static void updateAllMileageLinesInExpenseReport(TrvExpNumber expNumber)
    {
        if(expNumber == '') return; // no calculation needed for unattached expenses.
        TrvExpTrans lineUpdate;
        List consumedMileageList = new List(Types::Real);
        while select forupdate * from lineUpdate 
            where lineUpdate.ExpNumber == expNumber
            && lineUpdate.ExpType == TrvExpType::Transport
            && lineUpdate.ParentRecId == 0 // Update header line only
        {
            ttsbegin;
            // calculate Mileage
            AmountCur mileageAmount = TrvMileageHelper::calcMultiTierMileageAmount(lineUpdate, consumedMileageList);

            // calculate passenger cost rate.
            TrvCostRate passengerCostRate = TrvCostTypeRates::getPassengerRate(lineUpdate.CostType, lineUpdate.TransDate, lineUpdate.VehicleType);
            AmountCur passengerAmount = (lineUpdate.NumberOfPassengers*lineUpdate.kmOwnCar*passengerCostRate);

            lineUpdate.AmountCurr = mileageAmount + passengerAmount;

            lineUpdate.amountMST();

            if (lineUpdate.AmountMST)
            {
                lineUpdate.KMPrice = lineUpdate.AmountMST/lineUpdate.KMOwnCar;
            }
            lineUpdate.updateNetTransactionAmount();
            lineUpdate.setCorrectedTaxAmountMST();
            lineUpdate.update(false);
            consumedMileageList.addEnd(lineUpdate.KmOwnCar);
            ttscommit;

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>