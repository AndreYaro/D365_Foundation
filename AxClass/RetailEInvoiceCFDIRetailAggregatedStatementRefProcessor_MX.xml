<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoiceCFDIRetailAggregatedStatementRefProcessor_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoiceCFDIRetailAggregatedStatementRefProcessor_MX</c> class operates with incomplete CFDI UUID references for Retail Aggregated Statement related EInvoices and transforms them to <c>EInvoiceCFDIReference_MX</c> records.
/// </summary>
[RetailEInvoiceCFDIRefProcessorAttribute_MX(tableStr(RetailEInvoiceAggregatedStatement_MX))]
internal final class RetailEInvoiceCFDIRetailAggregatedStatementRefProcessor_MX extends RetailEInvoiceCFDIRefProcessor_MX
{
    private RetailEInvoiceAggregatedStatement_MX aggregatedStatement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCFDIStatementReference</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createCFDIStatementReference()
    {
        if (!eInvoiceJour.IsReturn)
        {
            return;
        }

        RetailEInvoiceAggregatedStatementRelation_MX aggregatedStatementRelation;
        RetailEInvoiceCFDIReference_MX reference;
        RetailTransactionSalesTrans salesTrans;
        RetailStoreTable store;

        RefRecId eInvoiceJourRecId = eInvoiceJour.RecId;
        EInvoiceCFDIReferenceType_MX insertReferenceType = EInvoiceCFDIReferenceType_MX::GoodsReturn;

        insert_recordset reference
            (Store, Terminal, TransactionId, ReferenceType, EInvoiceJour, Channel)
            select ReturnStore, ReturnTerminalId, ReturnTransactionId, insertReferenceType, eInvoiceJourRecId from salesTrans
                group by ReturnStore, ReturnTerminalId, ReturnTransactionId
                where salesTrans.store == aggregatedStatement.storeId
                    && salesTrans.ReturnStore
                    && salesTrans.ReturnTerminalId
                    && salesTrans.ReturnTransactionId
                join RecId from store group by RecId
                    where store.StoreNumber == salesTrans.ReturnStore
                exists join aggregatedStatementRelation
                    where aggregatedStatementRelation.AggregatedStatementId == aggregatedStatement.AggregatedStatementId
                        && aggregatedStatementRelation.StatementId == salesTrans.statementId;

        if (reference.RowCount())
        {
            info(strFmt("@RetailEInvoiceCFDI:EInvoiceForRetailStatementCreatedInStatusDraft", aggregatedStatement.AggregatedStatementId));
            eInvoiceJour.CFDIStatus = EInvoiceCFDIStatus_MX::Draft;
            eInvoiceJour.CFDIMessageStatus = EInvoiceCFDIMessageStatus_MX::Blank;
            eInvoiceJour.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEInvoiceJour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initFromEInvoiceJour(EInvoiceJour_MX _eInvoiceJour)
    {
        super(_eInvoiceJour);
        aggregatedStatement = RetailEInvoiceAggregatedStatement_MX::findRecId(_eInvoiceJour.RefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEInvoiceReturnReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills return references by information from EInvoice.
    /// </summary>
    /// <param name="_targetEInvoiceJourRecId">
    /// A reference to <c>EInvoiceJour_MX</c> to limit processed record set; optional.
    /// </param>
    /// <remarks>
    /// The UUID of original EINvoice can be absent on the stage of EInvoice creation for return.
    /// Moreover the retail statement can be absent on the stage.
    /// The procedure searches statement and related EInvoice based on saved information about returned transaction and update reference by UUID in case it is found.
    /// </remarks>
    internal static void updateEInvoiceReturnReferences(RefRecId _targetEInvoiceJourRecId = 0)
    {
        EInvoiceJour_MX eInvoice;
        EInvoiceJour_MX originalEInvoice;
        RetailEInvoiceAggregatedStatement_MX originalAggregatedStatement;
        RetailEInvoiceAggregatedStatementRelation_MX originalAggregatedStatementRelation;
        RetailTransactionTable originalTransaction;
        RetailEInvoiceCFDIReference_MX reference;

        update_recordSet reference
            setting CFDIUUID = originalEInvoice.CFDIUUID
            where !reference.CFDIUUID
                && reference.ReferenceType == EInvoiceCFDIReferenceType_MX::GoodsReturn
                && (!_targetEInvoiceJourRecId || reference.EInvoiceJour == _targetEInvoiceJourRecId)
            join CFDIUUID from originalEInvoice
                where originalEInvoice.CFDIUUID
            exists join originalAggregatedStatement
                where originalAggregatedStatement.RecId == originalEInvoice.RefRecId
                    && originalAggregatedStatement.TableId == originalEInvoice.RefTableId
            exists join originalAggregatedStatementRelation
                where originalAggregatedStatementRelation.AggregatedStatementId == originalAggregatedStatement.AggregatedStatementId
            exists join originalTransaction
                where originalTransaction.Channel == reference.Channel
                    && originalTransaction.store == reference.Store
                    && originalTransaction.terminal == reference.Terminal
                    && originalTransaction.transactionId == reference.TransactionId
                    && originalTransaction.statementId == originalAggregatedStatementRelation.statementId
            exists join eInvoice
                where eInvoice.RecId == reference.EInvoiceJour
                    && eInvoice.RefTableId == tableNum(RetailEInvoiceAggregatedStatement_MX)
                    && eInvoice.CFDIStatus == EInvoiceCFDIStatus_MX::Draft
                    && eInvoice.IsReturn;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>