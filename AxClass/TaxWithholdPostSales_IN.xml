<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdPostSales_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdPostSales_IN</c> class is used to post sales of the tax withhold data.
/// </summary>
class TaxWithholdPostSales_IN extends TaxWithholdPost_IN
{
    SalesCalcTax    salesCalcTax;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cust exchange rate.
    /// </summary>
    /// <returns>
    /// The instance of the <c>CustExchRate</c> class.
    /// </returns>
    public CustExchRate exchRate()
    {
        return salesCalcTax.exchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the secondary exchange rate.
    /// </summary>
    /// <returns>
    /// The instance of the <c>ExchrateSecondary</c> class.
    /// </returns>
    public ExchrateSecondary exchRateSecondary()
    {
        return salesCalcTax.exchRateSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTax</Name>
				<Source><![CDATA[
    protected boolean existsTax()
    {
        select firstOnly RecId from taxWithholdWorkTrans
            where taxWithholdWorkTrans.HeadingTableId   ==  origHeadingTableId
                && taxWithholdWorkTrans.HeadingRecId    == origHeadingRecId;
        return taxWithholdWorkTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original heading rec id.
    /// </summary>
    /// <returns>
    /// The original heading rec id.
    /// </returns>
    protected RefRecId getOriginalHeadingRecId()
    {
        return origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original heading table id.
    /// </summary>
    /// <returns>
    /// The original heading table id.
    /// </returns>
    protected RefTableId getOriginalHeadingTableId()
    {
        return origHeadingTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFromSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves transaction data from sales.
    /// </summary>
    /// <param name="_salesOrderTableId">
    /// The sales order table id.
    /// </param>
    /// <param name="_salesOrderRecId">
    /// The sales order rec id.
    /// </param>
    protected void moveFromSales(tableId   _salesOrderTableId,
                                 recId     _salesOrderRecId)
    {
        while select taxWithholdWorkTrans
            where taxWithholdWorkTrans.SourceTableId == _salesOrderTableId &&
                  taxWithholdWorkTrans.SourceRecId   == _salesOrderRecId
        {
            taxWithholdWorkTrans.HeadingRecId       = headingRecId;
            taxWithholdWorkTrans.HeadingTableId     = headingTableId;
            taxWithholdWorkTrans.SourceTableId      = this.sourceTableId();
            taxWithholdWorkTrans.SourceRecId        = this.sourceRecId();

            taxWithholdWorkTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>TaxWithholdPostSales_IN</c> class.
    /// </summary>
    /// <param name="_post">
    /// Yes if the instance will be post.
    /// </param>
    /// <param name="_salesCalcTax">
    /// The sales calculate tax.
    /// </param>
    /// <param name="_taxWithholdWorkTrans">
    /// The tax withhold work transaction.
    /// </param>
    public void new(
        NoYes                      _post,
        SalesCalcTax               _salesCalcTax,
        TmpTaxWithholdWorkTrans_IN _taxWithholdWorkTrans)
    {
        post                    = _post;
        salesCalcTax            = _salesCalcTax;
        taxWithholdWorkTrans    = _taxWithholdWorkTrans;

        taxModuleType       = TaxModuleType::SalesInvoice;

        headingTableId      = salesCalcTax.tableId();
        headingRecId        = salesCalcTax.recID();
        origHeadingTableId  = salesCalcTax.salesTableTableID();
        origHeadingRecId    = salesCalcTax.salesTableRecID();

        if (!headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            taxDate = salesCalcTax.invoiceDate();
            sourceCurrencyCode = salesCalcTax.currencyCode();
        }

        triangulation = salesCalcTax.triangulation(taxDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToTaxWithHoldTrans</Name>
				<Source><![CDATA[
    protected void postToTaxWithHoldTrans(LedgerPostingController _ledgerPostingController, TaxWithholdTrans_IN _taxWithholdTrans, CurrencyExchangeHelper _exchangeRateHelper, container _taxWithholdData)
    {
        CustTable                       custTable;
        TaxInformation_IN               taxInformationLoc;
        CustInvoiceTrans                custInvoiceTrans;

        CustInvoiceTrans = CustInvoiceTrans::findRecId(_taxWithholdTrans.SourceRecId);
        _taxWithholdTrans.CustAccount = custInvoiceTrans.custTable_InvoiceAccount().AccountNum;

        _taxWithholdTrans.SalesId = custInvoiceTrans.SalesId;
        _taxWithholdTrans.LineNum = custInvoiceTrans.LineNum;
        _taxWithholdTrans.RecoverableAccount = custInvoiceTrans.custInvoiceTrans_IN().TDSGroup_IN ? true : false;
        _taxWithholdTrans.Invoice = CustInvoiceTrans.InvoiceId;
        _taxWithholdTrans.CustInvoiceTrans = custInvoiceTrans.RecId;

        custTable = CustTable::find(_taxWithholdTrans.CustAccount);
        _taxWithholdTrans.Nameofdeductee    = DirPartyTable::findRec(custTable.Party).Name;
        taxInformationLoc = TaxInformation_IN::find(CustInvoiceTranstaxExtensionIN::findByCustInvoiceTrans(custInvoiceTrans.recId).TaxInformation);
        _taxWithholdTrans.TaxWithholdRegNumber = taxInformationLoc.tan;

        // For sales order invoice, when parameter Tax liability is enabled, post interim account to tax withhold trans;
        if (TaxWithholdGroupHeading::find(_taxWithholdTrans.TaxWithholdGroup).TaxLiabilityOnPayment_IN)
        {
            _taxWithholdTrans.IsTaxInterim = NoYes::Yes;
        }

        super(_ledgerPostingController, _taxWithholdTrans, _exchangeRateHelper, _taxWithholdData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public recId sourceRecId()
    {
        return sourceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public RefTableId sourceTableId()
    {
        return sourceRecord.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount       taxAmount;
        boolean         moreLines;

        if (!this.existsTax())
        {
            return 0;
        }

        this.initLedgerPosting(_ledgerPostingController);

        ttsbegin;

        this.validateWithholdTax();

        salesCalcTax.initCursor();
        moreLines   = true;
        while (moreLines)
        {
            sourceRecord= salesCalcTax.nextLine();
            if (sourceRecord)
            {
                this.moveFromSales(salesCalcTax.transTableId(),
                                   salesCalcTax.transRecId());
            }
            else
                moreLines   = false;
        }
        ttscommit;

        if (post)
        {
            this.saveAndPostWHT(_ledgerPostingController);

            taxAmount = TaxWithholdPost_IN::taxTotalVoucherDate(voucher, taxDate);
        }
        else
        {
            taxAmount = this.totalTaxWithholdAmount();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    public boolean useSubLedgerJournalLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>