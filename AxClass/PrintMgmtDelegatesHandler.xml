<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtDelegatesHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PrintMgmtDelegatesHandler
{
    #PrintMgmtSetup

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructPrintMgmtNodeDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the constructPrintMgmtNodeDelegate method of the <c>PrintMgmtDelegates</c> class.
    /// </summary>
    /// <param name = "_nodeType"><c>PrintMgmtNodeType</c> value.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDelegates), delegatestr(PrintMgmtDelegates, constructPrintMgmtNodeDelegate))]
    public static void constructPrintMgmtNodeDelegateHandler(PrintMgmtNodeType _nodeType, EventHandlerResult _result)
    {
        // if another event handler has constructed the node, let is pass
        if (_result.result() != null)
            return;

        PrintMgmtNode node = PrintMgmtDelegatesHandler::constructPrintMgmtNode(_nodeType);
        if (node)
        {
            _result.result(node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrintMgmtNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>PrintMgmtNode</c> object given a <c>PrintMgmtNodeType</c> value.
    /// </summary>
    /// <param name = "_nodeType">The <c>PrintMgmtNodeType</c> value.</param>
    /// <returns>The <c>PrintMgmtNode</c> object.</returns>
    private static PrintMgmtNode constructPrintMgmtNode(PrintMgmtNodeType _nodeType)
    {
        switch (_nodeType)
        {
            case PrintMgmtNodeType::Purch:
                return new PrintMgmtNode_Purch();

            case PrintMgmtNodeType::Sales:
                return new PrintMgmtNode_Sales();

            case PrintMgmtNodeType::CustInvoiceTable:
                return new PrintMgmtNode_CustInvoiceTable();

            case PrintMgmtNodeType::CustTable:
                return new PrintMgmtNode_CustTable();

            case PrintMgmtNodeType::Project:
                return new PrintMgmtNode_Project();

            case PrintMgmtNodeType::ProjInvoiceTable:
                return new PrintMgmtNode_ProjInvoiceTable();

            case PrintMgmtNodeType::ProjProposalJour:
                return new PrintMgmtNode_ProjProposalJour();

            case PrintMgmtNodeType::ProjectQuotation:
                return new PrintMgmtNode_ProjectQuotation();

            case PrintMgmtNodeType::PurchTable:
                return new PrintMgmtNode_PurchTable();

            case PrintMgmtNodeType::SalesQuotationTable:
                return new PrintMgmtNode_SalesQuotationTable();

            case PrintMgmtNodeType::SalesTable:
                return new PrintMgmtNode_SalesTable();

            case PrintMgmtNodeType::VendTable:
                return new PrintMgmtNode_VendTable();

            case PrintMgmtNodeType::InventTransferTable:
                return new PrintMgmtNode_InventTransferTable();

            case PrintMgmtNodeType::Invent:
                return PrintMgmtNode_Invent::construct();

            case PrintMgmtNodeType::PurchRFQTable:
                return new PrintMgmtNode_PurchRFQTable();

            case PrintMgmtNodeType::PurchRFQVendLink:
                return new PrintMgmtNode_PurchRFQVendLink();

            case PrintMgmtNodeType::SalesAgreement:
                return new PrintMgmtNode_SalesAgreement();

            case PrintMgmtNodeType::PurchAgreement:
                return new PrintMgmtNode_PurchAgreement();

            // <GBR>
            case PrintMgmtNodeType::Bank:
                return new PrintMgmtNode_Bank_BR();

            case PrintMgmtNodeType::BankAccountTable:
                return new PrintMgmtNode_BankAccountTable_BR();

            case PrintMgmtNodeType::Ledger:
                return new PrintMgmtNode_Ledger();
            // </GBR>

            // <GEEU>
            case PrintMgmtNodeType::SalesAdvanceInvoice:
                return new PrintMgmtNode_SalesAdvanceInvoice();

            case PrintMgmtNodeType::PurchaseAdvanceInvoice:
                return new PrintMgmtNode_PurchaseAdvanceInvoice();
            // </GEEU>

            case PrintMgmtNodeType::WHS:
                return new WHSPrintMgmtNode_WHS();
            case PrintMgmtNodeType::TMS:
                return new TMSPrintMgmtNode_TMS();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultReportFormatDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the getDefaultReportFormatDelegate method of the <c>PrintMgmtDocType</c> class.
    /// </summary>
    /// <param name = "_docType"><c>PrintMgmtDocumentType</c> enumeration value.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDocType), delegatestr(PrintMgmtDocType, getDefaultReportFormatDelegate))]
    public static void getDefaultReportFormatDelegateHandler(PrintMgmtDocumentType _docType, EventHandlerResult _result)
    {
        //if another delegate handler has already set a value, pass it up
        if (_result.result() != null)
            return;

        PrintMgmtReportFormatName formatName = PrintMgmtDelegatesHandler::getDefaultReportFormat(_docType);

        if (formatName)
        {
            _result.result(formatName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultReportFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report format value.
    /// </summary>
    /// <param name = "_docType">The <c>PrintMgmtDocumentType</c> enumeration value.</param>
    /// <returns>The report format value.</returns>
    protected static PrintMgmtReportFormatName getDefaultReportFormat(PrintMgmtDocumentType _docType)
    {
        // <GEEU>
        #ISOCountryRegionCodes
        // </GEEU>

        switch (_docType)
        {
            case PrintMgmtDocumentType::PurchaseOrderInvoice:
                // <GEELT>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
                {
                    return ssrsReportStr(VendInvoiceDocument, ReportLT);
                }
                // </GEELT>

                // <GEELV>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
                {
                    return ssrsReportStr(VendInvoiceDocument, ReportLV);
                }
                // </GEELV>

                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(VendInvoiceDocument, ReportCZ);
                }
                // </GEECZ>

                // <GEEHU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(VendInvoiceDocument, ReportHU);
                }
                // </GEEHU>

                // <GMY>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00007, funcName());
                    return ssrsReportStr(VendInvoiceDocument, ReportMY);
                }
                // </GMY>

                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    return ssrsReportStr(VendInvoiceDocument_IN, Report);
                }
                // </GIN>

                return ssrsReportStr(VendInvoiceDocument, Report);

            case PrintMgmtDocumentType::PurchaseOrderPackingSlip:
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(PurchPackingSlip, ReportCZ);
                }
                // </GEECZ>

                return ssrsReportStr(PurchPackingSlip, Report);

            case PrintMgmtDocumentType::PurchaseOrderReceiptsList:
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(PurchReceiptsList, ReportCZ);
                }
                // </GEECZ>

                return ssrsReportStr(PurchReceiptsList, Report);

            case PrintMgmtDocumentType::PurchaseOrderRequisition:
            case PrintMgmtDocumentType::PurchaseOrderConfirmationRequest:
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(PurchPurchaseOrder, ReportCZ);
                }
                // </GEECZ>

                // <GEEHU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(PurchPurchaseOrder, ReportHU);
                }
                // </GEEHU>

                return ssrsReportStr(PurchPurchaseOrder, Report);

            case PrintMgmtDocumentType::PurchRFQ:
            case PrintMgmtDocumentType::PurchRFQAccept:
            case PrintMgmtDocumentType::PurchRFQReject:
            case PrintMgmtDocumentType::PurchRFQReturn:
                return ssrsReportStr(RFQSend, Report);

            case PrintMgmtDocumentType::SalesOrderInvoice:
                // <GEEEE>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoEE]))
                {
                    return ssrsReportStr(SalesInvoice, ReportEE);
                }
                // </GEEEE>
                // <GEELT>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
                {
                    return ssrsReportStr(SalesInvoice, ReportLT);
                }
                // </GEELT>
                // <GEEHU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(SalesInvoice, ReportHU);
                }
                // </GEEHU>
                // <GEELV>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
                {
                    return ssrsReportStr(SalesInvoice, ReportLV);
                }
                // </GEELV>
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(SalesInvoice, ReportCZ);
                }
                // </GEECZ>
                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00022, funcName());
                    return ssrsReportStr(SalesInvoice, ReportPL);
                }
                // </GEEPL>
                // <GTH>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
                {
                    return ssrsReportStr(SalesInvoice, ReportTH);
                }
                // </GTH>
                // <GMY>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00005, funcName());
                    if (TaxParameters::find().GSTInvoiceFormat_MY == TaxGSTInvoiceFormat_MY::Full)
                    {
                        return ssrsReportStr(SalesInvoice, ReportFull_MY);
                    }
                    else
                    {
                        return ssrsReportStr(SalesInvoice, ReportSimplified_MY);
                    }
                }
                // </GMY>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00023, funcName());
                    return ssrsReportStr(SalesInvoice, ReportFR);
                }
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    return ssrsReportStr(SalesInvoice_IN, Report);
                }
                // </GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
                    && (FeatureStateProvider::isFeatureEnabled(InvoicingPerPackingSlipFeature::instance())
                        || FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance())))
                {
                    return ssrsReportStr(SalesInvoice, Report_IT);
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
                    && CustInvoiceDefaultReportFormat_JPFlight::instance().isEnabled())
                {
                    return ssrsReportStr(SalesInvoice, Report_JP);
                }

                return ssrsReportStr(SalesInvoice, Report);

            case PrintMgmtDocumentType::CustDebitCreditNote:
                return ssrsReportStr(CustDebitCreditNote, Design);

            case PrintMgmtDocumentType::SalesFreeTextInvoice:
                // <GEEEE>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoEE]))
                {
                    return ssrsReportStr(FreeTextInvoice, ReportEE);
                }
                // </GEEEE>
                // <GEELT>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
                {
                    return ssrsReportStr(FreeTextInvoice, ReportLT);
                }
                // </GEELT>
                // <GEEHU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(FreeTextInvoice, ReportHU);
                }
                // </GEEHU>
                // <GEELV>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
                {
                    return ssrsReportStr(FreeTextInvoice, ReportLV);
                }
                // </GEELV>
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(FreeTextInvoice, ReportCZ);
                }
                // </GEECZ>
                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00022, funcName());
                    return ssrsReportStr(FreeTextInvoice, ReportPL);
                }
                // </GEEPL>
                // <GTH>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
                {
                    return ssrsReportStr(FreeTextInvoice, ReportTH);
                }
                // </GTH>
                // <GIN>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    return ssrsReportStr(FreeTextInvoice, ReportIN);
                }
                // </GIN>
                // <GMY>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00005, funcName());
                    if (TaxParameters::find().GSTInvoiceFormat_MY == TaxGSTInvoiceFormat_MY::Full)
                    {
                        return ssrsReportStr(FreeTextInvoice, ReportFull_MY);
                    }
                    else
                    {
                        return ssrsReportStr(FreeTextInvoice, ReportSimplified_MY);
                    }
                }
                // </GMY>

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
                {
                    return ssrsReportStr(FreeTextInvoice, ReportFR);
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
                {
                    return ssrsReportStr(FreeTextInvoice, Report_IT);
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP])
                    && CustInvoiceDefaultReportFormat_JPFlight::instance().isEnabled())
                {
                    return ssrsReportStr(FreeTextInvoice, Report_JP);
                }

                return ssrsReportStr(FreeTextInvoice, Report);

            // <GEEHU>
            case PrintMgmtDocumentType::TaxReimburstmentSlip_HU:
                return ssrsReportStr(TaxReimbursementSlip_HU, Report);
            // </GEEHU>

            case PrintMgmtDocumentType::InventPickList:
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(WMSPickingList_OrderPick, ReportCZ);
                }
                // </GEECZ>
                return ssrsReportStr(WMSPickingList_OrderPick, Report);

            case PrintMgmtDocumentType::SalesOrderPackingSlip:
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(SalesPackingSlip, ReportCZ);
                }
                // </GEECZ>

                // <GEELT>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
                {
                    return ssrsReportStr(SalesPackingSlip, ReportLT);
                }
                // </GEELT>

                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00022, funcName());
                    return ssrsReportStr(SalesPackingSlip, ReportPL);
                }
                // </GEEPL>

                // <GTH>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
                {
                    return ssrsReportStr(SalesPackingSlip, ReportTH);
                }
                // </GTH>

                return ssrsReportStr(SalesPackingSlip, Report);

            case PrintMgmtDocumentType::SalesOrderConfirmation:
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(SalesConfirm, ReportCZ);
                }
                // </GEECZ>

                // <GEEHU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(SalesConfirm, ReportHU);
                }
                // </GEEHU>

                return ssrsReportStr(SalesConfirm, Report);

            case PrintMgmtDocumentType::Confirmation:
                return ssrsReportStr(SalesQuotationConfirmation, Report);

            case PrintMgmtDocumentType::Quotation:
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(SalesQuotation, ReportCZ);
                }
                // </GEECZ>

                // <GEEHU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(SalesQuotation, ReportHU);
                }
                // </GEEHU>

                return ssrsReportStr(SalesQuotation, Report);

            case PrintMgmtDocumentType::ProjectInvoice:
                // <GEELT>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
                {
                    return ssrsReportStr(ProjInvoice, ReportLT);
                }
                // </GEELT>

                // <GEEHU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(ProjInvoice, ReportHU);
                }
                // </GEEHU>

                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(ProjInvoice, ReportCZ);
                }
                // </GEECZ>

                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00022, funcName());
                    return ssrsReportStr(ProjInvoice, ReportPL);
                }
                // </GEEPL>

                return ssrsReportStr(ProjInvoice, Report);

            case PrintMgmtDocumentType::SIProjInvoice:
                // <GEEEU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00022, funcName());
                    return ssrsReportStr(PSAProjInvoice, ReportPL);
                }
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
                {
                    return ssrsReportStr(PSAProjInvoice, ReportLT);
                }
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(PSAProjInvoice, ReportHU);
                }
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(PSAProjInvoice, ReportCZ);
                }
                // </GEEEU>
                // <GMY>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00005, funcName());
                    if (TaxParameters::find().GSTInvoiceFormat_MY == TaxGSTInvoiceFormat_MY::Full)
                    {
                        return ssrsReportStr(PSAProjInvoice, ReportFull_MY);
                    }
                    else
                    {
                        return ssrsReportStr(PSAProjInvoice, ReportSimplified_MY);
                    }
                }
                // </GMY>

                // <GTH>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
                {
                    return ssrsReportStr(PSAProjInvoice, ReportTH);
                }
                // </GTH>

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
                {
                    return ssrsReportStr(PSAProjInvoice, Report_IT);
                }

                return ssrsReportStr(PSAProjInvoice, Report);

            case PrintMgmtDocumentType::SIProjInvoiceWithBR:
                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00022, funcName());
                    return ssrsReportStr(PSAContractLineInvoice, ReportPL);
                }
                // </GEEPL>

                // <GEEHU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(PSAContractLineInvoice, ReportHU);
                }
                // </GEEHU>
                // <GEELT>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
                {
                    return ssrsReportStr(PSAContractLineInvoice, ReportLT);
                }
                // </GEELT>
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(PSAContractLineInvoice, ReportCZ);
                }
                // </GEECZ>
                // <GMY>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00005, funcName());
                    if (TaxParameters::find().GSTInvoiceFormat_MY == TaxGSTInvoiceFormat_MY::Full)
                    {
                        return ssrsReportStr(PSAContractLineInvoice, ReportFull_MY);
                    }
                    else
                    {
                        return ssrsReportStr(PSAContractLineInvoice, ReportSimplified_MY);
                    }
                }
                // </GMY>
                // <GTH>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
                {
                    return ssrsReportStr(PSAContractLineInvoice, ReportTH);
                }
                // </GTH>

                return ssrsReportStr(PSAContractLineInvoice, Report);

            case PrintMgmtDocumentType::SIManagedProjInvoice:
                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00022, funcName());
                    return ssrsReportStr(PSAManageInvoice, ReportPL);
                }
                // </GEEPL>
                // <GEEHU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(PSAManageInvoice, ReportHU);
                }
                // </GEEHU>
                // <GEELT>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
                {
                    return ssrsReportStr(PSAManageInvoice, ReportLT);
                }
                // </GEELT>
                // <GEECZ>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(PSAManageInvoice, ReportCZ);
                }
                // </GEECZ>

                return ssrsReportStr(PSAManageInvoice, Report);

            case PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice:
                // <GEEEU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00022, funcName());
                    return ssrsReportStr(PSACustRetentionReleaseInvoice, ReportPL);
                }
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
                {
                    return ssrsReportStr(PSACustRetentionReleaseInvoice, ReportLT);
                }
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00012, funcName());
                    return ssrsReportStr(PSACustRetentionReleaseInvoice, ReportHU);
                }
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00017, funcName());
                    return ssrsReportStr(PSACustRetentionReleaseInvoice, ReportCZ);
                }
                // </GEEEU>
                // <GTH>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
                {
                    return ssrsReportStr(PSACustRetentionReleaseInvoice, ReportTH);
                }
                // </GTH>

                return ssrsReportStr(PSACustRetentionReleaseInvoice, Report);

            case PrintMgmtDocumentType::ProjectQuotation:
                return ssrsReportStr(PSAQuotations, Report);

            case PrintMgmtDocumentType::CustAccountStatement:
                return ssrsReportStr(CustAccountStatementExt, Report);

            case PrintMgmtDocumentType::CustAccountStatement_FR:
                return ssrsReportStr(CustAccountStatement_FR, Report);

            case PrintMgmtDocumentType::CustInterestNote:
                return ssrsReportStr(CustInterestNote, Report);

            case PrintMgmtDocumentType::CustCollectionLetter:
                return ssrsReportStr(CustCollectionJour, Report);

            case PrintMgmtDocumentType::SalesAgreementConfirmation:
            case PrintMgmtDocumentType::PurchAgreementConfirmation:
                return ssrsReportStr(AgreementConfirmation, Report);

            // <GBR>
            case PrintMgmtDocumentType::ComplementaryInvoice_BR:
            case PrintMgmtDocumentType::TransferOrderFiscalDoc_BR:
                return ssrsReportStr(FiscalDocument_BR, Report);

            case PrintMgmtDocumentType::ProjDebitNote_BR:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00076, funcName());
                return ssrsReportStr(ProjDebitNote_BR, Report);
            // </GBR>

            // <GEEU>
            case PrintMgmtDocumentType::SalesAdvanceInvoice:
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00034, funcName());
                    return ssrsReportStr(CustAdvanceInvoice, ReportPL);
                }

                return ssrsReportStr(CustAdvanceInvoice, Report);

            case PrintMgmtDocumentType::PurchaseAdvanceInvoice:
                return ssrsReportStr(VendAdvanceInvoice, Report);
            // </GEEU>

            // <GEERU>
            case PrintMgmtDocumentType::WMSBillOfLading_RU:
                return ssrsReportStr(WMSBillOfLading, Report);
            // </GEERU>

            // Add the WHS reports.
            case PrintMgmtDocumentType::WHSPickListShippingWave:
            case PrintMgmtDocumentType::WHSPickListShippingLoad:
            case PrintMgmtDocumentType::WHSPickListShippingShipment:
                return ssrsReportStr(WHSPickListShipping, Report);

            case PrintMgmtDocumentType::WHSPickListProd:
                return ssrsReportStr(WHSPickListProduction, Report);

            case PrintMgmtDocumentType::WHSLoadList:
                return ssrsReportStr(WHSLoadList, Report);

            case PrintMgmtDocumentType::WHSContainerContents:
                return ssrsReportStr(WHSContainerContents, Report);

            case PrintMgmtDocumentType::WHSBOL:
                return ssrsReportStr(WHSBillOfLading, Report);

            // Add the TMS Reports
            case PrintMgmtDocumentType::TMSCommercialInvoice:
                return ssrsReportStr(TMSCommercialInvoice, Report);

            case PrintMgmtDocumentType::TMSCertificateOfOrigin:
                return ssrsReportStr(TMSCertificateOfOrigin, Report);

            case PrintMgmtDocumentType::TMSLoadTender:
                return ssrsReportStr(TMSLoadTender, Report);

            case PrintMgmtDocumentType::TMSRoute:
                return ssrsReportStr(TMSRoute, Report);

            case PrintMgmtDocumentType::TMSUsmcaCertificateOfOrigin:
                return ssrsReportStr(TmsUsmcaCertificateOfOrigin, Report);

            case PrintMgmtDocumentType::VendPaymAdvice:
                if (BankPaymAdviceReportV2FeatureExposure::isEnabled())
                {
                    return ssrsReportStr(BankPaymAdviceVendV2, Report);
                }
                else
                {
                    return ssrsReportStr(BankPaymAdviceVend, Report);
                }

            case PrintMgmtDocumentType::CustPaymAdvice:
                if (BankPaymAdviceReportV2FeatureExposure::isEnabled())
                {
                    return ssrsReportStr(BankPaymAdviceCustV2, Report);
                }
                else
                {
                    return ssrsReportStr(BankPaymAdviceCust, Report);
                }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRangeFieldsDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the getQueryRangeFieldsDelegate method of the <c>PrintMgmtDocType</c> class.
    /// </summary>
    /// <param name = "_docType"><c>PrintMgmtDocumentType</c> enumeration value.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDocType), delegatestr(PrintMgmtDocType, getQueryRangeFieldsDelegate))]
    public static void getQueryRangeFieldsDelegateHandler(PrintMgmtDocumentType _docType, EventHandlerResult _result)
    {
        //if another delegate handler has already set a value, pass it up
        if (_result.result() != null)
            return;

        _result.result(PrintMgmtDelegatesHandler::getQueryRangeFields(_docType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRangeFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the appropriate query range fields for the current document type.
    /// </summary>
    /// <returns>
    ///    A list of <c>fieldnum</c> fields for the appropriate query table that is based on the document type.
    /// </returns>
    /// <remarks>
    ///    The <c>fieldnum</c> fields are returned in the order they are intended to be displayed. They all
    ///    correspond to the table referenced by the <c>getQueryTableId</c> method of the same instance of the
    ///    <c>PrintMgmtDocType</c> class.
    /// </remarks>
    protected static List getQueryRangeFields(PrintMgmtDocumentType _docType)
    {
        List fields = new List(Types::Integer);
        boolean isTradeIntercompanyEnabled = isConfigurationkeyEnabled(configurationKeyNum(TradeInterCompany));

        switch (_docType)
        {
            case PrintMgmtDocumentType::SIProjInvoice,
                PrintMgmtDocumentType::SIProjInvoiceWithBR,
                PrintMgmtDocumentType::SIManagedProjInvoice,
                PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice:
            case PrintMgmtDocumentType::ProjectInvoice:
                fields.addEnd(fieldNum(ProjInvoiceJour, InvoiceAccount));
                fields.addEnd(fieldNum(ProjInvoiceJour, ProjInvoiceId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(ProjInvoiceJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::PurchaseOrderInvoice:
                fields.addEnd(fieldNum(VendInvoiceJour, InvoiceAccount));
                fields.addEnd(fieldNum(VendInvoiceJour, PurchId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(VendInvoiceJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::PurchaseOrderPackingSlip:
                fields.addEnd(fieldNum(VendPackingSlipJour, OrderAccount));
                fields.addEnd(fieldNum(VendPackingSlipJour, PurchId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(VendPackingSlipJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::PurchaseOrderReceiptsList:
                fields.addEnd(fieldNum(VendReceiptsListJour, VendAccount));
                fields.addEnd(fieldNum(VendReceiptsListJour, PurchId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(VendReceiptsListJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::PurchaseOrderRequisition:
                fields.addEnd(fieldNum(VendPurchOrderJour, OrderAccount));
                fields.addEnd(fieldNum(VendPurchOrderJour, PurchaseOrderId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(VendPurchOrderJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::PurchaseOrderConfirmationRequest:
                fields.addEnd(fieldNum(PurchConfirmationRequestJour, OrderAccount));
                break;

            case PrintMgmtDocumentType::PurchRFQ,
                PrintMgmtDocumentType::PurchRFQAccept,
                 PrintMgmtDocumentType::PurchRFQReject,
                 PrintMgmtDocumentType::PurchRFQReturn:

                fields.addEnd(fieldNum(VendRFQJour, rfqId));
                fields.addEnd(fieldNum(VendRFQJour, Requester));
                fields.addEnd(fieldNum(VendRFQJour, VendAccount));
                break;

            case PrintMgmtDocumentType::SalesOrderInvoice,
                PrintMgmtDocumentType::CustDebitCreditNote:
                fields.addEnd(fieldNum(CustInvoiceJour, InvoiceAccount));
                fields.addEnd(fieldNum(CustInvoiceJour, SalesId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(CustInvoiceJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::SalesFreeTextInvoice:
                fields.addEnd(fieldNum(CustInvoiceJour, OrderAccount));
                fields.addEnd(fieldNum(CustInvoiceJour, InvoiceId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(CustInvoiceJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::InventPickList:
                fields.addEnd(fieldNum(WMSPickingRoute, PickingRouteID));
                fields.addEnd(fieldNum(WMSPickingRoute, PrintMgmtSiteId));
                fields.addEnd(fieldNum(WMSPickingRoute, InventLocationId));
                fields.addEnd(fieldNum(WMSPickingRoute, PickingAreaId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(WMSPickingRoute, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::SalesOrderPackingSlip:
                fields.addEnd(fieldNum(CustPackingSlipJour, OrderAccount));
                fields.addEnd(fieldNum(CustPackingSlipJour, SalesId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(CustPackingSlipJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::SalesOrderConfirmation:
                fields.addEnd(fieldNum(CustConfirmJour, OrderAccount));
                fields.addEnd(fieldNum(CustConfirmJour, SalesId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(CustConfirmJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::Confirmation:
                fields.addEnd(fieldNum(CustQuotationConfirmJour, OrderAccount));
                fields.addEnd(fieldNum(CustQuotationConfirmJour, QuotationConfirmId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(CustQuotationConfirmJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::ProjectQuotation:
            case PrintMgmtDocumentType::Quotation:
                fields.addEnd(fieldNum(CustQuotationJour, OrderAccount));
                fields.addEnd(fieldNum(CustQuotationJour, QuotationId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(CustQuotationJour, InterCompanyPosted));
                }
                break;

            // <GEERU>
            case PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU :
                fields.addEnd(fieldNum(CustInvoice4PaymJour_RU, InvoiceAccount));
                fields.addEnd(fieldNum(CustInvoice4PaymJour_RU, SalesId));
                break;

            case PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU :
                fields.addEnd(fieldNum(VendInvoice4PaymJour_RU, InvoiceAccount));
                fields.addEnd(fieldNum(VendInvoice4PaymJour_RU, PurchId));
                break;

            case PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU :
                fields.addEnd(fieldNum(CustInvoice4PaymJour_RU, OrderAccount));
                fields.addEnd(fieldNum(CustInvoice4PaymJour_RU, Invoice4PaymId));
                break;

            case PrintMgmtDocumentType::WMSBillOfLading_RU              :
            case PrintMgmtDocumentType::WMSBilOfLadingTranspDocument_RU :
                fields.addEnd(fieldNum(WMSBillOfLading, CustAccount));
                fields.addEnd(fieldNum(WMSBillOfLading, BillOfLadingId));
                break;
            // </GEERU>

            case PrintMgmtDocumentType::CustAccountStatement:
                fields.addEnd(fieldNum(CustTable, AccountNum));
                fields.addEnd(fieldNum(CustTable, CustGroup));
                fields.addEnd(fieldNum(CustTable, AccountStatement));
                break;

            case PrintMgmtDocumentType::CustAccountStatement_FR:
                fields.addEnd(fieldNum(CustTable, AccountNum));
                fields.addEnd(fieldNum(CustTable, CustGroup));
                fields.addEnd(fieldNum(CustTable, AccountStatement));
                break;

            case PrintMgmtDocumentType::CustCollectionLetter:
                fields.addEnd(fieldNum(CustCollectionLetterJour, AccountNum));
                fields.addEnd(fieldNum(CustCollectionLetterJour, CollectionLetterNum));
                fields.addEnd(fieldNum(CustCollectionLetterJour, CollectionLetterCode));
                fields.addEnd(fieldNum(CustCollectionLetterJour, PrintDate));
                break;

            case PrintMgmtDocumentType::CustInterestNote:
                fields.addEnd(fieldNum(CustInterestJour, AccountNum));
                fields.addEnd(fieldNum(CustInterestJour, InterestNote));
                fields.addEnd(fieldNum(CustInterestJour, Status));
                fields.addEnd(fieldNum(CustInterestJour, Printed));
                break;

            case PrintMgmtDocumentType::SalesAgreementConfirmation:
                fields.addEnd(fieldNum(SalesAgreementHeaderHistory, CustAccount));
                fields.addEnd(fieldNum(SalesAgreementHeaderHistory, SalesNumberSequence));
                break;

            case PrintMgmtDocumentType::PurchAgreementConfirmation:
                fields.addEnd(fieldNum(PurchAgreementHeaderHistory, VendAccount));
                fields.addEnd(fieldNum(PurchAgreementHeaderHistory, PurchNumberSequence));
                break;

            // <GBR>
            case PrintMgmtDocumentType::TaxFiscalDocument_BR :
                fields.addEnd(fieldNum(TaxFiscalDocument_BR, Model));
                fields.addEnd(fieldNum(TaxFiscalDocument_BR, Series));
                break;

            case PrintMgmtDocumentType::BankCheque:
                fields.addEnd(fieldNum(BankChequeTable, AccountID));
                break;

            case PrintMgmtDocumentType::TransferOrderFiscalDoc_BR :
            case PrintMgmtDocumentType::ComplementaryInvoice_BR:
                fields.addEnd(fieldNum(FiscalDocument_BR, Model));
                fields.addEnd(fieldNum(FiscalDocument_BR, FiscalDocumentSeries));
                break;
            // </GBR>

            // <GEEU>
            case PrintMgmtDocumentType::SalesAdvanceInvoice:
                fields.addEnd(fieldNum(CzCustAdvanceInvoiceTable, SalesId));
                fields.addEnd(fieldNum(CzCustAdvanceInvoiceTable, CustPostingProfile));
                break;

            case PrintMgmtDocumentType::PurchaseAdvanceInvoice:
                fields.addEnd(fieldNum(CzVendAdvanceInvoiceTable, InvoiceAccount));
                fields.addEnd(fieldNum(CzVendAdvanceInvoiceTable, InvoiceDate));
                break;
            // </GEEU>

            // Add the WHS reports.
            case PrintMgmtDocumentType::WHSPickListShippingWave:
            case PrintMgmtDocumentType::WHSPickListProd:
                fields.addEnd(fieldNum(WHSWaveTable, WaveId));
                break;

            case PrintMgmtDocumentType::WHSPickListShippingShipment:
                fields.addEnd(fieldNum(WHSShipmentTable, ShipmentId));
                break;

            case PrintMgmtDocumentType::WHSBOL:
                fields.addEnd(fieldNum(WHSBillOfLading, ShipmentId));
                break;

            case PrintMgmtDocumentType::WHSPickListShippingLoad:
                fields.addEnd(fieldNum(WHSLoadTable, LoadId));
                break;

            case PrintMgmtDocumentType::WHSLoadList:
                fields.addEnd(fieldNum(WHSLoadTable, LoadId));
                break;

            case PrintMgmtDocumentType::WHSContainerContents:
                fields.addEnd(fieldNum(WHSContainerTable, ContainerId));
                break;

            case PrintMgmtDocumentType::WHSSalesInvoiceByLoad:
                fields.addEnd(fieldNum(CustInvoiceJour, InvoiceAccount));
                fields.addEnd(fieldNum(CustInvoiceJour, SalesId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(CustInvoiceJour, InterCompanyPosted));
                }
                break;

            case PrintMgmtDocumentType::WHSSalesConfirmByLoad:
                fields.addEnd(fieldNum(CustConfirmJour, OrderAccount));
                fields.addEnd(fieldNum(CustConfirmJour, SalesId));

                if (isTradeIntercompanyEnabled)
                {
                    fields.addEnd(fieldNum(CustConfirmJour, InterCompanyPosted));
                }
                break;

            // Add the TMS reports.
            case PrintMgmtDocumentType::TMSCommercialInvoice:
                fields.addEnd(fieldNum(WHSShipmentTable, ShipmentId));
                break;

            case PrintMgmtDocumentType::TMSCertificateOfOrigin:
                fields.addEnd(fieldNum(WHSShipmentTable, ShipmentId));
                break;

            case PrintMgmtDocumentType::TMSRoute:
                fields.addEnd(fieldNum(TMSRoute, RouteCode));
                break;

            case PrintMgmtDocumentType::TMSLoadTender:
                fields.addEnd(fieldNum(WHSLoadTable, LoadId));
                break;

            case PrintMgmtDocumentType::TMSUsmcaCertificateOfOrigin:
                fields.addEnd(fieldNum(WHSShipmentTable, ShipmentId));
                break;

            case PrintMgmtDocumentType::VendPaymAdvice:
                fields.addEnd(fieldNum(BankPaymAdviceVendTmp, SessionId));
                break;

            case PrintMgmtDocumentType::CustPaymAdvice:
                fields.addEnd(fieldNum(BankPaymAdviceCustTmp, SessionId));
                break;
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryTableIdDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the getQueryTableIdDelegate method of the <c>PrintMgmtDocType</c> class.
    /// </summary>
    /// <param name = "_docType"><c>PrintMgmtDocumentType</c> enumeration value.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDocType), delegatestr(PrintMgmtDocType, getQueryTableIdDelegate))]
    public static void getQueryTableIdDelegateHandler(PrintMgmtDocumentType _docType, EventHandlerResult _result)
    {
        //if another delegate handler has already set a value, pass it up
        if (_result.hasResult() && _result.result() != -1)
            return;
        
        TableId tableId = PrintMgmtDelegatesHandler::getQueryTableId(_docType);

        if (tableId)
        {
            _result.result(tableId);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table that is used to define queries for the document type.
    /// </summary>
    /// <returns>
    ///    The table ID of the table this document type queries at runtime.
    /// </returns>
    protected static TableId getQueryTableId(PrintMgmtDocumentType _docType)
    {
        TableId tableId;

        switch (_docType)
        {
            case PrintMgmtDocumentType::PurchaseOrderInvoice:
                tableId = tableNum(VendInvoiceJour);
                break;

            case PrintMgmtDocumentType::PurchaseOrderPackingSlip:
                tableId = tableNum(VendPackingSlipJour);
                break;

            case PrintMgmtDocumentType::PurchaseOrderReceiptsList:
                tableId = tableNum(VendReceiptsListJour);
                break;

            case PrintMgmtDocumentType::PurchaseOrderRequisition:
                tableId = tableNum(VendPurchOrderJour);
                break;
            case PrintMgmtDocumentType::PurchaseOrderConfirmationRequest:
                tableId = tableNum(PurchConfirmationRequestJour);
                break;

            case PrintMgmtDocumentType::PurchRFQ,
                PrintMgmtDocumentType::PurchRFQAccept,
                 PrintMgmtDocumentType::PurchRFQReject,
                  PrintMgmtDocumentType::PurchRFQReturn:
                tableId = tableNum(VendRFQJour);
                break;

            case PrintMgmtDocumentType::SalesOrderInvoice,
                PrintMgmtDocumentType::CustDebitCreditNote,
                PrintMgmtDocumentType::SalesFreeTextInvoice,
                PrintMgmtDocumentType::TaxReimburstmentSlip_HU:
                tableId = tableNum(CustInvoiceJour);
                break;

            case PrintMgmtDocumentType::InventPickList:
                tableId = tableNum(WMSPickingRoute);
                break;

            case PrintMgmtDocumentType::SalesOrderPackingSlip:
                tableId = tableNum(CustPackingSlipJour);
                break;

            case PrintMgmtDocumentType::SalesOrderConfirmation:
                tableId = tableNum(CustConfirmJour);
                break;

            case PrintMgmtDocumentType::Confirmation:
                tableId = tableNum(CustQuotationConfirmJour);
                break;

            case PrintMgmtDocumentType::ProjectQuotation:
            case PrintMgmtDocumentType::Quotation:
                tableId = tableNum(CustQuotationJour);
                break;

            case PrintMgmtDocumentType::SIProjInvoice,
                PrintMgmtDocumentType::SIProjInvoiceWithBR,
             PrintMgmtDocumentType::SIManagedProjInvoice,
             PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice:
        case PrintMgmtDocumentType::ProjectInvoice:
                tableId = tableNum(ProjInvoiceJour);
                break;

            // <GEERU>
            case PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU,
            PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU :
                tableId = tableNum(CustInvoice4PaymJour_RU);
                break;

            case PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU :
                tableId = tableNum(VendInvoice4PaymJour_RU);
                break;

            case PrintMgmtDocumentType::WMSBillOfLading_RU,
            PrintMgmtDocumentType::WMSBilOfLadingTranspDocument_RU :
            tableId = tableNum(WMSBillOfLading);
                break;
            // </GEERU>

            case PrintMgmtDocumentType::CustAccountStatement,
                PrintMgmtDocumentType::CustAccountStatement_FR:
                tableId = tableNum(CustTable);
                break;

            case PrintMgmtDocumentType::CustInterestNote:
                tableId = tableNum(CustInterestJour);
                break;

            case PrintMgmtDocumentType::CustCollectionLetter:
                tableId = tableNum(CustCollectionLetterJour);
                break;

            case PrintMgmtDocumentType::SalesAgreementConfirmation:
                tableId = tableNum(SalesAgreementHeaderHistory);
                break;

            case PrintMgmtDocumentType::PurchAgreementConfirmation:
                tableId = tableNum(PurchAgreementHeaderHistory);
                break;

            // <GBR>
            case PrintMgmtDocumentType::TaxFiscalDocument_BR:
                tableId = tableNum(TaxFiscalDocument_BR);
                break;

            case PrintMgmtDocumentType::BankCheque:
                tableId = tableNum(BankChequeTable);
                break;

            case PrintMgmtDocumentType::ComplementaryInvoice_BR:
            case PrintMgmtDocumentType::TransferOrderFiscalDoc_BR:
                tableId = tableNum(FiscalDocument_BR);
                break;

            case PrintMgmtDocumentType::ProjDebitNote_BR:
                tableId = tableNum(ProjInvoiceJour);
                break;
            // </GBR>
            // <GEERU>
            case PrintMgmtDocumentType::SalesFreeTextFacture:
            case PrintMgmtDocumentType::SalesOrderFacture:
            case PrintMgmtDocumentType::PurchaseOrderFacture:
                tableId = tableNum(FactureJour_RU);
                break;
            case PrintMgmtDocumentType::SalesOrderBailee:
                tableId = tableNum(CustInvoiceJour);
                break;
            case PrintMgmtDocumentType::PurchaseOrderBailee:
                tableId = tableNum(VendInvoiceJour);
                break;
            // </GEERU>

            // <GEEU>
            case PrintMgmtDocumentType::SalesAdvanceInvoice:
                tableId = tableNum(CzCustAdvanceInvoiceTable);
                break;

            case PrintMgmtDocumentType::PurchaseAdvanceInvoice:
                tableId = tableNum(CzVendAdvanceInvoiceTable);
                break;
            // </GEEU>

            // Add the WHS reports.
            case PrintMgmtDocumentType::WHSPickListShippingWave:
            case PrintMgmtDocumentType::WHSPickListProd:
                tableId = tableNum(WHSWaveTable);
                break;

            case PrintMgmtDocumentType::WHSPickListShippingLoad:
                tableId = tableNum(WHSLoadTable);
                break;

            case PrintMgmtDocumentType::WHSPickListShippingShipment:
                tableId = tableNum(WHSShipmentTable);
                break;

            case PrintMgmtDocumentType::WHSBOL:
                tableId = tableNum(WHSBillOfLading);
                break;

            case PrintMgmtDocumentType::WHSLoadList:
                tableId = tableNum(WHSLoadTable);
                break;

            case PrintMgmtDocumentType::WHSContainerContents:
                tableId = tableNum(WHSContainerTable);
                break;

            case PrintMgmtDocumentType::WHSSalesInvoiceByLoad:
                tableId = tableNum(CustInvoiceJour);
                break;

            case PrintMgmtDocumentType::WHSSalesConfirmByLoad:
                tableId = tableNum(CustConfirmJour);
                break;

            // Add the TMS reports.
            case PrintMgmtDocumentType::TMSCommercialInvoice:
                tableId = tableNum(WHSShipmentTable);
                break;

            case PrintMgmtDocumentType::TMSCertificateOfOrigin:
                tableId = tableNum(WHSShipmentTable);
                break;

            case PrintMgmtDocumentType::TMSRoute:
                tableId = tableNum(TMSRoute);
                break;

            case PrintMgmtDocumentType::TMSLoadTender:
                tableId = tableNum(WHSLoadTable);
                break;

            case PrintMgmtDocumentType::TMSUsmcaCertificateOfOrigin:
                tableId = tableNum(WHSShipmentTable);
                break;

            case PrintMgmtDocumentType::VendPaymAdvice:
                tableId = tableNum(BankPaymAdviceVendTmp);
                break;

            case PrintMgmtDocumentType::CustPaymAdvice:
                tableId = tableNum(BankPaymAdviceCustTmp);
                break;
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrintMgmtHierarchyDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the constructPrintMgmtHierarchyDelegate method of the <c>PrintMgmtDelegates</c> class.
    /// </summary>
    /// <param name = "_hierarchyType"><c>PrintMgmtHierarchyType</c> enumeration value.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDelegates), delegatestr(PrintMgmtDelegates, constructPrintMgmtHierarchyDelegate))]
    public static void constructPrintMgmtHierarchyDelegateHandler(PrintMgmtHierarchyType _hierarchyType, EventHandlerResult _result)
    {
        // if another event handler has constructed the node, let is pass
        if (_result.result() != null)
            return;

        PrintMgmtHierarchy printHierarchy = PrintMgmtDelegatesHandler::constructPrintMgmtHierarchy(_hierarchyType);

        if (printHierarchy)
        {
            _result.result(printHierarchy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrintMgmtHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the appropriate <c>PrintMgmtHierarchy</c> class derivative.
    /// </summary>
    /// <param name="_hierarchyType">
    ///    The <c>PrintMgmtHierarchyType</c> enumeration value of the hierarchy being constructed.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PrintMgmtHierarchyType</c> class being requested.
    /// </returns>
    /// <remarks>
    ///    As new <c>PrintMgmtHierarchy</c> types are added, they should be added here also so that they can
    ///    be constructed like the other <c>PrintMgmtHierarchy</c> types. Additional hierarchy types should
    ///    also be defined in the <c>PrintMgmtHierarchyType</c> enumeration.
    /// </remarks>
    private static PrintMgmtHierarchy constructPrintMgmtHierarchy(PrintMgmtHierarchyType _hierarchyType)
    {
        switch (_hierarchyType)
        {
            case PrintMgmtHierarchyType::Sales:
                return new PrintMgmtHierarchy_Sales();

            case PrintMgmtHierarchyType::Purch:
                return new PrintMgmtHierarchy_Purch();

            case PrintMgmtHierarchyType::Project:
                return new PrintMgmtHierarchy_Project();

            case PrintMgmtHierarchyType::Invent:
                return PrintMgmtHierarchy_Invent::construct();

            // <GBR>
            case PrintMgmtHierarchyType::Bank:
                return new PrintMgmtHierarchy_Bank_BR();

            case PrintMgmtHierarchyType::Ledger:
                return new PrintMgmtHierarchy_Ledger();
            // </GBR>

            case PrintMgmtHierarchyType::WHS:
                return new WHSPrintMgmtHierarchy_WHS();
            case PrintMgmtHierarchyType::TMS:
                return new TMSPrintMgmtHierarchy_TMS();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>brazilParametersIsEnabledDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the brazilParametersIsEnabledDelegate method of the <c>PrintMgmtDelegates</c> class.
    /// </summary>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDelegates), delegatestr(PrintMgmtDelegates, brazilParametersIsEnabledDelegate))]
    public static void brazilParametersIsEnabledDelegateHandler(EventHandlerResult _result)
    {
        // if another event handler has executed, let the result pass through
        if (_result.result() != false)
            return;

        if (BrazilParameters::isEnabled())
        {
            _result.result(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTypeDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the getPartyTypeDelegate method of the <c>PrintMgmtDocType</c> class.
    /// </summary>
    /// <param name = "_docType"><c>PrintMgmtDocumentType</c> enumeration value.</param>
    /// <param name = "_jour"><c>Common</c> object containing journal record.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDocType), delegatestr(PrintMgmtDocType, getPartyTypeDelegate))]
    public static void getPartyTypeDelegateHandler(PrintMgmtDocumentType _docType, Common _jour, EventHandlerResult _result)
    {
        if (_result.result() != null)
        {
            return;
        }

        PrintMgmtPrintDestinationPartyType partyType = PrintMgmtDelegatesHandler::getPartyType(_docType, _jour);

        if (partyType != PrintMgmtPrintDestinationPartyType::Unknown)
        {
            _result.result(partyType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the party type for a journal records and the current document type.
    /// </summary>
    /// <param name="_jour">
    /// A journal record.
    /// </param>
    /// <returns>
    /// A member of <c>PrintMgmtPrintDestinationPartyType</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An invalid combination of journal record and document type was found.
    /// </exception>
    protected static PrintMgmtPrintDestinationPartyType getPartyType(PrintMgmtDocumentType _docType, Common _jour = null)
    {
        PrintMgmtPrintDestinationPartyType fiscalDocument_BRParty(FiscalDocument_BR _fiscalDocument_BR)
        {
            switch (_fiscalDocument_BR.FiscalDocumentAccountType)
            {
                case CustVendType_BR::Customer:
                    return PrintMgmtPrintDestinationPartyType::Customer;
                case CustVendType_BR::Vendor:
                    return PrintMgmtPrintDestinationPartyType::Vendor;
            }

            return PrintMgmtPrintDestinationPartyType::Unknown;
        }

        PrintMgmtPrintDestinationPartyType bankChequeTable_ACParty(BankChequeTable _bankChequeTable)
        {
            switch (_bankChequeTable.RecipientType)
            {
                case BankChequeRecipientType::Cust:
                    return PrintMgmtPrintDestinationPartyType::Customer;
                case BankChequeRecipientType::Vend:
                    return PrintMgmtPrintDestinationPartyType::Vendor;
            }

            return PrintMgmtPrintDestinationPartyType::Unknown;
        }

        switch (_docType)
        {
            case PrintMgmtDocumentType::SIProjInvoice:
            case PrintMgmtDocumentType::SIProjInvoiceWithBR:
            case PrintMgmtDocumentType::SIManagedProjInvoice:
            case PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice:
            case PrintMgmtDocumentType::ProjectInvoice:
            case PrintMgmtDocumentType::SalesOrderInvoice:
            case PrintMgmtDocumentType::SalesFreeTextInvoice:
            case PrintMgmtDocumentType::InventPickList:
            case PrintMgmtDocumentType::SalesOrderPackingSlip:
            case PrintMgmtDocumentType::SalesOrderConfirmation:
            case PrintMgmtDocumentType::Confirmation:
            case PrintMgmtDocumentType::ProjectQuotation:
            case PrintMgmtDocumentType::Quotation:
            case PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU:
            case PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU:
            case PrintMgmtDocumentType::WMSBillOfLading_RU:
            case PrintMgmtDocumentType::WMSBilOfLadingTranspDocument_RU:
            case PrintMgmtDocumentType::CustAccountStatement:
            case PrintMgmtDocumentType::CustCollectionLetter:
            case PrintMgmtDocumentType::CustInterestNote:
            case PrintMgmtDocumentType::SalesAgreementConfirmation:
            case PrintMgmtDocumentType::SalesAdvanceInvoice:
            case PrintMgmtDocumentType::CustPaymAdvice:
                return PrintMgmtPrintDestinationPartyType::Customer;

            case PrintMgmtDocumentType::PurchaseOrderInvoice:
            case PrintMgmtDocumentType::PurchaseOrderPackingSlip:
            case PrintMgmtDocumentType::PurchaseOrderReceiptsList:
            case PrintMgmtDocumentType::PurchaseOrderRequisition:
            case PrintMgmtDocumentType::PurchRFQ:
            case PrintMgmtDocumentType::PurchRFQAccept:
            case PrintMgmtDocumentType::PurchRFQReject:
            case PrintMgmtDocumentType::PurchRFQReturn:
            case PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU:
            case PrintMgmtDocumentType::PurchAgreementConfirmation:
            case PrintMgmtDocumentType::PurchaseAdvanceInvoice:
            case PrintMgmtDocumentType::PurchaseOrderConfirmationRequest:
            case PrintMgmtDocumentType::VendPaymAdvice:
                return PrintMgmtPrintDestinationPartyType::Vendor;

            case PrintMgmtDocumentType::ComplementaryInvoice_BR:
            case PrintMgmtDocumentType::TransferOrderFiscalDoc_BR:
                return fiscalDocument_BRParty(_jour);

            case PrintMgmtDocumentType::BankCheque:
                return bankChequeTable_ACParty(_jour);
        }

        return PrintMgmtPrintDestinationPartyType::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailAddressDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the getEmailAddressDelegate method of the <c>PrintMgmtDocType</c> class.
    /// </summary>
    /// <param name = "_docType"><c>PrintMgmtDocumentType</c> enumeration value.</param>
    /// <param name = "_purpose"><c>SrsPrintDestinationToken</c> object.</param>
    /// <param name = "_jour"><c>Common</c> object containing journal record.</param>
    /// <param name = "_printMgmtPrintDestinationTokens"><c>PrintMgmtPrintDestinationTokens</c> object.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDocType), delegatestr(PrintMgmtDocType, getEmailAddressDelegate))]
    public static void getEmailAddressDelegateHandler(PrintMgmtDocumentType _docType, SrsPrintDestinationToken _purpose, Common _jour, PrintMgmtPrintDestinationTokens _printMgmtPrintDestinationTokens, EventHandlerResult _result)
    {
        if (_result.result() != null)
        {
            return;
        }
        _result.result(PrintMgmtDelegatesHandler::getEmailAddress(_docType, _purpose, _jour, _printMgmtPrintDestinationTokens));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the email address for the current document type and journal record.
    /// </summary>
    /// <param name="_purpose">
    ///    The contact's purpose.
    /// </param>
    /// <param name="_jour">
    ///    A journal record.
    /// </param>
    /// <returns>
    ///    A list of email addresses.
    /// </returns>
    /// <remarks>
    /// A list of email addresses is a string consisting of individual email addresses separated by
    /// the value return by method <c>SrsPrintDestinationTokens.parmAddressSeparator</c>.
    /// </remarks>
    protected static str getEmailAddress(PrintMgmtDocumentType _docType, SrsPrintDestinationToken _purpose, Common _jour, PrintMgmtPrintDestinationTokens _printMgmtPrintDestinationTokens)
    {
        PrintMgmtPrintDestinationPartyType partyType;
        CustVendAC ac;
        DirPartyRecId partyRecId;
        CompanyId acCompany;

        if (!_printMgmtPrintDestinationTokens)
        {
            throw error(strFmt("@SYS318601", @"_printMgmtPrintDestinationTokens"));
        }

        if (_jour.TableId == tableNum(CustQuotationJour) && _jour.(fieldNum(CustQuotationJour, BusRelAccount)))
        {
            partyRecId = smmBusRelTable::find(_jour.(fieldNum(CustQuotationJour, BusRelAccount))).Party;
        }
        else
        {
            [partyType, ac] = PrintMgmtDelegatesHandler::getDestinationPartyTypeAndId(_docType, _jour);

            if (PrintMgmtDelegatesHandler::hasDataAreaIdField(_jour))
            {
                partyRecId = PrintMgmtDelegatesHandler::getPartyRecId(partyType, ac, _jour.DataAreaId);
            }
            else
            {
                partyRecId = PrintMgmtDelegatesHandler::getPartyRecId(partyType, ac);
            }
        }
        
        return _printMgmtPrintDestinationTokens.getEmailAddressForParty(partyType, partyRecId, _purpose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDataAreaIdField</Name>
				<Source><![CDATA[
    private static boolean hasDataAreaIdField(Common _common)
    {
        boolean hasDataAreaId;

        if (_common)
        {
            DictTable dictTable = new DictTable(_common.TableId);
            hasDataAreaId = dictTable && dictTable.dataPrCompany();
        }

        return hasDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationPartyTypeAndIdDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the getDestinationPartyTypeAndIdDelegate method of the <c>PrintMgmtDocType</c> class.
    /// </summary>
    /// <param name = "_docType"><c>PrintMgmtDocumentType</c> enumeration value.</param>
    /// <param name = "_jour"><c>Common</c> object containing journal record.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDocType), delegatestr(PrintMgmtDocType, getDestinationPartyTypeAndIdDelegate))]
    public static void getDestinationPartyTypeAndIdDelegateHandler(PrintMgmtDocumentType _docType, Common _jour, EventHandlerResult _result)
    {
        if (_result.result() != null)
        {
            return;
        }

        container partyTypeAndId = PrintMgmtDelegatesHandler::getDestinationPartyTypeAndId(_docType, _jour);

        if (partyTypeAndId)
        {
            _result.result(partyTypeAndId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationPartyTypeAndId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the party type and account number for current document type and a journal record.
    /// </summary>
    /// <param name="_docType">
    /// The <c>PrintMgmtDocumentType</c> enumeration value.
    /// </param>
    /// <param name="_jour">
    /// A journal record.
    /// </param>
    /// <returns>
    /// A party type and account number in a container.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An invalid combination of journal record and document type was found.
    /// </exception>
    protected static container getDestinationPartyTypeAndId(PrintMgmtDocumentType _docType, Common _jour)
    {
        // NOTE: mappings from _jour to a specific table are found in the CustVendAccountMap
        // The table mapped is the same table referenced in method getQueryTableId()
        CustVendAC getAccount(Common _common)
        {
            CustVendAccountMap accountMap = _common;

            return accountMap.Account;
        }

        container fiscalDocument_BRParty(FiscalDocument_BR _fiscalDocument_BR)
        {
            switch (_fiscalDocument_BR.FiscalDocumentAccountType)
            {
                case CustVendType_BR::Customer:
                    return [PrintMgmtPrintDestinationPartyType::Customer, _fiscalDocument_BR.FiscalDocumentAccountNum];
                case CustVendType_BR::Vendor:
                    return [PrintMgmtPrintDestinationPartyType::Vendor, _fiscalDocument_BR.FiscalDocumentAccountNum];
                default:
                    return [PrintMgmtPrintDestinationPartyType::Unknown, _fiscalDocument_BR.FiscalDocumentAccountNum];
            }
        }

        container bankChequeTable_ACParty(BankChequeTable _bankChequeTable)
        {
            switch (_bankChequeTable.RecipientType)
            {
                case BankChequeRecipientType::Cust:
                    return [PrintMgmtPrintDestinationPartyType::Customer, _bankChequeTable.RecipientAccountNum];
                case BankChequeRecipientType::Vend:
                    return [PrintMgmtPrintDestinationPartyType::Vendor, _bankChequeTable.RecipientAccountNum];
                default:
                    return [PrintMgmtPrintDestinationPartyType::Unknown, _bankChequeTable.RecipientAccountNum];
            }
        }

        switch (_docType)
        {
            case PrintMgmtDocumentType::ComplementaryInvoice_BR:
            case PrintMgmtDocumentType::TransferOrderFiscalDoc_BR:
                return fiscalDocument_BRParty(_jour);

            case PrintMgmtDocumentType::BankCheque:
                return bankChequeTable_ACParty(_jour);

            default:
                switch (PrintMgmtDelegatesHandler::getPartyType(_docType, _jour))
                {
                    case PrintMgmtPrintDestinationPartyType::Customer:
                        return [PrintMgmtPrintDestinationPartyType::Customer, getAccount(_jour)];
                    case PrintMgmtPrintDestinationPartyType::Vendor:
                        return [PrintMgmtPrintDestinationPartyType::Vendor, getAccount(_jour)];
                }
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyRecIdDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the getPartyRecIdDelegate method of the <c>PrintMgmtDocType</c> class.
    /// </summary>
    /// <param name = "_partyType"><c>PrintMgmtPrintDestinationPartyType</c> enumeration value.</param>
    /// <param name = "_ac">The customer vendor account.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDocType), delegatestr(PrintMgmtDocType, getPartyRecIdDelegate))]
    public static void getPartyRecIdDelegateHandler(PrintMgmtPrintDestinationPartyType _partyType, CustVendAC _ac, EventHandlerResult _result)
    {
        _result.result(PrintMgmtDelegatesHandler::getPartyRecId(_partyType, _ac));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the DirPartyRecId value for the given PrintMgmtPrintDestinationPartyType and CustVendAC values.
    /// </summary>
    /// <param name="_partyType">
    /// The print destination party type
    /// </param>
    /// <param name="_ac">
    /// The customer vendor account
    /// </param>
    /// <param name="_acCompany">
    /// The company of customer or vendor account for cross company scenarios
    /// </param>
    /// <returns>
    /// The DirPartyRecId value
    /// </returns>
    protected static DirPartyRecId getPartyRecId(PrintMgmtPrintDestinationPartyType _partyType, CustVendAC _ac, CompanyId _acCompany = curExt())
    {
        DirPartyRecId getCustParty(CustAccount _account)
        {
            CustTable custTable;

            changecompany (_acCompany)
            {
                select Party from custTable where custTable.AccountNum == _account;
            }

            return custTable.Party;
        }

        DirPartyRecId getVendParty(VendAccount _account)
        {
            VendTable vendTable;

            changecompany(_acCompany)
            {
                select Party from vendTable where vendTable.AccountNum == _account;
            }

            return vendTable.Party;
        }

        switch (_partyType)
        {
            case PrintMgmtPrintDestinationPartyType::Customer:
                return getCustParty(_ac);
            case PrintMgmtPrintDestinationPartyType::Vendor:
                return getVendParty(_ac);
            case PrintMgmtPrintDestinationPartyType::Unknown:
                return 0;
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>