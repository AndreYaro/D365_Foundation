<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgComposeEventCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgComposeEventCtrl</c> class inserts a specified switch code on a specified employee in a
///    specified date interval.
/// </summary>
/// <remarks>
///    The employee must be specified through the <c>Args</c> object, while switch code and date interval
///    is requested from the user. The switch code registrations are inserted directly in the
///    <c>JmgEventCtrl</c> table, and not in the <c>JmgTermReg</c> table.
/// </remarks>
class JmgComposeEventCtrl extends RunBase
{
    DialogField     dfFromDate;
    DialogField     dfToDate;
    DialogField     dfEventCode;
    DialogField     dfApproved;

    FromDate        fromDate;
    ToDate          toDate;
    JmgEventCode    eventCode;
    JmgApproved     approved;

    JmgWorkerRecId  jmgWorkerRecId;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        fromDate,
        toDate,
        eventCode,
        approved,
        jmgWorkerRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <param name="dialog">
    ///    An already initialized dialog can be passed.
    /// </param>
    /// <param name="forceOnClient">
    ///    Specifies if the dialog must be instantiated on the client.
    /// </param>
    /// <returns>
    ///    The class that contains the methods described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    The <c>JmgComposeEventCtrl</c> class adds four fields to the dialog: From date, To date, Switch
    ///    code, and Approved.
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret;

        ret = this.dialogInternal(dialog, forceOnClient);

        ret.caption("@SYS38962");
        dfFromDate  = ret.addField(extendedtypestr(FromDate));
        dfToDate    = ret.addField(extendedtypestr(ToDate));
        dfEventCode = ret.addField(extendedtypestr(JmgEventCode));
        dfApproved  = ret.addField(extendedtypestr(JmgApproved));

        dfFromDate.value(fromDate);
        dfToDate.value(toDate);
        dfEventCode.value(eventCode);
        dfApproved.value(approved);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS38962";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns the dialog values to the internal variables.
    /// </summary>
    /// <returns>
    ///    true if the method was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is called after the dialog is closed. The <c>JmgComposeEventCtrl</c> class fetches four
    ///    values: <c>From date</c>, <c>To date</c>, <c>Switch code</c>, and <c>Approved</c>. If no from date
    ///    or to date is entered, false is returned. Also, if the entered from date is later than the to date,
    ///    false is returned.
    ///    When you inherit from this method, always remember to call <c>super()</c>.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        fromDate    = dfFromDate.value();
        toDate      = dfToDate.value();
        eventCode   = dfEventCode.value();
        approved    = dfApproved.value();

        if (!fromDate || !toDate)
        {
            ret = ret && checkFailed("@SYS85415");
        }

        if (ret && fromDate > toDate)
        {
            ret = ret && checkFailed("@SYS16982");
        }

        if (ret && !eventCode)
        {
            ret = ret && checkFailed("@SYS40055");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgComposeEventCtrl</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgComposeEventCtrl</c> class.
    /// </returns>
    public static JmgComposeEventCtrl construct()
    {
        return new JmgComposeEventCtrl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Based on input from the user, switch code registrations are inserted into the JmgEventCtrl table.
    /// </summary>
    public void run()
    {
        JmgProfileDate  d;
        JmgEventCtrl    jmgEventCtrl;
        super();

        ttsbegin;
        for (d = fromDate; d <= toDate; d++)
        {
            jmgEventCtrl.Worker         = jmgWorkerRecId;
            jmgEventCtrl.ProfileDate    = d;
            jmgEventCtrl.EventCode      = eventCode;
            jmgEventCtrl.Approved       = approved;
            jmgEventCtrl.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version;
        version = conpeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJmgWorkerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the JmgWorkerRecId.
    /// </summary>
    /// <param name="_jmgWorkerRecId">
    /// The JmgWorkerRecId.
    /// </param>
    void setJmgWorkerRecId(JmgWorkerRecId _jmgWorkerRecId)
    {
        jmgWorkerRecId = _jmgWorkerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>JmgComposeEventCtrl</c> class when it is called from a menu item.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>JmgComposeEventCtrl</c> class.
    /// </param>
    /// <remarks>
    ///       Use the
    ///    <c>
    ///       main
    ///    </c>
    ///       class design pattern whenever a class is called from a menu item. Do not call the
    ///    <c>
    ///       main
    ///    </c>
    ///       method explicitly from the code; call it implicitly from a menu item.Typically, you would:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             Instantiate the class by calling the static <c>construct</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>prompt</c> method to create a dialog box.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>run</c> method, if the user clicks OK in the dialog box.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static void main(Args _args)
    {
        JmgComposeEventCtrl jmgComposeEventCtrl = JmgComposeEventCtrl::construct();
        if (_args && _args.caller())
        {
            FormRun caller = _args.caller();

            if (caller && caller.args().dataset() == tablenum(HcmWorker))
            {
                HcmWorker   hcmWorker = caller.args().record();
                if (!hcmWorker)
                {
                    throw error(strfmt("@SYS29104", classstr(JmgComposeEventCtrl)));
                }

                jmgComposeEventCtrl.getLast();
                jmgComposeEventCtrl.setJmgWorkerRecId(hcmWorker.RecId);

                if (jmgComposeEventCtrl.prompt())
                {
                    jmgComposeEventCtrl.runOperation();

                    if (caller)
                    {
                        caller.dataSource().research();
                    }
                }
            }
            else
            {
                throw error(Error::missingRecord(classstr(JmgComposeEventCtrl)));
            }
        }
        else
        {
            throw error(Error::missingRecord(classstr(JmgComposeEventCtrl)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>