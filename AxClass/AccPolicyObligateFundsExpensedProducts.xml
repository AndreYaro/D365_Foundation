<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccPolicyObligateFundsExpensedProducts</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductOrder), BusinessEvent_ProductOrder::ObligateBudgetFundsForExpensedProducts)
]
class AccPolicyObligateFundsExpensedProducts extends AccountingPolicy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineIsAccountingRequired</Name>
				<Source><![CDATA[
    protected boolean determineIsAccountingRequired()
    {
        PurchTable  purchTable;
        boolean     isAccountingRequiredForPurchaseOrder;

        if (!sourceDocumentAccountingPolicy || sourceDocumentAccountingPolicy.parmAccountingRequirement() == SourceDocumentAccountingRequirement::DetermineRecognitionByLine)
        {
            changecompany(sourceDocumentLineItem.parmLegalEntityDataAreaId())
            {
                purchTable = PurchTable::findSourceDocumentHeader(sourceDocumentLineItem.parmSourceDocument().parmSourceDocumentHeader().RecId);

                if (purchTable.IsEncumbranceRequired == UnknownNoYes::Unknown)
                {
                    isAccountingRequiredForPurchaseOrder = LedgerParameters::find().IsEncumbranceProcessEnabled;
                }
                else
                {
                    isAccountingRequiredForPurchaseOrder = (purchTable.IsEncumbranceRequired == UnknownNoYes::Yes ? true : false);
                }
            }
        }
        else
        {
            isAccountingRequiredForPurchaseOrder = sourceDocumentAccountingPolicy.parmIsAccountingRequired();
        }

        return isAccountingRequiredForPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsAccountingRequired</Name>
				<Source><![CDATA[
    private void initIsAccountingRequired()
    {
        this.determineIsAccountingRequired();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingRequired</Name>
				<Source><![CDATA[
    public boolean parmAccountingRequired()
    {
        boolean ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsDistributionRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether distribution is required.
    /// </summary>
    /// <returns>
    /// true if distribution is required; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Charges on purchase order header with a charge code which has Debit type = Item don't require accounting distribution;
    /// Such charges must be allocated to purchase order lines before purchase order can be confirmed.
    /// </remarks>
    protected boolean determineIsDistributionRequired()
    {
        ChargeSourceDocLineItem chargeSourceDocLineItem;
        MarkupTrans             markupTrans;
        
        if (sourceDocumentLineItem is ChargeSourceDocLineItem)        
        {
            changecompany(sourceDocumentLineItem.parmLegalEntityDataAreaId())            
            {
                chargeSourceDocLineItem = sourceDocumentLineItem as ChargeSourceDocLineItem;
                markupTrans = chargeSourceDocLineItem.parmMarkupTrans();
                
                if (markupTrans.TransTableId == tablenum(PurchTable)
                    && markupTrans.markupCustTypeItem())                
                {
                    return false;                    
                }
            }
        }

        return super();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSubledgerJournalRelievingMethod</Name>
				<Source><![CDATA[
    protected SubledgerJournalRelievingMethod determineSubledgerJournalRelievingMethod()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(BudgetReservation_PSN))
            && PublicSectorUtils::isBudgetReservationEnabled()
            && BudgetReservation_PSN::existBudgetResForPurchLineSourceDocLine(sourceDocumentLineItem.parmSourceDocumentLine().RecId))
        {
            return SubledgerJournalRelievingMethod::Partial;
        }

        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>