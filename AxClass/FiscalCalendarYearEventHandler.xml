<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalCalendarYearEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FiscalCalendarYearEventHandler</c> class implements event handlers for the <c>FiscalCalendarYear</c> table.
/// </summary>
public class FiscalCalendarYearEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDeleteYearPostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for the canDeleteYear method on the <c>FiscalCalendarYear</c> table.
    /// </summary>
    /// <param name = "_args">
    /// The <c>XppPrePostArgs</c> instance.
    /// </param>
    [PostHandlerFor(tableStr(FiscalCalendarYear), tableMethodStr(FiscalCalendarYear, canDeleteYear))]
    public static void canDeleteYearPostHandler(XppPrePostArgs _args)
    {
        FiscalCalendarYear fiscalCalendarYear = _args.getThis() as FiscalCalendarYear;
        boolean returnValue = _args.getReturnValue();
        Ledger ledgerLocal;

        if (Ledger::existLedgerForFiscalCalendar(fiscalCalendarYear.FiscalCalendar))
        {
            while select RecId, Name, PrimaryForLegalEntity from ledgerLocal
                where ledgerLocal.FiscalCalendar == fiscalCalendarYear.FiscalCalendar
            {
                FiscalCalendarPeriod fiscalPeriod;
                LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod;

                // check if period exists for other than open status
                select firstonly RecId from fiscalPeriod
                    where fiscalPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                        && fiscalPeriod.Type == FiscalPeriodType::Operating
                    join RecId from ledgerFiscalCalendarPeriod
                        where ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == fiscalPeriod.RecId
                            && ledgerFiscalCalendarPeriod.Ledger == ledgerLocal.RecId
                            &&    (ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Closed
                                || ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::OnHold);

                if (fiscalPeriod != null)
                {
                    returnValue = checkFailed(strFmt("@SYS59023", fiscalCalendarYear.Name, ledgerLocal.Name));
                    break;
                }

                GeneralJournalEntry generalJournalEntry;

                select firstonly RecId, Ledger from generalJournalEntry
                    exists join fiscalPeriod
                        where generalJournalEntry.FiscalCalendarPeriod == fiscalPeriod.RecId
                            && fiscalPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                            && generalJournalEntry.Ledger == ledgerLocal.RecId;

                if (generalJournalEntry != null)
                {
                    CompanyInfo companyInfo = CompanyInfo::findRecId(ledgerLocal.PrimaryForLegalEntity);
                    returnValue = checkFailed(strFmt("@SYS328951", ledgerLocal.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name)));
                    break;
                }
            }
        }
        else
        {
            GeneralJournalEntry generalJournalEntry;

            select firstonly RecId, Ledger from generalJournalEntry
                where generalJournalEntry.FiscalCalendarYear == fiscalCalendarYear.RecId;

            if (generalJournalEntry != null)
            {
                ledgerLocal = Ledger::find(generalJournalEntry.Ledger);
                CompanyInfo companyInfo = CompanyInfo::findRecId(ledgerLocal.PrimaryForLegalEntity);
                returnValue = checkFailed(strFmt("@SYS328951", ledgerLocal.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name)));
            }
        }

        if (returnValue)
        {
            GeneralJournalEntry generalJournalEntry;

            select firstonly RecId from generalJournalEntry
                where generalJournalEntry.FiscalCalendarYear == fiscalCalendarYear.RecId;

            if (generalJournalEntry != null)
            {
                warning(strFmt("@SYS76498", "@SYS4000690", "@SYS4000691"));
            }
        }

        container companyCnt = LedgerFiscalCalendar::findDataAreaIdCntForFiscalCalendar(fiscalCalendarYear.FiscalCalendar);

        if (returnValue)
        {
            LedgerJournalTrans ledgerJournalTrans = TransactionFiscalCalendar::findUnpostedLedgerJournalTrans(
                            fiscalCalendarYear.StartDate,
                            fiscalCalendarYear.EndDate,
                            companyCnt);

            if (ledgerJournalTrans != null)
            {
                CompanyInfo companyInfo = ledgerJournalTrans.companyInfo();
                Ledger ledger = Ledger::findByLegalEntity(companyInfo.RecId);
                returnValue = checkFailed(strFmt("@SYS328951", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name)));
            }
        }

        if (returnValue)
        {
            InventJournalTrans inventJournalTrans = TransactionFiscalCalendar::findUnpostedInventJournalTrans(
                            fiscalCalendarYear.StartDate,
                            fiscalCalendarYear.EndDate,
                            companyCnt);

            if (inventJournalTrans != null)
            {
                CompanyInfo companyInfo = inventJournalTrans.companyInfo();
                Ledger ledger = Ledger::findByLegalEntity(companyInfo.RecId);
                returnValue = checkFailed(strFmt("@SYS328951", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name)));
            }
        }

        if (returnValue)
        {
            ProjJournalTrans projJournalTrans = TransactionFiscalCalendar::findUnpostedProjJournalTrans(
                            fiscalCalendarYear.StartDate,
                            fiscalCalendarYear.EndDate,
                            companyCnt);

            if (projJournalTrans != null)
            {
                CompanyInfo companyInfo = projJournalTrans.companyInfo();
                Ledger ledger = Ledger::findByLegalEntity(companyInfo.RecId);
                returnValue = checkFailed(strFmt("@SYS328951", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name)));
            }
        }

        if (returnValue)
        {
            ProjProposalJour projProposalJour = TransactionFiscalCalendar::findProjProposalJour(
                            fiscalCalendarYear.StartDate,
                            fiscalCalendarYear.EndDate,
                            companyCnt);

            if (projProposalJour != null)
            {
                CompanyInfo companyInfo = projProposalJour.companyInfo();
                Ledger ledger = Ledger::findByLegalEntity(companyInfo.RecId);
                returnValue = checkFailed(strFmt("@SYS328951", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name)));
            }
        }

        if (returnValue)
        {
            ProjControlPeriodTable projControlPeriodTable = TransactionFiscalCalendar::findUnpostedProjControlPeriodTable(
                            fiscalCalendarYear.StartDate,
                            fiscalCalendarYear.EndDate,
                            companyCnt);

            if (projControlPeriodTable != null)
            {
                CompanyInfo companyInfo = projControlPeriodTable.companyInfo();
                Ledger ledger = Ledger::findByLegalEntity(companyInfo.RecId);
                returnValue = checkFailed(strFmt("@SYS328951", ledger.Name, strFmt("@SYS191501", companyInfo.DataArea, companyInfo.Name)));
            }
        }

        if (returnValue)
        {
            BudgetCycle budgetCycle;
            FiscalCalendarPeriod fiscalPeriod;

            select firstonly RecId, Name from budgetCycle
                exists join fiscalPeriod
                    where fiscalPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                        && (budgetCycle.StartFiscalCalendarPeriod == fiscalPeriod.RecId
                        || budgetCycle.EndFiscalCalendarPeriod == fiscalPeriod.RecId);

            if (budgetCycle != null)
            {
                returnValue = checkFailed(strFmt("@SYS328961", fiscalCalendarYear.Name, budgetCycle.Name));
            }
        }

        _args.setReturnValue(returnValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>