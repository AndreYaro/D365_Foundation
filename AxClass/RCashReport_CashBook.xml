<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashReport_CashBook</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rCashReport_CashBook extends RCashReport_Base implements BatchRetryable
{
    NoYes cashierRepPrintNow;
    NoYes printEpilog;
    NoYes printCashierReport;
    PageNo pageNum;
    PageNo pageRepNum;

    DialogField dialogPrintEpilog;
    DialogField dialogPrintCashierReport;
    DialogField dialogPageNum;
    DialogField dialogPrintRCashName;

    NoYes printProlog;
    NoYes printCorrections;
    NoYes printRCashName;

    DialogField dialogPrintProlog;
    DialogField dialogPrintCorrections;

    protected const Version CurrentVersion_CashBook = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        dialog = super(_dialog, _forceOnClient);

        dialog.addGroup("@SYS7764");
        dialogPrintCorrections = dialog.addField(enumStr(NoYes), "@GLS104489");
        dialogPrintCorrections.value(printCorrections);
        dialogPrintCashierReport = dialog.addField(enumStr(NoYes), "@GLS106732");
        dialogPrintCashierReport.value(printCashierReport);
        dialogPrintRCashName = dialog.addFieldValue(extendedTypeStr(NoYesId), printRCashName, "@GLS116099", "@GLS116100");

        dialog.addGroup("@GLS101819");
        dialogPrintProlog = dialog.addField(enumStr(NoYes), "@GLS102012");
        dialogPrintProlog.value(printProlog);
        dialogPrintEpilog = dialog.addField(enumStr(NoYes), "@GLS102015");
        dialogPrintEpilog.value(printEpilog);

        dialog.addGroup("@GLS102061");
        dialogPageNum = dialog.addField(extendedTypeStr(PageNo), "@GLS103030");
        dialogPageNum.value(pageNum);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        printCorrections = dialogPrintCorrections.value();
        printProlog = dialogPrintProlog.value();
        printEpilog = dialogPrintEpilog.value();
        printCashierReport = dialogPrintCashierReport.value();
        pageNum = dialogPageNum.value();
        printRCashName = dialogPrintRCashName.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.parmPrintCorrections(NoYes::Yes);
        this.parmPageNum(1);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion_CashBook, fromDate, toDate, cashAccount, printProlog, printEpilog, printCashierReport, pageNum, printCorrections, printRCashName] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPageNum</Name>
				<Source><![CDATA[
    public PageNo parmPageNum(PageNo _pageNum = pageNum)
    {
        pageNum = _pageNum;
        return pageNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCashierNow</Name>
				<Source><![CDATA[
    public NoYes parmPrintCashierNow(NoYes _cashierRepPrintNow = cashierRepPrintNow)
    {
        if (_cashierRepPrintNow)
        {
            cashierRepPrintNow = _cashierRepPrintNow;
        }

        return cashierRepPrintNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCashierReport</Name>
				<Source><![CDATA[
    protected NoYes parmPrintCashierReport()
    {
        return printCashierReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCorrections</Name>
				<Source><![CDATA[
    public NoYes parmPrintCorrections(NoYes _printCorrections = printCorrections)
    {
        if (_printCorrections)
        {
            printCorrections = _printCorrections;
        }

        return printCorrections;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintEpilog</Name>
				<Source><![CDATA[
    public NoYes parmPrintEpilog()
    {
        return printEpilog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintProlog</Name>
				<Source><![CDATA[
    public NoYes parmPrintProlog()
    {
        return printProlog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintRCashName</Name>
				<Source><![CDATA[
    public NoYes parmPrintRCashName(NoYes _printRCashName = printRCashName)
    {
        printRCashName = _printRCashName;
        return printRCashName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRepPageNum</Name>
				<Source><![CDATA[
    public PageNo parmRepPageNum(PageNo _pageNum = pageNum)
    {
        pageRepNum = _pageNum;
        return pageRepNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReport</Name>
				<Source><![CDATA[
    private void generateReport(Args _args, boolean _printCashierReport)
    {
        XMLExcelReport_KO4_RU report = XMLExcelReport_KO4_RU::construct();
        report.parmArgs(_args);

        this.parmPrintCashierNow(_printCashierReport);

        try
        {
            if (report.init())
            {
                report.runOperation();
            }
        }
        catch
        {
            error("@SYS93835");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs unified form KO-4 to excel, if required cashier report printed too
    /// last printed report page remembered
    /// </summary>
    public void run()
    {
        Args args = new Args();
        args.caller(this);

        #isoCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([ [#isoRU, GlobalizationConstants::FeatureReferenceRU00039] ], funcName());

        this.generateReport(args, false);

        if (printCashierReport)
        {
            this.generateReport(args, true);
        }

        this.parmPageNum(pageRepNum);
        this.saveLast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersion_CashBook:
                container base;
                [version, fromDate, toDate, cashAccount, printProlog, printEpilog, printCashierReport, pageNum, printCorrections, printRCashName, base] = _packedClass;
                ret = super(base);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _p1 = null)
    {
        boolean ret;

        ret = super(_p1);

        if (this.parmPageNum() < 1)
        {
            ret = checkFailed("@SYS54003");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a description of what the class is doing.
    /// </summary>
    /// <returns>
    ///    A <c>Description</c>.
    /// </returns>
    /// <remarks>
    ///    This method is used by the batch system to display which class is being used.
    /// </remarks>
    public static Description description()
    {
        return "@GLS101075";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RCashTable cashTable;

        if (args)
        {
            cashTable = args.record();
        }

        RCashReport_CashBook report = new  RCashReport_CashBook();

        if (cashTable)
        {
            report.parmCashAccount(cashTable.AccountNum);
        }

        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>