<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ThresholdDefDesignerCtrl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ThresholdDefDesignerCtrl</c> class creates and manages threshold structures.
///    Most of functionality for the <c>ThresholdDesigner</c> form is provided by this class.
/// </summary>
class ThresholdDefDesignerCtrl_IN
{
    Threshold_IN                threshold;
    ThresholdType_IN            thresholdType;
    FormDataSource              thresholdSections_ds;
    TreeItemIdx                 thresholdItemIdx;
    TreeItemIdx                 newThresholdItemIdx;
    str                         thresholdTreeItemContainer;

    RefTableId                  sourceReferenceTableId;
    RefRecId                    sourceReferenceRecId;
    FormRun                     caller;

    FormTreeControl             tree;
    ImageListAppl               imageList;
    ImageRes                    thresholdImageRes;
    ImageRes                    thresholdSectionImageRes;
    ThresholdSectionsRecId_IN   thresholdSectionsRecId;
    AccessRight                 accessRight;
    boolean                     isUpdateAccess;
    Map                         recordNodeIdxMap;

    #define.ThresholdImage(815)
    #define.ThresholdSectionImage(821)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addThresholdSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds <c>ThresholdSection_IN</c> to database and updates threshold section node.
    /// </summary>
    /// <param name="_treeParentItemIdx">
    ///     The parent threshold section node index.
    /// </param>
    /// <param name="_thresholdSection">
    ///     The <c>ThresholdSection_IN</c> to be added.
    /// </param>
    /// <param name="_newThresholdItemIdx">
    ///     The node index of the the <c>ThresholdSection_IN</c>.
    /// </param>
    /// <returns>
    ///     Returns true if add successfully; otherwise, false.
    /// </returns>
    public boolean addThresholdSection(TreeItemIdx _treeParentItemIdx,ThresholdSections_IN _thresholdSection, TreeItemIdx _newThresholdItemIdx)
    {
        boolean                 ret = false;
        FormTreeItem            treeThresholdSectionItem;
        ThresholdSectionType_IN thresholdSectionType;

        if (_treeParentItemIdx)
        {
            ttsBegin;
            thresholdSectionType = ThresholdSectionType_IN::construct(thresholdType, _thresholdSection, sourceReferenceTableId, sourceReferenceRecId);

            if (thresholdSectionType.insertThresholdSection())
            {
                recordNodeIdxMap.insert(this.getTreeItemContainer(_thresholdSection.TableId, _thresholdSection.RecId), _newThresholdItemIdx);

                treeThresholdSectionItem    = tree.getItem(_newThresholdItemIdx);

                if (treeThresholdSectionItem)
                {
                    treeThresholdSectionItem.text(thresholdSectionType.getSectionNodeRepresentName());
                    treeThresholdSectionItem.data(this.getTreeItemContainer(_thresholdSection.TableId, _thresholdSection.RecId));
                    tree.setItem(treeThresholdSectionItem);
                }
                ret = true;
            }
            ttsCommit;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears recordNodeIdxMap.
    /// </summary>
    private void clearCache()
    {
        recordNodeIdxMap = new Map(Types::String, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteThresholdSectionNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes threshold section node.
    /// </summary>
    /// <param name="_thresholdSection">
    ///     Indicates which threshold section to be deleted.
    /// </param>
    public void deleteThresholdSectionNode(ThresholdSections_IN _thresholdSection)
    {
        ThresholdSectionType_IN thresholdSectionType;

        if (_thresholdSection.RecId)
        {
            thresholdSectionType = ThresholdSectionType_IN::construct(thresholdType, _thresholdSection, sourceReferenceTableId, sourceReferenceRecId);
            if (thresholdSectionType.deleteThresholdSection())
            {
                this.initTree();
            }
        }
        else
        {
            this.initTree();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTreeItemContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets TreeItemContainer.
    /// </summary>
    /// <param name="_refTableId">
    ///     Indicates refTableId.
    /// </param>
    /// <param name="_refRecId">
    ///     Indicates refRecId.
    /// </param>
    /// <returns>
    ///     Returns TreeItemContainer string.
    /// </returns>
    private str getTreeItemContainer(RefTableId _refTableId, RefRecId _refRecId)
    {
        return strFmt("%1 %2", _refTableId, _refRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTreeItemRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     get tree item RecId.
    /// </summary>
    /// <param name="_string">
    ///     Indicates string.
    /// </param>
    /// <returns>
    ///     Returns tree item RecId.
    /// </returns>
    private RefRecId getTreeItemRecId(str _string)
    {
        List list;
        ListEnumerator enum;
        str recIdStr;

        list = strSplit(_string, " ");
        enum = list.getEnumerator();
        enum.moveNext();
        enum.moveNext();
        recIdStr = enum.current();

        return str2int64(recIdStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTreeItemTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets tree item Table Id.
    /// </summary>
    /// <param name="_string">
    ///     Indicates string.
    /// </param>
    /// <returns>
    ///     Returns tree item Table Id.
    /// </returns>
    private RefTableId getTreeItemTableId(str _string)
    {
        List list;
        ListEnumerator enum;
        str tableIdStr;

        list = strSplit(_string, " ");
        enum = list.getEnumerator();
        enum.moveNext();
        tableIdStr = enum.current();

        return str2int(tableIdStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Init <c>ThresholdDefDesignerCtrl</c> instance.
    /// </summary>
    void init()
    {
        SecurityRights      securityRights;
        this.initImageList();

        thresholdTreeItemContainer  = this.getTreeItemContainer(threshold.TableId, threshold.RecId);
        thresholdType               = Thresholdtype_IN::construct(threshold);

        // Retrieve rights for current user
        securityRights = SecurityRights::newUser(curUserId());
        accessRight = securityRights.menuItemAccessRight(SecurableType::MenuItemDisplay, 'ThresholdDesigner');
        isUpdateAccess = (accessRight == AccessRight::Add) || (accessRight == AccessRight::Delete) || (accessRight == AccessRight::Edit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>ThresholdDefDesignerCtrl</c> instance.
    /// </summary>
    /// <param name="_caller">
    ///     Indicates the caller.
    /// </param>
    /// <param name="_threshold">
    ///     Indicates <c>Threhold_IN</c>.
    /// </param>
    /// <param name="_tree">
    ///     Indicates threshold tree control.
    /// </param>
    /// <param name="_thresholdSections_ds">
    ///     Indicates datasource of <c>ThresholdSection_IN</c>.
    /// </param>
    /// <param name="_sourceReferenceTableId">
    ///     Indicates tableId of the source reference.
    /// </param>
    /// <param name="_sourceReferenceRecId">
    ///     Indicates recId of the source reference.
    /// </param>
    public void initialize(
        FormRun               _caller,
        Threshold_IN          _threshold,
        FormTreeControl       _tree,
        FormDataSource        _thresholdSections_ds,
        RefTableId            _sourceReferenceTableId,
        RefRecId              _sourceReferenceRecId)
    {
        this.parmCaller(_caller);
        this.parmThreshold(_threshold);
        this.parmTree(_tree);
        this.parmThresholdSections_ds(_thresholdSections_ds);
        this.parmSourceReferenceTableId(_SourceReferenceTableId);
        this.parmSourceReferenceRecId(_sourceReferenceRecId);

        this.init();
        this.initTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initImageList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes ImageList to be used for the threshold designer.
    /// </summary>
    void initImageList()
    {
        imageList = new ImageListAppl();
        imageList.add(#ThresholdImage);
        imageList.add(#ThresholdSectionImage);
        tree.setImagelist(imageList.imageList());
        thresholdimageRes           = imageList.image(#ThresholdImage);
        thresholdSectionImageRes    = imageList.image(#ThresholdSectionImage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initThresholdSectionNodeFromParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes threshold sction node from parent node.
    /// </summary>
    /// <param name="_treeParentItemIdx">
    ///     Indicates the parant node index.
    /// </param>
    /// <param name="_newThresholdSection">
    ///     Indicates the new <c>ThresholdSection_IN</c>.
    /// </param>
    public void initThresholdSectionNodeFromParent(TreeItemIdx _treeParentItemIdx, ThresholdSections_IN _newThresholdSection)
    {
        FormTreeItem            treeParentItem;
        ThresholdSections_IN    thresholdSectionsParent;
        str                     treeParentItemData;

        treeParentItem        = tree.getItem(_treeParentItemIdx);
        treeParentItemData    = treeParentItem.data();

        if (this.getTreeItemTableId(treeParentItemData) == tableNum(ThresholdSections_IN))
        {
            _newThresholdSection.ParentRecId    = this.getTreeItemRecId(treeParentItemData);
            thresholdSectionsParent             = ThresholdSections_IN::findByRecId(this.getTreeItemRecId(treeParentItemData));
            _newThresholdSection.ValidFrom      = thresholdSectionsParent.ValidFrom;
            _newThresholdSection.ValidTo        = thresholdSectionsParent.ValidTo;
        }
        _newThresholdSection.Threshold = threshold.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and draw threhold designer tree element.
    /// </summary>
    void initTree()
    {
        thresholdSections_ds.research();
        tree.lockWindowUpdate(true);
        tree.deleteAll();
        this.clearCache();
        thresholdItemIdx    = SysFormTreeControl::addTreeItem(
                                tree,
                                threshold.Name,
                                FormTreeAdd::Root,
                                this.getTreeItemContainer(threshold.TableId, threshold.RecId),
                                thresholdimageRes,
                                threshold.hasThresholdSections());

        recordNodeIdxMap.insert(this.getTreeItemContainer(threshold.TableId, threshold.RecId), thresholdItemIdx);

        if (threshold.hasThresholdSections())
        {
            this.representChildren();
            SysFormTreeControl::expandTree(tree, thresholdItemIdx);
        }
        tree.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newThresholdTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new threhsold section node.
    /// </summary>
    /// <param name="_treeParentItemIdx">
    ///     The parent threshold section node index.
    /// </param>
    /// <param name="_thresholdSection">
    ///     The <c>ThresholdSection_IN</c> to be added.
    /// </param>
    /// <returns>
    ///     Returns true if add successfully; otherwise, false.
    /// </returns>
    public boolean newThresholdTreeNode(TreeItemIdx _treeParentItemIdx,ThresholdSections_IN _thresholdSection)
    {
        FormTreeItem            treeParentItem;
        TreeItemIdx             thresholdSectionItemIdx;
        boolean                 ret = false;
        ThresholdSectionType_IN thresholdSectionType;

        if (_treeParentItemIdx)
        {
            ttsBegin;

            thresholdSectionType = ThresholdSectionType_IN::construct(thresholdType, _thresholdSection, sourceReferenceTableId, sourceReferenceRecId);

            if (thresholdSectionType.checkThresholdSectionCreate())
            {
                treeParentItem        = tree.getItem(_treeParentItemIdx);
                thresholdSectionItemIdx = SysFormTreeControl::addTreeItem(
                                            tree,
                                            thresholdSectionType.getSectionNodeRepresentName(),
                                            _treeParentItemIdx,
                                            this.getTreeItemContainer(_thresholdSection.TableId, _thresholdSection.RecId),
                                            thresholdSectionImageRes,
                                            false);

                newThresholdItemIdx = thresholdSectionItemIdx;

                treeParentItem.children(true);
                SysFormTreeControl::expandTree(tree, _treeParentItemIdx);
                tree.select(thresholdSectionItemIdx);
                ret = true;
            }
            ttsCommit;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and Gets caller.
    /// </summary>
    /// <param name="_caller">
    ///     Indicates caller.
    /// </param>
    /// <returns>
    ///     Returns caller.
    /// </returns>
    public FormRun parmCaller(FormRun _caller = caller)
    {
        caller = _caller;

        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewThresholdItemIdx</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets TreeItemIdx.
    /// </summary>
    /// <returns>
    ///     Returns TreeItemIdx.
    /// </returns>
    public TreeItemIdx parmNewThresholdItemIdx()
    {
        return newThresholdItemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedThresholdSectionRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and Gets recId of <c>ThresholdSection_IN</c>.
    /// </summary>
    /// <param name="_thresholdSectionsRecId">
    ///     Indicates recId of <c>ThresholdSection_IN</c>.
    /// </param>
    /// <returns>
    ///     Returns recId of <c>ThresholdSection_IN</c>.
    /// </returns>
    public ThresholdSectionsRecId_IN parmSelectedThresholdSectionRecId(ThresholdSectionsRecId_IN _thresholdSectionsRecId = thresholdSectionsRecId)
    {
        thresholdSectionsRecId = _thresholdSectionsRecId;
        return thresholdSectionsRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceReferenceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and Gets recId of the source reference.
    /// </summary>
    /// <param name="_sourceReferenceRecId">
    ///     Indicates recId of the source reference.
    /// </param>
    /// <returns>
    ///     Returns recId of the source reference.
    /// </returns>
    public RefRecId parmSourceReferenceRecId(RefRecId _sourceReferenceRecId = sourceReferenceRecId)
    {
        sourceReferenceRecId = _sourceReferenceRecId;
        return sourceReferenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceReferenceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and Gets tableId of the source reference.
    /// </summary>
    /// <param name="_sourceReferenceTableId">
    ///     Indicates tableId of the source reference.
    /// </param>
    /// <returns>
    ///     Returns tableId of the source reference.
    /// </returns>
    public RefTableId parmSourceReferenceTableId(RefTableId _sourceReferenceTableId = sourceReferenceTableId)
    {
        sourceReferenceTableId = _sourceReferenceTableId;
        return sourceReferenceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThreshold</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and Gets <c>Threshold_IN</c>.
    /// </summary>
    /// <param name="_threshold">
    ///     Indicates the <c>Threshold_IN</c>.
    /// </param>
    /// <returns>
    ///     Returns the <c>Threshold_IN</c>.
    /// </returns>
    public Threshold_IN parmThreshold(Threshold_IN _threshold = threshold)
    {
        threshold = _threshold;
        return threshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThresholdItemIdx</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the node index of new threshold seciton node.
    /// </summary>
    /// <returns>
    ///     Returns the index of new threshold seciton node.
    /// </returns>
    public TreeItemIdx parmThresholdItemIdx()
    {
        return newThresholdItemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThresholdSections_ds</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and Gets the datasource of <c>ThresholdSection_IN</c>.
    /// </summary>
    /// <param name="_thresholdSections_ds">
    ///     Indicates the datasource of <c>ThresholdSection_IN</c>.
    /// </param>
    /// <returns>
    ///     Returns the datasource of <c>ThresholdSection_IN</c>.
    /// </returns>
    public FormDataSource parmThresholdSections_ds(FormDataSource _thresholdSections_ds = thresholdSections_ds)
    {
        thresholdSections_ds = _thresholdSections_ds;
        return thresholdSections_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and Gets threshold design tree control.
    /// </summary>
    /// <param name="_tree">
    ///     The threshold design tree control.
    /// </param>
    /// <returns>
    ///     Returns threshold design tree control.
    /// </returns>
    public FormTreeControl parmTree(FormTreeControl _tree = tree)
    {
        tree = _tree;

        return tree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>representChildren</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create threshold section tree node, and expands creates and its sub tree node if any.
    /// </summary>
    /// <param name="_parentItemIdx">
    ///    The parent item idx. optional. The default is the root item
    /// </param>
    /// <param name="_parentRecId">
    ///    The parent recid of the node; optional. The default is 0.
    /// </param>
    /// <remarks>
    ///    This method is recursive.
    /// </remarks>
    void representChildren(TreeItemIdx _parentItemIdx = thresholdItemIdx, RefRecId _parentRecId = 0)
    {
        ThresholdSections_IN    thresholdSection;
        TreeItemIdx             thresholdSectionItemIdx;
        boolean                 hasChildren;
        Query                   query = new Query();
        QueryRun                queryRun;
        QueryBuildDataSource    thresholdSectionDS;
        ThresholdSectionType_IN thresholdSectionType;

        thresholdSectionDS = query.addDataSource(tableNum(ThresholdSections_IN));
        thresholdSectionDS.addRange(fieldNum(ThresholdSections_IN, Threshold)).value(SysQuery::value(threshold.RecId));
        thresholdSectionDS.addRange(fieldNum(ThresholdSections_IN, ParentRecId)).value(SysQuery::value(_parentRecId));
        thresholdSectionDS.addOrderByField(fieldNum(ThresholdSections_IN, ValidFrom));
        thresholdSectionDS.addOrderByField(fieldNum(ThresholdSections_IN, ValidTo));
        thresholdSectionDS.addOrderByField(fieldNum(ThresholdSections_IN, LowLimit));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            thresholdSection = queryRun.get(tableNum(ThresholdSections_IN));

            hasChildren = thresholdSection.hasChildren();

            thresholdSectionType = ThresholdSectionType_IN::construct(thresholdType, thresholdSection, sourceReferenceTableId, sourceReferenceRecId);
            thresholdSectionItemIdx = SysFormTreeControl::addTreeItem(
                                        tree,
                                        thresholdSectionType.getSectionNodeRepresentName(),
                                        _parentItemIdx,
                                        this.getTreeItemContainer(thresholdSection.TableId, thresholdSection.RecId),
                                        thresholdSectionImageRes,
                                        hasChildren);

            recordNodeIdxMap.insert(this.getTreeItemContainer(thresholdSection.TableId, thresholdSection.RecId), thresholdSectionItemIdx);

            if (hasChildren)
            {
                this.representChildren(thresholdSectionItemIdx, thresholdSection.RecId);
                SysFormTreeControl::expandTree(tree, thresholdSectionItemIdx);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesigner</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates threshold designer.
    /// </summary>
    /// <param name="_thresholdSection">
    ///     Indicates thresholdSection.
    /// </param>
    public void updateDesigner(ThresholdSections_IN _thresholdSection)
    {
        ThresholdSections_ds.allowCreate(!_thresholdSection.IsLeaf);
        thresholdSections_ds.allowDelete(!_thresholdSection.hasChildren());

        //‘Final level’ should be non-editable if the selected threshold section has child section
        //The leaf checkbox should not be editable as once it is a leaf it should always be a leaf.
        ThresholdSections_ds.object(fieldNum(ThresholdSections_IN, IsLeaf)).enabled(!_thresholdSection.hasChildren() && !_thresholdSection.IsLeaf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectThresholdSectionRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates recId of <c>ThresholdSection_IN</c> based on the selected tree node.
    /// </summary>
    /// <param name="_treeItem">
    ///     Indicates the tree node.
    /// </param>
    public void updateSelectThresholdSectionRecId(FormTreeItem _treeItem)
    {
        str     treeItemData;
        treeItemData    = _treeItem.data();

        if (this.getTreeItemTableId(treeItemData) == tableNum(ThresholdSections_IN))
        {
            thresholdSectionsRecId = this.getTreeItemRecId(treeItemData);
            thresholdSections_ds.allowDelete(true);
        }
        else
        {
            thresholdSectionsRecId = 0;
            thresholdSections_ds.allowDelete(false);
            thresholdSections_ds.allowCreate(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateThresholdSectionNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates threshold section node.
    /// </summary>
    /// <param name="_thresholdSection">
    ///     Indicates the <c>ThresholdSection_IN</c> to be updated.
    /// </param>
    /// <returns>
    /// true, if update sucessfully, else false
    /// </returns>
    public boolean updateThresholdSectionNode(ThresholdSections_IN _thresholdSection)
    {
        TreeItemIdx             treeThresholdSectionItemIdx;
        FormTreeItem            treeThresholdSectionItem;
        ThresholdSectionType_IN thresholdSectionType;
        boolean                 ret;

        if (recordNodeIdxMap.exists(this.getTreeItemContainer(_thresholdSection.TableId, _thresholdSection.RecId)))
        {
            treeThresholdSectionItemIdx = recordNodeIdxMap.lookup(this.getTreeItemContainer(_thresholdSection.TableId, _thresholdSection.RecId));
        }
        thresholdSectionType = ThresholdSectionType_IN::construct(thresholdType, _thresholdSection, sourceReferenceTableId, sourceReferenceRecId);

        if (treeThresholdSectionItemIdx && thresholdSectionType.updateThresholdSection())
        {
            treeThresholdSectionItem    = tree.getItem(treeThresholdSectionItemIdx);
            if (treeThresholdSectionItem)
            {
                thresholdSectionType.parmThresholdSections(_thresholdSection);
                treeThresholdSectionItem.text(thresholdSectionType.getSectionNodeRepresentName());
                tree.setItem(treeThresholdSectionItem);
                ret = true;
            }
        }
        else
        {
            thresholdSections_ds.refresh();
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>