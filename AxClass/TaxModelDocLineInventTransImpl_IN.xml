<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineInventTransImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>InventTransferLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(InventTransferLine))]
public class TaxModelDocLineInventTransImpl_IN extends TaxModelDocLineBaseImpl_IN
    implements  TaxModelVATable_IN,
                TaxModelExciseTaxable_IN,
                TaxModelSalesTaxable_IN,
                TaxModelGSTTaxable_IN
{
    InventTransferLine      inventTransferLine;
    InventTransferLine_IN   inventTransferLineIN;
    InventTransferTable     inventTransferTable;
    TransTaxInformation     toTransTaxInformation;

    TaxModelDocLineVATHelper_IN     VAThelper;
    TaxModelDocLineExciseHelper_IN  exciseHelper;
    TaxModelDocLineSalesHelper_IN   salesHelper;
    TaxModelDocLineGSTHelper_IN     gstHelper;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name="_type">
    /// The type. 
    /// </param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::InventTransferFrom)
    {
        LogisticsPostalAddress logisticsPostalAddressLocal;
        InventTransferLine inventTransferLineLocal = documentLineMap;
        InventTransferTable inventTransferTableLocal = inventTransferTable ? inventTransferTable : inventTransferLineLocal.inventTransferTable();

        if (_type == TransTaxInformationType_IN::InventTransferFrom)
        {
            logisticsPostalAddressLocal = LogisticsPostalAddress::findRecId(inventTransferTableLocal.FromPostalAddress);
        }
        else if (_type == TransTaxInformationType_IN::InventTransferTo)
        {
            logisticsPostalAddressLocal = LogisticsPostalAddress::findRecId(inventTransferTableLocal.ToPostalAddress);
        }

        return logisticsPostalAddressLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return inventTransferTable.TransferStatus != InventTransferStatus::Received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets direct settlement of this document line.
    /// </summary>
    /// <returns>
    /// The <c>DirectSettlement_IN</c>
    /// </returns>
    public DirectSettlement_IN getExciseDirectSettlement()
    {
        return exciseHelper.getExciseDirectSettlement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the excise tax number sequence.
    /// </summary>
    /// <returns>
    /// The number sequence generated.
    /// </returns>
    public container getExciseNumberSeq()
    {
        return exciseHelper.getExciseNumberSeq();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseRecordType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseRecordType_IN</c> of the document line map.
    /// </summary>
    /// <returns>
    /// The <c>ExciseRecordType_IN</c>
    /// </returns>
    public ExciseRecordType_IN getExciseRecordType()
    {
        return exciseHelper.getExciseRecordType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTariffCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the <c>ExciseTariffCodes_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c>
    /// </returns>
    public RefRecId getExciseTariffCodeRefRecId()
    {
        return exciseHelper.getExciseTariffCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTariffCodesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseTariffCodes_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>ExciseTariffCodes_IN</c>
    /// </returns>
    public ExciseTariffCodes_IN getExciseTariffCodesTable()
    {
        return exciseHelper.getExciseTariffCodesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getExciseTaxAccountType(TaxOnItem _taxOnItem)
    {
        return exciseHelper.getExciseTaxAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getExciseTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return exciseHelper.getExciseTaxOffsetAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Excise Registration Number
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getExciseTaxRegistrationNumber()
    {
        TaxRegistrationNumber_IN ret;

        ret = exciseHelper.getExciseTaxRegistrationNumber();

        if (!ret)
        {
            ret = TaxInformation_IN::findDefaultbyLocation(
                CompanyInfo::find().postalAddress().Location).getTaxRegistrationNumbersTable(
                    TaxType_IN::Excise,
                    this.getExciseType()).RegistrationNumber;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of Excise Registration
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getExciseTaxRegistrationRefRecId()
    {
        RefRecId ret;

        ret = exciseHelper.getExciseTaxRegistrationRefRecId();

        if (!ret)
        {
            ret = TaxInformation_IN::findDefaultbyLocation(
                CompanyInfo::find().postalAddress().Location).getTaxRegistrationNumbersTable(
                    TaxType_IN::Excise,
                    this.getExciseType()).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseType_IN</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ExciseType_IN</c>
    /// </returns>
    public ExciseType_IN getExciseType()
    {
        return exciseHelper.getExciseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return inventTransferLine.QtyTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getSalesTaxAccountType(TaxOnItem _taxOnItem)
    {
        return salesHelper.getSalesTaxAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxFormTypesRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of <c>SalesTaxFormTypes_IN</c> related to this document line.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of <c>SalesTaxFormTypes_IN</c>
    /// </returns>
    public SalesTaxFormTypesRecId_IN getSalesTaxFormTypesRecId()
    {
        return salesHelper.getSalesTaxFormTypesRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxFormTypeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesTaxFormTypes_IN</c> related to this document line.
    /// </summary>
    /// <returns>
    /// The <c>SalesTaxFormTypes_IN</c>
    /// </returns>
    public SalesTaxFormTypes_IN getSalesTaxFormTypeTable()
    {
        return salesHelper.getSalesTaxFormTypeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getSalesTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return salesHelper.getSalesTaxOffsetAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Sales Tax Registration Number
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getSalesTaxRegistrationNumber()
    {
        return salesHelper.getSalesTaxRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of Sales Tax Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getSalesTaxRegistrationRefRecId()
    {
        return salesHelper.getSalesTaxRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        return inventtransferTable.ShipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxRegistrationNumber_IN</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c> of the tax registration
    /// </returns>
    public TaxRegistrationNumber_IN getTaxRegistrationNumber(
        TaxType_IN      _taxType)
    {
        TaxRegistrationNumber_IN ret;

        ret = super(_taxType);

        if (!ret)
        {
            ret = TaxInformation_IN::findDefaultbyLocation(
                CompanyInfo::find().postalAddress().Location).getTaxRegistrationNumbersTable(
                    _taxType).RegistrationNumber;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumberRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>RecId</c> of the tax registration
    /// </returns>
    public RefRecId getTaxRegistrationNumberRefRecId(
        TaxType_IN      _taxType)
    {
        RefRecId ret;

        ret = super(_taxType);

        if (!ret)
        {
            ret = TaxInformation_IN::findDefaultbyLocation(
                CompanyInfo::find().postalAddress().Location).getTaxRegistrationNumbersTable(
                    _taxType).RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return DateTimeUtil::date(inventTransferTable.createdDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getVATAccountType(TaxOnItem _taxOnItem)
    {
        return VAThelper.getVATAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATGoodsType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT goods type of the document line.
    /// </summary>
    /// <returns>
    /// The <c>VATGoodsType_IN</c> of the document line.
    /// </returns>
    public VATGoodsType_IN getVATGoodsType()
    {
        return VAThelper.getVATGoodsType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATNonRecoverablePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT Non-recoverable perecent.
    /// </summary>
    /// <returns>
    /// The <c>Percent</c> of the VAT Non-recoverable part.
    /// </returns>
    public Percent getVATNonRecoverablePercent()
    {
        return VAThelper.getVATNonRecoverablePercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getVATOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return VAThelper.getVATOffsetAccountType(_taxOnItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATPriceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT <c>PriceType_IN</c> for the transaction.
    /// </summary>
    /// <returns>
    /// The <c>PriceType_IN</c>
    /// </returns>
    public PriceType_IN getVATPriceType()
    {
        return inventTransferLineIN.VATPriceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT Registration Number.
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getVATRegistrationNumber()
    {
        return VAThelper.getVATRegistrationNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> VAT Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getVATRegistrationRefRecId()
    {
        return VAThelper.getVATRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATRetentionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT <c>RetentionAmt_IN</c> for the transaction.
    /// </summary>
    /// <returns>
    /// The <c>RetentionAmt_IN</c>
    /// </returns>
    public RetentionAmt_IN getVATRetentionAmount()
    {
        return inventTransferLineIN.Retention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATRetentionCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the VAT <c>TaxCode</c> for the transaction.
    /// </summary>
    /// <returns>
    /// The <c>RetentionAmt_IN</c>
    /// </returns>
    public TaxCode getVATRetentionCode()
    {
        return inventTransferLineIN.VATRetentionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        super(_documentLineMap);
        inventTransferLine = _documentLineMap;
        inventTransferTable = inventTransferLine.inventTransferTable();
        inventTransferLineIN = inventTransferLine.inventTransferLine_IN();

        VAThelper = new TaxModelDocLineVATHelper_IN();
        VAThelper.setDocumentLine(_documentLineMap);
        VAThelper.setTaxModelTaxable(this);
        VAThelper.setTaxModelVATable(this);
        VAThelper.setTransTaxInformation(transTaxInformation);

        exciseHelper = new TaxModelDocLineExciseHelper_IN();
        exciseHelper.setDocumentLine(_documentLineMap);
        exciseHelper.setTaxModelTaxable(this);
        exciseHelper.setTaxModelExciseTaxable(this);
        exciseHelper.setTransTaxInformation(transTaxInformation);

        salesHelper = new TaxModelDocLineSalesHelper_IN();
        salesHelper.setDocumentLine(_documentLineMap);
        salesHelper.setTaxModelTaxable(this);
        salesHelper.setTaxModelSalesTaxable(this);
        salesHelper.setTransTaxInformation(transTaxInformation);

        gstHelper = new TaxModelDocLineGSTHelper_IN();
        gstHelper.setDocumentLine(_documentLineMap);
        gstHelper.setTaxModelTaxable(this);
        gstHelper.setTaxModelGSTTaxable(this);
        gstHelper.setTransTaxInformation(transTaxInformation);

        toTransTaxInformation = TransTaxInformationHelper::newHelper().findTransTaxInformationByRecord(
            inventTransferLine, 
            TransTaxInformationType_IN::InventTransferTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseCENVATCreditAvailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is CENVAT CreditA vailed or not.
    /// </summary>
    /// <returns>
    /// True if the document line is CENVAT Credit Availed;otherwise, false.
    /// </returns>
    public NoYes isExciseCENVATCreditAvailed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseConsignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is consignment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is consignment;otherwise, false.
    /// </returns>
    public NoYesId isExciseConsignment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction should register DSA.
    /// </summary>
    /// <returns>
    /// True if the document line should register DSA; otherwise, false.
    /// </returns>
    public NoYes isExicseDSA()
    {
        return exciseHelper.isExicseDSA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseSSI</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is avaialbe for SSI.
    /// </summary>
    /// <returns>
    /// True if the document line is SSI applied; otherwise, false.
    /// </returns>
    public NoYes isExicseSSI()
    {
        return exciseHelper.isExicseSSI();
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsVATCompositionScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is avaialbe for CompositionScheme.
    /// </summary>
    /// <returns>
    /// True if the document line is CompositionScheme applied; otherwise, false.
    /// </returns>
    public NoYes IsVATCompositionScheme()
    {
        return VAThelper.IsVATCompositionScheme();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExciseNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the excise tax number sequence.
    /// </summary>
    /// <param name="_nums">
    /// The sequence number
    /// </param>
    public void setExciseNumberSeq(container _nums)
    {
        exciseHelper.setExciseNumberSeq(_nums);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostAmountRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise amount register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise amount register; otherwise, false.
    /// </returns>
    public NoYes shouldPostAmountRegister()
    {
        return exciseHelper.shouldPostAmountRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostQuantityRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise quantity register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise quantity register; otherwise, false.
    /// </returns>
    public NoYes shouldPostQuantityRegister()
    {
        return exciseHelper.shouldPostQuantityRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipExciseTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Excise Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipExciseTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = exciseHelper.shouldSkipExciseTax(_taxOnItem);

        if (!ret)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Sales Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipSalesTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = salesHelper.shouldSkipSalesTax(_taxOnItem);

        if (!ret)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the VAT be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipVAT(TaxOnItem _taxOnItem)
    {
        boolean ret;

        ret = VATHelper.shouldSkipVAT(_taxOnItem);

        if (!ret)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is related to production.
    /// </summary>
    /// <returns>
    /// True if the document line is related to production; otherwise, false.
    /// </returns>
    public boolean isExciseProduction()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is scrap or not.
    /// </summary>
    /// <returns>
    /// True if the document line is scrap;otherwise, false.
    /// </returns>
    public NoYes isScrap()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::Inventory_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTransTaxInformationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default transaction tax information type;
    /// </summary>
    /// <returns>The default transaction tax information type.</returns>
    protected TransTaxInformationType_IN getDefaultTransTaxInformationType()
    {
        return TransTaxInformationType_IN::InventTransferFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    public AmountCur getAssessableValueTransactionCurrency()
    {
        return inventTransferLine.SalesPurchJournalLine::getSalesPurchJournalLineExtension_IN().SalesPurchJournalLineExtension_IN::getAssessableValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption address.
    /// </summary>
    /// <returns>
    /// The comsumption address.
    /// </returns>
    public LogisticsPostalAddress getConsumptionAddress()
    {
        if (!isConsumptionAddressCached)
        {
            consumptionAddress = LogisticsPostalAddress::findRecId(inventTransferTable.ToPostalAddress);
            isConsumptionAddressCached = true;
        }
        return consumptionAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin address.
    /// </summary>
    /// <returns>
    /// The origin address.
    /// </returns>
    public LogisticsPostalAddress getOriginAddress()
    {
        if (!isOriginAddressCached)
        {
            originAddress = LogisticsPostalAddress::findRecId(inventTransferTable.FromPostalAddress);
            isOriginAddressCached = true;
        }
        return originAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    public date getDeliveryDate()
    {
        return DateTimeUtil::date(inventTransferTable.createdDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSNCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of GST HSN code table.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTHSNCodeRefRecId()
    {
        return gstHelper.getGSTHSNCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSNCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST HSN code table.
    /// </summary>
    /// <returns>
    /// The <c>HSNCodeTable_IN</c>
    /// </returns>
    public HSNCodeTable_IN getGSTHSNCodeTable()
    {
        return gstHelper.getGSTHSNCodeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTITCCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ITC category of the transaction line.
    /// </summary>
    /// <returns>
    /// The ITC category.
    /// </returns>
    public ITCCategory_IN getGSTITCCategory()
    {
        return gstHelper.getGSTITCCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTNonBusinessUsagePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Non-business usage perecent.
    /// </summary>
    /// <returns>
    /// The <c>Percent</c> of the GST Non-business usage part.
    /// </returns>
    public Percent getGSTNonBusinessUsagePercent()
    {
        return toTransTaxInformation.NonBusinessUsagePercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Registration Number.
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getGSTRegistrationNumber()
    {
        return TransTaxInformationHelper::getTaxRegistrationNumbers(transTaxInformation, TaxType_IN::GST).RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> GST Registration.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTRegistrationRefRecId()
    {
        return gstHelper.getGSTRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Scrap of the transaction line.
    /// </summary>
    /// <returns>
    /// True if the tax is Scrap for the transaction line; otherwise, false.
    /// </returns>
    public NoYesId getGSTScrap()
    {
        return gstHelper.getGSTScrap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceAccountingCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> GST Service accounting code.
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    public RefRecId getGSTServiceAccountingCodeRefRecId()
    {
        return gstHelper.getGSTServiceAccountingCodeRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceAccountingCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the GST Service accounting code table.
    /// </summary>
    /// <returns>
    /// The <c>ServiceAccountingCodeTable_IN</c>
    /// </returns>
    public ServiceAccountingCodeTable_IN getGSTServiceAccountingCodeTable()
    {
        return gstHelper.getGSTServiceAccountingCodeTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTServiceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the service category of the transaction line.
    /// </summary>
    /// <returns>
    /// The service category.
    /// </returns>
    public ServiceCategory_IN getGSTServiceCategory()
    {
        return gstHelper.getGSTServiceCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        return inventTransferLine.inventTransferLine_IN().NetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyGSTRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party GST Registration Number.
    /// </summary>
    /// <returns>
    /// The party <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getPartyGSTRegistrationNumber()
    {
        return TaxInformation_IN::find(
                    toTransTaxInformation.TaxInformation).getTaxRegistrationNumbersTable(
                        TaxType_IN::GST).RegistrationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyGSTRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>RecId</c> GST Registration.
    /// </summary>
    /// <returns>
    /// The party <c>RefRecId</c>
    /// </returns>
    public RefRecId getPartyGSTRegistrationRefRecId()
    {
        return gstHelper.getPartyGSTRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDeemedExport</Name>
				<Source><![CDATA[
    public NoYes getIsDeemedExport()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSEZParty</Name>
				<Source><![CDATA[
    public NoYes getIsSEZParty()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsInterStateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if it is the inter state transaction.
    /// </summary>
    /// <returns>
    /// True if it is not inter state transaction; otherwise, false.
    /// </returns>
    public NoYes IsInterStateTransaction()
    {
        boolean                isInterState;
        LogisticsPostalAddress fromAddress;
        LogisticsPostalAddress toAddress;
        TransDateTime          transDateTime;

        isInterState = NoYes::No;
        // The purpose that convert date to dateTime is to find the correct fromAddress and toAddress.
        transDateTime = DateTimeUtil::newDateTime(inventTransferTable.ShipDate, DateTimeUtil::time(DateTimeUtil::getSystemDateTime()));

        LineNum lineNum = (SysDictField::isFieldMapped(tableStr(SalesPurchJournalLine), tableId2Name(documentLineMap.TableId), fieldStr(SalesPurchJournalLine, LineNum)))? documentLineMap.LineNum : 0;
        fromAddress = TaxLogisticsLocationAddressUtil::getLogisticsPostalAddress(inventTransferTable.fromLocation(), transDateTime, lineNum);
        toAddress = TaxLogisticsLocationAddressUtil::getLogisticsPostalAddress(inventTransferTable.toLocation(), transDateTime, lineNum);

        if (fromAddress && toAddress
            && ((fromAddress.CountryRegionId != toAddress.CountryRegionId)
                || (fromAddress.CountryRegionId == toAddress.CountryRegionId
                    && fromAddress.State != ''
                    && toAddress.State != ''
                    && fromAddress.State != toAddress.State))
        )
        {
            isInterState = NoYes::Yes;
        }

        return isInterState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceInclTax</Name>
				<Source><![CDATA[
    public NoYes isPriceInclTax()
    {
        return transTaxInformation.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()  
    {
        return LogisticsPostalAddress::findByLocation(inventTransferTable.toLocation());     
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line transaction currency.
    /// </summary>
    /// <returns>The document line transaction currency.</returns>
    public CurrencyCode getTransactionCurrency()
    {
        return inventTransferLineIN.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return inventTransferLineIN.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return DateTimeUtil::date(inventTransferTable.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return DateTimeUtil::date(inventTransferTable.CreatedDateTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>