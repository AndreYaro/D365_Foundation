<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchBOEJournalCreate_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchBOEJournalCreate_IN</c> class is used to create purch BOE journal.
/// </summary>
// For Bill of entry posting.
class PurchBOEJournalCreate_IN extends FormletterJournalCreate
{
    CustomsVendBOEJour_IN   customsVendBOEJour;
    CustomsVendBOETrans_IN  customsVendBOETrans;
    PurchTable              purchTable;
    PurchParmTable          purchParmTable;
    PurchParmUpdate         purchParmUpdate;
    PurchLine               purchLine;
    PurchTotals             purchTotals;
    RecordSortedList        recordListPurchParmLine;
    Num                     internalNumber;
    Set                     uniqueOrders;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    public NumberSeq  allocateNumAndVoucher()
    {
        NumberSequenceReference numberSequenceReference;

        while select numberSequenceReference
            where numberSequenceReference.NumberSequenceId != 0
        {
            if (numberSequenceReference.numberSequenceTable().Manual == NoYes::No)
            {
                break;
            }
        }

        return NumberSeq::newGetNum(numberSequenceReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncentiveTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates incentive tax amount.
    /// </summary>
    /// <param name="_eximPurchLine">
    /// The exim purch line information.
    /// </param>
    /// <param name="_purchParmLine">
    /// The purch parm line information.
    /// </param>
    /// <returns>
    /// The tax amount information.
    /// </returns>
    public container calcIncentiveTaxAmount(
        EximPurchLine_IN _eximPurchLine,
        PurchParmLine    _purchParmLine)
    {
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        EximImportDetails_IN             importDetails;
        EximAuthorizationType_IN         authorizationType;
        EximIncentiveScheme_IN           incentiveScheme;
        AmountMST                        amountOrigin;
        AmountMST                        assessbleValue;
        AmountMST                        balanceAmount;
        AmountMST                        netBalanceValue;
        TaxAmount                        taxAmount;
        TaxAmount                        balanceTaxAmount;
        TaxAmount                        taxCorrectedAmount;
        TaxAmount                        balanceTaxCorrectedAmount;
        Qty                              netBalanceQty;
        PurchOrderedQty                  purchQty;
        TmpTaxWorkTrans                 taxWorkTransLoc;
        RefRecId                        eximPorts;
        RefRecId                        eximProductgroupTable;
        FormulaDesigner_IN                  formulaDesigner;
        Qty                                 taxQty = _purchParmLine.ReceiveNow;
        TaxOnItem                           taxOnItem;

        taxWorkTransLoc = this.parmTax().tmpTaxWorkTrans();
        formulaDesigner         = FormulaDesigner_IN::findByTaxCode(taxWorkTransLoc.TaxItemGroup, taxWorkTransLoc.TaxCode);
        eximPorts       = EximPorts_IN::find(_eximPurchLine.EximPorts).RecId;
        eximProductgroupTable = EximProductGroupTable_IN::find(_eximPurchLine.EximProductGroupTable).RecId;

        authorizationType = taxWorkTransLoc.EximIncentiveScheme_IN == EximIncentiveScheme_IN::AA ?
                            EximAuthorizationType_IN::AA :
                            EximAuthorizationType_IN::DFIA;
        select firstonly  RecId, AuthorizationId, AuthorizationType, EximPorts, EximProductGroupTable, Closed
            from authorizationSchemesTable
            where authorizationSchemesTable.AuthorizationId         == taxWorkTransLoc.EximAuthorizationId_IN
               && authorizationSchemesTable.AuthorizationType       == authorizationType
               && authorizationSchemesTable.EximPorts               == eximPorts
               && authorizationSchemesTable.EximProductGroupTable   == eximProductgroupTable
            join importDetails
                where importDetails.AuthorizationSchemesTableRecId  == authorizationSchemesTable.RecId
                   && importDetails.ItemId                          == _purchParmLine.ItemId;

        if (importDetails.RecId)
        {
            if (formulaDesigner.TaxableBasis != TaxableBasis_IN::ExclAmount)
            {
                if (formulaDesigner.TaxableBasis == TaxableBasis_IN::Assessable)
                {
                    assessbleValue  = CurrencyExchangeHelper::amount(_purchParmLine.purchParmLine_IN().AssessableValueTransactionCurrency);
                }
                else if (formulaDesigner.TaxableBasis == TaxableBasis_IN::LineAmount)
                {
                    assessbleValue  = CurrencyExchangeHelper::amount(_purchParmLine.LineAmount);
                }
                else if (formulaDesigner.TaxableBasis == TaxableBasis_IN::MRP)
                {
                    assessbleValue  = CurrencyExchangeHelper::amount(_purchParmLine.purchParmLine_IN().MaximumRetailPrice * taxQty);
                }

                taxOnItem = TaxOnItem::find(purchLine.TaxItemGroup, formulaDesigner.TaxCode);
                if (taxOnItem && taxOnItem.AbatementPercent_IN)
                {
                    assessbleValue = assessbleValue * (100 - taxOnItem.AbatementPercent_IN) / 100;
                }
                assessbleValue  = CurrencyHelper_IN::customsMSTAmount_IN(assessbleValue,
                                                            taxWorkTransLoc.SourceCurrencyCode,
                                                            Direction_IN::Import,
                                                            _purchParmLine.purchParmTable().TransDate);
            balanceAmount   = EximImportDetails_IN::balanceAmount(authorizationSchemesTable.RecId);
            netBalanceValue = importDetails.displayNetBalValue();

            // Exim amount origin for 'Value'.
            if (!netBalanceValue)
            {
                netBalanceQty = importDetails.displayNetBalQty();

                if (netBalanceQty)
                {
                    purchQty = _purchParmLine.ReceiveNow;

                    if (purchLine.PurchUnit != importDetails.Unit)
                    {
                        purchQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
																										 purchLine.InventDimId,
																									 	 purchQty,
																										 purchLine.PurchUnit,
																										 importDetails.Unit,
																										 NoYes::Yes);
                    }
                    if (purchQty)
                    {
                        netBalanceValue = (netBalanceQty * assessbleValue) / purchQty;
                }
            }
        }
        amountOrigin = min(assessbleValue, netBalanceValue, balanceAmount);
            }
            if (amountOrigin || formulaDesigner.TaxableBasis == TaxableBasis_IN::ExclAmount)
            {
                taxAmount = EximTaxTable_IN::calcIncentiveTaxAmountExcl(taxWorkTransLoc, formulaDesigner, purchLine, amountOrigin, true, customsVendBOEJour);
            }
            else
        {
                taxAmount = 0;
            }
        }

        if (taxAmount)
        {
            incentiveScheme           = taxWorkTransLoc.EximIncentiveScheme_IN;
            balanceTaxAmount          = taxWorkTransLoc.CustomsDuty_IN - taxAmount;
            taxCorrectedAmount        = taxWorkTransLoc.SourceRegulateAmountCustoms_IN && taxWorkTransLoc.CustomsDuty_IN?
                                        CurrencyExchangeHelper::amount(taxAmount * taxWorkTransLoc.SourceRegulateAmountCustoms_IN / taxWorkTransLoc.CustomsDuty_IN) : 0;
            balanceTaxCorrectedAmount = taxWorkTransLoc.SourceRegulateAmountCustoms_IN - taxCorrectedAmount;
        }
        else
        {
            incentiveScheme           = EximIncentiveScheme_IN::None;
            balanceTaxAmount          = 0;
            taxCorrectedAmount        = 0;
            balanceTaxCorrectedAmount = 0;
        }
        return [incentiveScheme, taxAmount, balanceTaxAmount, taxCorrectedAmount, balanceTaxCorrectedAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks invoice status.
    /// </summary>
    /// <returns>
    /// true if the invoice is valid; otherwise, false.
    /// </returns>
    public boolean  checkInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks packing slip information.
    /// </summary>
    /// <returns>
    /// Returns true if the check succeed.
    /// </returns>
    protected boolean  checkPackingSlip()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    protected void createJournalHeader()
    {
        SetIterator setIterator;

        customsVendBOEJour.insert();

        uniqueOrders = new Set(Types::String);
        setIterator = new SetIterator(uniqueOrders);

        uniqueOrders.add(customsVendBOEJour.PurchId);

        this.copyMarkupFromPurchParm(this.purchParmTable, this.customsVendBOEJour, this.purchParmTable.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _purchParmLine)
    {
        PurchParmLine           localParmline = _purchParmLine as PurchParmLine;
        PurchParmTable          localParmTable = localParmline.purchParmTable();
        CustomsQty_IN           invoiceRegnQty;
        CustomsQty_IN           billOfEntryQty;
        PurchParmLine           purchParmLineLoc;
        PurchParmLine_IN        purchParmLineIN;
        CustomsInvoiceRegnJournalLine_IN    CustomsInvoiceRegnJournalLine;
        CustomsInvoiceRegnJournalTable_IN   CustomsInvoiceRegnJournalTable;

        EximPurchLine_IN eximPurchLine;
        EximVendBOETrans_IN eximVendBOETrans;

        purchLine = localParmline.purchLine();
        purchParmLineLoc = _purchParmLine;
        purchParmLineIN  = _purchParmLine.PurchParmLine_IN();

        customsVendBOETrans.clear();
        customsVendBOETrans.initFromPurchLine(purchLine);
        customsVendBOETrans.initFromVendBOEJour(customsVendBOEJour);
        customsVendBOETrans.PurchId                         	 = purchLine.PurchId;
        customsVendBOETrans.BillOfEntryQty                  = localParmline.ReceiveNow;
        customsVendBOETrans.PurchInternalBOEId              = internalNumber;
        customsVendBOETrans.CustomsBillOfEntryNumberTable   = purchParmUpdate.CustomsBillOfEntryNumberTable_IN ? purchParmUpdate.CustomsBillOfEntryNumberTable_IN : /*purchParmTable*/localParmTable.CustomsBillOfEntryNumberTable_IN;
        customsVendBOETrans.BillOfEntryDate                 = localParmTable.TransDate;
        customsVendBOETrans.CustomsImportInvoiceNumberTable = purchParmLineIN.CustomsImportInvoiceNumberTable;
        customsVendBOETrans.RemainingQty                    = localParmline.ReceiveNow;
        customsVendBOETrans.AssessableValue                     = purchParmLineIN.AssessableValueTransactionCurrency;
        customsVendBOETrans.AssessableValueAccountingCurrency   = purchParmLineIN.AssessableValueAccountingCurrency;

        //For partial bill of entry update, the current receive quantity field should be the previous bill of entry's remaining quantity.
        select RecId from customsInvoiceRegnJournalLine
                join RecId from CustomsInvoiceRegnJournalTable
                    where customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == CustomsInvoiceRegnJournalTable.RecId
                       && customsInvoiceRegnJournalLine.PurchLineRecId == purchLine.RecId
                       && CustomsInvoiceRegnJournalTable.OrderId == customsVendBOETrans.PurchId
                       && CustomsInvoiceRegnJournalTable.CustomsImportInvoiceNumberTable == purchParmLineIN.CustomsImportInvoiceNumberTable;

        invoiceRegnQty = CustomsInvoiceRegnJournalLine_IN::getReceivePerLine(customsInvoiceRegnJournalLine.RecId);
        billOfEntryQty = CustomsVendBOETrans_IN::getBOEQty(customsVendBOETrans.PurchId, purchLine.InventTransId, purchParmLineIN.CustomsImportInvoiceNumberTable);
        customsVendBOETrans.ReceiveQty = abs(invoiceRegnQty) - abs(billOfEntryQty);
        customsVendBOETrans.ReasonTableRef  = localParmLine.ReasonTableRef;

        customsVendBOETrans.insert();

        if (TaxParameters::isCustomsEnable_IN())
        {
            eximVendBOETrans.CustomsVendBOETransRecId           = customsVendBOETrans.RecId;
            eximVendBOETrans.EximPorts                          = purchParmLineIN.EximPorts;
            eximVendBOETrans.EximProductGroupTable              = purchLine.EximProductGroup_IN;
            eximVendBOETrans.AssessableValue                    = purchParmLineIN.AssessableValueTransactionCurrency;
            eximVendBOETrans.AssessableValueAccountingCurrency  = purchParmLineIN.AssessableValueAccountingCurrency;

            if (TaxParameters::find().EximIncentiveSchemes_IN)
            {
                eximPurchLine = EximPurchLine_IN::findByPurchLineRecId(purchLine.RecId);
                eximVendBOETrans.EximIncentiveSchemeGroup = eximPurchLine.EximIncentiveSchemeGroup;
            }

            eximVendBOETrans.insert();
        }
        if (EximParameters_IN::checkEPCGParameters())
        {
            this.insertEximEPCGImportTrans(customsVendBOETrans.BillOfEntryDate, customsVendBOETrans.RecId, _purchParmLine);
        }

        this.writeJournalSubLine(customsVendBOETrans.RecId, purchParmLineLoc);

        if (EximParameters_IN::checkParameters())
        {
            this.insertEximImportTrans(purchParmLineLoc);
        }
        // Update Bill of entry checkbox in CustomsInvoiceRegnJournalLine_IN
        if (customsVendBOETrans.BillOfEntryQty)
        {
            update_recordSet customsInvoiceRegnJournalLine
            setting
                BillOfEntry = NoYes::Yes
            where
                customsInvoiceRegnJournalLine.PurchLineRecId                      == customsVendBOETrans.PurchLineRecId
            &&  customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == customsInvoiceRegnJournalTable.RecId;
        }

        this.copyMarkupFromPurchParm(_purchParmLine, this.customsVendBOETrans, this.customsVendBOETrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkupFromPurchParm</Name>
				<Source><![CDATA[
    private void copyMarkupFromPurchParm(Common _from, Common _to, CurrencyCode _currencyCode)
    {
        if (TaxIntegrationUtils::isChargeOnBOEEnabled() && this.purchTable.isCustomsImportOrder_IN())
        {
            MarkupCopy_BillOfEntry_IN markupCopy = MarkupCopy_BillOfEntry_IN::construct();
            MarkupCopyFromPurchOrderParameters copyParm = MarkupCopyFromPurchOrderParameters::createCopyFromPurchOrderParameters(
                _from,
                _to,
                '',
                _currencyCode,
                SourceDocumentLineAccountingStatus::Draft,
                this.purchTable);

            markupCopy.copyFromPurchParm(copyParm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common _purchParmLine)
    {
        PurchParmLine               localPurchParmLine = _purchParmLine;
        CustomsVendBOEPurchLink_IN  vendBOEPurchLink;

        ttsbegin;
        while select localPurchParmLine
            group by OrigPurchId, ParmId
               where localPurchParmLine.ParmId      == purchParmTable.ParmId
                   && localPurchParmLine.TableRefId  == purchParmTable.TableRefId
        {
            vendBOEPurchLink.clear();
            vendBOEPurchLink.initFromPurchParmLine (localPurchParmLine);
            vendBOEPurchLink.initFromVendBOEJour    (customsVendBOEJour);
            vendBOEPurchLink.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreate</Name>
				<Source><![CDATA[
    protected void endCreate()
    {

        SetEnumerator se = uniqueOrders.getEnumerator();

        ttsbegin;
        while (se.moveNext())
        {
            purchTable = PurchTable::find(se.current(),true);
            if (purchTable)
            {
                purchTable.updateDocumentStatus(DocumentStatus::BillOfEntry_IN);
            }
        }

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.transitDocument();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxBusinessService::transferTaxDocument(purchParmTable, customsVendBOEJour);
        }
        // </GTE>

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    public Common getJournal()
    {
        return customsVendBOEJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    public container  getNumAndVoucher()
    {
        return ['', numberSeq.num()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    protected void initJournalHeader()
    {
        customsVendBOEJour.clear();
        customsVendBOEJour.initValue();
        customsVendBOEJour.ParmId   = purchParmUpdate.ParmId;
        customsVendBOEJour.CustomsBillOfEntryNumberTable    = purchParmUpdate.CustomsBillOfEntryNumberTable_IN
                                                                ? purchParmUpdate.CustomsBillOfEntryNumberTable_IN
                                                                    : purchParmTable.CustomsBillOfEntryNumberTable_IN;
        customsVendBOEJour.CustomsImportInvoiceNumberTable = purchParmTable.CustomsImportInvoiceNumberTable_IN;
        customsVendBOEJour.ImporterInvoiceDate  = CustomsInvoiceRegnJournalTable_IN::findByPurchAndInvoice(
            purchParmTable.purchTable().PurchId,
            purchParmTable.CustomsImportInvoiceNumberTable_IN).ImportInvoiceDate;
        customsVendBOEJour.PurchInternalBOEId   = internalNumber;
        customsVendBOEJour.BillOfEntryDate      = purchParmTable.TransDate;

        customsVendBOEJour.initFromPurchTable(purchParmTable.purchTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    protected void initSourceTable()
    {
        purchTable = purchParmTable.purchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        purchTotals = PurchTotals::newParmTable(purchParmTable, purchParmUpdate.SpecQty, purchParmUpdate.ParmId, purchParmUpdate.SumPurchId, documentStatus);

        purchTotals.calc();
        this.parmTax(purchTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEximEPCGImportTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts exim EPCG import transaction data.
    /// </summary>
    /// <param name="_billOfEntryDate">
    /// The bill of entry date.
    /// </param>
    /// <param name="_recId">
    /// The rec id.
    /// </param>
    /// <param name="_purchParmLine">
    /// The purch parm line.
    /// </param>
    public void insertEximEPCGImportTrans(
        TransDate     _billOfEntryDate,
        RefRecId      _recId = 0,
        PurchParmLine _purchParmLine = null)
    {
        AmountCur                  eximBOEAssessableValue;
        RefRecId                   eximIncentiveSchemeGrpTable;
        EximIncentiveSchemeData_IN eximIncentiveSchemeData;
        EximEPCGSchemeTable_IN     eximEPCGSchemeTable;
        TransDateTime              billOfEntryDate;
        EximEPCGImportTrans_IN     eximImportTrans;

        eximIncentiveSchemeGrpTable = EximPurchLine_IN::findByPurchLineRecId(_purchParmLine.purchLine().RecId).EximIncentiveSchemeGroup;

        billOfEntryDate = DateTimeUtil::newDateTime(_billOfEntryDate,0, DateTimeUtil::getUserPreferredTimeZone());

        select firstOnly RecId from eximEPCGSchemeTable
            join EximIncentiveSchemeGroup,AuthorizationId from eximIncentiveSchemeData
             where eximIncentiveSchemeData.EximIncentiveSchemeGroup == eximIncentiveSchemeGrpTable
                && eximEPCGSchemeTable.SchemeId == eximIncentiveSchemeData.AuthorizationId
                && eximEPCGSchemeTable.IssueDateTime <= billOfEntryDate
                && eximEPCGSchemeTable.ImportExpiryDateTime >= billOfEntryDate
                && !eximEPCGSchemeTable.Closed;

        if (eximEPCGSchemeTable.RecId
            && _recId
            && EximParameters_IN::checkEPCGParameters())
        {
            eximBOEAssessableValue = CurrencyHelper_IN::customsMSTAmount_IN(_purchParmLine.purchParmLine_IN().AssessableValueTransactionCurrency,
                                                                   _purchParmLine.CurrencyCode,
                                                                   Direction_IN::Import,
                                                                   PurchParmTable::find(_purchParmLine.ParmId,
                                                                                        _purchParmLine.TableRefId).TransDate);

            eximImportTrans.ImportValue              = eximBOEAssessableValue;
            eximImportTrans.CustomsVendBOETransRecId = _recId;
            eximImportTrans.SchemeTableRecId         = eximEPCGSchemeTable.RecId;
            eximImportTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEximImportTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts exim import trans information.
    /// </summary>
    /// <param name="_purchParmLineLoc">
    /// The purch parm line information.
    /// </param>
    public void insertEximImportTrans(PurchParmLine _purchParmLineLoc)
    {
        EximPurchLine_IN                 eximPurchLine;
        EximImportDetails_IN             importDetails;
        EximIncentiveSchemeData_IN       incentiveSchemeData;
        EximImportTrans_IN               importTrans;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        CustomsVendBOESubTrans_IN        customsVendBOESubTrans;
        EximAuthorizationType_IN         authorizationType;
        EximIncentiveScheme_IN           incentiveScheme;
        AmountMST                        netBalanceAssessableVal;
        AmountMST                        boeAssessableValue;
        AmountMST                        minAssessableValue;
        Qty                              qty;
        Counter                          counterI;

        EximVendBOESubTrans_IN        eximVendBOESubTrans;

        for (counterI = 0; counterI <= 1; counterI++)
        {
            if (counterI == 0)
            {
                incentiveScheme = EximIncentiveScheme_IN::AA;
                authorizationType = EximAuthorizationType_IN::AA;
            }
            else
            {
                incentiveScheme = EximIncentiveScheme_IN::DFIA;
                authorizationType = EximAuthorizationType_IN::DFIA;
            }

            select firstonly RecId
                from customsVendBOESubTrans
                    where customsVendBOESubTrans.boeTransRefRecId    == customsVendBOETrans.RecId
            join firstonly IncentiveScheme
                from eximVendBOESubTrans
                where eximVendBOESubTrans.CustomsVendBOESubTransRecId == customsVendBOESubTrans.RecId
                   && eximVendBOESubTrans.IncentiveScheme == incentiveScheme;

            if (eximVendBOESubTrans.IncentiveScheme)
            {
                select firstonly EximIncentiveSchemeGroup
                    from eximPurchLine
                        where eximPurchLine.PurchLineRecId == _purchParmLineLoc.purchLine().RecId
                    join firstonly IncentiveScheme, AuthorizationId
                        from incentiveSchemeData
                            where incentiveSchemeData.EximIncentiveSchemeGroup == eximPurchLine.EximIncentiveSchemeGroup
                               && incentiveSchemeData.IncentiveScheme == authorizationType
                        join firstonly RecId
                            from authorizationSchemesTable
                                where authorizationSchemesTable.AuthorizationId == incentiveSchemeData.AuthorizationId
                                   && authorizationSchemesTable.AuthorizationType == incentiveSchemeData.IncentiveScheme
                            join firstonly importDetails
                                where importDetails.AuthorizationSchemesTableRecId == authorizationSchemesTable.RecId
                                   && importDetails.ItemId                         == _purchParmLineLoc.ItemId;

                if (importDetails)
                {
                    importDetails.selectForUpdate(true);

                    boeAssessableValue = CurrencyHelper_IN::customsMSTAmount_IN(_purchParmLineLoc.purchParmLine_IN().AssessableValueTransactionCurrency,
                                                                       _purchParmLineLoc.CurrencyCode,
                                                                       Direction_IN::Import,
                                                                       _purchParmLineLoc.purchParmTable().TransDate);
                    if (importDetails.displayNetBalValue())
                    {
                        netBalanceAssessableVal = importDetails.displayNetBalValue();
                    }
                    else if (importDetails.displayNetBalQty() && _purchParmLineLoc.ReceiveNow)
                    {
                        netBalanceAssessableVal = (importDetails.displayNetBalQty() * boeAssessableValue)
                            / EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_purchParmLineLoc.ItemId,
																									_purchParmLineLoc.InventDimId,
																									_purchParmLineLoc.ReceiveNow,
																									_purchParmLineLoc.purchLine().PurchUnit,
																									importDetails.Unit,
																									NoYes::Yes);
                    }

                    minAssessableValue = min(boeAssessableValue,
                                             netBalanceAssessableVal,
                                             EximImportDetails_IN::balanceAmount(authorizationSchemesTable.RecId));

                    importTrans.AssessableValue                = minAssessableValue;
                    importTrans.CustomsVendBOETransRecId       = customsVendBOETrans.RecId;
                    importTrans.AuthorizationSchemesTableRecId = authorizationSchemesTable.RecId;
                    importTrans.insert();

                    if (_purchParmLineLoc.purchLine().PurchUnit == importDetails.Unit)
                    {
                        qty = _purchParmLineLoc.ReceiveNow;
                    }
                    else
                    {
                        qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_purchParmLineLoc.ItemId,
																									_purchParmLineLoc.InventDimId,
																									_purchParmLineLoc.ReceiveNow,
																								    _purchParmLineLoc.purchLine().PurchUnit,
																								    importDetails.Unit,
																								    NoYes::Yes);
                    }

                    if (importDetails.displayNetBalValue() || importDetails.ValueImported)
                    {
                        importDetails.ValueImported = importDetails.ValueImported + minAssessableValue;
                    }
                    else if (importDetails.displayNetBalQty() || importDetails.QtyImported)
                    {
                        importDetails.QtyImported = importDetails.QtyImported + qty;
                    }

                    importDetails.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected TableId journalLineTableId()
    {
        return tablenum(CustomsVendBOETrans_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tableId for the CustomsVendBOEPurchLink_IN table.
    /// </summary>
    /// <returns>
    /// The tableId for the CustomsVendBOEPurchLink_IN table.
    /// </returns>
    /// <remarks>
    /// The table id is used for creating Record sorted list containing links between Bill of entry and purchase orders.
    /// </remarks>
    protected tableId linksTableId()
    {
        return tablenum(CustomsVendBOEPurchLink_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        // Overridden method.
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchParmTable)
    {
        purchParmTable = _parmTable as PurchParmTable;

        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = purchParmUpdate)
    {
        purchParmUpdate = _parmUpdate as PurchParmUpdate;

        return purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        return purchTotals.recordListPurchParmLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected Object totals()
    {
        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    protected Common typeParmLine()
    {
        PurchParmLine   purchParmLine;
        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDEPBDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the DEPB details information.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_boeSubTransrecId">
    /// The boe sub transaction rec id.
    /// </param>
    public void updateDEPBDetails(TaxCode                        _taxCode,
                                  CustomsVendBOESubTransRecId_IN _boeSubTransrecId)
    {
        EximDEPBDetailsTable_IN      eximDEPBDetailsTable;
        EximDEPBDetailsLine_IN       eximDEPBDetailsLine;
        EximDEPBDetailsTableRecId_IN eximDEPBDetailsRecId;
        container                    depbSetOffRules;
        Counter                      counter;

        depbSetOffRules =  this.parmTax().parmDEPBSetOffRules_IN();
        if (depbSetOffRules)
        {
            for (counter = 1; counter <= conlen(depbSetOffRules); counter = counter + 4)
            {
                if (conpeek(depbSetOffRules, counter + 2) == _taxCode &&
                    conpeek(depbSetOffRules, counter + 3) ==  purchLine.RecId)
                {
                    eximDEPBDetailsRecId = conpeek(depbSetOffRules, counter);

                    ttsbegin;
                    select forupdate eximDEPBDetailsTable
                        where eximDEPBDetailsTable.RecId == eximDEPBDetailsRecId;

                    eximDEPBDetailsTable.DutyAvailed += conpeek(depbSetOffRules,counter + 1);
                    eximDEPBDetailsTable.update();

                    eximDEPBDetailsLine.clear();
                    eximDEPBDetailsLine.BillOfEntryTransRecId = _boeSubTransrecId;
                    eximDEPBDetailsLine.DetailsTableRecId     = eximDEPBDetailsTable.RecId;
                    eximDEPBDetailsLine.DutyAvailed           = conpeek(depbSetOffRules, counter + 1);
                    eximDEPBDetailsLine.insert();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeJournalSubLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes journal sub line information.
    /// </summary>
    /// <param name="_boeTransRecId">
    /// The boe trans rec id.
    /// </param>
    /// <param name="_purchParmLineLoc">
    /// The purch parameter line information.
    /// </param>
    protected void writeJournalSubLine(
        RefRecId        _boeTransRecId,
        PurchParmLine   _purchParmLineLoc)
    {
        TaxGroupData                taxGroupData;
        CustomsVendBOESubTrans_IN   customsVendBOESubTrans;
        CustomsVendBOETrans_IN      customsVendBOETransLoc = CustomsVendBOETrans_IN::find(_bOETransRecId);
        TmpTaxWorkTrans             taxWorkTransLoc;
        SalesPurchJournalLine       salesPurchJournalLine;
        TaxData                     taxData;
        EximVendBOESubTrans_IN      eximVendBOESubTrans;
        EximPurchLine_IN            eximPurchLine;
        PurchLine                   purchLineLoc;

        taxWorkTransLoc = this.parmTax().tmpTaxWorkTrans();
        ttsbegin;

        while select taxWorkTransLoc
                order by RecId
            where taxWorkTransLoc.InventTransId  == customsVendBOETransLoc.InventTransId
                join RecId from purchLineLoc
                where purchLineLoc.InventTransId == taxWorkTransLoc.InventTransId
        {
            customsVendBOESubTrans.clear();
            // Save the tax info from TmpTaxworkTrans. Import order will create tax vouchers which are seen at the time of Bill of entry posting.
            // It wont consider the Tax seen on 'TmpWorkTrans' on the day of invoicing for voucher creation, at any cost. This is finctionality.
            taxGroupData = TaxGroupData::find(taxWorkTransLoc.TaxGroup, taxWorkTransLoc.TaxCode);
            customsVendBOESubTrans.CustomsDuty                          = taxWorkTransLoc.CustomsDuty_IN;
            customsVendBOESubTrans.TaxAmount                            = taxWorkTransLoc.TaxAmount;
            customsVendBOESubTrans.TaxAmountCur                         = taxWorkTransLoc.TaxAmountCur;
            customsVendBOESubTrans.TaxInCostPrice                       = taxWorkTransLoc.TaxInCostPrice;
            customsVendBOESubTrans.TaxInCostPriceCur                    = taxWorkTransLoc.TaxInCostPriceCur;
            customsVendBOESubTrans.TaxInCostPriceMST                    = taxWorkTransLoc.TaxInCostPriceMST;
            customsVendBOESubTrans.SourceTaxAmountCur                   = taxWorkTransLoc.SourceTaxAmountCur;
            customsVendBOESubTrans.SourceTaxAmountCurReal               = taxWorkTransLoc.SourceTaxAmountCurReal;
            customsVendBOESubTrans.SourceRegulateAmountCustomsCur_IN    = taxWorkTransLoc.SourceRegulateAmountCur;
            customsVendBOESubTrans.SourceRegulateAmountCustoms_IN       = taxWorkTransLoc.SourceRegulateAmountCustoms_IN;

            customsVendBOESubTrans.TaxOrigin                    = taxWorkTransLoc.TaxOrigin;
            customsVendBOESubTrans.Txt                          = taxWorkTransLoc.Txt;
            customsVendBOESubTrans.TaxExemptTax                 = taxWorkTransLoc.ExemptTax;
            customsVendBOESubTrans.TaxDirection                 = taxWorkTransLoc.TaxDirection;
            customsVendBOESubTrans.SourceCurrencyCode           = taxWorkTransLoc.SourceCurrencyCode;
            customsVendBOESubTrans.TaxAutoGenerated             = taxWorkTransLoc.TaxAutogenerated;
            customsVendBOESubTrans.TaxInCostPriceRegulated      = taxWorkTransLoc.TaxInCostPriceRegulated;
            customsVendBOESubTrans.SourceRegulateAmountCur      = taxWorkTransLoc.SourceRegulateAmountCur;
            customsVendBOESubTrans.SourceBaseAmountCurRegulated = taxWorkTransLoc.SourceBaseAmountCurRegulated;
            customsVendBOESubTrans.TaxBaseAmount                = taxWorkTransLoc.TaxBaseAmount;
            customsVendBOESubTrans.TaxBaseQty                   = taxWorkTransLoc.TaxBaseQty;
            customsVendBOESubTrans.SourceBaseAmountCur          = taxWorkTransLoc.SourceBaseAmountCur;
            customsVendBOESubTrans.TaxGroup                     = taxWorkTransLoc.TaxGroup;
            customsVendBOESubTrans.TransDate                    = taxWorkTransLoc.TransDate;
            customsVendBOESubTrans.SourceTableId                = taxWorkTransLoc.SourceTableId;
            customsVendBOESubTrans.SourceRecId                  = taxWorkTransLoc.SourceRecId;
            customsVendBOESubTrans.CalculationDate              = taxWorkTransLoc.CalculationDate;
            if (taxWorkTransLoc.ExemptTax == NoYes::No
                && (EximParameters_IN::checkParameters()
                || EximParameters_IN::checkDEPBParameters()
                || EximParameters_IN::checkEPCGParameters()))
            {
                if (taxWorkTransLoc.EximIncentiveScheme_IN    == EximIncentiveScheme_IN::AA
                    || taxWorkTransLoc.EximIncentiveScheme_IN == EximIncentiveScheme_IN::DFIA)
                {
                    // EximPurchLine will have entry only when EximIncentiveScheme parameter is marked.
                    select firstOnly EximProductGroupTable, EximPorts from eximPurchLine
                        where eximPurchLine.PurchLineRecId == purchLineLoc.RecId;
                    [eximVendBOESubTrans.IncentiveScheme,
                    eximVendBOESubTrans.TaxAmount,
                    eximVendBOESubTrans.BalanceTaxAmount,
                    eximVendBOESubTrans.TaxCorrectedAmount,
                    eximVendBOESubTrans.BalanceTaxCorrectedAmount] =
                    this.calcIncentiveTaxAmount(eximPurchLine, _purchParmLineLoc);
                }
                else
                {
                    eximVendBOESubTrans.IncentiveScheme           = taxWorkTransLoc.EximIncentiveScheme_IN;
                    eximVendBOESubTrans.TaxAmount                 = taxWorkTransLoc.EximTaxAmount_IN;
                    eximVendBOESubTrans.BalanceTaxAmount          = taxWorkTransLoc.EximBalanceTaxAmount_IN;
                    eximVendBOESubTrans.TaxCorrectedAmount        = taxWorkTransLoc.EximTaxCorrectedAmount_IN;
                    eximVendBOESubTrans.BalanceTaxCorrectedAmount = taxWorkTransLoc.EximBalanceTaxCorrectedAmount_IN;

                    eximVendBOESubTrans.depbAmount    = taxWorkTransLoc.EximDEPBAmount_IN;
                    eximVendBOESubTrans.depbAmountCur = CurrencyHelper_IN::customsCurAmount_IN(taxWorkTransLoc.EximDEPBAmount_IN,
                                                                                        taxWorkTransLoc.SourceCurrencyCode,
                                                                                        Direction_IN::Import,
                                                                                        taxWorkTransLoc.TransDate);
                }
                eximVendBOESubTrans.TaxAmountCur = CurrencyHelper_IN::customsCurAmount_IN(eximVendBOESubTrans.TaxAmount,
                                                                                    taxWorkTransLoc.SourceCurrencyCode,
                                                                                    Direction_IN::Import,
                                                                                    taxWorkTransLoc.TransDate);

                eximVendBOESubTrans.BalanceTaxAmountCur = CurrencyHelper_IN::customsCurAmount_IN(eximVendBOESubTrans.BalanceTaxAmount,
                                                                                        taxWorkTransLoc.SourceCurrencyCode,
                                                                                        Direction_IN::Import,
                                                                                        taxWorkTransLoc.TransDate);

                eximVendBOESubTrans.TaxCorrectedAmountCur = CurrencyHelper_IN::customsCurAmount_IN(eximVendBOESubTrans.TaxCorrectedAmount,
                                                                                            taxWorkTransLoc.SourceCurrencyCode,
                                                                                            Direction_IN::Import,
                                                                                            taxWorkTransLoc.TransDate);

                eximVendBOESubTrans.BalanceTaxCorrectedAmountCur = CurrencyHelper_IN::customsCurAmount_IN(eximVendBOESubTrans.BalanceTaxCorrectedAmount,
                                                                                                    taxWorkTransLoc.SourceCurrencyCode,
                                                                                                    Direction_IN::Import,
                                                                                                    taxWorkTransLoc.TransDate);
            }
            customsVendBOETransLoc                  = CustomsVendBOETrans_IN::findRecId(_boeTransRecId);
            customsVendBOESubTrans.TaxCode          = taxGroupData.TaxCode;
            customsVendBOESubTrans.boeTransRefRecId = _boeTransRecId;

            customsVendBOESubTrans.ExchangeRate = TaxExchangeRateHelper::getCustomsExchangeRate_IN(customsVendBOETransLoc.CurrencyCode,
                                                                                                                    Direction_IN::Import,
                                                                                                                    customsVendBOETransLoc.BillOfEntryDate);
            customsVendBOESubTrans.CustomsImportInvoiceNumberTable  = customsVendBOETransLoc.CustomsImportInvoiceNumberTable;
            customsVendBOESubTrans.CustomsBillOfEntryNumberTable    = customsVendBOETransLoc.CustomsBillOfEntryNumberTable;
            customsVendBOESubTrans.BillOfEntryDate                  = customsVendBOETransLoc.BillOfEntryDate;
            customsVendBOESubTrans.TaxItemGroup                     = customsVendBOETransLoc.TaxItemGroup;

            salesPurchJournalLine = Tax::getSalesPurchJournalLine(customsVendBOESubTrans.SourceRecId, customsVendBOESubTrans.SourceTableId);

            customsVendBOESubTrans.TaxValue  = taxData.percentForTax_IN(customsVendBOESubTrans.TaxCode,
                                                                        customsVendBOESubTrans.CalculationDate,
                                                                        customsVendBOESubTrans.TaxBaseAmount,
                                                                        salesPurchJournalLine);

            customsVendBOESubTrans.PurchId          = customsVendBOETransLoc.PurchId;
            customsVendBOESubTrans.ExemptCode       = taxGroupData.TaxExemptCode;
            customsVendBOESubTrans.AssessableValue  = CurrencyHelper_IN::customsMSTAmount_IN(customsVendBOESubTrans.SourceBaseAmountCur,  customsVendBOESubTrans.SourceCurrencyCode, Direction_IN::Import);
            customsVendBOESubTrans.InventTransId    = customsVendBOETransLoc.InventTransId;
            customsVendBOESubTrans.insert();
            if (EximParameters_IN::checkParameters()
               || EximParameters_IN::checkDEPBParameters()
               || EximParameters_IN::checkEPCGParameters())
            {
                eximVendBOESubTrans.CustomsVendBOESubTransRecId = customsVendBOESubTrans.RecId;
                if (!eximVendBOESubTrans.TaxAmount
                    && eximVendBOESubTrans.IncentiveScheme != EximIncentiveScheme_IN::EPCG)
                {
                    eximVendBOESubTrans.IncentiveScheme = EximIncentiveScheme_IN::None;
                }
                eximVendBOESubTrans.insert();
                eximVendBOESubTrans.clear();
            }
            if (EximParameters_IN::checkDEPBParameters())
            {
                this.updateDEPBDetails(customsVendBOESubTrans.TaxCode, customsVendBOESubTrans.RecId);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchBOEJournalCreate_IN construct()
    {
        return new PurchBOEJournalCreate_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    // <GTE>
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.getJournal());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        PurchParmLine               purchParmLineLoc;
        CustomsVendBOETrans_IN      customsVendBOETransLoc;
        TransitDocumentManager_IN   transitDocManager;

        transitDocManager = TransitDocumentManager_IN::newManager();
        transitDocManager.transit(purchParmTable, customsVendBOEJour);

        while select customsVendBOETransLoc
            where customsVendBOETransLoc.PurchId                            == customsVendBOEJour.PurchId
                && customsVendBOETransLoc.CustomsBillOfEntryJournal_IN      == customsVendBOEJour.RecId
                && customsVendBOETransLoc.BillOfEntryDate                   == customsVendBOEJour.BillOfEntryDate
                && customsVendBOETransLoc.CustomsBillOfEntryNumberTable     == customsVendBOEJour.CustomsBillOfEntryNumberTable
        join purchParmLineLoc
            where purchParmLineLoc.InventTransId    == customsVendBOETransLoc.InventTransId
                && purchParmLineLoc.ParmId          == purchParmTable.ParmId
                && purchParmLineLoc.TableRefId      == purchParmTable.TableRefId
        {
            transitDocManager.transit(purchParmLineLoc, customsVendBOETransLoc, customsVendBOEJour);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>