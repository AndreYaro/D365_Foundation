<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25DebtReserveTaxBalanceCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Microsoft internal use only.
/// </summary>
/// <remarks>
/// The calculation results are used in tax registers for calculating tax differences by balance method.
/// </remarks>
internal class RTax25DebtReserveTaxBalanceCalc
{
    private const str RefTableId = 'RefTableId';
    private const str RefRecId = 'RefRecId';
    private const str AccountingObject = 'AccountingObject';
    private const str PostingDate = 'PostingDate';
    private const str TransactionDate = 'TransactionDate';
    private const str ExcludeReserveCalc = 'ExcludeReserveCalc';
    private const str DebtStartInterval = 'Debt0_45';
    private const str DebtIntermediateInterval = 'Debt45_90';
    private const str DebtEndInterval = 'Debt90_240';
    private const str DebtReserved = 'DebtReserved';
    private const str DebtHopeless = 'Hopeless';
    private const str Reserve = 'Reserve';

    private Map mapBalanceAmounts;
    private Map mapDoubtfulDebtsAmounts;
    private RefTableId regTransTableIdInventory;
    private RefTableId regTransTableIdReserve;
    private FromDate fromDate;
    private ToDate toDate;
    private Query qInventory;
    private Query qReserve;
    private QueryBuildRange qrDateInventory;
    private QueryBuildRange qrDateReserve;
    private RTax25DebtModel debtModel;

    private FieldId debtStartIntervalFieldIdForInventory;
    private FieldId debtEndIntervalFieldIdForInventory;
    private FieldId debtIntermediateIntervalFieldIdForInventory;
    private FieldId debtReservedFieldIdForInventory;
    private FieldId debtHopelessFieldIdForInventory;
    private FieldId refTableIdFieldIdForInventory;
    private FieldId refRecIdFieldIdForInventory;
    private FieldId accountingObjectFieldIdForInventory;
    private FieldId transactionDateFieldIdForInventory;

    private FieldId reserveFieldIdForReserve;
    private FieldId refTableIdFieldIdForReserve;
    private FieldId refRecIdFieldIdForReserve;
    private FieldId accountingObjectFieldIdForReserve;
    private FieldId postingDateFieldIdForReserve;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the expenses calculation.
    /// </summary>
    private void calc()
    {
        for (int idx = 1; idx <= 2; idx++)
        {
            if (idx == 1)
            {
                qrDateInventory.value(queryValue(fromDate - 1));
                qrDateReserve.value(queryValue(fromDate - 1));
            }
            else
            {
                qrDateInventory.value(queryValue(toDate));
                qrDateReserve.value(queryValue(toDate));
            }

            container key;
            Common regTrans;

            QueryRun qr = new QueryRun(qInventory);
            while (qr.next())
            {
                regTrans = qr.get(regTransTableIdInventory);

                if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document)
                {
                    key = [
                        regTrans.(refTableIdFieldIdForInventory),
                        regTrans.(refRecIdFieldIdForInventory),
                        regTrans.(accountingObjectFieldIdForInventory),
                        regTrans.(transactionDateFieldIdForInventory)];
                }
                else
                {
                    key = [0, 0, '', dateNull()];
                }

                AmountMST currentDebt = regTrans.(debtStartIntervalFieldIdForInventory) +
                    regTrans.(debtIntermediateIntervalFieldIdForInventory) +
                    regTrans.(debtEndIntervalFieldIdForInventory) +
                    regTrans.(debtReservedFieldIdForInventory) +
                    regTrans.(debtHopelessFieldIdForInventory);

                this.createOrUpdateMapValue(
                    mapBalanceAmounts,
                    key,
                    idx,
                    currentDebt);
                this.createOrUpdateMapValue(
                    mapDoubtfulDebtsAmounts,
                    key,
                    idx,
                    currentDebt);
            }

            qr = new QueryRun(qReserve);
            while (qr.next())
            {
                regTrans = qr.get(regTransTableIdReserve);

                if (debtModel.AccountingPolicy == RTax25DebtPolicy::Document)
                {
                    key = [
                        regTrans.(refTableIdFieldIdForReserve),
                        regTrans.(refRecIdFieldIdForReserve),
                        regTrans.(accountingObjectFieldIdForReserve),
                        regTrans.(postingDateFieldIdForReserve)];
                }
                else
                {
                    key = [0, 0, '', dateNull()];
                }

                AmountMST currentReserve = -regTrans.(reserveFieldIdForReserve);

                this.createOrUpdateMapValue(
                    mapBalanceAmounts,
                    key,
                    idx,
                    currentReserve);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateMapValue</Name>
				<Source><![CDATA[
    private void createOrUpdateMapValue(
        Map _map,
        container _key,
        int _idx,
        AmountMST _delta)
    {
        container mapValue = [0, 0]; //incoming amount, amount at the end of the period

        if (_map.exists(_key))
        {
            mapValue = _map.lookup(_key);
        }

        AmountMST amount = conPeek(mapValue, _idx) + _delta;

        mapValue = conPoke(mapValue, _idx, amount);

        _map.insert(_key, mapValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalanceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a map containing calculation results of the balances used in tax registers for tax differences calculation.
    /// </summary>
    /// <returns>
    /// A map containing calculation results of the balances used in tax registers for tax differences calculation.
    /// </returns>
    public Map getBalanceMap()
    {
        return mapBalanceAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDoubtfulDebtsMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a map containing calculation results of the doubtful debts used in tax registers for tax differences calculation.
    /// </summary>
    /// <returns>
    /// A map containing calculation results of the doubtful debts used in tax registers for tax differences calculation.
    /// </returns>
    public Map getDoubtfulDebtsMap()
    {
        return mapDoubtfulDebtsAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class according to input parameters.
    /// </summary>
    /// <param name="_fromDate">
    /// The period start date.
    /// </param>
    /// <param name="_toDate">
    /// The period end date.
    /// </param>
    /// <param name="_modelType">
    /// The debt model type.
    /// </param>
    /// <returns>
    /// true if the initialization was successful; otherwise, false.
    /// </returns>
    protected boolean init(
        FromDate _fromDate,
        ToDate _toDate,
        RTax25DebtModelType _modelType)
    {
        boolean ret;

        switch (_modelType)
        {
            case RTax25DebtModelType::RAP:
                RefRecId debtModelRAPRecId = CustParameters::rTax25DebtModel(false);
                if (debtModelRAPRecId)
                {
                    debtModel = RTax25DebtModel::findRecId(debtModelRAPRecId);

                    regTransTableIdInventory = tableNum(RTax25RegisterTrans_DebtDebInventoryRAP);
                    if (debtModel.AccountingPolicy == RTax25DebtPolicy::Total)
                    {
                        regTransTableIdReserve = tableNum(RTax25RegisterTrans_DebtDebitReserveRAP);
                    }
                    else
                    {
                        regTransTableIdReserve = tableNum(RTax25RegisterTrans_DebtDebResDetailRAP);
                    }
                }
                break;
            case RTax25DebtModelType::TAX:
                RefRecId debtModelTAXRecId = CustParameters::rTax25DebtModelTax(false);
                if (debtModelTAXRecId)
                {
                    debtModel = RTax25DebtModel::findRecId(debtModelTAXRecId);

                    regTransTableIdInventory = tableNum(RTax25RegisterTrans_DebtDebitInventory);
                    if (debtModel.AccountingPolicy == RTax25DebtPolicy::Total)
                    {
                        regTransTableIdReserve = tableNum(RTax25RegisterTrans_DebtDebitReservation);
                    }
                    else
                    {
                        regTransTableIdReserve = tableNum(RTax25RegisterTrans_DebtDebitResDetail);
                    }
                }
                break;
        }

        if (debtModel)
        {
            fromDate = _fromDate;
            toDate = _toDate;

            mapBalanceAmounts = new Map(Types::Container, Types::Container);
            mapDoubtfulDebtsAmounts = new Map(Types::Container, Types::Container);

            this.initFieldIds();
            this.initQueries();

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldIds</Name>
				<Source><![CDATA[
    private void initFieldIds()
    {
        if (debtModel)
        {
            debtStartIntervalFieldIdForInventory = fieldName2id(regTransTableIdInventory, DebtStartInterval);
            debtIntermediateIntervalFieldIdForInventory = fieldName2id(regTransTableIdInventory, DebtIntermediateInterval);
            debtEndIntervalFieldIdForInventory = fieldName2id(regTransTableIdInventory, DebtEndInterval);
            debtReservedFieldIdForInventory = fieldName2id(regTransTableIdInventory, DebtReserved);
            debtHopelessFieldIdForInventory = fieldName2id(regTransTableIdInventory, DebtHopeless);
            refTableIdFieldIdForInventory = fieldName2id(regTransTableIdInventory, RefTableId);
            refRecIdFieldIdForInventory = fieldName2id(regTransTableIdInventory, RefRecId);
            accountingObjectFieldIdForInventory = fieldName2id(regTransTableIdInventory, AccountingObject);
            transactionDateFieldIdForInventory = fieldName2id(regTransTableIdInventory, TransactionDate);

            reserveFieldIdForReserve = fieldName2id(regTransTableIdReserve, Reserve);
            refTableIdFieldIdForReserve = fieldName2id(regTransTableIdReserve, RefTableId);
            refRecIdFieldIdForReserve = fieldName2id(regTransTableIdReserve, RefRecId);
            accountingObjectFieldIdForReserve = fieldName2id(regTransTableIdReserve, AccountingObject);
            postingDateFieldIdForReserve = fieldName2id(regTransTableIdReserve, PostingDate);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes queries for calculation.
    /// </summary>
    private void initQueries()
    {
        qInventory = new Query();
        QueryBuildDataSource qbds = qInventory.addDataSource(regTransTableIdInventory);

        qbds.addSelectionField(debtStartIntervalFieldIdForInventory);
        qbds.addSelectionField(debtIntermediateIntervalFieldIdForInventory);
        qbds.addSelectionField(debtEndIntervalFieldIdForInventory);
        qbds.addSelectionField(debtReservedFieldIdForInventory);
        qbds.addSelectionField(debtHopelessFieldIdForInventory);
        qbds.addSelectionField(refTableIdFieldIdForInventory);
        qbds.addSelectionField(refRecIdFieldIdForInventory);
        qbds.addSelectionField(accountingObjectFieldIdForInventory);
        qbds.addSelectionField(transactionDateFieldIdForInventory);

        findOrCreateRange_W(qbds, refTableIdFieldIdForInventory, SysQuery::valueNotEmptyString());
        qrDateInventory = this.addDateRange(qbds);

        qReserve = new Query();
        qbds = qReserve.addDataSource(regTransTableIdReserve);

        qbds.addSelectionField(reserveFieldIdForReserve);
        qbds.addSelectionField(refTableIdFieldIdForReserve);
        qbds.addSelectionField(refRecIdFieldIdForReserve);
        qbds.addSelectionField(accountingObjectFieldIdForReserve);
        qbds.addSelectionField(postingDateFieldIdForReserve);

        findOrCreateRange_W(qbds, refTableIdFieldIdForReserve, SysQuery::valueNotEmptyString());
        qrDateReserve = this.addDateRange(qbds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDateRange</Name>
				<Source><![CDATA[
    private QueryBuildRange addDateRange(QueryBuildDataSource _qbds)
    {
        _qbds = _qbds.addDataSource(tableNum(RTax25RegisterJournalTrans));
        _qbds.joinMode(JoinMode::ExistsJoin);
        _qbds.relations(true);

        _qbds = _qbds.addDataSource(tableNum(RTax25RegisterJournalTable));
        _qbds.joinMode(JoinMode::ExistsJoin);
        _qbds.relations(true);

        return findOrCreateRange_W(_qbds, fieldNum(RTax25RegisterJournalTable, EndDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static RTax25DebtReserveTaxBalanceCalc construct()
    {
        return new RTax25DebtReserveTaxBalanceCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and initializes the class according to input parameters.
    /// </summary>
    /// <param name="_fromDate">
    /// The period start date.
    /// </param>
    /// <param name="_toDate">
    /// The period end date.
    /// </param>
    /// <param name="_modelType">
    /// The debt model type.
    /// </param>
    /// <returns>
    /// An initialized instance of the class.
    /// </returns>
    public static RTax25DebtReserveTaxBalanceCalc newParameters(
        FromDate _fromDate,
        ToDate _toDate,
        RTax25DebtModelType _modelType)
    {
        RTax25DebtReserveTaxBalanceCalc reserveTaxDiffCalc = RTax25DebtReserveTaxBalanceCalc::construct();

        if (reserveTaxDiffCalc.init(
            _fromDate,
            _toDate,
            _modelType))
        {
            reserveTaxDiffCalc.calc();
        }

        return reserveTaxDiffCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>