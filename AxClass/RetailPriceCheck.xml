<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
using CrtPriceAndDiscountCalculationParameters = Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.PriceAndDiscountCalculationParameters;

/// <summary>
/// The <c>RetailPricingCalculatorCreator</c> class is to calculate price and optionally independent discount.
/// </summary>
public class RetailPriceCheck
{
    Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction crtSalesTransaction;
    Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.IPricingDataAccessor pricingManager;
    RetailCurrencyOperations currencyAndRoundingHelper;
    RetailChannelTable currentChannel;
    Map lineIdMap;
    str transactionIdStr;
    UserId userId;
    RetailTempOrderItem tempOrderItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateIndependentPriceDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate independent prices and discounts for a list of <c>RetailPriceDiscountLine</c>.
    /// </summary>
    /// <param name="_channelId">
    /// Channel Id.
    /// </param>
    /// <param name="_list">
    /// List of <c>RetailPriceDiscountLine</c>.
    /// </param>
    /// <remarks>
    /// Fields price and discount on <c>RetailPriceDiscountLine</c> are output. All other fields are input.
    /// </remarks>
    public void calculateIndependentPriceDiscounts(
        RefRecId _channelId,
        List _list)
    {
        System.DateTimeOffset activeDateTimeOffset;

        if (!_channelId || _list == null)
        {
            return;
        }

        activeDateTimeOffset = RetailPricingEngineHelper::getSessionDateTimeInChannelTimeZone(_channelId);

        this.calculateIndependentPriceDiscountsWithDateTime(_channelId, _list, activeDateTimeOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateIndependentPriceDiscountsWithDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate independent prices and discounts for a list of <c>RetailPriceDiscountLine</c>.
    /// </summary>
    /// <param name="_channelId">
    /// Channel Id.
    /// </param>
    /// <param name="_list">
    /// List of <c>RetailPriceDiscountLine</c>.
    /// </param>
    /// <remarks>
    /// Fields price and discount on <c>RetailPriceDiscountLine</c> are output. All other fields are input.
    /// </remarks>
    public void calculateIndependentPriceDiscountsWithDateTime(
        RefRecId _channelId,
        List _list,
        System.DateTimeOffset activeDateTimeOffset)
    {
        if (!_channelId || _list == null)
        {
            return;
        }

        currentChannel = RetailChannelTable::findByRecId(_channelId);
        this.initializePricingEngineCore(_channelId, _list, activeDateTimeOffset);
        this.initializeDataAcessor();
        this.initializeCurrencyOperations();

        Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.PricingEngine::CalculatePricesForTransaction(
            crtSalesTransaction,
            pricingManager,
            currencyAndRoundingHelper,
            '',
            currentChannel.Currency,
            activeDateTimeOffset);

        CrtPriceAndDiscountCalculationParameters calculationParameters = new CrtPriceAndDiscountCalculationParameters();
        if (!RetailPricingImprovedAlgorithmForArrangeLineGroupsFlight::instance().isEnabled())
        {
            calculationParameters.MaxLoopCountForLegacyArrangeLineGroups = -1;
        }
        Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.PricingEngine::CalculateDiscountsForLines(
            pricingManager,
            crtSalesTransaction,
            currencyAndRoundingHelper,
            currentChannel.Currency,
            '', // lineDiscountGroup
            '', // multilineDiscountGroup
            '', // totalDiscountGroup
            true, // calculateSimpleDiscountOnly
            activeDateTimeOffset,
            calculationParameters);

        this.setPriceAndDiscountFromCalculation(_list);

        this.cleanup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate prices for a list of <c>RetailPriceDiscountLine</c>.
    /// </summary>
    /// <param name="_channelId">
    /// Channel Id.
    /// </param>
    /// <param name="_list">
    /// List of <c>RetailPriceDiscountLine</c>.
    /// </param>
    /// <param name="_calculationDateTime">
    /// Calculation date time.
    /// </param>
    /// <remarks>
    /// Field price (and irrelevant discount) on <c>RetailPriceDiscountLine</c> is output. All other fields are input.
    /// </remarks>
    public void calculatePrice(
        RefRecId _channelId,
        List _list,
        System.DateTimeOffset _calculationDateTime)
    {
        if (!_channelId || _list == null)
        {
            return;
        }

        currentChannel = RetailChannelTable::findByRecId(_channelId);
        this.initializePricingEngineCore(_channelId, _list, _calculationDateTime);
        this.initializeDataAcessor();
        this.initializeCurrencyOperations();

        Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.PricingEngine::CalculatePricesForTransaction(
            crtSalesTransaction,
            pricingManager,
            currencyAndRoundingHelper,
            '',
            currentChannel.Currency,
            _calculationDateTime);

        this.setPriceAndDiscountFromCalculation(_list);

        this.cleanup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct default retail price check.
    /// </summary>
    /// <returns>A new instance of <c>RetailPriceCheck</c>.</returns>
    internal static RetailPriceCheck constructDefault()
    {
        return new RetailPriceCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDataAcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Pricing Data Accessor.
    /// </summary>
    /// <remarks>
    /// Override this method if you need to provide your own implementation of the pricing data accessor.
    /// </remarks>
    protected void initializeDataAcessor()
    {
        if (RetailPricingFeatureToggle::shouldUseRetailPricingDataManagerV3())
        {
            pricingManager = new RetailPricingDataManagerV3(currentChannel.RecId, transactionIdStr, tempOrderItem, true);
        }
        else
        {
            pricingManager = new RetailPricingDataManagerV2(currentChannel.RecId, transactionIdStr, tempOrderItem, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCurrencyOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Currency Operations.
    /// </summary>
    /// <remarks>
    /// Override this method if you need to provide your own implementation of the currency operations.
    /// </remarks>
    protected void initializeCurrencyOperations()
    {
        currencyAndRoundingHelper = new RetailCurrencyOperations(CompanyInfoHelper::standardCurrency());;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePricingEngineCore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes pricing engine core.
    /// </summary>
    /// <param name="_channelId">
    /// Channel Id.
    /// </param>
    /// <param name="_list">
    /// List of <c>RetailPriceDiscountLine</c>.
    /// </param>
    /// <param name="_calculationDateTime">
    /// Calculation date time.
    /// </param>
    protected void initializePricingEngineCore(
        RefRecId _channelId,
        List _list,
        System.DateTimeOffset _calculationDateTime)
    {
        ListEnumerator listEn;
        RetailPriceDiscountLine priceDiscountLine;
        ItemId itemId;
        InventDimId inventDimId;
        InventDimCombination inventDimCombination;
        System.Guid transactionId = System.Guid::NewGuid();
        transactionIdStr = transactionId.ToString('N');
        userId = curUserId();
        lineIdMap = new Map(Types::String, Types::Class);
        SalesUnit  salesUnitDefault;
        str lineId;

        Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine crtSalesLine;
        CLRObject clrSalesLines;

        if (!_channelId || _list == null)
        {
            return;
        }

        listEn = _list.getEnumerator();
        crtSalesTransaction = new Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction();
        crtSalesTransaction.set_Id(transactionId.ToString());
        clrSalesLines = crtSalesTransaction.get_SalesLines();

        InventDim allBlankDim = InventDim::findOrCreateBlank();

        while (listEn.moveNext())
        {
            priceDiscountLine = listEn.current();
            itemId = priceDiscountLine.parmItemId();

            RetailChannelTable retailChannelTable = RetailChannelTable::findByRecId(_channelId);

            InventDim inventDim = InventDim::find(priceDiscountLine.parmInventDimId());
            inventDim.InventSiteId = InventLocation::find(retailChannelTable.inventLocation).InventSiteId;
            inventDim.InventLocationId = retailChannelTable.inventLocation;
            inventDimId = InventDim::findOrCreate(inventDim).inventDimId;

            if (inventDimId == allBlankDim.inventDimId)
            {
                inventDimId = '';
            }

            salesUnitDefault = InventTableModule::find(itemId, ModuleInventPurchSales::Sales).UnitId;

            crtSalesLine = new Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine();

            crtSalesLine.set_ItemId(itemId);
            crtSalesLine.set_InventoryDimensionId(inventDimId);
            crtSalesLine.set_Quantity(priceDiscountLine.parmQty());
            crtSalesLine.set_SalesOrderUnitOfMeasure(priceDiscountLine.parmSalesUnit());   
            crtSalesLine.set_OriginalSalesOrderUnitOfMeasure(salesUnitDefault);
            crtSalesLine.AddCatalogId(priceDiscountLine.parmCatalogRefRecId());
            crtSalesLine.set_SalesDate(_calculationDateTime);
            crtSalesLine.set_InventorySiteId(inventDim.InventSiteId);
            crtSalesLine.set_InventoryLocationId(inventDim.InventLocationId);

            lineId = guid2str(newGuid());
            crtSalesLine.set_LineId(lineId);

            RetailPricingUnitOfMeasureConversionHelper::updateCrtUnitOfMeasureConversion(crtSalesLine, itemId, priceDiscountLine.parmSalesUnit(), salesUnitDefault);
            if (priceDiscountLine.parmRetailVariantId())
            {
                crtSalesLine.set_Variant(RetailPricingEngineHelper::getProductVariant(priceDiscountLine.parmRetailVariantId(), itemId, inventDimId));
            }

            lineIdMap.insert(lineId, priceDiscountLine);

            // Fix RetailTmpOrderItem for pricing data manager.
            inventDimCombination = RetailPricingEngine::addToRetailTempOrderItem(tempOrderItem, itemId, inventDimId);

            if (inventDimCombination)
            {
                crtSalesLine.set_InventoryDimensionId(inventDimId);
            }

            clrSalesLines.Add(crtSalesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceAndDiscountFromCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the price and discount from calculation.
    /// </summary>
    /// <param name="_list">
    /// List of <c>RetailPriceDiscountLine</c>.
    /// </param>
    protected void setPriceAndDiscountFromCalculation(List _list)
    {
        RetailPriceDiscountLine priceDiscountLine;
        str lineId;
        Price price;
        DiscAmount discountAmount;

        Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine crtSalesLine;
        CLRObject clrSalesLines, enumeratorSalesLine;
        clrSalesLines = crtSalesTransaction.get_SalesLines();
        enumeratorSalesLine = clrSalesLines.GetEnumerator();

        while (enumeratorSalesLine.MoveNext())
        {
            crtSalesLine = enumeratorSalesLine.get_Current();
            lineId = crtSalesLine.get_LineId();
            if (lineIdMap.exists(lineId))
            {
                priceDiscountLine = lineIdMap.lookup(lineId);
                price = crtSalesLine.get_Price();
                discountAmount = crtSalesLine.get_DiscountAmount();
                priceDiscountLine.parmPrice(price);
                priceDiscountLine.parmDiscount(discountAmount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up.
    /// </summary>
    protected void cleanup()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>