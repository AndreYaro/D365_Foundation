<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCountCreate_Base</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCountCreate_Base extends JournalRunBaseBatch implements BatchRetryable
{
    QueryRun                    queryRun;

    InventJournalId             journalId;
    TransDate                   countDate;
    CountGroupId                countGroupId;
    InventDimParm               inventDimParm;
    NoYes                       physicalUpdates;
    Integer                     maxLines;
    TransDate                   notCountedSince;

    LineNum                     lineNum;

    InventJournalTable          inventJournalTable;
    JournalTableData            journalTableData;
    InventJournalTrans          inventJournalTrans;
    JournalTransData            journalTransData;

    DialogRunbase               dialog;
    DialogField                 dialogJournalId;
    DialogField                 dialogCountDate;
    DialogField                 dialogCountGroupId;
    DialogField                 dialogPhysicalUpdates;
    DialogField                 dialogMaxLines;
    DialogField                 dialogNotCountedSince;

    DialogGroup                 dialogGroupSetup;

    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList1
         CountDate,
         JournalId,
         CountGroupId,
         inventDimParm,
         physicalUpdates,
         maxLines,
         notCountedSince
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateCountSystem</Name>
				<Source><![CDATA[
    protected NoYes activateCountSystem()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowMoreLines</Name>
				<Source><![CDATA[
    protected boolean allowMoreLines()
    {
        LineNum                     totalLineNum;
        InventJournalTrans          tmpInventJournalTrans;
        
        if (InventCountCreateUseItemBaseTasksFlight::instance().isEnabled())
        {
            select count(RecId) from tmpInventJournalTrans
                where tmpInventJournalTrans.JournalId == this.journalId;
            
            totalLineNum = tmpInventJournalTrans.RecId;
        }
        else 
        {
            totalLineNum = lineNum;
        }

        if (totalLineNum < maxLines)
        {
            return true;
        }

        info("@SYS59529");
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class for which the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> returns false,
    ///    this method will not have any effect.
    /// </remarks>
    protected boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventJournalTrans</Name>
				<Source><![CDATA[
    protected void createInventJournalTrans(
        InventSum   _inventSum,
        InventDim   _inventDim,
        NoYes       _includeZeroOnHand = NoYes::Yes)
    {
        InventDim       tmpInventDim;
        InventDimParm   tmpInventDimParm;

        InventTable inventTable = _inventSum.inventTable();
        InventDimGroupFieldSetupEnumerator enumerator = InventDimGroupSetup::newInventTable(inventTable).getFieldSetupEnumerator();

        while (enumerator.moveNext())
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();
            fieldId inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isActive())
            {
                if (inventDimGroupFieldSetup.isMandatory() && !_inventDim.(inventDimFieldId))
                {
                    return;
                }

                fieldId dimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);

                tmpInventDim.(inventDimFieldId)   = _inventDim.(inventDimFieldId);
                tmpInventDimParm.(dimParmFieldId) = inventDimParm.(dimParmFieldId);
            }
        }

        boolean initialized = this.initializeInventJournalTrans(_inventSum, tmpInventDim, tmpInventDimParm, _includeZeroOnHand);
        
        if (initialized)
        {
            Voucher voucher_last;
            if (inventJournalTable.VoucherDraw == JournalVoucherDraw::Entering)
            {
                journalTransData.initVoucher(voucher_last, false); // Voucher is assigned
            }

            journalTransData.addTotal(false, false);
            inventJournalTrans.insert(NoYes::Yes);
            voucher_last = inventJournalTrans.Voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventJournalTrans</c> buffer.
    /// </summary>
    /// <param name = "_inventSum">The <c>InventSum</c> record to use for the initialization.</param>
    /// <param name = "_inventDim">The <c>InventDim</c> record to use for the initialization.</param>
    /// <param name = "_inventDimParm">The <c>InventDimParm</c> record to use for the initialization.</param>
    /// <param name = "_includeZeroOnHand">Whether zero on-hand journals must be included.</param>
    /// <returns>true if the <c>InventJournalTrans</c> buffer is successfully initialized; otherwise, false.</returns>
    protected boolean initializeInventJournalTrans(InventSum _inventSum, InventDim _inventDim, InventDimParm _inventDimParm, NoYes _includeZeroOnHand)
    {
        inventJournalTrans.clear();
        journalTransData.initFromJournalTable();
        inventJournalTrans.TransDate = countDate;
        inventJournalTrans.initFromInventTable(_inventSum.inventTable());
        inventJournalTrans.initFromInventSum(_inventSum);
        [inventJournalTrans.InventOnHand, inventJournalTrans.PdsCWInventOnHand] = this.getOnHandQty(countDate, _inventSum.ItemId, _inventDim, _inventDimParm);
        
        if (!_includeZeroOnHand && inventJournalTrans.InventOnHand == 0)
        {
            return false;
        }

        inventJournalTrans.setInventDimIdFromInventDim(_inventDim);
        inventJournalTrans.setCostPrice('', _inventDim);

        inventJournalTrans.LineNum = this.calculateLineNum();
        inventJournalTrans.Qty = 0;
        inventJournalTrans.CostAmount = 0;
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineNum</Name>
				<Source><![CDATA[
    protected LineNum calculateLineNum()
    {
        lineNum++;
        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialogGroupSetup = dialog.addGroup("@SYS2186");

        dialogJournalId     = dialog.addField(extendedTypeStr(InventJournalId));
        dialogJournalId.value(journalId);
        dialogJournalId.active(false);

        dialogCountDate     = dialog.addField(extendedTypeStr(CountDate), '', "@SYS54348");
        dialogCountDate.value(countDate);

        dialogMaxLines = dialog.addField(extendedTypeStr(Integer), "@SYS59525", "@SYS59526");
        dialogMaxLines.value(maxLines);

        dialogPhysicalUpdates = dialog.addField(enumStr(NoYes), "@SYS59503", "@SYS59504");
        dialogPhysicalUpdates.value(physicalUpdates);

        dialogNotCountedSince = dialog.addField(extendedTypeStr(TransDate), "@SYS59527", "@SYS59528");
        dialogNotCountedSince.value(notCountedSince);

        dialogCountGroupId = dialog.addField(extendedTypeStr(CountGroupId), '', "@SYS54349");
        dialogCountGroupId.value(countGroupId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCounting</Name>
				<Source><![CDATA[
    protected boolean doCounting(
        InventSum       _inventSum,
        InventDim       _inventDim)
    {
        InventTable                         inventTable = _inventSum.inventTable();

        if (inventTable.AutoReportFinished || !inventTable.inventItemType().mustInventBeControlled())
        {
            return false;
        }

        if (!_inventDim.InventDimId)
        {
            _inventDim.InventDimId = InventDim::findOrCreate(_inventDim).InventDimId;
        }

        InventItemLocation inventItemLocation = InventItemLocation::find(_inventSum.ItemId, _inventDim.InventDimId, countGroupId);
        if (!this.validateItemLocationForCounting(inventItemLocation))
        {
            return false;
        }

        CountDate lastCountDate = InventCountJour::lastCountDate(_inventSum.ItemId,_inventDim,inventDimParm);
        if (notCountedSince && lastCountDate > notCountedSince)
        {
            return false;
        }

        if (physicalUpdates)
        {
            CountDate lastPhysicalDate = _inventSum.lastPhysicalDate(_inventDim,inventDimParm);
            if (!lastPhysicalDate || lastPhysicalDate <= lastCountDate)
            {
                return false;
            }
        }

        if (this.isEmptyAndIllegalDimensions(_inventSum, _inventDim))
        {
            return false;
        }

        if (! this.activateCountSystem())
        {
            return true;
        }

        if (!inventItemLocation.CountGroupId)
        {
            return false;
        }

        return this.doCountingBasedOnCountCode(_inventSum, _inventDim, inventItemLocation.CountGroupId, lastCountDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemLocationForCounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if counting is applicable for the inventory item location.
    /// </summary>
    /// <param name = "_inventItemLocation">A <c>InventItemLocation</c> table buffer.</param>
    /// <returns>true if the counting must be done; otherwise, false</returns>
    protected boolean validateItemLocationForCounting(InventItemLocation _inventItemLocation)
    {
        boolean ret = true;

        if (!_inventItemLocation.RecId)
        {
            ret = false;
        }
        InventItemLocationCountingStatus inventItemLocationCountingStatus = InventItemLocationCountingStatus::findItemIdDimId(_inventItemLocation.ItemId, _inventItemLocation.InventDimId);
        if (inventItemLocationCountingStatus && inventItemLocationCountingStatus.CountingStarted && inventItemLocationCountingStatus.CountingJournalId != this.parmJournalId())
        {
            ret = false;
        }

        if (countGroupId && countGroupId != _inventItemLocation.CountGroupId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCountingBasedOnCountCodeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delegate for determining whether the counting should be done or not based on the countCode.
    /// </summary>
    /// <param name="_inventCountCreate_Base">An instance of <c>InventCountCreate_Base</c> that called this delegate.</param>
    /// <param name="_inventCountGroup">A record of the <c>InventCountGroup</c> table.</param>
    /// <param name="_inventSum">A record of the <c>InventSum</c> table.</param>
    /// <param name="_inventDim">A record of the <c>InventDim</c> table.</param>
    /// <param name="_result">An <c>EventHandlerResult</c> instance where a boolean value representing whether the counting should be done can be returned.</param>
    delegate void doCountingBasedOnCountCodeDelegate(
        InventCountCreate_Base  _inventCountCreate_Base,
        InventCountGroup        _inventCountGroup,
        InventSum               _inventSum,
        InventDim               _inventDim,
        EventHandlerResult      _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCountingBasedOnCountCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    determine whether the counting should be done or not based on the countCode.
    /// </summary>
    /// <returns>
    ///    true if the counting should be done, false otherwise.
    /// </returns>
    /// <param name="_inventSum">A record of the <c>InventSum</c> table.</param>
    /// <param name="_inventDim">A record of the <c>InventDim</c> table.</param>
    /// <param name="_countGroupId">Id for the <c>InventCountGroup</c> record.</param>
    /// <param name="_lastCountDate">The date of the last counting.</param>
    private boolean doCountingBasedOnCountCode(
        InventSum           _inventSum,
        InventDim           _inventDim,
        CountGroupId        _countGroupId,
        CountDate           _lastCountDate)
    {
        InventCountGroup inventCountGroup = InventCountGroup::find(_countGroupId);
        if (!inventCountGroup)
        {
            return false;
        }

        switch (inventCountGroup.CountCode)
        {
            case InventCountCode::Period :
                if (!_lastCountDate || countDate - _lastCountDate >= inventCountGroup.CountPeriod)
                {
                    return true;
                }
                break;
            
            case InventCountCode::ZeroOnHand :
                if (InventSumDatePhysicalDim::onHandQty(countDate,_inventSum.ItemId,_inventDim,inventDimParm) == 0)
                {
                    return true;
                }
                break;
            
            case InventCountCode::Minimum :
                InventDimParm minimumParm;
                ReqSetupDim reqSetupDim = ReqSetupDim::newCovInventDimId(ReqSetup::newItemId(_inventSum.ItemId), _inventDim.reqCovDimId(InventDimGroupSetup::newItemId(_inventSum.ItemId)));
                minimumParm.InventLocationIdFlag = NoYes::Yes;
                if (InventSumDatePhysicalDim::onHandQty(countDate,_inventSum.ItemId,_inventDim,minimumParm) <= reqSetupDim.minInventOnHand())
                {
                    return true;
                }
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.doCountingBasedOnCountCodeDelegate(this, inventCountGroup, _inventSum, _inventDim, result);
                
                if (result.hasResult())
                {
                    return result.result();
                }
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        journalId               = dialogJournalId.value();
        countDate               = dialogCountDate.value();
        countGroupId            = dialogCountGroupId.value();
        physicalUpdates         = dialogPhysicalUpdates.value();
        maxLines                = dialogMaxLines.value();
        notCountedSince         = dialogNotCountedSince.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnHandQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the on-hand quantities.
    /// </summary>
    /// <param name="_countDate">
    ///     The date of counting.
    /// </param>
    /// <param name="_itemId">
    ///     The ID of the item.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///     The inventory dimension criteria.
    /// </param>
    /// <param name="_inventDimParm">
    ///     The inventory dimension parameter.
    /// </param>
    /// <returns>
    ///     A container containing inventory and catch-weight quantities.
    /// </returns>
    /// <remarks>
    ///     Container structure:
    ///     [
    ///         inventQty,
    ///         cwQty
    ///     ]
    /// </remarks>
    protected container getOnHandQty(
        TransDate       _countDate,
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        return InventSumDatePhysicalDim::pdsCWOnHandQty(_countDate, _itemId, _inventDimCriteria, _inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedNumOfLines</Name>
				<Source><![CDATA[
    protected boolean hasChangedNumOfLines()
    {
        return true; //When running inside the sandbox the LineNum variable is not set
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalTableData</Name>
				<Source><![CDATA[
    protected void initJournalTableData()
    {
        inventJournalTable  = InventJournalTable::find(journalId, true);
        inventJournalTable.InventDimFixed = InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParm);
        journalTableData    = JournalTableData::newTable(inventJournalTable);
        journalTransData    = journalTableData.journalStatic().newJournalTransData(inventJournalTrans,journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when the
    ///    <c>SysLastValue.GetLast</c> method is called. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();
        maxLines = 999;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    protected void initQueryRun()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyAndIllegalDimensions</Name>
				<Source><![CDATA[
    protected boolean isEmptyAndIllegalDimensions(
        InventSum       _inventSum,
        InventDim       _inventDim)
    {
        if (!_inventSum.isAllFieldsZero())
        {
            return false;
        }

        if (_inventDim.checkDimCountingFieldsValid(_inventSum.ItemId, inventDimParm))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList1,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountDate</Name>
				<Source><![CDATA[
    public TransDate parmCountDate(TransDate _selection = countDate)
    {
        countDate = _selection;
        return countDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    protected InventJournalId parmJournalId(InventJournalId _selection = journalId)
    {
        journalId = _selection;
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is in the dialog and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task
    /// </summary>
    /// <returns>
    ///    true
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false, the button will no longer
    ///    be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean                 ret;
        Integer                 version    = RunBase::getVersion(_packedClass);
        container               packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList1,packedQuery] = _packedClass;
                if (packedQuery)
                {
                   queryRun = new QueryRun(packedQuery);
                }
                ret = true;
                break;

            case 3:
                [version,#CurrentList1,packedQuery] = _packedClass;
                if (packedQuery)
                {
                    QueryRun localQueryRun = new QueryRun(packedQuery);
                    QueryBuildDataSource inventTableQBDS = localQueryRun.query().dataSourceTable(tableNum(InventTable));
                    if (!inventTableQBDS)
                    {
                        // Unpack of old version of InventCountCreate_BatchExpired
                        QueryBuildDataSource inventBatchQBDS = localQueryRun.query().dataSourceTable(tableNum(InventBatch));
                        if (inventBatchQBDS)
                        {
                            inventTableQBDS = inventBatchQBDS.addDataSource(tableNum(InventTable));
                            inventTableQBDS.relations(true);
                            inventTableQBDS.joinMode(JoinMode::ExistsJoin);
                            // Hide the range already present on InventBatch
                            inventTableQBDS.addRange(fieldNum(InventTable, ItemId)).status(RangeStatus::Hidden);
                        }
                    }

                    if (inventTableQBDS)
                    {
                        InventInventoriedPolicy::addInventoriedRangeToInventTable(inventTableQBDS);
                        queryRun = localQueryRun;
                        ret = true;
                    }
                    else
                    {
                        ret = false;
                    }
                }
                else
                {
                    ret = true;
                }
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        InventJournalTrans localInventJournalTrans;

        if (!InventJournalTable::checkExist(journalId))
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>argsJournalId</Name>
				<Source><![CDATA[
    protected static InventJournalId argsJournalId(Args _args)
    {
        InventJournalId     journalId;

        if (_args)
        {
            // Retrieve journal ID from the journal line passed in Args
            if (_args.record() && _args.record().TableId)
            {
                journalId = InventCountCreate_Base::getJournalIdFromRecord(_args.record(), fieldStr(InventJournalTrans, JournalId));
            }

            if (!journalId && _args.caller())
            {
                FormRun caller = _args.caller();

                // Retrieve journal ID from the arguments of the caller form, e.g. from journal lines form opened for a journal
                if (caller.args() && caller.args().record() && caller.args().record().TableId)
                {
                    journalId = InventCountCreate_Base::getJournalIdFromRecord(caller.args().record(), fieldStr(InventJournalTable, JournalId));
                }

                // Retrieve journal ID from the caller form's data source record, e.g. from journal details form currently showing a journal
                if (!journalId && caller.dataSource() && caller.dataSource().cursor() && caller.dataSource().cursor().TableId)
                {
                    journalId = InventCountCreate_Base::getJournalIdFromRecord(caller.dataSource().cursor(), fieldStr(InventJournalTable, JournalId));
                }
            }
        }

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalIdFromRecord</Name>
				<Source><![CDATA[
    private static InventJournalId getJournalIdFromRecord(Common _record, str _journalIdFieldStr)
    {
        InventJournalId journalId;

        FieldId journalIdFieldId = fieldName2id(_record.TableId, _journalIdFieldStr);
        if (journalIdFieldId)
        {
            journalId = _record.(journalIdFieldId);
        }

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS27464";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainHandling</Name>
				<Source><![CDATA[
    protected static void mainHandling(
        InventCountCreate_Base  _inventCountCreate,
        InventJournalId         _journalId,
        JournalForm             _journalForm)
    {
        _journalForm.runbaseMainStart();
        if (!_inventCountCreate.prompt())
        {
            if (! _inventCountCreate.batchInfo().parmBatchExecute())
            {
                _journalForm.runbaseMainCancel(_inventCountCreate.parmJournalId());
            }
            return;
        }

        try
        {
            _inventCountCreate.runOperation();
            _journalForm.runbaseMainEnd(_inventCountCreate,false);
        }
        catch (Exception::Error)
        {
            _journalForm.runbaseMainEnd(_inventCountCreate,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterToCountingGroup</Name>
				<Source><![CDATA[
	/// <summary>
    ///  Add range to the query which will filter with specified counting group ID.
    /// </summary>
	protected void addFilterToCountingGroup()
    {
		if (countGroupId)
        {
            QueryBuildDataSource  inventTableQBDS = queryRun.query().dataSourceTable(tableNum(InventTable));
            if (inventTableQBDS)
            {
                QueryBuildDataSource inventItemLocationQBDS = inventTableQBDS.addDataSource(tableNum(InventItemLocation));
                inventItemLocationQBDS.relations(true);
                inventItemLocationQBDS.joinMode(JoinMode::ExistsJoin);
                inventItemLocationQBDS.addRange(fieldNum(InventItemLocation, CountGroupId)).value(queryvalue(countGroupId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>