<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailRTSTransferOrderLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailRTSTransferOrderLine</c> Class that represents the transfer order line retrieved from an xml containing transfer order line data.
/// </summary>
#ISOCountryRegionCodes
public class RetailRTSTransferOrderLine
{
    private const str RecIdAttribute			 = 'RecId';
    private const str ProductRecordIdAttribute	 = 'ProductRecordId';
    private const str ItemIdAttribute            = 'ItemId';
    private const str EcoResProductNameAttribute = 'EcoResProductName';
    private const str InventDimIdAttribute       = 'InventDimId';
    private const str InventBatchIdAttribute     = 'InventBatchId';
    private const str WmsLocationIdAttribute     = 'WmsLocationId';
    private const str LicensePlateIdAttribute    = 'LicensePlateId';
    private const str InventoryStatusIdAttribute = 'InventoryStatusId';
    private const str WmsPalletIdAttribute       = 'WmsPalletId';
    private const str InventSiteIdAttribute      = 'InventSiteId';
    private const str InventLocationIdAttribute  = 'InventLocationId';
    private const str ConfigIdAttribute          = 'ConfigId';
    private const str InventSizeIdAttribute      = 'InventSizeId';
    private const str InventColorIdAttribute     = 'InventColorId';
    private const str InventStyleIdAttribute     = 'InventStyleId';
    private const str InventVersionIdAttribute   = 'InventVersionId';
    private const str InventSerialIdAttribute    = 'InventSerialId';
    private const str QtyTransferAttribute       = 'QtyTransfer';
    private const str QtyShippedAttribute        = 'QtyShipped';
    private const str QtyReceivedAttribute       = 'QtyReceived';
    private const str QtyShipNowAttribute        = 'QtyShipNow';
    private const str QtyReceiveNowAttribute     = 'QtyReceiveNow';
    private const str QtyRemainShipAttribute     = 'QtyRemainShip';
    private const str QtyRemainReceiveAttribute  = 'QtyRemainReceive';
    private const str UnitIdAttribute            = 'UnitId';
    private const str DataAreaIdAttribute        = 'DataAreaId';
    private const str GuidAttribute              = 'Guid';
    private const str UpdatedInAxAttributeName   = 'UpdatedInAx';
    private const str MessageAttributeName       = 'Message';
    private const str CloseLineAttributeName     = 'CloseLine';

    private InventTransferLineRecId     recId;
    private EcoResDistinctProductRecId  productRecordId;
    private ItemId                      itemId;
    private EcoResProductName           productName;
    private InventDimId                 inventDimId;
    private InventBatchId               inventBatchId;
    private WMSLocationId               wmsLocationId;
    private WHSLicensePlateId           licensePlateId;
    private WHSInventStatusId           inventoryStatusId;
    private WMSPalletId                 wmsPalletId;
    private InventSiteId                inventSiteId;
    private InventLocationId            inventLocationId;
    private EcoResConfigurationName     configId;
    private EcoResSizeName              inventSizeId;
    private EcoResColorName             inventColorId;
    private EcoResStyleName             inventStyleId;
    private EcoResVersionName           inventVersionId;
    private InventSerialId              inventSerialId;    
    private InventTransferQty           qtyTransfer;
    private InventTransferQtyShipped    qtyShipped;
    private InventTransferQtyReceived   qtyReceived;
    private InventTransferQty           qtyShipNow;
    private InventTransferQty           qtyReceiveNow;
    private InventTransferQtyRemain     qtyRemainShip;
    private InventTransferQtyRemain     qtyRemainReceive;
    private UnitOfMeasureSymbol         UnitId;
    private DataAreaId                  dataAreaId;
    private guid                        guidId;
    private boolean                     isUpdatedInAX;
    private List                        serialNumberLines;
    private InventTransferCloseLine     closeLine;
    private XmlElement xmlElement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fromXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the xml formatted transfer order lines to <c>RetailRTSTransferOrderLine</c> objects.
    /// </summary>
    /// <param name = "inventTransferLineNodes">The xml nodes containing the transfer lines.</param>
    /// <returns>Returns the list of <c>RetailRTSTransferOrderLine</c> objects.</returns>
    public static List fromXml(XmlNodeList inventTransferLineNodes)
    {
        List transferOrderLines = new List(Types::Class);

        // create the transfer order line object representations.
        for (int i = 0; i < inventTransferLineNodes.length(); i++)
        {
            RetailRTSTransferOrderLine transferLine = new RetailRTSTransferOrderLine();

            transferLine.xmlElement = inventTransferLineNodes.item(i);
  
            transferLine.recId              = str2int64(transferLine.xmlElement.getAttribute(RecIdAttribute));
            transferLine.productRecordId    = str2Int64(transferLine.xmlElement.getAttribute(ProductRecordIdAttribute));
            transferLine.itemId             = transferLine.xmlElement.getAttribute(ItemIdAttribute);
            transferLine.productName        = transferLine.xmlElement.getAttribute(EcoResProductNameAttribute);
            transferLine.inventDimId        = transferLine.xmlElement.getAttribute(InventDimIdAttribute);
            transferLine.inventBatchId      = transferLine.xmlElement.getAttribute(InventBatchIdAttribute);
            transferLine.wmsLocationId      = transferLine.xmlElement.getAttribute(WmsLocationIdAttribute);
            transferLine.licensePlateId     = transferLine.xmlElement.getAttribute(LicensePlateIdAttribute);
            transferLine.inventoryStatusId  = transferLine.xmlElement.getAttribute(InventoryStatusIdAttribute);
            transferLine.wmsPalletId        = transferLine.xmlElement.getAttribute(WmsPalletIdAttribute);
            transferLine.inventSiteId       = transferLine.xmlElement.getAttribute(InventSiteIdAttribute);
            transferLine.inventLocationId   = transferLine.xmlElement.getAttribute(InventLocationIdAttribute);
            transferLine.configId           = transferLine.xmlElement.getAttribute(ConfigIdAttribute);
            transferLine.inventSizeId       = transferLine.xmlElement.getAttribute(InventSizeIdAttribute);
            transferLine.inventColorId      = transferLine.xmlElement.getAttribute(InventColorIdAttribute);
            transferLine.inventStyleId      = transferLine.xmlElement.getAttribute(InventStyleIdAttribute);
            transferLine.inventVersionId      = transferLine.xmlElement.getAttribute(InventVersionIdAttribute);
            transferLine.inventSerialId     = transferLine.xmlElement.getAttribute(InventSerialIdAttribute);
            transferLine.qtyTransfer        = str2Num((transferLine.xmlElement.getAttribute(QtyTransferAttribute)));
            transferLine.qtyShipped         = str2Num((transferLine.xmlElement.getAttribute(QtyShippedAttribute)));
            transferLine.qtyReceived        = str2Num(transferLine.xmlElement.getAttribute(QtyReceivedAttribute));
            transferLine.qtyShipNow         = str2Num(transferLine.xmlElement.getAttribute(QtyShipNowAttribute));
            transferLine.qtyReceiveNow      = str2Num(transferLine.xmlElement.getAttribute(QtyReceiveNowAttribute));
            transferLine.qtyRemainShip      = str2Num(transferLine.xmlElement.getAttribute(QtyRemainShipAttribute));
            transferLine.qtyRemainReceive   = str2Num(transferLine.xmlElement.getAttribute(QtyRemainReceiveAttribute));
            transferLine.UnitId             = transferLine.xmlElement.getAttribute(UnitIdAttribute);
            transferLine.dataAreaId         = transferLine.xmlElement.getAttribute(DataAreaIdAttribute);
            transferLine.guidId             = str2Guid(transferLine.xmlElement.getAttribute(GuidAttribute));
            transferLine.isUpdatedInAX      = strCmp(strUpr(transferLine.xmlElement.getAttribute(UpdatedInAxAttributeName)), 'TRUE') == 0;
            transferLine.serialNumberLines  = RetailRTSSerialNumberLine::fromXml(transferLine.xmlElement.selectNodes(RetailRTSSerialNumberLine::SerialNumberLineName));
            transferLine.closeLine          = strCmp(strUpr(transferLine.xmlElement.getAttribute(CloseLineAttributeName)), 'TRUE') == 0;
            transferOrderLines.addEnd(transferLine);
        }

        return transferOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePropertiesFromTable</Name>
				<Source><![CDATA[
    public void updatePropertiesFromTable(InventTransferLine inventTransferLine)
    {
        this.recId              = inventTransferLine.RecId;
        this.setAttribute(RecIdAttribute, int642Str(this.recId));        
        this.inventDimId        = inventTransferLine.InventDimId;
        this.setAttribute(InventDimIdAttribute, this.inventDimId);
        InventDim inventDim =   InventDim::find(this.inventDimId);
        this.inventBatchId      = inventDim.inventBatchId;
        this.wmsLocationId      = InventDim.wMSLocationId;
        this.licensePlateId     = InventDim.LicensePlateId;
        this.inventSiteId       = inventDim.InventSiteId;
        this.inventLocationId   = inventDim.InventLocationId;
        this.configId           = inventDim.configId;
        this.inventSizeId       = inventDim.InventSizeId;
        this.inventColorId      = inventDim.InventColorId;
        this.inventStyleId      = inventDim.InventStyleId;
        this.inventVersionId    = inventDim.InventVersionId;
        this.inventSerialId     = inventDim.inventSerialId;

        this.qtyTransfer        = inventTransferLine.QtyTransfer;
        this.qtyShipped         = inventTransferLine.QtyShipped;
        this.qtyReceived        = inventTransferLine.QtyReceived;
        this.qtyShipNow         = inventTransferLine.QtyShipNow;
        this.qtyReceiveNow      = inventTransferLine.QtyReceiveNow;
        this.qtyRemainShip      = inventTransferLine.QtyRemainShip;
        this.qtyRemainReceive   = inventTransferLine.QtyRemainReceive;
        this.UnitId             = inventTransferLine.UnitId;
        this.dataAreaId         = inventTransferLine.DataAreaId;
        this.isUpdatedInAX      = true;

        this.updateXMLElementWithCurrentValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateXMLElementWithCurrentValues</Name>
				<Source><![CDATA[
    private void updateXMLElementWithCurrentValues()
    {  
        this.setAttribute(RecIdAttribute, int642Str(this.recId));
        this.setAttribute(InventDimIdAttribute, this.inventDimId);
        this.setAttribute(InventBatchIdAttribute, this.inventBatchId);
        this.setAttribute(WmsLocationIdAttribute, this.wmsLocationId);
        this.setAttribute(LicensePlateIdAttribute, this.licensePlateId);
        this.setAttribute(InventoryStatusIdAttribute, this.inventoryStatusId);
        this.setAttribute(WmsPalletIdAttribute, this.wmsPalletId);
        this.setAttribute(InventSiteIdAttribute, this.inventSiteId);
        this.setAttribute(InventLocationIdAttribute, this.inventLocationId);
        this.setAttribute(ConfigIdAttribute, this.configId);
        this.setAttribute(InventSizeIdAttribute, this.inventSizeId);
        this.setAttribute(InventColorIdAttribute, this.inventColorId);
        this.setAttribute(InventStyleIdAttribute, this.inventStyleId);
        this.setAttribute(InventVersionIdAttribute, this.inventVersionId);
        this.setAttribute(InventSerialIdAttribute, this.inventSerialId);
        this.setAttribute(UnitIdAttribute, this.UnitId);
        this.setAttribute(DataAreaIdAttribute, this.dataAreaId);
        this.setAttribute(QtyTransferAttribute, num2Str(this.qtyTransfer, 0, 10, 1, 3));
        this.setAttribute(QtyShippedAttribute, num2Str(this.qtyShipped, 0, 10,1 ,3));
        this.setAttribute(QtyReceivedAttribute, num2Str(this.qtyReceived, 0, 10 ,1,3));
        this.setAttribute(QtyShipNowAttribute, num2Str(this.qtyShipNow, 0, 10 ,1, 3));
        this.setAttribute(QtyReceiveNowAttribute, num2Str(this.qtyReceiveNow, 0, 10 ,1, 3));
        this.setAttribute(QtyRemainShipAttribute, num2Str(this.qtyRemainShip, 0, 10 ,1, 3));
        this.setAttribute(QtyRemainReceiveAttribute, num2Str(this.qtyRemainReceive, 0, 10 ,1, 3));
        this.setAttribute(UpdatedInAxAttributeName, this.isUpdatedInAX ? 'true' : 'false');
        this.setAttribute(MessageAttributeName, '');
        this.setAttribute(CloseLineAttributeName, this.closeLine ? 'true' : 'false');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transfer line property as an attribute of the transfer line's xmlElement.
    /// </summary>
    /// <param name = "transferLinePropertyAttribute">The name of the attribute representing the transfer line property.</param>
    /// <param name = "propertyValue">The value of the transfer line propery.</param>
    private void setAttribute(str transferLinePropertyAttribute, str propertyValue)
    {
        XmlElement record = this.xmlElement;
        record.setAttribute(transferLinePropertyAttribute, propertyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setErrorMessage</Name>
				<Source><![CDATA[
    public void setErrorMessage(str errorMessage)
    {
        this.setAttribute(UpdatedInAxAttributeName, 'false');
        this.setAttribute(MessageAttributeName, errorMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTransferOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transfer order line specified in the current object, or updates it if it already exists.
    /// </summary>
    /// <param name = "transferId">The transfer order Id.</param>
    /// <returns>The transfer order line that was created or update.</returns>
    public InventTransferLine createOrUpdateTransferOrderLine(InventTransferId transferId)
    {
        InventTransferTable transferOrder = InventTransferTable::find(transferId);
        InventTransferLine transferOrderLine;
        RetailRTSTransferOrderLine rtsTransferOrderObject = this;

        if (rtsTransferOrderObject.recId == 0)
        {
            // convert unit if needed.
            InventTableModule inventTableModule = InventTableModule::find(rtsTransferOrderObject.itemId, ModuleInventPurchSales::Invent, false);
            InventTransferQty qtyTransferConverted = rtsTransferOrderObject.qtyTransfer;
            if ((rtsTransferOrderObject.UnitId != inventTableModule.UnitId) &&
                (rtsTransferOrderObject.UnitId != '') &&
                (inventTableModule.UnitId != ''))
            {
                qtyTransferConverted = InventTableModule::unitConvert(
                    rtsTransferOrderObject.ItemId,
                    ModuleInventPurchSales::Invent,
                    rtsTransferOrderObject.UnitId,
                    rtsTransferOrderObject.QtyTransfer,
                    rtsTransferOrderObject.InventDimId);
            }

            // create the transfer order line.
            transferOrderLine = RetailRTSTransferOrderLine::createTransferOrderLine(transferId,
                                                                        rtsTransferOrderObject.productRecordId,
                                                                        qtyTransferConverted,
                                                                        inventTableModule.UnitId,
                                                                        rtsTransferOrderObject.inventSerialId,
                                                                        rtsTransferOrderObject.inventBatchId,
                                                                        rtsTransferOrderObject.inventoryStatusId,
                                                                        rtsTransferOrderObject.licensePlateId,
                                                                        rtsTransferOrderObject.wmsLocationId);

            if (inventTableModule)
            {
                ttsbegin;

                transferOrderLine.OverDeliveryPct = inventTableModule.OverDeliveryPct;
                transferOrderLine.UnderDeliveryPct = inventTableModule.UnderDeliveryPct;
                transferOrderLine.update();

                ttscommit;
            }
        }
        else
        {
            // if the transfer order line already exists update the line.
            transferOrderLine = InventTransferLine::findRecId(rtsTransferOrderObject.recId, true);

            // Update quantites

            // update  transfer quantity.
            transferOrderLine.QtyTransfer = rtsTransferOrderObject.qtyTransfer;
            transferOrderLine.update();

            // update delivery remainder.
            transferOrderLine.QtyRemainShip = rtsTransferOrderObject.qtyRemainShip;
            transferOrderLine.updateDeliverRemainder();

            // update shipNow and receiveNow quantities.
            if (transferOrderLine.UnitId != rtsTransferOrderObject.unitId && rtsTransferOrderObject.unitId != '')
            {
                transferOrderLine.QtyReceiveNow += InventTableModule::unitConvert(transferOrderLine.ItemId, 
                                                                                  ModuleInventPurchSales::Invent, 
                                                                                  rtsTransferOrderObject.unitId, 
                                                                                  rtsTransferOrderObject.qtyReceiveNow,
                                                                                  transferOrderLine.InventDimId);

                transferOrderLine.QtyShipNow += InventTableModule::unitConvert(transferOrderLine.ItemId, 
                                                                               ModuleInventPurchSales::Invent, 
                                                                               rtsTransferOrderObject.unitId, 
                                                                               rtsTransferOrderObject.qtyShipNow,
                                                                               transferOrderLine.InventDimId);
            }
            else
            {
                transferOrderLine.QtyReceiveNow += rtsTransferOrderObject.qtyReceiveNow;
                transferOrderLine.QtyShipNow += rtsTransferOrderObject.qtyShipNow;
            }
            transferOrderLine.update();

            // process ship and recevie now quantities
            // first ship now followed by recevie now to make sure receiving doesnt fail because the shipNow qty is not yet processed.

            InventDim inventDimLine = InventDim::find(transferOrderLine.InventDimId);

            if (rtsTransferOrderObject.qtyShipNow > 0)
            {
                inventDimLine.wmsLocationId = rtsTransferOrderObject.wmsLocationId;
                inventDimLine.LicensePlateId = rtsTransferOrderObject.licensePlateId;
                inventDimLine.InventStatusId = rtsTransferOrderObject.inventoryStatusId;
                inventDimLine = InventDim::findOrCreate(inventDimLine);

                RetailTransferOrderHandler::shipTransferLine(transferOrderLine, rtsTransferOrderObject.qtyShipNow, inventDimLine);
            }
                        
            if (rtsTransferOrderObject.qtyReceiveNow > 0)
            {
                InventDim baseReceiveInventDim = RetailTransferOrderHandler::createBaseInventDimForTransferOrderReceivingLine(transferOrder, transferOrderLine, rtsTransferOrderObject);
                if (rtsTransferOrderObject.serialNumberLines == null || rtsTransferOrderObject.serialNumberLines.empty())
                {
                    // If Channel does not posted serial number lines back. Register the transfer order line entirely.
                    InventDim newInventDim = RetailTransferOrderHandler::createInventDimForReceivingLine(
                                transferOrderLine.ItemId,
                                transferOrderLine.InventTransIdReceive,
                                rtsTransferOrderObject.inventoryStatusId,
                                rtsTransferOrderObject.wmsLocationId,
                                rtsTransferOrderObject.licensePlateId);
                    RetailTransferOrderHandler::registerTransferLine(transferOrderLine, newInventDim, rtsTransferOrderObject.qtyReceiveNow, transferOrderLine.ItemId);
                }
                else
                {
                    // We need item id of rtsTransferOrderObject in place when creating invent dim for receiving.
                    rtsTransferOrderObject.paramItemId(transferOrderLine.ItemId);
                    // If Channel post serial number lines back. Register per serial number line.
                    ListEnumerator serialNumberLineEnumerator = rtsTransferOrderObject.serialNumberLines.getEnumerator();
                    while (serialNumberLineEnumerator.moveNext())
                    {
                        RetailRTSSerialNumberLine serialNumberLine = serialNumberLineEnumerator.current();
                        RecId serialNumberLineSourceInventTransRecId = serialNumberLine.parmSourceInventTransRecId();
                        InventTrans serialNumberLineSourceInventTrans = InventTrans::findRecId(serialNumberLineSourceInventTransRecId);

                        if (serialNumberLineSourceInventTrans.StatusReceipt != StatusReceipt::Registered)
                        {
                            // We will register this serial number line.
                            InventSerialId serialNumberLineInventSerialId = serialNumberLine.parmInventSerialId();
                            InventQty qty = serialNumberLine.parmQty();

                            InventDim newInventDim;
                            newInventDim.data(baseReceiveInventDim);
                            newInventDim.inventSerialId = serialNumberLineInventSerialId;
                            newInventDim = InventDim::findOrCreate(newInventDim);
                            RetailTransferOrderHandler::registerTransferLine(transferOrderLine, newInventDim, qty, transferOrderLine.ItemId);
                        }
                    }
                }

                RetailTransferOrderHandler::receiveTransferLine(transferOrderLine, baseReceiveInventDim, rtsTransferOrderObject.qtyReceiveNow);
            }
        }

        return transferOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Createsthe list of transfer lines in the specified transfer order.
    /// </summary>
    /// <param name = "transferId">The transfer Id.</param>
    /// <param name = "_distinctProductId">The product record Id.</param>
    /// <param name = "_qtyToTransfer">The quantity to transfer.</param>
    /// <param name = "_unit">The unit of measure.</param>
    /// <param name = "_serialId">The <c>InventSerialId.</c></param>
    /// <param name = "_batchId">The <c>InventBatchId.</c></param>
    /// <param name = "_inventoryStatusId">The <c>WHSInventStatusId.</c></param>
    /// <param name = "_licensePlateId">The <c>WHSLicensePlateId.</c></param>
    /// <param name = "_wmsLocationId">The <c>WMSLocationId.</c></param>
    /// <returns>Returns the new <c>InventTransferLine</c> object.</c></returns>
    public static InventTransferLine createTransferOrderLine(InventTransferId transferId,
        EcoResDistinctProductRecId _distinctProductId,
        Qty _qtyToTransfer,
        UnitOfMeasureSymbol _unit,
        InventSerialId _serialId = '',
        InventBatchId _batchId = '',
        WHSInventStatusId _inventoryStatusId = '',
        WHSLicensePlateId _licensePlateId = '',
        WMSLocationId _wmsLocationId = '')
    {
        InventTransferLine transferOrderLine;
        InventTransferTable transferOrderHeader = InventTransferTable::find(transferId, true);
        ttsbegin;
        transferOrderLine.initValue();

        // initialize the transfer order buffer.
        transferOrderLine.initFromInventTransferTable(transferOrderHeader, true /*initShipReceiveDates*/);

        EcoResDistinctProduct product = EcoResDistinctProduct::find(_distinctProductId);

        if (!product)
        {
            throw error(strFmt("@Retail:CannotCreateTransferLineForMissingProduct", _distinctProductId));
        }

        if (!product.isReleased())
        {
            throw error(strFmt("@Retail:CannotCreateTransferLineForUnreleasedProduct", _distinctProductId));
        }

        ItemId itemId;
        InventDim inventDim;
        if (product.isDistinctProduct())
        {
            itemId = InventTable::findByProduct(_distinctProductId).ItemId;
        }
        else
        {
            InventDimCombination inventDimCombination = InventDimCombination::findByDistinctProductVariant(_distinctProductId);
            itemId = inventDimCombination.ItemId;

            InventDim _inventDim = inventDimCombination.inventDim();
            inventDim.configId = _inventDim.configId;
            inventDim.InventColorId = _inventDim.InventColorId;
            inventDim.InventSizeId = _inventDim.InventSizeId;
            inventDim.InventStyleId = _inventDim.InventStyleId;
	        inventDim.InventVersionId = _inventDim.InventVersionId;
        }

        inventDim.InventLocationId = transferOrderHeader.InventLocationIdFrom;
        inventDim.inventSiteId = InventLocation::find(transferOrderHeader.InventLocationIdFrom).InventSiteId;
        inventDim.inventSerialId = _serialId;
        inventDim.inventBatchId = _batchId;
        inventDim.InventStatusId = _inventoryStatusId;
        inventDim.LicensePlateId = _licensePlateId;
        inventDim.wMSLocationId = _wmsLocationId;

        InventDimId inventDimId = InventDim::findOrCreate(inventDim).inventDimId;
        transferOrderLine.ItemId = itemId;
        transferOrderLine.InventDimId = inventDimId;

        transferOrderLine.QtyTransfer      = _qtyToTransfer;
        transferOrderLine.QtyRemainShip    = _qtyToTransfer;
        transferOrderLine.QtyRemainReceive = _qtyToTransfer;

        transferOrderLine.LineNum = InventTransferLine::lastLineNum(transferId) + 1;
        transferOrderLine.UnitId = _unit;

        if (!transferOrderLine.validateWrite())
        {
            throw error("@Retail:CreateTransferOrderLineError");
        }

        transferOrderLine.insert();

        if (transferOrderLine.inventTransferTable().StockTransferCostPriceHandlingImprovement_IN)
        {
            InventTransferLine_IN inventTransferLineIN = InventTransferLine_IN::findByinventTransferLine(transferOrderLine.RecId, true);
            if (inventTransferLineIN)
            {
                inventTransferLineIN.recalculateStockTransferValue(transferOrderLine, transferOrderLine.inventDim());
                inventTransferLineIN.update();
            }
        }

        ttscommit;

        return transferOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the list of transfer lines in the specified transfer order.
    /// </summary>
    /// <param name = "transferId">The transfer Id.</param>
    /// <param name = "_distinctProductId">The product record Id.</param>
    /// <param name = "_qtyToTransfer">The quantity to transfer.</param>
    /// <param name = "_unit">The unit of measure.</param>
    /// <param name = "_serialId">The <c>InventSerialId.</c></param>
    /// <param name = "_batchId">The <c>InventBatchId.</c></param>
    /// <param name = "_inventoryStatusId">The <c>WHSInventStatusId.</c></param>
    /// <param name = "_licensePlateId">The <c>WHSLicensefPlateId.</c></param>
    /// <param name = "_wmsLocationId">The <c>WMSLocationId.</c></param>
    /// <returns>Returns the new <c>InventTransferLine</c> object.</returns>
    public static InventTransferLine updateTransferOrderLine(InventTransferId transferId,
        EcoResDistinctProductRecId _distinctProductId,
        Qty _qtyToTransfer,
        UnitOfMeasureSymbol _unit,
        InventSerialId _serialId = '',
        InventBatchId _batchId = '',
        WHSInventStatusId _inventoryStatusId = '',
        WHSLicensePlateId _licensePlateId = '',
        WMSLocationId _wmsLocationId = '')
    {
        InventTransferLine transferOrderLine;
        InventTransferTable transferOrderHeader = InventTransferTable::find(transferId, true);
        ttsbegin;
        // initialize the transfer order buffer.
        transferOrderLine.initFromInventTransferTable(transferOrderHeader, true /*initShipReceiveDates*/);
        
        EcoResDistinctProduct product = EcoResDistinctProduct::find(_distinctProductId);

        if (!product)
        {
            throw error(strFmt("@Retail:CannotCreateTransferLineForMissingProduct", _distinctProductId));
        }

        if (!product.isReleased())
        {
            throw error(strFmt("@Retail:CannotCreateTransferLineForUnreleasedProduct", _distinctProductId));
        }

        ItemId itemId;
        InventDim inventDim;
        if (product.isDistinctProduct())
        {
            itemId = InventTable::findByProduct(_distinctProductId).ItemId;
        }
        else
        {
            InventDimCombination inventDimCombination = InventDimCombination::findByDistinctProductVariant(_distinctProductId);
            itemId = inventDimCombination.ItemId;
            
            InventDim _inventDim = inventDimCombination.inventDim();
            inventDim.configId = _inventDim.configId;
            inventDim.InventColorId = _inventDim.InventColorId;
            inventDim.InventSizeId = _inventDim.InventSizeId;
            inventDim.InventStyleId = _inventDim.InventStyleId;
	        inventDim.InventVersionId = _inventDim.InventVersionId;
        }
        
        inventDim.InventLocationId = transferOrderHeader.InventLocationIdFrom;
        inventDim.inventSiteId = InventLocation::find(transferOrderHeader.InventLocationIdFrom).InventSiteId;
        inventDim.inventSerialId = _serialId;
        inventDim.inventBatchId = _batchId;
        inventDim.InventStatusId = _inventoryStatusId;
        inventDim.LicensePlateId = _licensePlateId;
        inventDim.wMSLocationId = _wmsLocationId;

        InventDimId inventDimId = InventDim::findOrCreate(inventDim).inventDimId;
        transferOrderLine.ItemId = itemId;
        transferOrderLine.InventDimId = inventDimId;

        transferOrderLine.QtyTransfer      = _qtyToTransfer;
        transferOrderLine.QtyRemainShip    = _qtyToTransfer;
        transferOrderLine.QtyRemainReceive = _qtyToTransfer;

        transferOrderLine.LineNum = InventTransferLine::lastLineNum(transferId) + 1;
        transferOrderLine.UnitId = _unit;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            InventTransferLine_IN inventTransferLineIN = transferOrderLine.inventTransferLine_IN();
            inventTransferLineIN.recalculateStockTransferValue(transferOrderLine, inventDim);
            transferOrderLine.packInventTransferLine_IN(inventTransferLineIN);
        }

        transferOrderLine.insert();
        ttscommit;

        return transferOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transfer quantity.
    /// </summary>
    /// <param name = "_qtyTransfer">The transfer quantity.</param>
    /// <returns>The transfer quantity.</returns>
    public InventTransferQty paramQtyTransfer(InventTransferQty _qtyTransfer = qtyTransfer)
    {
        this.qtyTransfer = _qtyTransfer;
        return this.qtyTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the shipped quantity.
    /// </summary>
    /// <param name = "_qtyShipped">The shipped quantity.</param>
    /// <returns>The shipped quantity.</returns>
    public InventTransferQtyShipped paramQtyShipped(InventTransferQtyShipped _qtyShipped = qtyShipped)
    {
        this.qtyShipped = _qtyShipped;
        return this.qtyShipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the received quantity.
    /// </summary>
    /// <param name = "_qtyReceived">The received quantity.</param>
    /// <returns>The received quantity.</returns>
    public InventTransferQtyReceived paramQtyReceived(InventTransferQtyReceived _qtyReceived = qtyReceived)
    {
        this.qtyReceived = _qtyReceived;
        return this.qtyReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyReceiveNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the receive now quantity.
    /// </summary>
    /// <param name = "_qtyReceiveNow">The receive now quantity.</param>
    /// <returns>The receive now quantity.</returns>
    public InventTransferQty paramQtyReceiveNow(InventTransferQty _qtyReceiveNow = qtyReceiveNow)
    {
        this.qtyReceiveNow = _qtyReceiveNow;
        return this.qtyReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyShipNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the ship now quantity.
    /// </summary>
    /// <param name = "_qtyShipNow">The shipnow quantity.</param>
    /// <returns>The receive now quantity.</returns>
    public InventTransferQty paramQtyShipNow(InventTransferQty _qtyShipNow = qtyshipNow)
    {
        this.qtyshipNow = _qtyShipNow;
        return this.qtyshipNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyRemainShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the remainining quantity to ship.
    /// </summary>
    /// <param name = "_qtyRemainShip">The remainining quantity to ship.</param>
    /// <returns>The remainining quantity to ship.</returns>
    public InventTransferQtyRemain paramQtyRemainShip(InventTransferQtyRemain _qtyRemainShip = qtyRemainShip)
    {
        this.qtyRemainShip = _qtyRemainShip;
        return qtyRemainShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyRemainReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the remainining quantity to receive.
    /// </summary>
    /// <param name = "_qtyRemainReceive">The remainining quantity to receive.</param>
    /// <returns>The remainining quantity to ship.</returns>
    public InventTransferQtyRemain paramQtyRemainReceive(InventTransferQtyRemain _qtyRemainReceive = qtyRemainReceive)
    {
        this.qtyRemainReceive = _qtyRemainReceive;
        return qtyRemainReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transfer line RecId.
    /// </summary>
    /// <param name = "_recId">The transfer line RecId.</param>
    /// <returns>The transfer line RecId.</returns>
    public InventTransferLineRecId paramRecId(InventTransferLineRecId _recId = recId)
    {
        this.recId = _recId;
        return this.recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramProductRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the product Record Id.
    /// </summary>
    /// <param name = "_productRecordId">The product record Id.</param>
    /// <returns>The product record Id.</returns>
    public EcoResDistinctProductRecId paramProductRecordId(EcoResDistinctProductRecId _productRecordId = productRecordId)
    {
        this.productRecordId = _productRecordId;
        return this.productRecordId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the item Id.
    /// </summary>
    /// <param name = "_itemId">The item Id.</param>
    /// <returns>The item Id.</returns>
    public ItemId paramItemId(ItemId _itemId = itemId)
    {
        this.itemId = _itemId;
        return this.itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramProductName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the product name.
    /// </summary>
    /// <param name = "_productName">The product name.</param>
    /// <returns>The product name.</returns>
    public EcoResProductName paramProductName(EcoResProductName _productName = productName)
    {
        this.productName = _productName;
        return productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the invent dimension Id.
    /// </summary>
    /// <param name = "_inventDimId">The invent dimension Id.</param>
    /// <returns>The invent dimension Id.</returns>
    public InventDimId paramInventDimId(InventDimId _inventDimId = inventDimId)
    {
        this.inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets invent batch Id.
    /// </summary>
    /// <param name = "_inventBatchId">The invent batch Id.</param>
    /// <returns>Returns the invent batch id.</returns>
    public InventBatchId paramInventBatchId(InventBatchId _inventBatchId = inventBatchId)
    {
        this.inventBatchId = _inventBatchId;
        return inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramWMSLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets WMSLocation Id.
    /// </summary>
    /// <param name = "_wmsLocationId">The WMS location Id.</param>
    /// <returns>The WMS location Id.</returns>
    public WMSLocationId paramWMSLocationId(WMSLocationId _wmsLocationId = wmsLocationId)
    {
        this.wmsLocationId = _wmsLocationId;
        return wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the license plate Id.
    /// </summary>
    /// <param name = "_licensePlateId">The license plate Id.</param>
    /// <returns>The license plate Id.</returns>
    public WHSLicensePlateId paramLicensePlateId(WHSLicensePlateId _licensePlateId = licensePlateId)
    {
        this.licensePlateId = _licensePlateId;
        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventoryStatusId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the inventory status Id.
    /// </summary>
    /// <param name = "_inventoryStatusId">The inventory status Id.</param>
    /// <returns>The inventory status Id.</returns>
    public WHSInventStatusId paramInventoryStatusId(WHSInventStatusId _inventoryStatusId = inventoryStatusId)
    {
        this.inventoryStatusId = _inventoryStatusId;
        return inventoryStatusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramWmsPalletId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the WMS pallet Id.
    /// </summary>
    /// <param name = "_wmsPalletId">The WMS pallet Id.</param>
    /// <returns>The WMS pallet Id.</returns>
    public WMSPalletId paramWmsPalletId(WMSPalletId _wmsPalletId = wmsPalletId)
    {
        this.wmsPalletId = _wmsPalletId;
        return wmsPalletId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the invent site Id.
    /// </summary>
    /// <param name = "_inventSiteId">The invent site Id.</param>
    /// <returns>The invent site Id.</returns>
    public InventSiteId paramInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        this.inventSiteId = _inventSiteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the invent location Id.
    /// </summary>
    /// <param name = "_inventLocationId">The invent location Id.</param>
    /// <returns>The invent location Id.</returns>
    public InventLocationId paramInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        this.inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramConfigId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the config Id.
    /// </summary>
    /// <param name = "_configId">The config Id.</param>
    /// <returns>The config Id.</returns>
    public EcoResConfigurationName paramConfigId(EcoResConfigurationName _configId = configId)
    {
        this.configId = _configId;
        return configId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventSizeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the invent size Id.
    /// </summary>
    /// <param name = "_inventSizeId">The invent size Id.</param>
    /// <returns>The invent size Id.</returns>
    public EcoResSizeName paramInventSizeId(EcoResSizeName _inventSizeId = inventSizeId)
    {
        this.inventSizeId = _inventSizeId;
        return inventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventColorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the invent color Id.
    /// </summary>
    /// <param name = "_inventColorId">The invent color Id.</param>
    /// <returns>The invent color id.</returns>
    public EcoResColorName paramInventColorId(EcoResColorName _inventColorId = inventColorId)
    {
        this.inventColorId = _inventColorId;
        return inventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventStyleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the invent style Id.
    /// </summary>
    /// <param name = "_inventStyleId">The invent style Id.</param>
    /// <returns>The invent style Id.</returns>
    public EcoResStyleName paramInventStyleId(EcoResStyleName _inventStyleId = inventStyleId)
    {
        this.inventStyleId = _inventStyleId;
        return inventStyleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the invent version Id.
    /// </summary>
    /// <param name = "_inventVersionId">The invent version Id.</param>
    /// <returns>The invent version Id.</returns>
    public EcoResVersionName paramInventVersionId(EcoResVersionName _inventVersionId = inventVersionId)
    {
        this.inventVersionId = _inventVersionId;
        return inventVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the invent serial Id.
    /// </summary>
    /// <param name = "_inventSerialId">The <c>InventSerialId</c></param>
    /// <returns>The invent serial Id.</returns>
    public InventSerialId paramInventSerialId(InventSerialId _inventSerialId = inventSerialId)
    {
        this.inventSerialId = _inventSerialId;
        return inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets or sets the unit Id.
    /// </summary>
    /// <param name = "_UnitId">The unit Id.</param>
    /// <returns>The unit Id.</returns>
    public UnitOfMeasureSymbol paramUnitId(UnitOfMeasureSymbol _UnitId = UnitId)
    {
        this.UnitId=_UnitId;
        return this.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramdataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets or sets the data area Id.
    /// </summary>
    /// <param name = "_dataAreaId">The data area Id.</param>
    /// <returns>The data area Id.</returns>
    public DataAreaId paramdataAreaId(DataAreaId _dataAreaId = dataAreaId)
    {
        this.dataAreaId=_dataAreaId;
        return this.dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramguidId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets or sets the guidId.
    /// </summary>
    /// <param name = "_guidId">The guidId.</param>
    /// <returns>The guidId.</returns>
    public guid paramguidId(guid _guidId = guidId)
    {
        this.guidId = _guidId;
        return this.guidId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets message attribute of the transfer line.
    /// </summary>
    /// <returns>The xml element representing the transfer line.</returns>
    public str paramMessage()
    {
        XmlElement xmlRecord = this.xmlElement;
        return xmlRecord.getAttribute(MessageAttributeName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramUpdatedInAX</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets or sets the flag indicating the status of the operation.
    /// </summary>
    /// <param name = "_isUpdatedInAX">The status of the operation.</param>
    /// <returns>True if the record is processed successfully; false otherwise.</returns>
    public boolean paramUpdatedInAX(boolean _isUpdatedInAX = isUpdatedInAX)
    {
        if (!prmIsDefault(_isUpdatedInAX))
        {
            XmlElement xmlRecord = this.xmlElement;
            xmlRecord.setAttribute(UpdatedInAxAttributeName, _isUpdatedInAX ? 'true' : 'false');
        }

        this.isUpdatedInAX = _isUpdatedInAX;
        return this.isUpdatedInAX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSerialNumberLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the serial number lines.
    /// </summary>
    /// <param name = "_serialNumberLines">The serial number lines.</param>
    /// <returns>The serial number lines.</returns>
    public List paramSerialNumberLines(List _serialNumberLines = serialNumberLines)
    {
        this.serialNumberLines = _serialNumberLines;
        return this.serialNumberLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramXmlElement</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets or sets the xml element representing the transfer line.
    /// </summary>
    /// <param name = "_xmlElement">The xml element representing the transfer line.</param>
    /// <returns>The xml element representing the transfer line.</returns>
    public XmlElement paramXmlElement(XmlElement _xmlElement = xmlElement)
    {
        this.xmlElement = _xmlElement;
        return this.xmlElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramCloseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets a value indicating whether this line should be closed.
    /// </summary>
    /// <param name = "_closeLine">The value indicating whether this line should be closed.</param>
    /// <returns>The value indicating whether this line should be closed.</returns>
    public InventTransferCloseLine paramCloseLine(InventTransferCloseLine _closeLine = closeLine)
    {
        this.closeLine = _closeLine;
        return this.closeLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>