<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeOpenTransDP_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CustBillOfExchangeOpenTransDP_ES</c> class is the report data provider class for the
///     <c>CustBillOfExchangeOpenTrans_ES</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(CustBillOfExchOpenTransContract_ES))
]
public class CustBillOfExchangeOpenTransDP_ES extends SRSReportDataProviderBase
{
    private const str FeatureReference = 'ES-00020';

    CustBillOfExchangeOpenTransTmp_ES custBillOfExchangeOpenTransTmp_ES;
    CustBillOfExchangeJour custBillOfExchangeJour;
    CustBillOfExchangeTrans custBillOfExchangeTrans;
    CustTrans custTrans;
    CustBillOfExchangeID billOfExchangeId;
    CustReport_BillOfExchangeOpenTrans_ES custReport_BillOfExchangeOpenTrans_ES;
    CustBillOfExchangeOpenTrans_ES custBillOfExchangeOpenTrans_ES;

    CustAccount fromCustAccount;
    CustAccount toCustAccount;
    DueDate fromDueDate;
    DueDate toDueDate;
    CustPostingProfile postingProfile;
    CustBillOfExchangeID fromBillId;
    CustBillOfExchangeID toBillId;
    NoYesId open;
    Voucher voucher;
    CustBillOfExchangeStatus status;
    PaymMode displayPaymMode;
    TransTxt displayTxt;
    DueDate displayDueDate;
    AmountMST displayAmountMST;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchBillId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Contains the logic for getting the report data for a bill ID.
    /// </summary>
    private void fetchBillId()
    {
        Query query = this.queryRanges(this.initQuery(new Query()));
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            custBillOfExchangeJour = queryRun.get(tablenum(CustBillOfExchangeJour));
            custBillOfExchangeTrans = queryRun.get(tablenum(CustBillOfExchangeTrans));

            if (custBillOfExchangeJour.Status != CustVendNegInstStatus::None)
            {
                custReport_BillOfExchangeOpenTrans_ES.custTransInCartera(custBillOfExchangeTrans);

                displayPaymMode = custReport_BillOfExchangeOpenTrans_ES.parmPaymMode();
                displayTxt = custReport_BillOfExchangeOpenTrans_ES.parmTxt();
                displayDueDate = custReport_BillOfExchangeOpenTrans_ES.parmDueDate();
                displayAmountMST = custReport_BillOfExchangeOpenTrans_ES.parmAmountMST();

                this.insertCustInvoiceSettled_TransDateTmp_ES();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchCustomerDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Contains the logic for retrieving the report data for the due date.
    /// </summary>
    private void fetchCustomerDueDate()
    {
        Query query = this.queryRanges(this.initQuery(new Query()));
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            custTrans = queryRun.get(tablenum(CustTrans));
            this.insertCustInvoiceSettled_TransDateTmp_ES();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustBillOfExchangeOpenTransTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the data from the <c>CustBillOfExchangeOpenTransTmp_ES</c> temporary table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>CustBillOfExchangeOpenTransTmp_ES</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustBillOfExchangeOpenTransTmp_ES))
    ]
    public CustBillOfExchangeOpenTransTmp_ES getCustBillOfExchangeOpenTransTmp_ES()
    {
        select custBillOfExchangeOpenTransTmp_ES;
        return custBillOfExchangeOpenTransTmp_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a query.
    /// </summary>
    /// <param name="_query">
    ///     The main data source of the report.
    /// </param>
    /// <returns>
    ///     The constructed query.
    /// </returns>
    private Query initQuery(Query _query)
    {
        QueryBuildDataSource custTransDS;
        QueryBuildDataSource custBillOfExchangeJourDS;
        QueryBuildDataSource custBillOfExchangeTransDS;

        switch (custBillOfExchangeOpenTrans_ES)
        {
            case CustBillOfExchangeOpenTrans_ES::Cust:
                custTransDS = _query.addDataSource(tablenum(CustTrans));
                _query.dataSourceNo(1).addSortField(fieldnum(CustTrans, AccountNum));
                _query.dataSourceNo(1).addSortField(fieldnum(CustTrans, TransDate));
                break;
            case CustBillOfExchangeOpenTrans_ES::DueDate:
                custTransDS = _query.addDataSource(tablenum(CustTrans));
                _query.dataSourceNo(1).addSortField(fieldnum(CustTrans, DueDate));
                _query.dataSourceNo(1).addSortField(fieldnum(CustTrans, AccountNum));
                break;
            case CustBillOfExchangeOpenTrans_ES::BillId:
                custBillOfExchangeJourDS = _query.addDataSource(tablenum(CustBillOfExchangeJour));
                custBillOfExchangeTransDS = custBillOfExchangeJourDS.addDataSource(tablenum(CustBillOfExchangeTrans));
                custBillOfExchangeTransDS.addLink(fieldnum(CustBillOfExchangeJour,BillOfExchangeId), fieldnum(CustBillOfExchangeTrans, BillOfExchangeId));
                _query.dataSourceNo(1).addSortField(fieldnum(CustBillOfExchangeJour,BillOfExchangeId));
                break;
            default:
                break;
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustInvoiceSettled_TransDateTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts data into the temporary table.
    /// </summary>
    private void insertCustInvoiceSettled_TransDateTmp_ES()
    {
        custBillOfExchangeOpenTransTmp_ES.CustBillOfExchangeJour_BillOfExchangeId = custBillOfExchangeJour.BillOfExchangeId;
        custBillOfExchangeOpenTransTmp_ES.CustBillOfExchangeJour_CustAccount = custBillOfExchangeJour.CustAccount;
        custBillOfExchangeOpenTransTmp_ES.CustBillOfExchangeJour_Status = custBillOfExchangeJour.Status;

        custBillOfExchangeOpenTransTmp_ES.CustBillOfExchangeTrans_BillOfExchangeId = custBillOfExchangeTrans.BillOfExchangeId;
        custBillOfExchangeOpenTransTmp_ES.CustBillOfExchangeTrans_CustAccount = custBillOfExchangeTrans.CustAccount;
        custBillOfExchangeOpenTransTmp_ES.CustBillOfExchangeTrans_SeqNum = custBillOfExchangeTrans.SeqNum;
        custBillOfExchangeOpenTransTmp_ES.CustBillOfExchangeTrans_Status = custBillOfExchangeTrans.Status;
        custBillOfExchangeOpenTransTmp_ES.CustBillOfExchangeTrans_TransDate = custBillOfExchangeTrans.TransDate;
        custBillOfExchangeOpenTransTmp_ES.CustBillOfExchangeTrans_Voucher = custBillOfExchangeTrans.Voucher;

        custBillOfExchangeOpenTransTmp_ES.Txt = displayTxt;
        custBillOfExchangeOpenTransTmp_ES.AmountMST_1 = displayAmountMST;
        custBillOfExchangeOpenTransTmp_ES.DueDate = displayDueDate;
        custBillOfExchangeOpenTransTmp_ES.DueDate_1 = custReport_BillOfExchangeOpenTrans_ES.dueDate(custBillOfExchangeJour);
        custBillOfExchangeOpenTransTmp_ES.PaymMode = displayPaymMode;
        custBillOfExchangeOpenTransTmp_ES.InvoiceId = custReport_BillOfExchangeOpenTrans_ES.invoiceTxt(custBillOfExchangeTrans);
        custBillOfExchangeOpenTransTmp_ES.RemittedToBankAccountId = custReport_BillOfExchangeOpenTrans_ES.remittedToBankAccount(billOfExchangeId);
        custBillOfExchangeOpenTransTmp_ES.RemainAmountMST = custTrans.remainAmountMST();
        custBillOfExchangeOpenTransTmp_ES.CustTrans_AccountNum = custTrans.AccountNum;
        custBillOfExchangeOpenTransTmp_ES.CustTrans_AmountMST = custTrans.AmountMST;
        custBillOfExchangeOpenTransTmp_ES.CustTrans_BillOfExchangeID = custTrans.BillOfExchangeID;
        custBillOfExchangeOpenTransTmp_ES.CustTrans_BillOfExchangeSeqNum = custTrans.BillOfExchangeSeqNum;
        custBillOfExchangeOpenTransTmp_ES.CustTrans_DueDate = custTrans.DueDate;
        custBillOfExchangeOpenTransTmp_ES.CustTrans_PaymMode = custTrans.PaymMode;
        custBillOfExchangeOpenTransTmp_ES.CustTrans_PostingProfile = custTrans.PostingProfile;
        custBillOfExchangeOpenTransTmp_ES.CustTrans_SettleAmountMST = custTrans.SettleAmountMST;
        custBillOfExchangeOpenTransTmp_ES.CustTrans_TransDate = custTrans.TransDate;
        custBillOfExchangeOpenTransTmp_ES.CustTrans_Txt = custTrans.Txt;
        custBillOfExchangeOpenTransTmp_ES.CustTrans_Voucher = custTrans.Voucher;
        custBillOfExchangeOpenTransTmp_ES.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///     Provides the ability to write the report business logic. This method will be called by SSRS at
    ///     runtime. The method computes data and populates the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        CustBillOfExchOpenTransContract_ES contract = this.parmDataContract();
        custReport_BillOfExchangeOpenTrans_ES = new CustReport_BillOfExchangeOpenTrans_ES();

        custBillOfExchangeOpenTrans_ES = contract.parmGroupBy();

        if (custBillOfExchangeOpenTrans_ES == CustBillOfExchangeOpenTrans_ES::BillId)
        {
            fromCustAccount = contract.parmFromCustomer();
            toCustAccount = contract.parmToCustomer();
            fromBillId = contract.parmFromBillId();
            toBillId = contract.parmToBillId();
            open = contract.parmOpen();
            voucher = contract.parmVoucher();
            status = contract.parmStatus();
        }
        else
        {
            fromCustAccount = contract.parmFromCustomer();
            toCustAccount = contract.parmToCustomer();

            fromDueDate = contract.parmFromDueDate();
            toDueDate = contract.parmToDueDate();
            postingProfile = contract.parmPostingProfile();
        }

        switch (custBillOfExchangeOpenTrans_ES)
        {
            case CustBillOfExchangeOpenTrans_ES::Cust:
                this.fetchCustomerDueDate();
                break;

            case CustBillOfExchangeOpenTrans_ES::DueDate:
                this.fetchCustomerDueDate();
                break;

            case CustBillOfExchangeOpenTrans_ES::BillId:
                this.fetchBillId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Passes the UI parameter values to query ranges.
    /// </summary>
    /// <param name="_newQuery">
    ///     The parameter that contains the values to pass.
    /// </param>
    /// <returns>
    ///     Retrieves a query with the UI parameter values as ranges.
    /// </returns>
    private Query queryRanges(Query _newQuery)
    {
        if (custBillOfExchangeOpenTrans_ES == CustBillOfExchangeOpenTrans_ES::BillId)
        {
            if (fromCustAccount || toCustAccount)
            {
                _newQuery.dataSourceNo(1).addRange(fieldnum(CustBillOfExchangeJour, CustAccount)).value(queryRange(fromCustAccount, toCustAccount));
            }

            if (fromBillId || toBillId)
            {
                _newQuery.dataSourceNo(1).addRange(fieldnum(CustBillOfExchangeJour, BillOfExchangeId)).value(queryRange(fromBillId, toBillId));
            }

            if (open)
            {
                _newQuery.dataSourceNo(1).addRange(fieldnum(CustBillOfExchangeJour, Open)).value(enum2str(open));
            }

            if (voucher)
            {
                _newQuery.dataSourceNo(2).addRange(fieldnum(CustBillOfExchangeTrans, Voucher)).value(voucher);
            }

            if (status)
            {
                _newQuery.dataSourceNo(2).addRange(fieldnum(CustBillOfExchangeTrans, Status)).value(enum2str(status));
            }
        }
        else
        {
            if (fromCustAccount || toCustAccount)
            {
                _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans,AccountNum)).value(queryRange(fromCustAccount, toCustAccount));
            }

            if (fromDueDate || toDueDate)
            {
                _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans,DueDate)).value(queryRange(fromDueDate, toDueDate));
            }

            if (postingProfile)
            {
                _newQuery.dataSourceNo(1).addRange(fieldnum(CustTrans,PostingProfile)).value(postingProfile);
            }
        }

        return _newQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>