<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Prod_JournalProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_Prod_JournalProd</c> class is used whenever the production report as finished
/// journal line is created or updated.
/// </summary>
/// <remarks>
/// This class is also used to obtain any information that is related to the report as finished journal
/// line; for example, item number, inventory model group, inventory dimensions, and so on.
/// </remarks>
class InventMov_Prod_JournalProd extends InventMov_Prod
{
    ProdJournalProd prodJournalProd;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchProdDate</Name>
				<Source><![CDATA[
        InventBatchProdDate batchProdDate(InventTrans _inventTrans = null)
    {
        return prodJournalProd.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>childBuffer</Name>
				<Source><![CDATA[
        public Common childBuffer(Common _prodJournalProd = prodJournalProd)
    {
        prodJournalProd = _prodJournalProd as ProdJournalProd;
        return prodJournalProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransFromBuffer</Name>
				<Source><![CDATA[
        public void initInventTransFromBuffer(
        InventTrans         _inventTrans,
        InventMovement      _movement_orig)
    {
        super(_inventTrans,_movement_orig);

        _inventTrans.TransChildType     = this.transChildType();
        _inventTrans.TransChildRefId    = this.transChildRefId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChildBuffer</Name>
				<Source><![CDATA[
        public InventTransChildRefId insertChildBuffer(
        InventDimId         _inventDimId,
        InventQty           _qtyNow,
        UnitQty             _qtyNowUnit,
        boolean             _splitMovement,
        Object              _updateClass = null
        , PdsCWInventQty    _pdsQtyNow = 0
        )
    {
        return prodJournalProd.InventTransChildRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
        public InventDimId inventDimId()
    {
        return prodJournalProd.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustClearChildRef</Name>
				<Source><![CDATA[
        // Must child reference be cleared when updating items picked or registered
    public boolean mustClearChildRef()
    {
        return prodJournalProd.InventReturnFlag ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(
        ProdTable           _prodTable,
        ProdJournalProd     _prodJournalProd,
        InventType          _inventType = ProdTableType::construct(_prodTable))
    {
        prodJournalProd  = _prodJournalProd;

        super(_prodTable,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDoAutoLossProfitEstimate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether to do auto loss profit estimate.
    /// </summary>
    /// <returns>
    /// True if production journal must undergo auto loss profit estimate.
    /// </returns>
    public boolean mustDoAutoLossProfitEstimate()
    {
        boolean ret = super();

        if (ret &&
            prodJournalProd.prodTable().ProjId &&
            prodJournalProd.ProdFinished &&
            !prodJournalProd.QtyGood)
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
        public InventMovement newMovement_Orig()
    {
        if (!prodTable.RecId)
        {
            return null;
        }

        if (prodJournalProd.RecId)
        {
            return InventMov_Prod_JournalProd::newFromProdTableProdJournalProd(prodTable.orig(), prodJournalProd.orig(), inventType);
        }

        return new InventMov_Prod(prodTable.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBaseAttributeValue</Name>
				<Source><![CDATA[
        public PDSBaseValue pdsBaseAttributeValue()
    {
        return prodJournalProd.PDSBaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialProdDate</Name>
				<Source><![CDATA[
        public InventSerialProdDate serialProdDate(InventTrans _inventTrans = null)
    {
        return prodJournalProd.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
        public void setInventDimId(InventDimId _dimId)
    {
        super(_dimId);

        prodJournalProd.InventDimId = _dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transChildRefId</Name>
				<Source><![CDATA[
        public InventTransChildRefId transChildRefId()
    {
        if (prodJournalProd.InventReturnFlag)
        {
            return super();
        }

        return prodJournalProd.InventTransChildRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transChildType</Name>
				<Source><![CDATA[
        public InventTransChildType transChildType()
    {
        if (prodJournalProd.InventReturnFlag)
        {
            return super();
        }

        return prodJournalProd.InventTransChildType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation = true)
    {
        // process report as finished scrap with child reference in order to avoid deprecation of a transaction with non-deterministic tracking dimension
        if (buffer is prodTable
            && !prodTable.InventRefTransId
            && prodJournalProd.isScrapReportedAsFinishedForTrackingDim())
        {
            InventUpd_ChildReference::newParameters(this.parentMovement(),
                                                prodJournalProd.QtyError,
                                                prodJournalProd.QtyError,
                                                false,
                                                prodJournalProd.InventDimId,
                                                (this.parentMovement().pdsCWItem() ? prodJournalProd.PdsCWBatchErr : 0)).updateNow();

            prodTable.update(false, this.childBuffer());
        }
        else
        {
            super(_updateReservation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Prod_JournalProd</c> class that is based on the
    ///    specified record.
    /// </summary>
    /// <param name="_prodTable">
    ///    The <c>ProdTable</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Prod_JournalProd</c> class.
    /// </returns>
    public static InventMov_Prod_JournalProd newFromProdTable(ProdTable _prodTable)
    {
        return new InventMov_Prod_JournalProd(_prodTable, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdTableProdJournalProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Prod_JournalProd</c> class that is based on the
    ///    specified records.
    /// </summary>
    /// <param name="_prodTable">
    ///    The <c>ProdTable</c> record for which the class is instantiated.
    /// </param>
    /// <param name="_prodJournalProd">
    ///    The <c>ProdJournalProd</c> record for which the class is instantiated.
    /// </param>
    /// <param name="_inventType">
    ///    The associated <c>InventType</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Prod_JournalProd</c> class.
    /// </returns>
    public static InventMov_Prod_JournalProd newFromProdTableProdJournalProd(
        ProdTable           _prodTable,
        ProdJournalProd     _prodJournalProd,
        InventType          _inventType = ProdTableType::construct(_prodTable))
    {
        return new InventMov_Prod_JournalProd(_prodTable, _prodJournalProd, _inventType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>