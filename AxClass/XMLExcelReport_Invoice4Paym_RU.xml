<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlExcelReport_Invoice4Paym_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints form of invoice for payment to excel
/// </summary>
class XmlExcelReport_Invoice4Paym_RU extends XMLExcelReport_Standard_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    str                         cashDiscTxt1,
                                cashDiscTxt2;
    str                         totalInWords;
    str                         totalVatInWords;

    SalesPurchReport_RU         salesPurchReport;

    #define.width(102)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals
    /// </summary>
    /// <remarks>
    /// not used in this report
    /// </remarks>
    protected void addTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals on page
    /// </summary>
    /// <remarks>
    /// not used in this report
    /// </remarks>
    protected void addTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>agreementString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string which holds data about agreement information
    /// </summary>
    /// <returns>
    /// String which holds data about agreement information
    /// </returns>
    protected str agreementString()
    {
        str strNumberFormDate;
        ;
        strNumberFormDate = strFmt( "@GLS102243",
                                    header.AgreementDocumentTitle,
                                    strFmt("@GLS106007",header.AgreementDate));
        return strFmt("@GLS110799", strFmt("@GLS110799", "@GLS105821", "@SYS15240"), strNumberFormDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of body section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return max(document.getNamedRangeHeightWrapped('ItemName', line.ItemName ? line.ItemName : ' '),
                   document.getNamedRangeHeightWrapped('Unit',     line.Unit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals
    /// </summary>
    /// <remarks>
    /// not used in this report
    /// </remarks>
    protected void clearTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals on page
    /// </summary>
    /// <remarks>
    /// not used in this report
    /// </remarks>
    protected void clearTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        widthCols = #width;

        curWorkSheetNum = 1;
        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    /// <remarks>
    /// Returns blank string, because report name included in documentName
    /// </remarks>
    protected Filename fileName()
    {
        return "@GEE7467";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// DocumentNumber for selected invoice for payment
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return header.DocumentName + '.xlsx';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    protected void fillBody()
    {
        this.insertValueToSection('LineNo'        , line.LineNum);
        this.insertValueToSection('ItemName'      , line.ItemName);
        this.insertValueToSection('Qty'           , line.Qty);
        this.insertValueToSection('Unit'          , line.Unit);
        this.insertValueToSection('Price'         , line.Price);
        this.insertValueToSection('Excise'        , this.getExciseTxt());
        this.insertValueToSection('VATValue'      , line.VatValueStr);
        this.insertValueToSection('VATAmount'     , line.vatAmount);
        this.insertValueToSection('AmountInclVAT' , line.lineAmountWithVAT());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page footer section with data
    /// </summary>
    protected void fillPageFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data
    /// </summary>
    protected void fillPageHeader()
    {
        this.insertValueToSection('pageNum', pageNum > 1 ? strFmt("@SYS24160", pageNum) : #blank);

        this.insertValueToSection('PriceCurHeader'        , header.CurrencyShortName);
        this.insertValueToSection('VATAmountCurHeader'    , header.CurrencyShortName);
        this.insertValueToSection('AmountInclVATCurHeader', header.CurrencyShortName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data
    /// </summary>
    protected void fillReportFooter()
    {
        this.insertValueToSection('TotalVATAmount'        , header.TotalVATAmount);
        this.insertValueToSection('TotalAmountWithVAT'    , header.TotalAmountWithVAT);
        this.insertValueToSection('TotalAmountWithVATTxt' , this.totalInWords());
        this.insertValueToSection('TotalVATAmountTxt'     , this.totalVatInWords());
        this.insertValueToSection('ContractString'        , this.agreementString());
        this.insertValueToSection('DueDate'               , header.DueDate);
        this.insertValueToSection('EndDiscPct'            , header.EndDiscPct);
        this.insertValueToSection('DirectorName'          , header.DirectorName);
        this.insertValueToSection('AccountantName'        , header.AccountantName);
        this.insertValueToSection('TakerName'             , header.TakerName);
        this.insertValueToSection('CashDiscTxt1'          , cashDiscTxt1);
        this.insertValueToSection('CashDiscTxt2'          , cashDiscTxt2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        this.initSplitText();

        this.insertValueToSection(          'DocumentName'   , header.DocumentName);
        this.insertValueToSection(          'SalesPurchId'   , header.SalesPurchId);
        this.insertValueToSection(          'Attention'      , header.AcceptorName);
        this.insertValueToSection(          'VendName'       , header.VendName);
        this.insertValueToSectionNoOverflow('VendBankAddress', header.VendBankAddress);
        this.insertValueToSection(          'CustName'       , header.CustName);
        this.insertValueToSectionNoOverflow('CustBankAddress', header.CustBankAddress);
        this.insertValueToSection(          'VendINN'        , header.VendINN);
        this.insertValueToSection(          'CustINN'        , header.CustINN);
        this.insertValueToSection(          'VendKPP'        , header.VendKPP);
        this.insertValueToSection(          'CustKPP'        , header.CustKPP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excise amount as a string
    /// </summary>
    /// <returns>
    /// Excise amount as a string
    /// </returns>
    protected Description getExciseTxt()
    {
        Description ret;

        if (line.ExciseAmount)
        {
            ret = strFmt("@GLS106007", line.ExciseAmount);
        }
        else
        {
            ret = "@SYS4081841";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSkipSections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a list of section which should not be printed in report
    /// </summary>
    protected void initSkipSections()
    {
        skipSections = [pageFooterName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSplitText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes texts in report which has to be splitted between several lines
    /// </summary>
    #define.cashDisc1(67)
    protected void initSplitText()
    {
        [cashDiscTxt1, cashDiscTxt2] = XMLExcelReport_RU::splitStrByLines(header.cashDiscAndTaxTxt(), [#cashDisc1]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes salesPurchReport_RU caller reference to the class
    /// </summary>
    /// <param name="_salesPurchReport">
    /// Caller salesPurchReport class
    /// </param>
    public void parmSalesPurchReport(SalesPurchReport_RU _salesPurchReport)
    {
        salesPurchReport = _salesPurchReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of template for report
    /// </summary>
    /// <returns>
    /// name of template for report
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(Invoice4Paym_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data
    /// </returns>
    #define.cellsBody(9)
    #define.cellsOther(21)
    protected Counter totalCells()
    {
        TmpSalesPurchReportLine_RU      lineLocal;
        TmpSalesPurchReportTable_RU     headerLocal;

        lineLocal.setTmpData(line);
        select count(RecId) from lineLocal;

        headerLocal.setTmpData(header);
        select count(RecId) from headerLocal;

        return int642int(headerLocal.RecId) * (int642int(lineLocal.RecId) * #cellsBody + #cellsOther);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInWords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total amount with VAT in words
    /// </summary>
    /// <returns>
    /// Total amount with VAT in words
    /// </returns>
    protected str totalInWords ()
    {
        totalInWords = converter.numeralsToCurrency(header.TotalAmountWithVAT, header.CurrencyCode);
        return totalInWords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalVatInWords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total VAT amount in words
    /// </summary>
    /// <returns>
    /// Total VAT amount in words
    /// </returns>
    protected str totalVatInWords ()
    {
        totalVatInWords = converter.numeralsToCurrency(header.TotalAmountWithVAT - header.TotalAmount, header.CurrencyCode);
        return totalVatInWords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static XMLExcelReport_Invoice4Paym_RU construct()
    {
        return new XMLExcelReport_Invoice4Paym_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name.
    /// </summary>
    /// <returns>The report name.</returns>
    public str getReportName()
    {
        return 'InvoiceForPayment';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report output file name.
    /// </summary>
    /// <returns>The report output file name.</returns>
    public Filename getReportFileName()
    {
        return this.fileName() + this.fileNamePostfix();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>