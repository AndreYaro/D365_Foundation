<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximAuthorization_Split_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim authorization split class.
/// </summary>
class EximAuthorization_Split_IN extends RunBase
{
    boolean                split;
    EximValue_IN           splitPct;
    RefRecId               schemeTableRecId;
    TransDate              issueDate;
    Notes                  notes;
    TransDateTime          refDateTime;
    EximLicenseNum_IN      authorizationNumber;
    EximReferenceNumber_IN refNumber;
    RefRecId               splitAuthorizationRecId;

    #define.currentVersion(1)
    #localmacro.currentList
        schemeTableRecId,
        authorizationNumber,
        issueDate,
        splitPct,
        notes,
        refNumber,
        refDateTime
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the exim authorization can be splited.
    /// </summary>
    /// <returns>
    /// If 'True', the exim authorization can be splited.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canBeSplit()
    {
        boolean ret = true;
        ;

        if (EximAuthorization_Split_IN::checkExportObligation(schemeTableRecId))
        {
            ret = checkFailed("@GLS62348");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Args    args = new Args();
        FormRun formRun;

        if (hasMenuItemAccess(menuitemdisplaystr(EximAuthorizationScheme_Split_IN),  MenuItemType::Display))
        {
            args.name(formstr(EximAuthorizationScheme_Split_IN));
            args.caller(this);
            formRun = new MenuFunction(menuitemdisplaystr(EximAuthorizationScheme_Split_IN), MenuItemType::Display).create(args);
            formRun.init();
        }
        else
        {
            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximAuthorizationScheme_Split_IN)));
        }

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthorizationNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximLicenseNum_IN parmAuthorizationNumber(EximLicenseNum_IN _authorizationNumber = authorizationNumber)
    {
        authorizationNumber = _authorizationNumber;

        return authorizationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIssueDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmIssueDate(TransDate _issueDate = issueDate)
    {
        issueDate = _issueDate;

        return issueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotes</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Notes parmNotes(Notes _notes = notes)
    {
        ;

        notes = _notes;

        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime parmReferenceDate(TransDateTime _refDateTime = refDateTime)
    {
        ;

        refDateTime = _refDateTime;

        return refDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximReferenceNumber_IN parmReferenceNumber(EximReferenceNumber_IN _refNumber = refNumber)
    {
        refNumber = _refNumber;

        return refNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchemeTableRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmSchemeTableRecId(RefRecId _schemeTableRecId = schemeTableRecId)
    {
        schemeTableRecId = _schemeTableRecId;

        return schemeTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitAuthorization</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmSplitAuthorization(boolean _split = split)
    {
        split = _split;

        return split;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitPct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximValue_IN parmSplitPct(RealBase _splitPct = splitPct)
    {
        ;

        splitPct = _splitPct;

        return splitPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        container splitParameters;
        ;

        splitParameters = [#currentVersion, #currentList];

        EximAuthorization_Split_IN::runOnServer(splitParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitAuthorization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits authorization information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void splitAuthorization()
    {
        EximAuthorizationSchemesTable_IN    authorizationSchemesTable;
        EximAuthorizationSchemesTable_IN    authorizationSchemesTableCopy;
        EximAuthorizationSchemesLine_IN     authorizationSchemesLine;
        EximAuthorizationSchemeReference_IN authorizationSchemeReference;
        EximAuthorizationSchemeReference_IN authorizationSchemeReferenceCopy;
        NumberSeq                           numberSeq;

        #define.roundingTwo(2)

        authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(schemeTableRecId);

        if (authorizationSchemesTable.AuthorizationType == EximAuthorizationType_IN::AA)
        {
            numberSeq = NumberSeq::newGetNum(EximParameters_IN::numRefAAAuthorizationId());
        }
        else if (authorizationSchemesTable.AuthorizationType == EximAuthorizationType_IN::DFIA)
        {
            numberSeq = NumberSeq::newGetNum(EximParameters_IN::numRefDfiaAuthorizationId());
        }

        authorizationSchemesTableCopy.AuthorizationId       = numberSeq.num();
        authorizationSchemesTableCopy.AuthorizationDateTime = DateTimeUtil::getSystemDateTime();
        authorizationSchemesTableCopy.AuthorizationBasis    = authorizationSchemesTable.AuthorizationBasis;
        authorizationSchemesTableCopy.EximProductGroupTable = authorizationSchemesTable.EximProductGroupTable;
        authorizationSchemesTableCopy.EximPorts             = authorizationSchemesTable.EximPorts;
        authorizationSchemesTableCopy.LicenseNum            = authorizationNumber;
        authorizationSchemesTableCopy.IssueDate             = issueDate;
        authorizationSchemesTableCopy.AuthorizationType     = authorizationSchemesTable.AuthorizationType;
        authorizationSchemesTableCopy.Status                = authorizationSchemesTable.Status;
        authorizationSchemesTableCopy.Closed                = authorizationSchemesTable.Closed;
        authorizationSchemesTableCopy.SplitApproved         = NoYes::Yes;
        authorizationSchemesTableCopy.Transferable          = authorizationSchemesTable.Transferable;
        authorizationSchemesTableCopy.insert();

        splitAuthorizationRecId = authorizationSchemesTableCopy.RecId;

        authorizationSchemesLine.LicenseStatus                  = EximLicenseStatus_IN::Original;
        authorizationSchemesLine.ImportExpiryDate               = EximAuthorization_Split_IN::getImportExpiryDate(authorizationSchemesTable.RecId);
        authorizationSchemesLine.ExportExpiryDate               = dateNull();
        authorizationSchemesLine.ImportAssessableValue          = decround((EximAuthorization_Split_IN::getImportBalance(schemeTableRecId) * (splitPct/100)), #roundingTwo);
        authorizationSchemesLine.ExportAssessableValue          = 0;
        authorizationSchemesLine.AuthorizationSchemesTableRecId = splitAuthorizationRecId;
        authorizationSchemesLine.insert();

        authorizationSchemeReference.AuthorizationSchemeTableRecId    = authorizationSchemesTable.RecId;
        authorizationSchemeReference.RefAuthorizationSchemeTableRecId = splitAuthorizationRecId;
        authorizationSchemeReference.ReferenceNumber                  = refNumber;
        authorizationSchemeReference.ReferenceDateTime                = refDateTime;
        authorizationSchemeReference.Reason                           = notes;
        authorizationSchemeReference.ReferenceType                    = EximMergeSplit_IN::None;
        authorizationSchemeReference.insert();

        authorizationSchemeReferenceCopy.data(authorizationSchemeReference);
        authorizationSchemeReferenceCopy.AuthorizationSchemeTableRecId    = splitAuthorizationRecId;
        authorizationSchemeReferenceCopy.RefAuthorizationSchemeTableRecId = authorizationSchemesTable.RecId;
        authorizationSchemeReferenceCopy.ReferenceType                    = EximMergeSplit_IN::Split;
        authorizationSchemeReferenceCopy.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        ;

        switch (version)
        {
            case #currentVersion:
                [version, #currentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIncentiveScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the incentive scheme.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateIncentiveScheme()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;
            this.splitAuthorization();

            this.writeSplitDetails();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>EximAuthorization_Split_IN</c> class.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from instance.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;
        ;

        ret = super(calledFrom);

        if (ret && !authorizationNumber)
        {
            ret = ret && checkFailed(strfmt("@SYS116347", "@GLS61498"));
        }
        if (ret && !issueDate)
        {
            ret = checkFailed(strfmt("@SYS116347", "@GLS62283"));
        }
        if (ret && !splitPct)
        {
            ret = checkFailed(strfmt("@SYS116347", "@GLS62296"));
        }
        if (ret && !refNumber)
        {
            ret = checkFailed(strfmt("@SYS116347", "@SYS22304"));
        }
        if (ret && !refDateTime)
        {
            ret = checkFailed(strfmt("@SYS116347", "@SYS80949"));
        }
        if (ret && !notes)
        {
            ret = checkFailed(strfmt("@SYS116347", "@SYS86426"));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSplitDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the split details.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void writeSplitDetails()
    {
        EximImportDetails_IN             importDetails;
        EximImportDetails_IN             importDetailsCopy;
        EximSummaryImportableItems_IN    summaryImportableItems;
        Qty                              splitQty;
        EximValue_IN                     splitValue;
        ;

        while select forupdate importDetails
            where importDetails.AuthorizationSchemesTableRecId == schemeTableRecId
        {
            splitQty   = 0;
            splitValue = 0;

            splitQty   = roundUpDec((importDetails.displayNetBalQty()   * (splitPct/100)), 0);
            splitValue = roundUpDec((importDetails.displayNetBalValue() * (splitPct/100)), 0);

            importDetails.SplitQty   += splitQty;
            importDetails.SplitValue += splitValue;
            importDetails.update();

            summaryImportableItems.clear();
            summaryImportableItems.ItemId                         = importDetails.ItemId;
            summaryImportableItems.LicenseStatus                  = EximLicenseStatus_IN::Original;
            summaryImportableItems.Unit                           = importDetails.Unit;
            summaryImportableItems.Value                          = splitValue;
            summaryImportableItems.AllowedValue                   = splitValue;
            summaryImportableItems.Qty                            = splitQty;
            summaryImportableItems.AllowedQty                     = splitQty;
            summaryImportableItems.AuthorizationSchemesTableRecId = splitAuthorizationRecId;
            summaryImportableItems.insert();

            importDetailsCopy.clear();
            importDetailsCopy.ItemId                         = summaryImportableItems.ItemId;
            importDetailsCopy.Unit                           = summaryImportableItems.Unit;
            importDetailsCopy.Qty                            = summaryImportableItems.AllowedQty;
            importDetailsCopy.Value                          = summaryImportableItems.AllowedValue;
            importDetailsCopy.AuthorizationSchemesTableRecId = splitAuthorizationRecId;
            importDetailsCopy.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAuthorizationBeSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the exim authorization can be splited.
    /// </summary>
    /// <param name="_authorizationSchemeTableRecId">
    /// The id of the exim authorization scheme table record.
    /// </param>
    /// <returns>
    /// If 'True', the exim authorization can be splited.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canAuthorizationBeSplit(RefRecId _authorizationSchemeTableRecId)
    {
        boolean                          isSplitEnabled = true;
        ;

        isSplitEnabled = EximAuthorization_Split_IN::getImportBalance(_authorizationSchemeTableRecId)
                         && (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) <= EximAuthorization_Split_IN::getImportExpiryDate(_authorizationSchemeTableRecId));

        return isSplitEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExportObligation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if still have the export obligation.
    /// </summary>
    /// <param name="_authorizationSchemesTableRecId">
    /// The table record id of the authorization schemes.
    /// </param>
    /// <returns>
    /// If 'True', still have the export obligation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExportObligation(RefRecId _authorizationSchemesTableRecId)
    {
        AmountMST exportAchieved;
        AmountMST exportObligation;
        boolean   ret;
        ;

        exportObligation = EximAuthorizationSchemesLine_IN::exportAssessableValue(_authorizationSchemesTableRecId);
        exportAchieved   = EximExportTrans_IN::cumulativeAssessableValue(_authorizationSchemesTableRecId);

        if (exportObligation > exportAchieved)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximAuthorization_Split_IN construct()
    {
        return new EximAuthorization_Split_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImportBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets import balance.
    /// </summary>
    /// <param name="_authorizationSchemesTableRecId">
    /// The table record id of the authorization schemes.
    /// </param>
    /// <returns>
    /// The import balance amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AmountMST getImportBalance(RefRecId _authorizationSchemesTableRecId)
    {
        AmountMST balanceAmount;
        AmountMST allowedAmount;
        AmountMST utilizedAmount;
        AmountMST soldAmount;
        AmountMST splitAmount;
        ;

        allowedAmount  = EximAuthorizationSchemesLine_IN::importAssessableValue(_authorizationSchemesTableRecId);
        utilizedAmount = EximImportTrans_IN::cumulativeAssessableValue(_authorizationSchemesTableRecId);

        if (utilizedAmount < allowedAmount)
        {
            soldAmount = EximAuthorizationSchemesLine_IN::soldAssessableValue(_authorizationSchemesTableRecId);

            if ((utilizedAmount + soldAmount) < allowedAmount)
            {
                splitAmount   = EximAuthorization_Split_IN::getSplitValue(_authorizationSchemesTableRecId);
                balanceAmount = allowedAmount - (utilizedAmount + soldAmount + splitAmount);
                balanceAmount = balanceAmount > 0 ? balanceAmount : 0;
            }
        }

        return balanceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImportExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets import expiry date.
    /// </summary>
    /// <param name="_authorizationSchemesTableRecId">
    /// The table record id of the authorization schemes.
    /// </param>
    /// <returns>
    /// The date of the transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TransDate getImportExpiryDate(RefRecId _authorizationSchemesTableRecId)
    {
        EximAuthorizationSchemesLine_IN authorizationSchemesLine;
        ;

        select reverse firstonly ImportExpiryDate
            from authorizationSchemesLine
                order by RecId
                where authorizationSchemesLine.AuthorizationSchemesTableRecId == _authorizationSchemesTableRecId;

        return authorizationSchemesLine.ImportExpiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSplitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets split value of the exim authorization.
    /// </summary>
    /// <param name="_authorizationSchemesTableRecId">
    /// The table record id of the authorization schemes.
    /// </param>
    /// <returns>
    /// The split value under the authorization schemes line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AmountMST getSplitValue(RefRecId _authorizationSchemesTableRecId)
    {
        EximAuthorizationSchemesLine_IN     authorizationSchemesLine;
        EximAuthorizationSchemeReference_IN authorizationSchemeReference;

        // total split value on an authorization is sum of import assessable values for original status
        // on all authorizations that have been created by splitting the current authorization
        select sum(ImportAssessableValue)
            from authorizationSchemesLine
                where authorizationSchemesLine.LicenseStatus == EximLicenseStatus_IN::Original
            join RefAuthorizationSchemeTableRecId
                from authorizationSchemeReference
                group by RefAuthorizationSchemeTableRecId
                where authorizationSchemeReference.AuthorizationSchemeTableRecId    == authorizationSchemesLine.AuthorizationSchemesTableRecId
                   && authorizationSchemeReference.RefAuthorizationSchemeTableRecId == _authorizationSchemesTableRecId
                   && authorizationSchemeReference.ReferenceType                    == EximMergeSplit_IN::Split;

        return authorizationSchemesLine.ImportAssessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        FormDataSource                   formDataSource;
        EximAuthorization_Split_IN       authorizationSplit;
        ;

        if (!_args
            || !_args.record()
            || _args.dataset() != tablenum(EximAuthorizationSchemesTable_IN))
        {
            throw error("@SYS25407");
        }

        authorizationSchemesTable = _args.record();
        formDataSource            = FormDataUtil::getFormDataSource(_args.record());

        authorizationSplit = EximAuthorization_Split_IN::construct();
        authorizationSplit.getLast();
        authorizationSplit.parmSchemeTableRecId(authorizationSchemesTable.RecId);

        if (authorizationSplit.prompt() && authorizationSplit.canBeSplit())
        {
            authorizationSplit.runOperation();
        }

        if (formDataSource)
        {
            formDataSource.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on the server side.
    /// </summary>
    /// <param name="_splitParameters">
    /// The split parameters.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runOnServer(container _splitParameters)
    {
        EximAuthorization_Split_IN authorizationSplit;
        ;

        if (conlen(_splitParameters))
        {
            authorizationSplit = EximAuthorization_Split_IN::construct();

            authorizationSplit.unpack(_splitParameters);

            authorizationSplit.updateIncentiveScheme();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>