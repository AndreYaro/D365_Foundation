<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PersonSearchProcessor_ProspectiveVendor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PersonSearchProcessor_ProspectiveVendor</c> class searches for prospective vendors.
/// </summary>
[PersonSearchProcessorFactoryAttribute(PersonSearchModule::ProspectiveVendor)]
public class PersonSearchProcessor_ProspectiveVendor extends PersonSearchProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addResult</Name>
				<Source><![CDATA[
    private void addResult(VendProspectiveVendorRegistrationRequest _prospectiveVendor, DirPartyTable _prospectiveVendorParty)
    {
        PersonSearchResult::findOrCreateResult(
            taskId,
            PersonSearchResultCategory::ProspectiveVendor,
            _prospectiveVendor.RecId,
            tableNum(VendProspectiveVendorRegistrationRequest),
            _prospectiveVendor.DataAreaId,
            _prospectiveVendorParty.PartyNumber);

        PersonSearchPartyNumberTmp::findOrCreate(taskId, _prospectiveVendorParty.PartyNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProspectiveVendorResultsFromKnownId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create prospective vendor results from known identifiers.
    /// </summary>
    /// <remarks>
    /// There is no guarantee that a prospective vendor will have
    /// party records of any kind nor a <c>VendProspectiveVendorRegistration</c> record.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createProspectiveVendorResultsFromKnownId()
    {
        VendProspectiveVendorRegistration vendorRegistration;
        VendProspectiveVendorRegistrationRequest vendorRegistrationRequest;
        DirPartyTable dirPartyTable;
        PersonSearchCriteriaKnownId personSearchCriteriaKnownId;

        // By party number
        while select vendorRegistrationRequest
        join vendorRegistration
            where vendorRegistrationRequest.RecId == vendorRegistration.RegistrationRequest
        join dirPartyTable
            where vendorRegistration.VendorParty == dirPartyTable.RecId
        join personSearchCriteriaKnownId
            where personSearchCriteriaKnownId.TaskId == taskId
                && personSearchCriteriaKnownId.PartyNumber == dirPartyTable.PartyNumber
        {
            this.addResult(vendorRegistrationRequest, dirPartyTable);
        }

        // By vendor account
        VendTable vendTable;

        while select vendorRegistrationRequest
        join vendorRegistration
            where vendorRegistrationRequest.RecId == vendorRegistration.RegistrationRequest
        join dirPartyTable
            where vendorRegistration.VendorParty == dirPartyTable.RecId
        join vendTable
            where dirPartyTable.RecId == vendTable.Party
        join personSearchCriteriaKnownId
            where personSearchCriteriaKnownId.TaskId == taskId
                && personSearchCriteriaKnownId.VendAccount == vendTable.AccountNum
        {
            this.addResult(vendorRegistrationRequest, dirPartyTable);
        }

        // By contact person
        ContactPerson contactPerson;

        while select vendorRegistrationRequest
        join vendorRegistration
            where vendorRegistrationRequest.RecId == vendorRegistration.RegistrationRequest
        join dirPartyTable
            where vendorRegistration.ContactParty == dirPartyTable.RecId
        join contactPerson
            where dirPartyTable.RecId == contactPerson.Party
        join personSearchCriteriaKnownId
            where personSearchCriteriaKnownId.TaskId == taskId
                && personSearchCriteriaKnownId.ContactId == contactPerson.ContactPersonId
        {
            this.addResult(vendorRegistrationRequest, dirPartyTable);
        }

        // By email
        while select vendorRegistrationRequest
        outer join vendorRegistration
            where vendorRegistrationRequest.RecId == vendorRegistration.RegistrationRequest
        exists join personSearchCriteriaKnownId
            where personSearchCriteriaKnownId.TaskId == taskId
                && vendorRegistrationRequest.Email == personSearchCriteriaKnownId.Email
                && personSearchCriteriaKnownId.Email != ''
        {
            dirPartyTable.clear();

            if (vendorRegistration.ContactParty)
            {
                dirPartyTable = DirPartyTable::findRec(vendorRegistration.ContactParty);
                PersonSearchPartyNumberTmp::findOrCreate(taskId, dirPartyTable.PartyNumber);
            }

            if (vendorRegistration.VendorParty)
            {
                dirPartyTable = DirPartyTable::findRec(vendorRegistration.VendorParty);
                PersonSearchPartyNumberTmp::findOrCreate(taskId, dirPartyTable.PartyNumber);
            }

            this.addResult(vendorRegistrationRequest, dirPartyTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProspectiveVendorResultsFromName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createProspectiveVendorResultsFromName()
    {
        VendProspectiveVendorRegistrationRequest vendorRegistrationRequest;
        PersonSearchCriteriaName personSearchCriteriaName;
        DirPartyTable dirPartyTable;

        while select personSearchCriteriaName
            where personSearchCriteriaName.TaskId == taskId
        {
            Query query = new Query();
            query.allowCrossCompany(true);

            QueryBuildDataSource vendorRegistrationRequestDS = query.addDataSource(tableNum(VendProspectiveVendorRegistrationRequest));
            QueryBuildDataSource vendorRegistrationDS = vendorRegistrationRequestDS.addDataSource(tableNum(VendProspectiveVendorRegistration));
            QueryBuildDataSource vendorPartyDS = vendorRegistrationDS.addDataSource(tableNum(DirPartyTable));

            vendorRegistrationDS.relations(true);
            vendorRegistrationDS.joinMode(JoinMode::OuterJoin);

            vendorPartyDS.relations(true);
            vendorPartyDS.joinMode(JoinMode::OuterJoin);

            if (personSearchCriteriaName.FirstName)
            {
                vendorRegistrationRequestDS.addRange(fieldNum(VendProspectiveVendorRegistrationRequest, FirstName)).value(queryValue(personSearchCriteriaName.FirstName));
            }

            if (personSearchCriteriaName.MiddleName)
            {
                vendorRegistrationRequestDS.addRange(fieldNum(VendProspectiveVendorRegistrationRequest, MiddleName)).value(queryValue(personSearchCriteriaName.MiddleName));
            }

            if (personSearchCriteriaName.LastName)
            {
                vendorRegistrationRequestDS.addRange(fieldNum(VendProspectiveVendorRegistrationRequest, LastName)).value(queryValue(personSearchCriteriaName.LastName));
            }

            if (personSearchCriteriaName.Locator)
            {
                vendorRegistrationRequestDS.addRange(fieldNum(VendProspectiveVendorRegistrationRequest, Email)).value(queryValue(personSearchCriteriaName.Locator));
            }

            if (SysQueryRangeUtil::queryBuildDataSourceHasRange(vendorRegistrationRequestDS))
            {
                QueryRun queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    DirPartyNumber dirPartyNumber;

                    vendorRegistrationRequest = queryRun.get(tableNum(VendProspectiveVendorRegistrationRequest));
                    dirPartyTable = queryRun.get(tableNum(DirPartyTable));

                    this.addResult(vendorRegistrationRequest, dirPartyTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Search for prospective vendors.
    /// </summary>
    public void doSearch()
    {
        if (PersonSearchCriteriaKnownId::existAny(taskId))
        {
            this.createProspectiveVendorResultsFromKnownId();
        }

        if (PersonSearchCriteriaName::existAny(taskId))
        {
            this.createProspectiveVendorResultsFromName();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>