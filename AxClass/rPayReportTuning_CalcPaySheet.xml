<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayReportTuning_CalcPaySheet</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayReportTuning_CalcPaySheet extends RPayReportTuning
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
        public void lookup(FormStringControl _lookupCtrl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        FormRun                 formRun;
        Args                    args;
        ;

        rPayReportTuningTable = rPayReportTuningTableDs.cursor();

        switch (rPayReportTuningTable.ParameterCode)
        {
            case 1:

                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayRateTable), _lookupCtrl);

                query.addDataSource(tableNum(RPayRateTable));

                query.dataSourceNo(1).addRange(fieldNum(RPayRateTable, LineType)).value(queryValue(RPayRateType::Employee));

                sysTableLookup.addLookupfield(fieldNum(RPayRateTable, PayRate));
                sysTableLookup.addLookupfield(fieldNum(RPayRateTable, Name));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();

                break;

            case 2, 4, 6:

                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayTimeGroupTable), _lookupCtrl);

                query.addDataSource(tableNum(RPayTimeGroupTable));

                sysTableLookup.addLookupfield(fieldNum(RPayTimeGroupTable, TimeGroup));
                sysTableLookup.addLookupfield(fieldNum(RPayTimeGroupTable, Name));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();

                break;

            case 3, 5, 7:

                args = new Args(formStr(SysLookup));
                args.parm(int2str(enumNum(RPayShowTime)));
                formRun = classfactory.formRunClass(args);
                formRun.init();
                _lookupCtrl.performFormLookup(formRun);

                break;

            case 8, 9, 10, 11, 12, 13, 14, 15, 16:

                sysTableLookup = SysTableLookup::newParameters(tableNum(RPayCounterTable), _lookupCtrl);

                query.addDataSource(tableNum(RPayCounterTable));

                query.dataSourceNo(1).addRange(fieldNum(RPayCounterTable,CounterType)).value(queryValue(RPayCounterType::Fund));

                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, CounterUnit));
                sysTableLookup.addLookupfield(fieldNum(RPayCounterTable, Name));

                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(RPayReportName _reportName, FormRun _formRun)
    {
        parameterName =  [literalStr("@RUP1930"),
                          literalStr("@RUP1931"),
                          literalStr("@RUP1932"),
                          literalStr("@RUP1933"),
                          literalStr("@RUP1934"),
                          literalStr("@RUP2088"),
                          literalStr("@RUP2089"),
                          literalStr("@RUP1935"),
                          literalStr("@RUP1936"),
                          literalStr("@RUP1937"),
                          literalStr("@RUP1938"),
                          literalStr("@RUP1939"),
                          literalStr("@RUP1940"),
                          literalStr("@RUP1941"),
                          literalStr("@RUP1942"),
                          literalStr("@RUP1943")];

        super(_reportName,_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReportTemplate</Name>
				<Source><![CDATA[
        public void openReportTemplate()
    {
        ComExcelDocument_RU doc = new ComExcelDocument_RU();
        doc.open(TemplateProvider_RU::getFor(new RPayCalcPaySheetReport()).get(resourceStr(RPayCalcPaySheet_T49)), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
        public void printReport()
    {
        new MenuFunction(menuitemoutputstr(RPayCalcPaySheet), MenuItemType::Output).run(new Args());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        RPayShowTime  showTime = RPayShowTime::Hours;
        ;

        rPayReportTuningTable = rPayReportTuningTableDs.cursor();

        if (! rPayReportTuningTable.Parameter)
        {
            return true;
        }

        switch (rPayReportTuningTable.ParameterCode)
        {
            case 1:
                if (! (select firstonly rPayRateTable
                          where rPayRateTable.PayRate == rPayReportTuningTable.Parameter &&
                                rPayRateTable.LineType == RPayRateType::Employee).RecId)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayRateTable, PayRate),
                                       tablePName(RPayRateTable)));
                }

                break;

            case 2, 4, 6:

                if (! (select firstonly rPayTimeGroupTable
                      where rPayTimeGroupTable.TimeGroup == rPayReportTuningTable.Parameter).RecId)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayTimeGroupTable, TimeGroup),
                                       tablePName(RPayTimeGroupTable)));
                }

                break;

            case 3, 5, 7:

                if (str2enum(showTime, rPayReportTuningTable.Parameter) == 255)
                {
                    return checkFailed("@RUP1122");
                }

                break;

            case 8, 9, 10, 11, 12, 13, 14, 15, 16:
                if (! (select firstfast rPayCounterTable
                          where rPayCounterTable.CounterUnit == rPayReportTuningTable.Parameter &&
                                rPayCounterTable.CounterType == RPayCounterType::Fund).RecId)
                {
                    return checkFailed(strFmt("@GLS106038",
                                       rPayReportTuningTable.Parameter,
                                       fieldPName(RPayCounterTable, CounterUnit),
                                       tablePName(RPayCounterTable)));
                }

                break;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>