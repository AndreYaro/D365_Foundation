<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsLocationAppUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LogisticsLocationAppUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupDunsNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the Duns number field.
    /// </summary>
    /// <param name="_formControl">
    /// The form control for which to perform the lookup.
    /// </param>
    /// <param name="_vendAccountID">
    /// The unique ID of the <c>VendTable</c> table that is used to filter the lookup.
    /// </param>
    public static void lookupDunsNumber(FormControl _formControl, VendAccount _vendAccountID)
    {
        SysTableLookup          dunsNumberLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryDSLogisticsLocation;
        QueryBuildDataSource    queryDSDirPartyLocation;
        QueryBuildRange         queryBuildRange;
        RecId                   partyRecId;

        dunsNumberLookup = SysTableLookup::newParameters(tableNum(LogisticsLocation), _formControl, true);

        queryDSLogisticsLocation = query.addDataSource(tableNum(LogisticsLocation));

        partyRecId = VendTable::find(_vendAccountID).Party;

        queryDSDirPartyLocation = queryDSLogisticsLocation.addDataSource(tableNum(DirPartyLocation));
        queryDSDirPartyLocation.joinMode(JoinMode::InnerJoin);
        queryDSDirPartyLocation.relations(true);

        queryBuildRange = queryDSDirPartyLocation.addRange(fieldNum(DirPartyLocation, Party));
        queryBuildRange.value(strFmt("%1", partyRecId));

        dunsNumberLookup.parmQuery(query);

        dunsNumberLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefDunsNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the instance of the target form.
    /// </summary>
    /// <param name="_object">
    /// An instance of the caller form.
    /// </param>
    /// <param name="_logisticsLocationRecId">
    /// The record ID of the <c>LogisticsLocation</c> record.
    /// </param>
    public static void jumpRefDunsNumber(Object _object,RecId _logisticsLocationRecId)
    {
        Args args = new Args();
        args.record(LogisticsLocation::find(_logisticsLocationRecId, false));
        args.caller(_object);

        new MenuFunction(menuitemDisplayStr(VendTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRemittanceLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of location names on the <c>LogisticsLocation</c> table and binds to the form control.
    /// </summary>
    /// <param name="_formControl">
    ///    The form control to which to bind the list.
    /// </param>
    /// <param name="_accountNum">
    ///    The <c>VendAccount</c> record on which to generate the location name.
    /// </param>
    /// <param name="_company">
    ///    The <c>CompanyId</c> value on which to generate the location name.
    /// </param>
    /// <returns>
    ///    The selected remittance location.
    /// </returns>
    public static Common lookupRemittanceLocation(FormControl _formControl, VendAccount _accountNum, CompanyId _company = curext())
    {
        LogisticsLocation ret;
        LogisticsLocationSelectionLookup lookup;
        lookup = LogisticsLocationSelectionLookup::newParameters(_formControl, VendTable::findByCompany(_company, _accountNum));
        lookup.addRoleByType(LogisticsLocationRoleType::RemitTo);
        ret = lookup.performFormLookup();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefLogisticsLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the instance of the target form.
    /// </summary>
    /// <param name="_object">
    /// An instance of the caller form.
    /// </param>
    /// <param name="_logisticsLocation">
    /// The record ID of the <c>LogisticsLocation</c> record.
    /// </param>
    public static void jumpRefLogisticsLocation(Object _object, LogisticsLocationRecId _logisticsLocation)
    {
        LogisticsPostalAddressFormHandler logisticsPostalAddressFormHandler = LogisticsPostalAddressFormHandler::construct();
        Args args = new Args();

        args.caller(_object);
        args.record(LogisticsPostalAddress::findByLocation(_logisticsLocation));
        args.parmObject(logisticsPostalAddressFormHandler);
        args.openMode(OpenMode::View);

        LogisticsPostalAddressFormHandler::openForm(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCarrierCheck</Name>
				<Source><![CDATA[
    static boolean shipCarrierCheck(
        TableId             _tableId,
        LogisticsLocation   _location,
        DlvModeId           _dlvModeId,
        DlvTermId           _dlvTermId,
        ShipCarrierAccount  _shipCarrierAccount,
        CustAccount         _custAccount,
        container           locationRoles = conNull())
    {
        DlvTerm     dlvTerm;
        boolean     ret = true;
        boolean     isThirdParty;
        boolean     isDeliveryRole;

        boolean     isCarrierShipService;

        LogisticsLocation location;

        if (!Global::isConfigurationkeyEnabled(configurationKeyNum(ShipCarrier)))
        {
            return true;
        }

        if (!ShipCarrierInterface::interfaceEnabled())
        {
            return true;
        }

        dlvTerm = DlvTerm::find(_dlvTermId);
        isThirdParty = dlvTerm.ShipCarrierFreightApplied == ShipCarrierFreightApplied::ThirdParty ;
        isCarrierShipService = DlvMode::shipCarrierService(_dlvModeId);

        if (locationRoles!=conNull())
        {
            isDeliveryRole = conFind(locationRoles, LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery).RecId);
        }
        else
        {
            isCarrierShipService = location.isRole(LogisticsLocationRoleType::Delivery);
        }

        switch (_tableId)
        {
            case tableNum(ShipCarrierAddress):
                location = _location;

                if (isDeliveryRole
                     || conFind(locationRoles, LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Invoice).RecId))
                { // Delivery and/or Invoice purpose selected
                    if (dlvTerm.ShipCarrierFreightApplied == ShipCarrierFreightApplied::ThirdParty)
                    {
                        ret = checkFailed("@SYS117097");
                    }
                    if (_shipCarrierAccount != '')
                    {
                        ret = checkFailed("@SYS117098");
                    }
                }
                else
                {
                    if (_dlvTermId)
                    {
                        ret = checkFailed(strFmt("@SYS119159", extendedTypeId2pname(extendedTypeNum(DlvTermId))));
                    }
                    if (_dlvModeId)
                    {
                        ret = checkFailed(strFmt("@SYS119159", extendedTypeId2pname(extendedTypeNum(DlvModeId))));
                    }
                    if (_shipCarrierAccount)
                    {
                        ret = checkFailed(strFmt("@SYS119159", extendedTypeId2pname(extendedTypeNum(ShipCarrierAccount))));
                    }
                }
                break;

            case tableNum(SalesLine):
            case tableNum(SalesTable):
                if (!_dlvTermId && isCarrierShipService)
                {
                    ret = checkFailed(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(DlvTermId))));
                }
                if (!_dlvModeId)
                {
                    ret = checkFailed(strFmt("@SYS26332", extendedTypeId2pname(extendedTypeNum(DlvModeId))));
                }
                if (!isThirdParty && _shipCarrierAccount)
                {
                    ret = checkFailed("@SYS117100");
                }
                if (isThirdParty && !_shipCarrierAccount)
                {
                    ret = checkFailed("@SYS119157");
                }
                if (!isThirdParty && (_location))
                {
                    ret = checkFailed("@SYS119158");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationLookupInventLocation</Name>
				<Source><![CDATA[
    static public void locationLookupInventLocation(
        FormControl                 _formControl,
        RecId                       _inventLocation,
        LogisticsLocationRoleType   _roleType = LogisticsLocationRoleType::None)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(LogisticsLocation), _formControl);
        Query                           query;
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildDataSource            queryBuildDataSourceRole;
        QueryBuildRange                 queryBuildRangeRole;

        sysTableLookup.addLookupfield(fieldNum(LogisticsLocation, LocationId),true);
        sysTableLookup.addLookupfield(fieldNum(LogisticsLocation, Description));

        query = new Query();

        queryBuildDataSource = query.addDataSource(tableNum(LogisticsLocation));
        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(InventLocationLogisticsLocation));
        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        queryBuildDataSource.relations(true);
        queryBuildDataSource.addRange(fieldNum(InventLocationLogisticsLocation,InventLocation)).value(queryValue(_inventLocation));
        queryBuildDataSourceRole = queryBuildDataSource.addDataSource(tableNum(InventLocationLogisticsLocationRole));
        queryBuildDataSourceRole.relations(true);

        queryBuildRangeRole = queryBuildDataSourceRole.addRange(fieldNum(InventLocationLogisticsLocationRole,LocationRole));

        if (_roleType != LogisticsLocationRoleType::None)
        {
            queryBuildRangeRole.value(SysQuery::value(int642str(LogisticsLocationRole::findBytype(_roleType).RecId)));
        }

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field id that determines the reference to a <c>Party</c> in a table given its table id.
    /// </summary>
    /// <param name = "_callerTableId">Table id of the table holding a reference to <c>Party</c></param>
    /// <returns></returns>
    static FieldId getEntityFieldId(TableId _callerTableId)
    {
        FieldId ret;

        switch (_callerTableId)
        {
            case (tableNum(HcmApplicationBasketLocationView)) :
                ret =  fieldNum(HcmApplicationBasketLocationView, Individual);
                break;

            case (tableNum(InventSiteLogisticsLocation)) :
                ret = fieldNum(InventSiteLogisticsLocation, Site);
                break;

            case (tableNum(InventLocationLogisticsLocation)) :
                ret = fieldNum(InventLocationLogisticsLocation, InventLocation);
                break;

            case (tableNum(TMSCarrierLogisticsLocation)) :
                ret = fieldNum(TMSCarrierLogisticsLocation, Carrier);
                break;

            default :
                ret = fieldNum(DirPartyLocation, Party);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityFieldIdIsPrimary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field id of the <c>IsPrimary</c> field on the location table given its table id.
    /// </summary>
    /// <param name = "_callerTableId">Target table id that holds the <c>IsPrimary</c> field.</param>
    /// <returns></returns>
    static FieldId getEntityFieldIdIsPrimary(TableId _callerTableId)
    {
        FieldId ret;

        switch (_callerTableId)
        {
            case (tableNum(HcmApplicationBasketLocationView)) :
                ret = fieldNum(HcmApplicationBasketLocationView, IsPrimary);
                break;

            case (tableNum(InventSiteLogisticsLocation)) :
                ret = fieldNum(InventSiteLogisticsLocation, IsPrimary);
                break;

            case (tableNum(InventLocationLogisticsLocation)) :
                ret = fieldNum(InventLocationLogisticsLocation, IsPrimary);
                break;

            case (tableNum(TMSCarrierLogisticsLocation)) :
                ret = fieldNum(TMSCarrierLogisticsLocation, IsPrimary);
                break;

            default :
                ret = fieldNum(DirPartyLocation, IsPrimary);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field id of a entity location table given the table id.
    /// </summary>
    /// <param name = "_callerTableId">The entity location table id.</param>
    /// <returns>A <c>FieldId</c> that corresponds to the location field.</returns>
    static FieldId getEntityLocationFieldId(TableId _callerTableId)
    {
        FieldId ret;

        switch (_callerTableId)
        {
            case (tableNum(InventSiteLogisticsLocation)) :
                ret = fieldNum(InventSiteLogisticsLocationRole, SiteLogisticsLocation);
                break;

            case (tableNum(InventLocationLogisticsLocation)) :
                ret = fieldNum(InventLocationLogisticsLocationRole, LocationLogisticsLocation);
                break;

            case (tableNum(TMSCarrierLogisticsLocation)) :
                ret = fieldNum(TMSCarrierLogisticsLocationRole, LocationLogisticsLocation);
                break;

            default :
                ret = fieldNum(DirPartyLocationRole, PartyLocation);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationRoleTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table id of the entity's related location role table.
    /// </summary>
    /// <returns>The location role table id related to the current entity, otherwise 0.</returns>
    public static TableId getEntityLocationRoleTableId(TableId _entityLocationTableId)
    {
        switch (_entityLocationTableId)
        {
            case (tableNum(InventSiteLogisticsLocation)) :
                return tableNum(InventSiteLogisticsLocationRole);

            case (tableNum(InventLocationLogisticsLocation)) :
                return tableNum(InventLocationLogisticsLocationRole);

            case (tableNum(DirPartyLocation)) :
                return tableNum(DirPartyLocationRole);

            case (tableNum(LogisticsElectronicAddress)) :
                return tableNum(LogisticsElectronicAddressRole);

            case (tableNum(TMSCarrierLogisticsLocation)) :
                return tableNum(TMSCarrierLogisticsLocationRole);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityLocationTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table id of the entity's related location table.
    /// </summary>
    /// <returns>The location table id related to the current entity, otherwise the id of <c>DirPartyLocation</c></returns>
    /// if the entity is mapped to <c>DirPartyMap</c>/returns>
    public static TableId getEntityLocationTableId(TableId _entityLocationTableId)
    {
        switch (_entityLocationTableId)
        {
            case (tableNum(HRMApplicationBasket)) :
                return tableNum(HcmApplicationBasketLocationView);

            case (tableNum(InventSite)) :
                return tableNum(InventSiteLogisticsLocation);

            case (tableNum(InventLocation)) :
                return tableNum(InventLocationLogisticsLocation);

            case (tableNum(TMSCarrier)) :
                return tableNum(TMSCarrierLogisticsLocation);

            default :
                if (SysDictTable::isTableMapped(tableNum(DirPartyMap), _entityLocationTableId))
                {
                    return tableNum(DirPartyLocation);
                }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityPrimaryAndRoleViewEntityFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets entity foreign key field id for specified table.
    /// </summary>
    /// <param name="_entityPrimaryAndRoleViewTableId">
    /// <c>TableId</c> to get entity foreign key for.
    /// </param>
    /// <returns>
    /// <c>FieldId</c> of entity foreign key.
    /// </returns>
    public static FieldId getEntityPrimaryAndRoleViewEntityFieldId(TableId _entityPrimaryAndRoleViewTableId)
    {
        switch (_entityPrimaryAndRoleViewTableId)
        {
            case (tableNum(InventSiteLocationPrimaryAndRolesView)) :
                return fieldNum(InventSiteLocationPrimaryAndRolesView, Site);

            case (tableNum(InventLocationLocationPrimaryAndRoleView)) :
                return fieldNum(InventLocationLocationPrimaryAndRoleView, InventLocation);

            case (tableNum(DirPartyLocationPrimaryAndRolesView)) :
                return fieldNum(DirPartyLocationPrimaryAndRolesView, Party);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityPrimaryAndRoleViewTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets primary and role view table ID for specified entity table.
    /// </summary>
    /// <param name="_entityLocationTableId">
    /// <c>TableId</c> for which to get primary and role view table ID.
    /// </param>
    /// <returns>
    /// <c>TableId</c> for primary and role view.
    /// </returns>
    public static TableId getEntityPrimaryAndRoleViewTableId(TableId _entityLocationTableId)
    {
        switch (_entityLocationTableId)
        {
            case (tableNum(InventSiteLogisticsLocation)) :
                return tableNum(InventSiteLocationPrimaryAndRolesView);

            case (tableNum(InventLocationLogisticsLocation)) :
                return tableNum(InventLocationLocationPrimaryAndRoleView);

            case (tableNum(DirPartyLocation)) :
                return tableNum(DirPartyLocationPrimaryAndRolesView);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityPrimaryAndRoleViLocationFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets location foreign key field id for specified table.
    /// </summary>
    /// <param name="_entityPrimaryAndRoleViewTableId">
    /// <c>TableId</c> to get location foreign key for.
    /// </param>
    /// <returns>
    /// <c>FieldId</c> of Location foreign key.
    /// </returns>
    public static FieldId getEntityPrimaryAndRoleViLocationFieldId(TableId _entityPrimaryAndRoleViewTableId)
    {
        switch (_entityPrimaryAndRoleViewTableId)
        {
            case (tableNum(InventSiteLocationPrimaryAndRolesView)) :
                return fieldNum(InventSiteLocationPrimaryAndRolesView, Location);

            case (tableNum(InventLocationLocationPrimaryAndRoleView)) :
                return fieldNum(InventLocationLocationPrimaryAndRoleView, Location);

            case (tableNum(DirPartyLocationPrimaryAndRolesView)) :
                return fieldNum(DirPartyLocationPrimaryAndRolesView, Location);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityPrimaryViewLocationRoleFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets location role foreign key field id for specified table.
    /// </summary>
    /// <param name="_entityPrimaryAndRoleViewTableId">
    /// <c>TableId</c> to get location role foreign key for.
    /// </param>
    /// <returns>
    /// <c>FieldId</c> of location role foreign key.
    /// </returns>
    public static FieldId getEntityPrimaryViewLocationRoleFieldId(TableId _entityPrimaryAndRoleViewTableId)
    {
        switch (_entityPrimaryAndRoleViewTableId)
        {
            case (tableNum(InventSiteLocationPrimaryAndRolesView)) :
                return fieldNum(InventSiteLocationPrimaryAndRolesView, LocationRole);

            case (tableNum(InventLocationLocationPrimaryAndRoleView)) :
                return fieldNum(InventLocationLocationPrimaryAndRoleView, LocationRole);

            case (tableNum(DirPartyLocationPrimaryAndRolesView)) :
                return fieldNum(DirPartyLocationPrimaryAndRolesView, LocationRole);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityType2TableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the location table id given a <c>LogisticsLocatinEntityType</c>
    /// </summary>
    /// <param name = "_entityType">The entity type</param>
    /// <returns>
    /// A table id of the table that corresponds to the given <c>LogisticsLocationEntityType</c>, default
    /// is <c>DirPartyLocation</c>.
    /// </returns>
    public static TableId entityType2TableId(LogisticsLocationEntityType _entityType)
    {
        switch (_entityType)
        {
            case LogisticsLocationEntityType::ApplicationBasket :
                return tableNum(HcmApplicationBasketLocationView);

            case LogisticsLocationEntityType::Site :
                return tableNum(InventSiteLogisticsLocation);

            case LogisticsLocationEntityType::Warehouse :
                return tableNum(InventLocationLogisticsLocation);

            case LogisticsLocationEntityType::TMSCarrier :
                return tableNum(TMSCarrierLogisticsLocation);

            default :
                return tableNum(DirPartyLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a location data source query by adding ranges and sorting depending on the location table.
    /// </summary>
    /// <param name = "_query">Query from the data source to be modified.</param>
    /// <param name = "_tableId">Table id of the target location table.</param>
    /// <param name = "_entity"><c>RefRecId</c> of the target entity who must be a party.</param>
    /// <param name = "_isPostalAddress">Determines if it is a postal address.</param>
    public static void updateQuery(Query _query, TableId _tableId, RefRecId _entity, NoYes _isPostalAddress)
    {
        QueryBuildDataSource    qbdsEntityLocation;
        str                     queryRangeStr;
        DirPartyRecId           personRecId;
        QueryBuildRange         qbrIsPostal, qbrParty;

        qbdsEntityLocation = SysQuery::findOrCreateDataSource(_query, _tableId, tableNum(LogisticsLocation));

        switch (_tableId)
        {
            case tableNum(InventSiteLogisticsLocation) :
                qbdsEntityLocation.addRange(fieldNum(InventSiteLogisticsLocation,IsPostalAddress)).value(SysQuery::value(_isPostalAddress));
                qbdsEntityLocation.addRange(fieldNum(InventSiteLogisticsLocation,Site)).value(SysQuery::value(_entity));

                // Sort
                qbdsEntityLocation.addSortField(fieldNum(InventSiteLogisticsLocation,IsPrimary), SortOrder::Descending);
                break;

            case tableNum(InventLocationLogisticsLocation) :
                qbdsEntityLocation.addRange(fieldNum(InventLocationLogisticsLocation,IsPostalAddress)).value(SysQuery::value(_isPostalAddress));
                qbdsEntityLocation.addRange(fieldNum(InventLocationLogisticsLocation,InventLocation)).value(SysQuery::value(_entity));

                // Sort
                qbdsEntityLocation.addSortField(fieldNum(InventLocationLogisticsLocation,IsPrimary), SortOrder::Descending);
                break;

            case tableNum(TMSCarrierLogisticsLocation) :
                qbdsEntityLocation.addRange(fieldNum(TMSCarrierLogisticsLocation,IsPostalAddress)).value(SysQuery::value(_isPostalAddress));
                qbdsEntityLocation.addRange(fieldNum(TMSCarrierLogisticsLocation,Carrier)).value(SysQuery::value(_entity));

                // Sort
                qbdsEntityLocation.addSortField(fieldNum(TMSCarrierLogisticsLocation,IsPrimary), SortOrder::Descending);
                break;

            case tableNum(HcmApplicationBasketLocationView) :

                // If a person is associated with Application Basket then we need to display both party and non party addresses
                personRecId = HRMApplicationBasket::find(_entity).Person;

                qbdsEntityLocation.addLink(fieldNum(LogisticsLocation, RecId), fieldNum(HcmApplicationBasketLocationView, Location));

                // The Range looks like
                // ( (HcmApplicationBasketLocationView.Individual == _entity && HcmApplicationBasketLocationView.EntityType == partyType) ||
                //   (HcmApplicationBasketLocationView.Individual == _entity && HcmApplicationBasketLocationView.EntityType == applicationBasketType) )
                qbdsEntityLocation.addRange(fieldNum(HcmApplicationBasketLocationView,IsPostalAddress)).value(SysQuery::value(_isPostalAddress));
                queryRangeStr = strFmt('(((%1.%2 == %3) && (%1.%4 == %5)) || ((%1.%2 == %6) && (%1.%4 == %7)))',
                                qbdsEntityLocation.name(),
                                fieldStr(HcmApplicationBasketLocationView, Individual),
                                personRecId,
                                fieldStr(HcmApplicationBasketLocationView, EntityType),
                                enum2int(LogisticsLocationEntityType::Party),
                                _entity,
                                enum2int(LogisticsLocationEntityType::ApplicationBasket));

                qbdsEntityLocation.addRange(fieldNum(HcmApplicationBasketLocationView,Individual)).value(queryRangeStr);

                qbdsEntityLocation.addSortField(fieldNum(HcmApplicationBasketLocationView,IsPrimary), SortOrder::Descending);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerIsBankGroupLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the location is the same as the location of the bank group.
    /// </summary>
    /// <returns>
    /// true if the location is the same as the account's bank group location; otherwise, false.
    /// </returns>
    public static boolean callerIsBankGroupLocation(Common callerRecord)
    {
        if (SysDictTable::isTableMapped(tableNum(BankAccountMap), callerRecord.TableId))
        {
            BankGroup   bankGroup;
            BankAccountMap bankAccountMap = callerRecord;

            select firstonly Location from bankGroup where bankGroup.BankGroupId == bankAccountMap.BankGroupId;

            if (bankGroup.Location == bankAccountMap.Location)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmContactPersonUpdateLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes contact person address information upon change of the location of an entity
    /// </summary>
    /// <param name = "_entity">A <c>LogisticsEntityLocationMap</c> object that contains the entity and updated location field.</param>
    /// <param name = "_locationRoleType">A type of location role, roles allowed are Business, Home and Other.</param>
    [SubscribesTo(tablestr(LogisticsEntityLocationMap), delegatestr(LogisticsEntityLocationMap, onAddEntityLocation))]
    public static void smmContactPersonUpdateLocation(LogisticsEntityLocationMap _entity, LogisticsLocationRoleType _locationRoleType)
    {
        switch (_locationRoleType)
        {
            case LogisticsLocationRoleType::Business:
                smmContactPersonSynchronizeFieldMapping::updateLocation(smmOutlookContactFields::BusinessAddress, _entity.Entity, _entity.Location);
                break;
            case LogisticsLocationRoleType::Home:
                smmContactPersonSynchronizeFieldMapping::updateLocation(smmOutlookContactFields::HomeAddress, _entity.Entity, _entity.Location);
                break;
            case LogisticsLocationRoleType::Other:
                smmContactPersonSynchronizeFieldMapping::updateLocation(smmOutlookContactFields::OtherAddress, _entity.Entity, _entity.Location);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdateOfPrimaryLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the delegate with the same name in <c>LogisticsEntityLocationMap</c>, it allows to perform additional
    /// logic during the update of the primary location on a <c>Party</c>.
    /// </summary>
    /// <param name = "_entity">The <c>LogisticsEntityLocationMap</c> object on which the primary location is being updated.</param>
    [SubscribesTo(tablestr(LogisticsEntityLocationMap), delegatestr(LogisticsEntityLocationMap, onUpdatePrimaryLocation))]
    public static void onUpdateOfPrimaryLocation(LogisticsEntityLocationMap _entity)
    {
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            SalesCarrier salesCarrier_BR;
            salesCarrier_BR = SalesCarrier::findByVendorParty_BR(_entity.Entity, true);

            if (salesCarrier_BR)
            {
                salesCarrier_BR.Location = _entity.Location;
                salesCarrier_BR.update();
            }
        }
        // </GBR>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>