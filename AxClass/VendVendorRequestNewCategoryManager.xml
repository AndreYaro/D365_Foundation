<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorRequestNewCategoryManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>VendVendorRequestNewCategoryManager</c> class manages Vendor requests for new categories.
/// </summary>
[ExportMetadataAttribute(enumstr(VendVendorRequestEntityType), enumLiteralStr(VendVendorRequestEntityType, NewProcurementCategory)),
 ExportAttribute(identifierstr(Dynamics.AX.Application.VendVendorRequestManager))]
public class VendVendorRequestNewCategoryManager extends VendVendorRequestManager
{
    private static boolean isCurrentUserProcurementAgent;
    private boolean callerIsWorkspace;
    private static VendAccount selectedVendorAccount;
    private FormRun formRun;
    private FormFunctionButtonControl requestNewCategoryMenuItem;
    private FormDropDialogButtonControl workflowSubmitDropDialog;
    private FormFunctionButtonControl workflowRecallButton;
    private FormCheckBoxControl vendorPortalAccessAllowedCheckbox;
    private FormStringControl vendorAccount;
    private FormReferenceGroupControl vendorName;
    private FormCommandButtonControl addNewCategoryCommand;
    private FormCommandButtonControl deleteCategoryCommand;
    private FormReferenceGroupControl vendorNameDetail;
    private FormStringControl vendorAccountDetail;
    private FormComboBoxControl showRequestFilter;
    private FormGroupControl reasonInformation;
    private FormGridControl procurementCategoriesGrid;

    #SysSystemDefinedButtons

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal static VendVendorRequestNewCategoryManager construct()
    {
        return new VendVendorRequestNewCategoryManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    internal void init(
        boolean _isCurrentUserProcurementAgent,
        FormRun _formRun,
        VendVendorRequestNewCategory _vendVendorRequestNewCategory,
        VendRequestNewCategory _vendRequestNewCategory,
        boolean _callerIsWorkspace)
    {
        isCurrentUserProcurementAgent = _isCurrentUserProcurementAgent;
        FormRun callerForm = _formRun.args().caller();
        const str vendorAccountFilter = 'VendAccountFilter';

        if (callerForm && callerForm.name() == formStr(VendVendorProfileManagementWorkspace))
        {
            selectedVendorAccount = callerForm.control(callerForm.controlId(vendorAccountFilter)).valueStr();
        }
        else if (callerForm && callerForm.name() == formStr(VendTableVendExternal))
        {
            selectedVendorAccount = VendTable::findRecId(callerForm.args().record().RecId).AccountNum;

            // Caller is More menu from workspace
            callerIsWorkspace = true;
        }

        formRun = _formRun;
        callerIsWorkspace = callerIsWorkspace || _callerIsWorkspace;
        this.initControls();
        this.updateDesign(_vendVendorRequestNewCategory, _vendRequestNewCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form control variables to the form controls of the calling form
    /// </summary>
    [Hookable(false), Wrappable(false)]
    internal final void initControls()
    {
        requestNewCategoryMenuItem = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, RequestNewCategory))) as FormFunctionButtonControl;
        workflowSubmitDropDialog = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, CategoryRequestDropDialogButtonWorkflow))) as FormDropDialogButtonControl;
        workflowRecallButton = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, CategoryRequestWorkflowRecall))) as FormFunctionButtonControl;
        vendorPortalAccessAllowedCheckbox = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, VendVendorRequest_VendorPortalAccessAllowed))) as FormCheckBoxControl;
        vendorAccount = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, VendRequest_AccountNum))) as FormStringControl;
        vendorName = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, VendVendorRequestNewCategory_VendParty))) as FormReferenceGroupControl;
        addNewCategoryCommand = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, AddNewcategory))) as FormCommandButtonControl;
        deletecategoryCommand = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, DeleteCategory))) as FormCommandButtonControl;
        vendorNameDetail = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, VendVendorRequest_VendParty))) as FormReferenceGroupControl;
        vendorAccountDetail = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, VendVendorRequest_AccountNum))) as FormStringControl;
        showRequestFilter = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, VendCategoryRequestsFilter))) as FormComboBoxControl;
        reasonInformation = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, RejectionInformation))) as FormGroupControl;
        procurementCategoriesGrid = formRun.control(formRun.controlId(formControlStr(VendRequestNewCategory, ProcurementCategories))) as FormGridControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void updateDesign(
        VendVendorRequestNewCategory _vendVendorRequestNewCategory,
        VendRequestNewCategory _vendRequestNewCategory)
    {
        this.setActionPaneButtonsVisibility(_vendVendorRequestNewCategory);
        this.setSystemDefinedButtonsVisibility(_vendVendorRequestNewCategory.RequestStatus);
        this.setFormFieldsVisibility();
        this.setFieldsEditability(_vendVendorRequestNewCategory.RequestStatus);
        this.setWorkflowButtonsEditability(_vendVendorRequestNewCategory.RequestStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActionPaneButtonsVisibility</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void setActionPaneButtonsVisibility(VendVendorRequestNewCategory _vendVendorRequestNewCategory)
    {
        // Hide new if form not open from workspace
        requestNewCategoryMenuItem.visible(callerIsWorkspace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSystemDefinedButtonsVisibility</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void setSystemDefinedButtonsVisibility(VendVendorRequestStatus _requestStatus)
    {
        // Hide Delete, Edit if Request status > Draft
        FormCommandButtonControl editButton = formRun.control(formRun.controlId(#SystemDefinedViewEditButton)) as FormCommandButtonControl;
        FormCommandButtonControl deleteButton = formRun.control(formRun.controlId(#SystemDefinedDeleteButton)) as FormCommandButtonControl;

        if (editButton)
        {
            editButton.visible(_requestStatus == VendVendorRequestStatus::Draft
                                || _requestStatus == VendVendorRequestStatus::WorkflowCanceled
                                || (isCurrentUserProcurementAgent
                                   && _requestStatus == VendVendorRequestStatus::PendingApproval));
        }

        if (deleteButton)
        {
            deleteButton.visible(_requestStatus == VendVendorRequestStatus::Draft
                                || _requestStatus == VendVendorRequestStatus::WorkflowCanceled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormFieldsVisibility</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void setFormFieldsVisibility()
    {
        vendorPortalAccessAllowedCheckbox.visible(isCurrentUserProcurementAgent);
        vendorAccount.visible(isCurrentUserProcurementAgent);
        vendorName.visible(isCurrentUserProcurementAgent);
        showRequestFilter.visible(isCurrentUserProcurementAgent);
        reasonInformation.visible(isCurrentUserProcurementAgent);
        vendorNameDetail.enabled(isCurrentUserProcurementAgent);
        vendorAccountDetail.enabled(isCurrentUserProcurementAgent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsEditability</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void setFieldsEditability(VendVendorRequestStatus _requestStatus)
    {
        // Disable Add/Delete on tab lines if reuqest status >Draft
        addNewCategoryCommand.enabled(_requestStatus == VendVendorRequestStatus::Draft || _requestStatus == VendVendorRequestStatus::WorkflowCanceled);
        deleteCategoryCommand.enabled(_requestStatus == VendVendorRequestStatus::Draft || _requestStatus == VendVendorRequestStatus::WorkflowCanceled);
        procurementCategoriesGrid.enabled(_requestStatus == VendVendorRequestStatus::Draft || _requestStatus == VendVendorRequestStatus::WorkflowCanceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowButtonsEditability</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void setWorkflowButtonsEditability(VendVendorRequestStatus _requestStatus)
    {
        workflowSubmitDropDialog.enabled(isCurrentUserProcurementAgent
                                        || ((_requestStatus == VendVendorRequestStatus::Draft
                                                   || _requestStatus == VendVendorRequestStatus::WorkflowCanceled
                                                   || !(_requestStatus == VendVendorRequestStatus::PendingApproval
                                                        || _requestStatus == VendVendorRequestStatus::Approved
                                                        || _requestStatus == VendVendorRequestStatus::ReviewTaskPending
                                                        || _requestStatus == VendVendorRequestStatus::Rejected))));

        workflowRecallButton.visible(!isCurrentUserProcurementAgent
            && _requestStatus == VendVendorRequestStatus::PendingApproval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create vendor category request for the given vendor.
    /// </summary>
    /// <param name = "_checkedTreeNodes">
    /// The procurement categories selected for this vendor request.
    /// </param>
    internal void createVendorRequest(Set _checkedTreeNodes)
    {
        SetEnumerator checkedTreeNodesEnumerator;

        ttsbegin;

        VendVendorRequestNewCategory newRequest;
        newRequest.initValue();
        newRequest.RequestId = this.newRequestId();
        newRequest.RequestEntityType = VendVendorRequestEntityType::NewProcurementCategory;
        newRequest.SponsoredBy = curUserId();
        newRequest.AccountNum = selectedVendorAccount;
        newRequest.RequestStatus = VendVendorRequestStatus::Draft;
        newRequest.VendParty = VendTable::find(selectedVendorAccount).Party;
        newRequest.VendorName = DirPartyTable::getName(newRequest.VendParty);
        newRequest.insert();

        if (_checkedTreeNodes)
        {
            checkedTreeNodesEnumerator = _checkedTreeNodes.getEnumerator();

            while (checkedTreeNodesEnumerator.moveNext())
            {
                VendRequestNewCategory::createFromCode(newRequest.RecId, any2Int64(checkedTreeNodesEnumerator.current()));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveCategoriesForVendor</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal static Set getActiveCategoriesForVendor()
    {
        VendCategory vendCategory;
        VendProcurementCategoryStatus vendProcurementCategoryStatus;
        EcoResCategory resCategory;
        Set activeNodes = new Set(Types::AnyType);

        while select category from vendCategory
            exists join vendProcurementCategoryStatus
                where vendCategory.VendorAccount == selectedVendorAccount
                && vendProcurementCategoryStatus.VendorCategory == vendCategory.RecId
                && (vendProcurementCategoryStatus.ValidTo >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                    && vendProcurementCategoryStatus.ValidFrom <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            select * from resCategory where resCategory.RecId == vendCategory.Category;

            activeNodes.add(resCategory.RecId);
        }

        return activeNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveCategory</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal static boolean isActiveCategory(EcoResCategoryId _selectedCategory)
    {
        Set activeNodes = new Set(Types::AnyType);
        activeNodes = VendVendorRequestNewCategoryManager::getActiveCategoriesForVendor();

        return (activeNodes.in(_selectedCategory));
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableActiveCategoriesInTree</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void disableActiveCategoriesInTree(int _rootNodeIdx, FormTreeControl _categoryTree)
    {
        Set activeNodes = new Set(Types::AnyType);
        activeNodes = VendVendorRequestNewCategoryManager::getActiveCategoriesForVendor();

        this.traverseAndDisableActiveCategories(_rootNodeIdx, _categoryTree, activeNodes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseAndDisableActiveCategories</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal void traverseAndDisableActiveCategories(int _rootNodeIdx, FormTreeControl _categoryTree, Set _activeNodes)
    {
        TreeItemIdx categoryTreeItemIdx;
        FormTreeItem categoryTreeItem;

        #ResAppl

        categoryTreeItemIdx = _rootNodeIdx? _CategoryTree.getChild(_rootNodeIdx) : _CategoryTree.getRoot();

        while (categoryTreeItemIdx)
        {
            categoryTreeItem = _CategoryTree.getItem(categoryTreeItemIdx);

            if (_activeNodes.in(categoryTreeItem.data()))
            {
                categoryTreeItem.stateChecked(FormTreeCheckedState::Checked);
                _categoryTree.setItem(categoryTreeItem);
            }

            this.traverseAndDisableActiveCategories(categoryTreeItemIdx, _CategoryTree, _activeNodes);
            categoryTreeItemIdx = _categoryTree.getNextSibling(categoryTreeItemIdx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeNodesStateChangeEvent</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal static void activeNodesStateChangeEvent(
        int _categoryTreeItemIdx,
        FormTreeCheckedState _newState,
        FormTreeControl _categoryTree)
    {
        Set activeNodes = new Set(Types::AnyType);
        activeNodes = VendVendorRequestNewCategoryManager::getActiveCategoriesForVendor();

        FormTreeItem categoryTreeItem = _categoryTree.getItem(_categoryTreeItemIdx);

        if (activeNodes.in(categoryTreeItem.data())
            && _newState == FormTreeCheckedState::Unchecked)
        {
            categoryTreeItem.stateChecked(FormTreeCheckedState::Checked);
            _categoryTree.setItem(categoryTreeItem);
            checkFailed(strFmt("@SCM:VendorActiveCategoryCannotChangeError"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedVendorAccount</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal VendAccount getSelectedVendorAccount(VendAccount _vendor = selectedVendorAccount)
    {
        selectedVendorAccount = _vendor;
        return selectedVendorAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEmailToEmployeeRequestor</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public void sendEmailToEmployeeRequestor(VendVendorRequest _vendRequest)
    {
        if (!_vendRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (SysEmailParameters::find().smtpRelayServerName == '')
        {
            return;
        }

        LogisticsElectronicAddress electronicAddress = DirParty::primaryElectronicAddress(DirPersonUser::current().PersonParty, LogisticsElectronicAddressMethodType::Email);

        Email recipientEmail = HcmWorker::find(HcmWorker::userId2Worker(_vendRequest.SponsoredBy)).email();
        Email senderEmail = electronicAddress ? electronicAddress.Locator : '';

        if (recipientEmail && senderEmail)
        {
            System.Exception exception;

            try
            {
                SysMailerFactory::sendNonInteractive(new SysMailerMessageBuilder().setFrom(senderEmail)
                                                                                  .addTo(recipientEmail)
                                                                                  .setSubject("@SYS130372")
                                                                                  .setBody(strFmt("@SYS134393", _vendRequest.VendorName))
                                                                                  .getMessage());
            }
            catch (Exception::CLRError)
            {
                exception = CLRInterop::getLastException();
                info(strFmt("@SCM:EmailNotSentSetupInstruction", exception.ToString()));
            }
        }
        else
        {
            // Could not send email back to sender, recipient or sender email addresses are empty
            info("@SYS134424");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkFlow</Name>
				<Source><![CDATA[
    public void submitToWorkFlow(VendVendorRequest _vendorRequest)
    {
        VendVendorRequestNewVendor vendorRequest = VendVendorRequest::find(_vendorRequest.RecId) as VendVendorRequestNewVendor;

        if (!vendorRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>approveRequest</Name>
				<Source><![CDATA[
    public void approveRequest(VendVendorRequest _vendorRequest)
    {
        ttsbegin;

        VendVendorRequestNewVendor vendorRequest = VendVendorRequest::find(_vendorRequest.RecId) as VendVendorRequestNewVendor;

        if (!vendorRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.updateRequestStateToApproved(_vendorRequest.RecId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyShowRequestsFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the filter to show only the requests that are pending for approval or all requests.
    /// </summary>
    /// <param name = "_formDataSource">The form data souce.</param>
    /// <param name = "_selection">Indicates if all requests must be shown or only the pending approval ones.</param>
    [Hookable(false), Wrappable(false)]
    public static void applyShowRequestsFilter(FormDataSource _formDataSource, int _selection)
    {
        QueryBuildRange qbr = SysQuery::findOrCreateRange(_formDataSource.query().dataSourceTable(tableNum(VendVendorRequestNewCategory)), fieldNum(VendVendorRequestNewCategory, RequestStatus));

        if (_selection == enum2int(VendVendorCategoryRequestFilterAction::All))
        {
            qbr.value(SysQuery::valueUnlimited());
        }
        else if (_selection == enum2int(VendVendorCategoryRequestFilterAction::PendingAction))
        {
            qbr.value(SysQuery::value(VendVendorRequestStatus::PendingApproval));
        }

        _formDataSource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectRequest</Name>
				<Source><![CDATA[
    public void rejectRequest(VendVendorRequest _vendorRequest)
    {
        if (!_vendorRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;
        this.updateRequestStateToRejected(_vendorRequest.RecId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    public tableId tableId()
    {
        return tableNum(VendVendorRequestNewCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvalMenuItem</Name>
				<Source><![CDATA[
    public menuItemNameDisplay approvalMenuItem()
    {
        return menuitemDisplayStr(VendVendorRequestNewCategoryForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalRequestMenuItem</Name>
				<Source><![CDATA[
    public menuItemNameDisplay originalRequestMenuItem()
    {
        return menuitemDisplayStr(VendVendorRequestNewCategoryForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalRequest</Name>
				<Source><![CDATA[
    public anytype originalRequest(VendVendorRequest _vendorRequest)
    {
        if (!_vendorRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return VendVendorRequestNewCategory::find(_vendorRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRejectRequest</Name>
				<Source><![CDATA[
    public boolean canRejectRequest(VendVendorRequest _vendorRequest)
    {
        if (!_vendorRequest)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        boolean ret = super(_vendorRequest);

        if (ret)
        {
            VendVendorRequest vendRequest;

            select firstonly RecId, ReasonRef from vendRequest
                where vendRequest.RecId == _vendorRequest.RecId;

            if (vendRequest.RecId && vendRequest.ReasonRef == 0)
            {
                ret = checkFailed("@SYS134421");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>