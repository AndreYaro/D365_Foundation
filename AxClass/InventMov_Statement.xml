<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Statement</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

class InventMov_Statement extends InventMovement
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    RetailTransactionSalesTrans    transactionSalesTrans;

    LedgerAccount           cacheAccountPhysicalRevenue;
    LedgerAccount           cacheAccountPhysicalRevenueOffset;
    LedgerAccount           cacheAccountPhysicalTax;

    boolean                 physicalTaxCalculated;
    AmountMST               physicalSumTaxMst;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDimFieldsValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// check if the inventory dimension has valid values.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> record.</param>
    /// <param name = "_inventDim_orig">The orig <c>InventDim</c> record.</param>
    /// <param name = "_skipProductDimensions">A boolean determining if product dimension should be checked.</param>
    /// <returns>true if the dimensions check passed; otherwise, false.</returns>
    public boolean checkDimFieldsValid(InventDim _inventDim, InventDim _inventDim_orig, boolean _skipProductDimensions = false)
    {
        //we are skipping the individual product dimension check since the variant existence will be validated by other checks.    
        return super(_inventDim, _inventDim_orig, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account for the balance sheet.
    /// </summary>
    /// <returns>
    /// The default main account.
    /// </returns>
    LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            cacheAccountBalanceSheet = transactionSalesTrans.accountIssue();
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account for the account operations.
    /// </summary>
    /// <returns>
    /// The default main account.
    /// </returns>
    LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            cacheAccountOperations = transactionSalesTrans.accountConsumption();
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account for the physical account.
    /// </summary>
    /// <returns>
    /// The default main account.
    /// </returns>
    LedgerDimensionDefaultAccount accountPhysical()
    {
        if (! cacheAccountPhysical)
        {
            CustAccount custAccount = transactionSalesTrans.transactionTable().CustAccount;

            if (!custAccount)
                custAccount = CustParameters::find().DefaultCust;

            cacheAccountPhysical = InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(InventAccountType::SalesPackingSlip, custAccount));
        }

        return cacheAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <param name = "_custAccount">A customer account.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _inventAccountType, CustAccount _custAccount)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            transactionSalesTrans.ItemId,
            this.inventTable().itemGroupId(),
            0,
            _custAccount,
            CustTable::find(_custAccount).CustGroup,
            transactionSalesTrans.TaxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysicalRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account for the physical revenue.
    /// </summary>
    /// <returns>
    /// The default main account.
    /// </returns>

    LedgerDimensionDefaultAccount accountPhysicalRevenue()
    {
        CustAccount custAccount;

        if (! cacheAccountPhysicalRevenue)
        {
            custAccount = transactionSalesTrans.transactionTable().CustAccount;

            if (!custAccount)
                custAccount = CustParameters::find().DefaultCust;

            cacheAccountPhysicalRevenue = int642str(InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(InventAccountType::SalesPckSlipRevenue, custAccount)));
        }

        return str2int64(cacheAccountPhysicalRevenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the movement can be on all warehouses.
    /// </summary>
    /// <returns>
    ///     Always true.
    /// </returns>
    /// <remarks>
    ///     The statement movement can always be on all warehouses.
    /// </remarks>
    public boolean canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventSites</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the movement can be on all sites.
    /// </summary>
    /// <returns>
    ///     Always true.
    /// </returns>
    /// <remarks>
    ///     The statement movement can always be on all sites.
    /// </remarks>
    public boolean canBeOnAllInventSites()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimPhysical</Name>
				<Source><![CDATA[
    public boolean checkDimPhysical(
        InventQty   _qty,
        InventDim   _inventDim,
        boolean     _finalCheck,
        boolean     _showError = true
        )
    {
        boolean                                 ok         = true;
        InventDimGroupFieldSetupEnumerator      enumerator = this.inventDimGroupSetup().getFieldSetupEnumerator();
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;

        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();

            // For inventory batch id, we will ignore the validation since it will always be blank and automatically consumed
            // when sold from POS
            if (inventDimGroupFieldSetup.dimFieldId() == fieldNum(InventDim, inventBatchId))
            {
                continue;
            }

            ok = this.checkInventDimForInventDimField(_qty, _inventDim, inventDimGroupFieldSetup, _finalCheck, _showError) && ok;
        }

        return ok && _inventDim.checkInventDimCombination(this.itemId(),this.ecoResProductDimGroupSetup(),_showError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the quantity of a transaction.
    /// </summary>
    /// <param name="updateNow">
    /// An <c>InventUpd_Physical</c> object.
    /// </param>
    /// <returns>
    /// true if a quantity is specified for a transaction; otherwise, false.
    /// </returns>
    boolean checkUpdatePhysical(InventUpd_Physical updateNow)
    {
        boolean ok = true;

        if (this.transQtyUnit() == 0)
            ok = checkFailed("@SYS12170");

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCheckSerialNumFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle any custom logic when serial number check fails.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension.</param>
    /// <returns>true if final check result should be failed; otherwise false.</returns>
    protected boolean onCheckSerialNumFailed(InventDim _inventDim)
    {
        // The intention here is to generate any warnings for retail and return false to ignore failing further
        checkFailed(strFmt("@SCM:SerialNumberValidationIgnored", _inventDim.InventSerialId));
        eventSource.EventWriteInventoryPostingSerialNumberReturnValidationIgnored(_inventDim.RecId);
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCheckSerialNumQuantityFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle any custom logic when serial number quantity check fails.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension.</param>
    /// <returns>true if final check result should be failed; otherwise false.</returns>
    protected boolean onCheckSerialNumQuantityFailed(InventDim _inventDim)
    {
        // The intention here is to generate any warnings for retail and return false to ignore failing further
        checkFailed(strFmt("@SYS68712", _inventDim.InventSerialId));
        checkFailed(strFmt("@SCM:SerialNumberQuantityValidationIgnored", _inventDim.InventSerialId));
        eventSource.EventWriteInventoryPostingSerialNumberQtyValidationIgnored(_inventDim.RecId);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Always returns true.
    /// </summary>
    /// <param name="updateNow">
    /// An <c>InventUpd_Picked</c> object.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    boolean checkUpdatePicked(InventUpd_Picked updateNow)
    {
        boolean ok = true;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account number for the sales transaction.
    /// </summary>
    /// <returns>
    /// The customer account number.
    /// </returns>
    CustVendAC custVendAc()
    {
        if (! transactionSalesTrans.CustAccount)
        {
            return RetailTransactionTable::find(transactionSalesTrans.TransactionId,
                                     transactionSalesTrans.Store,
                                     transactionSalesTrans.TerminalId).CustAccount;
        }
        else
        {
            return transactionSalesTrans.CustAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default dimension.
    /// </summary>
    /// <returns>
    /// The default dimension.
    /// </returns>
    DimensionDefault dimension()
    {
        return transactionSalesTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvMode</Name>
				<Source><![CDATA[
    DlvModeId dlvMode()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvTerm</Name>
				<Source><![CDATA[
    DlvTermId dlvTerm()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>enforceSerialDimensionQuantityControl</Name>
				<Source><![CDATA[
    public boolean enforceSerialDimensionQuantityControl()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the physical revenue amount for the transaction quantity.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record.
    /// </param>
    /// <returns>
    /// The physical revenue amount that has been posted.
    /// </returns>
    AmountMSTPhysicalRevenue estimatedPhysicalRevenue(InventTrans _inventTrans)
    {
        AmountMSTPhysicalRevenue amountMST;

        if (transactionSalesTrans.Qty != 0)
        {
            amountMST = CurrencyExchangeHelper::amount(_inventTrans.Qty * transactionSalesTrans.NetAmount);
        }
        else
        {
            amountMST = super(_inventTrans);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the physical revenue tax amount for the transaction quantity.
    /// </summary>
    /// <param name="_inventTrans">
    /// An <c>InventTrans</c> record.
    /// </param>
    /// <returns>
    /// The tax amount for the physical revenue.
    /// </returns>
    AmountMST estimatedPhysicalTax(InventTrans _inventTrans)
    {
        AmountCur   amountCur = 0;
        AmountMST   amountMST = 0;

        if (!this.mustBeBookedPhysicalTax())
        {
            return 0;
        }

        if (!transactionSalesTrans.Qty)
        {
            return 0;
        }

        if (!physicalTaxCalculated)
        {
            amountCur = transactionSalesTrans.TaxAmount;
            //amountCur = salesOrderLine.LineAmount - salesOrderLine.lineAmountExclTax(systemDateGet());

            if (amountCur)
            {
                CurrencyCode currency = transactionSalesTrans.Currency;
                if (!currency)
                {
                    currency = transactionSalesTrans.transactionTable().Currency;
                }
                amountMST = CurrencyExchangeHelper::mstAmount(amountCur, currency);
            }

            physicalSumTaxMst       = amountMST;
            physicalTaxCalculated   = true;
        }

        //return - CurrencyExchangeHelper::amount( physicalSumTaxMst * -_inventTrans.qty/ transactionSalesTrans.qty);
        return - CurrencyExchangeHelper::amount(physicalSumTaxMst * -_inventTrans.Qty / transactionSalesTrans.inventNow());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimForIssueTransFromReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventDim</c> that should be put on the issue transaction during a receipt which updates the issue transaction for WHS items.
    /// </summary>
    /// <param name="_inventDimIssue">
    /// The original issue transaction <c>InventDim</c>
    /// </param>
    /// <param name="_inventDimReceipt">
    /// The receipt transaction <c>InventDim</c>
    /// </param>
    /// <returns>
    /// The new issue transaction <c>InventDim</c>
    /// </returns>
    /// <remarks>
    /// For retail transactions all dimensions of the receipt transaction will be copied ot the issue transaction.
    /// </remarks>
    public InventDim getInventDimForIssueTransFromReceipt(InventDim _inventDimIssue, InventDim _inventDimReceipt)
    {
        return _inventDimReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory dimension.
    /// </summary>
    /// <returns>
    /// The dimension ID for the item.
    /// </returns>
    InventDimId inventDimId()
    {
        return transactionSalesTrans.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the lot ID for the transaction.
    /// </summary>
    /// <returns>
    /// The lot ID for the transaction.
    /// </returns>
    InventRefTransId inventRefTransId()
    {
        return transactionSalesTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item number.
    /// </summary>
    /// <returns>
    /// The item number.
    /// </returns>
    ItemId  itemId()
    {
        return transactionSalesTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the module type.
    /// </summary>
    /// <returns>
    /// The <c>ModuleInventPurchSales::Sales</c> enumeration value.
    /// </returns>
    ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAggregateExpectedTransactions</Name>
				<Source><![CDATA[
    public boolean mustAggregateExpectedTransactions()
    {
        if (RetailStatementFeatureControl::isNotAggregateInventoryReservationEnabled())
        {
            // Same behavior as non aggregated.
            return false;
        }
        else
        {
            // Backwards compatibility.
            if (RetailParameters::find().AggregateBeforePosting)
            {
                return true;
            }

            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>inventMovement</c> object must be auto-reserved.
    /// </summary>
    /// <returns>
    /// true if the <c>inventMovement</c> object must be auto-reserved; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is often called together with the <c>canBeReserved</c> method, which returns a default
    /// <c>Boolean</c> value from the <c>inventType</c> class hierarchy.
    /// </remarks>
    boolean  mustBeAutoReserved()
    {
        #Retail
        if (!this.inventTable().inventItemType().canBeAutoReserved())
            return false;

        return (#ItemReservation != ItemReservation::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the post packing slip value.
    /// </summary>
    /// <returns>
    /// true if the post packing slip value in the ledger is true; otherwise, false.
    /// </returns>
    boolean  mustBeBookedPhysically()
    {
        if (SalesParameters::find().PostPackingSlip)
            return super();
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysicalRevenue</Name>
				<Source><![CDATA[
    boolean mustBeBookedPhysicalRevenue()
    {
        // Posting of physical revenue is not supported by Retail at this time.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysicalTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the physical revenue and tax amount.
    /// </summary>
    /// <returns>
    /// true if physical revenue and tax is valid; otherwise, false.
    /// </returns>
    boolean mustBeBookedPhysicalTax()
    {
        return InventParameters::find().PostPhysicalTax && this.mustBeBookedPhysicalRevenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBePicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transactions related to this movement must be picked.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean mustBePicked()
    {
        return false; // Retail doesn't support picking
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Always returns false.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Always returns false.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  mustBeRemainControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeUnitControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Always returns false.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  mustBeUnitControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRegisterTrackingDimension</Name>
				<Source><![CDATA[
    public boolean mustRegisterTrackingDimension()
    {
        return this.inventTable().isActiveInSalesProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(RetailTransactionSalesTrans _transactionSalesTrans)
    {
        transactionSalesTrans = _transactionSalesTrans;

        super(_transactionSalesTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    InventMovement newMovement_Orig()
    {
        return null;
    /*
        if (transactionSalesTrans.RecId)
        {
            return new InventMov_Statement(transactionSalesTrans.orig());
        }
        else
        {
            return null;
        }
    */
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default offset account.
    /// </summary>
    /// <returns>
    /// The offset account for the posting.
    /// </returns>
    LedgerDimensionDefaultAccount offsetAccountPhysical()
    {
        if (! cacheOffsetAccountPhysical)
        {
            CustAccount custAccount = this.custVendAc();

            if (!custAccount)
                custAccount = CustParameters::find().DefaultCust;

            cacheOffsetAccountPhysical = InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(InventAccountType::SalesPackingSlipOffsetAccount, custAccount));
        }

        return cacheOffsetAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting type.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::SalesIssue</c> enumeration value.
    /// </returns>
    LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::SalesIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting type.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::SalesOffsetAccountPackingSlip</c> enumeration value.
    /// </returns>
    LedgerPostingType postingOffsetPhysical()
    {
        return LedgerPostingType::SalesOffsetAccountPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting type.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::SalesConsump</c> enumeration value.
    /// </returns>
    LedgerPostingType postingOperations()
    {
        return LedgerPostingType::SalesConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting type.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::SalesPackingSlip</c> enumeration value.
    /// </returns>
    LedgerPostingType postingPhysical()
    {
        return LedgerPostingType::SalesPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysicalRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting type.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::SalesPckSlipRevenue</c> enumeration value.
    /// </returns>
    LedgerPostingType postingPhysicalRevenue()
    {
        return LedgerPostingType::SalesPckSlipRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysicalRevenueOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting type.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::SalesPckSlipRevenueOffsetAccount</c> enumeration value.
    /// </returns>
    LedgerPostingType postingPhysicalRevenueOffset()
    {
        return LedgerPostingType::SalesPckSlipRevenueOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysicalTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting type.
    /// </summary>
    /// <returns>
    /// The <c>LedgerPostingType::SalesPackingslipTax</c> enumeration value.
    /// </returns>
    LedgerPostingType postingPhysicalTax()
    {
        return LedgerPostingType::SalesPackingslipTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategoryId</Name>
				<Source><![CDATA[
    ProjCategoryId projCategoryId()
    {
        return ''; // salesOrderLine.projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the project transaction type.
    /// </summary>
    /// <returns>
    /// The <c>ProjItemType::SalesOrder</c> enumeration value.
    /// </returns>
    ProjItemType projItemType()
    {
        ProjItemType ret = ProjItemType::SalesOrder;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLinePropertyId</Name>
				<Source><![CDATA[
    ProjLinePropertyId projLinePropertyId()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>projSalesCurrencyId</Name>
				<Source><![CDATA[
    ProjSalesCurrencyCode projSalesCurrencyId()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerBlankTrackingValueAsNotReadable</Name>
				<Source><![CDATA[
    public boolean registerBlankTrackingValueAsNotReadable()
    {
        boolean ret = super();

        if (!this.inventDimGroupSetup().getFieldSetup(fieldNum(InventDim, InventSerialId)).isAllowBlankIssueEnabled())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainFinancialUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity for the transaction.
    /// </summary>
    /// <returns>
    /// The quantity for the sales transaction.
    /// </returns>
    UnitQty  remainFinancialUnit()
    {
        // RemainSalesFinancial - Quantity in the sales unit
        return transactionSalesTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the quantity from the current unit to inventory model unit.
    /// </summary>
    /// <returns>
    /// A real value measured in the unit of measure to which to convert.
    /// </returns>
    InventQty   remainPhysical()
    {
        // RemainInventPhysical - Quantity in the invent unit
        //return transactionSalesTrans.qty;
        return transactionSalesTrans.inventNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysicalUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity for the transaction.
    /// </summary>
    /// <returns>
    /// The quantity for the sales transaction.
    /// </returns>
    UnitQty  remainPhysicalUnit()
    {
        //RemainSalesPhysical - quantity in the sales unit
        return transactionSalesTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationHierarchyLevelStrategyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list containing <c>WHSReservationHierarchyLevelStrategy</c> instances for this movement.
    /// </summary>
    /// <param name="_inventDimReservationCriteria">
    /// An <c>InventDim</c> buffer with the values that are required to be reserved.
    /// </param>
    /// <returns>
    /// A list containing <c>WHSReservationHierarchyLevelStrategy</c> instances for this movement.
    /// </returns>
    public List reservationHierarchyLevelStrategyList(InventDim _inventDimReservationCriteria)
    {
        List reservationStrategyList = super(_inventDimReservationCriteria);

        if (this.isItemWHSEnabled())
        {
            //if we are missing dimensions then we add none as a defaulting so we at least try to reserve on the dimensions we have
            reservationStrategyList.addEnd(WHSReservationHierarchyLevelStrategy::newFromStrategyType(WHSReservationHierarchyLevelStrategyType::None, this.inventTable(), _inventDimReservationCriteria));
        }

        return reservationStrategyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the quantity from the current unit to the inventory model unit.
    /// </summary>
    /// <returns>
    /// A real value measured in the unit of measure to which to convert.
    /// </returns>
    InventQty   reserveQty()
    {
        InventQty inventQty, inventNow;

        //return transactionSalesTrans.qty;

        inventNow = transactionSalesTrans.inventNow();

        //if we are aggregating we might have more transactions than what is covered by the quantity in inventNow, hence we need to account for this
        if (RetailParameters::find().AggregateBeforePosting)
        {
            //we need the full quantity that should be reserved, so that includes the already reserved ones
            inventQty = this.transIdSum().onOrder() + this.transIdSum().reserved();
            //quantities are negative so we take the minimum of them which is what we want to end up having reserved
            inventNow = min(inventQty,inventNow);
        }

        return inventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the original transactions.
    /// </summary>
    /// <returns>
    ///    The ID of the original transaction originator if any; otherwise, zero.
    /// </returns>
    public InventTransOriginId returnInventTransOrigin()
    {
        InventTransIdReturn inventTransIdReturn = this.transIdReturn();

        if (!inventTransIdReturn)
        {
            return 0;
        }

        return InventTransOrigin::findByInventTransId(inventTransIdReturn).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailSalesOrderType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the RetailSalesOrderType for the movement which is always Cash and Carry.
    /// </summary>
    /// <returns>
    ///     CashAndCarry.
    /// </returns>
    public RetailSalesOrderType getRetailSalesOrderType()
    {
        return RetailSalesOrderType::CashAndCarry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inventory dimension.
    /// </summary>
    /// <param name="_dimId">
    /// The <c>InventDimId</c> value of the inventory dimension.
    /// </param>
    void setInventDimId(InventDimId _dimId)
    {
        transactionSalesTrans.InventDimId = _dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefFields</Name>
				<Source><![CDATA[
    boolean setInventRefFields(
        InventRefType       _inventRefType,
        InventRefId         _inventRefId,
        InventTransOriginId _inventTransOriginId
        )
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date of the transaction.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    TransDate transDate()
    {
        return transactionSalesTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransID</c> value of the transaction.
    /// </summary>
    /// <returns>
    /// The invent transaction ID of the transaction.
    /// </returns>
    InventTransId transId()
    {
        return transactionSalesTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transIdReturn</Name>
				<Source><![CDATA[
    InventTransIdReturn transIdReturn()
    {
        InventTransId inventTransId = transactionSalesTrans.originalInventTransId();
        
        if (inventTransId && InventTrans::findTransId(inventTransId).StatusIssue == StatusIssue::Sold)
        {
            return inventTransId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transInventRefType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference type of the transaction.
    /// </summary>
    /// <returns>
    /// The sales reference type.
    /// </returns>
    InventRefType transInventRefType()
    {
        return InventRefType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the quantity from the current unit to inventory model unit.
    /// </summary>
    /// <returns>
    /// A real value measured in the unit of measure to which to convert.
    /// </returns>
    InventQty  transQty()
    {
        //return transactionSalesTrans.qty;
        return transactionSalesTrans.inventNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity for the transaction.
    /// </summary>
    /// <returns>
    /// The quantity for the sales transaction.
    /// </returns>
    InventQty  transQtyUnit()
    {
        return transactionSalesTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the statement ID of the transaction.
    /// </summary>
    /// <returns>
    /// The statement ID of the sales transaction.
    /// </returns>
    InventTransRefId transRefId()
    {
        return transactionSalesTrans.StatementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invent transaction type value of the transaction.
    /// </summary>
    /// <returns>
    /// The invent transaction type.
    /// </returns>
    InventTransType transType()
    {
        return InventTransType::Statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>UnitOfMeasureSymbol</c> value of the item in the transaction.
    /// </summary>
    /// <returns>
    /// The <c>UnitOfMeasureSymbol</c> value of the item.
    /// </returns>
    UnitOfMeasureSymbol  transUnitId()
    {
        return transactionSalesTrans.Unit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDoBuffer</Name>
				<Source><![CDATA[
    void updateDoBuffer()
    {
        if (RetailStatementFeatureControl::isNotAggregateInventoryReservationEnabled())
        {
            // Same behavior as non aggregated.
            super();
        }
        else
        {
            // Backwards compatibility.
            RetailParameters parameters = RetailParameters::find();

            if (!parameters.AggregateBeforePosting)
            {
                super();
            }
        //  else
        //  {
        //      Do nothing because the buffer in case of aggregation is an aggregated sales transaction object
        //      for which an "update" makes no sense and results in a runtime error.
        //  }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>