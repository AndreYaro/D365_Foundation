<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMaterialConsumption</Name>
	<SourceCode>
		<Declaration><![CDATA[
[WHSWorkExecuteMode(WHSWorkExecuteMode::MaterialConsumption)]
class WHSWorkExecuteDisplayMaterialConsumption extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustGoToMenuWhenCancelling</Name>
				<Source><![CDATA[
    protected boolean mustGoToMenuWhenCancelling()
    {
        return step == #GetProductionOrderIdStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        var fieldValues = _control.parmContext().fieldValues;

        switch (true)
        {
            case _control is WhsControlItemId:
                
                if (!this.validateItemIsProdBOM(pass.lookupStr(#ProdId), fieldValues.parmItemId()))
                {
                    boolean failed = _control.fail(strFmt("@WAX:ErrorRawMaterialNotOnBOMLine", fieldValues.parmItemId()));

                    fieldValues.parmItemId('');

                    return failed;
                }
                break;
            
            case _control is WhsControlUOM:
                var controlData = _control.parmContext().controlData;

                InventDimId inventDimIdProduct = controlData.findInventDimIdProduct();

                if (!controlData.parmFromInventStatusId())
                {
                    controlData.parmFromInventStatusId(controlData.getInventStatusId());

                    if (!controlData.parmFromInventStatusId())
                    {
                        controlData.parmFromInventStatusId(WHSMaterialConsumptionJournalHelper::statusFromPickedOrReservedTransactionInventDim(controlData.findInventDimId(),
                                                                                                                         pass.parmItemId(),
                                                                                                                         pass.lookupStr(#ProdId)));
                    }
                }

                InventDim       inventDim = InventDim::find(controlData.findInventDimId());
                InventDimParm   inventDimParm;
                inventDimParm.initFromInventDim(inventDim);

                // Find what is available on the location and how much the BOM has already reserved of picked.
                InventQty sumQty = controlData.getQty() + WHSMaterialConsumptionJournalHelper::getRemainingTransHandlingQtyForConsumptionForPickReservPhy(pass.lookupStr(#ProdId),
                                                                                                                                                          fieldValues.parmItemId(),
                                                                                                                                                          inventDim,
                                                                                                                                                          inventDimParm);

                // Validate against negative inventory rules
                if (fieldValues.parmQtyToConsume()
                    &&  WHSCatchWeightHelper::convertInventQuantity(fieldValues.parmItemId(), _control.parmData(), fieldValues.parmQtyToConsume(), inventDimIdProduct) > sumQty
                    &&  (!InventTable::find(fieldValues.parmItemId()).whsAllowPhysNeg()
                    ||   !controlData.wmsLocation().whsLocationProfile().AllowNegative))
                {
                    return _control.fail("@WAX1172");
                }
                break;
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemIsProdBOM</Name>
				<Source><![CDATA[
    private boolean validateItemIsProdBOM(
        ProdId  _prodId,
        ItemId  _itemId)
    {
        return (select firstOnly RecId from prodBOM
                    where prodBOM.ProdId    == _prodId
                    &&    prodBOM.ItemId    == _itemId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUnitConversionControls</Name>
				<Source><![CDATA[
    protected container buildUnitConversionControls(container _con)
    {
        InventTable     inventTable = InventTable::find(pass.lookupStr(#ItemId));
        container       ret = _con;

        ItemId       itemId       = pass.lookupStr(#ItemId);
        InventHandlingUnitId inventUnitId = WHSCatchWeightHelper::inventHandlingUnitId(itemId);

        if (itemId)
        {
            if (pass.exists(#SelectedValueUOM) && pass.lookup(#SelectedValueUOM) != '' && pass.lookup(#SelectedValueUOM) != inventUnitId)
            {
                if (!pass.exists(#CurrentUOM) || pass.lookup(#CurrentUOM) != pass.lookup(#SelectedValueUOM))
                {
                    pass.insert(#CurrentUOM, pass.lookup(#SelectedValueUOM));
                }
                else if (!pass.exists(#Initiation))
                {
                    pass.remove(#CurrentUOM);
                }

                List hierarchyList = WHSReservationHierarchyProvider::construct().getDimListAllFromInventTable(inventTable, WHSReservationHierarchySortOrder::TopDown);

                InventDim inventDim = this.createInventDimFromPass();

                // CLear the inventory dimensions if they are not complete
                if (WHSReservationHierarchyInventDimUtil::inventDimHasNotAllowedBlankValues(inventDim, hierarchyList, InventDimGroupSetup::newInventTable(inventTable)))
                {
                    inventDim = null;
                }

                ret += [this.buildControl(#RFLabel,
                                          #InventConversion,
                                          strFmt("@WAX:MobileDeviceItemConversion",
                                          pass.lookup(#SelectedValueUOM),
                                          WHSCatchWeightHelper::convertInventQuantity(itemId,
                                                                                pass.lookup(#selectedValueUOM),
                                                                                1,
                                                                                (inventDim) ? inventDim.inventDimId : ''),

                                          inventUnitId),
                                          1,
                                          '',
                                          #WHSRFUndefinedDataType,
                                          '',
                                          0)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldsWithDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The container of field values needs to be updated to include additional field values and any defaults that might be found in the pass.
    /// </summary>
    /// <param name="_con">
    ///  The current container of field values.
    /// </param>
    /// <param name="_mode">
    ///  The current mode value.
    /// </param>
    /// <param name="_step">
    ///  The current step value.
    /// </param>
    /// <param name="_pass">
    ///  The current RF pass through.
    /// </param>
    /// <returns>
    ///  Returns an updated container with field values and the temporary pass.
    /// </returns>
    private container buildFieldsWithDefaults(
        container           _con,
        WHSWorkExecuteMode  _mode,
        int                 _step,
        WHSRFPassthrough    _pass)
    {
        container           ret;
        container           con = _con;
        container           tmpFieldValues;
        WHSRFPassthrough    tmpPass = _pass;

        con = this.updateModeStepPass(con, _mode, _step, tmpPass);

        [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, tmpPass);
        WHSRFPassthrough fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        tmpPass = this.combineMaps(tmpPass, fieldValues);

        con = this.buildMaterialConsumptionControls(ret, tmpPass.lookupStr(#WMSLocationId));

        return [con, tmpPass.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProductionOrderIdControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Builds a mobile device container to display the production order Id.
    /// </summary>
    /// <param name="_con">
    ///  The current container of field values.
    /// </param>
    /// <returns>
    ///  A container with a production order Id field value.
    /// </returns>
    protected container buildProductionOrderIdControls(container _con)
    {
        container   ret = _con;

        ret += [this.buildControl(#RFLabel, #MaterialConsumption, pass.exists(#MenuItem) ? WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #ProdId, "@WAX725", 1, '', extendedTypeNum(ProdId), '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimIdFromBOMTransaction</Name>
				<Source><![CDATA[
    private InventDimId getInventDimIdFromBOMTransaction()
    {
        InventDim         bomLineDim;
        InventDim         currentDim = this.createInventDimFromPass();
        InventDimParm     currentDimParm;
        InventDimId       transDimId;
        InventTrans       inventTrans;
        InventTransOrigin inventTransOrigin;

        currentDimParm.initFromInventDim(currentDim);

        while select inventDimId from inventTrans
            group by inventTrans.inventDimId
            where inventTrans.ItemId            == pass.lookup(#ItemId)
            &&    inventTrans.inventDimId       != ''
            &&    inventTrans.TransChildType    == InventTransChildType::None
            &&    inventTrans.StatusReceipt     == StatusReceipt::None
            &&    (inventTrans.StatusIssue      == StatusIssue::Picked
            ||     inventTrans.StatusIssue      == StatusIssue::ReservPhysical)
            #InventDimExistsJoin(inventTrans.InventDimId, bomLineDim, currentDim, currentDimParm)
            exists join inventTransOrigin
                where inventTransOrigin.RecId       == inventTrans.InventTransOrigin
                &&    inventTransOrigin.ReferenceCategory == InventTransType::ProdLine
                &&    inventTransOrigin.ReferenceId       == pass.lookupStr(#ProdId)
        {
            if (transDimId
            &&  transDimId != inventTrans.inventDimId)
            {
                transDimId = '';
                break;
            }

            transDimId = inventTrans.inventDimId;
        }

        return transDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePassDimensionsFromBOMLine</Name>
				<Source><![CDATA[
    private void populatePassDimensionsFromBOMLine()
    {
        InventDimId transDimId = this.getInventDimIdFromBOMTransaction();
        
        if (transDimId)
        {
            InventDim bomLineDim = InventDim::find(transDimId);
            List dimList = EcoResProductDimGroupSetup::newInventTable(InventTable::find(pass.lookup(#ItemId))).activeDimensionFields();
            dimList.appendList(InventDim::dimTrackingDimFieldList());
            ListEnumerator dimLE = dimList.getEnumerator();

            while (dimLE.moveNext())
            {
                FieldName fieldName = fieldId2Name(bomLineDim.TableId, dimLE.current());

                if (!pass.hasValue(fieldName)
                &&  bomLineDim.getFieldValue(fieldName) != '')
                {
                    pass.insert(fieldName, bomLineDim.(dimLE.current()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMaterialConsumptionControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Builds a mobile device container to display the location, item, and inventory dimensions.
    /// </summary>
    /// <param name="_con">
    ///  The current container of field values.
    /// </param>
    /// <param name="_locationId">
    ///  The current location if it has been defined.
    /// </param>
    /// <returns>
    ///  A container with a location, as well as an item and inventory dimensions if they exist in the pass.
    /// </returns>
    protected container buildMaterialConsumptionControls(
        container       _con,
        WMSLocationId   _locationId = '')
    {
        container           ret = _con;
        WMSLocation         location;
        WHSInventStatusId   inventStatusId;

        ret += [this.buildControl(#RFLabel, #MaterialConsumption, pass.exists(#MenuItem) ? WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];

        // A location or license plate has not yet been defined
        if (!pass.exists(#WMSLocationId))
        {
            ret += [this.buildControl(#RFText, #LocOrLP, "@WAX1146", 1, _locationId, extendedTypeNum(WHSLicensePlateId), '', 0)];
        }
        // Build out the other fields
        else
        {
            ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0, false)];

            if (_locationId)
            {
                location = WMSLocation::find(_locationId, pass.lookup(#InventLocationId));

                if (location.whsLocationIsLPControlled())
                {
                    ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
                }
            }
        }

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, pass.lookupStr(#ItemId) == '')];

        InventTable inventTable = InventTable::find(pass.lookupStr(#ItemId));

        if (inventTable)
        {
            this.populatePassDimensionsFromBOMLine();

            WHSInventTable whsInventTable = WHSInventTable::find(inventTable.ItemId);

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }

            ret = this.buildProductDimensionsText(ret, inventTable.ItemId, true);

            ret = this.buildTrackingDimensionsText(ret, inventTable.ItemId, location, true, true, true, true); 
        }

        if (pass.exists(#LicensePlateId) && pass.lookup(#LicensePlateId) != '')
        {
            inventStatusId = this.getDefaultLPInventStatusId(pass.lookup(#LicensePlateId));
        }

        if (pass.exists(#SerialId) && pass.lookup(#SerialId) != '')
        {
            inventStatusId = this.getInventStatusIdFromSerialOnHand(pass.lookup(#InventSiteId),
                                                                    pass.lookup(#InventLocationId),
                                                                    pass.lookup(#WMSLocationId),
                                                                    pass.lookup(#SerialId));
        }

        if (inventStatusId)
        {
            pass.insert(#SelectedValue, inventStatusId);
            ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookupStr(#SelectedValue), false);
        }
        else
        {
            ret = this.buildInventoryStatus(ret, '', false, false, false, pass.lookupStr(#SelectedValue), !location.whsLocationIsLPControlled());
        }

        if (!pass.hasValue(#SelectedValueUOM)
        &&  inventTable.ItemId)
        {
            pass.insert(#SelectedValueUOM, WHSUOMSeqGroupTable::getDefaultMaterialConsumpUOM(inventTable.ItemId));
        }
        this.determineMaterialConsumptionQty();
        ret += [this.buildControl(#RFText, #QtyToConsume, "@SYS105177", 1, pass.lookupStr(#QtyToConsume), extendedTypeNum(Qty), '', 0)];

        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
        ret = this.buildUnitConversionControls(ret);

        if (PdsGlobal::pdsIsCWItem(inventTable.ItemId))
        {
            ret = this.buildCWWeightControls(ret, inventTable.ItemId);
        }

        ret = this.addConsumeLPButton(ret, 1);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCWWeightControls</Name>
				<Source><![CDATA[
    protected container buildCWWeightControls(container _ret, ItemId _itemId)
    {
        container ret = _ret;

        if (_itemId
            && !pass.exists(#Initiation)
            && pass.hasValue(#QtyToConsume)
            && WHSInventTable::productionPickingWeightCapturingMethod(_itemId) == WHSProductionPickingWeightCapturingMethod::PerPickingQty)
        {
            if (this.isExactWeightKnown()
                && WHSInventTable::outboundWeightVarianceMethod(_itemId) == WHSOutboundWeightVarianceMethod::Restrict)
            {
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume, this.getKnownWeight(_itemId));
            }
            else
            {
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt, 1);

                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume, "@WAX:Weight", 1, '', extendedTypeNum(WHSTransWeight), '', 0, true)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExactWeightKnown</Name>
				<Source><![CDATA[
    private boolean isExactWeightKnown()
    {
        Qty totalAvail = pass.lookupNum(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty) + pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked);

        return (totalAvail && totalAvail == pass.lookupNum(#QtyToConsume))
            || (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked) && pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked) == pass.lookupNum(#QtyToConsume));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKnownWeight</Name>
				<Source><![CDATA[
    private WHSTransWeight getKnownWeight(ItemId _itemId)
    {
        WHSTransWeight weight = 0;

        if (this.isExactWeightKnown())
        {        
            InventDim inventDim = pass.createInventDimFromPass();

            if (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked))
            {
                weight += WHSMaterialConsumptionJournalHelper::getRemainingTransQuantitiesForConsumptionForPick(pass.lookupStr(#ProdId), pass.lookupStr(#ItemId), inventDim).parmInventQty();
            }
            
            if (pass.lookupNum(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty) && pass.lookupNum(#QtyToConsume) == pass.lookupNum(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty) + pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked))
            {
                weight += whsInventOnHand::getWorkPhysicalAvailByInventDim(_itemId, inventDim, true);
            }
        }

        return weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageWeight</Name>
				<Source><![CDATA[
    private WHSTransWeight getAverageWeight(ItemId _itemId)
    {
        WHSTransWeight weight = 0;

        InventDim inventDim = pass.createInventDimFromPass();

        if (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked))
        {
            WHSTransWeight pickedWeight = WHSMaterialConsumptionJournalHelper::getRemainingTransQuantitiesForConsumptionForPick(pass.lookupStr(#ProdId), pass.lookupStr(#ItemId), inventDim).parmInventQty();

            weight += WHSCatchWeightHelper::calculateAverageWeight(min(pass.lookupNum(#QtyToConsume), pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked)), pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked), pickedWeight, InventTable::inventDecimals(_itemId));
        }

        if (pass.lookupNum(#QtyToConsume) > pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked))
        {
            weight += WHSCatchWeightHelper::calculateDefaultWeightForPick(_itemId, inventDim, pass.lookupNum(#QtyToConsume) - pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked), InventTable::inventDecimals(_itemId));
        }

        return weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMaterialConsumptionJournalHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the material journal consumption journal helper.
    /// </summary>
    /// <returns>The initialized the material journal consumption journal helper.</returns>
    protected WHSMaterialConsumptionJournalHelper initializeMaterialConsumptionJournalHelper()
    {
        WHSMaterialConsumptionJournalHelper materialConsumptionHelper = WHSMaterialConsumptionJournalHelper::construct();

        materialConsumptionHelper.parmExistingJournalId(pass.lookupStr(#ContinueOpenJournal));
        materialConsumptionHelper.parmMobileDeviceUserId(pass.lookup(#UserId));
 
        return materialConsumptionHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeFullLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates journal lines based on an entire License Plate.
    /// </summary>
    private void consumeFullLicensePlate()
    {
        WHSMaterialConsumptionJournalHelper materialConsumptionHelper = this.initializeMaterialConsumptionJournalHelper();

        materialConsumptionHelper.createPickingListJournalLinesByLP(pass.lookup(#ProdId), this.createInventDimFromPass().inventDimId);

        pass.insert(#ContinueOpenJournal, materialConsumptionHelper.parmExistingJournalId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBuildMaterialConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the build material consumption page can be built.
    /// </summary>
    /// <returns>true if the material consumption page can be built.</returns>
    [Replaceable]
    protected boolean canBuildMaterialConsumption()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareBuildMaterialConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares and builds the material consumption page.
    /// </summary>
    /// <param name = "_message">The success message to present.</param>
    /// <returns>The built page.</returns>
    protected container prepareBuildMaterialConsumption(str _message)
    {
        // Clear the container to begin building up the return container
        container ret = this.addErrorLabel(conNull(), _message, WHSRFColorText::Success);

        // Reset the pass values to reflect the proper step
        pass = this.resetRFPassValues(pass);

        ret = this.buildMaterialConsumptionControls(ret, pass.lookupStr(#WMSLocationId));

        // On hand inventory exists for the item and location for which a journal line was just created
        if (pass.exists(#LocOrLP))
        {
            step = #GetUserDefinedFields;
        }
        else
        {
            step = #GetLocationOrLicensePlate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeLicensePlateClicked</Name>
				<Source><![CDATA[
    private container consumeLicensePlateClicked(container _con)
    {
        container ret = _con;

        if (this.validateLPInventoryForProdConsumption())
        {
            this.consumeFullLicensePlate();
            if (this.canBuildMaterialConsumption())
            {
                ret = this.prepareBuildMaterialConsumption("@WAX:MaterialConsumptionEntireLPConsumed");
            }
        }
        else
        {
            throw error(strFmt("@WAX:ErrorMaterialConsumptionLPItemNotOnBOM", pass.lookupStr(#ProdId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates journal lines.
    /// </summary>
    private void createJournalLines()
    {
        WHSMaterialConsumptionJournalHelper materialConsumptionHelper = this.initializeMaterialConsumptionJournalHelper();

        materialConsumptionHelper.createPickingListJournalLinesHandling(pass.lookup(#ProdId),
                                                                        pass.lookup(#ItemId),
                                                                        this.createInventDimFromPass().inventDimId,
                                                                        pass.lookupNum(#QtyToConsume),
                                                                        pass.lookup(#SelectedValueUOM),
                                                                        pass.lookupReal(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume));

        pass.insert(#ContinueOpenJournal, materialConsumptionHelper.parmExistingJournalId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineMaterialConsumptionQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the qty to be held in the qtyToConsume control.
    /// </summary>
    /// <remarks>
    /// If qtyToConsume has not yet been populated the method will try to default the qty by taking the minimum of the prodBOM open demand and the inventory on hand qty.
    /// </remarks>
    protected void determineMaterialConsumptionQty()
    {
        Qty                 prodBOMQty;
        Qty                 qtyToConsume;
        InventDim           inventDim;
        InventTable         inventTable = InventTable::find(pass.lookupStr(#ItemId));

        if (pass.hasValue(#QtyToConsume))
        {
            qtyToConsume = pass.lookupNum(#QtyToConsume);
        }
        else
        {
            Qty onHandQty = pass.lookupReal(#QtyAvailOnHand);
            boolean allInventDimParmFieldsHaveValues;

            if (inventTable)
            {
                List hierarchyList = WHSReservationHierarchyProvider::construct().getDimListAllFromInventTable(inventTable, WHSReservationHierarchySortOrder::TopDown);

                inventDim = this.createInventDimFromPass();
                // Create an InventDimParm for the items product dimensions
                InventDimParm itemInventDimParm = EcoResProductDimGroupSetup::newInventTable(inventTable).inventDimParmActiveDimensions();

                allInventDimParmFieldsHaveValues = inventDim.allInventDimParmFieldsHaveValues(itemInventDimParm, InventDim::dimProductDimFieldList())
                                                   && !WHSReservationHierarchyInventDimUtil::inventDimHasNotAllowedBlankValues(inventDim, hierarchyList, InventDimGroupSetup::newInventTable(inventTable));

                if (allInventDimParmFieldsHaveValues)
                {
                    // Retrieve the raw material consumption quantity using the inventory dimensions used to define the on-hand quantity
                    prodBOMQty = WHSMaterialConsumptionJournalHelper::getRemainingTransHandlingQtyForConsumptionForAllStatuses(pass.lookupStr(#ProdId), pass.lookupStr(#ItemId), inventDim);

                    // Retrieve qty on hand if it has not yet been determined.
                    if (!onHandQty)
                    {
                        // Use work physical avail to calculate availability because we cannot know if the prodBOM(s) we are consuming against will be reserved or not.
                        onHandQty = whsInventOnHand::getWorkPhysicalAvailHandlingQty(inventTable.ItemId, inventDim.inventDimId, true);
                        pass.insert(#QtyAvailOnHand, onHandQty);
                    }
                }
            }

            // check if the prodBOMQty could be in status picked/reserved physical
            if (onHandQty < prodBOMQty)
            {
                InventDimParm inventDimParm;
                inventDimParm.initFromInventDim(inventDim);
                qtyToConsume = WHSMaterialConsumptionJournalHelper::getRemainingTransHandlingQtyForConsumptionForPickReservPhy(pass.lookupStr(#ProdId),
																															pass.lookupStr(#ItemId),
																															inventDim,
																															inventDimParm);
            }

            if (allInventDimParmFieldsHaveValues && inventTable && PdsGlobal::pdsIsCWItem(inventTable.ItemId) && !pass.exists(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked))
            {
                PdsCWQty picked = WHSMaterialConsumptionJournalHelper::getRemainingTransQuantitiesForConsumptionForPick(pass.lookupStr(#ProdId), inventTable.ItemId, inventDim, inventDim.toDimParm()).parmCwQty();

                pass.insert(WHSWorkExecuteDisplayMovementControls::PhysicalInventoryQty, WHSInventOnHand::getWorkPhysicalQuantityByInventDim(inventTable.ItemId, inventDim).parmCwQty());
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked, picked);
            }

            if (!qtyToConsume)
            {
                qtyToConsume = min(onHandQty, prodBOMQty);
            }

            if (qtyToConsume > 0
            ||  (onHandQty   > 0
            &&   prodBOMQty  > 0))
            {           
                
                if (pass.hasValue(#SelectedValueUOM)
                &&  pass.lookup(#SelectedValueUOM) != WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId))
                {
                    EcoResReleasedProductUnitConverter ecoResReleasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
                    UnitOfMeasure selectedUOM = UnitOfMeasure::findBySymbol(pass.lookup(#SelectedValueUOM));
                    qtyToConsume = ecoResReleasedProductUnitConverter.convert(qtyToConsume,
                                                                                UnitOfMeasure::findBySymbol(WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId)).RecId,
                                                                                selectedUOM.RecId,
                                                                                NoYes::No,
                                                                                inventTable.ItemId,
                                                                                inventDim.inventDimId,
                                                                                NoYes::No);

                    // Round down so we are within our on hand and demand limits to the decimal precision of the selected UOM
                    qtyToConsume = roundDownDec(qtyToConsume, selectedUOM.DecimalPrecision);
                }
                pass.insert(#QtyToConsume, qtyToConsume);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        container                   ret = conNull();
        container                   con = _con;
        container                   tmpFieldValues;
        int                         hasError = 0;
        boolean                     complete;
        boolean                     addCancel = true;
        WHSRFPassthrough            fieldValues = new WHSRFPassthrough(Types::String, Types::String);

        boolean                     checkPosting = true;

        mode = conPeek(conPeek(_con, 1), 1);

        WHSRFPassthrough globalPass = pass;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));
        pass = this.combineMaps(globalPass, pass);

        hasError = this.hasError(con);

        if (_buttonClicked == #RFDone && pass.exists(#ContinueOpenJournal) && pass.lookup(#ContinueOpenJournal) != '')
        {
            if (step < #CreateJournalLine || (pass.exists(#ItemId) && pass.lookup(#ItemId) == ''))
            {
                step = #PostJournal;
            }
        }

        switch (step)
        {
            // Initialize RF
            case 0:
                if (!pass.exists(#ProdId) || pass.lookup(#ProdId) == '')
                {
                    con = this.buildProductionOrderIdControls(ret);

                    ret = con;

                    step = #GetProductionOrderIdStep;
                }
                break;

            case #GetProductionOrderIdStep:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                // The production order Id will default finished good
                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    addCancel = false;
                    break;
                }

                if (pass.exists(#ProdId) && pass.lookup(#ProdId) != '')
                {
                    con = this.buildMaterialConsumptionControls(ret);

                    ret = con;

                    step = #GetLocationOrLicensePlate;
                }
                else
                {
                    ret = con;
                }
                break;

            case #GetLocationOrLicensePlate:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                ret = this.displayLocOrLPCheck(ret, this.getControlDataFromContainer(con, #LocOrLP));
                    
                if (step == #LocOrLPCheck)
                {
                    break;
                }

                // The production order Id will default finished good
                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    addCancel = false;
                    break;
                }

                con = this.buildMaterialConsumptionControls(ret, pass.lookupStr(#WMSLocationId));

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete)
                    {
                        step = #CreateJournalLine;
                    }
                    else
                    {
                        step = #GetUserDefinedFields;
                    }
                }

                ret = con;
                break;

            case #GetUserDefinedFields:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    addCancel = false;
                    break;
                }

                con = this.buildMaterialConsumptionControls(ret, pass.lookupStr(#WMSLocationId));

                if (pass.hasValue(#QtyToConsume)
                &&  pass.lookupNum(#QtyToConsume) != fieldValues.lookupNum(#QtyToConsume))
                {
                    fieldValues.insert(#QtyToConsume, pass.lookup(#QtyToConsume));
                }

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (_buttonClicked == #RFConsumeLP)
                    {
                        ret = this.consumeLicensePlateClicked(ret);
                    }
                    else if (complete)
                    {
                        step = #CreateJournalLine;
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            case #CreateJournalLine:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    addCancel = false;
                    break;
                }

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete
                        && _buttonClicked != #RFConsumeLP
                        && !pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt)
                        && PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId)))
                    {
                        WHSProductionPickingWeightCapturingMethod capturingMethod = WHSInventTable::productionPickingWeightCapturingMethod(pass.lookup(#ItemId));

                        if (capturingMethod == WHSProductionPickingWeightCapturingMethod::NotCaptured)
                        {
                            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume, this.getAverageWeight(pass.lookup(#ItemId)));
                        }
                        else
                        {
                            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightPrompt, 1);
                            
                            if (this.isExactWeightKnown()
                                && WHSInventTable::outboundWeightVarianceMethod(pass.lookup(#ItemId)) == WHSOutboundWeightVarianceMethod::Restrict)
                            {
                                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume, this.getKnownWeight(pass.lookup(#ItemId)));
                            }
                            else if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume)
                                || (!this.isExactWeightKnown()
                                    && WHSInventTable::outboundWeightVarianceMethod(pass.lookup(#ItemId)) == WHSOutboundWeightVarianceMethod::Restrict))
                            {
                                complete = false;

                                if (capturingMethod == WHSProductionPickingWeightCapturingMethod::PerCatchWeightUnit)
                                {
                                    ret = this.buildWeightCapture(conNull());
                                    step = #CWOutboundWeightCapture;
                                }
                                else
                                {
                                    ret = this.buildMaterialConsumptionControls(conNull(), pass.lookupStr(#WMSLocationId));
                                }
                            }
                        }
                    }

                    if (_buttonClicked == #RFConsumeLP)
                    {
                        ret = this.consumeLicensePlateClicked(ret);
                    }
                    else if (complete)
                    {
                        this.createJournalLines();

                        if (this.canBuildMaterialConsumption())
                        {
                            ret = this.prepareBuildMaterialConsumption("@WAX:MaterialConsumptionJournalLineCreated");
                        }                      

                        break;
                    }
                }
                else
                {
                    ret = con;
                    break;
                }
                break;

            case #PostJournal:
                if (pass.exists(#ContinueOpenJournal) && pass.lookup(#ContinueOpenJournal) != '')
                {
                    ttsBegin;

                    ProdJournalTable prodJournalTable = ProdJournalTable::find(pass.lookup(#ContinueOpenJournal));

                    if (prodJournalTable.RecId)
                    {
                        ProdJournalCheckPostBOM prodJournalCheckPostBOM = ProdJournalCheckPostBOM::newPostJournal(prodJournalTable.JournalId,
                                                                                                                  NoYes::No);
                        prodJournalCheckPostBOM.parmThrowCheckFailed(false);
                        prodJournalCheckPostBOM.runOperation();
                        checkPosting = checkPosting && prodJournalCheckPostBOM.parmCheckJournalResult();
                    }

                    ttsCommit;
                }

                if (!checkPosting)
                {
                    throw (Exception::Error);
                }
                else
                {
                    // Reset RF
                    ret  = conNull();

                    ret = this.addErrorLabel(ret, strFmt("@WAX:MaterialConsumptionJournalPosted", pass.lookupStr(#ContinueOpenJournal)), WHSRFColorText::Success);

                    pass = WHSRFPassthrough::newReset(pass);

                    con  = this.buildProductionOrderIdControls(ret);

                    ret = con;

                    step = #GetProductionOrderIdStep;

                    ret = this.resetButtonClicked(ret);
                }
                break;

            case #CWOutboundWeightCapture:
                ret = this.processWeightCapture(hasError, con);
                break;

            case #LocOrLPCheck:
                ret = this.processLocOrLPCheck(con, _buttonClicked);
                break;
        }

        ret = this.addButtons(ret);

        // If an open journal exists for the mobile device user and production order, include the done button
        if (pass.exists(#ContinueOpenJournal)
        &&  pass.lookup(#ContinueOpenJournal) != ''
        && !hasError)
        {
            ret = this.addDoneButton(ret, true);
        }

        if (addCancel)
        {
            ret = this.addCancelButton(ret, 2, true);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLocOrLPCheck</Name>
				<Source><![CDATA[
    private container processLocOrLPCheck(container _con, str _buttonClicked)
    {
        step = #GetLocationOrLicensePlate;

        var locOrLpIdentifier = pass.lookupStr(#LocOrLP);
        pass.remove(#LocOrLP);
        pass.insert(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck, _buttonClicked);
        pass.insert(#Initiation, '1');

        container ret = this.updateModeStepPass(conNull(), mode, step, pass);
        ret = this.buildMaterialConsumptionControls(ret, locOrLpIdentifier);
        ret = this.displayForm(ret, _buttonClicked);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailQtyAtLowestDimLevelBelowLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds avail on hand inventory for the most specific (lowest) dimension set possible.
    /// </summary>
    /// <param name="_inventTable">
    /// The item we are finding inventory for.
    /// </param>
    /// <param name="_inventDimStart">
    /// The starting inventory dimension set which should include all physical dimension for the item.
    /// </param>
    /// <returns>
    /// Returns a container that holds values [InventDim, InventQty]
    /// The inventDim is the current dimension set that found available inventory.
    /// The InventQty is the current available qty at the dimension set.
    /// </returns>
    /// <remarks>
    /// The method never looks any higher than location level in the hierarchy.
    /// It is possible that no on had is found and zero is returned.
    /// </remarks>
    protected container getAvailQtyAtLowestDimLevelBelowLoc(
        InventTable _inventTable,
        InventDim   _inventDimStart)
    {
        InventDim       inventDim = _inventDimStart;
        InventQty       qtyAvail;

        List belowLocDims = WHSReservationHierarchyProvider::construct().getDimListLocationAndDownFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp);

        ListEnumerator le = belowLocDims.getEnumerator();

        while (qtyAvail <= 0 && le.moveNext())
        {
            WHSReservationHierarchyElementData hierarchyElementData = le.current();

            qtyAvail = WHSInventOnHand::getWorkPhysicalAvailHandlingQty(_inventTable.ItemId, inventDim.inventDimId, true);

            if (!qtyAvail)
            {
                FieldId dimFieldId = hierarchyElementData.parmDimensionFieldId();
                inventDim.clearField(dimFieldId);
                inventDim = inventDim::findOrCreate(inventDim);
            }
        }

        return [inventDim, qtyAvail];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventStatusIdFromSerialOnHand</Name>
				<Source><![CDATA[
    private WHSInventStatusId getInventStatusIdFromSerialOnHand(
        InventSiteId       _inventSiteId,
        InventLocationId   _inventLocationId,
        WMSLocationId      _locationId,
        WHSSerialId        _serialId)
    {
        InventSum       inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly InventStatusId from inventSum
            where inventSum.InventLocationId    == _inventLocationId
            &&    inventSum.wmsLocationId       == _locationId
            &&    inventSum.InventSerialId      == _serialId
            &&    inventSum.InventStatusId      != ''
            &&    inventSum.ClosedQty           == NoYes::No
            &&    inventSum.AvailPhysical       >  0;

            return inventSum.InventStatusId;
        }
        else
        {
            InventDim       inventDim;

            select firstonly InventStatusId from inventDim
            where inventDim.InventLocationId    == _inventLocationId
            &&    inventDim.wmsLocationId       == _locationId
            &&    inventDim.InventSerialId      == _serialId
            &&    inventDim.InventStatusId      != ''
            exists join inventSum
                where inventDim.InventDimId     == inventSum.InventDimId
                &&    inventSum.ClosedQty       == NoYes::No
                &&    inventSum.AvailPhysical    >  0;

            return inventDim.InventStatusId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Build up a list of <c>ProdBOM</c> for a particular production order Id and item Id.
    /// </summary>
    /// <param name="_prodId">
    ///  A production order Id.
    /// </param>
    /// <param name="_itemId">
    ///  An item Id.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///  Inventory dimensions to reference during list creation.
    /// </param>
    /// <returns>
    ///  Returns a list of <c>ProdBOM</c> for a particular production order Id and item Id.
    /// </returns>
    protected List getListOfOpenTransactions(
        ProdId _prodId,
        ItemId _itemId,
        InventDim _inventDimCriteria)
    {
        ProdBOM                 prodBOM;
        List                    listInventTrans = new List(Types::Record);
        InventTrans             inventTrans;
        InventDim               inventDimJoin;
        InventDimParm           inventDimParm;
        InventTransOrigin       inventTransOrigin;

        inventDimParm.initFromInventDim(_inventDimCriteria);

        while select inventTrans
            where inventTrans.itemId == _itemId
            #WHSInventDimExistsJoin(inventTrans.InventDimId, inventDimJoin, _inventDimCriteria)
                join RecID from inventTransOrigin
                    where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                    &&    inventTransOrigin.ReferenceCategory   == InventTransType::ProdLine
                    &&    InventTransOrigin.ReferenceId         == _prodId
                        join InventTransId from prodBOM
                        where prodBOM.InventTransId == InventTransOrigin.InventTransId
        {
            listInventTrans.addEnd(inventTrans);
        }

        return listInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRFPassValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///  A temporary RF pass through is created for continuing material consumption for a production order. If there is still on hand inventory for
    ///   the most recent journal line item and location, values for the location will be included in the pass.
    /// </summary>
    /// <param name="_pass">
    ///  The current RF pass through.
    /// </param>
    /// <returns>
    ///  Returns an updated RF pass.
    /// </returns>
    private WHSRFPassthrough resetRFPassValues(WHSRFPassthrough _pass)
    {
        WHSRFPassthrough    tempPass = _pass;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        
       


       if (!_pass.parmLicensePlateId()
            || (step != #GetUserDefinedFields && step != #CreateJournalLine))
       {
            inventDim inventDimOfAvailInventory;
            InventQty onHand;

            InventDim inventDim = this.createInventDimFromPass();
            Qty qtyLeftToConsume = WHSMaterialConsumptionJournalHelper::getRemainingTransHandlingQtyForConsumptionForAllStatuses(pass.lookupStr(#ProdId), pass.lookupStr(#ItemId), inventDim);

            if (qtyLeftToConsume > 0)
            {
                [inventDimOfAvailInventory, onHand] = this.getAvailQtyAtLowestDimLevelBelowLoc(InventTable::find(tempPass.lookupStr(#ItemId)), inventDim);

                if (onHand)
                {
                    fieldValues.initFromInventDimParm(inventDimOfAvailInventory, InventDimParm::allInventDim());

                    if (!fieldValues.exists(#LocOrLP))
                    {
                        fieldValues.insert(#LocOrLP, tempPass.lookupStr(#WMSLocationId));
                    }

                    if (!fieldValues.exists(#ItemId))
                    {
                        fieldValues.insert(#ItemId, tempPass.lookupStr(#ItemId));
                    }

                    if (!fieldValues.exists(#QtyAvailOnHand)
                        &&  inventDim.inventDimId == inventDimOfAvailInventory.inventDimId)
                    {
                        fieldValues.insert(#QtyAvailOnHand, onHand);
                    }
                }
            }
       }

        if (!fieldValues.exists(#ProdId))
        {
            fieldValues.insert(#ProdId, tempPass.lookupStr(#ProdId));
        }

        if (!fieldValues.exists(#ContinueOpenJournal))
        {
            fieldValues.insert(#ContinueOpenJournal, tempPass.lookupStr(#ContinueOpenJournal));
        }

        if (!fieldValues.exists(#FinishedGoodItemId))
        {
            fieldValues.insert(#FinishedGoodItemId, tempPass.lookupStr(#FinishedGoodItemId));
        }

        if (!fieldValues.exists(#InventLocationId))
        {
            fieldValues.insert(#InventLocationId, tempPass.lookupStr(#InventLocationId));
        }

        if (!fieldValues.exists(#InventSiteId))
        {
            fieldValues.insert(#InventSiteId, tempPass.lookupStr(#InventSiteId));
        }

        if (!fieldValues.exists(#MenuItem))
        {
            fieldValues.insert(#MenuItem, tempPass.lookupStr(#MenuItem));
        }

        if (!fieldValues.exists(#UserId))
        {
            fieldValues.insert(#UserId, tempPass.lookupStr(#UserId));
        }

        if (!fieldValues.exists(#UserSessionId))
        {
            fieldValues.insert(#UserSessionId, tempPass.lookupStr(#UserSessionId));
        }

        return fieldValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLPInventoryForProdConsumption</Name>
				<Source><![CDATA[
    protected boolean validateLPInventoryForProdConsumption()
    {
        ProdBOM         prodBOM;
        InventSum       inventSum;
        InventDim       inventDimLoop;
        InventDim       prodBOMInventDim;
        InventDimParm   inventDimParm;
        inventDimParm   inventDimParmProductDims;

        inventDimParm.initLicensePlateInventory();
        inventDimParmProductDims.setAllProductDimensions();
        InventDim inventDimCriteria = this.createInventDimFromPass();

        select firstOnly RecId from inventSum
            where inventSum.ClosedQty      == NoYes::No 
               && inventSum.PhysicalInvent  > 0
            #InventDimInnerJoin(inventSum.inventDimId, inventDimLoop, inventDimCriteria, inventDimParm)
                notExists join prodBOM
                        where prodBOM.ItemId    == inventSum.ItemId
                        &&    prodBOM.ProdId    == pass.lookupStr(#ProdId)
                            #InventDimExistsJoin(prodBOM.inventDimId, prodBOMInventDim, inventDimLoop, inventDimParmProductDims);

        return inventSum.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWeightCapture</Name>
				<Source><![CDATA[
    protected container buildWeightCapture(container _con)
    {
        container ret = _con;
        WMSLocation location;

        if (pass.lookupStr(#WMSLocationId) && pass.exists(#InventLocationId))
        {
            location = WMSLocation::find(pass.lookupStr(#WMSLocationId), pass.lookup(#InventLocationId));
        }

        if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
        {
            // If consume is more than picked handling quantity for restrict weight, then start with picked weight; user only needs to enter remainder coming from on-hand
            if (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked)
                && pass.lookupNum(#QtyToConsume) > pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked)
                && WHSInventTable::outboundWeightVarianceMethod(pass.lookup(#ItemId)) == WHSOutboundWeightVarianceMethod::Restrict)
            {
                WHSTransWeight pickedWeight = WHSMaterialConsumptionJournalHelper::getRemainingTransQuantitiesForConsumptionForPick(pass.lookupStr(#ProdId), pass.lookupStr(#ItemId), pass.createInventDimFromPass()).parmInventQty();

                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked) + 1);
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume, pickedWeight);
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightPicked, pickedWeight);
            }
            else
            {
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, 1);
            }

            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty, pass.lookupNum(#QtyToConsume));
        }

        // Capturing weight per catch weight unit
        ret += [this.buildControl(#RFLabel, #Scan, "@WAX:CaptureWeight", 1, '', #WHSRFUndefinedDataType, '', 0)];

        if (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked)
            && pass.lookupNum(#QtyToConsume) > pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked)
            && WHSInventTable::outboundWeightVarianceMethod(pass.lookup(#ItemId)) == WHSOutboundWeightVarianceMethod::Restrict)
        {
            ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayCatchWeightControls::WeightPicked, strFmt("@WAX:MaterialConsume_PerCWConsumePicked", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::HandlingQtyPicked), pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::WeightPicked), InventTable::find(pass.lookup(#ItemId)).inventUnitId()), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, strFmt("@SYS333411", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter), pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty)), 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

        ret = this.buildProductDimensionsText(ret, pass.lookupStr(#ItemId), true, false);

        ret = this.buildTrackingDimensionsText(ret, pass.lookupStr(#ItemId), location, true, true, false, true);

        ret += [this.buildControl(#RFLabel, #Qty, strFmt("@WAX736", 1, WHSCatchWeightHelper::inventHandlingUnitId(pass.lookupStr(#ItemId))), 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight), extendedTypeNum(Weight), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWeightCapture</Name>
				<Source><![CDATA[
    private container processWeightCapture(boolean _hasError, container _con)
    {
        container           ret = _con;
        container           tmpFieldValues;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean             hasError;
        boolean             complete;

        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        [ret, tmpFieldValues] = WHSRFControlData::processData(ret, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);
        hasError = this.hasError(ret);

        if (hasError)
        {
            return ret;
        }

        if (!fieldValues.empty())
        {
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                // Increment total weight to consume
                if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume))
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume, pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight));
                }
                else
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume, (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::WeightToConsume) + pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight)));
                }

                pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight);

                // Check to see if weight has been captured for total quantity
                if (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) > pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty);

                    step = #CreateJournalLine;
                    ret = [this.buildControl(#RFLabel, #Scan, "@WAX:CaptureWeight", 1, '', #WHSRFUndefinedDataType, '', 0)];
                    ret = this.updateModeStepPass(ret, mode, step, pass);
                    ret = this.displayForm(ret);
                }
                else
                {
                    ret = this.buildWeightCapture(conNull());
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>