<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReApprovalPolicyRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReApprovalPolicyRule</c> class is used to evaluate whether a purchase order requires
/// re-approval.
/// </summary>
class PurchReApprovalPolicyRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>evaluateAccountingDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the accounting distributions have changed for the purchase order or lines.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to check.
    /// </param>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record if only a single line should be checked.
    /// </param>
    /// <returns>
    /// true if the accounting distributions have changed; otherwise, false.
    /// </returns>
    private boolean evaluateAccountingDistributions(PurchTable _purchTable, PurchLine _purchLine = null)
    {
        if (this.evaluateHeaderAccountingDistributions(_purchTable)
            || this.evaluateLineAccountingDistributions(_purchTable, _purchLine))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateHeaderAccountingDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the purchase order accounting distributions have changed.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to check.
    /// </param>
    /// <returns>
    /// true if the accounting distributions have changed; otherwise, false.
    /// </returns>
    private boolean evaluateHeaderAccountingDistributions(PurchTable _purchTable)
    {
        SourceDocumentLine      sourceDocumentLine;

        // Check if Purchase order has none completed distributions
        select firstOnly RecId from sourceDocumentLine
            where sourceDocumentLine.RecId == _purchTable.SourceDocumentLine
                && (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft
                    || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed
                    || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed);

        if (sourceDocumentLine)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateLineAccountingDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the purchase order line accounting distributions have changed.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to check.
    /// </param>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record if only a single line should be checked.
    /// </param>
    /// <returns>
    /// true if the accounting distributions have changed; otherwise, false.
    /// </returns>
    private boolean evaluateLineAccountingDistributions(PurchTable _purchTable, PurchLine _purchLine = null)
    {
        PurchLine               purchLine;
        SourceDocumentLine      sourceDocumentLine;

        if (_purchLine == null)
        {
            // Check if Purchase order lines has none completed distributions
            select firstOnly RecId from purchLine
                exists join sourceDocumentLine
                    where purchLine.PurchId == _purchTable.PurchId
                        && sourceDocumentLine.RecId == purchLine.SourceDocumentLine
                        && (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft
                            || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed
                            || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed);
        }
        else
        {
            // Check if a single Purchase order lines has none completed distributions
            select firstOnly RecId from purchLine
                exists join sourceDocumentLine
                    where purchLine.RecId == _purchLine.RecId
                        && sourceDocumentLine.RecId == purchLine.SourceDocumentLine
                        && (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Draft
                            || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed
                            || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed);
        }

        if (purchLine)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePolicyCustom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates a purchase order re-approval policy against a purchase order.
    /// </summary>
    /// <param name="_purchReApprovalPolicyRuleTable">
    /// The <c>PurchReApprovalPolicyRuleTable</c> record to evaluate.
    /// </param>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to evaluate.
    /// </param>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record if only a single line should be checked.
    /// </param>
    /// <returns>
    /// true if the evaluation of the policy passes; otherwise, false.
    /// </returns>
    protected boolean evaluatePolicyCustom(PurchReApprovalPolicyRuleTable _purchReApprovalPolicyRuleTable, PurchTable _purchTable, PurchLine _purchLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates a purchase order re-approval policy against a purchase order.
    /// </summary>
    /// <param name="_purchReApprovalPolicyRuleTable">
    /// The <c>PurchReApprovalPolicyRuleTable</c> record to evaluate.
    /// </param>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to evaluate.
    /// </param>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record if only a single line should be checked.
    /// </param>
    /// <returns>
    /// true if the evaluation of the policy passes; otherwise, false.
    /// </returns>
    protected final boolean evaluatePolicy(PurchReApprovalPolicyRuleTable _purchReApprovalPolicyRuleTable, PurchTable _purchTable, PurchLine _purchLine = null)
    {
        return this.evaluatePolicyInternal(_purchReApprovalPolicyRuleTable, _purchTable, _purchLine) &&
            this.evaluatePolicyCustom(_purchReApprovalPolicyRuleTable, _purchTable, _purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePolicyInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates a purchase order re-approval policy against a purchase order.
    /// </summary>
    /// <param name="_purchReApprovalPolicyRuleTable">
    /// The <c>PurchReApprovalPolicyRuleTable</c> record to evaluate.
    /// </param>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to evaluate.
    /// </param>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record if only a single line should be checked.
    /// </param>
    /// <returns>
    /// true if the evaluation of the policy passes; otherwise, false.
    /// </returns>
    private boolean evaluatePolicyInternal(PurchReApprovalPolicyRuleTable _purchReApprovalPolicyRuleTable, PurchTable _purchTable, PurchLine _purchLine)
    {
        VersioningTmpTrans      versioningTmpTrans;
        VersioningTmpTrans      versioningTmpTransLine;
        PurchTableAllVersions   purchTableAllVersions;

        if (_purchReApprovalPolicyRuleTable)
        {
            select firstonly purchTableAllVersions
                order by VersionDateTime desc
                where purchTableAllVersions.PurchId == _purchTable.PurchId;

            if (purchTableAllVersions)
            {
                Set inSet = Set::create(purchReApprovalPolicyRuleFields::getRuleFields(_purchReApprovalPolicyRuleTable));
                Set inSetTables = this.getInSetTables(inSet);

                // Check accounting distributions
                if (inSetTables.in(tableNum(AccountingDistribution)))
                {
                    if (_purchLine)
                    {
                        // When evaluating a single line we do not check purchase order distribution changes
                        if (this.evaluateLineAccountingDistributions(_purchTable, _purchLine))
                        {
                            return true;
                        }
                    }
                    else if (this.evaluateAccountingDistributions(_purchTable, null))
                    {
                        return true;
                    }
                }

                // Check changes recorded in versioning tables.
                VersioningCompare comparePurchOrder = PurchReApprovalVersioningCompare::newVersion(inSet, purchTableAllVersions);
                comparePurchOrder.loadVersioningTmpTrans();

                versioningTmpTrans.setTmpData(VersioningCompare::unpackVersioningTmpTrans(comparePurchOrder.packVersioningTmpTrans()));

                if (_purchLine)
                {
                    versioningTmpTransLine.setTmpData(versioningTmpTrans);

                    select firstOnly RecId from versioningTmpTransLine
                        where versioningTmpTransLine.CurrentTableId == _purchLine.TableId
                            && versioningTmpTransLine.CurrentRecId == _purchLine.RecId;

                    if (versioningTmpTransLine)
                    {
                        // Has purchase order line changed
                        if (versioningTmpTransLine.Action != VersioningChangeType::None)
                        {
                            if (this.hasChanged(_purchLine, versioningTmpTransLine, 0, inSet, inSetTables))
                            {
                                return true;
                            }
                        }

                        // Find change for purchase order line children only
                        if (this.hasLineChanged(_purchLine, versioningTmpTrans, versioningTmpTransLine.RecId, inSet, inSetTables))
                        {
                            return true;
                        }
                    }
                }
                else
                {
                    // Find first change
                    // ChangeList is used in the versioningTmpField method
                    while select Action, ChangeList, CurrentTableId, CurrentRecId, ParentVersioningTmpTrans from versioningTmpTrans
                        where versioningTmpTrans.Action != VersioningChangeType::None
                    {
                        if (this.hasChanged(null, versioningTmpTrans, 0, inSet, inSetTables))
                        {
                            return true;
                        }
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInSetTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds rules for the insert and delete events.
    /// </summary>
    /// <param name="_inSet">
    /// A set of fields that require re-approval if changed.
    /// </param>
    /// <returns>
    /// A set of tables where insert and delete will require re-approval.
    /// </returns>
    private Set getInSetTables(Set _inSet)
    {
        Set             inSetTables = new Set(Types::Integer);
        SetEnumerator   inSetEnumerator;
        RefTableId      tableId;
        RefFieldId      fieldId;

        inSetEnumerator = _inSet.getEnumerator();
        while (inSetEnumerator.moveNext())
        {
            [tableId, fieldId] = PurchReApprovalPolicyRuleFields::valueSplit(inSetEnumerator.current());

            if (!inSetTables.in(tableId))
            {
                inSetTables.add(tableId);
            }
        }

        return inSetTables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether changes have occurred.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record if only a single line should be checked.
    /// </param>
    /// <param name="_versioningTmpTrans">
    /// A <c>_versioningTmpTrans</c> record that contains changes.
    /// </param>
    /// <param name="_parentVersioningTmpTrans">
    /// The record ID of a parent <c>_versioningTmpTrans</c> record.
    /// </param>
    /// <param name="_inSet">
    /// A set of fields that require re-approval if changed.
    /// </param>
    /// <param name="_inSetTables">
    /// A set of tables where insert and delete will require re-approval.
    /// </param>
    /// <returns>
    /// true if the changes have occurred; otherwise, false.
    /// </returns>
    private boolean hasChanged( PurchLine           _purchLine,
                                VersioningTmpTrans  _versioningTmpTrans,
                                RefRecId            _parentVersioningTmpTrans,
                                Set                 _inSet,
                                Set                 _inSetTables)
    {
        VersioningTmpField      versioningTmpField;
        TableId                 tableId;
        FieldId                 fieldId;
        int                     fieldIdx;

        // If _purchLine we will only include current line and any child records having the purch line as parent
        if (_purchLine == null
            || (_versioningTmpTrans.CurrentTableId == tableNum(PurchLine)
                && _versioningTmpTrans.CurrentRecId == _purchLine.RecId)
            || (_parentversioningTmpTrans != 0
                && _versioningTmpTrans.ParentVersioningTmpTrans == _parentversioningTmpTrans))
        {
            switch (_versioningTmpTrans.Action)
            {
                case VersioningChangeType::Updated:
                    versioningTmpField = _versioningTmpTrans.versioningTmpField();

                    while select RelatedTableId, RelatedFieldId from versioningTmpField
                    {
                        // Get field id from main table, could be different id that history field
                        tableId = VersioningPurchaseOrder::archiveTable2Table(versioningTmpField.RelatedTableId);
                        fieldIdx = fieldExt2Idx(versioningTmpField.RelatedFieldId);
                        fieldId = fieldId2Ext(fieldName2id(tableId, fieldId2name(versioningTmpField.RelatedTableId, versioningTmpField.RelatedFieldId)), max(1, fieldIdx));
                        if (_inSet.in(PurchReApprovalPolicyRuleFields::valueStr(tableId, fieldId))
                            || _inSet.in(PurchReApprovalPolicyRuleFields::valueStr(versioningTmpField.RelatedTableId, versioningTmpField.RelatedFieldId)))
                        {
                            return true;
                        }
                    }
                    break;
                case VersioningChangeType::Deleted,
                        VersioningChangeType::Inserted:
                    if (_inSetTables.in(_versioningTmpTrans.CurrentTableId))
                    {
                        return true;
                    }
                    break;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the purchase order line changes have occurred.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record if only a single line should be checked.
    /// </param>
    /// <param name="_versioningTmpTrans">
    /// A <c>_versioningTmpTrans</c> record that contains changes.
    /// </param>
    /// <param name="_parentVersioningTmpTrans">
    /// The record ID of a parent <c>_versioningTmpTrans</c> record.
    /// </param>
    /// <param name="_inSet">
    /// A set of fields that require re-approval if changed.
    /// </param>
    /// <param name="_inSetTables">
    /// A set of tables where insert and delete will require re-approval.
    /// </param>
    /// <returns>
    /// true if the changes have occurred; otherwise, false.
    /// </returns>
    private boolean hasLineChanged( PurchLine           _purchLine,
                                    VersioningTmpTrans  _versioningTmpTrans,
                                    RefRecId            _parentVersioningTmpTrans,
                                    Set                 _inSet,
                                    Set                 _inSetTables)
    {
        VersioningTmpTrans  versioningTmpTrans;

        // Get a new indexer for the versioning data and use it for finding changes.
        versioningTmpTrans.setTmpData(_versioningTmpTrans);

        // ChangeList is used in the versioningTmpField method
        while select Action, ChangeList, CurrentTableId, CurrentRecId, ParentVersioningTmpTrans, RecId from versioningTmpTrans
            where versioningTmpTrans.ParentVersioningTmpTrans == _parentVersioningTmpTrans
                && (versioningTmpTrans.CurrentTableId != tableNum(PurchTable)
                    || versioningTmpTrans.CurrentTableId != tableNum(PurchTableHistory))
        {
            if (versioningTmpTrans.Action != VersioningChangeType::None)
            {
                if (this.hasChanged(_purchLine, versioningTmpTrans, _parentVersioningTmpTrans, _inSet, _inSetTables))
                {
                    return true;
                }
            }

            // Find changes for children
            // _versioningTmpTrans is the set of records
            if (this.hasLineChanged(_purchLine, _versioningTmpTrans, versioningTmpTrans.RecId, _inSet, _inSetTables))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a purchase order is new.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to check.
    /// </param>
    /// <returns>
    /// true if the purchase order is new and no versions have been created; otherwise, false.
    /// </returns>
    private boolean isNewPurchaseOrder(PurchTable _purchTable)
    {
        return !VersioningPurchaseOrder::checkHistoryExist(_purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReApprovalPolicyRule construct()
    {
        return new PurchReApprovalPolicyRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a purchase order requires re-approval.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true if re-approval is required; otherwise, false.
    /// </returns>
    public static boolean evaluate(PurchTable _purchTable)
    {
        PurchReApprovalPolicyRule       purchReApprovalPolicyRule = PurchReApprovalPolicyRule::construct();
        PurchReApprovalPolicyRuleTable  purchReApprovalPolicyRuleTable;

        if (purchReApprovalPolicyRule.isNewPurchaseOrder(_purchTable))
        {
            // New purchase order always requires approval
            return true;
        }

        purchReApprovalPolicyRuleTable = PurchReApprovalPolicyRuleTable::findRuleForPurchTable(_purchTable);
        if (purchReApprovalPolicyRuleTable)
        {
            return purchReApprovalPolicyRule.evaluatePolicy(purchReApprovalPolicyRuleTable, _purchTable);
        }

        // Changes to the purchase order exists, but we did not find any policy therefore approval is required as in AX2012.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a purchase order line requires re-approval.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true if re-approval is required; otherwise, false.
    /// </returns>
    public static boolean evaluateLine(PurchLine _purchLine)
    {
        PurchReApprovalPolicyRule       purchReApprovalPolicyRule = PurchReApprovalPolicyRule::construct();
        PurchReApprovalPolicyRuleTable  purchReApprovalPolicyRuleTable;
        PurchTable                      purchTable;

        purchTable = _purchLine.purchTable();

        if (purchReApprovalPolicyRule.isNewPurchaseOrder(purchTable))
        {
            // New purchase order always requires approval
            return true;
        }

        purchReApprovalPolicyRuleTable = PurchReApprovalPolicyRuleTable::findRuleForPurchTable(purchTable);
        if (purchReApprovalPolicyRuleTable)
        {
            return purchReApprovalPolicyRule.evaluatePolicy(purchReApprovalPolicyRuleTable, purchTable, _purchLine);
        }

        // Changes to the purchase order exists, but we did not find any policy therefore approval is required as in AX2012.
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>