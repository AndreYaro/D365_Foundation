<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjInvoiceProposalTaskActionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PSAProjInvoiceProposalTaskActionManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WorkflowWorkItemTable           workItem;
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
        WorkflowWorkItemActionType      workItemActionType;

        workItem = _args.caller().getActiveWorkflowWorkItem();

        if (workItem.RecId > 0)
        {
            workItemActionType = WorkflowWorkItemActionManager::findActionTypeForMenuItem(workItem, _args.menuItemName());

            if (workItemActionType == WorkflowWorkItemActionType::None)
            {
                throw error("@SYS109040");
            }

            if (workItemActionType == WorkflowWorkItemActionType::Complete)
            {
                workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct( workItem,
                                                                                        workItemActionType,
                                                                                        new MenuFunction(_args.menuItemName(),
                                                                                        _args.menuItemType()));
                workflowWorkItemActionDialog.run();

                if (workflowWorkItemActionDialog.parmIsClosedOK())
                {
                    // prompt for posting info
                    if (PSAProjInvoiceProposalTaskActionManager::postInvoiceProposal(_args.record().RecId))
                    {
                        WorkflowWorkItemActionManager::dispatchWorkItemAction(  workItem,
                                                                                workflowWorkItemActionDialog.parmWorkflowComment(),
                                                                                workflowWorkItemActionDialog.parmTargetUser(),
                                                                                workItemActionType,
                                                                                _args.menuItemName());
                    }
                }
            }
            else
            {
                workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct( workItem,
                                                                                        workItemActionType,
                                                                                        new MenuFunction(_args.menuItemName(),
                                                                                        _args.menuItemType()));
                workflowWorkItemActionDialog.run();

                if (workflowWorkItemActionDialog.parmIsClosedOK())
                {
                    WorkflowWorkItemActionManager::dispatchWorkItemAction(  workItem,
                                                                            workflowWorkItemActionDialog.parmWorkflowComment(),
                                                                            workflowWorkItemActionDialog.parmTargetUser(),
                                                                            workItemActionType,
                                                                            _args.menuItemName());
                }
            }
        }

        _args.caller().updateWorkflowControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInvoiceProposal</Name>
				<Source><![CDATA[
    public static boolean postInvoiceProposal(RecId _recId)
    {
        ProjProposalJour              projProposalJour;
        Args                          args;
        MenuFunction                  menuFunction;
        //<GBR>
        TmpInvoiceCancel_BR           tmpInvoiceCancel,tmpInvoiceCancellocal;
        projProposalJour              projProposalJourlocal1;
        //</GBR>

        select firstonly * from projProposalJour
            where projProposalJour.RecId == _recId;

        args = new Args();
        args.record(projProposalJour);
        args.parm(classStr(PSAProjInvoiceProposalTaskActionManager));
        menuFunction  = new MenuFunction(MenuItemActionStr(ProjFormLetter_Invoice),MenuItemType::Action);
        menuFunction.run(args);

        // posting the invoice automatically sets the status to Invoiced
        select firstonly * from projProposalJour
            where projProposalJour.RecId == _recId;
        // <GBR>
        // The code is used for Debit note feature and Invoice cancellation in brazil localization.
        if (BrazilParameters::isEnabled())
        {
            select ProposalId, LineProperty from projProposalJourlocal1
                    where projProposalJourlocal1.ProposalId == projProposalJour.ProposalId;

            if ((projProposalJourlocal1.LineProperty == ProjLinePropertyCode::Invoiced) ||
               (projProposalJourlocal1.LineProperty == ProjLinePropertyCode::DebitNote_BR))
            {
                select ProposalId, RefProposalId
                    from tmpInvoiceCancel
                        where  tmpInvoiceCancel.ProposalId == projProposalJour.ProposalId ;

                if (tmpInvoiceCancel.RecId)
                {
                    if (tmpInvoiceCancel)
                    {
                        ttsBegin;

                        select forupdate ProposalId,Lineproperty
                            from projProposalJour
                                join RefProposalId from tmpInvoiceCancelLocal
                                    where  tmpInvoiceCancellocal.RefProposalId  == tmpInvoiceCancel.RefProposalId
                                        &&    projProposalJour.ProposalId          == tmpInvoiceCancellocal.RefProposalId;

                        if (projProposalJour.LineProperty == ProjLinePropertyCode::DebitNote_BR)
                        {
                            projProposalJour.LineProperty = ProjLinePropertyCode::DebitNoteCanceled_BR;
                        }
                        else
                        {
                            projProposalJour.LineProperty = ProjLinePropertyCode::InvoiceCanceled_BR;
                        }
                        projProposalJour.update();

                        ttsCommit;

                        delete_from tmpInvoiceCancelLocal
                            where projProposalJour.ProposalId == tmpInvoiceCancelLocal.RefProposalId;

                        if (projProposalJour.LineProperty == ProjLinePropertyCode::DebitNoteCanceled_BR)
                        {
                            info(strFmt("@GLS510033", projProposalJourlocal1.ProjInvoiceId));
                        }
                        else
                        {
                            info(strFmt("@GLS510003", projProposalJourlocal1.ProjInvoiceId));
                        }
                    }
                }
            }
            if ((projProposalJour.LineProperty == ProjLinePropertyCode::DebitNoteCanceled_BR) ||
                (projProposalJour.InvoiceType  == ProjInvoiceType::DebitNote_BR))
            {
                return projProposalJour.LineProperty == ProjLinePropertyCode::DebitNote_BR ? true : false;
            }
            else
            {
                return ((projProposalJour.LineProperty == ProjLinePropertyCode::Invoiced) ||
                        (projProposalJour.LineProperty == ProjLinePropertyCode::InvoiceCanceled_BR)) ? true : false;
            }
        }
        else
        {
            // </GBR>
            return projProposalJour.LineProperty == ProjLinePropertyCode::Invoiced ? true : false;
            // <GBR>
        }
        // </GBR>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>