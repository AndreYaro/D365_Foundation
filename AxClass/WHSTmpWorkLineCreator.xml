<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTmpWorkLineCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTmpWorkLineCreator</c> class provides a method to create <c>WHSTmpWorkLine</c> records.
/// </summary>
public final class WHSTmpWorkLineCreator
{
    protected WhsWorkCreate        workCreate;
    protected WHSLocationDirective locationDirective;
    protected UnitOfMeasureSymbol  unitId;
    protected WMSLocationId        warehouseLocationId;
    protected WHSInventQty         inventoryQuantity;
    protected Qty                  quantityOnCurrentLocation;
    protected Qty                  runningWorkQuantity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a temporary work line using an instance of <c>WHSTmpWorkLineCreator</c>.
    /// </summary>
    /// <param name="_workCreate">An instance of <c>WhsWorkCreate</c>.</param>
    /// <param name="_tmpWorkLine">The work line for which to create the work inventory transaction.</param>
    /// <param name="_inventoryWorkQuantity">Quantity of the work.</param>
    /// <remarks>
    /// This function encapsulates creation of a temporary work line for <c>WhsWorkCreate</c>.
    /// It modifies both <paramref name = "_workCreate"/> and <paramref name = "_tmpWorkLine"/>.
    /// </remarks>
    [Hookable(false)]
    internal static void createTmpWorkLine(
        WhsWorkCreate  _workCreate,
        WHSTmpWorkLine _tmpWorkLine,
        WHSInventQty   _inventoryWorkQuantity)
    {
        WHSTmpWorkLineCreator tmpWorkLineCreator = new WHSTmpWorkLineCreator();
        tmpWorkLineCreator.workCreate = _workCreate;

        tmpWorkLineCreator.createWorkAndTransactions(_tmpWorkLine, _inventoryWorkQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAdjustPickPutQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the pick and put quantities must be adjusted.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension.</param>
    /// <returns>true if they must be adjusted; otherwise, false.</returns>
    protected boolean mustAdjustPickPutQuantities(InventDim _inventDim)
    {
        return !_inventDim.wMSLocationId && !workCreate.parmUsedLocateByLP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLocationAndQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the location and quantities for the work line.
    /// </summary>    
    /// <param name = "_locTmpWorkLine">The work line being created.</param>
    /// <param name = "_inventDim">The inventory dimension.</param>    
    /// <param name = "_tmpWorkLine">The work line for which to create the work inventory transaction.</param>    
    protected void determineLocationAndQuantities(WHSTmpWorkLine _locTmpWorkLine, InventDim _inventDim, WHSTmpWorkLine _tmpWorkLine)
    {
        if (_tmpWorkLine.orderCommittedInventDimId)
        {
            warehouseLocationId  = InventDim::find(_tmpWorkLine.orderCommittedInventDimId).wMSLocationId;

            inventoryQuantity    = runningWorkQuantity;
            unitId               = WHSCatchWeightHelper::inventHandlingUnitId(_locTmpWorkLine.ItemId);
            quantityOnCurrentLocation = runningWorkQuantity;
        }
        else if (this.mustAdjustPickPutQuantities(_inventDim))
        {
            [warehouseLocationId, quantityOnCurrentLocation, unitId, inventoryQuantity] = locationDirective.findPickPutLocation(
                        _inventDim.InventDimId,
                        _locTmpWorkLine.InventTransId,
                        _locTmpWorkLine.ItemId,
                        runningWorkQuantity,
                        _locTmpWorkLine.WorkTransType,
                        _locTmpWorkLine.WorkType,
                        workCreate.parmLocDirHintCode(),
                        _locTmpWorkLine.PackingQty,
                        this.excludedLocationsFromLocationDirectiveFindPickPut(_locTmpWorkLine),
                        _locTmpWorkLine.CustVendAC,
                        _locTmpWorkLine.InventBatchId,
                        workCreate.parmDispositionCode(),
                        _locTmpWorkLine.getGuideLicensePlatesfromLoad(),
                        workCreate.parmTargetLicensePlateId());
                    
            WHSWorkCreateAdjustQuantitiesForLocationParameters adjustPickPutQuantitiesParameters =
                        WHSWorkCreateAdjustQuantitiesForLocationParameters::construct();

            adjustPickPutQuantitiesParameters.parmLocationDirective(locationDirective);
            adjustPickPutQuantitiesParameters.parmTmpWorkLine(_locTmpWorkLine);
            adjustPickPutQuantitiesParameters.parmInventDim(_inventDim);
            adjustPickPutQuantitiesParameters.parmRunningQty(runningWorkQuantity);
            adjustPickPutQuantitiesParameters.parmWmsLocationId(warehouseLocationId);
            adjustPickPutQuantitiesParameters.parmQty(quantityOnCurrentLocation);
            adjustPickPutQuantitiesParameters.parmUnitId(unitId);
            adjustPickPutQuantitiesParameters.parmInventQty(inventoryQuantity);

            this.adjustPickPutQuantitiesForLocation(adjustPickPutQuantitiesParameters);

            if (locationDirective.parmUsedLocateByLP())
            {
                workCreate.parmUsedLocateByLP(true);
                workCreate.parmSaveLocationId(warehouseLocationId);
            }
        }
        else
        {
            if (workCreate.parmSaveLocationId())
            {
                warehouseLocationId = workCreate.parmSaveLocationId();
            }
            else if (workCreate.parmTmpWorkLine().WorkTransType == WHSWorkTransType::Invent
                     && workCreate.parmFinalPutLocation())
            {
                // finalPutLocation is used to store the put location for movement work when doing "Reverse work"
                // with moving to specific location
                warehouseLocationId = workCreate.parmFinalPutLocation();
            }
            else
            {
                warehouseLocationId  = _inventDim.wmsLocationId;
            }

            inventoryQuantity    = runningWorkQuantity;
            unitId               = WHSCatchWeightHelper::inventHandlingUnitId(_locTmpWorkLine.ItemId);
            quantityOnCurrentLocation = runningWorkQuantity;
        }

        if (warehouseLocationId)
        {
            workCreate.parmLastImmediateReplenLocationId(warehouseLocationId);

            if (!workCreate.parmAllowMixedBatches())
            {
                workCreate.parmReplenishmentBatchId(locationDirective.parmInventBatchId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludedLocationsFromLocationDirectiveFindPickPut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Excluded locations during the location directives find of pick and put locations.
    /// </summary>
    /// <param name = "_tmpWorkLine">The work line for which to create the work inventory transaction.</param>
    /// <returns>A set of locations to exclude.</returns>
    protected Set excludedLocationsFromLocationDirectiveFindPickPut(WHSTmpWorkLine _tmpWorkLine)
    {
        return new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFailedShipmentForZeroQtyWorkLine</Name>
				<Source><![CDATA[
    private void createFailedShipmentForZeroQtyWorkLine(WHSShipmentId _shipmentId)
    {
        if (WHSFillEntireShipmentOnShipmentProcessingPolicyFlight::instance().isEnabled())
        {
            if (_shipmentId)
            {
                WHSShipmentTable shipment = WHSShipmentTable::find(_shipmentId);
                if (shipment.shouldFillEntireShipment())
                {
                    WHSWaveFailedShipment::findOrCreate(workCreate.parmParmWaveId(), _shipmentId);
                }
            }
        }
        else
        {
            if (_shipmentId
                && WHSCustTable::find(WHSShipmentTable::find(_shipmentId).AccountNum).FillEntireOrder)
            {
                WHSWaveFailedShipment::findOrCreate(workCreate.parmParmWaveId(), _shipmentId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopInventQty</Name>
				<Source><![CDATA[
    private InventQty stopInventQty()
    {
        Microsoft.Dynamics.AX.Metadata.MetaModel.AxEdtReal edtInventQty = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetEdt(extendedTypeStr(InventQty));
        if (edtInventQty)
        {
            return power(10, -edtInventQty.Scale);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkAndTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a temporary work line.
    /// </summary>
    /// <param name="_tmpWorkLine">The work line for which to create the work inventory transaction.</param>
    /// <param name="_inventoryWorkQuantity">Quantity of the work.</param>
    [Wrappable(true)]
    internal void createWorkAndTransactions(WHSTmpWorkLine _tmpWorkLine, WHSInventQty _inventoryWorkQuantity)
    {
        UserConnection conn = new UserConnection();
        try
        {
            ttsbegin;

            WHSTmpWorkLine locTmpWorkLine;
            buf2Buf(workCreate.parmTmpWorkLine(), locTmpWorkLine);

            locationDirective = workCreate.callCreateLocationDirective(_tmpWorkLine);

            this.resetWorkCreatedQuantity(_tmpWorkLine);
            
            // Quality Item Sampling work needs the association table RecId to be filtered on.
            if (_tmpWorkLine.WorkTransType == WHSWorkTransType::QualityItemSampling)
            {
                locationDirective.assignInventTestAssociationTableReferenceId(workCreate.parmTmpWorkLine().InventTestAssociationTable);
            }
            else if (_tmpWorkLine.WorkTransType == WHSWorkTransType::QualityInQualityCheck)
            {
                locationDirective.setOriginWorkId(workCreate.parmTmpWorkLine().OriginRefId);
            }

            if (_inventoryWorkQuantity == 0)
            {
                this.createFailedShipmentForZeroQtyWorkLine(_tmpWorkLine.ShipmentId);
            }

            runningWorkQuantity = _inventoryWorkQuantity;
            InventQty stopInventQty = this.stopInventQty();

            while (runningWorkQuantity > stopInventQty)
            {
                this.allocateAndCreateWork(_tmpWorkLine, locTmpWorkLine, conn);

                // The ReplenAvailQty is only used for demand based replenishment.
                runningWorkQuantity = warehouseLocationId ? runningWorkQuantity - inventoryQuantity - locationDirective.parmReplenAvailQty() : 0;
            }

            Debug::assert(runningWorkQuantity <= 0); // Assert no rounding error has occured. The loop above will stop at 10^-6, to allow the code to proceed despite an eventual rounding error.

            if (!warehouseLocationId)
            {
                locTmpWorkLine.InventQty = 0;
            }

            buf2Buf(locTmpWorkLine, _tmpWorkLine);

            ttscommit;
            workCreate.parmFullyAllocatedLocationsMap(locationDirective.parmFullyAllocatedLocationsMap());
        }
        finally
        {
            conn.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateAndCreateWork</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void allocateAndCreateWork(WHSTmpWorkLine _tmpWorkLine, WHSTmpWorkLine _locTmpWorkLine, UserConnection _conn)
    {
        InventDim inventDim = this.getInventDim(_tmpWorkLine.OriginType, _tmpWorkLine.InventTransId, _tmpWorkLine.WorkTransType);

        if (!inventDim)
        {
            inventDim = InventDim::find(_tmpWorkLine.InventDimId);
        }

        if (workCreate.parmInventLocationId())
        {
            inventDim.InventLocationId = workCreate.parmInventLocationId();
        }
                
        if (workCreate.parmDispositionCode() && workCreate.parmInventStatusId())
        {
            inventDim.InventStatusId = workCreate.parmInventStatusId();
        }

        if (workCreate.parmReplenishmentBatchId())
        {
            inventDim.InventBatchId = workCreate.parmReplenishmentBatchId();
        }

        inventDim = InventDim::findOrCreate(inventDim);

        this.determineLocationAndQuantities(_locTmpWorkLine, inventDim, _tmpWorkLine);
        this.initializeTmpWorkLine(_locTmpWorkLine, inventDim);
          
        if (warehouseLocationId
            || this.canCreateWork(_locTmpWorkLine))
        {
            if (locationDirective.parmUsedImmedReplen())
            {
                _locTmpWorkLine.ReplenDemand = true;
                inventoryQuantity += this.processTmpWorkLineForImmediateReplenishment(
                            _locTmpWorkLine,
                            locationDirective.parmImmedReplenUsedExistingReplen(),
                            locationDirective.parmOnlyExistingImmedReplenUsed());

                // Reset location directive used immediate replenishment.
                locationDirective.resetImmediateReplenishment();
                _locTmpWorkLine.ReplenDemand = false;
            }
            else
            {
                workCreate.callInsertTmpWorkLine(_locTmpWorkLine, _conn);
                        
                // AvailPhysical bucket should only be filled in for demand based replenishment work.
                workCreate.parmWorkCreatedQty(workCreate.parmWorkCreatedQty() + _locTmpWorkLine.InventQty + _locTmpWorkLine.AvailPhysical);
            }

            // For demand based replenishment we need to go update the demand lines,
            // can't assign demand lines for immediate replenishment as they don't exist yet.
            this.assignDemandLinesForReplenishmentOnDemand(_locTmpWorkLine, _conn);

            if (!warehouseLocationId)
            {
                this.logWorkCreationIfBlankLocationId(_locTmpWorkLine);
            }
        }
        else
        {
            // If existing replenishment was used need to update load line.
            if (locationDirective.parmImmedReplenUsedExistingReplen() != 0)
            {
                workCreate.parmWorkCreatedQty(workCreate.parmWorkCreatedQty() + locationDirective.parmImmedReplenUsedExistingReplen());
            }
            else if(locationDirective.parmUsedImmedReplen())
            {
                this.processTmpWorkLineForImmediateReplenishment(
                            _locTmpWorkLine,
                            locationDirective.parmImmedReplenUsedExistingReplen(),
                            locationDirective.parmOnlyExistingImmedReplenUsed());
            }

            workCreate.parmUnallocatedLine(true);

            if (this.shouldFailOnUnallocatedLine(_tmpWorkLine))
            {
                throw error(strFmt("@WAX2620", _tmpWorkLine.ItemId));
            }

            if (_tmpWorkLine.ShipmentId)
            {
                WHSWaveFailedShipment::findOrCreate(workCreate.parmParmWaveId(), _tmpWorkLine.ShipmentId);
            }

            this.logWorkCreationFailureWhenHavingBlankLocationId(_locTmpWorkLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateWork</Name>
				<Source><![CDATA[
    protected boolean canCreateWork(WHSTmpWorkLine _locTmpWorkLine)
    {
        boolean canCreateWork = 
            workCreate.locationDirectiveFailuresAllowCreatingTmpWorkLine(_locTmpWorkLine).parmCanCreateWork()
            || workCreate.callIgnoreLocationDirectiveFailureForWork()                    
            || workCreate.parmHasReplen()
            || (_locTmpWorkLine.WorkType != WHSWorkType::Pick && _locTmpWorkLine.WorkType != WHSWorkType::Put)
            || (_locTmpWorkLine.WorkType == WHSWorkType::Put  && workCreate.callAllowCreateWorkLineOnPut(_locTmpWorkLine.WorkTransType));            

        return canCreateWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignDemandLinesForReplenishmentOnDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign demand lines for replenishment on demand.
    /// </summary>
    /// <param name = "_tmpWorkLine">Temporary work line buffer.</param>
    /// <param name = "_userConnection">The user connection to independently commit changes to temporary work line.</param>
    protected void assignDemandLinesForReplenishmentOnDemand(WHSTmpWorkLine _tmpWorkLine, UserConnection _userConnection)
    {
        if (_tmpWorkLine.WorkTransType == WHSWorkTransType::Replenishment
                        && !workCreate.parmIsImmedReplen()
                        && _tmpWorkLine.WorkType == WHSWorkType::Put
                        && _tmpWorkLine.OriginType == WHSOriginType::Wave)
        {
            WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLine(
                            _tmpWorkLine.WorkCreateId,
                            strFmt("@WAX4065", _tmpWorkLine.wmsLocationId, _tmpWorkLine.ItemId),
                            false,
                            _tmpWorkLine);

            workCreate.assignLocToDemandLines(
                            _tmpWorkLine.wmsLocationId,
                            _tmpWorkLine.InventQty,
                            _tmpWorkLine.AvailPhysical,
                            _tmpWorkLine.ItemId,
                            _tmpWorkLine.InventDimId,
                            _tmpWorkLine.WorkCreateId);

            // If we found a location to replenish to that satisfies the full demand qty then we need to delete the tmpWorkLine for zero.
            if (!_tmpWorkLine.InventQty)
            {
                _tmpWorkLine.setConnection(_userConnection);
                _userConnection.ttsbegin();
                _tmpWorkLine.delete();
                _userConnection.ttscommit();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWorkCreatedQuantity</Name>
				<Source><![CDATA[
    private void resetWorkCreatedQuantity(WHSTmpWorkLine _tmpWorkLine)
    {
        // The work created quantity should not be reset in case of immediate replenishment pick
        // as it can happen that the put work line needs to be split into different work headers, which would split the pick lines as well.
        // The location should still be taken from that last work line, but that doesn't seem to influence immediate replenishment scenario.
        // One example where this can be seen is in the WhsWorkCreateReplenishment.runImmediateDemandReplen method.
        // If the work created quantity is reset, then only the last work line quantity would be passed on the the rest of the code, which is not correct.
        if (!(_tmpWorkLine.ImmediateReplenishmentUnitId
            && _tmpWorkLine.WorkType == WHSWorkType::Pick))
        {
             workCreate.parmWorkCreatedQty(0);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustPickPutQuantitiesForLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Adjusts quantities returned by findPickPutLocation when creating temporary work lines.
    /// </summary>
    /// <param name = "_adjustPickPutQuantitiesParameters">
    /// An instance of <c>WHSWorkCreateAdjustQuantitiesForLocationParameters</c>.
    /// </param>
    protected void adjustPickPutQuantitiesForLocation(
        WHSWorkCreateAdjustQuantitiesForLocationParameters _adjustPickPutQuantitiesParameters)
    {
        WHSWorkCreateAdjustQuantitiesForLocationParameters adjustedValues =
            workCreate.adjustPickPutQuantitiesForLocation(_adjustPickPutQuantitiesParameters);

        quantityOnCurrentLocation = adjustedValues.parmQty();
        unitId               = adjustedValues.parmUnitId();
        inventoryQuantity     = adjustedValues.parmInventQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTmpWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes temporary work line.
    /// </summary>
    /// <param name = "_tmpWorkLine">The temporary work line that will be initialized.</param>
    /// <param name = "_inventDim">An <c>InventDim</c> record.</param>
    protected void initializeTmpWorkLine(WHSTmpWorkLine _tmpWorkLine, InventDim _inventDim)
    {
        _tmpWorkLine.ReleaseToWarehouseId = workCreate.parmReleaseToWarehouseId();
        if (locationDirective.parmReplenInventDim().RecId != 0)
        {
            _tmpWorkLine.initFromInventDim(locationDirective.parmReplenInventDim());
        }
        else
        {
            _tmpWorkLine.initFromInventDim(_inventDim);
        }

        _tmpWorkLine.setWMSLocation(warehouseLocationId, _inventDim.InventLocationId);
        _tmpWorkLine.initInventAndDirectiveQuantities(runningWorkQuantity, quantityOnCurrentLocation, unitId, inventoryQuantity);
        _tmpWorkLine.setPackQtyCompare();

        [_tmpWorkLine.HighestQty, _tmpWorkLine.HighestUnitId] = WHSInventTable::getHighestUnitQtyByUOMSeqGroup(
                _tmpWorkLine.ItemId,
                _tmpWorkLine.DirectiveQty,
                _tmpWorkLine.DirectiveUOM,
                _tmpWorkLine.InventDimId);

        _tmpWorkLine.AvailPhysical = locationDirective.parmReplenAvailQty();
        _tmpWorkLine.fefoBatchId = locationDirective.parmFEFOBatchId();
        _tmpWorkLine.LocatedLPId = locationDirective.parmLocatedLP();
        _tmpWorkLine.setLineNum();

        InventHandlingQty inventhandlingUnitQty = runningWorkQuantity - inventoryQuantity;

        // If more qty is being used for Raw Material Picking than what was requested, must be using handling units.
        if (warehouseLocationId && _tmpWorkLine.WorkTransType == WHSWorkTransType::ProdPick && inventhandlingUnitQty < 0)
        {
            // This field is used to show the extra qty needed from the handling unit.
            _tmpWorkLine.ExtraInventHandlingQty = -inventhandlingUnitQty;
        }
        else
        {
            _tmpWorkLine.ExtraInventHandlingQty = 0;
        }

        if (inventoryQuantity == runningWorkQuantity
            && WMSLocation::find(workCreate.parmTmpWorkLine().ReplenLocationId, _inventDim.InventLocationId).isReplenishmentOverflowEnabled())
        {
            _tmpWorkLine.WorkBreak = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWorkCreationIfBlankLocationId</Name>
				<Source><![CDATA[
    private void logWorkCreationIfBlankLocationId(WHSTmpWorkLine _tmpWorkLine)
    {
        if (workCreate.parmHasReplen())
        {
            WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLineWithQuantity(
                _tmpWorkLine,
                strFmt("@WAX:WHSItemAllocationFailedWaveTemplateContainsReplenishMethod", _tmpWorkLine.WorkTransType),
                false);
        }
        else
        {
            this.logLocationDirectiveFailureAllowWorkCreatingWithBlankLocation(_tmpWorkLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logLocationDirectiveFailureAllowWorkCreatingWithBlankLocation</Name>
				<Source><![CDATA[
    private void logLocationDirectiveFailureAllowWorkCreatingWithBlankLocation(WHSTmpWorkLine _tmpWorkLine)
    {
        WHSLocationDirectiveFailuresAllowCreatingWorkResult locationDirectiveFailuresAllowCreatingWork =
            workCreate.locationDirectiveFailuresAllowCreatingTmpWorkLine(_tmpWorkLine);

        if (locationDirectiveFailuresAllowCreatingWork.parmCanCreateWork())
        {
            WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLineWithQuantity(
                _tmpWorkLine,
                locationDirectiveFailuresAllowCreatingWork.parmMessage(),
                false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWorkCreationFailureWhenHavingBlankLocationId</Name>
				<Source><![CDATA[
    private void logWorkCreationFailureWhenHavingBlankLocationId(WHSTmpWorkLine _tmpWorkLine)
    {
        WHSLocationDirectiveFailuresAllowCreatingWorkResult locationDirectiveFailuresAllowCreatingWork =
                        workCreate.locationDirectiveFailuresAllowCreatingTmpWorkLine(_tmpWorkLine);

        if (!locationDirectiveFailuresAllowCreatingWork.parmCanCreateWork())
        {
            WHSWorkCreateHistory::createWorkHistoryLineFromTmpWorkLineWithQuantity(_tmpWorkLine,
                locationDirectiveFailuresAllowCreatingWork.parmMessage(),
                true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventory dimension.
    /// </summary>
    /// <param name = "_originType">Transaction type of the work line.</param>
    /// <param name = "_inventTransId">The inventory transaction ID.</param>
    /// <param name = "_workTransType">Work order type of the work line.</param>
    /// <returns>The inventory dimension.</returns>
    protected InventDim getInventDim(
        WHSOriginType    _originType,
        InventTransId    _inventTransId,
        WHSWorkTransType _workTransType)
    {
        InventDim           inventDim;
        ItemId              itemId;

        [itemId, inventDim] =  this.getItemAndInventDim(_originType, _inventTransId, _workTransType);

        if (itemId)
        {
            inventDim = WHSTmpWorkLineCreator::mergeWorkInventDim(inventDim, workCreate.parmWorkInventDim(), itemId);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemAndInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>ItemId</c> and <c>InventDim</c>.
    /// </summary>
    /// <param name = "_originType">Transaction type of the work.</param>
    /// <param name = "_inventTransId">The inventory transaction ID of the work.</param>
    /// <param name = "_workTransType">Work order type of the work.</param>
    /// <returns>A conatiner with <c>ItemId</c> and <c>InventDim</c>.</returns>
    protected container getItemAndInventDim(
        WHSOriginType    _originType,
        InventTransId    _inventTransId,
        WHSWorkTransType _workTransType)
    {
        InventDim           inventDim;
        ItemId              itemId;

        switch (_originType)
        {
            case WHSOriginType::Load:
                if (_workTransType == WHSWorkTransType::Purch)
                {
                    var purchLine   = PurchLine::findInventTransId(_inventTransId);
                    inventDim       = purchLine.inventDim();
                    itemId          = purchLine.ItemId;
                }
                else if (_workTransType == WHSWorkTransType::TransferReceipt)
                {
                    var transferLine = InventTransferLine::findTransIdShip(_inventTransId);
                    inventDim        = transferLine.inventDimReceive();
                    itemId           = transferLine.ItemId;
                }
                else if (_workTransType == WHSWorkTransType::CrossDocking)
                {
                    inventDim = WHSTmpWorkLineCreator::mergeWorkInventDim(workCreate.parmWorkInventDim(), workCreate.parmWorkInventDim(), InventTransOrigin::findByInventTransId(_inventTransId).ItemId);
                }
                break;

            case WHSOriginType::ReturnOrder:
                var salesLine   = SalesLine::findInventTransId(_inventTransId);
                inventDim       = salesLine.inventDim();
                itemId          = salesLine.itemId;
                break;

            case WHSOriginType::Purch:
                var purchLine   = PurchLine::findInventTransId(_inventTransId);
                inventDim       = purchLine.inventDim();
                itemId          = purchLine.itemId;
                break;

            case WHSOriginType::Production:
                var prodTable   = ProdTable::findTransId(_inventTransId);
                inventDim       = prodTable.inventDim();
                itemId          = prodTable.itemId;
                break;

            case WHSOriginType::ProcessProduction:
                var processProdTable = ProdTable::findTransId(_inventTransId);
                if (processProdTable)
                {
                    itemId          = processProdTable.ItemId;
                    inventDim       = processProdTable.inventDim();
                }
                else
                {
                    var pmfProdCoBy = PmfProdCoBy::findTransId(_inventTransId);
                    itemId          = pmfProdCoBy.ItemId;
                    inventDim       = pmfProdCoBy.inventDim();
                }
                break;

            case WHSOriginType::Kanban:
                InventTrans inventTrans;
                var kanbanJob = KanbanJob::findInventTransId(_inventTransId, inventTrans.DataAreaId);
                inventDim     = kanbanJob.inventDim();
                itemId        = kanbanJob.itemId();
                break;

            case WHSOriginType::Movement:
            case WHSOriginType::Replenishment:
            case WHSOriginType::SortedInventory:
            case WHSOriginType::Wave:
            case WHSOriginType::Work:
                inventDim = InventDim::find('');
                break;

            case WHSOriginType::CrossDock:
                inventDim = InventDim::find(workCreate.parmTmpWorkLine().InventDimId);
                inventDim.wMSLocationId = workCreate.parmStartLocationId();
                inventDim = InventDim::findOrCreate(inventDim);
                break;

            default:
                [itemId, inventDim] = this.getDefaultItemAndInventDim(_originType, _inventTransId, _workTransType);
                
                if (!inventDim)
                {
                    throw error(strFmt("@WAX1186", _originType));
                }
                break;
        }
        return [itemId, inventDim];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultItemAndInventDim</Name>
				<Source><![CDATA[
    protected container getDefaultItemAndInventDim(
        WHSOriginType    _originType,
        InventTransId    _inventTransId,
        WHSWorkTransType _workTransType)
    {
        InventDim           inventDim;
        ItemId              itemId;
  
        EventHandlerResult inventDimResult = EventHandlerResult::newSingleResponse();
        workCreate.callGetInventDimDelegate(_originType, _inventTransId, _workTransType, inventDimResult);

        if (inventDimResult.hasResult())
        {
            inventDim = inventDimResult.result();            
        }

        EventHandlerResult itemIdResult = EventHandlerResult::newSingleResponse();
        workCreate.callGetItemIdMergeDelegate(_originType, _inventTransId, _workTransType, itemIdResult);
                
        if (itemIdResult.hasResult())
        {
            itemId = itemIdResult.result();
        }

        return [itemId, inventDim];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTmpWorkLineForImmediateReplenishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increases work created quantity checking for demand work that used existing replenishment work.
    /// </summary>
    /// <param name="_tmpWorkLine">The current <c>WHSTmpWorkLine</c> record that needs to be inserted.</param>
    /// <param name="_existingReplenInventQuantityUsed">The amount of existing replenishment used for the demand line.</param>
    /// <param name="_onlyUsedExistingReplen">Boolean indicating whether only existing replenishment work was used.</param>
    /// <returns>Quantity used from existing replenishment work.</returns>
    /// <remarks>
    /// We do not need insert temporary demand work line here,
    /// because temporary demand work lines are already been inserted when replenishment work(s) created.
    /// </remarks>
    private Qty processTmpWorkLineForImmediateReplenishment(
        WHSTmpWorkLine _tmpWorkLine,
        Qty            _existingReplenInventQuantityUsed,
        boolean        _onlyUsedExistingReplen)
    {
        Qty ret;

        if (_existingReplenInventQuantityUsed != 0)
        {
            workCreate.parmWorkCreatedQty(workCreate.parmWorkCreatedQty() + _existingReplenInventQuantityUsed);

            // If only existing replenishment was used, we do not need to return a quantity as it was already counted in method createTempLine,
            // if existing replenishment was used for partial quantity and new replenishment was also created, the demand tmpWorkLine was split and
            // createTempLine has only counted the new replenishment amount.
            if (!_onlyUsedExistingReplen)
            {
                workCreate.parmWorkCreatedQty(workCreate.parmWorkCreatedQty() + _tmpWorkLine.InventQty);
            }

            ret = _existingReplenInventQuantityUsed;
        }
        else
        {
            workCreate.parmWorkCreatedQty(workCreate.parmWorkCreatedQty() + _tmpWorkLine.InventQty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldFailOnUnallocatedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if creation of unallocated work line should fail.
    /// </summary>
    /// <param name = "_tmpWorkLine">Temporary work line buffer that contains the record data.</param>
    /// <returns>true if creation of unallocated line should fail; otherwise, false.</returns>
    protected boolean shouldFailOnUnallocatedLine(WHSTmpWorkLine _tmpWorkLine)
    {
        switch (_tmpWorkLine.OriginType)
        {
            case WHSOriginType::Purch:
            case WHSOriginType::Production:
            case WHSOriginType::ProcessProduction:
            case WHSOriginType::Kanban:
            case WHSOriginType::Movement:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreateWorkLineOnPut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if creation of work line for put work is allowed depending on <paramref name="_workTransType"/>.
    /// </summary>
    /// <param name = "_workTransType">Work order type of the work.</param>
    /// <returns>true if creation of work line is allowed; otherwise, false.</returns>
    protected internal static boolean allowCreateWorkLineOnPut(WHSWorkTransType _workTransType)
    {
        switch (_workTransType)
        {
            case WHSWorkTransType::Purch:
            case WHSWorkTransType::ProdPut:
            case WHSWorkTransType::ProdProcessPut:
            case WHSWorkTransType::KanbanPut:
            case WHSWorkTransType::TransferReceipt:
            case WHSWorkTransType::Invent:
            case WHSWorkTransType::CycleCountAccepted:
            case WHSWorkTransType::Replenishment:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeWorkInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method merges values from two inventory dimension sets and removes below location dims.
    /// </summary>
    /// <param name="_inventDim">
    /// An inventory dimension set to be merged with the work inventory dimension set to create reservations.
    /// </param>
    /// <param name="_workInventDim">
    /// Work inventory dimension set to create reservations.
    /// </param>
    /// <param name="_itemId">
    /// The item we are trying to create work for. Used to find the appropriate reservation hierarchy.
    /// </param>
    /// <returns>
    /// Merged <c>InventDim</c> with dimensions below location removed. 
    /// </returns>
    /// <remarks>
    /// Used for work reservations when not all dimension values are able to be pulled off of the source document lines.
    /// </remarks>
    public static final InventDim mergeWorkInventDim(
        InventDim   _inventDim,
        InventDim   _workInventDim,
        ItemId      _itemId)
    {
        InventDim       inventDim = _inventDim;
        ListEnumerator  enumerator = InventDim::dimEnabledFieldList().getEnumerator();

        while (enumerator.moveNext())
        {
            WHSTmpWorkLineCreator::assignInventDimFieldValue(_workInventDim, inventDim, enumerator.current());
        }

        inventDim.clearLocationAndBelowDim(_itemId);

        inventDim = InventDim::findOrCreate(inventDim);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignInventDimFieldValue</Name>
				<Source><![CDATA[
    private static void assignInventDimFieldValue(
        InventDim   _fromDim,
        InventDim   _toDim,
        FieldId     _fieldId)
    {
        anytype fromValue = _fromDim.(_fieldId);
        if (fromValue)
        {
            _toDim.(_fieldId) = fromValue;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>