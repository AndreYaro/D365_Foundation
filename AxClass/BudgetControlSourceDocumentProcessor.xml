<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlSourceDocumentProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlSourceDocumentProcessor</c> class provides budget control processing for a
/// source document.
/// </summary>
public class BudgetControlSourceDocumentProcessor
{
    protected const int MaxSupportedSourceDocumentDepth = 3;

    BudgetControlSourceDocumentLineRule     budgetControlSourceDocumentLineRule;
    BudgetControlSourceDocumentLinePolicy   budgetControlSourceDocumentLinePolicy;

    BudgetControlCheckRequest               budgetControlCheckRequest;

    date                                    budgetDate;
    userId                                  user;
    SourceDocumentProcessorCaller           caller;
    boolean                                 isDraftReservation;
    boolean                                 isCarryforwardReservation;
    boolean                                 isOnDemandBudgetCheck;
    date                                    returnDate;
    boolean                                 doReturnAsClosing;

    SourceDocumentLineItem                  budgetSourceSourceDocumentLineItem;

    SourceDocumentLineItemList              sourceDocumentLineItems;

    AccountingDistributionList              distributionsToCheckBudget;
    AccountingDistributionList              distributionsToRelieveBudget;
    AccountingDistributionList              distributionsToReturnBudget;

    recId                                   budgetSourceId;

    SourceDocumentLineRecId                 sourceDocumentLineId;

    AmountCur                               totalTransactionCurrencyAmount;

    boolean                                 isInitialized;
    boolean                                 isRemovingSourceDocumentLine;
    boolean                                 doDisplayMessages;
    boolean                                 isAnyRelievingPrevented;

    boolean                                 isCleanupOfRemoved;
    BudgetControlSourceIntegrator           sourceIntegratorToCleanupRemoved;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetCheckDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the transaction currency amounts and the corresponding transaction codes for the ledger
    /// dimensions to check for the budget.
    /// </summary>
    /// <remarks>
    /// This method assumes the non-reversing accounting event account role distributions that reference
    /// distributions with the different <c>SourceDocumentLine</c> records provide the budget check
    /// details. The reversing accounting event account role distributions that reference distributions
    /// with the same <c>SourceDocumentLine</c> records also provide the budget check details.
    /// </remarks>
    private void addBudgetCheckDetails()
    {
        AccountingDistribution                  distribution;
        AccountingDistributionListEnumerator    distributionsToCheckBudgetEnumerator;

        distributionsToCheckBudgetEnumerator = distributionsToCheckBudget.getEnumerator();

        while (distributionsToCheckBudgetEnumerator.moveNext())
        {
            distribution = distributionsToCheckBudgetEnumerator.current();

            BudgetCheckDetail budgetCheckDetailsLocal = BudgetCheckDetail::newBudgetCheckDetail(
                distribution.AccountingLegalEntity,
                distribution.LedgerDimension,
                distribution.TransactionCurrencyAmount,
                distribution.TransactionCurrency);

            budgetCheckDetailsLocal.parmExchangeRate1(this.getFixedExchangeRate());
            
            budgetControlCheckRequest.addLedgerDimensionDetail(budgetCheckDetailsLocal);

            this.setBudgetCheckDate(distribution.AccountingDate);

            totalTransactionCurrencyAmount += distribution.TransactionCurrencyAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetRelievingDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the transaction currency amounts and the corresponding transaction codes for the ledger
    /// dimensions and the budget sources from which the budget reservation should be relieved.
    /// </summary>
    private void addBudgetRelievingDetails()
    {
        AccountingDistributionListEnumerator    distributionsToRelieveBudgetEnumerator;
        AccountingDistribution                  relievingDistribution;
        AccountingDistribution                  distributionToRelieve;
        SourceDocumentLine                      sourceDocumentLineToRelieve;
        recId                                   budgetSourceIdToRelieve;
        AmountCur                               distributionAmountToRelieve;
        CurrencyCode                            distributionAmountToRelieveCurrency;

        // Determines the subledger journal relieving method because budget relieving method
        // should be the same as the subledger journal relieving method.
        budgetControlSourceDocumentLineRule.determineRelievingMethod();

        if (budgetControlSourceDocumentLineRule.parmRelievingMethod() != SubledgerJournalRelievingMethod::None)
        {
            distributionsToRelieveBudgetEnumerator = distributionsToRelieveBudget.getEnumerator();

            while (distributionsToRelieveBudgetEnumerator.moveNext())
            {
                relievingDistribution = distributionsToRelieveBudgetEnumerator.current();

                budgetControlSourceDocumentLineRule.determineDistributionToRelieveDetail(relievingDistribution);

                sourceDocumentLineToRelieve = budgetControlSourceDocumentLineRule.parmCurrentSourceDocLineToRelieveBudget();
                distributionToRelieve = budgetControlSourceDocumentLineRule.parmCurrentDistributionToRelieveBudget();

                if (!isAnyRelievingPrevented &&
                    !budgetControlSourceDocumentLinePolicy.canRelieveBudget(sourceDocumentLineToRelieve))
                {
                    isAnyRelievingPrevented = true;
                }

                switch (budgetControlSourceDocumentLineRule.parmRelievingMethod())
                {
                    case SubledgerJournalRelievingMethod::Full:
                        // Relieving all amounts from the upstream source document
                        distributionAmountToRelieve = distributionToRelieve.TransactionCurrencyAmount;
                        distributionAmountToRelieveCurrency = distributionToRelieve.TransactionCurrency;
                        break;

                    case SubledgerJournalRelievingMethod::Partial:
                        // Relieving only partial amounts from the downstream source document
                        distributionAmountToRelieve = relievingDistribution.TransactionCurrencyAmount;
                        distributionAmountToRelieveCurrency = relievingDistribution.TransactionCurrency;
                        break;

                    default:

                        // Not supported business event relieving method.
                        Debug::assert(false);
                        break;
                }

                // Legal entities needs to be the same on the relieving and to-be-relieved distributions to ensure that
                // there is only one accounting currency for budgetary control API to calculate correct budget amounts
                // to relieve.
                Debug::assert(relievingDistribution.AccountingLegalEntity == distributionToRelieve.AccountingLegalEntity);

                budgetSourceIdToRelieve = BudgetSourceSourceDocumentLine::findBudgetSourceId(sourceDocumentLineToRelieve.RecId);

                BudgetRelievingDetail budgetRelievingDetailLocal = BudgetRelievingDetail::newBudgetRelievingDetail(
                    relievingDistribution.AccountingLegalEntity,
                    relievingDistribution.LedgerDimension,
                    relievingDistribution.TransactionCurrencyAmount,
                    relievingDistribution.TransactionCurrency,
                    budgetSourceIdToRelieve,
                    distributionToRelieve.AccountingLegalEntity,
                    distributionToRelieve.LedgerDimension,
                    distributionAmountToRelieve,
                    distributionAmountToRelieveCurrency);

                budgetRelievingDetailLocal.parmExchangeRate1(this.getFixedExchangeRate());
                
                budgetControlCheckRequest.addRelievingLedgerDimensionDetail(budgetRelievingDetailLocal);

                this.setBudgetCheckDate(relievingDistribution.AccountingDate);

                totalTransactionCurrencyAmount += relievingDistribution.TransactionCurrencyAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetReturnDetails</Name>
				<Source><![CDATA[
    private void addBudgetReturnDetails()
    {
        AccountingDistribution                  distribution;
        AccountingDistributionListEnumerator    distributionsToReturnBudgetEnumerator;

        distributionsToReturnBudgetEnumerator = distributionsToReturnBudget.getEnumerator();

        while (distributionsToReturnBudgetEnumerator.moveNext())
        {
            distribution = distributionsToReturnBudgetEnumerator.current();

            budgetControlCheckRequest.addReturnLedgerDimensionDetail(
                BudgetReturnDetail::newBudgetReturnDetail(
                    distribution.AccountingLegalEntity,
                    distribution.LedgerDimension,
                    distribution.TransactionCurrencyAmount,
                    distribution.TransactionCurrency));

            this.setBudgetCheckDate(distribution.AccountingDate);

            totalTransactionCurrencyAmount += distribution.TransactionCurrencyAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCheckBudget</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void doCheckBudget()
    {
        BudgetControlProcessor budgetControlProcessor;

        this.setUpBudgetSourceDetailsToCheckBudget();

        if (budgetControlCheckRequest.areAnyDetailsAdded())
        {
            if (!isAnyRelievingPrevented || budgetControlSourceDocumentLinePolicy.canOverruleRelievingPrevented())
            {
                this.setUpBudgetCheckParameters();

                budgetControlProcessor = this.getBudgetControlProcessor();

                budgetControlProcessor.parmDoBudgetCheckAsSimulation(budgetControlSourceDocumentLineRule.parmIsSimulationBudgetCheck());
                budgetControlProcessor.parmDoBudgetCheckForConfirmation(!isDraftReservation);
                budgetControlProcessor.parmDoDisplayMessagesFromBudgetCheck(doDisplayMessages && budgetControlSourceDocumentLinePolicy.parmIsErrorWarningDisplayRequired());

                budgetControlProcessor.addBudgetCheckRequestToProcessAtCommit(budgetControlCheckRequest);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRemoveBudget</Name>
				<Source><![CDATA[
    private void doRemoveBudget()
    {
        BudgetControlProcessor  budgetControlProcessor;

        budgetSourceId = BudgetSourceSourceDocumentLine::findBudgetSourceId(sourceDocumentLineId);

        if (budgetSourceId)
        {
            budgetControlProcessor = this.getBudgetControlProcessor();
            budgetControlProcessor.addBudgetSourceToRemoveAtCommit(budgetSourceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReturnRemainingBudget</Name>
				<Source><![CDATA[
    private void doReturnRemainingBudget()
    {
        BudgetControlProcessor budgetControlProcessor;

        budgetControlProcessor = this.getBudgetControlProcessor();

        budgetControlProcessor.addBudgetSourceToReturnRemainingAtCommit(
                budgetSourceId,
                returnDate,
                budgetControlSourceDocumentLineRule.parmBudgetUser(),
                doReturnAsClosing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeToCheckBudget</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initializeToCheckBudget(
        SourceDocumentLineRecId _sourceDocumentLineId,
        SourceDocumentLineItem _budgetSourceSourceDocumentLineItem,
        BudgetControlSourceDocumentLinePolicy _budgetControlSourceDocumentLinePolicy,
        boolean _isDraftReservation,
        SourceDocumentProcessorCaller _caller,
        boolean _isOnDemandBudgetCheck,
        userId _user,
        boolean _isCarryforwardReservation,
        boolean _suppressErrorWarningMessages)
    {
        budgetSourceSourceDocumentLineItem = _budgetSourceSourceDocumentLineItem;
        budgetControlSourceDocumentLinePolicy = _budgetControlSourceDocumentLinePolicy;
        sourceDocumentLineId = _sourceDocumentLineId;
        isOnDemandBudgetCheck = _isOnDemandBudgetCheck;
        isDraftReservation = _isDraftReservation;
        isCarryforwardReservation = _isCarryforwardReservation;
        doDisplayMessages = !_suppressErrorWarningMessages;
        user = _user;
        caller = _caller;

        // Initialize member variables.
        budgetControlCheckRequest = BudgetControlCheckRequest::construct();

        distributionsToCheckBudget = AccountingDistributionList::construct();
        distributionsToReturnBudget = AccountingDistributionList::construct();
        distributionsToRelieveBudget = AccountingDistributionList::construct();
        sourceDocumentLineItems = SourceDocumentLineItemList::construct();

        this.initRuleToCheckBudget();

        isInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeToRemoveBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object to remove a budget.
    /// </summary>
    /// <param name="_sourceDocumentLineId">
    /// The source document line identity.
    /// </param>
    private void initializeToRemoveBudget(SourceDocumentLineRecId _sourceDocumentLineId)
    {
        isRemovingSourceDocumentLine = true;
        sourceDocumentLineId = _sourceDocumentLineId;
        isInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeToReturnRemainingBudget</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initializeToReturnRemainingBudget(
        SourceDocumentLineRecId _sourceDocumentLineId,
        SourceDocumentLineItem _budgetSourceSourceDocumentLineItem,
        recId _budgetSourceId,
        BudgetControlSourceDocumentLinePolicy _budgetControlSourceDocumentLinePolicy,
        date _returnDate,
        SourceDocumentProcessorCaller _caller,
        userId _user,
        boolean _doReturnAsClosing = false)
    {
        sourceDocumentLineId = _sourceDocumentLineId;
        budgetSourceSourceDocumentLineItem = _budgetSourceSourceDocumentLineItem;
        budgetSourceId = _budgetSourceId;
        budgetControlSourceDocumentLinePolicy = _budgetControlSourceDocumentLinePolicy;
        returnDate = _returnDate;
        user = _user;
        caller = _caller;
        doReturnAsClosing = _doReturnAsClosing;

        this.initRuleToCheckBudget();

        isInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRuleToCheckBudget</Name>
				<Source><![CDATA[
    private void initRuleToCheckBudget()
    {
        if (!budgetControlSourceDocumentLineRule)
        {
            // Initialize budget check rule
            budgetControlSourceDocumentLineRule = BudgetControlSourceDocumentLineRule::newRule(
                budgetSourceSourceDocumentLineItem,
                isDraftReservation,
                user,
                caller,
                isCarryforwardReservation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToCheckBudgetForSourceDocLineRemoval</Name>
				<Source><![CDATA[
    private void initToCheckBudgetForSourceDocLineRemoval(
        BudgetSourceRecId _budgetSourceId,
        SourceDocumentLineRecId _sourceDocumentLineId,
        SourceDocumentLineItem _budgetSourceSourceDocumentLineItem,
        BudgetControlSourceDocumentLinePolicy _budgetControlSourceDocumentLinePolicy)
    {
        isRemovingSourceDocumentLine = true;

        budgetSourceId = _budgetSourceId;
        budgetSourceSourceDocumentLineItem = _budgetSourceSourceDocumentLineItem;
        budgetControlSourceDocumentLinePolicy = _budgetControlSourceDocumentLinePolicy;
        sourceDocumentLineId = _sourceDocumentLineId;

        isOnDemandBudgetCheck = false;
        isDraftReservation = true;
        isCarryforwardReservation = false;
        user = curUserId();
        caller = null;

        // Initialize member variables.
        budgetControlCheckRequest = BudgetControlCheckRequest::construct();

        distributionsToCheckBudget = AccountingDistributionList::construct();
        distributionsToReturnBudget = AccountingDistributionList::construct();
        distributionsToRelieveBudget = AccountingDistributionList::construct();
        sourceDocumentLineItems = SourceDocumentLineItemList::construct();

        this.initRuleToCheckBudget();

        isInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the distribution records for an active accounting event for all the loaded source document
    /// line items.
    /// </summary>
    protected void loadDistributions()
    {
        SourceDocumentLineItemListEnumerator sourceDocumentLinesEnumerator;

        if (sourceDocumentLineItems != null)
        {
            sourceDocumentLinesEnumerator = sourceDocumentLineItems.getEnumerator();

            while (sourceDocumentLinesEnumerator.moveNext())
            {
                this.loadSourceDocumentLineDistributions(sourceDocumentLinesEnumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSourceDocumentLineDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the distribution records for a specified source document line item.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    /// <remarks>
    ///  This method puts the retrieved distribution records into the following three lists:
    ///  <list type="number">
    ///   <item>
    ///   <description>A list of distribution records that contains ledger dimensions for which budget
    ///   reservations are made.</description>
    ///   </item>
    ///   <item>
    ///   <description>A list of distribution records with a reversal accounting distribution reference role
    ///   that contains ledger dimensions from which budget reservation are returned to make a budget
    ///   available for any budget source to consume.</description>
    ///   </item>
    ///   <item>
    ///   <description> A list of distribution records with a matching accounting distribution reference that
    ///   contains ledger dimensions from which budget reservation are relieved to make budget available for
    ///   the budget source for the specified source document line item to consume.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    private void loadSourceDocumentLineDistributions(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        AccountingDistributionList              distributions;
        AccountingDistributionListEnumerator    distributionsEnumerator;
        AccountingDistribution                  distribution;

        distributions = this.getActiveDistributions(_sourceDocumentLineItem.parmSourceDocumentLine());

        distributionsEnumerator = distributions.getEnumerator();

        while (distributionsEnumerator.moveNext())
        {
            distribution = distributionsEnumerator.current();

            if (budgetControlSourceDocumentLinePolicy.isBudgetControlConfiguredForDistribution(distribution))
            {
                if (budgetControlSourceDocumentLinePolicy.isBudgetCheckReferenceRole(distribution.ReferenceRole))
                {
                    distributionsToCheckBudget.addEnd(distribution);
                }
                else if (budgetControlSourceDocumentLinePolicy.isBudgetRelievingReferenceRole(distribution.ReferenceRole))
                {
                    distributionsToRelieveBudget.addEnd(distribution);
                }
                else if (budgetControlSourceDocumentLinePolicy.isBudgetReturnReferenceRole(distribution.ReferenceRole))
                {
                    distributionsToReturnBudget.addEnd(distribution);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSourceDocumentLineGraph</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all of the source document lines on the parent child source document line graph for the
    /// source document line submitted for budget check.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// The source document line item.
    /// </param>
    private void loadSourceDocumentLineGraph(SourceDocumentLineItem _sourceDocumentLineItem, int _depth = 1)
    {
        SourceDocumentLine                      currentSourceDocumentLine;
        SourceDocumentLineItemList              childSourceDocumentLineItems;
        SourceDocumentLineItemListEnumerator    childSourceDocumentLineItemsEnumerator;

        if (_sourceDocumentLineItem && _depth <= MaxSupportedSourceDocumentDepth)
        {
            currentSourceDocumentLine = _sourceDocumentLineItem.parmSourceDocumentLine();

            if (currentSourceDocumentLine &&
                (!isRemovingSourceDocumentLine ||
                    currentSourceDocumentLine.RecId != sourceDocumentLineId))
            {
                sourceDocumentLineItems.addEnd(_sourceDocumentLineItem);

                childSourceDocumentLineItems = _sourceDocumentLineItem.parmChildSourceDocumentLineItemList();

                if (childSourceDocumentLineItems.elements() > 0)
                {
                    int currentDepth = _depth + 1;
                    childSourceDocumentLineItemsEnumerator = childSourceDocumentLineItems.getEnumerator();

                    while (childSourceDocumentLineItemsEnumerator.moveNext())
                    {
                        this.loadSourceDocumentLineGraph(childSourceDocumentLineItemsEnumerator.current(), currentDepth);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSourceDocumentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all of the <c>SourceDocumentLine</c> records that should be checked for their budget
    /// reservations together with the budget source <c>SourceDocumentLine</c> record.
    /// </summary>
    private void loadSourceDocumentLines()
    {
        this.loadSourceDocumentLineGraph(budgetSourceSourceDocumentLineItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        doDisplayMessages = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCheckBudget</Name>
				<Source><![CDATA[
    private void runCheckBudget()
    {
        if (isInitialized)
        {
            if (PublicSectorUtils::isFrenchRegulatoryEnabled() && budgetControlSourceDocumentLinePolicy.canCheckBudget())
            {
                if (!PurchCommitmentLine_PSN::performBalanceCheck(sourceDocumentLineId))
                {
                    warning("@PublicSector:PurchCommitmentLineOverConsumedError");
                }
            }

            this.doCheckBudget();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRemoveBudget</Name>
				<Source><![CDATA[
    private void runRemoveBudget()
    {
        if (isInitialized && BudgetControlCheckRequest::isControlConfigured())
        {
            this.doRemoveBudget();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReturnRemainingBudget</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void runReturnRemainingBudget()
    {
        if (isInitialized)
        {
            // Only return remaining budget reservation if budget control is configured for the document
            // in the primary ledger for the legal entity in which the document is created.
            this.doReturnRemainingBudget();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves a budget source for the source document line.
    /// </summary>
    protected void saveBudgetSource()
    {
        if (budgetSourceSourceDocumentLineItem && budgetControlCheckRequest)
        {
            if (budgetControlCheckRequest.areAnyDetailsAdded())
            {
                // Saves the BudgetSourceSourceDocumentLine budget source record.

                if (!budgetSourceId)
                {
                    budgetSourceId = BudgetSourceSourceDocumentLine::saveBudgetSource(
                        budgetSourceSourceDocumentLineItem.parmSourceDocumentLine().RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetCheckDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a default date for the budget reservation.
    /// </summary>
    /// <param name="_budgetCheckDate">
    /// The date for the budget reservation.
    /// </param>
    /// <remarks>
    /// Use this method to set the date for the budget reservation as the date on the first distribution
    /// for checking or relieving a budget.
    /// </remarks>
    protected void setBudgetCheckDate(date _budgetCheckDate)
    {
        if (budgetDate == dateNull())
        {
            // For checking budget, the budget date is the first accounting date on the active distributions.
            budgetDate = _budgetCheckDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpBudgetCheckParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the required parameters on the budget control check request.
    /// </summary>
    private void setUpBudgetCheckParameters()
    {
         // Set parms on the budgetControlCheckRequest.
        budgetControlCheckRequest.parmBudgetSourceId(budgetSourceId);
        budgetControlCheckRequest.parmBudgetDate(budgetDate);
        budgetControlCheckRequest.parmIsCarryforward(isCarryforwardReservation);

        budgetControlSourceDocumentLineRule.determineBudgetControlCategory(totalTransactionCurrencyAmount);
        budgetControlSourceDocumentLineRule.determineIsSimulationBudgetCheck();

        budgetControlCheckRequest.parmBudgetControlCategory(budgetControlSourceDocumentLineRule.parmBudgetControlCategory());
        budgetControlCheckRequest.parmTransactionNumber(budgetControlSourceDocumentLineRule.parmBudgetTrackingNumber());
        budgetControlCheckRequest.parmUser(budgetControlSourceDocumentLineRule.parmBudgetUser());

        if (budgetControlSourceDocumentLineRule.parmSimulatedSourceDocumentLine())
        {
            budgetControlCheckRequest.parmSimulatedBudgetSourceId(
                BudgetSourceSourceDocumentLine::findBudgetSourceId(
                    budgetControlSourceDocumentLineRule.parmSimulatedSourceDocumentLine().RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpBudgetSourceDetailsToCheckBudget</Name>
				<Source><![CDATA[
    private void setUpBudgetSourceDetailsToCheckBudget()
    {
        this.loadSourceDocumentLines();
        this.loadDistributions();

        this.addBudgetReturnDetails();
        this.addBudgetRelievingDetails();
        this.addBudgetCheckDetails();

        this.saveBudgetSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of <c>AccountingDistribution</c> records for a specified
    /// <c>SourceDocumentLine</c> record that is associated with the active accounting event that has
    /// distributions.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    /// A collection of <c>AccountingDistribution</c> records.
    /// </returns>
    [Hookable(false)]
    protected AccountingDistributionList getActiveDistributions(SourceDocumentLine _sourceDocumentLine)
    {
        AccountingDistribution      accountingDistribution;
        AccountingEvent             accountingEvent;
        AccountingDistributionList  accountingDistributions;

        accountingDistributions = AccountingDistributionList::construct();

        if (_sourceDocumentLine)
        {
            while select * from accountingDistribution
                where accountingDistribution.SourceDocumentLine == _sourceDocumentLine.RecId
                    notexists join accountingEvent
                        where accountingEvent.RecId == accountingDistribution.AccountingEvent

            {
                accountingDistributions.addEnd(accountingDistribution);
            }

            while select * from accountingDistribution
                where accountingDistribution.SourceDocumentLine == _sourceDocumentLine.RecId
                     exists join accountingEvent
                        where accountingEvent.RecId == accountingDistribution.AccountingEvent &&
                            accountingEvent.State == AccountingEventState::Started
            {
                accountingDistributions.addEnd(accountingDistribution);
            }
        }

        return accountingDistributions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object instance of the processor.
    /// </summary>
    /// <returns>
    /// An object instance of the processor.
    /// </returns>
    private static BudgetControlSourceDocumentProcessor newProcessor()
    {
        BudgetControlSourceDocumentProcessor processor;

        processor = new BudgetControlSourceDocumentProcessor();

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocLineImplToCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the source document line implementation to check budget funds availability and reserve
    /// budget funds.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// The source document line implementation.
    /// </param>
    /// <param name="_isDraftReservation">
    /// A Boolean value that indicates whether the budget reservation is a draft reservation.
    /// </param>
    /// <param name="_caller">
    /// An Object instance that initiated the source document line submission; optional.
    /// </param>
    /// <param name="_isOnDemandBudgetCheck">
    /// A Boolean value that indicates whether the budget check is initiated by a specific user action;
    /// optional.
    /// </param>
    /// <param name="_user">
    /// The user who is submitting the source document line to check budget; optional.
    /// </param>
    /// <param name="_isCarryforwardReservation">
    /// A Boolean that indicates whether the budget reservation for the source document line is
    /// carryforward reservation.
    /// </param>
    /// <param name="_suppressErrorWarningMessages">
    /// A Boolean that indicates whether any error or warning messages should be suppressed for the budget
    /// funds available check.
    /// </param>
    public static void submitSourceDocLineImplToCheckBudget(
        SourceDocumentLineImplementation _sourceDocumentLineImplementation,
        boolean _isDraftReservation,
        SourceDocumentProcessorCaller _caller,
        boolean _isOnDemandBudgetCheck = false,
        userId _user = curuserid(),
        boolean _isCarryforwardReservation = false,
        boolean _suppressErrorWarningMessages = false)
    {
        BudgetControlSourceDocumentProcessor    processor;
        SourceDocumentLine                      topParentSourceDocumentLine;
        SourceDocumentLineItem                  budgetSourceSourceDocumentLineItem;
        BudgetControlSourceDocumentLinePolicy   budgetControlSourceDocumentLinePolicy;

        if (BudgetControlConfiguration::isControlConfigured())
        {
            // Performance: Must validate whether budget check is needed as early in the processing as possible.

            topParentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLineImplementation.SourceDocumentLine);

            if (!topParentSourceDocumentLine)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }
            else if (topParentSourceDocumentLine.RecId == _sourceDocumentLineImplementation.SourceDocumentLine)
            {
                // Create the sourceDocumentLineItem from the implementation since the implementation may not be persisted to the database yet
                budgetSourceSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(_sourceDocumentLineImplementation);
            }
            else
            {
                // Create the sourceDocumentLineItem from the topParentSourceDocumentLine as a child implementation was passed in
                // So the parent implementation has been persisted
                budgetSourceSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(topParentSourceDocumentLine);
            }

            // Initialize budget check policy
            budgetControlSourceDocumentLinePolicy = BudgetControlSourceDocumentLinePolicy::newPolicy(
                budgetSourceSourceDocumentLineItem,
                _isDraftReservation,
                _caller,
                _isOnDemandBudgetCheck,
                _user);

            if (budgetControlSourceDocumentLinePolicy.canCheckBudget())
            {
                ttsbegin;

                processor = BudgetControlSourceDocumentProcessor::newProcessor();

                processor.initializeToCheckBudget(
                    _sourceDocumentLineImplementation.SourceDocumentLine,
                    budgetSourceSourceDocumentLineItem,
                    budgetControlSourceDocumentLinePolicy,
                    _isDraftReservation,
                    _caller,
                    _isOnDemandBudgetCheck,
                    _user,
                    _isCarryforwardReservation,
                    _suppressErrorWarningMessages);

                processor.runCheckBudget();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocLineToReturnRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the source document line to return its remaining budget funds.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line.
    /// </param>
    /// <param name="_returnDate">
    /// The date to account for the return.
    /// </param>
    /// <param name="_caller">
    /// An Object instance that initiated the source document line submission; optional.
    /// </param>
    /// <param name="_user">
    /// The user that is submitting the source document line to return budget; optional.
    /// </param>
    /// <param name="_doReturnAsClosing">
    /// A boolean indicating whether to return the funds as a closing entry; optional.
    /// </param>
    public static void submitSourceDocLineToReturnRemaining(
        SourceDocumentLine _sourceDocumentLine,
        date _returnDate,
        SourceDocumentProcessorCaller _caller,
        userId _user = curuserid(),
        boolean _doReturnAsClosing = false)
    {
        BudgetControlSourceDocumentProcessor    processor;
        SourceDocumentLine                      topParentSourceDocumentLine;
        SourceDocumentLineItem                  budgetSourceSourceDocumentLineItem;
        BudgetControlSourceDocumentLinePolicy   budgetControlSourceDocumentLinePolicy;
        recId                                   budgetSourceId;

        if (_sourceDocumentLine)
        {
            topParentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLine.RecId);

            if (!topParentSourceDocumentLine)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            budgetSourceId = BudgetSourceSourceDocumentLine::findBudgetSourceId(topParentSourceDocumentLine.RecId);

            if (budgetSourceId)
            {
                // Performance: Must validate whether budget check is needed as early in the processing as possible.

                budgetSourceSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(topParentSourceDocumentLine);

                // Initialize budget check policy with the override line entry budget control configuration option.
                budgetControlSourceDocumentLinePolicy = BudgetControlSourceDocumentLinePolicy::newPolicy(
                budgetSourceSourceDocumentLineItem,
                false,
                _caller,
                true,
                _user);

                if (budgetControlSourceDocumentLinePolicy.canCheckBudget())
                {
                    ttsbegin;

                    processor = BudgetControlSourceDocumentProcessor::newProcessor();

                    processor.initializeToReturnRemainingBudget(
                        _sourceDocumentLine.RecId,
                        budgetSourceSourceDocumentLineItem,
                        budgetSourceId,
                        budgetControlSourceDocumentLinePolicy,
                        _returnDate,
                        _caller,
                        _user,
                        _doReturnAsClosing);

                    processor.runReturnRemainingBudget();

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocumentLineToCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the source document line to check the budget funds availability and reserve budget funds.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line.
    /// </param>
    /// <param name="_isDraftReservation">
    /// A Boolean value that indicates whether the budget reservation is a draft reservation.
    /// </param>
    /// <param name="_caller">
    /// An object instance that initiated the source document line submission; optional.
    /// </param>
    /// <param name="_isOnDemandBudgetCheck">
    /// A Boolean value that indicates whether the budget check is initiated by a specific user action;
    /// optional.
    /// </param>
    /// <param name="_user">
    /// The user who is submitting the source document line to check budget; optional.
    /// </param>
    /// <param name="_isCarryforwardReservation">
    /// A Boolean that indicates whether the budget reservation for the source document line is a
    /// carryforward reservation.
    /// </param>
    /// <param name="_suppressErrorWarningMessages">
    /// A Boolean that indicates whether any error or warning messages should be suppressed for the budget
    /// funds available check.
    /// </param>
    public static void submitSourceDocumentLineToCheckBudget(
        SourceDocumentLine _sourceDocumentLine,
        boolean _isDraftReservation,
        SourceDocumentProcessorCaller _caller,
        boolean _isOnDemandBudgetCheck = false,
        userId _user = curuserid(),
        boolean _isCarryforwardReservation = false,
        boolean _suppressErrorWarningMessages = false)
    {
        BudgetControlSourceDocumentProcessor    processor;
        SourceDocumentLine                      topParentSourceDocumentLine;
        SourceDocumentLineItem                  budgetSourceSourceDocumentLineItem;
        BudgetControlSourceDocumentLinePolicy   budgetControlSourceDocumentLinePolicy;

        if (_sourceDocumentLine)
        {
            if (BudgetControlConfiguration::isControlConfigured())
            {
                // Performance: Must validate whether budget check is needed as early in the processing as possible.

                topParentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLine.RecId);

                if (!topParentSourceDocumentLine)
                {
                    throw error(Error::wrongUseOfFunction(funcname()));
                }

                budgetSourceSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(topParentSourceDocumentLine);

                // Initialize budget check policy
                budgetControlSourceDocumentLinePolicy = BudgetControlSourceDocumentLinePolicy::newPolicy(
                budgetSourceSourceDocumentLineItem,
                _isDraftReservation,
                _caller,
                _isOnDemandBudgetCheck,
                _user);

                if (budgetControlSourceDocumentLinePolicy.canCheckBudget())
                {
                    ttsbegin;

                    processor = BudgetControlSourceDocumentProcessor::newProcessor();

                    processor.initializeToCheckBudget(
                        _sourceDocumentLine.RecId,
                        budgetSourceSourceDocumentLineItem,
                        budgetControlSourceDocumentLinePolicy,
                        _isDraftReservation,
                        _caller,
                        _isOnDemandBudgetCheck,
                        _user,
                        _isCarryforwardReservation,
                        _suppressErrorWarningMessages);

                    processor.runCheckBudget();

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocumentLineToRemoveBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the source document line to remove its budget reservation.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The source document line record.
    /// </param>
    public static void submitSourceDocumentLineToRemoveBudget(SourceDocumentLine _sourceDocumentLine)
    {
        BudgetControlSourceDocumentProcessor    processor;
        SourceDocumentLine                      topParentSourceDocumentLine;
        SourceDocumentLineItem                  budgetSourceSourceDocumentLineItem;
        BudgetControlSourceDocumentLinePolicy   budgetControlSourceDocumentLinePolicy;
        BudgetSource                            budgetSource;

        if (_sourceDocumentLine)
        {
            if (!_sourceDocumentLine.ParentSourceDocumentLine)
            {
                // Remove all budget reservation details for the budget source because
                // the source document line is the top parent source document line and
                // child source document line should not exist without the parent.

                ttsbegin;

                processor = BudgetControlSourceDocumentProcessor::newProcessor();
                processor.initializeToRemoveBudget(_sourceDocumentLine.RecId);
                processor.runRemoveBudget();

                ttscommit;
            }
            else
            {
                // Perform budget check because the source document line to remove is a child source document line.

                if (BudgetControlConfiguration::isControlConfigured())
                {
                    // Performance: Must validate whether budget check is needed as early in the processing as possible.
                    topParentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLine.RecId);

                    if (topParentSourceDocumentLine)
                    {
                        budgetSource = BudgetSourceSourceDocumentLine::findBudgetSource(topParentSourceDocumentLine.RecId);

                        if (budgetSource && !budgetSource.IsDeletePending && SourceDocumentHeader::exist(topParentSourceDocumentLine.SourceDocumentHeader))
                        {
                            // Budget check is only needed for source document line removal when the source document line
                            // distribution details are part of the budget check details for a budget source that exists and
                            // is not in a delete pending state.

                            // Additionally, its possible when a SourceDocumentHeader is deleted that the child source document lines are deleted before the top parent line.
                            // Verify SourceDocumentHeader exists; if not, the top parent line will be deleted right after and no budget check is required.

                            budgetSourceSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(topParentSourceDocumentLine);

                            // Initialize budget check policy
                            budgetControlSourceDocumentLinePolicy = BudgetControlSourceDocumentLinePolicy::newPolicy(
                                budgetSourceSourceDocumentLineItem,
                                true,
                                null,
                                false,
                                curUserId());

                            if (budgetControlSourceDocumentLinePolicy.canCheckBudget())
                            {
                                ttsbegin;

                                processor = BudgetControlSourceDocumentProcessor::newProcessor();

                                processor.initToCheckBudgetForSourceDocLineRemoval(
                                    budgetSource.RecId,
                                    _sourceDocumentLine.RecId,
                                    budgetSourceSourceDocumentLineItem,
                                    budgetControlSourceDocumentLinePolicy);

                                processor.runCheckBudget();

                                ttscommit;
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCleanupRemoved</Name>
				<Source><![CDATA[
    private void doCleanupRemoved()
    {
        BudgetControlProcessor  budgetControlProcessor;
        BudgetSource            budgetSource;
        SourceDocumentLine      removedSourceDocumentLine;

        budgetControlProcessor = this.getBudgetControlProcessor();

        // Select budget source records that reference source document lines
        // that no longer exist for the provided integrator to cleanup.
        // Add ranges for all the alternate key fields of the budget source table for the correct selectivity.
        while select RecId from budgetSource
            where budgetSource.BudgetSourceType == BudgetSourceType::SourceDocumentLine
                && budgetSource.BudgetTransactionLine == 0
                && budgetSource.SourceDocumentLine != 0
                && budgetSource.LedgerEntryGeneralJournalEntry == 0
                && budgetSource.LedgerEntryJournalNumber == ''
                && budgetSource.LedgerEntryJournalReferenceNumber == ''
                && budgetSource.LedgerEntryJournalLegalEntity == 0
                && budgetSource.BudgetControlSourceIntegrator == sourceIntegratorToCleanupRemoved
            notExists join removedSourceDocumentLine
                where removedSourceDocumentLine.RecId == budgetSource.SourceDocumentLine
        {
            // The budget control processor will determine the full state of the budget source
            // and do the appropriate cleanup for the state of the budget details.
            budgetControlProcessor.addBudgetSourceToRemoveAtCommit(budgetSource.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeToCleanupRemoved</Name>
				<Source><![CDATA[
    private void initializeToCleanupRemoved(BudgetControlSourceIntegrator _sourceIntegrator)
    {
        isCleanupOfRemoved = true;
        sourceIntegratorToCleanupRemoved = _sourceIntegrator;
        isInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCleanupRemoved</Name>
				<Source><![CDATA[
    private void runCleanupRemoved()
    {
        if (isInitialized
            && isCleanupOfRemoved
            && BudgetControlCheckRequest::isControlConfigured())
        {
            this.doCleanupRemoved();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetControlProcessor</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected BudgetControlProcessor getBudgetControlProcessor()
    {
        return BudgetControlProcessor::instance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitIntegratorCleanupForSDLineRemoved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits the source integrator to cleanup budget reservations that reference removed source document lines.
    /// </summary>
    /// <param name="_sourceIntegrator">
    /// The budget control source integrator for which to cleanup.
    /// </param>
    public static void submitIntegratorCleanupForSDLineRemoved(BudgetControlSourceIntegrator _sourceIntegrator)
    {
        BudgetControlSourceDocumentProcessor    processor;

        if (BudgetControlCheckRequest::isControlConfigured())
        {
            ttsbegin;

            processor = BudgetControlSourceDocumentProcessor::newProcessor();

            processor.initializeToCleanupRemoved(_sourceIntegrator);

            processor.runCleanupRemoved();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SourceDocumentLine_onDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles <c>SourceDocumentLine</c> record deleting event.
    /// </summary>
    /// <param name="_sender">The <c>SourceDocumentLine</c> record being deleted.</param>
    /// <param name="_e">The data event arguments.</param>
    [DataEventHandler(tableStr(SourceDocumentLine), DataEventType::Deleting)]
    public static void SourceDocumentLine_onDeleting(Common _sender, DataEventArgs _e)
    {
        SourceDocumentLine sourceDocumentLine = _sender as SourceDocumentLine;
        SourceDocumentChildLineItemReset resetter = SourceDocumentChildLineItemReset::construct(sourceDocumentLine);

        resetter.populateParentSourceDocumentLine();

        if (!BudgetControlSourceDocumentProcessor::bypassBudgetCalcWhenTaxLinesAreDeleted(sourceDocumentLine.RecId))
        {
            BudgetControlSourceDocumentProcessor::submitSourceDocumentLineToRemoveBudget(sourceDocumentLine);
        }

        resetter.clearChildSourceDocumentLineItemList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bypassBudgetCalcWhenTaxLinesAreDeleted</Name>
				<Source><![CDATA[
    private static boolean bypassBudgetCalcWhenTaxLinesAreDeleted(RecId _sourceDocumentRecId)
    {
        return BudgetControlSourceDocumentLineToBeDeleted::exist(_sourceDocumentRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SourceDocumentLine_softDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>SourceDocumentLine</c> record soft delete event.
    /// </summary>
    /// <param name = "sourceDocumentLine">The <c>SourceDocumentLine</c> record being soft deleted.</param>
    [SubscribesTo(tablestr(SourceDocumentLine), staticdelegatestr(SourceDocumentLine, softDeleting))]
    public static void SourceDocumentLine_softDelete(SourceDocumentLine _sourceDocumentLine)
    {
        BudgetControlSourceDocumentProcessor::submitSourceDocumentLineToRemoveBudget(_sourceDocumentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkingIfSourceDocumentLineItemRequiresSynchronousProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>SourceDocumentProcessor</c> checking for requires synchronous processing of <c>SourceDocumentLineItem</c> event.
    /// </summary>
    /// <param name = "_eventArgs">The event arguments.</param>
    [SubscribesTo(classstr(SourceDocumentProcessor), staticdelegatestr(SourceDocumentProcessor, checkingIfSourceDocumentLineItemRequiresSynchronousProcessing))]
    public static void checkingIfSourceDocumentLineItemRequiresSynchronousProcessing(SourceDocumentProcessorEventArgs _eventArgs)
    {
        boolean sourceDocumentLineRequiresSynchronousProcessing;

        if (_eventArgs.parmSourceDocumentLineItem().parmSourceDocument().parmSourceDocumentType() is SourceDocumentTypeIBudgetControl)
        {
            var primaryLedgerRecId = Ledger::primaryLedger(_eventArgs.parmSourceDocumentLineItem().parmLegalEntityRecId());
            sourceDocumentLineRequiresSynchronousProcessing = Ledger::isLedgerBudgetControlEnabled(primaryLedgerRecId);
        }

        _eventArgs.parmIsSynchronousLineTransitionRequired(sourceDocumentLineRequiresSynchronousProcessing);

    }

]]></Source>
			</Method>
			<Method>
				<Name>checkingIfBudgetControlEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>SourceDocument</c> checking if budget control is enabled.
    /// </summary>
    /// <param name = "_eventArgs">The event arguments.</param>
    [SubscribesTo(classstr(SourceDocument), staticdelegatestr(SourceDocument, checkingIfBudgetControlEnabled))]
    public static void checkingIfBudgetControlEnabled(SourceDocumentProcessorEventArgs _eventArgs)
    {
        RefRecId    primaryLedgerRecId;
        LegalEntityRecId legalEntityRecId;

        legalEntityRecId = _eventArgs.parmLegalEntityRecId();
        if (!legalEntityRecId)
        {
            legalEntityRecId = _eventArgs.parmSourceDocumentLineItem().parmLegalEntityRecId();
        }

        primaryLedgerRecId = Ledger::primaryLedger(legalEntityRecId);
        _eventArgs.parmIsBudgetControlEnabled(Ledger::isLedgerBudgetControlEnabled(primaryLedgerRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the exchange rate specified on the source document, if the fixed exchange rate is selected
    /// </summary>
    /// <returns>The exchange rate if the fixed exchange is selected on the source document; otherwise blank </returns>
    internal ExchRate getFixedExchangeRate()
    {
        ExchRate fixedExchRate;

        if (budgetSourceSourceDocumentLineItem is SourceDocumentIFixedExchangeRate)
        {
            SourceDocumentIFixedExchangeRate sourceDocumentFixedExchRate = budgetSourceSourceDocumentLineItem as SourceDocumentIFixedExchangeRate;
            
            if (sourceDocumentFixedExchRate && sourceDocumentFixedExchRate.doUseFixedExchangeRate())
            {
                fixedExchRate = budgetSourceSourceDocumentLineItem.parmExchangeRate1();
            }
        }
        
        return fixedExchRate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>