<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsTableMethodIterator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rDeferralsTableMethodIterator
{
    StartDate               startPeriodDate,
                            startIntervalDate,
                            startDeferralsDate;
    EndDate                 endPeriodDate,
                            endIntervalDate,
                            endDeferralsDate;
    RDeferralsSum           deferralsAmount,
                            netBookValue,
                            prevWritingOffValue;
    Map                     mapIntervals;
    MapIterator             mapIterator;

    RDeferralsTableInterval deferralsInterval;
    RDeferralsProfile       deferralsProfile;
    RDeferralsPeriod        totalInterval;
    boolean                 calculated;
    RDeferralsId            deferralsId;
    RDeferralsBookId        deferralsBookId;
    RDeferralsLifeTime      currentInterval;

    protected const int Value2 = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDeferralsProfile</Name>
				<Source><![CDATA[
    public RDeferralsProfile parmDeferralsProfile(RDeferralsProfile _deferralsProfile = deferralsProfile)
    {
        deferralsProfile = _deferralsProfile;
        return deferralsProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapIntervals</Name>
				<Source><![CDATA[
    public Map parmMapIntervals(Map _mapIntervals = mapIntervals)
    {
        mapIntervals = _mapIntervals;
        return mapIntervals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    protected RDeferralsAmount calc()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndIntervalDate</Name>
				<Source><![CDATA[
    public EndDate getEndIntervalDate()
    {
        return conPeek(mapIterator.value(), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntervalSum</Name>
				<Source><![CDATA[
    public RDeferralsSum getIntervalSum()
    {
        return conPeek(mapIterator.value(), Value2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartIntervalDate</Name>
				<Source><![CDATA[
    public StartDate getStartIntervalDate()
    {
        return mapIterator.key();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDeferralsBook</Name>
				<Source><![CDATA[
    public void initFromDeferralsBook(RDeferralsBook _deferralsBook,
                                      EndDate        _endDate)
    {
        StartDate         startDate         = _deferralsBook.LastDeferralsDate ?
                                              _deferralsBook.LastDeferralsDate + 1 :
                                              _deferralsBook.StartDeferralsDate;
        RDeferralsSumCalc rDeferralsSumCalc = RDeferralsSumCalc_Trans::newDeferralsPeriod(_deferralsBook.DeferralsId,
                                                                                          _deferralsBook.DeferralsBookId,
                                                                                          startDate);
        currentInterval = 0;
        this.parmDeferralsAmount(rDeferralsSumCalc.deferralsAmount());
        this.parmNetBookValue(rDeferralsSumCalc.netBookValue());

        this.parmStartDeferralsDate(_deferralsBook.StartDeferralsDate);
        this.parmEndDeferralsDate(_deferralsBook.EndDeferralsDate);

        this.parmStartPeriodDate(startDate);
        this.parmEndPeriodDate(_endDate);
        this.parmDeferralsBookId(_deferralsBook.DeferralsBookId);
        this.parmDeferralsId(_deferralsBook.DeferralsId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RDeferralsProfile _deferralsProfile)
    {
        deferralsProfile  = _deferralsProfile;
        mapIntervals      = new Map(Types::Date, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        if (calculated)
            mapIterator.next();
        else
            this.writtingOffCalculate();

        return mapIterator.more();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeferralsAmount</Name>
				<Source><![CDATA[
    public RDeferralsSum parmDeferralsAmount(RDeferralsSum _deferralsAmount = deferralsAmount)
    {
        deferralsAmount = _deferralsAmount;
        return deferralsAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeferralsBookId</Name>
				<Source><![CDATA[
    public RDeferralsBookId parmDeferralsBookId(RDeferralsBookId _deferralsBookId = deferralsBookId)
    {
        deferralsBookId = _deferralsBookId;

        return deferralsBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeferralsId</Name>
				<Source><![CDATA[
    public RDeferralsId parmDeferralsId(RDeferralsId    _deferralsId = deferralsId)
    {
        deferralsId = _deferralsId;

        return deferralsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDeferralsDate</Name>
				<Source><![CDATA[
    public EndDate parmEndDeferralsDate(EndDate _endDate = endDeferralsDate)
    {
        endDeferralsDate = _endDate;
        return endDeferralsDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndPeriodDate</Name>
				<Source><![CDATA[
    public EndDate parmEndPeriodDate(EndDate _endDate = endPeriodDate)
    {
        endPeriodDate = _endDate;
        return endPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNetBookValue</Name>
				<Source><![CDATA[
    public RDeferralsSum parmNetBookValue(RDeferralsSum _netBookValue = netBookValue)
    {
        netBookValue = _netBookValue;
        return netBookValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDeferralsDate</Name>
				<Source><![CDATA[
    public StartDate parmStartDeferralsDate(StartDate _startDate = startDeferralsDate)
    {
        startDeferralsDate = _startDate;
        return startDeferralsDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartPeriodDate</Name>
				<Source><![CDATA[
    public StartDate parmStartPeriodDate(StartDate _stertDate = startPeriodDate)
    {
        startPeriodDate = _stertDate;
        return startPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writtingOffCalculate</Name>
				<Source><![CDATA[
    protected void writtingOffCalculate()
    {
        RDeferralsSum    intervalSum;
        StartDate        periodStart;
        container        c;

        void nextPeriod()
        {
            endIntervalDate =   deferralsInterval.getEndDate(startIntervalDate) >= endDeferralsDate ?
                                endDeferralsDate :
                                deferralsInterval.getEndDate(startIntervalDate);
            currentInterval ++;
        }

        deferralsInterval = RDeferralsTableInterval::construct(deferralsProfile, startDeferralsDate, endDeferralsDate);
        totalInterval     = deferralsInterval.totalInterval();

        startIntervalDate = startPeriodDate;
        currentInterval = 0;

        nextPeriod();
        while (endPeriodDate    >= endIntervalDate    &&
               endDeferralsDate >= startIntervalDate  &&
               netBookValue - prevWritingOffValue > 0)
        {
            intervalSum      = RDeferralsTableMethodIterator::roundAmount(deferralsProfile,this.calc());

            if (intervalSum > 0)
            {
                periodStart = deferralsInterval.getStartDate(startIntervalDate);

                if (mthOfYr(startIntervalDate) == mthOfYr(startDeferralsDate) ||
                    ! mapIntervals.exists(periodStart))
                {
                    mapIntervals.insert(startIntervalDate, [deferralsInterval.getEndDate(startIntervalDate), intervalSum]);
                }
                else
                {
                    c = mapIntervals.lookup(periodStart);
                    mapIntervals.insert(periodStart,
                                        [conPeek(c, 1),
                                         conPeek(c, Value2) + intervalSum]);
                }

                prevWritingOffValue += intervalSum;
            }

            startIntervalDate = endIntervalDate + 1;

            nextPeriod();
        }

        calculated  = true;
        mapIterator = new MapIterator(mapIntervals);
        mapIterator.begin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RDeferralsTableMethodIterator construct(RDeferralsProfileId _deferralsProfileId)
    {
        RDeferralsProfile deferralsProfile = RDeferralsProfile::find(_deferralsProfileId);

        RDeferralsTableMethodFactoryAttribute attr = new RDeferralsTableMethodFactoryAttribute(deferralsProfile.DeferralsMethod);
        RDeferralsTableMethodIterator rDeferralsTableMethodIterator = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(RDeferralsTableMethodIterator), attr) as RDeferralsTableMethodIterator;
        
        if (rDeferralsTableMethodIterator)
        {
            rDeferralsTableMethodIterator.parmDeferralsProfile(deferralsProfile);

            if (!rDeferralsTableMethodIterator.mapIntervals)
            {
                rDeferralsTableMethodIterator.parmMapIntervals(new Map(Types::Date, Types::Container));
            }
        }
        else
        {
            throw error("@GLS103765");
        }

        return rDeferralsTableMethodIterator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmount</Name>
				<Source><![CDATA[
    public static AmountCur roundAmount(RDeferralsProfile _deferralsProfile,
                                        AmountCur         _amountCur)
    {
        return round(_amountCur, _deferralsProfile.RoundOffOperation);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>