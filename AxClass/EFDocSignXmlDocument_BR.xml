<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocSignXmlDocument_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EFDocSignXmlDocument_BR
{
    System.Security.Cryptography.X509Certificates.X509Certificate2 certificate;
    boolean useRsaSha256;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAsymmetricAlgorithm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>System.Security.Cryptography.AsymmetricAlgorithm</c> object
    /// from the certificate private key.
    /// </summary>
    /// <returns>
    /// <c>System.Security.Cryptography.AsymmetricAlgorithm</c> object
    /// from the certificate private key.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The system does not get enough permission to access the private key.
    /// </exception>
    protected System.Security.Cryptography.AsymmetricAlgorithm getAsymmetricAlgorithm()
    {
        System.Security.Cryptography.AsymmetricAlgorithm rsaProvider;

        try
        {
            rsaProvider = certificate.get_PrivateKey();
        }
        catch
        {
            setPrefix(certificate.get_FriendlyName());
            Error("@GLS62993");
            throw Error(AifUtil::getClrErrorMessage());
        }

        if (useRsaSha256)
        {
            return EFDocSignXmlDocument_BR::upgradeCsp(rsaProvider);
        }

        return rsaProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseRsaSha256</Name>
				<Source><![CDATA[
    public boolean parmUseRsaSha256(boolean _useRsaSha256 = useRsaSha256)
    {
        useRsaSha256 = _useRsaSha256;
        return useRsaSha256;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>System.Security.Cryptography.Xml.KeyInfo</c> object with key
    /// information from the digital certificate.
    /// </summary>
    /// <returns>
    /// <c>System.Security.Cryptography.Xml.KeyInfo</c> object with key
    /// information from the digital certificate.
    /// </returns>
    protected System.Security.Cryptography.Xml.KeyInfo getKeyInfo()
    {
        System.Security.Cryptography.Xml.KeyInfo keyInfo;

        keyInfo = new System.Security.Cryptography.Xml.KeyInfo();
        keyInfo.AddClause(new System.Security.Cryptography.Xml.KeyInfoX509Data(certificate));

        return keyInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCertificate</Name>
				<Source><![CDATA[
     /// <summary>
    /// Initializes digital certificate based on its name or a certificate to KeyVault.
    /// </summary>
    /// <param name="_keyVaultCertificateRef">
    /// Reference to information about the certificate in KeyVault
    /// </param>
    /// <param name="_certificateSubject">
    /// The subject of the digital certificate to be initialized.
    /// </param>
    protected void initCertificate(KeyVaultCertificateRef _keyVaultCertificateRef = 0, DigitalCertificateSubject _certificateSubject = null)
    {
        Debug::assert(strLen(_certificateSubject) > 0);
        certificate = CertificateHelper_BR::getDigitalCertificate(_keyVaultCertificateRef, _certificateSubject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>signDocument</Name>
				<Source><![CDATA[
    public str signDocument(KeyVaultCertificateRef _keyVaultCertificateRef,
                            DigitalCertificateSubject _certificateSubject, 
                            XmlElement _xmlDoc, 
                            str _elementToBeSignedName)
    {
        System.Security.Cryptography.Xml.SignedXml                          signedXml;
        System.Xml.XmlDocument                                              xmlDocument;
        System.Xml.XmlElement                                               xmlDigitalSignature;
        System.Xml.XmlElement                                               xmlDocumentElement;
        System.Xml.XmlNodeList                                              xmlNodeList;
        System.Xml.XmlNode                                                  nodeToBeSigned;
        System.Xml.XmlAttributeCollection                                   xmlAttributeCollection;
        int                                                                 attributeCount, attributeIndex;
        System.Xml.XmlNode                                                  eachAttribute;
        str                                                                 attributeName, attributeInnerText;
        System.Security.Cryptography.Xml.Reference                          reference;
        str                                                                 signedDocXml;
        System.Security.Cryptography.Xml.SignedInfo                         signedInfo;

        new InteropPermission(InteropKind::ClrInterop).assert();

        this.initCertificate(_keyVaultCertificateRef, _certificateSubject);

        xmlDocument = new System.Xml.XmlDocument();
        xmlDocument.LoadXml(_xmlDoc.toString());

        signedXml = new System.Security.Cryptography.Xml.SignedXml(xmlDocument);
        reference = new System.Security.Cryptography.Xml.Reference();

        xmlNodeList = xmlDocument.GetElementsByTagName(_elementToBeSignedName);
        nodeToBeSigned = xmlNodeList.Item(0);

        xmlAttributeCollection = nodeToBeSigned.get_Attributes();
        attributeCount = xmlAttributeCollection.get_Count();

        for (attributeIndex = 0; attributeIndex < attributeCount; attributeIndex++)
        {
            eachAttribute = xmlAttributeCollection.Item(attributeIndex);
            attributeName = eachAttribute.get_Name();
            if (attributeName == 'Id')
            {
                attributeInnerText = eachAttribute.get_InnerText();
                reference.set_Uri('#' + attributeInnerText);
                break;
            }
        }

        signedXml.set_SigningKey(this.getAsymmetricAlgorithm());

        signedInfo = signedXml.get_SignedInfo();

        if (useRsaSha256)
        {
            signedInfo.set_SignatureMethod(@'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256');
        }
        else
        {
            signedInfo.set_SignatureMethod("http://www.w3.org/2000/09/xmldsig#rsa-sha1");
        }

        reference.AddTransform(new System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform());
        reference.AddTransform(new System.Security.Cryptography.Xml.XmlDsigC14NTransform());

        if (useRsaSha256)
        {
            reference.set_DigestMethod(@"http://www.w3.org/2001/04/xmlenc#sha256");
        }
        else
        {
            reference.set_DigestMethod("http://www.w3.org/2000/09/xmldsig#sha1");
        }

        signedXml.AddReference(reference);

        signedXml.set_KeyInfo(this.getKeyInfo());
        signedXml.ComputeSignature();

        xmlDigitalSignature = signedXml.GetXml();

        xmlDocumentElement = xmlDocument.get_DocumentElement();
        xmlDocumentElement.AppendChild(xmlDocument.ImportNode(xmlDigitalSignature, true));

        signedDocXml = xmlDocumentElement.get_OuterXml();

        CodeAccessPermission::revertAssert();

        return signedDocXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EFDocSignXmlDocument_BR construct()
    {
        return new EFDocSignXmlDocument_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeCsp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enforces the CSP provider to be Microsoft Enhanced RSA and AES Cryptographic Provider (provider type PROV_RSA_AES, 24).
    /// </summary>
    /// <param name="_currentKey">
    /// The key to be upgraded.
    /// </param>
    /// <returns>
    /// The new key as System.Security.Cryptography.RSACryptoServiceProvider.
    /// </returns>
    private static System.Security.Cryptography.AsymmetricAlgorithm upgradeCsp(System.Security.Cryptography.AsymmetricAlgorithm _currentKey)
    {
        const System.Security.Cryptography.CspProviderFlags useExistingKey = System.Security.Cryptography.CspProviderFlags::UseExistingKey;
        const System.Security.Cryptography.CspProviderFlags useMachineKeyStore = System.Security.Cryptography.CspProviderFlags::UseMachineKeyStore;

        System.Int32 PROV_RSA_AES = 24;

        System.Security.Cryptography.CspParameters cspParameters = new System.Security.Cryptography.CspParameters(PROV_RSA_AES);

        System.Type cspParametersType = System.Type::GetType('System.Security.Cryptography.CspParameters');

        // bitwise OR is not supported in X++ for .Net enums
        System.Security.Cryptography.CspProviderFlags bitwiseOR(
            System.Security.Cryptography.CspProviderFlags _flags1,
            System.Security.Cryptography.CspProviderFlags _flags2)
        {
            // cast .Net enum to .Net Int32
            System.Int32 flags1int = System.Convert::ToInt32(_flags1);
            System.Int32 flags2int = System.Convert::ToInt32(_flags2);

            // cast .Net Int32 to AX int
            int flags1AXint = flags1int;
            int flags2AXint = flags2int;

            // no explicit cast is needed from int to .Net Int32
            System.Int32 retAsInt = flags1AXint + flags2AXint;

            return System.Enum::ToObject(_flags1.GetType(), retAsInt);
        }

        System.Security.Cryptography.RSACryptoServiceProvider currentKey = _currentKey as System.Security.Cryptography.RSACryptoServiceProvider;
        if (!currentKey)
            return _currentKey;

        System.Security.Cryptography.CspKeyContainerInfo cspKeyContainerInfo = currentKey.get_CspKeyContainerInfo();

        System.Reflection.FieldInfo fieldInfo = cspParametersType.GetField('KeyContainerName');
        fieldInfo.SetValue(cspParameters, cspKeyContainerInfo.get_KeyContainerName());

        fieldInfo = cspParametersType.GetField('KeyNumber');
        fieldInfo.SetValue(cspParameters, cspKeyContainerInfo.get_KeyNumber());

        if (cspKeyContainerInfo.get_MachineKeyStore())
        {
            cspParameters.set_Flags(bitwiseOR(useExistingKey, useMachineKeyStore));
        }
        else
        {
            cspParameters.set_Flags(useExistingKey);
        }

        if (cspKeyContainerInfo.get_ProviderType() == PROV_RSA_AES)
        {
            fieldInfo = cspParametersType.GetField('ProviderName');
            fieldInfo.SetValue(cspParameters, cspKeyContainerInfo.get_ProviderName());
        }

        return new System.Security.Cryptography.RSACryptoServiceProvider(cspParameters);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>