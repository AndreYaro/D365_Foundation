<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankModernReconciliationUpgradeWizardProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankModernReconciliationUpgradeWizardProcessor</c> is the sysOperation service class for the Bank Modern Reconciliation Wizard.
/// </summary>
internal final class BankModernReconciliationUpgradeWizardProcessor
{
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeUpgradeWizardStatusForAllLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the wizard execution status to Executed for all the data areas where there is no advanced bank reconciliation record.
    /// </summary>
    internal static void initializeUpgradeWizardStatusForAllLegalEntities()
    {
        BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addActivityContext(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, initializeUpgradeWizardStatusForAllLegalEntities)))
        {
            ttsbegin;
            BankParameters bankParameter;
            BankModernReconciliationUpgradeWizardProcessor::skipBankParametersAosEvents(bankParameter);

            BankStmtISOAccountStatement statement;
            update_recordset crosscompany bankParameter
                setting BankModernReconciliationUpgradeWizardExecutionStatus = BankModernReconciliationUpgradeWizardExecutionStatus::Executed
                notexists join RecId from statement
                    where statement.DataAreaId == bankParameter.DataAreaId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUpgradeWizardStatusForAllLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the wizard execution status to NotExecuted for all the data areas.
    /// </summary>
    internal static void resetUpgradeWizardStatusForAllLegalEntities()
    {
        BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addActivityContext(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, resetUpgradeWizardStatusForAllLegalEntities)))
        {
            ttsbegin;
            BankParameters bankParameter;
            BankModernReconciliationUpgradeWizardProcessor::skipBankParametersAosEvents(bankParameter);

            update_recordset crosscompany bankParameter
                setting BankModernReconciliationUpgradeWizardExecutionStatus = BankModernReconciliationUpgradeWizardExecutionStatus::NotExecuted;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipBankParametersAosEvents</Name>
				<Source><![CDATA[
    private static void skipBankParametersAosEvents(BankParameters _bankParameter)
    {
        _bankParameter.skipAosValidation(true);
        _bankParameter.skipDatabaseLog(true);
        _bankParameter.skipDataMethods(true);
        _bankParameter.skipEvents(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDataUpgrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the data upgrade for the bank modern reconciliation wizard.
    /// </summary>
    /// <param name="_contract">The data upgrade contract.</param>
    internal void processDataUpgrade(BankModernReconciliationUpgradeWizardContract _contract)
    {
        boolean isUpgradeGlobaRecordTask = _contract.parmIsUpgradeGlobalMatchingRule();
        if (isUpgradeGlobaRecordTask)
        {
            BankModernReconciliationUpgradeWizardProcessor::processGlobalMatchingRuleUpgrade();
        }
        else
        {
            DataAreaId dataAreaId = _contract.parmExecuteForDataAreaId();
            date upgradeAfterDate = _contract.parmUpgradeAfterDate();
            if (dataAreaId == '' || upgradeAfterDate == dateNull())
            {
                throw error(Error::missingParameter(this));
            }
            BankModernReconciliationUpgradeWizardProcessor::processDataAreaRecordsUpgrade(dataAreaId, upgradeAfterDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDataAreaRecordsUpgrade</Name>
				<Source><![CDATA[
    private static void processDataAreaRecordsUpgrade(DataAreaId _dataAreaId, date _upgradeAfterDate)
    {
        if (_dataAreaId)
        {
            changecompany (_dataAreaId)
            {
                BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
                using (SysInstrumentationActivityContext activityContext = logger.initActivities().addActivityContext(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processDataAreaRecordsUpgrade)))
                {
                    BankModernReconciliationUpgradeWizardProcessor::updateWizardExecutionStatus(BankModernReconciliationUpgradeWizardExecutionStatus::Executing);
                    try
                    {
                        BankModernReconciliationUpgradeWizardProcessor::processPostedButNotMatchedLine();
                        BankModernReconciliationUpgradeWizardProcessor::unmatchUnpostedMarkAsNewLineAndResetLine();
                        BankModernReconciliationUpgradeWizardProcessor::updateStatementHeaderPostedLineAccountingDate(_upgradeAfterDate);
                        BankModernReconciliationUpgradeWizardProcessor::updateOpenReconciliationHeaderCutOffDateForAccountingDate();
                        BankModernReconciliationUpgradeWizardProcessor::generateMatchingId(_upgradeAfterDate);
                        BankModernReconciliationUpgradeWizardProcessor::processPostedTransactionMatching(_upgradeAfterDate);
                    }
                    catch (Exception::UpdateConflict)
                    {
                        BankModernReconciliationUpgradeWizardProcessor::updateWizardExecutionStatus(BankModernReconciliationUpgradeWizardExecutionStatus::NotExecuted);
                        throw Exception::UpdateConflict;
                    }
                    catch (Exception::Deadlock)
                    {
                        BankModernReconciliationUpgradeWizardProcessor::updateWizardExecutionStatus(BankModernReconciliationUpgradeWizardExecutionStatus::NotExecuted);
                        throw Exception::Deadlock;
                    }
                    catch (Exception::TransientSqlConnectionError)
                    {
                        BankModernReconciliationUpgradeWizardProcessor::updateWizardExecutionStatus(BankModernReconciliationUpgradeWizardExecutionStatus::NotExecuted);
                        throw Exception::TransientSqlConnectionError;
                    }
                    catch
                    {
                        BankModernReconciliationUpgradeWizardProcessor::updateWizardExecutionStatus(BankModernReconciliationUpgradeWizardExecutionStatus::NotExecuted);
                        throw;
                    }

                    BankModernReconciliationUpgradeWizardProcessor::updateWizardExecutionStatus(BankModernReconciliationUpgradeWizardExecutionStatus::Executed);
                    Info(strFmt("@Bank:BankModernReconciliationUpgradeWizardProcessComplete", _dataAreaId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGlobalMatchingRuleUpgrade</Name>
				<Source><![CDATA[
    private static void processGlobalMatchingRuleUpgrade()
    {
        System.Exception exception;
        int64 removeMatchingRuleSetLineCount = 0;
        int64 removeMatchingRuleCount = 0;
        BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addActivityContext(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processGlobalMatchingRuleUpgrade)))
        {
            try
            {
                BankReconciliationMatchRule matchingRule;
                BankReconciliationMatchRuleSetLine matchingRuleSetLine;
                while select matchingRule
                    where matchingRule.MatchActionType == BankReconciliationMatchActionType::Adjustment
                {
                    ttsbegin;
                    select count(RecId) from matchingRuleSetLine
                        where matchingRuleSetLine.BankReconciliationMatchRule == matchingRule.RecId;
                    removeMatchingRuleSetLineCount += matchingRuleSetLine.RecId;

                    delete_from matchingRuleSetLine
                        where matchingRuleSetLine.BankReconciliationMatchRule == matchingRule.RecId;

                    matchingRule.selectForUpdate(true);
                    matchingRule.delete();

                    removeMatchingRuleCount++;
                    ttscommit;
                }
                Info("@Bank:BankModernReconciliationUpgradeWizardProcessGlobalMatchingRuleComplete");
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.infoAndLogErrorCallStack(
                            staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processGlobalMatchingRuleUpgrade),
                            enum2Str(Exception::UpdateConflictNotRecovered),
                            xSession::currentRetryCount());
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processGlobalMatchingRuleUpgrade),
                        enum2Str(Exception::Deadlock),
                        xSession::currentRetryCount());
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processGlobalMatchingRuleUpgrade),
                        enum2Str(Exception::TransientSqlConnectionError),
                        xSession::currentRetryCount());
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (exception)
            {
                logger.infoAndLogErrorCallStack(
                    staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processGlobalMatchingRuleUpgrade),
                    exception.toString());
                throw;
            }
            finally
            {
                logger.initActivities().addRemoveRuleSetLineCount(activityContext, removeMatchingRuleSetLineCount);
                logger.initActivities().addRemoveRuleCount(activityContext, removeMatchingRuleCount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmatchUnpostedMarkAsNewLineAndResetLine</Name>
				<Source><![CDATA[
    private static void unmatchUnpostedMarkAsNewLineAndResetLine()
    {
        System.Exception exception;
        int64 unmatchUnpostedMarkAsNewCount = 0;
        int64 removeLinePostTableCount = 0;
        int64 resetLineCount = 0;
        BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addActivityContext(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, unmatchUnpostedMarkAsNewLineAndResetLine)))
        {
            try
            {
                Set influencedStatementRecIdSet = new Set(Types::int64);
                BankStmtISOAccountStatement statement;
                BankStmtISOReportEntry statementLine;
                while select statementLine
                    where statementLine.Reconciled == NoYes::No
                        && statementLine.IsNewBankDocument == NoYes::Yes
                        && statementLine.Voucher == ''
                    join statement
                        where statementLine.BankStmtISOAccountStatement == statement.RecId
                            && statement.Voucher == ''
                {
                    // Unmatch the unposted mark as new statement line from the open worksheet
                    BankReconciliationMatchingItem matchingItem = BankReconciliationMatchingItem::findValidByStatementLineRecId(statementLine.RecId);
                    if (matchingItem)
                    {
                        ttsbegin;
                        BankReconciliationMatching matching = BankReconciliationMatching::find(matchingItem.BankReconciliationMatching);
                        if (matching)
                        {
                            BankReconciliationMatchingMatchProcessor::processUnmatch(
                                matching.BankReconciliationHeader,
                                statementLine.RecId,
                                BankReconciliationMatchingEntryType::BankStatement);
                                unmatchUnpostedMarkAsNewCount++;
                        }
                        influencedStatementRecIdSet.add(statement.RecId);
                        ttscommit;
                    }
                    // Remove the line post table if exists, reset marked line and posting info
                    BankStatementLinePostTable linePostTable = BankStatementLinePostTable::find(statementLine.BankStatementLinePostTable);
                    if (linePostTable)
                    {
                        ttsbegin;
                        linePostTable.deleteLinePostTableAndResetLine();
                        removeLinePostTableCount++;
                        ttscommit;
                    }
                    else
                    {
                        // Only reset the marked line and posting info
                        ttsbegin;
                        statementLine.resetDraftPostingStatementLineAndPostingInfo();
                        resetLineCount++;
                        ttscommit;
                    }
                }

                SetEnumerator influencedStatementRecIdSetEnumerator = influencedStatementRecIdSet.getEnumerator();
                while (influencedStatementRecIdSetEnumerator.moveNext())
                {
                    BankStmtISOAccountStatement influencedStatement = BankStmtISOAccountStatement::find(influencedStatementRecIdSetEnumerator.current());
                    if (statement && statement.Status == BankStatementStatus::Matched)
                    {
                        statement.refreshMatchingStatus();
                    }
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.infoAndLogErrorCallStack(
                            staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, unmatchUnpostedMarkAsNewLineAndResetLine),
                            enum2Str(Exception::UpdateConflictNotRecovered),
                            xSession::currentRetryCount());
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, unmatchUnpostedMarkAsNewLineAndResetLine),
                        enum2Str(Exception::Deadlock),
                        xSession::currentRetryCount());
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, unmatchUnpostedMarkAsNewLineAndResetLine),
                        enum2Str(Exception::TransientSqlConnectionError),
                        xSession::currentRetryCount());
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (exception)
            {
                logger.infoAndLogErrorCallStack(
                    staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, unmatchUnpostedMarkAsNewLineAndResetLine),
                    exception.toString());
                throw;
            }
            finally
            {
                logger.initActivities().addLegalEntityRecId(activityContext);
                logger.initActivities().addUnmatchUnpostedLineCount(activityContext, unmatchUnpostedMarkAsNewCount);
                logger.initActivities().addRemoveLinePostTableCount(activityContext, removeLinePostTableCount);
                logger.initActivities().addResetLineCount(activityContext, resetLineCount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOpenReconciliationHeaderCutOffDateForAccountingDate</Name>
				<Source><![CDATA[
    private static void updateOpenReconciliationHeaderCutOffDateForAccountingDate()
    {
        System.Exception exception;
        int64 updateCutOffDateForAccountingDateCount = 0;
        BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addActivityContext(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateOpenReconciliationHeaderCutOffDateForAccountingDate)))
        {
            try
            {
                BankReconciliationHeader openReconciliationHeader;
                while select forupdate openReconciliationHeader
                    where openReconciliationHeader.IsReconciled == NoYes::No
                {
                    ttsbegin;
                    BankStmtISOAccountStatement statement;
                    BankStmtISOReportEntry statementLine;
                    select maxof(AccountingDate) from statementLine
                        where statementLine.Reconciled == NoYes::No
                        join RecId from statement
                            where statementLine.BankStmtISOAccountStatement == statement.RecId
                                && statement.BankAccountTable == openReconciliationHeader.AccountId
                                && statement.Status != BankStatementStatus::Open;
                    if (statementLine.AccountingDate > openReconciliationHeader.CutOffDate)
                    {
                        openReconciliationHeader.updateCutOffDateAfterSpecificDate(statementLine.AccountingDate);
                        updateCutOffDateForAccountingDateCount++;
                    }
                    ttscommit;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.infoAndLogErrorCallStack(
                            staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateOpenReconciliationHeaderCutOffDateForAccountingDate),
                            enum2Str(Exception::UpdateConflictNotRecovered),
                            xSession::currentRetryCount());
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateOpenReconciliationHeaderCutOffDateForAccountingDate),
                        enum2Str(Exception::Deadlock),
                        xSession::currentRetryCount());
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor,updateOpenReconciliationHeaderCutOffDateForAccountingDate),
                        enum2Str(Exception::TransientSqlConnectionError),
                        xSession::currentRetryCount());
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (exception)
            {
                logger.infoAndLogErrorCallStack(
                    staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateOpenReconciliationHeaderCutOffDateForAccountingDate),
                    exception.toString());
                throw;
            }
            finally
            {
                logger.initActivities().addLegalEntityRecId(activityContext);
                logger.initActivities().addUpdateWorksheetDateCount(activityContext, updateCutOffDateForAccountingDateCount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPostedButNotMatchedLine</Name>
				<Source><![CDATA[
    private static void processPostedButNotMatchedLine()
    {
        System.Exception exception;
        int64 matchPostedLineCount = 0;
        BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addActivityContext(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processPostedButNotMatchedLine)))
        {
            try
            {
                BankStmtISOAccountStatement statement;
                BankStmtISOReportEntry statementLine;
                BankReconciliationMatchingItem matchingItem;
                while select RecId from statementLine
                    where statementLine.Reconciled == NoYes::No
                        && statementLine.IsNewBankDocument == NoYes::Yes
                    join statement
                        where statementLine.BankStmtISOAccountStatement == statement.RecId
                            && (statement.Voucher != '' || statementLine.Voucher != '')
                            && statement.Status != BankStatementStatus::Open
                    notexists join RecId from matchingItem
                        where matchingItem.BankStmtISOReportEntry == statementLine.RecId
                {
                    ttsbegin;
                    BankReconciliationHeader reconciliationHeader = BankReconciliationHeader::findActiveHeaderByAccountId(statement.BankAccountTable);
                    if (reconciliationHeader.RecId == 0)
                    {
                        reconciliationHeader = BankReconciliationHeader::createNewReconciliation(statement.BankAccountTable);
                    }
                    if (reconciliationHeader.RecId)
                    {
                        date statementToDateWithCompanyTimeZone = statement.getToDate();
                        if (statementToDateWithCompanyTimeZone > reconciliationHeader.CutOffDate)
                        {
                            reconciliationHeader.selectForUpdate(true);
                            reconciliationHeader.CutOffDate = statementToDateWithCompanyTimeZone;
                            reconciliationHeader.doUpdate();
                        }
                        BankReconciliationMatchingMatchProcessor matchProcessor = BankReconciliationMatchingMatchProcessor::construct(reconciliationHeader);
                        matchProcessor.addEntry(BankReconciliationMatchingEntry::construct(BankReconciliationMatchingEntryType::BankStatement, statementLine.RecId));
                        matchProcessor.processMatch();
                        matchPostedLineCount++;

                        if (statement.Status == BankStatementStatus::Validated)
                        {
                            statement.updateStatus(BankStatementStatus::Matched);
                        }
                    }
                    ttscommit;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.infoAndLogErrorCallStack(
                            staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processPostedButNotMatchedLine),
                            enum2Str(Exception::UpdateConflictNotRecovered),
                            xSession::currentRetryCount());
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processPostedButNotMatchedLine),
                        enum2Str(Exception::Deadlock),
                        xSession::currentRetryCount());
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processPostedButNotMatchedLine),
                        enum2Str(Exception::TransientSqlConnectionError),
                        xSession::currentRetryCount());
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (exception)
            {
                logger.infoAndLogErrorCallStack(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processPostedButNotMatchedLine), exception.toString());
                throw;
            }
            finally
            {
                logger.initActivities().addLegalEntityRecId(activityContext);
                logger.initActivities().addMatchPostedLineCount(activityContext, matchPostedLineCount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateMatchingId</Name>
				<Source><![CDATA[
    private static void generateMatchingId(date _upgradeAfterDate)
    {
        System.Exception exception;
        int64 generateIdWorksheetCount = 0;
        BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addActivityContext(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, generateMatchingId)))
        {
            try
            {
                BankReconciliationHeader reconciliationHeader;
                while select RecId from reconciliationHeader
                    where reconciliationHeader.CutOffDate >= _upgradeAfterDate
                {
                    ttsbegin;
                    int64 nextMatchingID = BankReconciliationMatching::getNextMatchingId(reconciliationHeader.RecId);
                    BankReconciliationMatching matching;
                    while select forupdate RecId from matching
                        where matching.BankReconciliationHeader == reconciliationHeader.RecId
                            && matching.MatchingId == 0
                    {
                        matching.MatchingId = nextMatchingID;
                        matching.doUpdate();
                        nextMatchingID++;
                    }
                    generateIdWorksheetCount++;
                    ttscommit;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.infoAndLogErrorCallStack(
                            staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, generateMatchingId),
                            enum2Str(Exception::UpdateConflictNotRecovered),
                            xSession::currentRetryCount());
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, generateMatchingId),
                        enum2Str(Exception::Deadlock),
                        xSession::currentRetryCount());
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, generateMatchingId),
                        enum2Str(Exception::TransientSqlConnectionError),
                        xSession::currentRetryCount());
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch
            {
                logger.infoAndLogErrorCallStack(
                    staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, generateMatchingId),
                    exception.toString());
                throw;
            }
            finally
            {
                logger.initActivities().addLegalEntityRecId(activityContext);
                logger.initActivities().addAfterDate(activityContext, _upgradeAfterDate);
                logger.initActivities().addGenerateIdWorksheetCount(activityContext, generateIdWorksheetCount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPostedTransactionMatching</Name>
				<Source><![CDATA[
    private static void processPostedTransactionMatching(date _upgradeAfterDate)
    {
        System.Exception exception;
        int64 generatePostedTransMatchingItemCount = 0;
        BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addActivityContext(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processPostedTransactionMatching)))
        {
            try
            {
                ttsbegin;
                BankReconciliationMatchingItem documentMatchingItem;
                BankReconciliationMatchingItem statementMatchingItem;
                BankReconciliationMatching statementMatching;
                BankReconciliationHeader reconciliationHeader;
                BankDocumentTable bankDocumentTable;
                BankStmtISOReportEntry statementLine;

                // Generate the history details for the posted transactions
                BankReconciliationHistoryDetails matchingHistory;
                matchingHistory.skipAosValidation(true);
                matchingHistory.skipDatabaseLog(true);
                matchingHistory.skipDataMethods(true);
                matchingHistory.skipEvents(true);
                insert_recordset matchingHistory (BankDocumentTable, BankReconciliationHeader)
                    select RecId from bankDocumentTable
                        where bankDocumentTable.SourceRelationType == tableNum(BankStmtISOReportEntry)
                            join statementLine where statementLine.RecId == bankDocumentTable.SourceRecId
                                && statementLine.Reconciled == NoYes::Yes
                            join statementMatchingItem where statementMatchingItem.BankStmtISOReportEntry == statementLine.RecId
                            join statementMatching where statementMatching.RecId == statementMatchingItem.BankReconciliationMatching
                            join RecId from reconciliationHeader where reconciliationHeader.RecId == statementMatching.BankReconciliationHeader
                                && reconciliationHeader.CutOffDate >= _upgradeAfterDate
                                && reconciliationHeader.IsReconciled == NoYes::Yes
                            notexists join documentMatchingItem where documentMatchingItem.BankDocumentTable == bankDocumentTable.RecId;

                // For log use, count the number of posted transaction matching items that need to be generated
                select count(RecId) from bankDocumentTable
                    where bankDocumentTable.SourceRelationType == tableNum(BankStmtISOReportEntry)
                        join RecId from statementLine where statementLine.RecId == bankDocumentTable.SourceRecId
                        join RecId from statementMatchingItem where statementMatchingItem.BankStmtISOReportEntry == statementLine.RecId
                        join RecId from statementMatching where statementMatching.RecId == statementMatchingItem.BankReconciliationMatching
                        join RecId from reconciliationHeader where reconciliationHeader.RecId == statementMatching.BankReconciliationHeader
                            && reconciliationHeader.CutOffDate >= _upgradeAfterDate
                        notexists join documentMatchingItem where documentMatchingItem.BankDocumentTable == bankDocumentTable.RecId;
                generatePostedTransMatchingItemCount = bankDocumentTable.RecId;

                // Generate the posted transaction matching items
                BankReconciliationMatchingItem documentNewMatchingItem;
                documentNewMatchingItem.skipAosValidation(true);
                documentNewMatchingItem.skipDatabaseLog(true);
                documentNewMatchingItem.skipDataMethods(true);
                documentNewMatchingItem.skipEvents(true);
                insert_recordset documentNewMatchingItem (BankDocumentTable, BankReconciliationMatching)
                    select RecId from bankDocumentTable
                        where bankDocumentTable.SourceRelationType == tableNum(BankStmtISOReportEntry)
                            join statementLine where statementLine.RecId == bankDocumentTable.SourceRecId
                            join statementMatchingItem where statementMatchingItem.BankStmtISOReportEntry == statementLine.RecId
                            join RecId from statementMatching where statementMatching.RecId == statementMatchingItem.BankReconciliationMatching
                            join reconciliationHeader where reconciliationHeader.RecId == statementMatching.BankReconciliationHeader
                                && reconciliationHeader.CutOffDate >= _upgradeAfterDate
                            notexists join documentMatchingItem where documentMatchingItem.BankDocumentTable == bankDocumentTable.RecId;

                ttscommit;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.infoAndLogErrorCallStack(
                            staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processPostedTransactionMatching),
                            enum2Str(Exception::UpdateConflictNotRecovered),
                            xSession::currentRetryCount());
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processPostedTransactionMatching),
                        enum2Str(Exception::Deadlock),
                        xSession::currentRetryCount());
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processPostedTransactionMatching),
                        enum2Str(Exception::TransientSqlConnectionError),
                        xSession::currentRetryCount());
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (exception)
            {
                logger.infoAndLogErrorCallStack(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, processPostedTransactionMatching), exception.toString());
                throw;
            }
            finally
            {
                logger.initActivities().addLegalEntityRecId(activityContext);
                logger.initActivities().addAfterDate(activityContext, _upgradeAfterDate);
                logger.initActivities().addGenerateTransactoinMatchingItemCount(activityContext, generatePostedTransMatchingItemCount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatementHeaderPostedLineAccountingDate</Name>
				<Source><![CDATA[
    private static void updateStatementHeaderPostedLineAccountingDate(date _upgradeAfterDate)
    {
        System.Exception exception;
        int64 updateAccountingDateCount = 0;
        BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
        using (SysInstrumentationActivityContext activityContext = logger.initActivities().addActivityContext(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateStatementHeaderPostedLineAccountingDate)))
        {
            BankStmtISOAccountStatement statement;
            BankStmtISOReportEntry statementLine;
            select count(RecId) from statementLine
                join AccountingDate, RecId from statement
                    where statementLine.BankStmtISOAccountStatement == statement.RecId
                        && statement.AccountingDate >= _upgradeAfterDate
                        && statementLine.AccountingDate == dateNull()
                        && (statement.Voucher != '' || statementLine.Voucher != '')
                        && statement.Status != BankStatementStatus::Open;
            updateAccountingDateCount = statementLine.RecId;

            try
            {
                ttsbegin;
                update_recordset statementLine
                    setting AccountingDate = statement.AccountingDate
                    join AccountingDate, RecId from statement
                        where statementLine.BankStmtISOAccountStatement == statement.RecId
                            && statement.AccountingDate >= _upgradeAfterDate
                            && statementLine.AccountingDate == dateNull()
                            && (statement.Voucher != '' || statementLine.Voucher != '')
                            && statement.Status != BankStatementStatus::Open;
                ttscommit;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        logger.infoAndLogErrorCallStack(
                            staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateStatementHeaderPostedLineAccountingDate),
                            enum2Str(Exception::UpdateConflictNotRecovered),
                            xSession::currentRetryCount());
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateStatementHeaderPostedLineAccountingDate),
                        enum2Str(Exception::Deadlock),
                        xSession::currentRetryCount());
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateStatementHeaderPostedLineAccountingDate),
                        enum2Str(Exception::TransientSqlConnectionError),
                        xSession::currentRetryCount());
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch (exception)
            {
                logger.infoAndLogErrorCallStack(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateStatementHeaderPostedLineAccountingDate), exception.toString());
                throw;
            }
            finally
            {
                logger.initActivities().addLegalEntityRecId(activityContext);
                logger.initActivities().addLineAccountingDateUpdateCount(activityContext, updateAccountingDateCount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWizardExecutionStatus</Name>
				<Source><![CDATA[
    private static void updateWizardExecutionStatus(BankModernReconciliationUpgradeWizardExecutionStatus _status)
    {
        System.Exception exception;
        BankModernReconciliationUpgradeWizardInstrumentationLogger logger = BankModernReconciliationUpgradeWizardInstrumentationLogger::createLogger();
        try
        {
            ttsbegin;
            BankParameters bankParameter = BankParameters::find(true);
            if (bankParameter)
            {
                bankParameter.BankModernReconciliationUpgradeWizardExecutionStatus = _status;
                bankParameter.doUpdate();
            }
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.infoAndLogErrorCallStack(
                        staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateWizardExecutionStatus),
                        enum2Str(Exception::UpdateConflictNotRecovered),
                        xSession::currentRetryCount());
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                logger.infoAndLogErrorCallStack(
                    staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateWizardExecutionStatus),
                    enum2Str(Exception::Deadlock),
                    xSession::currentRetryCount());
                throw Exception::Deadlock;
            }
            else
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                logger.infoAndLogErrorCallStack(
                    staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateWizardExecutionStatus),
                    enum2Str(Exception::TransientSqlConnectionError),
                    xSession::currentRetryCount());
                throw Exception::TransientSqlConnectionError;
            }
        }
        catch (exception)
        {
            logger.infoAndLogErrorCallStack(staticMethodStr(BankModernReconciliationUpgradeWizardProcessor, updateWizardExecutionStatus), exception.toString());
            throw;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>