<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UserRequestManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.Environment;

// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class UserRequestManager
{
    UserRequestAction requestAction;

    #define.PortalUrlPlaceholder('portalurl')

    // Character that seperates the domain name from the user account name for a down-level logon name.

    // Character that seperates the user account name from the domain name (also known as UPN suffix) for a User Principal Name (UPN) logon name.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAddUserRequestCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether user request creation is allowed based on the current state of the
    ///    <c>UserRequestManager</c> object.
    /// </summary>
    /// <returns>
    ///    true if the user request can be created; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Sub types of the <c>UserRequest</c> table can override this method to check the status.
    /// </remarks>
    public boolean allowAddUserRequestCreate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowInactivateUserRequestCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether user request creation is allowed based on the current state of the
    ///    <c>UserRequestManager</c> object
    /// </summary>
    /// <returns>
    ///    true if the user request can be created; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Sub types of <c>UserRequest</c> table can override this method to check the status.
    /// </remarks>
    public boolean allowInactivateUserRequestCreate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateUserRelations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Associates user relations to the user for the user request.
    /// </summary>
    /// <param name="_userRequest">
    ///    The user request for which to associate user relations.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void associateUserRelations(UserRequest _userRequest)
    {
        if (!DirPersonUser::exist(_userRequest.User))
        {
            DirPersonUser::createDirPersonUser(_userRequest.User, _userRequest.Person);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateUserRoles</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Associates user security roles to the user for the user request.
    /// </summary>
    /// <param name="_userRequest">
    ///    The user request in which to associate roles.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void associateUserRoles(UserRequest _userRequest)
    {
        SecurityUserRole userRole;

        select RecId from userRole
            where userRole.SecurityRole == _userRequest.RequestedRole
            && userRole.User == _userRequest.User;

        if (userRole.RecId == 0)
        {
            userRole.clear();
            userRole.SecurityRole = _userRequest.RequestedRole;
            userRole.User = _userRequest.User;

            ttsbegin;
            userRole.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>entityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method should be overridden to return the external entity type that is associated with the
    /// manager class.
    /// </summary>
    /// <returns>
    /// An exception.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public UserExternalPartyEntityType entityType()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateUserId</Name>
				<Source><![CDATA[
    private userId generateUserId(UserRequest _userRequest)
    {
        RandomGenerate  random = RandomGenerate::construct();
        int             character;
        int             i = 0;
        userId          userId;
        UserInfo        userInfo;
        SysDictType     userIdType = new SysDictType(extendedTypeNum(userId));
        int             userIdLength = userIdType.stringLen();

        #define.AsciiLowerCaseLetterStart(97)
        #define.AsciiNumberStart(48)
        #define.NumberOfLettersAndNumbers(35)
        #define.LetterStartOffset(10)

        userId = this.getUserAlias(_userRequest);

        select RecId from userInfo where userInfo.Id == userId;

        while (userInfo.RecId != 0)
        {
            userId = '';
            for (i = 0; i < userIdLength; i++)
            {
                character = random.randomInt(0, #NumberOfLettersAndNumbers);

                if (character >= #LetterStartOffset)
                {
                    userId += num2char(character + #AsciiLowerCaseLetterStart - #LetterStartOffset);
                }
                else
                {
                    userId += num2char(character + #AsciiNumberStart);
                }
            }

            // Generate user ids until we find a unique one
            select RecId from userInfo where userInfo.Id == userId;
        }

        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default company for new users.
    /// </summary>
    /// <param name="_userRequest">
    ///    The user request for which to get the default company.
    /// </param>
    /// <returns>
    ///    The company account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected dataAreaId getDefaultCompany(UserRequest _userRequest)
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDomain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the domain for the user request.
    /// </summary>
    /// <param name="_userRequest">
    ///    The user request for which to get the domain.
    /// </param>
    /// <returns>
    ///    The domain for the user request.
    /// </returns>
    /// <remarks>
    ///    For claims-based requests, the domain will be the claims provider name.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NetworkDomain getDomain(UserRequest _userRequest)
    {
        return EnvironmentFactory::GetApplicationEnvironment().get_Provisioning().get_AdminIdentityProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewUserEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the e-mail template ID for the new user notification.
    /// </summary>
    /// <returns>
    ///    The e-mail template ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SysEmailSystemId getNewUserEmailTemplate()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPortalSiteUrl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the SharePoint portal base URL for the user request.
    /// </summary>
    /// <returns>
    ///    The SharePoint portal base URL.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public URL getPortalSiteUrl()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryPasswordEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the e-mail template ID for the temporary password notification.
    /// </summary>
    /// <returns>
    ///    The template ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected SysEmailSystemId getTemporaryPasswordEmailTemplate()
    {
        return UserRequestParameters::find().TemporaryPasswordEmailTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserAlias</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the user alias to use to create the user for the request.
    /// </summary>
    /// <param name="_userRequest">
    ///    The user request.
    /// </param>
    /// <returns>
    ///    The user alias.
    /// </returns>
    /// <remarks>
    ///     If the user request has a user alias defined then that alias is used. Otherwise using the email from the user request.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected NetworkAlias getUserAlias(UserRequest _userRequest)
    {
        NetworkAlias    alias = _userRequest.UserAlias;

        if (!alias)
        {
            alias = _userRequest.email();
        }

        return alias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the username that is used to create the user for the request.
    /// </summary>
    /// <param name="_userRequest">
    ///    The user request.
    /// </param>
    /// <returns>
    ///    The username.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected UserName getUserName(UserRequest _userRequest)
    {
        return DirPerson::find(_userRequest.Person).name(DirPersonName::find(_userRequest.Person));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inactiveExternalUserRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the user security roles based on the external entity type.
    /// </summary>
    /// <param name="_userRequest">
    /// The <c>UserRequest</c> record that contains the user ID.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void inactiveExternalUserRole(UserRequest _userRequest)
    {
        UserExternalParty   otherExternalParty;
        DirExternalRole     dirExternalRole;
        SecurityUserRole    userRole;

        // Check if there is any other external party record with the same entity type.
        // Remove related security role if not.
        select firstonly RecId from otherExternalParty
            where otherExternalParty.User == _userRequest.User &&
                otherExternalParty.ExternalEntityType == this.entityType();

        if (!otherExternalParty.RecId)
        {
            ttsbegin;

            delete_from userRole
                exists join dirExternalRole
                where       userRole.User == _userRequest.User &&
                            userRole.SecurityRole == dirExternalRole.Role &&
                            dirExternalRole.EntityType == this.entityType();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inactiveUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inactivates the user who is associated to the request.
    /// </summary>
    /// <param name="_userRequest">
    ///    The user request for which to inactivate the user.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void inactiveUser(UserRequest _userRequest)
    {
        UserInfo            userInfo;
        UserExternalParty   otherExternalParty;
        DirPersonUser       dirPersonUser;

        ttsbegin;

        this.inactiveExternalUserRole(_userRequest);

        // Disable user if there is no user relations including worker relations and external relations
        // or this is worker user request
        select firstonly RecId from otherExternalParty
            where otherExternalParty.User == _userRequest.User;

        if (!otherExternalParty.RecId )
        {
            // Inactivate user
            select forupdate userInfo where userInfo.Id == _userRequest.User;
            userInfo.Enable = false;
            userInfo.update();

            // Expire DirPersonUser
            while select RecId from dirPersonUser
                where dirPersonUser.User == _userRequest.User
            {
                DirPersonUser::expireRecord(dirPersonUser.RecId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>UserRequestManager</c> object by using a related record.
    /// </summary>
    /// <param name="_relatedRecord">
    ///    The related record.
    /// </param>
    /// <remarks>
    ///    Sub types of the <c>UserRequest</c> table can override this method to initialize the request.
    /// </remarks>
    public void initFrom(Common _relatedRecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRequestID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a new request ID based on the user request number sequence.
    /// </summary>
    /// <returns>
    ///    The new request ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public UserRequestID newRequestID()
    {
        SysLastValue            nextNumSeq;
        NumberSeq               numberSeq;
        NumberSequenceReference numberSeqReference;
        UserRequestID           requestID;

        numberSeqReference = NumberSeqReference::findReference(extendedTypeNum(UserRequestID));

        if (numberSeqReference.NumberSequenceId)
        {
            nextNumSeq.Value = conNull();
            numberSeq = NumberSeq::newGetNumFromId(
                numberSeqReference.NumberSequenceId,
                true,
                true,
                nextNumSeq,
                false);

            requestID = numberSeq.num();
        }

        return requestID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>provisionUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new user in <c>UserInfo</c> table based on the user request, then associates the user with the role
    ///     specified on the user request (if any) and associates the user with the person from the user request.
    /// </summary>
    /// <param name = "_userRequest">The user request to provision user for</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void provisionUser(UserRequest _userRequest)
    {
        this.setupUser(_userRequest);
        this.associateUserRoles(_userRequest);
        this.associateUserRelations(_userRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the user request action for new requests.
    /// </summary>
    /// <param name="_requestAction">
    ///    The new user request action.
    /// </param>
    /// <returns>
    ///    The user request action.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public UserRequestAction requestAction(UserRequestAction _requestAction = requestAction)
    {
        requestAction = _requestAction;
        return requestAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendNewUserEmail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sends the new user notification e-mail.
    /// </summary>
    /// <param name="_userRequest">
    ///    The user request for which to send the e-mail.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void sendNewUserEmail(UserRequest _userRequest)
    {
        Map mappings = new Map(Types::String, Types::String);

        mappings.insert(#PortalUrlPlaceholder, this.getPortalSiteUrl());

        SysEmailSystemTable::sendMail(
            this.getNewUserEmailTemplate(),
            DirPartyTable::findRec(_userRequest.Person).LanguageId,
            _userRequest.email(),
            mappings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendUserAliasEmail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sends the user alias notification e-mail.
    /// </summary>
    /// <param name="_userRequest">
    ///    The user request.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void sendUserAliasEmail(UserRequest _userRequest)
    {
        Map mappings = new Map(Types::String, Types::String);

        #define.UserAliasPlaceholder('useralias')

        mappings.insert(#UserAliasPlaceHolder, _userRequest.UserAlias);
        mappings.insert(#PortalUrlPlaceholder, this.getPortalSiteUrl());

        SysEmailSystemTable::sendMail(
            UserRequestParameters::find().UserAliasEmailTemplate,
            DirPartyTable::findRec(_userRequest.Person).LanguageId,
            _userRequest.email(),
            mappings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the user who is being provisioned for the user request.
    /// </summary>
    /// <param name="_userRequest">
    ///    The user request.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setupUser(UserRequest _userRequest)
    {
        UserId                  userId;
        UserInfo                userInfo, userInfoLookup;
        xAxaptaUserManager      userManager;
        xAxaptaUserDetails      userDetails;
        UserSetup               userSetup;

        NetworkAlias userAlias = this.getUserAlias(_userRequest);
        NetworkDomain domain = this.getDomain(_userRequest);
        UserAccountType accountType = UserAccountType::ClaimsUser;

        if (_userRequest.User == '')
        {
            userId = this.generateUserId(_userRequest);

            userSetup = infolog.getUserSetup();
            if (userSetup != null)
            {
                userSetup.setDefaults(userInfo);
            }

            userManager = new xAxaptaUserManager();

            userDetails = userManager.getSIDFromName(userAlias, domain, accountType);

            userInfo.Id = userId;
            userInfo.AccountType = accountType;
            userInfo.NetworkAlias = userAlias;
            userInfo.NetworkDomain = domain;
            userInfo.Company = strUpr(this.getDefaultCompany(_userRequest));
            userInfo.Language = DirPartyTable::findRec(_userRequest.Person).LanguageId;
            userInfo.Helplanguage = DirPartyTable::findRec(_userRequest.Person).LanguageId;

            if (userDetails != null)
            {
                userInfo.Sid = userDetails.getUserSid(0);
                userInfo.Name = this.getUserName(_userRequest);
                userInfo.NetworkDomain = userDetails.getUserDomain(0);
                userInfo.Enable = true;
            }

            // Search for the same SID in the table
            select firstonly id, sid from userInfoLookup
                where userInfoLookup.Sid == userInfo.sid
                    && userInfoLookup.Id != userId
                    && userInfo.enable == true;
            if (userInfoLookup.id)
            {
                // If the SID is already present in the table, throw an error
                throw error("@SYS93694");
            }

            _userRequest.User = userId;

            ttsbegin;
            userInfo.insert();
            _userRequest.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitUserRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and submits a user request based on a related record to the workflow.
    /// </summary>
    /// <param name="_relatedRecord">
    ///    The related record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void submitUserRequest(Common _relatedRecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a table ID that is related to the <c>UserRequestManager</c> object.
    /// </summary>
    /// <returns>
    ///    The table ID that inherits from the <c>UserRequest</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public tableId tableId()
    {
        return tableNum(UserRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateListPageQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the list page query.
    /// </summary>
    /// <param name="_query">
    ///   The query to update.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateListPageQuery(Query _query)
    {
        QueryBuildRange range;

        if (this.tableId() != tableNum(UserRequest))
        {
            range = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(UserRequest)), fieldNum(UserRequest, InstanceRelationType));
            range.status(RangeStatus::Hidden);
            range.value(SysQuery::value(DictTable::getRelationTypeFromTableName(tableId2name(this.tableId()))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static UserRequestManager construct()
    {
        return new UserRequestManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFrom</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static UserRequestManager constructFrom(Common _record)
    {
        UserRequestManager requestManager;

        if (_record is VendUserRequest)
        {
            requestManager = VendUserRequestManager::construct();
        }
        else if (_record is VendRequestUserRequest)
        {
            requestManager = VendRequestUserRequestManager::construct();
        }

        return requestManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromManagedContentItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>UserRequestManager</c> class by using a managed content item.
    /// </summary>
    /// <param name="_managedContentItemName">
    ///    The managed content item that represents a user request type and user request action.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>UserRequestManager</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static UserRequestManager constructFromManagedContentItem(str _managedContentItemName)
    {
        UserRequestManager requestManager;
        #define.VendUserRequestExternalAdd("VendUserRequestExternalAdd")
        #define.VendUserRequestExternalInactivateAdd("VendUserRequestExternalInactivateAdd")
        #define.UserRequestExternalEdit("UserRequestExternalEdit")
        #define.UserRequestExternalInfo("UserRequestExternalInfo")
        #define.VendRequestContactInfo("VendRequestContactInfo")
        #define.VendUserRequestExternalAdd("VendUserRequestExternalAdd")
        #define.VendUserRequestExternalInactivateAdd("VendUserRequestExternalInactivateAdd")

        switch (_managedContentItemName)
        {
            case #VendUserRequestExternalAdd:
            case #UserRequestExternalEdit:
            case #UserRequestExternalInfo:
            case #VendRequestContactInfo:
                requestManager = VendUserRequestManager::construct();
                requestManager.requestAction(UserRequestAction::AddUser);
                break;
            case #VendUserRequestExternalInactivateAdd:
                requestManager = VendUserRequestManager::construct();
                requestManager.requestAction(UserRequestAction::InactivateUser);
                break;

            default:
                requestManager = UserRequestManager::construct();
                break;
        }

        return requestManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>UserRequestManager</c> class by using a menu item.
    /// </summary>
    /// <param name="_menuItemName">
    ///    The menu item that represents a user request type and user request action.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>UserRequestManager</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static UserRequestManager constructFromMenuItem(menuItemName _menuItemName)
    {
        UserRequestManager requestManager;
        MenuFunction menuItem = new MenuFunction(_menuItemName, MenuItemType::Display);

        switch (_menuItemName)
        {
            case menuitemDisplayStr(VendUserRequestAdd):
            case menuitemDisplayStr(VendUserRequestInactivateAdd):
            case menuitemDisplayStr(VendUserRequestList):
            case menuitemDisplayStr(VendUserRequestExternalListPage):
            case menuitemDisplayStr(VendProfileContactListPage):
                requestManager = VendUserRequestManager::construct();
                break;
            case menuitemDisplayStr(VendRequestUserRequestList):
                requestManager = VendRequestUserRequestManager::construct();
                break;
            default:
                requestManager = UserRequestManager::construct();
                break;
        }

        if (menuItem.enumTypeParameter() == enumNum(UserRequestAction))
        {
            requestManager.requestAction(menuItem.enumParameter());
        }

        return requestManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the account type that is based on a user request authentication mode.
    /// </summary>
    /// <param name="_mode">
    ///    The authentication mode for which to get the account type.
    /// </param>
    /// <returns>
    ///    The account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static UserAccountType getAccountType(UserRequestAuthenticationMode _mode)
    {
        UserAccountType accountType;

        switch (_mode)
        {
            case UserRequestAuthenticationMode::ActiveDirectory:
                accountType = UserAccountType::ADUser;
                break;
            default:
                accountType = UserAccountType::ClaimsUser;
                break;
        }

        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        UserRequestManager requestManager;
        UserRequest userRequest;

        if (_args.record() is UserRequest)
        {
            userRequest = _args.record();
            requestManager = UserRequestManager::constructFrom(userRequest);

            if (userRequest.isInactivateUserRequest())
            {
                requestManager.inactiveUser(userRequest);
            }
            else
            {
                requestManager.provisionUser(userRequest);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name ID that will be used for generating the SID.
    /// </summary>
    /// <param name="_userRequest">
    /// A record from the <c>UserRequest</c> table.
    /// </param>
    /// <returns>
    /// The name ID that will be used for generating the SID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public UserRequestNameId getNameId(UserRequest _userRequest)
    {
        return _userRequest.UserAlias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendACSAuthenticationEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the user authentication notification e-mail.
    /// </summary>
    /// <param name="_userRequest">
    /// The <c>UserRequest</c> record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void sendACSAuthenticationEmail(UserRequest _userRequest)
    {
        Map mappings = new Map(Types::String, Types::String);

        #define.AuthenticationURLPlaceholder('url')

        mappings.insert(#AuthenticationURLPlaceholder, UserRequestACSUrlStorage::getUrl(_userRequest.RecId));

        SysEmailSystemTable::sendMail(
            UserRequestParameters::find().UserACSAuthenticationEmailTemplate,
            DirPartyTable::findRec(_userRequest.Person).LanguageId,
            _userRequest.email(),
            mappings, '', '', true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>