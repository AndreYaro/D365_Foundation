<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[PurchCalcTaxFactoryAttribute(tableStr(VendInvoiceJour))]
class PurchCalcTax_Invoice extends PurchCalcTax
{
    VendInvoiceJour vendInvoiceJour;
    VendInvoiceTrans vendInvoiceTrans;
    VendInvoiceInfoTable vendInvoiceInfoTable;
    VendInvoiceInfoLine vendInvoiceInfoLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cfopTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>CFOPTable_BR</c> for the current record.
    /// </summary>
    /// <returns>
    ///     The <c>CFOPTable_BR</c> record.
    /// </returns>
    protected CFOPTable_BR cfopTable_BR()
    {
        VendInvoiceTrans localVendInvoiceTrans;

        select firstonly localVendInvoiceTrans
            where localVendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId &&
                localVendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate &&
                localVendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId &&
                localVendInvoiceTrans.PurchID == vendInvoiceJour.PurchId &&
                localVendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup;

        return CFOPTable_BR::find(localVendInvoiceTrans.purchLine().cfopTable_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return vendInvoiceJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the Document Date if defined else trans date is returned
    /// </summary>
    /// <returns>
    /// returns the Document Date if defined else trans date is returned
    /// </returns>
    /// <remarks>
    /// Provides the Document Date if defined else trans date is returned.
    /// </remarks>
    DocumentDate documentDate()
    {
        return vendInvoiceInfoTable.DocumentDate ? vendInvoiceInfoTable.DocumentDate : vendInvoiceInfoTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    VendExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return vendInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return vendInvoiceJour.ExchRateSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate reportingCurrencyExchangeRate(date _date = dateNull())
    {
        return vendInvoiceJour.ReportingCurrencyExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreCalculatedSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the calculated sales tax should be ignored so that only tax amounts from tax
    ///    adjustments are used.
    /// </summary>
    /// <returns>
    ///    true if the calculated sales tax should be ignored; otherwise, false.
    /// </returns>
    public boolean ignoreCalculatedSalesTax()
    {
        return vendInvoiceInfoTable.IgnoreCalculatedSalesTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void initCursor()
    {
        select nofetch forupdate vendInvoiceTrans
            where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId &&
                vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId &&
                vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate &&
                vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup &&
                vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return vendInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether sales tax adjustments should be deleted when sales tax groups are changed on the
    ///    transaction.
    /// </summary>
    /// <returns>
    ///    true if sales tax adjustments should not be deleted when sales tax groups are changed on the
    ///    transaction; otherwise, false.
    /// </returns>
    public boolean keepSalesTaxAdjustments()
    {
        VendParameters vendParameters = VendParameters::find();

        if (vendParameters)
        {
            return vendParameters.KeepSalesTaxAdjustmentsForPO;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount markupAmount()
    {
        return markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        if (purchLine)
        {
            return purchLine.DefaultDimension;
        }
        else
        {
            return vendInvoiceJour.DefaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(VendInvoiceJour _vendInvoiceJour, ParmId _parmId)
    {
        super(_vendInvoiceJour);

        vendInvoiceJour = _vendInvoiceJour;
        vendInvoiceInfoTable = VendInvoiceInfoTable::findSourceDocumentHeader(vendInvoiceJour.SourceDocumentHeader);

        this.setHeaderReasonTableRefRecId(VendInvoiceJour_W::findVendInvoiceJour(vendInvoiceJour.RecId).ReasonTableRef);

        update = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        next vendInvoiceTrans;

        this.getPurchLine();
        this.initCursorMarkupLine(vendInvoiceTrans.TableId, vendInvoiceTrans.RecId);
                
        vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(vendInvoiceTrans.SourceDocumentLine);

        this.setLineReasonTableRefRecId(vendInvoiceTrans.ReasonTableRef);

        return vendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingRecID</Name>
				<Source><![CDATA[
    RecId origHeadingRecID()
    {
        return vendInvoiceInfoTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingTableID</Name>
				<Source><![CDATA[
    TableId origHeadingTableID()
    {
        return vendInvoiceInfoTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerVoucher, NoYes _post = NoYes::Yes)
    {
        super(_ledgerVoucher, _post);

        this.updateParentForTaxTrans();
        this.updateTaxWriteCode();
        this.endPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupRecId</Name>
				<Source><![CDATA[
    RecId purchMarkupRecId()
    {
        return markupTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupTableId</Name>
				<Source><![CDATA[
    TableId purchMarkupTableId()
    {
        return markupTrans.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void setTax(TaxWriteCode taxWriteCode, AmountCur amountCur)
    {
        vendInvoiceTrans.TaxWriteCode = taxWriteCode;
        vendInvoiceTrans.TaxAmount = amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur transLineAmount()
    {
        return vendInvoiceTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur transLineAmountInclTax()
    {
        return vendInvoiceTrans.lineAmountInclTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    PurchQty transQty()
    {
        return vendInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    RecId transRecId()
    {
        return vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    TableId transTableId()
    {
        return vendInvoiceInfoLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId transTransId()
    {
        return vendInvoiceTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return vendInvoiceJour.Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentForTaxTrans</Name>
				<Source><![CDATA[
    private void updateParentForTaxTrans()
    {
        TaxTrans taxTrans;
        SourceDocumentLine sourceDocumentLineTaxTrans, sourceDocumentLineTaxTransParent;
        VendInvoiceTrans vendInvoiceTransLocal;
        MarkupTrans markupTransLocal;

        taxTrans.skipDataMethods(true);

        // update parent for taxes on vendor invoice Lines
        update_recordSet taxTrans
        setting
            SourceTableId = vendInvoiceTransLocal.TableId,
            SourceRecId = vendInvoiceTransLocal.RecId,
            HeadingTableId = vendInvoiceJour.TableId
        where taxTrans.Voucher == vendInvoiceJour.LedgerVoucher &&
            taxTrans.TransDate == vendInvoiceJour.InvoiceDate
        join RecId from sourceDocumentLineTaxTrans
            where sourceDocumentLineTaxTrans.RecId == taxTrans.SourceDocumentLine &&
                sourceDocumentLineTaxTrans.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader
        join RecId from sourceDocumentLineTaxTransParent
            where sourceDocumentLineTaxTransParent.RecId == sourceDocumentLineTaxTrans.ParentSourceDocumentLine &&
                sourceDocumentLineTaxTransParent.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader
        join RecId, TableId from vendInvoiceTransLocal
            where vendInvoiceTransLocal.SourceDocumentLine == sourceDocumentLineTaxTransParent.RecId;

        // update parent for sales tax currency difference on vendor invoice Lines
        if (this.existsTaxTransWithoutSourceDocumentLine())
        {
            this.updateTaxTransWithoutSourceDocumentLine();
        }

        // update parent for taxes on miscellaneous charges
        update_recordSet taxTrans
        setting
            SourceTableId = markupTransLocal.TableId,
            SourceRecId = markupTransLocal.RecId,
            HeadingTableId = vendInvoiceJour.TableId
        where taxTrans.Voucher == vendInvoiceJour.LedgerVoucher &&
            taxTrans.TransDate == vendInvoiceJour.InvoiceDate
        join RecId from sourceDocumentLineTaxTrans
            where sourceDocumentLineTaxTrans.RecId == taxTrans.SourceDocumentLine &&
                sourceDocumentLineTaxTrans.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader
        join RecId from sourceDocumentLineTaxTransParent
            where sourceDocumentLineTaxTransParent.RecId == sourceDocumentLineTaxTrans.ParentSourceDocumentLine &&
                sourceDocumentLineTaxTransParent.SourceDocumentHeader == vendInvoiceJour.SourceDocumentHeader
        join RecId, TableId from markupTransLocal
            where markupTransLocal.SourceDocumentLine == sourceDocumentLineTaxTransParent.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTaxTransWithoutSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if there is a taxTrans with source document line is 0.
    /// </summary>
    /// <returns>True if exists, otherwise false.</returns>
    protected boolean existsTaxTransWithoutSourceDocumentLine()
    {
        TaxTrans taxTrans;

        select firstonly RecId from taxTrans
        where taxTrans.Voucher == vendInvoiceJour.LedgerVoucher &&
            taxTrans.TransDate == vendInvoiceJour.InvoiceDate &&
            TaxTrans.SourceDocumentLine == 0;
        
        return TaxTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxTransWithoutSourceDocumentLine</Name>
				<Source><![CDATA[
    protected void updateTaxTransWithoutSourceDocumentLine()
    {
        TaxTrans taxTrans;
        VendInvoiceTrans vendInvoiceTransLocal;
        VendInvoiceInfoLine vendInvoiceInfoLineLocal;
        VendInvoiceInfoTable vendInvoiceInfoTableLocal;

        update_recordset taxTrans
        setting
            SourceTableId = vendInvoiceTransLocal.TableId,
            SourceRecId = vendInvoiceTransLocal.RecId,
            HeadingTableId = vendInvoiceJour.TableId
        where taxTrans.Voucher == vendInvoiceJour.LedgerVoucher &&
            taxTrans.TransDate == vendInvoiceJour.InvoiceDate
        join RecId from vendInvoiceInfoLineLocal
            where taxtrans.SourceTableId == vendInvoiceInfoLineLocal.TableId &&
                taxtrans.SourceRecId == vendInvoiceInfoLineLocal.RecId
        join RecId from vendInvoiceInfoTableLocal
            where vendInvoiceInfoTableLocal.sourcedocumentheader == vendInvoiceJour.SourceDocumentHeader
        join RecId, TableId from vendInvoiceTransLocal
            where vendInvoiceTransLocal.SourceDocumentLine == vendInvoiceInfoLineLocal.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateTaxWriteCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if an update is allowed for field TaxWriteCode on <c>VendInvoiceTrans</c> and <c>MarkupTrans</c>.
    /// </summary>
    /// <returns>
    ///     true if <c>VendInvoiceTrans</c> and <c>MarkupTrans</c> should be updated; otherwise, false.
    /// </returns>
    protected boolean canUpdateTaxWriteCode()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxWriteCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>VendInvoiceTrans</c> and <c>MarkupTrans</c>.
    /// </summary>
    private void updateTaxWriteCode()
    {
        if (this.canUpdateTaxWriteCode())
        {
            VendInvoiceTrans vendInvoiceTransLocal;
            TaxSourceLineSummaryTmp taxSourceLineSummaryTmp;
            VendInvoiceInfoLine vendInvoiceInfoLineLocal;
            MarkupTrans markupTransPosted;

            vendInvoiceTransLocal.skipDataMethods(true);
            markupTransPosted.skipDataMethods(true);

            taxSourceLineSummaryTmp.linkPhysicalTableInstance(taxPost.getTaxSourceLineSummaryTmp());

            select firstonly RecId from taxSourceLineSummaryTmp;
            if (taxSourceLineSummaryTmp)
            {
                update_recordSet vendInvoiceTransLocal
                    setting TaxWriteCode = taxSourceLineSummaryTmp.PrintCode
                    where vendInvoiceTransLocal.InvoiceId == vendInvoiceJour.InvoiceId
                        && vendInvoiceTransLocal.InvoiceDate == vendInvoiceJour.InvoiceDate
                        && vendInvoiceTransLocal.PurchID == vendInvoiceJour.PurchId
                        && vendInvoiceTransLocal.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                        && vendInvoiceTransLocal.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                    join RecId from vendInvoiceInfoLineLocal
                        where vendInvoiceInfoLineLocal.SourceDocumentLine == vendInvoiceTransLocal.SourceDocumentLine
                            && vendInvoiceInfoLineLocal.ParmId == vendInvoiceInfoTable.ParmId
                            && vendInvoiceInfoLineLocal.TableRefId == vendInvoiceInfoTable.TableRefId
                    join PrintCode from taxSourceLineSummaryTmp
                        where taxSourceLineSummaryTmp.SourceRecId == vendInvoiceInfoLineLocal.RecId
                            && taxSourceLineSummaryTmp.SourceTableId == vendInvoiceInfoLineLocal.TableId;

                update_recordSet markupTransPosted
                    setting TaxWriteCode = taxSourceLineSummaryTmp.PrintCode
                    join PrintCode from taxSourceLineSummaryTmp
                        where taxSourceLineSummaryTmp.SourceRecId == markupTransPosted.RecId
                            && taxSourceLineSummaryTmp.SourceTableId == markupTransPosted.TableId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption_BR</Name>
				<Source><![CDATA[
    public boolean useAndConsumption_BR()
    {
        return vendInvoiceJour.VendFinalUser_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current transaction that is being posted supports
    /// <c>SubLedgerDistributions</c> and <c>SubLedgerJournalLines</c> records. By default, the base
    /// implementation does not support this. When the individual transaction supports the subledger table,
    /// they will need to override this and return true.
    /// </summary>
    /// <returns>
    /// true since the vendor invoice does support the subledger table.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///   true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRecalculateTax</Name>
				<Source><![CDATA[
    public boolean canRecalculateTax()
    {
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        boolean ret = true;

        if (vendInvoiceJour.SourceDocumentHeader)
        {
            ret = SourceDocumentAccountingValidator::canCalculateTaxesForDocument(vendInvoiceJour.SourceDocumentHeader);
        }

        if(TaxUncommitted::traceRecalculateTaxForFinalizedSourceDocument(ret))
        {
            str callStacking = TaxUncommitted::callStackInfo();
            taxEventSourceLog.RecalculateTaxForFinalizedSourceDocument(tableId2Name(tableNum(vendInvoiceJour)), vendInvoiceJour.SourceDocumentHeader, callStacking);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes temp table at end of post.
    /// </summary>
    [Replaceable]
    public void endPost()
    {
        TaxSourceLineSummaryTmp taxSourceLineSummaryTmp;
        taxSourceLineSummaryTmp.linkPhysicalTableInstance(taxPost.getTaxSourceLineSummaryTmp());
        select firstonly RecId from taxSourceLineSummaryTmp;
        if (taxSourceLineSummaryTmp
            && SysFlightingService::isFeatureEnabled(SourceDocumentConstants::SourceDocumentPerformanceFlight))
        {
            taxSourceLineSummaryTmp.dispose();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>