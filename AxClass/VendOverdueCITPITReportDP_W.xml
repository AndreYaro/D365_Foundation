<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOverdueCITPITReportDP_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendOverdueCITPITReportDP_W</c> class is the data provider class for the <c>VendOverdueCITPITReport_W</c> SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(VendOverdueCITPITReportContract_W))
]
public class VendOverdueCITPITReportDP_W extends SRSReportDataProviderBase
{
    VendOverdueCITPITReportLineTmp_W    overdueReportLineTmp;
    VendOverdueCITPITReportHeaderTmp_W  overdueReportHeaderTmp;

    VendOverdueCITPITJournalTable_W     overdueJournalTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcOverdueTotals</Name>
				<Source><![CDATA[
        private container calcOverdueTotals(OverdueJournalId_W  _journalId)
    {
        Query                   query   = new Query();
        QueryBuildDataSource    qbds;

        qbds    = query.addDataSource(tableNum(VendOverdueCITPITJournalLineDetail_W));
        qbds    = qbds.addDataSource(tableNum(VendOverdueCITPITTurnJournalLine_W));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addRange(fieldNum(VendOverdueCITPITTurnJournalLine_W, JournalId)).value(queryValue(_journalId));

        return VendOverdueCITPITJournalLineDetail_W::calcTotalLineDetails(query, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report parameters from a data contract to the member variables.
    /// </summary>
    private void getReportParameters()
    {
        VendOverdueCITPITReportContract_W contract = this.parmDataContract();

        if (contract)
        {
            overdueJournalTable = VendOverdueCITPITJournalTable_W::find(contract.parmJournalId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendOverdueCITPITReportHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The <c>VendOverdueCITPITReportDP_W</c> class retrieves records and inserts them into the <c>VendOverdueCITPITReportLineTmp_W</c>
    ///    temporary table and <c>VendOverdueCITPITReportHeaderTmp_W</c>
    /// </summary>
    /// <returns>
    ///    The data from the <c>VendOverdueCITPITReportTmp_W</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(VendOverdueCITPITReportHeaderTmp_W))
    ]
    public VendOverdueCITPITReportHeaderTmp_W getVendOverdueCITPITReportHeaderTmp()
    {
        select overdueReportHeaderTmp;
        return overdueReportHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendOverdueCITPITReportLineTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The <c>VendOverdueCITPITReportDP_W</c> class retrieves records and inserts them into the <c>VendOverdueCITPITReportLineTmp_W</c>
    ///    temporary table and <c>VendOverdueCITPITReportHeaderTmp_W</c>
    /// </summary>
    /// <returns>
    ///    The data from the <c>VendOverdueCITPITReportTmp_W</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(VendOverdueCITPITReportLineTmp_W))
    ]
    public VendOverdueCITPITReportLineTmp_W getVendOverdueCITPITReportLineTmp()
    {
        select overdueReportLineTmp order by LedgerAccount, DueDate;
        return overdueReportLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
        private void insertHeader()
    {
        OverdueJournalSettings_W            firstSettings;
        OverdueJournalSettings_W            secondSettings;

        firstSettings   = OverdueJournalSettings_W::findJournalType(OverdueJournalType_W::VendCITPITJournal);
        secondSettings  = OverdueJournalSettings_W::findJournalType(OverdueJournalType_W::VendCITPITJournal, firstSettings.RecId);

        overdueReportHeaderTmp.clear();
        overdueReportHeaderTmp.JournalId    = overdueJournalTable.JournalId;
        overdueReportHeaderTmp.TransDate    = overdueJournalTable.TransDate;
        overdueReportHeaderTmp.Description  = overdueJournalTable.Description;

        overdueReportHeaderTmp.FirstPeriodLbl   = firstSettings.getPeriodLabelValue();
        overdueReportHeaderTmp.FirstFromDate    = overdueJournalTable.firstFromDate(firstSettings);
        overdueReportHeaderTmp.FirstToDate      = overdueJournalTable.firstToDate(firstSettings);

        overdueReportHeaderTmp.SecondPeriodLbl  = secondSettings.getPeriodLabelValue();
        overdueReportHeaderTmp.SecondFromDate   = overdueJournalTable.secondFromDate(secondSettings);
        overdueReportHeaderTmp.SecondToDate     = overdueJournalTable.secondToDate(secondSettings);

        [overdueReportHeaderTmp.OverdueAmountMST,
            overdueReportHeaderTmp.OverduePaidAmountMST]    = this.calcOverdueTotals(overdueReportHeaderTmp.JournalId);

        overdueReportHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLines</Name>
				<Source><![CDATA[
        private void insertLines()
    {
        VendOverdueCITPITJournalLineDetail_W    overdueJournalLineDetail;
        VendOverdueCITPITTurnJournalLine_W      overdueTurnJournalLine;
        VendTrans                               vendTrans;

        OverdueJournalSettings_W                overdueJournalSettings;

        while select  overdueJournalLineDetail
            join    overdueTurnJournalLine
                where   overdueTurnJournalLine.RecId    == overdueJournalLineDetail.LineRefRecId
                   &&   overdueTurnJournalLine.JournalId    == overdueJournalTable.JournalId
                   &&   overdueTurnJournalLine.Exclude      == NoYes::No
            join vendTrans
                where   vendTrans.RecId == overdueTurnJournalLine.TransRefRecId
            join CalcType from overdueJournalSettings
                where overdueJournalSettings.RecId      == overdueTurnJournalLine.SettingRecId
        {
            overdueReportLineTmp.clear();
            overdueReportLineTmp.initFromOverdueCITPITLineDetail(overdueJournalLineDetail);
            overdueReportLineTmp.initFromOverdueCITPITTurnLine(overdueTurnJournalLine);
            overdueReportLineTmp.initFromVendTans(vendTrans);

            overdueReportLineTmp.DueTermInDays   = overdueReportLineTmp.DueDate - overdueReportLineTmp.InvoiceDate;

            switch (overdueJournalSettings.CalcType)
            {
                case OverdueCalcType_W::DueDate:
                    overdueReportLineTmp.OverdueDays = overdueJournalTable.TransDate - overdueReportLineTmp.DueDate;
                break;
                case OverdueCalcType_W::InvoiceDate:
                    overdueReportLineTmp.OverdueDays = overdueJournalTable.TransDate - overdueReportLineTmp.InvoiceDate;
                break;
            }

            overdueReportLineTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the records for temporary tables for SSRS report based on the parameters from contract class
    /// </summary>
    public void processReport()
    {
        this.getReportParameters();

        this.insertHeader();

        this.insertLines();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
