<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionCheckOpen</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TradeNonStockedConversionCheckOpen</c> class checks for open transactions.
/// </summary>
class TradeNonStockedConversionCheckOpen
extends TradeNonStockedConversionCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes all checks.
    /// </summary>
    /// <returns>
    /// true if all checks pass; otherwise, false.
    /// </returns>
    public boolean check()
    {
        boolean ok;

        ok = this.checkInventQualityOrderTable();
        ok = this.checkInventTrans()     && ok;
        ok = this.checkWMSJournalTrans() && ok;
        ok = this.checkWMSOrder()        && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks <c>InventQualityOrderTable</c> table for open transactions.
    /// </summary>
    /// <returns>
    ///   true if no transactions exists; otherwise, false.
    /// </returns>
    private boolean checkInventQualityOrderTable()
    {
        boolean ok  = true;
        InventQualityOrderTable         inventQualityOrderTable;
        TradeNonStockedConversionItem   conversionItem;

        while select crosscompany QualityOrderId from inventQualityOrderTable
            where inventQualityOrderTable.OrderStatus == InventTestOrderStatus::Open
            join conversionItem
                where conversionItem.ItemIdDataAreaId     == inventQualityOrderTable.DataAreaId
                &&    conversionItem.ItemId               == inventQualityOrderTable.ItemId
                &&    conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
                &&   (!this.singleItemCheck()
                ||    (conversionItem.ItemIdDataAreaId    == tradeNonStockedConversionItem.ItemIdDataAreaId
                &&     conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId))
        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(InventQualityOrderTable),
                          fieldnum(InventQualityOrderTable, QualityOrderId),
                          inventQualityOrderTable.QualityOrderId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks <c>InventTrans</c> table for open transactions.
    /// </summary>
    /// <returns>
    ///   true if no transactions exists; otherwise, false.
    /// </returns>
    private boolean checkInventTrans()
    {
        boolean             ok = true;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        TradeNonStockedConversionItem conversionItem;

        while select crosscompany conversionItem
            where conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
            &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
            &&   (!this.singleItemCheck()
            ||    (conversionItem.ItemIdDataAreaId    == tradeNonStockedConversionItem.ItemIdDataAreaId
            &&     conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId))
            join InventTransId, ReferenceId, ReferenceCategory from inventTransOrigin
                where inventTransOrigin.ItemId            == conversionItem.ItemId
                &&    inventTransOrigin.DataAreaId        == conversionItem.ItemIdDataAreaId
                &&    inventTransOrigin.ReferenceCategory != InventTransType::Sales
                &&    inventTransOrigin.ReferenceCategory != InventTransType::SalesQuotation
                &&    inventTransOrigin.ReferenceCategory != InventTransType::Purch
                exists join inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    &&    inventTrans.ValueOpen         == InventTransOpen::Yes
                    &&    inventTrans.StatusIssue       != StatusIssue::Sold
                    &&    inventTrans.StatusReceipt     != StatusReceipt::Purchased
        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(InventTransOrigin),
                          fieldnum(InventTransOrigin,  InventTransId),
                          inventTransOrigin.InventTransId,
                          this.inventReferenceCategoryToTableId(inventTransOrigin.ReferenceCategory),
                          inventTransOrigin.ReferenceId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWMSJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks <c>WMSjournalTable</c> table for open transactions.
    /// </summary>
    /// <returns>
    ///   true if no transactions exists; otherwise, false.
    /// </returns>
    private boolean checkWMSJournalTrans()
    {
        boolean         ok  = true;
        WMSJournalTrans wmsJournalTrans;
        WMSJournalTable wmsJournalTable;
        TradeNonStockedConversionItem conversionItem;

        while select crosscompany JournalId from wmsJournalTable
            where !wmsJournalTable.Posted
                join LineNum from wmsJournalTrans
                    where wmsJournalTrans.JournalId == wmsJournalTable.JournalId
                    join conversionItem
                        where conversionItem.ItemIdDataAreaId     == wmsJournalTrans.DataAreaId
                        &&    conversionItem.ItemId               == wmsJournalTrans.ItemId
                        &&    conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                        &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
                        &&   (!this.singleItemCheck()
                        ||    (conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId
                        &&    conversionItem.ItemIdDataAreaId     == tradeNonStockedConversionItem.ItemIdDataAreaId))

        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(WMSJournalTrans),
                          fieldnum(WMSJournalTrans, LineNum),
                          queryValue(wmsJournalTrans.LineNum),
                          tablenum(WMSJournalTable),
                          wmsJournalTable.JournalId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the <c>WMSOrder</c> table for open transactions.
    /// </summary>
    /// <returns>
    /// true if no transactions exists; otherwise, false.
    /// </returns>
    private boolean checkWMSOrder()
    {
        boolean     ok  = true;
        WMSOrder    wmsOrder;
        TradeNonStockedConversionItem conversionItem;

        while select crosscompany OrderId from wmsOrder
            where wmsOrder.Status      != WMSOrderStatus::Complete
            join conversionItem
                where conversionItem.ItemIdDataAreaId     == wmsOrder.DataAreaId
                &&    conversionItem.ItemId               == wmsOrder.ItemId
                &&    conversionItem.NonStockedConversion == tradeNonStockedConversion.RecId
                &&    conversionItem.Status               == TradeNonStockedConversionStatus::Draft
                &&   (!this.singleItemCheck()
                ||    (conversionItem.ItemId              == tradeNonStockedConversionItem.ItemId
                &&    conversionItem.ItemIdDataAreaId     == tradeNonStockedConversionItem.ItemIdDataAreaId))
        {
            ok = false;
            this.writeLog(conversionItem,
                          tablenum(WMSOrder),
                          fieldnum(WMSOrder,  OrderId),
                          wmsOrder.OrderId);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the issue type.
    /// </summary>
    /// <returns>
    ///    An element in the <c>TradeNonStockedConversionIssue</c> enumeration.
    /// </returns>
    protected TradeNonStockedConversionIssue issueType()
    {
        return TradeNonStockedConversionIssue::OpenOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes all checks in the <c>TradeNonStockedConversionCheckOpen</c> class.
    /// </summary>
    /// <param name="_tradeNonStockedConversion">
    /// An <c>TradeNonStockedConversion</c> record.
    /// </param>
    /// <param name="_tradeNonStockedConversionItem">
    /// An <c>TradeNonStockedConversionItem</c> record; optional.
    /// </param>
    /// <returns>
    /// true if all checks pass; otherwise, false.
    /// </returns>
    static public boolean checkAll(
        TradeNonStockedConversion       _tradeNonStockedConversion,
        TradeNonStockedConversionItem   _tradeNonStockedConversionItem  = null)
    {
        boolean ok;

        TradeNonStockedConversionCheckOpen tradeNonStockedConversionCheckOpen = TradeNonStockedConversionCheckOpen::construct();
        tradeNonStockedConversionCheckOpen.parmTradeNonStockedConversion(_tradeNonStockedConversion);
        tradeNonStockedConversionCheckOpen.parmTradeNonStockedConversionItem(_tradeNonStockedConversionItem);

        ok = tradeNonStockedConversionCheckOpen.check();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static public TradeNonStockedConversionCheckOpen construct()
    {
        return new TradeNonStockedConversionCheckOpen();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>