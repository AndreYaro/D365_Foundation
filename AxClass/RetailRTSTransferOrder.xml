<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailRTSTransferOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailRTSTransferOrder</c> class represents a transfer order that is created by reading an xml string containing transfer order data.
/// </summary>
#ISOCountryRegionCodes
public class RetailRTSTransferOrder
{
    public static RetailRTSTransferOrder_ExtendedParameters extendedParameters = RetailRTSTransferOrder_ExtendedParameters::construct();

    private InventTransferId             transferId;
    private InventTransferShipDate       shipDate;
    private InventTransferReceiveDate    receiveDate;
    private InventLocationIdTo           inventLocationIdTo;
    private InventLocationIdFrom         inventLocationIdFrom;
    private InventTransferStatus         transferStatus;
    private InventTransferTableRefRecId  recId;
    private RetailStaffId                updatedByWorker;
    private InventTransferDlvModeId      inventTransferDlvModeId;
    // transfer order quantity summaries
    private InventTransferQty            qtyTransfer;
    private InventTransferQtyShipped     qtyShipped;
    private InventTransferQtyReceived    qtyReceived;
    private InventTransferQty            qtyShipNow;
    private InventTransferQty            qtyReceiveNow;
    private InventTransferQtyRemain      qtyRemainShip;
    private InventTransferQtyRemain      qtyRemainReceive;
    private boolean                      isUpdatedInAX;
    private int                          lines;
    private List                         orderLines;
    private XmlDocument                  orderXmlDoc;
    private XmlElement                   xmlRoot;
    private TransDate                    transactionDate;

    private const str UpdatedInAxAttributeName      = 'UpdatedInAx';
    private const str MessageAttributeName          = 'Message';
    private const str QtyRemainReceiveAttribute     = 'QtyRemainReceive';
    private const str QtyTransferAttribute          = 'QtyTransfer';
    private const str QtyShippedAttribute           = 'QtyShipped';
    private const str QtyReceivedAttribute          = 'QtyReceived';
    private const str QtyShipNowAttribute           = 'QtyShipNow';
    private const str QtyReceiveNowAttribute        = 'QtyReceiveNow';
    private const str QtyRemainShipAttribute        = 'QtyRemainShip';
    private const str TotalQtyShippedAttribute      = 'TotalQtyShipped';
    private const str UpdatedByWorkerAttributeName  = 'UpdatedByWorker';
    private const int DateFormat = 213;

    private const str CommentXmlRootNodeName = 'Comments';
    private const str CommentXmlElementName = 'Comment';
    private const str CommentTextAttributeName = 'Text';
    private const str CommentRecordIdAttributeName = 'RecordId';
    private const str CommentCreatedDateTimeAttributeName = 'CreatedDateTime';
    private const str CommentAuthorStaffIdAttributeName = 'AuthorStaffId';
    private const str CommentAuthorNameAttributeName = 'AuthorName';

    // This flag would be default false, then the CreatedDateTime attribute in Comment should be set in ISO8601 format(yyyy-MM-ddTHH:mm:ss).
    // When this flag set to be true, will use the datetime2str() function, which will generate a format string base on locale settings.
    private const str legacyDateTimeFormatConfigName = 'RETAIL_INVENT_TRANSFER_ORDER_COMMENT_LEGACY_DATETIME_FORMAT_BEHAVIOR';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fromXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transfer order <c>RetailRTSTransferOrder</c> object from the xml representation of the order.
    /// </summary>
    /// <param name = "transferOrderXmlStr">The xml string containing the transfer order information.</param>
    /// <returns>A <c>RetailRTSTransferOrder</c> object.</returns>
    public static RetailRTSTransferOrder fromXML(str transferOrderXmlStr)
    {
        XmlDocument transferOrderXml = new XmlDocument();
        transferOrderXml.loadXml(transferOrderXmlStr);

        XmlElement transferHeaderXml = transferOrderXml.getNamedElement(tableStr(InventTransferTable));

        RetailRTSTransferOrder transferOrder = new RetailRTSTransferOrder();
        transferOrder.orderXmlDoc = transferOrderXml;
        transferOrder.xmlRoot = transferHeaderXml;
        
        transferOrder.TransferId                = transferHeaderXml.getAttribute(fieldStr(InventTransferTable, TransferId));
        transferOrder.RecId                     = str2int64(transferHeaderXml.getAttribute(fieldStr(InventTransferTable, RecId)));
        transferOrder.InventLocationIdTo        = transferHeaderXml.getAttribute(fieldStr(InventTransferTable, InventLocationIdTo));
        transferOrder.InventLocationIdFrom      = transferHeaderXml.getAttribute(fieldStr(InventTransferTable, InventLocationIdFrom));
        transferOrder.ShipDate                  = str2Date(transferHeaderXml.getAttribute(fieldStr(InventTransferTable, ShipDate)), DateFormat);
        transferOrder.ReceiveDate               = str2Date(transferHeaderXml.getAttribute(fieldStr(InventTransferTable, ReceiveDate)), DateFormat);
        transferOrder.QtyTransfer               = str2Num((transferHeaderXml.getAttribute(QtyTransferAttribute)));
        transferOrder.QtyShipped                = str2Num((transferHeaderXml.getAttribute(QtyShippedAttribute)));
        transferOrder.QtyReceived               = str2Num(transferHeaderXml.getAttribute(QtyReceivedAttribute));
        transferOrder.QtyShipNow                = str2Num(transferHeaderXml.getAttribute(QtyShipNowAttribute));
        transferOrder.QtyReceiveNow             = str2Num(transferHeaderXml.getAttribute(QtyReceiveNowAttribute));
        transferOrder.QtyRemainShip             = str2Num(transferHeaderXml.getAttribute(QtyRemainShipAttribute));
        transferOrder.QtyRemainReceive          = str2Num(transferHeaderXml.getAttribute(QtyRemainReceiveAttribute));
        transferOrder.isUpdatedInAX             = strCmp(strUpr(transferHeaderXml.getAttribute(UpdatedInAxAttributeName)), 'TRUE') == 0;
        transferOrder.updatedByWorker           = transferHeaderXml.getAttribute(UpdatedByWorkerAttributeName);
        transferOrder.inventTransferDlvModeId   = transferHeaderXml.getAttribute(fieldStr(InventTransferTable, DlvModeId));
        if (transferHeaderXml.hasAttribute(RetailTransactionServiceInventory::TransactionDateAttributeName))
        {
            transferOrder.transactionDate = str2Date(transferHeaderXml.getAttribute(RetailTransactionServiceInventory::TransactionDateAttributeName), DateFormat::MDY);
        }
        XmlNodeList xmlRecordList               = transferHeaderXml.selectNodes(tableStr(InventTransferLine));
        List orderLines = RetailRTSTransferOrderLine::fromXml(xmlRecordList);
        transferOrder.paramOrderLines(orderLines);
        transferOrder.lines = str2int(transferHeaderXml.getAttribute("LINES"));

        return transferOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transfer order <c>RetailRTSTransferOrder</c> object from the xml representation of the order.
    /// </summary>
    /// <param name = "transferOrderXmlStr">The xml string containing the transfer order information.</param>
    /// <returns>A <c>RetailRTSTransferOrder</c> object.</returns>
    public str toXML()
    {
        str transferOrderXML;
        // if there is no order line in AX it means the order is not committed to AX yet. So get the saved header and convert it to xml format
        // this is used to read the orderId from the database.
        if (this.orderLines != null && this.orderLines.empty())
        {
            transferOrderXML = this.getSavedOrderAndConvertToXml();
        }
        else // if the order has committed lines it means the header is already created hence the order Id is already available in the request xml.
             // hence return the request xml which is updated with the result (error/warning message) of the insert or update operation of the lines.
        {
            transferOrderXML = this.orderXmlDoc.toString();
        }

        return transferOrderXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferOrderLineEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list enumerator that is used to iterate through the list of transfer order lines contained in the transfer order xml.
    /// </summary>
    /// <returns>A ListEnumerator object.</returns>
    public ListEnumerator getTransferOrderLineEnumerator()
    {
        return this.orderLines.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSavedOrderAndConvertToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the corresponding transfer order from the database in xml string format using the current transfer order Id in the object.
    /// </summary>
    /// <returns>The xml string containing the transfer order information read from the dabase.</returns>
    /// <remarks>This method get the transfer order from the database so the xml string could be different from what
    /// is in the original orderXmlDoc property that is constructed using the xml formatted transfer order data that is coming from RTS call etc.</remarks>
    public str getSavedOrderAndConvertToXml()
    {
        container result = RetailTransactionServiceInventory::getTransferOrder(this.paramTransferId());
        
        str transferOrderXmlStr = conPeek(result, 3); // getTransferOrder() returns the transfer order's xml representation in the third element of the container

        return transferOrderXmlStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTransferOrderHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the transfer order header represented by <c>RetailRTSTransferOrder</c>
    /// </summary>
    /// <returns>Returns the new or the updated transfer order record.</returns>
    /// <remarks>
    /// This methods uses class <c>RetailRTSTransferOrder_ExtendedParameters</c>. 
    /// Please populate the related variables at its instance <c>extendedParameters</c>.
    /// </remarks>
    public InventTransferTable createOrUpdateTransferOrderHeader()
    {
        RetailRTSTransferOrder rtsTransferOrderObject = this;

        ttsbegin;
        InventTransferTable transferOrderTable = InventTransferTable::find(rtsTransferOrderObject.paramTransferId(), true);
        
        InventTransferTable inventTransferTable;
        select inventTransferTable where inventTransferTable.RecId == this.paramRecId();

        if (transferOrderTable.RecId != inventTransferTable.RecId)
        {
            throw error("@Retail:TransferOrderRecordIdUpdateError");
        }

        // if the transfer order header doesn't exist create it.
        if (!transferOrderTable)
        {
            extendedParameters.createTransferOrderHeader_inventTransferDlvModeId = rtsTransferOrderObject.paramInventTransferDlvModeId();

            transferOrderTable = RetailRTSTransferOrder::createTransferOrderHeader(rtsTransferOrderObject.paramInventLocationIdFrom(),
                                                                                   rtsTransferOrderObject.paramInventLocationIdTo(),
                                                                                   rtsTransferOrderObject.paramShipDate(),
                                                                                   rtsTransferOrderObject.paramReceiveDate(),
                                                                                   FreightSlipType::None);

            rtsTransferOrderObject.paramRecId(transferOrderTable.RecId);
            rtsTransferOrderObject.paramTransferId(transferOrderTable.TransferId);
        }
        else if (!transferOrderTable.isEditable())
        {
            throw error(strFmt("@Retail:CannotUpdateTransferOrder", this.paramTransferId()));
        }
        else
        {
            // update the transfer order header
            transferOrderTable.ReceiveDate = rtsTransferOrderObject.paramReceiveDate();
            transferOrderTable.ShipDate = rtsTransferOrderObject.paramShipDate();
            transferOrderTable.InventLocationIdFrom = rtsTransferOrderObject.paramInventLocationIdFrom();
            transferOrderTable.InventLocationIdTo = rtsTransferOrderObject.paramInventLocationIdTo();
            transferOrderTable.DlvModeId = rtsTransferOrderObject.paramInventTransferDlvModeId();

            if (RetailRTSTransferOrder::validateTransferOrderHeader(transferOrderTable))
            {
                transferOrderTable.update();
            }
            else
            {
                throw error(strFmt("@Retail:UpdateTransferOrderError", transferOrderTable.TransferId)); // failed to update transfer order
            }
        }
        ttscommit;

        return transferOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasShipNowQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transfer order has any line with a positive ship now quantity.
    /// </summary>
    /// <returns>True if the transfer order has ship now quantity; false otherwise.</returns>
    [HookableAttribute(false)]
    public boolean hasShipNowQuantity()
    {
        boolean hasShipNowQuantity = false;
        ListEnumerator orderLineEnumerator = this.orderLines.getEnumerator();

        while(orderLineEnumerator.moveNext())
        {
            RetailRTSTransferOrderLine transferOrderLine = orderLineEnumerator.current();
            if (transferOrderLine.paramQtyShipNow() > 0)
            {
                hasShipNowQuantity = true;
                break;
            }
        }

        return hasShipNowQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReceiveNowQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transfer order has any line with a positive receive now quantity.
    /// </summary>
    /// <returns>True if the transfer order has receive now quantity; false otherwise.</returns>
    [HookableAttribute(false)]
    public boolean hasReceiveNowQuantity()
    {
        boolean hasReceiveNowQuantity = false;
        ListEnumerator orderLineEnumerator = this.orderLines.getEnumerator();

        while(orderLineEnumerator.moveNext())
        {
            RetailRTSTransferOrderLine transferOrderLine = orderLineEnumerator.current();
            if (transferOrderLine.paramQtyReceiveNow() > 0)
            {
                hasReceiveNowQuantity = true;
                break;
            }
        }

        return hasReceiveNowQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdatedInAX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the falg that indicates that the record is processed successfully in AX.
    /// </summary>
    /// <param name = "_resultStatus">Status of the result.</param>
    /// <remarks>Added for backward compatibility since previous version of AX processed the transfer line records one line at a time and
    /// marks only marks the updatedInAX flag for the lies which didnt cause erors. Since currently any operation on the transfer order
    /// is done in one scope we need to update this flag for all records with the same value</remarks>
    [HookableAttribute(false)]
    public void setUpdatedInAX(boolean _resultStatus)
    {
        ListEnumerator orderLineEnumerator = this.orderLines.getEnumerator();

        while(orderLineEnumerator.moveNext())
        {
            RetailRTSTransferOrderLine transferOrderLine = orderLineEnumerator.current();
            transferOrderLine.paramUpdatedInAX(_resultStatus);
        }
        this.paramUpdatedInAX(_resultStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrderHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transfer order header.
    /// </summary>
    /// <param name = "fromLocationId">The shipping location Id.</param>
    /// <param name = "toLocationId">The receiving location Id.</param>
    /// <param name = "shipDate">The order shipping date.</param>
    /// <param name = "receiveDate">The order receiving date.</param>
    /// <param name = "freightSlipType">The freight type.</param>
    /// <returns>The <c>InventTransferTable</c> object.</returns>
    public static InventTransferTable createTransferOrderHeader(
        InventLocationIdFrom fromLocationId,
        InventLocationIdTo toLocationId,
        InventTransferShipDate shipDate,
        InventTransferReceiveDate receiveDate,
        FreightSlipType freightSlipType = FreightSlipType::None)
    {
        InventTransferTable transferOrderHeader;

        ttsbegin;
        // initialize the transfer order buffer.
        transferOrderHeader.TransferId = InventTransferTable::numberSeq().num();
        transferOrderHeader.initValue();
        transferOrderHeader.InventLocationIdFrom = fromLocationId;
        transferOrderHeader.InventLocationIdTransit = InventLocation::find(fromLocationId).InventLocationIdTransit;
        transferOrderHeader.InventLocationIdTo = toLocationId;

        transferOrderHeader.ShipDate = shipDate;
        transferOrderHeader.ReceiveDate = receiveDate;
        transferOrderHeader.DlvModeId = extendedParameters.createTransferOrderHeader_inventTransferDlvModeId;

        transferOrderHeader.initFromAddress();
        transferOrderHeader.initToAddress();
        transferOrderHeader.FreightSlipType = freightSlipType;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            transferOrderHeader.TransferType_IN = RetailParameters::find().DefaultTransferType_IN;
            if (StockTransferCostPriceHandlingImprovementFeatureExposure_IN::isEnabled())
            {
                transferOrderHeader.PriceType_IN = RetailParameters::find().DefaultPriceType_IN;
            }
        }
        
        if (RetailRTSTransferOrder::validateTransferOrderHeader(transferOrderHeader))
        {
            transferOrderHeader.insert();
        }
        else
        {
            throw error("@Retail:CreateTransferOrderError"); // failed to create transfer order.
        }

        ttscommit;

        return transferOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramOrderLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transfer order lines.
    /// </summary>
    /// <param name = "_orderLines">The transfer order lines.</param>
    /// <returns>The transfer order lines.</returns>
    public List paramOrderLines(List _orderLines = orderLines)
    {
        this.orderLines = _orderLines;
        return this.orderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramTransferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transfer order Id.
    /// </summary>
    /// <param name = "_transferId">The transfer order Id.</param>
    /// <returns>The transfer order Id.</returns>
    public InventTransferId paramTransferId(InventTransferId _transferId = transferId)
    {
        if (!prmIsDefault(_transferId))
        {
            XmlElement xmlRecord = this.xmlRoot;
            xmlRecord.setAttribute(fieldStr(InventTransferTable, TransferId), _transferId);
        }

        this.transferId = _transferId;
        return this.transferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the shipping date.
    /// </summary>
    /// <param name = "_shipDate">The shipping date.</param>
    /// <returns>The shipping date.</returns>
    public InventTransferShipDate paramShipDate(InventTransferShipDate _shipDate = shipDate)
    {
        this.shipDate = _shipDate;
        return this.shipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramReceiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the receiving date.
    /// </summary>
    /// <param name = "_receiveDate">The receiving date.</param>
    /// <returns>The receiving date.</returns>
    public InventTransferReceiveDate paramReceiveDate(InventTransferReceiveDate _receiveDate = receiveDate)
    {
        this.receiveDate = _receiveDate;
        return this.receiveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventLocationIdTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the destination invent location.
    /// </summary>
    /// <param name = "_inventLocationIdTo">The destination invent location.</param>
    /// <returns>The destination invent location.</returns>
    public InventLocationIdTo paramInventLocationIdTo(InventLocationIdTo _inventLocationIdTo = inventLocationIdTo)
    {
        this.inventLocationIdTo = _inventLocationIdTo;
        return this.inventLocationIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventLocationIdFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the source invent location.
    /// </summary>
    /// <param name = "_inventLocationIdFrom">The source invent location.</param>
    /// <returns>The source invent location.</returns>
    public InventLocationIdFrom paramInventLocationIdFrom(InventLocationIdFrom _inventLocationIdFrom = inventLocationIdFrom)
    {
        this.inventLocationIdFrom = _inventLocationIdFrom;
        return this.inventLocationIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramInventTransferDlvModeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the source invent DeliveryMode.
    /// </summary>
    /// <param name = "_inventTransferDlvModeId">The source invent DeliveryMode.</param>
    /// <returns>The source invent DeliveryMode.</returns>
    public InventTransferDlvModeId paramInventTransferDlvModeId(InventTransferDlvModeId _inventTransferDlvModeId = inventTransferDlvModeId)
    {
        this.inventTransferDlvModeId = _inventTransferDlvModeId;
        return this.inventTransferDlvModeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramTransferStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transfer status.
    /// </summary>
    /// <param name = "_transferStatus">The transfer status.</param>
    /// <returns>The transfer status.</returns>
    public InventTransferStatus paramTransferStatus(InventTransferStatus _transferStatus = transferStatus)
    {
        this.transferStatus = _transferStatus;
        return this.transferStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transfer line RecId.
    /// </summary>
    /// <param name = "_recId">The transfer line RecId.</param>
    /// <returns>The transfer line RedId that was retrieved or set.</returns>
    public InventTransferTableRefRecId paramRecId(InventTransferTableRefRecId _recId = recId)
    {
        if (!prmIsDefault(_recId))
        {
            XmlElement xmlRecord = this.xmlRoot;
            xmlRecord.setAttribute(fieldStr(InventTransferTable, RecId), int642Str(_recId));
        }

        this.recId = _recId;
        return this.recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transfer quantity.
    /// </summary>
    /// <param name = "_qtyTransfer">The transfer quantity.</param>
    /// <returns>The transfer quantity.</returns>
    public InventTransferQty paramQtyTransfer(InventTransferQty _qtyTransfer = qtyTransfer)
    {
        this.qtyTransfer = _qtyTransfer;
        return this.qtyTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the shipped quantity.
    /// </summary>
    /// <param name = "_qtyShipped">The shipped quantity.</param>
    /// <returns>The shipped quantity.</returns>
    public InventTransferQtyShipped paramQtyShipped(InventTransferQtyShipped _qtyShipped = qtyShipped)
    {
        this.qtyShipped = _qtyShipped;
        return this.qtyShipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the received quantity.
    /// </summary>
    /// <param name = "_qtyReceived">The received quantity.</param>
    /// <returns>The received quantity.</returns>
    public InventTransferQtyReceived paramQtyReceived(InventTransferQtyReceived _qtyReceived = qtyReceived)
    {
        this.qtyReceived = _qtyReceived;
        return this.qtyReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyReceiveNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the receive now quantity.
    /// </summary>
    /// <param name = "_qtyReceiveNow">The receive now quantity.</param>
    /// <returns>The receive now quantity.</returns>
    public InventTransferQty paramQtyReceiveNow(InventTransferQty _qtyReceiveNow = qtyReceiveNow)
    {
        this.qtyReceiveNow = _qtyReceiveNow;
        return this.qtyReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyRemainShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the remainining quantity to ship.
    /// </summary>
    /// <param name = "_qtyRemainShip">The remainining quantity to ship.</param>
    /// <returns>The remainining quantity to ship.</returns>
    public InventTransferQtyRemain paramQtyRemainShip(InventTransferQtyRemain _qtyRemainShip = qtyRemainShip)
    {
        this.qtyRemainShip = _qtyRemainShip;
        return this.qtyRemainShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramQtyRemainReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the remainining quantity to receive.
    /// </summary>
    /// <param name = "_qtyRemainReceive">The remainining quantity to receive.</param>
    /// <returns>The remainining quantity to receive</returns>
    public InventTransferQtyRemain paramQtyRemainReceive(InventTransferQtyRemain _qtyRemainReceive = qtyRemainReceive)
    {
        this.qtyRemainReceive = _qtyRemainReceive;
        return this.qtyRemainReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets message attribute of the transfer line.
    /// </summary>
    /// <returns>The xml element representing the transfer line.</returns>
    public str paramMessage()
    {
        XmlElement xmlRecord = this.xmlRoot;
        return xmlRecord.getAttribute(MessageAttributeName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramUpdatedInAX</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets or sets the flag indicating the status of the operation.
    /// </summary>
    /// <param name = "_isUpdatedInAX">The status of the operation.</param>
    /// <returns>True if the record is processed successfully; false otherwise.</returns>
    public boolean paramUpdatedInAX(boolean _isUpdatedInAX = isUpdatedInAX)
    {
        if (!prmIsDefault(_isUpdatedInAX))
        {
            XmlElement xmlRecord = this.xmlRoot;
            xmlRecord.setAttribute(UpdatedInAxAttributeName, _isUpdatedInAX ? 'true' : 'false');
        }

        this.isUpdatedInAX = _isUpdatedInAX;
        return this.isUpdatedInAX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramXmlRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transfer order xml root element
    /// </summary>
    /// <param name = "_xmlRoot">The transfer order xml root element.</param>
    /// <returns>The transfer order xml root element.</returns>
    public XmlElement paramXmlRoot(XmlElement _xmlRoot = xmlRoot)
    {
        this.xmlRoot = _xmlRoot;
        return this.xmlRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the transfer order line count.
    /// </summary>
    /// <param name = "_lines">The transfer order lines to count.</param>
    /// <returns>The transfer order line count.</returns>
    public int paramLines(int _lines = lines)
    {
        this.lines = _lines;
        return this.lines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramUpdatedByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the staffId of the worker performing the transfer order operations (shipping and receiving).
    /// </summary>
    /// <param name = "_staffId">The staffId of the worker performing the operation.</param>
    /// <returns>The staffId.</returns>
    public RetailStaffId paramUpdatedByWorker(RetailStaffId _staffId = updatedByWorker)
    {
        if (!prmIsDefault(_staffId))
        {
            XmlElement xmlRecord = this.xmlRoot;
            xmlRecord.setAttribute(UpdatedByWorkerAttributeName, _staffId);
        }

        this.updatedByWorker = _staffId;
        return this.updatedByWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransferOrderHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the transfer order buffer.
    /// </summary>
    /// <param name = "_inventTransferTable">The transfer order record.</param>
    /// <returns>True if the transfer order is valid; otherwise, false.</returns>
    private static boolean validateTransferOrderHeader(InventTransferTable _inventTransferTable)
    {
        DictTable dictTable = new DictTable(_inventTransferTable.TableId);
        boolean validationResult = true;

        for(int i = 1;  i <= dictTable.fieldCnt(); i++)
        {
            // validate the fields.
            validationResult = validationResult && _inventTransferTable.validateField(dictTable.fieldCnt2Id(i));
        }

        // validate the record.
        validationResult = validationResult && _inventTransferTable.validateWrite();
        return validationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a comment to the specified transfer order.
    /// </summary>
    /// <param name = "_transferId">The transfer order identifier.</param>
    /// <param name = "_commentedBy">The staff commenting on the transfer order.</param>
    /// <param name = "_comment">The transfer order comment.</param>
    /// <returns>The comment in xml format.</returns>
    /// <remarks>
    /// The xml that contains the comment has this format
    /// <![CDATA[
    /// <Comments>
    ///   <Comment Text="comment string" AuthorStaffId="StaffId" AuthorName="commenter's name" RecordId="5678" CreatedDateTime="" />
    /// </Comments>
    /// ]]]]><![CDATA[>
    /// </remarks>
    public static str addComment(InventTransferId _transferId, RetailStaffId _commentedBy, str _comment)
    {
        if (!InventTransferTable::exist(_transferId))
        {
            throw error(strFmt("@Retail:InvalidTransferIdError", _transferId));
        }

        if (!HcmWorker::findByPersonnelNumber(_commentedBy))
        {
            throw error(strFmt("@Retail:InvalidStaffIdError", _commentedBy));
        }

        str transferOrderCommentXmlStr = '';
        try
        {
            InventTransferTable transferOrder = InventTransferTable::find(_transferId);

            ttsbegin;
            // create a document reference for the transfer order record and attach the comment as a note.
            DocuRef docuRef = DocumentManagement::attachNoteToCommon(transferOrder, DocuType::typeNote(), 'Transfer order comment', _comment);

            // specify the author and the party that created the note.
            docuRef.Author = DirPersonUser::current().PersonParty;
            docuRef.Party = HcmWorker::findByPersonnelNumber(_commentedBy).Person;
            docuRef.update();

            DocuRef documentRef;
            select firstOnly documentRef where documentRef.RecId == docuRef.RecId; // selecting it since the below method expects buffer retrieved with select statement
            XmlDocument commentDoc = RetailRTSTransferOrder::convertDocuRefToCommentXmlDocument(documentRef);
            transferOrderCommentXmlStr = commentDoc.toString();
            ttscommit;
        }
        catch (Exception::Error)
        {
            throw error("@Retail:AddCommentToTransferOrderError"); // failed to add transfer order comment.
        }

        return transferOrderCommentXmlStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the comments made on the specified transfer order.
    /// </summary>
    /// <param name = "_transferId">The transfer order identifier.</param>
    /// <returns>The list of transfer order comments in xml format.</returns>
    /// <remarks>
    /// The xml that contains the comments has this format
    /// <![CDATA[
    /// <Comments>
    ///   <Comment Text="comment string one" AuthorStaffId="StaffId" AuthorName="commenter's name" RecordId="5678" CreatedDateTime="" />
    ///   <Comment Text="comment string two" AuthorStaffId="StaffId" AuthorName="commenter's name" RecordId="5679" CreatedDateTime="" />
    /// </Comments>
    /// ]]]]><![CDATA[>
    /// </remarks>
    public static str getComments(InventTransferId _transferId)
    {
        if (!InventTransferTable::exist(_transferId))
        {
            throw error(strFmt("@Retail:InvalidTransferIdError", _transferId)); // Cannot find the transfer order with transfer Id %1
        }

        str transferOrderCommentsXmlStr = '';

        try
        {
            InventTransferTable transferOrder = InventTransferTable::find(_transferId);

            // create a document reference for the transfer order record and attach the comment as a note.
            DocuRef docuRef = DocuRef::findTableIdRecId(transferOrder.DataAreaId, transferOrder.TableId, transferOrder.RecId);
            
            XmlDocument commentDoc = RetailRTSTransferOrder::convertDocuRefToCommentXmlDocument(docuRef);

            transferOrderCommentsXmlStr = commentDoc.toString();
        }
        catch (Exception::Error)
        {
            throw error ("@Retail:TransferOrderCommentRetrieveError");
        }

        return transferOrderCommentsXmlStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUseLegacyDateTimeFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether HQ will use the legacy datetime format to generate the CreatedDateTime attribute.
    /// or use the default ISO8601 datetime format.
    /// </summary>
    /// <returns>
    /// True if a record is found and has value '1'; otherwise, false.
    /// </returns>
    internal static boolean isUseLegacyDateTimeFormat()
    {
        // this feature flag is disabled by default
        return RetailFeatureControl::isSharedFeatureFlightKeySet(legacyDateTimeFormatConfigName, funcName(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDocuRefToCommentXmlDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the rows in the selected docuRef buffer to an XmlDocument.
    /// </summary>
    /// <param name = "docuRefFromSelectStmt">The selected <c>DocuRef</c> records.
    /// Note: This object should be the result of a select statement.
    /// </param>
    /// <returns>The <c>XmlDocuemnt</c> object containing the comments in the selected docuRef records.</returns>
    private static XmlDocument convertDocuRefToCommentXmlDocument(DocuRef docuRefFromSelectStmt)
    {
        XmlDocument commentDoc = XmlDocument::newBlank();
        XmlElement comments = commentDoc.appendChild(commentDoc.createElement(CommentXmlRootNodeName)); // create the <Comments> node.

        // By default the isLegacyDateTimeFormatUsed flag is set to false,
        // and we will use the DateTimeUtil::toStr() function to generate a datetime string in ISO8601 format(yyyy-MM-ddTHH:mm:ss).
        // If set RETAIL_INVENT_TRANSFER_ORDER_COMMENT_LEGACY_DATETIME_FORMAT_BEHAVIOR parameter in commerce shared parameters,
        // then the isLegacyDateTimeFormatUsed flag would be set to true,
        // and we will use the datetime2str() function to generate a datetime format string with locale settings.
        boolean isLegacyDateTimeFormatUsed = RetailRTSTransferOrder::isUseLegacyDateTimeFormat();

        while (docuRefFromSelectStmt)
        {
            // create xml element for each comment in the docuref record
            XmlElement comment = comments.appendChild(commentDoc.createElement(CommentXmlElementName));
            comment.setAttribute(CommentTextAttributeName, docuRefFromSelectStmt.Notes);
            HcmWorker commenter = HcmWorker::findByPerson(docuRefFromSelectStmt.Party);
            comment.setAttribute(CommentAuthorStaffIdAttributeName, commenter .PersonnelNumber);
            comment.setAttribute(CommentAuthorNameAttributeName, commenter.name());

            if(isLegacyDateTimeFormatUsed)
            {
                comment.setAttribute(CommentCreatedDateTimeAttributeName, datetime2Str(docuRefFromSelectStmt.CreatedDateTime));
            }
            else
            {
                // Converts a utcdatetime value to a string in the following format: yyyy-MM-ddTHH:mm:ss, where T is a character literal.
                comment.setAttribute(CommentCreatedDateTimeAttributeName, DateTimeUtil::toStr(docuRefFromSelectStmt.CreatedDateTime));
            }

            comment.setAttribute(CommentRecordIdAttributeName, int642Str(docuRefFromSelectStmt.RecId));
            next docuRefFromSelectStmt;
        }

        return commentDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferOrderJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of transfer order journal for the specified order.
    /// </summary>
    /// <param name = "_transferOrderId">The transfer order Id.</param>
    /// <returns>The collection of transfer order journal headers in xml format</returns>
    /// <remarks>
    /// The xml that contains the transfer journals has this format
    /// <![CDATA[
    ///   <TransferOrderJournal TransferId="10000" VoucherId="00001" UpdatedByWorker="00012" TransferDate="" />
    ///   <TransferOrderJournal TransferId="10000" VoucherId="00002" UpdatedByWorker="00011" TransferDate="" />
    /// ]]]]><![CDATA[>
    /// </remarks>
    public static XmlDocument getTransferOrderJournals(str _transferOrderId)
    {
        XmlDocument journalsDoc = new XmlDocument();
        XmlElement journalsDocRoot = journalsDoc.appendChild(journalsDoc.createElement("TransferOrderJournals"));
        try
        {
            InventTransferJour inventTransferJournal;
            InventTransferJourLine inventTransferJournalLine;

            while select inventTransferJournal
            order by inventTransferJournal.CreatedDateTime desc
            where inventTransferJournal.TransferId == _transferOrderId &&
            inventTransferJournal.UpdateType == InventTransferUpdateType::Shipment
            {
                RetailRTSTransferOrder::addTransferJournalToXmlDoc(inventTransferJournal, _transferOrderId, journalsDoc);
            }
        }
        catch (Exception::Error)
        {
            throw error ("@Retail:GetTransferorderJournalsError"); // failed to retrieve the list of transfer journals.
        }

        return journalsDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferOrderJournalDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transfer order journal detail for the specified transfer journal voucher Id.
    /// </summary>
    /// <param name = "_transferOrderId">The transfer order Id.</param>
    /// <param name = "_voucherId">The voucher Id of the transfer journal being retrieved.</param>
    /// <returns>The transfer order journal details in xml format.</returns>
    /// <remarks>
    /// The xml that contains the transfer journal detail has this format
    /// <![CDATA[
    /// <TransferOrderJournals>
    ///   <TransferOrderJournal TransferId="10000" VoucherId="00001" UpdatedByWorker="00012" TransferDate="" >
    ///         <TransferOrderJournalLine ItemId="122" ProductName="item one" InventColorId="Red" InventSizeId="" InventStyleId="" InventVersionId="" ConfigId="" QtyShipped="1" />
    ///         <TransferOrderJournalLine ItemId="123" ProductName="item two" InventColorId="" InventSizeId="XL" InventStyleId="" InventVersionId="" ConfigId="" QtyShipped="1" />
    ///   </TransferOrderJournal>
    /// </TransferOrderJournals>
    /// ]]]]><![CDATA[>
    /// </remarks>
    public static XmlDocument getTransferOrderJournalDetail(str _transferOrderId, str _voucherId)
    {
        return RetailRTSTransferOrder::getTransferOrderJournalDetailInternal(_transferOrderId, _voucherId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferOrderJournalDetailInternal</Name>
				<Source><![CDATA[
    internal static XmlDocument getTransferOrderJournalDetailInternal(str _transferOrderId, str _voucherId, str _languageId = '')
    {
        XmlDocument journalsDoc = new XmlDocument();
        XmlElement journalsDocRoot = journalsDoc.appendChild(journalsDoc.createElement("TransferOrderJournals"));
        try
        {
            InventTransferJour inventTransferJournal;
            InventTransferJourLine inventTransferJournalLine;

            select firstonly inventTransferJournal
            where inventTransferJournal.TransferId == _transferOrderId &&
            inventTransferJournal.VoucherId == _voucherId &&
            inventTransferJournal.UpdateType == InventTransferUpdateType::Shipment;

            XmlElement journalElement = RetailRTSTransferOrder::addTransferJournalToXmlDoc(
                                                                        inventTransferJournal, 
                                                                        _transferOrderId, 
                                                                        journalsDoc);

            boolean populateDimensionValue = RetailTransferOrderJournalWithDimensionValueFlight::instance().isEnabled();

            InventTransferLine inventTransferLine;
            InventDim inventDim;
            while select inventTransferJournalLine
                join inventDim
                where inventDim.inventDimId == inventTransferJournalLine.InventDimId &&
                 inventTransferJournalLine.TransferId == inventTransferJournal.TransferId &&
                 inventTransferJournalLine.VoucherId == inventTransferJournal.VoucherId
                join inventTransferLine
                where inventTransferLine.TransferId == inventTransferJournalLine.TransferId &&
                 inventTransferLine.LineNum == inventTransferJournalLine.LineNum
            {
                RetailRTSTransferOrder::addTransferJournalLineToXml(
                                                inventTransferJournalLine,
                                                inventDim,
                                                inventTransferLine,
                                                journalElement,
                                                populateDimensionValue,
                                                _languageId);
            }
        }
        catch (Exception::Error)
        {
            throw error ("@Retail:GetTransferJournalDetailsError"); // failed to retrieve transfer order journal detail.
        }

        return journalsDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransferJournalToXmlDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the specified transfer order journal row to an xml element and adds it to the xml document.
    /// </summary>
    /// <param name = "_inventTransferJournal">The transfer order record.</param>
    /// <param name = "_transferOrderId">The transfer order id.</param>
    /// <param name = "_transferJournalDoc">The xml document containing the transfer order journal header information.</param>
    /// <returns>The <c>XmlElement</c> representing the transfer journal record.</returns>
    private static XmlElement addTransferJournalToXmlDoc(InventTransferJour _inventTransferJournal, str _transferOrderId, XmlDocument _transferJournalDoc)
    {
        XmlElement journalDocRoot = _transferJournalDoc.root();
        XmlElement journal = journalDocRoot.appendChild(_transferJournalDoc.createElement("TransferOrderJournal"));
        journal.setAttribute('OrderId', _inventTransferJournal.TransferId);
        journal.setAttribute('InventLocationIdFrom', _inventTransferJournal.InventLocationIdFrom);
        journal.setAttribute('InventLocationIdTo', _inventTransferJournal.InventLocationIdTo);
        journal.setAttribute('TransferDate', date2str(_inventTransferJournal.TransDate, DateFormat, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2,
                DateSeparator::Hyphen, DateYear::Digits4, DateFlags::None));
        journal.setAttribute('UpdatedByWorker', HcmWorker::find(_inventTransferJournal.UpdatedByWorker).PersonnelNumber);
        journal.setAttribute('VoucherId', _inventTransferJournal.VoucherId);
        journal.setAttribute('DeliveryMode', _inventTransferJournal.DlvModeId);
        journal.setAttribute('Comments', RetailRTSTransferOrder::getLastComment(_transferOrderId));
        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get text from last comment as string.
    /// </summary>
    /// <param name = " _transferOrderId">The transfer order Id.</param>
    /// <returns>The <c>str</c> last comment.</returns>
    private static str getLastComment(InventTransferId _transferOrderId)
    {
        str comments = RetailRTSTransferOrder::getComments(_transferOrderId);
        str resultComments = '';
        XmlDocument xmlComments = new XmlDocument();
        xmlComments.loadXml(comments);

        XMLParseError xmlError  = xmlComments.parseError();
        if(xmlError && xmlError.errorCode() != 0)
        {
            throw error ("@Retail:GetTransferorderJournalsError");
        }

        XmlElement nodeComments = xmlComments.getNamedElement("Comments");
        XmlNodeList xmlCommentsList = nodeComments.childNodes();

        XmlElement nodeComment = xmlCommentsList.item(xmlCommentsList.length() - 1);
        if (nodeComment)
        {
            resultComments = nodeComment.getAttribute("Text");
        }
        return resultComments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransferJournalLineToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the specified transfer journal line to an xml element and adds it to the specified transfer journal header element.
    /// </summary>
    /// <param name = "inventTransferJournalLine">The transfer journal line record.</param>
    /// <param name = "inventDim">The inventDim record.</param>
    /// <param name = "inventTransferLine">The inventDim record.</param>
    /// <param name = "transferJournalXmlNode">The xml node containing the transfer journal header.</param>
    /// <param name = "populateDimensionValue">The boolean value indicating whether to populate dimension value.</param>
    /// <param name = "languageId">The language ID.</param>
    private static void addTransferJournalLineToXml(InventTransferJourLine inventTransferJournalLine, InventDim inventDim, InventTransferLine inventTransferLine, XmlElement transferJournalXmlNode, boolean populateDimensionValue = false, str languageId = '')
    {
        XmlDocument journalDoc = transferJournalXmlNode.ownerDocument();
        XmlElement journalLine = transferJournalXmlNode.appendChild(journalDoc.createElement("TransferOrderJournalLine"));
        journalLine.setAttribute('ItemId', inventTransferJournalLine.ItemId);
        journalLine.setAttribute('ProductName', inventTransferJournalLine.itemName());

        journalLine.setAttribute('InventColorId', inventDim.InventColorId);
        journalLine.setAttribute('InventSizeId', inventDim.InventSizeId);
        journalLine.setAttribute('InventStyleId', inventDim.InventStyleId);
        journalLine.setAttribute('InventVersionId', inventDim.InventVersionId);
        journalLine.setAttribute('ConfigId', inventDim.configId);
        journalLine.setAttribute('UnitId', inventTransferJournalLine.UnitId);
        journalLine.setAttribute('Barcode', RetailRTSTransferOrder::getBarcode(inventTransferJournalLine, inventDim));
        RetailRTSTransferOrder::setJournalLineXMLDecimalAttribute(journalLine, QtyShippedAttribute, inventTransferJournalLine.QtyShipped); // quantity included in the current shipment. (Quantity packed in current shipment)
        RetailRTSTransferOrder::setJournalLineXMLDecimalAttribute(journalLine, QtyTransferAttribute, inventTransferLine.QtyTransfer);
        RetailRTSTransferOrder::setJournalLineXMLDecimalAttribute(journalLine, TotalQtyShippedAttribute,inventTransferLine.QtyShipped); // total quantity shipped including current shipment

        if (populateDimensionValue)
        {
            InventTable inventTable;
            EcoResProductMasterColor productMasterColor;
            EcoResProductMasterSize productMasterSize;
            EcoResProductMasterStyle productMasterStyle;
            EcoResProductMasterConfiguration productMasterConfig;
            EcoResProductMasterDimValueTranslation dimValueTranslationColor;
            EcoResProductMasterDimValueTranslation dimValueTranslationSize;
            EcoResProductMasterDimValueTranslation dimValueTranslationStyle;
            EcoResProductMasterDimValueTranslation dimValueTranslationConfig;
            EcoResColor color;
            EcoResSize size;
            EcoResStyle style;
            EcoResConfiguration config;

            select firstonly RecId from  inventTable
            where inventTable.ItemId == inventTransferJournalLine.ItemId

            outer join RecId from color
            where color.Name == inventDim.InventColorId
            outer join RecId from productMasterColor
            where productMasterColor.ColorProductMaster == inventTable.Product && productMasterColor.Color == color.RecId
            outer join Name from dimValueTranslationColor
            where dimValueTranslationColor.ProductMasterDimensionValue == productMasterColor.RecId && dimValueTranslationColor.LanguageId == languageId

            outer join RecId from size
            where size.Name == inventDim.InventSizeId
            outer join RecId from productMasterSize
            where productMasterSize.SizeProductMaster == inventTable.Product && productMasterSize.Size == size.RecId
            outer join Name from dimValueTranslationSize
            where dimValueTranslationSize.ProductMasterDimensionValue == productMasterSize.RecId && dimValueTranslationSize.LanguageId == languageId

            outer join RecId from style
            where style.Name == inventDim.InventStyleId
            outer join RecId from productMasterStyle
            where productMasterStyle.StyleProductMaster == inventTable.Product && productMasterStyle.Style == style.RecId
            outer join Name from dimValueTranslationStyle
            where dimValueTranslationStyle.ProductMasterDimensionValue == productMasterStyle.RecId && dimValueTranslationStyle.LanguageId == languageId

            outer join RecId from config
            where config.Name == inventDim.configId
            outer join RecId from productMasterConfig
            where productMasterConfig.ConfigProductMaster == inventTable.Product && productMasterConfig.Configuration == config.RecId
            outer join Name from dimValueTranslationConfig
            where dimValueTranslationConfig.ProductMasterDimensionValue == productMasterConfig.RecId && dimValueTranslationConfig.LanguageId == languageId;

            journalLine.setAttribute('ColorValue', dimValueTranslationColor.Name ? dimValueTranslationColor.Name : inventDim.InventColorId);
            journalLine.setAttribute('SizeValue', dimValueTranslationSize.Name ? dimValueTranslationSize.Name : inventDim.InventSizeId);
            journalLine.setAttribute('StyleValue', dimValueTranslationStyle.Name ? dimValueTranslationStyle.Name : inventDim.InventStyleId);
            journalLine.setAttribute('ConfigValue', dimValueTranslationConfig.Name ? dimValueTranslationConfig.Name : inventDim.configId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBarcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get item bar code
    /// </summary>
    /// <param name = "inventTransferJournalLine">The transfer journal line record.</param>
    /// <param name = "inventDim">The inventDim record.</param>
    /// <returns>The <c>str</c> item bar code.</returns>
    public static str getBarcode(InventTransferJourLine inventTransferJournalLine, InventDim inventDim)
    {
        InventDim _inventDim = InventDim::find(inventDim.inventDimId, false);
        InventItemBarcode inventItemBarcode = InventItemBarcode::findSalesBarcodeDimension(inventTransferJournalLine.ItemId, _inventDim, '', inventTransferJournalLine.UnitId);
 
        if (!inventItemBarcode.RecId)
        {
            inventItemBarcode = InventItemBarcode::findSalesBarcodeDimension(inventTransferJournalLine.ItemId, _inventDim);
        }
        
        return inventItemBarcode.ItemBarCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalLineXMLDecimalAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the XML parsing by putting the values in the correct format
    /// </summary>
    /// <param name = "journalLine">The specified journal to be converted to an xml element</param>
    /// <param name = "_attributeName">Type of quantity shipment</param>
    /// <param name = "_attributeValue">Quantity shipped</param>
    public static void setJournalLineXMLDecimalAttribute(XmlElement _journalLine, str _attributeName, real _attributeValue)
    {
        _journalLine.setAttribute(_attributeName, num2Str(_attributeValue, 0, 10, 1, 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipTransferLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles shipment of the transfer lines included in the order.
    /// </summary>
    public void shipTransferLines()
    {
        ttsbegin;

        // ship a transfer order
        InventTransferMultiShip multiShip = InventTransferMultiShip::construct();
        RunBaseMultiParm::initParm(multiShip);

        //get general values related to shipping set
        InventTransferParmTable inventTransferParmTable;
        inventTransferParmTable.TransferId = this.paramTransferId();
        inventTransferParmTable.ParmId = multiShip.parmId();
        inventTransferParmTable.ShipUpdateQty = InventTransferShipUpdateQty::All;
        multiShip.initParmBuffer(inventTransferParmTable);
        inventTransferParmTable.UpdatedByWorker = HcmWorker::findByPersonnelNumber(this.paramUpdatedByWorker()).RecId;
        if (this.transactionDate)
        {
            inventTransferParmTable.TransDate = this.transactionDate;
        }

        ListEnumerator orderLineEnumerator = this.orderLines.getEnumerator();
        while(orderLineEnumerator.moveNext())
        {
            RetailRTSTransferOrderLine transferOrderLine = orderLineEnumerator.current();
            if (transferOrderLine.paramQtyShipNow() > 0)
            {
                InventTransferLine inventTransferLine = InventTransferLine::findRecId(transferOrderLine.paramRecId());
                if(inventTransferLine.RecId)
                {
                    InventDimId inventDimId = transferOrderLine.paramInventDimId();
                    InventDim inventDimLine = InventDim::find(inventDimId);
                    inventDimLine.wmsLocationId = transferOrderLine.paramWMSLocationId();
                    inventDimLine.LicensePlateId = transferOrderLine.paramLicensePlateId();
                    inventDimLine.InventStatusId = transferOrderLine.paramInventoryStatusId();
                    inventDimLine = InventDim::findOrCreate(inventDimLine);

                    // We also need to pick serial number active items' serial numbers.
                    if (transferOrderLine.paramSerialNumberLines() != null && !transferOrderLine.paramSerialNumberLines().empty())
                    {
                        // Pre-set the license plate to avoid multiple license plates generated.
                        inventDimLine = RetailTransferOrderHandler::ensureValidLPAndLocationCombination(inventDimLine);
                        ListEnumerator serialNumberLineEnumerator = transferOrderLine.paramSerialNumberLines().getEnumerator();
                        while (serialNumberLineEnumerator.moveNext())
                        {
                            RetailRTSSerialNumberLine serialNumberLine = serialNumberLineEnumerator.current();
                            InventSerialId serialNumberLineInventSerialId = serialNumberLine.parmInventSerialId();
                            InventQty qty = serialNumberLine.parmQty();
                            InventDim newInventDim;
                            newInventDim.data(inventDimLine);
                            newInventDim.inventSerialId = serialNumberLineInventSerialId;
                            newInventDim = InventDim::findOrCreate(newInventDim);
                            RetailTransferOrderHandler::pickTransferLine(inventTransferLine, newInventDim, qty);
                        }
                    }
                    else if (WHSInventEnabled::exist(inventTransferLine.ItemId) && !RetailRTSTransferOrder::shouldSkipTransferOrderPickupOrRegister(inventTransferLine))
                    {
                        // For picking receiving operation, the wmsLocationId will be empty.
                        if (!inventDimLine.wmsLocationId)
                        {
                            inventDimLine.wmsLocationId = inventDimLine.inventLocation().WMSlocationIdDefaultIssue;
                        }

                        // For picking receiving operation, the InventStatusId will be empty.
                        if (!inventDimLine.InventStatusId)
                        {
                            inventDimLine.InventStatusId = WHSInventStatus::getDefaultInventStatus(inventDimLine.inventLocation().InventLocationId).InventStatusId;
                        }
                        inventDimLine = InventDim::findOrCreate(inventDimLine);

                        // If the item is whs enabled we might need to pick to get all dimensions on the transactions
                        RetailTransferOrderHandler::pickTransferLine(inventTransferLine, inventDimLine, transferOrderLine.paramQtyShipNow());
                    }

                    InventTransferParmLine inventTransferParmLine = RetailRTSTransferOrder::initInventTransParmLine(inventTransferLine, transferOrderLine.paramQtyShipNow(), 0, inventTransferLine.InventTransId, multiShip.parmId(), transferOrderLine.paramCloseLine());
                    InventTransferParmLine.InventDimId = inventDimLine.inventDimId;
                    inventTransferParmLine.insert();
                }
                else
                {
                    throw error (strFmt("@Retail:CannotFindTranferOrderLineError", transferOrderLine.paramRecId(), this.paramTransferId()));
                }
            }
            transferOrderLine.paramUpdatedInAX(true);
        }

        inventTransferParmTable.insert(false); //will create parmLines by default
        //now do the update
        multiShip.runUpdate(inventTransferParmTable);
        this.paramUpdatedInAX(true);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiveTransferLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles receipt of transfer lines included in the transfer order.
    /// </summary>
    public void receiveTransferLines()
    {
        ttsbegin;
        InventTransferTable inventTransferOrder = InventTransferTable::find(this.transferId);
        InventTransferMultiReceive inventTransferMultiReceive = InventTransferMultiReceive::construct();
        RunBaseMultiParm::initParm(inventTransferMultiReceive);
        ParmId _multiReceiveParmId = inventTransferMultiReceive.parmId();

        InventTransferParmTable inventTransferParmTable;
        inventTransferParmTable.TransferId       = this.paramTransferId();
        inventTransferParmTable.ParmId           = _multiReceiveParmId;
        inventTransferParmTable.ReceiveUpdateQty = InventTransferReceiveUpdateQty::All;
        inventTransferParmTable.LineNum          = InventTransferParmTable::lastLineNum(inventTransferParmTable.ParmId) + 1;
        inventTransferParmTable.JobStatus        = ParmJobStatus::Executed;
        inventTransferParmTable.ExecutedDateTime = DateTimeUtil::utcNow();
        inventTransferMultiReceive.initParmBuffer(inventTransferParmTable);
        inventTransferParmTable.UpdatedByWorker  = HcmWorker::findByPersonnelNumber(this.paramUpdatedByWorker()).RecId;
        if (this.transactionDate)
        {
            inventTransferParmTable.TransDate = this.transactionDate;
        }
        inventTransferParmTable.insert(false);

        ListEnumerator orderLineEnumerator = this.orderLines.getEnumerator();
        while(orderLineEnumerator.moveNext())
        {
            RetailRTSTransferOrderLine transferOrderLine = orderLineEnumerator.current();
            InventTransferLine inventTransferLine = InventTransferLine::findRecId(transferOrderLine.paramRecId(), true);
            transferOrderLine.paramItemId(inventTransferLine.ItemId);

            InventDim baseReceiveInventDim = RetailTransferOrderHandler::createBaseInventDimForTransferOrderReceivingLine(inventTransferOrder, inventTransferLine, transferOrderLine);

            if (transferOrderLine.paramQtyReceiveNow() > 0)
            {
                if(inventTransferLine.RecId)
                {
                    if (transferOrderLine.paramSerialNumberLines() == null || transferOrderLine.paramSerialNumberLines().empty())
                    {
                        if (!RetailRTSTransferOrder::shouldSkipTransferOrderPickupOrRegister(inventTransferLine))
                        {
                            // If Channel does not posted serial number lines back. Register the transfer order line entirely.
                            InventDim newInventDim = RetailTransferOrderHandler::createInventDimForReceivingLine(
                                    inventTransferLine.ItemId,
                                    inventTransferLine.InventTransIdReceive,
                                    transferOrderLine.paramInventoryStatusId(),
                                    transferOrderLine.paramWMSLocationId(),
                                    transferOrderLine.paramLicensePlateId());

                            RetailTransferOrderHandler::registerTransferLine(inventTransferLine, newInventDim, transferOrderLine.paramQtyReceiveNow(), inventTransferLine.ItemId);
                        }
                    }
                    else
                    {
                        // If Channel post serial number lines back. Register per serial number line.
                        ListEnumerator serialNumberLineEnumerator = transferOrderLine.paramSerialNumberLines().getEnumerator();
                        while (serialNumberLineEnumerator.moveNext())
                        {
                            RetailRTSSerialNumberLine serialNumberLine = serialNumberLineEnumerator.current();
                            RecId serialNumberLineSourceInventTransRecId = serialNumberLine.parmSourceInventTransRecId();
                            InventTrans serialNumberLineSourceInventTrans = InventTrans::findRecId(serialNumberLineSourceInventTransRecId);

                            if (serialNumberLineSourceInventTrans.StatusReceipt == StatusReceipt::Registered)
                            {
                                // If the source invent trans has been registered, we do not need to re-register it.
                                continue;
                            }

                            // Else we will register this serial number line.
                            InventSerialId serialNumberLineInventSerialId = serialNumberLine.parmInventSerialId();
                            InventQty qty = serialNumberLine.parmQty();

                            InventDim newInventDim;
                            newInventDim.data(baseReceiveInventDim);
                            newInventDim.inventSerialId = serialNumberLineInventSerialId;
                            newInventDim = InventDim::findOrCreate(newInventDim);
                            RetailTransferOrderHandler::registerTransferLine(inventTransferLine, newInventDim, qty, inventTransferLine.ItemId);
                        }
                    }

                    InventTransferParmLine inventTransferParmLine = RetailRTSTransferOrder::initInventTransParmLine(inventTransferLine, 0, transferOrderLine.paramQtyReceiveNow(), InventTransferLine.InventTransIdReceive, _multiReceiveParmId);
                    inventTransferParmLine.InventDimId = baseReceiveInventDim.inventDimId;
                    inventTransferParmLine.insert();

                    transferOrderLine.updatePropertiesFromTable(inventTransferLine);
                }
                else
                {
                    throw error (strFmt("@Retail:CannotFindTranferOrderLineError", transferOrderLine.paramRecId(), this.paramTransferId()));
                }
            }
        }

        inventTransferMultiReceive.runUpdate(inventTransferParmTable);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransParmLine</Name>
				<Source><![CDATA[
    private static InventTransferParmLine initInventTransParmLine(InventTransferLine _inventTransferLine,
        InventQty   _shipQty,
        InventQty   _receiveNowQty,
        InventTransId _inventTransId,
        ParmId _multiShipParmId,
        InventTransferCloseLine _closeLine = NoYes::No)
    {
        InventTransferParmLine inventTransferParmLine;
        select maxOf(LineNum) from inventTransferParmLine where inventTransferParmLine.ParmId == _multiShipParmId
            && inventTransferParmLine.TransferId == _inventTransferLine.TransferId;
        LineNum lineNum = inventTransferParmLine.LineNum + 1;

        inventTransferParmLine.initFromInventTransferLine(_inventTransferLine);
        inventTransferParmLine.ParmId               = _multiShipParmId;
        inventTransferParmLine.TransferId           = _inventTransferLine.TransferId;
        inventTransferParmLine.InventTransId        = _inventTransId;
        inventTransferParmLine.LineNum              =  lineNum;
        inventTransferParmLine.InventTransIdTransit = _inventTransferLine.InventTransIdTransitFrom;
        inventTransferParmLine.QtyShipNow           = _shipQty;
        InventTransferParmLine.QtyReceiveNow        = _receiveNowQty;
        inventTransferParmLine.CloseLine            = _closeLine;
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            RetailRTSTransferOrder::initInventTransParmLine_IN(_inventTransferLine, inventTransferParmLine);
        }

        return inventTransferParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransParmLine_IN</Name>
				<Source><![CDATA[
    private static InventTransferParmLine_IN initInventTransParmLine_IN(InventTransferLine _inventTransferLine, InventTransferParmLine _inventTransferParmLine)
    {
        InventTransferParmLine_IN inventTransferParmLine_IN = _inventTransferParmLine.inventTransferParmLine_IN();
        InventTransferTable inventTransferTable = _inventTransferLine.inventTransferTable();
        InventTransferLine_IN inventTransferLine_IN = _inventTransferLine.inventTransferLine_IN();
        
        if (_inventTransferLine.QtyTransfer != 0
            && inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
        {
            InventQty updateQty = _inventTransferParmLine.QtyReceiveNow ? _inventTransferParmLine.QtyReceiveNow : _inventTransferParmLine.QtyShipNow;

            inventTransferParmLine_IN.AssessableValue = inventTransferLine_IN.AssessableValueTransactionCurrency * (updateQty / _inventTransferLine.QtyTransfer);
            _inventTransferParmLine.packInventTransferParmLine_IN(inventTransferParmLine_IN);
        }

        return inventTransferParmLine_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipTransferOrderPickupOrRegister</Name>
				<Source><![CDATA[
    private static boolean shouldSkipTransferOrderPickupOrRegister(InventTransferLine inventTransferLine)
    {
        // If auto reservation is turned on for transfer order line, the batch numbers could be assigned to inventTrans (even could be multiple inventTrans) of the line on creation.
        // Since our pickup doesn't read batch number, while register only read one inventTrans, neither of them can support multiple batch numbers.
        // We need to skip the pickup or register and let underlying SCM Inventory code to handle batch numbers.
        return inventTransferLine.AutoReservation 
            && InventTable::find(inventTransferLine.ItemId).whsBatchActive() 
            && RetailTransferOrderSkipBatchItemPickupOrRegisterFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>