<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RelationshipBetweenJournalLineAndParmLineSingleton</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  A class which will store the relationship between journal line and parameter line.
/// </summary>
public final class RelationshipBetweenJournalLineAndParmLineSingleton implements System.IDisposable
{
    private static RelationshipBetweenJournalLineAndParmLineSingleton singleton;
    private Map ttsIdInfoMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRelationshipBetweenParmLineAndJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the journal line information for the parameter line.
    /// </summary>
    /// <param name = "_parmLineRecId">
    ///  The parameter line record ID.
    /// </param>
    /// <param name = "_journalLineInformation">
    ///  An object of <c>_journalLineInformation</c>.
    /// </param>
    public void addRelationshipBetweenParmLineAndJournalLine(RecId _parmLineRecId, JournalLineInformation _journalLineInformation)
    {
        Map journalLineParmLineMap;
        CreatedTransactionId ttsId = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();
        if (ttsIdInfoMap.exists(ttsId))
        {
            journalLineParmLineMap = ttsIdInfoMap.lookup(ttsId);
        }
        else
        {
            journalLineParmLineMap = new Map(Types::Int64, Types::Class);
        }
        journalLineParmLineMap.insert(_parmLineRecId, _journalLineInformation);
        ttsIdInfoMap.insert(ttsId, journalLineParmLineMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalLineInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Find the journal line information according to the parameter line record ID.
    /// </summary>
    /// <param name = "_parmLineRecId">
    ///  The parameter line record ID.
    /// </param>
    /// <returns>
    ///  A class <c>JournalLineInformation</c> which stores journal header recid, inventory transaction Id and journal line number.
    /// </returns>
    public JournalLineInformation findJournalLineInfo(RecId _parmLineRecId)
    {
        JournalLineInformation journalLineInformation = new JournalLineInformation();
        CreatedTransactionId ttsId = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();

        if (ttsIdInfoMap.exists(ttsId))
        {
            Map journalLineParmLineMap = ttsIdInfoMap.lookup(ttsId);
            if (journalLineParmLineMap.exists(_parmLineRecId))
            {
                journalLineInformation = journalLineParmLineMap.lookup(_parmLineRecId);
            }
        }

        return journalLineInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get instance of <c>RelationshipBetweenJournalLineAndParmLineSingleton</c>.
    /// </summary>
    /// <returns>
    ///  A singleton object of <c>RelationshipBetweenJournalLineAndParmLineSingleton</c>.
    /// </returns>
    public static RelationshipBetweenJournalLineAndParmLineSingleton instance()
    {
        if (!singleton)
        {
            singleton = new RelationshipBetweenJournalLineAndParmLineSingleton();
        }

        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        CreatedTransactionId ttsId = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();
        if (ttsIdInfoMap.exists(ttsId))
        {
            ttsIdInfoMap.remove(ttsId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        ttsIdInfoMap = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>