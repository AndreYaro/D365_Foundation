<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTaskNormalized</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Insert, update and delete WBS task data to appropriate tables for WBS task actions accordingly.
/// </summary>
class ProjTaskNormalized
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete Task.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID.</param>
    /// <param name = "_taskId">Element number of this task.</param>
    public static void deleteTasks(HierarchyIdBase _hierarchyId, ElementNumber _taskId)
    {
        HierarchyTreeTable  hierarchyTreeTable;
        smmActivities       smmActivities;
        PSAActivitySetup    psaActivitySetup;
        RecId               smmActivitiesRecId;
        smmActivityNumber   activityNumber;

        select RefRecId from hierarchyTreeTable
            where hierarchyTreeTable.HierarchyId == _hierarchyId
                  && hierarchyTreeTable.ElementNumber == _taskId;
        smmActivitiesRecId = hierarchyTreeTable.RefRecId;

        delete_from hierarchyTreeTable
            where hierarchyTreeTable.HierarchyId == _hierarchyId
                  && hierarchyTreeTable.ElementNumber == _taskId;

        select ActivityNumber from smmActivities
            where smmActivities.RecId == smmActivitiesRecId;
        activityNumber = smmActivities.ActivityNumber;

        delete_from smmActivities
            where smmActivities.RecId == smmActivitiesRecId;

        delete_from psaActivitySetup
            where psaActivitySetup.ActivityNumber == activityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add Task.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID.</param>
    /// <param name = "_parentElementNumber">Element number of this task's parent.</param>
    /// <param name = "_name">Name of this task.</param>
    /// <param name = "_effort">Effort hours of this task.</param>
    /// <param name = "_startDate">Start date of this task.</param>
    /// <param name = "_endDate">End date of this task.</param>
    /// <param name = "_duration">Duration of this task.</param>
    /// <param name = "_numberOfResources">Number of resources of this task.</param>
    /// <returns><c>HierarchyTreeTable</c> record ID.</returns>
    public static RecId addTask(HierarchyIdBase _hierarchyId, ElementNumber _parentElementNumber, smmActivityPurpose _name,
        Hours _effort, SchedFromDate _startDate, SchedToDate _endDate, Hours _duration, real _numberOfResources)
    {
        HierarchyTreeTable  hierarchyTreeTable;
        smmActivities       smmActivities;
        PSAActivitySetup    psaActivitySetup;

        hierarchyTreeTable.HierarchyId = _hierarchyId;
        hierarchyTreeTable.ElementNumber = NumberSeq::newGetNum(CompanyInfo::numRefElementNumber()).num();
        hierarchyTreeTable.ParentElementNumber = _parentElementNumber;
        hierarchyTreeTable.SiblingNumber = HierarchyTreeTable::nextSiblingNum(_hierarchyId, _parentElementNumber);
        hierarchyTreeTable.Name = _name;
        hierarchyTreeTable.ElementNodeType = ElementNodeType::Activity;

        smmActivities.setActivityNum();
        smmActivities.Purpose = _name;
        smmActivities.StartDateTime = DateTimeUtil::newDateTime(_startDate, 0, DateTimeUtil::getUserPreferredTimeZone());
        smmActivities.EndDateTime = DateTimeUtil::newDateTime(_endDate, timeMax(), DateTimeUtil::getUserPreferredTimeZone());
        smmActivities.Category = smmActivityCategory::Task;
        smmActivities.ResponsibleWorker = HcmEmployment::findByWorkerLegalEntity(HcmWorkerLookup::currentWorker(), CompanyInfo::current()).Worker;

        psaActivitySetup.ActivityNumber = smmActivities.ActivityNumber;
        psaActivitySetup.Effort = _effort;
        psaActivitySetup.ActivityDuration = _duration;
        psaActivitySetup.PSASchedStart = _startDate;
        psaActivitySetup.PSASchedEnd = _endDate;
        psaActivitySetup.NumberOfResources = _numberOfResources;

        ttsbegin;
        smmActivities.insert();
        psaActivitySetup.insert();
        hierarchyTreeTable.RefRecId = smmActivities.RecId;
        hierarchyTreeTable.insert();
        ttscommit;

        return hierarchyTreeTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indentTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indent task.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID.</param>
    /// <param name = "_taskElementNumber">Element number for this Task.</param>
    /// <param name = "_aboveSiblingElementNumber">Element number for the task above this task.</param>
    /// <param name = "_newSiblingNumber">Line number for the new sibiling of this task.</param>
    public static void indentTasks(HierarchyIdBase _hierarchyId, ElementNumber _taskElementNumber, ElementNumber _aboveSiblingElementNumber, LineNum _newSiblingNumber)
    {
        HierarchyTreeTable hierarchyTreeTable;
        hierarchyTreeTable.skipDataMethods(true);
        hierarchyTreeTable.skipEvents(true);
        update_recordset hierarchyTreeTable
            setting
            ParentElementNumber = _aboveSiblingElementNumber,
            SiblingNumber = _newSiblingNumber,
            Level = hierarchyTreeTable.Level + 1
        where hierarchyTreeTable.HierarchyId == _hierarchyId
            && hierarchyTreeTable.ElementNumber == _taskElementNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTaskAttributesForNewlyCreatedParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear task attributes for the newly created parent task.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID.</param>
    /// <param name = "_taskElementNumber">Element number for this task.</param>
    public static void clearTaskAttributesForNewlyCreatedParent(HierarchyIdBase _hierarchyId, ElementNumber _taskElementNumber)
    {
        HierarchyTreeTable  hierarchyTreeTable;
        smmActivities       smmActivities;
        PSAActivitySetup    psaActivitySetup;

        ttsbegin;
        update_recordset psaActivitySetup
        setting
            Effort = 0,
            ActivityDuration = 0
        join RecId from smmActivities
            where smmActivities.ActivityNumber == psaActivitySetup.ActivityNumber
            join RecId from hierarchyTreeTable
                where hierarchyTreeTable.RefRecId == smmActivities.RecId
                      && hierarchyTreeTable.HierarchyId == _hierarchyId
                      && hierarchyTreeTable.ElementNumber == _taskElementNumber;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaskinfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set task info.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID.</param>
    /// <param name = "_taskElementNumber">Element number for this task.</param>
    /// <param name = "_name">Name of this task.</param>
    /// <param name = "_effort">Effort hours of this task.</param>
    /// <param name = "_startDate">Start date of this task.</param>
    /// <param name = "_endDate">End date of this task.</param>
    /// <param name = "_duration">Duration for of task.</param>
    /// <param name = "_numberOfResources">Number of resources of this task.</param>
    /// <param name = "_isRoot">Whether if this is a root task.</param>
    public static void setTaskinfo(HierarchyIdBase _hierarchyId, ElementNumber _taskElementNumber, smmActivityPurpose _name, Hours _effort,
        SchedFromDate _startDate, SchedToDate _endDate, Hours _duration, real _numberOfResources, boolean _isRoot = false)
    {
        HierarchyTreeTable  hierarchyTreeTable;
        smmActivities       smmActivities;
        PSAActivitySetup    psaActivitySetup;

        ttsbegin;
        // PSAActivitySetup should not update date by update_recordset, else resource move assignment
        // will not kick in if date has been changed.
        select forupdate psaActivitySetup
            join smmActivities
                where smmActivities.ActivityNumber == psaActivitySetup.ActivityNumber
            join hierarchyTreeTable
                where hierarchyTreeTable.RefRecId == smmActivities.RecId
                      && hierarchyTreeTable.HierarchyId == _hierarchyId
                      && hierarchyTreeTable.ElementNumber == _taskElementNumber;

        if (psaActivitySetup)
        {
            psaActivitySetup.Effort = _effort;
            psaActivitySetup.PSASchedStart = _startDate;
            psaActivitySetup.PSASchedEnd = _endDate;
            psaActivitySetup.ActivityDuration = _duration;
            psaActivitySetup.NumberOfResources = _numberOfResources;
            psaActivitySetup.update();

            smmActivities.selectForUpdate(true);
            smmActivities.Purpose = _name;
            smmActivities.StartDateTime = DateTimeUtil::newDateTime(_startDate, 0, DateTimeUtil::getUserPreferredTimeZone());
            smmActivities.endDateTime = DateTimeUtil::newDateTime(_endDate, timeMax(), DateTimeUtil::getUserPreferredTimeZone());
            smmActivities.update();

            hierarchyTreeTable.selectForUpdate(true);
            hierarchyTreeTable.reread();
            hierarchyTreeTable.Name = _name;
            hierarchyTreeTable.update();
        }

        if (_isRoot)
        {
            SalesQuotationTable salesQuotationTable =  HierarchyLinkTable::findAssociation(_hierarchyId, tableNum(SalesQuotationTable)) as SalesQuotationTable;

            SalesQuotationTable updateSalesQuotationTable;
            update_recordset updateSalesQuotationTable
            setting
                psaEstProjStartDate = _startDate,
                psaEstProjEndDate = _endDate
            where updateSalesQuotationTable.RecId == salesQuotationTable.RecId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swap tasks.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID.</param>
    /// <param name = "_taskElementNumber1">Element number for the first swapping task.</param>
    /// <param name = "_taskElementNumber2">Element number for the the other swapping task.</param>
    /// <param name = "_siblingNumber1">Line number for the first swapping task.</param>
    /// <param name = "_siblingNumber2">Line number for the other swapping task.</param>
    private static void swapTasks(HierarchyIdBase _hierarchyId, ElementNumber _taskElementNumber1, ElementNumber _taskElementNumber2, LineNumber _siblingNumber1, LineNumber _siblingNumber2)
    {
        HierarchyTreeTable  hierarchyTreeTable;
        const LineNum       SiblingNumberDelta = 0.1;

        ttsbegin;
        update_recordset hierarchyTreeTable
            setting SiblingNumber = _siblingNumber1 + SiblingNumberDelta
            where hierarchyTreeTable.HierarchyId == _hierarchyId
                  && hierarchyTreeTable.ElementNumber == _taskElementNumber2;

        update_recordset hierarchyTreeTable
            setting SiblingNumber = _siblingNumber2
            where hierarchyTreeTable.HierarchyId == _hierarchyId
                  && hierarchyTreeTable.ElementNumber == _taskElementNumber1;

        update_recordset hierarchyTreeTable
            setting SiblingNumber = hierarchyTreeTable.SiblingNumber - SiblingNumberDelta
            where hierarchyTreeTable.HierarchyId == _hierarchyId
                  && hierarchyTreeTable.ElementNumber == _taskElementNumber2;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveTaskUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Move task up.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID.</param>
    /// <param name = "_taskElementNumber">Element number for this task.</param>
    /// <param name = "_aboveSiblingElementNumber">Element number for this task sibiling just above.</param>
    /// <param name = "_siblingNumber">Line number for this task sibiling.</param>
    /// <param name = "_aboveSiblingNumber">Line number for this task sibliling just above.</param>
    public static void moveTaskUp(HierarchyIdBase _hierarchyId, ElementNumber _taskElementNumber, ElementNumber _aboveSiblingElementNumber, LineNum _siblingNumber, LineNum _aboveSiblingNumber)
    {
        ProjTaskNormalized::swapTasks(_hierarchyId, _taskElementNumber, _aboveSiblingElementNumber, _siblingNumber, _aboveSiblingNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveTaskDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Move task down.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID.</param>
    /// <param name = "_taskElementNumber">Element number for this task.</param>
    /// <param name = "_belowSiblingElementNumber">Element number for this task sibiling just below.</param>
    /// <param name = "_siblingNumber">Line number for this task sibiling.</param>
    /// <param name = "_belowSiblingNumber">Line number for this task sibliling just below.</param>
    public static void moveTaskDown(HierarchyIdBase _hierarchyId, ElementNumber _taskElementNumber, ElementNumber _belowSiblingElementNumber, LineNum _siblingNumber, LineNum _belowSiblingNumber)
    {
        ProjTaskNormalized::swapTasks(_hierarchyId, _taskElementNumber, _belowSiblingElementNumber, _siblingNumber, _belowSiblingNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outdentTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Oudent task.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID.</param>
    /// <param name = "_taskElementNumber">Element number for this task.</param>
    /// <param name = "_parentElementNumber">Element number for this task's parent.</param>
    /// <param name = "_grandParentElementNumber">Element number for this task's grand parent.</param>
    public static void outdentTasks(HierarchyIdBase _hierarchyId, ElementNumber _taskElementNumber, ElementNumber _parentElementNumber, ElementNumber _grandParentElementNumber)
    {
        HierarchyTreeTable  hierarchyTreeTable, firstBelowSiblingHierarchyTreeTable;
        LineNumber          oldSiblingNumber, newSiblingNumber, oldStartSiblingNumberForBelowSiblingsMerge, newStartSiblingNumberForBelowSiblingsMerge, parentSiblingNumber;
        real                belowSiblingsMergeDelta;
        const LineNum       SiblingNumberDelta = 0.1;

        hierarchyTreeTable.skipDataMethods(true);
        hierarchyTreeTable.skipEvents(true);

        ttsbegin;

        select firstonly SiblingNumber from hierarchyTreeTable
            where hierarchyTreeTable.ElementNumber == _taskElementNumber
                  && hierarchyTreeTable.HierarchyId == _hierarchyId;
        oldSiblingNumber = hierarchyTreeTable.SiblingNumber;

        select firstonly SiblingNumber from firstBelowSiblingHierarchyTreeTable
            order by SiblingNumber
            where firstBelowSiblingHierarchyTreeTable.HierarchyId == _hierarchyId
                  && firstBelowSiblingHierarchyTreeTable.ParentElementNumber == _parentElementNumber
                  && firstBelowSiblingHierarchyTreeTable.SiblingNumber > oldSiblingNumber;
        oldStartSiblingNumberForBelowSiblingsMerge = firstBelowSiblingHierarchyTreeTable.SiblingNumber;

        belowSiblingsMergeDelta = newStartSiblingNumberForBelowSiblingsMerge - oldStartSiblingNumberForBelowSiblingsMerge;
        update_recordset hierarchyTreeTable
        setting
        ParentElementNumber = _taskElementNumber,
        SiblingNumber = hierarchyTreeTable.SiblingNumber + belowSiblingsMergeDelta + SiblingNumberDelta
            where hierarchyTreeTable.HierarchyId == _hierarchyId
                && hierarchyTreeTable.ParentElementNumber == _parentElementNumber
                && hierarchyTreeTable.SiblingNumber > oldSiblingNumber;
        update_recordset hierarchyTreeTable
        setting
        SiblingNumber = hierarchyTreeTable.SiblingNumber - SiblingNumberDelta
            where hierarchyTreeTable.HierarchyId == _hierarchyId
                && hierarchyTreeTable.ParentElementNumber == _taskElementNumber
                && hierarchyTreeTable.SiblingNumber >= newStartSiblingNumberForBelowSiblingsMerge;

        // Update target element.
        update_recordset hierarchyTreeTable
        setting
        SiblingNumber = hierarchyTreeTable.SiblingNumber + 1 + SiblingNumberDelta
            where hierarchyTreeTable.HierarchyId == _hierarchyId
                && hierarchyTreeTable.ParentElementNumber == _grandParentElementnumber
                && hierarchyTreeTable.SiblingNumber > parentSiblingNumber;
        update_recordset hierarchyTreeTable
        setting
        SiblingNumber = hierarchyTreeTable.SiblingNumber - SiblingNumberDelta
            where hierarchyTreeTable.HierarchyId == _hierarchyId
                && hierarchyTreeTable.ParentElementNumber == _grandParentElementnumber
                && hierarchyTreeTable.SiblingNumber > parentSiblingNumber;

        update_recordset hierarchyTreeTable
        setting
        ParentElementNumber = _grandParentElementnumber,
        SiblingNumber = newSiblingNumber,
        Level = hierarchyTreeTable.Level - 1
            where HierarchyTreeTable.HierarchyId == _hierarchyId
                && hierarchyTreeTable.ElementNumber == _taskElementNumber;
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>