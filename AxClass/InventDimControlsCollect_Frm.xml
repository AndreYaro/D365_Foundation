<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimControlsCollect_Frm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimControlsCollect_Frm extends InventDimControlsCollect
{
    InventDimFormInterface      inventDimForm;
    Map                         dimDataSourceInfoMap;
    Map                         dimDataSourceTableMap;
    InventDimControlIdCollectionEnumerator controlIdCollectionEnumerator;
    TableId tableId;
    List dimFieldList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildDataSourceList</Name>
				<Source><![CDATA[
    protected void buildDataSourceList()
    {
        int             h;
        int             dataSourceCount = inventDimForm.dataSourceCount();

        for (h = 1; h <= dataSourceCount; h++)
        {
            FormDataSource dataSource = inventDimForm.dataSource(h);
            dimDataSourceTableMap.insert(dataSource.id(), dataSource.table());
            if (dataSource.table() == this.dimTableId() && this.isDataSourceValid(dataSource))
            {
                dimDataSourceInfoMap.insert(dataSource.id(), dataSource.name());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromForm</Name>
				<Source><![CDATA[
    protected void buildFromForm(
        int         _id         = 0,
        boolean     _isInGrid   = false)
    {
        int                     i,h;
        Object                  father,buildFather;

        InventDimAxFormAdapter adapter = inventDimForm as InventDimAxFormAdapter;

        FormRun runForm = adapter.parmFormObject();
        form form = runForm.form();
        FormDesign runDesign = runForm.design();

        if (_id)
        {
            father      = runDesign.control(_id);
            buildFather = form.design().control(father.id());
        }
        else
        {
            father      = runDesign;
            buildFather = form.design();
        }

        i = buildFather.controlCount();

        for (h = 1; h <= i; h++)
        {
            FormBuildControl buildChild = buildFather.controlNum(h);
            FormControl child = runDesign.control(buildChild.id());

            if (buildChild.isContainer())
            {
                switch (child.handle())
                {
                    case classNum(FormGroupControl):
                        // Control which can be both in a grid and outside of a grid
                        this.buildFromForm(child.id(), _isInGrid);
                        break;
                    case classNum(FormGridControl):
                        this.buildFromForm(child.id(), true);
                        break;
                    case classNum(FormActionPaneControl),
                         classNum(FormReferenceGroupControl),
                         classNum(FormButtonGroupControl):
                        // Controls which cannot contain inventory dimension controls in any child node, so no need to traverse
                        break;
                    default:
                        // Controls which can't be in a grid
                        this.buildFromForm(child.id(), false);
                        break;
                }
            }
            else
            {
                this.insertFormFieldControl(child,_isInGrid);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromListPageInteraction</Name>
				<Source><![CDATA[
    protected void buildFromListPageInteraction(
        int         _id         = 0,
        boolean     _isInGrid   = false)
    {
        // Obtain the list page field names
        InventDimListPageInteractionAdapter adapter             = inventDimForm as InventDimListPageInteractionAdapter;
        ListPageInteraction                 listPageInteraction = adapter.parmListPageInteractionObject();
        Array                               fieldNames          = listPageInteraction.listPage().listPageFieldNames();
        int                                 i;
        int                                 lastIndex = fieldNames.lastIndex();

        // For each field in the list page, create a field control adapter
        for (i = 1; i <= lastIndex; i++)
        {
            str fieldName = fieldNames.value(i);
            this.insertListPageFieldControl(fieldName, listPageInteraction);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceName</Name>
				<Source><![CDATA[
    public str datasourceName(InventDimControlInterface _fc)
    {
        InventDimFormControlInterface   formControl = _fc;

        if (formControl is InventDimListPageControlAdapter)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        int dataSource = formControl.dataSource();

        if (!dataSource ||
            !fieldExt2Id(formControl.dataField()) ||
            !dimDataSourceInfoMap.exists(dataSource))
        {
            return '';
        }

        return dimDataSourceInfoMap.lookup(dataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this class.
    /// </summary>
    /// <remarks>
    ///    Should always be called from the constructing new method.
    /// </remarks>
    protected void init()
    {
        super();

        dimDataSourceInfoMap = new Map(Types::Integer, Types::String);
        dimDataSourceTableMap = new Map(Types::Integer, Types::Integer);

        this.buildCompareList();

        if (inventDimForm is InventDimAxFormAdapter)
        {
            if (controlIdCollectionEnumerator)
            {
                while (controlIdCollectionEnumerator.moveNext())
                {
                    this.buildFromForm(controlIdCollectionEnumerator.current(), controlIdCollectionEnumerator.isCurrentInGrid());
                }
            }
            else
            {
                this.buildFromForm();
            }
        }
        else if (inventDimForm is InventDimListPageInteractionAdapter)
        {
            this.buildFromListPageInteraction();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertInList</Name>
				<Source><![CDATA[
    protected boolean mustInsertInList(InventDimControlInterface _o)
    {
        InventDimFormControlInterface   formControl = _o;

        if (formControl is InventDimListPageControlAdapter)
        {
            InventDimListPageControlAdapter listPageControlAdapter = _o as InventDimListPageControlAdapter;
            if (listPageControlAdapter.tableId() != this.dimTableId())
            {
                return false;
            }
        }
        else
        {
            switch (classIdGet(formControl.controlObject()))
            {
                // Only below list of control types can be used for inventory dimensions
                case classNum(FormStringControl),
                     classNum(FormCheckBoxControl),
                     classNum(FormComboBoxControl),
                     classNum(FormDateControl),
                     classNum(FormDateTimeControl),
                     classNum(FormIntControl),
                     classNum(FormRadioControl),
                     classNum(FormRealControl),
                     classNum(FormTimeControl),
                     classNum(CLRObject):           // ASP bound fields
                    break;
                default:
                    return false;
            }

            int dataSource = formControl.dataSource();

            if (!dataSource || !fieldExt2Id(formControl.dataField()))
            {
                return false;
            }

            if (!dimDataSourceInfoMap.exists(dataSource))
            {
                return false;
            }
        }

        if (!dimFieldIdSet.in(this.fieldId(_o)))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDataFieldList</Name>
				<Source><![CDATA[
    protected void buildDataFieldList()
    {
        if (dimFieldList)
        {
            dimFieldIdSet = InventDim::dimFieldList2Set(dimFieldList);
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>tableId</c> value of the table that holds the dimension fields.
    /// </summary>
    /// <returns>
    ///    A <c>tableId</c> value of the <c>InterCompanyInventDim</c> table.
    /// </returns>
    protected TableId dimTableId()
    {
        if (tableId)
        {
            return tableId;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()    
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmControlIdCollectionEnumerator</Name>
				<Source><![CDATA[
    private InventDimControlIdCollectionEnumerator parmControlIdCollectionEnumerator(InventDimControlIdCollectionEnumerator _controlIdCollectionEnumerator =controlIdCollectionEnumerator)
    {
        controlIdCollectionEnumerator = _controlIdCollectionEnumerator;
        return controlIdCollectionEnumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimForm</Name>
				<Source><![CDATA[
    public InventDimFormInterface parmInventDimForm(InventDimFormInterface _inventDimForm = inventDimForm)
    {
        inventDimForm = _inventDimForm;
        return inventDimForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
    public TableId parmTableId(TableId _tableId = tableId)
    {
        tableId = _tableId;
        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimFieldList</Name>
				<Source><![CDATA[
    public List parmDimFieldList(List _dimFieldList = dimFieldList)
    {
        dimFieldList = _dimFieldList;
        return dimFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventDimControlsCollect_Frm construct()
    {
        return new InventDimControlsCollect_Frm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormInterfaceValidDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <see cref="InventDimControlsCollect_Frm Class" /> for
    ///    forms.
    /// </summary>
    /// <param name="_inventDimForm">
    ///    The form where controls are maintained encapsulated in the <see cref="InventDimFormInterface
    ///    Interface" /> class.
    /// </param>
    /// <param name="_validDataSources">
    ///    A set of names (strings) for the data sources in the form to be controlled by this class.
    /// </param>
    /// <param name="_controlIdCollectionEnumerator">
    ///    An instance of the <c>InventDimControlIdCollectionEnumerator</c> class; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <see cref="InventDimControlsCollect_Frm Class" />.
    /// </returns>
    public static InventDimControlsCollect_Frm newFromFormInterfaceValidDataSources(
        InventDimFormInterface  _inventDimForm,
        Set                     _validDataSources,
        InventDimControlIdCollectionEnumerator _controlIdCollectionEnumerator = null
        )
    {
        InventDimControlsCollect_Frm   inventDimControlsCollect_Frm = InventDimControlsCollect_Frm::construct();

        inventDimControlsCollect_Frm.parmInventDimForm(_inventDimForm);
        inventDimControlsCollect_Frm.parmValidDataSources(_validDataSources);
        inventDimControlsCollect_Frm.parmControlIdCollectionEnumerator(_controlIdCollectionEnumerator);
        inventDimControlsCollect_Frm.init();
        return inventDimControlsCollect_Frm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormInterfaceValidDataSourcesAndDimensionsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <see cref="InventDimControlsCollect_Frm Class" /> for
    ///    forms.
    /// </summary>
    /// <param name="_inventDimForm">
    ///    The form where controls are maintained encapsulated in the <see cref="InventDimFormInterface
    ///    Interface" /> class.
    /// </param>
    /// <param name="_validDataSources">
    ///    A set of names (strings) for the data sources in the form to be controlled by this class.
    /// </param>
    /// <param name="_controlIdCollectionEnumerator">
    ///    An instance of the <c>InventDimControlIdCollectionEnumerator</c> class; optional.
    /// </param>
    /// <param name="_tableId">
    ///    The <c>tableId</c> value of the table that holds the dimension fields; optional.
    /// </param>
    /// <param name="_dimFieldList">
    ///    A list of the dimension fields; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <see cref="InventDimControlsCollect_Frm Class" />.
    /// </returns>
    public static InventDimControlsCollect_Frm newFromFormInterfaceValidDataSourcesAndDimensionsList(
        InventDimFormInterface _inventDimForm,
        Set _validDataSources,
        InventDimControlIdCollectionEnumerator _controlIdCollectionEnumerator = null,
        TableId _tableId = tableNum(InventDim),
        List _dimFieldList = InventDim::dimFieldsList()
        )
    {
        InventDimControlsCollect_Frm   inventDimControlsCollect_Frm = InventDimControlsCollect_Frm::construct();

        inventDimControlsCollect_Frm.parmInventDimForm(_inventDimForm);
        inventDimControlsCollect_Frm.parmValidDataSources(_validDataSources);
        inventDimControlsCollect_Frm.parmControlIdCollectionEnumerator(_controlIdCollectionEnumerator);
        inventDimControlsCollect_Frm.parmTableId(_tableId);
        inventDimControlsCollect_Frm.parmDimFieldList(_dimFieldList);
        inventDimControlsCollect_Frm.init();
        return inventDimControlsCollect_Frm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>