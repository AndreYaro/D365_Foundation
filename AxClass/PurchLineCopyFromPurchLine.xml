<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineCopyFromPurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchLineCopyFromPurchLine</c> class is responsible for copying from a <c>PurchLine</c>.
/// </summary>
[PurchLineCopyFromSourceFactory(tableStr(PurchLine))]
class PurchLineCopyFromPurchLine extends PurchLineCopyFromSource
{
    #ISOCountryRegionCodes
    #localMacro.cachedLineAddressFields
        purchLine.DeliveryPostalAddress,
        purchLine.DeliveryName,
        purchLine.AddressRefRecId,
        purchLine.AddressRefTableId
    #endMacro

        PurchLine       sourcePurchLine;
        Map             cachedAddressFromInventDim;
        boolean         addressFromInventDimWasCached;
        NoYes           copyQty_package;

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCopy</Name>
				<Source><![CDATA[
        public boolean canCopy()
        {
            if (deleteLines && sourcePurchLine.PurchId == purchTable.PurchId)
            {
                return false; // skip copy identical lines to the same order
            }

            return true;
        }

]]></Source>
			</Method>
			<Method>
				<Name>copyAgreementRelatedData</Name>
				<Source><![CDATA[
        protected void copyAgreementRelatedData()
        {
            if (purchTable.MatchingAgreement)
            {
                agreementLine = sourcePurchLine.findAgreementLine();
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromSource</Name>
				<Source><![CDATA[
        protected void copyFromSource()
        {
            TmpFrmVirtual tmpFrmVirtualRBOLines;

            super();

            if (cachedAddressFromInventDim.exists(sourcePurchLine.InventDimId))
            {
                [#cachedLineAddressFields]      = cachedAddressFromInventDim.lookup(sourcePurchLine.InventDimId);
                addressFromInventDimWasCached   = true;
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                if (sourcePurchLine.RetailPackageId && sourcePurchLine.rboPackageLineNum)
                {
                    RetailPackagePurch              tPackagePurch;

                    select firstonly RecId from tmpFrmVirtualRBOLines
                    join TableId, RecId, PurchId, PackageId, LineNum from tPackagePurch
                        where tPackagePurch.TableId   == tmpFrmVirtualRBOLines.TableNum
                            &&    tPackagePurch.RecId     == tmpFrmVirtualRBOLines.RecordNo
                            &&    tPackagePurch.PurchId   == sourcePurchLine.PurchId
                            &&    tPackagePurch.PackageId == sourcePurchLine.RetailPackageId
                            &&    tPackagePurch.LineNum   == sourcePurchLine.rboPackageLineNum;

                    if (tmpFrmVirtualRBOLines)
                    {
                        copyQty_package = NoYes::Yes;
                        container rboLineNumCont = purchCopying.parmRBOLineNumCon();
                        [rboLineNumCont, purchLine.rboPackageLineNum] = purchCopying.lineNumIndex(rboLineNumCont, sourcePurchLine.PurchId, sourcePurchLine.rboPackageLineNum);
                        purchCopying.parmRBOLineNumCon(rboLineNumCont);
                        purchLine.RetailPackageId = sourcePurchLine.RetailPackageId;
                    }
                }

                purchLine.initFromPurchLine(sourcePurchLine,
                copyPrecisely,
                !searchPrice,
                copyQty_package || copyQty,
                copyPrecisely && purchTable.ProjId,
                tmpFrmVirtualLine.Qty,
                tmpFrmVirtualLine.PdsCWQty,
                !addressFromInventDimWasCached);
            }
            else
            {
                purchLine.initFromPurchLine(sourcePurchLine,
                copyPrecisely,
                !searchPrice,
                copyQty,
                copyPrecisely && purchTable.ProjId,
                tmpFrmVirtualLine.Qty,
                tmpFrmVirtualLine.PdsCWQty,
                !addressFromInventDimWasCached);
            }

            parentRecId   = sourcePurchLine.RecId;
            parentTableId = sourcePurchLine.TableId;

            if (!addressFromInventDimWasCached)
            {
                cachedAddressFromInventDim.insert(purchLine.InventDimId, [#cachedLineAddressFields]);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
            && copyQty_package
            && !copyQty)
            {
                purchLine.PurchQty     = decRound(tmpFrmVirtualRBOLines.Qty == 0 ? 0 : purchLine.QtyOrdered / tmpFrmVirtualRBOLines.Qty,
                                        UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(purchLine.PurchUnit)));
                purchLine.QtyOrdered   = tmpFrmVirtualRBOLines.Qty == 0 ? 0 : purchLine.QtyOrdered / tmpFrmVirtualRBOLines.Qty;
            }

            purchCopying.parmtmpFrmVirtualRBOLines(tmpFrmVirtualRBOLines);
        }

]]></Source>
			</Method>
			<Method>
				<Name>copyProjectData</Name>
				<Source><![CDATA[
        protected void copyProjectData()
        {
            if (purchLine.ProjId != purchTable.ProjId && copyPrecisely)
            {
                ProjTable projTable = ProjTable::find(purchLine.ProjId);
                purchLine.initFromProjTable(projTable);
                purchLine.ActivityNumber     = '';
                purchLine.ProjCategoryId     = sourcePurchLine.ProjCategoryId;
            }

            if (tmpFrmVirtualLine.TableNum == tableNum(PurchLine)
            && sourcePurchLine.ProjId
            && reverseSign
            && sourcePurchLine.purchTable().isProjectSalesItemReqPO()
            && !purchTable.isProjectSalesItemReqPO())
            {
                projCreditNoteSourceRefRecId = sourcePurchLine.RecId;
                SysTransactionScopeCache::set(classStr(PurchCopying), identifierStr(projCreditNoteSourceRefRecId), projCreditNoteSourceRefRecId);
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCurrencyCode</Name>
				<Source><![CDATA[
        protected CurrencyCode retrieveCurrencyCode()
        {
            CurrencyCode currencyCode;

            if (purchLine.CurrencyCode != sourcePurchLine.CurrencyCode)
            {
                currencyCode = sourcePurchLine.CurrencyCode;
            }
        
            return currencyCode;
        }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceQty</Name>
				<Source><![CDATA[
        public Qty retrieveSourceQty()
        {
            return sourcePurchLine.PurchQty;
        }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceInventTransId</Name>
				<Source><![CDATA[
        public InventTransId retrieveSourceInventTransId()
        {
            return sourcePurchLine.InventTransId;
        }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceLineNumber</Name>
				<Source><![CDATA[
        public TradeLineNumber retrieveSourceLineNumber()
        {
            return sourcePurchLine.LineNumber;
        }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSourceDocumentLineRecId</Name>
				<Source><![CDATA[
        public RefRecId retrieveSourceDocumentLineRecId()
        {
            return sourcePurchLine.SourceDocumentLine;
        }

]]></Source>
			</Method>
			<Method>
				<Name>copyCategoryRelatedData</Name>
				<Source><![CDATA[
        protected void copyCategoryRelatedData()
        {
            if (purchLine.isCategoryBased())
            {
                purchLineForeignTradeCategory.initFromPurchLineForeignTradeCategory(
                PurchLineForeignTradeCategory::find(sourcePurchLine.InventTransId, sourcePurchLine.DataAreaId));
                copyForeignTradeRecord = true;
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>updateCountrySpecificData</Name>
				<Source><![CDATA[
        protected void updateCountrySpecificData()
        {
            super();

            if (TaxIntegrationUtils::isFormTrackingEnabled_IN())
            {
                // Form tracking
                TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();
                if (transitDocManager.existsAnyTransitDocType() &&
                    transitDocManager.existTransitRuleForTransType(tableNum(purchLine)))
                {
                    transitDocManager.transit(sourcePurchLine, purchLine, purchTable);

                    TransTaxInformationHelper::resetCustVendLocationByTransTable(purchLine);
                }
            }

        }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnSource</Name>
				<Source><![CDATA[
        public void updateBasedOnSource()
        {
            if (TaxParameters::isCustomsEnable_IN()
                && copyPrecisely
                && purchLine.PurchQty >= 0
                && TaxParameters::find().EximIncentiveSchemes_IN)
            {
                EximPurchLine_IN::copyEximPurchLine(this.retrieveSource(), purchLine.RecId);
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAgreementLine</Name>
				<Source><![CDATA[
        protected void retrieveAgreementLine()
        {
            //check if the agreement line from the original purchase line can be used
            if (purchTable.MatchingAgreement)
            {
                agreementLine = sourcePurchLine.findAgreementLine();
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
        protected void initialize(PurchLine _purchLine, PurchTable _purchTable, TmpFrmVirtual _tmpFrmVirtualLines, PurchCopying _purchCopying)
        {
            super(_purchLine, _purchTable, _tmpFrmVirtualLines, _purchCopying);
            sourcePurchLine = PurchLine::findRecId(_tmpFrmVirtualLines.RecordNo);

            cachedAddressFromInventDim = new Map(Types::String, Types::Container);
        }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSource</Name>
				<Source><![CDATA[
        public Common retrieveSource()
        {
            return sourcePurchLine;
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>