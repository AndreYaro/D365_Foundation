<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvancedLedgerEntryPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains the logic for posting a single advanced ledger entry transaction.
/// </summary>
class AdvancedLedgerEntryPost extends RunBase
{
    AdvancedLedgerEntryHeader   advancedLedgerEntryHeader;
    AdvancedLedgerEntryId       advancedLedgerEntryId;
    boolean                     isPostFailed;
    boolean                     posted;

    Counter                     numOfLinesProcessed;
    Counter                     progressCounter;

    boolean validateIsBlockedForManualEntry;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAdvancedLedgerEntryHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the advanced ledger entry header that are selected for posting.
    /// </summary>
    /// <param name="_advancedLedgerEntryHeader">
    /// The table buffer to be checked.
    /// </param>
    /// <param name="isCheckedOnlyForPosting">
    /// Will differenciate the checks that are exlusive to advanced ledger entry posting.
    /// </param>
    /// <returns>
    /// true if the advanced ledger entry header is valid for processing; otherwise, false.
    /// </returns>
    public boolean checkAdvancedLedgerEntryHeader(
        AdvancedLedgerEntryHeader _advancedLedgerEntryHeader = null,
        boolean isCheckedOnlyForPosting = true)
    {
        boolean isValid = true;

        if (_advancedLedgerEntryHeader)
        {
            advancedLedgerEntryHeader = _advancedLedgerEntryHeader;
        }

        if (advancedLedgerEntryHeader.RecId == 0)
        {
            isValid = checkFailed(strFmt("@SYS127812", advancedLedgerEntryId));
        }
        else if (advancedLedgerEntryHeader.ReverseEntry == true && AdvancedLedgerEntryManager::checkAdvancedLedgerEntryNumberSequence() == false)
        {
            isValid = checkFailed(strFmt("@SPS1274", "@SPS1174", enum2str(NumberSeqModule::Ledger)));
        }
        else
        {
            if (advancedLedgerEntryHeader.WorkFlowStatus
                && (isCheckedOnlyForPosting
                    && (advancedLedgerEntryHeader.WorkFlowStatus == AdvancedLedgerEntryWFApprovalStatus::Rejected
                        ||  advancedLedgerEntryHeader.WorkFlowStatus == AdvancedLedgerEntryWFApprovalStatus::Submitted
                        ||  advancedLedgerEntryHeader.WorkFlowStatus != AdvancedLedgerEntryWFApprovalStatus::Approved)))
            {
                isValid = checkFailed(strFmt("@SPS1723", advancedLedgerEntryId, advancedLedgerEntryHeader.WorkFlowStatus));
            }

            // checking the document if it is already been posted
            if (isValid && AdvancedLedgerEntryManager::checkTransactionStatusForWrite(
                                advancedLedgerEntryHeader.TransactionStatus,
                                advancedLedgerEntryHeader.TransactionNumber, false) == false)
            {
                isValid = checkFailed(strFmt("@SPS1707", advancedLedgerEntryId));
            }

            if (isValid && advancedLedgerEntryHeader.numOfLines() == 0)
            {
                isValid = checkFailed("@SPS2384");
            }

            // for valid posting the AccountingDate should be valid and in Open Fiscal period
            isValid = isValid && AdvancedLedgerEntryManager::validateAccountingDate(advancedLedgerEntryHeader.AccountingDate);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAdvancedLedgerEntryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all the advanced ledger entry lines that are selected for posting.
    /// </summary>
    /// <param name="_advancedLedgerEntryHeader">
    /// The table buffer to be checked.
    /// </param>
    /// <param name="isCheckedOnlyForPosting">
    /// Will differenciate the checks that are exlusive to advanced ledger entry posting.
    /// </param>
    /// <returns>
    /// true if the advanced ledger entry lines are valid for processing; otherwise, false.
    /// </returns>
    public boolean checkAdvancedLedgerEntryLine(
        AdvancedLedgerEntryHeader _advancedLedgerEntryHeader = null,
        boolean isCheckedOnlyForPosting = true)
    {
        AdvancedLedgerEntryLine advanedLedgerEntryLine;

        boolean allOk = true;

        if (_advancedLedgerEntryHeader)
        {
            advancedLedgerEntryHeader = _advancedLedgerEntryHeader;
        }

        if (advancedLedgerEntryHeader)
        {
            while select advanedLedgerEntryLine
                where advanedLedgerEntryLine.AdvancedLedgerEntryHeader == advancedLedgerEntryHeader.RecId
            {
                if (isCheckedOnlyForPosting)
                {
                    // showing current line progress
                    this.displayProgress(advanedLedgerEntryLine.LineNumber, advancedLedgerEntryHeader.AccountingDate);
                }

                if (!this.checkLine(advanedLedgerEntryLine))
                {
                    allOk = false;
                }
            }
        }

        return allOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a <c>AdvancedLedgerEntryLine</c> record can be posted.
    /// </summary>
    /// <param name="_advancedLedgerEntryLine">
    /// The table buffer to be checked.
    /// </param>
    /// <returns>
    /// true if the line is valid for posting; otherwise, false.
    /// </returns>
    private boolean checkLine(AdvancedLedgerEntryLine _advancedLedgerEntryLine)
    {
        boolean ok = true;

        if (_advancedLedgerEntryLine.AmountCurCredit == 0 && _advancedLedgerEntryLine.AmountCurDebit == 0)
        {
            // Amount on the line is zero.
            ok = checkFailed(strFmt("@SPS1706", advancedLedgerEntryHeader.TransactionNumber)) && ok;
        }
        else if (_advancedLedgerEntryLine.AmountCurCredit && _advancedLedgerEntryLine.AmountCurDebit)
        {
            // Debit and Credit Amount on the line are filled.
            ok = checkFailed("@SYS93729") && ok;
        }

        // Check currency
        ok = ok && AdvancedLedgerEntryManager::validateCurrency(_advancedLedgerEntryLine.TransactionCurrency) ;

        // Check Journalizing Definition
        ok = ok && AdvancedLedgerEntryManager::checkValidJournalizingDefinition(_advancedLedgerEntryLine.JournalizingDefinition, advancedLedgerEntryHeader.AccountingDate);

        // Check ledger Dimension
        ok = ok && AdvancedLedgerEntryManager::validateLedgerDimensionWithManualEntry(
            _advancedLedgerEntryLine.LedgerDimension,
            advancedLedgerEntryHeader.AccountingDate,
            validateIsBlockedForManualEntry);

        // Check project category
        if (_advancedLedgerEntryLine.ProjId && _advancedLedgerEntryLine.ProjCategoryId)
        {
            ok = ok && this.checkLineDistributionsProjectCategory(_advancedLedgerEntryLine);
        }

        //if line pass the validation then increse the number of pass lines
        if (ok)
        {
            numOfLinesProcessed++;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineDistributionsProjectCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a Project category of <c>AccountingDistribution</c> record of given <c>AdvancedLedgerEntryLine</c> is valid.
    /// </summary>
    /// <param name="_advancedLedgerEntryLine">
    /// The table buffer to be checked.
    /// </param>
    /// <returns>
    /// true if Project category of <c>AccountingDistribution</c> record of given <c>AdvancedLedgerEntryLine</c> is valid; otherwise, false.
    /// </returns>
    protected boolean checkLineDistributionsProjectCategory(AdvancedLedgerEntryLine _advancedLedgerEntryLine)
    {
        boolean                         valid = true;
        AccountingDistribution          accountingDistribution;
        ProjectAccountingDistribution   projectAccountingDistribution;

        while select projectAccountingDistribution
            exists join accountingDistribution
            where accountingDistribution.RecId              == projectAccountingDistribution.AccountingDistribution
               && accountingDistribution.SourceDocumentLine == _advancedLedgerEntryLine.SourceDocumentLine
        {
            if (!AdvancedLedgerEntryManager::checkProjCategoryId(projectAccountingDistribution.editProjectCategoryId(false, '')))
            {
                valid = false;
                break;
            }
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDummyProjectJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ProjJournalTrans</c> record that will be used in indirect cost component posting value.
    /// </summary>
    /// <param name="_projEmplTrans">
    /// A <c>ProjEmplTrans</c> record.
    /// </param>
    /// <returns>
    /// A <c>ProjJournalTrans</c> record.
    /// </returns>
    protected ProjJournalTrans createDummyProjectJournal(ProjEmplTrans _projEmplTrans)
    {
        ProjJournalTrans            projJournalTrans;
        PSAIndirectComponentGroupId indirectComponentGroupId;

        indirectComponentGroupId = PSAComponentGroupAssignment::findAssignment(
            _projEmplTrans.ProjId,
            _projEmplTrans.Resource,
            _projEmplTrans.CategoryId,
            _projEmplTrans.TransDate).IndirectComponentGroup;

        // Create a dummy ProjJournalTrans buffer for creating a ProjPosting records for Indirect Cost Component ledger updates
        projJournalTrans.TransId                    = _projEmplTrans.TransId;
        projJournalTrans.CategoryId                 = _projEmplTrans.CategoryId;
        projJournalTrans.CostPrice                  = _projEmplTrans.costPrice();
        projJournalTrans.CurrencyId                 = _projEmplTrans.CurrencyId;
        projJournalTrans.DefaultDimension           = _projEmplTrans.DefaultDimension;
        projJournalTrans.ProjId                     = _projEmplTrans.ProjId;
        projJournalTrans.Qty                        = _projEmplTrans.Qty;
        projJournalTrans.ProjTransDate              = _projEmplTrans.TransDate;
        projJournalTrans.psaIndirectComponentGroup  = indirectComponentGroupId;
        projJournalTrans.SalesPrice                 = _projEmplTrans.salesPrice();
        projJournalTrans.TaxGroupId                 = _projEmplTrans.TaxGroupId;
        projJournalTrans.TaxItemGroupId             = _projEmplTrans.TaxItemGroupId;
        projJournalTrans.LinePropertyId             = _projEmplTrans.LinePropertyId;
        projJournalTrans.Resource                   = _projEmplTrans.Resource;
        projJournalTrans.ResourceCategory           = _projEmplTrans.ResourceCategory;
        projJournalTrans.ActivityNumber             = _projEmplTrans.ActivityNumber;

        return projJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseAdvancedLedgerEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reversed advanced ledger entry transaction for a selected advanced ledger entry record.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// An error is thrown and posting is abort if advanced ledger entry reversal is failed.
    /// </exception>
    private void createReverseAdvancedLedgerEntry()
    {
        AdvancedLedgerEntryId reversedTransactionNum;

        if (posted == true && advancedLedgerEntryHeader.ReverseEntry == true)
        {
            reversedTransactionNum = AdvancedLedgerEntryManager::reverseAdvancedLedgerEntry(advancedLedgerEntryHeader);

            if (reversedTransactionNum)
            {
                info(strFmt("@SPS1705", reversedTransactionNum));
            }
            else
            {
                throw error(strFmt("@SPS1709", advancedLedgerEntryId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the progress of the post operation using the specified line number and transaction date.
    /// </summary>
    /// <param name="_lineNum">
    /// The line number of the advanced ledger entry transaction.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date of a advanced ledger entry transaction.
    /// </param>
    private void displayProgress(
        LineNum     _lineNum,
        TransDate   _transDate)
    {
        progressCounter++;

        progress.setCount(progressCounter);

        progress.setText(strFmt("@SYS97556", real2int(_lineNum), _transDate));

        progress.update(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvancedLedgerEntryId</Name>
				<Source><![CDATA[
    public AdvancedLedgerEntryId parmAdvancedLedgerEntryId(AdvancedLedgerEntryId _advancedLedgerEntryId = advancedLedgerEntryId)
    {
        advancedLedgerEntryId = _advancedLedgerEntryId;
        return advancedLedgerEntryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the advanced ledger entry transactions into the general ledger.
    /// </summary>
    [Hookable(true)]
    protected void postToLedger()
    {
        SourceDocument  sourceDocument;
        NumberSeq       numberSeq;
        Voucher         voucher;

        ttsbegin;
        //Initialize the number sequence for voucher
        numberSeq = NumberSeq::newGetVoucherFromId(LedgerParameters::numRefAdvancedLedgerEntryVoucher().NumberSequenceId);
        voucher = numberSeq.voucher();

        advancedLedgerEntryHeader.selectForUpdate(true);
        advancedLedgerEntryHeader.LedgerVoucher = voucher;
        advancedLedgerEntryHeader.TransactionStatus = AdvancedLedgerEntryTransactionStatus::Posted;
        advancedLedgerEntryHeader.update();

        sourceDocument = SourceDocument::newFromSourceDocumentImplementation(advancedLedgerEntryHeader);

        //Process the source document
        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(
            advancedLedgerEntryHeader,
            false,
            SourceDocumentAccountingStatus::Completed);

        sourceDocument = SourceDocument::newFromSourceDocumentImplementation(advancedLedgerEntryHeader);
        posted = true;

        if (sourceDocument.parmSourceDocumentHeader().AccountingStatus != SourceDocumentAccountingStatus::Completed)
        {
            throw error("@SYS25904");
        }

        this.processIndirectComponentTrans();

        if (AdvancedLedgerEntryHeader::hasProjectLines(advancedLedgerEntryHeader.RecId))
        {
            this.invoiceProjectFeeTransaction();
        }

        TransactionLog::create(TransactionLogType::AdvancedLedgerEntry, "@SPS1174");

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processIndirectComponentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all <c>AdvancedLedgerEntryLineo</c> records that have indirect cost components.
    /// </summary>
    private void processIndirectComponentTrans()
    {
        ProjJournalTrans                projJournalTrans;
        ProjPost                        projPost;
        PSAProjPostEmplIndirectJournal  psaProjPostEmplIndirectJournal;
        LedgerVoucher                   ledgerVoucher;
        LedgerVoucherObject             ledgerVoucherObject;
        NumberSequenceCode              voucherSeriesCode;
        AccountingDistribution          accountingDistribution;
        ProjectAccountingDistribution   projectAccountingDistribution;
        ProjEmplTrans                   projEmplTrans;
        ProjEmplTransCost               projEmplTransCost;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            ttsbegin;

            while select projEmplTrans
                exists join projEmplTransCost
                where projEmplTransCost.TransId == projEmplTrans.TransId
                exists join projectAccountingDistribution
                where projectAccountingDistribution.ProjEmplTransCost == projEmplTransCost.RecId
                    exists join accountingDistribution
                    where accountingDistribution.RecId                == projectAccountingDistribution.AccountingDistribution
                        && accountingDistribution.SourceDocumentHeader == advancedLedgerEntryHeader.SourceDocumentHeader
            {
                if (ProjCategory::find(projEmplTrans.CategoryId).CategoryType == ProjCategoryType::Hour)
                {
                    projJournalTrans = this.createDummyProjectJournal(projEmplTrans);

                    voucherSeriesCode = ProjParameters::numRefProjJournalId().numberSequenceTable().NumberSequence;

                    ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Project, voucherSeriesCode);

                    ledgerVoucherObject = LedgerVoucherObject::newVoucher(NumberSeq::newGetVoucherFromCode(voucherSeriesCode, NumberSeqScopeFactory::createDataAreaScope(), true).voucher(),
                                                    advancedLedgerEntryHeader.AccountingDate,
                                                    SysModule::Project,
                                                    LedgerTransType::Project,
                                                    NoYes::No);

                    ledgerVoucher.addVoucher(ledgerVoucherObject);

                    if (projJournalTrans.psaIndirectComponentGroup)
                    {
                        projPost = ProjPost::psaNewCreateProjIndirectCostAndRevenue(projJournalTrans, ledgerVoucher);

                        psaProjPostEmplIndirectJournal = projPost as PSAProjPostEmplIndirectJournal;

                        //use this funding source to split indirect costs
                        projPost.createFundingAllocationListBasedOnTrx(ProjTransType::Hour);

                        projPost.postTrans();

                        ledgerVoucher.end();
                    }
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceProjectFeeTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invoices the project fee transactions without creating any additional ledger posting.
    /// </summary>
    private void invoiceProjectFeeTransaction()
    {
        ProjRevenueTrans                projRevenueTrans;
        ProjRevenueTransSale            projRevenueTransSale;
        ProjectAccountingDistribution   projectAccountingDistribution;
        AccountingDistribution          accountingDistribution;
        ProjTransPosting                projTransPosting;
        ProjCategory                    projCategory;

        ttsBegin;

        update_recordset projTransPosting
                setting
                    LedgerOrigin        = ProjOrigin::Invoice,
                    TransactionOrigin   = ProjOrigin::Invoice,
                    PaymentStatus       = ProjPaymentStatus::Paid,
                    PaymentDate         = advancedLedgerEntryHeader.AccountingDate
            exists join projRevenueTrans
                where projRevenueTrans.TransId == projTransPosting.TransId
            exists join ProjRevenueTransSale
                where projRevenueTransSale.TransId == ProjRevenueTrans.TransId
            exists join projCategory
                where projCategory.CategoryId       == projRevenueTrans.CategoryId
                    && projCategory.CategoryType    == ProjCategoryType::Revenue
            exists join projectAccountingDistribution
                where projectAccountingDistribution.ProjRevenueTransSale == projRevenueTransSale.RecId
            exists join accountingDistribution
                where accountingDistribution.RecId                  == projectAccountingDistribution.AccountingDistribution
                    && accountingDistribution.SourceDocumentHeader  == advancedLedgerEntryHeader.SourceDocumentHeader;

        update_recordset projRevenueTransSale
                setting
                    TransStatus = ProjTransStatus::Invoiced
            exists join projRevenueTrans
                where projRevenueTrans.TransId == projRevenueTransSale.TransId
            exists join projCategory
                where projCategory.CategoryId       == projRevenueTrans.CategoryId
                    && projCategory.CategoryType    == ProjCategoryType::Revenue
            exists join projectAccountingDistribution
                where projectAccountingDistribution.ProjRevenueTransSale == projRevenueTransSale.RecId
            exists join accountingDistribution
                where accountingDistribution.RecId                  == projectAccountingDistribution.AccountingDistribution
                    && accountingDistribution.SourceDocumentHeader  == advancedLedgerEntryHeader.SourceDocumentHeader;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Counter progressTotal;
        #OCCRetryCount

        advancedLedgerEntryHeader = AdvancedLedgerEntryHeader::findByTransactionNumber(advancedLedgerEntryId);

        try
        {
            // Check that the advanced ledger enrtry can be posted
            if (!this.checkAdvancedLedgerEntryHeader())
            {
                throw error(strFmt("@SPS1709", advancedLedgerEntryId));
            }

            numOfLinesProcessed = 0;
            progressTotal = advancedLedgerEntryHeader.numOfLines();

            // if header has lines to post
            if (progressTotal)
            {
                this.progressInit("@SPS1710", progressTotal, #AviFormLetter);
                progress.setText("@SPS1711");
                progress.update(true);

                if (this.checkAdvancedLedgerEntryLine() == false)
                {
                    // Errors found in the lines
                    throw error(strFmt("@SPS1709", advancedLedgerEntryId));
                }
                else
                {
                    // No errors on any lines for this budget transaction
                    progress.setText("@SPS1712");
                    progress.update(true);

                    if (numOfLinesProcessed)
                    {
                        ttsbegin;

                        // This call needs to be in a separate transaction to prevent blocking when the source document submission is async in postToLedger.
                        SourceDocumentHeaderProvider::updateExchangeRateDate(advancedLedgerEntryHeader.SourceDocumentHeader,
                            advancedLedgerEntryHeader.AccountingDate);

                        ttscommit;

                        ttsbegin;

                        this.postToLedger();

                        ttscommit;

                        //
                        // cannot create a draft budget source tracking in the same
                        // transaction scope as the posted original ALE. Budget
                        // control does not support this
                        //
                        this.createReverseAdvancedLedgerEntry();
                    }

                    info(strFmt("@SPS1713", advancedLedgerEntryId));
                }
            }
            else
            {
                throw error(strFmt("@SPS1709", advancedLedgerEntryId));
            }

            progress = null;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                isPostFailed = true;
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    isPostFailed = true;
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                isPostFailed = true;
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            isPostFailed = true;
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>AdvancedLedgerEntryPost</c> class and initalizes values.
    /// </summary>
    /// <param name="_advancedLedgerEntryId">
    /// The <c>AdvancedLedgerEntryId</c> value of the advanced ledger entry header to post.
    /// </param>
    /// <returns>
    /// A new instance of the <c>AdvancedLedgerEntryPost</c> class.
    /// </returns>
    public static AdvancedLedgerEntryPost construct(AdvancedLedgerEntryId _advancedLedgerEntryId)
    {
        AdvancedLedgerEntryPost advancedLedgerEntryPost;

        advancedLedgerEntryPost = new AdvancedLedgerEntryPost();
        advancedLedgerEntryPost.parmAdvancedLedgerEntryId(_advancedLedgerEntryId);
        advancedLedgerEntryPost.parmValidateIsBlockedForManualEntry(true);

        return advancedLedgerEntryPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AdvancedLedgerEntryHeader advancedLedgerEntryHeader;
        AdvancedLedgerEntryPost   document;

        if (!_args)
        {
            throw error(strFmt("@SPS1272", funcName()));
        }

        advancedLedgerEntryHeader = _args.record() as AdvancedLedgerEntryHeader;
        document = AdvancedLedgerEntryPost::construct(advancedLedgerEntryHeader.TransactionNumber);
        document.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateIsBlockedForManualEntry</Name>
				<Source><![CDATA[
    internal boolean parmValidateIsBlockedForManualEntry(boolean _validateIsBlockedForManualEntry = validateIsBlockedForManualEntry)
    {
        validateIsBlockedForManualEntry = _validateIsBlockedForManualEntry;

        return validateIsBlockedForManualEntry;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>