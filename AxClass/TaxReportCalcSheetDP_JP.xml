<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportCalcSheetDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportCalcSheetDP_JP</c> is the Report Data Provider class for the <c>TaxReportCalcSheet_JP</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TaxReportContract_JP))
]
public class TaxReportCalcSheetDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    protected TaxReportContract_JP contract;
    protected TaxReportCalcSheetTmp_JP taxReportCalcSheetTmp_JP;
    protected TaxReportByCode_JP taxReportByCode_JP;
    protected TaxCalcReportFields_JP taxCalcReportFields_JP;
    protected TaxReport_JP taxReport_JP;
    protected boolean isHideColumn;
    private boolean showSummaryTable;
    private boolean showPartialTable;
    private Name companyName;
    private DateInterval dateInterval;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDateInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the date interval string.
    /// </summary>
    /// <returns>
    /// The Date interval string.
    /// </returns>
    private DateInterval getDateInterval()
    {
        const str Space = ' ';
        const str Tild = '~';
        const str Dot = 'Â·';

        str fromYear = JapaneseDateTimeHelper::getYearStr(contract.parmFromDate());
        str fromMonth = int2str(mthofyr(contract.parmFromDate()));
        str startDate = int2str(dayofmth(contract.parmFromDate()));
        str toYear = JapaneseDateTimeHelper::getYearStr(contract.parmToDate());
        str toMonth = int2str(mthofyr(contract.parmToDate()));
        str endDate = int2str(dayofmth(contract.parmToDate()));

        // %1 %2
        return strfmt(
            "@GLS60177",
            fromYear + Dot + fromMonth + Dot + startDate,
            Tild + Space + Space + toYear + Dot + toMonth + Dot + endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportCalcSheetTmp_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>TaxReportCalcSheetTmp_JP</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>TaxReportCalcSheetTmp_JP</c> temporary table.
    /// </returns>
    [
        SrsReportDataSetAttribute(tableStr(TaxReportCalcSheetTmp_JP))
    ]
    public TaxReportCalcSheetTmp_JP getTaxReportCalcSheetTmp_JP()
    {
        select taxReportCalcSheetTmp_JP;
        return taxReportCalcSheetTmp_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupTablesVisibility</Name>
				<Source><![CDATA[
    private void setupTablesVisibility(LedgerConsumptionTaxCalcTrans_JP _ledgerConsumptionTaxCalcTrans_JP)
    {
        if ((_ledgerConsumptionTaxCalcTrans_JP.TaxValue == 10) 
            || (_ledgerConsumptionTaxCalcTrans_JP.TaxValue == 8 
             && _ledgerConsumptionTaxCalcTrans_JP.TaxType == TaxType_JP::Reduced))
        {
            showSummaryTable = true;
        }
        else
        {
            showPartialTable = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the report temporary table.
    /// </summary>
    /// <param name="_ledgerConsumptionTaxCalcTrans_JP">
    /// The <c>LedgerConsumptionTaxCalcTrans_JP</c> buffer.
    /// </param>
    private void insertIntoTmpTable(LedgerConsumptionTaxCalcTrans_JP _ledgerConsumptionTaxCalcTrans_JP)
    {
        taxReportCalcSheetTmp_JP.clear();

        taxReportCalcSheetTmp_JP.CompanyName = companyName;
        taxReportCalcSheetTmp_JP.DateInterval = dateInterval;

        taxReportCalcSheetTmp_JP.Field1 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem1;
        taxReportCalcSheetTmp_JP.Field1_1 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem1_1;
        taxReportCalcSheetTmp_JP.Field1_2 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem1_2;
        taxReportCalcSheetTmp_JP.Field2 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem2;
        taxReportCalcSheetTmp_JP.Field3 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem3;
        taxReportCalcSheetTmp_JP.Field4 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem4;
        taxReportCalcSheetTmp_JP.Field5 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem5;
        taxReportCalcSheetTmp_JP.Field5_1 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem5_1;
        taxReportCalcSheetTmp_JP.Field5_2 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem5_2;
        taxReportCalcSheetTmp_JP.Field6 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem6;
        taxReportCalcSheetTmp_JP.Field7 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem7;
        taxReportCalcSheetTmp_JP.Field8 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem8;
        taxReportCalcSheetTmp_JP.Field9 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem9;
        taxReportCalcSheetTmp_JP.Field10 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem10;
        taxReportCalcSheetTmp_JP.Field11 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem11;
        taxReportCalcSheetTmp_JP.Field12 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem12;
        taxReportCalcSheetTmp_JP.Field13 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem13;
        taxReportCalcSheetTmp_JP.Field14 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem14;
        taxReportCalcSheetTmp_JP.Field15 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem15;
        taxReportCalcSheetTmp_JP.Field16 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem16;
        taxReportCalcSheetTmp_JP.Field17 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem17;
        taxReportCalcSheetTmp_JP.Field18 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem18;
        taxReportCalcSheetTmp_JP.Field19 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem19;
        taxReportCalcSheetTmp_JP.Field20 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem20;
        taxReportCalcSheetTmp_JP.Field21 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem21;
        taxReportCalcSheetTmp_JP.Field22 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem22;
        taxReportCalcSheetTmp_JP.Field23 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem23;
        taxReportCalcSheetTmp_JP.Field24 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem24;
        taxReportCalcSheetTmp_JP.Field25 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem25;
        taxReportCalcSheetTmp_JP.Field26 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem26;
        taxReportCalcSheetTmp_JP.Field27 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem27;
        taxReportCalcSheetTmp_JP.Field28 = _ledgerConsumptionTaxCalcTrans_JP.CalcItem28;
        taxReportCalcSheetTmp_JP.RatioOfTaxableSales = _ledgerConsumptionTaxCalcTrans_JP.RatioOfTaxableSales;
        taxReportCalcSheetTmp_JP.TaxValue = _ledgerConsumptionTaxCalcTrans_JP.TaxValue;
        taxReportCalcSheetTmp_JP.TaxType = _ledgerConsumptionTaxCalcTrans_JP.TaxType;
        taxReportCalcSheetTmp_JP.ShowSummaryTablix = showSummaryTable;
        taxReportCalcSheetTmp_JP.ShowPartialTablix = showPartialTable;
        taxReportCalcSheetTmp_JP.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. The method will be called by
    /// SSRS at runtime, and will compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        LedgerConsumptionTaxCalcTrans_JP ledgerConsumptionTaxCalcTrans_JP;
        contract = this.parmDataContract() as TaxReportContract_JP;

        companyName = CompanyInfo::find().Name;
        dateInterval = this.getDateInterval();

        while select ledgerConsumptionTaxCalcTrans_JP
            order by TaxValue desc
            where ledgerConsumptionTaxCalcTrans_JP.SettlementPeriod == contract.parmTaxPeriod()
                && ledgerConsumptionTaxCalcTrans_JP.PeriodOfTaxationFrom == contract.parmFromDate()
                && ledgerConsumptionTaxCalcTrans_JP.PeriodOfTaxationTo == contract.parmToDate()
                && ledgerConsumptionTaxCalcTrans_JP.TypeOfDeclaration == contract.parmTypeOfDeclaration()
                && ledgerConsumptionTaxCalcTrans_JP.DataLayout == contract.parmDataLayout()
        {
            this.setupTablesVisibility(ledgerConsumptionTaxCalcTrans_JP);
            this.insertIntoTmpTable(ledgerConsumptionTaxCalcTrans_JP);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>