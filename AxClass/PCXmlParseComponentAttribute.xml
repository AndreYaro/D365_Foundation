<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcXmlParseComponentAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlParseComponentAttribute</c> class is responsible for parsing the XML of a component
/// attribute.
/// </summary>
public class PcXmlParseComponentAttribute
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlParseComponentAttribute construct()
    {
        PCXmlParseComponentAttribute xmlParseComponentAttribute = new PCXmlParseComponentAttribute();
        return xmlParseComponentAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the session values that are included in the XML of the specified configuration session.
    /// </summary>
    /// <param name="_componentAttribute">
    /// The component attribute record.
    /// </param>
    /// <param name="_xmlReader">
    /// The XML reader that is used to retrieve the session values.
    /// </param>
    /// <param name="_componentInstanceValue">
    /// The instance of the value container that will store the attribute values for the current component.
    /// </param>
    /// <param name="_adaptorAttribute">
    /// An adaptor attribute.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The record parsed from the XML string does not match the current record.
    /// </exception>
    public void parseIL(
        EcoResCategoryAttribute     _componentAttribute,
        PCXmlParseReader            _xmlReader,
        PCComponentInstanceValue    _componentInstanceValue,
        PCAdaptorAttribute          _adaptorAttribute)
    {
        #PC
        str                  parsedName;
        str                  parsedValue;
        str                  parsedDomainType;
        boolean              isUserSelected;

        str tmp;

        //reader is already positioned
        parsedDomainType = _xmlReader.getAttribute(#typeAttribute);
        parsedName  =   _xmlReader.getAttribute(#nameAttribute);
        parsedValue =   _xmlReader.getAttribute(#valueAttribute);

        tmp = _xmlReader.getAttribute(#isUserSelected);
        isUserSelected = str2int(tmp);
        _adaptorAttribute.isUserSelected(isUserSelected);

        if (_componentAttribute.getSolverName() != parsedName)
        {
            throw error(strFmt("@SYS89175", _componentAttribute.getSolverName()));
        }

        _adaptorAttribute.parmParsedValue(parsedValue);

        switch (parsedDomainType)
        {
            case #variableTypeInteger:
            case #variableTypeIntegerUnbound:
                _adaptorAttribute.parmIntegerValue(str2Int(parsedValue));
                _adaptorAttribute.setDataType(AttributeDataType::Integer);
                break;
            case #variableTypeBoolean:
                _adaptorAttribute.parmBooleanValue(parsedValue == #True);
                _adaptorAttribute.setDataType(AttributeDataType::TrueFalse);
                break;
            case #variableTypeDecimal:
                _adaptorAttribute.parmTextValue(parsedValue);
                _adaptorAttribute.parmDecimalValue(str2num(parsedValue));
                _adaptorAttribute.setDataType(AttributeDataType::Decimal);
                break;
            case #variableTypeEnum:
            case #variableTypeText:
                _adaptorAttribute.parmTextValue(parsedValue);
                _adaptorAttribute.setDataType(AttributeDataType::Text);
                break;
            default:
                throw error(strFmt("@SYS89175", tableStr(EcoResAttribute)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>