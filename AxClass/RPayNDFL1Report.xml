<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayNDFL1Report</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayNDFL1Report extends XMLExcelReport_RU implements BatchRetryable
{
    #define.num_of_stdeductions(5)

    DialogField             periodField,emplIdField, refDateField;
    ReportPeriod_RU         payPeriod;
    RHRMEmplId              emplId;
    RPayTaxNDFLReportData   taxReportData;
    RpayTaxReportValue      rpayTaxReportValue;
    RHRMEmplTable           emplTable;

    container               st_deductions;
    RPayRateCode            child_amount;
    TransDate               reportPeriod;

    RPayRateCode            taxRateCode;
    RPayEmplTaxStatus       taxStatus;
    RpayTaxIncomeGroupCode  currentGroupCode;

    KeySum                  taxSumTotal;
    Map                     deductDetail;

    int                     maxPaymentCount;
    Map                     taxPaymentMap;
    int                     activeSheet;
    int                     taxRowNum;
    int                     s4LineNum;
    MapEnumerator           meDeductDetail;
    Map                     paymentsMap;
    container               paymentsTotalCon;

    #define.pageWidth(156)
    #define.section12('SECTION12')
    #define.section3('SECTION3')
    #define.Section4HEADER('Section4HEADER')
    #define.section4BODY('SECTION4BODY')
    #define.S5Prolog('S5Prolog')
    #define.S5TaxBody('S5TaxBody')
    #define.S5TaxFooter('S5TaxFooter')
    #define.S5PAGEFOOTER('S5PAGEFOOTER')
    #define.S4NO('S4NO')
    #define.S4DeductionCode('S4DeductionCode')
    #define.S4FromPeriod('S4FromPeriod')
    #define.S4Base('S4Base')

    #define.CurrentVersion(1)
    #localmacro.CurrentList
          payPeriod,
          emplId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPaymentMap</Name>
				<Source><![CDATA[
    private void buildPaymentMap(
        RPayRateCode      _payRateCode,
        BranchId_RU       _branchId     = '',
        boolean           _taxByBranch  = false)

    {
        RPayTaxTransOpen        payTaxTransOpen;
        RPayTaxTransOpen        payTaxTransOpenPayment;
        RPayTaxTransSettlement  payTaxTransSettlement;
        RPayTaxIncomeGroupTable payTaxIncomeGroupTable;
        TransDate               period;
        Map                     taxPaymPeriodMap;
        container               documentInfo;
        boolean                 isRedemption;
        container               keyCon, valueCon;

        taxPaymentMap = new Map(Types::Date, Types::Class);
        maxPaymentCount = 0;

        while select payTaxTransOpen
            where payTaxTransOpen.TransDate              >= dateStartYr(payPeriod)           &&
                  payTaxTransOpen.TransDate              <= payPeriod                        &&
                  payTaxTransOpen.EmplId                 == emplTable.EmployeeId             &&
                  payTaxTransOpen.SettleAmount           != 0                                &&
                 (payTaxTransOpen.TaxSourceType          == RPayTaxSourceType::InterimSheet  ||
                  payTaxTransOpen.TaxSourceType          == RPayTaxSourceType::IncomeTax)    &&
                 (payTaxTransOpen.BranchId               == _branchId || !_taxByBranch)
        join SettleAmount from payTaxTransSettlement
            where payTaxTransSettlement.TransRecId  == payTaxTransOpen.RecId &&
                  payTaxTransSettlement.CanBeReversed
        join payTaxTransOpenPayment
            where payTaxTransOpenPayment.RecId  == payTaxTransSettlement.OffsetRecId
        exists join payTaxIncomeGroupTable
            where payTaxIncomeGroupTable.PaymBudgetReceiptClassCode == payTaxTransOpen.BudgetReceiptClassCode &&
                 (payTaxIncomeGroupTable.RateCode                   == _payRateCode ||
                  payTaxIncomeGroupTable.RateCodeGroup              == _payRateCode)
        {
            period = endMth(payTaxTransOpen.TransDate);
            isRedemption = payTaxTransOpenPayment.TaxSourceType == RPayTaxSourceType::TaxRedemption;

            if (taxPaymentMap.exists(period))
            {
                taxPaymPeriodMap = taxPaymentMap.lookup(period);
            }
            else
            {
                taxPaymPeriodMap = new Map(Types::Container, Types::Container);
            }

            documentInfo = payTaxTransOpenPayment.documentInfo();

            keyCon = [payTaxTransOpen.TransDate,
                      payTaxTransOpenPayment.TransDate,
                      payTaxTransOpen.RecId,
                      payTaxTransOpenPayment.RecId];

            valueCon = [(documentInfo != connull() ? any2str(conpeek(documentInfo, 1)) : '') + (isRedemption ? ' *' : ''),
                        conpeek(documentInfo, 2),
                        payTaxTransOpen.salaryPaymentDate(),
                        payTaxTransSettlement.SettleAmount];

            taxPaymPeriodMap.insert(keyCon, valueCon);

            taxPaymentMap.insert(period, taxPaymPeriodMap);

            maxPaymentCount = max(maxPaymentCount, taxPaymPeriodMap.elements());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)
        return max( #minHeight, this.getRangeHeight(_bookmark));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void checkAndPrepareParameters()
    {
        int     i;

        child_amount = RPayReportTuningTable::find(RPayReportName::RPayNDFL1,1).Parameter;

        for (i = 1; i <= #num_of_stdeductions; i++)
        {
            st_deductions = conins(st_deductions,i,RPayReportTuningTable::find(RPayReportName::RPayNDFL1, 1 + i).Parameter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compressStandartDeductions</Name>
				<Source><![CDATA[
    private container compressStandartDeductions(container _data, int _newLenth)
    {
        container ret, conItemData, conItemRet;
        int i, j;

        for (i = 1; i <= conLen(_data); i++)
        {
            conItemData = conPeek(_data, i);

            if (i <= _newLenth)
            {
                ret += [conItemData];
            }
            else
            {
                conItemRet = conPeek(ret, _newLenth);
                conItemRet = conPoke(conItemRet, 1, '');

                for (j = 2; j <= conLen(conItemRet); j++)
                {
                    conItemRet = conPoke(conItemRet, j, conPeek(conItemRet, j) + conPeek(conItemData, j));
                }

                ret = conPoke(ret, _newLenth, conItemRet);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAllValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str 20 convertAllValue(RPayAmount _amount)
    {
        str strvalue;

        if (_amount == 0)
        {
            return '';
        }

        strvalue = num2str(_amount,20,2,1,0);
        return strltrim(strvalue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str 20 convertCode(int _code)
    {
        return (_code ? int2str(_code) : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDayMonth</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str convertDayMonth(int _dm)
    {
        return (_dm >= 10) ? int2str(_dm) : '0' + int2str(_dm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str 20 convertValue(RPayAmount _amount)
    {
        str strvalue;
        if (_amount) strvalue = num2str(_amount,20,2,1,0);
        return strltrim(strvalue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        this.initSectionMap();

        rpayTaxReportValue = new RpayTaxReportValue(emplId, payPeriod, 0, false, reportPeriod, payPeriod);
        taxReportData = RPayTaxNDFLReportData::construct(emplId,
                                                            payPeriod,
                                                            reportPeriod,
                                                            RPayNDFLSelectEmpl::All,
                                                            RPayNDFLType::All);
        emplTable     = RHRMEmplTable::find(emplId);
        taxSumTotal   = KeySum::construct(2, 5);
        deductDetail  = new Map(Types::String, Types::Container);

        activeSheet = 2;
        this.setCurrentWorksheetNum(activeSheet, #pageWidth);
        this.printSection3();

        activeSheet++;
        this.setCurrentWorksheetNum(activeSheet, #pageWidth);
        this.printSection4();

        activeSheet++;
        this.setCurrentWorksheetNum(activeSheet, #pageWidth);
        this.printSection56();

        activeSheet = 1;
        this.setCurrentWorksheetNum(activeSheet, #pageWidth);
        this.execute(#section12);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();

        refDateField       = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS54385", "@RUP710");
        periodField        = dialog.addField(extendedTypeStr(ReportPeriod_RU));
        emplIdField        = dialog.addField(extendedTypeStr(RHRMEmplId));

        if (! payPeriod)
        {
            payPeriod = RpayParameters::payPeriod();
        }

        emplIdField.value(emplId);
        periodField.value(payPeriod);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RHRMEmplTable emplTable(RHRMEmplTable _emplTable = emplTable)
    {
        emplTable = _emplTable;
        return emplTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'NDFL1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + emplId + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #section12:
                this.fillSection12();
                break;
            case #section3:
                this.fillSection3();
                break;
            case #S5TaxBody:
                this.fillS5TaxBody();
                break;
            case #S5TaxFooter:
                this.fillS5TaxFooter();
                break;
            case #section4BODY:
                this.fillSection4BODY();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillS5TaxBody</Name>
				<Source><![CDATA[
    private void fillS5TaxBody()
    {
        container conKey, conValue;
        conKey      = taxSumTotal.index2Key(taxRowNum);
        conValue    = taxSumTotal.index2Data(taxRowNum);

        this.insertValueToSection('taxBody1', conpeek(conKey, 1));
        this.insertValueToSection('taxBody2', conpeek(conKey, 2));
        this.insertValueToSection('taxBody3', this.convertAllValue(conpeek(conValue, 3)));
        this.insertValueToSection('taxBody4', this.convertAllValue(conpeek(conValue, 4)));
        this.insertValueToSection('taxBody5', this.convertAllValue(conpeek(conValue, 5)));
        this.insertValueToSection('taxBody6', this.convertAllValue(conpeek(conValue, 6)));
        this.insertValueToSection('taxBody7', this.convertAllValue(conpeek(conValue, 7)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillS5TaxFooter</Name>
				<Source><![CDATA[
    private void fillS5TaxFooter()
    {
        container conValue;

        if (taxSumTotal.numOfTrans())
        {
            conValue = taxSumTotal.total();
            this.insertValueToSection('taxfooter1', this.convertAllValue(conpeek(conValue, 3)));
            this.insertValueToSection('taxfooter2', this.convertAllValue(conpeek(conValue, 4)));
            this.insertValueToSection('taxfooter3', this.convertAllValue(conpeek(conValue, 5)));
            this.insertValueToSection('taxfooter4', this.convertAllValue(conpeek(conValue, 6)));
            this.insertValueToSection('taxfooter5', this.convertAllValue(conpeek(conValue, 7)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection12</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillSection12()
    {
        CompanyInfo             companyInfo   = CompanyInfo::find();
        TaxTable                taxTable      = TaxTable::find(RPayTaxIncomeGroupTable::findCode(currentGroupCode).TaxCode);
        TaxPeriodHead           taxPeriod     = TaxPeriodHead::find(taxTable.TaxPeriod);
        TaxAuthorityAddress     taxAuthority  = TaxAuthorityAddress::find(taxPeriod.TaxAuthority);
        HcmPersonBirthDate      birthDate;

        #define.NumberSign("№")

        document.insertValue('EV3', int2str(year(payPeriod)), activeSheet);

        document.insertValue('BK8', taxAuthority.GniCode_RU, activeSheet);
        document.insertValue('CS7', companyInfo.partyINNasOfDate_RU(reportPeriod), activeSheet);
        document.insertValue('DT7', companyInfo.partyKPPasOfDate_RU(reportPeriod), activeSheet);
        document.insertValue('Q11', CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, reportPeriod), activeSheet);
        document.insertValue('BI9', companyInfo.name, activeSheet);
        document.insertValue('J14', emplTable.personTable().partyINNasOfDate_RU(reportPeriod), activeSheet);
        document.insertValue('DH14', emplTable.payPFRINN(reportPeriod), activeSheet);
        document.insertValue('AC15', RHRMEmplTable::emplId2Name(emplTable.EmployeeId), activeSheet);
        document.insertValue('AU16', IdentityCardTable_RU::find(emplTable.personTable().IdentityCard).IdentityCardNameFull, activeSheet);
        document.insertValue('BS16', emplTable.personTable().IdentityCard, activeSheet);
        document.insertValue('DU16', strrem(emplTable.personTable().IdentityCardNumber, #NumberSign), activeSheet);

        birthDate = emplTable.personTable().hcmPersonPrivateDetails().BirthDate;
        if (birthDate != datenull())
        {
            document.insertValue('AL17', this.convertDayMonth(dayOfMth(birthDate)), activeSheet);
            document.insertValue('AQ17', this.convertDayMonth(mthOfYr(birthDate)), activeSheet);
            document.insertValue('AV17', year(birthDate), activeSheet);
        }
        document.insertValue('DX17', LogisticsAddressCountryRegion::find(emplTable.personTable().citizenshipCountryRegionId(reportPeriod)).OKSMCode_RU, activeSheet);

        if (taxReportData.isRuAddress())
        {
            document.insertValue('BM18', taxReportData.OKSMCode(),         activeSheet);
            document.insertValue('CX18', taxReportData.zipCode(),          activeSheet);
            document.insertValue('ER18', taxReportData.state(),            activeSheet);
            document.insertValue('H19',  taxReportData.countyName(),       activeSheet);
            document.insertValue('CM19', taxReportData.townName(),         activeSheet);
            document.insertValue('T20',  taxReportData.settlementName(),   activeSheet);
            document.insertValue('CM20', taxReportData.streetName(),       activeSheet);
            document.insertValue('F21',  taxReportData.estate(),           activeSheet);
            document.insertValue('V21',  taxReportData.building(),         activeSheet);
            document.insertValue('AM21', taxReportData.flat(),             activeSheet);
        }

        if (taxReportData.isForeignAddress())
        {
            document.insertValue('AY22', taxReportData.OKSMCode(), activeSheet);
            document.insertValue('I23',  strRemoveCr(taxReportData.foreignAddress()), activeSheet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection3</Name>
				<Source><![CDATA[
    #define.S3_IncomeCode(5)
    #define.S3_IncCodeFirstRow(8)
    #define.cellMacro1(10)
    #define.S3_DeductionCode(3)
    #define.S3_IncWithoutDed_Month(17)
    #define.S3_IncWithoutDed_Year(19)
    #define.S3_StandardDeductionCode(5)
    #define.S3_StDedFirst(20)
    #define.S3_PaymFirst(34)
    #define.S3_PaymSectionHeight(5)

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillSection3()
    {
        RPayTaxDeductionTable rPayTaxDeductionTable;
        RPayRateTrans         rateTrans;
        MapEnumerator         enumerator1;
        MapEnumerator         enumerator2;
        Map                   taxPaymPeriodMap;

        Percent         percentValue;
        int             i, j,k;
        int             max_len, notEmptyElement, notEmptyElement1;
        container       con, conItem, con1, con2, con3, conAsessedDoc;
        real            total1;
        real            total2[],total3[], total4[];
        boolean         existStdDeduction;
        BranchId_RU     branchId;
        TransDate       tmpDate;
        Set             assessedDeductionsSet;
        RPayAmount      deductedAmount, restOfPayment, paymentsAmountMonth[12], paymentsAmountTotal;
        int             month;
        boolean         emptyValue;

        int getLastNotEmptyElementNumber(container _cont)
        {
            int n = 1, number = 0;
            for (n = 1; n <= conlen(_cont); n++)
            {
                if (conpeek(_cont,n))
                {
                    number = n;
                }
            }
            return number;
        }

        taxRateCode         = taxReportData.taxEmplSum().TaxRateCode;
        branchId            = taxReportData.taxEmplSum().BranchId;
        currentGroupCode    = taxReportData.taxEmplSum().RpayTaxIncomeGroupCode;

        this.buildPaymentMap(taxRateCode);

        //Headline
        percentValue = RPayRateTable::find(taxRateCode).getValue(RPayRateCallContext::construct(payPeriod, emplTable.EmployeeId));
        document.insertValue('AJ2', percentValue, activeSheet);
        document.insertValue('BU2', int2str(RPayTaxReportValue::emplTaxStatus2ReportStatus(taxStatus)), activeSheet);

        con = RPayTaxReportValue::getTotalAmounts(
            emplTable.EmployeeId,
            taxRateCode,
            branchId,
            endMth(prevMth(dateStartYr(payPeriod))),
            endMth(prevMth(dateStartYr(payPeriod))));
        document.insertValue('BY5', this.convertAllValue(conpeek(con, 7)), activeSheet);
        document.insertValue('BY6', this.convertAllValue(conpeek(con, 6)), activeSheet);

        //Income codes
        con = rpayTaxReportValue.getMonthIncomeByCode(taxRateCode, branchId);

        for (i = 1; i <= min(conlen(con), #S3_IncomeCode); i++)
        {
            conItem = conpeek(con,i);
            document.insertValue('B' + int2str(#S3_IncCodeFirstRow + i), this.convertCode(conpeek(conItem, 1)), activeSheet);
            for (j = 2; j <= conlen(conItem); j++)
            {
                document.insertValue(this.getCellName('AK', j - 1, #S3_IncCodeFirstRow + i, #cellMacro1), this.convertValue(conpeek(conItem, j)), activeSheet);
            }
        }

        //Deduction codes
        con = rpayTaxReportValue.getMonthDeductionByCode(taxRateCode, branchId);

        for (i = 1; i <= min(conlen(con), #S3_DeductionCode); i++)
        {
            conItem = conpeek(con, i);
            document.insertValue('U' + int2str(#S3_IncomeCode + #S3_IncCodeFirstRow + i), strfmt("@GLS111022", this.convertCode(conpeek(conItem,1))), activeSheet);
            for (j = 2; j <= conlen(conItem); j++)
            {
                document.insertValue(this.getCellName('AK', j - 1, #S3_IncomeCode + #S3_IncCodeFirstRow + i, #cellMacro1),
                                            this.convertValue(conpeek(conItem,j)), activeSheet);
            }
        }

        //Net income
        con             = rpayTaxReportValue.getIncomeByMonth(taxRateCode, branchId);
        notEmptyElement = getLastNotEmptyElementNumber(con);
        total1          = 0;
        i               = 0;

        while (i <= notEmptyElement)
        {
            total1 += conpeek(con,i);
            document.insertValue(this.getCellName('AK', i, #S3_IncWithoutDed_Month, #cellMacro1), this.convertValue(conpeek(con,i)), activeSheet);
            document.insertValue(this.getCellName('AK', i, #S3_IncWithoutDed_Year, #cellMacro1), this.convertAllValue(total1), activeSheet);
            total3[i] = conpeek(con,i);
            i++;
        }

        for (i = notEmptyElement + 1; i <= conLen(con); i++)
        {
            document.insertValue(this.getCellName('AK', i, #S3_IncWithoutDed_Month, #cellMacro1), '', activeSheet);
            document.insertValue(this.getCellName('AK', i, #S3_IncWithoutDed_Year, #cellMacro1), '', activeSheet);
        }

        document.insertValue('FA17', this.convertValue(total1), activeSheet);
        document.insertValue('FA19', this.convertAllValue(total1), activeSheet);

        //Standard deductions
        con1 = rpayTaxReportValue.getMonthStandardDeductionByCode(currentGroupCode);
        con2 = connull();

        while select RpayTaxDeductionCode from rPayTaxDeductionTable
            where rPayTaxDeductionTable.RpayTaxDeductionType == RpayTaxDeductionType::Standard
        {
            con2 += rPayTaxDeductionTable.RpayTaxDeductionCode;
        }

        existStdDeduction = conlen(con1);
        document.insertValue('BM24', existStdDeduction ? "@RUP831":"@RUP830", 1); //sheet 1

        max_len             = 0;
        notEmptyElement1    = 0;
        k                   = 0;
        total2[0]           = 0;
        con3                = connull();

        if (conLen(con1) > #S3_StandardDeductionCode)
        {
            con1 = this.compressStandartDeductions(con1, #S3_StandardDeductionCode);
        }

        for (i = 1; i <= conlen(con1); i ++)
        {
            con3 += conpeek(conpeek(con1, i), 1);
        }

        con2 = con3;

        for (i = 1; i <= min(conlen(con2), #S3_StandardDeductionCode); i++)
        {
            document.insertValue('U' + int2str(#S3_StDedFirst + i), strfmt("@GLS111022", conpeek(con2, i) ? this.convertCode(conpeek(con2, i)) : "@SYS35668"), activeSheet);

            k = confind(con3, conpeek(con2, i));
            if (k)
            {
                if (notEmptyElement1 > max_len)
                {
                    max_len = notEmptyElement1;
                }
                conItem = conpeek(con1, k);

                for (j = 2; j <= conlen(conItem); j++)
                {
                    document.insertValue(this.getCellName('AK', j - 1, #S3_StDedFirst + i, #cellMacro1), this.convertValue(conpeek(conItem, j)), activeSheet);
                    total2[j - 1] += conpeek(conItem, j);

                    if (conpeek(conItem,j) != 0 && j != conlen(conItem))
                    {
                        notEmptyElement1 = j-1;
                    }
                }
            }
        }

        con2        = connull();
        con3        = connull();
        total1      = 0;
        total4[0]   = 0;

        //Total amount deduction
        for (i = 1; i <= max(max_len,notEmptyElement); i++)
        {
            if (existStdDeduction)
            {
                total1 += total2[i];
                if (i == 1)
                {
                    total4[i] = (total3[i] - total1) > 0 ? (total3[i] - total1) : 0;
                }
                else
                {
                    if ((total3[i] - total3[i - 1] - total2[i]) > 0)
                    {
                        if ((total3[i] - total1) > 0)
                        {
                            total4[i] = total3[i] - total1;
                        }
                        else
                        {
                            total4[i] = total4[i-1];
                        }
                    }
                    else
                    {
                        total4[i] = total4[i-1];
                    }
                }
                document.insertValue(this.getCellName('AK', i, #S3_StDedFirst + #S3_StandardDeductionCode + 1, #cellMacro1), this.convertAllValue(total1), activeSheet);
                document.insertValue('FA' + int2str(#S3_StDedFirst + #S3_StandardDeductionCode + 1), this.convertAllValue(total1), activeSheet);
            }
        }

        //Tax totals
        conItem = RPayTaxReportValue::getTotalAmountsMonth(
            emplTable.EmployeeId,
            taxRateCode,
            branchId,
            payPeriod,
            reportPeriod,
            true,
            true);
        con     = connull();

        for (i = 1; i <= conlen(conItem); i++) //months
        {
            con1 = conpeek(conItem, i);

            month = i;
            deductedAmount = conpeek(con1, 4);

            if (paymentsMap.exists(month))
            {
                restOfPayment = paymentsMap.lookup(month);
            }
            else
            {
                restOfPayment = conpeek(con1, 5);
            }

            if (deductedAmount >= 0)
            {
                con1 = conpoke(con1, 5, min(restOfPayment, deductedAmount));
                paymentsMap.insert(month,
                    (restOfPayment > deductedAmount) ?
                        restOfPayment - deductedAmount :
                        0);
            }

            paymentsAmountMonth[month] = conPeek(con1, 5);

            for (j = 2; j <= conlen(con1); j++) //tax types
            {
                if (conpeek(con1, j))
                {
                    document.insertValue(this.getCellName('AK', i, #S3_StDedFirst + #S3_StandardDeductionCode + j + 1, #cellMacro1),
                                                this.convertAllValue(conpeek(con1, j)),
                                                activeSheet);
                }
                else
                {
                    document.insertValue(this.getCellName('AK', i, #S3_StDedFirst + #S3_StandardDeductionCode + j + 1, #cellMacro1),
                                                '', activeSheet);
                }
                con  = conpoke(con, j - 1, conpeek(con1, j));
            }
        }

        //total column

        conItem = RPayTaxReportValue::getTotalAmounts(emplTable.EmployeeId,
                                                        taxRateCode,
                                                        branchId,
                                                        payPeriod,
                                                        reportPeriod,
                                                        endmth(dateStartYr(payPeriod)),
                                                        false,
                                                        true);
        deductedAmount = conpeek(conItem, 4);

        if (conLen(paymentsTotalCon))
        {
            restOfPayment = conPeek(paymentsTotalCon, 1);
        }
        else
        {
            restOfPayment = conpeek(conItem, 5);
        }

        if (deductedAmount >= 0)
        {
            conItem = conpoke(conItem, 5, min(restOfPayment, deductedAmount));
            conPoke(paymentsTotalCon, 1,
                (restOfPayment > deductedAmount) ?
                    restOfPayment - deductedAmount :
                    0);
        }

        for (i = 2; i<= conlen(conItem); i++)
        {
            if (conpeek(conItem, i))
            {
                document.insertValue('FA' + int2str(#S3_StDedFirst + #S3_StandardDeductionCode + i + 1),
                                            this.convertAllValue(conpeek(conItem, i)),
                                            activeSheet);
            }
            else
            {
                document.insertValue('FA' + int2str(#S3_StDedFirst + #S3_StandardDeductionCode + i + 1),
                                            '',
                                            activeSheet);
            }
        }
        taxSumTotal.updateNow([percentValue, int2str(RPayTaxReportValue::emplTaxStatus2ReportStatus(taxStatus))], conItem);

        con = rpayTaxReportValue.getDeductionByCodeBranch(taxRateCode, branchId);

        //Tax deduction to sheet 4
        assessedDeductionsSet = this.getAssessedDeductionSet();
        for (i = 1; i <= conlen(con); i++)
        {
            conItem                 = conpeek(con,i);
            rPayTaxDeductionTable   = RPayTaxDeductionTable::find(conpeek(conItem, 1));

            select firstonly RateDate  from rateTrans
                order by rateDate desc
                where rateTrans.PayRate == rPayTaxDeductionTable.RpayRateCodeValue;

            if (assessedDeductionsSet.in(rPayTaxDeductionTable.RpayTaxDeductionCode))
            {
                conAsessedDoc = rpayTaxReportValue.getAssessedDeductionDocument(rPayTaxDeductionTable.RpayTaxDeductionCode);
                deductDetail.insert(this.convertCode(conpeek(conItem, 1)), [rateTrans.RateDate, conPeek(conAsessedDoc, 1) ? strFmt("%1, %2", any2date(conPeek(conAsessedDoc, 1)), conPeek(conAsessedDoc, 2)) : '']);
            }
            else
            {
                deductDetail.insert(this.convertCode(conpeek(conItem, 1)), [rateTrans.RateDate]);
            }
        }

        //clear tax payments
        for (i=1;i<=12;i++)
        {
                document.insertValue(this.getCellName('AK', i, #S3_PaymFirst + #S3_PaymSectionHeight, #cellMacro1),
                                            '', activeSheet);

                document.insertValue(this.getCellName('AK', i, #S3_PaymFirst + #S3_PaymSectionHeight + 1, #cellMacro1),
                                            '', activeSheet);

                document.insertValue(this.getCellName('AK', i, #S3_PaymFirst + #S3_PaymSectionHeight + 2, #cellMacro1),
                                            '', activeSheet);

                document.insertValue(this.getCellName('AK', i, #S3_PaymFirst + #S3_PaymSectionHeight + 3, #cellMacro1),
                                           '', activeSheet);

                document.insertValue(this.getCellName('AK', i, #S3_PaymFirst + #S3_PaymSectionHeight + 4, #cellMacro1),
                                            '', activeSheet);
        }

        enumerator1 = taxPaymentMap.getEnumerator();
        while (enumerator1.moveNext())
        {
            if (paymentsAmountMonth[mthOfYr(enumerator1.currentKey())] == 0)
            {
                emptyValue = true;
            }
            else
            {
                emptyValue = false;
            }

            i = 0;
            taxPaymPeriodMap = enumerator1.currentValue();
            enumerator2 = taxPaymPeriodMap.getEnumerator();
            while (enumerator2.moveNext())
            {
                document.insertValue(this.getCellName('AK', mthOfYr(enumerator1.currentKey()), #S3_PaymFirst + i * #S3_PaymSectionHeight, #cellMacro1),
                                            emptyValue ? '': any2str(conpeek(enumerator2.currentValue(), 1)), activeSheet);

                tmpDate = conpeek(enumerator2.currentValue(), 2);
                document.insertValue(this.getCellName('AK', mthOfYr(enumerator1.currentKey()), #S3_PaymFirst + i * #S3_PaymSectionHeight + 1, #cellMacro1),
                                            emptyValue ? '' : (tmpDate ? date2StrUsr(tmpDate, DateFlags::None) : ''), activeSheet);

                document.insertValue(this.getCellName('AK', mthOfYr(enumerator1.currentKey()), #S3_PaymFirst + i * #S3_PaymSectionHeight + 2, #cellMacro1),
                                            emptyValue ? '' : strFmt('%1', conpeek(enumerator2.currentKey(), 1)), activeSheet);

                document.insertValue(this.getCellName('AK', mthOfYr(enumerator1.currentKey()), #S3_PaymFirst + i * #S3_PaymSectionHeight + 3, #cellMacro1),
                                            emptyValue ? '' : (conpeek(enumerator2.currentValue(), 3) ? any2str(conpeek(enumerator2.currentValue(), 3)) : ''), activeSheet);

                document.insertValue(this.getCellName('AK', mthOfYr(enumerator1.currentKey()), #S3_PaymFirst + i * #S3_PaymSectionHeight + 4, #cellMacro1),
                                            emptyValue ? '' : this.convertValue(paymentsAmountMonth[mthOfYr(enumerator1.currentKey())]), activeSheet);

                i++;
            }
            paymentsAmountTotal += paymentsAmountMonth[mthOfYr(enumerator1.currentKey())];
        }

        document.insertValue(this.getCellName('AK', 13, #S3_PaymFirst + 4, #cellMacro1),
                                    this.convertValue(paymentsAmountTotal), activeSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection4BODY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section number 4.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillSection4BODY()
    {
        container conValue;

        conValue = meDeductDetail.currentValue();

        this.insertValueToSection(#S4NO, s4LineNum);
        this.insertValueToSection(#S4DeductionCode, meDeductDetail.currentKey());

        this.insertValueToSection(#S4FromPeriod, conpeek(conValue, 1) ? date2str(conpeek(conValue, 1), 123, 2, 2, 2, 2, 4, DateFlags::None) : '');
        this.insertValueToSection(#S4Base, conpeek(conValue, 2) ? any2str(conpeek(conValue, 2)) : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessedDeductionSet</Name>
				<Source><![CDATA[
    private Set getAssessedDeductionSet()
    {
        Set                     assessedDeductionSet = new Set(Types::Integer);
        RPayTaxDeductionTable   rPayTaxDeductionTable;

        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryRun                queryRun;

        qbds = query.addDataSource(tableNum(RPayTaxDeductionTable));
        qbds.addRange(fieldNum(RPayTaxDeductionTable, RpayTaxDeductionCode)).value(RPayTaxParameters::find().AssessedDeduction);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            rPayTaxDeductionTable = queryRun.get(tableNum(RPayTaxDeductionTable));
            assessedDeductionSet.add(rPayTaxDeductionTable.RpayTaxDeductionCode);
        }

        return assessedDeductionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCellName</Name>
				<Source><![CDATA[
    #define.const(64)
    #define.letterCount(26)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str getCellName(str _initialCellName, int _col, int _row, int _cellMacro)
    {
        return ComExcelDocument_RU::numToNameCell((char2num(_initialCellName, strlen(_initialCellName)) - #const) +
                                                  (char2num(_initialCellName, 1) - #const) * #letterCount * (strlen(_initialCellName) - 1) +
                                                  (_col - 1) * _cellMacro, _row);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (periodField.value())
        {
            payPeriod = endmth(periodField.value());
        }
        else
        {
            payPeriod = RpayParameters::payPeriod();
        }

        emplId        = emplIdField.value();
        if (! emplId)
        {
            ret = checkFailed("@RUP967");
        }

        reportPeriod = endMth(refDateField.value());
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProportionalMatrix</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getProportionalMatrix(container _conIncome, container _conDeduction, RpayTaxIncomeGroupCode _groupCode)
    {
        container    con, con1, conItem, conItem1;
        int          i, j;
        real         tax_base;
        container    conIncome, conDeduction;

        conIncome    = _conIncome;
        conDeduction = _conDeduction;

        for (i = 1; i <= conlen(conIncome); i ++)
        {
            conItem = conpeek(conIncome, i);
            if (! conpeek(conItem, conlen(conItem)))
            {
                conIncome    = condel(conIncome, i, 1);
                conDeduction = condel(conDeduction, i, 1);
                i --;
            }
        }
        if (! conlen(conIncome))
        {
            for (j = 1; j <= mthofyr(payPeriod); j ++)
            {
                con = conpoke(con, j, [1]);
            }
            return con;
        }

        for (j = 1; j <= mthofyr(payPeriod); j ++)
        {
            con1 = RPayTaxEmplSum::getTaxSum(emplTable.EmployeeId,
                                             _groupCode,
                                             endmth(mkdate(1,j,year(payPeriod))),
                                             endmth(mkdate(1,j,year(payPeriod))),
                                             dateNull(),
                                             dateMax(),
                                             true);

            if (conpeek(con1, 1) - conpeek(con1, 3))
            {
                for (i = 1; i <= conlen(conIncome); i ++)
                {
                    conItem  = conpeek(conIncome, i);
                    tax_base = conpeek(conItem, j) - conpeek(conpeek(conDeduction, i), j);
                    conItem1 = conpoke(conItem1, i, tax_base / (conpeek(con1, 1) - conpeek(con1, 3)));
                }
            }
            else
            {
                for (i = 1; i <= conlen(conIncome); i ++)
                {
                    conItem1 = conpoke(conItem1, i, 0);
                }
            }
            con = conpoke(con, j, conItem1);
        }
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#section12);
        this.addSection(#section3);
        this.addSection(#section4HEADER);
        this.addSection(#section4BODY);
        this.addSection(#S5Prolog);
        this.addSection(#S5TaxBody);
        this.addSection(#S5TaxFooter);
        this.addSection(#S5PAGEFOOTER);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquireNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str  inquireNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotZeroTrans</Name>
				<Source><![CDATA[
    private boolean isNotZeroTrans(RPayRateCode _rateCode)
    {
        boolean     ret;
        RPayAmount  incomeSum, addTaxSum, taxSum;
        container   transAmount;

        transAmount = RPayTaxReportValue::getTotalAmounts(emplTable.EmployeeId,
                                                     _rateCode,
                                                     '',
                                                     payPeriod,
                                                     reportPeriod,
                                                     endmth(dateStartYr(payPeriod)),
                                                     false,
                                                     true);
        incomeSum = conPeek(transAmount, 1);
        addTaxSum = conPeek(transAmount, 3);
        taxSum    = conPeek(transAmount, 4);

        ret = incomeSum || addTaxSum || taxSum;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSection3</Name>
				<Source><![CDATA[
    #define.rowsInSection3(39)
    private void printSection3()
    {
        int i = 1;
        activeSheet = 2;
        taxStatus = taxReportData.taxEmplStatus();
        paymentsMap = new Map(Types::Integer, Types::Real);
        while (taxReportData.moveNext())
        {
            if (this.isNotZeroTrans(taxReportData.taxEmplSum().TaxRateCode))
            {
                this.execute(#section3);
                document.insertPageBreak(i*#rowsInSection3, curWorksheetNum);
                i++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSection4</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the section number 4.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void printSection4()
    {
        this.execute(#Section4HEADER);
        meDeductDetail = deductDetail.getEnumerator();

        while (meDeductDetail.moveNext())
        {
            s4LineNum++;

            this.execute(#Section4BODY);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSection56</Name>
				<Source><![CDATA[
    private void printSection56()
    {
        int NumOftrans = taxSumTotal.numOfTrans();

        this.execute(#S5Prolog);
        for (taxRowNum = 1; taxRowNum <= NumOftrans; taxRowNum++)
        {
            this.execute(#S5TaxBody);
        }

        this.execute(#S5TaxFooter);
        this.execute(#S5PAGEFOOTER);
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayNDFL1Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.page1Cells(15)
        #define.page2Cells(120)
        #define.page3Cells(10)
        #define.page4Cells(15)

        return #page1Cells + #page2Cells + #page3Cells + #page4Cells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass,1);
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (endmth(reportPeriod) < payPeriod)
        {
            ret = checkFailed(strfmt("@SYS91558", "@SYS54385", "@GLS105772"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP811";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTemplateName</Name>
				<Source><![CDATA[
    #define.reportName("Forma1 - NDFL1 2011.xlt")
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str fullTemplateName()
    {
        return GlobalEx::templateFolder_W() + #reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayNDFL1Report rPayNDFL1Report;

        switch (args.dataset())
        {
            case tablenum(RHRMEmplTable):
                rPayNDFL1Report = new rPayNDFL1ReportEmplTable();
                rPayNDFL1Report.emplTable(args.record());
                break;
            default:
                rPayNDFL1Report = new RPayNDFL1Report();
                break;
        }

        rPayNDFL1Report.checkAndPrepareParameters();

        if (rPayNDFL1Report.prompt())
        {
            rPayNDFL1Report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>