<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomRouteVersionActivate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomRouteVersionActivate extends RunBaseBatch implements BatchRetryable
{
    RecId   versionRecId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        versionRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    public RecId parmRecId(recId _recId = versionRecId)
    {
        versionRecId = _recId;

        return versionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMRouteVersionActivate construct(Args _args)
    {
        BOMRouteVersionActivate bomRouteVersionActivate;

        switch (_args.dataset())
        {
            case tablenum(BOMVersion):
                return BOMRouteVersionActivate::newBOMVersion(_args.record());
            case tablenum(RouteVersion):
                return BOMRouteVersionActivate::newRouteVersion(_args.record());
            default:
        }

        throw error(strfmt("@SYS26273",classId2Name(classidget(bomRouteVersionActivate))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS50567";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BOMRouteVersionActivate  bomRouteVersionActivate;
        SIGProcedureProvider    procedure; //SIG

        //SIG - start
        if (isConfigurationkeyEnabled(configurationkeynum(SIG))
            && _args.record())
        {
            procedure = SIGBOMRouteVersionActivateProcedure::newCommon(_args.record());
            if (procedure.signatureRequired())
            {
                procedure.sign();

                _args.caller().doRefresh();
                return;
            }
        }
        //SIG - end

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            bomRouteVersionActivate = BOMRouteVersionActivate::construct(_args);

            bomRouteVersionActivate.runOperation();
        }

        if (_args.record())
        {
            _args.caller().doRefresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMVersion</Name>
				<Source><![CDATA[
    public static BOMVersionActivate newBOMVersion(BOMVersion _bomVersion)
    {
        BOMVersionActivate  bomVersionActivate = new BOMVersionActivate();

        bomVersionActivate.getLast();
        bomVersionActivate.parmRecId(_bomVersion.RecId);

        return bomVersionActivate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRouteVersion</Name>
				<Source><![CDATA[
    public static RouteVersionActivate newRouteVersion(RouteVersion _routeVersion)
    {
        RouteVersionActivate  routeVersionActivate = new RouteVersionActivate();

        routeVersionActivate.getLast();
        routeVersionActivate.parmRecId(_routeVersion.RecId);

        return routeVersionActivate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>