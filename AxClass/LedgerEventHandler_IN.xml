<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerEventHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles <c>Ledger</c> table events for IN country/region.
/// </summary>
class LedgerEventHandler_IN
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Ledger_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>Ledger</c> record deleted event.
    /// </summary>
    /// <param name="_sender">The <c>Ledger</c> record that was deleted.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(Ledger), DataEventType::Deleted)]
    public static void Ledger_onDeleted(Common _sender, DataEventArgs _e)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            LedgerExtensionIN   ledgerExtensionIN;

            delete_from ledgerExtensionIN
                where ledgerExtensionIN.Ledger == _sender.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Ledger_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>Ledger</c> inserted event.
    /// </summary>
    /// <param name = "_sender">The <c>Ledger</c> record that was inserted.</param>
    /// <param name = "_e">The event arguments.</param>
    [DataEventHandler(tableStr(Ledger), DataEventType::Inserted)]
    public static void Ledger_onInserted(Common _sender, DataEventArgs _e)
    {
        LedgerExtensionIN   ledgerExtensionIN;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            ledgerExtensionIN.clear();
            ledgerExtensionIN.Ledger = _sender.RecId;
            ledgerExtensionIN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerExtensionIN_onValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// The LedgerExtensionIN ValidatingWrite method.
    /// </summary>
    /// <param name="_sender">The LedgerExtensionIN.</param>
    /// <param name="_e">The DataEventArgs.</param>
    [DataEventHandler(tableStr(LedgerExtensionIN), DataEventType::ValidatingWrite)]
    public static void LedgerExtensionIN_onValidatingWrite(Common _sender, DataEventArgs _e)
    {
        LedgerExtensionIN ledgerExtensionIN = _sender as LedgerExtensionIN;
        ValidateEventArgs ve = _e;
        boolean isValid = ve.parmValidateResult();

        if (ledgerExtensionIN.TDSImportExchangeRateType &&
            !ExchangeRateType::find(ledgerExtensionIN.TDSImportExchangeRateType))
        {
            isValid = checkFailed(strFmt("@SYS316757", "@SYS312339"));
        }

        ve.parmValidateResult(isValid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerExtensionIN_onModifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The LedgerExtensionIN ModifiedFieldValue mothod.
    /// </summary>
    /// <param name="_sender">The LedgerExtensionIN.</param>
    /// <param name="_e">The DataEventArgs.</param>
    [DataEventHandler(tableStr(LedgerExtensionIN), DataEventType::ModifiedFieldValue)]
    public static void LedgerExtensionIN_onModifiedFieldValue(Common sender, DataEventArgs _e)
    {
        ModifyFieldValueEventArgs modifyFieldValueEvent = _e as ModifyFieldValueEventArgs;
        switch (modifyFieldValueEvent.parmFieldName())
        {
            case fieldStr(LedgerExtensionIN, TDSImportExchangeRateType):
                CurrencyExchangeRateCache::clearScope(CurrencyExchangeRateCacheScope::TDSExchRate_IN);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Ledger_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post event handler for init method of Ledger form.
    /// </summary>
    /// <param name="args">Ledger form</param>
    [PostHandlerFor(formStr(Ledger), formMethodStr(Ledger, init))]
    public static void Ledger_Post_init(XppPrePostArgs args)
    {
        boolean isoIN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);

        FormRun formRun = args.getThis();
        FormDataSource ledgerExtensionIN_ds = formRun.dataSource(tableStr(LedgerExtensionIN));
        ledgerExtensionIN_ds.object(fieldNum(LedgerExtensionIN, TDSImportExchangeRateType)).visible(isoIN);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>