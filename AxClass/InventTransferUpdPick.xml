<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferUpdPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransferUpdPick</c> class is used to handle the picking of related updates of one
///    transfer order.
/// </summary>
class InventTransferUpdPick extends InventTransferUpd
{
    LineNum             sumByLineNum;
    boolean             hasWMSorderLines;
    WMSShipment         wmsShipment;
    WMSPickingRoute     wmsPickingRoute;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInventTransferJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header for the update in the <see cref="T:InventTransferJour" /> table.
    /// </summary>
    protected void createInventTransferJour()
    {
        wmsShipment.initTypeOrderPick();
        wmsPickingRoute.initTypeOrderPick(wmsShipment,
                                          WMSExpeditionStatus::Registered,
                                          WMSPickRequestTable::construct(inventTransferTable),
                                          '',true);
										  
        wmsPickingRoute.inventLocationId = inventTransferTable.InventLocationIdFrom;								  
        wmsPickingRoute.ParmId  = inventTransferParmTable.ParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransferJourLine</Name>
				<Source><![CDATA[
    protected void createInventTransferJourLine(InventTransferParmLine _inventTransferParmLine, InventTransferLine _inventTransferLine, InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        sumByLineNum++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWMSOutputOrder</Name>
				<Source><![CDATA[
    public WMSOrder createWMSOutputOrder(
        InventMovement  _movementFrom,
        InventQty       _qty,
        WMSOrderType    _wmsOrderType = WMSOrderType::OrderPick,
        PdsCWInventQty  _pdsCWQty = 0
        )
    {
        this.progressUpdate("@SYS72517");

        WMSOrder wmsOrder = WMSOrderCreate::createOrUpdateWMSOrder(_movementFrom, -_qty, _wmsOrderType, '', -_pdsCWQty);

        hasWMSorderLines = true;
        return wmsOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceQty</Name>
				<Source><![CDATA[
    /*
        Return the quantity that is reserved and can be picked
    */

    protected container reduceQty(
        InventTransferLine        _inventTransferLine,
        InventTransferParmLine    _inventTransferParmLine,
        InventDim                 _inventDim,
        InventDimParm             _inventDimParm)
    {
        InventQty updateQty;

        PdsCWInventQty pdsCWUpdateQty;

        [updateQty, pdsCWUpdateQty] = _inventTransferLine.qtyShipReservedPhysical(_inventDim, _inventDimParm, NoYes::Yes, InventTransChildType::None);

        if (updateQty == 0)
        {
            warning(strfmt("@SYS106586",_inventTransferParmLine.QtyShipNow,_inventTransferParmLine.ItemId));
        }
        else if (_inventTransferParmLine.QtyShipNow > updateQty)
        {
            info(strfmt("@SYS93435",updateQty,_inventTransferParmLine.ItemId ,_inventTransferParmLine.TransferId,  _inventTransferParmLine.QtyShipNow, updateQty));
        }

        return [updateQty, pdsCWUpdateQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservebuffer</Name>
				<Source><![CDATA[
    /*
        Reserves possible quantity. Already reserved quantity is deducted from the quantity that is attempted to reserve
    */
    protected void reservebuffer(InventMovement _movementFrom,
        InventQty       _updateNow,
        InventDim       _inventDim,
        InventDimParm   _inventDimParmReserve,
        PdsCWInventQty  _pdsCWUpdateNow = 0
        )
    {
        InventQty               allreadyReserved;

        InventQty               pdsCWAllreadyReserved;

        InventTransferLine inventTransferLine = _movementFrom.buffer();

        InventDimParm dimParmReserved = _inventDimParmReserve;

        //calculate the reserved physical quantity including child references

        [allreadyReserved, pdsCWAllreadyReserved] = inventTransferLine.qtyShipReservedPhysical(_inventDim, dimParmReserved, NoYes::Yes);

        //reduce quantity so already reserved quantity is not reserved again
        InventQty reserveNow = _updateNow - allreadyReserved;
        InventQty pdsCWReserveNow = _pdsCWUpdateNow - pdsCWAllreadyReserved;

        if (reserveNow > 0)
        {
            InventUpd_Reservation inventUpd_Reservation = InventUpd_Reservation::newInventDim(_movementFrom, _inventDim, -reserveNow , false, -pdsCWReserveNow);

            inventUpd_Reservation.parmInventDimParm(_inventDimParmReserve);
            inventUpd_Reservation.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles initialization and updates, for example, of journals and ledger transactions, that are
    ///    performed during the update.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        setPrefix(InventTransferMultiPick::description());
        setPrefix(#PreFixField(inventTransferParmTable,TransferId));
        boolean isPostingCompleted = false;

        try
        {
            using (InventTransferUpdateInstrumentationTask instrumentationTask = new InventTransferUpdateInstrumentationTask(this))
            {
                ttsbegin;

                if (! this.validate())
                {
                    throw error("@SYS18447");
                }

                this.initInventTransferTable();

                this.beginLedger();
                //headerJournal is used to create lines
                this.createInventTransferJour();

                this.updateInventTransferOrder();

                if (!hasWMSorderLines && !this.checkIfSomethingIsPosted())
                {
                    throw error("@SYS18447");
                }

                if (this.checkIfSomethingIsPosted(false))
                {
                    this.writeInventTransferJournal();//will insert and update shipment and picking Route
                }

                // <GTE>
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() 
                    && TaxSolutionScopeParameters::find().TaxDocumentPostingMode == TaxDocumentPostingMode::Synchronous)
                {
                    TaxBusinessService::postTaxDocument(TaxableDocumentObject::construct(
                            TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(inventTransferParmTable)),
                        ledgerVoucher);
                }
                // </GTE>

                this.updateJobJournal(ParmJobStatus::Executed);

                this.commitLedger();

                ttscommit;

                isPostingCompleted = true;
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw (Exception::Error);
        }

        if (isPostingCompleted)
        {
            this.postTaxDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatchWeightShipNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>ShipNow</c> field value based on the inventory quantity calculated from the inventory transactions.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// An <c>InventTransferParmLine</c> table buffer.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Not enough transactions in status on order or reserved.
    /// </exception>
    protected void setCatchWeightShipNow(InventTransferParmLine _inventTransferParmLine)
    {
        PdsCatchWeightMovementQtyAdjustment pdsCatchWeightMovementQtyAdjustment = PdsCatchWeightMovementQtyAdjustment::newTransferShip(
            _inventTransferParmLine,
            ledgerVoucher);

        _inventTransferParmLine.QtyShipNow = pdsCatchWeightMovementQtyAdjustment.transferIssueQty(
            InventTransferUpdateType::PickingList,
            _inventTransferParmLine.PdsCWQtyShipNow);

        if (!pdsCatchWeightMovementQtyAdjustment.isFullCatchWeightQuantityAssigned())
        {
            throw error("@SYS51212");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates an <c>InventTransferLine</c> record.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// An <c>InventTransferParmLine</c> record that indicates the <c>InventTransferLine</c> record to
    /// update.
    /// </param>
    /// <remarks>
    /// The method should not update a related <c>InventTransferTable</c> record because the record will be
    /// updated by the caller after all lines have been updated.
    /// </remarks>
    protected void updateInventTransferLine(InventTransferParmLine  _inventTransferParmLine)
    {
        InventDimParm           inventDimParm;

        // check line
        InventTransferLine inventTransferLine = InventTransferLine::findTransIdShip(_inventTransferParmLine.InventTransId,true);

        boolean pdsIsCWItem = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);

        if (! inventTransferLine.RecId)
        {
            throw error(strfmt("@SYS78590",_inventTransferParmLine.InventTransId));
        }

        setprefix(#PreFixField(inventTransferLine,LineNum));

        if (pdsIsCWItem)
        {
            this.setCatchWeightShipNow(_inventTransferParmLine);
        }

        if (_inventTransferParmLine.QtyShipNow <= 0)
        {
            throw error("@SYS78529");
        }

        if (inventTransferLine.QtyRemainShip < _inventTransferParmLine.QtyShipNow)
        {
            throw error(strfmt("@SYS95576",_inventTransferParmLine.QtyShipNow,inventTransferLine.QtyRemainShip));
        }

        // init movements
        InventMovement movementFrom = InventMovement::construct(inventTransferLine,InventMovSubType::None);

        InventDim inventDim = InventDim::find(_inventTransferParmLine.InventDimId);
        inventDimParm.initFromInventDim(inventDim);

        InventQty updateNow = _inventTransferParmLine.QtyShipNow;
        PdsCWInventQty pdsCWUpdateNow = _inventTransferParmLine.PdsCWQtyShipNow;

        if (inventTransferParmTable.Reservation)
        {
            this.reservebuffer(movementFrom, updateNow, inventDim, inventDimParm, pdsCWUpdateNow);

            //reduce quantity to what can be send to picking
            if (inventTransferParmTable.PickUpdateQty == InventTransferPickUpdateQty::AvailableQty)
            {
                [updateNow, pdsCWUpdateNow] = this.reduceQty(inventTransferLine, _inventTransferParmLine, inventDim, inventDimParm);

                if (updateNow == 0)
                {
                    return;//no need to continue
                }

                _inventTransferParmLine.QtyShipNow      = updateNow;
                _inventTransferParmLine.PdsCWQtyShipNow = pdsCWUpdateNow;
            }
        }

        WMSOrder wmsOrder = this.createWMSOutputOrder(movementFrom, updateNow, WMSOrderType::OrderPick, pdsCWUpdateNow);

        wmsOrder.updateShipment(wmsShipment, updateNow, wmsPickingRoute.PickingRouteID, true, pdsCWUpdateNow);

        isSomeThingPosted = true;

        inventTransferLine.QtyShipNow       = 0;
        inventTransferLine.PdsCWQtyShipNow  = 0;

        inventTransferLine.update(NoYes::No, NoYes::No); // no need to update InventTransferTable record - it is updated by the caller after all lines are updated

        if (isSomeThingPosted)//only insert route and shipment if this is not a consolidated WMS order
        {
            this.createInventTransferJourLine(_inventTransferParmLine,inventTransferLine,inventDim,inventDimParm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeInventTransferJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes to the journal that is related to the update.
    /// </summary>
    protected void writeInventTransferJournal()
    {
        ttsbegin;

        wmsShipment.insert();
        wmsPickingRoute.insert();
        wmsShipment.updateSiteWarehouseFromPickingRoute();
        wmsPickingRoute.updateRoute(InventParameters::find().TransferOrderPickRouteStatusOnUpdate);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsPickingRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WMSPickingRoute</c> record that was created during the transfer order picking list update.
    /// </summary>
    /// <param name = "_wmsPickingRoute">The current <c>WMSPickingRoute</c> record</param>
    /// <returns>The <c>WMSPickingRoute</c> record that was created during the transfer order picking list update</returns>
    public WMSPickingRoute parmWmsPickingRoute()
    {
        return wmsPickingRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTransferUpdPick construct()
    {
        InventTransferUpdPick inventTransferUpdPick = new InventTransferUpdPick();

        return inventTransferUpdPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    public static InventTransferUpdPick newParmBuffer(InventTransferParmTable _inventTransferParmTable)
    {
        _inventTransferParmTable.skipTTSCheck(true);
        _inventTransferParmTable.ParmBuffer::initParmId();
        _inventTransferParmTable.write();

        InventTransferUpdPick inventTransferUpdPick = InventTransferUpdPick::construct();
        inventTransferUpdPick.parmParmBuffer(_inventTransferParmTable);

        return inventTransferUpdPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableDocmentTransactionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxable document transaction table.
    /// </summary>
    /// <returns>The inventTransferParmTable table.</returns>
    protected Common getTaxableDocmentTransactionTable()
    {
        return this.inventTransferParmTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>