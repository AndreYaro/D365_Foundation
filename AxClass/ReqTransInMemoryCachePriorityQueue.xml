<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransInMemoryCachePriorityQueue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqTransInMemoryCachePriorityQueue</c> class represents a priority queue of requirement transactions
/// for which delay date must be calculated. 
/// The class looks up <c>ReqTrans</c> records by <c>RecId</c> in the in-memory cache rather than storing their copies. 
/// This way memory consumption is reduced. This design also eliminates the possibility of update conflicts 
/// since the in-memory cache will always contain the latest updated version of any <c>ReqTrans</c> record.
/// </summary>
public class ReqTransInMemoryCachePriorityQueue
{
    ReqCalcInMemoryCache            inMemoryCache;
    Map                             reqTransRecIdBySortKey;
    MapEnumerator                   reqTransRecIdBySortKeyEnumerator;
    ReqIReqTransSortOrderStrategy   priorityOrderStrategy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqTransInMemoryCachePriorityQueue construct()
    {
        return new ReqTransInMemoryCachePriorityQueue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the queue.
    /// </summary>
    /// <param name = "_inMemoryCache">In-memory cache.</param>
    /// <param name = "_priorityOrderStrategy">The strategy that defines the priority order or <c>ReqTrans</c> records in the queue.</param>
    protected void init(
        ReqCalcInMemoryCache            _inMemoryCache,
        ReqIReqTransSortOrderStrategy   _priorityOrderStrategy)
    {
        if (!_inMemoryCache || !_priorityOrderStrategy)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        inMemoryCache = _inMemoryCache;
        priorityOrderStrategy = _priorityOrderStrategy;
        reqTransRecIdBySortKey = new Map(priorityOrderStrategy.orderKeyType(), Types::Int64);
        reqTransRecIdBySortKeyEnumerator = reqTransRecIdBySortKey.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the queue. 
    /// </summary>
    /// <param name = "_inMemoryCache">In-memory cache.</param>
    /// <param name = "_priorityOrderStrategy">The strategy that defines the priority order or <c>ReqTrans</c> records in the queue.</param>
    /// <returns>A new instance of the queue.</returns>
    /// <remarks>
    /// Note! Sort order strategy is expected to provide different keys for different transactions. 
    /// Consider using <c>ReqTrans.RecId</c> as the last component of the priority key.
    /// </remarks>
    public static ReqTransInMemoryCachePriorityQueue newStandard(
        ReqCalcInMemoryCache            _inMemoryCache,
        ReqIReqTransSortOrderStrategy   _priorityOrderStrategy)
    {
        ReqTransInMemoryCachePriorityQueue queue = ReqTransInMemoryCachePriorityQueue::construct();
        queue.init(_inMemoryCache, _priorityOrderStrategy);
        return queue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enqueue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified transaction to the queue.
    /// </summary>
    /// <param name = "_reqTrans">A <c>ReqTrans</c> record.</param>
    public void enqueue(ReqTrans _reqTrans)
    {
        anytype key = priorityOrderStrategy.orderKey(_reqTrans);
        reqTransRecIdBySortKey.insert(key, _reqTrans.RecId);
        inMemoryCache.registerReqTrans(_reqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enqueueRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the transaction with the specified <c>RecId</c> to the queue.
    /// </summary>
    /// <param name = "_reqTransRecId">A <c>RecId</c> of a <c>ReqTrans</c> record.</param>
    public void enqueueRecId(RecId _reqTransRecId)
    {
        this.enqueue(inMemoryCache.findReqTransByRecId(_reqTransRecId));        
    }

]]></Source>
			</Method>
			<Method>
				<Name>enqueueRecIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified requirement transactions to the queue.
    /// </summary>
    /// <param name = "_recIdSet">A a set of <c>RecId</c> values of <c>ReqTrans</c> records.</param>
    public void enqueueRecIdSet(Set _recIdSet)
    {
        Enumerator enumerator = _recIdSet.getEnumerator();

        while (enumerator.moveNext())
        {
            this.enqueueRecId(enumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dequeue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the highest priority requirement transaction from the queue.
    /// </summary>
    /// <returns>A <c>ReqTrans</c> record.</returns>
    public ReqTrans dequeue()
    {
        ReqTrans result;
        
        reqTransRecIdBySortKeyEnumerator.reset();

        if (reqTransRecIdBySortKeyEnumerator.moveNext())
        {
            RecId currentReqTransRecId = reqTransRecIdBySortKeyEnumerator.currentValue();
            result = inMemoryCache.findReqTransByRecId(currentReqTransRecId);
            reqTransRecIdBySortKey.remove(reqTransRecIdBySortKeyEnumerator.currentKey());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the queue is empty.
    /// </summary>
    /// <returns>true, if the queue is empty; otherwise, false.</returns>
    public boolean isEmpty()
    {
        return reqTransRecIdBySortKey.elements() == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>