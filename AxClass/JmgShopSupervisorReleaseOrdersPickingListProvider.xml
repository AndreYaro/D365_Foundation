<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgShopSupervisorReleaseOrdersPickingListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgShopSupervisorReleaseOrdersPickingListProvider
{
    protected JmgShopSupervisorTmpPickingList totalPickingList;
    private ReqPlanVersion reqPlanActiveVersion;
    private Set explodedProdId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>JmgShopSupervisorReleaseOrdersPickingListProvider</c> class.
    /// </summary>
    /// <param name = "_prodOrderIds">A <c>ProdTableTmpFilter</c> table buffer containing production order IDs to collect picking list for.</param>
    /// <returns>An instance of <c>JmgShopSupervisorReleaseOrdersPickingListProvider</c> class.</returns>
    public static JmgShopSupervisorReleaseOrdersPickingListProvider construct(ProdTableTmpFilter _prodOrderIds)
    {
        var provider = new JmgShopSupervisorReleaseOrdersPickingListProvider();

        if (_prodOrderIds)
        {
            provider.initializeTotalPickingList(_prodOrderIds);
        }

        return provider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTotalPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the total picking list for the selected production orders.
    /// </summary>
    /// <param name = "_prodOrderIds">A <c>ProdTableTmpFilter</c> table buffer containing production order IDs to collect picking list for.</param>
    [Hookable(false)]
    protected void initializeTotalPickingList(ProdTableTmpFilter _prodOrderIds)
    {
        ProdTable prodTable;
        ProdBOM prodBOM;
        InventTable inventTable;
        TmpReqExplosionOnHand tmpReqExplosionOnHand;
        InventDim explosionOnHandInventDim;
        Set       processedTmpReqExplosionOnHand;

        container conSetTopRecId;
        container conMapDerived;
        container conMapReqTrans;
        container conMapReqTransPO;
        container conMapParent;
        container conMapReqTransSettled;

        boolean isJmgExplosionOnhandConsiderBomInventDimFlightEnabled = JmgExplosionOnhandConsiderBomInventDimFlight::instance().isEnabled();

        ttsbegin;

        while select _prodOrderIds
              join prodTable
              where prodTable.ProdId == _prodOrderIds.ProdId
        {
            if (!explodedProdId.in(prodTable.ProdId))
            {
                explodedProdId.add(_prodOrderIds.ProdId);
            }
            else
            {
                continue;
            }

            ReqTrans reqTrans = prodTable.reqTrans(reqPlanActiveVersion.RecId);

            [conSetTopRecId, conMapDerived, conMapReqTrans, conMapReqTransPO, conMapParent, conMapReqTransSettled] = ReqTransExplode::packRunReqTrans(reqTrans, reqTrans.reqExplodeTypeDefault(), false);
            var mapReqTrans        = (conMapReqTrans)        ? Map::create(conMapReqTrans)        : new Map(typeName2Type(extendedtypestr(recId)), Types::Record);
            var mapReqTransSettled = (conMapReqTransSettled) ? Map::create(conMapReqTransSettled) : new Map(typeName2Type(extendedtypestr(recId)), Types::Class);

            ReqTransFormExplosion::tmpReqExplosionOnhandBuildServer(tmpReqExplosionOnHand, mapReqTransSettled.pack(), reqTrans.RecId, mapReqTrans.pack());

            processedTmpReqExplosionOnHand = new Set(Types::Int64);

            while select tmpReqExplosionOnHand
                join RawMaterialDate, OprNum, InventDimId from prodBOM
                    where prodBOM.ProdId == prodTable.ProdId
                       && prodBOM.ItemId == tmpReqExplosionOnHand.ItemId
                join inventTable
                    where inventTable.ItemId == tmpReqExplosionOnHand.ItemId
                        && inventTable.itemType != ItemType::Service
                join InventDimId, InventSiteId, InventLocationId, ConfigId, InventSizeId, InventColorId, InventStyleId, InventVersionId
                    from explosionOnHandInventDim
                    where explosionOnHandInventDim.InventDimId == tmpReqExplosionOnHand.CovInventDimId
            {
                if (this.isTmpReqExplosionOnHandProcessed(tmpReqExplosionOnHand.RecId, processedTmpReqExplosionOnHand) 
                    || (isJmgExplosionOnhandConsiderBomInventDimFlightEnabled && InventDim::areProductVariantsDifferent(tmpReqExplosionOnHand.ItemId, prodBOM.InventDimId, tmpReqExplosionOnHand.CovInventDimId)))
                {
                    continue;
                }

                this.generateTotalPickingListLines(tmpReqExplosionOnHand, prodTable, prodBOM, inventTable, explosionOnHandInventDim);
                
                processedTmpReqExplosionOnHand.add(tmpReqExplosionOnHand.RecId);
            }
            
        }

        ttscommit;

        JmgShopSupervisorReleaseOrdersPickingListProvider::assignMaterialStatuses(totalPickingList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTmpReqExplosionOnHandProcessed</Name>
				<Source><![CDATA[
    private boolean isTmpReqExplosionOnHandProcessed(RecId _tmpReqExplosionOnHandRecId, Set _processedTmpReqExplosionOnHand)
    {
        return _processedTmpReqExplosionOnHand.in(_tmpReqExplosionOnHandRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTotalPickingListLines</Name>
				<Source><![CDATA[
    private void generateTotalPickingListLines(TmpReqExplosionOnHand   _tmpReqExplosionOnHand,
                                               ProdTable               _prodTable,
                                               ProdBOM                 _prodBOM,
                                               InventTable             _inventTable,
                                               InventDim               _explosionOnHandInventDim)
    {
        InventDim prodBomInventDim;
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_explosionOnHandInventDim);

        select firstonly prodBomInventDim
                    where prodBomInventDim.InventDimId == _prodBOM.InventDimId &&
                        #InventDimFieldsFilter(prodBomInventDim, _explosionOnHandInventDim, inventDimParm);

        if (prodBomInventDim)
        {
            this.createTotalPickingListLine(_tmpReqExplosionOnHand, _prodTable, _prodBOM, _inventTable, _explosionOnHandInventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateTotalPickingListLine</Name>
				<Source><![CDATA[
    private boolean mustCreateTotalPickingListLine(InventDim _prodBomInventDim, InventDim _explosionOnHandInventDim)
    {
        return _prodBomInventDim.InventLocationId  == _explosionOnHandInventDim.InventLocationId 
            && _prodBomInventDim.InventSiteId      == _explosionOnHandInventDim.InventSiteId
            && _prodBomInventDim.ConfigId          == _explosionOnHandInventDim.ConfigId 
            && _prodBomInventDim.InventSizeId      == _explosionOnHandInventDim.InventSizeId
            && _prodBomInventDim.InventColorId     == _explosionOnHandInventDim.InventColorId
            && _prodBomInventDim.InventStyleId     == _explosionOnHandInventDim.InventStyleId
	        && _prodBomInventDim.InventVersionId   == _explosionOnHandInventDim.InventVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalPickingListLine</Name>
				<Source><![CDATA[
    private void createTotalPickingListLine(
        TmpReqExplosionOnHand   _tmpReqExplosionOnHand,
        ProdTable               _prodTable,
        ProdBOM                 _prodBOM,
        InventTable             _inventTable,
        InventDim               _explosionOnHandInventDim)
    {
        this.initializeTotalPickingListLine(_tmpReqExplosionOnHand, _prodTable, _prodBOM, _inventTable, _explosionOnHandInventDim);

        totalPickingList.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTotalPickingListLine</Name>
				<Source><![CDATA[
    private void initializeTotalPickingListLine(
        TmpReqExplosionOnHand   _tmpReqExplosionOnHand,
        ProdTable               _prodTable,
        ProdBOM                 _prodBOM,
        InventTable             _inventTable,
        InventDim               _explosionOnHandInventDim)
    {
        var defaultBomUnitId = _inventTable.bomUnitId();
        var inventUnitId = _inventTable.inventUnitId();

        EcoResProductUnitConverter unitConverter = JmgShopSupervisorReleaseOrdersPickingListProvider::createProductUnitConverter(
                    inventUnitId,
                    defaultBomUnitId,
                    _tmpReqExplosionOnHand.ItemId,
                    _explosionOnHandInventDim.InventDimId);

        totalPickingList.ProdId                 = _prodTable.ProdId;
        totalPickingList.ItemId                 = _tmpReqExplosionOnHand.ItemId;
        totalPickingList.ItemName               = _tmpReqExplosionOnHand.ItemName;
        totalPickingList.RequestedDate          = _prodBOM.RawMaterialDate;
        totalPickingList.OprNum					= _prodBOM.OprNum;
        totalPickingList.WMSLocationId			= WHSProdTable::getWorkCenterLocationFromProdId(_prodTable.ProdId, _prodBOM.OprNum, _prodBOM.InventDimId);
        totalPickingList.InventDimId            = _explosionOnHandInventDim.InventDimId;
        totalPickingList.InventLocationId       = _explosionOnHandInventDim.InventLocationId;
        totalPickingList.BOMUnitId              = defaultBomUnitId;
        totalPickingList.QtyRequested           = unitConverter.convertValue(_tmpReqExplosionOnHand.QtyReq);
        totalPickingList.QtyOrderSettled        = unitConverter.convertValue(_tmpReqExplosionOnHand.QtyReqOnOrders);
        totalPickingList.QtyOnhandSettled       = unitConverter.convertValue(_tmpReqExplosionOnHand.QtyReqOnhand);
        totalPickingList.QtyPlannedOrderSettled = unitConverter.convertValue(_tmpReqExplosionOnHand.QtyReqPlannedorder);
        totalPickingList.QtyAvailablePhysical   = unitConverter.convertValue(_tmpReqExplosionOnHand.PhysicalInvent);

        totalPickingList.QtyPhysicalInvent    = unitConverter.convertValue(_tmpReqExplosionOnHand.PhysicalInvent);
        totalPickingList.QtyAvailablePhysical = unitConverter.convertValue(InventOnhandQty::newParameters(_tmpReqExplosionOnHand.ItemId, _explosionOnHandInventDim).availPhysical());
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects an aggregated picking list for the provided production orders.
    /// </summary>
    /// <param name = "_prodOrderIds">A <c>ProdTableTmpFilter</c> table buffer containing production order IDs to collect aggregated picking list for.</param>
    /// <returns>The aggregated picking list for the selected production orders.</returns>
    public JmgShopSupervisorTmpPickingList aggregate(ProdTableTmpFilter _prodOrderIds)
    {
        var filteredPickingList = this.filter(_prodOrderIds);

        JmgShopSupervisorTmpPickingList pickingList;

        var query = new Query();
        QueryBuildDataSource qbs = query.addDataSource(tableNum(JmgShopSupervisorTmpPickingList));

        qbs.addSelectionField(fieldNum(JmgShopSupervisorTmpPickingList, QtyRequested), SelectionField::Sum);
        qbs.addSelectionField(fieldNum(JmgShopSupervisorTmpPickingList, QtyOnhandSettled), SelectionField::Sum);
        qbs.addSelectionField(fieldNum(JmgShopSupervisorTmpPickingList, QtyOrderSettled), SelectionField::Sum);
        qbs.addSelectionField(fieldNum(JmgShopSupervisorTmpPickingList, QtyPlannedOrderSettled), SelectionField::Sum);
        qbs.addSelectionField(fieldNum(JmgShopSupervisorTmpPickingList, RequestedDate), SelectionField::Min);

        qbs.addGroupByField(fieldNum(JmgShopSupervisorTmpPickingList, ItemId));
        qbs.addGroupByField(fieldNum(JmgShopSupervisorTmpPickingList, ItemName));
        qbs.addGroupByField(fieldNum(JmgShopSupervisorTmpPickingList, InventDimId));
        qbs.addGroupByField(fieldNum(JmgShopSupervisorTmpPickingList, OprNum));
        qbs.addGroupByField(fieldNum(JmgShopSupervisorTmpPickingList, WMSLocationId));
        qbs.addGroupByField(fieldNum(JmgShopSupervisorTmpPickingList, InventLocationId));
        qbs.addGroupByField(fieldNum(JmgShopSupervisorTmpPickingList, BOMUnitId));
        qbs.addGroupByField(fieldNum(JmgShopSupervisorTmpPickingList, QtyAvailablePhysical));
        
        qbs.addGroupByField(fieldNum(JmgShopSupervisorTmpPickingList, QtyPhysicalInvent));

        var queryRun = new QueryRun(query);
        queryRun.setCursor(filteredPickingList);

        while (queryRun.next())
        {
            pickingList.data(queryRun.get(tableNum(JmgShopSupervisorTmpPickingList)));
            pickingList.insert();
        }

        JmgShopSupervisorReleaseOrdersPickingListProvider::assignMaterialStatuses(pickingList);

        return pickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaterialAvailabilityForProdOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns material availability status for the production order.
    /// </summary>
    /// <param name = "_prodId">A production order ID.</param>
    /// <returns>The material availability status.</returns>
    public JmgShopSupervisorMaterialAvailabilityStatus getMaterialAvailabilityForProdOrder(ProdId _prodId)
    {
        ProdTableTmpFilter prodIdWrapper;
        prodIdWrapper.ProdId = _prodId;
        prodIdWrapper.insert();

        JmgShopSupervisorTmpPickingList pickingList = this.filter(prodIdWrapper);
        
        select firstonly RecId from pickingList;

        if (!pickingList.RecId)
        {
            return JmgShopSupervisorMaterialAvailabilityStatus::Upcoming;
        }

        select count(RecId) from pickingList
            where pickingList.MaterialAvailabilityStatus == JmgShopSupervisorMaterialAvailabilityStatus::NotAvailable;

        if (pickingList.RecId > 0)
        {
            return JmgShopSupervisorMaterialAvailabilityStatus::NotAvailable;
        }

        select count(RecId) from pickingList
            where pickingList.MaterialAvailabilityStatus == JmgShopSupervisorMaterialAvailabilityStatus::Upcoming;

        if (pickingList.RecId > 0)
        {
            return JmgShopSupervisorMaterialAvailabilityStatus::Upcoming;
        }

        return JmgShopSupervisorMaterialAvailabilityStatus::Available;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        explodedProdId = new Set(Types::String);
        reqPlanActiveVersion = ReqPlan::findReqPlanId(ReqPlanSched::defaultDynamicId()).findActiveVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters total picking list to include materials only for the selected subset of production orders.
    /// </summary>
    /// <param name = "_prodOrderIds">A <c>ProdTableTmpFilter</c> table buffer containing production order IDs to collect picking list for.</param>
    /// <returns>The filtered picking list for the selected production orders.</returns>
    protected JmgShopSupervisorTmpPickingList filter(ProdTableTmpFilter _prodOrderIds)
    {
        JmgShopSupervisorTmpPickingList pickingList;

        this.initializeTotalPickingList(_prodOrderIds);

        while select totalPickingList
            join _prodOrderIds
                where totalPickingList.ProdId == _prodOrderIds.ProdId
        {
            pickingList.data(totalPickingList);
            pickingList.insert();
        }

        return pickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignMaterialStatuses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the provided picking list with the appropriate material status.
    /// </summary>
    /// <param name = "_pickingList">A picking list to update with material statuses.</param>
    protected static void assignMaterialStatuses(JmgShopSupervisorTmpPickingList _pickingList)
    {
        while select forupdate _pickingList 
            where (!_pickingList.MaterialAvailabilityStatus || _pickingList.MaterialAvailabilityStatus == JmgShopSupervisorMaterialAvailabilityStatus::Unknown)
        {
            // All quantities except `QtyAvailablePhysical` have a negative sign.
            // Changing the sign to positive for retaining more readable algorithm.
            var qtyRequested     = -_pickingList.QtyRequested;
            var qtyOnhandSettled = -_pickingList.QtyOnhandSettled;
            var qtyOrderSettled  = -_pickingList.QtyOrderSettled - _pickingList.QtyPlannedOrderSettled;

            if (qtyRequested <= qtyOnhandSettled)
            {
                _pickingList.MaterialAvailabilityStatus = JmgShopSupervisorMaterialAvailabilityStatus::Available;
            }
            else if (qtyRequested <= qtyOnhandSettled + qtyOrderSettled)
            {
                _pickingList.MaterialAvailabilityStatus = JmgShopSupervisorMaterialAvailabilityStatus::Upcoming;
            }
            else
            {
                _pickingList.MaterialAvailabilityStatus = JmgShopSupervisorMaterialAvailabilityStatus::NotAvailable;
            }

            _pickingList.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductUnitConverter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a product unit of measure converter.
    /// </summary>
    /// <param name = "_unitFrom">The current unit of measure of the provided quantity.</param>
    /// <param name = "_unitTo">The desired unit of measure for the provided quantity.</param>
    /// <param name = "_itemId">The item ID to use in conversion.</param>
    /// <param name = "_inventDimId">The dimension ID to use in conversion.</param>
    /// <returns>The unit of measure converter.</returns>
    protected static EcoResProductUnitConverter createProductUnitConverter(
        UnitOfMeasureSymbol _unitFrom, 
        UnitOfMeasureSymbol _unitTo, 
        ItemId              _itemId, 
        ItemId              _inventDimId)
    {
        return EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(_itemId, _inventDimId, _unitFrom, _unitTo, NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>