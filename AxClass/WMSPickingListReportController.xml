<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsPickingListReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSPickingListReportController</c> class is a helper class that is used to run the
///    <c>WMSPickingListReport</c> report.
/// </summary>
class WmsPickingListReportController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>WMSPickingListReportController</c> class.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        this.setQueryRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the report query based on the settings of the caller.
    /// </summary>
    private void setQueryRanges()
    {
        Args                    argsLocal = this.parmArgs();
        Query                   query;
        WMSPickingRoute         wmsPickingRouteCaller;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        if (!argsLocal || !(argsLocal.record() is WMSPickingRoute))
        {
            return;
        }

        wmsPickingRouteCaller   = argsLocal.record();
        query                   = this.getFirstQuery();

        queryBuildDataSource    = query.dataSourceTable(tableNum(WMSPickingRoute));

        queryBuildRange         = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSPickingRoute, PickingRouteID));
        queryBuildRange.value(queryValue(wmsPickingRouteCaller.PickingRouteID));
        queryBuildRange.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>WMSPickingListReportController</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>WMSPickingListReportController</c> class.
    /// </returns>
    public static WMSPickingListReportController construct()
    {
        return new WMSPickingListReportController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WMSPickingListReportController controller = WMSPickingListReportController::newFromArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>WMSPickingListReportController</c> class.
    /// </summary>
    /// <param name="_args">
    /// The input arguments.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WMSPickingListReportController</c> class.
    /// </returns>
    public static WMSPickingListReportController newFromArgs(Args _args)
    {
        WMSPickingListReportController controller = WMSPickingListReportController::construct();
        controller.parmReportName(ssrsReportStr(WMSPickingList, Report));
        controller.parmArgs(_args);
        return controller;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>