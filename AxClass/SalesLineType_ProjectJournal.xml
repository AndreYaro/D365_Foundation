<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType_ProjectJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesLineTypeFactoryAttribute(SalesType::Journal, NoYes::Yes)]
class SalesLineType_ProjectJournal extends SalesLineType_Project
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInventBeReserved</Name>
				<Source><![CDATA[
    boolean  canInventBeReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdFinancial</Name>
				<Source><![CDATA[
    boolean  canInventUpdFinancial()
    {
        if (this.checkScrapItem())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdPhysical</Name>
				<Source><![CDATA[
    boolean  canInventUpdPhysical()
    {
        if (this.checkScrapItem())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkScrapItem</Name>
				<Source><![CDATA[
    boolean checkScrapItem()
    {
        if (salesLine.SalesType == SalesType::Journal &&
            salesLine.Scrap     == NoYes::Yes         &&
           (salesTable.SalesType == SalesType::Sales ||
            salesTable.SalesType == SalesType::ReturnItem))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    boolean mustInventUpdEstimated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesStatus</Name>
				<Source><![CDATA[
    void  setSalesStatus(SalesLine  _salesLine, InventTransIdSum  inventTransIdSum = null)
    {
        _salesLine.SalesStatus = SalesStatus::Backorder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean  validateWrite(boolean _skipCreditLimitCheck = false)
    {
        boolean ok = true;

        ok = super(_skipCreditLimitCheck);

        if (ok && !salesLine.inventDim().validateWriteMandatoryAndProductDim(salesLine.ItemId))
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales-line along with its line property
    /// </summary>
    public void initValue()
    {
        super();
     
        salesLine.setProjLinePropertyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line with the given <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record that is used to initialize the sales record.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that indicates whether the price should be reset; optional.
    /// </param>
    /// <param name="_matchingAgreement">
    /// The record ID of the agreement header that is associated with the sales order. Used for the
    /// automatic association with an agreement line.
    /// </param>
    /// <param name="_performVariantValidation">
    /// A Boolean value that indicates whether product variant validation should be performed and pass before executing variant specific defaulting; optional.
    /// </param>
    public void initFromInventTable(InventTable _inventTable, boolean _resetPrice = true, AgreementHeaderRecId _matchingAgreement = 0, boolean _performVariantValidation = false)
    {
        super(_inventTable, _resetPrice, _matchingAgreement, _performVariantValidation);

        salesLine.setProjLinePropertyId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>