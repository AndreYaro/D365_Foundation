<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdTableOverview_ProdBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>ProdBOM</c> datasource of the
/// <c>ProdTableOverview</c> form
/// </summary>
public class PmfFormCtrl_ProdTableOverview_ProdBOM
    extends PmfFormCtrl
{
    boolean calledFromFormula;

    ProdTable prodTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called before the form element will be initialized
    /// </summary>
    /// <remarks>
    /// Determine where the form is being called from
    /// </remarks>
    public void initPre()
    {
        FormRun prodTableOverviewForm = this.parmFormRun();

        if (prodTableOverviewForm.args().menuItemName()
                == menuitemdisplaystr(PmfProcessBatchOverview))
        {
            calledFromFormula = true;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the production batch functionality should be enabled
    /// </summary>
    /// <returns>
    /// true, if the functionality should be enabled
    /// </returns>
    public NoYes isFormulaEnabled()
    {
        return #PmfEnabled
            && (calledFromFormula || prodTable.ProdType == ProdType::Process);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdBOM))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId != tablenum(ProdTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        prodTable = _datasources2;

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PmfFormCtrl_ProdTableOverview_ProdBOM construct()
    {
        return new PmfFormCtrl_ProdTableOverview_ProdBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_ProdTableOverview_ProdBOM newFromForm(
        FormRun _fr)
    {
        PmfFormCtrl_ProdTableOverview_ProdBOM frmCtrl;

        frmCtrl = PmfFormCtrl_ProdTableOverview_ProdBOM::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>