<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaMoveServiceOrderLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmaMoveServiceOrderLine extends RunBase
{
    // Tables
    SMAServiceOrderLine     serviceOrderLine;
    SMAServiceOrderTable    serviceOrderTable;

    SMAServiceOrderId       queryServiceOrderId;
    NoYesId                 queryDeleteEmpty;

    //  dialog
    DialogRunbase           dialog;
    DialogField             dialogServiceOrderId;
    DialogField             dialogDeleteEmpty;

    // query
    SysQuery                queryLine;
    SysQueryRun             queryRun;

    Map                     mapLineSelected;
    QueryBuildRange         orderCriteria;

    boolean                 updateRequired;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        queryServiceOrderId,
        queryDeleteEmpty
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementId</Name>
				<Source><![CDATA[
    public SMAAgreementId agreementId()
    {
        return serviceOrderTable.AgreementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowMoveHeader</Name>
				<Source><![CDATA[
    public boolean allowMoveHeader(SMAServiceOrderId _serviceOrderId)
    {
        SMAServiceOrderTable        fromServiceOrderTable, toServiceOrderTable;
        boolean                     ret  = true;

        fromServiceOrderTable = serviceOrderTable;
        toServiceOrderTable = SMAServiceOrderTable::find(_serviceOrderId);

        if (!fromServiceOrderTable)
        {
            return checkFailed(strfmt("@SYS89012", serviceOrderTable.ServiceOrderId));
        }

        if (!toServiceOrderTable)
        {
            return checkFailed(strfmt("@SYS89012", _serviceOrderId));
        }

        // agreement / project id is the same

        if ((!fromServiceOrderTable.AgreementId)
           || (!toServiceOrderTable.AgreementId))
        {
            if (fromServiceOrderTable.ProjId != toServiceOrderTable.ProjId)
                return checkFailed("@SYS110159");
        }
        else
        {
            if (fromServiceOrderTable.AgreementId != toServiceOrderTable.AgreementId)
                return checkFailed("@SYS89013");
        }

        // check progress status of destination service order
        if (toServiceOrderTable.Progress != SMAServiceOrderProgress::InProcess)
        {
            return checkFailed(strfmt("@SYS89014", _serviceOrderId));
        }

        ret = ret && fromServiceOrderTable.checkStageAllowDelete();
        ret = ret && toServiceOrderTable.checkStageAllowModify();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEmpty</Name>
				<Source><![CDATA[
    public void deleteEmpty()
    {
        // Is the service order empty (have no lines)
        if (!SMAServiceOrderLine::existServiceOrderLine(serviceOrderTable.ServiceOrderId))
        {
            // give warning if Item requirement exists and do not delete
            if (serviceOrderTable.existItemRequirement())
            {
                throw error (strfmt("@SYS96426", serviceOrderTable.ServiceOrderId));
            }
            else
            {
                ttsbegin;
                //  Delete service order
                serviceOrderTable.delete();
                ttscommit;
                updateRequired = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialog.caption("@SYS89007");  // Move service order lines
        dialog.addGroup("@SYS89006"); // Select destination
        dialogServiceOrderId = dialog.addFieldValue(extendedtypestr(SMAServiceOrderId),'', "@SYS79077", "@SYS79126");

        this.parmQueryDeleteEmpty( NoYes::Yes );
        dialogDeleteEmpty = dialog.addFieldValue(extendedtypestr(NoYesId),queryDeleteEmpty,"@SYS89207");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmOrderCriteriaValue(dialogServiceOrderId.value());
        queryDeleteEmpty = dialogDeleteEmpty.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedLine</Name>
				<Source><![CDATA[
    protected Map getSelectedLine(Args args)
    {
        SMAServiceOrderLine callerServiceOrderLine;
        FormDataSource      callerDataSource;
        Counter             counter;
        Map                 mapMoveLines;

        callerDataSource = FormDataUtil::getFormDataSource(args.record());

        mapMoveLines = new Map(Types::Int64, Types::Record);

        callerServiceOrderLine.clear();
        callerServiceOrderLine = args.record();
        counter    =  1;

        for (callerServiceOrderLine = callerDataSource.getFirst(true); callerServiceOrderLine; callerServiceOrderLine = callerDataSource.getNext())
        {
            mapMoveLines.insert(counter, callerServiceOrderLine);
            counter++;
        }

        return mapMoveLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery(SMATableKeyId _serviceKeyId)
    {
        queryLine = new SysQuery();
        queryLine.addDataSource(tablenum(SMAServiceOrderLine));

        orderCriteria   = queryLine.dataSourceTable(tablenum(SMAServiceOrderLine)).addRange(fieldnum(SMAServiceOrderLine, ServiceOrderId));
        orderCriteria.value(_serviceKeyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateRequired</Name>
				<Source><![CDATA[
    public boolean isUpdateRequired()
    {
        return updateRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveItemReq</Name>
				<Source><![CDATA[
    void moveItemReq(SMAServiceOrderId _fromServiceOrder, SMAServiceOrderId _toServiceOrder)
    {
        SalesLine       salesLine;

        // copy all active Item Requirement attached to another ServiceOrder
        ttsbegin;
        while select forupdate salesLine where salesLine.ServiceOrderId == _fromServiceOrder
        {
            salesLine.ServiceOrderId = _toServiceOrder;
            salesLine.update();
            updateRequired = true;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveSelectedLine</Name>
				<Source><![CDATA[
    public void moveSelectedLine(SMAServiceOrderLine _selectedLine, SMAServiceOrderId _toServiceOrder)
    {
        SMAServiceOrderLine         moveServiceOrderLine;
        SMAPreServiceOrderLine      movePreServiceOrderLine;
        SMAServiceOrderId           fromServiceOrderId;
        SMAServiceOrderTable        copyServiceOrderTable;
        SMAServiceObjectRelation    serviceObjectRelation;
        SMAServiceTaskRelation      serviceTaskRelation;

        if (_selectedLine.ServiceOrderId != _toServiceOrder)
        {
            ttsbegin;

            // Select service order line for update
            select firstonly forupdate moveServiceOrderLine where moveServiceOrderLine.RecId == _selectedLine.RecId;

            fromServiceOrderId = moveServiceOrderLine.ServiceOrderId;

            moveServiceOrderLine.ServiceOrderId      = _toServiceOrder;
            moveServiceOrderLine.ServiceOrderLineNum = moveServiceOrderLine.setLineNum();

            copyServiceOrderTable = SMAServiceOrderTable::find(_toServiceOrder);
            moveServiceOrderLine.AgreementId    = copyServiceOrderTable.AgreementId;
            moveServiceOrderLine.DateExecution  = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(serviceOrderTable.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone()));

            // Update task/object relations
            if (moveServiceOrderLine.ServiceObjectRelationId)
            {
                ttsbegin;
                serviceObjectRelation = SMAServiceObjectRelation::find(moveServiceOrderLine.ServiceObjectRelationId, true);
                if (serviceObjectRelation.RelTableId   == tablenum(SMAServiceOrderTable))
                {
                    serviceObjectRelation.RelKeyId = moveServiceOrderLine.ServiceOrderId;
                    serviceObjectRelation.update();
                }
                ttscommit;
            }

            if (moveServiceOrderLine.ServiceTaskId)
            {
                if (    SMAServiceTaskRelation::existRelation(tablenum(SMAServiceOrderTable), fromServiceOrderId                 , moveServiceOrderLine.ServiceTaskId)
                    && !SMAServiceTaskRelation::existRelation(tablenum(SMAServiceOrderTable), moveServiceOrderLine.ServiceOrderId, moveServiceOrderLine.ServiceTaskId))
                {
                    ttsbegin;
                    serviceTaskRelation = SMAServiceTaskRelation::find(tablenum(SMAServiceOrderTable), fromServiceOrderId, moveServiceOrderLine.ServiceTaskId, true);
                    serviceTaskRelation.RelKeyId = moveServiceOrderLine.ServiceOrderId;
                    serviceTaskRelation.update();
                    ttscommit;
                }
                moveServiceOrderLine.checkServiceTaskRelation(true, null, _selectedLine);
            }

            moveServiceOrderLine.update();
            updateRequired = true;

            // Change service orderId in preserviceorderlines
            if ((moveServiceOrderLine.Origin == SMAServiceOrderOrigin::System))
            {
                movePreServiceOrderLine = SMAPreServiceOrderLine::find(moveServiceOrderLine.AgreementId, moveServiceOrderLine.AgreementLineNum, moveServiceOrderLine.DateCalculated, true);
                if (movePreServiceOrderLine)
                {
                    movePreServiceOrderLine.ServiceOrderId = _toServiceOrder;
                    movePreServiceOrderLine.update();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SMAServiceOrderTable _serviceOrderTable = null, SMAServiceOrderId _orderCriteriaValue = '')
    {
        super();
        mapLineSelected = new Map(Types::Int64, Types::Record);

        serviceOrderTable = _serviceOrderTable;
        this.initQuery(_serviceOrderTable.ServiceOrderId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = connull();

        if (queryRun)
        {
            pack = queryRun.pack();
        }
        return [#CurrentVersion, #CurrentList] + [pack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderCriteriaValue</Name>
				<Source><![CDATA[
    public str parmOrderCriteriaValue(SMATableKeyId _serviceKeyId = queryServiceOrderId )
    {
        queryServiceOrderId  = _serviceKeyId;
        return queryServiceOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryDeleteEmpty</Name>
				<Source><![CDATA[
    public NoYesId parmQueryDeleteEmpty(NoYesId _value = queryDeleteEmpty)
    {
        queryDeleteEmpty = _value;
        return queryDeleteEmpty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedLine</Name>
				<Source><![CDATA[
    public Map parmSelectedLine(Map _valueMap = mapLineSelected)
    {
        mapLineSelected = _valueMap;

        return mapLineSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId()
    {
        return serviceOrderTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        SMAServiceOrderLine sourceServiceOrderLine;
        SMAServiceOrderId   sourceServiceOrderId;

        super();
        if (this.allowMoveHeader(queryServiceOrderId))
        {
            sourceServiceOrderId = serviceOrderTable.ServiceOrderId;
            // move from service order all lines
            queryRun = new SysQueryRun(queryLine);
            while (queryRun.next())
            {
                sourceServiceOrderLine  = queryRun.get(tablenum(SMAServiceOrderLine));
                sourceServiceOrderId    = sourceServiceOrderLine.ServiceOrderId;
                this.moveSelectedLine(sourceServiceOrderLine, queryServiceOrderId);
            }
            // move Item Requirements attached
            this.moveItemReq(sourceServiceOrderId, queryServiceOrderId);

            // delete empty From Service order if requested
            if (queryDeleteEmpty == NoYes::Yes)
            {
                this.deleteEmpty();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret         = false;
        int         version     = RunBase::getVersion(_packedClass);
        container   packedQuery = connull();

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                    ret = true;
                }
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SMAMoveServiceOrderLine construct(Common _buffer = null)
    {
        SMAMoveServiceOrderLine lineMove;
        SMAServiceOrderTable    sourceServiceOrderHeader;
        SMAServiceOrderLine     sourceServiceOrderLine;

        switch (_buffer.TableId)
        {
            case tablenum(SMAServiceOrderTable):
                sourceServiceOrderHeader = _buffer;
                break;

            case tablenum(SMAServiceOrderLine):
                sourceServiceOrderLine = _buffer;
                sourceServiceOrderHeader = SMAServiceOrderTable::find(sourceServiceOrderLine.ServiceOrderId);
                break;

            default:
                throw error("@SYS53926");
        }
        lineMove = new SMAMoveServiceOrderLine(sourceServiceOrderHeader);
        return lineMove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        FormDataSource          callerDataSource;
        SMAServiceOrderId       serviceOrderId;
        SMAMoveServiceOrderLine lineMove;
        Map                     mapLine;

        if (args)
        {
            if (args.record())
            {
                if (args.record().TableId ==  tablenum(SMAServiceOrderTable)
                    || args.record().TableId ==  tablenum(SMAServiceOrderLine))
                {
                    // init class instance
                    lineMove = SMAMoveServiceOrderLine::construct(args.record());
                }
                if (lineMove)
                {
                    if (args.record().TableId == tablenum(SMAServiceOrderLine))
                    {
                        // get all selected lines
                        mapLine = lineMove.getSelectedLine(args);
                        lineMove.parmSelectedLine(mapLine);
                    }
                    // do copy/move
                    if  (lineMove.prompt())
                    {
                        lineMove.runOperation();

                        // refresh form view if caled from form
                        if (args.caller() && lineMove.isUpdateRequired())
                        {
                            if (args.caller() && formHasMethod(args.caller(), identifierstr(executeQueryHeader)))
                            {
                                args.caller().executeQueryHeader();
                            }
                            if (args.caller() && formHasMethod(args.caller(), identifierstr(executeQuery)))
                            {
                                args.caller().executeQuery();
                            }

                            // get destination line
                            serviceOrderId = lineMove.parmOrderCriteriaValue();
                            callerDataSource = FormDataUtil::getFormDataSource(args.record());

                            // if there is a destination line and the record to be moved is in a datasource context
                            if (serviceOrderId && callerDataSource)
                            {
                                // update selection to the new line
                                callerDataSource.positionToRecordByValue(fieldnum(SMAServiceOrderTable, ServiceOrderId), serviceOrderId);
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>