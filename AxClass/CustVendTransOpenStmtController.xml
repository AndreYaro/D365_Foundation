<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransOpenStmtController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendTransOpenStmtController</c> class is the controller class for the customer and
/// vendor open transactions report.
/// </summary>
public class CustVendTransOpenStmtController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDialogCaption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this parm method since the dialog caption returned from
    ///    controller is not correct.
    /// </summary>
    /// <param name="_dialogCaption">
    ///    The <c>LabelType</c> value which is set as the caption.
    /// </param>
    /// <returns>
    ///    A <c>LabelType</c> value for dialog caption.
    /// </returns>
    /// <remarks>
    ///    Since we use same controller class for both customer and vendor
    ///    statement reports, the value returned from the sys last value is wrong
    ///    when we run these reports one after another.
    /// </remarks>
    public LabelType parmDialogCaption(LabelType _dialogCaption = dialogCaption)
    {
        #Properties
        MenuItemName    menuItemName;
        MenuItemType    menuItemType;
        SysDictMenu     dictMenuItem;
        TreeNode        treeNode;
        LabelType       menuItemLabelIdOrText;

        menuItemName = args.menuItemName();
        menuItemType = args.menuItemType();

        if (menuItemName)
        {
            dictMenuItem = SysDictMenu::newMenuItem(menuItemName, menuItemType);

            if (dictMenuItem)
            {
                // Get the label value from the menuitem.
                treeNode = dictMenuItem.parmTreeNode();
                menuItemLabelIdOrText = treeNode.AOTgetProperty(#PropertyLabel);
                dialogCaption = SysLabel::labelId2String2(menuItemLabelIdOrText);
            }
        }

        return dialogCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the dialog is shown to the user.
    /// </summary>
    /// <remarks>
    /// This method is invoked for interactive scenarios.
    /// This method is not invoked for batch scenarios. This means any member variables
    /// instantiated in this method will not be available for the lifetime of the controller
    /// in batch scenarios
    /// </remarks>
    protected void prePromptModifyContract()
    {
        this.initQuery();
        this.initModuleType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the opportunity for validation prior to running the report.
    /// </summary>
    /// <returns>
    ///    A container containing two items. The first item is the <c>SrsReportPreRunState</c>
    ///    enumeration. The second item is the message to show to the user.
    /// </returns>
    protected container preRunValidate()
    {
        // More than 1,000 records will take at least 10 seconds on a warm box with low volume,
        // so these are used as the warning limit.
        #Define.WarningLimit(1000)

        container   validateResult;
        int         rowCount;
        boolean     isCustType = false;
        Query query = new Query(this.getFirstQuery());
        CustVendTransOpenStmtContract dataContract = this.parmReportContract().parmRdpContract();

        if (dataContract.parmModuleCustVend() == ModuleCustVend::Cust)
        {
            isCustType = true;
        }

        // Add ranges and its values.
        CustVendTransOpenStmtController::addQueryRanges(query, isCustType, dataContract.parmPerDate());

        // Using the query from the contract ,count up to the warning limit + 1 since anything
        // over the warning limit will return the same warning.
        rowCount = QueryRun::getQueryRowCount(query, #WarningLimit + 1);

        if (rowCount < #WarningLimit)
        {
            // On the worst case for each transactional record, there might be settlement record.
            rowCount = rowCount * 2;
        }

        if (rowCount > #WarningLimit)
        {
            validateResult = [SrsReportPreRunState::Warning];
        }
        else
        {
            validateResult = super();
        }

        return validateResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the report is run.
    /// </summary>
    /// <remarks>
    /// Changes the report language when user modifies the report language in the SysQuery form.
    /// </remarks>
    protected void preRunModifyContract()
    {
        Query query = new Query(this.getFirstQuery());

        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoEE, #isoLT, #isoLV, #isoHU, #isoCZ]))
        {
            //we need to switch off unneeded datasources in the query after the prompt stage
            this.enableCustVendDataSource(query, this.parmArgs().parmEnum());
            this.parmReportContract().parmQueryContracts().insert(this.getFirstQueryContractKey(), query);

            if (this.isInBatch())
            {
                this.initQuery();
                this.initModuleType();
            }
        }
        
        QueryBuildDataSource dirQbds = query.dataSourceTable(tableNum(DirPartyTable));
        if (dirQbds)
        {
            QueryBuildRange  queryBuildRange;

            queryBuildRange = dirQbds.findRange(fieldNum(DirPartyTable,LanguageId));
            if (queryBuildRange != null && queryBuildRange.value())
            {
                SrsReportRdlDataContract rdlCotract = this.parmReportContract().parmRdlContract();
                LanguageId reportLanguageId = queryBuildRange.value();

                rdlCotract.parmLanguageId(reportLanguageId);
                rdlCotract.parmLabelLanguageId(reportLanguageId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report query and puts it in the report data contract object.
    /// </summary>
    private void initQuery()
    {
        Query query = this.getFirstQuery();

        CustVendTransOpenStmtController::updateReportQuery(query, this.parmArgs().parmEnum());

        this.getReportContract().parmQueryContracts().insert(this.getFirstQueryContractKey(), query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the module type parameter in the report data contract object.
    /// </summary>
    private void initModuleType()
    {
        CustVendTransOpenStmtContract dataContract = this.parmReportContract().parmRdpContract();

        if (this.parmArgs().parmEnum() == CustVendACType::Vend)
        {
            dataContract.parmModuleCustVend(ModuleCustVend::Vend);
        }
        else
        {
            dataContract.parmModuleCustVend(ModuleCustVend::Cust);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOperation</Name>
				<Source><![CDATA[
    public SysOperationStartResult startOperation()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds ranges on the <c>TransDate</c> and <c>Closed</c> date fields
    ///    using the passed in <c>TransDate</c> value.
    /// </summary>
    /// <param name="_query">
    ///    The <c>Query</c> which needs to update.
    /// </param>
    /// <param name="_isCustType">
    ///    The <c>Boolean</c> which determines the type of the module.
    /// </param>
    /// <param name="_transDate">
    ///    The <c>TransDate</c> value which is used as a range value.
    /// </param>
    public static void addQueryRanges(Query _query, boolean _isCustType, TransDate _transDate)
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        FieldId                 transDateFieldId;
        FieldId                 closedFieldId;

        if (_isCustType)
        {
            qbds = _query.dataSourceTable(tableNum(CustTrans));

            if (qbds)
            {
                // Add range on trans date field.
                transDateFieldId = fieldnum(CustTrans, TransDate);
                closedFieldId = fieldNum(CustTrans, Closed);
            }
        }
        else
        {
            qbds = _query.dataSourceTable(tableNum(VendTrans));

            if (qbds)
            {
                transDateFieldId = fieldnum(VendTrans, TransDate);
                closedFieldId = fieldNum(VendTrans, Closed);
            }
        }

        if (qbds)
        {
            // Add range on trans date field.
            qbr = SysQuery::findOrCreateRange(qbds, transDateFieldId);
            qbr.value(queryRange(dateNull(), _transDate));

            // Add ranges on closed date field.
            qbr = qbds.addRange(closedFieldId);
            qbr.value(SysQuery::value(datenull()));
            qbr = qbds.addRange(closedFieldId);
            qbr.value(queryRange(_transDate + 1, dateMax()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes <c>CustVendTransOpenStmtController</c> instance.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> value which is used by the controller class.
    /// </param>
    /// <returns>
    /// A <c>CustVendTransOpenStmtController</c> object.
    /// </returns>
    public static CustVendTransOpenStmtController construct(Args _args)
    {
        CustVendTransOpenStmtController controller = new CustVendTransOpenStmtController();
        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustVendTransOpenStmtController::construct(args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query with the correct data sources based on the <c>CustVendACType</c> type.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> which must be updated.
    /// </param>
    /// <param name="_custVendActType">
    /// The <c>CustVendACType</c> enum value which determines what data source ranges should be set visible.
    /// </param>
    public static void updateReportQuery(Query _query, CustVendACType _custVendActType)
    {
        const int rangeStatus_Open = 0;
        const int rangeStatus_Hidden = 2;

        int custRangeStatus = _custVendActType == CustVendACType::Cust ? rangeStatus_Open : rangeStatus_Hidden;
        int vendRangeStatus = _custVendActType == CustVendACType::Vend ? rangeStatus_Open : rangeStatus_Hidden;

        //set up visible ranges
        QueryBuildDataSource custTable_qbds = _query.dataSourceTable(tableNum(CustTable));
        CustVendTransOpenStmtController::setRangeFieldStatus(custTable_qbds.findRange(fieldNum(CustTable, AccountNum)), custRangeStatus);
        CustVendTransOpenStmtController::setRangeFieldStatus(custTable_qbds.findRange(fieldNum(CustTable, CustGroup)), custRangeStatus);

        QueryBuildDataSource custTrans_qbds = custTable_qbds.childDataSourceNo(1);
        CustVendTransOpenStmtController::setRangeFieldStatus(custTrans_qbds.findRange(fieldNum(CustTrans, Voucher)), custRangeStatus);
        CustVendTransOpenStmtController::setRangeFieldStatus(custTrans_qbds.findRange(fieldNum(CustTrans, CurrencyCode)), custRangeStatus);

        QueryBuildDataSource vendTable_qbds = _query.dataSourceTable(tableNum(VendTable));
        CustVendTransOpenStmtController::setRangeFieldStatus(vendTable_qbds.findRange(fieldNum(VendTable, AccountNum)), vendRangeStatus);
        CustVendTransOpenStmtController::setRangeFieldStatus(vendTable_qbds.findRange(fieldNum(VendTable, VendGroup)), vendRangeStatus);

        QueryBuildDataSource vendTrans_qbds = vendTable_qbds.childDataSourceNo(1);
        CustVendTransOpenStmtController::setRangeFieldStatus(vendTrans_qbds.findRange(fieldNum(VendTrans, Voucher)), vendRangeStatus);
        CustVendTransOpenStmtController::setRangeFieldStatus(vendTrans_qbds.findRange(fieldNum(VendTrans, CurrencyCode)), vendRangeStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeFieldStatus</Name>
				<Source><![CDATA[
    private static void setRangeFieldStatus(QueryBuildRange _rangeField, RangeStatus _rangeStatus)
    {
        if (_rangeField)
        {
            _rangeField.status(_rangeStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCustVendDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Switches datasources on/off on a provided query based on the provided account type.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> which must be updated.
    /// </param>
    /// <param name="_custVendActType">
    /// The <c>CustVendACType</c> which determines the type of account.
    /// </param>
    private void enableCustVendDataSource(Query _query, CustVendACType _custVendActType)
    {
        QueryBuildDataSource custTable_qbds;
        QueryBuildDataSource vendTable_qbds;
    
        if (_custVendActType == CustVendACType::Cust)
        {
            vendTable_qbds = _query.dataSourceTable(tableNum(VendTable));
            vendTable_qbds.enabled(false);
        }
        else
        {
            custTable_qbds = _query.dataSourceTable(tableNum(CustTable));
            custTable_qbds.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>