<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPackingSlipJournalPrint</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesPackingSlipJournalPrint</c> class handles the printing of the Sales order packing slip.
/// </summary>
class SalesPackingSlipJournalPrint
extends FormletterJournalPrint
{
    CustPackingSlipJour custPckSlpJour;
    NoYes               printShippingLabel;
    container           printerSettingsShippingLabel;
    NoYes               printEntryCertificate_W;
    container           printerSettingsEntryCertificate_W;
    RecordSortedList    recordListShippingLine;
    SalesTable          salesTable;

    // <GTH>
    TaxUnrealizedDocuId                 docuSetCode;
    TaxUnrealizedDocuPrintHeader        printHeader;
    TaxUnrealizedDocuProdType           prodType;
    TaxUnrealizedDocuPrintLocation      location;
    TaxUnrealizedDocuText               miscText;
    // </GTH>

    #define.currentVersion(2)
    #LOCALMACRO.CurrentList
        printShippingLabel,
        printerSettingsShippingLabel,
        salesTable
        // <GTH>
        ,docuSetCode
        // </GTH>
        ,printEntryCertificate_W
        ,printerSettingsEntryCertificate_W
    #ENDMACRO

    #define.Version1(1)
    #LOCALMACRO.CurrentListV1
        printShippingLabel,
        printerSettingsShippingLabel,
        salesTable
        // <GTH>
        ,docuSetCode
        // </GTH>
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteProforma</Name>
				<Source><![CDATA[
    private void deleteProforma()
    {
        if (custPckSlpJour.isProforma())
        {
            custPckSlpJour.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the document.
    /// </summary>
    protected void doPrint()
    {
        CustPackingSlipJour journal;
        // <GEERU>
        journal.printJournal(
            this,
            journalList,
            printBillOfLading,
            printTransportInvoice
            );
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShippingStat</Name>
				<Source><![CDATA[
    protected void initShippingStat(Common _custPackingSlipJour)
    {
        CustPackingSlipJour localCustPackingSlipJour = _custPackingSlipJour as CustPackingSlipJour;
        SalesShippingStat   salesShippingStatLocal;

        recordListShippingLine = new RecordSortedList(tableNum(SalesShippingStat));
        recordListShippingLine.sortOrder(fieldNum(SalesShippingStat, RecId));

        while select salesShippingStatLocal
                where salesShippingStatLocal.SalesId        == localCustPackingSlipJour.SalesId
                   && salesShippingStatLocal.PackingSlipId  == localCustPackingSlipJour.PackingSlipId
                   && salesShippingStatLocal.DeliveryDate   == localCustPackingSlipJour.DeliveryDate
        {
            recordListShippingLine.ins(salesShippingStatLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a record sorted list.
    /// </summary>
    /// <returns>
    /// The constructed record sorted list.
    /// </returns>
    public RecordSortedList  newJournalList()
    {
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(CustPackingSlipJour));
        recordSortedList.sortOrderFromContainer(this.formLetterSorting(tableNum(CustPackingSlipJour), fieldNum(CustPackingSlipJour, RecId)));

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] +[super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuSetCode</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuId parmDocuSetCode(TaxUnrealizedDocuId _docuSetCode = docuSetCode)
    {
        docuSetCode = _docuSetCode;
        return docuSetCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuPrintLocation parmLocation(TaxUnrealizedDocuPrintLocation _location = location)
    {
        location = _location;
        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscText</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuText parmMiscText(TaxUnrealizedDocuText _miscText = miscText)
    {
        miscText = _miscText;
        return miscText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintEntryCertificate_W</Name>
				<Source><![CDATA[
    public NoYes parmPrintEntryCertificate_W(NoYes _printEntryCertificate_W = printEntryCertificate_W)
    {
        printEntryCertificate_W = _printEntryCertificate_W;
        return printEntryCertificate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsEntryCertificate_W</Name>
				<Source><![CDATA[
    public container parmPrinterSettingsEntryCertificate_W(container _printerSettingsEntryCertificate_W = printerSettingsEntryCertificate_W)
    {
        printerSettingsEntryCertificate_W = _printerSettingsEntryCertificate_W;
        return printerSettingsEntryCertificate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsShippingLabel</Name>
				<Source><![CDATA[
    public container parmPrinterSettingsShippingLabel(container _printerSettingsShippingLabel = printerSettingsShippingLabel)
    {
        printerSettingsShippingLabel = _printerSettingsShippingLabel;
        return printerSettingsShippingLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintHeader</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuPrintHeader parmPrintHeader(TaxUnrealizedDocuPrintHeader _printHeader = printHeader)
    {
        printHeader = _printHeader;
        return printHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintShippingLabel</Name>
				<Source><![CDATA[
    public NoYes parmPrintShippingLabel(NoYes _printShippingLabel = printShippingLabel)
    {
        printShippingLabel = _printShippingLabel;
        return printShippingLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdType</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuProdType parmProdType(TaxUnrealizedDocuProdType _prodType = prodType)
    {
        prodType = _prodType;
        return prodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printEntryCertificateJour_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method prints the entry certificate journal which was created during posting.
    /// </summary>
    /// <param name="_journal">
    ///    Entry certificate journal which has to be printed.
    /// </param>
    protected void  printEntryCertificateJour_W(CustPackingSlipJour _journal)
    {
        Args                        parameters = new Args();
        CustEntryCertificateJour_W  entryCertificateJour;

        select firstonly entryCertificateJour
            where entryCertificateJour.SourceRefTableId == _journal.TableId
                && entryCertificateJour.SourceRefRecId  == _journal.RecId
                && entryCertificateJour.Status          != EntryCertificateStatus_W::Cancelled;

        if (entryCertificateJour)
        {
            parameters.caller(this);
            parameters.record(entryCertificateJour);
            new MenuFunction(menuitemOutputStr(CustEntryCertificateReport_DE), MenuItemType::Output).run(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints and sends XML documents for each journal.
    /// </summary>
    /// <param name="_journalList">
    /// A set that contains the journals to be processed.
    /// </param>
    public void  printJournal(Set _journalList)
    {
        CustPackingSlipJour journal;
        SalesShippingStat   salesShippingStat;
        SetEnumerator se = _journalList.getEnumerator();

        super(_journalList);

        if (journalList.len() > 0)
        {
            if (   CustParameters::find().EntryCertificateIssuingEnabled_W
                && this.parmPrintEntryCertificate_W()
                && ! this.parmProforma())
            {
                se.reset();
                while (se.moveNext())
                {
                    journal = se.current();
                    this.printEntryCertificateJour_W(journal);
                }
            }

            if (this.parmPrintShippingLabel() && SalesParameters::find().ShippingStat != SalesShipping::Invoice && ! this.parmProforma())
            {
                se.reset();
                while (se.moveNext())
                {
                    journal = se.current();
                    this.initShippingStat(journal);
                    if (recordListShippingLine)
                    {
                        salesShippingStat.printJournal(this, recordListShippingLine);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the document in XML format.
    /// </summary>
    /// <remarks>
    /// The method must be overridden in specialized classes if sending XML is supported by the document.
    /// </remarks>
    protected void sendAsXML()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);
        container packedSuper;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, packedSuper] = _packedClass;
                super(packedSuper);
                break;

            case #Version1:
                [version,#CurrentListV1, packedSuper] = _packedClass;
                super(packedSuper);
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesPackingSlipJournalPrint construct()
    {
        return new SalesPackingSlipJournalPrint();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormletterContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes an instance of the <c>SalesPackingSlipJournalPrint</c> class.
    /// </summary>
    /// <param name="_salesFormLetterPackingSlipContract">
    ///   An instance of the <c>salesFormletterPackingSlipContract</c> class.
    /// </param>
    /// <returns>
    ///   An instance of the <c>SalesPackingSlipJournalPrint</c> class.
    /// </returns>
    static SalesPackingSlipJournalPrint newFromFormletterContract(SalesFormLetterPackingSlipContract _salesFormLetterPackingSlipContract)
    {
        SalesPackingSlipJournalPrint salesPackingSlipJournalPrint = SalesPackingSlipJournalPrint::construct();

        salesPackingSlipJournalPrint.parmSalesTable(_salesFormLetterPackingSlipContract.parmSalesTable());
        salesPackingSlipJournalPrint.parmPrinterSettingsShippingLabel(SysOperationHelper::base64Decode(_salesFormLetterPackingSlipContract.parmPrinterSettingsShippingLabel()));
        salesPackingSlipJournalPrint.parmPrintShippingLabel(_salesFormLetterPackingSlipContract.parmPrintShippingLabel());
         // <GEERU>
        salesPackingSlipJournalPrint.parmPrintBillOfLading_RU(_salesFormLetterPackingSlipContract.parmPrintBillOfLading_RU());
        salesPackingSlipJournalPrint.parmPrintTransportInvoice_RU(_salesFormLetterPackingSlipContract.parmPrintTransportInvoice_RU());
        // </GEERU>
        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            salesPackingSlipJournalPrint.parmDocuSetCode(_salesFormLetterPackingSlipContract.parmDocuSetCode());
        }
        // </GTH>

        salesPackingSlipJournalPrint.parmPrinterSettingsEntryCertificate_W(SysOperationHelper::base64Decode(_salesFormLetterPackingSlipContract.parmPrinterSettingsEntryCertificate_W()));
        salesPackingSlipJournalPrint.parmPrintEntryCertificate_W(_salesFormLetterPackingSlipContract.parmPrintEntryCertificate_W());

        return salesPackingSlipJournalPrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingCompleted</Name>
				<Source><![CDATA[
    public static void renderingCompleted(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        // from the sender get the underyling SalesPackingSlipJournalPrint instance
        SalesPackingSlipJournalPrint callerSales = _sender.parmArgs().caller();
        callerSales.deleteProforma();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
