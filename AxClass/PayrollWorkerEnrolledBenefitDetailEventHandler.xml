<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerEnrolledBenefitDetailEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles events for the <c>PayrollWorkerEnrolledBenefitDetailEventHandler</c> table.
/// </summary>
public class PayrollWorkerEnrolledBenefitDetailEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PayrollWorkerEnrolledBenefitDetail_validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>ValidateField</c> event and validates fields on the table.
    /// </summary>
    /// <param name="_sender">PayrollWorkerEnrolledBenefitDetail instance</param>
    /// <param name="_e">DataEventArgs from the event</param>
    [DataEventHandler(tableStr(PayrollWorkerEnrolledBenefitDetail), DataEventType::ValidatingField)]
    public static void PayrollWorkerEnrolledBenefitDetail_validateField(Common _sender, DataEventArgs _e)
    {
        PayrollWorkerEnrolledBenefitDetail workerEnrolledBenefitDetail = _sender as PayrollWorkerEnrolledBenefitDetail;
        ValidateFieldEventArgs validateFieldEventArguments = _e as ValidateFieldEventArgs;

        if (validateFieldEventArguments != null)
        {
            switch (validateFieldEventArguments.parmFieldId())
            {
                case fieldNum(PayrollWorkerEnrolledBenefitDetail, VendAccountNum):

                    if (!PayrollWorkerEnrolledBenefitDetail_Extension::validateVendAccountNum(workerEnrolledBenefitDetail))
                    {
                        validateFieldEventArguments.parmValidateResult(false);
                    }

                    break;

                case fieldNum(PayrollWorkerEnrolledBenefitDetail, Position):

                    HcmWorkerEnrolledBenefit workerEnrolledBenefit = HcmWorkerEnrolledBenefit::find(workerEnrolledBenefitDetail.WorkerEnrolledBenefit);

                    boolean isValidPosition = PayrollWorkerEnrolledBenefitDetail_Extension::validatePosition(
                        workerEnrolledBenefitDetail.Position,
                        workerEnrolledBenefitDetail.LegalEntity,
                        workerEnrolledBenefit.Worker,
                        workerEnrolledBenefit.Benefit,
                        workerEnrolledBenefitDetail.ValidFrom,
                        workerEnrolledBenefitDetail.ValidTo
                    );

                    if (!isValidPosition)
                    {
                        validateFieldEventArguments.parmValidateResult(false);
                    }

                    break;

                case fieldNum(PayrollWorkerEnrolledBenefitDetail, OverrideLimit):

                    if (!PayrollWorkerEnrolledBenefitDetail_Extension::validateOverrideLimit(workerEnrolledBenefitDetail))
                    {
                        validateFieldEventArguments.parmValidateResult(false);
                    }

                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>