<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalLineTaxDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjAdvancedJournalLineTaxDocument</c> is tax document for project advanced journal lines
/// </summary>
public class ProjAdvancedJournalLineTaxDocument implements TaxableDocument
{
    ProjAdvancedJournalLine projAdvancedJournalLine;
    protected ProjAdvancedJournal projAdvancedJournal;
    TaxCalculation  tax;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculate tax amounts.
    /// </summary>
    /// <param name="_forceRecreate">
    ///     If true, tax will be recalculated even if there is an existing TaxUncommitted record.
    ///     If false, tax will only be recalculated if there is not an existing TaxUncommitted record.
    /// </param>
    /// <returns>
    ///     Calculated tax amount.
    /// </returns>
    public TaxAmountCur calcTax(boolean _forceRecreate = false)
    {
        TaxCalculationProjAdvancedJournal taxCalculation;
        TaxAmountCur amountCur;

        if (_forceRecreate || (!TaxTrans::exist(projAdvancedJournalLine.Voucher, projAdvancedJournalLine.AccountingDate, projAdvancedJournalLine.ProjTransId)))
        {
            boolean loadTaxUncommitted = TaxUncommitted::existByDocumentId(tablenum(ProjAdvancedJournalLine), projAdvancedJournalLine.RecId);
 
            taxCalculation = TaxCalculation::newForSourceTypeWithTaxUncommitted(TaxSourceType::ProjAdvancedJournal, this, loadTaxUncommitted, false);
 
            // When 'Apply Sales Tax taxation rules' parameter is on, the tax might have been calculated as a part of project cost,
            // hence we would need to calculate taxes again. The 'shouldProcessTaxes()' method returns false if the line had a external original reference i.e,
            // originating from FnO because the taxes are already posted in FnO.
            if (!loadTaxUncommitted
                && (ProjAdvancedJournalPost::shouldProcessTaxes(projAdvancedJournalLine)
                || (!ProjProjectOperationsIntegrationFeatureHelper::isProcurementCategoriesEnabledWithProjOps()
                    && TaxParameters::find().PurchTaxOnOperations == NoYes::Yes)))
            {
                amountCur = taxCalculation.calculateTax();
            }
            else
            {
                amountCur = taxCalculation.totalTaxAmount();
            }
        }
        else
        {
            amountCur = Tax::taxTotal(projAdvancedJournalLine.Voucher, projAdvancedJournalLine.AccountingDate);
        }

        
        if (projAdvancedJournalLine.ProvidedTaxAmount &&  (amountCur != projAdvancedJournalLine.ProvidedTaxAmount))
        {
            // Override if fixed tax amount is set on the line
            taxCalculation.correctTaxAmount();
        }
        else
        {
            if (ProjAdvancedJournalLine.CalculatedTaxAmount != amountCur)
            {
                ProjAdvancedJournalLine::updateCalculatedTaxAmount(ProjAdvancedJournalLine.RecId, amountCur);
            }
        }

        this.tax(taxCalculation);

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and posts the tax.
    /// </summary>
    /// <param name="_ledgerPostingController">
    ///     The ledger posting controller.
    /// </param>
    /// <param name="_ispost">
    ///     Whether to post.
    /// </param>
    public void post(LedgerPostingController _ledgerPostingController, boolean _ispost = true)
    {
        TaxPost taxPost;

        this.calcTax();
        taxPost = TaxPost::newForSourceTypeWithTaxCalculation(TaxSourceType::ProjAdvancedJournal, this, _isPost, this.tax());
        taxPost.updateAndPost(_ledgerPostingController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>ProjAdvancedJournalLineTaxDocument</c>.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    /// The project advanced journal line buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjAdvancedJournalLineTaxDocument</c>.
    /// </returns>
    public static ProjAdvancedJournalLineTaxDocument construct(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        ProjAdvancedJournalLineTaxDocument ProjAdvancedJournalLineTaxDocument = new ProjAdvancedJournalLineTaxDocument();
        ProjAdvancedJournalLineTaxDocument.parmProjAdvancedJournalLine(_projAdvancedJournalLine);

        return ProjAdvancedJournalLineTaxDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdvancedJournal</Name>
				<Source><![CDATA[
    public ProjAdvancedJournal parmProjAdvancedJournal(ProjAdvancedJournal _projAdvancedJournal = projAdvancedJournal)
    {
        projAdvancedJournal = _projAdvancedJournal;

        return projAdvancedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdvancedJournalLine</Name>
				<Source><![CDATA[
    public ProjAdvancedJournalLine parmProjAdvancedJournalLine(ProjAdvancedJournalLine _projAdvancedJournalLine = null)
    {
        if (_projAdvancedJournalLine)
        {
            projAdvancedJournalLine = _projAdvancedJournalLine;
        }

        return projAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    public boolean doTaxGroupExistsForDocument()
    {
        if (projAdvancedJournalLine.TaxGroup && projAdvancedJournalLine.TaxItemGroup)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineByRecId</Name>
				<Source><![CDATA[
    public TaxableLine getLineByRecId(RefRecId _recId)
    {
        ProjAdvancedJournalLine localProjAdvancedJournalLine = ProjAdvancedJournalLine::find(_recId);

        return ProjAdvancedJournalLineTaxLine::construct(localProjAdvancedJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    public TaxCalculation tax(TaxCalculation _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstMiscellaneousCharge</Name>
				<Source><![CDATA[
    public boolean getFirstMiscellaneousCharge()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentMiscellaneousCharge</Name>
				<Source><![CDATA[
    public TaxableLine getCurrentMiscellaneousCharge()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextMiscellaneousCharge</Name>
				<Source><![CDATA[
    public boolean getNextMiscellaneousCharge()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceNumber</Name>
				<Source><![CDATA[
    public Voucher getReferenceNumber()
    {
        return projAdvancedJournalLine.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId getInvoiceId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstLine</Name>
				<Source><![CDATA[
    public boolean getFirstLine()
    {
        return projAdvancedJournalLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentLine</Name>
				<Source><![CDATA[
    public TaxableLine getCurrentLine()
    {
        TaxableLine taxableLine = ProjAdvancedJournalLineTaxLine::construct(projAdvancedJournalLine);;

        return taxableLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLine</Name>
				<Source><![CDATA[
    public boolean getNextLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceHeader</Name>
				<Source><![CDATA[
    public Common getSourceHeader()
    {
        return projAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalizedDocument</Name>
				<Source><![CDATA[
    public Common getJournalizedDocument()
    {
        return projAdvancedJournalLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModuleType</Name>
				<Source><![CDATA[
    public TaxModuleType getModuleType()
    {
        return TaxModuleType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxObligationCompany</Name>
				<Source><![CDATA[
    public TaxObligationCompany getTaxObligationCompany()
    {
        return TaxObligationCompany::Destination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCompany</Name>
				<Source><![CDATA[
    public SelectableDataArea getSourceCompany()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayment</Name>
				<Source><![CDATA[
    public boolean isPayment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIncluded</Name>
				<Source><![CDATA[
    public boolean getTaxIncluded()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSourceDocumentFramework</Name>
				<Source><![CDATA[
    public boolean useSourceDocumentFramework()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>