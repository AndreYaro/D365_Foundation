<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransMarkCollectionBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransMarkCollectionBuilder</c> class builds a collection <c>TmpInventTransMark</c> records that can be marked or unmarked against an issue or receipt.
/// </summary>
class InventTransMarkCollectionBuilder
{
    TmpInventTransMark  tmpInventTransMark;
    InventTable         inventTable;
    InventTransOrigin   inventTransOrigin;
    InventDim           inventDimCriteria;
    InventQty           qty;
    
    readonly InventTransMarkCollection collection = InventTransMarkCollection::construct();
    readonly List nonProductInventDimFields = InventDim::getNonProductInventDimFields();
    private boolean isFlightEnabled = InventUpdateMarkingExistsMarkInventTransFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventQty parmQty(InventQty _qty = qty)
    {
        qty = _qty;
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;
        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOrigin</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventTransOrigin parmInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        inventTransOrigin = _inventTransOrigin;
        return inventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeEmptyMarkingRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>InventTrans</c> records with a blank <c>MarkingRefInventTransOrigin</c> field are included.
    /// </summary>
    /// <returns>true when the empty values are included; otherwise, false.</returns>
    protected boolean includeEmptyMarkingRef()
    {
        return inventTable.modelGroup().inventModelType().isSettled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTmpInventTransMark</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates a <c>TmpInventTransMark</c> record with values from an <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The <c>inventTransOrigin</c> record to be used to initialize the fields.
    /// </param>
    protected TmpInventTransMark findOrCreateTmpInventTransMark(InventTrans _inventTrans, InventTransOrigin _inventTransOrigin)
    {
        select tmpInventTransMark
            where tmpInventTransMark.InventTransOrigin == _inventTransOrigin.RecId
                && tmpInventTransMark.InventDimId       == _inventTrans.InventDimId;

        if (! tmpInventTransMark.RecId)
        {
            tmpInventTransMark.clear();
            tmpInventTransMark.initFromInventTrans(_inventTrans, _inventTransOrigin);
            tmpInventTransMark.SortText = InventDim::find(_inventTrans.InventDimId).preFix(nonProductInventDimFields);
        }

        return tmpInventTransMark;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInventTrans</Name>
				<Source><![CDATA[
   /// <summary>
   /// Determines if an <c>InventTrans</c> record is included when building the temporary table.
   /// </summary>
   /// <param name = "_inventTrans">The <c>InventTrans</c> to include.</param>
   /// <param name = "_inventTransOrigin">The related <c>InventTransOrigin</c>.</param>
   /// <returns>true when the record must be included; otherwise, false.</returns>
    protected boolean includeInventTrans(InventTrans _inventTrans, InventTransOrigin _inventTransOrigin)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns all <c>TmpInventTransMark</c> records that can be marked or unmarked against the issue or receipt.
    /// </summary>
    /// <returns>
    ///    A collection of <c>TmpInventTransMark</c> records.
    /// </returns>
    public InventTransMarkCollection build()
    {
        if (inventTransOrigin)
        {
            inventTable = InventTable::find(inventTransOrigin.ItemId);

            InventDimParm inventDimParmFinancialAll;
            InventDimParm inventDimParmFinancialQuery;
            InventDimGroupSetup::newInventTable(inventTable).inventDimParmActiveFinancialInventory(inventDimParmFinancialAll);
            inventDimParmFinancialQuery.data(inventDimParmFinancialAll);

            boolean postProcessWHSControlledItem;

            if (inventTable.whsItemIsWHSControlled())
            {
                InventDimParm inventDimParmAboveLocation = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(inventTable);
                if (!inventDimParmAboveLocation.InventBatchIdFlag)
                {
                    inventDimParmFinancialQuery.InventBatchIdFlag = NoYes::No;
                }
                if (!inventDimParmAboveLocation.InventSerialIdFlag)
                {
                    inventDimParmFinancialQuery.InventSerialIdFlag = NoYes::No;
                }

                postProcessWHSControlledItem = true;
            }

            InventTrans inventTrans;
            InventTransOrigin localInventTransOrigin;
            List notDistributedMarkings = new List(Types::Class);

            SysDaSearchObject searchObject = new SysDaSearchObject(
                this.buildInventTransQueryObject(inventTrans, localInventTransOrigin, inventDimCriteria, inventDimParmFinancialQuery));
            SysDaSearchStatement searchStatement = new SysDaSearchStatement();
            while (searchStatement.findNext(searchObject))
            {
                if (this.includeInventTrans(inventTrans, localInventTransOrigin))
                {
                    if (qty * inventTrans.Qty < 0)
                    {
                        // show marked transactions even if tracking financial dimensions do not match (e.g. one is below location => cleared, though marking is preserved)
                        // skip non-marked candidates if financial dimensions do not match
                        if (postProcessWHSControlledItem             &&
                            !inventTrans.MarkingRefInventTransOrigin &&
                            !InventDim::isInventDimParmEqual(inventDimCriteria, inventDim::find(inventTrans.InventDimId), inventDimParmFinancialAll, false))
                        {
                            continue;
                        }

                        tmpInventTransMark = this.findOrCreateTmpInventTransMark(inventTrans, localInventTransOrigin);
                        tmpInventTransMark.aggregateInventTrans(inventTrans, inventTable);
                        tmpInventTransMark.write();
                    }
                    else if (qty * inventTrans.Qty > 0 && inventTrans.MarkingRefInventTransOrigin)
                    {
                        InventQty inventTransFinancialOpenQty = inventTrans.financialOpenQty();
                        collection.incrementQtyMarked(inventTransFinancialOpenQty);
                        InventNotDistributedMarking inventNotDistributedMarking = new InventNotDistributedMarking(inventTrans.MarkingRefInventTransOrigin,
                                                                                                                  inventTrans.inventDimId,
                                                                                                                  // Inverse the sign so that sign of the not distributed qty is the same as the sign of tmpInventTransMark.QtyRemain
                                                                                                                  -inventTransFinancialOpenQty);
                        notDistributedMarkings.addEnd(inventNotDistributedMarking);
                    }
                }
            }

            this.distributeMarkedQty(notDistributedMarkings, InventDimParm::allInventDim());
            this.distributeMarkedQty(notDistributedMarkings, inventDimParmFinancialQuery);
            this.insertInCollection();
        }

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the records in the collection.
    /// </summary>
    private void insertInCollection()
    {
        while select tmpInventTransMark
            where tmpInventTransMark.Qty * tmpInventTransMark.QtyRemain > 0 || tmpInventTransMark.QtyMarked != 0
        {
            collection.insertRecord(tmpInventTransMark);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeMarkedQty</Name>
				<Source><![CDATA[
    private void distributeMarkedQty(
        List                _notDistributedMarkedQtyList,
        InventDimParm       _dimParm)
    {
        ListEnumerator                  notDistributedMarkingsEnumerator = _notDistributedMarkedQtyList.getEnumerator();
        InventQty                       qtyMarkedDistributedNow, qtyMarkedNotDistributed;
        InventDim                       inventDimTmpInventTransMark;

        while (notDistributedMarkingsEnumerator.moveNext())
        {
            InventNotDistributedMarking notDistributedMarking = notDistributedMarkingsEnumerator.current();
            qtyMarkedNotDistributed = notDistributedMarking.parmQty();

            if (qtyMarkedNotDistributed)
            {
                while select forUpdate tmpInventTransMark
                    where tmpInventTransMark.InventTransOrigin == notDistributedMarking.parmMarkingRefInventTransOriginRecId()
                        && tmpInventTransMark.QtyRemain != 0
                    #inventDimExistsJoin(tmpInventTransMark.inventDimId, inventDimTmpInventTransMark, InventDim::find(notDistributedMarking.parmInventDimId()), _dimParm)
                {
                    InventTrans inventTrans;

                    if (isFlightEnabled)
                    {
                        select firstonly RecId from inventTrans
                            where inventTrans.InventTransOrigin == tmpInventTransMark.InventTransOrigin
                                && inventTrans.inventDimId == tmpInventTransMark.InventDimId
                                && inventTrans.MarkingRefInventTransOrigin != 0;
                    }

                    if (inventTrans.RecId || !isFlightEnabled)
                    {
                        qtyMarkedDistributedNow = qtyMarkedNotDistributed > 0 ? min(qtyMarkedNotDistributed, tmpInventTransMark.QtyRemain) :
                                                                                max(qtyMarkedNotDistributed, tmpInventTransMark.QtyRemain);

                        tmpInventTransMark.QtyMarked += qtyMarkedDistributedNow;
                        tmpInventTransMark.QtyRemain -= qtyMarkedDistributedNow;
                        tmpInventTransMark.update();

                        qtyMarkedNotDistributed = qtyMarkedNotDistributed - qtyMarkedDistributedNow;
                        notDistributedMarking.parmQty(qtyMarkedNotDistributed);

                        if (!qtyMarkedNotDistributed)
                        {
                            break;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTransMarkCollectionBuilder construct()
    {
        return new InventTransMarkCollectionBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransQueryObject</Name>
				<Source><![CDATA[
    protected SysDaQueryObject buildInventTransQueryObject(
        InventTrans         _inventTrans,
        InventTransOrigin   _inventTransOrigin,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParmFinancialQuery)
    {
        SysDaQueryObject inventTransOriginQueryObject = this.buildInventTransOriginQueryObject(_inventTransOrigin);

        SysDaQueryObject inventTransQueryObject = new SysDaQueryObject(_inventTrans);
        inventTransQueryObject.forcePlaceholdersHint = true;
        inventTransQueryObject.orderByClause(this.buildOrderByClause());
        inventTransQueryObject.whereClause(this.buildWhereClauseForInventTrans(_inventTrans, _inventTransOrigin));        

        InventDim  inventDim;
        SysDaQueryObject inventDimQueryObject = InventDimQueryBuilder::newFromQuery(inventDim, _inventDimCriteria, _inventDimParmFinancialQuery)
                            .joinClause(new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, InventDimId)));

        inventTransOriginQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventTransQueryObject)
            .joinClause(SysDaJoinKind::ExistsJoin, inventDimQueryObject);                    
      
        return inventTransOriginQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOrderByClause</Name>
				<Source><![CDATA[
    protected SysDaOrderBys buildOrderByClause()
    {
        return new SysDaOrderBys()
                .addDescending(fieldstr(InventTrans, MarkingRefInventTransOrigin)) // marked transactions should be selected first
                .addDescending(fieldstr(InventTrans, StatusReceipt))
                .addDescending(fieldStr(InventTrans, Qty));

    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForInventTrans</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildWhereClauseForInventTrans(InventTrans _inventTrans, InventTransOrigin _inventTransOrigin)
    {
        SysDaQueryExpression inventTransQueryWhereClause =
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, InventTransOrigin)),
                new SysDaFieldExpression(_inventTransOrigin, fieldStr(InventTransOrigin, RecId)))
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, ValueOpen)),
                    new SysDaValueExpression(InventTransOpen::Yes)))
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, TransChildType)),
                    new SysDaValueExpression(InventTransChildType::None)))
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, PackingSlipReturned)),
                    new SysDaValueExpression(NoYes::No)));

        if (!this.includeEmptyMarkingRef())
        {
            inventTransQueryWhereClause = inventTransQueryWhereClause.and(
                    new SysDaNotEqualsExpression(
                        new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, MarkingRefInventTransOrigin)),
                        new SysDaValueExpression(0)));
        }

        inventTransQueryWhereClause = inventTransQueryWhereClause.and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, MarkingRefInventTransOrigin)),
                new SysDaValueExpression(0))
            .or(new SysDaEqualsExpression( // marked with reference
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, MarkingRefInventTransOrigin)), 
                    new SysDaValueExpression(inventTransOrigin.RecId)))
            .or(new SysDaEqualsExpression( // is reference itself
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, InventTransOrigin)),
                    new SysDaValueExpression(inventTransOrigin.RecId))));                    

        return inventTransQueryWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransOriginQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildInventTransOriginQueryObject(InventTransOrigin _inventTransOrigin)
    {
        SysDaQueryObject inventTransOriginQueryObject = new SysDaQueryObject(_inventTransOrigin);
        inventTransOriginQueryObject.whereClause(this.buildWhereClauseForInventTransOrigin(_inventTransOrigin));
        return inventTransOriginQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForInventTransOrigin</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildWhereClauseForInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        SysDaQueryExpression inventTransOriginQueryWhereClause =
            new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTransOrigin, fieldStr(InventTransOrigin, ItemId)),
                    new SysDaValueExpression(inventTransOrigin.ItemId));

        return inventTransOriginQueryWhereClause;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>