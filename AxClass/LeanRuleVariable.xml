<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleVariable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanRuleVariable</c> class represents a rule with variable quantity.
/// </summary>
public abstract class LeanRuleVariable extends LeanRuleKanban
{
    KanbanQuantity  inventSettingMinimumProductQuantity;
    KanbanQuantity  inventSettingMaximumProductQuantity;
    boolean         inventSettingCached;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canTrigger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a rule can be triggered.
    /// </summary>
    /// <returns>
    ///    true if the rule can be triggered; otherwise, false.
    /// </returns>
    public boolean canTrigger()
    {
        return    leanRuleData
               && leanRuleData.parmKanbanRule().LegalEntity == CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanCreationForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the name of the form for manually creating kanbans.
    /// </summary>
    /// <returns>
    ///    The name of the kanban-creation form.
    /// </returns>
    public str getKanbanCreationForm()
    {
        return formStr(KanbanCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxKanbanQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum kanban quantity that is enabled by the rule.
    /// </summary>
    /// <returns>
    /// The maximum kanban quantity that is enabled by the rule.
    /// </returns>
    /// <remarks>
    /// This method is used during kanban creation.
    /// </remarks>
    public KanbanQuantity getMaxKanbanQty()
    {
        return leanRuleData.parmKanbanRuleVariable().MaximumProductQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinKanbanQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the minimum kanban quantity that is enabled by the rule.
    /// </summary>
    /// <returns>
    /// The minimum kanban quantity that is enabled by the rule.
    /// </returns>
    /// <remarks>
    /// This method is used during kanban creation.
    /// </remarks>
    public KanbanQuantity getMinKanbanQty()
    {
        return leanRuleData.parmKanbanRuleVariable().MinimumProductQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the default data of the fields.
    /// </summary>
    /// <remarks>
    ///    This method is supports the effect of calls to the <c>modifiedField</c> method during data
    ///    initialization.
    /// </remarks>
    public void initFields()
    {
        super();

        KanbanRuleVariable kanbanRuleVariable = leanRuleData.parmKanbanRuleVariable();

        // Set defaults only if we are not overriding values
        if (   kanbanRuleVariable.MinimumProductQuantity == 0
            && kanbanRuleVariable.MaximumProductQuantity == 0)
        {
            this.readDefaultSiteOrInventoryOrderSettings();
            this.setDefaultSiteOrInventoryOrderSettings();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a rule of the required type in the entities hierarchy of the rules.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>LeanRulesEngine::createRule</c> method.
    /// </remarks>
    public void insert()
    {
        KanbanRuleVariable kanbanRuleVariable = leanRuleData.parmKanbanRuleVariable();

        ttsbegin;

        // first insert the parent record
        super();

        // initialize link to parent
        kanbanRuleVariable.ParentRecId = leanRuleData.parmKanbanRule().RecId;

        // insert the corresponding record
        kanbanRuleVariable.doInsert();
        leanRuleData.parmKanbanRuleVariable(kanbanRuleVariable);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the change in a value of the field.
    /// </summary>
    /// <param name="_tableId">
    ///    The ID of the table that contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    ///    The ID of the field that has a changed value.
    /// </param>
    public void modifiedField(
        tableId _tableId,
        fieldId _fieldId)
    {
        super(_tableId, _fieldId);
        this.modifiedFieldKanbanRule(_tableId,_fieldId);
        this.modifiedFieldKanbanRuleVariable(_tableId,_fieldId);
        this.modifiedFieldKanbanFlow(_tableId,_fieldId);
        this.modifiedFieldLeanCoverage(_tableId,_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldKanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a value update of a field in the <c>KanbanFlow</c> table.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table that contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field that has a changed value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void modifiedFieldKanbanFlow(
        tableId _tableId,
        fieldId _fieldId)
    {
        if (_tableId == tableNum(KanbanFlow))
        {
            switch (_fieldId)
            {
                case fieldNum(KanbanFlow, LastPlanPlanActivity):
                    this.setDefaultSiteOrInventoryOrderSettings();
                    this.validateProductQuantityInventSetting();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a value update of a field in the <c>KanbanRule</c> table.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table that contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field that has a changed value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void modifiedFieldKanbanRule(tableId _tableId, fieldId _fieldId)
    {
        if (_tableId == tableNum(KanbanRule))
        {
            switch (_fieldId)
            {
                case fieldNum(KanbanRule,ReplenishmentStrategy):
                    this.setDefaultSiteOrInventoryOrderSettings();
                    this.validateProductQuantityInventSetting();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldKanbanRuleVariable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the value update of a field in the <c>KanbanRuleVariable</c> table.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table that contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field that has a changed value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void modifiedFieldKanbanRuleVariable(
        tableId _tableId,
        fieldId _fieldId)
    {
        if (_tableId == tableNum(KanbanRuleVariable))
        {
            switch (_fieldId)
            {
                case fieldNum(KanbanRuleVariable, MinimumProductQuantity),
                     fieldNum(KanbanRuleVariable, MaximumProductQuantity):
                    this.validateProductQuantity();
                    this.validateProductQuantityInventSetting();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldLeanCoverage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the value update of a field in the <c>LeanCoverage</c> table.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table that contains the updated field.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field that has a changed value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void modifiedFieldLeanCoverage(
        tableId _tableId,
        fieldId _fieldId)
    {
        if (_tableId == tableNum(LeanCoverage))
        {
            switch (_fieldId)
            {
                case fieldNum(LeanCoverage, RuleCoverageType),
                     fieldNum(LeanCoverage, ItemId):
                    this.setDefaultSiteOrInventoryOrderSettings();
                    this.validateProductQuantityInventSetting();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSettingMaximumProductQuantity</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanQuantity parmInventSettingMaximumProductQuantity(KanbanQuantity _inventSettingMaximumProductQuantity = inventSettingMaximumProductQuantity)
    {
        inventSettingMaximumProductQuantity = _inventSettingMaximumProductQuantity;

        return inventSettingMaximumProductQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSettingMinimumProductQuantity</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanQuantity parmInventSettingMinimumProductQuantity(KanbanQuantity _inventSettingMinimumProductQuantity = inventSettingMinimumProductQuantity)
    {
        inventSettingMinimumProductQuantity = _inventSettingMinimumProductQuantity;

        return inventSettingMinimumProductQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readDefaultSiteOrInventoryOrderSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the default values for the minimum and maximum product quantity depending on the inventory
    /// order settings.
    /// </summary>
    /// <param name="_useCache">
    /// A Boolean value that indicates whether cached values can be used; optional.
    /// </param>
    /// <remarks>
    /// The site-specific settings will be obtained and will fall back to the general settings if they are
    /// not found.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void readDefaultSiteOrInventoryOrderSettings(boolean _useCache = false)
    {
        if (   !_useCache
            || !inventSettingCached)
        {
            inventSettingMinimumProductQuantity = 0;
            inventSettingMaximumProductQuantity = 0;
            inventSettingCached                 = true;

            if (leanRuleData)
            {
                // Obtain site specific inventory order settings
                InventDim inventDim = InventDim::findDim(leanRuleData.kanbanFlow().receiptInventDim());
                InventItemInventSetup inventItemInventSetup = InventItemInventSetup::findApplyOverride(
                                                                  leanRuleData.parmLeanCoverage().ItemId,
                                                                  inventDim.InventDimId);

                if (inventItemInventSetup)
                {
                    inventSettingMinimumProductQuantity = inventItemInventSetup.LowestQty;
                    inventSettingMaximumProductQuantity = inventItemInventSetup.HighestQty;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the lead time for the kanban rule.
    /// </summary>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether to skip user interaction.
    /// </param>
    public void refreshLeadTime(boolean _silent = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultSiteOrInventoryOrderSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values for the maximum product quantity depending on the inventory order settings.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDefaultSiteOrInventoryOrderSettings()
    {
        this.readDefaultSiteOrInventoryOrderSettings();

        if (   leanRuleData
            && leanRuleData.parmLeanCoverage().RuleCoverageType == LeanRuleCoverageType::Product)
        {
            KanbanRuleVariable kanbanRuleVariable = leanRuleData.parmKanbanRuleVariable();
            if (kanbanRuleVariable.MaximumProductQuantity == 0)
            {
                kanbanRuleVariable.MaximumProductQuantity = inventSettingMaximumProductQuantity;
            }
            leanRuleData.parmKanbanRuleVariable(kanbanRuleVariable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the record of the rules in the database.
    /// </summary>
    public void update()
    {
        KanbanRuleVariable kanbanRuleVariable = leanRuleData.parmKanbanRuleVariable();

        ttsbegin;
        // update parent
        super();

        // update the corresponding record
        kanbanRuleVariable.selectForUpdate(true);
        kanbanRuleVariable.doUpdate();
        leanRuleData.parmKanbanRuleVariable(kanbanRuleVariable);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the integer fields of the <c>KanbanRuleVariable</c> table buffer.
    /// </summary>
    /// <returns>
    ///    true if the fields are valid; otherwise, false.
    /// </returns>
    protected boolean validateFields()
    {
        boolean             result = true;
        KanbanRule          kanbanRule = leanRuleData.parmKanbanRule();
        KanbanRuleVariable  kanbanRuleVariable = leanRuleData.parmKanbanRuleVariable();

        #timeConstants

        // call the generic checks
        result = result && super();

        result = result && this.validateProductQuantity();
        result = result && this.validateProductQuantityInventSetting();

        // Verify maximum planned jobs (if defined) is greater or equal to automatic planning quantity
        if (   kanbanRuleVariable.MaximumPlannedOrders > 0
            && kanbanRuleVariable.MaximumPlannedOrders < kanbanRule.TriggerLevel)
        {
            result = checkFailed("@SYS313587");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the potential change in the minimum, maximum and default kanban quantities are
    ///    consistent.
    /// </summary>
    /// <returns>
    ///    true if the quantities are valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateProductQuantity()
    {
        boolean             result                      = true;
        LeanRuleData        originalData                = leanRuleData.orig();
        KanbanRule          kanbanRule                  = leanRuleData.parmKanbanRule();
        KanbanRuleVariable  kanbanRuleVariable          = leanRuleData.parmKanbanRuleVariable();

        if (   kanbanRuleVariable.MaximumProductQuantity
            && kanbanRuleVariable.MaximumProductQuantity < kanbanRuleVariable.MinimumProductQuantity)
        {
            result = checkFailed("@SYS326646");
        }

        if (   kanbanRule.Quantity
            && kanbanRuleVariable.MinimumProductQuantity
            && kanbanRule.Quantity < kanbanRuleVariable.MinimumProductQuantity)
        {
            result = checkFailed("@SYS326647");
        }

        if (   kanbanRule.Quantity
            && kanbanRuleVariable.MaximumProductQuantity
            && kanbanRule.Quantity > kanbanRuleVariable.MaximumProductQuantity)
        {
            result = checkFailed("@SYS326648");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductQuantityInventSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the potential change in the kanban quantities are in the range of the order settings
    /// of the item.
    /// </summary>
    /// <returns>
    /// true if the quantities are valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateProductQuantityInventSetting()
    {
        boolean             result             = true;
        LeanRuleData        originalData       = leanRuleData.orig();
        KanbanRuleVariable  kanbanRuleVariable = leanRuleData.parmKanbanRuleVariable();

        this.readDefaultSiteOrInventoryOrderSettings(true);

        if (   inventSettingMaximumProductQuantity
            && kanbanRuleVariable.MaximumProductQuantity > inventSettingMaximumProductQuantity)
        {
            result = checkFailed("@SYS313589");
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
