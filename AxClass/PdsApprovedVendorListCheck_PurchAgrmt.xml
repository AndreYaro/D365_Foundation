<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsApprovedVendorListCheck_PurchAgrmt</Name>
	<SourceCode>
		<Declaration><![CDATA[
[PdsApprovedVendorListCheckTableIdFactoryAttribute(tableStr(PurchAgreementHeader))]
/// <summary>
/// Handles the approved vendor list check for buffer type <c>PurchAgreementHeader</c>.
/// </summary>
class PdsApprovedVendorListCheck_PurchAgrmt
    extends PdsApprovedVendorListCheck
{
    PurchAgreementHeader    purchAgreementHeader;
    TmpPurchLine            tmpPurchLineReleaseDetails;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Approved Vendor List record is present. If valid record found 'OK' is returned.If no valid record is found, the warning value set in the item master is returned.
    /// </summary>
    /// <returns>
    /// Corresponding value of PdsVendorCheckResult
    /// </returns>
    public PdsVendorCheckResult check()
    {
        PdsVendorCheckResult        ret = PdsVendorCheckResult::OK;
        PdsApprovedVendorListCheck_PurchAgrmtLn  lineCheck;
        AgreementLine               agreementLine;

        while select agreementLine
            where agreementLine.Agreement == purchAgreementHeader.RecId
        {
            lineCheck = PdsApprovedVendorListCheck::newFromTable(agreementLine);
            lineCheck.parmVendAccount(vendAccount);
            lineCheck.parmtoDate(toDate);
            lineCheck.parmFromDate(fromDate);
            lineCheck.parmIgnoreError(ignoreError);

            switch (lineCheck.check())
            {
                case PdsVendorCheckResult::Warning:
                    if (ret < PdsVendorCheckResult::Warning)
                    {
                        ret = PdsVendorCheckResult::Warning;
                    }
                    break;

                case PdsVendorCheckResult::NotAllowed:
                    ret = PdsVendorCheckResult::NotAllowed;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new instance of class
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
        public Common parmBuffer(Common _common = null)
    {
        if (!prmisdefault(_common) && _common.TableId == tablenum(PurchAgreementHeader))
        {
            purchAgreementHeader    = _common;

            vendAccount = purchAgreementHeader.VendAccount;
            fromDate    = purchAgreementHeader.DefaultAgreementLineEffectiveDate;
            toDate      = purchAgreementHeader.DefaultAgreementLineExpirationDate;
        }

        return purchAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpPurchLineReleaseDetails</Name>
				<Source><![CDATA[
        public TmpPurchLine parmTmpPurchLineReleaseDetails(TmpPurchLine _tmpPurchLineReleaseDetails = tmpPurchLineReleaseDetails)
    {
        tmpPurchLineReleaseDetails = _tmpPurchLineReleaseDetails;
        return tmpPurchLineReleaseDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the check method and if check returns anything other than 'OK'. Either a warning or a fail message will be returned.
    /// </summary>
    /// <returns>
    /// Returns true / false
    /// </returns>
    public boolean validateCheck()
    {
        boolean                     ret = true;
        PdsApprovedVendorListCheck_PurchAgrmtLn  lineCheck;
        AgreementLine               agreementLine;
        TmpPurchLine                tmpPurchLine;

        while select agreementLine
            where agreementLine.Agreement == purchAgreementHeader.RecId
        {
            tmpPurchLine.setTmpData(tmpPurchLineReleaseDetails);

            select firstOnly recId, deliveryDate from tmpPurchLine
                where   tmpPurchLine.AgreementLineQuantityCommitment  == agreementLine.RecId
                    &&  tmpPurchLine.ItemId                           == agreementLine.ItemId;

            if (tmpPurchLine.PurchQty > 0)
            {
                lineCheck = PdsApprovedVendorListCheck_PurchAgrmtLn::construct();

                lineCheck.parmBuffer(agreementLine);
                lineCheck.parmReleaseDate(tmpPurchLine.DeliveryDate);
                lineCheck.parmIgnoreError(ignoreError);

                ret = lineCheck.validateCheck() && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs instance of class
    /// </summary>
    /// <returns>
    /// Returns instance of subclass
    /// </returns>
    public static PdsApprovedVendorListCheck_PurchAgrmt construct()
    {
        return new PdsApprovedVendorListCheck_PurchAgrmt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>