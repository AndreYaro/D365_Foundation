<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetter_ShippingBill_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>SalesFormLetter_ShippingBill_IN</c> class used to call posting of shipping bill.
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::ShippingBill_IN)]
class       SalesFormLetter_ShippingBill_IN
extends     SalesFormLetter implements BatchRetryable
{
    CustomsShippingBillJour_IN      customsShippingBillJour;
    CustomsShippingBillTrans_IN     customsShippingBillTrans;
    SalesQty                        invoiceUpdatedOnly;
    AmountCur                       discValue;
    RecordSortedList                recordListExportTrans;

    #define.currentVersion(9)
    #LOCALMACRO.ParmList
        printerSettingsBillOfExchange
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcShippingStat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates shipping stat.
    /// </summary>
    /// <param name="_salesShippingStat">
    /// The sales shipping stat.
    /// </param>
    /// <param name="_oldSalesShippingStat">
    /// The old sales shipping stat.
    /// </param>
    void  calcShippingStat(SalesShippingStat _salesShippingStat, SalesShippingStat _oldSalesShippingStat)
    {
        _salesShippingStat.GrossWeight = _salesShippingStat.GrossWeight - _oldSalesShippingStat.UnitWeight + _salesShippingStat.UnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the instance can go batch journal.
    /// </summary>
    /// <returns>
    /// The result of the check.
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFormLetterId_IN</Name>
				<Source><![CDATA[
    public boolean  checkFormLetterId_IN()
    {
        boolean         ok = true;
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();

        salesParmTable.reread();

        if ((salesParmUpdate.CustomsShippingBill_IN == NoYes::Yes && !salesParmUpdate.CustomsShippingBillNumberTable_IN) ||
            (salesParmUpdate.CustomsShippingBill_IN == NoYes::No  && salesParmTable.RecId && !salesParmTable.CustomsShippingBillNumberTable_IN))
        {
            ok = checkFailed(strfmt(this.missingNumber(), salesParmTable.SalesId));
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkifWMSorder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if WMS is in order.
    /// </summary>
    /// <returns>
    /// Returns true if the WMS should be in order.
    /// </returns>
    protected boolean checkifWMSorder()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the inter company information.
    /// </summary>
    /// <returns>
    /// Returns the result of the check.
    /// </returns>
    protected boolean checkInterCompany()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLateSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the selection is the late selection.
    /// </summary>
    /// <returns>
    /// Returns true.
    /// </returns>
    protected boolean checkLateSelection()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks sales status.
    /// </summary>
    /// <returns>
    /// The result of the check.
    /// </returns>
    //Overridden to bypass the parent call from being called.
    protected boolean  checkSales()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the sales line to see whether it changed.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The sales parm line.
    /// </param>
    /// <param name="_salesLine">
    /// The sales line information.
    /// </param>
    /// <returns>
    /// Returns true if the sales line is changed.
    /// </returns>
    protected boolean checkSalesLineChanged(SalesParmLine _salesParmLine, SalesLine _salesLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLinesChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the sales lines to see whether all changed.
    /// </summary>
    /// <returns>
    /// The result of the check.
    /// </returns>
    protected boolean checkSalesLinesChanged()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the sales type information.
    /// </summary>
    /// <returns>
    /// The result of the check.
    /// </returns>
    protected boolean checkSalesType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSumBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the sum.
    /// </summary>
    /// <returns>
    /// Returns the result of the check.
    /// </returns>
    protected boolean checkSumBy()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSumNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks sum sum.
    /// </summary>
    /// <returns>
    /// The result of the check.
    /// </returns>
    protected boolean checkSumNum()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliverNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the shipping bill should be deliver now.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The sales parm line.
    /// </param>
    /// <returns>
    /// The instance of the <c>SalesQty</c> class.
    /// </returns>
    SalesQty deliverNow(SalesParmLine _salesParmLine = null)
    {
        SalesQty deliverNow, remainBefore, remainAfter;
        [deliverNow, remainBefore, remainAfter] = salesQuantity.qtySales(_salesParmLine.salesLine(), SalesUpdate::PackingSlip);
        return _salesParmLine.DeliverNow - deliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets document status.
    /// </summary>
    /// <returns>
    /// The document status.
    /// </returns>
    DocumentStatus  documentStatus()
    {
        return DocumentStatus::ShippingBill_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmCustomsExportOrderTable_IN</Name>
				<Source><![CDATA[
    protected void  initParmCustomsExportOrderTable_IN(CustomsExportOrderTable_IN  _customsExportOrderTable)
    {
        customsExportOrderTable = _customsExportOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLines_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the contractor class and chooseLines query for posting ShippingBill.
    /// </summary>
    /// <param name="_salesParmTable">
    ///    The _salesParmTable table buffer of salesParmTable.
    /// </param>
    public void insertParmLines_IN(
        SalesParmTable _salesParmTable)
    {
        this.parmDirectDeliveryUpdate(false);
        container parmTableContainer = [_salesParmTable];

        container outputContainer = SalesFormletterParmDataShippingBill_IN::chooseLinesServerShippingBill(
                                                                               this.packDataContract(salesFormLetterContract),
                                                                               false,
                                                                               parmTableContainer);
        FormLetterParmDataOutputContract outputContract = this.unpackFormletterParmDataOutputContract(outputContainer);

        this.getValuesFormletterParmData(outputContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customs shipping bill journal.
    /// </summary>
    /// <returns>
    /// The instance of the <c>CustomsShippingBillJour_IN</c> class.
    /// </returns>
    CustomsShippingBillJour_IN  journal()
    {
        return customsShippingBillJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>missingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the missing number label.
    /// </summary>
    /// <returns>
    /// The missing number label.
    /// </returns>
    str  missingNumber()
    {
        return "@GLS5780";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintInAfterOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether printing must happen in the after operation instead of in the service.
    /// </summary>
    /// <returns>
    /// false as the default printing is not there for ShippingBill..
    /// </returns>
    protected boolean mustPrintInAfterOperation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container  pack()
    {
        return [#CurrentVersion,#ParmList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the journal in the list.
    /// </summary>
    /// <param name="_journalList">
    /// The journal list.
    /// </param>
    public void printJournal(Set _journalList = null)
    {
        //For future use - As of now no printing of Shipping bill is done, can be overridden in future
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::SalesOrderInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean  unpack(container  _packedClass)
    {
        Integer  version = conpeek(_packedClass,1);
        container packedBase;

        ParmId          parmId;
        SalesParmUpdate salesParmUpdate;
        NoYes           backorder;
        NoYes           queryCriteria;
        NoYes           editing;
        Printout        printout;
        NoYes           printFormletter;
        NoYes           printCODLabel;
        NoYes           printFreightSlip;
        container       printerSettingsFormLetter;
        container       printerSettingsFreightSlip;
        container       printerSettingsCODLabel;
        NoYes           printShippingLabel;
        container       printerSettingsShippingLabel;
        container       printerSettingsFormLetterCopy;
        boolean         usePrintManagement;

        #LOCALMACRO.ParmList_v5
            parmId,
            salesParmUpdate,
            backorder,
            queryCriteria,
            editing,
            printOut,
            printFormletter,
            printCODLabel,
            printFreightSlip,
            printerSettingsFormLetter,
            printerSettingsFreightSlip,
            printerSettingsCODLabel,
            printShippingLabel,
            printerSettingsShippingLabel,
            printerSettingsBillOfExchange,
            printerSettingsFormLetterCopy,
            usePrintManagement
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion :
                [version, #ParmList, packedBase] = _packedClass;
                return super(packedBase);

            case 7+1 /*case is old currentversion + old parentversion*/ :
                [version, #parmList_v5] = _packedClass;
                this.setNewContract(SalesFormLetterContract::construct(DocumentStatus::ShippingBill_IN));

                contractIsFromPreviousVersion = true;
                this.parmId(parmId);
                this.salesParmUpdate(salesParmUpdate);
                this.printout(printout);
                this.printFormLetter(printFormletter);
                this.printCODLabel(printCODLabel);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletter, PrintSetupOriginalCopy::Original);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletterCopy, PrintSetupOriginalCopy::Copy);
                this.updatePrinterSettingsCODLabel(printerSettingsCODLabel);
                this.printShippingLabel(printShippingLabel);
                this.updatePrinterSettingsShippingLabel(printerSettingsShippingLabel);
                this.usePrintManagement(usePrintManagement);
                break;

            default :
                return super(_packedClass);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@GLS5759";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void  new(identifierName             _className = classstr(FormletterService),
                     identifierName             _methodName= methodstr(FormletterService, postSalesOrderDeliverySlip_BR),
                     SysOperationExecutionMode  _executionMode = SysOperationExecutionMode::Synchronous)
    {
        if (!TaxParameters::isCustomsEnable_IN())
        {
            throw error(strFmt("@SYS19306", funcName()));
        }
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean errorMessageHelpScopeShowLink()
    {
        if (SalesFormLetterErrorMessageHelpScopeShippingBillFlight::instance().isEnabled())
        {
            return super();
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>