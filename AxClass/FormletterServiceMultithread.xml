<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterServiceMultithread</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FormletterServiceMultithread extends FormletterService
{
    boolean                 continueSelectParmTableRecords;
    List                    parmTableRecordIdList;
    ListEnumerator          parmTableRecordIdListEnumerator;
    container               packedParmTableRecordIdList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a message to the Infolog when the <c>FormletterServiceMultithread</c> class is used in the
    /// batch framework.
    /// </summary>
    /// <param name="_multiThreadDisabled">
    /// A Boolean value that indicates whether the information message is called when multithreading is
    /// used.
    /// </param>
    /// <remarks>
    /// The message can be found in the log for the batch task that called the
    /// <c>FormletterServiceMultithread</c> class.
    /// </remarks>
    protected void batchMessage(boolean _multiThreadDisabled)
    {
        info("@SYS310708");
    }

]]></Source>
			</Method>
			<Method>
				<Name>continueSelect</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the selection of the <c>FormletterParmTable</c> records is to continue.
    /// </summary>
    /// <returns>
    ///    true if the selection of the <c>FormletterParmTable</c> records is to continue; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The selection stops when the <c>continueSelectParmTableRecords</c> Boolean value is set to false.
    /// </remarks>
    protected boolean continueSelect()
    {
        RefRecId            parmTableRecId;

        if (parmTableRecordIdListEnumerator.moveNext())
        {
            parmTableRecId = parmTableRecordIdListEnumerator.current();

            select firstonly forupdate formletterParmTable
                where formletterParmTable.RecId         == parmTableRecId
                   && formletterParmTable.ParmJobStatus == ParmJobStatus::Waiting;

            if (formletterParmTable.RecId)
            {
                info(strFmt("@SYS329914", formletterParmTable.OrderId));
            }
        }
        else
        {
            continueSelectParmTableRecords = false;
        }

        return continueSelectParmTableRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the process to end the posting of the selected <c>FormletterParmTable</c> records.
    /// </summary>
    /// <param name="_printout">
    ///    A value that indicates when in a process report that the created journals are to be printed.
    /// </param>
    /// <remarks>
    ///    The <c>FormletterServiceMultithread</c> class is empty because the
    ///    <c>FormletterServiceEndBatchTask</c> class will perform the process for ending the posting when
    ///    multithreading is used.
    /// </remarks>
    protected void endPosting(Printout _printout)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initiates the selection of the <c>FormletterParmTable</c> records over which to loop.
    /// </summary>
    /// <remarks>
    ///    The <c>readPast</c> Boolean value is set to true so that the no records selected with pessimistic
    ///    lock will be selected again.
    /// </remarks>
    protected void initFormletterParmTable()
    {
        if (conLen(packedParmTableRecordIdList))
        {
            parmTableRecordIdList           = List::create(packedParmTableRecordIdList);

            parmTableRecordIdListEnumerator = parmTableRecordIdList.getEnumerator();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParallelismEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the parallelism feature is used.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// Always returns false so that no batch tasks can be created when the <c>run</c> method from this
    /// class is called.
    /// </remarks>
    protected boolean isParallelismEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicated if the <c>FormletterService</c> class must create data for selection.
    /// </summary>
    /// <returns>
    /// true if the <c>FormletterService</c> class must create data for selection;otherwise, false.
    /// </returns>
    /// <remarks>
    /// Always returns false.
    /// </remarks>
    protected boolean mustCreateParmData()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        continueSelectParmTableRecords = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedParmTableRecordIdList</Name>
				<Source><![CDATA[
    public container parmPackedParmTableRecordIdList(container _packedParmTableRecordIdList = packedParmTableRecordIdList)
    {
        packedParmTableRecordIdList = _packedParmTableRecordIdList;

        return packedParmTableRecordIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FormletterServiceMultithread construct()
    {
        return new FormletterServiceMultithread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromFormLetterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of <c>FormletterServiceMultithread</c> based on a <c>FormletterType</c> enum.
    /// </summary>
    /// <param name="_formletterType">
    /// The <c>FormLetterType</c> enumeration value determining the sub-class.
    /// </param>
    /// <returns>
    /// An instance of the <c>FormletterServiceMultithread</c> class.
    /// </returns>
    public static FormletterServiceMultithread constructFromFormLetterType(FormletterType _formletterType)
    {
        FormLetterServiceMultithreadFactoryAttribute factoryAttribute = new FormLetterServiceMultithreadFactoryAttribute(_formletterType);

        FormletterServiceMultithread formletterServiceMultithread = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(FormletterServiceMultithread), factoryAttribute) as FormletterService;
        if (!formletterServiceMultithread || classIdGet(formletterServiceMultithread) == classNum(FormletterServiceMultithread))
        {
            // For compatibility call the constructor.
            formletterServiceMultithread = FormletterServiceMultithread::construct();
        }

        return formletterServiceMultithread;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormletterServiceMultiThread</Name>
				<Source><![CDATA[
    public static FormletterServiceMultithread newFormletterServiceMultiThread(container          _packedFormletter,
                                                                                    DocumentStatus     _documentStatus,
                                                                                    FormletterType     _formletterType,
                                                                                    container          _packedFormletterContract)
    {
        FormletterServiceMultithread formletterService = FormletterServiceMultithread::constructFromFormLetterType(_formletterType);

        formletterService.parmPackedFormletter(_packedFormletter);
        formletterService.parmDocumentStatus(_documentStatus);
        formletterService.parmFormletterType(_formletterType);
        formletterService.parmFormLetterContract(FormLetterServiceController::unpackDataContractObject(_packedFormletterContract, _formletterType));

        formletterService.initFormletter();
        return formletterService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>