<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSControlCatchWeightTag</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSControlCatchWeightTag</c> class is responsible for handling the catch weight tag controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#CatchWeightTag)]
public class WHSControlCatchWeightTag extends WHSControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the catch weight tag control.
    /// </summary>
    /// <returns>true if processing succeeded; otherwise, false.</returns>
    public boolean process()
    {
        if (!this.validateCatchWeightTag(this.parmData()))
        {
            return false;
        }

        fieldValues.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag, this.parmData());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the catch weight tag.
    /// </summary>
    /// <param name = "_tagNumber">The tag number to validate.</param>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    private boolean validateCatchWeightTag(WHSCatchWeightTagNumber _tagNumber)
    {
        boolean ret = true;

        WHSCatchWeightTag catchWeightTag = WHSCatchWeightTag::find(_tagNumber);

        if (mode == WHSWorkExecuteMode::ReturnOrder
        ||  mode == WHSWorkExecuteMode::ReturnOrderAndLocate)
        {
            return this.validateReturnLine(catchWeightTag);
        }
        else if (mode == WHSWorkExecuteMode::AdjustmentOut
            || mode == WHSWorkExecuteMode::Movement
            || mode == WHSWorkExecuteMode::MovementByTemplate)
        {
            return this.validateTagItemAndDimensionsWithPass(catchWeightTag);
        }
        else if (mode == WHSWorkExecuteMode::Quarantine)
        {
            return this.validateQuarantine(catchWeightTag);
        }
        else if (mode == WHSWorkExecuteMode::WarehouseTransfer)
        {
            return this.validateWarehouseTransfer(catchWeightTag);
        }
        else if (mode == WHSWorkExecuteMode::LicensePlateReceiving
        ||       mode == WHSWorkExecuteMode::LicensePlateReceivingAndLocate)
        {
            return this.validateLicensePlateReceiving(catchWeightTag);
        }
        else if (this.catchWeightTagMustBeNewForMode()
            &&   catchWeightTag)
        {
            return this.fail(strFmt("@WAX:ErrorTagNumberCannotBeDuplicated", catchWeightTag.TagNumber));
        }
                
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightTagMustBeNewForMode</Name>
				<Source><![CDATA[
    private boolean catchWeightTagMustBeNewForMode()
    {
        return WHSWorkExecutionMode::newFromMode(mode).isInboundOrderReceiving()
            || mode == WHSWorkExecuteMode::AdjustmentIn
            || mode == WHSWorkExecuteMode::ReportAsFinished
            || mode == WHSWorkExecuteMode::ReportAsFinishedAndLocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryValidTagsAutoSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a query to retrieve all the catch weight tags that would be considered valid by this class.
    /// </summary>
    /// <param name = "_mode">The current form execution mode.</param>
    /// <param name = "_itemId">The item id to use for identifying the catch weight tags.</param>
    /// <param name = "_inventDim">The inventory dimensions to use for identifying the catch weight tags.</param>
    /// <returns>A new query object with <c>WHSCatchWeightTag</c> as the primary table that matches tags that are valid for outbound processing on the given work line and dimensions.</returns>
    /// <remarks>
    /// Only call this method for catch weight items that are tag tracked with a policy for tag dimension tracking of all storage dimensions; otherwise, this
    /// will throw an exception.
    /// </remarks>
    [Hookable(false)]
    internal static Query createQueryValidTagsAutoSelection(WHSWorkExecuteMode _mode, ItemId _itemId, InventDim _inventDim)
    {
        if (WHSInventTable::catchWeightTagDimensionTrackingMethod(_itemId) != WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            throw error(strFmt("@WAX:CatchWeightTagExactPickNotFullDimTrackError", _itemId));
        }

        Query query;

        switch (_mode)
        {
            case WHSWorkExecuteMode::AdjustmentOut:
            case WHSWorkExecuteMode::Movement:
            case WHSWorkExecuteMode::MovementByTemplate:
            case WHSWorkExecuteMode::Quarantine:
                query = WHSControlCatchWeightTag::createQueryValidTagsMatchInventDimId(_itemId, _inventDim);
                break;

            case WHSWorkExecuteMode::WarehouseTransfer:
                query = WHSControlCatchWeightTag::createQueryValidTagsMatchInventDimValues(_itemId, _inventDim);
                break;

            default:
                throw error("@WAX1238");
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the license plate receiving data.
    /// </summary>
    /// <param name = "_catchWeightTag">A <c>WHSCatchWeightTag</c> buffer to validate.</param>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    private boolean validateLicensePlateReceiving(WHSCatchWeightTag _catchWeightTag)
    {
        if (_catchWeightTag)
        {
            return this.fail(strFmt("@WAX:ErrorTagNumberCannotBeDuplicated", _catchWeightTag.TagNumber));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWarehouseTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the warehouse transfer data.
    /// </summary>
    /// <param name = "_catchWeightTag">A <c>WHSCatchWeightTag</c> buffer to validate.</param>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    private boolean validateWarehouseTransfer(WHSCatchWeightTag _catchWeightTag)
    {
        if (!_catchWeightTag)
        {
            return this.fail("@WAX:MobileDeviceControlValidationInvalidCatchWeightTag");
        }

        // Method should not be called for items that are not catch weight enabled.
        if (!PdsGlobal::pdsIsCWItem(pass.lookupStr(#ItemId)))
        {
            return this.fail(Error::wrongUseOfFunction(funcName()));
        }

        InventDimId validateInventDimId = WHSCatchWeightTag::inventDimWithTagSpecificDimensions(InventDim::find(pass.lookupStr(#FromInventDimId)), pass.lookupStr(#ItemId));
        InventDim inventDim = InventDim::find(validateInventDimId);

        InventDim tagInventDim = InventDim::find(_catchWeightTag.InventDimId);

        if (!WHSCatchWeightTagStatus::isActive(_catchWeightTag.TagNumber)
            || _catchWeightTag.ItemId != pass.lookupStr(#ItemId)
            || !InventDim::isInventDimEqual(tagInventDim, inventDim))
        {
            return this.fail(strFmt("@WAX:ErrorMessageTagAndInventJournalTrans", _catchWeightTag.TagNumber));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryValidTagsMatchInventDimValues</Name>
				<Source><![CDATA[
    private static Query createQueryValidTagsMatchInventDimValues(ItemId _itemId, InventDim _inventDim)
    {
        Query query = new Query();

        QueryBuildDataSource dsCatchWeightTag = query.addDataSource(tableNum(WHSCatchWeightTag));
        dsCatchWeightTag.addRange(fieldNum(WHSCatchWeightTag, ItemId)).value(SysQuery::value(_itemId));

        WHSCatchWeightTagStatus::addRangeIsActive(dsCatchWeightTag);

        QueryBuildDataSource dsInventDim = dsCatchWeightTag.addDataSource(tableNum(InventDim));
        dsInventDim.joinMode(JoinMode::ExistsJoin);
        dsInventDim.addLink(fieldNum(WHSCatchWeightTag, InventDimId), fieldNum(InventDim, InventDimId));
        InventDim::queryAddRangeCriteriaForSelectedDims(dsInventDim, _inventDim, _inventDim.toDimParm());

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuarantine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the quarantine order data.
    /// </summary>
    /// <param name = "_catchWeightTag">A <c>WHSCatchWeightTag</c> buffer to validate.</param>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    private boolean validateQuarantine(WHSCatchWeightTag _catchWeightTag)
    {
        if (!_catchWeightTag)
        {
            return this.fail("@WAX:MobileDeviceControlValidationInvalidCatchWeightTag");
        }

        ItemId itemId = pass.lookup(#ItemId);

        // Method should not be called for items that are not catch weight enabled.
        if (!PdsGlobal::pdsIsCWItem(itemId))
        {
            return this.fail(Error::wrongUseOfFunction(funcName()));
        }
        
        InventDimId inventDimIdFrom = this.quarantineInventDimIdFrom();
        InventDim validationInventDim = InventDim::find(inventDimIdFrom);

        // Extract the tag specific dimensions fields.
        InventDimId inventDimId = WHSCatchWeightTag::inventDimWithTagSpecificDimensions(validationInventDim, itemId);

        if (!WHSCatchWeightTagStatus::isActive(_catchWeightTag.TagNumber)
            || _catchWeightTag.ItemId      != itemId
            || _catchWeightTag.InventDimId != inventDimId)
        {
            return this.fail(strFmt("@WAX:ErrorMessageTagAndQuarantineMismatch", _catchWeightTag.TagNumber));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quarantineInventDimIdFrom</Name>
				<Source><![CDATA[
    private InventDimId quarantineInventDimIdFrom()
    {
        // The format of the selected key is %1#%2 (ItemRecId#InventDimId). 
        str selectedKey = pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::QuarantineProcessSelectedKey);

        if (selectedKey)
        {
            int indexOfSeparator = strFind(selectedKey, '#', 0, strLen(selectedKey));
            return subStr(selectedKey, indexOfSeparator + 1, strLen(selectedKey));
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTagItemAndDimensionsWithPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the tag against the item and dimensions in the pass state.
    /// </summary>
    /// <param name = "_catchWeightTag">A <c>WHSCatchWeightTag</c> buffer to validate.</param>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    private boolean validateTagItemAndDimensionsWithPass(WHSCatchWeightTag _catchWeightTag)
    {
        if (!_catchWeightTag)
        {
            return this.fail("@WAX:MobileDeviceControlValidationInvalidCatchWeightTag");
        }

        ItemId itemId = pass.lookup(#ItemId);

        // Method should not be called for items that are not catch weight enabled.
        if (!PdsGlobal::pdsIsCWItem(itemId))
        {
            return this.fail(Error::wrongUseOfFunction(funcName()));
        }

        InventDim validationInventDim = pass.createInventDimFromPass();

        if (mode == WHSWorkExecuteMode::MovementByTemplate)
        {
            validationInventDim.InventStatusId = pass.lookup(#FromInventoryStatus);
            validationInventDim = InventDim::findOrCreate(validationInventDim);
        }

        InventDimId inventDimId = WHSCatchWeightTag::inventDimWithTagSpecificDimensions(validationInventDim, itemId);

        if (!WHSCatchWeightTagStatus::isActive(_catchWeightTag.TagNumber)
            || _catchWeightTag.ItemId       != itemId
            || _catchWeightTag.InventDimId  != inventDimId)
        {
            // Adjustment out original message with this error
            if (mode == WHSWorkExecuteMode::AdjustmentOut)
            {
                return this.fail(strFmt("@WAX:ErrorMessageTagAndAdjustOutMismatch", _catchWeightTag.TagNumber));
            }
            
            if (_catchWeightTag.ItemId != itemId || _catchWeightTag.InventDimId != inventDimId)
            {
                return this.fail(strFmt("@WAX:ErrorCatchWeightTagItemOrDimensionMismatch", _catchWeightTag.TagNumber));
            }
            else
            {
                return this.fail(strFmt("@WAX:MobileDeviceControlValidationCatchWeightTagInvalidStatus", _catchWeightTag.TagNumber));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryValidTagsMatchInventDimId</Name>
				<Source><![CDATA[
    private static Query createQueryValidTagsMatchInventDimId(ItemId _itemId, InventDim _inventDim)
    {
        Query query = new Query();

        QueryBuildDataSource dsCatchWeightTag = query.addDataSource(tableNum(WHSCatchWeightTag));
        dsCatchWeightTag.addRange(fieldNum(WHSCatchWeightTag, ItemId)).value(SysQuery::value(_itemId));
        dsCatchWeightTag.addRange(fieldNum(WHSCatchWeightTag, InventDimId)).value(SysQuery::value(_inventDim.InventDimId));

        WHSCatchWeightTagStatus::addRangeIsActive(dsCatchWeightTag);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReturnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the return order line.
    /// </summary>
    /// <param name = "_catchWeightTag">A <c>WHSCatchWeightTag</c> buffer to validate.</param>
    /// <returns>true if the validation succeeds; otherwise, false.</returns>
    private boolean validateReturnLine(WHSCatchWeightTag _catchWeightTag)
    {
        if (!_catchWeightTag)
        {
            return this.fail("@WAX:MobileDeviceControlValidationInvalidCatchWeightTag");
        }

        SalesLine returnLine = controlData.findBestMatchReturnLine();

        if (!returnLine)
        {
            return this.fail("@WAX:ErrorMessageInvalidReturnLine");
        }

        // Method should not be called for items that are not catch weight enabled.
        if (!PdsGlobal::pdsIsCWItem(returnLine.ItemId))
        {
            return this.fail(Error::wrongUseOfFunction(funcName()));
        }

        InventDim returnLineInventDim = InventDim::find(returnLine.InventDimId);

        if (pass.exists(#BatchId))
        {
            returnLineInventDim.inventBatchId = pass.lookupStr(#BatchId);
            returnLineInventDim = InventDim::findOrCreate(returnLineInventDim);
        }

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            if (pass.exists(#SerialId))
            {
                returnLineInventDim.inventSerialId = pass.lookupStr(#SerialId);
                returnLineInventDim = InventDim::findOrCreate(returnLineInventDim);
            }
        }

        InventDim tagInventDim = InventDim::find(_catchWeightTag.InventDimId);

        // Storage dimensions are not important to validate on return as the product may have been shipped from a different location than the return
        returnLineInventDim.clearStorageDimensions();
        tagInventDim.clearStorageDimensions();

        if (!WHSCatchWeightTagStatus::isShipped(_catchWeightTag.TagNumber)
            || _catchWeightTag.ItemId != returnLine.ItemId
            || !InventDim::isInventDimEqual(tagInventDim, returnLineInventDim))
        {
            return this.fail(strFmt("@WAX:ErrorMessageTagAndReturnLineMismatch", _catchWeightTag.TagNumber));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    protected boolean defaultValueToBlank()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>