<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCreateRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalCreateRoute extends ProdJournalCreate
{
    ProdJournalRoute                prodJournalRoute;

    RouteAutoConsump                routeAutoConsump;
    NoYes                           startUpRoute;
    OprNum                          oprNumFrom;
    OprNum                          oprNumTo;
    InventQty                       qtyCalc;
    ProdReportedError               qtyErrorLastOperation;
    boolean                         qtyErrorLastOperationSet;
    boolean                         reversed;
    ProdErrorCause                  errorCause;
    ProdReportedHours               hours;
    boolean                         recalculateHours = true;
    boolean                         onlyCreateLinesForOnePriority;
    RouteOprPriority                oprPriority;

    PdsCWInventQty                  pdsCWQtyCalc;
    PdsCWBatchErr                   pdsCWQtyErrorLastOperation;

    ProdJournalRouteProj            prodJournalRouteProjHour;
    ProdJournalRouteProj            prodJournalRouteProjQuantity;
    ProdJournalRouteCreatedFromRaF  prodJournalRouteCreatedFromRaF;

    #DEFINE.CurrentVersion(6)
    #LOCALMACRO.CurrentList
        RouteAutoConsump,
        startUpRoute,
        oprNumFrom,
        oprNumTo,
        qtyCalc,
        qtyErrorLastOperation,
        reversed,
        errorCause,
        qtyErrorLastOperationSet,
        recalculateHours,
        hours,
        onlyCreateLinesForOnePriority,
        oprPriority
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreateLinesProdRoute</Name>
				<Source><![CDATA[
    boolean checkCreateLinesProdRoute()
    {
        boolean         ret = true;
        ProdRoute       prodRoute;

        if (ProdTable::find(prodId).isProjMethodConsumed())
        {
            while select prodRoute
                index NumOprNumIdx
                where prodRoute.ProdId  == prodId       &&
                      prodRoute.OprNum  >= oprNumFrom   &&
                     (prodRoute.OprNum  <= oprNumTo     || ! oprNumTo) &&
                     (reversed || !onlyCreateLinesForOnePriority || prodRoute.OprPriority == oprPriority) &&
                   !  prodRoute.OprFinished
            {
                ret = ret && prodRoute.validateProject();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    protected void createLines()
    {
        this.initProdJournalTableData(ProdJournalType::RouteCard);

        prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalRoute,prodJournalTableData);
        if (prodJournalTable.NumOfLines)
        {
            prodJournalTransData.parmLastLineNum(ProdJournalRoute::lastLineNum(journalId));
        }

        if (reversed)
        {
            this.createLinesProdRouteTrans();
        }
        else
        {
            this.createLinesProdRoute();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineLastOperationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the last operation number in the production route.
    /// </summary>
    /// <returns>The last operation number.</returns>
    protected OprNum defineLastOperationNumber()
    {
        return oprNumTo ? ProdRoute::highestOprNum(prodId,oprNumTo) : ProdRoute::lastOprNum(prodId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateLinesFromProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether journal lines must be created from a production route.
    /// </summary>
    /// <param name = "_prodRoute">A production route.</param>
    /// <returns>true if journal lines must be created from a production route; otherwise, false.</returns>
    protected boolean mustCreateLinesFromProdRoute(ProdRoute _prodRoute)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates journal lines from the production route.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The project time journal could not be validated.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The project quantity journal could not be validated.
    /// </exception>
    protected void createLinesProdRoute()
    {
        ProdRoute               prodRoute;

        ProdJobTypeSearch       prodJobTypeSearch = new ProdJobTypeSearch();

        BOMCalcData             bomCalcData  = BOMCalcData::newProdTable(qtyCalc,ProdTable::find(prodId)
                                                                         , pdsCWQtyCalc
                                                                         );

        ProdTable               prodTable = ProdTable::find(prodId);

        OprNum                  lastOprNum   = this.defineLastOperationNumber();

        setPrefix("@SYS28537");

        while select forupdate prodRoute
            index NumOprNumIdx
            where prodRoute.ProdId  == prodId       &&
                  prodRoute.OprNum  >= oprNumFrom   &&
                  (!onlyCreateLinesForOnePriority || prodRoute.OprPriority == oprPriority) &&
                 (prodRoute.OprNum  <= oprNumTo     || ! oprNumTo)
        {
            if (!this.mustCreateLinesFromProdRoute(prodRoute))
            {
                continue;
            }

            boolean lineCreated = false;
            boolean prodJournalCreateRouteRespectProdRouteCalcFlightIsEnabled = ProdJournalCreateRouteRespectProdRouteCalcFlight::instance().isEnabled();

            if (prodJobTypeSearch.first())
            do
            {
                if (prodJobTypeSearch.routeJobType() == RouteJobType::Setup || prodJobTypeSearch.routeJobType() == RouteJobType::Process)
                {
                    ProdJobType prodJobType = prodJobTypeSearch.prodJobType();

                    if (prodJobType.activation(prodRoute.routeGroup()))
                    {
                        ProdRouteCalc prodRouteCalc = ProdRouteCalc::newBOMCalcData(bomCalcData,prodRoute,prodJobType,routeAutoConsump,! prodRoute.ConstantReleased);
                        ProdReportedHours hoursToReport = recalculateHours ? prodRouteCalc.hours() : hours;

                        if (prodRouteCalc.qtyGood() || hoursToReport || endUpdate
                            || (prodTable.ProdType == ProdType::Process
                                && prodTable.inventTable().PmfProductType
                                    == PmfProductType::MainItem)
                            )
                        {
                            prodJournalTableData.initJournalId();

                            this.initTransFromProdRoute(prodJournalRoute,prodRoute,prodJobType);

                            boolean isAutoCalRouteDependent = prodJournalCreateRouteRespectProdRouteCalcFlightIsEnabled
                                && routeAutoConsump == RouteAutoConsump::RouteDependent
                                && (!prodRoute.routeGroup().AutoProcessTime || !prodRoute.routeGroup().AutoQty);

                            // If it is the last operation in the selected range then the
                            // good and error quantity should be set directly from what the user has defined
                            if (prodJobType.routeJobType() == RouteJobType::Process &&
                                prodRoute.OprNum           == lastOprNum                &&
                                prodRoute.OprPriority      == RouteOprPriority::Primary &&
                                qtyErrorLastOperationSet                                &&
                                (prodRouteCalc.qtyGood() || hoursToReport)              &&
                                !isAutoCalRouteDependent)
                            {
                                prodRouteCalc.setProdJournalRoute(prodJournalRoute,
                                                                  hoursToReport,
                                                                  qtyCalc - qtyErrorLastOperation,
                                                                  qtyErrorLastOperation
                                                                  ,pdsCWQtyCalc - pdsCWQtyErrorLastOperation
                                                                  ,pdsCWQtyErrorLastOperation
                                                                  );
                                //Also set the error cause
                                prodJournalRoute.ErrorCause  = errorCause;
                            }
                            else
                            {                                
                                prodRouteCalc.setProdJournalRoute(prodJournalRoute, hoursToReport);
                            }

                            prodJournalRoute.ExecutedPct = prodJournalRoute.proposalRouteExecutedPct(prodRoute);

                            //automatic report generation check
                            if (prodJournalTable.AutoReportFinished && !this.parmProdJournalRouteCreatedFromRaF())
                            {
                                if  (ProdRoute::find(prodJournalRoute.ProdId,
                                         prodJournalRoute.OprNum,RouteOprPriority::Primary).OprNumNext == 0)
                                {
                                    prodJournalRoute.ProdReportFinished = NoYes::Yes;
                                    prodJournalRoute.ProdInventDimId    = ProdTable::find(prodId).InventDimId;
                                }
                            }

                            if (prodJournalTable.RouteAutoPickList)
                            {
                                if (ProdBOM::findOprNum(prodJournalRoute.ProdId,prodJournalRoute.OprNum).RecId)
                                {
                                    prodJournalRoute.ProdPickList = NoYes::Yes;
                                }
                            }

                            prodJournalTransData.create();

                            if (prodJournalRoute.isProjMethodConsumed())
                            {
                                this.initProjTransFromProdJournalRoute(ProdRouteTransType::Time,prodJournalRouteProjHour,prodJournalRoute,prodJobType);
                                if (ProjJournalTransMapForm::construct(prodJournalRouteProjHour, prodJournalRoute).validateWritePost())
                                    prodJournalRouteProjHour.insert();
                                else
                                    throw error("@SYS21628");

                                this.initProjTransFromProdJournalRoute(ProdRouteTransType::Qty,prodJournalRouteProjQuantity,prodJournalRoute,prodJobType);
                                if (ProjJournalTransMapForm::construct(prodJournalRouteProjQuantity, prodJournalRoute).validateWritePost())
                                    prodJournalRouteProjQuantity.insert();
                                else
                                    throw error("@SYS21628");
                            }

                            lineCreated = true;
                        }
                    }
                }
            } while (prodJobTypeSearch.next());

            if ((lineCreated && ! prodRoute.ConstantReleased) || (startUpRoute && !prodRoute.OprStartedUp))
            {
                NoYes origOprStartedUp = prodRoute.orig().OprStartedUp;
                prodRoute.reread();

                if (lineCreated && ! prodRoute.ConstantReleased)
                {
                    prodRoute.ConstantReleased = NoYes::Yes;
                }

                if (startUpRoute && !prodRoute.OprStartedUp)
                {
                    prodRoute.OprStartedUp = NoYes::Yes;

                    InventQualityManagementCreateHandler::createRouteOprReportFinishedBeforeSingle(prodRoute, origOprStartedUp);
                }

                prodRoute.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesProdRouteTrans</Name>
				<Source><![CDATA[
    protected void createLinesProdRouteTrans()
    {
        ProdRouteTrans          prodRouteTrans;

        setPrefix("@SYS69450");

        while select reverse forupdate prodRouteTrans
            index hint ProdNumOprNumIdx
            where prodRouteTrans.TransRefId     == prodId       &&
                  prodRouteTrans.TransRefType   == ProdTransRefType::Production &&
                  prodRouteTrans.OprNum         >= oprNumFrom   &&
                 (prodRouteTrans.OprNum         <= oprNumTo     || ! oprNumTo) &&
                  prodRouteTrans.Cancelled      == NoYes::No
        {
            this.reverseProdRouteTrans(prodRouteTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjTransFromProdJournalRoute</Name>
				<Source><![CDATA[
    protected void initProjTransFromProdJournalRoute(
        ProdRouteTransType       _type,
        ProdJournalRouteProj    _prodJournalRouteProj,
        ProdJournalRoute        _prodJournalRoute,
        ProdJobType             _prodJobType
    )
    {
        _prodJournalRouteProj.clear();
        _prodJournalRouteProj = _prodJobType.initProdJournalRouteProj(_type,_prodJournalRoute,_prodJournalRouteProj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjTransFromProdRouteTrans</Name>
				<Source><![CDATA[
    protected void initProjTransFromProdRouteTrans(
        ProdRouteTransType      _type,
        ProdJournalRouteProj    _prodJournalRouteProj,
        ProdJournalRoute        _prodJournalRoute,
        ProdRouteTrans          _prodRouteTrans)
    {
        _prodJournalRouteProj.clear();
        _prodJournalRouteProj.JournalId = _prodJournalRoute.JournalId;
        _prodJournalRouteProj.LineNum = _prodJournalRoute.LineNum;
        _prodJournalRouteProj.TransType = _type;

        ProjJournalTransMapForm::construct(_prodJournalRouteProj, _prodJournalRoute).initFromProdRouteTrans(_prodRouteTrans);

        _prodJournalRouteProj.ProjTransDate = _prodJournalRoute.TransDate;
        ProjJournalTransMapForm::construct(_prodJournalRouteProj, _prodJournalRoute).setPeriodDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromProdRoute</Name>
				<Source><![CDATA[
    protected void initTransFromProdRoute(
        ProdJournalRoute    _prodJournalRoute,
        ProdRoute           _prodRoute,
        ProdJobType         _prodJobType
        )
    {
        _prodJournalRoute.clear();

        _prodJournalRoute.TransDate   = transDate;
        _prodJournalRoute.OprFinished = endUpdate;
        _prodJournalRoute.JobFinished = endUpdate;

        _prodJournalRoute = _prodJobType.initProdJournalRoute(_prodRoute, _prodJournalRoute,
            ProdRouteJob::findJobType(_prodRoute.ProdId, _prodRoute.OprNum, _prodRoute.OprPriority, _prodJobType.routeJobType()));

        prodJournalTransData.initFromJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromProdRouteTrans</Name>
				<Source><![CDATA[
    protected void initTransFromProdRouteTrans(
        ProdJournalRoute    _prodJournalRoute,
        ProdRouteTrans      _prodRouteTrans
        )
    {
        _prodJournalRoute.clear();

        _prodJournalRoute.initFromProdRouteTrans(_prodRouteTrans);

        prodJournalTransData.initFromJournalTable();

        _prodJournalRoute.TransDate   = transDate;
        _prodJournalRoute.OprFinished = endUpdate;
        _prodJournalRoute.JobFinished = endUpdate;
        // <GEERU>
        if (countryRegion_RU)
        {
            _prodJournalRoute.StornoPhysical_RU = stornoPhysical;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorCause</Name>
				<Source><![CDATA[
    ProdErrorCause parmErrorCause(ProdErrorCause _errorCause = errorCause)
    {
        errorCause = _errorCause;
        return errorCause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalculateHours</Name>
				<Source><![CDATA[
    public boolean parmRecalculateHours(boolean _recalculateHours = recalculateHours)
    {
        recalculateHours = _recalculateHours;
        return recalculateHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHours</Name>
				<Source><![CDATA[
    public ProdReportedHours parmHours(ProdReportedHours _hours = hours)
    {
        hours = _hours;
        return hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOprNumFrom</Name>
				<Source><![CDATA[
    OprNum parmOprNumFrom(OprNum _oprNumFrom = oprNumFrom)
    {
        oprNumFrom = _oprNumFrom;
        return oprNumFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOprNumTo</Name>
				<Source><![CDATA[
    OprNum parmOprNumTo(OprNum _oprNumTo = oprNumTo)
    {
        oprNumTo = _oprNumTo;
        return oprNumTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWQtyCalc</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmPdsCWQtyCalc(PdsCWInventQty _pdsCWQtyCalc = pdsCWQtyCalc)
    {
        pdsCWQtyCalc = _pdsCWQtyCalc;
        return pdsCWQtyCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWQtyErrorLastOperation</Name>
				<Source><![CDATA[
    public PdsCWBatchErr parmPdsCWQtyErrorLastOperation(PdsCWBatchErr _pdsCWQtyError = pdsCWQtyErrorLastOperation)
    {
        if (!prmisdefault(_pdsCWQtyError))
        {
            pdsCWQtyErrorLastOperation  = _pdsCWQtyError;
            qtyErrorLastOperationSet    = true;
        }
        return pdsCWQtyErrorLastOperation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyCalc</Name>
				<Source><![CDATA[
    InventQty parmQtyCalc(InventQty _qtyCalc = qtyCalc)
    {
        qtyCalc = _qtyCalc;
        return qtyCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyErrorLastOperation</Name>
				<Source><![CDATA[
    ProdReportedError parmQtyErrorLastOperation(ProdReportedError _qtyError = qtyErrorLastOperation)
    {
        if (!prmisDefault(_qtyError))
        {
            qtyErrorLastOperation       = _qtyError;
            qtyErrorLastOperationSet    = true;
        }
        return qtyErrorLastOperation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversed</Name>
				<Source><![CDATA[
    boolean parmReversed(boolean _reversed = reversed)
    {
        reversed = _reversed;
        return reversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteAutoConsump</Name>
				<Source><![CDATA[
    RouteAutoConsump parmRouteAutoConsump(RouteAutoConsump _routeAutoConsump = routeAutoConsump)
    {
        routeAutoConsump = _routeAutoConsump;
        return routeAutoConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartUpRoute</Name>
				<Source><![CDATA[
    NoYes parmStartUpRoute(NoYes _startUpRoute = startUpRoute)
    {
        startUpRoute = _startUpRoute;
        return startUpRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteOprPriority</Name>
				<Source><![CDATA[
    public RouteOprPriority parmRouteOprPriority(RouteOprPriority _oprPriority = oprPriority)
    {
        oprPriority = _oprPriority;
        return oprPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyCreateLinesForOnePriority</Name>
				<Source><![CDATA[
    public boolean parmOnlyCreateLinesForOnePriority(boolean _onlyCreateLinesForOnePriority = onlyCreateLinesForOnePriority)
    {
        onlyCreateLinesForOnePriority = _onlyCreateLinesForOnePriority;
        return onlyCreateLinesForOnePriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projForecastReturn</Name>
				<Source><![CDATA[
    void projForecastReturn(ProdRouteTrans _prodRouteTrans, ProdJournalRouteProj _prodJournalRouteProjHour, ProdJournalRouteProj _prodJournalRouteProjQuantity)
    {
        ProjForecastReduce  projForecastReduce;
        Qty                 qty;
        ProjTransIdBase     projTransId;
        if (_prodRouteTrans.TransType==ProdRouteTransType::Time)
        {
            qty=_prodRouteTrans.Hours;
            projTransId=_prodJournalRouteProjHour.ProjTransId;
        }
        else
        {
            qty=_prodRouteTrans.QtyGood +  _prodRouteTrans.QtyError; //need to check does the post include error qty
            projTransId=_prodJournalRouteProjQuantity.ProjTransId;
        }

        if (_prodRouteTrans.Amount >0)
        {
            // return the forecast to the original route journal.
            //If the original journal's forecast reduction is booked by creating committed cost, the return won't really happen
            //Return will be successful if the CC was disabled and forecast reduced when posting the original route journal

            // Two step return: try to using routeJournal.projTransId to return
            if (ProjForecastReductionHistory::existProjTransId(_prodRouteTrans.ProjTransId))
            {
                projForecastReduce=ProjForecastReduce::newForecastReturn(_prodRouteTrans.ProjTransId,
                                                                         ProjTransType::Hour,
                                                                         -qty,
                                                                         -_prodRouteTrans.Amount);

                projForecastReduce.run();
            }
            else //try to using route.projTransId to return
            {
                projForecastReduce=ProjForecastReduce::newForecastReturn(ProjEmplTrans::find(_prodRouteTrans.ProjTransId).TransIdRef,
                                                                         ProjTransType::Hour,
                                                                         -qty,
                                                                         -_prodRouteTrans.Amount);

                projForecastReduce.run();
            }
        }
        else
        {
            // If the orginal route journal qty is negative, it would virtually increase the forecast when creating new journal;
            // And then virtually reduce the forecast when posting reversal route journal.
            projForecastReduce=ProjForecastReduce::newVirtual( projTransId,
                                                               ProjTransType::Hour);
            projForecastReduce.returnForecast(-qty, -_prodRouteTrans.Amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(ProdRouting)))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version      = conPeek(packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = packedClass;
                super(base);
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        if (reversed)
        {
            ok = ok && ProdJournalRoute::checkNotMissingPostingRoute(prodId);
            ok = ok && ProdJournalRoute::checkNotMissingPostingJob(prodId);
        }

        ok = ok && this.checkCreateLinesProdRoute();

        return ok && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdJournalCreateRoute construct()
    {
        return new ProdJournalCreateRoute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParm</Name>
				<Source><![CDATA[
    static ProdJournalCreateRoute newParm(ProdId          _prodId,
                                          TransDate              _postDate,
                                          InventQty              _qtyCalc,
                                          ProdJournalNameId      _journalNameId,
                                          ProdJournalId          _journalId = '',
                                          RouteAutoConsump       _routeAutoConsump = RouteAutoConsump::RouteDependent,
                                          NoYes                  _endUpdate = NoYes::No,
                                          OprNum                 _oprNumFrom = 0,
                                          OprNum                 _oprNumTo = 0,
                                          NoYes                  _startUpRoute = NoYes::No,
                                          boolean                _reversed = false,
                                          PdsCWInventQty         _pdsCwQtyCalc = 0,
                                          boolean                _recalculateHours = true,
                                          ProdReportedHours      _hours = 0,
                                          boolean                _onlyCreateLinesForOnePriority = false,
                                          RouteOprPriority       _oprPriority = RouteOprPriority::Primary)
    {
        ProdJournalCreateRoute  prodJournalCreate = ProdJournalCreateRoute::construct();
        prodJournalCreate.getLast();

        prodJournalCreate.parmProdId(_prodId);
        prodJournalCreate.parmTransDate(_postDate);
        prodJournalCreate.parmQtyCalc(_qtyCalc);
        prodJournalCreate.parmPdsCWQtyCalc(_pdsCWQtyCalc);
        prodJournalCreate.parmJournalNameId(_journalNameId);

        prodJournalCreate.parmJournalId(_journalId);
        prodJournalCreate.parmRouteAutoConsump(_routeAutoConsump);
        prodJournalCreate.parmEndUpdate(_endUpdate);

        prodJournalCreate.parmOprNumFrom(_oprNumFrom);
        prodJournalCreate.parmOprNumTo(_oprNumTo);

        prodJournalCreate.parmStartUpRoute(_startUpRoute);
        prodJournalCreate.parmReversed(_reversed);

        prodJournalCreate.parmRecalculateHours(_recalculateHours);
		prodJournalCreate.parmHours(_hours);

        prodJournalCreate.parmOnlyCreateLinesForOnePriority(_onlyCreateLinesForOnePriority);
        prodJournalCreate.parmRouteOprPriority(_oprPriority);

        prodJournalCreate.init();

        return prodJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReportFinished</Name>
				<Source><![CDATA[
    public static ProdJournalCreateRoute newReportFinished(ProdParmReportFinished _prodParmReportFinished)
    {
        ProdJournalCreateRoute  prodJournalCreate = ProdJournalCreateRoute::construct();
        ProdReportedError       qtyError          = _prodParmReportFinished.QtyError ? _prodParmReportFinished.QtyError : ProdJournalCreateRoute::proposalQtyError(_prodParmReportFinished);

        prodJournalCreate.getLast();

        prodJournalCreate.parmProdId(_prodParmReportFinished.ProdId);
        prodJournalCreate.parmTransDate(_prodParmReportFinished.TransDate);
        prodJournalCreate.parmEndUpdate(_prodParmReportFinished.EndRouteCard);
        prodJournalCreate.parmJournalId('');
        prodJournalCreate.parmJournalNameId(_prodParmReportFinished.RouteJournalNameId);

        prodJournalCreate.parmRouteAutoConsump(_prodParmReportFinished.RouteAutoConsump);
        prodJournalCreate.parmReversed(NoYes::No);
        prodJournalCreate.parmQtyCalc(_prodParmReportFinished.QtyGood + qtyError);
        prodJournalCreate.parmQtyErrorLastOperation(qtyError);
        prodJournalCreate.parmErrorCause(qtyError != 0 ? _prodParmReportFinished.ErrorCause : ProdErrorCause::None);

        prodJournalCreate.parmPdsCWQtyCalc(_prodParmReportFinished.PdsCWBatchGood + _prodParmReportFinished.PdsCWBatchErr);
        prodJournalCreate.parmPdsCWQtyErrorLastOperation(_prodParmReportFinished.PdsCWBatchErr);

        prodJournalCreate.parmOprNumFrom(_prodParmReportFinished.FromOprNum);
        prodJournalCreate.parmOprNumTo(_prodParmReportFinished.ToOprNum);
        prodJournalCreate.parmStartUpRoute(NoYes::No);
        prodJournalCreate.parmProdJournalRouteCreatedFromRaF(NoYes::Yes);

        prodJournalCreate.init();

        return prodJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStartUp</Name>
				<Source><![CDATA[
    static ProdJournalCreateRoute newStartUp(ProdParmStartUp _prodParmStartUp)
    {
        ProdJournalCreateRoute  prodJournalCreate = ProdJournalCreateRoute::construct();

        prodJournalCreate.getLast();

        prodJournalCreate.parmProdId(_prodParmStartUp.ProdId);
        prodJournalCreate.parmTransDate(_prodParmStartUp.PostDate);
        prodJournalCreate.parmEndUpdate(_prodParmStartUp.EndRouteCard);
        prodJournalCreate.parmJournalId('');
        prodJournalCreate.parmJournalNameId(_prodParmStartUp.RouteJournalNameId);

        prodJournalCreate.parmRouteAutoConsump(_prodParmStartUp.RouteAutoConsump);
        prodJournalCreate.parmStartUpRoute(NoYes::Yes);
        prodJournalCreate.parmReversed(NoYes::No);
        prodJournalCreate.parmQtyCalc(_prodParmStartUp.StartUpQty);
        prodJournalCreate.parmPdsCWQtyCalc(_prodParmStartUp.PdsCWStartUpQty);
        prodJournalCreate.parmOprNumFrom(_prodParmStartUp.FromOprNum);
        prodJournalCreate.parmOprNumTo(_prodParmStartUp.ToOprNum);

        prodJournalCreate.init();

        return prodJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStatusDecrease</Name>
				<Source><![CDATA[
    static ProdJournalCreateRoute newStatusDecrease(ProdId  _prodId)
    {
        ProdJournalCreateRoute  prodJournalCreate = ProdJournalCreateRoute::construct();

        prodJournalCreate.initFromProdId(_prodId);

        return prodJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalQtyError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a proposed error quantity.
    /// </summary>
    /// <param name="_prodParmReportFinished">
    /// A <c>ProdParmReportFinished</c> record that is used in the calculation.
    /// </param>
    /// <returns>
    /// A proposed error quantity.
    /// </returns>
    /// <remarks>
    /// The proposed quantity is the error quantity from the report finished journal minus the already
    /// route reported error quantity. The result cannot be negative.
    /// </remarks>
    public static ProdReportedError proposalQtyError(ProdParmReportFinished _prodParmReportFinished)
    {
        ProdReportedError   qtyError = _prodParmReportFinished.QtyError;

        if (_prodParmReportFinished.ReportFinishProd)
        {
            if (_prodParmReportFinished.FromOprNum && _prodParmReportFinished.FromOprNum == _prodParmReportFinished.ToOprNum)
            {
                qtyError = max(qtyError, 0);
            }
            else
            {
                qtyError = max(qtyError - ProdRouteTrans::qtyErrorProd(_prodParmReportFinished.ProdId),0);
            }
        }

        return qtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProdJournalCreateRoute</c> class instance using parameters.
    /// </summary>
    /// <param name="_prodId">
    /// The associated <c>ProdId</c> value.
    /// </param>
    protected void initFromProdId(ProdId _prodId)
    {
        this.getLast();
        this.parmProdId(_prodId);
        this.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        this.parmEndUpdate(NoYes::No);
        this.parmJournalId('');
        this.parmJournalNameId(ProdTable::find(_prodId).prodParametersDim().RouteJournalNameId);

        this.parmRouteAutoConsump(RouteAutoConsump::Always);
        this.parmReversed(NoYes::Yes);
        this.parmStartUpRoute(NoYes::No);
        this.parmQtyCalc(0);
        this.parmPdsCWQtyCalc(0);
        this.parmOprNumFrom(0);
        this.parmOprNumTo(0);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.parmStornoPhysical_RU(InventParameters::find().StornoPhysicalPosting_RU);
        }
        // </GEERU>

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseProdRouteTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the provided route transaction.
    /// </summary>
    /// <param name="_prodRouteTrans">
    /// The <c>ProdRouteTrans</c> record to be reversed.
    /// </param>
    protected void reverseProdRouteTrans(ProdRouteTrans _prodRouteTrans)
    {
        _prodRouteTrans.Cancelled = NoYes::Yes;
        _prodRouteTrans.update();

        if (_prodRouteTrans.QtyGood || _prodRouteTrans.QtyError || _prodRouteTrans.Hours)
        {
            prodJournalTableData.initJournalId();

            this.initTransFromProdRouteTrans(prodJournalRoute, _prodRouteTrans);

            prodJournalTransData.create();

            if (prodJournalRoute.isProjMethodConsumed())
            {
                this.initProjTransFromProdRouteTrans(ProdRouteTransType::Time,prodJournalRouteProjHour,prodJournalRoute, _prodRouteTrans);
                if (ProjJournalTransMapForm::construct(prodJournalRouteProjHour, prodJournalRoute).validateWritePost())
                {
                    prodJournalRouteProjHour.insert();
                }
                else
                {
                    throw error("@SYS21628");
                }

                this.initProjTransFromProdRouteTrans(ProdRouteTransType::Qty,prodJournalRouteProjQuantity,prodJournalRoute, _prodRouteTrans);
                if (ProjJournalTransMapForm::construct(prodJournalRouteProjQuantity, prodJournalRoute).validateWritePost())
                {
                    prodJournalRouteProjQuantity.insert();
                }
                else
                {
                    throw error("@SYS21628");
                }

                // Return the forecast to the original route journal
                this.projForecastReturn(_prodRouteTrans, prodJournalRouteProjHour,prodJournalRouteProjQuantity);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJournalRouteCreatedFromRaF</Name>
				<Source><![CDATA[
    public ProdJournalRouteCreatedFromRaF parmProdJournalRouteCreatedFromRaF(ProdJournalRouteCreatedFromRaF _prodJournalRouteCreatedFromRaF = prodJournalRouteCreatedFromRaF)
    {
        prodJournalRouteCreatedFromRaF = _prodJournalRouteCreatedFromRaF;

        return prodJournalRouteCreatedFromRaF;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>