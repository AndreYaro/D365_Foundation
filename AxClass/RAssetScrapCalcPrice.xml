<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetScrapCalcPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetScrapCalcPrice extends RunBaseBatch implements BatchRetryable
{
    RAssetStandardId            assetStandardId;
    RAssetScrap                 assetScrap;

    RAssetScrapCalcPriceMethod  method;
    DialogField                 dialogMethod;

    NoYes                       rounding;
    DialogField                 dialogRounding;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        method,
        rounding
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcIterate</Name>
				<Source><![CDATA[
    private void calcIterate()
    {
        RAssetScrap         assetScrapLocal, component;
        RAssetTrans         rAssetTrans;
        RAssetAmount        balanceItemCost, deprItemCost, balanceSum, balanceAmount, deprAmount, deprSum;
        RefRecId            transRefRecId;

        ttsbegin;
        while select forupdate assetScrapLocal
            where assetScrapLocal.AssetId    == assetScrap.AssetId &&
                  assetScrapLocal.Assembling == NoYes::No          &&
                  assetScrapLocal.ComponentRefRecId                &&
                  ! assetScrapLocal.TransDate
        {
            balanceSum      = 0;
            deprItemCost    = 0;
            deprSum         = 0;
            balanceItemCost = assetScrapLocal.InitialCostPrice;
            component       = RAssetScrap::find(assetScrapLocal.ComponentRefRecId);
            transRefRecId   = (select RecId from rAssetTrans
                                   where rAssetTrans.AccountNum      == assetScrap.AssetId             &&
                                         rAssetTrans.AssetStandardId == assetStandardId                &&
                                         rAssetTrans.PostingType     == RAssetPostingType::Componentry &&
                                         rAssetTrans.Voucher         == component.Voucher              &&
                                         rAssetTrans.TransDate       == component.TransDate).RecId;

            while select rAssetTrans
                order by TransDate asc, RecId asc
                where rAssetTrans.AccountNum      == assetScrap.AssetId                 &&
                      rAssetTrans.AssetStandardId == assetStandardId                    &&
                      (rAssetTrans.AssetTransType == RAssetTransType::Acquisition       ||
                       rAssetTrans.AssetTransType == RAssetTransType::AcquisitionAdj    ||
                       rAssetTrans.AssetTransType == RAssetTransType::Revaluation       ||
                       rAssetTrans.AssetTransType == RAssetTransType::Depreciation      ||
                       rAssetTrans.AssetTransType == RAssetTransType::DepreciationAdj)  &&
                      ! rAssetTrans.StornoRecId
            {
                if (rAssetTrans.PostingType == RAssetPostingType::None)
                {
                    if (rAssetTrans.AssetTransType == RAssetTransType::Acquisition    ||
                        rAssetTrans.AssetTransType == RAssetTransType::AcquisitionAdj ||
                        rAssetTrans.AssetTransType == RAssetTransType::Revaluation)
                    {
                        if (rAssetTrans.TransDate >= assetScrapLocal.AssemblingDate &&
                            rAssetTrans.RecId     >  transRefRecId                  &&
                            balanceSum)
                        {
                            balanceItemCost = balanceItemCost * (1 + rAssetTrans.AmountCur / balanceSum);
                        }
                    }
                    else
                    {
                        if (rAssetTrans.TransDate > assetScrapLocal.AssemblingDate &&
                            balanceSum)
                        {

                            deprItemCost += (balanceItemCost + deprItemCost) * rAssetTrans.AmountCur / (balanceSum + deprSum);
                        }
                        deprSum += rAssetTrans.AmountCur;
                    }
                }

                if (rAssetTrans.AssetTransType == RAssetTransType::Acquisition    ||
                    rAssetTrans.AssetTransType == RAssetTransType::AcquisitionAdj ||
                    rAssetTrans.AssetTransType == RAssetTransType::Revaluation)
                {
                    balanceSum += rAssetTrans.AmountCur;
                }
            }

            balanceAmount = assetScrapLocal.calcCostAmount(assetScrapLocal.Qty, balanceItemCost);
            deprAmount    = assetScrapLocal.calcCostAmount(assetScrapLocal.Qty, deprItemCost);

            assetScrapLocal.BalanceAmount      = RAssetTableMethod::roundAmount(assetStandardId, balanceAmount);
            assetScrapLocal.DepreciationAmount = RAssetTableMethod::roundAmount(assetStandardId, deprAmount);

            assetScrapLocal.CostAmount         = rounding ?
                                                 RAssetTableMethod::roundAmount(assetStandardId, balanceAmount + deprAmount) :
                                                 balanceAmount + deprAmount;
            assetScrapLocal.CostPrice          = assetScrapLocal.calcCostPrice(assetScrapLocal.Qty, assetScrapLocal.CostAmount);

            assetScrapLocal.update();
        }

        this.reCalcLastScrap();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProportionate</Name>
				<Source><![CDATA[
    private void calcProportionate()
    {
        RAssetAmount        balanceAcqValue, acqScrapValue, deprValue, balanceAmount, deprAmount;
        RAssetSumCalc       rAssetSumTransDate;
        RAssetScrap         rassetScrapLocal;

        rAssetSumTransDate = RAssetSumCalc_Trans::newAssetPeriod(assetScrap.AssetId,
                                                                 assetStandardId);

        balanceAcqValue = rAssetSumTransDate.acquisitionTotal();
        deprValue       = rAssetSumTransDate.depreciationTotal();
        acqScrapValue   = RAssetScrap::componentAcquisitionAmount(assetScrap.AssetId);

        ttsbegin;
        while select forupdate rassetScrapLocal
            where rassetScrapLocal.AssetId    == assetScrap.AssetId &&
                  rassetScrapLocal.Assembling == NoYes::No          &&
                  rassetScrapLocal.ComponentRefRecId                &&
                  ! rassetScrapLocal.TransDate
        {
            balanceAmount = acqScrapValue ?
                            rassetScrapLocal.calcCostAmount(rassetScrapLocal.Qty,
                                                            rassetScrapLocal.InitialCostPrice * balanceAcqValue / acqScrapValue) :
                            0;
            deprAmount    = acqScrapValue ?
                            rassetScrapLocal.calcCostAmount(rassetScrapLocal.Qty,
                                                            rassetScrapLocal.InitialCostPrice * deprValue / acqScrapValue) :
                            0;
            rassetScrapLocal.BalanceAmount      = RAssetTableMethod::roundAmount(assetStandardId, balanceAmount);
            rassetScrapLocal.DepreciationAmount = RAssetTableMethod::roundAmount(assetStandardId, deprAmount);
            rassetScrapLocal.CostAmount         = rounding ?
                                                  RAssetTableMethod::roundAmount(assetStandardId, balanceAmount + deprAmount) :
                                                  balanceAmount + deprAmount;
            rassetScrapLocal.CostPrice          = rassetScrapLocal.calcCostPrice(rassetScrapLocal.Qty, rassetScrapLocal.CostAmount);
            rassetScrapLocal.update();
        }

        this.reCalcLastScrap();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@SYS13118");
        dialogMethod   = dialog.addFieldValue(enumstr(RAssetScrapCalcPriceMethod), method);
        dialogRounding = dialog.addFieldValue(enumstr(NoYes), rounding, "@GLS116981", "@GLS116982");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        method   = dialogMethod.value();
        rounding = dialogRounding.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RAssetScrap _assetScrap)
    {
        assetScrap      = _assetScrap;
        assetStandardId = RAssetParameters::find().StandardIdDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetScrapCalcPriceMethod</Name>
				<Source><![CDATA[
    public RAssetScrapCalcPriceMethod parmRAssetScrapCalcPriceMethod(RAssetScrapCalcPriceMethod _method = method)
    {
        method = _method;
        return method;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRounding</Name>
				<Source><![CDATA[
    public NoYes parmRounding(NoYes _rounding = rounding)
    {
        rounding = _rounding;
        return rounding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean     ret;

        if (! assetScrap.RecId)
            return ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reCalcLastScrap</Name>
				<Source><![CDATA[
    private void reCalcLastScrap()
    {
        RAssetAmount        balanceAcqValue, deprValue, balanceAmount, deprAmount;
        RAssetScrap         rassetScrapLocal, rassetScrapSum;
        RAssetSumCalc       rAssetSumTransDate;

        rAssetSumTransDate = RAssetSumCalc_Trans::newAssetPeriod(assetScrap.AssetId,
                                                                 assetStandardId);

        balanceAcqValue = rAssetSumTransDate.acquisitionTotal();
        deprValue       = rAssetSumTransDate.depreciationTotal();

        if ((select sum(Qty) from rAssetScrap
                 where rAssetScrap.AssetId    == assetScrap.AssetId &&
                       rAssetScrap.Assembling == NoYes::Yes         &&
                       ! rAssetScrap.StornoRecId).Qty ==
            (select sum(Qty) from rAssetScrap
                 where rAssetScrap.AssetId    == assetScrap.AssetId &&
                       rAssetScrap.Assembling == NoYes::No          &&
                       ! rAssetScrap.StornoRecId).Qty)
        {
            select firstonly forupdate rassetScrapLocal
                order by CostAmount desc
                where rassetScrapLocal.AssetId    == assetScrap.AssetId &&
                      rassetScrapLocal.Assembling == NoYes::No          &&
                      rassetScrapLocal.ComponentRefRecId                &&
                      ! rassetScrapLocal.TransDate;

            if (rassetScrapLocal.RecId)
            {
                select sum(BalanceAmount), sum(DepreciationAmount), sum(CostAmount) from rassetScrapSum
                    where rassetScrapSum.AssetId    == assetScrap.AssetId     &&
                          rassetScrapSum.Assembling == NoYes::No              &&
                          rassetScrapSum.ComponentRefRecId                    &&
                          rassetScrapSum.RecId      != rassetScrapLocal.RecId &&
                          ! rassetScrapSum.TransDate;

                balanceAmount = balanceAcqValue - rassetScrapSum.BalanceAmount;
                deprAmount    = deprValue - rassetScrapSum.DepreciationAmount;
                rassetScrapLocal.BalanceAmount      = RAssetTableMethod::roundAmount(assetStandardId, balanceAmount);
                rassetScrapLocal.DepreciationAmount = RAssetTableMethod::roundAmount(assetStandardId, deprAmount);

                rassetScrapLocal.CostAmount         = balanceAcqValue + deprValue - rassetScrapSum.CostAmount;
                if (rounding)
                {
                    rassetScrapLocal.CostAmount     = RAssetTableMethod::roundAmount(assetStandardId, rassetScrapLocal.CostAmount);
                }
                rassetScrapLocal.CostPrice          = rassetScrapLocal.calcCostPrice(rassetScrapLocal.Qty, rassetScrapLocal.CostAmount);
                rassetScrapLocal.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        switch (method)
        {
            case RAssetScrapCalcPriceMethod::Proportionate:
                this.calcProportionate();
                break;
            case RAssetScrapCalcPriceMethod::Iterate:
                this.calcIterate();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version     = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetScrapCalcPrice assetScrapCalcPrice = new RAssetScrapCalcPrice();

        assetScrapCalcPrice.initValue(_args.record());

        if (assetScrapCalcPrice.prompt())
        {
            assetScrapCalcPrice.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>