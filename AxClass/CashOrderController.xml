<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashOrderController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CashOrderController</c> class is the controller class for the <c>CashOrder</c> report.
/// </summary>
public class CashOrderController extends SrsReportRunController implements BatchRetryable
{
    #ISOCountryRegionCodes
    RCashTrans cashTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the query to be used to fetch data for the report based on the country/region context.
    /// </summary>
    /// <returns>
    /// The query object.
    /// </returns>
    protected Query getQuery()
    {
        Query                                ret = this.getFirstQuery();
        LogisticsAddressCountryRegionISOCode isoCode = SysCountryRegionCode::countryInfo();

        switch (isoCode)
        {
            case #isoPL:
                ret.dataSourceTable(tableNum(RCashDestinationTrans)).enabled(true);
                break;
            case #isoCZ,
                 #isoHU:
                ret.dataSourceTable(tableNum(LedgerJournalTrans)).enabled(true);
                break;
            default:
                ret.dataSourceTable(tableNum(RCashDestinationTrans)).enabled(false);
                ret.dataSourceTable(tableNum(LedgerJournalTrans)).enabled(false);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash order report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    protected SRSCatalogItemName getReportName()
    {
        SRSCatalogItemName cashOrderReportName = this.getReportNameByContext();
        if (cashOrderReportName == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        return cashOrderReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportNameByContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash order report name based on the country or region context. Used from getReportName()
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    protected SRSCatalogItemName getReportNameByContext()
    {
        SRSCatalogItemName                   cashOrderReportName = '';
        LogisticsAddressCountryRegionISOCode isoCode = SysCountryRegionCode::countryInfo();

        switch (isoCode)
        {
            case #isoPL:
                cashOrderReportName = ssrsReportStr(CashOrder_PL, Report);
                break;
            case #isoLV:
                cashOrderReportName = ssrsReportStr(CashOrder_LV, Report);
                break;
            case #isoEE:
                cashOrderReportName = ssrsReportStr(CashOrder_EE, Report);
                break;
            case #isoCZ:
                cashOrderReportName = ssrsReportStr(CashOrder_CZ, Report);
                break;
            case #isoLT:
                cashOrderReportName = ssrsReportStr(CashOrder_LT, Report);
                break;
            case #isoHU:
                cashOrderReportName = ssrsReportStr(CashOrder_HU, Report);
                break;
        }
        return cashOrderReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the query ranges.
    /// </summary>
    protected void initQueryRanges()
    {
        QueryBuildDataSource queryDataSource;
        Query                query = this.getQuery();

        queryDataSource = query.dataSourceTable(tablenum(RCashTrans));

        if (cashTrans)
        {
            findOrCreateRange_W(queryDataSource, fieldNum(RCashTrans, AccountNum), cashTrans.AccountNum);
            findOrCreateRange_W(queryDataSource, fieldNum(RCashTrans, DocType), queryValue(cashTrans.DocType));
            findOrCreateRange_W(queryDataSource, fieldNum(RCashTrans, DocId), cashTrans.DocId);
            findOrCreateRange_W(queryDataSource, fieldNum(RCashTrans, TransDate), queryValue(cashTrans.TransDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of table RCashTrans.
    /// </summary>
    /// <param name="_cashTrans">
    /// The new value of table RCashTrans; optional.
    /// </param>
    /// <returns>
    ///  The current value of table RCashTrans.
    /// </returns>
    public RCashTrans parmCashTrans(RCashTrans _cashTrans = cashTrans)
    {
        cashTrans = _cashTrans;
        return cashTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>RCashTrans</c> table record from the input buffer.
    /// </summary>
    /// <remarks>
    /// The report can be called by using <c>RCashTrans</c> or <c>LedgerJournalTrans</c> table record as
    /// input buffer.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        LedgerJournalTrans            ledgerJournalTrans;
        LedgerJournalTrans_RCash      ledgerJournalTrans_RCash;
        RCashTrans                    tmpTrans;

        if (args)
        {
            switch (args.dataset())
            {
                case tableNum(RCashTrans) :
                    this.parmCashTrans(args.record());
                    break;

                case tableNum(LedgerJournalTrans):
                    ledgerJournalTrans = args.record();

                    select firstonly tmpTrans
                        where tmpTrans.Voucher   == ledgerJournalTrans.Voucher
                           && tmpTrans.TransDate == ledgerJournalTrans.TransDate
                    exists join ledgerJournalTrans_RCash
                        where ledgerJournalTrans_RCash.RefRecId  == ledgerJournalTrans.RecId
                           && ledgerJournalTrans_RCash.DocType   == tmpTrans.DocType
                           && ledgerJournalTrans_RCash.CashDocId == tmpTrans.DocId;

                    this.parmCashTrans(tmpTrans);
                    break;
            }
        }

        this.initQueryRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the specification of a dialog caption different than the default value based on country/region context.
    /// </summary>
    protected void setCaption()
    {
        LogisticsAddressCountryRegionISOCode isoCode = SysCountryRegionCode::countryInfo();

        switch (isoCode)
        {
            case #isoCZ:
                this.parmDialogCaption("@GLS107827");
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CashOrderController  controller = new CashOrderController();
        controller.parmReportName(controller.getReportName());
        controller.setCaption();
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>