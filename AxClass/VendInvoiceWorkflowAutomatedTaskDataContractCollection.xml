<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceWorkflowAutomatedTaskDataContractCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceWorkflowAutomatedTaskDataContractCollection</c> is a collection of <c>VendInvoiceWorkflowAutomatedTaskDataContract</c> objects.
/// </summary>
internal class VendInvoiceWorkflowAutomatedTaskDataContractCollection implements SysPackable
{
    List workflowDataContractList;
    const int CurrentVersion = 1;

}

]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        workflowDataContractList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceWorkflowAutomatedTaskDataContractCollection construct()
    {
        return new VendInvoiceWorkflowAutomatedTaskDataContractCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        List invoiceList = new List(Types::Container);
        VendInvoiceWorkflowAutomatedTaskDataContract workflowDataContract = new VendInvoiceWorkflowAutomatedTaskDataContract();
        ListEnumerator listEnumerator = workflowDataContractList.getEnumerator();

        while (listEnumerator.moveNext())
        {
            workflowDataContract = listEnumerator.current();
            invoiceList.addEnd(workflowDataContract.pack());
        }

        return [CurrentVersion, list2Con(invoiceList)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        if (conPeek(_packedClass, 1) != CurrentVersion)
        {
            return false;
        }

        VendInvoiceWorkflowAutomatedTaskDataContract workflowDataContract;
        workflowDataContractList = new List(Types::Class);
        container invoiceContainer = conPeek(_packedClass, 2);

        for (int invoice = 1; invoice <= conLen(invoiceContainer); invoice++)
        {
            workflowDataContract = new VendInvoiceWorkflowAutomatedTaskDataContract();
            workflowDataContract.unpack(conPeek(invoiceContainer, invoice));
            workflowDataContractList.addEnd(workflowDataContract);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowDataContractList</Name>
				<Source><![CDATA[
    internal List parmWorkflowDataContractList(List _workflowDataContractList = this.workflowDataContractList)
    {
        if (!prmIsDefault(_workflowDataContractList))
        {
            this.workflowDataContractList = _workflowDataContractList;
        }

        return this.workflowDataContractList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>VendInvoiceWorkflowAutomatedTaskDataContract</c> to the collection.
    /// </summary>
    /// <param name = "_invoiceWorkflowAutomatedTaskDataContract"></param>
    internal void add(VendInvoiceWorkflowAutomatedTaskDataContract _invoiceWorkflowAutomatedTaskDataContract)
    {
        workflowDataContractList.addEnd(_invoiceWorkflowAutomatedTaskDataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the count of invoices in the collection.
    /// </summary>
    /// <returns>Count of invoices in the collection.</returns>
    internal int getCount()
    {
        return this.workflowDataContractList.elements();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>