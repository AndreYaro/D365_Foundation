<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SIIGetInvoiceDescription</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SIIGetInvoiceDescription</c> generates description of the assets acquired.
/// </summary>
class SIIGetInvoiceDescription
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInvoiceDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formation of description of the assets acquired.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// Table <c>CustInvoiceJour</c> or <c>VendInvoiceJour</c> for this invoice.
    /// </param>
    /// <returns>
    /// Description of the assets acquired.
    /// </returns>
    public static str getInvoiceDescription(CustVendInvoiceJour _custVendInvoiceJour)
    {
        QueryRun queryRun;
        Set set = new Set(Types::String);

        switch (_custVendInvoiceJour.tableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoiceJourLoc = _custVendInvoiceJour;
                queryRun = new queryRun(custInvoiceJourLoc.queryCustInvoiceTrans());
                CustInvoiceTrans custInvoiceTransLoc;

                while (queryRun.next())
                {
                    custInvoiceTransLoc = queryRun.getNo(1);
                    set.add(custInvoiceTransLoc.itemName_RU());
                }

                set.remove('');

                if (set.empty())
                {
                    set = SIIGetInvoiceDescription::getDescriptionFromGeneralJournalAccountEntry(_custVendInvoiceJour, set);
                }
                break;
            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoiceJourLoc = _custVendInvoiceJour;
                ProjInvoiceItem projTransItemLoc;

                while select ItemId, InventDimId from projTransItemLoc
                    where projTransItemLoc.ProjInvoiceId == projInvoiceJourLoc.ProjInvoiceId
                        && projTransItemLoc.InvoiceDate == projInvoiceJourLoc.InvoiceDate
                {
                    set.add(projTransItemLoc.itemName());
                }

                set.remove('');

                if (set.empty())
                {
                    set = SIIGetInvoiceDescription::getDescriptionFromGeneralJournalAccountEntry(_custVendInvoiceJour, set);
                }
            
                if (set.empty() && projInvoiceJourLoc.Description)
                {
                    set.add(projInvoiceJourLoc.Description);
                }
                break;
            case tableNum(VendInvoiceJour):
                VendInvoiceJour vendInvoiceJourLoc = _custVendInvoiceJour;
                queryRun = new queryRun(vendInvoiceJourLoc.queryVendInvoiceTrans());
                VendInvoiceTrans vendInvoiceTransLoc;

                while (queryRun.next())
                {
                    vendInvoiceTransLoc = queryRun.getNo(1);
                    set.add(vendInvoiceTransLoc.itemName_RU());
                }

                set.remove('');

                if (set.empty())
                {
                    set = SIIGetInvoiceDescription::getDescriptionFromGeneralJournalAccountEntry(_custVendInvoiceJour, set);
                }

                if (set.empty() && vendInvoiceJourLoc.Description)
                {
                    set.add(vendInvoiceJourLoc.Description);
                }
                break;
        }

        if (set.empty())
        {
            set.add(_custVendInvoiceJour.InvoiceId);
            set.add(_custVendInvoiceJour.InvoiceAccount);
        }

        container con = conDel(set.pack(), 1, 3); // convert set to container

        return con2Str(con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescriptionFromGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    private static Set getDescriptionFromGeneralJournalAccountEntry(CustVendInvoiceJour _custVendInvoiceJour, Set _set)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;

        while select RecId from generalJournalEntry
            where generalJournalEntry.SubledgerVoucher == _custVendInvoiceJour.LedgerVoucher
                && generalJournalEntry.AccountingDate == _custVendInvoiceJour.InvoiceDate
                && generalJournalEntry.SubledgerVoucherDataAreaId == _custVendInvoiceJour.DataAreaId
        join Text from generalJournalAccountEntry
            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && generalJournalAccountEntry.Text
        {
            _set.add(generalJournalAccountEntry.Text);
        }

        return _set;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>