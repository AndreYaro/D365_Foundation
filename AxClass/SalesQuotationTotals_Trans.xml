<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTotals_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesQuotationTotals_Trans extends SalesQuotationTotals_Sales
{
    SalesQuotationLine   salesQuotationLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _source, SalesUpdate _specQty)
    {
        switch (_source.TableId)
        {
            case tableNum(SalesQuotationTable):
                salesQuotationTable      = _source;
                break;

            case tableNum(SalesQuotationParmTable):
                SalesQuotationParmTable salesQuotationParmTable = _source;
                salesQuotationTable = salesQuotationParmTable.salesQuotationTable();
                break;

            default:
                throw(error(strFmt("@SYS19306", funcName())));
        }

        super(salesQuotationTable, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the weight of a category-based order line.
    /// </summary>
    /// <returns>
    ///    The weight of the category-based order line.
    /// </returns>
    protected Weight categoryWeight()
    {
        return SalesQuotationLineForeignTradeCategory::findSalesQuotationLine(salesQuotationLine).UnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        return SalesCalcTax::construct(salesQuotationTable, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    protected DiscPct  discPercent()
    {
        return salesQuotationLine.salesQuotationTable().DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tableNum(SalesQuotationLine));

        recordSortedListLine.sortOrder      (fieldNum(SalesQuotationLine, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventDimId</c> field of the current order line.
    /// </summary>
    /// <returns>
    ///    The <c>InventDimId</c> field of the current order line.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return salesQuotationLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    protected TradeInventTransId inventTransId()
    {
        return salesQuotationLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    protected TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is category-based.
    /// </summary>
    /// <returns>
    ///    true if the order line is category-based; otherwise, false.
    /// </returns>
    protected boolean isCategoryBased()
    {
        return salesQuotationLine.isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is tracked in inventory.
    /// </summary>
    /// <returns>
    ///    true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    protected boolean isStocked()
    {
        return salesQuotationLine.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return salesQuotationLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected LineAmount  lineAmount(SalesQty   _salesQty,
                                     TransDate  _transDate)
    {
        if (!SalesQuotationTotals_Trans::canBeInvoiced(salesQuotationLine))
        {
            return 0;
        }
        else if (SalesQuotationTotalsTotalAmountRoundingFlight::instance().isEnabled())
        {
            return salesQuotationLine.calcLineAmountExclTax(_salesQty, _transDate, tax, trackUnroundedBalances);
        }
        else
        {
            return salesQuotationLine.calcLineAmountExclTax(_salesQty, _transDate, tax, false, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCostPrice</Name>
				<Source><![CDATA[
    protected CostPrice lineCostPrice()
    {
        return salesQuotationLine.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount lineDiscAmount(UnitQty     _unitQty,
                                        TransDate   _transDate)
    {
        DiscAmount  discAmount = 0;

        if (!SalesQuotationTotals_Trans::canBeInvoiced(salesQuotationLine))
        {
            return 0;
        }
        else if (this.shouldCalculateLineDiscountAmount())
        {
            discAmount += salesQuotationLine.calcLineDiscExclTax(_unitQty, _transDate, tax);
        }

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculateLineDiscountAmount</Name>
				<Source><![CDATA[
    protected boolean shouldCalculateLineDiscountAmount()
    {
        return salesQuotationLine.SalesPrice != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupLine</Name>
				<Source><![CDATA[
    protected Common markupLine()
    {
        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    protected Common orderLine_orderTable()
    {
        return salesQuotationLine.salesQuotationTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract parmContract()
    {
        return SalesQuotationTotalsTransContract::newFromSalesQuotationTable(salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity that remains in catch weight units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in catch weight units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not implemented in a derived class.
    /// </exception>
    [Hookable]    
    protected PdsCWInventQty pdsCWQtyRemain()
    {
        PdsCWInventQty  qtyRemain;

        switch (specQty)
        {
            case SalesUpdate::DeliverNow:
                if (salesQuotationLine.PdsCWDeliverNow * salesQuotationLine.PdsCWRemainInventPhysical < 0)
                {
                    qtyRemain = salesQuotationLine.PdsCWRemainInventPhysical;
                }
                else
                {
                    if (abs(salesQuotationLine.PdsCWDeliverNow) < abs(salesQuotationLine.PdsCWRemainInventPhysical))
                    {
                        qtyRemain = salesQuotationLine.PdsCWDeliverNow;
                    }
                    else
                    {
                        qtyRemain = salesQuotationLine.PdsCWRemainInventPhysical;
                    }
                }
                break;

            case SalesUpdate::All:
                qtyRemain = salesQuotationLine.PdsCWRemainInventPhysical;
                break;
        }

        return qtyRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight for sales quotation line.
    /// </summary>
    /// <returns>
    /// The value of the <c>PdsCWQty</c> value of the <c>SalesQuotationLine</c> record.
    /// </returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return salesQuotationLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty  qtyInvent()
    {
        return salesQuotationLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining quantity in inventory units.
    /// </summary>
    /// <returns>
    /// The remaining quantity in inventory units.
    /// </returns>
    [Hookable]
    protected InventQty qtyInventRemain()
    {
        InventQty           qtyUpdate;

        switch (specQty)
        {
            case SalesUpdate::DeliverNow:
                if (salesQuotationLine.InventDeliverNow * salesQuotationLine.RemainInventPhysical < 0)
                {
                    qtyUpdate = salesQuotationLine.RemainInventPhysical;
                }
                else
                {
                    if (abs(salesQuotationLine.InventDeliverNow) < abs(salesQuotationLine.RemainInventPhysical))
                    {
                        qtyUpdate = salesQuotationLine.InventDeliverNow;
                    }
                    else
                    {
                        qtyUpdate = salesQuotationLine.RemainInventPhysical;
                    }
                }
                break;

            case SalesUpdate::All:
                qtyUpdate = salesQuotationLine.RemainInventPhysical;
                break;
        }

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty qtyUnit()
    {
        return salesQuotationLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnitRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining quantity in order line units.
    /// </summary>
    /// <returns>
    /// The remaining quantity in order line units.
    /// </returns>
    [Hookable]
    protected UnitQty qtyUnitRemain()
    {
        SalesQty           qtyUpdate;

        switch (specQty)
        {
            case SalesUpdate::DeliverNow:
                if (salesQuotationLine.SalesDeliverNow * salesQuotationLine.RemainSalesPhysical < 0)
                {
                    qtyUpdate = salesQuotationLine.RemainSalesPhysical;
                }
                else
                {
                    if (abs(salesQuotationLine.SalesDeliverNow) < abs(salesQuotationLine.RemainSalesPhysical))
                    {
                        qtyUpdate = salesQuotationLine.SalesDeliverNow;
                    }
                    else
                    {
                        qtyUpdate = salesQuotationLine.RemainSalesPhysical;
                    }
                }
                break;

            case SalesUpdate::All:
                qtyUpdate = salesQuotationLine.RemainSalesPhysical;
                break;
        }

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun queryBuild()
    {
        Query                   query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesQuotationLine));
        QueryBuildRange rangeQuotationId = qbds.addRange(fieldNum(SalesQuotationLine, QuotationId));

        rangeQuotationId.value(salesQuotationTable.QuotationId);
        qbds.addRange(fieldNum(SalesQuotationLine, LineDeliveryType)).value(SysQuery::valueNot(LineDeliveryType::OrderLineWithMultipleDeliveries));

        return new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildOrderTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildOrderTable()
    {
        Query                   query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesQuotationTable));
        QueryBuildRange rangeQuotationId = qbds.addRange(fieldNum(SalesQuotationTable, QuotationId));

        rangeQuotationId.value(salesQuotationTable.QuotationId);

        return new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    protected Common queryGet(QueryRun  _queryRun)
    {
        if (_queryRun.changed(tableNum(SalesQuotationLine)))
        {
            salesQuotationLine = _queryRun.get(tableNum(SalesQuotationLine));
        }
        else
        {
            salesQuotationLine = null;
        }

        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetOrderTable</Name>
				<Source><![CDATA[
    protected Common queryGetOrderTable(QueryRun _queryRun)
    {
        SalesQuotationTable     querySalesQuotationTable;

        if (_queryRun.changed(tableNum(SalesQuotationTable)))
        {
            querySalesQuotationTable = _queryRun.get(tableNum(SalesQuotationTable));
        }

        return querySalesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitQtyInInventoryUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a quantity from order line units to inventory units.
    /// </summary>
    /// <param name="_unitQty">
    /// The order line quantity to convert.
    /// </param>
    /// <returns>
    /// The order line quantity in inventory units.
    /// </returns>
    protected InventQty unitQtyInInventoryUnits(UnitQty _unitQty)
    {
        Debug::assert(inventTable != null);
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
																					 salesQuotationLine.InventDimId,
																					 _unitQty,
																					 salesQuotationLine.SalesUnit,
																					 inventTable.inventUnitId(),
																					 NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>SalesQuotationLine</c> buffer is to be included in totals.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// A record in the <c>_SalesQuotationLine</c> table.
    /// </param>
    /// <returns>
    /// true if the <c>SalesQuotationLine</c> buffer is to be included in totals; otherwise, false.
    /// </returns>
    public static boolean canBeInvoiced(SalesQuotationLine _salesQuotationLine)
    {
        boolean ret = true;

        if (_salesQuotationLine.AccountType == LedgerJournalACType::Project || _salesQuotationLine.OffsetAccountType == LedgerJournalACType::Project)
        {
            ProjLineProperty projLineProperty;
        
            select firstonly ToBeInvoiced from projLineProperty
                where projLineProperty.LinePropertyId == _salesQuotationLine.LinePropertyId;

            if (projLineProperty.ToBeInvoiced == NoYes::No)
            {
                ret = false;;
            }
            else if (_salesQuotationLine.ProjId() != '')
            {
                ProjTable projTableLocal = ProjTable::find(_salesQuotationLine.projId());

                if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
                {
                    ret = projTableLocal.Type == ProjType::FixedPrice || ProjInvoiceTable::isBillingRuleInvoiceable(_salesQuotationLine.projId(), _salesQuotationLine.ProjCategoryId, '');
                }
                else
                {
                    ProjTransType projTransType;
                    switch (_salesQuotationLine.ProjTransType)
                    {
                        case QuotationProjTransType::Expense:
                            projTransType = ProjTransType::Cost;
                            break;

                        case QuotationProjTransType::Fee:
                            projTransType = ProjTransType::Revenue;
                            break;

                        case QuotationProjTransType::Hour:
                            projTransType = ProjTransType::Hour;
                            break;

                        case QuotationProjTransType::Item:
                            projTransType = ProjTransType::Item;
                            break;
                    }

                    ret = ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, projTransType, ProjContractBillingMethod::FixedPrice) || ProjInvoiceTable::isBillingRuleInvoiceable(_salesQuotationLine.projId(), _salesQuotationLine.ProjCategoryId, '');
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>