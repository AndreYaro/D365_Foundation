<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalInterunitBalancer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalInterunitBalancer</c> class performs balancing for interunit
/// dimensions for the <c>SubledgerJournalizer</c> class.
/// </summary>
public class SubledgerJournalInterunitBalancer extends LedgerInterunitBalancer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFromRecordset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SubledgerJournalInterunitBalancer</c> class based on the recordset passed in.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntryTmpDetail">
    /// A recordset containing entries, that will be used to initialize the <c>SubledgerJournalInterunitBalancer</c> class.
    /// </param>
    /// <param name="_isReversal">
    /// If true, only entries marked as reversals will be used for initialization; otherwise only entries not marked as reversals will be used.
    /// </param>
    public void addFromRecordset(SubledgerJournalAccountEntryTmpDetail _subledgerJournalAccountEntryTmpDetail, NoYes _isReversal)
    {
        DimensionAttributeValue                 dimensionAttributeValue;
        DimensionAttributeLevelValue            dimensionAttributeLevelValue;
        DimensionAttributeValueGroupCombination dimensionAttributeValueGroupCombination;
        LedgerInterunitDimensionAttribute       ledgerInterunitDimensionAttribute;

        insert_recordset ledgerTmpInterunitBalancerTotal(
            LegalEntity,
            AccountingEvent,
            SubledgerJournalEntryType,
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            DimensionAttributeValueRecId)
        select LegalEntity, AccountingEvent, SubledgerJournalEntryType, sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from _subledgerJournalAccountEntryTmpDetail
            group by
                LegalEntity,
                AccountingEvent,
                SubledgerJournalEntryType
            where _subledgerJournalAccountEntryTmpDetail.IsReversal == _isReversal
                && _subledgerJournalAccountEntryTmpDetail.IsRoundingAdjustment == NoYes::No
            join RecId from dimensionAttributeValue
                group by RecId
            exists join ledgerInterunitDimensionAttribute
                where ledgerInterunitDimensionAttribute.DimensionAttribute == dimensionAttributeValue.DimensionAttribute
                    && ledgerInterunitDimensionAttribute.Ledger == _subledgerJournalAccountEntryTmpDetail.Ledger
            exists join dimensionAttributeLevelValue
                where dimensionAttributeLevelValue.DimensionAttributeValue == dimensionAttributeValue.RecId
            exists join dimensionAttributeValueGroupCombination
                where dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup == dimensionAttributeLevelValue.DimensionAttributeValueGroup
                    && dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == _subledgerJournalAccountEntryTmpDetail.LedgerDimension;

        select firstOnly RecId from ledgerTmpInterunitBalancerTotal
            where ledgerTmpInterunitBalancerTotal.AccountingCurrencyAmount != 0
                || ledgerTmpInterunitBalancerTotal.ReportingCurrencyAmount != 0;

        //if all the totals are zero, the given set of entries is already balanced, don't need to do anything
        if (ledgerTmpInterunitBalancerTotal != null)
        {
            insert_recordset ledgerTmpInterunitBalancerAccountEntry(
                    AccountingCurrencyAmount,
                    TransactionCurrencyAmount,
                    ReportingCurrencyAmount,
                    AmountSign,
                    LedgerDimension,
                    PostingType,
                    SubledgerJournalAccountEntryTmpDetail,
                    LegalEntity,
                    AccountingEvent,
                    SubledgerJournalEntryType)
            select
                    AccountingCurrencyAmount,
                    TransactionCurrencyAmount,
                    ReportingCurrencyAmount,
                    DebitCredit,
                    LedgerDimension,
                    PostingType,
                    RecId,
                    LegalEntity,
                    AccountingEvent,
                    SubledgerJournalEntryType
                from _subledgerJournalAccountEntryTmpDetail
                where _subledgerJournalAccountEntryTmpDetail.IsReversal == _isReversal
                    && _subledgerJournalAccountEntryTmpDetail.IsRoundingAdjustment == NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static SubledgerJournalInterunitBalancer construct()
    {
        return new SubledgerJournalInterunitBalancer();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>