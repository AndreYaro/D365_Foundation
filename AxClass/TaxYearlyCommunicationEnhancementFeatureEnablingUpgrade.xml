<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxYearlyCommunicationEnhancementFeatureEnablingUpgrade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Microsoft internal use only.
/// </summary>
internal final class TaxYearlyCommunicationEnhancementFeatureEnablingUpgrade extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        DataArea dataArea;

        while select id from dataArea where dataArea.isVirtual == NoYes::No
        {
            changecompany(dataArea.id)
            {
                if (!(select firstonly RecId from TaxYearlyCom_IT).RecId)
                {
                    continue;
                }

                ttsbegin;
                TaxBook taxBook;
                TaxYearlyCom_IT taxYearlyCom;

                TaxYearlyComV2_IT taxYearlyComV2Check;

                CompanyInfo companyInfo = CompanyInfo::find();
                LogisticsElectronicAddressLocator teleFax = companyInfo.teleFax();
                LogisticsElectronicAddressLocator phone = companyInfo.phone();
                LogisticsElectronicAddressLocator email = companyInfo.email();
                LogisticsElectronicAddressLocator companyName = companyInfo.Name;
                LegalNature_IT legalNature = companyInfo.LegalNature_IT;

                while select taxYearlyCom
                    join TaxPeriod from taxBook
                    where taxBook.ATECOFINCode_IT == taxYearlyCom.ATECOFINCode
                    notexists join taxYearlyComV2Check
                        where taxYearlyComV2Check.TaxYearlyComId == taxYearlyCom.TaxYearlyComId
                            || (taxYearlyComV2Check.ATECOFINCode == taxYearlyCom.ATECOFINCode
                                && taxYearlyComV2Check.Year == taxYearlyCom.Year
                                && taxYearlyComV2Check.TaxPeriod == taxBook.TaxPeriod)
                {
                    TaxYearlyComV2_IT taxYearlyComV2;
                    taxYearlyComV2.ATECOFINCode = taxYearlyCom.ATECOFINCode;
                    taxYearlyComV2.ExportDate = taxYearlyCom.ExportDate;
                    taxYearlyComV2.Exported = taxYearlyCom.Exported;
                    taxYearlyComV2.ExportedFile = taxYearlyCom.ExportedFile;
                    taxYearlyComV2.Year = taxYearlyCom.Year;
                    taxYearlyComV2.TaxPeriod = taxBook.TaxPeriod;
                    taxYearlyComV2.TaxYearlyComId = NumberSeq::newGetNum(TaxParameters::numRefTaxYearlyComId_IT()).num();
                    taxYearlyComV2.insert();

                    TaxYearlyComReport_IT taxYearlyComReport;

                    select firstonly taxYearlyComReport
                        where taxYearlyComReport.ATECOFINCode == taxYearlyComV2.ATECOFINCode
                            && taxYearlyComReport.Year == taxYearlyComV2.Year;

                    TaxYearlyComReportV2_IT taxYearlyComReportV2;

                    taxYearlyComReportV2.ATECOFINCode = taxYearlyComV2.ATECOFINCode;
                    taxYearlyComReportV2.Year = taxYearlyComV2.Year;
                    taxYearlyComReportV2.TaxPeriod = taxYearlyComV2.TaxPeriod;
                    taxYearlyComReportV2.TaxYearlyComId = taxYearlyComV2.TaxYearlyComId;

                    taxYearlyComReportV2.CompanyCoRegNum = taxYearlyComReport.CompanyCoRegNum;
                    taxYearlyComReportV2.CompanyFiscalCode = taxYearlyComReport.CompanyFiscalCode;
                    taxYearlyComReportV2.CompanyName = taxYearlyComReport.CompanyName;
                    taxYearlyComReportV2.WriterFiscalCode = taxYearlyComReport.WriterFiscalCode;
                    taxYearlyComReportV2.WriterRole = taxYearlyComReport.WriterRole;
                    taxYearlyComReportV2.WriterTaxNum = taxYearlyComReport.WriterTaxNum;
                    
                    taxYearlyComReportV2.CompanyEmail = email;
                    taxYearlyComReportV2.CompanyFax = teleFax;
                    taxYearlyComReportV2.CompanyPhone = phone;
                    taxYearlyComReportV2.LegalNature = legalNature;
                    if (!taxYearlyComReportV2.CompanyName)
                    {
                        taxYearlyComReportV2.CompanyName = companyName;
                    }
                    taxYearlyComReportV2.insert();

                    TaxReportHeader_IT taxReportHeader, taxReportHeaderNew;
                    select firstOnly taxReportHeader
                        where taxReportHeader.RecId == taxYearlyComReport.TaxReportHeader;

                    select firstOnly forupdate taxReportHeaderNew
                        where taxReportHeaderNew.RecId == taxYearlyComReportV2.TaxReportHeader;

                    Global::buf2Buf(taxReportHeader, taxReportHeaderNew);
                    taxReportHeaderNew.doUpdate();

                    RefRecId taxReportHeaderRecId = taxReportHeader.RecId;
                    RefRecId taxReportHeaderNewRecId = taxReportHeaderNew.RecId;

                    TaxReportLine_IT taxReportLine, taxReportLineNew;
                    insert_recordset taxReportLineNew
                        (FieldDescription, FieldFormat, FieldID, FieldValue, LineNum, TaxReportHeader)
                        select FieldDescription, FieldFormat, FieldID, FieldValue, LineNum, taxReportHeaderNewRecId
                        from taxReportLine
                            where taxReportLine.TaxReportHeader == taxReportHeaderRecId;
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchJob</Name>
				<Source><![CDATA[
    internal static void createBatchJob()
    {
        if (TaxYearlyCommunicationEnhancementFeatureEnablingUpgrade::doesBatchJobExist())
        {
            throw error(strFmt(
                "@TaxDeclarationDetails:AnotherInstanceOfTheBatchJobScheduled",
                TaxTransDeclarationDetailsViewBatchSynchronize::batchCaption()));
        }

        TaxYearlyCommunicationEnhancementFeatureEnablingUpgrade processingController =
            new TaxYearlyCommunicationEnhancementFeatureEnablingUpgrade(
                classStr(TaxYearlyCommunicationEnhancementFeatureEnablingUpgrade),
                methodStr(TaxYearlyCommunicationEnhancementFeatureEnablingUpgrade, run),
                SysOperationExecutionMode::ScheduledBatch);

        processingController.scheduleBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchCaption</Name>
				<Source><![CDATA[
    internal static BatchCaption batchCaption()
    {
        return strFmt("@VATDeclaration:DataUpgradeForFeature", "@VATDeclaration:TaxYearlyCommunicationEnhancementFeatureLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatch</Name>
				<Source><![CDATA[
    internal void scheduleBatch()
    {
        this.batchInfo().parmCaption(TaxYearlyCommunicationEnhancementFeatureEnablingUpgrade::batchCaption());
        this.batchInfo().parmRetriesOnFailure(1);
        this.batchInfo().parmBatchHeader().parmCaption(TaxYearlyCommunicationEnhancementFeatureEnablingUpgrade::batchCaption());
        this.doBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesBatchJobExist</Name>
				<Source><![CDATA[
    internal static boolean doesBatchJobExist()
    {
        Batch batch;
        BatchJob batchJob;

        select firstonly RecId from batchJob
            where batchJob.DataPartition == getCurrentPartition()
                && (batchJob.Status == BatchStatus::Ready
                    || batchJob.Status == BatchStatus::Waiting
                    || batchJob.Status == BatchStatus::Scheduled
                    || batchJob.Status == BatchStatus::Executing)
            exists join batch
                where batch.ClassNumber == classNum(TaxYearlyCommunicationEnhancementFeatureEnablingUpgrade)
                    && batch.DataPartition == batchJob.DataPartition
                    && batch.BatchJobId == batchJob.RecId;

        return batchJob.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>