<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesByTerminalReportDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ACM = Microsoft.Dynamics.AX.Analytics.CalculationModel;

/// <summary>
/// The <c>RetailSalesByTerminalReportDataProvider</c> class is the data provider
/// class for retail sales by terminal SSRS report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailReportParametersDataContract))]
class RetailSalesByTerminalReportDataProvider extends RetailSrsReportDataProviderBase
{
    RetailSalesByTerminalReportTable t;
    RetailReportParametersDataContract dc;

    ACM.DynamicMeasureDefinition amount;
    ACM.DynamicMeasureDefinition cogs;
    ACM.DynamicMeasureDefinition quantity;
    ACM.NumericExpression grossProfitMargin;
    ACM.NumericExpression grossProfitMarginPercentage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new ()
    {
        super();
        amount = new ACM.DynamicMeasureDefinition(
            tableStr(RetailSalesByTerminalView),
            fieldStr(RetailSalesByTerminalView, LineAmountMST),
            ACM.Aggregation::Sum
        );
        cogs = new ACM.DynamicMeasureDefinition(
            tableStr(RetailSalesByTerminalView),
            fieldStr(RetailSalesByTerminalView, COGS),
            ACM.Aggregation::Sum
        );
        quantity = new ACM.DynamicMeasureDefinition(
            tableStr(RetailSalesByTerminalView),
            fieldStr(RetailSalesByTerminalView, Qty),
            ACM.Aggregation::Sum
        );
        grossProfitMargin = amount.Subtract(cogs);

        ACM.LogicalExpression isSalesAmountZero = amount.CompareEquals(0);
        grossProfitMarginPercentage = new ACM.If(
            isSalesAmountZero,
            ACM.Null::ConstValue,
            grossProfitMargin.Divide(amount)
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called by the SSRS framework to bring back data. It gets called after processReport.
    /// </summary>
    /// <returns>table buffer</returns>
    [SRSReportDataSetAttribute(tableStr(RetailSalesByTerminalReportTable))]
    public RetailSalesByTerminalReportTable getTable()
    {
        select * from t;
        return t;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called by the SSRS report framework to execute the report queries.
    /// </summary>
    public void processReport()
    {
        try
        {
            SysQueryRun::ExecuteInManagedStack(true);

            dc = this.parmDataContract();
            this.InsertChannelsToTmpTable(dc.parmHierarchyRelationId());

            Query q = new Query();
            QueryBuildDataSource ds = q.addDataSource(tableNum(RetailSalesByTerminalView));

            ds.addSelectionFieldWithAlias('terminalId', fieldNum(RetailSalesByTerminalView, terminalId));
            ds.addSelectionFieldWithAlias('name', fieldNum(RetailSalesByTerminalView, name));
            ds.addCalculationField(amount, 'LineAmountMST');
            ds.addCalculationField(quantity, 'Qty');
            ds.addCalculationField(cogs, 'COGS');
            ds.addCalculationField(grossProfitMargin, 'GrossProfitMargin');
            ds.addCalculationField(grossProfitMarginPercentage, 'GrossProfitMarginPercentage');

            ds.addGroupByField(fieldNum(RetailSalesByTerminalView, terminalId));
            ds.addGroupByField(fieldNum(RetailSalesByTerminalView, name));

            ds.addRange(fieldNum(RetailSalesByTerminalView, InvoiceDate)).value(this.buildDateRangeForSpecifiedField(dc.parmFromDate(), dc.parmToDate(), fieldStr(RetailSalesByTerminalView, InvoiceDate)));
            
            //Add join with RetailReportChannelTable.
            this.JoinChannelFilter(ds, fieldNum(RetailSalesByTerminalView, RetailChannel));

            this.addSortOrder(ds);
            q.topRows(dc.parmTopCount());

            QueryRun::runAndPopulate(q, t, this.buildMapping());

            this.ClearChannelFilterTable();
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSortOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply order by clause to datasource based on paramters.
    /// </summary>
    /// <param name = "ds">target datasource</param>
    private void addSortOrder(QueryBuildDataSource ds)
    {
        switch (dc.parmOrderBy())
        {
            case RetailReportOrderBy::Amount:
                ds.addOrderByCalculationField(amount, SortOrder::Descending);
                break;
            case RetailReportOrderBy::Quantity:
                ds.addOrderByCalculationField(quantity, SortOrder::Descending);
                break;
            case RetailReportOrderBy::Profit:
                ds.addOrderByCalculationField(grossProfitMargin, SortOrder::Descending);
                break;
            case RetailReportOrderBy::ProfitPercentage:
                ds.addOrderByCalculationField(grossProfitMarginPercentage, SortOrder::Descending);
                ds.addOrderByCalculationField(grossProfitMargin, SortOrder::Descending);
                break;
            default:
                throw Global::error("@Retail:RetailReportOrderByNotSupported");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build mapping between query result and temp table buffer.
    /// </summary>
    /// <returns>Mapping</returns>
    private Map buildMapping()
    {
        Map m = new Map(Types::String, Types::String);
        m.insert('terminalId', fieldStr(RetailSalesByTerminalReportTable, TerminalId));
        m.insert('name', fieldStr(RetailSalesByTerminalReportTable, TerminalName));
        m.insert('LineAmountMST', fieldStr(RetailSalesByTerminalReportTable, Amount));
        m.insert('Qty', fieldStr(RetailSalesByTerminalReportTable, Quantity));
        m.insert('COGS', fieldStr(RetailSalesByTerminalReportTable, COGS));
        m.insert('GrossProfitMargin', fieldStr(RetailSalesByTerminalReportTable, Margin));
        m.insert('GrossProfitMarginPercentage', fieldStr(RetailSalesByTerminalReportTable, Percentage));
        return m;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>