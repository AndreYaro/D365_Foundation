<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionLetterSendXML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CustCollectionLetterSendXML</c> performs necessary checks and creates a batch task for collection letter report generation.
/// </summary>
class CustCollectionLetterSendXML
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canXMLByLetterBeSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Carries out necessary checks of CustCollectionLetterJour and the linked records for service.
    /// </summary>
    /// <param name="_custCollectionLetterJour">
    /// The source record on which we unload information.
    /// </param>
    /// <returns>
    /// True if record ready for unload; otherwise, false.
    /// </returns>
    public boolean canXMLByLetterBeSent(CustCollectionLetterJour _custCollectionLetterJour)
    {
        boolean ret = true;

        if (_custCollectionLetterJour.Status == PrintPostCancel::Canceled
            || BusinessDocumentParameters::isFeatureEnabled(EInvoicingFeaturesConstants::ExportInvoicesFeaturesPublicSector))
        {
            ret = false;
        }

        if (ret && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO, #isoDK]))
        {
            CustTable custTable = CustTable::find(_custCollectionLetterJour.AccountNum);

            if (custTable.eInvoice == NoYes::No)
            {
                ret = checkFailed(strFmt("@SYS4004069", _custCollectionLetterJour.CollectionLetterNum, _custCollectionLetterJour.AccountNum));
            }

            if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]) && !custTable.editContactPersonName(false, ''))
            {
                ret = checkFailed(strFmt("@SYS75684", fieldPName(CustTable, ContactPersonId), tablePName(CustTable)));
            }

            ret = EInvoiceValidationHelper::checkCompanyInfo() && ret;

            ret = EInvoiceValidationHelper::checkCustTableInfo(_custCollectionLetterJour.AccountNum) && ret;

            ret = EInvoiceValidationHelper::checkCurrencyInfo(_custCollectionLetterJour.CurrencyCode) && ret;

            ret = EInvoiceValidationHelper::checkAddressInfo(tablepname(CustCollectionLetterJour), _custCollectionLetterJour.PostalAddress) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds collection letter to batch queue.
    /// </summary>
    /// <param name = "_custCollectionLetterJour">The collection letter to send.</param>
    public void run(CustCollectionLetterJour _custCollectionLetterJour)
    {
        if (this.canXMLByLetterBeSent(_custCollectionLetterJour))
        {
            Args args = new Args();
            args.record(_custCollectionLetterJour);

            new MenuFunction(menuitemOutputStr(ECollectionGeneration), MenuItemType::Output).run(args);

            info(strFmt("@SYS4004066", _custCollectionLetterJour.CollectionLetterNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustCollectionLetterSendXML custCollectionLetterSendXML = new CustCollectionLetterSendXML();
        FormDataSource formDS;
        CustCollectionLetterJour custCollectionLetterJour;

        if (!SalesParameters::find().ERFormatMappingCollection)
        {
            //Error on function run. Format mapping is not specified in Accounts receivable parameters
            throw error(strfmt('@GLS110288' + '@SYS35672' + ' ' + '@SYS93945', '@AccountsReceivable:FormatMapping', '@SYS76213', ''));
        }

        if (_args && _args.dataset() == tableNum(CustCollectionLetterJour))
        {
            formDS = FormDataUtil::getFormDataSource(_args.record());
            if (formDS)
            {
                for (custCollectionLetterJour = formDS.getFirst(true) ? formDS.getFirst(true) : _args.record();
                     custCollectionLetterJour;
                     custCollectionLetterJour = formDS.getNext())
                {
                    custCollectionLetterSendXML.run(custCollectionLetterJour);
                }
            }
            else
            {
                custCollectionLetterSendXML.run(_args.record());
            }
        }

        if (formDS)
        {
            formDS.research(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>