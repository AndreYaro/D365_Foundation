<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransExtensionRGQuantityHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransExtensionRGQuantityHandler_IN</c> class is the handler of the tax trans extension RG quantity.
/// </summary>
class TaxTransExtensionRGQuantityHandler_IN extends TaxTransExtensionQuantityHandler_IN
{
    TaxExciseQuantityRegister_IN register;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>correctQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Corrects quantity of the tax transaction.
    /// </summary>
    protected void correctQuantity()
    {
        if (register.IssueQty != 0)
        {
            taxTransExtension.Quantity = - register.IssueQty;
        }
        else if (register.ReceiptQty != 0)
        {
            taxTransExtension.Quantity = register.ReceiptQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataCustInvoiceJour</Name>
				<Source><![CDATA[
        protected void setDataCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        super(_custInvoiceJour);
        taxTransExtension.TransDate                      = _custInvoiceJour.InvoiceDate;
        taxTransExtension.Voucher                        = _custInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataInventJournalTrans</Name>
				<Source><![CDATA[
protected void setDataInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        super(_inventJournalTrans);
        taxTransExtension.Voucher                            = _inventJournalTrans.Voucher;
        taxTransExtension.TransDate                          = _inventJournalTrans.TransDate;
        taxTransExtension.Source                             = TaxModuleType::Inventory_IN;
    }
]]></Source>
			</Method>
			<Method>
				<Name>setDataInventQualityOrderTable</Name>
				<Source><![CDATA[
        protected void setDataInventQualityOrderTable(InventQualityOrderTable _inventQualityOrderTable)
    {
        super(_inventQualityOrderTable);

        taxTransExtension.TransDate = _inventQualityOrderTable.ValidateDate_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataPurchLine</Name>
				<Source><![CDATA[
        protected void setDataPurchLine(PurchLine _purchLine)
    {
        super(_purchLine);

        taxTransExtension.Source                         = TaxModuleType::PurchInvoice;
        taxTransExtension.VoucherCurrency                = _purchLine.CurrencyCode;
        taxTransExtension.TaxItemGroup                   = _purchLine.TaxItemGroup;
        taxTransExtension.TaxGroup                       = _purchLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataRegister</Name>
				<Source><![CDATA[
/// <summary>
    /// Sets data register information.
    /// </summary>
    protected void setDataRegister()
    {
        taxTransExtension.ExciseRegisterType = NoYes::Yes;
        taxTransExtension.TransDate          = register.RGDate;

        this.correctQuantity();

        switch (register.TableId)
        {
            case tableNum(ExciseRG23AIRegister_IN) :
                taxTransExtension.ExciseRegister            = ExciseRegister_IN::RG23APartI;
                taxTransExtension.RG23AIIdDate              = register.RGDate;
                taxTransExtension.RG23AINumberSequenceCode = register.NumberSequence;
                if (taxModelExciseTaxable.isExciseProduction())
                {
                    taxTransExtension.DSAQuantity               = taxTransExtension.Quantity;
                    taxTransExtension.ManufacturedQuantity      = taxTransExtension.Quantity;
                }
                break;
            case tableNum(ExciseRG23CIRegister_IN) :
                taxTransExtension.ExciseRegister            = ExciseRegister_IN::RG23CPartI;
                taxTransExtension.RG23CIIdDate              = register.RGDate;
                taxTransExtension.RG23CINumberSequenceCode  = register.NumberSequence;
                if (taxModelExciseTaxable.isExciseProduction())
                {
                    taxTransExtension.DSAQuantity               = taxTransExtension.Quantity;
                    taxTransExtension.ManufacturedQuantity      = taxTransExtension.Quantity;
                }
                break;
            case tableNum(ExciseDSARegister_IN) :
                taxTransExtension.ExciseRegister            = ExciseRegister_IN::DSA;
                taxTransExtension.dsaIdDate                 = register.RGDate;
                taxTransExtension.DSAIdNumberSequenceCode   = register.NumberSequence;
                taxTransExtension.DSAQuantity               = taxTransExtension.Quantity;
                if (taxModelExciseTaxable.isExciseProduction())
                {
                    taxTransExtension.ManufacturedQuantity      = taxTransExtension.Quantity;
                }
                break;
            case tableNum(ExciseRG23DRegister_IN) :
                taxTransExtension.ExciseRegister            = ExciseRegister_IN::RG23D;
                taxTransExtension.RG23DNumberSequenceCode   = register.NumberSequence;
                break;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>setDataSalesLine</Name>
				<Source><![CDATA[
        protected void setDataSalesLine(SalesLine _salesLine)
    {
        super(_salesLine);

        taxTransExtension.Source                         = TaxModuleType::SalesInvoice;
        taxTransExtension.VoucherCurrency                = _salesLine.CurrencyCode;
        taxTransExtension.TaxItemGroup                   = _salesLine.TaxItemGroup;
        taxTransExtension.TaxGroup                       = _salesLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataTax</Name>
				<Source><![CDATA[
        protected void setDataTax()
    {
        super();
        this.setDataRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataVendInvoiceJour</Name>
				<Source><![CDATA[
        protected void setDataVendInvoiceJour(VendInvoiceJour _vendInvoiceJour)
    {
        super(_vendInvoiceJour);
        taxTransExtension.TransDate                      = _vendInvoiceJour.InvoiceDate;
        taxTransExtension.Voucher                        = _vendInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExciseRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Excise Register for Quantity
    /// </summary>
    /// <param name="_register">
    /// The given Excise Register
    /// </param>
    public void setExciseRegister(TaxExciseQuantityRegister_IN _register)
    {
        register = _register;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>