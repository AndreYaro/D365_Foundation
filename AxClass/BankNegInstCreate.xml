<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankNegInstCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class BankNegInstCreate extends RunBase
{
    protected BankAccountTable bankAccountTable;
    protected NumberSequenceFormat format;

    protected CompanyBankAccountId accountID;
    protected BankNegInstStartNum fromNegInstNum;
    protected BankNegInstQty numOfNegInst;

    protected DialogField dialogAccountId;
    protected DialogField dialogFromNegInstNum;
    protected DialogField dialogNumOfNegInst;

    protected boolean makeAccountIdActive = true;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        accountID,
        fromNegInstNum,
        numOfNegInst
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDocument</Name>
				<Source><![CDATA[
    public abstract void createDocument(BankNegInstNum _negInstNum, CompanyBankAccountId _accountID)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogAccountId = dialog.addFieldValue(extendedTypeStr(CompanyBankAccountId), accountID);

        if (!makeAccountIdActive)
        {
            dialogAccountId.active(false);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        accountID       = dialogAccountId.value();
        fromNegInstNum  = dialogFromNegInstNum.value();
        numOfNegInst    = dialogNumOfNegInst.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
    public BankAccountID parmAccountId(BankAccount _accountId = accountID)
    {
        accountID = _accountId;

        return accountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormat</Name>
				<Source><![CDATA[
    public NumberSequenceFormat parmFormat(NumberSequenceFormat _format = format)
    {
        format = _format;

        return format;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromNegInstNum</Name>
				<Source><![CDATA[
    public BankNegInstStartNum parmFromNegInstNum(BankNegInstStartNum _fromNegInstNum = fromNegInstNum)
    {
        fromNegInstNum = _fromNegInstNum;

        return fromNegInstNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumOfNegInst</Name>
				<Source><![CDATA[
    public BankNegInstQty parmNumOfNegInst(BankNegInstQty _numOfNegInst = numOfNegInst)
    {
        numOfNegInst = _numOfNegInst;

        return numOfNegInst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        BankNegInstStartNum toNegInstNum;
        BankNegInstNum      negInstNum;

        if (! this.validate())
        {
            throw error("@SYS21628");
        }

        try
        {
            ttsbegin;

            toNegInstNum = fromNegInstNum + numOfNegInst - 1;
            while (fromNegInstNum <= toNegInstNum)
            {
                negInstNum = NumberSeq::numInsertFormat(fromNegInstNum,this.parmFormat() /* BankAccountTable.Mask*/);
                this.createDocument(negInstNum, accountID);
                fromNegInstNum++;
            }

            ttscommit;

            info(this.txtDocsAreCreated());
        }

        catch (Exception::Error)
        {
            throw error("@SYS21628");
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDocsAreCreated</Name>
				<Source><![CDATA[
    abstract protected str txtDocsAreCreated()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;
        ;

        if (!accountID)
        {
            ret = checkFailed("@SYS24651");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankNegInstCreate construct(BankNegInst _negInst)
    {
        BankNegInstCreate   bankNegInstCreate;
        ;

        switch (_negInst)
        {
            case BankNegInst::Check:
                bankNegInstCreate = new BankChequeCreate();
                break;

            case BankNegInst::BillOfExchange:
                bankNegInstCreate = new BankBillOfExchangeCreate();
                break;

            case BankNegInst::PromissoryNote:
                bankNegInstCreate = new BankPromissoryNoteCreate();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return bankNegInstCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBankAccountTable</Name>
				<Source><![CDATA[
    public static BankNegInstCreate newBankAccountTable(BankNegInst      _negInst,
        BankAccountTable _bankAccountTable)
    {
        BankNegInstCreate   negInstCreate;

        negInstCreate = BankNegInstCreate::construct(_negInst);

        negInstCreate.getLast();

        negInstCreate.parmAccountId(_bankAccountTable.AccountID);
        negInstCreate.parmFromNegInstNum(str2int(_bankAccountTable.lastCreatedNegInst(_negInst)) + 1);
        negInstCreate.parmNumOfNegInst(0);

        return negInstCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountIdInactive</Name>
				<Source><![CDATA[
    protected void setAccountIdInactive()
    {
        makeAccountIdActive = false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>