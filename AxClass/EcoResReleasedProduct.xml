<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResReleasedProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResReleasedProduct</c> class represents a released product entity.
/// </summary>
/// <remarks>
/// The class is responsible for validation, which cannot be performed on a table level.
/// </remarks>
class EcoResReleasedProduct
{
    InventTable             inventTable;
    InventTableModule       inventTableModuleInvent;
    InventTableModule       inventTableModulePurch;
    InventTableModule       inventTableModuleSales;
    InventModelGroupItem    inventModelGroupItem;

    UnitOfMeasureConverter_Product  unitOfMeasureConverter;
    InventModelTypeFactory          inventModelTypeFactory;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAndUpdateNonStockedDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and assigns the default values to the fields that are not applicable for a non-stocked
    /// product.
    /// </summary>
    public void checkAndUpdateNonStockedDependencies()
    {
        InventModelGroup    inventModelGroup;

        if (inventTable.bomUnitId)
        {
            // Model group has been specified or changed
            if (inventModelGroupItem.ModelGroupId != inventModelGroupItem.orig().ModelGroupId)
            {
                if (SysRecordTemplate::isTemplateEditFormRecord(inventModelGroupItem))
                { // Template - allow blank value for model group
                    if (inventModelGroupItem.ModelGroupId)
                    {
                        inventModelGroup = inventModelGroupItem.modelGroup();
                        if (!inventModelGroup.isStocked())
                        {
                            // BOM unit cannot be specified for non-stocked items
                            inventTable.bomUnitId = '';
                        }
                    }
                }
                else
                {
                    inventModelGroup = inventModelGroupItem.modelGroup();
                    if (!inventModelGroup.isStocked())
                    {
                        // BOM unit cannot be specified for non-stocked items
                        inventTable.bomUnitId = '';
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventModelTypeFactory</Name>
				<Source><![CDATA[
    protected InventModelTypeFactory inventModelTypeFactory()
    {
        if (inventModelTypeFactory == null)
        {
            throw error(Error::missingParameter(this));
        }
        return inventModelTypeFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a product is a template.
    /// </summary>
    /// <returns>
    /// true if a product is a template; otherwise, false.
    /// </returns>
    protected boolean isTemplate()
    {
        return SysRecordTemplate::isTemplateEditFormRecord(inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventModelGroupItem</Name>
				<Source><![CDATA[
    public InventModelGroupItem parmInventModelGroupItem(InventModelGroupItem _inventModelGroupItem = inventModelGroupItem)
    {
        inventModelGroupItem = _inventModelGroupItem;

        return inventModelGroupItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventModelTypeFactory</Name>
				<Source><![CDATA[
    public InventModelTypeFactory parmInventModelTypeFactory(InventModelTypeFactory _inventModelTypeFactory = inventModelTypeFactory)
    {
        inventModelTypeFactory = _inventModelTypeFactory;

        return inventModelTypeFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTableModuleInvent</Name>
				<Source><![CDATA[
    public InventTableModule parmInventTableModuleInvent(InventTableModule _inventTableModuleInvent = inventTableModuleInvent)
    {
        inventTableModuleInvent = _inventTableModuleInvent;

        return inventTableModuleInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTableModulePurch</Name>
				<Source><![CDATA[
    public InventTableModule parmInventTableModulePurch(InventTableModule _inventTableModulePurch = inventTableModulePurch)
    {
        inventTableModulePurch = _inventTableModulePurch;

        return inventTableModulePurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTableModuleSales</Name>
				<Source><![CDATA[
    public InventTableModule parmInventTableModuleSales(InventTableModule _inventTableModuleSales = inventTableModuleSales)
    {
        inventTableModuleSales = _inventTableModuleSales;

        return inventTableModuleSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitOfMeasureConverter</Name>
				<Source><![CDATA[
    public UnitOfMeasureConverter_Product parmUnitOfMeasureConverter(UnitOfMeasureConverter_Product _unitOfMeasureConverter = unitOfMeasureConverter)
    {
        unitOfMeasureConverter = _unitOfMeasureConverter;

        return unitOfMeasureConverter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitOfMeasureConverter</Name>
				<Source><![CDATA[
    protected UnitOfMeasureConverter_Product unitOfMeasureConverter()
    {
        if (unitOfMeasureConverter == null)
        {
            throw error(Error::missingParameter(this));
        }
        return unitOfMeasureConverter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>InventTable</c> record.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    protected boolean validateInventTable()
    {
        boolean             isTemplate = this.isTemplate();
        boolean             ret = this.validateUnitOfMeasures(inventTable.bomUnitId, inventTableModuleInvent.UnitId);
        
        //Call validateWriteInventTable only when modifying non-template product
        //Perform validation only if model group assigned (newly created items may not have the model group set)
        //otherwise inventModelGroupItem.modelGroup() will throw exception when called when inventModelGroupItem.ModelGroupId is empty
        //Same check is performed in InventTable.validateWrite method but we need it here for the case when changing
        //the model group as the change is not yet visible when InventTable.validateWrite is called
        if (   ret
            && !isTemplate
            && inventModelGroupItem.ModelGroupId)
        {
            InventModelType inventModelType = this.inventModelTypeFactory().getInventModelTypeFromInventModel(inventModelGroupItem.modelGroup().InventModel);
            ret = inventModelType.validateWriteInventTable(inventTable);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTableModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates an <c>InventTableModule</c> record.
    /// </summary>
    /// <param name="_inventTableModule">
    /// The <c>InventTableModule</c> record to validate.
    /// </param>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    protected boolean validateInventTableModule(InventTableModule _inventTableModule)
    {
        #ISOCountryRegionCodes

        boolean ret = this.validateUnitOfMeasures(_inventTableModule.UnitId, inventTableModuleInvent.UnitId);

        // <GTH>
        if (!TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
        {
        // </GTH>
            if (ret
                && _inventTableModule.TaxWithholdCalculate_TH == true
                && inventTable.ItemType != ItemType::Service
                && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB, #isoIE])
                && !TaxWithholdingGlobalFeature::isFeatureAndParamEnabled())
            {
                ret = checkFailed("@SYS328665");
            }
        // <GTH>
        }
        // </GTH>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTableModulePurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>InventTableModule</c> record for purchase settings.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    protected boolean validateInventTableModulePurch()
    {
        return this.validateInventTableModule(inventTableModulePurch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTableModuleSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>InventTableModule</c> record for sales settings.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    protected boolean validateInventTableModuleSales()
    {
        return this.validateInventTableModule(inventTableModuleSales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if units of measure are compatible.
    /// </summary>
    /// <param name="_unitFrom">
    /// A <c>UnitOfMeasure</c> record that specifies source unit of measure.
    /// </param>
    /// <param name="_unitTo">
    /// A <c>UnitOfMeasure</c> record that specifies a target unit of measure.
    /// </param>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    protected boolean validateUnitOfMeasure(UnitOfMeasure _unitFrom, UnitOfMeasure _unitTo)
    {
        if (_unitFrom && _unitTo)
        {
            if (!this.unitsForProductVariantCanBeConverted(_unitFrom, _unitTo))
            {
                return checkFailed(strFmt("@SYS28690", _unitFrom.Symbol, _unitTo.Symbol));
            }            
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitsForProductVariantCanBeConverted</Name>
				<Source><![CDATA[
    private boolean unitsForProductVariantCanBeConverted(UnitOfMeasure _unitFrom, UnitOfMeasure _unitTo)
    {
        if (EcoResProductUnitConverter::isProductMasterWithProductVariantConversionEnabled(inventTable.ItemId))
        {
            return inventTable.existUnitConversionForProduct(_unitFrom.Symbol, _unitTo.Symbol);
        }
        else
        {
            this.unitOfMeasureConverter().parmFromUnitOfMeasure(_unitFrom.RecId);
            this.unitOfMeasureConverter().parmToUnitOfMeasure(_unitTo.RecId);
            this.unitOfMeasureConverter().parmProduct(inventTable.Product);
                
            return this.unitOfMeasureConverter().canValueBeConverted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the released product.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret = true;

        ret = ret && this.validateInventTable();
        ret = ret && this.validateInventTableModulePurch();
        ret = ret && this.validateInventTableModuleSales();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResReleasedProduct construct()
    {
        return new EcoResReleasedProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitOfMeasures</Name>
				<Source><![CDATA[
    private boolean validateUnitOfMeasures(UnitOfMeasureSymbol _unitOfMeasureSymbolFrom, UnitOfMeasureSymbol _unitOfMeasureSymbolTo)
    {
        UnitOfMeasure _unitOfMeasureFrom = UnitOfMeasure::findBySymbol(_unitOfMeasureSymbolFrom);
        UnitOfMeasure _unitOfMeasureTo = UnitOfMeasure::findBySymbol(_unitOfMeasureSymbolTo);
        
        boolean ret = this.validateUnitSymbol(_unitOfMeasureSymbolFrom, _unitOfMeasureFrom) 
                   && this.validateUnitSymbol(_unitOfMeasureSymbolTo, _unitOfMeasureTo);

        if (ret && _unitOfMeasureSymbolFrom && _unitOfMeasureSymbolTo)
        {
            ret = this.validateUnitOfMeasure(_unitOfMeasureFrom, _unitOfMeasureTo);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitSymbol</Name>
				<Source><![CDATA[
    private boolean validateUnitSymbol(UnitOfMeasureSymbol _unitOfMeasureSymbol, UnitOfMeasure _unitOfMeasure)
    {
        if (_unitOfMeasureSymbol && !_unitOfMeasure)
        {
            return checkFailed(strFmt("@SCM:TableFieldValidation", _unitOfMeasureSymbol, "@SYS190813", "@SYS7867"));
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>