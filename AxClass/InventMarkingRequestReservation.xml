<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMarkingRequestReservation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMarkingRequestReservation</c> class is responsible for doing reservations based on marking requests for a single origin.
/// </summary>
public class InventMarkingRequestReservation
{
    protected InventTransOrigin inventTransOriginMarkFrom;
    protected InventDim inventDimFromCriteria;
    private InventMovement movement;
    private List dimFromCriteriaSelectedDimFields;
    private List dimFromMovementSelectedDimFields;
    private InventDimFixed inventDimFixed;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventMarkingRequestReservation construct()
    {
        return new InventMarkingRequestReservation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromOriginMarkFrom</Name>
				<Source><![CDATA[
	/// <summary>
    /// Returns a new instance of the class.
    /// </summary>
    /// <param name = "_inventTransOriginIdMarkFrom">The origin that should be marked.</param>
    /// <param name = "_inventDimFromCriteria">The inventory dimensions of the origin that the marking is done against.</param>
    /// <returns></returns>
    public static InventMarkingRequestReservation newFromOriginMarkFrom(
        InventTransOriginId _inventTransOriginIdMarkFrom,
        InventDim _inventDimFromCriteria)
    {
        InventMarkingRequestReservation reservation = InventMarkingRequestReservation::construct();
        reservation.parmInventTransOriginMarkFrom(InventTransOrigin::find(_inventTransOriginIdMarkFrom));
        reservation.parmInventDimFromCriteria(_inventDimFromCriteria);

        return reservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOriginMarkFrom</Name>
				<Source><![CDATA[
    public InventTransOrigin parmInventTransOriginMarkFrom(InventTransOrigin _inventTransOriginMarkFrom = inventTransOriginMarkFrom)
    {
        inventTransOriginMarkFrom = _inventTransOriginMarkFrom;
        return inventTransOriginMarkFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFromCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimFromCriteria(InventDim _inventDimFromCriteria = inventDimFromCriteria)
    {
        inventDimFromCriteria = _inventDimFromCriteria;
        return inventDimFromCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a movement related to the origin.
    /// </summary>
    /// <returns>a movement related to the origin.</returns>
    /// <remarks>If a movement cannot be created null is returned.</remarks>
    private InventMovement movement()
    {
        if (!movement)
        {
            movement = inventTransOriginMarkFrom.inventMovement();
        }
        
        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFixed</Name>
				<Source><![CDATA[
    private InventDimFixed inventDimFixed(InventMovement _movementReservation)
    {
        if (!inventDimFixed)
        {
            inventDimFixed = InventUpd_Reservation::calculateInventDimFixed(_movementReservation, _movementReservation.inventdim());
        }

        return inventDimFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFromMovementSelectedDimFields</Name>
				<Source><![CDATA[
    private List dimFromMovementSelectedDimFields(InventMovement _movementReservation)
    {
        if (!dimFromMovementSelectedDimFields)
        {
            dimFromMovementSelectedDimFields = _movementReservation.inventdim().toDimParm().selectedDimFields();
        }

        return dimFromMovementSelectedDimFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFromCriteriaSelectedDimFields</Name>
				<Source><![CDATA[
    private List dimFromCriteriaSelectedDimFields()
    {
        if (!dimFromCriteriaSelectedDimFields)
        {
            dimFromCriteriaSelectedDimFields = this.parmInventDimFromCriteria().toDimParm().selectedDimFields();
        }

        return dimFromCriteriaSelectedDimFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReservedNotMarkedQty</Name>
				<Source><![CDATA[
    private InventQty calculateReservedNotMarkedQty(
        InventDim       _inventDimTransSearch, 
        InventDimParm   _inventDimParmTransSearch)
    {
        InventTrans inventTransReservedNotMarked;
        InventDim inventDimJoin;
        select sum(Qty) from inventTransReservedNotMarked
            where inventTransReservedNotMarked.inventTransOrigin == inventTransOriginMarkFrom.RecId            
            && (inventTransReservedNotMarked.StatusIssue == StatusIssue::ReservOrdered
            || inventTransReservedNotMarked.StatusIssue == StatusIssue::ReservPhysical)
            && inventTransReservedNotMarked.MarkingRefInventTransOrigin == 0
        #InventDimExistsJoin(inventTransReservedNotMarked.inventDimId, inventDimJoin, _inventDimTransSearch, _inventDimParmTransSearch);

        return inventTransReservedNotMarked.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOnOrderNotMarkedQty</Name>
				<Source><![CDATA[
    private InventQty calculateOnOrderNotMarkedQty()
    {
        InventTrans inventTransOnOrderNotMarked;
        select sum(Qty) from inventTransOnOrderNotMarked
            where inventTransOnOrderNotMarked.inventTransOrigin == inventTransOriginMarkFrom.RecId
            && inventTransOnOrderNotMarked.StatusIssue == StatusIssue::OnOrder
            && inventTransOnOrderNotMarked.MarkingRefInventTransOrigin == 0;
        
        return inventTransOnOrderNotMarked.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMovementBeReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if reservations can be made for a movement.
    /// </summary>
    /// <param name = "_movement">A movement.</param>
    /// <returns>true if reservation can be made; otherwise, false.</returns>
	public boolean canMovementBeReserved(InventMovement _movement)
    {
        return (_movement
            && _movement.canBeReserved()
            && _movement.transSign() < 0);
	}

]]></Source>
			</Method>
			<Method>
				<Name>reserveBasedOnMarkingRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attemps to do a reservation based on the dimensions and quantities from the <c>TmpInventTransMark</c> buffer.
    /// </summary>
    /// <param name = "tmpInventTransMarkLocal">
    /// A <c>TmpInventTransMark</c> buffer.
    /// </param>
    /// <returns>
    /// The result of the reservation. If no reservation is done the InventDimFromCriteria is returned in the result.
    /// </returns>
    public InventMarkingReservationResult reserveBasedOnMarkingRequest(TmpInventTransMark tmpInventTransMarkLocal)
    {
        InventDim inventDimReserve;
        boolean reservationAttemptFailed = false;

        //exit early if we can determine that this will not lead to a reservation
        if ((tmpInventTransMarkLocal.qtyMarkNow * tmpInventTransMarkLocal.QtyMarked < 0)
            || tmpInventTransMarkLocal.QtyOrderedNotMarked == 0) 
        {
            return InventMarkingReservationResult::newResult(reservationAttemptFailed, inventDimFromCriteria);
        }

        InventMovement movementReservation = this.movement();
        
        if (this.canMovementBeReserved(movementReservation))
        {
            InventQty onOrderQtyNotMarked = this.calculateOnOrderNotMarkedQty();

            if (onOrderQtyNotMarked < 0)
            {
                //we create a dim that includes all from the receipt that is not a criteria for the issue 
                InventDim inventDimFromReceipt = InventDim::find(tmpInventTransMarkLocal.InventDimId);
                inventDimReserve.initFromInventDim(inventDimFromReceipt);
                inventDimReserve.initFromInventDim(inventDimFromCriteria, this.dimFromCriteriaSelectedDimFields());
                // add dimensions that are defined on the movement
                inventDimReserve.initFromInventDim(movementReservation.inventdim(), this.dimFromMovementSelectedDimFields(movementReservation));
                
                inventDimReserve = InventDim::findOrCreate(inventDimReserve);
                //allow for special adjustment of reservations for WHS
                inventDimReserve = movementReservation.getInventDimForIssueTransFromReceipt(inventDimReserve, inventDimReserve);

                InventDimParm dimParmReserve;
                dimParmReserve.initFromInventDim(inventDimReserve);
                InventQty preReservedNotMarkedQty = this.calculateReservedNotMarkedQty(inventDimReserve, dimParmReserve);
                InventQty possibleReserveOrdered = min(tmpInventTransMarkLocal.qtyMarkNow, tmpInventTransMarkLocal.QtyOrderedNotMarked);
                InventQty notReservedMarkNowQty = possibleReserveOrdered + preReservedNotMarkedQty;//preReservedNotMarkedQty is negative
                
                if (notReservedMarkNowQty > 0)
                {
                    InventQty reserveNow = -min(-onOrderQtyNotMarked, notReservedMarkNowQty);
                    
                    InventUpd_Reservation updReservation = InventUpd_Reservation::newMovement(movementReservation, reserveNow, true);
                    InventDim transSelectionDimCriteria;
                    transSelectionDimCriteria.initFromInventDim(inventDimFromCriteria);
                    transSelectionDimCriteria.initFromInventDim(movementReservation.inventdim(), this.dimFromMovementSelectedDimFields(movementReservation));
                    
                    //selection of transactions to update is different from selecting the on-hand
                    updReservation.parmInventDimCriteria(transSelectionDimCriteria);
                    updReservation.parmInventDimParm(dimParmReserve);
                    updReservation.parmInventDimOnHandSelectionCriteria(inventDimReserve);
                    //we should not fix on all dimensions, only those from the issue movement
                    updReservation.parmInventDimFixed(this.inventDimFixed(movementReservation));
                    updReservation.updateNow();

                    InventQty postReservedNotMarkedQty = this.calculateReservedNotMarkedQty(inventDimReserve, dimParmReserve);

                    if (postReservedNotMarkedQty != preReservedNotMarkedQty + reserveNow)
                    {
                        reservationAttemptFailed = true;
                    }
                }                    
            }                
        }
        else
        {
            inventDimReserve = inventDimFromCriteria;
        }

        return InventMarkingReservationResult::newResult(reservationAttemptFailed, inventDimReserve);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>