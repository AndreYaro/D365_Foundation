<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqLogVisualizationDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Builds the structure of activities used to track the progress of MRP runs on a Gantt chart.
/// </summary>
[SysTestTarget(classStr(ReqLogVisualizationDataProvider), UtilElementType::Class),
SysTestGranularity(SysTestGranularity::Unit)]
internal final class ReqLogVisualizationDataProvider
{
    private List activities;
    private List links;
    private StartDateTime fromDatetime;
    private EndDateTime toDateTime;

    private Common targetRecord;
    private ReqLog referenceLog;
    private int activityCount;
    private StartDateTime targetStartDateTime;
    private GanttControlActivity currentActivity;
    private GanttControlSummaryActivity currentStatusActivity;
    private GanttControlSummaryActivity currentLevelActivity;

    private ReqProcessStatus previousStatus;
    private BOMLevel previousLevel;

    private boolean hasRunCompleted = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(Common _targetRecord, ReqLog _referenceLog)
    {
        targetRecord = _targetRecord;
        referenceLog = _referenceLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the class.
    /// </summary>
    /// <param name = "_targetRecord">The record representing a run to visualize. It can be an instance of <c>ReqLog</c>, <c>ReqProcessList</c> or <c>ReqProcessTmpList</c>.</param>
    /// <param name = "_referenceLog">A <c>ReqLog</c> buffer representing an additional historical run to add to visualization.</param>
    /// <returns></returns>
    public static ReqLogVisualizationDataProvider construct(Common _targetRecord, ReqLog _referenceLog)
    {
        return new ReqLogVisualizationDataProvider(_targetRecord, _referenceLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCurrentRun</Name>
				<Source><![CDATA[
    private void loadCurrentRun(ReqProcessId _processId, ReqPlanId _planId, ReqCalcUpdate _updateType, ReqLog _referenceLog)
    {
        if (!this.loadReqProcessList(_processId, _planId, _updateType, _referenceLog))
        {
            
            // Run completed, no bundles exist anymore. Load ReqLog instead.
            hasRunCompleted = true;
            ReqLog reqLog;

            select firstonly reqLog where reqLog.ProcessId == _processId;

            if (reqLog)
            {
                targetStartDateTime = reqLog.StartDateTime;
                this.loadReqLog(reqLog);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the data associated with the selected MRP runs and populates all internal data structures based on that.
    /// </summary>
    public void prepareData()
    {
        activities = new List(Types::Class);
        links = new List(Types::Class);
        
        fromDatetime = DateTimeUtil::maxValue();
        toDateTime = DateTimeUtil::minValue();

        activityCount = 100;

        if (targetRecord.TableId == tableNum(ReqLog))
        {
            ReqLog reqLog = targetRecord;
            targetStartDateTime = reqLog.StartDateTime;

            this.loadReqLog(reqLog);
        }
        else if (targetRecord.TableId == tableNum(ReqProcessList))
        {
            ReqProcessList processList = targetRecord;
            this.loadCurrentRun(processList.ProcessId, processList.ReqPlanId, processList.ReqCalcUpdate, referenceLog);
        }
        else if (targetRecord.TableId == tableNum(ReqProcessTmpList))
        {
            ReqProcessTmpList processList = targetRecord;
            this.loadCurrentRun(processList.ProcessId, processList.ReqPlanId, processList.ReqCalcUpdate, referenceLog);
        }

        if (referenceLog)
        {
            this.loadReqLog(referenceLog, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRootActivity</Name>
				<Source><![CDATA[
    private GanttControlSummaryActivity buildRootActivity(str title)
    {
        GanttControlSummaryActivity rootActivity = new GanttControlSummaryActivity();
        rootActivity.parmShowBar(true);
        rootActivity.parmUseSimpleText(true);

        rootActivity.parmId(strFmt('%1', activityCount));
        rootActivity.parmText(title);
        rootActivity.parmTooltipText(rootActivity.parmText());
        rootActivity.parmIsActive(true);
        rootActivity.parmIsHighlighted(false);
        rootActivity.parmSequenceNumber(activityCount);

        activityCount++;

        activities.addEnd(rootActivity);

        return rootActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStatusActivity</Name>
				<Source><![CDATA[
    private GanttControlSummaryActivity buildStatusActivity(GanttControlSummaryActivity _parentActivity, ReqProcessStatus _status)
    {
        GanttControlSummaryActivity statusActivity = new GanttControlSummaryActivity();
        statusActivity.parmShowBar(true);
        statusActivity.parmSummaryType(GanttControlSummaryType::SummaryBar);
        statusActivity.parmUseSimpleText(true);

        statusActivity.parmId(strFmt('%1', activityCount));
        statusActivity.parmText(strFmt('%1', _status));
        statusActivity.parmParentId(_parentActivity.parmId());
        statusActivity.parmTooltipText(statusActivity.parmText());
        statusActivity.parmIsActive(true);
        statusActivity.parmIsHighlighted(false);
        statusActivity.parmCollapsed(true);
        statusActivity.parmSequenceNumber(activityCount);
        activities.addEnd(statusActivity);
        activityCount++;

        currentLevelActivity = null;

        return statusActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLevelActivity</Name>
				<Source><![CDATA[
    private GanttControlSummaryActivity buildLevelActivity(GanttControlSummaryActivity _parentActivity, BOMLevel _level)
    {
        GanttControlSummaryActivity statusActivity = new GanttControlSummaryActivity();
        statusActivity.parmShowBar(true);
        statusActivity.parmSummaryType(GanttControlSummaryType::SummaryBar);
        statusActivity.parmUseSimpleText(true);

        statusActivity.parmId(strFmt('%1', activityCount));
        statusActivity.parmText(strFmt("@SYS335841", _level));
        statusActivity.parmParentId(_parentActivity.parmId());
        statusActivity.parmTooltipText(statusActivity.parmText());
        statusActivity.parmIsActive(true);
        statusActivity.parmIsHighlighted(false);
        statusActivity.parmCollapsed(true);
        statusActivity.parmSequenceNumber(activityCount);
        activities.addEnd(statusActivity);
        activityCount++;

        return statusActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDetailedActivity</Name>
				<Source><![CDATA[
    private GanttControlActivity buildDetailedActivity(str title, StartDateTime _startDateTime, EndDateTime _endDateTime, percent _completionPct = 100)
    {
        GanttControlTaskActivity newActivity = new GanttControlTaskActivity();
        newActivity.parmId(strFmt('%1', activityCount));
        newActivity.parmText(title);
        newActivity.parmFromDateTime(_startDateTime);
        newActivity.parmParentId(currentLevelActivity != null ? currentLevelActivity.parmId() : currentStatusActivity.parmId());
        newActivity.parmTooltipText(strFmt("@SYS54206", DateTimeUtil::getDifference(_endDateTime, _startDateTime)));
        newActivity.parmIsActive(true);
        newActivity.parmIsHighlighted(false);
        newActivity.parmSequenceNumber(activityCount);
        newActivity.parmToDateTime(_endDateTime);
        newActivity.parmCompletionPct(_completionPct);
        newActivity.parmStyle().parmColor(KanbanBoardController::hex2color('ff00FF'));
        newActivity.parmAllowMove(false);
        newActivity.parmAllowResize(false);
        newActivity.parmAllowCompletionChange(false);
        newActivity.parmSequenceNumber(activityCount);
        newActivity.parmIsActive(_completionPct > 0);

        List columnTexts = new List(Types::String);
        columnTexts.addEnd(title);

        newActivity.parmColumnTexts(columnTexts);

        activities.addEnd(newActivity);

        activityCount++;

        if (currentActivity)
        {
            GanttControlLink link = new GanttControlLink();
            link.parmId(strFmt('%1-%2', currentActivity.parmId(), newActivity.parmId()));
            link.parmFromActivityId(currentActivity.parmId());
            link.parmToActivityId(newActivity.parmId());
            link.parmLinkType(GanttLinkType::FS);
            links.addEnd(link);
        }
        
        return newActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailedStructure</Name>
				<Source><![CDATA[
    private container getDetailedStructure(ReqProcessStatus _status, ReqLevelState _levelState)
    {
        ReqProcessStatus mainStage;
        boolean isPerLevel = false;
        boolean useStatusName = true;
        boolean useLevelName = false;

        if (_status < ReqProcessStatus::PreUpdate)
        {
            mainStage = ReqProcessStatus::Initialising;
            isPerLevel = false;
            useStatusName = true;
        }
        else if (_status < ReqProcessStatus::PreCoverage)
        {
            mainStage = ReqProcessStatus::Update;
            isPerLevel = false;
            useStatusName = true;
        }
        else if (_status < ReqProcessStatus::PreFutures)
        {
            mainStage = ReqProcessStatus::Coverage;
            isPerLevel = _status == mainStage;
            useStatusName = !isPerLevel;
        }
        else if (_status < ReqProcessStatus::PreAction)
        {
            mainStage = ReqProcessStatus::Futures;
            isPerLevel = _status == mainStage;
            useStatusName = !isPerLevel;
        }
        else if (_status < ReqProcessStatus::PreAutoCoverage)
        {
            mainStage = ReqProcessStatus::Actions;
            isPerLevel = false;
            useStatusName = _status != mainStage;
            useLevelName = !useStatusName;
        }
        else if (_status < ReqProcessStatus::AutoFirming)
        {
            mainStage = ReqProcessStatus::PlanFinalization;
            isPerLevel = false;
            useStatusName = true;
        }
        else
        {
            mainStage = ReqProcessStatus::AutoFirming;
            isPerLevel = (_levelState == ReqLevelState::ScheduleResources) || (_levelState == ReqLevelState::FinalizeLevel);
            useStatusName = false;
        }

        return [mainStage, isPerLevel, useStatusName, useLevelName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActivityStructure</Name>
				<Source><![CDATA[
    private void buildActivityStructure(GanttControlSummaryActivity _rootActivity,
        ReqProcessStatus _status,
        BOMLevel _level,
        ReqLevelState _levelState,
        StartDateTime _startDateTime,
        EndDateTime _endDateTime,
        percent _completionPct)
    {
        ReqProcessStatus currentStatus;
        boolean isPerLevel;
        boolean useStatusName;
        boolean useLevelName;

        [currentStatus, isPerLevel, useStatusName, useLevelName] = this.getDetailedStructure(_status, _levelState);

        if (currentStatus != previousStatus)
        {
            currentStatusActivity = this.buildStatusActivity(_rootActivity, currentStatus);
            previousStatus = currentStatus;
        }

        if (!isPerLevel)
        {
            currentLevelActivity = null;
        }
        else if (!currentLevelActivity || (previousLevel != _level))
        {
            currentLevelActivity = this.buildLevelActivity(currentStatusActivity, _level);
            previousLevel = _level;
        }

        str title = useLevelName ? strFmt("@SYS335841", _level) : useStatusName ? enum2Str(_status) : enum2Str(_levelState);

        currentActivity = this.buildDetailedActivity(title, _startDateTime, _endDateTime, _completionPct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReqLog</Name>
				<Source><![CDATA[
    private void loadReqLog(ReqLog _reqLog, boolean _markInactive = false)
    {
        previousStatus = ReqProcessStatus::Ended;
        previousLevel = 0;

        Timezone timezone = DateTimeUtil::getUserPreferredTimeZone();
        StartDateTime dateInCurrentTimeZone = DateTimeUtil::applyTimeZoneOffset(_reqLog.StartDateTime, timezone);

        GanttControlSummaryActivity rootActivity = this.buildRootActivity(strFmt('%1-%2', _reqLog.ReqPlanId, dateInCurrentTimeZone));
        currentStatusActivity = null;
        currentActivity = null;

        int64 secondAdjustment = DateTimeUtil::getDifference(targetStartDateTime, _reqLog.StartDateTime);

        ReqLogTaskStatistics stats;

        while select stats
            order by stats.Status, stats.Level, stats.LevelState
            where stats.ReqLog == _reqLog.RecId
        {
            if (stats.Status == ReqProcessStatus::Statistics)
            {
                continue;
            }

            StartDateTime startDateTime = DateTimeUtil::addSeconds(stats.StartTime, secondAdjustment);
            EndDateTime endDateTime = DateTimeUtil::addSeconds(stats.EndTime, secondAdjustment);

            fromDatetime = min(fromDatetime, startDateTime);
            toDateTime = max(toDatetime, endDateTime);

            this.buildActivityStructure(rootActivity, stats.Status, stats.Level, stats.LevelState, startDateTime, endDateTime, _markInactive ? 0 : 100);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortingKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the fields used for identifying a single MRP stage into a single number that can be used for sorting.
    /// </summary>
    /// <param name = "_Status">MRP status.</param>
    /// <param name = "_level">BOM Level.</param>
    /// <param name = "_levelState">BOM level state.</param>
    /// <returns></returns>
    private int sortingKey(ReqProcessStatus _status, BOMLevel _level, ReqLevelState _levelState)
    {
        const int maxBOMLevel = 1500; // Currently we allow for max BOM level to be 999, but we also add a few fake levels on top of that.
        const int doubleMaxBOMLevel = 2 * maxBOMLevel; // BOM levels can be expressed as negative values for some stages, so we need to double the range.
        const int maxLevelState = 100; // Currently the highest value of the num is 60 + some room to grow.

        return enum2int(_levelState) + (maxBOMLevel + _level) * maxLevelState + doubleMaxBOMLevel * maxLevelState * enum2int(_status);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadHistoricalData</Name>
				<Source><![CDATA[
    private void loadHistoricalData(ReqLog _referenceReqLog, Map _mergedData)
    {
        ReqLogTaskStatistics stats;
        ReqLogVisualizationEstimationData previousData;

        while select stats
            order by stats.Status, stats.Level, stats.LevelState
            where stats.ReqLog == _referenceReqLog.RecId
        {
            int key = this.sortingKey(stats.Status, stats.Level, stats.LevelState);

            ReqLogVisualizationEstimationData dataPoint = new ReqLogVisualizationEstimationData();
            dataPoint.status = stats.Status;
            dataPoint.level = stats.Level;
            dataPoint.levelState = stats.LevelState;
            datapoint.historicalDuration = DateTimeUtil::getDifference(stats.EndTime, stats.StartTime);
            dataPoint.historicalEndTime = DateTimeUtil::getDifference(stats.EndTime, _referenceReqLog.StartDateTime);

            if(previousData)
            {
                datapoint.historicalDuration += DateTimeUtil::getDifference(stats.StartTime, _referenceReqLog.StartDateTime) - previousData.historicalEndTime;
            }

            _mergedData.insert(key, dataPoint);

            previousData = dataPoint;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCurrentBundles</Name>
				<Source><![CDATA[
    private boolean loadCurrentBundles(ReqProcessId _processId, Map _mergedData)
    {
        ReqCalcTasksBundle bundle;
        targetStartDateTime = DateTimeUtil::maxValue();

        boolean bundleFound = false;

        // Load the task bundles for current run.
        while select Status, Level, LevelState, minof(StartTime), maxof(EndTime), count(RecId) from bundle
                group by ProcessingState, Status, Level, LevelState
                where bundle.ProcessDataAreaId == curext() && bundle.ProcessId == _processId
        {
            bundleFound = true;

            ReqLogVisualizationEstimationData dataPoint;
            int key = this.sortingKey(bundle.Status, bundle.Level, bundle.LevelState);

            if (_mergedData.exists(key))
            {
                dataPoint = _mergedData.lookup(key);
            }
            else
            {
                dataPoint = new ReqLogVisualizationEstimationData();
                dataPoint.status = bundle.Status;
                dataPoint.level = bundle.Level;
                dataPoint.levelState = bundle.LevelState;
                _mergedData.insert(key, dataPoint);
            }

            switch (bundle.ProcessingState)
            {
                case ReqCalcTaskState::Ended:
                    targetStartDateTime = min(targetStartDateTime, bundle.StartTime);
                    dataPoint.completedBundles = bundle.RecId;
                    dataPoint.actualStartDateTime = bundle.StartTime;
                    dataPoint.actualEndDateTime = bundle.EndTime;
                    break;
                case ReqCalcTaskState::Processing:
                    targetStartDateTime = min(targetStartDateTime, bundle.StartTime);
                    dataPoint.processingBundles = bundle.RecId;
                    break;
                case ReqCalcTaskState::Waiting:
                    dataPoint.waitingBundles = bundle.RecId;
                    break;
            }
        }

        return bundleFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimateAndBuildActivities</Name>
				<Source><![CDATA[
    private void estimateAndBuildActivities(Map _mergedData)
    {
        GanttControlSummaryActivity rootActivity = this.buildRootActivity("@SCM:ReqLogVisualizeCurrentRun");
        ReqLogVisualizationEstimationData previousData;
        MapEnumerator enumerator = _mergedData.getEnumerator();

        real ratio = 1; //Ratio of the current runtime/historical runtime for the same stages of MRP.
        boolean isFirstNotFinished = false;
        boolean firstNotFinishedFound = false;

        while(enumerator.moveNext())
        {
            isFirstNotFinished = false;
            percent percentageCompleted = 0;

            ReqLogVisualizationEstimationData data = enumerator.currentValue();

            if (data.status == ReqProcessStatus::Statistics)
            {
                continue;
            }

            // Update the ratio.
            if (previousData && previousData.historicalEndTime)
            {
                real actualRuntime = DateTimeUtil::getDifference(previousData.actualEndDateTime, targetStartDateTime);
                ratio = max(ratio, actualRuntime / previousData.historicalEndTime);
            }

            if (data.completedbundles)
            {
                // For completed stages, just use the actual runtimes.
                if (!data.processingBundles && !data.waitingBundles)
                {
                    data.estimatedStartDateTime = data.actualStartDateTime;
                    data.estimatedEndDateTime = data.actualEndDateTime;
                    percentageCompleted = 100;
                }
                else
                {
                    // For in progress stages, ues the max of ratio * historical runtime and estimate based on current runtime + remaining bundles.
                    real actualDataRuntime = DateTimeUtil::getDifference(data.actualEndDateTime, data.actualStartDateTime);
                    real estimatedDataRuntime = max(ratio * data.historicalDuration, actualDataRuntime * (data.completedbundles + data.processingBundles + data.waitingBundles) / data.completedBundles);

                    data.estimatedStartDatetime = data.actualStartDateTime;
                    data.estimatedEndDateTime = DateTimeUtil::addSeconds(data.actualStartDateTime, any2Int64(estimatedDataRuntime));
                    percentageCompleted = 100 * actualDataRuntime / (estimatedDataRuntime ? estimatedDataRuntime : 1);

                    firstNotFinishedFound = true;
                    isFirstNotFinished = true;
                }
            }
            else
            {
                // If the stage has not been started yet, use historical time * ratio.
                if (!firstNotFinishedFound)
                {
                    firstNotFinishedFound = true;
                    isFirstNotFinished = true;
                }

                data.estimatedStartDatetime = previousData ? previousData.estimatedEndDateTime : targetStartDateTime;
                data.estimatedEndDateTime = DateTimeUtil::addSeconds(data.estimatedStartDatetime, any2Int64(ratio * data.historicalDuration));
            }

            fromDatetime = min(fromDatetime, data.estimatedStartDatetime);
            toDateTime = max(toDatetime, data.estimatedEndDateTime);

            this.buildActivityStructure(rootActivity, data.Status, data.Level, data.LevelState, data.estimatedStartDatetime, data.estimatedEndDateTime, percentageCompleted);

            if (isFirstNotFinished)
            {
                currentActivity.parmIsHighlighted(true);
                currentStatusActivity.parmCollapsed(false);
                if (currentLevelActivity)
                {
                    currentLevelActivity.parmCollapsed(false);
                }
            }

            previousData = data;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReqProcessList</Name>
				<Source><![CDATA[
    private boolean loadReqProcessList(ReqProcessId _processId, ReqPlanId _planId, ReqCalcUpdate _update, ReqLog _referenceReqLog)
    {
        previousStatus = ReqProcessStatus::Ended;
        previousLevel = 0;

        ReqLog referenceReqLog;

        if (_referenceReqLog)
        {
            referenceReqLog = _referenceReqLog;
        }
        else
        {
            select firstonly referenceReqLog
                order by RecId desc
                where referenceReqLog.ReqPlanId == _planId
                &&  referenceReqLog.ReqCalcUpdate == _update;
        }

        Map mergedData = new Map(Types::Integer, Types::Class);

        this.loadHistoricalData(referenceReqLog, mergedData);

        ReqCalcTasksBundle bundle;
        targetStartDateTime = DateTimeUtil::maxValue();

        if (!this.loadCurrentBundles(_processId, mergedData))
        {
            return false;
        }

        this.estimateAndBuildActivities(mergedData);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivities</Name>
				<Source><![CDATA[
    public List getActivities()
    {
        return activities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinks</Name>
				<Source><![CDATA[
    public List getLinks()
    {
        return links;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDateTime</Name>
				<Source><![CDATA[
    public StartDateTime getFromDateTime()
    {
        return fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDatetime</Name>
				<Source><![CDATA[
    public EndDateTime getToDatetime()
    {
        return toDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRunCompleted</Name>
				<Source><![CDATA[
    internal boolean isRunCompleted()
    {
        return hasRunCompleted;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>