<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductVariantReleaseManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EcoResVariantReleaseManager</c> class is responsible for releasing product variants to the
///    valid entities.
/// </summary>
class EcoResProductVariantReleaseManager extends EcoResProductReleaseManagerBase
{
    ItemId  productMasterItemId;
    boolean skipDistinctProductVariantValidation;

    private EcoResInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findProductVariantColorName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the color name of the product to be released.
    /// </summary>
    /// <returns>
    ///    The <c>EcoResItemColorName</c> value of the color of the product variant to be released.
    /// </returns>
    [SysObsolete('Use InventProductDimension.findDimensionNameByProductId method instead.', false, 30\11\2017)]
    protected EcoResItemColorName findProductVariantColorName()
    {
        EcoResColor                             ecoResColor;
        EcoResProductVariantColor               ecoResProductVariantColor;
        RefRecId                                productDimensionAttribute;

        productDimensionAttribute   = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, InventColorId));

        select firstonly Name
            from        ecoResColor
            exists join ecoResProductVariantColor
                where   ecoResProductVariantColor.Color                                     == ecoResColor.RecId
                    &&  ecoResProductVariantColor.ProductDimensionAttribute                 == productDimensionAttribute
                    &&  ecoResProductVariantColor.DistinctProductVariant                    == ecoResProduct.RecId;

        return ecoResColor.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProductVariantConfigurationName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the configuration name of the product to be released.
    /// </summary>
    /// <returns>
    ///    The <c>EcoResItemConfigurationName</c> value of the configuration of the product variant to be
    ///    released.
    /// </returns>
    [SysObsolete('Use InventProductDimension.findDimensionNameByProductId method instead.', false, 30\11\2017)]
    protected EcoResItemConfigurationName findProductVariantConfigurationName()
    {
        EcoResConfiguration                     ecoResConfiguration;
        EcoResProductVariantConfiguration       ecoResProductVariantConfiguration;
        RefRecId                                productDimensionAttribute;

        productDimensionAttribute   = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId));

        select firstonly Name
            from        ecoResConfiguration
            exists join ecoResProductVariantConfiguration
                where   ecoResProductVariantConfiguration.Configuration                 == ecoResConfiguration.RecId
                    &&  ecoResProductVariantConfiguration.ProductDimensionAttribute     == productDimensionAttribute
                    &&  ecoResProductVariantConfiguration.DistinctProductVariant        == ecoResProduct.RecId;

        return ecoResConfiguration.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProductVariantSizeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the size name of the product to be released.
    /// </summary>
    /// <returns>
    ///    The <c>EcoResItemSizeName</c> value of the color of the product variant to be released.
    /// </returns>
    [SysObsolete('Use InventProductDimension.findDimensionNameByProductId method instead.', false, 30\11\2017)]
    protected EcoResItemSizeName findProductVariantSizeName()
    {
        EcoResSize                              ecoResSize;
        EcoResProductVariantSize                ecoResProductVariantSize;
        RefRecId                                productDimensionAttribute;

        productDimensionAttribute   = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, InventSizeId));

        select firstonly Name
            from        ecoResSize
            exists join ecoResProductVariantSize
                where   ecoResProductVariantSize.Size                           == ecoResSize.RecId
                    &&  ecoResProductVariantSize.ProductDimensionAttribute      == productDimensionAttribute
                    &&  ecoResProductVariantSize.DistinctProductVariant         == ecoResProduct.RecId;

        return ecoResSize.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProductVariantStyleName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the style name of the product to be released.
    /// </summary>
    /// <returns>
    ///    The <c>EcoResItemStyleName</c> value of the color of the product variant to be released.
    /// </returns>
    [SysObsolete('Use InventProductDimension.findDimensionNameByProductId method instead.', false, 30\11\2017)]
    protected EcoResItemStyleName findProductVariantStyleName()
    {
        EcoResStyle                             ecoResStyle;
        EcoResProductVariantStyle               ecoResProductVariantStyle;
        RefRecId                                productDimensionAttribute;

        productDimensionAttribute   = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, InventStyleId));

        select firstonly Name
            from        ecoResStyle
            exists join ecoResProductVariantStyle
                where   ecoResProductVariantStyle.Style                                     == ecoResStyle.RecId
                    &&  ecoResProductVariantStyle.ProductDimensionAttribute                 == productDimensionAttribute
                    &&  ecoResProductVariantStyle.DistinctProductVariant                    == ecoResProduct.RecId;

        return ecoResStyle.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productMasterItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the related item ID.
    /// </summary>
    /// <returns>
    ///    The related item ID.
    /// </returns>
    protected ItemId productMasterItemId()
    {
        InventTable                     inventTable;

        if (!productMasterItemId)
        {
            EcoResDistinctProductVariant ecoResDistinctProductVariant = ecoResProduct as EcoResDistinctProductVariant;
            //No crosscompany as the calling code executes changecompany first
            select firstonly ItemId, ProductLifecycleStateId
                from    inventTable
                where   inventTable.Product == ecoResDistinctProductVariant.ProductMaster;

            productMasterItemId = inventTable.ItemId;

            if (!isDefaultProductLifecycleStateSet)
            {
                // Also initialize the default product lifecycle state from the released master
                this.parmDefaultProductLifecycleState(inventTable.ProductLifecycleStateId);
            }
        }

        return productMasterItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>release</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases the product variant to the legal entity.
    /// </summary>
    public void release()
    {
        InventDim                       inventDim;
        InventDimCombination            inventDimCombination;

        using (var releaseProductActivityContext = this.logger().variants().release())
        {
            this.logger().logProductInformation(legalEntity, ecoResProduct.RecId);

            changecompany (CompanyInfo::find(false, legalEntity).DataArea)
            {
                EcoResDistinctProductVariant ecoResDistinctProductVariant = ecoResProduct as EcoResDistinctProductVariant;

                ItemId masterItemId = this.productMasterItemId();
                // throw exception of product master is not released
                if (!masterItemId)
                {
                    throw error("@SYS321270");
                }

                Enumerator productDimensionsEnumerator = InventProductDimension::getEnumeratorForEnabledDimensions();

                while (productDimensionsEnumerator.moveNext())
                {
                    InventProductDimension productDimension = productDimensionsEnumerator.current();
                    inventDim.(productDimension.parmInventDimFieldId()) = productDimension.retrieveDimensionNaturalKeyByProductId(ecoResProduct.RecId);
                }

                inventDim               = InventDim::findOrCreate(inventDim);

                // check if item is already existing before trying to insert it.
                inventDimCombination = InventDimCombination::find(masterItemId, inventDim.inventDimId, false);
                if(inventDimCombination.RecId != 0)
                {
                    error(strFmt("@SCM:ProductVariantAlreadyReleasedError", ecoResDistinctProductVariant.DisplayProductNumber));
                    throw Exception::DuplicateKeyException;
                }
                else
                {
                    // create InventDimCombination
                    inventDimCombination.clear();
                    inventDimCombination.DistinctProductVariant = ecoResDistinctProductVariant.RecId;
                    inventDimCombination.ItemId                 = masterItemId;
                    inventDimCombination.InventDimId            = inventDim.InventDimId;
                    inventDimCombination.ProductLifecycleStateId = this.parmDefaultProductLifecycleState();
                    inventDimCombination.insert(skipDistinctProductVariantValidation);

                    this.postRelease();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRelease</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void postRelease()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductVariantReleaseManager construct()
    {
        return new EcoResProductVariantReleaseManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipDistinctProductVariantValidation</Name>
				<Source><![CDATA[
    public boolean parmSkipDistinctProductVariantValidation(boolean _skipDistinctProductVariantValidation = skipDistinctProductVariantValidation)
    {
        skipDistinctProductVariantValidation = _skipDistinctProductVariantValidation;
        return skipDistinctProductVariantValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private EcoResInstrumentationLogger logger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = EcoResInstrumentationLogger::createLogger(classStr(EcoResProductVariantReleaseManager));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>