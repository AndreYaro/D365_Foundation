<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateFormBudgetPlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateFormBudgetPlan</c> class supports the business logic of the <c>BudgetPlanGenerateService</c> form.
/// </summary>
public class BudgetPlanGenerateFormBudgetPlan extends BudgetPlanGenerateForm
{
    FormReferenceGroupControl           sourceBudgetPlanBudgetPlanningProcess;
    FormReferenceGroupControl           sourceBudgetPlanDocumentNumber;
    FormStringControl                   sourceBudgetPlanName;
    FormStringControl                   sourceBudgetPlanScenario;
    FormGroupControl                    sourceBudgetPlanBudgetPlanGroup;
    FormGroupControl                    sourceBudgetPlanBudgetPlanProcessGroup;
    BudgetingOrganizationRecId          budgetingOrganizationRecId;
    FormGroupControl                    sourceBudgetPlanTransferTotalGroup;
    FormComboBoxControl                 sourceBudgetPlanTransferTotal;
    FormComboBoxControl                 targetGenJourHistorical;
    FormGroupControl                    targetBudgetPlanFinancialDimensionGroup;
    DimensionEntryControl               dimensionEntryValues;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initControlSet</Name>
				<Source><![CDATA[
    protected void initControlSet()
    {
        super();

        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanBudgetPlanningProcess));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanDocumentNumber));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanName));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanScenario));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanBudgetPlanGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanBudgetPlanProcessGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotalGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetGenJourHistorical));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetBudgetPlanFinancialDimensionGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, DimensionEntryValues));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method initializes the dimension entry control on the <c>BudgetPlanGenerateFormBudgetPlan</c> form.
    /// </summary>
    /// <param name="_formRun">
    ///     The <c>FormRun</c> object to initialize the <c>DimensionEntryControl</c> class.
    /// </param>
    /// <param name="_budgetPlanGenerateContract">
    ///     The <c>BudgetPlanGenerateContract</c> object from the form.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Throws WrongUseOfFunction if either parameter is not set or if the BudgetPlanGenerateContract is not of type BudgetPlanGenerateContractBudgetPlan.
    /// </exception>
    private void initDimensionEntry(FormRun _formRun, BudgetPlanGenerateContract _budgetPlanGenerateContract)
    {
        #Budget

        BudgetPlanGenerateContractBudgetPlan budgetPlanGenerateContractBudgetPlan = _budgetPlanGenerateContract as BudgetPlanGenerateContractBudgetPlan;

        if (!_formRun || !_budgetPlanGenerateContract)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        dimensionEntryValues.parmNonActiveValueErrorTolerance(ErrorTolerance::Error);
        dimensionEntryValues.parmDisplayValues(true);
        dimensionEntryValues.parmCompany(curext());

        dimensionEntryValues.reactivate();
        dimensionEntryValues.loadAttributeValueSet(budgetPlanGenerateContractBudgetPlan.parmTargetDimensionDefault());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForm</Name>
				<Source><![CDATA[
    public void initForm(FormRun _formRun)
    {
        super(_formRun);

        this.initDimensionEntry(_formRun, budgetPlanGenerateContract);

        targetBudgetPlanScenario.enabled(sourceBudgetPlanScenario.text() != BudgetPlanningConstants::emptyString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceSourceBudgetPlanDocNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the budget plan document number control.
    /// </summary>
    /// <returns>
    /// The selected <c>BudgetPlanScenario</c> record.
    /// </returns>
    public Common lookupReferenceSourceBudgetPlanDocNumber()
    {
        BudgetPlanFormHelper::validateLookupControlFilledIn(sourceBudgetPlanBudgetPlanningProcess);

        return BudgetPlan::lookupBudgetPlanHeaderReference(
                    sourceBudgetPlanDocumentNumber,
                    sourceBudgetPlanBudgetPlanningProcess.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSourceBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the budget plan scenario control.
    /// </summary>
    public void lookupSourceBudgetPlanScenario()
    {
        BudgetPlanFormHelper::validateLookupControlFilledIn(sourceBudgetPlanBudgetPlanningProcess);
        BudgetPlanFormHelper::validateLookupControlFilledIn(sourceBudgetPlanDocumentNumber);

        BudgetPlanLookupHelper::lookupBudgetPlanScenario(
                                    sourceBudgetPlanScenario,
                                    sourceBudgetPlanBudgetPlanningProcess.value(),
                                    BudgetPlanHeader::find(sourceBudgetPlanDocumentNumber.value()).Layout,
                                    0,
                                    NoYes::No,
                                    false,
                                    0,
                                    UnitOfMeasureClass::Undefined,
                                    UnitOfMeasureClass::Undefined,
                                    false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTargetBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the lookup of the budget plan scenario control.
    /// </summary>
    /// <returns>
    /// The selected <c>BudgetPlanScenario</c> record.
    /// </returns>
    public void lookupTargetBudgetPlanScenario()
    {
        boolean                     useFirstBudgetPlanningStage;
        UnitOfMeasureClass          sourceUnitOfMeasureClass;
        BudgetPlanningStageRecId    budgetPlanningStageRecId;

        // Check whether the source scenario has been selected or not.
        if (sourceBudgetPlanScenario.text() != BudgetPlanningConstants::emptyString)
        {
            sourceUnitOfMeasureClass = BudgetPlanScenario::findByLocalizedName(sourceBudgetPlanScenario.text()).UnitOfMeasureClass;
        }
        else
        {
            sourceUnitOfMeasureClass = UnitOfMeasureClass::Undefined;
        }

        BudgetPlanFormHelper::validateLookupControlFilledIn(targetBudgetPlanningProcess);
        BudgetPlanFormHelper::validateLookupControlFilledIn(targetResponsibilityCenter);

        if (targetGenJourHistorical.selection() == NoYes::No)
        {
            useFirstBudgetPlanningStage = (budgetPlanTransferTypeControl.selection() == BudgetPlanGenerateType::NewBudgetPlan);

            if (!useFirstBudgetPlanningStage)
            {
                BudgetPlanFormHelper::validateLookupControlFilledIn(targetBudgetPlanningDocumentNumber);

                // If not using the first stage, then get the current stage
                budgetPlanningStageRecId = this.getBudgetPlanningStageRecId();
            }

            BudgetPlanLookupHelper::lookupBudgetPlanScenario(
                targetBudgetPlanScenario,
                targetBudgetPlanningProcess.value(),
                0,
                targetResponsibilityCenter.value(),
                NoYes::No,
                useFirstBudgetPlanningStage,
                budgetPlanningStageRecId,
                sourceUnitOfMeasureClass);
        }
        else
        {
            // If Historical is set to yes we set everything to the last stage and make it uneditable
            // Call scenario lookup using last stage as a filter
            BudgetPlanLookupHelper::lookupBudgetPlanScenario(
                targetBudgetPlanScenario,
                targetBudgetPlanningProcess.value(),
                0,
                targetResponsibilityCenter.value(),
                NoYes::Yes,
                false,
                0,
                sourceUnitOfMeasureClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedIsHistoricalControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of target budget plan scenario on the modification of historical control.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean modifiedIsHistoricalControl()
    {
        targetBudgetPlanScenario.text(BudgetPlanningConstants::emptyString);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSourceBudgetPlanDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of <c>sourceBudgetPlanName</c> control when budget plan document number is modified.
    /// </summary>
    /// <param name="_isModified">
    /// true if the control has been modified; otherwise, false.
    /// </param>
    /// <returns>
    /// returns the boolean value that is passed in.
    /// </returns>
    public boolean modifiedSourceBudgetPlanDocumentNumber(boolean _isModified)
    {
        BudgetPlanHeader budgetPlanHeader;

        if (sourceBudgetPlanDocumentNumber.value() != 0)
        {
            budgetPlanHeader = BudgetPlanHeader::find(sourceBudgetPlanDocumentNumber.value());
        }

        if (budgetPlanHeader)
        {
            sourceBudgetPlanName.text(budgetPlanHeader.Name);
            budgetingOrganizationRecId  = budgetPlanHeader.BudgetingOrganization;
        }

        targetBudgetPlanScenario.enabled(sourceBudgetPlanScenario.text() != BudgetPlanningConstants::emptyString);

        return _isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSourceBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of ledger control on the modification of budget planning process
    /// and resets the values of scenario, document number and name conditionally on the basis of the update.
    /// </summary>
    /// <param name="_isModified">
    /// true if the control has been modified; otherwise, false.
    /// </param>
    /// <returns>
    /// returns the boolean value that is passed in.
    /// </returns>
    public boolean modifiedSourceBudgetPlanningProcess(boolean _isModified)
    {
        BudgetPlanningProcessRecId  currentBudgetPlanningProcessRecId;

        currentBudgetPlanningProcessRecId = currentBudgetPlanningProcess.RecId;
        currentBudgetPlanningProcess      = BudgetPlanningProcess::find(sourceBudgetPlanBudgetPlanningProcess.value());

        if (currentBudgetPlanningProcess)
        {
            sourceLedger.value(currentBudgetPlanningProcess.Ledger);
        }

        if (currentBudgetPlanningProcessRecId && (currentBudgetPlanningProcessRecId != currentBudgetPlanningProcess.RecId))
        {
            sourceBudgetPlanScenario.text(BudgetPlanningConstants::emptyString);
            sourceBudgetPlanDocumentNumber.value(0);
            sourceBudgetPlanName.text("");
        }

        targetBudgetPlanScenario.enabled(sourceBudgetPlanScenario.text() != BudgetPlanningConstants::emptyString);

        return _isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedSourceBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions upon modification of the source budget plan scenario.
    /// </summary>
    /// <param name="_isModified">
    /// true if the control has been modified; otherwise, false.
    /// </param>
    /// <returns>
    /// returns the boolean value that is passed in.
    /// </returns>
    public boolean modifiedSourceBudgetPlanScenario(boolean _isModified)
    {
        targetBudgetPlanScenario.enabled(sourceBudgetPlanScenario.text() != BudgetPlanningConstants::emptyString);

        return _isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveControlValue</Name>
				<Source><![CDATA[
    public void saveControlValue(FormControl _formControl)
    {
        BudgetPlanGenerateContractBudgetPlan budgetPlanGenerateContractBudgetPlan = budgetPlanGenerateContract as BudgetPlanGenerateContractBudgetPlan;

        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanBudgetPlanningProcess):
                budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanBudgetPlanProcess(sourceBudgetPlanBudgetPlanningProcess.value());
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanDocumentNumber):
                budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanHeaderRecId(sourceBudgetPlanDocumentNumber.value());
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanName) :
                budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanName(sourceBudgetPlanName.text());
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanScenario) :
                budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanScenarioRecId(BudgetPlanScenario::findByLocalizedName(sourceBudgetPlanScenario.text()).RecId);
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal) :
                budgetPlanGenerateContract.parmTargetBudgetPlanGenerateAggregateBy(sourceBudgetPlanTransferTotal.selection());
                break;

            case formControlStr(BudgetPlanGenerate, TargetGenJourHistorical) :
                budgetPlanGenerateContract.parmTargetIsHistorical(targetGenJourHistorical.selection());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanFinancialDimensionGroup):
                budgetPlanGenerateContractBudgetPlan.parmTargetDimensionDefault(dimensionEntryValues.saveAttributeValueSet());
                break;

            case formControlStr(BudgetPlanGenerate, DimensionEntryValues):
                budgetPlanGenerateContractBudgetPlan.parmTargetDimensionDefault(dimensionEntryValues.saveAttributeValueSet());
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanIsDescriptionIncluded) :
                budgetPlanGenerateContractBudgetPlan.parmSourceIsBudgetPlanDescriptionIncluded(sourceBudgetPlanIsDescriptionIncluded.value());
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanIsRevenueSummaryIncluded) :
                budgetPlanGenerateContractBudgetPlan.parmSourceIsBudgetPlanRevenueSummaryIncluded(sourceBudgetPlanIsRevenueSummaryIncluded.value());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValue</Name>
				<Source><![CDATA[
    public void setControlValue(FormControl _formControl)
    {
        BudgetPlanGenerateContractBudgetPlan budgetPlanGenerateContractBudgetPlan = budgetPlanGenerateContract as BudgetPlanGenerateContractBudgetPlan;

        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanBudgetPlanningProcess):
                sourceBudgetPlanBudgetPlanningProcess.value(budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanBudgetPlanProcess());
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanDocumentNumber):
                sourceBudgetPlanDocumentNumber.value(budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanHeaderRecId());
                this.modifiedSourceBudgetPlanDocumentNumber(true);
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanName) :
                sourceBudgetPlanName.text(budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanName());
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanScenario) :
                sourceBudgetPlanScenario.text(BudgetPlanScenarioTranslation::getLocalizedName(budgetPlanGenerateContractBudgetPlan.parmSourceBudgetPlanScenarioRecId()));
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal) :
                sourceBudgetPlanTransferTotal.selection(budgetPlanGenerateContract.parmTargetBudgetPlanGenerateAggregateBy());
                break;

            case formControlStr(BudgetPlanGenerate, TargetGenJourHistorical) :
                targetGenJourHistorical.selection(budgetPlanGenerateContract.parmTargetIsHistorical());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormControl</Name>
				<Source><![CDATA[
    protected void setFormControl(FormControl _formControl)
    {
        super(_formControl);

        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanBudgetPlanningProcess):
                sourceBudgetPlanBudgetPlanningProcess = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanDocumentNumber):
                sourceBudgetPlanDocumentNumber = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanName):
                sourceBudgetPlanName = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanScenario):
                sourceBudgetPlanScenario = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanBudgetPlanGroup) :
                sourceBudgetPlanBudgetPlanGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, sourceBudgetPlanBudgetPlanProcessGroup) :
                sourceBudgetPlanBudgetPlanProcessGroup = _formControl;
                break;
            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotalGroup) :
                sourceBudgetPlanTransferTotalGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanTransferTotal) :
                sourceBudgetPlanTransferTotal = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetGenJourHistorical) :
                targetGenJourHistorical = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanFinancialDimensionGroup):
                targetBudgetPlanFinancialDimensionGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, DimensionEntryValues):
                dimensionEntryValues = _formControl;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstructionText</Name>
				<Source><![CDATA[
    protected void setInstructionText()
    {
        str temporaryInstruction = strFmt("@GLS150364", "@SYS2163");
        instruction.text(temporaryInstruction);
        budgetPlanTransferTypeControl.helpText("@SYS4020015");
        sourceLedger.helpText("@GLS70421");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMandatoryControls</Name>
				<Source><![CDATA[
    protected void setMandatoryControls()
    {
        sourceBudgetPlanBudgetPlanningProcess.mandatory(true);
        sourceBudgetPlanDocumentNumber.mandatory(true);
        sourceBudgetPlanScenario.mandatory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    public void setVisibleControls()
    {
        super();

        sourceBudgetPlanBudgetPlanGroup.visible(true);
        sourceBudgetPlanBudgetPlanProcessGroup.visible(true);
        sourceBudgetPlanTransferTotalGroup.visible(true);
        targetbudgetClass.visible(false);
        sourceLedger.allowEdit(false);
        targetGenJourHistorical.visible(true);
        targetBudgetPlanFinancialDimensionGroup.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanClose</Name>
				<Source><![CDATA[
    public boolean validateCanClose()
    {
        boolean canClose = true;

        canClose = super();

        // verify that the source budget planning process is selected
        if (sourceBudgetPlanBudgetPlanningProcess.value() == 0)
        {
            error(strFmt("@SYS84753", sourceBudgetPlanBudgetPlanningProcess.labelText()));
            canClose = false;
        }

        // verify that the source budget plan document number is selected
        if (sourceBudgetPlanDocumentNumber.value() == 0)
        {
            error(strFmt("@SYS84753", sourceBudgetPlanDocumentNumber.labelText()));
            canClose = false;
        }

        // verify that the source budget plan scenario is selected
        if (sourceBudgetPlanScenario.text() == BudgetPlanningConstants::emptyString)
        {
            error(strFmt("@SYS84753", sourceBudgetPlanScenario.labelText()));
            canClose = false;
        }

        // Verify the value of target budget plan scenario
        if (sourceBudgetPlanScenario.text()
            && targetBudgetPlanScenario.text()
            && !this.validateTargetBudgetPlanScenario())
        {
            // Clear the invalid value
            targetBudgetPlanScenario.text(BudgetPlanningConstants::emptyString);
            canClose = false;
        }

        // verify that the line exists for the header and scenario
        if (!BudgetPlan::existScenarioForBudgetPlan(
                sourceBudgetPlanDocumentNumber.value(),
                BudgetPlanScenario::findByLocalizedName(sourceBudgetPlanScenario.text()).RecId))
        {
            canClose = checkFailed("@GLS150365");
        }

        return canClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of budget planning process control.
    /// </summary>
    /// <returns>
    /// true if no error found; otherwise, false.
    /// </returns>
    public boolean validateSourceBudgetPlanningProcess()
    {
        boolean                isValid = true;
        BudgetPlanHeader       budgetPlanHeader;
        BudgetPlanningProcess  budgetPlanningProcess;

        if (sourceBudgetPlanBudgetPlanningProcess.value())
        {
            budgetPlanHeader.BudgetPlanningProcess = sourceBudgetPlanBudgetPlanningProcess.value();

            budgetPlanningProcess = BudgetPlanningProcess::find(budgetPlanHeader.BudgetPlanningProcess);

            if (budgetPlanningProcess.ApprovalProcessState == BudgetPlanningApprovalProcessState::Draft)
            {
                isValid = checkFailed(strFmt(
                                        "@Budget:BudgetPlanGenerateFromBudgetPlanProcessErrorMessage",
                                        enum2str(BudgetPlanningApprovalProcessState::InProcess),
                                        enum2str(BudgetPlanningApprovalProcessState::Completed)));
            }

            if (isValid && budgetPlanningProcess.Ledger != Ledger::current())
            {
                isValid = checkFailed(strFmt("@SYS4020049", budgetPlanningProcess.Name));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the budget plan scenario control.
    /// </summary>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    public boolean validateSourceBudgetPlanScenario()
    {
        boolean isValid = true;

        if (sourceBudgetPlanScenario.text())
        {
            BudgetPlanScenario  budgetPlanScenario = BudgetPlanScenario::findByLocalizedName(sourceBudgetPlanScenario.text());
            BudgetPlanHeader    budgetPlanHeader = BudgetPlanHeader::find(sourceBudgetPlanDocumentNumber.value());

            isValid = BudgetPlanLayoutHelper::validateScenarioExistsInLayout(budgetPlanHeader.Layout, budgetPlanScenario.Name);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetBudgetPlanScenario</Name>
				<Source><![CDATA[
    public boolean validateTargetBudgetPlanScenario()
    {
        boolean             isValid = true;
        UnitOfMeasureClass  targetUnitOfMeasureClass;
        UnitOfMeasureClass  sourceUnitOfMeasureClass;
        BudgetPlanningStage budgetPlanningStage;

        if (targetGenJourHistorical.selection() == NoYes::No)
        {
            isValid = super();
        }
        else
        {
            // If Historical need to set the stage to the last stage
            budgetPlanningStage = BudgetPlanningWorkflowSetup::getLastPlanningStage(
                                    targetBudgetPlanningProcess.value(),
                                    targetResponsibilityCenter.value());

            // We now need to check that this is still a valid scenario for the budget plan to be in
            BudgetPlanLayoutRecId budgetPlanLayoutRecId = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                                targetBudgetPlanningProcess.value(),
                                                                targetResponsibilityCenter.value(),
                                                                budgetPlanningStage.RecId).Layout;
            isValid = BudgetPlanLayoutHelper::validateScenarioExistsInLayout(budgetPlanLayoutRecId, targetBudgetPlanScenario.text());
        }

        if (isValid)
        {
            targetUnitOfMeasureClass = BudgetPlanScenario::findByLocalizedName(targetBudgetPlanScenario.text()).UnitOfMeasureClass;
            sourceUnitOfMeasureClass = BudgetPlanScenario::findByLocalizedName(sourceBudgetPlanScenario.text()).UnitOfMeasureClass;

            // Check that the source scenario and target scenario have the same unit of measure class
            if (targetUnitOfMeasureClass != sourceUnitOfMeasureClass)
            {
                isValid = checkFailed("@SYS4020043");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of ledger control on the modification of budget planning process.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean modifiedBudgetPlanningProcess()
    {
        boolean returnValue = super();

        if (targetBudgetPlanningProcess.value())
        {
            // Set the Active filter date to the first day of the target budget planning process budget cycle.
            dimensionEntryValues.parmActiveValueFilterDate(BudgetPlanningProcessHelper::getProcessCycleStartDate(targetBudgetPlanningProcess.value()));
        }
        else
        {
            dimensionEntryValues.parmActiveValueFilterDate(dateNull());
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanGenerateFormBudgetPlan construct()
    {
        return new BudgetPlanGenerateFormBudgetPlan();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>