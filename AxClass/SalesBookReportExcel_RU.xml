<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesBookReportExcel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
/// <summary>
/// This class used for printing sales book or sales book additional list to excel.
/// </summary>
class SalesBookReportExcel_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    Dialog                  dialog;
    SalesPurchBookRecId_RU  bookRecId;
    QueryRun                queryRun;
    NoYes                   exportToXml;
    NoYes                   groupByFactures;
    NoYes                   groupCorrect;
    FromDate                fromDate;
    ToDate                  toDate;
    ERFormatMappingId       formatMappingId;

    DialogField             groupByFacturesField;
    DialogField             groupCorrectField;
    DialogField             periodCodeField;
    DialogField             exportToXmlDlg;
    DialogField             fromDateField;
    DialogField             toDateField;

    Counter                 lineNo,
                            pageNum,
                            numOfLines;

    TmpLedgerVATDeclaratoinHeader_RU    header;
    TmpLedgerVATDeclaratoinLine_RU      line;
    BookDateNumDelimiter_RU             bookDateNumDelimiter;

    protected const int dialogPeriodCodeFieldNo = 900;
    protected const int currentVersion = 2;
    private const int Version1 = 1;

    protected const str reportHeader    = 'REPORTHEADER';
    protected const str pageHeader      = 'PAGEHEADER';
    protected const str body            = 'BODY';
    protected const str reportFooter    = 'REPORTFOOTER';

    protected const int widthColumns = 166;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real minHeight = 21.00;

        int rowCount;

        real height;

        str factureStr = this.getFactureStr(line);

        height = max(
                document.getNamedRangeHeightWrapped('AccountName', line.SellerBuyerName),
                document.getNamedRangeHeightWrapped('CustINNKPP', line.sellerBuyerINNKPPStr()),
                document.getNamedRangeHeightWrapped('CommissionAgentName', line.AgentName),
                document.getNamedRangeHeightWrapped('CommissionAgentINNKPP', line.agentINNKPPStr()),
                document.getNamedRangeHeightWrapped('CurrencyCodeName', line.currencyNameCode()),
                document.getNamedRangeHeightWrapped('FactureDateNum', factureStr),
                document.getNamedRangeHeightWrapped('FEACCId', line.FEACCIds),
                document.getNamedRangeHeightWrapped('GTD', line.CountryGTD),
                minHeight);

        rowCount = strLen(strKeep(factureStr, '\n'));

        if (rowCount > 0)
        {
            height = max(
            height,
            (rowCount + 1) * 9);
        }

        return height;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        curWorksheetNum = 1;
        widthCols       = widthColumns;
        document.setWorksheetSpans(widthCols);

        pageHeight = document.getPageHeight(curWorksheetNum);

        this.initSectionMap();

        this.initBookDateNumDelimiter();

        this.prepareDataAndExportToXml();

        numOfLines = this.getNumOfLines();

        this.execute(reportHeader);
        this.execute(pageHeader);

        //Add list incoming totals
        if (this.mustPrintIncomingTotals())
        {
            this.printIncomingTotals();
        }

        while select line
        order by LineNumber
        {
            lineNo++;

            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);

                pageNum++;
                currentHeight = 0;
                this.execute(pageHeader);
            }

            this.execute(body);
        }

        this.execute(reportFooter);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        if (dialog)
        {
            dialog.addGroup("@SYS28007");
            groupByFacturesField = dialog.addFieldValue(enumStr(NoYes), groupByFactures, "@GLS106865");
            groupCorrectField    = dialog.addFieldValue(enumStr(NoYes), groupCorrect, "@GLS112480", "@GLS112482");

            dialog.addGroup("@SYS23339");
            periodCodeField = new DialogField(dialog, extendedTypeStr(DateCode), dialogPeriodCodeFieldNo);
            dialog.addCtrlDialogField(periodCodeField.name());
            periodCodeField.init(dialog);

            fromDateField = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
            toDateField   = dialog.addFieldValue(extendedTypeStr(ToDate), toDate);
            exportToXmlDlg= dialog.addFieldValue(enumStr(NoYes), exportToXml, "@SYS114646");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method used to allow overriding methods on controls for dialog form
    /// </summary>
    /// <param name="_dialog">
    /// Dialog for which methods should allow overriding
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'Kniga prodaj';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        SalesBookTable_RU salesBookTable = SalesBookTable_RU::find(bookRecId);

        return '_' + date2str(salesBookTable.getFromDate(), 321, 2, 0, 2, 0, 2, DateFlags::None) +
           '_' + date2str(salesBookTable.getToDate()  , 321, 2, 0, 2, 0, 2, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report line with data
    /// </summary>
    protected void fillBody()
    {
        NotesLine fEACCIds = line.FEACCIds;
        const int maxFEACCIDXLSFieldLength = 238;
        const int fEACCIDPeriod = 10;

        this.insertValueToSection('LineNo'                    , line.LineNumber);
        this.insertValueToSection('OperationTypeCodes'        , line.OperationTypeCodes);
        this.insertValueToSection('FactureDateNum'            , this.getFactureStr(line));
        this.insertValueToSection('RevisionNumDate'           , this.getFactureStrRevision(line));
        this.insertValueToSection('CorrFactureNumDate'        , this.getFactureStrCorr(line));
        this.insertValueToSection('CorrFactureRevisionNumDate', this.getFactureStrCorrRevision(line));
        this.insertValueToSection('AccountName'               , line.SellerBuyerName);
        this.insertValueToSection('CustINNKPP'                , line.sellerBuyerINNKPPStr());
        this.insertValueToSection('CommissionAgentName'       , line.AgentName);
        this.insertValueToSection('CommissionAgentINNKPP'     , line.agentINNKPPStr());
        this.insertValueToSection('PaymentNumDate'            , this.getPaymNumDateDocStr(line));
        this.insertValueToSection('CurrencyCodeName'          , line.currencyNameCode());
        this.insertValueToSection('GTD'                       , Global::strReplace(line.CountryGTD, ',', ';'));
        fEACCIds = strLen(fEACCIds) > maxFEACCIDXLSFieldLength  ? subStr(fEACCIds, 1, strFind(fEACCIds, ';', maxFEACCIDXLSFieldLength + 1 , -fEACCIDPeriod) - 1)  : fEACCIds;
        this.insertValueToSection('FEACCId'                   , fEACCIds);

        if (line.CurrencyCode == CompanyInfoHelper::standardCurrency())
        {
            this.insertValueToSection('AmountCurInclVAT', '');
        }
        else
        {
            this.insertValueToSection('AmountCurInclVAT', line.AmountCurInclVAT);
        }

        this.insertValueToSection('AmountInclVAT',        line.AmountInclVAT);

        if (header.NotOnlyPrepaymentTrans)
        {
            this.insertValueToSection('AmountLiableToVAT20'    , line.AmountExclVAT20);
            this.insertValueToSection('AmountLiableToVAT18'    , line.AmountExclVAT18);
            this.insertValueToSection('AmountLiableToVAT10'    , line.AmountExclVAT10);
            this.insertValueToSection('AmountLiableToVAT0'     , line.AmountExclVAT0);
            this.insertValueToSection('TaxAmountNotLiableToVAT', line.AmountWOTax);
        }
        else
        {
            this.insertValueToSection('AmountLiableToVAT20'    , #blank);
            this.insertValueToSection('AmountLiableToVAT18'    , #blank);
            this.insertValueToSection('AmountLiableToVAT10'    , #blank);
            this.insertValueToSection('AmountLiableToVAT0'     , #blank);
            this.insertValueToSection('TaxAmountNotLiableToVAT', #blank);
        }

        this.insertValueToSection('TaxAmountVAT20', line.TaxAmountVAT20);
        this.insertValueToSection('TaxAmountVAT18', line.TaxAmountVAT18);
        this.insertValueToSection('TaxAmountVAT10', line.TaxAmountVAT10);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case reportHeader:
                this.fillReportHeader();
                break;
            case pageHeader:
                this.fillPageHeader();
                break;
            case body:
                this.fillBody();
                break;
            case reportFooter:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header with data, but there's nothing to fill yet
    /// </summary>
    protected void fillPageHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method fills report footer with data
    /// </summary>
    protected void fillReportFooter()
    {
        this.insertValueToSection('TotalTaxAmountVAT20', header.TotalTaxAmountVAT20);
        this.insertValueToSection('TotalTaxAmountVAT18', header.TotalTaxAmountVAT18);
        this.insertValueToSection('TotalTaxAmountVAT10', header.TotalTaxAmountVAT10);

        if (header.NotOnlyPrepaymentTrans)
        {
            this.insertValueToSection('TotalAmountLiableToVAT20'    , header.TotalAmountExclVAT20);
            this.insertValueToSection('TotalAmountLiableToVAT18'    , header.TotalAmountExclVAT18);
            this.insertValueToSection('TotalAmountLiableToVAT10'    , header.TotalAmountExclVAT10);
            this.insertValueToSection('TotalAmountLiableToVAT0'     , header.TotalAmountExclVAT0);
            this.insertValueToSection('TotalTaxAmountNotLiableToVAT', header.TotalAmountWOTax);
        }
        else
        {
            this.insertValueToSection('TotalAmountLiableToVAT20'    , #blank);
            this.insertValueToSection('TotalAmountLiableToVAT18'    , #blank);
            this.insertValueToSection('TotalAmountLiableToVAT10'    , #blank);
            this.insertValueToSection('TotalAmountLiableToVAT0'     , #blank);
            this.insertValueToSection('TotalTaxAmountNotLiableToVAT', #blank);
        }

        this.insertValueToSection('DirectorName', OfficialsTable_RU::nameDirector());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header with data
    /// </summary>
    protected void fillReportHeader()
    {
        CompanyInfo companyInfo = CompanyInfo::findDataArea(curext());

        this.insertValueToSection('CompanyName', companyInfo.Name);
        this.insertValueToSection('INNKPP', companyInfo.partyINNasOfDate_RU(toDate) +
                                       (companyInfo.partyKPPasOfDate_RU(toDate) ? ' / ' + companyInfo.partyKPPasOfDate_RU(toDate) : ""));
        this.insertValueToSection('FromDate', fromDate);
        this.insertValueToSection('ToDate'  , toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld900_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills start date field and end date field with data if period modified
    /// </summary>
    /// <returns>
    /// true if period modificaion succeed; otherwise false
    /// </returns>
    private boolean fld900_1_modified()
    {
        LedgerPeriodCode    ledgerPeriodCode;
        Object              control;
        boolean             ret;

        control = dialog.formRun().controlCallingMethod();
        ret = control.modified();

        if (ret && periodCodeField.value())
        {
            ledgerPeriodCode = LedgerPeriodCode::find(periodCodeField.value());
            fromDateField.value(ledgerPeriodCode.fromDate());
            toDateField.value(ledgerPeriodCode.toDate());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns description string for facture.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Description string.
    /// </returns>
    protected str getFactureStr(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return strFmt('%1%2%3', _line.FactureNum, bookDateNumDelimiter, _line.FactureDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStrCorr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed to "Corrected facture number and date" field.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Value which should be printed to "Corrected facture number and date" field.
    /// </returns>
    protected str getFactureStrCorr(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.CorrFactureNum ? strfmt('%1%2%3', _line.CorrFactureNum, bookDateNumDelimiter, _line.CorrFactureDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStrCorrRevision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed to "Revision facture number and date" field if there's
    /// a revision of corrected facture.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Value which should be printed to "Revision facture number and date" field.
    /// </returns>
    protected str getFactureStrCorrRevision(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.CorrFactureCorrRevision ? strfmt('%1%2%3', _line.CorrFactureCorrRevision, bookDateNumDelimiter, _line.CorrFactureCorrDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureStrRevision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed to "Revision facture number and date" field.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Value which should be printed to "Revision facture number and date" field.
    /// </returns>
    protected str getFactureStrRevision(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.FactureCorrRevision ? strfmt('%1%2%3', _line.FactureCorrRevision, bookDateNumDelimiter, _line.FactureCorrDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data enetered by user from dialog form
    /// </summary>
    /// <returns>
    /// True, if data validated; otherwise false
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            groupByFactures = groupByFacturesField.value();
            groupCorrect    = groupCorrectField.value();
            fromDate        = fromDateField.value();
            toDate          = toDateField.value();
            exportToXml     = exportToXmlDlg.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of lines in report
    /// </summary>
    /// <returns>
    /// Number of lines
    /// </returns>
    private Counter getNumOfLines()
    {
        Counter     ret;

        select count(RecId) from line;
        ret = int642int(line.RecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymNumDateDocStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns description string for payment document.
    /// </summary>
    /// <param name="_line">
    /// <c>TmpLedgerVATDeclaratoinLine_RU</c> record which is currently being printed.
    /// </param>
    /// <returns>
    /// Description string.
    /// </returns>
    protected str getPaymNumDateDocStr(TmpLedgerVATDeclaratoinLine_RU  _line)
    {
        return _line.PaymDocumentNum && _line.PaymentDate ? strFmt("@GLS102243", _line.PaymDocumentNum, _line.PaymentDate) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance.
    /// </summary>
    /// <returns>
    /// true if succsess; otherwise false.
    /// </returns>
    public boolean init()
    {
        boolean ret;

        this.initBookDateNumDelimiter();

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBookDateNumDelimiter</Name>
				<Source><![CDATA[
    private void initBookDateNumDelimiter()
    {
        const str defaultBookDateNumDelimiter = ';';

        bookDateNumDelimiter = LedgerParameters::find().setBookDateNumDelimiter_RU(false);
        bookDateNumDelimiter = bookDateNumDelimiter ? bookDateNumDelimiter : defaultBookDateNumDelimiter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        SalesBookTable_RU salesBookTable = SalesBookTable_RU::find(bookRecId);

        super();

        fromDate = salesBookTable.getFromDate();
        toDate   = salesBookTable.getToDate();

        queryRun = new QueryRun(SalesBookTable_RU::createDefaultQuery(bookRecId, null, fromDate, toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(reportHeader);
        this.addSection(pageHeader);
        this.addSection(body, true);
        this.addSection(reportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a new page should be created before printing next line
    /// </summary>
    /// <returns>
    /// A boolean value; If true, a new page should be created
    /// </returns>
    protected boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(body);

        if (lineNo == numOfLines && lineNo != 1)
        {
            requiredHeight += conPeek(mapSections.lookup(reportFooter), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintIncomingTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a report should print section with incoming totals
    /// </summary>
    /// <returns>
    /// A boolean value; If true, a section with incoming totals should be printed
    /// </returns>
    /// <remarks>
    /// This method return true for descendand which prints additional list for sales book
    /// </remarks>
    protected boolean mustPrintIncomingTotals()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion,
                bookRecId,
                groupByFactures,
                groupCorrect,
                fromDate,
                toDate,
                queryRun.pack(),
                exportToXml];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookRecId</Name>
				<Source><![CDATA[
    public SalesPurchBookRecId_RU parmBookRecId(SalesPurchBookRecId_RU _bookRecId = bookRecId)
    {
        bookRecId = _bookRecId;
        return bookRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataAndExportToXml</Name>
				<Source><![CDATA[
    protected void prepareDataAndExportToXml()
    {
        LedgerVATDeclarationContract_RU     contract;
        LedgerVATDeclReportSalesBook_RU     journalReport;

        contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmIsCalledFromXMLExcelReport(true);
        contract.parmFromDate(fromDate);
        contract.parmToDate(toDate);
        contract.parmSalesPurchBookQueryRun(queryRun.pack());
        contract.parmGroupByFactures(groupByFactures);
        contract.parmGroupCorrect(groupCorrect);
        contract.parmBookRecId(bookRecId);

        journalReport = LedgerVATDeclReportSalesBook_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        header  = journalReport.getHeader();
        line    = journalReport.getLine();

        ERModelDefinitionDatabaseContext dbParameter = new ERModelDefinitionDatabaseContext();
        dbParameter.addTemporaryTable(header);
        dbParameter.addTemporaryTable(line);

        ERmodelDefinitionInputParametersAction inputParameter = new ERmodelDefinitionInputParametersAction();
        inputParameter.addParameter(ERPath::combine("model", "ReportCaller"), 
            classStr(SalesBookReportExcel_RU));
        inputParameter.addParameter(ERPath::combine("model", "005_Period/Period010_DateFrom"), fromDate);
        inputParameter.addParameter(ERPath::combine("model", "005_Period/Period020_DateTo"), toDate);

        if (exportToXml)
        {
            formatMappingId = CustParameters::find().SalesBookFormatMappingID;

            boolean isInBatch = Global::isRunningOnBatch();

            if (isInBatch)
            {
                ERObjectsFactory::createFormatMappingRunWithBatchSupportByFormatMappingId(
                    formatMappingId,
                    '',
                    false,
                    false,
                    false,
                    isInBatch)
                    .withParameter(dbParameter)
                    .withParameter(inputParameter)
                    .run();
            }
            else
            {
                ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId)
                    .withParameter(dbParameter)
                    .withParameter(inputParameter)
                    .run();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printIncomingTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method prints incoming totals, overridden in additional list printout
    /// </summary>
    protected void printIncomingTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    public boolean runOnServer()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(SalesBook_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const int cellsBody = 24;
        const int cellsOther = 14;

        select count(RecId) from line;

        return int642int(line.RecId) * cellsBody + cellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);
        container packedQuery;
        SalesPurchBookRecId_RU bookRecIdNew;
        SalesBookTable_RU salesBookTable;

        bookRecIdNew = this.parmBookRecId();

        switch (version)
        {
            case currentVersion:
                [version,
                 bookRecId,
                 groupByFactures,
                 groupCorrect,
                 fromDate,
                 toDate,
                 packedQuery,
                 exportToXml] = _packedClass;

                break;

            case Version1:
                [version,
                 bookRecId,
                 groupByFactures,
                 groupCorrect,
                 fromDate,
                 toDate,
                 packedQuery] = _packedClass;

                break;

            default :
                return false;
        }

        if (packedQuery)
        {
            queryRun = new QueryRun(packedQuery);
        }

        if (bookRecIdNew && bookRecIdNew != bookRecId)
        {
            salesBookTable = SalesBookTable_RU::find(bookRecIdNew);
            fromDate = salesBookTable.getFromDate();
            toDate = salesBookTable.getToDate();

            this.parmBookRecId(bookRecIdNew);
            this.initParmDefault();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates data entered into dialog
    /// </summary>
    /// <param name="_calledFrom">
    /// An object this method called from; optional
    /// </param>
    /// <returns>
    /// True if check succeed; Otherwise false
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (! toDate)
        {
            ret = checkFailed("@GLS105013");
        }
        else if (fromDate > toDate)
        {
            ret = checkFailed("@GLS101164");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesBookReportExcel_RU construct()
    {
        return new SalesBookReportExcel_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS111422";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesBookReportExcel_RU         salesBookPrint;
        SalesBookTable_RU               salesBookTable;
        SalesBookTrans_RU               salesBookTrans;
        SalesPurchBookRecId_RU          bookRecId;


        if(! _args)
        {
            throw error("@GLS110028");
        }

        switch (_args.dataset())
        {
            case tableNum(SalesBookTable_RU):
                salesBookTable = _args.record();
                bookRecId = salesBookTable.RecId;
                break;

            case tableNum(SalesBookTrans_RU):
                salesBookTrans = _args.record();
                bookRecId = salesBookTrans.SalesBookTable_RU;
                break;

            default :
                throw error("@SYS18626");
        }

        salesBookPrint = SalesBookReportExcel_RU::construct();
        salesBookPrint.parmBookRecId(bookRecId);

        if (salesBookPrint.prompt())
        {
            salesBookPrint.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name.
    /// </summary>
    /// <returns>The report name.</returns>
    public str getReportName()
    {
        return 'SalesBook';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report output file name.
    /// </summary>
    /// <returns>The report output file name.</returns>
    public Filename getReportFileName()
    {
        return this.fileName() + this.fileNamePostfix();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>