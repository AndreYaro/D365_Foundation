<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetMoveHistEngine_CompanyReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetMoveHistEngine_CompanyReceipt extends RAssetMoveHistEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign()
    {
        FormDataObject formDataObject;
        boolean        allowEdit;

        super();

        if (! rAssetMoveStandard_ds)
            return;

        rAssetMoveHist_ds.allowCreate(rAssetStatusType.allowCompanyReceipt());
        if (moveHist.Company && moveHist.AssetId)
        {
            allowEdit = moveHist.findConcerned(true) ? false : true;
            formDataObject = rAssetMoveHist_ds.object(fieldNum(RAssetMoveHist, Company));
            formDataObject.allowEdit(allowEdit);
            formDataObject = rAssetMoveHist_ds.object(fieldNum(RAssetMoveHist, AssetId));
            formDataObject.allowEdit(allowEdit);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean _needinfo = true)
    {
        RAssetMoveHist rAssetMoveHistLocal;
        boolean        ret;

        #localmacro.checkLastOperation
        if (%1.RecId && rAssetMoveHistLocal.RecId != moveHist.RecId)
        {
            return _needinfo ? checkFailed(strfmt("@GLS116698", %2, moveHist.AccountNum)) : false;
        }
        #endmacro

        if (! rAssetStatusType.allowCompanyReceipt())
        {
            return _needinfo ? checkFailed(strFmt("@GLS116701", moveHist.AccountNum, "", rAssetStatusType.rAssetStatus(), RAssetTransType::CompanyReceipt)) : false;
        }

        #checkLastOperation(moveHistLast, moveHist.MoveType)

        rAssetMoveHistLocal = RAssetMoveHist::findLastOperation(moveHist.AccountNum,
                                                                RAssetMoveType::CompanyIssue);
        #checkLastOperation(rAssetMoveHistLocal, RAssetMoveType::CompanyIssue)

        ret = super(_needinfo);

        if (ret && moveHist.AssetId && moveHist.Company)
        {
            rAssetMoveHistLocal = moveHist.findConcerned();
            if (rAssetMoveHistLocal.ChangeDate > moveHist.ChangeDate)
            {
                return _needinfo ? checkFailed(strFmt("@GLS116695", rAssetMoveHistLocal.ChangeDate, moveHist.AssetId, moveHist.AccountNum)) : false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write()
    {
        RAssetMoveHist             rAssetMoveHistLocal;
        RAssetStandardInterCompany rAssetStandardInterCompany;
        RAssetMoveStandard         rAssetMoveStandardLocal;
        CurrencyCode               currencyIssue;

        moveHist.updateMoveStandard();
        rAssetMoveHistLocal = moveHist.findConcerned();
        if (! rAssetMoveHistLocal)
        {
            return;
        }
        while select forupdate rAssetMoveStandard
            where rAssetMoveStandard.RefRecId   == moveHist.RecId &&
                  rAssetMoveStandard.RefTableId == moveHist.TableId
        {
            rAssetStandardInterCompany = RAssetStandardInterCompany::find(rAssetMoveStandard.rAssetStandardId,
                                                                          moveHist.Company);
            if (! rAssetStandardInterCompany)
                continue;

            if (SysDataArea::checkAccessible(moveHist.Company))
            {
                changecompany(moveHist.Company)
                {
                    rAssetMoveStandardLocal = rAssetMoveHistLocal.rAssetMoveStandard(rAssetStandardInterCompany.AssetInterCompanyStandardId);
                    currencyIssue           = RAssetStandards::findInCompany(rAssetMoveHistLocal.AccountNum,
                                                                             rAssetMoveStandardLocal.rAssetStandardId,
                                                                             moveHist.Company).CurrencyCode;
                    currencyIssue           = Currency::currencyCodeISO(currencyIssue);
                }
            }
            currencyIssue = Currency::findCurrencyCodeISO(currencyIssue).CurrencyCode;
            if (! currencyIssue)
                checkFailed("@SYS109642");
            rAssetMoveStandard.BalanceAcquisition  = CurrencyExchangeHelper::curAmount2CurAmount(rAssetMoveStandardLocal.BalanceAcquisition, currencyIssue, RAssetStandards::find(moveHist.AccountNum, rAssetMoveStandard.rAssetStandardId).CurrencyCode, moveHist.ChangeDate);
            rAssetMoveStandard.BalanceDepreciation = CurrencyExchangeHelper::curAmount2CurAmount(rAssetMoveStandardLocal.BalanceDepreciation, currencyIssue, RAssetStandards::find(moveHist.AccountNum, rAssetMoveStandard.rAssetStandardId).CurrencyCode, moveHist.ChangeDate);
            rAssetMoveStandard.rAssetLifeTimePass  = rAssetMoveStandardLocal.rAssetLifeTimePass;
            rAssetMoveStandard.update();
        }
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
