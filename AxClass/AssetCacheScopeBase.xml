<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCacheScopeBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetCacheScopeBase</c> class is an abstract class for asset cache.
/// </summary>
internal abstract class AssetCacheScopeBase
{
    internal const int ExtraCacheSlots = 20; // extra 20 cached asset elements in addition to number of available threads
    internal const str LimitedCacheAssetListKey = 'LimitedList';
    protected const int KeyIndex = 1;
    protected const int ValueIndex = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCacheByAssetBook</Name>
				<Source><![CDATA[
    internal abstract anytype getCacheByAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCache</Name>
				<Source><![CDATA[
    internal abstract container getCache(str _key = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeValue</Name>
				<Source><![CDATA[
    internal abstract void removeValue(str _key)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newByScope</Name>
				<Source><![CDATA[
    internal static AssetCacheScopeBase newByScope(AssetCacheScope _scope)
    {
        return SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(AssetCacheScopeBase), new AssetCacheScopeAttribute(_scope));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    internal static str getKey(container _con)
    {
        return conPeek(_con, KeyIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    internal static container getValue(container _con)
    {
        return conPeek(_con, ValueIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKeyIndexInCacheList</Name>
				<Source><![CDATA[
    internal static int findKeyIndexInCacheList(container _cacheList, str _key)
    {
        for (int i = conLen(_cacheList); i >= 1; i--)
        {
            if (AssetCacheScopeBase::getKey(conPeek(_cacheList, i)) == _key)
            {
                return i;
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reprioritizeAssetBookInCacheList</Name>
				<Source><![CDATA[
    internal static container reprioritizeAssetBookInCacheList(container _cacheList, int _idx, str _key, container _value)
    {
        if (_cacheList == conNull() || _idx != conLen(_cacheList) || !AssetCacheScopeBase::getValue(conPeek(_cacheList, _idx)))
        {
            if (_idx)
            {
                _cacheList = conDel(_cacheList, _idx, 1);
            }
            _cacheList += [[_key, _value]];
        }
        return _cacheList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMostOutdatedKeyFromCacheList</Name>
				<Source><![CDATA[
    internal static container removeMostOutdatedKeyFromCacheList(container _cacheList)
    {
        if (conLen(_cacheList) > AssetCacheManager::getCacheLimit())
        {
            _cacheList = conDel(_cacheList, 1, 1);
        }
        return _cacheList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>