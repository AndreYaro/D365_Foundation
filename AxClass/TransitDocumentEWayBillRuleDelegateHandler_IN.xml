<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransitDocumentEWayBillRuleDelegateHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The transit document rule handler for e-way bill.
/// </summary>
class TransitDocumentEWayBillRuleDelegateHandler_IN
{    
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initRulesForEWayBill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init transact document transaction rule list for E-Eway bill.
    /// </summary>
    /// <param name = "_ruleList">The list which is containing all rule objects.</param>
    [SubscribesTo(classstr(TransitDocumentTransactionRuleHelper_IN), delegateStr(TransitDocumentTransactionRuleHelper_IN,initTransitDocumentTransactionRuleList))]
    public static void initRulesForEWayBill(List _ruleList)
    {
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && _ruleList)
        {
            //init rule: document type -> transaction type
            TransitDocumentType_IN      formInwardType;
            TransitDocumentType_IN      formOutwardType;

            // Form inward type
            formInwardType = TransitDocumentType_IN::findOrDefineType(
                tableNum(TransitDocumentEWayBill_IN),
                fieldNum(TransitDocumentEWayBill_IN, Direction),
                TaxGSTEWayBillBasis_IN::Inward);

            // Form to receive type
            formOutwardType = TransitDocumentType_IN::findOrDefineType(
                tableNum(TransitDocumentEWayBill_IN),
                fieldNum(TransitDocumentEWayBill_IN, Direction),
                TaxGSTEWayBillBasis_IN::Outward);

            // Rule definitions
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchTable), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchTable), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesTable), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesTable), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustomsShippingBillJour_IN), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustomsShippingBillJour_IN), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceTable), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceTable), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceInfoTable), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceInfoTable), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesParmTable), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesParmTable), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceJour), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceJour), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceJour), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceJour), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferParmTable), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferParmTable), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferJour), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferJour), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjProposalJour), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjProposalJour), formOutwardType));

            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjInvoiceJour), formInwardType));
            _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjInvoiceJour), formOutwardType));
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransitDocumentRelationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction document transaction relation table.
    /// </summary>
    /// <param name = "_parameter">The parameter of the event.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, getTransitDocumentRelationTable))]
    public static void getTransitDocumentRelationTable(TransitDocumentManagerEventParameter_IN _parameter)
    {
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            switch (_parameter.parmTransitDocTableId())
            {
                case tableNum(TransitDocumentEWayBill_IN):
                case tableNum(TaxGSTEWayBillTypes_IN):
                    _parameter.parmTransitRelationTableId(tableNum(TransitDocumentTransactionRelation_IN));
                    break;
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>