<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticalPivoter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CFMAnalyticalPivoter</c> transforms information from <c>CFMJournalTrans</c> to data for representation in Analytical Form.
/// </summary>
class CFMAnalyticalPivoter
{
    CFMJournalId journalId;
    Map amountDateFieldIdMap, amountDateIntFieldIdMap;
    Map fieldSourceTargetMap;
    Query query;
    CFMAnalyticTableTmp analyticTable;
    Map attribDataSource;
    Set openingBalanceSourceTypes;

    container totalsLevelList;

    public const str ExpandedSign ='[-] ';
    public const str CollapsedSign ='[+] ';
    public const str Blank ='';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct class object from journal
    /// </summary>
    /// <param name = "_journalId"></param>
    /// <returns></returns>
    public static CFMAnalyticalPivoter constructFromJournal(journalId _journalId)
    {
        CFMAnalyticalPivoter pivoter;

        pivoter = new CFMAnalyticalPivoter();

        pivoter.parmJournalId(_journalId);

        return pivoter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markDrillSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks lines of <c>CFMAnalyticTableTmp</c> table by "Expand" or "Collapse" sign.
    /// </summary>
    /// <param name="_analyticTable">
    /// The instance of the <c>CFMAnalyticTableTmp</c> table
    /// </param>
    /// <param name="_expand">
    /// Boolean parameter that define which opertion is processing: expanding or collapsing.
    /// </param>
    /// <param name="_level">
    /// Value of level to select lines for update.
    /// </param>
    /// <param name="_maxLevel">
    /// The max level of lines for update.
    /// </param>
    public static void markDrillSign(CFMAnalyticTableTmp _analyticTable, boolean _expand, Integer _level, Integer _maxLevel)
    {
        str filterStr;
        str expandingSign;

        CFMAnalyticTableTmp analyticTable;
        analyticTable.setTmpData(_analyticTable);

        if (_expand)
        {
            filterStr = SysQuery::range(_level, _maxLevel);
            expandingSign = CFMAnalyticalPivoter::ExpandedSign;
        }
        else
        {
            filterStr = queryValue(_level);
            expandingSign = CFMAnalyticalPivoter::CollapsedSign;
        }

        Query query = new query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(CFMAnalyticTableTmp));
        qbds.update(true);
        qbds.addRange(fieldNum(CFMAnalyticTableTmp, Level)).value(filterStr);
        qbds.addRange(fieldNum(CFMAnalyticTableTmp, AnalyticLineType)).value(queryValue(CFMAnalyticLineType::ActualBalance));
        qbds.addRange(fieldNum(CFMAnalyticTableTmp, AnalyticLineType)).value(queryValue(CFMAnalyticLineType::RegularLine));

        QueryRun qr = new QueryRun(query);
        qr.setRecord(_analyticTable);

        ttsBegin;
        while(qr.next())
        {
            analyticTable = qr.getNo(1);

            if (analyticTable.getFieldValue(fieldStr(CFMAnalyticTableTmp, DisplayMeasure), analyticTable.Level) != expandingSign + analyticTable.getFieldValue(fieldStr(CFMAnalyticTableTmp, SortMeasure), analyticTable.Level))
            {
                analyticTable.setFieldValue(fieldStr(CFMAnalyticTableTmp, DisplayMeasure), expandingSign + analyticTable.getFieldValue(fieldStr(CFMAnalyticTableTmp, SortMeasure), analyticTable.Level), analyticTable.Level);
                analyticTable.update();
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDateFieldIdMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return a map of settlement data fields and dates
    /// </summary>
    /// <returns>Map of settlement data fields and dates</returns>
    public Map amountDateFieldIdMap()
    {
        return amountDateFieldIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates data from information of <c>CFMJournalTrans</c>.
    /// </summary>
    public void calc()
    {
        ttsBegin;
        this.initDateFieldList();
        this.initTotalsLevelList();

        this.fillAnalyticalTable();

        this.createGroupLines();

        this.createTotals();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroupLines</Name>
				<Source><![CDATA[
    private void createGroupLines()
    {
        for (Counter i = this.curViewMaxLevel(); i > 1; i--)
        {
            this.createGroupLinesLevel(i);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroupLinesLevel</Name>
				<Source><![CDATA[
    private void createGroupLinesLevel(Counter _level)
    {
        CFMAnalyticTableTmp sourceAnalyticalTable;

        sourceAnalyticalTable.linkPhysicalTableInstance(analyticTable);

        RecordInsertList ril = new RecordInsertList(tableNum(CFMAnalyticTableTmp),
            true,
            true,
            true,
            false,
            true,
            analyticTable);

        Query groupQuery = new Query();

        QueryBuildDataSource qbds = groupQuery.addDataSource(tableNum(CFMAnalyticTableTmp));

        //add group fields for given level
        MapEnumerator measureFieldMapEnumerator = fieldSourceTargetMap.getEnumerator();

        FieldId sourceFieldId, targetFieldId, targetFieldStrId, targetDisplayFieldId;
        Name attributeName;
        Counter newLevel = _level - 1;
        FieldId groupDisplayFieldId;
        FieldId groupDisplaySortFieldId;

        while (measureFieldMapEnumerator.moveNext() && measureFieldMapEnumerator.currentKey() <= newLevel)
        {
            [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = measureFieldMapEnumerator.currentValue();
            qbds.addGroupByField(targetFieldStrId);

            if (measureFieldMapEnumerator.currentKey() == newLevel)
            {
                groupDisplaySortFieldId = targetFieldStrId;
                groupDisplayFieldId = targetDisplayFieldId;
            }
        }
        qbds.addGroupByField(fieldNum(CFMAnalyticTableTmp, IsOpeningBalance));

        //add selection for journal period
        MapEnumerator dateFieldMapEnumerator = amountDateIntFieldIdMap.getEnumerator();

        while (dateFieldMapEnumerator.moveNext())
        {
            qbds.addSelectionField(dateFieldMapEnumerator.currentValue(), SelectionField::Sum);
        }

        qbds.addRange(fieldNum(CFMAnalyticTableTmp, Level)).value(queryValue(_level));

        QueryRun qr = new QueryRun(groupQuery);
        qr.setRecord(sourceAnalyticalTable);

        while (qr.next())
        {
            sourceAnalyticalTable = qr.getNo(1);
            sourceAnalyticalTable.Level = newLevel;
            sourceAnalyticalTable.(groupDisplayFieldId) = CFMAnalyticalPivoter::ExpandedSign + sourceAnalyticalTable.(groupDisplaySortFieldId);

            ril.add(sourceAnalyticalTable);
        }

        ril.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLevelTotals</Name>
				<Source><![CDATA[
    private void createLevelTotals(Counter _level)
    {
        CFMAnalyticTableTmp analyticalTableLevelGroup;
        FieldId sourceFieldId, targetFieldId, targetFieldStrId, targetDisplayFieldId;
        FieldId fieldId;
        Name attributeName;
        container rangeFieldIds;
        FieldId levelDisplayFieldId, levelSortFieldId;

        void fillAnalyticTypeFields(CFMAnalyticTableTmp _analyticTableTmp, CFMAnalyticLineType _analyticLineType)
        {
            _analyticTableTmp.AnalyticLineType = _analyticLineType;

            _analyticTableTmp.(targetFieldStrId) = int2str(_analyticTableTmp.AnalyticLineType);
            _analyticTableTmp.(targetDisplayFieldId) = this.getStrValue(_analyticTableTmp.AnalyticLineType);
            _analyticTableTmp.IsOpeningBalance = NoYes::No;

            if (_analyticLineType != CFMAnalyticLineType::ActualBalance)
            {
                _analyticTableTmp.(levelDisplayFieldId) = '';
            }
        }

        CFMAnalyticTableTmp createRecord()
        {
            CFMAnalyticTableTmp newRecord;

            newRecord.linkPhysicalTableInstance(analyticTable);
            newRecord.clear();

            for (int i = conLen(rangeFieldIds); i > 0; i--)
            {
                fieldId = conPeek(rangeFieldIds, i);
                newRecord.(fieldId) = analyticalTableLevelGroup.(fieldId);
            }

            newRecord.(levelDisplayFieldId) = CFMAnalyticalPivoter::ExpandedSign + newRecord.(levelSortFieldId);

            newRecord.Level = _level;

            return newRecord;
        }

        analyticalTableLevelGroup.linkPhysicalTableInstance(analyticTable);

        if (_level == this.curViewMaxLevel())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Query levelQuery = new query();
        QueryBuildDataSource qbdsLevelQuery = levelQuery.addDataSource(tableNum(CFMAnalyticTableTmp));
        qbdsLevelQuery.addRange(fieldNum(CFMAnalyticTableTmp, Level)).value(queryValue(_level));

        Query groupQuery = new query();
        QueryBuildDataSource qbdsGroupQuery = groupQuery.addDataSource(tableNum(CFMAnalyticTableTmp));
        qbdsGroupQuery.addRange(fieldNum(CFMAnalyticTableTmp, Level)).value(queryValue(_level));
        QueryBuildRange qbrOpeningBalance = qbdsGroupQuery.addRange(fieldNum(CFMAnalyticTableTmp, IsOpeningBalance));
        QueryBuildRange qbrSortMeasure = qbdsGroupQuery.addRange(fieldId2Ext(fieldNum(CFMAnalyticTableTmp, SortMeasure),3));
        qbdsGroupQuery.update(true);

        for (int i = 1; i <= _level; i++)
        {
            if (!fieldSourceTargetMap.exists(i))
            {
                throw error(strFmt("@SYS19378",funcName()));
            }

            [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = fieldSourceTargetMap.lookup(i);
            rangeFieldIds += targetFieldStrId;
            qbdsGroupQuery.addRange(fieldExt2Id(targetFieldStrId), fieldExt2Idx(targetFieldStrId));

            qbdsLevelQuery.addGroupByField(fieldExt2Id(targetFieldStrId), fieldExt2Idx(targetFieldStrId));

            if (i == _level)
            {
                levelDisplayFieldId = targetDisplayFieldId;
                levelSortFieldId = targetFieldStrId;
            }
        }

        //field id for the lowest level to fill line types
        [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = fieldSourceTargetMap.lookup(this.curViewMaxLevel());

        QueryRun qrLevelQuery = new QueryRun(levelQuery);
        qrLevelQuery.setRecord(analyticTable);
        CFMAnalyticTableTmp targetAnalyticalTableNetFlow;

        while (qrLevelQuery.next())
        {
            analyticalTableLevelGroup = qrLevelQuery.getNo(1).data();

            for (int i = conLen(rangeFieldIds); i > 0; i--)
            {
                fieldId = conPeek(rangeFieldIds, i);
                findOrCreateRange_W(qbdsGroupQuery, fieldId, analyticalTableLevelGroup.(fieldId));
            }

            targetAnalyticalTableNetFlow.linkPhysicalTableInstance(analyticTable);
            qbrOpeningBalance.value(queryValue(NoYes::No));

            QueryRun qrNetFlow = new QueryRun(groupQuery);
            qrNetFlow.setRecord(targetAnalyticalTableNetFlow);

            if (qrNetFlow.next())
            {
                targetAnalyticalTableNetFlow = qrNetFlow.getNo(1);
            }
            else
            {
                targetAnalyticalTableNetFlow = createRecord();
            }

            fillAnalyticTypeFields(targetAnalyticalTableNetFlow, CFMAnalyticLineType::NetFlow);

            CFMAnalyticTableTmp targetAnalyticalTableOpeningBalance;
            targetAnalyticalTableOpeningBalance.linkPhysicalTableInstance(analyticTable);
            qbrOpeningBalance.value(queryValue(NoYes::Yes));

            if (analyticalTableLevelGroup.getFieldValue(fieldStr(CFMAnalyticTableTmp, SortMeasure), 2) == 'Bank' && analyticalTableLevelGroup.getFieldValue(fieldStr(CFMAnalyticTableTmp, SortMeasure), 3) == '')
            {
                qbrSortMeasure.value(queryValue(analyticalTableLevelGroup.getFieldValue(fieldStr(CFMAnalyticTableTmp, SortMeasure),3)));
            }

            QueryRun qrOpenBalance = new QueryRun(groupQuery);
            qrOpenBalance.setRecord(targetAnalyticalTableOpeningBalance);

            if (qrOpenBalance.next())
            {
                targetAnalyticalTableOpeningBalance = qrOpenBalance.getNo(1);
            }
            else
            {
                targetAnalyticalTableOpeningBalance = createRecord();
            }

            fillAnalyticTypeFields(targetAnalyticalTableOpeningBalance, CFMAnalyticLineType::OpeningBalance);

            CFMAnalyticTableTmp targetAnalyticalTableActualBal;

            targetAnalyticalTableActualBal.clear();
            targetAnalyticalTableActualBal = createRecord();
            fillAnalyticTypeFields(targetAnalyticalTableActualBal, CFMAnalyticLineType::ActualBalance);

            this.fillTotals(targetAnalyticalTableActualBal, targetAnalyticalTableOpeningBalance, targetAnalyticalTableNetFlow);
            targetAnalyticalTableOpeningBalance.write();
            targetAnalyticalTableNetFlow.write();
            targetAnalyticalTableActualBal.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    private void createQuery()
    {
        QueryBuildDataSource qbds;
        Set groupFieldSet = new Set(Types::Integer);
        
        void addGroupField(FieldId _fieldId)
        {
            if (!groupFieldSet.in(_fieldId))
            {
                qbds.addGroupByField(_fieldId);
                groupFieldSet.add(_fieldId);
            }
        }

        attribDataSource = new Map(Types::String, Types::Integer);

        query = new Query();
        qbds = query.addDataSource(tableNum(CFMJournalTrans));
        qbds.addSelectionField(fieldNum(CFMJournalTrans, PaymentAmount), SelectionField::Sum);
        qbds.addRange(fieldNum(CFMJournalTrans, JournalId)).value(journalId);

        addGroupField(fieldNum(CFMJournalTrans, SourceType));

        MapEnumerator me = fieldSourceTargetMap.getEnumerator();
        QueryBuildDataSource refQbds;

        while(me.moveNext())
        {
            FieldId sourceFieldId, targetFieldId, targetFieldStrId, targetDisplayFieldId;
            Name attributeName;

            [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = me.currentValue();

            switch (sourceFieldId)
            {
                case fieldNum(CFMJournalTrans, PaymentPriority):
                    refQbds = qbds.addDataSource(tableNum(CFMPaymentPriority));
                    refQbds.joinMode(JoinMode::OuterJoin);
                    refQbds.relations(true);
                    refQbds.addGroupByField(fieldNum(CFMPaymentPriority, PriorityCode));
                    //group by field added to easy key creation in the fillAnalyticalTable method
                    addGroupField(sourceFieldId);
                    refQbds.fetchMode(QueryFetchMode::One2One);
                    break;

                case fieldNum(CFMJournalTrans, AccountNumParty):
                    refQbds = qbds.addDataSource(tableNum(DirPartyTable));
                    refQbds.joinMode(JoinMode::OuterJoin);
                    refQbds.relations(true);
                    refQbds.addGroupByField(fieldNum(DirPartyTable, Name));
                    //group by field added to easy key creation in the fillAnalyticalTable method and split the same name Party
                    addGroupField(sourceFieldId);
                    refQbds.fetchMode(QueryFetchMode::One2One);
                    break;

                case fieldNum(CFMJournalTrans, LedgerDimension):
                    refQbds = qbds.addDataSource(tableNum(DimensionAttributeLevelValueView));
                    refQbds.joinMode(JoinMode::OuterJoin);
                    refQbds.fetchMode(QueryFetchMode::One2One);
                    refQbds.addLink(fieldName2id(qbds.table(), fieldStr(CFMJournalTrans, LedgerDimension)), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId), qbds.name());
                    QueryBuildRange qbrChild;
                    DimensionAttribute dimAttr = DimensionAttribute::findByName(attributeName);
                    qbrChild = refQbds.addRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute));
                    qbrChild.value(queryValue(dimAttr.RecId));
                    qbrChild.status(RangeStatus::Hidden);
                    refQbds.addGroupByField(fieldNum(DimensionAttributeLevelValueView, DisplayValue));
                    attribDataSource.insert(attributeName, refQbds.id());
                    break;

                default:
                    addGroupField(sourceFieldId);
                    break;
            }
        }

        addGroupField(fieldNum(CFMJournalTrans, TransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotals</Name>
				<Source><![CDATA[
    private void createTotals()
    {
        for (int i = 1; i <= conLen(totalsLevelList); i++)
        {
            this.createLevelTotals(conPeek(totalsLevelList, i));
        }

        delete_from analyticTable
            where analyticTable.IsOpeningBalance == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>curViewMaxLevel</Name>
				<Source><![CDATA[
    private Counter curViewMaxLevel()
    {
        return fieldSourceTargetMap.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAnalyticalTable</Name>
				<Source><![CDATA[
    private void fillAnalyticalTable()
    {
        CFMJournalTrans journalTrans;
        QueryRun queryRun;
        Container key, curKey;
        RecordInsertList ril;
        Boolean isFirst = true;
        CFMPaymentPriority paymentPriority;
        DirPartyTable partyTable;
        MapEnumerator me;
        FieldId sourceFieldId, targetFieldId, targetFieldStrId, targetDisplayFieldId;
        Name attributeName;
        Counter curViewMaxLevel = this.curViewMaxLevel();
        TransDate curDate;
        DimensionAttributeLevelValueView attributeValueView;

        container getKey()
        {
            container con = conNull();

            me = fieldSourceTargetMap.getEnumerator();
            while(me.moveNext())
            {
                [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = me.currentValue();

                if (attributeName)
                {
                    if (!attribDataSource.exists(attributeName))
                    {
                        throw error(strFmt("@SYS19378",funcName()));
                    }

                    attributeValueView = queryRun.getNo(attribDataSource.lookup(attributeName));
                    con += attributeValueView.DisplayValue;
                }
                else
                {
                    con += journalTrans.(sourceFieldId);
                }
            }
            return con;
        }

        void fillAnalyticalTableByMeasure()
        {
            me = fieldSourceTargetMap.getEnumerator();
            while(me.moveNext())
            {
                [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = me.currentValue();

                switch (sourceFieldId)
                {
                    case fieldNum(CFMJournalTrans, AccountNumParty):
                        analyticTable.(targetFieldId) = journalTrans.(sourceFieldId);
                        partyTable = queryRun.get(tableNum(DirPartyTable));
                        analyticTable.AccountNumPartyStr = partyTable.Name;
                        analyticTable.(targetFieldStrId) = this.getStrValue(partyTable.Name);
                        break;

                    case fieldNum(CFMJournalTrans, PaymentPriority):
                        analyticTable.(targetFieldId) = journalTrans.(sourceFieldId);
                        paymentPriority = queryRun.get(tableNum(CFMPaymentPriority));
                        analyticTable.PaymentPriorityStr = paymentPriority.PriorityCode;
                        analyticTable.(targetFieldStrId) = this.getStrValue(paymentPriority.PriorityCode);
                        break;

                    case fieldNum(CFMJournalTrans, LedgerDimension):
                        attributeValueView = queryRun.getNo(attribDataSource.lookup(attributeName));
                        analyticTable.(targetFieldStrId) = this.getStrValue(attributeValueView.DisplayValue);
                        break;

                    case fieldNum(CFMJournalTrans, Status):
                        analyticTable.(targetFieldId) = journalTrans.(sourceFieldId);
                        analyticTable.(targetFieldStrId) = journalTrans.Status == CFMPaymentRequestStatus::Opened ? "@SYS26699" : this.getStrValue(journalTrans.Status);
                        break;

                    default:
                        analyticTable.(targetFieldId) = journalTrans.(sourceFieldId);
                        analyticTable.(targetFieldStrId) = this.getStrValue(journalTrans.(sourceFieldId));
                }
                //fill display value for the lowest level
                if (me.currentKey() == curViewMaxLevel)
                {
                    analyticTable.(targetDisplayFieldId) = analyticTable.(targetFieldStrId);
                }
            }
        }

        ril = new RecordInsertList(tableNum(CFMAnalyticTableTmp),
            true,
            true,
            true,
            false,
            true,
            analyticTable);

        delete_from analyticTable;

        this.createQuery();

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            journalTrans = queryRun.getNo(1);

            key = getKey();

            if (key != curKey)
            {
                if (isFirst)
                {
                    isFirst = false;
                }
                else
                {
                    ril.add(analyticTable);
                }

                analyticTable.clear();
                analyticTable.Level = curViewMaxLevel;
                fillAnalyticalTableByMeasure();
                analyticTable.IsOpeningBalance = openingBalanceSourceTypes.in(analyticTable.SourceType);
                curKey = key;
            }

            if (analyticTable.IsOpeningBalance)
            {
                curDate = dateNull();
            }
            else
            {
                curDate = journalTrans.TransDate;
            }

            if (!amountDateFieldIdMap.exists(curDate))
            {
                throw error(strFmt("@SYS19378",funcName()));
            }

            analyticTable.(amountDateFieldIdMap.lookup(curDate)) += journalTrans.PaymentAmount;
        }

        if (conLen(key))
        {
            ril.add(analyticTable);
            ril.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotals</Name>
				<Source><![CDATA[
    private void fillTotals(CFMAnalyticTableTmp _actualBalanceRecord, CFMAnalyticTableTmp _openingBalanceRecord, CFMAnalyticTableTmp _netFlowRecord)
    {
        AmountCur actualBalance;
        FieldId curFieldId;
        MapEnumerator me = amountDateIntFieldIdMap.getEnumerator();

        while (me.moveNext())
        {
            curFieldId = me.currentValue();

            if (me.currentKey() != 1)
            {
                _openingBalanceRecord.(curFieldId) = actualBalance;
            }

            _actualBalanceRecord.(curFieldId) = _openingBalanceRecord.(curFieldId) + _netFlowRecord.(curFieldId);

            actualBalance = _actualBalanceRecord.(curFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStrValue</Name>
				<Source><![CDATA[
    private str getStrValue(anytype _value)
    {
        return strFmt('%1', _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDateFieldList</Name>
				<Source><![CDATA[
    private void initDateFieldList()
    {
        SysDictTable sdtAnalyticTable = SysDictTable::newTableId(tableNum(CFMAnalyticTableTmp));
        CFMJournalTable journalTable = CFMJournalTable::find(journalId);
        TransDate curDate;
        FieldId fieldId;

        void addElement(Integer _i, TransDate _curDate)
        {
            amountDateIntFieldIdMap.insert(_i, fieldId2Ext(fieldId, _i));
            amountDateFieldIdMap.insert(_curDate, fieldId2Ext(fieldId, _i));
        }

        amountDateIntFieldIdMap = new Map(Types::Integer, Types::Integer);
        amountDateFieldIdMap = new Map(Types::Date, Types::Integer);

        fieldId = fieldNum(CFMAnalyticTableTmp, AmountOnDate);

        addElement(1, dateNull());

        int i = 1;
        for(curDate = journalTable.DateFrom; curDate <= journalTable.DateTo; curDate++)
        {
            i++;
            addElement(i, curDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotalsLevelList</Name>
				<Source><![CDATA[
    private void initTotalsLevelList()
    {
        MapEnumerator me;
        FieldId sourceFieldId, targetFieldId, targetFieldStrId, targetDisplayFieldId;
        Name attributeName;

        me = fieldSourceTargetMap.getEnumerator();
        while (me.moveNext())
        {
            [sourceFieldId, attributeName, targetFieldId, targetFieldStrId, targetDisplayFieldId] = me.currentValue();
            switch (targetFieldId)
            {
                case fieldNum(CFMAnalyticTableTmp, PaymentAccountNum):
                case fieldNum(CFMAnalyticTableTmp, CurrencyCode):
                    totalsLevelList += me.currentKey();
                    break;
                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>CFMAnalyticalPivoter</c> class.
    /// </summary>
    /// <remarks>
    /// This method is private and it cannot be used to create instances of this class. To initialize the
    /// class, use the <c>CFMAnalyticalPivoter::constructFromJournal</c> method.
    /// </remarks>
    private void new()
    {
        openingBalanceSourceTypes = new Set(Types::Enum);
        openingBalanceSourceTypes.add(CFMJournalTransSourceType::OpeningBalanceBank);
        openingBalanceSourceTypes.add(CFMJournalTransSourceType::OpeningBalanceCash);
        openingBalanceSourceTypes.add(CFMJournalTransSourceType::RemittanceEnRoute);
        openingBalanceSourceTypes.add(CFMJournalTransSourceType::BankJour);
        openingBalanceSourceTypes.add(CFMJournalTransSourceType::CashJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldSourceTargetMap</Name>
				<Source><![CDATA[
    public Map parmFieldSourceTargetMap(Map _fieldSourceTargetMap = fieldSourceTargetMap)
    {
        fieldSourceTargetMap = _fieldSourceTargetMap;

        return fieldSourceTargetMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public CFMJournalId parmJournalId(CFMJournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAnalyticTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Links internal <c>CFMAnalyticTableTmp</c> cursor with existing instance of <c>CFMAnalyticTableTmp</c> temporary table.
    /// </summary>
    /// <param name="_analyticTable">
    /// THe instance of <c>CFMAnalyticTableTmp</c> temporary table.
    /// </param>
    public void setAnalyticTable(CFMAnalyticTableTmp _analyticTable)
    {
        analyticTable.linkPhysicalTableInstance(_analyticTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>