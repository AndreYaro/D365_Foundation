<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBlockingRelatedTransactionInfoSingleton</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventBlockingRelatedTransactionInfoSingleton</c> class is responsible for related inventory blocking transactions information.
/// </summary>
internal final class InventBlockingRelatedTransactionInfoSingleton implements System.IDisposable
{
    private static InventBlockingRelatedTransactionInfoSingleton singleton;
    private InventQualityOrderTable inventQualityOrder;
    private CreatedTransactionId ttsid;
    private Set inventTransRecIdSet;
    private boolean isValidatingQualityOrder;
    private InventDimId selectedQualityOrderInventDimId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventQualityOrderTable</c> instance.
    /// </summary>
    /// <returns><c>InventQualityOrderTable</c> buffer.</returns>
    [Hookable(false)]
    internal InventQualityOrderTable inventQualityOrder()
    {
        return inventQualityOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventDim</c> instance.
    /// </summary>
    /// <returns><c>InventDim</c> buffer.</returns>
    [Hookable(false)]
    internal InventDim inventDim()
    {
        InventDim inventDim;

        if (this.isCurrent())
        {
            // In case Item sampling is configured with Process per storage dimension "Location" set to false, then default the dimensions using 
            // the existing behavior of clearing up all dimensions below location. Else, we might end up with holes in the dimensions.
            if (inventDim.wMSLocationId && WHSInventEnabled::exist(inventQualityOrder.ItemId) && PdsGlobal::pdsIsCWItem(inventQualityOrder.ItemId))
            {
                inventDim = InventDim::find(inventQualityOrder.InventDimId);
            }
            else
            {
                inventDim = inventQualityOrder.inventDimForBlocking(); // Retain the existing behavior for the non-warehouse items.
            }
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes with the quality order buffer.
    /// </summary>
    /// <param name = "InventQualityOrderTable"><c>InventQualityOrderTable</c> buffer.</param>
    /// <returns>An instance of <c>InventBlockingRelatedTransactionInfoSingleton</c> object.</returns>
    [Hookable(false)]
    internal InventBlockingRelatedTransactionInfoSingleton init(InventQualityOrderTable _inventQualityOrder)
    {
        inventQualityOrder = _inventQualityOrder;
        ttsid = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the singleton instance <c>InventBlockingRelatedTransactionInfoSingleton</c> is in the current scope.
    /// </summary>
    /// <returns>
    /// true if the instance <c>InventBlockingRelatedTransactionInfoSingleton</c> is in the current scope with valid quality order; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isCurrent()
    {
        return InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId() == ttsid && inventQualityOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidatingQualityOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isValidatingQualityOrder()
    {
        return InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId() == ttsid && isValidatingQualityOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedQualityOrderInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimId getSelectedQualityOrderInventDimId()
    {
        return InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId() == ttsid ? selectedQualityOrderInventDimId : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSelectedQualityOrderInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initializeSelectedQualityOrderInventDimId(InventQualityOrderTable _inventQualityOrder)
    {        
        if (ttsid
            && InventTable::isItemCatchWeightAndWarehouseProcessEnabled(_inventQualityOrder.ItemId))
        {
            isValidatingQualityOrder = true;
            selectedQualityOrderInventDimId = _inventQualityOrder.InventDimId;
        } 
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRelatedBlockingTransactionRecordSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize related blocked transaction record id set based on a specified quality order.
    /// </summary>
    /// <param name="_qualityOrder">
    /// An <c>InventQualityOrderTable</c> specifying values for inventory blocking record.
    /// </param>
    /// <returns>
    /// The singleton instance of <c>InventBlockingRelatedTransactionInfoSingleton</c>.
    /// </returns>
    [Hookable(false)]
    internal InventBlockingRelatedTransactionInfoSingleton initializeRelatedBlockingTransactionRecordSet(InventQualityOrderTable _inventQualityOrder)
    {
        inventTransRecIdSet = new Set(Types::Int64);
        ttsid = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();
        this.initializeSelectedQualityOrderInventDimId(_inventQualityOrder);
        
        if (_inventQualityOrder.mustCreateQuarantineOrder())
        {
            InventTrans                    inventTrans;
            InventTransOrigin              inventTransOrigin;
            InventTransOriginBlockingIssue inventTransOriginBlockingIssue;
            InventBlockingQualityOrder     inventBlockingQualityOrder;

            if (ttsid)
            {
                inventQualityOrder = _inventQualityOrder;
                while select RecId from inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.RecId         == inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId == inventQualityOrder.InventRefTransId
                exists join inventTransOriginBlockingIssue
                    where inventTransOriginBlockingIssue.InventTransOrigin  == inventTrans.MarkingRefInventTransOrigin
                exists join inventBlockingQualityOrder
                    where inventBlockingQualityOrder.InventBlocking         == inventTransOriginBlockingIssue.InventBlockingIssue
                    &&  inventBlockingQualityOrder.InventQualityOrderId     == inventQualityOrder.QualityOrderId
                {
                    inventTransRecIdSet.add(inventTrans.RecId);
                }
            }

        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBlockingRelatedTransRecIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns related inventory blocking transaction record id set based on quality order.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> contains related inventory blocking transaction Record Ids.
    /// </returns>
    [Hookable(false)]
    internal Set inventBlockingRelatedTransRecIdSet()
    {
        return inventTransRecIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a singleton instance of <c>InventBlockingRelatedTransactionInfoSingleton</c> .
    /// </summary>
    /// <returns>
    /// A singleton <c>InventBlockingRelatedTransactionInfoSingleton</c> instance.
    /// </returns>
    [Hookable(false)]
    internal static InventBlockingRelatedTransactionInfoSingleton instance()
    {
        if (!singleton)
        {
            singleton = new InventBlockingRelatedTransactionInfoSingleton();
        }

        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes the current <c>InventBlockingRelatedTransactionInfoSingleton</c> instance.
    /// </summary>
    public void Dispose()
    {
        ttsid = 0;
        isValidatingQualityOrder = false;
        selectedQualityOrderInventDimId = '';
        inventQualityOrder = null;
        inventTransRecIdSet = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>