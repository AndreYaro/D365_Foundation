<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayRateObj</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class for rates from <c>RPayRateTable</c>.
/// </summary>
public class rPayRateObj
{
    RPayRateTable           rateTable;
    RPayRateTrans           rateTrans;
    RPayRateCallContext     callContext;

    boolean         cached;
    RPayRateValue   rateValue;
    RPayRateTypeAC  rateTypeAC;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appliedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rate applied date.
    /// </summary>
    /// <returns>
    /// The date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayRateDate appliedDate()
    {
        return rateTrans.RateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalculateValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if value can be calculated.
    /// </summary>
    /// <returns>
    /// True if calculation can be done.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canCalculateValue()
    {
        RPayRateTable       rPayRateTable;
        RPayRateTrans       rPayRateTrans;
        RPayRateCallContext callContextCheck;
        RPayRateTypeAC      rPayRateTypeAC;
        boolean             ret = true;

        if (rateTable.RateValueType == RpayRateValueType::RateValue)
        {
            rPayRateTable  = RPayRateTable::find(rateTable.PayRate);
            rPayRateTypeAC = rateTypeAC;

            while (rPayRateTable.RateValueType == RpayRateValueType::RateValue)
            {
                callContextCheck = new RPayRateCallContext();
                callContextCheck.parmRateDate(callContext.parmRateDate());

                switch (rPayRateTable.LineType)
                {
                    case RPayRateType::Employee:
                        callContextCheck.parmEmployeeId(rPayRateTypeAC);
                        break;

                    case RPayRateType::EmplGroup:
                        callContextCheck.parmPayGroup(rPayRateTypeAC);
                        break;

                    case RPayRateType::Person:
                        callContextCheck.parmPersonId(rPayRateTypeAC);
                        break;
                }

                rPayRateTypeAC = this.rateTypeAc(rPayRateTable, callContextCheck);

                if (rPayRateTable.LineType == RPayRateType::EmplGroup && !rPayRateTypeAC )
                {
                    break;
                }

                rPayRateTrans = RPayRateTrans::find(rPayRateTable.PayRate, callContextCheck.parmRateDate(), rPayRateTypeAC);
                if (rPayRateTrans.RecId)
                {
                    rPayRateTable = RPayRateTable::find(rPayRateTrans.RateValue);
                }
                else
                {
                    if (rPayRateTable.RateDefaultValue)
                    {
                        rPayRateTable = RPayRateTable::find(rPayRateTable.RateDefaultValue);
                    }
                    else
                    {
                        break;
                    }
                }
                if (rPayRateTable.PayRate == rateTable.PayRate)
                {
                    if (callContext.parmEmployeeId())
                    {
                        error(strFmt("@RUP1929", rateTable.PayRate, callContext.parmEmployeeId()));
                    }
                    else
                    {
                        error(strFmt("@RUP6005", rateTable.PayRate));
                    }

                    ret = false;
                    break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds rate record.
    /// </summary>
    /// <param name="_forUpdate">
    /// An indicator, if true record will be selected for update.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void findRateTrans(boolean _forUpdate = false)
    {
        rateTrans = RPayRateTrans::find(rateTable.PayRate, callContext.parmRateDate(), rateTypeAC, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets rate value.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Element for rate not found.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void getValue()
    {
        RpayRateDisplayValue    tempValue;
        RpayRateValueTypeEngine valueType;

        if (cached)
        {
            return;
        }
        else
        {
            if (rateTable.LineType == RPayRateType::EmplGroup && !rateTypeAC)
            {
                if (rateTable.RateValueType == RpayRateValueType::Criterion)
                {
                    rateValue = 0;
                }
                else
                {
                    valueType = this.initRateTypeEngine();
                    if (this.canCalculateValue())
                    {
                        rateValue = valueType.getPayRateValue(rateTable.RateDefaultValue, callContext);
                    }
                }
            }
            else
            {
                valueType = this.initRateTypeEngine();

                switch (rateTable.RateValueType)
                {
                    case RpayRateValueType::Enum:
                        if (rateTrans)
                        {
                            tempValue = rateTrans.RateValue;
                        }
                        else
                        {
                            tempValue = rateTable.RateDefaultValue;
                        }

                        if (!RPayRateEnumValue::existValue(rateTable.RecId, str2int(tempValue)))
                        {
                            throw error(strFmt("@RUP3347", tempValue, rateTable.PayRate));
                        }

                    default:
                        if (rateTable.RateValueType == RpayRateValueType::Criterion)
                        {
                            tempValue = '';
                        }
                        else
                        {
                            if (rateTrans)
                            {
                                tempValue = rateTrans.RateValue;
                            }
                            else
                            {
                                tempValue = rateTable.RateDefaultValue;
                            }
                        }
                }

                if (this.canCalculateValue())
                {
                    rateValue = valueType.getPayRateValue(tempValue, callContext);
                }
            }

            cached = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class from rate record.
    /// </summary>
    /// <param name="_rateTable">
    /// The rate record.
    /// </param>
    /// <param name="_callContext">
    /// The call context.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init(RPayRateTable _rateTable, RPayRateCallContext _callContext)
    {
        callContext = _callContext;
        rateTable   = _rateTable;

        if (!cached)
        {
            rateTypeAC = this.rateTypeAc(rateTable, _callContext);
            this.findRateTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRateTypeEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes rate value type engine.
    /// </summary>
    /// <returns>
    /// The initialized <c>RpayRateValueTypeEngine</c> class instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RpayRateValueTypeEngine initRateTypeEngine()
    {
        RpayRateValueTypeEngine valueType;

        valueType = RpayRateValueTypeEngine::construct(rateTable.RateValueType);
        valueType.rPayRateTable(rateTable);
        valueType.rPayRateTrans(rateTrans);

        return valueType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRateTransExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Allows check difference between 'null' and 'zero'.
    /// </summary>
    /// <returns>
    ///     true if <c>RPayRateTrans</c> was found. Overwise, false.
    ///     Allows check difference between 'null' and 'zero'.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isRateTransExists()
    {
        return rateTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateTypeAc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the criteria from the rate.
    /// </summary>
    /// <param name="_rPayRateTable">
    /// The rates table record.
    /// </param>
    /// <param name="_callContext">
    /// The context.
    /// </param>
    /// <returns>
    /// The criteria.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The payroll group table type field does not corresponds to group type.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayRateTypeAC rateTypeAc(RPayRateTable _rPayRateTable, RPayRateCallContext _callContext)
    {
        RPayRateTypeAC rateTypeACLocal;
        RpayGroupTable rpayGroupTable;
        RpayRateTrans  rpayRateTrans;
        RPayPersonEmplId emplPersonId;

        switch (_rPayRateTable.LineType)
        {
            case RPayRateType::System:
                rateTypeACLocal = '';
                break;

            case RPayRateType::Employee:
                rateTypeACLocal = _callContext.parmEmployeeId();
                break;

            case RPayRateType::HrmOrganization:
                rateTypeACLocal = RPayHistory::getHistoryLineByDate(_callContext.parmEmployeeId(), _callContext.parmRateDate()).HrmOrganizationId;
                break;

            case RPayRateType::EmplGroup:

                while select PayGroup, Type from rpayGroupTable
                      order by PayGroup
                          where !rpayGroupTable.Blocked
                      exists join rpayRateTrans
                          where rpayRateTrans.LineType   == RPayRateType::EmplGroup &&
                                rpayRateTrans.PayRate    == _rpayRateTable.PayRate  &&
                                rpayRateTrans.RateTypeAC == rpayGroupTable.PayGroup
                {
                    switch (rpayGroupTable.Type)
                    {
                        case RPayGroupType::Employee:
                            emplPersonId = _callContext.parmEmployeeId();
                            break;
                        case RPayGroupType::Person:
                            emplPersonId = _callContext.parmPersonId();
                            break;
                        default:
                            throw error(strFmt("@SYS320346", enumId2pname(enumNum(RPayGroupType)), rpayGroupTable.Type));
                    }

                    if (RpayGroupMember::memberByGroup(emplPersonId, rpayGroupTable.PayGroup, _callContext.parmRateDate()))
                    {
                        rateTypeACLocal = rpayGroupTable.PayGroup;
                        break;
                    }
                }
                break;

            case RPayRateType::Person:
                rateTypeACLocal = _callContext.parmPersonId();
                break;
        }

        return rateTypeACLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value rate.
    /// </summary>
    /// <param name="_rateValue">
    /// A rate value.
    /// </param>
    /// <param name="_notes">
    /// The notes for rate.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setValue(RPayRateValue _rateValue, Notes _notes)
    {
        RpayRateValueTypeEngine rpayRateValueTypeEngine;
        ;

        if (rateTable)
        {
            if (this.value() != _rateValue)
            {
                this.findRateTrans(true);

                if (rateTrans.RateDate == callContext.parmRateDate())
                {
                    rpayRateValueTypeEngine = this.initRateTypeEngine();
                    rpayRateValueTypeEngine.setTypedValue(_rateValue);
                    rateTrans.update();
                }
                else
                {
                    rateTrans.clear();
                    rateTrans.RateDate      = callContext.parmRateDate();
                    rateTrans.LineType      = rateTable.LineType;
                    rateTrans.PayRate       = rateTable.PayRate;
                    rateTrans.RateTypeAC    = rateTypeAC;
                    rateTrans.Notes         = _notes;

                    rpayRateValueTypeEngine = this.initRateTypeEngine();
                    rpayRateValueTypeEngine.setTypedValue(_rateValue);
                    rateTrans.insert();
                }
            }
            rateValue = _rateValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>value</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets rate value.
    /// </summary>
    /// <param name="_get">
    /// An indicator, if Yes rate value will be get.
    /// </param>
    /// <param name="_rateValue">
    /// The rate value to be set.
    /// </param>
    /// <param name="_notes">
    /// The notes for the rate value.
    /// </param>
    /// <returns>
    /// The rate value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayRateValue value(boolean _get = NoYes::Yes, RPayRateValue _rateValue = 0, Notes _notes = '')
    {
        if (_get)
        {
            this.getValue();
        }
        else
        {
            this.setValue(_rateValue, _notes);
        }

        return rateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromRateCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs class from rate.
    /// </summary>
    /// <param name="_rateCode">
    /// The rate.
    /// </param>
    /// <param name="_callContext">
    /// The call context.
    /// </param>
    /// <returns>
    /// The constructed <c>RPayRateObj</c> class instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public RPayRateObj constructFromRateCode(RPayRateCode _rateCode, RPayRateCallContext _callContext)
    {
        return RPayRateObj::constructFromRateTable(RPayRateTable::find(_rateCode), _callContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromRateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs class from rate record.
    /// </summary>
    /// <param name="_rateTable">
    /// The <c>RPayRateTable</c> table record.
    /// </param>
    /// <param name="_callContext">
    /// The call context.
    /// </param>
    /// <returns>
    /// The constructed <c>RPayRateObj</c> class instance.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Not enough parameters.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public RPayRateObj constructFromRateTable(RPayRateTable _rateTable, RPayRateCallContext _callContext)
    {
        RPayRateObj rateObj;

        if (_rateTable == null || _callContext == null)
        {
            throw error(Error::missingParameter(null));
        }

        rateObj = new RPayRateObj();
        rateObj.init(_rateTable, _callContext);

        return rateObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateAndValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets date and value for the rate found within dates interval by rate code.
    /// </summary>
    /// <param name="_payRateCode">
    /// The rate.
    /// </param>
    /// <param name="_dateStart">
    /// The start date.
    /// </param>
    /// <param name="_dateEnd">
    /// The end date.
    /// </param>
    /// <param name="_context">
    /// The call context.
    /// </param>
    /// <returns>
    /// A container with date and value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getDateAndValue(RPayRateCode         _payRateCode,
                                      StartDate            _dateStart,
                                      EndDate              _dateEnd,
                                      RPayRateCallContext  _context)
    {
        container               tmpCon;
        int                     i,j;
        container               dateAndValue;
        RPayRateObj             rateObj;
        RPayRateTable           rPayRateTable = RPayRateTable::find(_payRateCode);

        RPayRateCallContext     context = _context;
        context.parmRateDate(_dateEnd);

        rateObj = RPayRateObj::constructFromRateCode(_payRateCode, context);

        if (rateObj.isRateTransExists() && rateObj.appliedDate() > _dateStart)
        {
            dateAndValue = conPoke(dateAndValue, 1, [rateObj.appliedDate(), _dateEnd, rateObj.value()]);
            tmpCon = RPayRateObj::getDateAndValue(_payRateCode, _dateStart, rateObj.appliedDate() - 1, _context);
            j = conLen(dateAndValue) + 1;
            for (i = 1 ; i <= conLen(tmpCon) ; i++)
            {
                dateAndValue = conPoke(dateAndValue,j,conPeek(tmpCon,i));
                j++;
            }
        }
        else
        {
            dateAndValue = conPoke(dateAndValue, 1, [_dateStart, _dateEnd, rateObj.value()]);
        }

        return dateAndValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>