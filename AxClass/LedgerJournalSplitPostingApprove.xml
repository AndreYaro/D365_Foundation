<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalSplitPostingApprove</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalSplitPostingApprove extends LedgerJournalSplitPosting
{
    AmountMST   taxAmountPosted;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerJournalSplitPostingApprove construct()
    {
        return new LedgerJournalSplitPostingApprove();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxTransactionAmountExcludeTaxCodeEntries</Name>
				<Source><![CDATA[
    private AmountCur totalTaxTransactionAmountExcludeTaxCodeEntries()
    {
        select sum(TaxAmountCur)
            from tmpLedgerJournalSplitHeader
            where tmpLedgerJournalSplitHeader.TaxCode == '';

        return tmpLedgerJournalSplitHeader.TaxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDifference</Name>
				<Source><![CDATA[
    AmountCur amountDifference()
    {
        if (this.totalTaxAmountCur())
        {
            if (this.journalAmountInclTax())
            {
                return -taxAmountPosted;
            }
            else
            {
                // Retrieve the total allocated tax amount total, minus the tax amounts which are included in the net amount totals.
                // The tax entries using a tax code (instead of the tax group setup) are 100% tax amounts, and are included in the
                // net amount totals.
                AmountCur taxAmountCur = this.totalTaxTransactionAmountExcludeTaxCodeEntries();
                return taxAmountCur - taxAmountPosted;
            }
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxAmountPosted</Name>
				<Source><![CDATA[
    void calcTaxAmountPosted(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalVoucherChanged     ledgerJournalVoucherChanged;
        TransDate                       transDateLocal;
        Voucher                         voucher;

        ledgerJournalVoucherChanged = LedgerJournalVoucherChanged::find(_ledgerJournalTrans.JournalNum,
                                                                        _ledgerJournalTrans.Voucher);
        if (ledgerJournalVoucherChanged)
        {
            voucher = ledgerJournalVoucherChanged.FromVoucher;
            transDateLocal = ledgerJournalVoucherChanged.FromDate;
        }
        else
        {
            voucher   = _ledgerJournalTrans.Voucher;
            transDateLocal = _ledgerJournalTrans.TransDate;
        }
        taxAmountPosted = Tax::netTaxTotalVoucherDate(voucher,
                                                      transDateLocal,
                                                      _ledgerJournalTrans.JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineModuleType</Name>
				<Source><![CDATA[
    protected void determineModuleType()
    {
        taxModuleType = TaxModuleType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalAmountCur</Name>
				<Source><![CDATA[
    AmountCur getOriginalAmountCur(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTrans;

        select  sum(AmountCurDebit),sum(AmountCurCredit)
        from    ledgerJournalTrans
        where   ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum &&
                ledgerJournalTrans.Voucher    == _ledgerJournalTrans.Voucher    &&
                ledgerJournalTrans.PurchLedgerPosting == ArrivalPostingType::Offset;

        return ledgerJournalTrans.AmountCurDebit - ledgerJournalTrans.AmountCurCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccount</Name>
				<Source><![CDATA[
    LedgerJournalTrans mainAccount(LedgerJournalId  _ledgerJournalId,
                                   Voucher          _voucher)
    {
        return LedgerJournalTrans::mainAccount(_ledgerJournalId, _voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecialFields</Name>
				<Source><![CDATA[
    protected void updateSpecialFields(LedgerJournalTrans _ledgerJournalTrans)
    {
        super(_ledgerJournalTrans);
        _ledgerJournalTrans.PurchLedgerPosting    = ArrivalPostingType::None;
        _ledgerJournalTrans.Invisible             = NoYes::No;
        _ledgerJournalTrans.NoEdit                = NoYes::No;
        _ledgerJournalTrans.Approved              = NoYes::Yes;
        _ledgerJournalTrans.PoolRecId             = 0;
        _ledgerJournalTrans.Transferred           = NoYes::No;
        _ledgerJournalTrans.TransferredBy         = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTrans</Name>
				<Source><![CDATA[
    protected boolean useTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret;

        ret = super(_ledgerJournalTrans);

        if (_ledgerJournalTrans.PurchLedgerPosting != ArrivalPostingType::None)
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherMainAccount</Name>
				<Source><![CDATA[
    static LedgerJournalTrans voucherMainAccount(LedgerJournalId _ledgerJournalId,
                                                        Voucher         _voucher)
    {
        LedgerJournalTrans ledgerJournalTrans;

        select ledgerJournalTrans
        where ledgerJournalTrans.JournalNum == _ledgerJournalId &&
              ledgerJournalTrans.Voucher    == _voucher    &&
              ledgerJournalTrans.PurchLedgerPosting == ArrivalPostingType::Offset;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>