<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_KanbanEmpty</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventMovementFactoryAttribute(tableStr(Kanban))]
class InventMov_KanbanEmpty extends InventMovement
{
    Kanban      kanban;
    KanbanType  kanbanType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the balance sheet account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production issue account for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (!cacheAccountBalanceSheet)
        {
            ProdGroup prodGroup = kanban.prodGroup();

            // <GCN>
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (prodGroup)
                {
                    cacheAccountBalanceSheet = prodGroup.IssueLedgerDimension;
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::ProdIssue,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().itemGroupId());
                }
            }
            else
            {
                // </GCN>
                cacheAccountBalanceSheet = prodGroup &&
                                        (prodGroup.IssueLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                        prodGroup.IssueLedgerDimension :
                                        InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdIssue));
            // <GCN>
            }
            // </GCN>
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the operations account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production issue offset account for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            ProdGroup prodGroup = kanban.prodGroup();

            cacheAccountOperations = prodGroup &&
                                    (prodGroup.IssueOffsetLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                        prodGroup.IssueOffsetLedgerDimension :
                                        InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdIssueOffsetAccount));
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the physical account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production picking list account for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountPhysical()
    {
        // <GEERU>
        boolean     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        //     // <GCN>
        //     boolean     countryRegion_CN = isLegalEntityInCountryRegion([#isoCN]);
        //     // </GCN>

        if (!cacheAccountPhysical)
        {
            ProdGroup prodGroup = kanban.prodGroup();
            // <GCN>
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (prodGroup)
                {
                    cacheAccountPhysical = prodGroup.PicklistLedgerDimension;
                }
                else
                {
                    cacheAccountPhysical = InventPosting::itemExtendParm_CN(
                        InventAccountType::ProdPicklist,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().itemGroupId());
                }
            }
            else
            {
                cacheAccountPhysical = prodGroup &&
                                (prodGroup.PicklistLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                    prodGroup.PicklistLedgerDimension :
                                    InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdPicklist));
            // <GCN>
            }
            // </GCN>
        }

        return cacheAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the automatic report as finished is acceptable.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public boolean canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnSupermarket</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a movement can have an <c>InventDimId</c> value that represents a kanban
    ///    supermarket.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public boolean canBeOnSupermarket()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && kanban)
        {
            InventTransOriginKanbanEmptied::writeOriginOwnerRelationship(kanban.RecId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public void deleteOriginOwnerRelationship()
    {
        if (kanban)
        {
            InventTransOriginKanbanEmptied::deleteOwnerRelationship(kanban.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventDimId</c> value.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimId</c> value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base method. Use the <c>InventDimId</c> field from the <c>KanbanJob</c>
    ///    table.The kanban job used is the last kanban job for the kanban.
    /// </remarks>
    public InventDimId inventDimId()
    {
        return kanban.lastKanbanJob().InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginKanbanEmptied::findInventTransOriginId(kanban.RecId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>ItemId</c> value of the movement.
    /// </summary>
    /// <returns>
    ///    An item number.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base method. Use the <c>ItemId</c> field from the <c>Kanban</c> table.
    /// </remarks>
    public ItemId itemId()
    {
        return kanban.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the quarantine control is required.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeWMSOrderControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the output orders must be used with the movement.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustBeWMSOrderControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        Kanban              _kanban,
        InventType          _inventType = KanbanType::construct(_kanban))
    {
        kanban     = _kanban;
        kanbanType = _inventType as KanbanType;

        if (!kanbanType)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(kanban,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an inventory movement from the original <c>Kanban</c> table buffer.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventMovement</c> class.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.Retrieves null if the current <c>Kanban</c> record has
    ///    not been inserted into the database.
    /// </remarks>
    public InventMovement newMovement_Orig()
    {
        return kanban.RecId ? new InventMov_KanbanEmpty(kanban.orig(),kanban.orig().type()) : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the physical offset account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production picking list offset account for
    ///    posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount offsetAccountPhysical()
    {
        if (!cacheOffsetAccountPhysical)
        {
            ProdGroup prodGroup = kanban.prodGroup();

            cacheOffsetAccountPhysical = prodGroup &&
                                        (prodGroup.PickListOffsetLedgerDimension || ProdParameters::find().ProdPostingType == ProdPostingType::ProdGroup) ?
                                            prodGroup.PickListOffsetLedgerDimension :
                                            InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdPicklistOffsetAccount));
        }

        return cacheOffsetAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the balance sheet ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production issue posting type for posting.
    /// </remarks>
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::ProdIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the physical offset ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production picking list offset posting type for
    ///    posting.
    /// </remarks>
    public LedgerPostingType postingOffsetPhysical()
    {
        return LedgerPostingType::ProdPicklistOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the operations ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production issue offset posting type for posting.
    /// </remarks>
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::ProdIssueOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the physical ledger posting type for the movement.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the production picking list posting type for posting.
    /// </remarks>
    public LedgerPostingType postingPhysical()
    {
        return LedgerPostingType::ProdPicklist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the physical quantity that remains.
    /// </summary>
    /// <returns>
    ///    The physical quantity that remains.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventQty remainPhysical()
    {
        return this.transQty() - this.transIdSum().physical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the movement quantity, which can be reserved.
    /// </summary>
    /// <returns>
    ///    A <c>InventQty</c> value that defines the quantity that can be reserved.
    /// </returns>
    public InventQty reserveQty()
    {
        return kanban.reservQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the transaction quantity in the <c>Kanban</c> table.
    /// </summary>
    /// <param name="_qtyInvent">
    ///    The new transaction quantity stated in the inventory unit.
    /// </param>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public void setTransQty(InventQty _qtyInvent)
    {
        kanban.QuantityReceived = _qtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction date for the movement.
    /// </summary>
    /// <returns>
    ///    The transaction date.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public TransDate transDate()
    {
        //date in company timezone
        return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(kanban.EmptiedDateTime,DateTimeUtil::getCompanyTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the issue transaction ID from the <c>KanbanJobPickingList</c> table.
    /// </summary>
    /// <returns>
    ///    The issue inventory blocking transaction ID.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransId transId()
    {
        return kanban.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction quantity.
    /// </summary>
    /// <returns>
    ///    The inventory transaction quantity.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventQty transQty()
    {
        return -kanban.QuantityReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction reference for the <c>KanbanJob</c> record.
    /// </summary>
    /// <returns>
    ///    A transaction reference.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransRefId transRefId()
    {
        return kanban.KanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the transaction type of the movement.
    /// </summary>
    /// <returns>
    ///    An <c>InventTransType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method.
    /// </remarks>
    public InventTransType transType()
    {
        return InventTransType::KanbanEmptied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the movement buffer and optionally the reservation.
    /// </summary>
    /// <param name="_updateReservation">
    ///    A Boolean value that specifies whether the reservation must be updated.
    /// </param>
    public void updateBuffer(boolean _updateReservation = true)
    {
        InventUpd_Estimated     estimated = InventUpd_Estimated::newInventMovement(this);

        estimated.updateNow();
        kanban.doUpdate();

        if (   estimated
            && _updateReservation)
        {
            estimated.updateReservation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsShipmentGroupingRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the grouping reference ID to be used with output orders.
    /// </summary>
    /// <returns>
    ///    The grouping reference ID.
    /// </returns>
    public WMSShipmentGroupingRefId wmsShipmentGroupingRefId()
    {
        InventMovement inventMovement = kanbanType.wmsGroupingSourceRequirementMovement();

        return inventMovement ? inventMovement.transRefId() : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsShipmentGroupingTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the grouping transaction type to be used with output orders.
    /// </summary>
    /// <returns>
    ///    The grouping transaction type.
    /// </returns>
    public WMSShipmentGroupingTransType wmsShipmentGroupingTransType()
    {
        InventMovement inventMovement = kanbanType.wmsGroupingSourceRequirementMovement();

        return inventMovement ? inventMovement.transType() : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_KanbanEmpty</c> class based on the specified record.
    /// </summary>
    /// <param name="_kanban">
    ///    The record from the <c>Kanban</c> table for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_KanbanEmpty</c> class.
    /// </returns>
    public static InventMov_KanbanEmpty newFromKanban(Kanban _kanban)
    {
        return new InventMov_KanbanEmpty(_kanban);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>