<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobPickingListCreateAsListCosting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobPickingListCreateAsListCosting</c> class creates a picking list for a kanban job.
/// </summary>
/// <remarks>
///    This class enables the explosion of a BOM as a list without a related kanban or kanban job.
///    The class is used in the costing facade.
/// </remarks>
public class KanbanJobPickingListCreateAsListCosting extends KanbanJobPickingListCreateAsList
{
    ItemId          itemId;
    InventDimId     inventDimId;
    KanbanJob       explodeForkanbanJob;

    #DEFINE.CurrentVersion(
                           2
                           )
    #LOCALMACRO.CurrentList
        itemId,
        inventDimId,
        explodeForkanbanJob
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initCreateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the variables for the class.
    /// </summary>
    protected void initCreateData()
    {
        parentInventTable  = InventTable::find(itemId);
        parentInventDim    = InventDim::find(inventDimId);
        bomId              = parentInventTable.bomId(bomValidDate,quantityOrdered,parentInventDim);
        kanbanFlow         = kanbanRule.kanbanFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes fields in the current <c>KanbanJobPickingList</c> record from the <c>KanbanJob</c> record.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The kanban job to initialize from.
    /// </param>
    /// <remarks>
    ///    Since there is no actual kanban job present, use the source to initialize basic picking list data.
    /// </remarks>
    protected void initFromKanbanJob(
        KanbanJob _kanbanJob = explodeForkanbanJob
        )
    {
        kanbanJobPickingList.initFromKanbanJob(
                                               _kanbanJob
                                              );
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProdFlowFindConsumptionActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>LeanProdFlowFindConsumptionActivity</c> object that can be used to find the picking
    /// activity that the current picking list line should use.
    /// </summary>
    /// <returns>
    /// A <c>LeanProdFlowFindConsumptionActivity</c> object that can be used to find the picking activity
    /// that the current picking list line should use.
    /// </returns>
    protected LeanProdFlowFindConsumptionActivity leanProdFlowFindConsumptionActivity()
    {
        #TimeConstants
        boolean                                 forwardFlushed       = kanbanJobPickingList.FlushingPrinciple != FlushingPrincipKanban::End;
        TransDateTime                           dateTimeFrom         = DateTimeUtil::newDateTime(bomValidDate,0);
        TransDateTime                           dateTimeTo           = DateTimeUtil::newDateTime(bomValidDate,#secondsPerDay-1);

        LeanProdFlowFindConsumptionActivity leanProdFlowFindConsumptionActivity = LeanProdFlowFindConsumptionActivity::newKanbanJobPickingList(
                                                                                                                                            kanbanJobPickingList,
                                                                                                                                            null,
                                                                                                                                            kanbanFlow,
                                                                                                                                            forwardFlushed,
                                                                                                                                            false,
                                                                                                                                            kanbanRule,
                                                                                                                                            kanbanRulesConnected,
                                                                                                                                            itemId,
                                                                                                                                            inventDimId,
                                                                                                                                            quantityOrdered,
                                                                                                                                            dateTimeFrom,
                                                                                                                                            dateTimeTo);

        return leanProdFlowFindConsumptionActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreatePickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a picking list must be created.
    /// </summary>
    /// <returns>
    /// true if a picking list must be created; otherwise, false.
    /// </returns>
    protected boolean mustCreatePickingList()
    {
        return kanbanRule.canHaveBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludePlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a picking activity and the line it is related to should be included in the
    /// picking list.
    /// </summary>
    /// <param name="_planActivity">
    /// A <c>PlanActivity</c> record.
    /// </param>
    /// <param name="_kanbanJobForPlanActivity">
    /// A kanbanjob that is based on the plan activity.
    /// </param>
    /// <param name="_kanbanRule">
    /// A kanban rule that the plan activity belongs to.
    /// </param>
    /// <returns>
    /// true if the line should be included; otherwise, false .
    /// </returns>
    protected boolean mustIncludePlanActivity(
        PlanActivity _planActivity,
        KanbanJob    _kanbanJobForPlanActivity,
        KanbanRule   _kanbanRule)
    {
        return    _planActivity.RecId != 0
               && _kanbanRule.RecId   == kanbanRule.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMValidDate</Name>
				<Source><![CDATA[
        public TransDate parmBOMValidDate(TransDate _bomValidDate = bomValidDate)
    {
        bomValidDate = _bomValidDate;
        return bomValidDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExplodeForKanbanJob</Name>
				<Source><![CDATA[
        public KanbanJob parmExplodeForKanbanJob(KanbanJob _explodeForKanbanJob = explodeForKanbanJob)
    {
        explodeForKanbanJob = _explodeForKanbanJob;
        return explodeForKanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
        public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
        public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
        public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;
        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityOrdered</Name>
				<Source><![CDATA[
        public InventQty parmQuantityOrdered(InventQty _quantityOrdered = quantityOrdered)
    {
        quantityOrdered = _quantityOrdered;
        return quantityOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        boolean     result;
        Integer     version = conPeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                result = super(base);
                break;
            default :
                result = false;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the input parameters.
    /// </summary>
    /// <param name="calledFrom">
    /// An <c>Object</c> object that represents the caller; optional.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        return    itemId
               && inventDimId
               && quantityOrdered
               && kanbanRule
               && explodeForKanbanJob.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanJobPickingListCreateAsListCosting construct()
    {
        return new KanbanJobPickingListCreateAsListCosting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>KanbanJobPickingListCreateAsList</c> class.
    /// </summary>
    /// <param name="_itemId">
    ///    The <c>ItemId</c> that is used to initialize the class.
    /// </param>
    /// <param name="_inventDimId">
    ///   The <c>InventDimId</c> that is used to initialize the class.
    /// </param>
    /// <param name="_quantityOrdered">
    ///    A real value that holds the ordered quantity that applies for this calculation.
    /// </param>
    /// <param name="_bomValidDate">
    ///    A date value that is used to find the applicable BOM.
    /// </param>
    /// <param name="_kanbanRule">
    ///    A <c>KanbanRule</c> record.
    /// </param>
    /// <param name="_explodeForKanbanJob">
    ///    A <c>KanbanJob</c> record that represents the source of the calculation.
    /// </param>
    /// <param name="_serieSize">
    ///    A real value that holds the order size that applies for this calculation.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanJobPickingListCreateAsList</c> class.
    /// </returns>
    public static KanbanJobPickingListCreateAsListCosting newStandard(
        ItemId      _itemId,
        InventDimId _inventDimId,
        InventQty   _quantityOrdered,
        TransDate   _bomValidDate,
        KanbanRule  _kanbanRule,
        KanbanJob   _explodeForKanbanJob,
        Qty         _serieSize = _quantityOrdered)
    {
        KanbanJobPickingListCreateAsListCosting  kanbanJobPickingListCreateAsListCosting = KanbanJobPickingListCreateAsListCosting::construct();

        kanbanJobPickingListCreateAsListCosting.parmItemId(_itemId);
        kanbanJobPickingListCreateAsListCosting.parmInventDimId(_inventDimId);
        kanbanJobPickingListCreateAsListCosting.parmQuantityOrdered(_quantityOrdered);
        kanbanJobPickingListCreateAsListCosting.parmBOMValidDate(_bomValidDate);
        kanbanJobPickingListCreateAsListCosting.parmKanbanRule(_kanbanRule);
        kanbanJobPickingListCreateAsListCosting.parmExplodeForKanbanJob(_explodeForKanbanJob);
        kanbanJobPickingListCreateAsListCosting.parmKanbanJob(null);
        kanbanJobPickingListCreateAsListCosting.parmKanban(null);
        kanbanJobPickingListCreateAsListCosting.parmSerieSize(_serieSize);

        return kanbanJobPickingListCreateAsListCosting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
