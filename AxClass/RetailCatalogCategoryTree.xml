<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogCategoryTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailCatalogCategoryTree</c> is used to Build the tree map, create the Root Node and
/// create child category nodes add images.
/// </summary>
public class RetailCatalogCategoryTree
{
    FormTreeControl tree;

    RecId categoryHierarchyId;

    ImageListAppl_EcoResCategory    ecoresImageList;

    boolean isCategoryOnly;
    boolean buildingLazyRootNodes = false;

    #resAppl
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the sub tree with specified the parent ID.
    /// </summary>
    /// <param name="_rootNodeName">
    /// Category root node name.
    /// </param>
    public void buildTree(str _rootNodeName = '')
    {
        TreeItemIdx rootItemIdx = 0, categoryRootItemIdx;
        EcoResCategory category;
        Map treeMap;
        List children;
        container childrenContainer;
        RecId rootId = 0;

        tree.deleteAll();
        tree.lock();

        // Build the tree map:  ParentCategoryRecId => Children Map
        //       children map:  CategoryRecId => EcoResCategory
        treeMap = new Map(Types::Int64, Types::Container);

        if (FeatureStateProvider::isFeatureEnabled(RetailEnableDisplayOrderForMerchandisingFeature::instance()))
        {
            // Order by DisplayOrder and Name
            while select category
            order by category.DisplayOrder, category.Name
            where category.CategoryHierarchy == categoryHierarchyId
            {
                this.buildTreeMap(treeMap, category);
            }
        }
        else
        {
            // Order by Name only
            while select category
            order by category.Name
            where category.CategoryHierarchy == categoryHierarchyId
            {
                this.buildTreeMap(treeMap, category);
            }
        }

        if (isCategoryOnly == false)
        {
            rootItemIdx = this.createRootNode(_rootNodeName);
            this.createUncategorizedNode(rootItemIdx);
        }

        categoryRootItemIdx = this.createChildCategoryNodes(rootItemIdx, treeMap, treeMap.lookup(0));

        if (isCategoryOnly)
        {
            rootItemIdx = categoryRootItemIdx;
        }

        SysFormTreeControl::expandTree(tree, rootItemIdx, 2);

        tree.unlock(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChildCategoryNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a child category nodes for the parent node.
    /// </summary>
    /// <param name="_parentIdx">
    /// The node to which the sub tree will be added.
    /// </param>
    /// <param name="treeMap">
    /// The map through which the child nodes are created.
    /// </param>
    /// <param name="childrenContainer">
    /// Container to hold children nodes.
    /// </param>
    /// <returns>
    /// The ID value of child category node created.
    /// </returns>
    TreeItemIdx createChildCategoryNodes(TreeItemIdx _parentIdx, Map treeMap, container childrenContainer)
    {
        TreeItemIdx itemIdx;
        EcoResCategory category;
        RetailCatalogCategoryTreeNode cetagoryNode;
        ListEnumerator childEn;
        List children;
        container grandChildrenContainer;
        boolean hasChildren = false;
        FormTreeItem formTreeItem;

        children = List::create(childrenContainer);
        childEn = children.getEnumerator();
        while (childEn.moveNext())
        {
            hasChildren = false;
            category = childEn.current();
            cetagoryNode = new RetailCatalogCategoryTreeNode(RetailCatalogCategoryTreeNodeType::Category, category.RecId, category.Name);
            if (treeMap.exists(category.RecId))
            {
                hasChildren = true;
                grandChildrenContainer = treeMap.lookup(category.RecId);
            }

            if (isCategoryOnly && _parentIdx == 0)
            {
                _parentIdx = FormTreeAdd::Root;
            }

            itemIdx = SysFormTreeControl::addTreeItem(tree, cetagoryNode.getNodeName(), _parentIdx, cetagoryNode, this.image(category), hasChildren);
            formTreeItem = tree.getItem(itemIdx);
            formTreeItem.overlayImage(this.overlayImage(category));
            tree.setItem(formTreeItem);

            if (hasChildren)
            {
                this.createChildCategoryNodes(itemIdx, treeMap, grandChildrenContainer);
            }
        }

        return itemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRootNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the root node of the tree using <c>SysFormTreeControl</c> class.
    /// </summary>
    /// <param name="_rootNodeName">
    /// Hierarchy root node name.
    /// </param>
    /// <returns>
    /// The ID of the new root node created.
    /// </returns>
    private TreeItemIdx createRootNode(str _rootNodeName = '')
    {
        TreeItemIdx itemIdx;
        RetailCatalogCategoryTreeNode rootNode;

        if (!_rootNodeName)
        {
            _rootNodeName = EcoResCategoryHierarchy::find(categoryHierarchyId).Name;
        }
        rootNode = new RetailCatalogCategoryTreeNode(RetailCatalogCategoryTreeNodeType::Root, 0, _rootNodeName);

        ecoresImageList.add(#CatalogRoot);

        itemIdx = SysFormTreeControl::addTreeItem(tree, rootNode.getNodeName(), FormTreeAdd::Root, rootNode , ecoresImageList.image(#CatalogRoot), true);

        return itemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUncategorizedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the uncategorized node for the given parent ID using <c>SysFormTreeControl</c> class.
    /// </summary>
    /// <param name="_parentIdx">
    /// The ID of the parent node.
    /// </param>
    /// <returns>
    /// The ID of the new uncategorized node created.
    /// </returns>
    private TreeItemIdx createUncategorizedNode(TreeItemIdx _parentIdx)
    {
        TreeItemIdx itemIdx;
        #define.CategoryUncategorized(12858)
        RetailCatalogCategoryTreeNode node = new RetailCatalogCategoryTreeNode(RetailCatalogCategoryTreeNodeType::Uncategorized, 0, "@RET261243");

        ecoresImageList.add(#CategoryUncategorized);
        itemIdx = SysFormTreeControl::addTreeItem(tree, node.getNodeName(), _parentIdx, node, ecoresImageList.image(#CategoryUncategorized), false);

        return itemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>image</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the distribution link to the specified child record.
    /// </summary>
    /// <param name="_childRecord">
    /// The instance of the child record.
    /// </param>
    /// <returns>
    /// The number of links.
    /// </returns>
    ImageRes image(Common _childRecord)
    {
        return ecoresImageList.image(#ImageSetupValidationAssignCategories);
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives the list of the images.
    /// </summary>
    /// <returns>
    /// Returns image list.
    /// </returns>
    Imagelist imageList()
    {
        return ecoresImageList.imageList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailCatalogCategoryTree</c> class.
    /// </summary>
    /// <param name="_treeControl">
    /// It is a control used for <c>FormTreeControl</c> control.
    /// </param>
    /// <param name="_categoryHierarchyId">
    /// Rec ID for <c>RetailCatalogCategoryTree</c>.
    /// </param>
    /// <param name="_isCategoryOnly">
    /// A boolean value; optional.
    /// </param>
    public void new(FormTreeControl _treeControl, RecId _categoryHierarchyId, boolean _isCategoryOnly = false)
    {
        tree = _treeControl;
        categoryHierarchyId = _categoryHierarchyId;
        isCategoryOnly = _isCategoryOnly;

        ecoresImageList                  = new ImageListAppl_EcoResCategory();
        tree.setImagelist(ecoresImageList.imageList());

        ecoresImageList.add(#ImageSetupValidationAssignCategories);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlayImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set overlay image
    /// </summary>
    /// <param name="_childRecord">
    /// The instance of the child record.
    /// </param>
    /// <returns>
    /// Image resource.
    /// </returns>
    ImageRes overlayImage(Common _childRecord)
    {
        int            ret            = 0;
        EcoResCategory ecoResCategory = _childRecord;

        if (!ecoResCategory.IsActive)
        {
            ret = ecoresImageList.image(ImageListAppl_EcoResCategory::getImageOverlay4InactiveCategory());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailCatalogCategoryTree</c> class.
    /// </summary>
    /// <param name="_treeControl">
    /// Given value for <c>FormTreeControl</c>.
    /// </param>
    /// <param name="_categoryHierarchyId">
    /// Rec ID for <c>RetailCatalogCategoryTree</c>.
    /// </param>
    /// <param name="_isCategoryOnly">
    /// A boolean value indicates a node has category; optional.
    /// </param>
    /// <returns>
    /// returns a new instance of <c>RetailCatalogCategoryTree</c> class.
    /// </returns>
    public static RetailCatalogCategoryTree construct(FormTreeControl _treeControl, RecId _categoryHierarchyId, boolean _isCategoryOnly = false)
    {
        return new RetailCatalogCategoryTree(_treeControl, _categoryHierarchyId, _isCategoryOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLazyTreeRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the root node for a lazy-load tree, where subnodes are only loaded when the parent node is expanded.
    /// </summary>
    /// <param name = "_rootNodeName">The name of the root node.</param>
    public void buildLazyTreeRoot(str _rootNodeName = '')
    {
        TreeItemIdx rootItemIdx = 0, categoryRootItemIdx, childItemIdx;
        EcoResCategory category;
        RecId rootId = 0;
        int expandLevel = 1; // By default try to expand 1 level

        buildingLazyRootNodes = true;
        tree.deleteAll();
        tree.lock();

        // Create an super-root node to contain the 'uncategorized' node.
        if (isCategoryOnly == false)
        {
            rootItemIdx = this.createRootNode(_rootNodeName);
            this.createUncategorizedNode(rootItemIdx);
            expandLevel = 2; // Due to the additional parent/root for the 'uncategorized' node, we need to expand 2 levels.
        }

        // Get real root node for the category and add it to the tree
        if (FeatureStateProvider::isFeatureEnabled(RetailEnableDisplayOrderForMerchandisingFeature::instance()))
        {
            // Order by DisplayOrder and Name
            select firstonly category
                order by category.DisplayOrder, category.Name
                where category.CategoryHierarchy == categoryHierarchyId
                && category.ParentCategory == 0;
        }
        else
        {
            // Order by Name only
            select firstonly category
                order by category.Name
                where category.CategoryHierarchy == categoryHierarchyId
                && category.ParentCategory == 0;
        }

        if (category)
        {
            rootId = category.RecId;
            categoryRootItemIdx = this.addLazyChildCategoryNode(rootItemIdx, category);

            // Add category root node's children
            childItemIdx = this.buildLazySubTree(categoryRootItemIdx, rootId, false);
        }

        if (isCategoryOnly)
        {
            rootItemIdx = categoryRootItemIdx;
        }

        SysFormTreeControl::expandTree(tree, rootItemIdx, expandLevel);
        tree.unlock(true);
        buildingLazyRootNodes = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLazySubTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the next sub tree of children for a given tree node.
    /// </summary>
    /// <param name = "_parentIdx">The index of the parent node.</param>
    /// <param name = "_parentCategoryId">The category id of the parent node.</param>
    /// <param name = "_lockTree">Whether the tree should be locked while the subtree is built.</param>
    /// <returns>Index of the first node created.</returns>
    public TreeItemIdx buildLazySubTree(TreeItemIdx _parentIdx, RecId _parentCategoryId = 0, boolean _lockTree = true)
    {
        EcoResCategory category;
        RetailCatalogCategoryTreeNode parentNode, childNode;
        TreeItemIdx nodeIdx, firstNodeIdx = 0;
        FormTreeItem treeItem;
        boolean needToBuildChildren = true;
        
        // Extract the category details from the parent node
        if (_parentCategoryId == 0)
        {
            treeItem = tree.getItem(_parentIdx);

            // Do not dynamically add child nodes if the node has already been expanded, or we are in the middle of building the root nodes.
            if (!treeItem
                || treeItem.stateExpandedOnce()
                || buildingLazyRootNodes)
            {
                needToBuildChildren = false;
            }
            else
            {
                parentNode = treeItem.data();
                _parentCategoryId = parentNode.getCategoryRecId();
            }
        }

        // If we have already built this node, then do not build it again.
        if (needToBuildChildren)
        {
            try
            {
                // If the tree wasn't already locked, then lock it while adding the new nodes.
                if (_lockTree)
                {
                    tree.lock();
                }

                // Add parent node's children
                if (FeatureStateProvider::isFeatureEnabled(RetailEnableDisplayOrderForMerchandisingFeature::instance()))
                {
                    // Order by DisplayOrder and Name
                    while select category
                    order by category.DisplayOrder, category.Name
                    where category.CategoryHierarchy == categoryHierarchyId
                    && category.ParentCategory == _parentCategoryId
                    {
                        // Create and add a child node under the root
                        nodeIdx = this.addLazyChildCategoryNode(_parentIdx, category);

                        if (firstNodeIdx == 0)
                        {
                            firstNodeIdx = nodeIdx;
                        }
                    }
                }
                else
                {
                    // Order by Name only
                    while select category
                    order by category.Name
                    where category.CategoryHierarchy == categoryHierarchyId
                    && category.ParentCategory == _parentCategoryId
                    {
                        // Create and add a child node under the root
                        nodeIdx = this.addLazyChildCategoryNode(_parentIdx, category);

                        if (firstNodeIdx == 0)
                        {
                            firstNodeIdx = nodeIdx;
                        }
                    }
                }

                // If no nodes were created, then mark the parent as having No Children
                if (!firstNodeIdx && treeItem)
                {
                    treeItem.children(-1);
                    tree.setItem(treeItem);
                }
            }
            finally
            {
                // If the tree wasn't already locked, then unlock it and save the changes.
                if (_lockTree)
                {
                    tree.unlock(true);
                }
            }
        }

        return firstNodeIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLazyChildCategoryNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a child category nodes for the parent node.
    /// </summary>
    /// <param name="_parentIdx">
    /// The node to which the sub tree will be added.
    /// </param>
    /// <param name="_category">
    /// The category that the node will represent.
    /// </param>
    /// <returns>
    /// The Tree Index value of child category node created.
    /// </returns>
    private TreeItemIdx addLazyChildCategoryNode(TreeItemIdx _parentIdx, EcoResCategory _category)
    {
        TreeItemIdx itemIdx;
        RetailCatalogCategoryTreeNode categoryNode;
        ListEnumerator childEn;
        List children;
        container grandChildrenContainer;
        boolean hasChildren = false;
        FormTreeItem formTreeItem;

        // create the retail node
        categoryNode = new RetailCatalogCategoryTreeNode(RetailCatalogCategoryTreeNodeType::Category, _category.RecId, _category.Name);
        hasChildren = true;

        if (isCategoryOnly && _parentIdx == 0)
        {
            _parentIdx = FormTreeAdd::Root;
        }

        itemIdx = SysFormTreeControl::addTreeItem(tree, categoryNode.getNodeName(), _parentIdx, categoryNode, this.image(_category), hasChildren);
        formTreeItem = tree.getItem(itemIdx);
        formTreeItem.overlayImage(this.overlayImage(_category));
        tree.setItem(formTreeItem);

        return itemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTreeMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the tree map:  ParentCategoryRecId => Children Map
    ///       children map:  CategoryRecId => EcoResCategory
    /// </summary>
    /// <param name = "_treeMap">TreeMap to build</param>
    /// <param name = "_category">Category to load parents and children</param>
    private void buildTreeMap(Map _treeMap, EcoResCategory _category)
    {
        container childrenContainer;
        List children;

        if (_treeMap.exists(_category.ParentCategory))
        {
            childrenContainer = _treeMap.lookup(_category.ParentCategory);
            children = List::create(childrenContainer);
            _treeMap.remove(_category.ParentCategory);
        }
        else
        {
            children = new List(Types::Record);
        }

        children.addEnd(_category);
        _treeMap.insert(_category.ParentCategory, children.pack());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>