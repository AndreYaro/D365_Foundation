<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomReportFinishCircularityCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Detects cycles in a chain of auto-reported as finished BOM journals.
/// </summary>
internal final class BomReportFinishCircularityCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isBOMJournalCyclic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the BOM journal receipt is circularly produced from itself on a certain BOM level.
    /// </summary>
    /// <param name = "_parentInventJournalTrans">A BOM journal receipt line</param>
    /// <returns>true if BOM journals chain has circuits; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean isBOMJournalCyclic(InventJournalTrans _parentInventJournalTrans)
    {
        boolean isCyclic = false;

        BomInstrumentationLogger logger = BomInstrumentationLogger::createLogger(classStr(BomReportFinishCircularityCheck));
        using(var activityContext = logger.bom().bomReportFinishCircularityDetector())
        {
            if (_parentInventJournalTrans.Qty > 0 && InventTable::find(_parentInventJournalTrans.ItemId).AutoReportFinished)
            {
                CreatedTransactionId sqlTransactionId = BomReportFinishCircularityCheck::getSqlTransactionIdFromDatabase();
                if (!sqlTransactionId)
                {
                    return isCyclic;
                }

                isCyclic = BomReportFinishCircularityCheck::addUpdateValueInCache(sqlTransactionId, BomReportFinishCircularityCheck::hashKey(_parentInventJournalTrans.ItemId, _parentInventJournalTrans.InventDimId));
                if (isCyclic)
                {
                    this.logCircularBOMJournal(logger, sqlTransactionId, _parentInventJournalTrans);
                    warning(strFmt("@SCM:BomReportFinishCircularityDetector", _parentInventJournalTrans.JournalId, _parentInventJournalTrans.ItemId));
                }
            }
        }
        return isCyclic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BomReportFinishCircularityCheck construct()
    {
        return new BomReportFinishCircularityCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUpdateValueInCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a produced itemId used in the production chain within the current sql transactionId to <c>SysGlobalCache</c>.
    /// </summary>
    /// <param name = "_cacheKey">A sql transaction Id</param>
    /// <param name = "_cacheValue">A produced itemId + product dimensions used in the production chain</param>
    /// <returns>true if the chain already contains produced itemId, otherwise false.</returns>
    [Hookable(false)]
    internal static boolean addUpdateValueInCache(CreatedTransactionId _cacheKey, str _cacheValue)
    {
        SysGlobalCache transactionCache = appl.transactionScope().parmTransactionScopeCache();
        Set reportedAsFinishedBOM = new Set(Types::String);
        str owner = classStr(BomReportFinishCircularityCheck);

        boolean addValue()
        {
            reportedAsFinishedBOM.add(_cacheValue);
            transactionCache.set(owner, _cacheKey, reportedAsFinishedBOM);
            return false;
        }

        if (!transactionCache.isSet(owner, _cacheKey))
        {
            return addValue();
        }

        reportedAsFinishedBOM = transactionCache.get(owner, _cacheKey, "");
        if (reportedAsFinishedBOM && !reportedAsFinishedBOM.in(_cacheValue))
        {
            return addValue();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes itemId used in the production chain from the <c>SysGlobalCache</c> if no circularity found.
    /// </summary>
    /// <param name = "_cacheValue">A produced itemId + product dimensions used in the production chain</param>
    [Hookable(false)]
    internal static void removeFromCache(str _cacheValue)
    {
        SysGlobalCache transactionCache = appl.transactionScope().parmTransactionScopeCache();
        var owner = classStr(BomReportFinishCircularityCheck);
        var cacheKey = BomReportFinishCircularityCheck::getSqlTransactionIdFromDatabase();

        if (!transactionCache.isSet(owner, cacheKey))
        {
            return;
        }

        Set reportedAsFinishedBOM = transactionCache.get(owner, cacheKey, "");
        if (reportedAsFinishedBOM && reportedAsFinishedBOM.in(_cacheValue))
        {
            reportedAsFinishedBOM.remove(_cacheValue);
        }

        if (reportedAsFinishedBOM && !reportedAsFinishedBOM.elements())
        {
            transactionCache.remove(owner, cacheKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a hash string based on itemId and product variances.
    /// </summary>
    /// <param name = "_itemId">A produced itemId used in the production chain.</param>
    /// <param name = "_inventDimId">Inventory dimensions for a produced itemId used in the production chain.</param>
    /// <returns>A hash string.</returns>
    [Hookable(false)]
    internal static str hashKey(ItemId _itemId, InventDimId _inventDimId)
    {
        InventTable inventTable = InventTable::find(_itemId);

        if (!inventTable.hasProductDimensions()) 
        {
            return _itemId;
        }
        else
        {
            InventDim inventDim = InventDim::find(_inventDimId);

            return strRTrim(_itemId) + '~' 
                + strRTrim(inventDim.ConfigId) + '~'
                + strRTrim(inventDim.InventColorId) + '~'
                + strRTrim(inventDim.InventSizeId) + '~'
                + strRTrim(inventDim.InventStyleId) + '~'
                + strRTrim(inventDim.InventVersionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlTransactionIdFromDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current sql transactionId.
    /// </summary>
    /// <returns><c>CreatedTransactionId</c></returns>
    [Hookable(false)]
    internal static CreatedTransactionId getSqlTransactionIdFromDatabase()
    {
        if (appl.ttsLevel() == 0)
        {
            return 0;
        }

        Statement statement;
        Connection connection;

        try
        {
            connection = new Connection();
            statement = connection.createStatement();

            ResultSet resultSet = statement.executeQuery('SELECT CURRENT_TRANSACTION_ID()');
            resultSet.next();
            
            return resultSet.getInt64(1);
        }
        finally
        {
            if (statement)
            {
                statement.close();
            }
            if (connection)
            {
                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCircularBOMJournal</Name>
				<Source><![CDATA[
    private void logCircularBOMJournal(BomInstrumentationLogger _logger,
                                       CreatedTransactionId     _ttsId, 
                                       InventJournalTrans       _parentInventJournalTrans)
    {
        var itemRecId = InventTable::find(_parentInventJournalTrans.ItemId).RecId;

        _logger.logInformation(strFmt("Journal %1", _parentInventJournalTrans.JournalId));
        _logger.logInformation(strFmt("Produced item %1", any2Str(itemRecId)));
        _logger.logInformation(strFmt("LOT %1", _parentInventJournalTrans.InventTransId));

        Set circularBOM = appl.transactionScope().parmTransactionScopeCache().get(classStr(BomReportFinishCircularityCheck), _ttsId);
        if (circularBOM)
        {
            _logger.logInformation(strFmt('Graph', circularBOM.toString()));
        }

        _logger.logWarning(strFmt("@SCM:BomReportFinishCircularityDetector", _parentInventJournalTrans.JournalId, itemRecId));
        _logger.logStackTrace();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>