<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxChargeIntercompany</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class is used as a container to hold the information for the charge posting when tax and charges are in different companies.
/// </summary>
class TaxChargeIntercompany
{
    DataAreaId              expenseCompany;
    LedgerDimensionAccount  expenseLedgerDimension;
    LedgerDimensionAccount  dueToDueFromLedgerDimension;
    TaxAmountCur            chargeAmount;
    CurrencyCode            currencyCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmChargeAmount</Name>
				<Source><![CDATA[
        public TaxAmountCur parmChargeAmount(TaxAmountCur _chargeAmount = 0)
    {
        if (!prmisdefault(_chargeAmount))
        {
            chargeAmount = _chargeAmount;
        }

        return chargeAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
        public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = '')
    {
        if (!prmisdefault(_currencyCode))
        {
            currencyCode = _currencyCode;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueToDueFromLedgerDimension</Name>
				<Source><![CDATA[
        public LedgerDimensionAccount parmDueToDueFromLedgerDimension(LedgerDimensionAccount  _dueToDueFromLedgerDimension = 0)
    {
        if (!prmisdefault(_dueToDueFromLedgerDimension))
        {
            dueToDueFromLedgerDimension = _dueToDueFromLedgerDimension;
        }

        return dueToDueFromLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenseCompany</Name>
				<Source><![CDATA[
        public DataAreaId parmExpenseCompany(DataAreaId _expenseCompany = '')
    {
        if (!prmisdefault(_expenseCompany))
        {
            expenseCompany = _expenseCompany;
        }

        return expenseCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenseLedgerDimension</Name>
				<Source><![CDATA[
        public LedgerDimensionAccount parmExpenseLedgerDimension(LedgerDimensionAccount  _expenseLedgerDimension = 0)
    {
        if (!prmisdefault(_expenseLedgerDimension))
        {
            expenseLedgerDimension = _expenseLedgerDimension;
        }

        return expenseLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method creates a new instance of <c>TaxChargeIntercompany</c> class.
    /// </summary>
    /// <param name="_expenseCompany">
    ///     The company where the charge is supposed to be posted.
    /// </param>
    /// <param name="_expenseLedgerDimension">
    ///     The LedgerDimensionAccount for the expense/charge posting.
    /// </param>
    /// <param name="_dueToDueFromLedgerDimension">
    ///     The LedgerDimensionAccount for the due to/from posting.
    /// </param>
    /// <param name="_chargeAmount">
    ///     The amount of charge to be posted.
    /// </param>
    /// <param name="_currencyCode">
    ///     The transaction currency code for the charge posting.
    /// </param>
    /// <returns>
    ///     An instance of <c>TaxChargeIntercompany</c> class.
    /// </returns>
    public static TaxChargeIntercompany construct(DataAreaId            _expenseCompany,
                                                LedgerDimensionAccount  _expenseLedgerDimension,
                                                LedgerDimensionAccount  _dueToDueFromLedgerDimension,
                                                TaxAmountCur            _chargeAmount,
                                                CurrencyCode            _currencyCode)
    {
        TaxChargeIntercompany taxChargeIntercompany = new TaxChargeIntercompany();
        taxChargeIntercompany.parmExpenseCompany(_expenseCompany);
        taxChargeIntercompany.parmExpenseLedgerDimension(_expenseLedgerDimension);
        taxChargeIntercompany.parmDueToDueFromLedgerDimension(_dueToDueFromLedgerDimension);
        taxChargeIntercompany.parmChargeAmount(_chargeAmount);
        taxChargeIntercompany.parmCurrencyCode(_currencyCode);

        return taxChargeIntercompany;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>