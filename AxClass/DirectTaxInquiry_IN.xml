<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirectTaxInquiry_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles tax inquiry.
/// </summary>
class DirectTaxInquiry_IN
{
    TmpDirectTaxInquiryTable_IN       tmpDirectTaxInquiryTable;

    TaxWithholdType_IN  taxType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the query.
    /// </summary>
    /// <param name="_queryRun">
    /// A <c>QueryRun</c> object.
    /// </param>
    /// <param name="_fieldValues">
    /// A container containing the field values.
    /// </param>
    /// <returns>
    /// A <c>TmpDirectTaxInquiryTable_IN</c> buffer.
    /// </returns>
    public TmpDirectTaxInquiryTable_IN execute(QueryRun                   _queryRun,
                                               container                  _fieldValues)
    {
        FieldId                             fields[];
        container                           fieldNames;
        int                                 fieldCount;
        Common                              common;
        boolean                             insert;
        TaxWithholdInquiryView_IN           taxWithholdInquiry;
        TaxWithholdTrans_IN                 taxWithholdTrans;
        CurrencyExchangeHelper              currencyExchangeHelper;

        for (fieldCount = 1;fieldCount <= conLen(_fieldValues);fieldCount++)
        {
            fieldNames += conPeek(_fieldValues, fieldCount);
        }

        while (_queryRun.next())
        {
            if (_queryRun.changed(tableNum(TaxWithholdInquiryView_IN)))
            {
                if (TaxWithholdParameters_IN::find().tdsActivate)
                {
                    for (fieldCount = 1; fieldCount <= conLen(fieldNames); fieldCount++)
                    {
                        fields[fieldCount] = fieldName2id(tableNum(TaxWithholdInquiryView_IN), conPeek(fieldNames, fieldCount));
                    }
                    common                                            = _queryRun.getNo(1);
                    taxWithholdInquiry                                = common;
                    tmpDirectTaxInquiryTable.TransDate                = taxWithholdInquiry.TransDate;
                    tmpDirectTaxInquiryTable.Voucher                  = taxWithholdInquiry.Voucher;
                    tmpDirectTaxInquiryTable.CostLedgerVoucher        = taxWithholdTrans.CostLedgerVoucher;
                    tmpDirectTaxInquiryTable.TaxType                  = taxWithholdInquiry.TaxType;
                    tmpDirectTaxInquiryTable.TaxComponent             = TaxWithholdComponentTable_IN::find(taxWithholdInquiry.TaxWithholdComponent).Component;
                    tmpDirectTaxInquiryTable.TaxAmount                = taxWithholdInquiry.TaxWithholdAmount;

                    currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                                Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                taxWithholdInquiry.TransDate);

                    tmpDirectTaxInquiryTable.TaxAmountSecondary = currencyExchangeHelper.calculateAccountingToReportingAdjustment(
                                                                        taxWithholdInquiry.CurrencyCode,
                                                                        taxWithholdInquiry.TaxWithholdAmount,
                                                                        true);

                    tmpDirectTaxInquiryTable.SourceCurrencyCode       = taxWithholdInquiry.CurrencyCode;
                    tmpDirectTaxInquiryTable.InvoiceAmount            = taxWithholdInquiry.AmountOriginMST;
                    tmpDirectTaxInquiryTable.TransactionAmount        = taxWithholdInquiry.AmountOriginMST;
                    taxWithholdTrans                                  = TaxWithholdTrans_IN::find(taxWithholdInquiry.TaxWithholdTransRecId);
                    insert                                            = true;
                }
            }

            if (insert)
            {
                ttsbegin;
                DictTable dictTable = new DictTable(tableNum(TmpDirectTaxInquiryTable_IN));

                for (int fieldNumId = 1; fieldNumId <= conLen(fieldNames); fieldNumId++)
                {
                    FieldId fieldId = fieldName2Id(tableNum(TmpDirectTaxInquiryTable_IN), strFmt("Sort%1", fieldNumId));

                    if (dictTable.fieldObject(fieldId))
                    {
                        tmpDirectTaxInquiryTable.(fieldId) = TaxWithholdTrans_IN::getFieldValues(taxWithholdTrans, conPeek(fieldNames, fieldNumId));
                        str mm = tmpDirectTaxInquiryTable.(fieldId);
                    }
                }

                tmpDirectTaxInquiryTable.insert();

                ttscommit;
                insert = false;
            }
        }

        return tmpDirectTaxInquiryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpDirectTaxInquiryTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set <c>TmpDirectTaxInquiryTable_IN</c> table buffer.
    /// </summary>
    /// <param name="_tmpDirectTaxInquiryTable">
    /// Used to set <c>TmpDirectTaxInquiryTable_IN</c> buffer.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TmpDirectTaxInquiryTable_IN</c> table.
    /// </returns>
    public TmpDirectTaxInquiryTable_IN tmpDirectTaxInquiryTable(TmpDirectTaxInquiryTable_IN _tmpDirectTaxInquiryTable = tmpDirectTaxInquiryTable)
    {
        tmpDirectTaxInquiryTable = _tmpDirectTaxInquiryTable;

        return tmpDirectTaxInquiryTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>