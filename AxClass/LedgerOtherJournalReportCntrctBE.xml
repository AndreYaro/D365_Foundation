<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerOtherJournalReportCntrctBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data contract class for <c>LedgerOtherJournalReportBE</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the data contract class for the <c>LedgerOtherJournalReportBE</c> SSRS report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationGroupAttribute('Criteria', "@SYS1046", '1'),
    SysOperationGroupAttribute('Parameters', "@SYS7764", '2'),
    SysOperationAlwaysInitializeAttribute
]
public class LedgerOtherJournalReportCntrctBE implements SysOperationValidatable, SysOperationInitializable
{
    ToDate                  toDate;
    FromDate                fromDate;
    LedgerPostingJournalId  ledgerPostingJournalId;
    NoYes                   compression;
    NoYes                   finalReporting;
    TaxEnterpriseNumber     enterpriseNum;
    VATNum                  vatNum;
    PageNo                  pageNum;
    FreeTxt                 reportType;
    ToDate                  periodClosingDate;
    ToDate                  periodToDate;
    FromDate                periodFromDate;
    FromDate                periodOpeningDate;

    #define.coRegNumDigits('0123456789')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcPageNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the page number.
    /// </summary>
    /// <returns>
    ///    The page number.
    /// </returns>
    public int calcPageNum()
    {
        LedgerJournalPeriodFinalPrintBE journalPeriodFinalPrintBe  = null;
        if (!finalReporting)
        {
            pageNum  = 1;
        }
        else
        {
            journalPeriodFinalPrintBe  = LedgerJournalPeriodFinalPrintBE::findPrev(ledgerPostingJournalId,fromDate-1,false);

            if (journalPeriodFinalPrintBe)
            {
                pageNum  = journalPeriodFinalPrintBe.NumberLastPage+1;
            }
            else
            {
                pageNum  = 1;
            }
        }
        return pageNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize(boolean __initParmDefault = false)
    {
        this.parmVatNum(strins(strins(strkeep(CompanyInfo::find().CoRegNum, #coRegNumDigits),'.',5),'.',9));
        this.parmEnterpriseNum(CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, this.parmToDate()));
        this.parmReportType(strfmt("@SYS336132"));
        this.parmPageNum(this.calcPageNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter compression.
    /// </summary>
    /// <param name="_compression">
    /// The new value of the datacontract parameter compression; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter compression.
    /// </returns>
    [
        DataMemberAttribute('Compression'),
        SysOperationLabelAttribute(literalstr("@SYS19083")),
        SysOperationGroupMemberAttribute('Parameters'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public NoYes parmCompression(NoYes _compression  = compression)
    {
        compression  = _compression;
        return compression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnterpriseNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter entNum.
    /// </summary>
    /// <param name="_enterpriseNum">
    /// The new value of the datacontract parameter entNum; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter entNum.
    /// </returns>
    [
        DataMemberAttribute('EnterpriseNum')
    ]
    public TaxEnterpriseNumber parmEnterpriseNum(TaxEnterpriseNumber _enterpriseNum  = enterpriseNum)
    {
        enterpriseNum  = _enterpriseNum;
        return enterpriseNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinalReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter finalReporting.
    /// </summary>
    /// <param name="_finalReporting">
    /// The new value of the datacontract parameter finalReporting; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter finalReporting.
    /// </returns>
    [
        DataMemberAttribute('FinalReporting'),
        SysOperationLabelAttribute(literalstr("@SYS79654")),
        SysOperationGroupMemberAttribute('Parameters'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public NoYes parmFinalReporting(NoYes _finalReporting  = finalReporting)
    {
        finalReporting  = _finalReporting;
        return finalReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter fromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter fromDate.
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public FromDate parmFromDate(FromDate _fromDate  = fromDate)
    {
        fromDate  = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOtherLedgerPostingJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ledgerPostingJournalId.
    /// </summary>
    /// <param name="_ledgerPostingJournalId">
    /// The new value of the datacontract parameter ledgerPostingJournalId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ledgerPostingJournalId.
    /// </returns>
    [
        DataMemberAttribute('OtherLedgerPostingJournalId'),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public LedgerOtherPostingJournalIdBE parmOtherLedgerPostingJournalId(LedgerPostingJournalId _ledgerPostingJournalId  = ledgerPostingJournalId)
    {
        ledgerPostingJournalId  = _ledgerPostingJournalId;
        return ledgerPostingJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPageNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter pageNum.
    /// </summary>
    /// <param name="_pageNum">
    /// The new value of the datacontract parameter pageNum; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter pageNum.
    /// </returns>
    [
        DataMemberAttribute('PageNum')
    ]
    public PageNo parmPageNum(PageNo _pageNum  = pageNum)
    {
        pageNum  = _pageNum;
        return pageNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter reportType.
    /// </summary>
    /// <param name="_reportType">
    /// The new value of the datacontract parameter reportType; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter reportType.
    /// </returns>
    [
        DataMemberAttribute('ReportType')
    ]
    public FreeTxt parmReportType(FreeTxt _reportType  = reportType)
    {
        reportType  = _reportType;
        return reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter toDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter toDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter toDate.
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public ToDate parmToDate(ToDate _toDate  = toDate)
    {
        toDate  = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVatNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter vatNum.
    /// </summary>
    /// <param name="_vatNum">
    /// The new value of the datacontract parameter vatNum; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter vatNum.
    /// </returns>
    [
        DataMemberAttribute('VatNum')
    ]
    public VATNum parmVatNum(VATNum _vatNum  = vatNum)
    {
        vatNum  = _vatNum;
        return vatNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the from date and to date values that are entered by the user.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean     ret  = true;

        recId   calendarRecId   = CompanyInfoHelper::fiscalCalendarRecId();

        periodFromDate          = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId,fromDate);
        periodToDate            = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId,toDate);
        periodClosingDate       = LedgerFiscalCalendar::findClosingPeriodStartDateByDate(calendarRecId,periodFromDate);
        periodOpeningDate       = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,periodFromDate);

        if ((ledgerPostingJournalId =='' )  || (!LedgerJournalTableTypeBE::findByPostingJournalId(ledgerPostingJournalId)))
        {
            ret  = checkFailed(strfmt("@SYS79665", ledgerPostingJournalId, "@SYS21694"));
        }
        if (!fromDate)
        {
            ret  = checkFailed(strfmt("@SYS26332","@SYS5209"));
        }
        if (!toDate)
        {
            ret  = checkFailed(strfmt("@SYS26332","@SYS14656"));
        }
        if (toDate < fromDate)
        {
            ret  = checkFailed("@SYS16982");
        }
        if (periodClosingDate < periodToDate)
        {
            ret  = checkFailed(strfmt("@SYS79672",periodClosingDate));
        }
        if (ret && finalReporting)
        {
            ret  = this.validatePeriod();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the parameters.
    /// </summary>
    /// <returns>
    ///    true if the entered values are correct; otherwise an error is thrown.
    /// </returns>
    public boolean validatePeriod()
    {
        LedgerJournalPeriodFinalPrintBE  jpFinalPrintBE;
        LedgerJournalTableTypeBE         ledgerPostingJournal;

        boolean  firstError     = true;
        boolean  ret            = true;

        if (ledgerPostingJournalId)
        {
            select firstonly jpFinalPrintBE
                order by PeriodEnd desc
                where jpFinalPrintBE.LedgerPostingJournalId  == ledgerPostingJournalId;

            if (jpFinalPrintBE && (jpFinalPrintBE.PeriodEnd + 1 != periodFromDate))
            {
                ret  = checkFailed(strfmt("@SYS79673", ledgerPostingJournalId, jpFinalPrintBE.PeriodEnd, jpFinalPrintBE.PeriodEnd + 1));
            }
        }
        else
        {
            while select LedgerPostingJournalId from ledgerPostingJournal
                where ledgerPostingJournal.JournalTypeBE  == LedgerJournalTypeBE::Financial
            {
                select firstonly jpFinalPrintBE
                    order by PeriodEnd desc
                    where jpFinalPrintBE.LedgerPostingJournalId  == ledgerPostingJournal.LedgerPostingJournalId;

                if (jpFinalPrintBE && (jpFinalPrintBE.PeriodEnd + 1 != periodFromDate))
                {
                    if (firstError)
                    {
                        setprefix("@SYS79674");
                    }
                    ret         = checkFailed(strfmt("@SYS79673", ledgerPostingJournal.LedgerPostingJournalId, jpFinalPrintBE.PeriodEnd, jpFinalPrintBE.PeriodEnd + 1));
                    firstError  = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>