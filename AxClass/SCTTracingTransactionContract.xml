<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SCTTracingTransactionContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
internal class SCTTracingTransactionContract
{
    protected ItemId itemId;
    protected InventBatchId inventBatchId;
    protected InventSerialId inventSerialId;
    protected InventQty quantity;
    protected UnitOfMeasureSymbol uom;
    protected SCTTracingDataCollection details;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [DataMember('ItemId')]
    internal ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBatchId</Name>
				<Source><![CDATA[
    [DataMember('InventBatchId')]
    internal InventBatchId parmInventBatchId(InventBatchId _inventBatchId = inventBatchId)
    {
        inventBatchId = _inventBatchId;

        return inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSerialId</Name>
				<Source><![CDATA[
    [DataMember('InventSerialId')]
    internal InventSerialId parmInventSerialId(InventSerialId _inventSerialId = inventSerialId)
    {
        inventSerialId = _inventSerialId;

        return inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    [DataMember('InventQty')]
    internal InventQty parmInventQty(InventQty _quantity = quantity)
    {
        quantity = _quantity;

        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUom</Name>
				<Source><![CDATA[
    [DataMember('Unit')]
    internal UnitOfMeasureSymbol parmUom(UnitOfMeasureSymbol _uom = uom)
    {
        uom = _uom;

        return uom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetails</Name>
				<Source><![CDATA[
    [DataMember('Details')]
    internal SCTTracingDataCollection parmDetails(SCTTracingDataCollection _details = details)
    {
        details = _details;

        return details;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static SCTTracingTransactionContract construct()
    {
        return new SCTTracingTransactionContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTrans</Name>
				<Source><![CDATA[
    internal static SCTTracingTransactionContract newFromInventTrans(InventTrans _inventTrans)
    {
        InventDim inventDim = _inventTrans.inventDim();
        SCTTracingTransactionContract transactionContract = SCTTracingTransactionContract::construct();
        transactionContract.parmItemId(_inventTrans.ItemId);
        transactionContract.parmInventBatchId(inventDim.inventBatchId);
        transactionContract.parmInventSerialId(inventDim.inventSerialId);
        transactionContract.parmInventQty(_inventTrans.Qty);
        transactionContract.parmUom(_inventTrans.inventUnit());
        transactionContract.parmDetails(SCTTracingTransactionContract::getDetails(inventDim));
        return transactionContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetails</Name>
				<Source><![CDATA[
    public static SCTTracingDataCollection getDetails(InventDim _inventDim)
    {
        Map detailsMap = new Map(Types::String, Types::String);
        if (_inventDim.InventSiteId)
        {
            detailsMap.add("Site", _inventDim.InventSiteId);
        }

        if (_inventDim.InventLocationId)
        {
            detailsMap.add("Warehouse", _inventDim.InventLocationId);
        }

        if (_inventDim.wMSLocationId)
        {
            detailsMap.add("Location", _inventDim.wMSLocationId);
        }

        JsonMapSerializer serializer = new JsonMapSerializer(null);
        return SCTTracingTransactionContract::serializeDetailsMap(detailsMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeDetailsMap</Name>
				<Source><![CDATA[
    internal static SCTTracingDataCollection serializeDetailsMap(Map _detailsMap)
    {
        System.IO.StringWriter stringWriter = new System.IO.StringWriter();
        Newtonsoft.Json.JsonTextWriter jsonWriter = new Newtonsoft.Json.JsonTextWriter(stringWriter);
        jsonWriter.WriteStartObject();

        MapEnumerator mapEnumerator = _detailsMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            jsonWriter.WritePropertyName(mapEnumerator.currentKey());
            jsonWriter.WriteValue(mapEnumerator.currentValue());
        }
        jsonWriter.WriteEndObject();

        return stringWriter.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>