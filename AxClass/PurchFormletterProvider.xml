<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchFormletterProvider extends FormletterProvider
{
    PurchTable            purchTable;
    PurchLine             purchLine;
    VendDocumentTableMap  parmHeader;
    PurchTotals           purchTotals;
    VendDocumentLineMap   parmLine;
    NoYes                 vendorCollaborationValidation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger dimension default account that is used for posting cash discount.
    /// </summary>
    /// <returns>
    /// The ledger dimension default account that is used for posting cash discount.
    /// </returns>
    public LedgerDimensionDefaultAccount cashDiscountLedgerDimension()
    {
        if (parmHeader.isNonPO())
        {
            return CashDisc::find(parmHeader.CashDiscCode).ReceivedLedgerDimension;
        }

        return CashDisc::find(purchTable.CashDisc).ReceivedLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBlockedLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the block level for vendor.
    /// </summary>
    /// <returns>
    /// true if the vendor is not on hold; otherwise, false.
    /// </returns>
    protected boolean  checkBlockedLevel()
    {
        boolean                ok = true;
        boolean                isVendReleaseDateExpired;
        VendTable              vendTable;
        VendBlockedReleaseDate vendReleaseDate;
        VendAccount            orderAccount;
        VendInvoiceAccount     invoiceAccount;

        if (parmHeader.isNonPO())
        {
            orderAccount = parmHeader.OrderAccount;
            invoiceAccount = parmHeader.InvoiceAccount;
        }
        else
        {
            orderAccount = purchTable.OrderAccount;
            invoiceAccount = purchTable.InvoiceAccount;
        }

        vendTable = VendTable::find(orderAccount);

        vendReleaseDate = vendTable.BlockedReleaseDate;

        isVendReleaseDateExpired = VendTable::isVendReleaseDateExpired(orderAccount);

        if (!VendTable::canVendorBeUpdated(orderAccount, invoiceAccount, this.parmDocumentStatus()))
        {
            if (!vendReleaseDate)
            {
                ok = checkFailed(strFmt("@SYS128411", orderAccount, vendTable.Blocked));
            }
            else if (!isVendReleaseDateExpired)
            {
                ok = checkFailed(strFmt("@SYS128412", orderAccount, vendTable.Blocked, DateTimeUtil::date(vendReleaseDate)));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeading</Name>
				<Source><![CDATA[
    protected boolean  checkHeading()
    {
        #ISOCountryRegionCodes
        // <GEERU>
        boolean     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        PaymTerm                paymTerm;
        boolean                 ok = true;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        TransDate               deliveryDate;
        TransDate               lastValidDate;

        if (parmHeader.isNonPO())
        {
            // These checks are made in purchInvoiceJournalCreate for invoices
            return ok;
        }

        if (! purchTable.RecId)
        {
            ok = checkFailed(strFmt("@SYS15741", purchTable.PurchId));
        }

        if (! purchTable.OrderAccount)
        {
            ok = checkFailed(strFmt("@SYS19291", purchTable.PurchId));
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            if (parmHeader.Ordering != DocumentStatus::PurchaseOrder
                && parmHeader.Ordering != DocumentStatus::Invoice4Paym_RU
                && purchTable.DocumentState != VersioningDocumentState::Confirmed)
            {
                ok = checkFailed("@SYS307485");
            }
        }
        else
        {
        // </GEERU>
            if (   parmHeader.Ordering != DocumentStatus::PurchaseOrder
                && parmHeader.Ordering != DocumentStatus::ConfirmationRequest
                && purchTable.DocumentState != VersioningDocumentState::Confirmed
                && this.parmVersioningUpdateType() == VersioningUpdateType::Initial)
            {
                ok = checkFailed("@SYS307485");
            }
        // <GEERU>
        }
        // </GEERU>

        if (! VendTable::exist(purchTable.OrderAccount))
        {
            ok = checkFailed(strFmt("@SYS19292", purchTable.OrderAccount,purchTable.PurchId));
        }

        if (! purchTable.InvoiceAccount)
        {
            ok = checkFailed(strFmt("@SYS19293", purchTable.PurchId));
        }

        if (! VendTable::exist(purchTable.InvoiceAccount))
        {
            ok = checkFailed(strFmt("@SYS19294", purchTable.InvoiceAccount,purchTable.PurchId));
        }

        if (purchTable.CurrencyCode && ! Currency::exist(purchTable.CurrencyCode))
        {
            ok = checkFailed(strFmt("@SYS19295", purchTable.CurrencyCode,purchTable.PurchId));
        }

        if (! purchTable.isInterCompanyOrder()
            &&  ! purchTable.checkMarkupTrans(false))
        {
            ok = false;
        }

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            ok = purchTable.checkIntrastatFulfillDate_HU() && ok;
        }
        // </GEEHU>

        if (purchTable.Payment && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            paymTerm = PaymTerm::find(purchTable.Payment);
            if (paymTerm.UseDeliveryDateForDueDate_ES)
            {
                deliveryDate = purchTable.firstPackingSlipDate();
                if (!deliveryDate)
                {
                    deliveryDate = purchTable.DeliveryDate;
                    if (!deliveryDate && paymTerm.UseDeliveryDateForDueDate_ES)
                    {
                        ok = checkFailed(strfmt("@SYS4000477", purchTable.Payment));
                    }
                }
            }
            else
            {
                deliveryDate = vendInvoiceInfoTable.DocumentDate;
                if (!deliveryDate)
                {
                    deliveryDate = vendInvoiceInfoTable.TransDate;
                }
            }

            if (deliveryDate && parmHeader.TableId == tableNum(VendInvoiceInfoTable))
            {
                vendInvoiceInfoTable = parmHeader;
                if (vendInvoiceInfoTable.FixedDueDate)
                {
                    lastValidDate = PaymDueDateLimit_ES::getDueDateLimitPurchParm(
                        paymTerm.DueDateLimitGroupId_ES,
                        deliveryDate,
                        vendInvoiceInfoTable.PurchId,
                        vendInvoiceInfoTable.ParmId).getLastValidDate(deliveryDate);

                    if (vendInvoiceInfoTable.FixedDueDate > lastValidDate)
                    {
                        ok = checkFailed("@SYS4001055");
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    public boolean checkJournal()
    {
        boolean     ok = true;

        purchTotals = this.parmTotals();

        ttsbegin;   // in transaction in order to enforce selection of eg VendTable

        if ( parmHeader.Hold == NoYes::No &&
            (!this.checkHeading()     ||
            !this.checkBlockedLevel() ||
            !this.checkLines()))
        {
            ok = false;
        }

        if (parmHeader.Hold == NoYes::No && purchTotals && purchTotals.purchTotalAmount() > 0)
        {
            if ( !this.creditMaxOk(CurrencyExchangeHelper::mstAmount(purchTotals.purchTotalAmount(), parmHeader.CurrencyCode, purchTotals.invoiceDate())) )
            {
                ok = false;
            }
        }

        ttscommit;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLines</Name>
				<Source><![CDATA[
    protected boolean  checkLines()
    {
        boolean  ok = true;
        RecordSortedList recordListPurchLine;
        VendInvoiceInfoLine     vendInvoiceInfoLine;

        if (purchTotals)
        {
            recordListPurchLine = purchTotals.recordListPurchLine();

            setPrefix(#PreFixField(PurchLine, LineNumber));

            if (!parmHeader.isNonPO()
                && this.parmDocumentStatus()!=DocumentStatus::PurchaseOrder
                && this.parmDocumentStatus()!=DocumentStatus::ConfirmationRequest
                && !PurchLine::exist(purchTable.PurchId))
            {
                 ok = checkFailed("@SYS16741");
            }
            purchLine.clear();

            recordListPurchLine.first(purchLine);
            while (purchLine)
            {
                if (purchLine.ItemId && !InventTable::exist(purchLine.ItemId))
                    ok = checkFailed(strFmt("@SYS20812", purchLine.ItemId));

                if (this.parmDocumentStatus() == DocumentStatus::Invoice
                 || this.parmDocumentStatus() == DocumentStatus::ApproveJournal
                 // <GEERU>
                 || this.parmDocumentStatus() == DocumentStatus::Facture_RU
                 // </GEERU>
                 // <GEEPL>
                 || this.parmDocumentStatus() == DocumentStatus::PlSAD
                 // </GEEPL>
                    )
                {
                    vendInvoiceInfoLine = VendInvoiceInfoLine::findInventTransId(parmHeader.ParmId, parmHeader.TableRefId, purchLine.InventTransId, true);
                    if (! this.checkPurchLineChanged(vendInvoiceInfoLine, purchLine))
                        ok = false;

                    vendInvoiceInfoLine.Ordering = this.parmDocumentStatus();

                    // Verify invoice quantities against PO quantities
                    if (ok && !this.validateInvoiceQuantityAgainstPurchaseLine(vendInvoiceInfoLine))
                    {
                        ok = false;
                    }
                }
                else
                {
                    if (   parmHeader.Ordering != DocumentStatus::PurchaseOrder
                        && parmHeader.Ordering != DocumentStatus::ConfirmationRequest
                        && ! this.checkPurchLineChanged(PurchParmLine::findInventTransId(parmHeader.ParmId, purchLine.InventTransId, false, parmHeader.TableRefId), purchLine))
                        ok = false;
                }

                ok = ok && this.checkPurchLine(purchLine);

                if (!recordListPurchLine.next(purchLine))
                    break;
            }
            // <GIN>
            if (ok
                &&
                (this.parmDocumentStatus() == DocumentStatus::PackingSlip
                || this.parmDocumentStatus() == DocumentStatus::ReceiptsList
                || this.parmDocumentStatus() == DocumentStatus::BillOfEntry_IN)
                && TaxParameters::checkTaxParameters_IN()
                && purchTotals.tax())
            {
                purchTotals.tax().validate_IN();
            }
            // </GIN>
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the purchase order line is valid.
    /// </summary>
    /// <param name = "_purchLine"> <c>PurchLine</c> </param>
    /// <returns>
    ///   true if the purchase order line is valid; otherwise, false.
    /// </returns>
    protected boolean checkPurchLine(PurchLine _purchLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceQuantityAgainstPurchaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the invoice quantities against purchase line quantities.
    /// </summary>
    /// <param name = "_vendInvoiceInfoLine"> Vendor order line for purchase order.</param>
    /// <returns>true, if invoice quantities are valid against PO quantities; otherwise, false.</returns>
    protected boolean validateInvoiceQuantityAgainstPurchaseLine(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        return (VendInvoiceInfoLine::checkQuantitySign(_vendInvoiceInfoLine.ReceiveNow, purchLine.PurchQty, "@SYS331797") &&
                VendInvoiceInfoLine::checkQuantitySign(_vendInvoiceInfoLine.InventNow, purchLine.QtyOrdered, "@SYS331850") &&
                VendInvoiceInfoLine::checkQuantitySign(_vendInvoiceInfoLine.RemainAfter, purchLine.PurchQty, "@SYS331849") &&
                VendInvoiceInfoLine::checkQuantitySign(_vendInvoiceInfoLine.RemainAfterInvent, purchLine.QtyOrdered, "@SYS331851"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchLineChanged</Name>
				<Source><![CDATA[
    protected boolean checkPurchLineChanged(VendDocumentLineMap _parmLine, PurchLine _purchLine)
    {
        boolean     ok = true;
        PurchQty    remainBefore, remainAfter;
        InventQty   remainBeforeInvent, remainAfterInvent;
        Qty         dummy;
        PurchFormletterParmData parmData = this.instantiateParmData();

        Debug::assert(_parmLine.TableId != tableNum(VendDocumentLineMap));

        if (_parmLine.isNonPO())
        {
            return ok;
        }

        parmData.parmParmUpdate(this.parmParmUpdate());
        parmData.init();

        if (_parmLine.TableId == tableNum(PurchParmLine))
        {
            _parmLine.revertPreviousVersionChanges(purchLine);
        }

        [dummy, remainBefore, remainAfter] = parmData.qtyPurch (_purchLine, naReal());
        [dummy, remainBeforeInvent, remainAfterInvent] = parmData.qtyInvent(_purchLine, naReal());

        if (remainBefore != _parmLine.RemainBefore
            || remainBeforeInvent != _parmLine.RemainBeforeInvent)
        {
            if (this.parmDocumentStatus() == DocumentStatus::Invoice
                || this.parmDocumentStatus() == DocumentStatus::ApproveJournal
                // <GEERU>
                || this.parmDocumentStatus() == DocumentStatus::Facture_RU
                // </GEERU>
                // <GEEPL>
                || this.parmDocumentStatus() == DocumentStatus::PlSAD
                // </GEEPL>
                )
            {
                _parmLine.RemainBefore = remainBefore;
                _parmLine.RemainAfter = remainAfter;
                _parmLine.RemainBeforeInvent = remainBeforeInvent;
                _parmLine.RemainAfterInvent = remainAfterInvent;
                _parmLine.RemainBeforeInventPhysical = _purchLine.RemainInventPhysical;
                _parmLine.doUpdate();
            }
            else
            {
                ok = checkFailed(strFmt("@SYS78923", _parmLine.OrigPurchId));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates a <c>PurchFormletterParmData</c> instance.
    /// </summary>
    /// <returns>The instantiated <c>PurchFormletterParmData</c> instance.</returns>
    protected PurchFormletterParmData instantiateParmData()
    {
        return PurchFormletterParmData::newData(this.parmDocumentStatus(), versioningUpdateType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMaxOk</Name>
				<Source><![CDATA[
    protected boolean  creditMaxOk(AmountMST _amountMST)
    {
        PurchTotals     received;
        // <GEERU>
        #ISOCountryRegionCodes
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        PurchTable_RU           purchTable_RU;
        boolean                 countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (this.parmSkipCreditMaxCheck())
        {
            return true;
        }

        if ( (!parmHeader.isNonPO() && PaymTerm::cashLedgerDimension(purchTable.Payment)) ||
              (parmHeader.isNonPO() && PaymTerm::cashLedgerDimension(parmHeader.Payment)) )
        {
            return true;
        }

        if (_amountMST > 0 && parmHeader.purchParmUpdate().isCreditCheckEligible())
        {
            if (!parmHeader.isNonPO() && parmHeader.purchParmUpdate().CheckCreditMax == TypeOfCreditmaxCheck::BalanceDelivered)
            {
                // deduct whatever is already received as it will added later (in PurchTable::balanceAmountDelivered())
                received  = PurchTotals::newPurchTable(purchTable, PurchUpdate::PackingSlip);
                received.calc();
                _amountMST -= CurrencyExchangeHelper::mstAmount(received.purchTotalAmount(), purchTable.CurrencyCode, purchTotals.invoiceDate());
            }

            // <GEERU>
            if (countryRegion_RU)
            {
                if (parmHeader.TableId == tableNum(VendInvoiceInfoTable))
                {
                    vendInvoiceInfoTable = parmHeader;
                }
                purchTable_RU = purchTable.purchTable_RU();
                return VendTable::checkCreditLimit(parmHeader.InvoiceAccount,
                                                   parmHeader.purchParmUpdate().CheckCreditMax,
                                                   _amountMST,
                                                   parmHeader.PurchId,
                                                   purchTable_RU.AgreementHeaderExt_RU ? purchTable_RU.AgreementHeaderExt_RU : vendInvoiceInfoTable.vendInvoiceInfoTable_RU().AgreementHeaderExt_RU,
                                                   parmHeader.TableId,
                                                   parmHeader.RecId);
            }
            else
            {
            // </GEERU>
                return VendTable::checkCreditLimit(
                                    parmHeader.InvoiceAccount,
                                    parmHeader.purchParmUpdate().CheckCreditMax,
                                    _amountMST,
                                    purchTable.PurchId); // Exclude this PO
            // <GEERU>
            }
            // </GEERU>
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        // <GBR>
        CurrencyCode    currencyCode;

        if (BrazilParameters::isEnabled())
        {
            if (parmHeader)
            {
                currencyCode = parmHeader.CurrencyCode;
            }
            else if (purchTable)
            {
                currencyCode = purchTable.CurrencyCode;
            }

            return currencyCode;
        }
        // </GBR>

        return parmHeader.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLedgerTransactionText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the default ledger transaction text that is used during posting.
    /// </summary>
    /// <returns>
    ///    The default ledger transaction text that is used during posting.
    /// </returns>
    public TransTxt defaultLedgerTransactionText()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>detailSummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the posting mode that will used in a ledger.
    /// </summary>
    /// <returns>
    ///    The posting mode to use in a ledger.
    /// </returns>
    public DetailSummary detailSummary()
    {
        return DetailSummary::Summary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmLine_OrigOrderId</Name>
				<Source><![CDATA[
    public FieldId fieldIdParmLine_OrigOrderId()
    {
        if (this.parmDocumentStatus() == DocumentStatus::Invoice
         || this.parmDocumentStatus() == DocumentStatus::ApproveJournal
            // <GEERU>
         || this.parmDocumentStatus() == DocumentStatus::Facture_RU
            // </GEERU>
            // <GEEPL>
         || this.parmDocumentStatus() == DocumentStatus::PlSAD
            // </GEEPL>
            )
        {
            return fieldNum(VendInvoiceInfoLine, OrigPurchId);
        }
        else if (this.parmDocumentStatus() == DocumentStatus::PurchaseOrder
               || this.parmDocumentStatus() == DocumentStatus::ConfirmationRequest)
        {
            return fieldNum(PurchLine, PurchId);
        }
        else
        {
            return fieldNum(PurchParmLine, OrigPurchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_OrderId</Name>
				<Source><![CDATA[
    public FieldId fieldIdParmTable_OrderId()
    {
        if (this.parmDocumentStatus() == DocumentStatus::Invoice
         || this.parmDocumentStatus() == DocumentStatus::ApproveJournal
        // <GEERU>
         || this.parmDocumentStatus() == DocumentStatus::Facture_RU
        // </GEERU>
        // <GEEPL>
         || this.parmDocumentStatus() == DocumentStatus::PlSAD
        // </GEEPL>
            )
        {
            return fieldNum(VendInvoiceInfoTable, PurchId);
        }
        else
        {
            return fieldNum(PurchParmTable, PurchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the purchase line is inventoried.
    /// </summary>
    /// <returns>
    ///    true if the purchase line is inventoried; otherwise, false.
    /// </returns>
    public boolean isStocked()
    {
        return purchLine.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger dimension default account that is used for posting line amount.
    /// </summary>
    /// <returns>
    /// The ledger dimension default account that is used for posting line amount.
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimensionLineAmount()
    {
        return purchLine.ledgerDimensionOffsetAccountPckSlp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionLineAmount_IT</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount ledgerDimensionLineAmount_IT(boolean _creditNote = false)
    {
        return purchLine.ledgerDimensionOffsetAccountPckSlp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransactionTextEndDisc</Name>
				<Source><![CDATA[
    public LedgerTransTxt ledgerTransactionTextEndDisc()
    {
        return LedgerTransTxt::PurchEndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransactionTextRoundOff</Name>
				<Source><![CDATA[
    public LedgerTransTxt ledgerTransactionTextRoundOff()
    {
        return LedgerTransTxt::VendRoundOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a ledger transaction type.
    /// </summary>
    /// <returns>
    ///    A ledger transaction type.
    /// </returns>
    public LedgerTransType ledgerTransType()
    {
        return LedgerTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger account that is used for posting line amount.
    /// </summary>
    /// <returns>
    /// The ledger account that is used for posting line amount.
    /// </returns>
    public LedgerDimensionDefaultAccount lineAmountLedgerDimension()
    {
        return purchLine.ledgerDimensionOffsetAccountPckSlp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>LedgerDimensionDefaultAccount</c> that is used for posting cash discount.
    /// </summary>
    /// <returns>
    /// The <c>LedgerDimensionDefaultAccount</c> that is used for posting cash discount.
    /// </returns>
    public LedgerDimensionDefaultAccount lineDiscountLedgerDimension()
    {
        return purchLine.ledgerDimensionDiscount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _purchParmTable = parmHeader)
    {
        parmHeader = _purchParmTable;
        return parmHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceLine</Name>
				<Source><![CDATA[
    public Common parmSourceLine(Common _sourceLine = purchLine)
    {
        if (!prmisDefault(_sourceLine))
        {
            switch (_sourceLine.TableId)
            {
                case tableNum(PurchLine):
                    purchLine = _sourceLine;
                    parmLine.clear();
                    break;

                case tableNum(VendInvoiceInfoLine):
                    parmLine = _sourceLine;
                    purchLine = parmLine.purchLine();
                    break;
            }
        }

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = purchTable)
    {
        purchTable = _sourceTable;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the posting module.
    /// </summary>
    /// <returns>
    ///    The posting module.
    /// </returns>
    public SysModule postingModule()
    {
        return SysModule::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCashDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger posting type for cash discount.
    /// </summary>
    /// <returns>
    ///    The ledger posting type for cash discount.
    /// </returns>
    public LedgerPostingType postingTypeCashDiscount()
    {
        return LedgerPostingType::VendCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeEndDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for end discount.
    /// </summary>
    /// <returns>
    /// The ledger posting type for end discount.
    /// </returns>
    public LedgerPostingType postingTypeEndDiscount()
    {
        return LedgerPostingType::VendInvoiceDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger posting type for line amount.
    /// </summary>
    /// <returns>
    ///    The ledger posting type for lineAmount.
    /// </returns>
    public LedgerPostingType postingTypeLineAmount()
    {
        return LedgerPostingType::PurchOffsetAccountPckSlp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for line discount.
    /// </summary>
    /// <returns>
    /// The ledger posting type for line discount.
    /// </returns>
    public LedgerPostingType postingTypeLineDiscount()
    {
        return LedgerPostingType::PurchDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeRoundOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for round off.
    /// </summary>
    /// <returns>
    /// The ledger posting type for round off.
    /// </returns>
    public LedgerPostingType postingTypeRoundOff()
    {
        return LedgerPostingType::SalesRoundOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchFormletterProvider construct()
    {
        return new PurchFormletterProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>