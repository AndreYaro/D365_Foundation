<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreatePurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkCreatePurchLine</c> class creates warehouse work for receiving purchase order line.
/// </summary>
public class WhsWorkCreatePurchLine extends WHSWorkCreateReceiving
{
    WHSWorkCreateId     workCreateId;
    [SysObsolete('Deprecated field. Please use parmLicensePlateGroupingPolicy method instead.', false, 30\06\2020)]
    WHSUnitization      unitization;
    [SysObsolete('Deprecated field. Please use the orderLine field instead.', false, 15\02\2023)]
    PurchLine           purchLine;
    WHSReceiptOrderLine orderLine;
    InventQty           inventQty;
    WHSLoadId           loadId;
    
    private WHSLoadLine receivingLoadLine;

    private WHSLicensePlateGroupingPolicy licensePlateGroupingPolicy;
    private WHSTransWeight				  catchWeight;
    private WhsWorkProcess                workProcess;
    private InventTransType               inventTransType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates an inventory serial ID for a given item.
    /// </summary>
    /// <param name = "_serialId">
    /// The serial ID.
    /// </param>
    /// <param name = "_itemId">
    /// The item ID.
    /// </param>
    public void createSerial(InventSerialId _serialId, ItemId _itemId)
    {
        super(_serialId, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkProcess</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WhsWorkProcess parmWorkProcess(WhsWorkProcess _workProcess = workProcess)
    {
        workProcess = _workProcess;
        return workProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTransType parmInventTransType(InventTransType _inventTransType = inventTransType)
    {
        inventTransType = _inventTransType;
        return inventTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the temporary work line(s) for inbound order line registration
    /// </summary>
    public void createTempTable()
    {
        ttsbegin;

        if (!startLocationId)
        {
            startLocationId = this.defaultReceiptLocationId(orderLine.InventDimId);
        }

        this.identifyReceivingLoadLine();

        // Register the Inbound Order Lines and create batches if we need to.
        this.processPurchLines();

        this.createTmpWorkOnRegistration();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>identifyReceivingLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies a load line from the inbound order line and load, if provided. If no load provided, finds the first load line for the inbound order line.
    /// </summary>
    protected void identifyReceivingLoadLine()
    {
        // If the load id is not specified, only consider non-received loads.

        WHSLoadTable receivingLoadTable;

        // Only Purchase orders with the Enabled policy can get into a situation where the status is not Received but the LoadReceivingCompletedUTCDateTime is set
        boolean mustFilterUsingLoadReceivingCompletedUTCDateTime = (inventTransType == InventTransType::Purch 
                                                                    && whsParameters.LoadReceivingCompletedPolicyForPurchaseOrders == WHSLoadReceivingCompletedPolicyForPurchaseOrders::Enabled);
        if (WhsReceivingCompletedNewLoadInsteadOfAddToReceivedLoadFlight::instance().isEnabled())
        {
            receivingLoadLine = this.selectReceivingLoadLine(inventTransType, loadId, orderLine, mustFilterUsingLoadReceivingCompletedUTCDateTime);
        }
        else if (mustFilterUsingLoadReceivingCompletedUTCDateTime)
        {
            select firstonly forupdate receivingLoadLine
            where (!loadId || receivingLoadLine.LoadId == loadId)
                && receivingLoadLine.InventTransId == orderLine.InventTransId
                && receivingLoadLine.InventTransType == inventTransType
            exists join receivingLoadTable
                where receivingLoadTable.LoadId == receivingLoadLine.LoadId
                    && receivingLoadTable.LoadDirection == WHSLoadDirection::Inbound
                    && (loadId || (receivingLoadTable.LoadStatus != WHSLoadStatus::Received && !receivingLoadTable.LoadReceivingCompletedUTCDateTime));
        }
        else
        {
            select firstonly forupdate receivingLoadLine
                where (!loadId || receivingLoadLine.LoadId == loadId)
                    && receivingLoadLine.InventTransId == orderLine.InventTransId
                    && receivingLoadLine.InventTransType == inventTransType
                exists join receivingLoadTable
                    where receivingLoadTable.LoadId == receivingLoadLine.LoadId
                        && (loadId || receivingLoadTable.LoadStatus != WHSLoadStatus::Received);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectReceivingLoadLine</Name>
				<Source><![CDATA[
    private WHSLoadLine selectReceivingLoadLine(
        InventTransType     _inventTransType, 
        WHSLoadId           _loadId,
        WHSReceiptOrderLine _orderLine,
        boolean             _mustFilterUsingLoadReceivingCompletedUTCDateTime)
    {
        WHSLoadLine loadLineReceipt;
        WHSLoadTable loadTableReceipt;

        if (_mustFilterUsingLoadReceivingCompletedUTCDateTime)
        {   
            select firstonly forupdate loadLineReceipt
                where (!_loadId || loadLineReceipt.LoadId == _loadId)
                    && loadLineReceipt.InventTransId == _orderLine.InventTransId
                    && loadLineReceipt.InventTransType == _inventTransType
                exists join loadTableReceipt
                    where loadTableReceipt.LoadId == loadLineReceipt.LoadId
                        && (loadTableReceipt.LoadStatus != WHSLoadStatus::Received && !loadTableReceipt.LoadReceivingCompletedUTCDateTime);
        }
        else
        {
            select firstonly forupdate loadLineReceipt
                where (!_loadId || loadLineReceipt.LoadId == _loadId)
                    && loadLineReceipt.InventTransId == _orderLine.InventTransId
                    && loadLineReceipt.InventTransType == _inventTransType
                exists join loadTableReceipt
                    where loadTableReceipt.LoadId == loadLineReceipt.LoadId
                        && loadTableReceipt.LoadStatus != WHSLoadStatus::Received;
        }
        return loadLineReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpWorkOnRegistration</Name>
				<Source><![CDATA[
    private void createTmpWorkOnRegistration()
    {
        if (this.mustCreateTmpWorkOnRegistration())
        {
            TMSPurchTable tmsPurchTable;
            if (orderLine is PurchLine)
            {
                tmsPurchTable = TMSPurchTable::find(orderLine.OrderNumber);
            }

            // Create map to track above location dimensions and qty, based off registered inventory
            this.createReceiptDimQtyMap(orderLine.ItemId);

            // Fill the Inbound specific fields on the Temp Work Line.
            tmpWorkLine.WorkType            = WHSWorkType::Put;
            tmpWorkLine.OriginType          = orderLine.originType();
            tmpWorkLine.OriginRefId         = orderLine.OrderNumber;
            tmpWorkLine.OrderNum            = orderLine.OrderNumber;
            tmpWorkLine.WorkCreateId        = workCreateId;
            tmpWorkLine.WorkTransType       = workTransType;
            tmpWorkLine.InventTransId       = orderLine.InventTransId;
            tmpWorkLine.ItemId              = orderLine.ItemId;
            tmpWorkLine.InventBatchId       = inventBatchId;
            tmpWorkLine.RefTableId          = orderLine.TableId;
            tmpWorkLine.RefRecId            = orderLine.RecId;
            tmpWorkLine.StartLocationId     = startLocationId;
            tmpWorkLine.InventUnitizeQty    = unitizeQty;
            tmpWorkLine.CarrierCode         = tmsPurchTable.CarrierCode;
            tmpWorkLine.CarrierServiceCode  = tmsPurchTable.CarrierServiceCode;
            tmpWorkLine.ModeCode            = tmsPurchTable.ModeCode;
            tmpWorkLine.CustVendAC          = orderLine.vendAccount();
            
            tmpWorkLine.LoadId              = receivingLoadLine.LoadId;
            tmpWorkLine.ShipmentId          = receivingLoadLine.ShipmentId;
            tmpWorkLine.LoadLineRefRecId    = receivingLoadLine.RecId;

            this.setGlobals();

            InventQty qtyToCreateWork;
            WHSWorkBuildId crossDockWorkBuildId;
            WHSWorkBuildId qualityItemSamplingWorkBuildId;

            // Create the Temp Work Line record(s).
            if (!dimQty.empty())
            {
                MapEnumerator dimQtyEnumerator = dimQty.getEnumerator();

                while (dimQtyEnumerator.moveNext())
                {
                    workInventDim = InventDim::find(dimQtyEnumerator.currentKey());

                    // Populate batch field on tmp work line to evaluate mixing rules
                    if (workInventDim.InventBatchId)
                    {
                        tmpWorkLine.InventBatchId = workInventDim.InventBatchId;
                    }
                    else if (batchMix != null)
                    {
                        tmpWorkLine.InventBatchId = batchMix.lookup(workInventDim.InventDimId);
                    }

                    qtyToCreateWork = dimQtyEnumerator.currentValue();
                    InventDim localInventDim;

                    localInventDim.data(workInventDim);
                    localInventDim.InventStatusId = inventStatusId;

                    crossDockWorkBuildId = WHSWorkTable::findCrossDockWorkBuildId(targetLicensePlateId);
                    qtyToCreateWork = this.getWorkCreateQuantityAfterCrossDock(qtyToCreateWork,
                                                                                crossDockWorkBuildId,
                                                                                orderLine.ItemId,
                                                                                targetLicensePlateId,
                                                                                localInventDim);

                    qualityItemSamplingWorkBuildId = WHSWorkTable::findQualityItemSamplingWorkBuildId(targetLicensePlateId);
                    qtyToCreateWork = this.getWorkCreateQuantityAfterQualityItemSampling(qtyToCreateWork, 
                                                                                         qualityItemSamplingWorkBuildId, 
                                                                                         orderLine.InventTransId,
                                                                                         targetLicensePlateId, 
                                                                                         localInventDim);

                    tmpWorkLine.WorkCreateId = workCreateId;
    
                    if (qtyToCreateWork > 0)
                    {
                        this.createTempLine(tmpWorkLine, qtyToCreateWork);
                    }
                }
            }
            else
            {
                crossDockWorkBuildId = WHSWorkTable::findCrossDockWorkBuildId(targetLicensePlateId);
                qtyToCreateWork = this.getWorkCreateQuantityAfterCrossDock(inventQty,
                                                                            crossDockWorkBuildId,
                                                                            orderLine.ItemId,
                                                                            targetLicensePlateId,
                                                                            orderLine.inventDim());

                qualityItemSamplingWorkBuildId = WHSWorkTable::findQualityItemSamplingWorkBuildId(targetLicensePlateId);
                qtyToCreateWork = this.getWorkCreateQuantityAfterQualityItemSampling(qtyToCreateWork,
                                                                                     qualityItemSamplingWorkBuildId,
                                                                                     orderLine.InventTransId,
                                                                                     targetLicensePlateId,
                                                                                     workInventDim);
     
                tmpWorkLine.WorkCreateId = workCreateId;
    
                if (qtyToCreateWork > 0)
                {
                    this.createTempLine(tmpWorkLine, qtyToCreateWork);
                }
            }

            if (receivingLoadLine)
            {                
                receivingLoadLine.WorkCreatedQty += inventQty;
                receivingLoadLine.update();
            }
            else
            {
                // if loadLine exists, QtyLeftToLoad will be updated inside of whsloadline.update()
                this.updateQtyLeftToLoad();
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateTmpWorkOnRegistration</Name>
				<Source><![CDATA[
    private boolean mustCreateTmpWorkOnRegistration()
    {
        var localPurchLine = orderLine as PurchLine;
        return (!localPurchLine || !localPurchLine.isProjectPurchase() || localPurchLine.purchTable().isProjectSalesItemReqPO())
               && orderLine.inventTable().ItemType != ItemType::Service
               && this.isWorkCreationAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkCreationAllowed</Name>
				<Source><![CDATA[
    private boolean isWorkCreationAllowed()
    {
        return WHSWorkPolicy::isWorkAllowedToBeCreatedForWorkProcess(
            workTransType,
            this.parmInventLocationId(),
            startLocationId,
            this.parmWorkProcess(),
            orderLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSuppressPhysicalRereservationOnNonWorkEnabledIssues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustSuppressPhysicalRereservationOnNonWorkEnabledIssues()
    {
        return this.mustCreateTmpWorkOnRegistration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQtyLeftToLoad</Name>
				<Source><![CDATA[
    private void updateQtyLeftToLoad()
    {
        var localPurchLine = orderLine as PurchLine;
        if (localPurchLine)
        {
            WHSPurchLine whsPurchLine = WHSPurchLine::find(localPurchLine.InventTransId, true);
            if (whsPurchLine)
            {
                whsPurchLine.decreaseQtyLeftToLoad(inventQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        orderLine = _common;
        purchLine = _common as PurchLine;

        if (WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled())
        {
            this.parmWorkTransType(orderLine.workTransType());
            this.parmInventTransType(orderLine.inventTransType());
        }
        else
        {
            this.parmWorkTransType(WHSWorkTransType::Purch);
            this.parmInventTransType(InventTransType::Purch);
        }

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();

        super(orderLine, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    public InventQty parmInventQty(InventQty _inventQty = inventQty)
    {
        inventQty = _inventQty;

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatchWeight</Name>
				<Source><![CDATA[
    public WHSTransWeight parmCatchWeight(WHSTransWeight _catchWeight = catchWeight)
    {
        catchWeight = _catchWeight;

        return catchWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
    [SysObsolete('Deprecated method. Please use parmOrderLine method instead.', false, 15\02\2023)]
    public PurchLine parmPurchLine(PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;
        orderLine = _purchLine;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderLine</Name>
				<Source><![CDATA[
    public WHSReceiptOrderLine parmOrderLine(WHSReceiptOrderLine _orderLine = orderLine)
    {
        orderLine = _orderLine;
        purchLine = _orderLine as PurchLine;

        return orderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitization</Name>
				<Source><![CDATA[
    [SysObsolete('Deprecated method. Please use parmLicensePlateGroupingPolicy method instead.', false, 30\11\2017)]
    public WHSUnitization parmUnitization(WHSUnitization _unitization = unitization)
    {
        unitization = _unitization;

        return unitization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateGroupingPolicy</Name>
				<Source><![CDATA[
    public WHSLicensePlateGroupingPolicy parmLicensePlateGroupingPolicy(WHSLicensePlateGroupingPolicy _licensePlateGroupingPolicy = licensePlateGroupingPolicy)
    {
        licensePlateGroupingPolicy = _licensePlateGroupingPolicy;

        return licensePlateGroupingPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPurchLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Registers purchase order lines.
    /// </summary>
    public void processPurchLines()
    {
        WHSReceiptDetails   receiptDetails;
        InventDim           inventDim;

        if (this.shouldCreateLoadLine())
        {
            this.createLoadLine();
        }

        if (this.mustCreateLoadLineInventTransReceipt())
        {
            this.createLoadLineInventTransReceipt();
        }

        if (WHSReceiptDetails::existByReceiptIdLicensePlate(receiptId, targetLicensePlateId))
        {
            while select receiptDetails
                where receiptDetails.ReceiptId == receiptId
                join inventDim
                    where inventDim.InventDimId     == receiptDetails.InventDimId
                    &&    inventDim.LicensePlateId  == targetLicensePlateId
            {
                this.createPurchLineItemInventoryDimensions(receiptDetails, inventDim);

                using (var receivingLoadContext = WHSWorkCreateReceivingLoadContext::constructWithReceivingLoadId(receivingLoadLine.LoadId))
                {
                    this.processPurchLineReceiptDetails(receiptDetails);
                }

                if (!inventBatchId)
                {
                    inventBatchId = inventDim.InventBatchId;
                }
            }
        }
        else
        {
            using (var receivingLoadContext = WHSWorkCreateReceivingLoadContext::constructWithReceivingLoadId(receivingLoadLine.LoadId))
            {
                this.processPurchLineReceiptDetails(receiptDetails);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateLoadLine</Name>
				<Source><![CDATA[
    private boolean shouldCreateLoadLine()
    {
        return 
            inventTransType == InventTransType::Purch
            && !this.parmLoadLine()
            && WHSParameters::find().AutoCreateLoadAtPOReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadLine</Name>
				<Source><![CDATA[
    private void createLoadLine()
    {
        var loadLine = WhsAutoCreateLoadLinePurch::newFromBuffer(orderLine, true)
            .autoCreateInboundLoadLine(orderLine, InventTransType::Purch);

        if (!loadLine)
        {
            throw error("@WAX:POReceiving_CannotReceiveWithoutLoad");
        }

        this.parmLoadLine(loadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateLoadLineInventTransReceipt</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustCreateLoadLineInventTransReceipt()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadLineInventTransReceipt</Name>
				<Source><![CDATA[
    private void createLoadLineInventTransReceipt()
    {
        if (this.parmLoadLine().RecId && dispositionCode)
        {
            WHSLoadLineInventTransReceiptIdAllocator loadLineInventTransReceiptIdAllocator = WHSLoadLineInventTransReceiptIdAllocator::newFromDispositionCode(dispositionCode);

            WhsLoadLineInventoryReceiptId newLoadLineInventoryReceiptId = loadLineInventTransReceiptIdAllocator.allocateReceiptId(this.parmLoadLine().RecId);

            this.parmLoadLineInventoryReceiptId(newLoadLineInventoryReceiptId);

            loadLineInventTransReceiptIdAllocator.allocationComplete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPurchLineReceiptDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process inbound order line receipt details.
    /// </summary>
    /// <param name = "_receiptDetails">A <c>WHSReceiptDetails</c> buffer.</param>    
    protected void processPurchLineReceiptDetails(WHSReceiptDetails _receiptDetails)
    {
        if (this.mustRegisterPurchLineHandlingQty())
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(orderLine.ItemId);

            InventQty qty;
            PdsCWInventQty cwQty;

            if (_receiptDetails)
            {
                qty = isCWItem ? _receiptDetails.CapturedWeight : _receiptDetails.InventQty;
                cwQty = isCWItem ? _receiptDetails.InventQty : 0;
            }
            else
            {
                qty = isCWItem ? catchWeight : inventQty;
                cwQty = isCWItem ? inventQty : 0;
            }

            this.registerPurchLineHandlingQty(
                            orderLine.InventTransId,
                            qty,
                            this.mustIncludeLicensePlate() ? targetLicensePlateId : '',
                            _receiptDetails.InventDimId,
                            cwQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRegisterPurchLineHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the handling quantity must be registered for the inbound order line.
    /// </summary>
    /// <returns>true if the handling quantity must be registered for the inbound order line; otherwise, false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal boolean mustRegisterPurchLineHandlingQty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchLineItemInventoryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create inventory dimensions for given warehouse receipt details inventory dimension and inbound order line item.
    /// </summary>
    /// <param name = "_receiptDetails">The warehouse receipt details record.</param>
    /// <param name = "_inventDim">The inventory dimension record.</param>
    /// <remarks>The <c>WHSReceiptDetails</c> parameter is needed for extensibilty.</remarks>
    protected void createPurchLineItemInventoryDimensions(
        WHSReceiptDetails	_receiptDetails,
        InventDim			_inventDim)
    {
        if (this.canCreateBatch(_inventDim))
        {
            this.createBatch(_inventDim.InventBatchId, orderLine.ItemId);
        }

        if (this.canCreateSerial(_inventDim))
        {
            this.createSerial(_inventDim.InventSerialId, orderLine.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if batch can be created, if the inventory dimension batch Id is set.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension record.</param>
    /// <returns>true if batch can be created; otherwise, false.</returns>
    protected boolean canCreateBatch(InventDim _inventDim)
    {
        return _inventDim.InventBatchId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if serial can be created, if the inventory dimension serial Id is set.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension record.</param>
    /// <returns>true if serial can be created; otherwise, false.</returns>
    protected boolean canCreateSerial(InventDim _inventDim)
    {
        return _inventDim.InventSerialId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor method for the class instances.
    /// </summary>
    /// <param name="_common">
    /// Common record to be used to construct instance.
    /// </param>
    /// <param name="_workCreateId">
    /// Work creation id to be used to construct instance.
    /// </param>
    /// <returns>
    /// The <c>WHSWorkCreatePurchLine</c> instance.
    /// </returns>
    static WHSWorkCreatePurchLine construct(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        WHSWorkCreatePurchLine  workCreatePurchLine;

        workCreatePurchLine = new WHSWorkCreatePurchLine(_common, _workCreateId);

        return workCreatePurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    public WHSLoadId parmLoadId(WHSLoadId _loadId = loadId)
    {
        loadId = _loadId;

        return loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSLoadLine parmLoadLine(WHSLoadLine _loadLine = receivingLoadLine)
    {
        if (!prmIsDefault(_loadLine))
        {
            receivingLoadLine = _loadLine;
        }

        return receivingLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveWMSLocationFromReceiptLocation</Name>
				<Source><![CDATA[
    protected WMSLocationId retrieveWMSLocationFromReceiptLocation(InventDim _inventDim)
    {
        return startLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the license plate must be included in inbound order line registration.
    /// </summary>
    /// <returns>true if the license plate must be included in inbound order line registration; otherwise, false.</returns>
    [Hookable(false)]
    internal boolean mustIncludeLicensePlate()
    {
        return (WMSLocation::find(startLocationId, inventLocationId).whsLocationIsLPControlled()
                || this.isWorkCreationAllowed());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>