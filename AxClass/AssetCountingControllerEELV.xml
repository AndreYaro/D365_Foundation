<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCountingControllerEELV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCountingControllerEELV</c> class is the controller for the <c>AssetCountingEELV</c> report.
/// </summary>
public class AssetCountingControllerEELV extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modifies the contract before the dialog is shown to the user.
    /// </summary>
    protected void prePromptModifyContract()
    {
        TransDate                 calculationDate;
        AssetCountingContractEELV contract;
        AssetBookTable            assetBookTable;
        Range                     bookRange;
        Query                     query;

        super();

        contract        = this.parmReportContract().parmRdpContract() as AssetCountingContractEELV;

        calculationDate = contract.parmCalculationDate();
        if (!calculationDate)
        {
            contract.parmCalculationDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        while select BookId from assetBookTable
            where assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
        {
            if (bookRange)
            {
                bookRange += ',';
            }
            bookRange += queryValue(assetBookTable.BookId);
        }

        query = this.getFirstQuery();
        if (query)
        {
            findOrCreateRange_W(query.dataSourceTable(tableNum(AssetBook)),
                fieldNum(AssetBook, BookId), bookRange);
            findOrCreateRange_W(query.dataSourceTable(tableNum(AssetBook)),
                fieldNum(AssetBook, Status), queryRange(AssetStatus::Open, AssetStatus::Closed));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        #ISOCountryRegionCodes

        AssetCountingContractEELV contract;
        Query                     query;
        QueryBuildDataSource      assetBookQuerySource;
        QueryBuildDataSource      assetTableQuerySource;
        QueryBuildRange           queryBuildRange;

        TransDate                 calculationDate;
        FreeText                  bookId;
        FreeText                  assetStatus;
        FreeText                  assetGroup;
        FreeText                  countryContext;

        int                       temp;

        super();

        contract        = this.parmReportContract().parmRdpContract() as AssetCountingContractEELV;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            countryContext = #isoLV;
        }
        else
        {
            countryContext = #isoEE;
        }
        query = this.getFirstQuery();

        calculationDate = contract.parmCalculationDate();
        if (calculationDate)
        {
            if (query)
            {
                findOrCreateRange_W(query.dataSourceTable(tableNum(AssetBook)),
                    fieldNum(AssetBook, AcquisitionDate), queryRange(dateNull(), calculationDate));
            }
        }

        assetBookQuerySource  = query.dataSourceName(tableStr(AssetBook));
        assetTableQuerySource = query.dataSourceName(tableStr(AssetTable));

        // Since the user can add a range on the same field multiple times in the SysQuery form
        // we need to loop through the ranges to concatenate all the values for the field ranges we
        // are interested in
        for (temp = 1; temp <= assetBookQuerySource.rangeCount(); temp++)
        {
            queryBuildRange = assetBookQuerySource.range(temp);
            if (queryBuildRange.field() == fieldNum(AssetBook, BookId))
            {
                if (bookId)
                {
                    bookId += ',';
                }
                bookId += queryBuildRange.value();
            }
            if (queryBuildRange.field() == fieldNum(AssetBook, Status))
            {
                if (assetStatus)
                {
                    assetStatus += ',';
                }
                assetStatus += queryBuildRange.value();
            }
        }

        for (temp = 1; temp <= assetTableQuerySource.rangeCount(); temp++)
        {
            queryBuildRange = assetTableQuerySource.range(temp);
            if (queryBuildRange.field() == fieldNum(AssetTable, AssetGroup))
            {
                if (assetGroup)
                {
                    assetGroup += ',';
                }
                assetGroup += queryBuildRange.value();
            }
        }

        contract.parmBookId(bookId);
        contract.parmAssetStatus(assetStatus);
        contract.parmAssetGroup(assetGroup);
        contract.parmCountryContext(countryContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        const str FeatureReference = 'EEU-00003';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        AssetCountingControllerEELV controller = new AssetCountingControllerEELV();
        controller.parmReportName(ssrsReportStr(AssetCountingEELV, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>