<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPayableTransactionDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// RDP class for the <c>VendPayableTransaction_CN</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(VendPayableTransactionContract_CN)),
    SRSReportQueryAttribute(queryStr(VendPayableTransaction_CN))
]
public class VendPayableTransactionDP_CN extends SRSReportDataProviderBase
{
    VendPayableTransactionTmp_CN tmpVendPayableTransactionVoucher_CN;
    AccountNum accountNum;

    #define.Dash('-')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBillNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bill number for particular Journal number.
    /// </summary>
    /// <param name="vendTransJournalNumber">
    /// Journal Number for a transaction.
    /// </param>
    /// <returns>
    /// Field <c>PaymId</c> from <c>LedgerJournalTrans</c> table.
    /// </returns>
    private PaymId getBillNumber(LedgerJournalId vendTransJournalNumber)
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstOnly PaymId from ledgerJournalTrans
            where ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                && ledgerJournalTrans.JournalNum == vendTransJournalNumber;

        return ledgerJournalTrans.PaymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the opening balance of a vendor account for particular period in particular currency.
    /// </summary>
    /// <param name="accountNumber">
    /// Account Number of the vendor.
    /// </param>
    /// <param name="currencyCode">
    /// Currency code of the transaction.
    /// </param>
    /// <param name="fromDate">
    /// Strting date of the period.
    /// </param>
    /// <returns>
    /// Opening balance of a vendor for particular period in particular currency.
    /// </returns>
    private AmountCur getOpeningBalance(AccountNum accountNumber, VendCurrencyCode currencyCode, FromDate fromDate)
    {
        VendTrans vendTransLocal;
        AmountCur openingAmountCur;

        select sum(AmountCur) from vendTransLocal
            where vendTransLocal.AccountNum == accountNumber
                && vendTransLocal.CurrencyCode == currencyCode
                && vendTransLocal.TransDate < fromDate ;

        openingAmountCur = vendTransLocal.AmountCur;
        return openingAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendPayableTransactionTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>TmpVendPayableTransaction_CN</c> Temp Table.
    /// </summary>
    /// <returns>
    /// The <c>TmpVendPayableTransaction_CN</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(VendPayableTransactionTmp_CN))
    ]
    public VendPayableTransactionTmp_CN getVendPayableTransactionTmp_CN()
    {
        return tmpVendPayableTransactionVoucher_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        VendPayableTransactionContract_CN   contract;
        LedgerFiscalPeriodNameContract_CN   ledgerFiscalPeriodNameContract_CN;
        Query query;
        QueryRun qr;

        // variables used for geeting table refrences from the query.
        VendTable                           vendTable;
        VendTrans                           vendTrans;
        GeneralJournalEntry_W               generalJournalEntryW;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherEntry;

        // variables used for getting table field values.
        VoucherJournal              voucher;
        LedgerTransType             transType;
        AmountCur                   amountCur;
        VendTransRefRecId           offsetRecId;
        VendPromissoryNoteStatus    pnStatus;
        CurrencyCode                lastCurrency;
        TransDate                   transDate;
        String255                   fromPeriodLabel;
        String255                   toPeriodLabel;
        AccountNum                  lastVendAccount;
        int                         years;
        int                         lastYear;
        AmountMST                   vendCurrencyOpeningBalance = 0;
        AmountMST                   payable = 0;
        AmountMST                   payment = 0;
        Boolean                     addFlag = false;
        NoYes                       isVoucherCNUsed;

        contract = this.parmDataContract() as VendPayableTransactionContract_CN;
        ledgerFiscalPeriodNameContract_CN = contract.parmPeriodContract() as LedgerFiscalPeriodNameContract_CN;

        fromPeriodLabel = ledgerFiscalPeriodNameContract_CN.parmFromPeriod();
        toPeriodLabel   = ledgerFiscalPeriodNameContract_CN.parmToPeriod();
        isVoucherCNUsed = LedgerParameters::find().ChineseVoucher_CN;

        query = this.parmQuery();
        query = VendPayableTransactionDP_CN::initQueryByDataContract(query, contract);
        qr = new QueryRun(query);
        while (qr.next())
        {
            vendTable               = qr.get(tableNum(VendTable));
            vendTrans               = qr.get(tablenum(VendTrans));
            subledgerVoucherEntry   = qr.get(tableNum(SubledgerVoucherGeneralJournalEntry));
            generalJournalEntryW    = qr.get(tableNum(GeneralJournalEntry_W));

            if (isVoucherCNUsed)
            {
                voucher = generalJournalEntryW.Voucher_CN;
            }
            else
            {
                voucher = vendTrans.Voucher;
            }

            transDate   = vendTrans.TransDate;
            transType   = vendTrans.TransType;
            offsetRecId = vendTrans.OffsetRecId;
            pnStatus    = vendTrans.PromissoryNoteStatus;
            amountCur   = vendTrans.AmountCur;

            switch (transType)
            {
                case LedgerTransType::Vend:
                case LedgerTransType::Purch:
                    payable = amountCur;
                    payment = 0;
                    addFlag = true;
                    break;
                case LedgerTransType::Payment:
                    payable = 0;
                    payment = amountCur;
                    addFlag = true;
                    break;
                case LedgerTransType::None:
                    if (amountCur < 0
                        && pnStatus == CustVendNegInstStatus::Invoiced) // invoice journal
                    {
                        payable = amountCur;
                        payment = 0;
                        addFlag = true;
                    }
                    else if (amountCur > 0
                        && pnStatus == CustVendNegInstStatus::Drawn
                        && this.searchPurchInvoiceRecId(offsetRecId)) // PNO
                    {
                        payable = 0;
                        payment = amountCur;
                        addFlag = true;
                    }
                    else
                    {
                        payable = 0;
                        payment = 0;
                        addFlag = false;
                    }
                    break;
                default:
                    if (amountCur < 0)
                    {
                        payable = amountCur;
                        payment = 0;
                        addFlag = true;
                    }
                    else if (amountCur > 0)
                    {
                        payable = 0;
                        payment = amountCur;
                        addFlag = true;
                    }
                    else
                    {
                        payable = 0;
                        payment = 0;
                        addFlag = false;
                    }
                    break;
            }

            if (addFlag)
            {
                years = DateTimeUtil::year(DateTimeUtil::newDateTime(transDate, 0));
                if (lastVendAccount != vendTable.AccountNum || lastCurrency != vendTrans.CurrencyCode || lastYear != years)
                {
                    vendCurrencyOpeningBalance = this.getOpeningBalance(vendTable.AccountNum, vendTrans.CurrencyCode, transDate);
                }
                else
                {
                    vendCurrencyOpeningBalance = 0;
                }

                tmpVendPayableTransactionVoucher_CN.Year = DateTimeUtil::year(DateTimeUtil::newDateTime(transDate,0));
                tmpVendPayableTransactionVoucher_CN.Month = DateTimeUtil::month(DateTimeUtil::newDateTime(transDate,0));
                tmpVendPayableTransactionVoucher_CN.Day = DateTimeUtil::day(DateTimeUtil::newDateTime(transDate,0));
                tmpVendPayableTransactionVoucher_CN.TransDate = transDate;
                tmpVendPayableTransactionVoucher_CN.Voucher = voucher;
                tmpVendPayableTransactionVoucher_CN.VendNum = vendTable.AccountNum;
                tmpVendPayableTransactionVoucher_CN.VendName = DirPartyTable::getName(vendTable.Party);
                tmpVendPayableTransactionVoucher_CN.Description = vendTrans.Txt;
                tmpVendPayableTransactionVoucher_CN.OpeningBalance = vendCurrencyOpeningBalance;

                if (transType  == LedgerTransType::Purch
                    || transType  == LedgerTransType::Vend
                    || (transType  == LedgerTransType::None
                        && amountCur < 0))
                {
                    tmpVendPayableTransactionVoucher_CN.BillType = "@SYS14204"; // @SYS14204: Invoice
                    tmpVendPayableTransactionVoucher_CN.BillNumber = vendTrans.Invoice;
                }
                else
                {
                    tmpVendPayableTransactionVoucher_CN.BillType = VendPaymModeTable::find(vendTrans.PaymMode).Name;
                    tmpVendPayableTransactionVoucher_CN.BillNumber = this.getBillNumber(vendTrans.JournalNum);
                }

                tmpVendPayableTransactionVoucher_CN.CurrencyType = vendTrans.CurrencyCode;
                tmpVendPayableTransactionVoucher_CN.PeriodPayable = payable;
                tmpVendPayableTransactionVoucher_CN.PeriodPayment = payment;
                tmpVendPayableTransactionVoucher_CN.PeriodLabel = fromPeriodLabel + #Dash + toPeriodLabel;
                tmpVendPayableTransactionVoucher_CN.insert();

                lastVendAccount = vendTable.AccountNum;
                lastCurrency = vendTrans.CurrencyCode;
                lastYear = tmpVendPayableTransactionVoucher_CN.Year;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchPurchInvoiceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the purchase invoice recid for a vendor in <c>VendTrans</c> table.
    /// </summary>
    /// <param name="purchInvoiceRecId">
    /// purchase invoice recid to be searched.
    /// </param>
    /// <returns>
    /// <c>true</c> if match found; else <c>false</c> .
    /// </returns>
    private boolean searchPurchInvoiceRecId(VendTransRefRecId purchInvoiceRecId)
    {
        VendTrans vendTransLocal;

        select firstonly * from vendTransLocal
            where vendTransLocal.AccountNum == accountNum
                && (vendTransLocal.TransType == LedgerTransType::Purch
                    || vendTransLocal.TransType == LedgerTransType::Vend)
                && (purchInvoiceRecId == vendTransLocal.RecId);

        if (vendTransLocal.RecId && vendTransLocal)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryByDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize query by data contract parameters
    /// </summary>
    /// <param name="_query">
    /// Primary query
    /// </param>
    /// <param name="_contract">
    /// Data contract
    /// </param>
    /// <returns>
    /// Return the query which filtered by data contract parameters.
    /// </returns>
    public static Query initQueryByDataContract(Query _query, VendPayableTransactionContract_CN _contract)
    {
        QueryBuildDataSource    qbdsVendTrans;
        FromDate                fromDate;
        ToDate                  toDate;
        FiscalCalendarPeriod    fiscalCalendarPeriod;

        if (_contract.parmPeriodContract().parmFromDate())
        {
            fromDate = _contract.parmPeriodContract().parmFromDate();
        }
        else
        {
            fiscalCalendarPeriod = LedgerFiscalCalendar::currentLedgePeriod_CN();
            fromDate = fiscalCalendarPeriod.StartDate;
        }
        if (_contract.parmPeriodContract().parmToDate())
        {
            toDate = _contract.parmPeriodContract().parmToDate();
        }
        else
        {
            if (fiscalCalendarPeriod.RecId == 0)
            {
                fiscalCalendarPeriod = LedgerFiscalCalendar::currentLedgePeriod_CN();
            }
            toDate = fiscalCalendarPeriod.EndDate;
        }

        qbdsVendTrans = _query.dataSourceTable(tableNum(VendTrans));
        SysQuery::findOrCreateRange(qbdsVendTrans, fieldNum(VendTrans, TransDate)).value(SysQuery::range(fromDate, toDate));
        qbdsVendTrans.addOrderByField(fieldNum(vendTrans, accountNum), SortOrder::Ascending);

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
