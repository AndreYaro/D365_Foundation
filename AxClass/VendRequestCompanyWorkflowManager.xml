<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestCompanyWorkflowManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendRequestCompanyWorkflowManager</c> class contains static helper methods for the company
/// vendor requests.
/// </summary>
[SysObsolete('Use VendVendorRequestNewVendorManager class instead.', false, 30\06\2020)]
public class VendRequestCompanyWorkflowManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addVendorRoles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the vendor roles to the contact party of the vendor request.
    /// </summary>
    /// <param name="_contactUser">
    /// The user for which to add roles.
    /// </param>
    private static void addVendorRoles(UserId _contactUser)
    {
        DirExternalRole     externalRole;
        SecurityUserRole    userRole;
        SecurityUserRole    vendorRole;

        while select Role from externalRole where externalRole.EntityType == UserExternalPartyEntityType::Vendor
            notexists join userRole where userRole.SecurityRole == externalRole.Role && userRole.User == _contactUser
        {
            vendorRole.clear();
            vendorRole.User = _contactUser;
            vendorRole.SecurityRole = externalRole.Role;
            vendorRole.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertProspectToVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the business relations record into a vendor record.
    /// </summary>
    /// <param name="_vendRequestCompany">
    /// The vendor request record.
    /// </param>
    /// <remarks>
    /// This method will also copy vendor information that is stored in the vendor request table and is not
    /// captured in the business relation table to the vendor table.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The number sequence for vendor accounts is not set.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The number sequence for vendor accounts cannot be set to manual.
    /// </exception>
    public static void convertProspectToVendor(VendRequestCompany _vendRequestCompany)
    {
        VendTable                       vendTable;
        VendStateTaxID                  vendStateTaxID;
        VendBankAccount                 vendBankAccount;
        ContactPerson                   contactPerson;
        UserExternalParty               vendExternalRelation;
        UserExternalParty               vendRequestExternalRelation;
        VendRequestProspectiveProfile   prospectiveProfile;
        VendRequestSignup               vendRequestSignup;
        DirOrganization                 dirOrganization;
        UserId                          contactUser;
        NumberSeq                       numberSeq;
        Num                             num;
        NoYes                           conversionSuccessful = NoYes::No;
        VendRequest                     vendRequest;
        int                             vendBankAccountInsertRetries = 5;
        int                             infoLogLinesNum;
        prospectiveProfile  = VendRequestProspectiveProfile::find(_vendRequestCompany.ProspectiveProfile);

        ttsbegin;
        vendTable.clear();
        vendTable.initValue();

        numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendAccount(), true, true);
        if (!numberSeq)
        {
            throw error("@SYS343008");
        }

        if (VendParameters::numRefVendAccount().numberSequenceTable().Manual)
        {
            throw error("@SYS343009");
        }

        num = numberSeq.num();
        numberSeq.used();
        vendTable.AccountNum        = num;

        if (vendTable.AccountNum)
        {
            conversionSuccessful = NoYes::Yes;
            vendTable.Party             = _vendRequestCompany.VendParty;
            vendTable.Currency          = prospectiveProfile.Currency;

            vendTable.VendGroup         = prospectiveProfile.VendGroup;
            vendTable.initFromVendGroup(VendGroup::find(prospectiveProfile.VendGroup));

            vendTable.CompanyIdSiret    = prospectiveProfile.CompanyIdSiret;
            vendTable.CompanyNAFCode    = prospectiveProfile.CompanyNAFCode;

            vendTable.SmallBusiness     = prospectiveProfile.SmallBusiness;
            vendTable.PaymTermId        = prospectiveProfile.PaymTerm;
            vendTable.LineOfBusinessId  = prospectiveProfile.LineOfBusinessId;
            vendTable.FiscalCode        = prospectiveProfile.FiscalCode;
            vendTable.vatNum            = prospectiveProfile.vatNumber;
            vendTable.Tax1099RegNum     = prospectiveProfile.Federal1099Number;
            vendTable.Tax1099NameChoice = prospectiveProfile.Tax1099NameChoice;
            vendTable.dba               = prospectiveProfile.dba;
            vendTable.ForeignEntityIndicator    = prospectiveProfile.ForeignOwnership;
            vendTable.OrgId                     = prospectiveProfile.OrganizationIdentifier;

            unchecked(Uncheck::TableSecurityPermission)
            {
                vendTable.MinorityOwned     = prospectiveProfile.MinorityOwned;
                vendTable.FemaleOwned       = prospectiveProfile.FemaleOwned;
                vendTable.LocallyOwned      = prospectiveProfile.LocallyOwned;
                vendTable.BirthPlace        = prospectiveProfile.BirthPlace;
            }

            // update organization number
            dirOrganization = DirOrganization::find(_vendRequestCompany.VendParty, true);
            if (dirOrganization.RecId)
            {
                dirOrganization.OrgNumber = prospectiveProfile.OrganizationNumber;
                dirOrganization.update();
            }

            // other vend table fields
            vendTable.ResidenceForeignCountryRegionId = prospectiveProfile.ResidenceForeignCountryRegionId;

            vendTable.insert();

            //Copy attachments from the request to the vendor record.
            Docu::copy(_vendRequestCompany, vendTable);
            vendRequest = VendRequest::find(_vendRequestCompany.RecId);
            Docu::copy(vendRequest, vendTable);
            Docu::copy(prospectiveProfile, vendTable);
        }

        if (conversionSuccessful == NoYes::Yes)
        {
            vendTable = VendTable::findByPartyRecId(_vendRequestCompany.VendParty, true);
            _vendRequestCompany.AccountNum = vendTable.AccountNum;
            _vendRequestCompany.doUpdate();

            // get unsolicited vendor details if request created from unsolicited vendor
            if (_vendRequestCompany.SignUp != 0)
            {
                select firstonly RecId, NumberOfEmployees from vendRequestSignup
                    where vendRequestSignup.RecId == _vendRequestCompany.SignUp;

                dirOrganization = DirOrganization::find(vendTable.Party, true);
                dirOrganization.NumberOfEmployees = vendRequestSignup.NumberOfEmployees;
                dirOrganization.update();
            }

            if (_vendRequestCompany.AccountNum != '')
            {
                // vend bank account relation
                vendBankAccount.VendAccount     = _vendRequestCompany.AccountNum;
                vendBankAccount.RegistrationNum = prospectiveProfile.RoutingNumber;
                vendBankAccount.BankCodeType    = prospectiveProfile.RoutingNumberType;
                vendBankAccount.BankCIN         = prospectiveProfile.BankCIN;
                vendBankAccount.swiftNo         = prospectiveProfile.swiftNumber;
                vendBankAccount.BankAccountType = prospectiveProfile.BankAccountTypeUS;
                vendBankAccount.Name            = prospectiveProfile.BankName;
                vendBankAccount.Location        = prospectiveProfile.BankLocation;
                vendBankAccount.ContactPerson   = prospectiveProfile.BankContactPerson;

                unchecked(Uncheck::TableSecurityPermission)
                {
                    vendBankAccount.BankIBAN        = prospectiveProfile.BankIBAN;
                    vendBankAccount.AccountNum      = prospectiveProfile.BankAccountNumber;
                }

                infoLogLinesNum = infologLine();
                try
                {
                    vendBankAccountInsertRetries--;
                    vendBankAccount.AccountID       = VendBankAccount::generateAccountId();
                    vendBankAccount.insert();
                }
                catch(Exception::DuplicateKeyException)
                {
                    if (xSession::lastDuplicateKeyViolatingTable() == tablenum(vendBankAccount) && vendBankAccountInsertRetries > 0)
                    {
                        infolog.clear(infoLogLinesNum);
                        retry;
                    }
                    else
                    {
                        throw Exception::DuplicateKeyExceptionNotRecovered;
                    }
                }
                // vend tax state id table relation
                vendStateTaxID.VendAccount  = vendTable.AccountNum;
                vendStateTaxID.StateId      = prospectiveProfile.TaxState;
                vendStateTaxID.StateTaxID   = prospectiveProfile.TaxStateIdentifier;
                vendStateTaxID.TaxIDType    = prospectiveProfile.TaxStateIdentifierType;
                vendStateTaxID.insert();

                delete_from vendRequestExternalRelation
                    where   vendRequestExternalRelation.User == DirPersonUser::findParty(_vendRequestCompany.ContactParty).User &&
                            vendRequestExternalRelation.ExternalEntityType == UserExternalPartyEntityType::ProspectiveVendor;

                // set user to vendor external relation
                vendExternalRelation.clear();
                vendExternalRelation.initValue();
                vendExternalRelation.User               = DirPersonUser::findParty(_vendRequestCompany.ContactParty).User;
                vendExternalRelation.ExternalEntityType = UserExternalPartyEntityType::Vendor;
                vendExternalRelation.ExternalParty      = _vendRequestCompany.VendParty;
                vendExternalRelation.insert();

                contactUser = DirPersonUser::findParty(_vendRequestCompany.ContactParty).User;

                VendRequestCompanyWorkflowManager::removeProspectiveVendorRoles(contactUser);
                VendRequestCompanyWorkflowManager::addVendorRoles(contactUser);

                // create vendor contact person
                contactPerson.clear();
                contactPerson.initValue();
                contactPerson.Party = _vendRequestCompany.ContactParty;
                contactPerson.Title = _vendRequestCompany.ContactJobTitle;
                contactPerson.initFromVendTable(vendTable);
                contactPerson.insert();

                VendRequest::addCategoriesFromRequest(_vendRequestCompany.RecId);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the workflow configuration record for a new vendor user, new vendor add, new vendor request,
    /// new vendor category request, or new vendor category add workflow template.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the vendor request.
    /// </param>
    /// <returns>
    /// The workflow configuration record for the template to enable.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static WorkflowVersionTable getWorkflowConfiguration(RecId _recId)
    {
        #VendRequest

        VendRequest                     vendRequest;
        VendRequestCompany              vendRequestCompany;
        VendRequestCategoryExtension    vendRequestCategoryExtension;

        WorkflowVersionTable  workflowConfigurationTable;

        vendRequest = VendRequest::find(_recId);

        if (vendRequest is VendRequestCategoryExtension)
        {
            select  OriginatedByType, CategoryExtensionStatus
            from    vendRequestCategoryExtension
            where   vendRequestCategoryExtension.RecId == _recId;

            if  (vendRequestCategoryExtension.CategoryExtensionStatus <  VendRequestCategoryStatus::CategoryRequestReady)
            {
                // New vendor category request
                workflowConfigurationTable = Workflow::findWorkflowConfigToActivateForType(#VendRequestCategoryNCJTemplate, _recId, tableNum(VendRequest));
            }
            else
            {
                // New vendor category add
                workflowConfigurationTable = Workflow::findWorkflowConfigToActivateForType(#VendRequestCategoryNCATemplate, _recId, tableNum(VendRequest));
            }
        }
        else
        {
            vendRequestCompany = VendRequestCompany::findRecId(vendRequest.RecId);
            if (vendRequestCompany.VendRequestCompanyType == VendRequestCompanyType::NewVendorCompanyProfile)
            {
                // New vendor add
                workflowConfigurationTable = Workflow::findWorkflowConfigToActivateForType(#VendRequestNVATemplate, _recId, tableNum(VendRequest));
            }
            else if (vendRequestCompany.VendRequestCompanyType == VendRequestCompanyType::NewVendorCompanyRequest)
            {
                // New vendor request
                workflowConfigurationTable = Workflow::findWorkflowConfigToActivateForType(#VendRequestNVJTemplate, _recId, tableNum(VendRequest));
            }
        }
        return workflowConfigurationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendRequestNumberSequenceSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the VendRequest number sequence has been setup.
    /// </summary>
    /// <returns>
    /// true if the number sequence is set up; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isVendRequestNumberSequenceSetup()
    {
        boolean isSetup = false;

        if (!VendRequestManagementParameters::numRefVendRequestNumber().numberSequenceTable().NumberSequence)
        {
            isSetup = checkFailed("@SYS136034");
        }
        else
        {
            isSetup = true;
        }

        return isSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProspectiveVendorRoles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the prospective vendor roles.
    /// </summary>
    /// <param name="_contactUser">
    /// The user to for which to remove the roles.
    /// </param>
    private static void removeProspectiveVendorRoles(UserId _contactUser)
    {
        SecurityUserRole    prospectiveVendorUserRole;
        DirExternalRole     prospectiveVendorExternalRole;

        delete_from prospectiveVendorUserRole
        exists join prospectiveVendorExternalRole
        where       prospectiveVendorUserRole.User == _contactUser &&
                    prospectiveVendorUserRole.SecurityRole == prospectiveVendorExternalRole.Role &&
                    prospectiveVendorExternalRole.EntityType == UserExternalPartyEntityType::ProspectiveVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEmailToEmployeeRequestor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends an e-mail to the employee who requested a new vendor.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the vendor request record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void sendEmailToEmployeeRequestor(RecId _recId)
    {
        DirPartyRecId           senderPerson;
        LogisticsElectronicAddress electronicAddress;
        SysEmailParameters      parameters;

        str             senderEmail;
        str             recipientEmail;
        str             messageText;
        VendRequestCompany vendRequestCompany;
        InteropPermission interopPermission;

        parameters = SysEmailParameters::find();

        if (parameters.smtpRelayServerName == '')
        {
            return;
        }

        //initialize mailer class
        interopPermission = new InteropPermission(InteropKind::ComInterop);
        interopPermission.assert();

        vendRequestCompany = VendRequestCompany::findRecId(_recId);
        senderPerson    = DirPersonUser::current().PersonParty;
        electronicAddress  = DirParty::primaryElectronicAddress(
                            senderPerson,
                            LogisticsElectronicAddressMethodType::Email);

        recipientEmail  = HcmWorker::find(vendRequestCompany.SponsoredBy).email();
        senderEmail     = electronicAddress ? electronicAddress.Locator : '';

        if ((recipientEmail != '') && (senderEmail != ''))
        {
            // The vendor <vendor name> has been approved and has been added to the vendor master.
            messageText = strFmt("@SYS134393", DirPartyTable::findRec(vendRequestCompany.VendParty).Name);

            // Request
            var messageBuilder = new SysMailerMessageBuilder();
            messageBuilder.setFrom(senderEmail)
                          .addTo(recipientEmail)
                          .setSubject("@SYS130372")
                          .setBody(messageText);

            SysMailerFactory::sendNonInteractive(messageBuilder.getMessage());
        }
        else
        {
                // Could not send email back to sender, recipient or sender email addresses are empty
            info("@SYS134424");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRejectedProspectiveVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the relation to the user for the prospective vendor when the vendor is rejected.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the vendor request record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateRejectedProspectiveVendor(RecId _recId)
    {
        // remove user to contact party relation for Prospective Vendor
        UserExternalParty  externalParty;
        VendRequestCompany      vendRequestCompany;

        vendRequestCompany = VendRequestCompany::findRecId(_recId);

        delete_from externalParty
        where       externalParty.User == DirPersonUser::findParty(vendRequestCompany.ContactParty).User
                    && externalParty.ExternalEntityType == UserExternalPartyEntityType::ProspectiveVendor
                    && externalParty.ExternalParty == vendRequestCompany.VendParty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>