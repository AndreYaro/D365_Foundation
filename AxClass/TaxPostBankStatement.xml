<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPostBankStatement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax post bank statement class.
/// </summary>
class TaxPostBankStatement extends TaxPost
{
    BankStatementTaxDocument statementTaxDocument;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the initialization class as an object.
    /// </summary>
    /// <returns>
    /// The initialization class.
    /// </returns>
    /// <remarks>
    /// The initialization class is of a different type for each subclass.
    /// </remarks>
    protected Object getInitializationClass()
    {
        return statementTaxDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the original document ID.
    /// </summary>
    /// <returns>
    ///    The original document ID of the transaction header.
    /// </returns>
    /// <remarks>
    ///    The parent of tax lines sometimes changes during posting. This method will return the original
    ///    document ID.
    /// </remarks>
    protected RefRecId getOriginalHeadingRecId()
    {
        return origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the original heading line table ID.
    /// </summary>
    /// <returns>
    /// The original heading table ID of the transaction line.
    /// </returns>
    /// <remarks>
    /// This method will return the original transaction line table ID.
    /// </remarks>
    protected RefTableId getOriginalHeadingTableId()
    {
        return origHeadingTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(NoYes _post, Object _initializationClass, TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        super();

        post = _post;
        taxWorkTrans = _tmpTaxWorkTrans;

        taxModuleType = TaxModuleType::BankAccountReconcile;

        if (_initializationClass is BankStatementLinePostTaxDocument)
        {
            BankStatementLinePostTaxDocument statementLinePostTableTaxDocument = _initializationClass as BankStatementLinePostTaxDocument;
            statementTaxDocument = statementLinePostTableTaxDocument;
            BankStatementLinePostTable statementLinePostTable = statementLinePostTableTaxDocument.parmLinePostTable();
            headingTableId = statementLinePostTable.TableId;
            headingRecId = statementLinePostTable.RecId;
            origHeadingTableId = statementLinePostTable.TableId;
            origHeadingRecId = statementLinePostTable.RecId;

            if (!headingTableId || !headingRecId)
            {
                throw error("@SYS18447");
            }
            else
            {
                if (! this.checkParameters())
                {
                    throw error("@SYS18447");
                }

                taxDate = statementTaxDocument.parmStatement().getAccountingDate();
                sourceCurrencyCode = statementTaxDocument.parmStatement().getCurrencyCode();
            }
        }
        else if (_initializationClass is BankStatementTaxDocument)
        {
            statementTaxDocument = _initializationClass as BankStatementTaxDocument;
            headingTableId = statementTaxDocument.parmStatement().TableId;
            headingRecId = statementTaxDocument.parmStatement().RecId;
            origHeadingTableId = statementTaxDocument.parmStatement().TableId;
            origHeadingRecId = statementTaxDocument.parmStatement().RecId;

            if (!headingTableId || !headingRecId)
            {
                throw error("@SYS18447");
            }
            else
            {
                if (! this.checkParameters())
                {
                    throw error("@SYS18447");
                }

                taxDate = statementTaxDocument.parmStatement().getAccountingDate();
                sourceCurrencyCode = statementTaxDocument.parmStatement().getCurrencyCode();
            }
        }
        else
        {
            throw error("@SYS95118");
        }

        triangulation = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the transaction line that is currently being posted.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line being posted.
    /// </returns>
    /// <remarks>
    /// This method is overridden by derived classes.
    /// </remarks>
    public RecId sourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    /// This method is overridden by derived classes.
    /// </remarks>
    public TableId sourceTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost = curext())
    {
        TaxAmount taxAmount;

        this.initLedgerPosting(_ledgerPostingController);

        if (post)
        {
            this.saveAndPost(_ledgerPostingController, _companyToPost);

            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        else
        {
            taxAmount = this.totalTaxAmount();
        }
        return taxAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>