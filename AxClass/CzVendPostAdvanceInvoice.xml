<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzVendPostAdvanceInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CzVendPostAdvanceInvoice</c> class is responsible for posting vendor advance invoice for Czech republic.
/// </summary>
final class CzVendPostAdvanceInvoice
{
    private const str LocalizationFeatureReference = 'EEU-00045';
    CzVendAdvanceInvoiceTable invoiceTable;

    boolean update;
    boolean isPostingOK;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    private NumberSeq allocateNumAndVoucher()
    {
        RefRecId     invoiceId;
        RefRecId     scopeId = NumberSeqScopeFactory::createDefaultScope().getId();

        if (invoiceTable.NumberSequenceGroup)
        {
            invoiceId = NumberSequenceGroupRef::findNaturalKey(
                                                        NumberSequenceDatatype::find(VendParameters::numRefVendAdvanceInvoiceId_CZ().NumberSequenceDatatype).RecId,
                                                        scopeId,
                                                        invoiceTable.NumberSequenceGroup).NumberSequenceId;

            if (! invoiceId)
            {
                invoiceId = VendParameters::numRefVendAdvanceInvoiceId_CZ().NumberSequenceId;
            }

            return NumberSeq::newGetNumFromId(invoiceId);
        }
        else
        {
            return NumberSeq::newGetNum(VendParameters::numRefVendAdvanceInvoiceId_CZ());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CzVendAdvanceInvoiceTable _invoiceTable)
    {
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
        update       = true;
        invoiceTable = _invoiceTable;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        NumberSeq numberSeq;

        Counter   infoCounter = infolog.num();

        isPostingOK = false;

        try
        {
            ttsbegin;

            invoiceTable = CzVendAdvanceInvoiceTable::findRecId(invoiceTable.RecId,
                                                                update);
            invoiceTable.calcInvoiceAmount();

            if (! this.validate(invoiceTable.InvoiceAmount))
            {
                throw error("@SYS25904");
            }

            if (! invoiceTable.VendInvoiceId)
            {
                throw error(strfmt("@SYS26332",
                                   new DictField(tablenum(CzVendAdvanceInvoiceTable),
                                                 fieldnum(CzVendAdvanceInvoiceTable, VendInvoiceId)).label()));
            }

            numberSeq = this.allocateNumAndVoucher();

            invoiceTable.InvoiceId = numberSeq.num();

            invoiceTable.calcDue();

            invoiceTable.Posted    = NoYes::Yes;
            invoiceTable.Log       = "";
            invoiceTable.update();

            info(strfmt("@GLS108256", invoiceTable.InvoiceId));

            ttscommit;

            isPostingOK = true;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::Error)
        {
            ttsbegin;

            invoiceTable     = CzVendAdvanceInvoiceTable::findRecId(invoiceTable.RecId,
                                                                    update);
            invoiceTable.Log = Info::infoCon2Str(infolog.copy(infoCounter + 1, infolog.num()));
            invoiceTable.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate(AmountCur _invoiceAmount)
    {
        boolean   ok = true;
        VendTable vendTable;
        CzVendAdvanceInvoiceLine invoiceLine;

        if (! invoiceTable)
        {
            throw error(strfmt("@SYS26860"));
        }
        if (invoiceTable.Posted)
        {
            ok = checkFailed(strfmt("@GLS108255"));
        }
        if (! VendTable::exist(invoiceTable.OrderAccount))
        {
            ok = checkFailed(strfmt(VendTable::txtNotExist(), invoiceTable.InvoiceAccount));
        }
        vendTable = invoiceTable.vendTable_InvoiceAccount();

        if (! vendTable)
        {
            ok = checkFailed(strfmt(VendTable::txtNotExist(), invoiceTable.InvoiceAccount));
        }
        if (ok)
        {
            if (! vendTable.checkAccountBlocked(_invoiceAmount))
            {
                ok = false;
            }
        }

        select count(RecId)
        from invoiceLine
            where invoiceLine.ParentRecId == invoiceTable.RecId;

        if (! invoiceLine.RecId)
            ok = checkFailed("@SYS69823");

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CzVendAdvanceInvoiceTable invoiceTable = _args.record();
        Object                    invoiceTable_ds;

        if (FormDataUtil::isFormDataSource(invoiceTable))
        {
            invoiceTable_ds = FormDataUtil::getFormDataSource(invoiceTable);
        }

        CzVendPostAdvanceInvoice::runOnServer(invoiceTable);

        if (invoiceTable && invoiceTable_ds)
        {
            invoiceTable_ds.reread();
            invoiceTable_ds.refresh();
            invoiceTable_ds.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a vendor advance invoice.
    /// </summary>
    /// <param name="_invoiceTable">
    /// The <c>CzVendAdvanceInvoiceTable</c> invoice to post.
    /// </param>
    public static void runOnServer(CzVendAdvanceInvoiceTable _invoiceTable)
    {
        new CzVendPostAdvanceInvoice(_invoiceTable).run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>