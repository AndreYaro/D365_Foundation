<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSIEERDataProvider_SE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>LedgerSIEERDataProvider_SE</c> retrieves data for SIE export.
/// </summary>
class LedgerSIEERDataProvider_SE
{
    LedgerSIEFinDimValueTmp_SE ledgerSIEFinDimValueTmp_SE;
    LedgerTrialBalanceTmp ledgerTrialBalanceTmp;
    LedgerSIEPeriodBudgetTmp_SE ledgerSIEPeriodBudgetTmp_SE;

    LedgerSIEExportParametersHelper_SE reportingParamters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new() {}

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerSIEFinDimValueTmp_SE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>LedgerSIEFinDimValueTmp_SE</c> buffer.
    /// </summary>
    /// <returns><c>LedgerSIEFinDimValueTmp_SE</c> buffer</returns>
    public LedgerSIEFinDimValueTmp_SE getLedgerSIEFinDimValueTmp_SE()
    {
        select firstonly ledgerSIEFinDimValueTmp_SE;
        return ledgerSIEFinDimValueTmp_SE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTrialBalanceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>LedgerTrialBalanceTmp</c> buffer.
    /// </summary>
    /// <returns><c>LedgerTrialBalanceTmp</c> buffer</returns>
    public LedgerTrialBalanceTmp getLedgerTrialBalanceTmp()
    {
        select firstonly ledgerTrialBalanceTmp;
        return ledgerTrialBalanceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerSIEPeriodBudgetTmp_SE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>LedgerSIEPeriodBudgetTmp_SE</c> buffer.
    /// </summary>
    /// <returns><c>LedgerSIEPeriodBudgetTmp_SE</c> buffer</returns>
    public LedgerSIEPeriodBudgetTmp_SE getLedgerSIEPeriodBudgetTmp_SE()
    {
        select firstonly ledgerSIEPeriodBudgetTmp_SE;
        return ledgerSIEPeriodBudgetTmp_SE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate temp tables with data for export.
    /// </summary>
    public void populateData()
    {
        this.insertDimensionAndValues();
        this.insertPeriodBalances();
        this.insertBudgetBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert budget data balance data.
    /// </summary>
    protected void insertBudgetBalance()
    {
        RecId fiscalCalendarRecId =
            FiscalCalendar::find(Ledger::fiscalCalendar(CompanyInfo::current())).RecId;

        FiscalCalendarYear currentFiscalYear =
            reportingParamters.getCurrentFiscalYear();

        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionHeader budgetTransactionHeader;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalPeriodEnd fiscalPeriodEnd;
        DimensionAttributeValueCombination  dimAttrValueCombo;

        insert_recordset ledgerSIEPeriodBudgetTmp_SE
            (AccountingCurrencyAmount, FiscalPeriodEnd, MainAccountId)
            select AccountingCurrencyAmount from budgetTransactionLine
                join budgetTransactionHeader
                    where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader
                        && budgetTransactionHeader.BudgetModelId == reportingParamters.parmBudgetModelId()
                        && budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Completed
                        && budgetTransactionHeader.Date >= currentFiscalYear.StartDate
                        && budgetTransactionHeader.Date <= currentFiscalYear.EndDate
                join EndDate from fiscalCalendarPeriod
                    where fiscalCalendarPeriod.FiscalCalendar == fiscalCalendarRecId
                        && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
                        && fiscalCalendarPeriod.StartDate <= budgetTransactionLine.Date
                        && fiscalCalendarPeriod.EndDate >= budgetTransactionLine.Date
                join MainAccountValue from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == budgetTransactionLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPeriodBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert period balance data.
    /// </summary>
    protected void insertPeriodBalances()
    {
        FiscalCalendarYear currentFiscalYear =
            reportingParamters.getCurrentFiscalYear();

        if (currentFiscalYear)
        {
            ledgerTrialBalanceTmp = this.insertBalance(
                currentFiscalYear.StartDate,
                currentFiscalYear.EndDate,
                FiscalPeriodType::Closing);

            FiscalCalendarPeriod fiscalCalendarPeriod;

            while select fiscalCalendarPeriod
                where fiscalCalendarPeriod.FiscalCalendarYear == currentFiscalYear.RecId
                && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
                && fiscalCalendarPeriod.EndDate <= reportingParamters.parmReportingDate()
            {
                LedgerTrialBalanceTmp periodBalanceTmp;

                periodBalanceTmp = this.insertBalance(
                    fiscalCalendarPeriod.StartDate,
                    fiscalCalendarPeriod.EndDate,
                    FiscalPeriodType::Operating);

                insert_recordset ledgerTrialBalanceTmp (EndingBalance, OpeningBalance, PrimaryFocus, MainAccountType_SE, FiscalPeriodType_SE, FiscalPeriodEnd_SE)
                select EndingBalance, OpeningBalance, PrimaryFocus, MainAccountType_SE, FiscalPeriodType_SE, FiscalPeriodEnd_SE from periodBalanceTmp;

                periodBalanceTmp.clear();
            }
        }

        LedgerTrialBalanceTmp previousYearBalanceTmp;
        FiscalCalendarYear previousFiscalYear =
            reportingParamters.getPreviousFiscalYear();

        if (previousFiscalYear)
        {
            previousYearBalanceTmp = this.insertBalance(
                previousFiscalYear.StartDate,
                previousFiscalYear.EndDate,
                FiscalPeriodType::Closing);

            insert_recordset ledgerTrialBalanceTmp (EndingBalance, OpeningBalance, PrimaryFocus, MainAccountType_SE, FiscalPeriodType_SE, FiscalPeriodEnd_SE)
            select EndingBalance, OpeningBalance, PrimaryFocus, MainAccountType_SE, FiscalPeriodType_SE, FiscalPeriodEnd_SE from previousYearBalanceTmp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert balance for the given time period.
    /// </summary>
    /// <param name = "_fiscalYearStartDate">Start of the fiscal year</param>
    /// <param name = "_fiscalPeriodEnd">End date of given period</param>
    /// <param name = "_periodType">Fiscal period type</param>
    /// <returns>Temp table containing balance between fiscal year start and period end</returns>
    protected LedgerTrialBalanceTmp insertBalance(
        FiscalYearStart _fiscalYearStartDate,
        FiscalPeriodEnd _fiscalPeriodEnd,
        FiscalPeriodType _periodType)
    {
        List postingLayers = new List(Types::Enum);

        if(reportingParamters.parmPostingLayer() == null)
        {
            postingLayers.addEnd(currentOperationsTax::Current);
        }
        else
        {
            postingLayers = reportingParamters.parmPostingLayer();
        }

        DimensionHierarchy dimHier = DimensionHierarchy::getMainAccountFocus();
        LedgerTrialBalanceListPageBalanceParms balanceParameters
            = LedgerTrialBalanceListPageBalanceParms::construct();
        balanceParameters.parmStartDate(_fiscalYearStartDate);
        balanceParameters.parmEndDate(_fiscalPeriodEnd);
        balanceParameters.parmPostingLayers(postingLayers);

        // Need to have separate buffer since the method below will clear the buffer.
        LedgerTrialBalanceTmp LedgerTrialBalanceTmpLocal;        
        LedgerTrialBalanceTmp::calculateBalances_V2(
                LedgerTrialBalanceTmpLocal,
                dimHier.Name,
                balanceParameters.getStartDate(),
                balanceParameters.getEndDate(),
                balanceParameters.getIncludeOpeningPeriods(),
                balanceParameters.getIncludeClosingAdjustments(),
                balanceParameters.getIncludeClosingTransactions(),
                balanceParameters.getPostingLayers(),
                false,
                false);

        MainAccount mainAccount;

        update_recordset LedgerTrialBalanceTmpLocal
            setting FiscalPeriodType_SE = _periodType, MainAccountType_SE = mainAccount.Type, FiscalPeriodEnd_SE = _fiscalPeriodEnd
            join mainAccount
            where mainAccount.MainAccountId == LedgerTrialBalanceTmpLocal.PrimaryFocus
            && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();

        return LedgerTrialBalanceTmpLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionAndValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert dimensions and their values.
    /// </summary>
    protected void insertDimensionAndValues()
    {
        LedgerRecId ledgerId = Ledger::current();
        date startDate = reportingParamters.getCurrentFiscalYear().StartDate;
        date reportingDate = reportingParamters.parmReportingDate();
        
        DimensionAttributeSetItem dimensionAttributeSetItem;
        LedgerSIEGeneralJournalEntryDimensionsView generalJournalEntryDimensionsView;
        
        insert_recordset ledgerSIEFinDimValueTmp_SE
            (DimensionAttribute, DimensionAttributeValue, Value, DimName)
            select DimensionAttribute, DimensionAttributeValue, DimValue, DimName
                from generalJournalEntryDimensionsView
                group by DimensionAttribute, DimensionAttributeValue, DimValue, DimName
                where generalJournalEntryDimensionsView.Ledger == ledgerId
                    && generalJournalEntryDimensionsView.AccountingDate >= startDate
                    && generalJournalEntryDimensionsView.AccountingDate <= reportingDate
                    && (generalJournalEntryDimensionsView.DimensionAttributeType == DimensionAttributeType::CustomList
                        || generalJournalEntryDimensionsView.DimensionAttributeType == DimensionAttributeType::ExistingList)
                join dimensionAttributeSetItem
                    where dimensionAttributeSetItem.DimensionAttributeSet == DimensionCache::getDimensionAttributeSetForLedger()
                        && dimensionAttributeSetItem.DimensionAttribute == generalJournalEntryDimensionsView.DimensionAttribute;

        this.populateDimensionDescription();
        this.populateAtributeNumbers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionDescription</Name>
				<Source><![CDATA[
    private void populateDimensionDescription()
    {
        List dimensionAttributes = this.getDimensionAttributesList();
        ListEnumerator dimensionAttributesEnumerator = dimensionAttributes.getEnumerator();

        while(dimensionAttributesEnumerator.moveNext())
        {
            RefRecId dimensionAttributeRecId = dimensionAttributesEnumerator.current();
            this.updateDescriptionForAttribute(dimensionAttributeRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributesList</Name>
				<Source><![CDATA[
    private List getDimensionAttributesList()
    {
        List dimensionAttributes = new List(Types::Int64);

        while select DimensionAttribute
            from ledgerSIEFinDimValueTmp_SE
            group by DimensionAttribute
        {
            dimensionAttributes.addEnd(ledgerSIEFinDimValueTmp_SE.DimensionAttribute);
        }

        return dimensionAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDescriptionForAttribute</Name>
				<Source><![CDATA[
    private void updateDescriptionForAttribute(RefRecId _dimensionAttributeRecId)
    {
        DimensionAttribute dimensionAttribute = DimensionAttribute::find(_dimensionAttributeRecId);

        DictTable dictTable = new DictTable(dimensionAttribute.BackingEntityType);
        Common common = dictTable.makeRecord();

        DimensionAttributeValue dimensionAttributeValue;

        update_recordset ledgerSIEFinDimValueTmp_SE
            setting Description = common.(dimensionAttribute.NameAttribute)
            join ledgerSIEFinDimValueTmp_SE
                where ledgerSIEFinDimValueTmp_SE.DimensionAttribute == _dimensionAttributeRecId
            join dimensionAttributeValue
                where dimensionAttributeValue.RecId == ledgerSIEFinDimValueTmp_SE.DimensionAttributeValue
            join common
                where common.RecId == dimensionAttributeValue.EntityInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAtributeNumbers</Name>
				<Source><![CDATA[
    private void populateAtributeNumbers()
    {
        str sqlStatement = strfmt(@"
            ;WITH CTE AS (
                SELECT DIMNUMBER, DENSE_RANK() OVER(ORDER BY DIMENSIONATTRIBUTE) AS NEW_DIMNUMBER
                FROM %1)

            UPDATE CTE
                SET DIMNUMBER = NEW_DIMNUMBER;",
            ledgerSIEFinDimValueTmp_SE.getPhysicalTableName());

        this.executeSQL(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQL</Name>
				<Source><![CDATA[
    private VOID executeSQL(str _sqlStatement)
    {
        Connection sessionConn = new Connection();

        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(_sqlStatement).assert();
        statement.executeUpdateWithParameters(_sqlStatement, SqlParams::create());

        CodeAccessPermission::revertAssert();

        statement.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingParamters</Name>
				<Source><![CDATA[
    public LedgerSIEExportParametersHelper_SE parmReportingParamters(
        LedgerSIEExportParametersHelper_SE _reportingParamters = reportingParamters)
    {
        reportingParamters = _reportingParamters;
        return reportingParamters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>LedgerSIEERDataProvider_SE</c>.
    /// </summary>
    /// <param name = "_reportingParameters"><c>LedgerSIEExportParametersHelper_SE</c> instance filled with values</param>
    /// <returns>A new instance of <c>LedgerSIEERDataProvider_SE</c></returns>
    public static LedgerSIEERDataProvider_SE construct(LedgerSIEExportParametersHelper_SE _reportingParameters)
    {
        LedgerSIEERDataProvider_SE instance = new LedgerSIEERDataProvider_SE();
        instance.parmReportingParamters(_reportingParameters);
        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>