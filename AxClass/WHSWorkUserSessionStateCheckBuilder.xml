<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserSessionStateCheckBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkUserSessionStateCheckBuilder</c> class builds instances of <c>WHSWorkUserSessionStateCheck</c> EDT.
/// </summary>
class WHSWorkUserSessionStateCheckBuilder
{
    System.Collections.ArrayList stateList = new System.Collections.ArrayList();
    #WHSRF
    #WHSWorkExecuteControlElements
    private int version = WHSWorkUserSessionStateCheckBuilderVersionContext::currentVersion();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {                       
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWorkUserSessionStateCheckBuilder construct()
    {
        return new WHSWorkUserSessionStateCheckBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendControl</Name>
				<Source><![CDATA[
    private void appendControl(
            str _ctrlType,
            str _name,
            str _label,
            str _newLine,
            str _data,
            str _type,
            str _length,
            str _error,
            str _defaultButton,
            str _enabled,
            str _selected,
            str _color)
    {
        stateList.Add(_ctrlType);
        stateList.Add(_name);
        stateList.Add(_label);
        if (version == 0)
        {
            stateList.Add(_newLine);
        }

        // At the DATA offset, we allow any data change if control is writable
        if (_enabled != '1')
        {
            // When the combo box control is used,
            // response always contains the list of available options,
            // request always contains the user selection.
            // For read-only combo box the only allowed response value is the initial selection
            // which is stored in "_selected" field.
            if (_ctrlType == #RFCombobox)
            {
                stateList.Add(_selected);
            }
            // For other read-only control types, we only allow the same data on request as on the previous response.
            else
            {
                str data = strLRTrim(_data);
                stateList.Add(data);
            }

            // The error state should not change on read-only controls
            stateList.Add(_error);
        }

        stateList.Add(_type);
        stateList.Add(_length);
        if (version == 0)
        {
            stateList.Add(_defaultButton);
        }
        stateList.Add(_enabled);
        stateList.Add(_selected);
        if (version == 0)
        {
            stateList.Add(_color);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendControlsCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends a work execute control.
    /// </summary>
    /// <param name = "_container">The work execute container, with collection of controls.</param>
    public void appendControlsCon(container _container)
    {
        int length = conLen(_container);

        if (length >= #PassThroughInfo)
        {
            for (int i = #ControlsStart; i <= length; ++i)
            {
                container control = conPeek(_container, i);
                this.appendControl(
                    conPeek(control, #controlType),
                    conPeek(control, #name),
                    conPeek(control, #label),
                    conPeek(control, #newLine),
                    conPeek(control, #data),
                    conPeek(control, #type),
                    conPeek(control, #length),
                    conPeek(control, #error),
                    conPeek(control, #defaultButton),
                    conPeek(control, #enabled),
                    conPeek(control, #selected),
                    conPeek(control, #color));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds an instance of <c>WHSWorkUserSessionStateCheck</c> EDT.
    /// </summary>
    /// <returns>Work user session check string.</returns>
    public WHSWorkUserSessionStateCheck build()
    {
        WHSWorkUserSessionStateCheck	result = '';

        using (System.IO.StringWriter stringWriter = new System.IO.StringWriter())
        {
            using (System.Xml.XmlTextWriter xmlTextWriter = WHSWorkExecuteSerializationHelper::createXMLTextWriter(stringWriter))
			{
				System.Xml.Serialization.XmlSerializer serializer = new System.Xml.Serialization.XmlSerializer(stateList.GetType());
				serializer.Serialize(stringWriter, stateList);
				System.Text.StringBuilder stringBuilder = stringWriter.GetStringBuilder();
				result = stringBuilder.ToString();
			}
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds an instance of <c>WHSWorkUserSessionStateCheck</c> EDT from work execute container.
    /// </summary>
    /// <param name = "_container">The work execute container, with collection of controls.</param>
    /// <returns>Work user session check string.</returns>
    public static WHSWorkUserSessionStateCheck buildFromContainer(container _container)
    {
        WHSWorkUserSessionStateCheckBuilder sessionStateCheckBuilder = WHSWorkUserSessionStateCheckBuilder::construct();
        sessionStateCheckBuilder.appendControlsCon(_container);
        return sessionStateCheckBuilder.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromContainerWithVersionNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSWorkUserSessionStateCheck buildFromContainerWithVersionNumber(container _container)
    {
        using (var versionContext = WHSWorkUserSessionStateCheckBuilderVersionContext::construct())
        {
            WHSWorkUserSessionStateCheck stateCheck = WHSWorkUserSessionStateCheckBuilder::buildFromContainer(_container);
            return versionContext.versionAsString()+stateCheck;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>