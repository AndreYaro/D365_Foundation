<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransRef_Statement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransRef_Statement</c> class retrieves the discount, price, and quantity details for a
/// customer invoice.
/// </summary>
public class InventTransRef_Statement extends InventTransReference
{
    CustInvoiceTrans    custInvoiceTrans;
    custInvoiceJour     custInvoiceJour;

    RetailTransactionSalesTrans  salesOrderLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code for the invoice transaction.
    /// </summary>
    /// <returns>
    /// The current currency code.
    /// </returns>
    CurrencyCode currencyCode()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
            return custInvoiceTrans.currencyCode;
        else
            return RetailTransactionTable::find(salesOrderLine.transactionId,salesOrderLine.store,salesOrderLine.terminalId).currency; //salesOrderLine.currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number.
    /// </summary>
    /// <returns>
    /// The account of the customer invoice journal if the invoice journal exists; otherwise, the customer
    /// account of sales order.
    /// </returns>
    CustVendAC custVendAC()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceJour.RecId)
            return custInvoiceJour.orderAccount;
        else
            return salesOrderLine.custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the discount amount of the transaction.
    /// </summary>
    /// <returns>
    /// The discount amount of customer invoice if it exists; otherwise, the discount amount of sales order.
    /// </returns>
    Amount discAmount()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
            return custInvoiceTrans.discAmount;
        else
            return salesOrderLine.discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the discount percent of the customer invoice.
    /// </summary>
    /// <returns>
    /// The discount percent of customer invoice transaction.
    /// </returns>
    Percent discPercent()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
            return custInvoiceTrans.discPercent;
        else
            return salesOrderLine.totalDiscPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventVendCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the module.
    /// </summary>
    /// <returns>
    /// The <c>InventVendCust::Customer</c> enumeration value.
    /// </returns>
    InventVendCust inventVendCust()
    {
        return InventVendCust::Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount for the customer invoice transaction.
    /// </summary>
    /// <returns>
    /// The line amount of customer invoice transaction if it exists; otherwise, the net amount of sales
    /// order.
    /// </returns>
    Amount lineAmount()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
            return -custInvoiceTrans.lineAmount * factor;
        else
            return -salesOrderLine.netAmount * factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the price for the transaction quantity.
    /// </summary>
    /// <returns>
    /// The price for the transaction item.
    /// </returns>
    Price pcsPrice()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
        {
            if (!custInvoiceTrans.recId)
                return 0;

            return (custInvoiceTrans.qty * custInvoiceTrans.salesPrice /
                   (custInvoiceTrans.priceUnit ? custInvoiceTrans.priceUnit : 1) +
                    custInvoiceTrans.salesMarkup) /
                   (custInvoiceTrans.qty ? custInvoiceTrans.qty : 1);
        }
        else
        {
            if (!salesOrderLine.recId)
                return 0;

            return -(salesOrderLine.Qty * salesOrderLine.netPrice) ; // /
                   //(salesOrderLine.unitPrice ? salesOrderLine.netPrice : 1) ); //+
    //                salesOrderLine.salesMarkup) /
    //               (salesOrderLine.salesQty ? salesOrderLine.salesQty : 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice quantity.
    /// </summary>
    /// <returns>
    /// The invoice quantity if the invoice exists; otherwise, the sales line quantity.
    /// </returns>
    Qty qtyUnit()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
            return -custInvoiceTrans.qty * factor;
        else
            return salesOrderLine.qty * factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer invoice lines.
    /// </summary>
    void setRefTrans()
    {
        RetailTransactionSalesTrans rBOTransactionSalesTrans;

        super();

        custInvoiceTrans.clear();
        custInvoiceJour.clear();
        if (inventTrans.isUpdatedFinancial())
        {
            select Firstonly custInvoiceTrans
                where custInvoiceTrans.InventTransId    == inventTransOrigin.InventTransId
                   && custInvoiceTrans.InvoiceDate      == inventTrans.DateFinancial
                   && custInvoiceTrans.InvoiceId        == inventTrans.InvoiceId
                outer join custInvoiceJour
                    where custInvoiceJour.InvoiceId             == custInvoiceTrans.InvoiceId
                       && custInvoiceJour.InvoiceDate           == custInvoiceTrans.InvoiceDate
                       && custInvoiceJour.SalesId               == custInvoiceTrans.SalesId
                       && custInvoiceJour.numberSequenceGroup   == custInvoiceTrans.numberSequenceGroup;
        }
        if (!custInvoiceTrans.RecId)
        {
            select rBOTransactionSalesTrans
                where rBOTransactionSalesTrans.inventTransId == inventTransOrigin.inventTransId;

            salesOrderLine = rBOTransactionSalesTrans;

    //      factor = factor * (salesOrderLine.salesQty ? ((salesOrderLine.remainSalesPhysical + salesOrderLine.remainSalesFinancial) / salesOrderLine.salesQty) : 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of item based on the module.
    /// </summary>
    /// <returns>
    /// The unit in which the item is sold.
    /// </returns>
    UnitOfMeasureSymbol unitId()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
            return custInvoiceTrans.salesUnit;
        else
            if (salesOrderLine.unit)
                return salesOrderLine.unit;
            else
            return inventtable::find(inventTrans.ItemId).inventTableModuleSales().UnitId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>