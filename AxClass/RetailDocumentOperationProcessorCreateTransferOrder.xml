<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorCreateTransferOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Xml.Linq;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using CommerceRunTimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

/// <summary>
/// The <c>RetailDocumentOperationProcessorCreateTransferOrder</c> class is the processor for CreateTransferOrder operation.
/// </summary>
internal class RetailDocumentOperationProcessorCreateTransferOrder extends RetailDocumentOperationProcessorTransferOrderBase
{
    private const str ProductRecordIdAttribute = 'ProductRecordId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a class of the <c>RetailDocumentOperationProcessorCreateTransferOrder</c> class.
    /// </summary>
    /// <param name="_parameters">
    /// The <c>RetailDocumentOperationProcessorParameters</c> instance.
    /// </param>
    /// <returns>
    /// The new instance of an <c>RetailDocumentOperationProcessorCreateTransferOrder</c> subclass.
    /// </returns>
    public static RetailDocumentOperationProcessorCreateTransferOrder construct(RetailDocumentOperationProcessorParameters _parameters)
    {
        var processor = new RetailDocumentOperationProcessorCreateTransferOrder(_parameters);
        processor.isRetriable = false;
        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the document of create transfer order operation.
    /// </summary>
    /// <returns>A container object to indicate the result document.</returns>
    protected container processInternal()
    {
        container ret = conNull();
        str inventoryDocumentJsonStr = conPeek(this.requestContainer, 1);

        CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = RetailTransactionServiceJsonHelper::DeserializeInventoryInboundOutboundCommitDocumentFromJSON(inventoryDocumentJsonStr);
        this.validateInventoryInboundOutboundCommitDocument(inventoryCommitDocument);
        str transferXmlStr = this.convertInventoryInboundOutboundCommitDocumentToXml(inventoryCommitDocument);
        container result = this.createOrUpdateTransferOrder(transferXmlStr);
        boolean isSuccess = conPeek(result, RetailDocumentOperationProcessorInventoryDocumentBase::IsSuccessIndex);
        if (!isSuccess)
        {
            this.throwsException(false, conPeek(result, RetailDocumentOperationProcessorInventoryDocumentBase::ErrorMessageIndex), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }
        
        transferXmlStr = conPeek(result, RetailDocumentOperationProcessorInventoryDocumentBase::ResponseDocumentIndex);

        this.updateCommitDocument(transferXmlStr, inventoryCommitDocument);
        this.attachNoteForInventoryCommitDocument(inventoryCommitDocument);

        ret = [transferXmlStr];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventoryInboundOutboundCommitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate commit document.
    /// </summary>
    /// <param name = "_document">The commit document.</param>
    /// <exception cref="Exception::Error">The <c>InventoryInboundOutboundCommitDocument</c> is not valid.</exception>
    protected void validateInventoryInboundOutboundCommitDocument(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundCommitDocument _document)
    {
        CommerceHQEventSource logEventSource = this.GetEventSource();

        if (_document == null 
            || _document.Document == null
            || !_document.get_Document().get_Sender()
            || !_document.get_Document().get_Receiver())
        {
            logEventSource.EventWriteInventoryDocumentNotValidInventoryInboundOutboundCommitDocument(this.getOperationName(), this.getRequestId());
            this.throwsException(this.isRetriable, strFmt("@RetailDocumentOperationLabels:RetailDocumentOperationNotValidInventoryInboundOutboundCommitDocument", this.getOperationName(), this.getRequestId()), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventoryInboundOutboundDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate document line.
    /// </summary>
    /// <param name = "_line">The document line.</param>
    /// <exception cref="Exception::Error">The <c>InventoryInboundOutboundDocumentLine</c> is not valid.</exception>
    protected void validateInventoryInboundOutboundDocumentLine(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocumentLine _line)
    {
        CommerceHQEventSource logEventSource = this.GetEventSource();

        if (_line == null)
        {
            logEventSource.EventWriteInventoryDocumentNotValidInventoryInboundOutboundDocumentLine(this.getOperationName(), this.getRequestId(), '');
            this.throwsException(this.isRetriable, strFmt("@RetailDocumentOperationLabels:RetailDocumentOperationNotValidInventoryInboundOutboundDocumentLine", this.getOperationName(), this.getRequestId(), _line == null ? '' : _line.LineId), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertInventoryInboundOutboundCommitDocumentToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert <c>InventoryInboundOutboundCommitDocument</c> to XML string which represents transfer order details.
    /// </summary>
    /// <param name="_inventoryCommitDocument">
    /// The inventory commit document.
    /// </param>
    /// <returns>An XML string for transfer order details.</returns>
    protected str convertInventoryInboundOutboundCommitDocumentToXml(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundCommitDocument _inventoryCommitDocument)
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundDocument inventoryDocument = _inventoryCommitDocument.Document;
        IEnumerable lineList = _inventoryCommitDocument.DocumentLines as IEnumerable;

        XmlDocument doc = new XmlDocument();
        XmlElement transferTableElement = doc.CreateElement(tableStr(InventTransferTable));
        doc.AppendChild(transferTableElement);
        transferTableElement.setAttribute(fieldStr(InventTransferTable, InventLocationIdFrom), inventoryDocument.Sender);
        transferTableElement.setAttribute(fieldStr(InventTransferTable, InventLocationIdTo), inventoryDocument.Receiver);
        if (inventoryDocument.get_ShipDate() && inventoryDocument.get_ShipDate().get_HasValue())
        {
            System.Nullable<System.DateTimeOffset> shipDate =  inventoryDocument.ShipDate;
            System.DateTimeOffset datetime = shipDate.get_Value();

            System.String strDateTime = datetime.ToString(RetailDocumentOperationProcessorTransferOrderBase::DateFormat);
            transferTableElement.setAttribute(fieldStr(InventTransferTable, ShipDate), strDateTime);
        }

        if (inventoryDocument.get_ReceiveDate() && inventoryDocument.get_ReceiveDate().get_HasValue())
        {
            System.Nullable<System.DateTimeOffset> receiveDate =  inventoryDocument.ReceiveDate;
            System.DateTimeOffset datetime = receiveDate.get_Value();

            System.String strDateTime = datetime.ToString(RetailDocumentOperationProcessorTransferOrderBase::DateFormat);
            transferTableElement.setAttribute(fieldStr(InventTransferTable, ReceiveDate), strDateTime);
        }

        transferTableElement.setAttribute(fieldStr(InventTransferTable, DlvModeId), inventoryDocument.DeliveryMode);

        IEnumerator enumerator = lineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine line = enumerator.Current as CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine;
            this.validateInventoryInboundOutboundDocumentLine(line);
            XmlElement inventTransferLine = this.createInventoryInboundOutboundDocumentLineElement(doc, line);

            transferTableElement.appendChild(inventTransferLine);
        }

        return doc.innerXml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryInboundOutboundDocumentLineElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert <c>InventoryInboundOutboundDocumentLine</c> to XML element which represents transfer order line details.
    /// </summary>
    /// <param name="_doc">
    /// The XML document used to create the XML element.
    /// </param>
    /// <param name="_inventoryDocumentLine">
    /// The inventory document line.
    /// </param>
    /// <returns>
    /// An XML element for transfer order line details.
    /// </returns>
    protected XmlElement createInventoryInboundOutboundDocumentLineElement(XmlDocument _doc, CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _inventoryDocumentLine)
    {
        UnitOfMeasure unitOfMeasure;
        ItemId itemId;
        int numberOfDecimals = defaultNumberOfDecimals;

        XmlElement inventTransferLine = _doc.CreateElement(tableStr(InventTransferLine));
        inventTransferLine.setAttribute(WmsLocationIdAttribute, _inventoryDocumentLine.LocationId);
        inventTransferLine.setAttribute(ProductRecordIdAttribute, int642Str(_inventoryDocumentLine.ProductId));

        EcoResProductRecId productRecId = _inventoryDocumentLine.ProductId;
        itemId = RetailDocumentOperationProcessorInventoryDocumentBase::getItemIdByProductId(productRecId);

        inventTransferLine.setAttribute(fieldStr(InventTransferLine, ItemId), itemId);
        InventTableModule inventTableModule = InventTableModule::find(itemId, ModuleInventPurchSales::Invent, false);
        if (inventTableModule)
        {
            unitOfMeasure = UnitOfMeasure::findBySymbol(inventTableModule.UnitId);
            if (unitOfMeasure)
            {
                numberOfDecimals = unitOfMeasure.DecimalPrecision;
            }
        }

        this.processQuantityToUpdate(_inventoryDocumentLine.QuantityToUpdate, inventTransferLine, defaultNumberOfCharacters, numberOfDecimals);

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuantityToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process quantity to update.
    /// </summary>
    /// <param name = "_quantityToUpdate">For create  transfer order, the quantity to update will be mapped to QtyTransfer in <c>InventTransferLine</c>.</param>
    /// <param name = "_inventTransferLine">The invent transfer line xml element.</param>
    /// <param name = "_numberOfCharacters">The number of characters when convert _quantityToUpdate value to string.</param>
    /// <param name = "_numberOfDecimals">The number of decimals when convert _quantityToUpdate value to string.</param>
    protected void processQuantityToUpdate(real _quantityToUpdate, XmlElement _inventTransferLine, int _numberOfCharacters, int _numberOfDecimals)
    {
        _inventTransferLine.setAttribute(fieldStr(InventTransferLine, QtyTransfer), num2Str(_quantityToUpdate, _numberOfCharacters, _numberOfDecimals, DecimalSeparator::Dot, ThousandSeparator::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process license plate id.
    /// </summary>
    /// <param name = "_originalInventTransferLine">The original invent transfer line.</param>
    /// <param name = "_inventoryDocumentLine"> The inventory document line.</param>
    /// <param name = "_inventTransferLine">The invent transfer line xml element.</param>
    protected void processLicensePlateId(InventTransferLine _originalInventTransferLine, CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _inventoryDocumentLine, XmlElement _inventTransferLine)
    {
        // Do nothing, now create transfer order does not support license plate id.
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update transfer order, should be implemented in subclasses.
    /// </summary>
    /// <param name = "_transferXmlStr">An XML string containing details of a transfer order.</param>
    /// <returns>A container object to indicate result documents.</returns>
    protected container createOrUpdateTransferOrder(str _transferXmlStr)
    {
        return RetailTransactionServiceInventory::createOrUpdateTransferOrder(_transferXmlStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachNoteForInventoryCommitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attach note for inventory commit document.
    /// </summary>
    /// <param name = "_inventoryCommitDocument">The inventory commit document.</param>
    protected void attachNoteForInventoryCommitDocument(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundCommitDocument _inventoryCommitDocument)
    {
        CommerceHQEventSource logEventSource = this.GetEventSource();

        try
        {
            super(_inventoryCommitDocument);
        }
        catch
        {
            logEventSource.EventWriteInventoryDocumentFailToAttachNote(this.getOperationName(), this.getRequestId(), _inventoryCommitDocument.get_Document().get_SourceDocumentRecordId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>InventTransferTable</c> table object from <c>InventoryInboundOutboundDocument</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document.</param>
    /// <returns>
    /// An <c>InventTransferTable</c> table object with <c>Common</c> type.
    /// </returns>
    protected Common getDocument(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocument _inventoryInboundOutboundDocument)
    {
        Common ret;

        InventTransferId transferOrderId = _inventoryInboundOutboundDocument.get_DocumentId();
        ret = InventTransferTable::find(transferOrderId);

        if (!ret)
        {
            throw error(strFmt("@Retail:InvalidTransferIdError", transferOrderId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>InventTransferLine</c> table object from <c>InventoryInboundOutboundDocumentLine</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document line.</param>
    /// <returns>
    /// An <c>InventTransferLine</c> table object with <c>Common</c> type.
    /// </returns>
    protected Common getDocumentLine(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocumentLine _inventoryInboundOutboundDocumentLine)
    {
        Common ret;
        InventTransferTable transferTable;

        RecId transferOrderLineRecId = _inventoryInboundOutboundDocumentLine.get_SourceDocumentLineRecordId();
        ret = InventTransferLine::findRecId(transferOrderLineRecId);

        if (!ret)
        {
            RecId transferOrderRecId = _inventoryInboundOutboundDocumentLine.get_SourceDocumentRecordId();
            select firstonly transferTable where transferTable.RecId == transferOrderRecId;
            InventTransferId transferOrderId = transferTable ? transferTable.TransferId : 'Unknown';
            throw error (strFmt("@Retail:CannotFindTranferOrderLineError", transferOrderLineRecId, transferOrderId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the draft commit document after it is written to the
    /// HQ and assigned with RecId and other information.
    /// </summary>
    /// <param name = "_newDocXML">The commit document XML containing the new information.</param>
    /// <param name = "_updateDoc">The commit document object to be updated.</param>
    private void updateCommitDocument(str _newDocXML, CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument _updateDoc)
    {
        CommerceHQEventSource logEventSource = this.GetEventSource();

        try
        {
            RetailRTSTransferOrder rtsTransferOrderObject = RetailRTSTransferOrder::fromXML(_newDocXML);

            // Set document id for the document
            this.setDocumentIdForCommitDocument(rtsTransferOrderObject, _updateDoc);

            // Set document id and document line id for the document lines
            this.setDocumentLinesFieldsForCommitDocument(rtsTransferOrderObject, _updateDoc);
        }
        catch
        {
            logEventSource.EventWriteInventoryDocumentFailToUpdateCommitDocument(this.getOperationName(), this.getRequestId(), _updateDoc.get_Document().get_SourceDocumentRecordId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentIdForCommitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the DocumentId field for the commit document object.
    /// </summary>
    /// <param name ="_sourceOrder">The source of the DocumentId.</param>
    /// <param name ="_destOrder">The commit document object to be updated.</param>
    private void setDocumentIdForCommitDocument(RetailRTSTransferOrder _sourceOrder, CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument _destOrder)
    {
        InventTransferId docId = _sourceOrder.paramTransferId();
        _destOrder.get_Document().set_DocumentId(docId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentLinesFieldsForCommitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the DocumentRecordId and DocumentLineRecordId for transfer order lines.
    /// </summary>
    /// <param name ="_sourceOrder">The source of the DocumentId.</param>
    /// <param name ="_destOrder">The commit document object to be updated.</param>
    private void setDocumentLinesFieldsForCommitDocument(RetailRTSTransferOrder _sourceOrder, CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument _destOrder)
    {
        RecId docRecId = _sourceOrder.paramRecId();
        IEnumerable documentLines = _destOrder.get_DocumentLines() as IEnumerable;
        Map sourceOrderLineMap = this.buildProductIdToRTSTransferOrderLineMap(_sourceOrder);

        if (documentLines != null)
        {
            IEnumerator documentLinesEnumerator = documentLines.GetEnumerator();
            while (documentLinesEnumerator.MoveNext()) 
            {
                CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine documentLine = documentLinesEnumerator.Current as CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine;
                int64 productId = documentLine.ProductId.GetValueOrDefault();
                if (sourceOrderLineMap.exists(productId))
                {
                    RetailRTSTransferOrderLine line = sourceOrderLineMap.lookup(productId);
                    documentLine.SourceDocumentRecordId = docRecId;
                    documentLine.SourceDocumentLineRecordId = line.paramRecId();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProductIdToRTSTransferOrderLineMap</Name>
				<Source><![CDATA[
    private Map buildProductIdToRTSTransferOrderLineMap(RetailRTSTransferOrder _transferOrder)
    {
        Map productDistinctIdTransferLineMap = new Map(Types::Int64, Types::Class);

        List lines = _transferOrder.paramOrderLines();
        ListEnumerator linesEnumerator = lines.getEnumerator();
        while (linesEnumerator.moveNext())
        {
            RetailRTSTransferOrderLine transferOrderLine = linesEnumerator.current();
            EcoResDistinctProductRecId productRecId = transferOrderLine.paramProductRecordId();
            productDistinctIdTransferLineMap.insert(productRecId, transferOrderLine);
        }

        return productDistinctIdTransferLineMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>