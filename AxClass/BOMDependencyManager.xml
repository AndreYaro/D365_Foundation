<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMDependencyManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BOMDependencyManager</c> class is responsible for loading dependencies between BOMs
///     and finding circular dependencies.
/// </summary>
class BOMDependencyManager
{
    boolean                     rebuildSucceeded;

    // Instance that contains the dependency graph
    BOMDependencyAnalyzer       dependencyAnalyzer;

    // Settings
    BOMRouteVersionSelectAll    versionSelect;
    boolean                     onlyApproved;
    boolean                     supportAllProductDimensions;
    boolean                     showStackWhenCircularityIsDetected;

    // Map<BomId, Set<ReqSupplyPolicy>>
    Map                         supplyPoliciesPerBom;
    // Map<ItemId, Set<ReqSupplyPolicy>>
    Map                         supplyPoliciesPerItem;
    // Map<FieldId+InventDimValue, Set<ReqSupplyPolicy>>
    Map                         supplyPoliciesPerInventDim;

    // Active InventDim fields
    List                        activeInventDimFields;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a policy to the internal collection.
    /// </summary>
    /// <param name="_policy">
    ///     The policy to add.
    /// </param>
    /// <param name="_inventDim">
    ///     The dimensions applicable to the policy.
    /// </param>
    public void addPolicy(ReqSupplyPolicy _policy, InventDim _inventDim)
    {
        dependencyAnalyzer.addTask(_policy);

        this.getItemPolicies(_policy.parmItemId()).add(_policy);
        this.getBomPolicies(_policy.parmBomId()).add(_policy);
                
        ListEnumerator activeInventDimFieldsEnum = activeInventDimFields.getEnumerator();

        while (activeInventDimFieldsEnum.moveNext())
        {
            FieldId fieldId = activeInventDimFieldsEnum.current();

            this.getInventDimPolicies(fieldId, _inventDim.(fieldId)).add(_policy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionKey</Name>
				<Source><![CDATA[
    private str dimensionKey(FieldId _fieldId, anytype _value = 0)
    {
        if (_value)
        {
            return strfmt('%1=%2', _fieldId, _value);
        }
        return strfmt('%1', _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryLookupSupplyPoliciesPerInventDim</Name>
				<Source><![CDATA[
    private Set tryLookupSupplyPoliciesPerInventDim(FieldId _fieldid, anytype _value = 0)
    {
        str key = this.dimensionKey(_fieldId, _value);
        if (supplyPoliciesPerInventDim.exists(key))
        {
            return supplyPoliciesPerInventDim.lookup(key);
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applicablePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the applicable policies based on the given parameters.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item to get policies for.
    /// </param>
    /// <param name="_bomId">
    ///     The ID of the BOM to get policies for.
    /// </param>
    /// <param name="_inventDim">
    ///     The dimension values to get policies for.
    /// </param>
    /// <param name="_fromDate">
    ///     The start date of the search.
    /// </param>
    /// <param name="_toDate">
    ///     The end date of the search.
    /// </param>
    /// <returns>
    ///     A <c>List</c> of <c>ReqSupplyPolicy</c> objects that match the given criteria.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Thrown if neither item ID or BOM ID is given.
    /// </exception>
    protected List applicablePolicies(
        ItemId      _itemId,
        BOMId       _bomId,
        InventDim   _inventDim,
        date _fromDate   = dateNull(),
        date _toDate     = dateMax())
    {
        Set             policies;

        if (_itemId != '' && _bomId != '')
        {
            policies = Set::intersection(this.getItemPolicies(_itemId), this.getBomPolicies(_bomId));
        }
        else if (_itemId != '')
        {
            policies = this.getItemPolicies(_itemId);
        }
        else if (_bomId != '')
        {
            policies = this.getBomPolicies(_bomId);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        List result = new List(Types::Class);
        ListEnumerator activeInventDimFieldsEnum = activeInventDimFields.getEnumerator();

        while (activeInventDimFieldsEnum.moveNext())
        {
            if (policies.empty())
            {
                return result;
            }

            FieldId fieldId = activeInventDimFieldsEnum.current();
            anytype value = _inventDim.(fieldId);

            if (value)
            {
                Set inventDimPolicies = this.tryLookupSupplyPoliciesPerInventDim(fieldId, value);
                Set inventDimWildcardPolicies = this.tryLookupSupplyPoliciesPerInventDim(fieldId);
                            
                Set applicableInventDimPolicies = inventDimPolicies ? Set::intersection(policies, inventDimPolicies) : null;
                Set applicableInventDimWildcardPolicies = inventDimWildcardPolicies ? Set::intersection(policies, inventDimWildcardPolicies) : null;

                boolean applicableInventDimPoliciesExist = applicableInventDimPolicies && !applicableInventDimPolicies.empty();
                boolean applicableInventDimWildcardPoliciesExist = applicableInventDimWildcardPolicies && !applicableInventDimWildcardPolicies.empty();
                if (applicableInventDimPoliciesExist && applicableInventDimWildcardPoliciesExist)
                {
                    policies = Set::union(applicableInventDimPolicies, applicableInventDimWildcardPolicies);
                }
                else if (applicableInventDimPoliciesExist)
                {
                    policies = applicableInventDimPolicies;
                }
                else if (applicableInventDimWildcardPoliciesExist)
                {
                    policies = applicableInventDimWildcardPolicies;
                }
                else 
                {
                    return result;
                }
            }
        }

        if (policies.elements() != 0)
        {
            SetEnumerator policiesEnum = policies.getEnumerator();
            while (policiesEnum.moveNext())
            {
                ReqSupplyPolicy policy = policiesEnum.current();
                if (this.isDateMatch(policy, _fromDate, _toDate))
                {
                    result.addEnd(policy);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomHasCircularDependency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Utility method that checks circularity of BOMs.
    /// </summary>
    /// <param name="_bomId">
    ///     The ID of the BOM.
    /// </param>
    /// <param name="_itemId">
    ///     The ID of the item.
    /// </param>
    /// <param name="_config">
    ///     The name of the configuration.
    /// </param>
    /// <param name="_fromDate">
    ///     The start date of the BOM.
    /// </param>
    /// <param name="_toDate">
    ///     The end date of the BOM.
    /// </param>
    /// <returns>
    ///     <c>true</c> if circularity is detected; otherwise, <c>false</c>.
    /// </returns>
    public boolean bomHasCircularDependency(
        BOMId                       _bomId,
        ItemId                      _itemId          = '',
        EcoResItemConfigurationName _config          = '',
        StartDate                   _fromDate        = dateNull(),
        EndDate                     _toDate          = dateMax())
    {
        List                    policySet;
        InventDim               inventDim;

        inventDim.ConfigId = _config;

        if (_toDate == dateNull())
        {
            _toDate = dateMax();
        }

        policySet = this.getApplicablePolicies(_itemId, _bomId, inventDim, _fromDate, _toDate);

        return this.hasCircularDependency(policySet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicablePolicies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the applicable policies based on the given parameters.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item to get policies for.
    /// </param>
    /// <param name="_bomId">
    ///     The ID of the BOM to get policies for.
    /// </param>
    /// <param name="_inventDim">
    ///     The dimension values to get policies for.
    /// </param>
    /// <param name="_fromDate">
    ///     The start date of the search.
    /// </param>
    /// <param name="_toDate">
    ///     The end date of the search.
    /// </param>
    /// <returns>
    ///     A <c>List</c> of <c>ReqSupplyPolicy</c> objects that match the given criteria.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Thrown if neither item ID or BOM ID is given.
    /// </exception>
    public List getApplicablePolicies(
        ItemId      _itemId,
        BOMId       _bomId,
        InventDim   _inventDim,
        date _fromDate   = dateNull(),
        date _toDate     = dateMax())
    {
        this.rebuildIfNecessary();

        return this.applicablePolicies(_itemId, _bomId, _inventDim, _fromDate, _toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBomPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the set of policies for the given BOM ID and company.
    /// </summary>
    /// <param name="_bomId">
    ///     The BOM ID.
    /// </param>
    /// <returns>
    ///     The set of policies for the given BOM ID and company.
    /// </returns>
    protected Set getBomPolicies(BOMId _bomId)
    {
        Set         result;

        if (supplyPoliciesPerBom.exists(_bomId))
        {
            result = supplyPoliciesPerBom.lookup(_bomId);
        }
        else
        {
            result = new Set(Types::Class);
            supplyPoliciesPerBom.insert(_bomId, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the set of policies for the given Item ID and company.
    /// </summary>
    /// <param name="_itemId">
    ///     The Item ID.
    /// </param>
    /// <returns>
    ///     The set of policies for the given Item ID and company.
    /// </returns>
    protected Set getItemPolicies(ItemId _itemId)
    {
        Set         result;

        if (supplyPoliciesPerItem.exists(_itemId))
        {
            result = supplyPoliciesPerItem.lookup(_itemId);
        }
        else
        {
            result = new Set(Types::Class);
            supplyPoliciesPerItem.insert(_itemId, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the set of policies for the given InventDim fieldId, value and company.
    /// </summary>
    /// <param name="_fieldNum">
    ///     The fieldId.
    /// </param>
    /// <param name="_dimValue">
    ///     The value.
    /// </param>
    /// <returns>
    ///     The set of policies for the given InventDim fieldId, value and company.
    /// </returns>
    protected Set getInventDimPolicies(FieldId _fieldNum, anytype _dimValue)
    {
        Set         result;
        str         key = this.dimensionKey(_fieldNum, _dimValue);

        if (supplyPoliciesPerInventDim.exists(key))
        {
            result = supplyPoliciesPerInventDim.lookup(key);
        }
        else
        {
            result = new Set(Types::Class);
            supplyPoliciesPerInventDim.insert(key, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCircularDependency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Computes a Boolean value indicating whether any policy in the given set of policies has circular dependencies.
    /// </summary>
    /// <param name="_supplyPolicies">
    ///     A list of <c>ReqSupplyPolicy</c> instances.
    /// </param>
    /// <returns>
    ///     <c>true</c> if a circular dependency was found; otherwise, <c>false</c>.
    /// </returns>
    public boolean hasCircularDependency(List _supplyPolicies)
    {
        boolean                 hasCircularDependency = false;
        int                     circularityLoopNumber = 1;

        this.rebuildIfNecessary();

        setPrefix("@SYS27677");
        ListEnumerator supplyPoliciesEnum = _supplyPolicies.getEnumerator();

        while (supplyPoliciesEnum.moveNext())
        {
            if (!dependencyAnalyzer.contains(supplyPoliciesEnum.current()))
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            boolean policyHasCircularDependency = this.policyHasCircularDependency(supplyPoliciesEnum.current(), circularityLoopNumber);
            hasCircularDependency = policyHasCircularDependency || hasCircularDependency;

            if (policyHasCircularDependency)
            {
                ++circularityLoopNumber;
            }
        }

        return hasCircularDependency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes this instance.
    /// </summary>
    protected void init()
    {
        rebuildSucceeded = false;

        dependencyAnalyzer = BOMDependencyAnalyzer::construct();

        supplyPoliciesPerItem = new Map(Types::String, Types::Class);
        supplyPoliciesPerBom = new Map(Types::String, Types::Class);
        supplyPoliciesPerInventDim = new Map(Types::String, Types::Class);

        this.initActiveInventDimFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActiveInventDimFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the internal lists of active dimension field.
    /// </summary>
    private void initActiveInventDimFields()
    {
        Set             activeStorageDimensions;
        Set             supportedStorageDimensions;
        Set             activeProductDimensions;
        Set             supportedProductDimensions;

        activeInventDimFields = new List(Types::Integer);

        activeStorageDimensions = InventDim::dimFieldList2Set(InventDim::dimStorageDimEnabledFieldList());
        supportedStorageDimensions = this.supportedStorageDimensionFields();

        activeProductDimensions = InventDim::dimFieldList2Set(InventDim::dimProductDimensionEnabledFieldList());
        supportedProductDimensions = this.supportedProductDimensionFields();

        // add Site storage dimension first, if it is enabled and supported
        this.moveFromSetToList(activeStorageDimensions, supportedStorageDimensions, activeInventDimFields, fieldNum(InventDim, InventSiteId));

        // add all product dimensions
        this.moveFromSetToList(activeProductDimensions, supportedProductDimensions, activeInventDimFields);

        // add remaining storage dimensions
        this.moveFromSetToList(activeStorageDimensions, supportedStorageDimensions, activeInventDimFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBomHierarchyCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes this instance from a <c>BomHierarchyCheck</c> instance.
    /// </summary>
    /// <param name="_bomHierarchyCheck">
    ///     The <c>BomHierarchyCheck</c> instance to initialize this instance from.
    /// </param>
    public void initFromBomHierarchyCheck(BOMHierarchyCheck _bomHierarchyCheck)
    {
        this.parmVersionSelect(_bomHierarchyCheck.parmVersionSelect());
        this.parmOnlyApproved(_bomHierarchyCheck.parmOnlyApproved());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Computes a Boolean value determining whether a policy matches the given date interval.
    /// </summary>
    /// <param name="_policy">
    ///     A <c>ReqSupplyPolicy</c> instance to evaluate.
    /// </param>
    /// <param name="_fromDate">
    ///     The start date of the date interval to check.
    /// </param>
    /// <param name="_toDate">
    ///     The end date of the date interval to check.
    /// </param>
    /// <returns>
    ///     <c>true</c> if the policy interval intersects with the given date interval; otherwise, <c>false</c>.
    /// </returns>
    protected boolean isDateMatch(ReqSupplyPolicy _policy, date _fromDate, date _toDate)
    {
        return _policy.parmToDate() >= _fromDate && _policy.parmFromDate() <= _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFinalProductNodes</Name>
				<Source><![CDATA[
    private void loadFinalProductNodes()
    {
        BOMVersion                          bomVersion;
        BOMTable                            bomTable;
        InventDim                           inventDimBomVersion;

        while select RecId, ItemId, BOMId, FromDate, ToDate
            from bomVersion
                where (!onlyApproved || bomVersion.Approved)
                   && (
                        (versionSelect == BOMRouteVersionSelectAll::All)
                        ||
                        (versionSelect == BOMRouteVersionSelectAll::Active && bomVersion.Active)
                        ||
                        (versionSelect == BOMRouteVersionSelectAll::Selected && bomVersion.Construction)
                        ||
                        (versionSelect == BOMRouteVersionSelectAll::SelectedActive && (bomVersion.Construction || bomVersion.Active))
                      )
            join inventDimBomVersion
                where inventDimBomVersion.InventDimId == bomVersion.InventDimId 
            exists join bomTable
                where bomTable.bomId == bomVersion.bomId
                   && (!onlyApproved || bomTable.Approved)
        {
            this.addPolicy(ReqSupplyPolicy::newBomVersion(bomVersion), inventDimBomVersion);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCoByProductNodes</Name>
				<Source><![CDATA[
    private void loadCoByProductNodes()
    {
        BOMVersion                  bomVersion;
        PmfFormulaCoBy              formulaCoBy;
        InventDim                   inventDimCoBy;
        BOMTable                    bomTable;

        while select RecId, ItemId, BOMId, FromDate, ToDate
            from bomVersion
                where (!onlyApproved || bomVersion.Approved)
                   && (
                        (versionSelect == BOMRouteVersionSelectAll::All)
                        ||
                        (versionSelect == BOMRouteVersionSelectAll::Active && bomVersion.Active)
                        ||
                        (versionSelect == BOMRouteVersionSelectAll::Selected && bomVersion.Construction)
                        ||
                        (versionSelect == BOMRouteVersionSelectAll::SelectedActive && (bomVersion.Construction || bomVersion.Active))
                      )
            join ItemId from formulaCoBy
                where formulaCoBy.BOMVersionRefRecId == bomVersion.RecId
                    && formulaCoBy.ProductType != PmfProductType::By_Product
            join inventDimCoBy
                where inventDimCoBy.inventDimId == formulaCoBy.InventDimId
            exists join bomTable
                where bomTable.BOMId == bomVersion.BOMId
                   && (!onlyApproved || bomTable.Approved)
        {
            this.addPolicy(ReqSupplyPolicy::newFormulaCoBy(formulaCoBy, bomVersion), inventDimCoBy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEdges</Name>
				<Source><![CDATA[
    private void addEdges(Set fromPolicies, List toPolicies)
    {
        SetEnumerator fromPoliciesEnum = fromPolicies.getEnumerator();

        while (fromPoliciesEnum.moveNext())
        {
            ReqSupplyPolicy supplyPolicy = fromPoliciesEnum.current();

            ListEnumerator toPoliciesEnum = toPolicies.getEnumerator();
            while (toPoliciesEnum.moveNext())
            {
                ReqSupplyPolicy supplyPolicyDependency = toPoliciesEnum.current();
                if (this.isDateMatch(supplyPolicyDependency, supplyPolicy.parmFromDate(), supplyPolicy.parmToDate()))
                {
                    dependencyAnalyzer.addDependency(supplyPolicyDependency, supplyPolicy);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadMainEdges</Name>
				<Source><![CDATA[
    private void loadMainEdges()
    {
        BOM                         bomLine;
        BOMVersion                  bomVersion;
        InventDim                   inventDimBomLine;

        while select RecId, ItemId, BOMId, FromDate, ToDate, ItemBOMId
            from bomLine
                where bomLine.ConfigGroupId == ''
            join inventDimBomLine
                where inventDimBomLine.InventDimId == bomLine.InventDimId
            exists join bomVersion
                where bomVersion.bomId == bomLine.bomId
                    && (!onlyApproved || bomVersion.Approved)
                    && (
                        (versionSelect == BOMRouteVersionSelectAll::All)
                        ||
                        (versionSelect == BOMRouteVersionSelectAll::Active && bomVersion.Active)
                        ||
                        (versionSelect == BOMRouteVersionSelectAll::Selected && bomVersion.Construction)
                        ||
                        (versionSelect == BOMRouteVersionSelectAll::SelectedActive && (bomVersion.Construction || bomVersion.Active))
                        )
        {
            if (supplyPoliciesPerBOM.exists(bomLine.BOMId))
            {
                Set fromPolicies = supplyPoliciesPerBOM.lookup(bomLine.BOMId);

                date toDate = bomLine.ToDate;
                if (toDate == dateNull())
                {
                    toDate = dateMax();
                }

                List toPolicies = this.applicablePolicies(bomLine.ItemId, bomLine.ItemBOMId, inventDimBomLine, bomLine.FromDate, toDate);
                this.addEdges(fromPolicies, toPolicies);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadConfigEdges</Name>
				<Source><![CDATA[
    private void loadConfigEdges()
    {
        ConfigChoice                        configChoice;
        FieldId                             configIdFieldId = fieldNum(InventDim, ConfigId);
        Map                                 configChoicePolicies = new Map(Types::String, Types::Class);  // {K, V} = {configuration, set of bom policies}
        Set                                 nonConfigurableBOMPolicies = this.getInventDimPolicies(configIdFieldId, '');
        BOM                                 bomLine;
        InventDim                           inventDimBomLine;
        ConfigChoiceItemConfigExpandedView  configChoiceView;

        while select ItemId, BOMId, FromDate, ToDate, ItemBOMId
            from bomLine
            join inventDimBomLine
                where inventDimBomLine.InventDimId == bomLine.InventDimId
            join ItemId, ConfigId from configChoice
                where configChoice.ChosenGroupId == bomLine.ConfigGroupId
                   && configChoice.ChosenItemId == bomLine.ItemId
                   && (inventDimBomLine.configId == '' || configChoice.ChosenConfigId == inventDimBomLine.configId)
            exists join configChoiceView
                where configChoiceView.ItemId == configChoice.ItemId
                    && configChoiceView.ConfigId == configChoice.ConfigId
        {
            if (supplyPoliciesPerBOM.exists(bomLine.BOMId))
            {
                Set fromPolicies = Set::intersection(this.getItemPolicies(configChoice.ItemId), this.getBomPolicies(bomLine.bomId));
                Set fromPolicies1 = Set::intersection(fromPolicies, this.getInventDimPolicies(configIdFieldId, configChoice.ConfigId));
                Set fromPolicies2 = Set::intersection(fromPolicies, nonConfigurableBOMPolicies);
                fromPolicies = Set::union(fromPolicies1, fromPolicies2);
                List toPolicies = this.applicablePolicies(bomLine.ItemId, bomLine.ItemBOMId, inventDimBomLine, bomLine.FromDate, bomLine.ToDate);

                this.addEdges(fromPolicies, toPolicies);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadNodesAndEdges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loads BOM versions and their dependencies, creating policy entries for the versions
    ///     and dependency entries for the BOM lines.
    /// </summary>
    protected void loadNodesAndEdges()
    {
        this.loadFinalProductNodes();
        this.loadCoByProductNodes();

        this.loadMainEdges();
        this.loadConfigEdges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFromSetToList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Moves entries from a set to a given list, if the entries exist in another given set.
    /// </summary>
    /// <param name="_setToCheck">
    ///     Set to check for existence of the item before moving it.
    /// </param>
    /// <param name="_setToMove">
    ///     Set to move items from.
    /// </param>
    /// <param name="_list">
    ///     List to move items to.
    /// </param>
    /// <param name="_item">
    ///     Item to move; optional, if none is given then all entries are moved.
    /// </param>
    private void moveFromSetToList(Set _setToCheck, Set _setToMove, List _list, anytype _item = null)
    {
        if (!prmisDefault(_item))
        {
            if (_setToCheck.in(_item))
            {
                _list.addEnd(_item);
                _setToMove.remove(_item);
            }
        }
        else
        {
            SetEnumerator setToMoveEnum = _setToMove.getEnumerator();
            while (setToMoveEnum.moveNext())
            {
                if (_setToCheck.in(setToMoveEnum.current()))
                {
                    _list.addEnd(setToMoveEnum.current());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        showStackWhenCircularityIsDetected = true;

        versionSelect = BOMRouteVersionSelectAll::All;
        onlyApproved = false;
        // All product dimensions are supported for circularity.
        supportAllProductDimensions = true;

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyApproved</Name>
				<Source><![CDATA[
    public boolean parmOnlyApproved(boolean _onlyApproved = onlyApproved)
    {
        onlyApproved = _onlyApproved;
        return onlyApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowStackWhenCircularityIsDetected</Name>
				<Source><![CDATA[
    public boolean parmShowStackWhenCircularityIsDetected(boolean _showStackWhenCircularityIsDetected = showStackWhenCircularityIsDetected)
    {
        showStackWhenCircularityIsDetected = _showStackWhenCircularityIsDetected;
        return showStackWhenCircularityIsDetected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSupportAllProductDimensions</Name>
				<Source><![CDATA[
    public boolean parmSupportAllProductDimensions(boolean _supportAllProductDimensions = supportAllProductDimensions)
    {
        supportAllProductDimensions = _supportAllProductDimensions;
        return supportAllProductDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersionSelect</Name>
				<Source><![CDATA[
    public BOMRouteVersionSelectAll parmVersionSelect(BOMRouteVersionSelectAll _versionSelect = versionSelect)
    {
        versionSelect = _versionSelect;
        return versionSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>policyHasCircularDependency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a given supply policy has a circular dependency.
    /// </summary>
    /// <param name="_policy">
    ///     The policy to check.
    /// </param>
    /// <param name="_circularityLoopNumber">
    ///     The number to use for differentiating the currently found circular dependency loop,
    ///     when adding the policies in the stack to the infolog in the event of circularity detection.
    /// </param>
    /// <returns>
    ///     <c>true</c> if a circular dependency was detected; otherwise, <c>false</c>.
    /// </returns>
    protected boolean policyHasCircularDependency(ReqSupplyPolicy _policy, int _circularityLoopNumber)
    {
        setPrefix(strFmt("@SYP4882036", _circularityLoopNumber));

        boolean hasCircularDependency = dependencyAnalyzer.hasCircularDependency(_policy);

        if (hasCircularDependency && showStackWhenCircularityIsDetected)
        {
            this.showStack();
        }

        return hasCircularDependency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>policyToString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Computes a textual representation of the given policy.
    /// </summary>
    /// <param name="_policy">
    ///     The <c>ReqSupplyPolicy</c> instance.
    /// </param>
    /// <returns>
    ///     A textual representation of the given policy.
    /// </returns>
    public str policyToString(ReqSupplyPolicy _policy)
    {
        return strFmt('%1: %2, %3: %4',
                      extendedTypeId2pname(extendedTypeNum(ItemId)),
                      _policy.parmItemId(),
                      extendedTypeId2pname(extendedTypeNum(BOMId)),
                      _policy.parmBomId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Rebuild this instance to make it ready for circularity detection.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     Thrown if this instance is already in the rebuilding state.
    /// </exception>
    public void rebuild()
    {
        this.init();
        this.loadNodesAndEdges();
        rebuildSucceeded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildIfNecessary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     If necessary, rebuild this instance to make it ready for circularity detection.
    /// </summary>
    public void rebuildIfNecessary()
    {
        if (!rebuildSucceeded)
        {
            this.rebuild();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showStack</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shows the stack of policies where a circular dependency was detected.
    /// </summary>
    public void showStack()
    {
        ReqSupplyPolicy policy;

        while (dependencyAnalyzer.getStack().count() > 0)
        {
            policy = dependencyAnalyzer.getStack().pop();
            info(this.policyToString(policy));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedProductDimensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the set of supported product dimension fields.
    /// </summary>
    /// <returns>
    ///     The set of supported product dimension fields.
    /// </returns>
    public Set supportedProductDimensionFields()
    {
        if (supportAllProductDimensions)
        {
            return InventDim::dimFieldList2Set(InventDim::dimProductDimensionEnabledFieldList());
        }

        Set fields = new Set(Types::Integer);
        fields.add(fieldNum(InventDim, ConfigId));
        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedStorageDimensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the set of supported storage dimension fields.
    /// </summary>
    /// <returns>
    ///     The set of supported storage dimension fields.
    /// </returns>
    public Set supportedStorageDimensionFields()
    {
        Set fields = new Set(Types::Integer);

        fields.add(fieldNum(InventDim, InventSiteId));
        fields.add(fieldNum(InventDim, InventLocationId));

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRebuildSucceeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Is BOM graph rebuild necessary
    /// </summary>
    /// <returns>
    ///     The state of the flag
    /// </returns>
    internal boolean isRebuildSucceeded()
    {
        return rebuildSucceeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMDependencyManager construct()
    {
        return new BOMDependencyManager();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>