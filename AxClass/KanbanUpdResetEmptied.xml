<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanUpdResetEmptied</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanUpdResetEmptied</c> class performs a status reset for kanbans that have the current
///    status set to emptied.
/// </summary>
public class KanbanUpdResetEmptied extends KanbanUpdReset
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the data that is required to update a ledger voucher.
    /// </summary>
    protected void beginLedger()
    {
        if (kanban.type().mustBeInventoryControlled())
        {
            // a voucher is only required, if an inventory transaction is going to be posted.
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs actions for the emptied status reset.
    /// </summary>
    protected void cleanUp()
    {
        this.deleteInvalidKanban();
        this.reAssignKanbanCard();
        this.resetEmptiedDateTime();
        this.beginLedger();
        this.resetUpdatePhysicalKanbanEmpty();
        this.commitLedger();
        this.updateKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInvalidKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes an invalid kanban if one was specified.
    /// </summary>
    protected void deleteInvalidKanban()
    {
        if (kanbanStatusUpdate.DeleteKanban)
        {
            ttsbegin;
            Kanban kanbanDelete = Kanban::find(kanbanStatusUpdate.DeleteKanban,true);
            if (kanbanDelete)
            {
                // if any jobs are not in the initial status, reset these to 'not planned';
                // otherwise the kanban cannot be deleted.
                KanbanJob kanbanJob = kanbanDelete.firstKanbanJob();
                if (   kanbanJob.Status != LeanKanbanJobStatus::NotPlanned
                    || kanbanJob.existLaterJobNotInStatus(LeanKanbanJobStatus::NotPlanned))
                {
                    kanbanJob = kanbanDelete.lastKanbanJob();
                    while (kanbanJob.RecId)
                    {
                        if (kanbanJob.Status != LeanKanbanJobStatus::NotPlanned)
                        {
                            kanbanJob.status().runReset(LeanKanbanJobStatus::NotPlanned);
                        }
                        kanbanJob = kanbanJob.previousJob();
                    }

                    kanbanDelete.reread();
                }

                // delete invalid kanban
                kanbanDelete.delete();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reAssignKanbanCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reassigns the kanban card to a kanban.
    /// </summary>
    protected void reAssignKanbanCard()
    {
        boolean     result = true;

        if (kanbanStatusUpdate.KanbanCard)
        {
            ttsbegin;
            KanbanCard kanbanCard = KanbanCard::find(kanbanStatusUpdate.KanbanCard,true);

            if (   kanbanCard
                && kanbanCard.Kanban != kanban.RecId)
            {
                if (kanbanCard.KanbanRule != kanban.KanbanRule)
                {
                    KanbanRule kanbanRule = kanban.kanbanRule();
                    result = kanbanCard.reAssignToRule(kanbanRule,true);
                }

                if (result)
                {
                    result = KanbanCard::assignToKanban(kanbanCard,kanban);
                    kanban.reread();
                }

                if (!result)
                {
                    throw error(strFmt("@GLS180217",kanbanCard.CardId,kanban.KanbanId));
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetEmptiedDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the empty date of the kanban.
    /// </summary>
    protected void resetEmptiedDateTime()
    {
        kanban.EmptiedDateTime = DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUpdatePhysicalKanbanEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the inventory transaction for an empty kanban.
    /// </summary>
    protected void resetUpdatePhysicalKanbanEmpty()
    {
        InventCostMovement          inventCostMovement;

        if (kanban.type().mustBeInventoryControlled())
        {
            InventMovement inventMovement = kanban.inventMovement();
            InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(inventMovement.inventTransOriginId());

            //packing slip returned
            InventQty inventQty = inventTransIdSum.physical();
            if (inventQty)
            {
                InventUpd_Physical inventUpd_Physical = InventUpd_Physical::newKanban(kanban);
                inventUpd_Physical.parmPhysical(-inventQty);
                inventUpd_Physical.parmPhysicalUnit(-inventQty);
                inventUpd_Physical.parmReturnMode(InventUpdate::physicalReturn());
                inventUpd_Physical.updateNow(ledgerVoucher);

                // create new indirect cost for the reset

                inventCostMovement = inventUpd_Physical.movement().inventModelType().inventCostMovement();
                costUpd.addDirectMaterialConsumption(inventCostMovement.parmInventItemPrice(),
                                                     -inventCostMovement.totalQty());
            }

            //invoice returned
            inventQty = inventTransIdSum.financial();
            if (inventQty)
            {
                InventUpd_Financial inventUpd_Financial = InventUpd_Financial::newKanbanMovement(inventMovement,
                                                                                                 ledgerVoucher,
                                                                                                 -inventQty,0,0);
                inventUpd_Financial.updateNow();

                // create new indirect cost for the reset
                inventCostMovement = inventUpd_Financial.movement().inventModelType().inventCostMovement();
                costUpd.addDirectMaterialConsumption(inventCostMovement.parmInventItemPrice(),
                                                     -inventCostMovement.totalQty());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>Kanban</c> record.
    /// </summary>
    /// <remarks>
    ///    This method must have a record already selected for an update.
    /// </remarks>
    protected void updateKanban()
    {
        this.setStatus(LeanKanbanStatus::Received);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanUpdReset construct()
    {
        return new KanbanUpdResetEmptied();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
