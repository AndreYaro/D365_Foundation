<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmSalesUnitTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmmSalesUnitTree extends smmFormTreeDatasource
{
    smmSalesUnitType    unitType;
    smmSalesUnit        salesUnit;
    smmSalesUnitId      salesUnitId;
    FormRun             formRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildSubTree</Name>
				<Source><![CDATA[
    protected int buildSubTree(int _parentIdx, anytype _parentValue, boolean _rebuild = false)
    {
        smmSalesUnit    smmSalesUnit;
        FormTreeItem    formTreeItem;
        Common          childRecord;
        QueryRun        childQuery;
        int             children;
        int             idx;
        int             idxCurrentRecord;
        int             hdl;
        anytype         idValue;
        int             type;
        str             selectedDataStr;

        if (_rebuild || !doneNode.in([_parentIdx]))
        {
            // Delete existing subtree
            if (_rebuild)
            {
                hdl = tree.getChild(_parentIdx);
                while (hdl)
                {
                    doneNode.remove([hdl]);
                    tree.delete(hdl);
                    hdl = tree.getChild(_parentIdx);
                }
            }

            [SelectedData] = selectionStack.pop();

            children = 0;

            childQuery = this.subTreeQueryRun(_parentValue);

            while (childQuery.next())
            {
                childRecord = childQuery.get(formDataSource.table());
                this.getChildRecord(childRecord);

                idValue = childRecord.(id);

                formTreeItem = new FormTreeItem(this.itemText(childRecord.(id),
                                                childRecord.(txt)),
                                                0,
                                                this.subTreeQueryRun(childRecord.(id)).next(),
                                                idValue);

                formTreeItem    = this.modifyFormTreeItem(formTreeItem);

                if (childRecord.TableId == tablenum(smmSalesUnit))
                {
                    smmSalesUnit = childRecord;
                    formTreeItem.text(smmSalesUnit.SalesUnitId);
                }

                idx = tree.addItem(_parentIdx, 0, formTreeItem);

                if (basicRecId == childRecord.RecId)
                {
                    idxCurrentRecord = idx;
                }

                children++;

                type = typeof(selectedData);

                if (type == Types::Integer)
                {
                    selectedDataStr = int2str(selectedData);
                }

                if (selectionStack.qty())
                {
                    if (idValue == SelectedData)
                    {
                        tree.expand(idx, FormTreeExpand::Expand);
                    }
                }
                else
                {
                    if (selectedDataStr)
                    {
                        if (idValue == selectedDataStr)
                        {
                            selectIdx = idx;
                        }
                    }
                    else
                    {
                        if (idValue == SelectedData)
                        {
                            selectIdx = idx;
                        }
                    }
                }
            }

            formTreeItem = tree.getItem(_parentIdx);
            formTreeItem.children(children);
            tree.setItem(formTreeItem);
        }

        doneNode.add([_parentIdx]);

        return idxCurrentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDialog</Name>
				<Source><![CDATA[
    public Dialog createDialog()
    {
        #define.DialogField2(2)

        DictTable       dictTable   = new DictTable(formDataSource.table());
        Dialog          dialog      = new Dialog(dictTable.label());
        DialogGroup     dialogGroup;
        DictFieldGroup  dictFieldGroup;
        int             counter;

        dialogGroup           =  dialog.addGroup('');
        formBuildGroupControl = dialogGroup.formGroup();

        formBuildGroupControl.frameType(1);

        dictFieldGroup = new DictFieldGroup(dictTable.id(), treeList);

        if (dictFieldGroup)
        {
            for (counter = 1; counter <= dictFieldGroup.numberOfFields(); counter++)
            {
                SysDictField sysDictField = new SysDictField(dictTable.id(), dictFieldGroup.field(counter));
                boolean ignoreEDTConstraints = id == sysDictField.id();
                DialogField dialogField = dialog.addField(sysDictField.typeName(), sysDictField.label(), sysDictField.help(), ignoreEDTConstraints);

                if (counter == #DialogField2)
                {
                    if (salesUnit)
                    {
                        dialogField.value(salesUnit.SalesUnitId);
                    }
                    else
                    {
                        dialogField.value('');
                    }
                }
            }
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandAndSelect</Name>
				<Source><![CDATA[
    public void expandAndSelect(smmSalesUnit _smmSalesUnit)
    {
        Stack               stack;
        smmSalesUnitId      smmSalesUnitId,smmSalesUnitIdTree;
        int                 idx;

        if (!_smmSalesUnit)
        {
            return;
        }

        stack = new Stack();
        this.getParent(_smmSalesUnit.SalesUnitId, stack);

        this.initSelectIdx();

        // Sales unit
        this.initRoot("@SYS79797", '');

        tree.lockWindowUpdate(true);
        idx = tree.getRoot();
        while (stack.qty())
        {
            [smmSalesUnitId]     = stack.pop();
            smmSalesUnitIdTree   = tree.getItem(idx).data();

            while (smmSalesUnitIdTree != smmSalesUnitId)
            {
                idx = tree.getNextVisible(idx);
                smmSalesUnitIdTree   = tree.getItem(idx).data();
            }

            tree.select(idx);

            if (stack.qty())
            {
                tree.expand(idx, FormTreeExpand::Expand);
            }
        }

        tree.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParent</Name>
				<Source><![CDATA[
    public void getParent(smmSalesUnitId _smmSalesUnitParentId, Stack _stack)
    {
        smmSalesUnit    smmSalesUnit;

        select firstonly smmSalesUnit where smmSalesUnit.SalesUnitId == _smmSalesUnitParentId;

        if (smmSalesUnit)
        {
            _stack.push([smmSalesUnit.SalesUnitId]);
            this.getParent(smmSalesUnit.ParentId, _stack);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    public Imagelist imageList()
    {
        #ResAppl
        #Resource

        Imagelist   imagelist;

        imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());

        imagelist.add(new Image(#ImageBOM));

        return imagelist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelectIdx</Name>
				<Source><![CDATA[
    public void initSelectIdx()
    {
        selectIdx = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public Common initValue(Common _common)
    {
        Common common = _common;

        if (common.TableId == tablenum(smmSalesUnit))
        {
            common.(fieldnum(smmSalesUnit, UnitType)) = unitType;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>organizationType</Name>
				<Source><![CDATA[
    public void organizationType(smmSalesUnitType _smmSalesUnitType, boolean _showOnlyActive = false)
    {
        QueryRun            queryRun;
        QueryBuildRange     rangeOrganizationType;
        QueryBuildRange     rangeActive;

        unitType = _smmSalesUnitType;

        queryRun = new QueryRun(originalQuery);

        rangeOrganizationType = queryRun.query().dataSourceNo(1).findRange(fieldnum(smmSalesUnit, UnitType));

        if (!rangeOrganizationType)
        {
            rangeOrganizationType = queryRun.query().dataSourceNo(1).addRange(fieldnum(smmSalesUnit, UnitType));
        }

        rangeOrganizationType.value(enum2str(_smmSalesUnitType));

        rangeActive = queryRun.query().dataSourceNo(1).findRange(fieldnum(smmSalesUnit, Active));

        if (!rangeActive)
        {
            rangeActive = queryRun.query().dataSourceNo(1).addRange(fieldnum(smmSalesUnit, Active));
        }

        if (_showOnlyActive == true)
        {
            rangeActive.value(queryValue(NoYes::Yes));
        }
        else
        {
            rangeActive.value('');
        }

        originalQuery = queryRun.pack();

        formDataSource.query(queryRun.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    public smmSalesUnit salesUnit(smmSalesUnit _salesUnit = salesUnit)
    {
        salesUnit = _salesUnit;

        return salesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnitId</Name>
				<Source><![CDATA[
    public smmSalesUnitId salesUnitId(smmSalesUnitId _salesUnitId = salesUnitId)
    {
        salesUnitId = _salesUnitId;

        return salesUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDatasource</Name>
				<Source><![CDATA[
    public void selectDatasource()
    {
        smmSalesUnit smmSalesUnit;

        smmSalesUnit = smmSalesUnit::find(this.salesUnitId());
        formDataSource.positionToRecord(smmSalesUnit);
        formDataSource.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    public void selectionChanged(FormTreeItem _oldItem = null, FormTreeItem _newItem = null)
    {
        smmSalesUnit smmSalesUnit;

        if (!_newItem)
        {
            _newItem = tree.getItem(tree.getSelection());
        }

        oldIdx  = _oldItem.idx();
        newIdx  = _newItem.idx();

        selectedData = _newItem.data();

        this.salesUnitId(_newItem.data());

        smmSalesUnit = smmSalesUnit::find(this.salesUnitId());

        if (smmSalesUnit)
        {
            formDataSource.executeQuery();
        }
        else
        {
            smmSalesUnit.clear();
        }

        this.setDatasourceStatus(_newItem.idx());

        formDataSource.positionToRecord(smmSalesUnit);
        formDataSource.refresh();
        formDataSource.active();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>