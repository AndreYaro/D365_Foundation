<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalVoucherObject</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalVoucherObject</c> class is used to keep the data per voucher number.
/// </summary>
/// <remarks>
///    The usage of this class in the inventory and production journals is limited. It is only used to
///    make it possible to have a new voucher number for each item or production number.
///    A journal can
///    consist of many voucher numbers. To contain voucher numbers, a voucher list class has been
///    implemented.
/// </remarks>
// This class contains data per voucher.
// It should be extended if a voucher has more total fields than NumOfLines or other key fields than the date

class JournalVoucherObject
{
    JournalVoucherList      journalVoucherList;

    // record fields

    TransDate               rec_TransDate;
    Voucher                 rec_Voucher;
    JournalNumOfLines       rec_NumOfLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotal</Name>
				<Source><![CDATA[
        // Must be overload if having further total fields per voucher
    //
    // Example:
    //
    // void addTotal(
    //     JournalTransMap      _journalTrans,
    //     boolean              _reverse = false
    //     )
    // {
    //     super(_journalTrans,_reverse);
    //
    //     rec_ExCostAmount += _reverse ? -_journalTrans.exCostAmount : _journalTrans.exCostAmount;
    // }

    public void addTotal(
        JournalTransMap _journalTrans,
        boolean         _reverse = false)
    {
        rec_NumOfLines += _reverse ? -1 : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>data</Name>
				<Source><![CDATA[
        // Must be overload if having further total fields per voucher
    //
    // Example:
    //
    // container data()
    // {
    //     return [rec_numOfLines,rec_exCostAmount];
    // }

    public container data()
    {
        return [rec_NumOfLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJournalTransData</Name>
				<Source><![CDATA[
        public void initFromJournalTransData(
        JournalTransData    _journalTransData,
        boolean             _init)
    {
        rec_Voucher = _journalTransData.journalTrans().Voucher;

        this.setKey(_journalTransData.voucherObjectKey());

        if (_init)
        {
            this.initTotal(_journalTransData.journalTrans().JournalId,_journalTransData.journalTrans().Voucher);
        }
        else
        {
            this.setData(conNull());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotal</Name>
				<Source><![CDATA[
        // Must be overload if having further total fields per voucher
    //
    // Example:
    //
    // void initTotal(
    //     journalId   _journalId,
    //     voucher     _voucher)
    // {
    //     this.setdata(xxxJournalVoucherObject::packInitTotal(_journalId,_voucher));
    // }

    protected void initTotal(
        JournalId   _journalId,
        Voucher     _voucher)
    {
        this.setData([0]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
        // Must be overloaded if having further key fields saved per voucher.
    //
    // Example:
    //
    // container key()
    // {
    //     switch (xxxJournalTable.VoucherChange)
    //    {
    //        case InventJournalVoucherChange::DateChange         : return [rec_transDate];
    //        case InventJournalVoucherChange::DateItemChange     : return [rec_transDate,rec_ItemId];
    //        case InventJournalVoucherChange::DateBalanceChange  : return [rec_transDate];
    //    }
    //
    //    return super();
    //}

    public container key()
    {
        return [rec_TransDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(JournalVoucherList _journalVoucherList)
    {
        journalVoucherList = _journalVoucherList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
        public JournalNumOfLines numOfLines(JournalNumOfLines _numOfLines = rec_NumOfLines)
    {
        rec_NumOfLines = _numOfLines;
        return rec_NumOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setData</Name>
				<Source><![CDATA[
        // Must be overloaded if having further data fields saved per voucher.
    //
    // Example:
    //
    // void setData(container _setData = conNull())
    // {
    //     [rec_numOfLines,rec_exCostAmount] = _setData;
    // }

    public void setData(container _setData = conNull())
    {
        [rec_NumOfLines] = _setData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setKey</Name>
				<Source><![CDATA[
        // Must be overloaded if having further key fields saved per voucher.
    //
    // Example:
    //
    // void setKey(container _setKey =conNull())
    // {
    //     switch (xxxJournalTable.VoucherChange)
    //     {
    //         case InventJournalVoucherChange::DateChange         :
    //             [rec_transDate] = _setKey;
    //             break;
    //
    //        case InventJournalVoucherChange::DateItemChange     :
    //            [rec_transDate,rec_ItemId] = _setKey;
    //            break;
    //
    //        case InventJournalVoucherChange::DateBalanceChange  :
    //            [rec_transDate] = _setKey;
    //            break;
    //    }
    // }

    public void setKey(container _setKey =conNull())
    {
        [rec_TransDate] = _setKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucher</Name>
				<Source><![CDATA[
        public Voucher voucher(Voucher _voucher = rec_Voucher)
    {
        rec_Voucher = _voucher;
        return rec_Voucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>