<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsPrintMgmtController_Copilot_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.SSRSReportRuntime.Instrumentation;
using Newtonsoft.Json.Linq;

[ExtensionOf(classStr(SrsPrintMgmtController))]
internal final class SrsPrintMgmtController_Copilot_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initQueryFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// For print management, <c>initQueryFromContract</c> is used instead of <c>preRunModifyContract</c>
    /// It will ensure the data contract values from copilot are used for RDP data pre-processing.
    /// </summary>
    protected void initQueryFromContract()
    {
        next initQueryFromContract();

        if (SrsFinanceCopilotContractUtil::useReportCopilotV2())
        {
            if (this.parmArgs() && this.parmArgs().caller())
            {
                // Only apply the changes for Copilot scenario.
                if (SrsFinanceCopilotContractUtil::isCopilotExecution(this.parmArgs().caller()))
                {
                    var controllerContract = SrsFinanceCopilotContractUtil::setRdpDataContractFromJson(this.parmArgs().caller(), this.parmReportContract().parmRdpContract());
                    this.parmReportContract().parmRdpContract(controllerContract);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// There are two major things we need to enforce before running report for Copilot:
    ///     1. The print destination is set to File (byte arrary will be used later with Foundation support.
    ///     2. The RDP contract is overwritten if the contract value is provided from Copilot.
    /// </summary>
    public void runReport()
    {
        if (SrsFinanceCopilotContractUtil::useReportCopilotV2())
        {
            if (this.parmArgs() && this.parmArgs().caller())
            {
                // Only apply the changes for Copilot scenario.
                if (SrsFinanceCopilotContractUtil::isCopilotExecution(this.parmArgs().caller()))
                {
                    // Update print destination to file.
                    SSRSReportSharedEventSource::EventWriteSharedInformation("Update print destination to file for Copilot.");
                    this.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::File);
                    this.parmReportContract().parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);

                    // Set report run id for File output.
                    // Note, this is workaround for Copilot scenario because we don't have native API
                    // available in foundation layer to render the report to byte array.
                    // The report run id is used as identifier to download report from blob storage
                    // and convery to byte array in memeor.
                    // This logic can be simplified after foundation support is available.
                    this.parmReportContract().parmReportExecutionInfo().parmReportRunId(SrsFinanceCopilotContractUtil::getReportRunId(this.parmArgs().caller()));

                    // Only apply the changes for Copilot scenario.
                    if (SrsFinanceCopilotContractUtil::isCopilotExecution(this.parmArgs().caller()))
                    {
                        var controllerContract = SrsFinanceCopilotContractUtil::setRdpDataContractFromJson(this.parmArgs().caller(), this.parmReportContract().parmRdpContract());
                        this.parmReportContract().parmRdpContract(controllerContract);
                    }
                }
            }
        }

        next runReport();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>