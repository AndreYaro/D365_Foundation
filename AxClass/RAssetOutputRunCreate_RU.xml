<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetOutputRunCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetOutputRunCreate_RU extends RunBaseBatch implements BatchRetryable
{
    QueryRun    queryRun;

    RAssetUseValue  valueExport, valueNotLiable;
    TransDate       dateFrom, dateTo;

    DialogField     dlgDateFrom, dlgDateTo, dlgValueExport,
                    dlgValueNotLiable;
    boolean         copy;


    #define.CurrentVersion(1)
    #localmacro.currentList
         dateFrom,
         dateTo,
         valueExport,
         valueNotLiable
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    protected Counter copy(RAssetTable _rAssetTable)
    {
        RAssetUse rAssetUsePrev;
        TransDate prevDateFrom, prevDateTo, prevDate, nxtDate;
        Counter   cnt, cntFailed;

        prevDateTo      = dateFrom   - 1;
        prevDateFrom    = prevDateTo - (dateTo - dateFrom + 1);

        if (prevDateTo <= prevDateFrom)
            return 0;

        while select UseValueExport, UseValueNotliable, UseDate from rAssetUsePrev
            order by UseDate
            where rAssetUsePrev.AssetId == _rAssetTable.AccountNum  &&
                  rAssetUsePrev.UseDate >= prevDateFrom             &&
                  rAssetUsePrev.UseDate <= prevDateTo
        {
            valueExport     = rAssetUsePrev.UseValueExport;
            valueNotLiable  = rAssetUsePrev.UseValueNotliable;

            if (prevDate)
            {
                nxtDate = nxtDate + (rAssetUsePrev.UseDate - prevDate) + 1;
            }
            else
            {
                nxtDate = dateFrom;
            }

            if (this.createLine(_rAssetTable.AccountNum, nxtDate))
            {
                ++cnt;
            }
            else
            {
                ++cntFailed;
            }

            prevDate = rAssetUsePrev.UseDate;
        }

        if (cntFailed)
        {
            warning(strfmt("@GLS114215", _rAssetTable.AccountNum));
        }

        return cnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    protected Counter create(RAssetTable _rAssetTable)
    {
        return this.createLine(_rAssetTable.AccountNum, dateFrom) ? 1 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    private boolean createLine(RAssetId _assetId, StartDate _useDate)
    {
        RAssetUse rAssetUse;
        boolean   ret;
        ;

        rAssetUse = RAssetUse::findMth(_assetId, _useDate, true);

        if(rAssetUse.UseValue == 0)
        {
            rAssetUse.UseValue = valueExport + valueNotLiable;
        }

        rAssetUse.UseValueExport    = valueExport;
        rAssetUse.UseValueNotliable = valueNotLiable;

        if(!rAssetUse)
        {
            rAssetUse.AssetId  = _assetId;
            rAssetUse.UseDate  = _useDate;
        }


        if (rAssetUse.UseValueExport)
        {
            ret = rAssetUse.validateField(fieldnum(RAssetUse, UseValueExport));
        }

        if (rAssetUse.UseValueNotliable)
        {
            ret = rAssetUse.validateField(fieldnum(RAssetUse, UseValueNotliable));
        }

        if(ret && (rAssetUse.UseValue >= (rAssetUse.UseValueExport + rAssetUse.UseValueNotliable)))
        {
            rAssetUse.write();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        dialog.addGroup("@SYS40");
        dlgDateFrom         = dialog.addFieldValue(extendedTypeStr(StartDate), dateFrom);
        dlgDateTo           = dialog.addFieldValue(extendedTypeStr(EndDate), dateTo);

        dialog.addGroup("@SYS16124").visible(!this.parmCopy());
        dlgValueExport      = dialog.addFieldValue(extendedTypeStr(RAssetUseValue), valueExport,     "@GLS114216");
        dlgValueNotLiable   = dialog.addFieldValue(extendedTypeStr(RAssetUseValue), valueNotLiable,  "@GLS114217");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        dateFrom        = dlgDateFrom.value();
        dateTo          = dlgDateTo.value();
        valueExport     = dlgValueExport.value();
        valueNotLiable  = dlgValueNotLiable.value();

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query                   query;
        QueryBuildDataSource    qbds;

        super();

        query = new Query();
        qbds  = query.addDataSource(tablenum(RAssetTable));
        findOrCreateRange_W(qbds, fieldnum(RAssetTable, Status), queryValue(RAssetStatus::Open));

        qbds  = qbds.addDataSource(tablenum(RAssetStandards));
        qbds.relations(true);
        findOrCreateRange_W(qbds, fieldnum(RAssetStandards, AssetStandardId),
                            RAssetParameters::standardIdDefault()).status(RangeStatus::Locked);
        findOrCreateRange_W(qbds, fieldnum(RAssetStandards, DisposalDate),
                            queryValue(dateNull())).status(RangeStatus::Locked);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
        [dateFrom, dateTo] = BookDataCalc_RU::datePeriodBook(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.query().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopy</Name>
				<Source><![CDATA[
    boolean parmCopy(boolean _copy = copy)
    {
        copy = _copy;

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetTable     rAssetTable;
        RAssetStandards rAssetStandards;
        Counter cnt;

        setprefix("@GLS114204");
        while (queryRun.next())
        {
            rAssetTable = queryRun.get(tablenum(RAssetTable));
            rAssetStandards = queryRun.get(tablenum(RAssetStandards));

            if (rAssetStandards.assetDeprMethod(dateTo) == RAssetDeprMethod::Value)
            {
                setprefix(strfmt("@SYS26868", rAssetTable.AccountNum, rAssetTable.Name));
                ttsbegin;
                if(this.parmCopy())
                {
                    cnt += this.copy(rAssetTable);
                }
                else
                {
                    cnt += this.create(rAssetTable);
                }
                ttscommit;
            }
        }

        info(strfmt("@GLS114198", cnt));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);
        container   conQuery;
        Query       query;
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, conQuery] = _packedClass;
                query    = new Query(conQuery);
                queryRun = new QueryRun(query);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (dateFrom == dateNull())
        {
            ret = checkFailed("@GLS114232");
        }

        if (dateTo == dateNull())
        {
            ret = checkFailed("@GLS114233");
        }

        if (ret && dateFrom > dateTo)
        {
            ret = checkFailed("@GLS63223");
        }

        if (!this.parmCopy())
        {
            if ((valueExport + valueNotLiable) == 0)
            {
                ret = checkFailed("@GLS114201");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static RAssetOutputRunCreate_RU construct()
    {
        RAssetOutputRunCreate_RU  createCopy = new RAssetOutputRunCreate_RU();

        return createCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS114204";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RAssetOutputRunCreate_RU    outputRunCreate;
        ;


        outputRunCreate = RAssetOutputRunCreate_RU::construct();

        if (_args.parmEnumType() == enumnum(NoYes))
        {
            outputRunCreate.parmCopy(_args.parmEnum());
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (outputRunCreate.prompt())
        {
            outputRunCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>