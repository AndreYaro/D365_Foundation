<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceOnhandChangeScheduleBatchJobTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceOnhandChangeScheduleBatchJobTask extends InventInventoryDataServiceBatchJobTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    internal System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventInventoryDataServiceOnhandChangeScheduleBatchJobTask),
                                                          staticMethodStr(InventInventoryDataServiceOnhandChangeScheduleBatchJobTask, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    protected static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventInventoryDataServiceOnhandChangeScheduleBatchJobTask  dataCollectionTask = new InventInventoryDataServiceOnhandChangeScheduleBatchJobTask();
        container packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventInventoryDataServiceOnhandChangeScheduleQueueTemp ohcsQueueTmp;
        List ohcsList = new List(Types::Class);

        while select ohcsQueueTmp
            where ohcsQueueTmp.RecId >= minRecId
              &&  ohcsQueueTmp.RecId <= maxRecId
        {
            ohcsList.addEnd(InventOnHandChangeSchedule::buildFromOhcsQueue(ohcsQueueTmp));
        }

        if (!ohcsList.empty())
        {
            this.postOhcsQueueList(ohcsList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postOhcsQueueList</Name>
				<Source><![CDATA[
    private void postOhcsQueueList(List _ohcsList)
    {
        var inventoryServiceClient = new InventoryServiceClient();
        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();

        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostOnhandChangeSchedule())
        {
            InventInventoryDataServiceBulkPostingResponse response;
            str correlationId = '';
            InventInventoryDataServiceOnhandChangeScheduleQueueTemp ohcsQueueTemp;

            try
            {
                try
                {
                    response = inventoryServiceClient.postOnhandChangeSchedule(_ohcsList);
                }
                catch
                {
                    if (InventInventoryDataServiceRetryHelper::retryTransientError())
                    {
                        retry;
                    }
                    else
                    {
                        throw;
                    }
                }

                correlationId = response.parmCorrelationId();
                var failedOhcsList = response.parmFailure();
                var successOhcs = response.parmSuccess();

                if (failedOhcsList.elements() != 0)
                {
                    str failedRecIdsAndErrorMessages = '';

                    ttsbegin;
                    ListEnumerator failedOhcsEnumerator = failedOhcsList.getEnumerator();
                    while(failedOhcsEnumerator.moveNext())
                    {
                        InventInventoryDataServicePostingResponse failedOhcs = failedOhcsEnumerator.current();
                        var ohcsRecid = any2Int64(strRem(failedOhcs.parmId(), 'ohcs~'));

                        select forupdate ohcsQueueTemp where ohcsQueueTemp.RecId == ohcsRecid;

                        if (match('<The on\\-hand schedule date should be between', failedOhcs.parmMessage()))
                        {
                            ohcsQueueTemp.DateExceedsMax = true;
                        }

                        ohcsQueueTemp.PostFailed = true;
                        ohcsQueueTemp.update();

                        failedRecIdsAndErrorMessages += failedOhcs.parmId() + ': ';
                        failedRecIdsAndErrorMessages += failedOhcs.parmMessage() + '; ';
                    }
                    ttscommit;

                    NoYes postSuccessed = failedRecIdsAndErrorMessages == '' ? NoYes::Yes : NoYes::No;
                    inventInventoryDataServiceInstrumentationActivity.logPostOnhandChangeScheduleEventInfo(activityContext, minRecId, maxRecId, postSuccessed, correlationId, failedRecIdsAndErrorMessages);
                }
            }
            catch
            {
                ttsbegin;
                update_recordset ohcsQueueTemp
                    setting PostFailed = true
                    where ohcsQueueTemp.RecId >= minRecId
                        && ohcsQueueTemp.RecId <= maxRecId;
                    
                ttscommit;

                inventInventoryDataServiceInstrumentationActivity.logPostOnhandChangeScheduleEventInfo(activityContext, minRecId, maxRecId, NoYes::No, correlationId, 'Post request failed. Please find more information for this request on Kusto.');
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>