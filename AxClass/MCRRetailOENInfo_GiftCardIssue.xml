<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRetailOENInfo_GiftCardIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generate event notification for gift card issue.
/// </summary>
class MCRRetailOENInfo_GiftCardIssue extends RetailOENInfo
{
    SalesLine salesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return the retail event notification type.
    /// </summary>
    /// <returns>
    /// Retail event notification type.
    /// </returns>
    public RetailEventNotificationType EventNotificationType()
    {
        return RetailEventNotificationType::MCRIssueGiftCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSaleslineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the object of <c>SalesLine</c> table with replacing e-mail related placeholders with the actual subject, message etc.
    /// </summary>
    /// <param name="saleslineTableTemplate">
    /// String containing the template for message.
    /// </param>
    /// <returns>
    /// Message template with actual subject and message.
    /// </returns>
    protected str generateSaleslineTable(str saleslineTableTemplate)
    {
        Map             saleslineMap = new Map(Types::String,Types::String);
        MCRSalesLine    mcrSalesLine;
        RetailGiftCardTransactions retailGiftCardTransactions;

        CurrencySymbol currencySymbol = RetailENInfo::GetCurrencySymbol(salesLine);

        saleslineMap.insert(#ProductName, salesLine.itemName());
        saleslineMap.insert(#ProductDescription,
                            EcoResProductTranslation::getDescriptionOrDefaultDescription(InventTable::find(salesLine.ItemId).Product, CompanyInfo::languageId()));
        saleslineMap.insert(#Quantity, num2str(salesLine.SalesQty,0,3,1,0));

        saleslineMap.insert(#Price, RetailENInfo::formatNumericDataInternal(salesLine.SalesPrice, languageId, currencySymbol));
        saleslineMap.insert(#LineDiscount, RetailENInfo::formatNumericDataInternal(salesLine.LineDisc, languageId, currencySymbol));
        saleslineMap.insert(#NetAmount, RetailENInfo::formatNumericDataInternal(salesLine.LineAmount, languageId, currencySymbol));

        saleslineMap.insert(#LineDeliveryDate, RetailENInfo::formatDatetimeData(salesLine.deliveryDate(), languageId));
        saleslineMap.insert(#LineShipDate, RetailENInfo::formatDatetimeData(salesLine.ShippingDateRequested, languageId));
        saleslineMap.insert(#LineDeliveryMode, dlvMode::find(salesLine.DlvMode).Txt);
        saleslineMap.insert(#LineDeliveryAddress, salesLine.deliveryAddress().Address);
        saleslineMap.insert(#LineUnit, salesLine.SalesUnit);

        select firstOnly Amount, CardNumber from retailGiftCardTransactions
            where retailGiftCardTransactions.MCRInventTransId == salesLine.InventTransId
                && retailGiftCardTransactions.Operation == RetailGiftCardOperation::Issue;
        if (retailGiftCardTransactions)
        {
            saleslineMap.insert(#GiftCardBalance, RetailENInfo::formatNumericDataInternal(retailGiftCardTransactions.Amount, languageId, currencySymbol));

            saleslineMap.insert(#GiftCardNumber, retailGiftCardTransactions.CardNumber);
        }

        select firstOnly GiftCardGiftMessage, GiftCardNumber, GiftCardRecipientName, GiftCardBuyerName from mcrSalesLine
           where mcrSalesLine.SalesLine == salesLine.RecId;
        if (mcrSalesLine)
        {
            saleslineMap.insert(#UpcomingInventAvailDate, MCRRetailOENInfo_FTCNotice::getUpcomingInventAvailDate(salesLine));

            if (retailExternalGiftCard)
            {
                saleslineMap.insert(#GiftCardNumber, retailExternalGiftCard.CardNumber);
                saleslineMap.insert(#GiftCardPin, retailExternalGiftCard.Pin);
                saleslineMap.insert(#GiftCardExpiration, retailExternalGiftCard.Expiration);
                saleslineMap.insert(#GiftCardBalance, RetailENInfo::formatNumericDataInternal(salesLine.LineAmount, languageId, currencySymbol));
            }
            else
            {
                saleslineMap.insert(#GiftCardNumber, mcrSalesLine.GiftCardNumber);
            }

            saleslineMap.insert(#GiftCardMessage, mcrSalesLine.GiftCardGiftMessage);
            saleslineMap.insert(#GiftCardRecipientName, mcrSalesLine.GiftCardRecipientName);
            saleslineMap.insert(#GiftCardBuyerName, mcrSalesLine.GiftCardBuyerName);

        }

        return SysEmailMessage::stringExpand(saleslineTableTemplate, saleslineMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDetailInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates detail information about transaction.
    /// </summary>
    /// <param name="messageTemplate">
    /// String which has the transaction information.
    /// </param>
    /// <returns>
    /// Detail information about transaction.
    /// </returns>
    protected str generateDetailInfo(str messageTemplate)
    {
        return super(messageTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToAddr</Name>
				<Source><![CDATA[
    protected SysEmailAddress getToAddr()
    {
        return salesLine.mcrSalesLine().GiftCardRecipientEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialses the notification settings.
    /// </summary>
    /// <param name="_refRecId">
    /// Reference RecID.
    /// </param>
    public void initSetting(RefRecId _refRecId)
    {
        RetailChannelTable              retailChannelTable;

        select firstOnly notificationSetting
            where notificationSetting.EventNotificationType == this.EventNotificationType()
            join notificationProfile
            where notificationProfile.RecId == notificationSetting.EventNotificationProfile
            exists join retailChannelTable
            where retailChannelTable.EventNotificationProfileId == notificationProfile.ProfileId;

        salesLine = SalesLine::findRecId(_refRecId);
        this.resolveSalesOrder(_refRecId);

        this.initParameterMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds sales order and sets value to <c>RetailOENInfo</c>.
    /// </summary>
    /// <param name="_refRecId">
    /// Record id of <c>SalesLine</c>
    /// </param>
    public void resolveSalesOrder(RefRecId _refRecId)
    {
        this.parmSalesOrder(SalesTable::find(salesLine::findRecId(_refRecId).SalesId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>