<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanMultiJobDimPhysicalRegister</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanMultiJobDimPhysicalRegister</c> class handles the opening of the registration form
///    when it is required.
/// </summary>
public class KanbanMultiJobDimPhysicalRegister extends KanbanMultiJobDimPhysical
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the form to open.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    public formName formName()
    {
        return formstr(InventTransRegister);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds kanban jobs to the list of movements that require additional specification of registration
    ///    dimensions.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record.
    /// </param>
    protected void handleKanbanJob(KanbanJob _kanbanJob)
    {
        if (   targetKanbanJobStatus >= LeanKanbanJobStatus::Completed
            && _kanbanJob.type().mustBeInventoryControlledReceipt())
        {
            InventTransOriginId inventTransOriginId = _kanbanJob.receiptInventTransOriginId();
            if (this.mustAddToList(inventTransOriginId,_kanbanJob))
            {
                list.addEnd(_kanbanJob);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the registration form if it is required.
    /// </summary>
    /// <remarks>
    ///    The registration form does not show multiple movements at the same time. The form has to be opened
    ///    individually for each element in the list.
    /// </remarks>
    protected void openForm()
    {
        if (   list
            && list.elements())
        {
            Args args = new Args(this.formName());
            args.caller(this);

            listEnumerator = list.getEnumerator();
            while (listEnumerator.moveNext())
            {
                Common common = listEnumerator.current();
                args.record(common);
                FormRun formRun = classfactory.formRunClass(args);
                formRun.init();
                formRun.run();
                formRun.wait();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a packed <c>List</c> object of records.
    /// </summary>
    /// <returns>
    ///    A container that is a packed list of records; otherwise an empty packed list.
    /// </returns>
    public container packedList()
    {
        container   result;

        if (   list
            && listEnumerator)
        {
            List currentElementAsList = new List(Types::Record);
            currentElementAsList.addEnd(listEnumerator.current());
            result = currentElementAsList.pack();
        }
        else
        {
            result = new List(Types::Record).pack();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates which receipt inventory transactions must be considered.
    /// </summary>
    /// <returns>
    ///    A <c>StatusReceipt</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The inventory transactions with a status greater than the defined value must be considered.
    /// </remarks>
    protected StatusReceipt statusReceipt()
    {
        return StatusReceipt::Registered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanMultiJobDimPhysicalRegister</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>KanbanMultiJobDimPhysicalRegister</c> clsss.
    /// </returns>
    /// <remarks>
    ///    The class is instantiated on on the tier that it is called from. The class is frequently invoked from the server side and may open
    ///    a form, but this is considered the exceptional situation. In most cases opening the form should not be required and the execution can
    ///    remain on the called from tier.
    /// </remarks>
    private static KanbanMultiJobDimPhysicalRegister construct()
    {
        return new KanbanMultiJobDimPhysicalRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>KanbanMultiJobDimPhysicalRegister</c> object.
    /// </summary>
    /// <param name="_parmId">
    ///    A <c>ParmId</c> string value.
    /// </param>
    /// <param name="_targetKanbanJobStatus">
    ///    A <c>LeanKanbanJobStatus</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanMultiJobDimPhysicalRegister</c> object.
    /// </returns>
    public static KanbanMultiJobDimPhysicalRegister newStandard(
        ParmId              _parmId,
        LeanKanbanJobStatus _targetKanbanJobStatus)
    {
        KanbanMultiJobDimPhysicalRegister   kanbanMultiJobDimPhysicalRegister = KanbanMultiJobDimPhysicalRegister::construct();

        kanbanMultiJobDimPhysicalRegister.parmParmId(_parmId);
        kanbanMultiJobDimPhysicalRegister.parmTargetKanbanJobStatus(_targetKanbanJobStatus);

        return kanbanMultiJobDimPhysicalRegister;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
