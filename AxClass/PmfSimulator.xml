<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfSimulator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Simulator to simulate creating different records
/// </summary>
abstract class PmfSimulator
{
    Common  simulatedRecord;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the actual simulation based on the actual record passed when
    /// constructing this object.
    /// </summary>
    /// <returns>
    /// The simulated record.
    /// </returns>
    /// <remarks>
    /// The simulator has the potential to create / update various other
    /// records during the simulation. Therefore, a transaction rollback is invoked as
    /// this is merely a simulation.
    /// </remarks>
    public Common execute()
    {
        // An exception will deliberately be thrown at the end of the simulation which will cause a transaction rollback. This means that the database will be restored back to its initial state before
        // the first transaction was set, which in this scenario, is undesirable if this method was called within an existing transaction. Therefore, enforce that there are no existing transactions.
        if (appl.ttsLevel() != 0)
        {
            throw error("@PRO2835");
        }
        else
        {
            try
            {
                ttsBegin;

                // Run simulation.
                this.run();

                // Records may be created/updated during simulation; therefore, throwing an exception will invoke a transaction rollback.
                // Setting if condition will satisfy BP error checking.
                if (true)
                    throw Exception::Break;

                ttsCommit;
            }
            catch(Exception::Break)
            {
                // Satisfy the BP error of an empty compound statement.
                simulatedRecord = simulatedRecord;
            }
        }

        return simulatedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(Common _actual)
    {
        simulatedRecord = DictTable::construct(tableId2name(_actual.TableId)).makeRecord();

        this.updateRecord(_actual);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the actual simulation.
    /// </summary>
    protected abstract void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a simulated record's field with the actual record's
    /// corresponding field. The modifiedField method of the simulated record
    /// is called to handle any special handling when the specified field is
    /// updated.
    /// </summary>
    /// <param name="_actual">
    /// The actual record.
    /// </param>
    /// <param name="_fieldId">
    /// The field Id of the record's data field (simulated or actual).
    /// </param>
    protected void updateField(Common _actual, FieldId _fieldId)
    {
        simulatedRecord.(_fieldId) = _actual.(_fieldId);
        simulatedRecord.modifiedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the simulated record with the actual record. The class
    /// implementing this method should call updateField when updating each
    /// field. The class implementing this method is responsible to define which
    /// fields - which may be a subset of all available fields - are to be
    /// updated.
    /// </summary>
    /// <param name="_actualRecord">
    /// The actual record to update the simulated record from.
    /// </param>
    abstract protected void updateRecord(Common _actualRecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a simulator based on the actual record involved in the
    /// simulation.
    /// </summary>
    /// <param name="_actual">
    /// The actual record involved in the simulation.
    /// </param>
    /// <param name="_enum">
    /// Optional parameter that represents an enum or normal integer value. The
    /// value will be interpreted by the constructed simulator.
    /// </param>
    /// <returns>
    /// The constructed simulator. If the actual record is not supported, then
    /// null is returned.
    /// </returns>
    public static PmfSimulator construct(Common _actual, int _enum = 0)
    {
        PmfSimulator simulator;

        switch (_actual.TableId)
        {
            case tableNum(ProdTable):
                simulator = PmfProdTableSimulator::construct(_actual);
                break;
            case tableNum(ReqPO):
                simulator = PmfReqPOSimulator::construct(_actual, _enum);
                break;
        }

        return simulator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>