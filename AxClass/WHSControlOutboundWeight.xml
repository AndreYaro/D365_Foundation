<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSControlOutboundWeight</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSControlOutboundWeight</c> class is responsible for handling the outbound weight controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#OutboundWeight)]
public class WHSControlOutboundWeight extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        WHSWorkLine     workLine = controlData.parmWorkLine();
        ItemId          itemId;

        if (mode == WHSWorkExecuteMode::Movement
            || (mode == WHSWorkExecuteMode::MovementByTemplate && !workLine))
        {
            itemId = pass.lookupStr(#ItemId);
        }
        else
        {
            itemId = workLine.ItemId;
        }

        // Method should not be called for items that are not catch weight enabled.
        if (!PdsGlobal::pdsIsCWItem(itemId))
        {
            return this.fail(Error::wrongUseOfFunction(funcName()));
        }

        WHSTransWeight  catchWeight = decRound(WHSWorkExecuteDisplay::str2numDisplay(this.parmData()), InventTable::inventDecimals(itemId));
        PdsCWInventQty  catchWeightQty = this.getCatchWeightQty(workLine);
        
        if (!PDSCatchWeight::validateInventQty(itemId,
                                            catchWeight,
                                            catchWeightQty,
                                            false))
        {
            return this.fail(strFmt("@WAX:Error_InvalidCatchWeight", catchWeight, catchWeightQty, itemId));
        }

        if (WHSInventTable::outboundWeightVarianceMethod(itemId) == WHSOutboundWeightVarianceMethod::Restrict
            && !this.validateRemainingOnHandQuantity(itemId, workLine.InventDim(), catchWeightQty, catchWeight))
        {
            return false;
        }
        
        fieldValues.insert(WHSWorkExecuteDisplayCatchWeightControls::OutboundWeight, catchWeight);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    protected boolean defaultValueToBlank()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainingOnHandQuantity</Name>
				<Source><![CDATA[
    private boolean validateRemainingOnHandQuantity(ItemId _itemId, InventDim _workLineInventDim, PdsCWQty _outboundCWQty, WHSTransWeight _outboundWeight)
    {
        InventDim inventDim = _workLineInventDim;
        if (inventDim)
        {
            inventDim.mergeUsedDim(InventDimGroupSetup::newItemId(_itemId), pass.createInventDimFromPass());
        }
        else
        {
            inventDim = pass.createInventDimFromPass();
        }

        if (mode == WHSWorkExecuteMode::MovementByTemplate && pass.hasValue(#FromInventoryStatus))
        {
            inventDim.InventStatusId = pass.lookupStr(#FromInventoryStatus);
            inventDim = InventDim::findOrCreate(inventDim);
        }

        PmfQtyDataCarrier onhand = WHSInventOnHand::getWorkPhysicalQuantityByInventDim(_itemId, inventDim);

        if (!PdsCatchWeight::validateInventQty(_itemId, onhand.parmInventQty() - _outboundWeight, onhand.parmCwQty() - _outboundCWQty, false))
        {
            return this.fail(strFmt("@WAX:Error_InvalidCatchWeightRemaining", onhand.parmInventQty() - _outboundWeight, onhand.parmCwQty() - _outboundCWQty, _itemId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatchWeightQty</Name>
				<Source><![CDATA[
    private WHSTransWeight getCatchWeightQty(WHSWorkLine _workLine)
    {
        WHSTransWeight catchWeightQty;

        if (mode == WHSWorkExecuteMode::Movement
            || (mode == WHSWorkExecuteMode::MovementByTemplate && !_workLine))
        {
            catchWeightQty  = WHSCatchWeightHelper::convertInventQuantity(pass.lookupStr(#ItemId),
                                                                    fieldValues.lookup(#UOM),
                                                                    fieldValues.lookupNum(#Qty),
                                                                    pass.createProductInventDimFromPass().inventDimId);
        }
        else
        {
            catchWeightQty = WHSCatchWeightHelper::calculatePickingQuantity(_workLine, fieldValues.createInventDimFromPass());
        }

        return catchWeightQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>