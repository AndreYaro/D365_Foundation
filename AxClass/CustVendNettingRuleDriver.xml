<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingRuleDriver</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendNettingRuleDriver implements INettingRuleDriver
{
    private CustVendNettingLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        logger = CustVendNettingLogger::getLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeRule</Name>
				<Source><![CDATA[
    public void executeRule(CustVendNettingRule _rule, NettingRuleProcessParameter _parameter)
    {
        if (!_rule.Active)
        {
            throw Error(strFmt("@CashManagement:NettingRuleIsInactive", _rule.Name));
        }

        using (SysInstrumentationActivityContext runActivityContext = logger.activityContextWithCustomProperties(CustVendNettingInstrumentationConstants::NettingRuleDriver))
        {
            ListEnumerator executionPairsEnumerator = CustVendNettingRuleExecutionPair::getRulePairsFromRule(_rule.Name);
            logger.logInformation(strFmt('Run execution for rule %1', _rule.Name));
            int executionCount = 0;
            int failureCount = 0;
            while (executionPairsEnumerator.moveNext())
            {
                INettingRuleExecutionPair pair = executionPairsEnumerator.current();
                logger.logInformation(strFmt('Trigger run for pair %1', pair.getPairRecId()));

                boolean failed = false;
                System.Exception exception;
                try
                {
                    this.triggerRun(pair, _parameter);
                }
                catch(exception)
                {
                    failureCount ++;
                    failed = true;
                    logger.logInformation(strFmt('Exception is caught when running for pair %1: %2', pair.getPairRecId(), exception.Message));
                }

                logger.logInformation(strFmt('Netting run for pair %1 is %2', pair.getPairRecId(), failed ? 'failed' : 'successful'));

                executionCount ++;
            }

            runActivityContext.addCustomProperty(
                CustVendNettingInstrumentationConstants::ExecutionCount,
                int2Str(executionCount));
            runActivityContext.addCustomProperty(
                CustVendNettingInstrumentationConstants::SuccessCount,
                int2Str(executionCount - failureCount));
            runActivityContext.addCustomProperty(
                CustVendNettingInstrumentationConstants::FailCount,
                int2Str(failureCount));

            if (_parameter.getEnablePreview())
            {
                Args args = new Args(formStr(NettingAutomationPreview));
                args.record(_parameter.getPreviewTmp());
                MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(NettingAutomationPreview), MenuItemType::Display);
                menuFunction.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>triggerRun</Name>
				<Source><![CDATA[
    private void triggerRun(INettingRuleExecutionPair _executionPair, NettingRuleProcessParameter _parameter)
    {
        INettingRuleRunner nettingRuleRunner = CustVendNettingRuleRunner::construct(_parameter);
        nettingRuleRunner.processRule(_executionPair);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>