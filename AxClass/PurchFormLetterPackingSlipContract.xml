<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetterPackingSlipContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchFormLetterPackingSlipContract</c> class is used as the data contract class for the
/// <c>FormletterService</c> service when you post purchase order product receipts.
/// </summary>
[DataContractAttribute]
class PurchFormLetterPackingSlipContract
extends PurchFormLetterContract
{
    NoYes           queryCriteria;
    NoYes           editing;

    //List of parameters common for FormLetter contract classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.
    #define.CurrentVersion(1)
    #LOCALMACRO.ParmListPurchPackingSlip
        queryCriteria,
        editing
        // <GEEU>
        ,ltDocNumberingCode
        // </GEEU>
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus getDocumentStatus()
    {
        return DocumentStatus::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        this.parmCreditRemaining(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        documentStatus = this.getDocumentStatus();

        return [#CurrentVersion, #ParmListCommon, #ParmListPurchPackingSlip] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditing</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public NoYes parmEditing(NoYes _editing = editing)
    {
        editing = _editing;
        return editing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryCriteria</Name>
				<Source><![CDATA[
        [DataMemberAttribute]
    public NoYes parmQueryCriteria(NoYes _queryCriteria = queryCriteria)
    {
        queryCriteria = _queryCriteria;
        return queryCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer         version = conPeek(_packedClass,1);
        container       packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommon, #ParmListPurchPackingSlip, packedBase] = _packedClass;
                return super(packedBase);

            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchFormLetterPackingSlipContract construct()
    {
        return new PurchFormLetterPackingSlipContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isParallelismAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether document can post multithreaded in batch.
    /// </summary>
    /// <returns>True if document can post multithreaded in batch; otherwise, false.</returns>
    [Hookable(false)]
    public boolean isParallelismAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>