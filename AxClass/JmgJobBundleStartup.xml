<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgJobBundleStartup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Retrieves startup information from a user about jobs that an employee should start working on.
/// </summary>
/// <remarks>
///    Run this class by using the <c>JmgJobBundleStartup::main</c> method. A startup form is shown based on a <c>JmgJobBundle</c> object. The information given by the user is stored in the
///    <c>JmgJobBundle</c> object. Whether the user canceled the startup form is stored in the <c>Args</c> object, which is supplied to the <c>main</c> method.
/// </remarks>
class JmgJobBundleStartup
{
    JmgJobBundle jmgJobBundle;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <see cref="T:JmgJobBundleStartup" />.
    /// </summary>
    /// <param name="_jmgJobBundle">
    ///    The job bundle that contains the jobs that startup information should be retrieved for.
    /// </param>
    /// <remarks>
    ///    The <c>JmgJobBundleStartup </c>class should not be instantiated directly. Instead, use the <see
    ///    cref="M:JmgJobBundleStartup::main" /> method to run the class.
    /// </remarks>
    public void new(JmgJobBundle _jmgJobBundle)
    {
        jmgJobBundle = _jmgJobBundle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the relevant startup form based on the type of bundle.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> object, where the user feedback is saved.
    /// </param>
    /// <remarks>
    ///       After the
    ///    <c>
    ///       run
    ///    </c>
    ///       method has been executed, the<paramref name="_args" />
    ///
    ///       parameter's
    ///    <c>
    ///       parmEnum
    ///    </c>
    ///       method is updated as follows:
    ///
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             Set to <c>NoYes::Yes</c> if the user cancels the startup form.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Set to <c>NoYes::No</c> otherwise.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public void run(Args _args)
    {
        JmgPostStandardSystem   jmgPostStandardSystem;
        JmgProdMultiStartUp     jmgProdMultiStartUp;
        JmgTermJob              termJob;
        boolean                 isSignin;

        switch (jmgJobBundle.bundleType())
        {
            case JmgJobBundleType::Prod:
                jmgPostStandardSystem = JmgPostStandardSystem::constructJobBundle(jmgJobBundle, true);
                jmgProdMultiStartUp = jmgPostStandardSystem.createProductionStartUpJournal();
                jmgJobBundle.setStartUpJournalPosting(jmgProdMultiStartUp);
                if (jmgProdMultiStartUp)
                {
                    _args.parmEnum(jmgProdMultiStartUp.parmUserCanceled() ? NoYes::Yes : NoYes::No);
                }
                else
                {
                    _args.parmEnum(NoYes::No);
                }
                break;

            case JmgJobBundleType::Proj:
                JmgJobBundle jmgJobBundleForm = _args.parmObject() as JmgJobBundle;
                FormRun parentForm =  jmgJobBundleForm.parmCallerForm();

                if (JmgProductionFloorExecutionProjectFlight::instance().isEnabled())
                {
                    this.setStartProjectMenuItemBasedOnParentForm(parentForm, _args);
                }
                else
                {
                    str formName = formstr(JmgJobBundleProjStartup);
                    _args.name(formName);
                }

                FormRun formRun = classfactory.formRunClass(_args);
                formRun.run();
                formRun.wait();
                break;

            case JmgJobBundleType::IPC:
                termJob = jmgJobBundle.getNewJobsIterator().value();
                if (termJob.jourRegType() == JmgJourRegTypeEnum::SignIn || termJob.jourRegType() == JmgJourRegTypeEnum::SignOut)
                {
                    isSignin = termJob.jourRegType() == JmgJourRegTypeEnum::SignIn;

                    if (JmgProfileSpec::promptForAbsence(jmgJobBundle.worker(), DateTimeUtil::utcNow(), isSignin))
                    {
                        JmgAbsenceCalendar absenceCalendar;

                        select firstOnly absenceCalendar 
                            order by FromDateTime desc
                            where absenceCalendar.JobId 
                            && absenceCalendar.FromDateTime      <= DateTimeUtil::utcNow()
                            && absenceCalendar.ToDateTime        >= DateTimeUtil::utcNow()
                            && absenceCalendar.Worker            == jmgJobBundle.worker()
                            && absenceCalendar.CalculationTrans  == NoYes::No
                            && absenceCalendar.Disabled          == NoYes::No;
                        
                        if (absenceCalendar)
                        {
                            JmgRegistrationParameters parms = jmgJobBundle.getStartupParameters(termJob.jobId());
                            parms.jobIdAbsence(absenceCalendar.JobId);
                            jmgJobBundle.setStartupParameters(termJob.jobId(), parms);
                            _args.parmEnum(NoYes::No);
                        }
                        else
                        {
                            this.openAbsenceDialog(termJob, isSignin, _args);
                        }   
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAbsenceDialog</Name>
				<Source><![CDATA[
    private void openAbsenceDialog(JmgTermJob _termJob, boolean _isSignin, Args _args)
    {
        JmgIAbsenceDialogProvider provider = this.getAbsenceDialogProvider(_args);
        provider.OpenAbsenceDialog(jmgJobBundle, _termJob, _isSignin, _args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAbsenceDialogProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the JmgIAbsenceDialogProvider depending on the caller form.
    /// </summary>
    /// <param name = "_args"> The args used to identify the caller form.</param>
    /// <returns> An <c>JmgIAbsenceDialogProvider</c> implementation. </returns>
    protected JmgIAbsenceDialogProvider getAbsenceDialogProvider(Args _args)
    {
        JmgJobBundle jmgJobBundleForm = _args.parmObject() as JmgJobBundle;
        if (jmgJobBundleForm.parmCallerForm().name() == formstr(JmgRegistrationTouch) ||
            jmgJobBundleForm.parmCallerForm().name() == formstr(JmgRegistration))
        {
            return new JmgJobCardAbsenceDialogProvider();
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStartProjectMenuItemBasedOnParentForm</Name>
				<Source><![CDATA[
    protected void setStartProjectMenuItemBasedOnParentForm(FormRun _parentForm, Args _args)
    {
        _args.name(formStr(JmgJobBundleProjStartup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgJobBundleStartup    jobBundleStartup;
        if (!_args || !SysDictClass::isEqualOrSuperclass(classidget(_args.parmObject()), classnum(JmgJobBundle)))
        {
            throw error(strfmt("@SYS22533", classstr(JmgJobBundleStartup), classstr(JmgJobBundle)));
        }

        jobBundleStartup = new JmgJobBundleStartup(_args.parmObject());
        jobBundleStartup.run(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>