<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_VendInvoiceRegister</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEngine_VendInvoiceRegister</c> class supports vendor invoice registration
/// journals.
/// </summary>
/// <remarks>
/// This class extends the <c>LedgerJournalEngine</c> class.
/// </remarks>
public class LedgerJournalEngine_VendInvoiceRegister extends LedgerJournalEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDueDateBaseDate</Name>
				<Source><![CDATA[
    public TransDate getDueDateBaseDate(LedgerJournalTrans _ledgerJournalTrans)
    {
        PaymTerm paymTerm;

        paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);

        // Spanish Prompt Payment Law
        if (paymTerm.UseDeliveryDateForDueDate_ES)
        {
            return _ledgerJournalTrans.LedgerJournalDlvDate_ES;
        }
        else
        {
            return _ledgerJournalTrans.DocumentDate ? _ledgerJournalTrans.DocumentDate : _ledgerJournalTrans.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDueDateLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the <c>PaymDueDateLimit_ES</c> record specified for the payment term.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record contianing the payment term reference.
    /// </param>
    /// <returns>
    /// The <c>PaymDueDateLimit_ES</c> record.
    /// </returns>
    public PaymDueDateLimit_ES getDueDateLimit(LedgerJournalTrans _ledgerJournalTrans)
    {
        PaymTerm paymTerm;

        paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);
        return PaymDueDateLimit_ES::getCurrentValues(paymTerm.DueDateLimitGroupId_ES);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    protected void initFromVendTable(LedgerJournalTrans _ledgerJournalTrans
        , Tax1099BoxDetail _tax1099Detail = null
        )
    {
        #ISOCountryRegionCodes

        DueDate dueDate;
        PaymTerm paymTerm;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            super(_ledgerJournalTrans, _tax1099Detail);
        }
        else
        {
            super(_ledgerJournalTrans);
        }

        if (vendTable.PaymTermId)
        {
            this.findPayment(vendTable.PaymTermId);

            //  If an Invoice number and Document date exist use the Document date to determine the Due date
            //  otherwise use the Transaction date.
            dueDate = payment.due((_ledgerJournalTrans.Invoice && _ledgerJournalTrans.DocumentDate) ?
                            _ledgerJournalTrans.DocumentDate : _ledgerJournalTrans.TransDate,
                            this.paymDayId(_ledgerJournalTrans));

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
            {
                paymTerm = PaymTerm::find(_ledgerJournalTrans.Payment);
                dueDate = this.getDueDateBaseDate(_ledgerJournalTrans);

                if (dueDate || !paymTerm.UseDeliveryDateForDueDate_ES)
                {
                    dueDate = payment.due(
                        dueDate,
                        this.paymDayId(_ledgerJournalTrans),
                        false,
                        this.getDueDateLimit(_ledgerJournalTrans));
                }
            }
            else if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)))
            {
                dueDate = this.adjustDueDate(dueDate, _ledgerJournalTrans);
            }

            _ledgerJournalTrans.Due = dueDate;
        }
        else
        {
            _ledgerJournalTrans.Due = _ledgerJournalTrans.TransDate;
        }

        if (VendParameters::find().VendTaxRegisterApproval == VendTaxRegisterApproval::Register)
        {
            _ledgerJournalTrans.TaxGroup = vendTable.TaxGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxGroup</Name>
				<Source><![CDATA[
    protected void initTaxGroup(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (VendParameters::find().VendTaxRegisterApproval == VendTaxRegisterApproval::Register)
        {
            super(_ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxItemGroup</Name>
				<Source><![CDATA[
    public void initTaxItemGroup(LedgerJournalTrans _ledgerJournalTrans,
                                 LedgerJournalTrans_Project _ledgerJournalTrans_Project = null)
    {
        if (VendParameters::find().VendTaxRegisterApproval == VendTaxRegisterApproval::Register)
        {
            if (_ledgerJournalTrans.RecId)
            {
                if (_ledgerJournalTrans.orig().Invoice == '')
                {
                    super(_ledgerJournalTrans, _ledgerJournalTrans_Project);
                }
            }
            else
            {
                if (!_ledgerJournalTrans.TaxItemGroup)
                {
                    super(_ledgerJournalTrans, _ledgerJournalTrans_Project);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        super(_ledgerJournalTrans);

        this.initOffsetFromLedgerJournalTable(_ledgerJournalTrans);

        _ledgerJournalTrans.AccountType = LedgerJournalACType::Vend;
        _ledgerJournalTrans.SettleVoucher = SettlementType::None;
        _ledgerJournalTrans.TransactionType = LedgerTransType::Vend;
        _ledgerJournalTrans.SkipBlockedForManualEntryCheck = NoYes::Yes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>