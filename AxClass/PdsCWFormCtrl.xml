<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCWFormCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Parent Class for form control for the Catch Weight functionality of the
/// Process Distribution Module
/// </summary>
/// <remarks>
/// Extend this class for any forms which require catch weight functionality
/// beyond just displaying the information
/// </remarks>
public class PdsCWFormCtrl extends PmfFormCtrl
{
    PdsCWValidation cwValidation;
    fieldId         unitFieldId;
    str             unitMethodStr;
    boolean         allowQtyEdit;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addUnitMethodCaching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the CW Unit method to the form caching.
    /// </summary>
    protected void addUnitMethodCaching()
    {
        FormDataSource  formDataSource = this.parmFormDataSource();

        if (formDataSource)
        {
            formDataSource.cacheAddMethod(unitMethodStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called to set information before a new record is created in the primary
    /// datasource for the class instance
    /// </summary>
    /// <remarks>
    /// for primary datasource of the sub class instance
    /// </remarks>
    public void dataSourceCreatePre()
    {
        MapEnumerator   iter;

        super();

        iter = cwValidation.parmFieldIds().getEnumerator();
        while (iter.moveNext())
        {
            formDS.object(iter.currentKey()).allowEdit(false);
            formDS.object(iter.currentKey()).skip(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run logic after the datasource on the form is initiated
    /// </summary>
    /// <param name="_buffer">calling buffer</param>
    /// <remarks>
    /// Pass buffer to catch weight validation class
    /// </remarks>
    public void dataSourceInitPost(Common _buffer)
    {
        super(_buffer);

        cwValidation.parmBuffer(_buffer);

        if (unitMethodStr)
        {
            this.addUnitMethodCaching();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate datasource before writing the record
    /// </summary>
    /// <returns>
    /// true, if record can be written; otherwise false.
    /// </returns>
    /// <remarks>
    /// Method also runs the CW Validation to determine if the record may be
    /// written.
    /// </remarks>
    public boolean dataSourceValidateWrite()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            try
            {
                cwValidation.validate(true);
            }
            catch
            {
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceWritePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check datasource record before writing record.
    /// </summary>
    /// <remarks>
    /// Method also runs the CW Validation to determine if the record may be
    /// written.
    /// </remarks>
    public void dataSourceWritePre()
    {
        super();

        cwValidation.validate(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process modified field
    /// </summary>
    /// <param name="_fieldId">
    /// FieldId of the field that was changed
    /// </param>
    /// <remarks>
    /// Method also the buffer field if the field is the ItemId Field
    /// </remarks>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);
        cwValidation.fieldChanged(_fieldId);
        if (_fieldId == cwValidation.parmItemFieldId())
        {
            if (unitFieldId)
            {
                buffer.(unitFieldId) = PdsCatchWeight::cwUnitId(
                                            cwValidation.itemId());
            }
            if (unitMethodStr && this.parmFormDataSource())
            {
                //refresh the specific display method
                this.parmFormDataSource().cacheCalculateMethod(unitMethodStr);
            }

            this.updateDesign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the standard functionality for new.  Overridden to make protected.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// protected void new()
    /// </syntax>
    /// </remarks>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCWValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the cwValidation parameter.
    /// </summary>
    /// <param name="_cwValidation">Value to be set.</param>
    /// <returns>The cwValidation parameter.</returns>
    /// <remarks>
    /// <syntax>
    /// public PdsCWValidation parmCWValidation(PdsCWValidation _cwValidation)
    /// </syntax>
    /// </remarks>
    public PdsCWValidation parmCWValidation(PdsCWValidation _cwValidation = null)
    {
        if (!prmisdefault(_cwValidation))
        {
            cwValidation = _cwValidation;
        }

        return cwValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the fiedlIds map.
    /// </summary>
    /// <param name="_fieldIds">Map to set.</param>
    /// <returns>The fieldIds map. </returns>
    /// <remarks>
    /// <syntax>
    /// public Map parmFieldIds(Map _fieldIds)
    /// </syntax>
    /// </remarks>
    public Map parmFieldIds(Map _fieldIds = null)
    {
        if (!prmisdefault(_fieldIds))
        {
            return cwValidation.parmFieldIds(_fieldIds);
        }
        else
        {
            return cwValidation.parmFieldIds();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the itemFieldId parameter.
    /// </summary>
    /// <param name="_itemFieldId">Value to be set.</param>
    /// <returns>The itemFIeldId parameter,</returns>
    /// <remarks>
    /// <syntax>
    /// public fieldId parmItemFieldId(fieldId _itemFieldId)
    /// </syntax>
    /// </remarks>
    public fieldId parmItemFieldId(fieldId _itemFieldId = 0)
    {
        if (!prmisdefault(_itemFieldId))
        {
            return cwValidation.parmItemFieldId(_itemFieldId);
        }
        else
        {
            return cwValidation.parmItemFieldId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the unitFieldId parameter.
    /// </summary>
    /// <param name="_unitFieldId">Value to be set.</param>
    /// <returns>The unitFieldId parameter.</returns>
    /// <remarks>
    /// <syntax>
    /// public fieldId parmUnitFieldId(fieldId _unitFieldId)
    /// </syntax>
    /// </remarks>
    public fieldId parmUnitFieldId(fieldId _unitFieldId = unitFieldId)
    {
        if (!prmisdefault(_unitFieldId))
        {
            unitFieldId = _unitFieldId;
        }

        return unitFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitMethodStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the unitFieldId parameter.
    /// </summary>
    /// <param name="_unitMethodStr">Value to be set.</param>
    /// <returns>The unitFieldId parameter.</returns>
    /// <remarks>
    /// <syntax>
    /// public fieldId parmUnitFieldId(str _unitMethodStr)
    /// </syntax>
    /// </remarks>
    public str parmUnitMethodStr(str _unitMethodStr = unitMethodStr)
    {
        if (!prmisdefault(_unitMethodStr))
        {
            unitMethodStr = _unitMethodStr;
        }

        return unitMethodStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    /// <remarks>
    /// Method checks the form controls which are controled and enable/disable
    /// accordingly
    /// </remarks>
    public void updateDesign()
    {
        MapEnumerator       iter;
        boolean             isCWItem;
        PdsCWQtyFieldPair   fieldPair;

        ItemId itemId = cwValidation.itemId();
        if (!itemId && PdsCWFindItemIdByCallerBufferFlight::instance().isEnabled())
        {
            Common callBuffer = this.callerBuffer();
            FieldId itemIdFieldId = fieldName2Id(callBuffer.TableId, fieldStr(InventTable, ItemId));
            if (itemIdFieldId)
            {
                itemId = callBuffer.(itemIdFieldId);
            }
        }

        isCWItem = PdsGlobal::pdsIsCWItem(itemId);
        iter = cwValidation.parmFieldIds().getEnumerator();
        while (iter.moveNext())
        {
            fieldPair = iter.currentValue();
            this.enableDSField(fieldPair.parmCWFieldId(),isCWItem);
            if (isCWItem && !fieldPair.parmAllowQtyEdit())
            {
                this.enableDSField(fieldPair.parmQtyFieldId(),false);
            }
            else
            {
                this.enableDSField(fieldPair.parmQtyFieldId(),true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a new instance of the PdsCWFormCtrl class.
    /// </summary>
    /// <returns>
    /// New instance of the PdsCWFormCtrl class.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public static PdsCWFormCtrl construct()
    /// </syntax>
    /// </remarks>
    public static PdsCWFormCtrl construct()
    {
        return new PdsCWFormCtrl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct Class from calling form
    /// </summary>
    /// <param name="_fr">
    /// Calling Form
    /// </param>
    /// <returns>
    /// new instance of PdsCWFormCtrl class
    /// </returns>
    /// <remarks>
    /// This method will default to the standard class unless otherwise listed
    /// in the switch statement
    /// </remarks>
    public static PdsCWFormCtrl constructFromForm(FormRun _fr)
    {
        PmfFormCtrl cwCtrl;

        switch (_fr.name())
        {
            case formstr(InventJournalCount):
                cwCtrl = PdsCWFormCtrl_InventJournalCount::construct();
                break;
            case formstr(InventJournalMovement):
                cwCtrl = PdsCWFormCtrl_InventJournalMovement::construct();
                break;
            case formstr(InventJournalTransfer):
                cwCtrl = PdsCWFormCtrl_InventJournalTransfer::construct();
                break;
            case formstr(InventJournalLossProfit):
                cwCtrl = PdsCWFormCtrl_InventJournalLossProfit::construct();
                break;
            case formstr(WMSJournalTable):
                cwCtrl = PdsCWFormCtrl_WMSJournalTable::construct();
                break;
            default:
                cwCtrl = PdsCWFormCtrl_Std::construct();
                break;
        }
        cwCtrl.parmFormRun(_fr);
        return cwCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>