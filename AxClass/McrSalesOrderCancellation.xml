<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrSalesOrderCancellation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRSalesOrderCancellation</c> class cancels sales orders and sales order lines.
/// </summary>
class McrSalesOrderCancellation
{
    AmountCur               totalBefore;

    private PurchInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cancels a sales line on a sales order.
    /// </summary>
    /// <param name="_salesLine">
    ///     The sales line to be canceled.
    /// </param>
    /// <param name="_displayErrors">
    ///     The option to display errors that occur during cancellation; optional.
    /// </param>
    /// <returns>
    ///     false if any fatal errors occur; otherwise, true.
    /// </returns>
    protected boolean cancelLine(SalesLine   _salesLine,
                                    boolean     _displayErrors  = true)
    {
        SalesTable  salesTable;
        boolean     ret = true;

        ttsbegin;
        if (ret
            && _salesLine.salesTable().checkUpdate())
        {
            InterCompanyUpdateRemPhys::synchronize( _salesLine,
                                                    _salesLine.RemainInventPhysical,
                                                    _salesLine.RemainSalesPhysical);
            _salesLine.reread();
            _salesLine.RemainSalesPhysical  = 0;
            _salesLine.RemainInventPhysical = 0;
            _salesLine.write();

            // We need to generate a refund record whenever sales line gets canceled.
            // If <c>RetailPaymentsGenerateRefundOnCancellingSaleslinePartiallyFlight<c> Is disabled.
            // A refund record will be generated irrespective of sales line status.
            if (!RetailPaymentsGenerateRefundOnCancellingSaleslinePartiallyFlight::instance().isEnabled() && _salesLine.SalesStatus != SalesStatus::Canceled)
            {
                ret = false;
            }

            salesTable = SalesTable::find(_salesLine.SalesId,true);
            if (salesTable.setEstimate())
            {
                salesTable.doUpdate();
            }
        }
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelLineMiscCharges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cancels miscellaneous charges for a given sales line.
    /// </summary>
    /// <param name="_salesLineCanceled">
    ///     The sales line for which to remove misc charges.
    /// </param>
    /// <remarks>
    ///     All miscellaneous charges are canceled for a line,
    ///     if no remaining lines exist with picked but not yet
    ///     invoiced quantities.
    /// </remarks>
    protected void cancelLineMiscCharges(SalesLine _salesLineCanceled)
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        MarkupTrans         markupTrans;

        // If the line is not picked or packed yet
        // invoiced, cancel miscellaneous; otherwise, leave them.
        select RecId from inventTrans
            where (inventTrans.StatusIssue == StatusIssue::Picked
                || inventTrans.StatusIssue == StatusIssue::Deducted)
                && inventTrans.StatusReceipt == StatusReceipt::None
            exists join inventTransOrigin
            where inventTransOrigin.InventTransId == _salesLineCanceled.InventTransId
                && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

        if (!inventTrans)
        {
            delete_from markupTrans
                where markupTrans.TransTableId == _salesLineCanceled.TableId
                      && markupTrans.TransRecId == _salesLineCanceled.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelMiscCharges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cancels miscellaneous charges on a sales order, when applicable.
    ///     All miscellaneous charges are canceled when cancelling all un-picked
    ///     quantities on a sales order, if no remaining lines exist with picked
    ///     but not yet invoiced quantities.
    /// </summary>
    /// <param name="_salesId">
    ///     The sales ID for the order to cancel.
    /// </param>
    protected void cancelMiscCharges(SalesId _salesId)
    {
        SalesLine salesLine;
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        MarkupTrans markupTrans;
        SalesTable salesTable;

        // If there are no lines that are picked or packed but not yet
        //  invoiced, cancel miscellaneous; otherwise, leave them.
        select firstonly RecId from salesLine
            where salesLine.SalesId == _salesId
            exists join inventTrans
            where (inventTrans.StatusIssue   == StatusIssue::Picked
                || inventTrans.StatusIssue   == StatusIssue::Deducted)
                && inventTrans.StatusReceipt == StatusReceipt::None
            exists join inventTransOrigin
            where inventTransOrigin.InventTransId == salesLine.InventTransId
                && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

        if (!salesLine)
        {
            delete_from markupTrans
            exists join salesTable
            where markupTrans.TransTableId == salesTable.TableId
                && markupTrans.TransRecId == salesTable.RecId
                && salesTable.SalesId == _salesId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderCancellationAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the entire order may be canceled.  Will return true if
    ///     cancellation for the entire order is allowed, otherwise false.
    /// </summary>
    /// <param name="_salesTable">
    ///     The sales order to check.
    /// </param>
    /// <param name="_displayErrors">
    ///     The option to display errors that occur during cancellation; optional.
    /// </param>
    /// <returns>
    ///     true if order can be canceled; otherwise, false.
    /// </returns>
    protected boolean isOrderCancellationAllowed(SalesTable _salesTable,
                                                 boolean _displayErrors = true)
    {
        boolean     isOrderCancellationAllowed = true;
        SalesStatus status = _salesTable.SalesStatus;

        switch (status)
        {
            case SalesStatus::Canceled:
                isOrderCancellationAllowed = false;

                if (_displayErrors)
                {
                    error("@MCR11878");
                }
                break;

            case SalesStatus::Delivered:
                isOrderCancellationAllowed = false;

                if (_displayErrors)
                {
                    error("@MCR11879");
                }
                break;

            case SalesStatus::Invoiced:
                isOrderCancellationAllowed = false;

                if (_displayErrors)
                {
                    error("@MCR11880");
                }
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newDefault();
                this.isOrderCancellationAllowedDelegate(this, _salesTable, result);
                if (result.hasResult())
                {
                    isOrderCancellationAllowed = false;

                    if (_displayErrors)
                    {
                        error(result.result());
                    }
                }
                break;
        }
        return isOrderCancellationAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMCRRefundMethodAvailable</Name>
				<Source><![CDATA[
	/// <summary>
    /// Checks call center refund methods are configured for the given sales order currency code or not.
    /// </summary>
    /// <param name="_salesTable">The <c>SalesTable</c> record used to check the refund method.</param>
    /// <returns>true if refund methods are configured; otherwise, false.</returns>
    private boolean isMCRRefundMethodAvailable(SalesTable _salesTable)
    {
        boolean isMCRRefundMethodAvailable = true;
        MCRCustPaymTable mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(_salesTable.RecId,_salesTable.TableId);

        if (mcrCustPaymTable &&
            mcrCustPaymTable.CustPaymType != MCRCustPaymType::CreditCard &&
            mcrCustPaymTable.CustPaymType != MCRCustPaymType::OnAccount &&
            mcrCustPaymTable.CustPaymType != MCRCustPaymType::GiftCard &&
            mcrCustPaymTable.CustPaymType != MCRCustPaymType::LoyaltyCard)
        {
            isMCRRefundMethodAvailable = (MCRCustPaymTable::mcrFindRefundMethod(mcrCustPaymTable, _salesTable.CurrencyCode)) ? true : false;
        }

        if (!isMCRRefundMethodAvailable)
        {
            error(strFmt("@MCR:CallCenterRefundMethods", _salesTable.SalesId, _salesTable.CurrencyCode));
        }

        return isMCRRefundMethodAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderCancellationAllowedDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for extending the behavior when determining if a sales order can be cancelled.
    /// </summary>
    /// <param name = "_mcrSalesOrderCancellation">Cancellation engine.</param>
    /// <param name = "_salesTable"><c>SalesTable</c> record being cancelled.</param>
    /// <param name = "_errorMessageResult">An instance of <c>EventHandlerResult</c> which can be used to pass back the error message explaining why the cancelling of the order is not allowed, if that is the case.</param>
    delegate void isOrderCancellationAllowedDelegate(McrSalesOrderCancellation _mcrSalesOrderCancellation, SalesTable _salesTable, EventHandlerResult _errorMessageResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal PurchInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }
        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCancelAdjPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts the payment after an order was cancelled.
    /// </summary>
    /// <param name="_salesTable">
    ///     The sales order that was canceled.
    /// </param>
    public void postCancelAdjPayment(SalesTable _salesTable)
    {
        this.tryPostCancelAdjPayment(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryPostCancelAdjPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts the payment after an order was cancelled.
    /// </summary>
    /// <param name="_salesTable">
    ///     The sales order that was canceled.
    /// </param>
    /// <returns>
    /// true if the posted; otherwise, false.
    /// </returns>
    [Hookable(true)]
    public boolean tryPostCancelAdjPayment(SalesTable _salesTable)
    {
        boolean ret = true;
        MCRPaymentAdjustments   mcrPaymentAdjustments;

        if  (totalBefore > 0)
        {
            RetailTransactionPaymentsHelper::ValidateIfCommercePaymentsOrderWithCurrencyPayments(_salesTable);

            mcrPaymentAdjustments = MCRPaymentAdjustments::construct(totalBefore, _salesTable);
            mcrPaymentAdjustments.processPaymentAdjustments();

            // After sales line cancellation, if the order amount is more than the authorized amount.
            // Then skip voiding the authorization when flight is enabled.
            if (RetailSkipVoidingAuthorizationOnSalesLineCancellationFlight::instance().isEnabled())
            {
                MCRSalesOrderTotals salesOrderTotals = new mcrSalesOrderTotals(_salesTable);
                AmountCur currentOrderAmt = salesOrderTotals.getTotalOrder();
                AmountCur toatlPreAuthAmount = McrSalesOrderCancellation::getTotalValidPreAuthAmount(_salesTable);

                if (totalBefore > currentOrderAmt ||
                    toatlPreAuthAmount > currentOrderAmt)
                {
                    ret = _salesTable.tryVoidCreditCardPreauthorize();
                }
            }
            else
            {
                RetailSharedParameters retailSharedParameters = RetailSharedParameters::find();
                
                if ((retailSharedParameters && 
                    retailSharedParameters.EnableAdvancedExternalGiftCard) || 
                    RetailPaymentsPostCancelAdjPaymentCallCenterOrderFlight::instance().isEnabled())
                {
                    ret = _salesTable.tryVoidCreditCardPreauthorize();
                }
                else
                {
                    _salesTable.voidCreditCardPreauthorize();
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalValidPreAuthAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total amount of valid pre-authorizations for the given sales order.
    /// </summary>
    /// <param name = "_salesTable">
    /// Sales table buffer.
    /// </param>
    /// <returns>
    /// Total amount of valid pre-authorizations.
    /// </returns>
    private static AmountCur getTotalValidPreAuthAmount(SalesTable _salesTable)
    {
        CreditCardAuthTrans ccAuthTrans;
        MCRCustPaymTable mcrCustPaymTab;

        select sum(ApprovalAmountCur) from ccAuthTrans
            where ccAuthTrans.ApprovalType == CreditCardOperation::Authorize
                && ccAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved
                && ccAuthTrans.ApprovalVoid == NoYes::No
                && ccAuthTrans.ApprovalExpired == NoYes::No
                exists join mcrCustPaymTab
                    where mcrCustPaymTab.RecId == ccAuthTrans.MCRPaymRecId
                        && mcrCustPaymTab.RefRecId == _salesTable.RecId
                        && mcrCustPaymTab.RefTableId == _salesTable.TableId;

        return ccAuthTrans.ApprovalAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCancelLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears miscellaneous charges, adjusts coupons, and writes order events
    ///     for the sales order line that was cancelled.
    /// </summary>
    /// <param name="_salesLine">
    ///     The sales line to be canceled.
    /// </param>
    /// <param name="_displayErrors">
    ///     The option to display errors that occur during cancellation; optional.
    /// </param>
    public void postCancelLine(SalesLine _salesLine,
                               boolean   _displayErrors  = true)
    {
        SalesLineType                   salesLineType = _salesLine.type();
        MCROrderEventTable              mcrOrderEventTable;
        SalesLine                       suppItemSalesLine;
        MCRSalesLine                    mcrSalesLine = _salesLine.mcrSalesLine();
        MCRSalesLineDropShipment        mcrSalesLineDropShipment = _salesLine.mcrSalesLineDropShipment();
        MCRInstallmentPlanSalesTable    mcrInstallmentPlanSalesTable;

        //Update direct delivery
        if (mcrSalesLineDropShipment.DropShipment)
        {
            salesLineType.mcrSetDropShipStatus(_salesLine);
        }

        // Cancel miscellaneous charges, if applicable
        this.cancelLineMiscCharges(_salesLine);

        // Complete continuity order & cancel any open child orders.
        if (mcrSalesLine.ContinuityScheduleId)
        {
            MCRCancelContinuityParent::cancelContinuityOrder(_salesLine.SalesId, _salesLine.InventTransId);
        }

        // Cancel unpicked quantities on all children lines.  Children lines may be supplementary items.
        // If the customer record is set to auto cancel, supplementary items are canceled if the
        // parent line is canceled.
        if (MCRCustTable::findByCustAccount(_salesLine.CustAccount).AutoCancel)
        {
            SupplementarySalesLineRef       supplementarySalesLineRef;

            while select forupdate suppItemSalesLine
            where suppItemSalesLine.SalesId == _salesLine.SalesId
            exists join supplementarySalesLineRef
            where supplementarySalesLineRef.SuppSalesLine == suppItemSalesLine.RecId
                && supplementarySalesLineRef.SourceSalesLine == _salesLine.RecId
            {
                if (this.cancelLine(suppItemSalesLine, _displayErrors))
                {
                    this.postCancelLine(suppItemSalesLine, _displayErrors);
                }
            }
        }

        mcrInstallmentPlanSalesTable = MCRInstallmentPlanSalesTable::findSalesId(_salesLine.SalesId);
        if (mcrInstallmentPlanSalesTable
            && !mcrInstallmentPlanSalesTable.hasBeenInvoiced())
        {
            mcrInstallmentPlanSalesTable.createInstallmentPlan(_salesLine.salesTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCancelNSFPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Canceles the check payment.
    /// </summary>
    /// <param name="_salesTableRecId">
    ///     The sales order reference that was canceled.
    /// </param>
    private void postCancelNSFPayment(RefRecId _salesTableRecId)
    {
        MCRCustPaymTable mcrCustPaymTable;

        while select RecId from mcrCustPaymTable
            where mcrCustPaymTable.RefRecId     == _salesTableRecId
                && mcrCustPaymTable.RefTableId  == tableNum(SalesTable)
                && mcrCustPaymTable.Status      == MCRCustPaymStatus::Posted
                && mcrCustPaymTable.CustPaymType == MCRCustPaymType::Check
        {
            MCRCustPaymTable::cancelPaym(mcrCustPaymTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCancelOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears all hold codes, removes miscellaneous charges, adjusts coupons, and writes order events
    ///     for the sales order that was cancelled.
    /// </summary>
    /// <param name="_salesTable">
    ///     The sales order that was canceled.
    /// </param>
    public void postCancelOrder(SalesTable _salesTable)
    {
        RetailCoupon                    retailCoupon;
        RetailCouponUsage               retailCouponUsage;
        MCRHoldCodeTrans                mcrHoldCodeTrans;
        MCRSalesTable                   mcrSalesTable;
        MCRInstallmentPlanSalesTable    mcrInstallmentPlanSalesTable;
        MCROrderEventTable              mcrOrderEventTable;

        RecordInsertList listRetailCouponUsage = new RecordInsertList(TableNum(RetailCouponUsage));

        RetailSalesTable retailSalesTable = RetailSalesTable::findSalesTable(_salesTable);
        RetailChannelTable retailChannelTable = RetailChannelTable::findByRecId(retailSalesTable.RetailChannel);

        // When the sales order with coupons is cancelled, add rows to RetailCouponUsage table
        // indicating that the coupon use is also cancelled.
        while select retailCouponUsage
            where retailCouponUsage.SalesId == _salesTable.SalesId
        {
            RetailCouponUsage                       couponUsageReissue;
            select forupdate couponUsageReissue;
            couponUsageReissue.SalesId              = _salesTable.SalesId;
            couponUsageReissue.CustomerAccount      = retailCouponUsage.CustomerAccount;
            couponUsageReissue.CouponCodeId         = retailCouponUsage.CouponCodeId;
            couponUsageReissue.Status               = RetailCouponUsageStatus::Canceled;
            couponUsageReissue.RetailChannelId      = retailChannelTable.RetailChannelId;
            couponUsageReissue.UsageId              = newGuid();

            listRetailCouponUsage.Add(couponUsageReissue);
        }

        ttsbegin;

        listRetailCouponUsage.insertDatabase();

        ttscommit;

        // Clear all hold codes related to this order
        mcrHoldCodeTrans.clearHoldsForOrder(_salesTable.SalesId);

        // Cancel miscellaneous charges, if applicable
        this.cancelMiscCharges(_salesTable.SalesId);

        // If the order is completely canceled then clear out of balance flags
        mcrSalesTable = _salesTable.mcrSalesTable();

        if (mcrSalesTable
            && (mcrSalesTable.OutOfBalanceReleased != MCROutOfBalanceReleaseType::None
                || mcrSalesTable.PaymOutOfBalance != MCRPaymOutOfBalance::None) )
        {
            ttsbegin;
            mcrSalesTable.OutOfBalanceReleased = MCROutOfBalanceReleaseType::None;
            mcrSalesTable.PaymOutOfBalance = MCRPaymOutOfBalance::None;
            _salesTable.mcrPackMCRSalesTable(mcrSalesTable);
            _salesTable.selectForUpdate(true);
            _salesTable.doUpdate();
            _salesTable.SysExtensionSerializerMap::postUpdate();
            ttscommit;
        }

        mcrInstallmentPlanSalesTable = MCRInstallmentPlanSalesTable::findSalesId(_salesTable.SalesId);
        if (mcrInstallmentPlanSalesTable
            && !mcrInstallmentPlanSalesTable.hasBeenInvoiced())
        {
            mcrInstallmentPlanSalesTable.createInstallmentPlan(_salesTable);
        }

        // For return orders on cancelling the order, payments status should be changed to Declined.
        // Currently even after cancelling the return order, status of payments still remains in Authorized state.
        // As a result, When we create a new return order for the same sales order which was used in previously cancelled return order.
        // The payment method for refund amount is changing to customer account even if original transaction was made using credit card.
        if (totalBefore < 0 && RetailUpdatePaymentStatusForCancelledReturnOrderFlight::instance().isEnabled())
        {
            McrSalesOrderCancellation::cancelPayments(_salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the payment total before the order is cancelled.
    /// </summary>
    /// <param name="_salesTable">
    ///     The sales order that was canceled.
    /// </param>
    public void preCancel(SalesTable _salesTable)
    {
        MCRCustPaymTotals       mcrCustPaymTotals;

        mcrCustPaymTotals = MCRCustPaymTotals::construct(_salesTable.TableId, _salesTable.RecId);
        totalBefore = mcrCustPaymTotals.getTotalPaymAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the specified sales order.
    /// All sales lines are canceled, and all hold codes are cleared.  Payments
    /// are resubmitted for authorization, if applicable.
    /// Returns true if the order is successfully canceled.  Returns false if
    /// an error occurs.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order to cancel
    /// </param>
    /// <param name="_displayErrors">
    /// The option to display errors that occur during cancellation; optional.
    /// </param>
    /// <param name="_nsfCancel">
    /// The option to cancel none sufficient funds related payments for the order; optional.
    /// </param>
    /// <returns>
    /// true if no errors occur during cancellation; otherwise, false.
    /// </returns>
    public static boolean cancelOrder(  SalesTable _salesTable,
                                        boolean _displayErrors  = true,
                                        boolean _nsfCancel      = false)
    {
        boolean     ret;
        SalesLine   salesLine;
        MCRSalesOrderCancellation mcrSalesOrderCancellation;
        McrSalesOrderCancellation_Loyalty mcrSalesOrderCancellation_Loyalty;

        if (_salesTable)
        {
            mcrSalesOrderCancellation = new MCRSalesOrderCancellation();
            mcrSalesOrderCancellation.preCancel(_salesTable);

            if (mcrSalesOrderCancellation.isOrderCancellationAllowed(_salesTable, _displayErrors) &&
                mcrSalesOrderCancellation.isMCRRefundMethodAvailable(_salesTable))
            {
                while select forupdate salesLine
                    where salesLine.SalesId == _salesTable.SalesId
                        && salesLine.SalesStatus == SalesStatus::Backorder
                {
                    if (mcrSalesOrderCancellation.cancelLine(salesLine, _displayErrors))
                    {
                        mcrSalesOrderCancellation.preCancel(_salesTable);

                        McrSalesOrderCancellation_Loyalty::construct().RefundLoyaltyPointsForSalesLine(_salesTable, salesLine);

                        mcrSalesOrderCancellation.postCancelLine(salesLine);

                        ret = true;
                    }
                }

                ttsbegin;
                select firstonly salesLine where salesLine.SalesId == _salesTable.SalesId;

                if (!salesLine)
                {
                    _salesTable.selectForUpdate(true);
                    _salesTable.SalesStatus = SalesStatus::Canceled;
                    _salesTable.update();
                    ret = true;
                }
                ttscommit;
            }

            if (ret)
            {
                _salesTable.reread();
                if (_salesTable.SalesStatus ==  SalesStatus::Canceled)
                {
                    mcrSalesOrderCancellation.postCancelOrder(_salesTable);
                    // some or all lines are cancelled
                    if (_nsfCancel)
                    {
                        mcrSalesOrderCancellation.postCancelNSFPayment(_salesTable.RecId);
                    }
                }

                // If sales order is invoiced, post the earned loyalty points for this transaction and set the MCROrderStopped to No
                if (_salesTable.SalesStatus == SalesStatus::Invoiced)
                {
                    // if sales order gets invoiced post the loyalty points
                    RetailLoyaltyManager::PostCardTransFromSalesTable(_salesTable.SalesId);

                    // If after cancelling a line and the sales order status becomes invoiced, MCROrderStopped should be set to No
                    ttsbegin;
                    _salesTable.selectForUpdate(true);
                    _salesTable.MCROrderStopped = NoYes::No;
                    _salesTable.update();
                    ttscommit;
                }

                ret = mcrSalesOrderCancellation.tryPostCancelAdjPayment(_salesTable);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelOrderFTC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the specified sales order.
    /// Cancels the specified sales order for FTC processing.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order to cancel
    /// </param>
    /// <param name="_displayErrors">
    /// The option to display errors that occur during cancellation; optional.
    /// </param>
    /// <param name="_nsfCancel">
    /// The option to cancel none sufficient funds related payments for the order; optional.
    /// </param>
    /// <returns>
    /// true if no errors occur during cancellation; otherwise, false.
    /// </returns>
    public static boolean cancelOrderFTC(  SalesTable _salesTable,
                                        boolean _displayErrors  = true,
                                        boolean _nsfCancel      = false)
    {
        boolean         ret;
        SalesLine       salesLine;
        InventTable     inventTable;
        MCRInventTable  mcrInventTable;
        MCRSalesOrderCancellation mcrSalesOrderCancellation;

        if (_salesTable)
        {
            mcrSalesOrderCancellation = new MCRSalesOrderCancellation();
            mcrSalesOrderCancellation.preCancel(_salesTable);

            if (mcrSalesOrderCancellation.isOrderCancellationAllowed(_salesTable,
                                                                    _displayErrors))
            {
                while select forupdate salesLine
                    where salesLine.SalesId == _salesTable.SalesId
                        && salesLine.SalesStatus == SalesStatus::Backorder
                    exists join inventTable
                    where inventTable.ItemId == salesLine.ItemId
                    exists join mcrInventTable
                    where mcrInventTable.InventTable == inventTable.RecId
                        && mcrInventTable.ftcExempt == NoYes::No
                {
                    if (mcrSalesOrderCancellation.cancelLine(salesLine, _displayErrors))
                    {
                        mcrSalesOrderCancellation.postCancelLine(salesLine);
                        ret = true;
                    }
                }
            }

            if (ret)
            {
                // some or all lines are cancelled
                if (_nsfCancel)
                {
                    mcrSalesOrderCancellation.postCancelNSFPayment(_salesTable.RecId);
                }
                mcrSalesOrderCancellation.postCancelAdjPayment(_salesTable);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RefundLoyaltyPointsForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refund loyalty points for the sales line if quantity is reduced or line is cancelled and sales order was paid by loyalty.
    /// </summary>
    /// <param name = "_salestable">
    /// The sales order to which sales line belongs.
    /// </param>
    /// <param name = "_salesline">
    /// The sales line for which points have to be refunded.
    /// </param>
    public void RefundLoyaltyPointsForSalesLine(SalesTable _salestable, SalesLine _salesline)
    {
        if (RetailLoyaltyCardRewardPointTrans::IsSalesOrderPaidByLoyalty(_salesTable.SalesId, _salesTable.dataAreaId))
        {
            mcrSalesOrderTotals salesOrderTotals = new mcrSalesOrderTotals(_salesTable);
            AmountCur currentOrderAmt   = salesOrderTotals.getTotalOrder();
            if (currentOrderAmt < 0)
            {
                // Check if the negative amount is equal to the discount amount
                // if it is set the current order amt to a zero since discounts
                // are taken care of by the order totals
                if (salesOrderTotals.getRemainingDisc() == abs(currentOrderAmt))
                {
                    currentOrderAmt = 0;
                }
            }
           
            if (totalBefore > 0)
            {
                RetailLoyaltyManager::RefundLoyaltyPointsForSalesLine(_salestable, _salesLine,  currentOrderAmt - totalBefore);
            }
            else
            {
                MCRCustPaymTotals mcrCustPaymTotals = MCRCustPaymTotals::construct(_salesTable.TableId, _salesTable.RecId);
                totalBefore = mcrCustPaymTotals.getTotalPaymAmount();
                RetailLoyaltyManager::RefundLoyaltyPointsForSalesLine(_salestable, _salesLine,  currentOrderAmt - totalBefore);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decline the payments after order gets cancelled.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order/return order that was cancelled.
    /// </param>
    internal static void cancelPayments(SalesTable _salesTable)
    {
        MCRCustPaymTable mcrCustPaymTableLocal;

        update_recordset mcrCustPaymTableLocal
            setting Status = MCRCustPaymStatus::Declined
            where mcrCustPaymTableLocal.RefRecId == _salesTable.RecId
            &&    mcrCustPaymTableLocal.RefTableId == _salesTable.TableId
            &&    (mcrCustPaymTableLocal.Status == MCRCustPaymStatus::NotSubmitted
            ||    mcrCustPaymTableLocal.Status == MCRCustPaymStatus::Authorized);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>