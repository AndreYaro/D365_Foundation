<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendSettleSummarization_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Summarizes accounts in settled transactions for customer or vendor.
/// </summary>
public class CustVendSettleSummarization_PSN
{
    CustVendAC accountNumber;
    TransDate transactionDate;
    LedgerVoucherGroup ledgerVoucherGroup;
    NumberSequenceReference numRefCustVendPaymVoucher;
    SysModule module;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendSettleSummarization_PSN construct(CustVendAC _accountNumber,
        TransDate _transactionDate,
        LedgerVoucherGroup _ledgerVoucherGroup,
        NumberSequenceReference _numRefCustVendPaymVoucher,
        SysModule _module)
    {
        if (!(_module == SysModule ::Cust || _module == SysModule::Vend))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CustVendSettleSummarization_PSN custVendSettleSummarization = new CustVendSettleSummarization_PSN();

        custVendSettleSummarization.initializeCustVendSettleSummarization(
            _accountNumber,
            _transactionDate,
            _ledgerVoucherGroup,
            _numRefCustVendPaymVoucher,
            _module);

        return custVendSettleSummarization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustVendSettleSummarization</Name>
				<Source><![CDATA[
    private void initializeCustVendSettleSummarization(
            CustVendAC _accountNumber,
            TransDate _transactionDate,
            LedgerVoucherGroup _ledgerVoucherGroup,
            NumberSequenceReference _numRefCustVendPaymVoucher,
            SysModule _module)
    {
        accountNumber = _accountNumber;
        transactionDate = _transactionDate;
        ledgerVoucherGroup = _ledgerVoucherGroup;
        numRefCustVendPaymVoucher = _numRefCustVendPaymVoucher;
        module = _module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustVendTransForSummarization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the corresponding <c>CustTrans</c> table record or <c>VendTrans</c> table record for the designated parameter values.
    /// </summary>
    /// <param name="_voucher">
    /// The <c>Voucher</c> value of the record(s) to delete from the <c>CustTrans</c> table or <c>VendTrans</c> table.
    /// </param>
    /// <param name="_ledgerTransTypeFilter">
    /// The <c>LedgerTransType</c> value of the record(s) to delete from the <c>CustTrans</c> table or <c>VendTrans</c> table.
    /// </param>
    /// <remarks>
    /// If the _ledgerTransTypeFilter parameter has a value of None, then the method treats that as no filter.
    /// </remarks>
    protected void deleteCustVendTransForSummarization(
            Voucher _voucher,
            LedgerTransType _ledgerTransTypeFilter = LedgerTransType::None)
    {
        CustVendTrans   custVendTrans;

        // initializing by ternary operator raises an unexpected compiler warning
        if (module ==SysModule::Cust)
        {
            CustTrans custTrans;
            custVendTrans = custTrans.data();
        }
        else if (module ==SysModule::Vend)
        {
            VendTrans vendTrans;
            custVendTrans = vendTrans.data();
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        delete_from custVendTrans
            where custVendTrans.AccountNum == accountNumber
                && custVendTrans.Voucher == _voucher
                && custVendTrans.TransDate == transactionDate
                && (custVendTrans.TransType == _ledgerTransTypeFilter
                || _ledgerTransTypeFilter == LedgerTransType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransTypeForSummarize</Name>
				<Source><![CDATA[
    protected LedgerTransType getTransTypeForSummarize(LedgerPostingType _ledgerPostingType)
    {
        LedgerTransType ledgerTransType = LedgerTransType::None;

        switch (_ledgerPostingType)
        {
            case LedgerPostingType::CustSettlement, LedgerPostingType::VendSettlement,
                 LedgerPostingType::CustBalance, LedgerPostingType::VendBalance,
                 LedgerPostingType::Tax :

                ledgerTransType = LedgerTransType::Settlement;
                break;

            case LedgerPostingType::CustCashDisc, LedgerPostingType::VendCashDisc :

                ledgerTransType = LedgerTransType::CashDiscount;
                break;

            case LedgerPostingType::MSTDiff,
                 LedgerPostingType::MSTDiffSecond :

                ledgerTransType = LedgerTransType::PennyDifference;
                break;

            case LedgerPostingType::MCRUnderpayWriteOff :

                ledgerTransType = LedgerTransType::MCRUnderpayWriteOff;
                break;
        }

        return ledgerTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEmptySummarizedVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes empty <c>LedgerVoucherObject</c> and <c>LedgerVoucher</c> objects from the
    /// internal <c>LedgerVoucherGroup</c> object.
    /// </summary>
    protected void removeEmptySummarizedVouchers()
    {
        if (ledgerVoucherGroup == null)
        {
            throw error(strFmt("@SYS118114", funcName()));
        }

        Map ledgerVoucherGroupCollection = ledgerVoucherGroup.getInternalCollection();
        MapEnumerator ledgerVoucherGroupEnumerator = ledgerVoucherGroupCollection.getEnumerator();
        ledgerVoucherList ledgerVoucherList;
        LedgerVoucherObject ledgerVoucherObject;
        Set ledgerVouchersToDelete = new Set(Types::Container);
        Set ledgerVoucherObjectsToDelete = new Set(Types::Class);
        LedgerVoucher ledgerVoucher;
        SetEnumerator setEnumerator;

        while (ledgerVoucherGroupEnumerator.moveNext())
        {
            ledgerVoucher = ledgerVoucherGroupEnumerator.currentValue();
            ledgerVoucherObjectsToDelete = new Set(Types::Class);
            container key = ledgerVoucherGroupEnumerator.currentKey();

            ledgerVoucherList = ledgerVoucher.getInternalCollection();

            boolean haveMore = ledgerVoucherList.first();

            while (haveMore)
            {
                ledgerVoucherObject = ledgerVoucherList.item();

                if (ledgerVoucherObject.transElements() == 0)
                {
                    ledgerVoucherObjectsToDelete.add(ledgerVoucherObject);
                }

                haveMore = ledgerVoucherList.next();
            }

            if (ledgerVoucherObjectsToDelete.elements() == ledgerVoucherList.elements())
            {
                ledgerVouchersToDelete.add(key);
            }
        }

        ledgerVoucherGroupEnumerator = null;

        setEnumerator = ledgerVoucherObjectsToDelete.getEnumerator();

        while (setEnumerator.moveNext())
        {
            ledgerVoucherObject = setEnumerator.current();
            this.removeSettlementVoucher(ledgerVoucherObject.parmVoucher());
            NumberSeq::releaseNumber(numRefCustVendPaymVoucher.numberSequenceTable().RecId,  ledgerVoucherObject.parmVoucher());
            Debug::assert(ledgerVoucherList.remove(ledgerVoucherObject));
        }

        setEnumerator = ledgerVouchersToDelete.getEnumerator();

        Map ledgerVoucherMap = ledgerVoucherGroup.getInternalCollection();

        while (setEnumerator.moveNext())
        {
            ledgerVoucherMap.remove(setEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostingTypeEnabledForSummarize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether <c>LedgerPostingType</c> is enabled for summarization.
    /// </summary>
    /// <param name = "_ledgerPostingType">
    /// The <c>LedgerPostingType</c> value.
    /// </param>
    /// <returns>
    /// true if the specified <c>LedgerPostingType</c> is allowed for summarization; otherwise, false.
    ///</returns>
    protected boolean isPostingTypeEnabledForSummarize(LedgerPostingType _ledgerPostingType)
    {
        return this.getTransTypeForSummarize(_ledgerPostingType) != LedgerTransType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeSettlementVoucherGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes the amounts for class instance object of type <c>LedgerVoucherGroup</c> by the <c>DimensionAttributeValueCombination</c>
    /// account value and currency.
    /// </summary>
    /// <remarks>
    /// Any 0 balance accounts will be deleted. If an entire <c>LedgerVoucherObject</c> value has all accounts
    /// in the transaction list summarize to 0, the voucher object will be deleted from the <c>LedgerVoucherObject</c> instance.
    /// Any <c>CustTrans</c> or <c>VendTrans</c> records related to the voucher will also be deleted in this scenario.
    /// </remarks>
    public void summarizeSettlementVoucherGroup()
    {
        if (!ledgerVoucherGroup
            || ledgerVoucherGroup.getInternalCollection() == null
            || !(PublicSectorUtils::arePostingDefinitionsEnabledForPubSect())
            || LedgerParameters::find().IsSummarizeSettlementEnabled_PSN == NoYes::No)
        {
            return;
        }

        Map ledgerVoucherMap = ledgerVoucherGroup.getInternalCollection();
        MapEnumerator  ledgerGroupEnumerator = ledgerVoucherMap.getEnumerator();
        LedgerVoucherList ledgerVoucherList;
        LedgerVoucherPost currentLedgerVoucher;
        LedgerVoucherObject currentLedgerVoucherObject;
        Set originalTransTypesForTransactions, finalTransTypesForTransactions;
        SetEnumerator voucherTransEnumerator;
        LedgerTransType ledgerTransType;
        boolean moreVoucherObjects;

        while (ledgerGroupEnumerator.moveNext())
        {
            currentLedgerVoucher = ledgerGroupEnumerator.currentValue();

            ledgerVoucherList = currentLedgerVoucher.getInternalCollection();

            moreVoucherObjects = ledgerVoucherList.first();
            while (moreVoucherObjects)
            {
                currentLedgerVoucherObject = ledgerVoucherList.item();

                originalTransTypesForTransactions = new Set(Types::Enum);
                finalTransTypesForTransactions = new Set(Types::Enum);

                this.summarizeTransactions(
                    currentLedgerVoucherObject,
                    originalTransTypesForTransactions,
                    finalTransTypesForTransactions);

                voucherTransEnumerator = originalTransTypesForTransactions.getEnumerator();

                while (voucherTransEnumerator.moveNext())
                {
                    ledgerTransType = voucherTransEnumerator.current();

                    if (!finalTransTypesForTransactions.in(ledgerTransType))
                    {
                        this.deleteCustVendTransForSummarization(
                            currentLedgerVoucherObject.parmSubledgerVoucher(),
                            ledgerTransType);
                    }
                }

                moreVoucherObjects = ledgerVoucherList.next();
            }
        }

        ledgerGroupEnumerator = null;

        this.removeEmptySummarizedVouchers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSettlementVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the customer or vendor settlement records settlement voucher value to empty string.
    /// </summary>
    /// <param name = "_voucher">
    /// The <c>Voucher</c> value of the record(s) to update <c>CustSettlement</c> table or <c>VendSettlement</c> table.
    /// </param>
    internal protected void removeSettlementVoucher(Voucher _voucher)
    {
        if (_voucher == '')
        {
            return;
        }

        switch (module)
        {
            case SysModule::Cust:
                CustSettlement custSettlementLocal;

                update_recordset custSettlementLocal
                    setting SettlementVoucher = ''
                        where custSettlementLocal.SettlementVoucher == _voucher;
                break;

            case SysModule::Vend:
                VendSettlement vendSettlementLocal;

                update_recordset vendSettlementLocal
                    setting SettlementVoucher = ''
                        where vendSettlementLocal.SettlementVoucher == _voucher;
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summarizes accounts in transactions within a <c>LedgerVoucherObject</c> instance across posting types.
    /// </summary>
    /// <param name="_ledgerVoucherObject">
    /// The instance of a <c>LedgerVoucherObject</c> for which to process transactions.
    /// </param>
    /// <param name="_originalTransTypesForTransactions">
    /// A set representing the <c>LedgerTransType</c> values for the initial list of transactions.
    /// </param>
    /// <param name="_finalTransTypesForTransactions">
    /// A set representing the <c>LedgerTransType</c> values for the final list of transactions.
    /// </param>
    /// <remarks>
    /// The <c>LedgerPostingType</c> value of the final summarized transaction is determined
    /// by the <c>LedgerPostingType</c> value for the highest or lowest amount for the account.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws invalid parameter error if the <c>LedgerVoucherObject</c> parameter is null.
    /// </exception>
    protected void summarizeTransactions(
        LedgerVoucherObject _ledgerVoucherObject,
        Set _originalTransTypesForTransactions,
        Set _finalTransTypesForTransactions)
    {
        if (!_ledgerVoucherObject)
        {
            throw error(strFmt("@SYS118114", funcName()));
        }

        ledgerVoucherTransList ledgerVoucherTransList = _ledgerVoucherObject.getInternalCollection();

        boolean moreVoucherTransObjects = ledgerVoucherTransList.first();

        LedgerPostingType  ledgerPostingType;
        ledgerTransType ledgerTransType;
        LedgerVoucherTransObject currentLedgerVoucherTransObject;
        Map newTransByAccountAndCurrency = new Map(Types::String, Types::Class);
        MapEnumerator newTransByAccountAndCurrencyEnumerator;
        Map newTransByPostingType = new Map(Types::Enum, Types::Class);
        MapEnumerator newTransByPostingTypeEnumerator;
        LedgerVoucherTransObject ledgerVoucherTransObject;

        while (moreVoucherTransObjects)
        {
            currentLedgerVoucherTransObject = ledgerVoucherTransList.item();

            ledgerPostingType = currentLedgerVoucherTransObject.parmPostingType();

            if (this.isPostingTypeEnabledForSummarize(ledgerPostingType) == false)
            {
                moreVoucherTransObjects = ledgerVoucherTransList.next();
                continue;
            }
            else
            {
                ledgerTransType = this.getTransTypeForSummarize(ledgerPostingType);
                _originalTransTypesForTransactions.add(ledgerTransType);
            }

            str accountCurrencyKey = int642str(currentLedgerVoucherTransObject.parmLedgerDimensionID())
                                    + currentLedgerVoucherTransObject.parmCurrencyCode();

            if (newTransByAccountAndCurrency.exists(accountCurrencyKey))
            {
                newTransByPostingType = newTransByAccountAndCurrency.lookup(accountCurrencyKey);

                if (newTransByPostingType.exists(ledgerPostingType))
                {
                    ledgerVoucherTransObject = newTransByPostingType.lookup(ledgerPostingType);
                    ledgerVoucherTransObject.parmTransactionCurrencyAmount(ledgerVoucherTransObject.parmTransactionCurrencyAmount() + currentLedgerVoucherTransObject.parmTransactionCurrencyAmount());
                    ledgerVoucherTransObject.parmAccountingCurrencyAmount(ledgerVoucherTransObject.parmAccountingCurrencyAmount() + currentLedgerVoucherTransObject.parmAccountingCurrencyAmount());
                    ledgerVoucherTransObject.parmReportingCurrencyAmount(ledgerVoucherTransObject.parmReportingCurrencyAmount() + currentLedgerVoucherTransObject.parmReportingCurrencyAmount());
                }
                else
                {
                    newTransByPostingType.insert(
                        ledgerPostingType,
                        currentLedgerVoucherTransObject);
                }
            }
            else
            {
                newTransByPostingType = new Map(Types::Enum, Types::Class);
                newTransByPostingType.insert(
                    ledgerPostingType,
                    currentLedgerVoucherTransObject);
                newTransByAccountAndCurrency.insert(accountCurrencyKey, newTransByPostingType);
            }

            moreVoucherTransObjects = ledgerVoucherTransList.next();
        }

        _ledgerVoucherObject.removeAllTrans();
        ledgerVoucherTransList = _ledgerVoucherObject.getInternalCollection();

        newTransByAccountAndCurrencyEnumerator = newTransByAccountAndCurrency.getEnumerator();

        LedgerPostingType postingTypeForMaxAmount, postingTypeForMinAmount;
        LedgerVoucherTransObject firstLedgerVoucherTransObject;
        Money totalAccountingAmount;
        Money totalReportingAmount;
        Money totalTransactionAmount;
        Money currentAccountingAmount;
        Money currentReportingAmount;
        Money currentTransactionAmount;
        Money maxPostingAmount;
        Money minPostingAmount;
        ledgerPostingType currentPostingType;

        while (newTransByAccountAndCurrencyEnumerator.moveNext())
        {
            totalTransactionAmount = 0;
            totalAccountingAmount = 0;
            totalReportingAmount = 0;
            maxPostingAmount = 0;
            minPostingAmount = 0;
            firstLedgerVoucherTransObject = null;
            postingTypeForMaxAmount = LedgerPostingType::None;
            postingTypeForMinAmount = LedgerPostingType::None;
            ledgerTransType = LedgerTransType::None;

            newTransByPostingType = newTransByAccountAndCurrencyEnumerator.currentValue();
            newTransByPostingTypeEnumerator = newTransByPostingType.getEnumerator();

            while (newTransByPostingTypeEnumerator.moveNext())
            {
                currentLedgerVoucherTransObject = newTransByPostingTypeEnumerator.currentValue();
                currentTransactionAmount = currentLedgerVoucherTransObject.parmTransactionCurrencyAmount();
                currentAccountingAmount = currentLedgerVoucherTransObject.parmAccountingCurrencyAmount();
                currentReportingAmount = currentLedgerVoucherTransObject.parmReportingCurrencyAmount();
                currentPostingType = currentLedgerVoucherTransObject.parmLedgerPostingType();

                if (firstLedgerVoucherTransObject == null)
                {
                    firstLedgerVoucherTransObject = currentLedgerVoucherTransObject;
                }

                if (currentAccountingAmount > 0)
                {
                    if (currentAccountingAmount > maxPostingAmount)
                    {
                        postingTypeForMaxAmount = currentPostingType;
                        maxPostingAmount = currentAccountingAmount;
                    }
                }
                else if (currentAccountingAmount < 0)
                {
                    if (currentAccountingAmount < minPostingAmount)
                    {
                        postingTypeForMinAmount = currentPostingType;
                        minPostingAmount = currentAccountingAmount;
                    }
                }

                totalTransactionAmount += currentTransactionAmount;
                totalAccountingAmount += currentAccountingAmount;
                totalReportingAmount += currentReportingAmount;
            }

            if (totalTransactionAmount != 0 || totalAccountingAmount != 0 || totalReportingAmount != 0)
            {
                if (totalTransactionAmount > 0 || totalAccountingAmount > 0 || totalReportingAmount > 0)
                {
                    ledgerPostingType = postingTypeForMaxAmount;
                }
                else
                {
                    ledgerPostingType = postingTypeForMinAmount;
                }

                firstLedgerVoucherTransObject.parmTransactionCurrencyAmount(totalTransactionAmount);
                firstLedgerVoucherTransObject.parmAccountingCurrencyAmount(totalAccountingAmount);
                firstLedgerVoucherTransObject.parmReportingCurrencyAmount(totalReportingAmount);
                firstLedgerVoucherTransObject.parmPostingType(ledgerPostingType);

                ledgerTransType = this.getTransTypeForSummarize(LedgerPostingType);

                if (!_finalTransTypesForTransactions.in(ledgerTransType))
                {
                    _finalTransTypesForTransactions.add(ledgerTransType);
                }
                _ledgerVoucherObject.addTrans(firstLedgerVoucherTransObject);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>