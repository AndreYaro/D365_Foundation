<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCost</c> class performs the backflush costing for a specified period.
/// </summary>
/// <remarks>
///    This is the parent class of a whole class hierarchy.For each different stage that will be done
///    during the backflush costing process a separate child class exists.
/// </remarks>
abstract class LeanCost extends RunBaseBatch
{
    // Caller parameters
    RecId                           leanCostingRecId;

    // GLobal variables
    LeanCosting                     leanCosting;
    LeanCostingFacadeBase           leanCostingFacade;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        leanCostingRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList]        = _packedClass;
                this.rereadRecords();
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLeanCostingFacade</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LeanCostingFacadeBase getLeanCostingFacade()
    {
        if (leanCostingFacade)
        {
            return leanCostingFacade;
        }
        return LeanCostingFacade::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a lean costing record has been initialized
    /// </summary>
    /// <returns>
    ///    true if a lean costing record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkStatus()
    {
        boolean ret = true;

        if (!leanCosting.RecId)
        {
            error("@SYS301729");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the main entry point for the child classes.
    /// </summary>
    /// <remarks>
    /// This abstract method must be overwritten in the child classes.This method is the main entry point
    /// and will be called from the <see cref="M:LeanCost.run" /> method.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract void execute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the parameters for backflush closing.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This will call the <c>rereadRecords</c> method on the records that should be processed.
    /// </remarks>
    public boolean init()
    {
        boolean ret = super();

        // Before I can start working, reread the records
        this.rereadRecords();

        this.initLogger();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCosting</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanCosting parmLeanCosting()
    {
        return leanCosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCostingFacade</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanCostingFacadeBase parmLeanCostingFacade(LeanCostingFacadeBase _leanCostingFacade = leanCostingFacade)
    {
        leanCostingFacade = _leanCostingFacade;

        return leanCostingFacade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCostingRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecId parmLeanCostingRecId(RecId _leanCostingRecId = leanCostingRecId)
    {
        leanCostingRecId = _leanCostingRecId;

        return leanCostingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID values for the lean costing record from the database.
    /// </summary>
    /// <remarks>
    ///    This is performed so that the current version of the records is always available.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void rereadRecords()
    {
        select firstonly leanCosting where leanCosting.RecId == leanCostingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the logger.
    /// </summary>
    /// <remarks>
    /// The logging feature can be implemented in the children classes
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initLogger()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the logs.
    /// </summary>
    /// <remarks>
    /// The logging feature can be implemented in the children classes
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void persistLog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the main sequence of the lean costing.
    /// </summary>
    /// <remarks>
    /// This method will call the <see cref="M:LeanCost.execute" /> method, which will be overwritten on
    /// each child class.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    /// An OCC conflict cannot be recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    /// An OCC conflict cannot be recovered.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// No batch information object was found.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        try
        {
            if (!this.batchInfo())
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            ttsbegin;

            // Initialize parameters
            this.init();

            this.execute();

            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::DuplicateKeyException;
            }
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
        
            retry;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch
        {
            this.persistLog();

            throw error("@CostManagement:MessageError_LeanCost");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend the <c>RunBaseBatch</c> class must override the <c>runsImpersonated</c>
    ///    method and return false, if those tasks are to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of a subclass of the <c>LeanCost</c> class.
    /// </summary>
    /// <param name="_workType">
    ///    The type of subclass to create.
    /// </param>
    /// <param name="_leanCostingFacade">
    ///    An instance of the <c>LeanCostingFacade</c> class to pass to the new instance created by this
    ///    method.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>LeanCost</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified type of subclass to create is not implemented.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCost construct(
        LeanCostWorkType        _workType,
        LeanCostingFacadeBase   _leanCostingFacade
        )
    {
        switch (_workType)
        {
            case LeanCostWorkType::Init :
                return LeanCost_Init::construct(_leanCostingFacade);
            case LeanCostWorkType::CalcProdFlow :
                return LeanCost_CalcProdFlowBase::construct(_leanCostingFacade);
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default date for the backflush costing.
    /// </summary>
    /// <returns>
    ///    The default date for the backflush costing.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static TransDate defaultDate()
    {
        TransDate defaultDate = LeanCosting::lastToDate();
        if (defaultDate)
        {
            if (defaultDate != endmth(defaultDate))
            {
                defaultDate = endmth(defaultDate);
            }
            else
            {
                defaultDate = endmth(nextMth(defaultDate));
            }
        }
        else
        {
            defaultDate = endmth(prevMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        return defaultDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS301730";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
