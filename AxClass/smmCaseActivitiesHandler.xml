<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmCaseActivitiesHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Event handler for <c>smmActivities</c>.
/// </summary>
class smmCaseActivitiesHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>smmActivities_Pre_delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy responsibilities between hierarchies.
    /// </summary>
    /// <param name="_args">
    /// The event args.
    /// </param>
    [PreHandlerFor(tableStr(smmActivities), tableMethodStr(smmActivities, delete))]
    public static void smmActivities_Pre_delete(XppPrePostArgs args)
    {
        smmDeletedActivities        smmDeletedActivities;
        smmOutlookRecurrencePattern smmOutlookRecurrencePattern;
        SMAServiceOrderLine         serviceOrderLine;
        smmActivities               activities = args.getThis();

        // Write to CRM transaction log
        smmTransLog::initTrans(activities, smmLogAction::delete);

        // Was the activity syncrhonized to Outlook
        if (activities.OutlookEntryID)
        {
            // Mark the activity for deletion when next Outlook syncrhonization is executed
            smmDeletedActivities.ActivityNumber         = activities.ActivityNumber;
            smmDeletedActivities.Category               = activities.Category;
            smmDeletedActivities.OutlookEntryID         = activities.OutlookEntryID;
            smmDeletedActivities.OutlookGlobalObjectID  = activities.OutlookGlobalObjectID;
            smmDeletedActivities.ResponsibleWorker      = activities.ResponsibleWorker;

            smmDeletedActivities.OriginalAppointmentStartDateTime   = activities.OriginalAppointmentStartDateTime;
            smmDeletedActivities.RecurrenceState                    = activities.RecurrenceState;
            smmDeletedActivities.IsMasterAppointment                = activities.IsMasterAppointment;
            smmDeletedActivities.StartDateTime                      = activities.StartDateTime;
            smmDeletedActivities.IsEntireSeries                     = false;

            if (smmDeletedActivities.validateWrite(true))
            {
                smmDeletedActivities.insert();
            }

            if (activities.Category == smmActivityCategory::Task && activities.RecurrenceState == smmOutlookRecurrenceState::Master)
            {
                smmOutlookRecurrencePattern = smmOutlookRecurrencePattern::find(activities.OutlookEntryID,true);
                if (smmOutlookRecurrencePattern)
                {
                    smmOutlookRecurrencePattern.delete();
                }
            }
        }

        if (activities.Closed == NoYes::Yes && smmActivityParentLinkTable::existsParentLink(activities.ActivityNumber, smmActivityParentType::ServiceOrderLine))
        {
            update_recordset serviceOrderLine
                setting ActivityId = ''
                where   serviceOrderLine.ActivityId == activities.ActivityNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Post_insert</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(smmActivities), tableMethodStr(smmActivities, insert))]
    public static void smmActivities_Post_insert(XppPrePostArgs args)
    {
        smmActivities activities = args.getThis();

        // Update CRM transaction log
        smmTransLog::initTrans(activities, smmLogAction::insert);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_onModifiedField</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(smmActivities), DataEventType::ModifiedField)]
    public static void smmActivities_onModifiedField(Common _sender, DataEventArgs _args)
    {
        smmActivities activities = _sender;
        ModifyFieldEventArgs args = _args;

        switch (args.parmFieldId())
        {
            case fieldNum(smmActivities, Closed) :
                if (smmActivityParentLinkTable::existsParentLink(activities.ActivityNumber, smmActivityParentType::ServiceOrderLine))
                {
                    smmCaseActivitiesHandler::updateSignOff(activities);
                }
                break;

            case fieldNum(smmActivities, StartDateTime) :
                if (activities.orig().StartDateTime != activities.StartDateTime)
                {
                    if (activities.Category == smmActivityCategory::Appointment && smmActivityParentLinkTable::existsParentLink(activities.ActivityNumber, smmActivityParentType::ServiceOrderLine))
                    {
                        activities.findEndDateTimeBasedOnTotalWork();
                    }
                    else
                    {
                        activities.setEndTime(activities.startTime() + activities.defaultActivityDuration());
                    }
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Pre_update</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(smmActivities), tableMethodStr(smmActivities, update))]
    public static void smmActivities_Pre_update(XppPrePostArgs args)
    {
        smmActivities activities = args.getThis();

        // Check if the description has changed
        if (activities.orig().UserMemo == "" && activities.UserMemo != activities.orig().UserMemo)
        {
            smmSourceType::checkAndCreateCaseLogForSourceType(activities);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Post_update</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(smmActivities), tableMethodStr(smmActivities, update))]
    public static void smmActivities_Post_update(XppPrePostArgs args)
    {
        smmActivities activities = args.getThis();
        smmAttendeeTable smmAttendeeTable;
        smmActivities smmActivities;

        // Write to CRM transaction log
        smmTransLog::initTrans(activities, smmLogAction::update);

        if (activities.Category == smmActivityCategory::Task && activities.ActivityTaskTimeType == smmActivityTaskTimeType::Completed && activities.OutlookEntryID)
        {
            activities.RecurrenceState = smmOutlookRecurrenceState::NotRecurring;
            smmOutlookRecurrencePattern smmOutlookRecurrencePattern = smmOutlookRecurrencePattern::find(activities.OutlookEntryID, true);
            if (smmOutlookRecurrencePattern)
            {
                smmOutlookRecurrencePattern.delete();
            }
        }

        if (!activities.IsTemplate && activities.isAttendeeAllowed())
        {
            // Check if responsible employee had been changed for appointment/action
            if (activities.orig().ResponsibleWorker != activities.ResponsibleWorker
                && activities.ResponsibleWorker)
            {
                smmAttendeeTable = smmAttendeeTable::findAttendee(activities.ActivityNumber,true);

                if (activities.Closed == NoYes::No && smmActivityParentLinkTable::existsParentLink(activities.ActivityNumber, smmActivityParentType::ServiceOrderLine))
                {
                    SMAServiceOrderLine serviceOrderLine;
                    while select forupdate serviceOrderLine where serviceOrderLine.ActivityId == activities.ActivityNumber
                    {
                        serviceOrderLine.Worker = activities.ResponsibleWorker;
                        serviceOrderLine.modifiedField(fieldNum(SMAServiceOrderLine, Worker));
                        serviceOrderLine.doUpdate();
                    }
                }
            }
        }

        if (activities.orig().Closed != activities.Closed && smmActivityParentLinkTable::existsParentLink(activities.ActivityNumber, smmActivityParentType::ServiceOrderLine))
        {
            activities.signOffServiceLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_onValidatedField</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(smmActivities), DataEventType::ValidatedField)]
    public static void smmActivities_onValidatedField(Common _sender, DataEventArgs _e)
    {
        ValidateFieldEventArgs args = _e;
        smmActivities activities = _sender;
        boolean ret = true;

        switch (args.parmFieldId())
        {
            case fieldNum(smmActivities, EndDateTime) :
                if (activities.Category == smmActivityCategory::Appointment && smmActivityParentLinkTable::existsParentLink(activities.ActivityNumber, smmActivityParentType::ServiceOrderLine))
                {
                    // End date and time for activities that are related to service order lines can not be changed manually. Changes to the expected duration of the activity should be specified in the Total work field.
                    ret = ret && checkFailed("@SYS107836");
                }
                break;

            case fieldNum(smmActivities, AllDay) :
                    if (activities.Category == smmActivityCategory::Appointment && smmActivityParentLinkTable::existsParentLink(activities.ActivityNumber, smmActivityParentType::ServiceOrderLine))
                {
                    // All day appointments are not allowed for service line activities
                    ret = ret && checkFailed("@SYS107837");
                }
                break;
        }

        if (!ret)
        {
            args.parmValidateResult(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_onValidatedWrite</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(smmActivities), DataEventType::ValidatedWrite)]
    public static void smmActivities_onValidatedWrite(Common _sender, DataEventArgs _e)
    {
        ValidateEventArgs args = _e;
        smmActivities activities = _sender;
        boolean ret = true;

        if (smmActivityParentLinkTable::existsParentLink(activities.ActivityNumber, smmActivityParentType::ServiceOrderLine))
        {
            args.parmValidateResult(args.parmValidateResult() && smmCaseActivitiesHandler::validateWriteServiceOrder(activities));
        }

        if (!ret)
        {
            args.parmValidateResult(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_onValidatedDelete</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(smmActivities), DataEventType::ValidatedDelete)]
    public static void smmActivities_onValidatedDelete(Common _sender, DataEventArgs _e)
    {
        smmActivities activities = _sender;
        ValidateEventArgs args = _e;

        if (activities.Closed == NoYes::No && smmActivityParentLinkTable::existsParentLink(activities.ActivityNumber, smmActivityParentType::ServiceOrderLine))
        {
            // The activity is related to a service order line and it can only be deleted if the activity is closed.
            args.parmValidateResult(args.parmValidateResult() && checkFailed("@SYS107829"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSignOff</Name>
				<Source><![CDATA[
    private static void updateSignOff(smmActivities _activities)
    {
        SMAServiceOrderTable    serviceOrderTable;
        SMAServiceOrderLine     corrServiceOrderLine;
        SMAServiceOrderLine     serviceOrderLine;
        Args                    args;
        MenuFunction            menuFunction;
        boolean                 updateThroughSLA = false;

        if (_activities.Closed == NoYes::Yes)
        {
            select firstonly ServiceOrderId,RecId from corrServiceOrderLine where corrServiceOrderLine.ActivityId == _activities.ActivityNumber;
            serviceOrderTable = SMAServiceOrderTable::find(corrServiceOrderLine.ServiceOrderId);
            select RecId from  serviceOrderLine
                         where serviceOrderLine.ServiceOrderId  == corrServiceOrderLine.ServiceOrderId
                            && serviceOrderLine.SignOff         == NoYes::No
                            && serviceOrderLine.RecId           != corrServiceOrderLine.RecId;
            if (!serviceOrderLine.RecId)
            {
                // Header should be signed off
                if (serviceOrderTable.ServiceLevelAgreementStatus == SMALogStatus::Open)
                {
                    // SLA cancel prompt
                    menuFunction = new MenuFunction(menuitemActionStr(SMAServiceLevelAgreementLog_Close), MenuItemType::Action);
                    args = new Args();
                    args.record(_activities);
                    menuFunction.run(args);
                    updateThroughSLA = true;
                }
            }
        }

        if (!updateThroughSLA)
        {
            ttsbegin;
            _activities.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteServiceOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a service order against a service agreement interval, service level agreement interval,
    ///    and employee, category, or project.
    /// </summary>
    /// <returns>
    ///    false if validation against an employee, category, or project failed.
    /// </returns>
    /// <remarks>
    ///    If other validations failed, this method displays warnings.
    /// </remarks>
    public static boolean validateWriteServiceOrder(smmActivities _activities)
    {
        SMAAgreementTable       agreementTable;
        SMAServiceOrderTable    serviceOrderTable;
        SMAServiceOrderLine     serviceOrderLine;
        ProjValCheckTrans       projValCheckTrans = new ProjValCheckTrans();

        serviceOrderTable   = SMAServiceOrderTable::findByLineActivityId(_activities.ActivityNumber);

        // Validate against agreement
        agreementTable = SMAAgreementTable::find(serviceOrderTable.AgreementId);
        if (agreementTable.StartDate > _activities.startDate() || (agreementTable.EndDate && agreementTable.EndDate < _activities.endDate()))
        {
            warning("@SYS115422");
        }

        // Validate against SLA
        if ((serviceOrderTable.ServiceLevelAgreementStatus == SMALogStatus::Open)
            && (serviceOrderTable.serviceLevelAgreementStartDateTime() > _activities.StartDateTime
             || serviceOrderTable.displayLatestCompletionDateTime()    < _activities.EndDateTime))
        {
            warning("@SYS115423");
        }

        // Validate against employee/project/category
        while select serviceOrderLine where serviceOrderLine.ActivityId == _activities.ActivityNumber
        {
            serviceOrderLine.Worker = _activities.ResponsibleWorker;
            if (!projValCheckTrans.validateMandatory(serviceOrderLine))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>