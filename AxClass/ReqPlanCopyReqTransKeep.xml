<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlanCopyReqTransKeep</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqPlanCopyReqTransKeep</c> class copies the preserved requirements profile from the source master plan version
/// to the target master plan version.
/// </summary>
class ReqPlanCopyReqTransKeep extends SysQueryInsertRecordSet
{
    QueryBuildDataSource qbdsReqRoute;
    QueryBuildDataSource qbdsReqTransLiterals;

    ReqPlanVersion reqPlanVersionFrom;
    ReqPlanVersion reqPlanVersionTo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFieldMapping</Name>
				<Source><![CDATA[
    protected void initFieldMapping()
    {
        int reqTransDatasourceId         = qbdsReqRoute.uniqueId();
        int reqTransLiteralsDatasourceId = qbdsReqTransLiterals.uniqueId();

        this.mapField(reqTransLiteralsDatasourceId, fieldStr(ReqPlanCopyReqTransKeepLiterals, FuturesDays), fieldStr(ReqTrans, FuturesDays));
        this.mapField(reqTransLiteralsDatasourceId, fieldStr(ReqPlanCopyReqTransKeepLiterals, ActionDays), fieldStr(ReqTrans, ActionDays));
        this.mapField(reqTransLiteralsDatasourceId, fieldStr(ReqPlanCopyReqTransKeepLiterals, FuturesMarked), fieldStr(ReqTrans, FuturesMarked));
        this.mapField(reqTransLiteralsDatasourceId, fieldStr(ReqPlanCopyReqTransKeepLiterals, ActionMarked), fieldStr(ReqTrans, ActionMarked));
        this.mapField(reqTransLiteralsDatasourceId, fieldStr(ReqPlanCopyReqTransKeepLiterals, ActionQtyAdd), fieldStr(ReqTrans, ActionQtyAdd));
        this.mapField(reqTransLiteralsDatasourceId, fieldStr(ReqPlanCopyReqTransKeepLiterals, CovQty), fieldStr(ReqTrans, CovQty));
        this.mapField(reqTransLiteralsDatasourceId, fieldStr(ReqPlanCopyReqTransKeepLiterals, OpenStatus), fieldStr(ReqTrans, OpenStatus));
        this.mapField(reqTransLiteralsDatasourceId, fieldStr(ReqPlanCopyReqTransKeepLiterals, Keep), fieldStr(ReqTrans, Keep));
        this.mapField(reqTransLiteralsDatasourceId, fieldStr(ReqPlanCopyReqTransKeepLiterals, PlanVersion), fieldStr(ReqTrans, PlanVersion));

        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, ItemId), fieldStr(ReqTrans, ItemId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, CovInventDimId), fieldStr(ReqTrans, CovInventDimId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, ReqDate), fieldStr(ReqTrans, ReqDate));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, Direction), fieldStr(ReqTrans, Direction));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, RefType), fieldStr(ReqTrans, RefType));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, Qty), fieldStr(ReqTrans, Qty));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, OriginalQuantity), fieldStr(ReqTrans, OriginalQuantity));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, InventTransOrigin), fieldStr(ReqTrans, InventTransOrigin));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, RefId), fieldStr(ReqTrans, RefId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, ReqDateDlvOrig), fieldStr(ReqTrans, ReqDateDlvOrig));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, OprNum), fieldStr(ReqTrans, OprNum));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, ActionType), fieldStr(ReqTrans, ActionType));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, IsDerivedDirectly), fieldStr(ReqTrans, IsDerivedDirectly));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, Priority), fieldStr(ReqTrans, Priority));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, ActionDate), fieldStr(ReqTrans, ActionDate));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, FuturesDate), fieldStr(ReqTrans, FuturesDate));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, BOMRefRecId), fieldStr(ReqTrans, BOMRefRecId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, Level), fieldStr(ReqTrans, Level));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, BOMType), fieldStr(ReqTrans, BOMType));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, ItemRouteId), fieldStr(ReqTrans, ItemRouteId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, ItemBomId), fieldStr(ReqTrans, ItemBomId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, IsForecastPurch), fieldStr(ReqTrans, IsForecastPurch));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, MarkingRefInventTransOrigin), fieldStr(ReqTrans, MarkingRefInventTransOrigin));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, ReqTime), fieldStr(ReqTrans, ReqTime));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, FuturesTime), fieldStr(ReqTrans, FuturesTime));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, SupplyDemandSubClassification), fieldStr(ReqTrans, SupplyDemandSubClassification));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, IntercompanyPlannedOrder), fieldStr(ReqTrans, IntercompanyPlannedOrder));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, IsDelayed), fieldStr(ReqTrans, IsDelayed));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, RecId), fieldStr(ReqTrans, LastPlanRecId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, RequisitionLine), fieldStr(ReqTrans, RequisitionLine));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, PmfPlanGroupPrimaryIssue), fieldStr(ReqTrans, PmfPlanGroupPrimaryIssue));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, PmfPlanningItemId), fieldStr(ReqTrans, PmfPlanningItemId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, PmfPlanPriorityCurrent), fieldStr(ReqTrans, PmfPlanPriorityCurrent));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, PmfPlanGroupPriority), fieldStr(ReqTrans, PmfPlanGroupPriority));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, PmfPlanGroupId), fieldStr(ReqTrans, PmfPlanGroupId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, PdsExpiryDate), fieldStr(ReqTrans, PdsExpiryDate));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, PdsSellableDays), fieldStr(ReqTrans, PdsSellableDays));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, PmfCoByRefRecId), fieldStr(ReqTrans, PmfCoByRefRecId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, PmfActionQtyAdd), fieldStr(ReqTrans, PmfActionQtyAdd));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, CustGroupId), fieldStr(ReqTrans, CustGroupId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, CustAccountId), fieldStr(ReqTrans, CustAccountId));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, PlanningPriority), fieldStr(ReqTrans, PlanningPriority));
        this.mapField(reqTransDatasourceId, fieldStr(ReqTrans, VendId), fieldStr(ReqTrans, VendId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        Query query = new Query();

        qbdsReqRoute = query.addDataSource(tableNum(ReqTrans));
        qbdsReqRoute.addRange(fieldNum(ReqTrans, PlanVersion)).value(queryValue(reqPlanVersionFrom.RecId));
        qbdsReqRoute.addRange(fieldNum(ReqTrans, Keep)).value(queryValue(NoYes::Yes));
        qbdsReqRoute.addSortField(fieldNum(ReqTrans, RecId));
        
        // Join required as literals are not supported
        ReqPlanCopyReqTransKeepLiterals::createForPlan(reqPlanVersionTo.RecId);
        qbdsReqTransLiterals = qbdsReqRoute.addDataSource(tableNum(ReqPlanCopyReqTransKeepLiterals));
        qbdsReqTransLiterals.addRange(fieldNum(ReqPlanCopyReqTransKeepLiterals, PlanVersion)).value(queryValue(reqPlanVersionTo.RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onExecuted</Name>
				<Source><![CDATA[
    protected void onExecuted()
    {
        ReqPlanCopyReqTransKeepLiterals::deleteForPlan(reqPlanVersionTo.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetCursor</Name>
				<Source><![CDATA[
    protected Common initTargetCursor()
    {
        ReqTrans reqTransInsert;
        reqTransInsert.skipDataMethods(true);
        reqTransInsert.skipAosValidation(true);

        return reqTransInsert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReqPlanVersions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>ReqPlanCopyReqTransKeep</c> class.
    /// </summary>
    /// <param name="_reqPlanVersionFrom">
    ///     The version of the source master plan.
    /// </param>
    /// <param name="_reqPlanVersionTo">
    ///     The version of the target master plan.
    /// </param>
    /// <returns>A new instance.</returns>
    public static ReqPlanCopyReqTransKeep newFromReqPlanVersions(ReqPlanVersion _reqPlanVersionFrom, ReqPlanVersion _reqPlanVersionTo)
    {
        ReqPlanCopyReqTransKeep instance = new ReqPlanCopyReqTransKeep();
        instance.reqPlanVersionFrom = _reqPlanVersionFrom;
        instance.reqPlanVersionTo = _reqPlanVersionTo;

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>