<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseLinesVisibilityController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class controls visibility for expense types.
/// </summary>
class TrvExpenseLinesVisibilityController
{
    TrvAirlineVisibilityManager trvAirlineVisibilityManager;
    TrvAllowanceVisibilityManager trvAllowanceVisibilityManager;
    TrvCarRentalVisibilityManager trvCarRentalVisibilityManager;
    TrvCommonExpenseTypeVisibilityManager trvCommonExpenseTypeVisibilityManager;
    TrvEntertainmentVisibilityManager trvEntertainmentVisibilityManager;
    TrvHotelVisibilityManager trvHotelVisibilityManager;
    TrvTransportVisibilityManager trvTransportVisibilityManager;
    TrvReturnCashVisibilityManager trvReturnCashVisibilityManager;
    TrvExpensesVisibilityManager currentExpenseTypeVisibilityManager;
    TrvExpTrans trvExpTrans;
    FormRun trvExpenseForm;
    str dataSourceName, dataSourceNameAirline, dataSourceNameCarRental, dataSourceNameHotel, dataSourceNameTripLeg, dataSourceNameHeader;
    TrvExpType previousExpenseType;
    TrvExpSplitLineType previousSplitLineType;
    TrvExpSubCategoryEDT previousSubCategoryRecId;
    boolean previousCategoryProjectIntegration, previousLineIsCreditCardTransaction, previousLineIsInterCompanyTransaction, previousLineIsForeignCurrency;
    TrvAppStatus previousLineApprovalStatus;
    private ExpenseIVisibilityManager expenseVisibilityManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTrvAirlineVisibilityManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for an instance of <c>TrvAirlineVisibilityManager</c>.
    /// </summary>
    /// <returns>
    /// An object of type <c>TrvAirlineVisibilityManager</c>.
    /// </returns>
    TrvAirlineVisibilityManager getTrvAirlineVisibilityManager()
    {
        if (!trvAirlineVisibilityManager)
        {
            trvAirlineVisibilityManager = new TrvAirlineVisibilityManager(trvExpTrans, trvExpenseForm, dataSourceName, dataSourceNameAirline, dataSourceNameTripLeg, dataSourceNameHeader);
        }
        return trvAirlineVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrvAllowanceVisibilityManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for an instance of <c>TrvAllowanceVisibilityManager</c>.
    /// </summary>
    /// <returns>
    /// An object of type <c>TrvAllowanceVisibilityManager</c>.
    /// </returns>
    TrvAllowanceVisibilityManager getTrvAllowanceVisibilityManager()
    {
        if (!trvAllowanceVisibilityManager)
        {
            trvAllowanceVisibilityManager = new TrvAllowanceVisibilityManager(trvExpTrans, trvExpenseForm, dataSourceName, dataSourceNameHeader);
        }
        return trvAllowanceVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrvCarRentalVisibilityManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for an instance of <c>TrvCarRentalVisibilityManager</c>.
    /// </summary>
    /// <returns>
    /// An object of type <c>TrvCarRentalVisibilityManager</c>.
    /// </returns>
    TrvCarRentalVisibilityManager getTrvCarRentalVisibilityManager()
    {
        if (!trvCarRentalVisibilityManager)
        {
            trvCarRentalVisibilityManager = new TrvCarRentalVisibilityManager(trvExpTrans, trvExpenseForm, dataSourceName, dataSourceNameCarRental, dataSourceNameHeader);
        }
        return trvCarRentalVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrvCommonExpenseTypeVisibilityManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for an instance of <c>TrvCommonExpenseTypeVisibilityManager</c>.
    /// </summary>
    /// <returns>
    /// An object of type <c>TrvCommonExpenseTypeVisibilityManager</c>.
    /// </returns>
    TrvCommonExpenseTypeVisibilityManager getTrvCommonExpenseTypeVisibilityManager()
    {
        if (!trvCommonExpenseTypeVisibilityManager)
        {
            trvCommonExpenseTypeVisibilityManager = new TrvCommonExpenseTypeVisibilityManager(trvExpTrans, trvExpenseForm, dataSourceName, dataSourceNameHeader);
        }
        return trvCommonExpenseTypeVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrvEntertainmentVisibilityManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for an instance of <c>TrvEntertainmentVisibilityManager</c>.
    /// </summary>
    /// <returns>
    /// An object of type <c>TrvEntertainmentVisibilityManager</c>.
    /// </returns>
    TrvEntertainmentVisibilityManager getTrvEntertainmentVisibilityManager()
    {
        if (!trvEntertainmentVisibilityManager)
        {
            trvEntertainmentVisibilityManager = new TrvEntertainmentVisibilityManager(trvExpTrans, trvExpenseForm, dataSourceName, dataSourceNameHeader);
        }
        return trvEntertainmentVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrvHotelVisibilityManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for an instance of <c>TrvHotelVisibilityManager</c>.
    /// </summary>
    /// <returns>
    /// An object of type <c>TrvHotelVisibilityManager</c>.
    /// </returns>
    TrvHotelVisibilityManager getTrvHotelVisibilityManager()
    {
        if (!trvHotelVisibilityManager)
        {
            trvHotelVisibilityManager = new TrvHotelVisibilityManager(trvExpTrans, trvExpenseForm, dataSourceName, dataSourceNameHotel, dataSourceNameHeader);
        }
        return trvHotelVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrvTransportVisibilityManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for an instance of <c>TrvTransportVisibilityManager</c>.
    /// </summary>
    /// <returns>
    /// An object of type <c>TrvTransportVisibilityManager</c>.
    /// </returns>
    TrvTransportVisibilityManager getTrvTransportVisibilityManager()
    {
        if (!trvTransportVisibilityManager)
        {
            trvTransportVisibilityManager = new TrvTransportVisibilityManager(trvExpTrans, trvExpenseForm, dataSourceName, dataSourceNameHeader);
        }
        return trvTransportVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrvReturnCashVisibilityManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for an instance of <c>TrvReturnCashVisibilityManager</c>.
    /// </summary>
    /// <returns>
    /// An object of type <c>TrvReturnCashVisibilityManager</c>.
    /// </returns>
    TrvReturnCashVisibilityManager getTrvReturnCashVisibilityManager()
    {
        if (!trvReturnCashVisibilityManager)
        {
            trvReturnCashVisibilityManager = new TrvReturnCashVisibilityManager(trvExpTrans, trvExpenseForm, dataSourceName, dataSourceNameHeader);
        }
        return trvReturnCashVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for an new instance of TrvExpenseLinesVisibilityController.
    /// </summary>
    /// <param name = "_trvExpTrans">
    /// The current record instance of the <c>TrvExpTrans</c>.
    /// </param>
    /// <param name = "_trvExpensesForm">
    /// An instance of the calling form object.
    /// </param>
    /// <param name = "_dataSourceName">
    /// Name of the datasource on the form for which we set the visibility.
    /// </param>
    /// <param name = "_dataSourceNameAirline">
    /// Name of the airline enhanced datasource on the form for which we set the visibility.
    /// </param>
    /// <param name = "_dataSourceNameCarRental">
    /// Name of the car rental enhanced datasource on the form for which we set the visibility.
    /// </param>
    /// <param name = "_dataSourceNameHotel">
    /// Name of the hotel enhanced datasource on the form for which we set the visibility.
    /// </param>
    /// <param name = "_dataSourceNameTripLeg">
    /// Name of the hotel enhanced trip leg details datasource on the form for which we set the visibility.
    /// </param>
    /// <param name = "_dataSourceNameHeader">
    /// Name of the expense header datasource on the form for which we set the visibility.
    /// </param>
    void new(TrvExpTrans _trvExpTrans, FormRun _trvExpensesForm, str _dataSourceName, str _dataSourceNameAirline = "", str _dataSourceNameCarRental = "", str _dataSourceNameHotel = "", str _dataSourceNameTripLeg = "", str _dataSourceNameHeader = "")
    {
        trvExpTrans         = _trvExpTrans;
        trvExpenseForm      = _trvExpensesForm;
        dataSourceName      = _dataSourceName;
        dataSourceNameAirline = _dataSourceNameAirline;
        dataSourceNameCarRental = _dataSourceNameCarRental;
        dataSourceNameHotel = _dataSourceNameHotel;
        dataSourceNameTripLeg = _dataSourceNameTripLeg;
        dataSourceNameHeader = _dataSourceNameHeader;
        previousExpenseType = TrvExpType::Empty;
        previousCategoryProjectIntegration = false;
        previousLineIsInterCompanyTransaction = false;
        previousLineIsForeignCurrency = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpenseVisibilityManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pass on the <c>ExpenseIVisibilityManager</c> details on to the visibility manager.
    /// </summary>
    /// <param name = "_expenseUIVisibilityManager">Expense visibility manager class.</param>
    public void setExpenseVisibilityManager(ExpenseIVisibilityManager _expenseUIVisibilityManager)
    {
        expenseVisibilityManager = _expenseUIVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVisibilityResetRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the visibility should be reset based on change of expense type,
    /// project integration, attached unreconciled expenses, and expense line status.
    /// </summary>
    /// <returns>
    /// Returns true if the visibility should be reset, false otherwise.
    /// </returns>
    protected boolean isVisibilityResetRequired()
    {
        boolean         currentCategoryProjectIntegration, currentLineIsCreditCardTransaction, currentLineIsInterCompanyTransaction, currentLineIsForeignCurrency;

        currentCategoryProjectIntegration = trvExpTrans.isCategoryIntegratedWithProject();
        currentLineIsCreditCardTransaction = trvExpTrans.isCreditCardTransaction();
        currentLineIsInterCompanyTransaction = trvExpTrans.isIntercompany();
        currentLineIsForeignCurrency = (trvExpTrans.ExchangeCode != CompanyInfoHelper::standardCurrency());

        // If expense type is the same, project integration has not changed, the expense lines link to unreconciled expense has not changed,
        // and the status of the lines is the same, do not reset visibilities.
        if (trvExpTrans.ExpType == previousExpenseType
            && trvExpTrans.ExpType != TrvExpType::Transport
            && previousExpenseType != TrvExpType::Empty
            && previousSplitLineType == trvExpTrans.SplitLineType
            && previousSubCategoryRecId == trvExpTrans.SubCategoryRecId
            && previousCategoryProjectIntegration == currentCategoryProjectIntegration
            && previousLineIsCreditCardTransaction == currentLineIsCreditCardTransaction
            && previousLineApprovalStatus == trvExpTrans.ApprovalStatus
            && previousLineIsInterCompanyTransaction == currentLineIsInterCompanyTransaction
            && previousLineIsForeignCurrency == currentLineIsForeignCurrency)
        {
            return false;
        }

        previousExpenseType = trvExpTrans.ExpType;
        previousSplitLineType = trvExpTrans.SplitLineType;
        previousSubCategoryRecId = trvExpTrans.SubCategoryRecId;
        previousLineApprovalStatus = trvExpTrans.ApprovalStatus;
        previousCategoryProjectIntegration = currentCategoryProjectIntegration;
        previousLineIsCreditCardTransaction = currentLineIsCreditCardTransaction;
        previousLineIsInterCompanyTransaction = currentLineIsInterCompanyTransaction;
        previousLineIsForeignCurrency = currentLineIsForeignCurrency;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGridVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of fields for grid view.
    /// </summary>
    public void setGridVisibility()
    {
        // Hide fields for previously selected expense type.
        if (currentExpenseTypeVisibilityManager)
        {
            currentExpenseTypeVisibilityManager.setFieldVisibilities(false);
        }

        currentExpenseTypeVisibilityManager = this.getTrvCommonExpenseTypeVisibilityManager();
        currentExpenseTypeVisibilityManager.setFieldVisibilities(true);
        currentExpenseTypeVisibilityManager.setProjectFieldsVisible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of fields for the current selected expense type, hiding visibility of the fields for the previous expense type.
    /// </summary>
    public void setVisibility()
    {
        TrvExpensesVisibilityManager    tempExpenseTypeVisibilityManager;

        // If visibility does not require a reset, return.
        if (!this.isVisibilityResetRequired())
        {
            return ;
        }

        tempExpenseTypeVisibilityManager = this.constructExpenseTypeVisibilityManager();

        // Hide fields for previously selected expense type.
        if (currentExpenseTypeVisibilityManager)
        {
            currentExpenseTypeVisibilityManager.setFieldVisibilities(false);
        }

        currentExpenseTypeVisibilityManager = tempExpenseTypeVisibilityManager;

        // Pass in the current expense type visibility manager so that while implementing the new <c>ExpenseIVisibilityManager</c>
        // we can make use of the existing methods in <c>TrvExpensesVisibilityManager</c> class.
        //
        // Also do the vice versa - pass in the implementation class details of the <c>ExpenseIVisibilityManager</c>
        // into the <c>TrvExpensesVisibilityManager</c> so that we can make the differentiation to read from the new <c>ExpenseFieldsVisibility</c>
        // visibility setup while setting the visibility on form controls.
        if (expenseVisibilityManager)
        {
            expenseVisibilityManager.parmExpensesVisibilityManager(currentExpenseTypeVisibilityManager);
            currentExpenseTypeVisibilityManager.parmExpenseVisibilityManager(expenseVisibilityManager);
        }

        currentExpenseTypeVisibilityManager.setFieldVisibilities(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderVisibility</Name>
				<Source><![CDATA[
    public void setHeaderVisibility()
    {
        this.getTrvCommonExpenseTypeVisibilityManager().setHeaderFieldVisibilities(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibilityForProjectFieldsForInterCompanyExpense</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility of project fields.
    /// </summary>
    public void setVisibilityForProjectFieldsForInterCompanyExpense()
    {
        if (currentExpenseTypeVisibilityManager)
        {
            currentExpenseTypeVisibilityManager.setVisibilityForProjectFieldsGroupForInterCompanyExpense();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructExpenseTypeVisibilityManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new child instance of TrvExpensesVisibilityManager.
    /// </summary>
    /// <returns>
    /// A sub class of type <c>TrvExpensesVisibilityManager</c>.
    /// </returns>
    TrvExpensesVisibilityManager constructExpenseTypeVisibilityManager()
    {
        TrvExpensesVisibilityManager expenseTypeVisibilityManager;
        switch (trvExpTrans.ExpType)
        {
            case TrvExpType::Airline:
                expenseTypeVisibilityManager = this.getTrvAirlineVisibilityManager();
                break;
            case TrvExpType::Allowance:
                expenseTypeVisibilityManager = this.getTrvAllowanceVisibilityManager();
                break;
            case TrvExpType::CarRental:
                expenseTypeVisibilityManager = this.getTrvCarRentalVisibilityManager();
                break;
            case TrvExpType::Entertainment:
                expenseTypeVisibilityManager = this.getTrvEntertainmentVisibilityManager();
                break;
            case TrvExpType::Hotel:
                expenseTypeVisibilityManager = this.getTrvHotelVisibilityManager();
                break;
            case TrvExpType::Transport:
                expenseTypeVisibilityManager = this.getTrvTransportVisibilityManager();
                break;
            case TrvExpType::Advance:
                expenseTypeVisibilityManager = this.getTrvReturnCashVisibilityManager();
                break;
            default:
                expenseTypeVisibilityManager = this.getTrvCommonExpenseTypeVisibilityManager();
                break;
        }
        return expenseTypeVisibilityManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviousExpenseType</Name>
				<Source><![CDATA[
    public TrvExpType parmPreviousExpenseType(TrvExpType _previousExpenseType)
    {
        previousExpenseType = _previousExpenseType;
        return previousExpenseType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>