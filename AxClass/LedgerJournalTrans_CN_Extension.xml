<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_CN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension methods for the <c>LedgerJournalTrans</c> class.
/// </summary>
public static class LedgerJournalTrans_CN_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkVoucherNotUsed_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the voucher is used or not.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <param name="includeCurrentJournal">
    /// If true, the check will include the current journal.
    /// </param>
    /// <returns>
    /// Returns true if the voucher is not used.
    /// </returns>
    public static boolean checkVoucherNotUsed_CN(
        LedgerJournalTrans _ledgerJournalTrans,
        boolean            includeCurrentJournal = true)
    {
        LedgerJournalTrans      ledgerJournalTransLocal;
        RefRecId                numberSequenceTableRecId;
        boolean                 restart_CN;
        FiscalCalendarRecId     calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        numberSequenceTableRecId = LedgerVoucherType_CN::find(_ledgerJournalTrans.LedgerVoucherType_CN).NumberSequenceTable;
        restart_CN = NumberSequenceTable_CN::findByNumberSequenceTable(numberSequenceTableRecId).RestartNum;

        while select JournalNum,TransDate
            from ledgerJournalTransLocal
            where ledgerJournalTransLocal.Voucher_CN            == _ledgerJournalTrans.Voucher_CN
               && ledgerJournalTransLocal.LedgerVoucherType_CN  == _ledgerJournalTrans.LedgerVoucherType_CN
        {
            if (ledgerJournalTransLocal.RecId != _ledgerJournalTrans.RecId
                && ((!includeCurrentJournal
                 && (ledgerJournalTransLocal.JournalNum != _ledgerJournalTrans.JournalNum))
                 || includeCurrentJournal))
            {
                if (!restart_CN
                    && LedgerJournalTable::find(ledgerJournalTransLocal.JournalNum).JournalType != LedgerJournalType::Periodic)
                {
                    return false;
                }

                if (LedgerFiscalCalendar::findPeriodStartDateByDateWithIndex(calendarRecId,ledgerJournalTransLocal.TransDate)
                     == LedgerFiscalCalendar::findPeriodStartDateByDateWithIndex(calendarRecId, _ledgerJournalTrans.TransDate)
                     && LedgerJournalTable::find(ledgerJournalTransLocal.JournalNum).JournalType != LedgerJournalType::Periodic)
                {
                    return false;
                }
            }
        }

        if (GeneralLedgerExtension::findVoucher_CN(_ledgerJournalTrans.LedgerVoucherType_CN, _ledgerJournalTrans.Voucher_CN, _ledgerJournalTrans.TransDate))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existJournalNum_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journal number exist in the ledger journal transaction.
    /// </summary>
    /// <param name="_ledgerJournalId">
    /// The ledger journal id.
    /// </param>
    /// <returns>
    /// Returns true if the journal number exist.
    /// </returns>
    public static boolean existJournalNum_CN(LedgerJournalId _ledgerJournalId)
    {
        return _ledgerJournalId
            && (select firstonly RecId
                    from ledgerJournalTrans
                   where ledgerJournalTrans.JournalNum == _ledgerJournalId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherHeader_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates old Chinese voucher number according to new journal lines, releases old voucher number.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void updateVoucherHeader_CN(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTransLocal;

        ttsbegin;

        select firstonly ledgerJournalTransLocal
            where ledgerJournalTransLocal.JournalNum == _ledgerJournalTrans.JournalNum
               && ledgerJournalTransLocal.Voucher    == _ledgerJournalTrans.Voucher
               && ledgerJournalTransLocal.Voucher_CN != _ledgerJournalTrans.Voucher_CN;
        if (ledgerJournalTransLocal)
        {
            NumberSeq_Voucher_CN::release(
                LedgerVoucherType_CN::find(ledgerJournalTransLocal.LedgerVoucherType_CN).NumberSequenceTable,
                ledgerJournalTransLocal.Voucher_CN,
                ledgerJournalTransLocal.TransDate);
        }

        ledgerJournalTransLocal.skipDataMethods(true);

        update_recordset ledgerJournalTransLocal
            setting LedgerVoucherType_CN = _ledgerJournalTrans.LedgerVoucherType_CN,
                    Voucher_CN           = _ledgerJournalTrans.Voucher_CN,
                    TransDate            = _ledgerJournalTrans.TransDate
            where ledgerJournalTransLocal.JournalNum == _ledgerJournalTrans.JournalNum
               && ledgerJournalTransLocal.Voucher    == _ledgerJournalTrans.Voucher;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttachments_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the attachements on the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void updateAttachments_CN(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTransLocal;

        ttsbegin;

        ledgerJournalTransLocal.skipDataMethods(true);

        update_recordset ledgerJournalTransLocal
            setting Attachments_CN = _ledgerJournalTrans.Attachments_CN
            where ledgerJournalTransLocal.JournalNum == _ledgerJournalTrans.JournalNum
               && ledgerJournalTransLocal.Voucher    == _ledgerJournalTrans.Voucher
               && ledgerJournalTransLocal.RecId      != _ledgerJournalTrans.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseNumberForLedgerJournalTable_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the number sequence for Chinese voucher.
    /// </summary>
    /// <param name = "_ledgerJournalTable">
    /// The <c>LedgerJournalTable</c> record.
    /// </param>
    /// <param name = "_isSimpleMethod">
    /// The parameter required to validate if voucher is not used.
    /// </param>
    public static void releaseNumberForLedgerJournalTable_CN(LedgerJournalTable _ledgerJournalTable, boolean _isSimpleMethod = false)
    {
        LedgerJournalTrans ledgerJournalTrans;
        ttsbegin;
        if (LedgerParameters::isChineseVoucher_CN())
        {
            NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(_ledgerJournalTable.NumberSequenceTable);
            if (_ledgerJournalTable.JournalType != LedgerJournalType::Periodic
                && _ledgerJournalTable.JournalType != LedgerJournalType::VendInvoicePool
                && numberSequenceTable.Continuous)
            {
                while select ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum
                        && ledgerJournalTrans.Transferred == NoYes::No
                {
                    LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(_ledgerJournalTable.JournalType);
                    ledgerJournalEngine.parmIsSimpleMethod(_isSimpleMethod);
                    ledgerJournalEngine.formMethodDataSourceDeletePre_CN(ledgerJournalTrans);
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>