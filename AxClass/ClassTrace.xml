<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ClassTrace</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class ClassTrace extends xClassTrace
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetAotLayer</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static int GetAotLayer(str targetName, str methodName, str targetType)
    {
        TreeNode node;
        str      parentName;

        node = ClassTrace::getNode(targetName, methodName, targetType);

        if ( node )
            return node.AOTLayer();
        else if (targetType == 'Class' || targetType == 'Table')
        {
            parentName = ClassTrace::getParentName(targetName, targetType);

            if (parentName)
                return ClassTrace::GetAotLayer(parentName,
                                               methodName,
                                               targetType);
        }

        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNode</Name>
				<Source><![CDATA[
        private static TreeNode getNode(str targetName, str methodName, str targetType)
    {
        str path = '';
        #AOT

        // validate developer rights
        switch (targetType)
        {
            case 'Class':
                path = strFmt('%1\\%2\\%3', #ClassesPath, targetName, methodName);
                break;
            case 'Table':
                path = strFmt('%1\\%2%3\\%4', #TablesPath, targetName, #MethodsPath, methodName);
                break;
            case 'FormRun':
                path = strFmt('%1\\%2%3\\%4', #FormsPath, targetName, #MethodsPath, methodName);
                break;
            case 'Map':
                path = strFmt('%1\\%2%3\\%4', #TableMapsPath, targetName, #MethodsPath, methodName);
                break;
            case 'FormDataSource':
            case 'Kernel':
            default:
                return null;
        }

        return TreeNode::findNode(path);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentName</Name>
				<Source><![CDATA[
        private static str getParentName(str targetName, str targetType)
    {
        str path = '';
        TreeNode treeNode;
        #AOT
        #define.ExtendsProperty('Extends')

        // validate developer rights
        switch (targetType)
        {
            case 'Class':
                path = strFmt('%1\\%2', #ClassesPath, targetName);
                break;
            case 'Table':
                path = strFmt('%1\\%2', #TablesPath, targetName);
                break;
            default:
                return '';
        }

        treeNode = TreeNode::findNode(path);

        try
        {
            if (treeNode)
                return treeNode.AOTgetProperty(#ExtendsProperty);
        }
        catch
        {
            return '';
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSourceCode</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static str GetSourceCode(str targetName, str methodName, str targetType)
    {
        TreeNode node;
        str      parentName;

        node = ClassTrace::getNode(targetName, methodName, targetType);

        if ( node )
            return node.AOTgetSource();
        else if (targetType == 'Class' || targetType == 'Table')
        {
            parentName = ClassTrace::getParentName(targetName, targetType);

            if (parentName)
                return ClassTrace::GetSourceCode(parentName,
                                                 methodName,
                                                 targetType);
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>