<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiPurchLateSubmissionToWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>ProdMultiPurchLateSubmissionToWorkflow</c> is helper class used in production subcontracting scenarios.
/// </summary>
internal final class ProdMultiPurchLateSubmissionToWorkflow
{ 
    /// <summary>
    ///  Execution Id of the process that marked purchase orders for late submission to workflow.
    /// </summary>
    private SysGuid executionId;

    /// <summary>
    ///  The marked Production orders.
    /// </summary>
    private Set productionOrders;
    
    /// <summary>
    ///  Purchase orders marked for late submission to workflow.
    /// </summary>
    private Set purchaseOrders;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        executionId = newGuid();
        productionOrders = new Set(Types::String);
        purchaseOrders = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static ProdMultiPurchLateSubmissionToWorkflow construct()
    {
        return new ProdMultiPurchLateSubmissionToWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performLateSubmissionOfPurchaseOrdersToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Performs late submission of purchase orders to workflow.
    /// </summary>
    [Hookable(false)]
    internal void performLateSubmissionOfPurchaseOrdersToWorkflow()
    {
        if (purchaseOrders && purchaseOrders.elements() > 0)
        {
            ProdParmMultiPurchLateSubmissionToWorkflow parmMultiPurchLateSubmissionToWorkflow;

            ttsbegin;
        
            while select forupdate parmMultiPurchLateSubmissionToWorkflow
               where parmMultiPurchLateSubmissionToWorkflow.ExecutionId == executionId
                  && parmMultiPurchLateSubmissionToWorkflow.UserId == curUserId()
            {
                if (purchaseOrders.in(parmMultiPurchLateSubmissionToWorkflow.PurchId))
                {
                    if (parmMultiPurchLateSubmissionToWorkflow.IsModified == NoYes::Yes)
                    {
                        ProdMultiPurchLateSubmissionToWorkflow::submitPurchaseOrderToWorkflow(PurchTable::find(parmMultiPurchLateSubmissionToWorkflow.PurchId, true));
                    }

                    parmMultiPurchLateSubmissionToWorkflow.delete();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitPurchaseOrdersToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Submit purchase orders to workflow.
    /// </summary>
    /// <param name = "_purchaseOrdersToBeSubmittedToWorkflow">
    ///  Set of <c>RecIds</c> for purchase orders to be submitted to workflow.
    /// </param>
    [Hookable(false)]
    internal static final void submitPurchaseOrdersToWorkflow(Set _purchaseOrdersToBeSubmittedToWorkflow)
    {
        if (_purchaseOrdersToBeSubmittedToWorkflow)
        {
            var enumerator = _purchaseOrdersToBeSubmittedToWorkflow.getEnumerator();

            ttsbegin;

            while (enumerator.moveNext())
            {
                PurchTable purchaseOrder = PurchTable::findRecId(enumerator.current());

                if (ProdParmMultiPurchLateSubmissionToWorkflow::find(purchaseOrder.PurchId))
                {
                    // Add purchase order to queue for late submission to workflow
                    ProdParmMultiPurchLateSubmissionToWorkflow::setModified(purchaseOrder.PurchId, NoYes::Yes);
                }
                else
                {
                    purchaseOrder.selectForUpdate(true);
                    ProdMultiPurchLateSubmissionToWorkflow::submitPurchaseOrderToWorkflow(purchaseOrder);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitPurchaseOrderToWorkflow</Name>
				<Source><![CDATA[
    private static final void submitPurchaseOrderToWorkflow(PurchTable _purchaseOrder)
    {
        ProdTable::submitPurchaseOrderToWorkflow(_purchaseOrder, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLateSubmissionOfPurchaseOrdersToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Marked purchase orders for late submission to workflow.
    /// </summary>
    /// <param name = "_parmBuffer">
    /// Parameter table records containing information on the production orders currently selected.
    /// </param>
    [Hookable(false)]
    internal void setLateSubmissionOfPurchaseOrdersToWorkflow(ParmBuffer _parmBuffer)
    {
        if (this.isChangeManagementForPurchaseOrdersActivated())
        {
            this.setProductionOrdersIds(_parmBuffer);

            if (productionOrders && this.shouldLateSubmissionOfPurchaseOrdersToWorkflow())
            {
                ProdId previousProdId = '';
                ProdParmMultiPurchLateSubmissionToWorkflow parmMultiPurchLateSubmissionToWorkflow;
                ProdBOM prodBOM;

                Set localPurchaseOrders = new Set(Types::String);
 
                var enumerator = productionOrders.getEnumerator();
            
                ttsbegin;

                var parmMultiPurchLateSubmissionToWorkflowList = new RecordInsertList(tableNum(ProdParmMultiPurchLateSubmissionToWorkflow));

                while (enumerator.moveNext())
                {
                    while select prodBOM
                    where prodBOM.InventRefType == InventRefType::Purch
                       && prodBOM.InventRefId != ''
                       && prodBOM.ProdId == enumerator.current()
                    {
                        if (previousProdId != ''
                            && previousProdId != prodBOM.ProdId
                            && localPurchaseOrders.in(prodBOM.InventRefId)
                            && !purchaseOrders.in(prodBOM.InventRefId))
                        {
                            purchaseOrders.add(prodBOM.InventRefId);

                            parmMultiPurchLateSubmissionToWorkflow.clear();
                            parmMultiPurchLateSubmissionToWorkflow.ExecutionId = executionId;
                            parmMultiPurchLateSubmissionToWorkflow.UserId = curUserId();
                            parmMultiPurchLateSubmissionToWorkflow.PurchId = prodBOM.InventRefId;

                            parmMultiPurchLateSubmissionToWorkflowList.add(parmMultiPurchLateSubmissionToWorkflow);
                        }
                        else
                        {
                            localPurchaseOrders.add(prodBOM.InventRefId);
                        }
                    }

                    previousProdId = enumerator.current();
                }

                parmMultiPurchLateSubmissionToWorkflowList.insertDatabase();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLateSubmissionOfPurchaseOrdersToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Indicates whether purchase order should be submitted to workflow at the end of the process.
    /// </summary>
    private boolean shouldLateSubmissionOfPurchaseOrdersToWorkflow()
    {
        return productionOrders.elements() > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductionOrdersIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Set production orders currently selected.
    /// </summary>
    /// <param name = "_parmBuffer">
    /// Parameter table records containing information on the production orders currently selected.
    /// </param>
    private void setProductionOrdersIds(ParmBuffer _parmBuffer)
    {
        productionOrders = new Set(Types::String);

        while (_parmBuffer)
        {
            productionOrders.add(_parmBuffer.Id);
            next _parmBuffer;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeManagementForPurchaseOrdersActivated</Name>
				<Source><![CDATA[
    private boolean isChangeManagementForPurchaseOrdersActivated()
    {
        return PurchParameters::find(true).ChangeRequestEnabled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>