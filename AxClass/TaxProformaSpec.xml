<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxProformaSpec</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxProformaSpec</c> class is used by invoice reports to hold and return several variables.
/// </summary>
/// <remarks>
///    This class is derived from the <see cref="T:TaxSpec" />.
/// </remarks>
final class TaxProformaSpec extends TaxSpec
{
    TmpTaxWorkTrans taxWorkTrans;
    recId           headingRecId;
    // <GEELT><GEEHU>
    #ISOCountryRegionCodes
    // </GEEHU></GEELT>
    // <GEELT>
    boolean         countryRegion_LT;
    // </GEELT>
    // <GEEHU>
    boolean         countryRegion_HU;
    // </GEEHU>
    // <GEECZ>
    boolean         countryRegion_CZ;
    InvoiceId       invoiceId;

    private boolean forceTaxRateAsWriteSelection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>forceTaxRateAsWriteSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces the class to act as if <c>TaxWriteSelection</c> values
    /// in corresponding <c>TaxTable</c> records were <c>TaxRate</c>.
    /// </summary>
    /// <param name = "_value">Behaviour switch flag.</param>
    internal void forceTaxRateAsWriteSelection(boolean _value = true)
    {
        forceTaxRateAsWriteSelection = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWriteSelection</Name>
				<Source><![CDATA[
    private TaxWriteSelection getTaxWriteSelection(TaxCode _taxCode)
    {
        return forceTaxRateAsWriteSelection
            ? TaxWriteSelection::TaxRate
            : TaxTable::find(_taxCode).TaxWriteSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(recId _headingRecId)
    {
           ;
        headingRecId    = _headingRecId;
        released        = NoYes::No;
        //<GEELT>
        countryRegion_LT = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]);
        //</GEELT>
        //<GEEHU>
        countryRegion_HU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]);
        //</GEEHU>
        // <GEECZ>
        countryRegion_CZ = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]);
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId parmInvoiceId(InvoiceId    _invoiceId   = invoiceId)
    {
        invoiceId = _invoiceId;
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxSpec</Name>
				<Source><![CDATA[
    public boolean parmTaxSpec(
        boolean _canGroupOnTaxDirection = true
    )
    {
        TaxGroupHeading     taxGroup;
        TaxWriteSelection   taxWriteSelection;
        RecId               lastSourceRecId;
        TableId             lastSourceTableId;
        Set                 taxSpecCodeSet;
        boolean isBankExchangeRateIsEnabled = TaxParameters::isBankExchRateEnabled_W();
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        if (released  == NoYes::No)
        {
            taxSpecTmp.setTmp();

            while select taxWorkTrans
                order by SourceRecId
                where taxWorkTrans.HeadingRecId == headingRecId

            {
                taxGroup = TaxGroupHeading::find(taxWorkTrans.TaxGroup);

                if (taxGroup.TaxPrintDetail != TaxPrintDetail::NoDetail)
                {
                    taxSpecTmp.clear();

                    if (taxWorkTrans.TaxCode && !taxWorkTrans.exemptCode())
                    {
                        switch (taxGroup.TaxPrintDetail)
                        {
                            case TaxPrintDetail::TaxCode:
                                taxSpecTmp.TaxSpecCode  = taxWorkTrans.TaxCode;
                                break;
                            case TaxPrintDetail::TaxGroup:
                                taxSpecTmp.TaxSpecCode  = taxWorkTrans.TaxGroup;
                                break;
                        }
                    }

                    switch (taxGroup.TaxPrintDetail)
                    {
                        case TaxPrintDetail::TaxCode:
                            taxSpecTmp.ReportTaxSpecCode = taxWorkTrans.TaxCode;
                            break;
                        case TaxPrintDetail::TaxGroup:
                            taxSpecTmp.ReportTaxSpecCode = taxWorkTrans.TaxGroup;
                            break;
                    }

                    if (taxWorkTrans.TaxCode && taxWorkTrans.ExemptTax && taxWorkTrans.exemptCode())
                    {
                        taxSpecTmp.TaxSpecCode  = taxWorkTrans.exemptCode();
                    }

                    if (taxWorkTrans.SourceRecId != lastSourceRecId || taxWorkTrans.SourceTableId != lastSourceTableId)
                    {
                        taxSpecCodeSet = new Set(Types::String);

                        [lastSourceRecId, lastSourceTableId] = this.updateLastSourceInfo();
                    }

                    taxWriteSelection = this.getTaxWriteSelection(taxWorkTrans.TaxCode);
                    if (!taxSpecCodeSet.in(taxSpecTmp.TaxSpecCode) || (taxWriteSelection == TaxWriteSelection::TaxRate && taxGroup.TaxPrintDetail == TaxPrintDetail::TaxCode))
                    {
                        taxSpecTmp.SourceBaseAmountCur  = taxWorkTrans.SourceBaseAmountCur;
                        taxSpecTmp.TaxBaseAmount        = taxWorkTrans.TaxBaseAmount;
                        taxSpecTmp.TaxBaseQty           = taxWorkTrans.TaxBaseQty;
                        taxSpecCodeSet.add(taxSpecTmp.TaxSpecCode);
                    }
                    else
                    {
                        taxSpecTmp.SourceBaseAmountCur  = 0;
                        taxSpecTmp.TaxBaseAmount        = 0;
                        taxSpecTmp.TaxBaseQty           = 0;
                    }

                    taxSpecTmp.SourceTaxAmountCur       = taxWorkTrans.SourceTaxAmountCur;
                    taxSpecTmp.SourceRegulateAmountCur  = taxWorkTrans.SourceRegulateAmountCur;
                    if (countryRegion_CZ
                        && isBankExchangeRateIsEnabled
                        && accountingCurrency != taxWorkTrans.SourceCurrencyCode)
                    {
                        var exchangeRateTaxAmount       = taxWorkTrans.exchangeRateSourceRegulateAmount ? taxWorkTrans.exchangeRateSourceRegulateAmount : taxWorkTrans.exchangeRateTaxAmount;
                        taxSpecTmp.TaxAmount            = exchangeRateTaxAmount ? exchangeRateTaxAmount : taxWorkTrans.TaxAmount;
                    }
                    else
                    {
                        taxSpecTmp.TaxAmount            = taxWorkTrans.TaxAmount;
                    }
                    taxSpecTmp.TaxInCostPriceCur        = taxWorkTrans.TaxInCostPriceCur;
                    taxSpecTmp.TaxCode                  = taxWorkTrans.TaxCode;
                    taxSpecTmp.SourceCurrencyCode       = taxWorkTrans.SourceCurrencyCode;
                    taxSpecTmp.TaxDirection             = taxWorkTrans.TaxDirection;
                    taxSpecTmp.TaxAutoGenerated         = taxWorkTrans.TaxAutogenerated;
                    taxSpecTmp.TransDate                = taxWorkTrans.TransDate;
                    taxSpecTmp.euroTriangulation        = taxWorkTrans.euroTriangulation;
                    taxSpecTmp.Voucher                  = taxWorkTrans.Voucher;
                    taxSpecTmp.ExemptTax                = taxWorkTrans.ExemptTax;
                    taxSpecTmp.ExemptCode               = taxWorkTrans.exemptCode();
                    taxSpecTmp.TransRecId               = taxWorkTrans.HeadingRecId;
                    // <GEECZ>
                    if (countryRegion_CZ)
                    {
                        taxSpecTmp.InvoiceId            = taxWorkTrans.InvoiceId;
                    }
                    // </GEECZ>
                    //<GEELT><GEEHU>
                    if (countryRegion_LT || countryRegion_HU)
                    {
                        taxSpecTmp.ExcludeFromInvoice = TaxTable::find(taxWorkTrans.TaxCode).ExcludeFromInvoice;
                    }
                    //</GEEHU></GEELT>

                    if (!taxWorkTrans.exemptCode() && taxGroup.TaxPrintDetail != TaxPrintDetail::TaxGroup)
                    {
                        if (taxWriteSelection == TaxWriteSelection::PrintCode)
                        {
                            taxSpecTmp.PrintCode    = TaxTable::printCode(taxWorkTrans.TaxCode, taxWorkTrans.TransDate, taxWorkTrans.TaxBaseAmountCur);
                        }

                        if (taxWriteSelection == TaxWriteSelection::TaxRate)
                        {
                            taxSpecTmp.PrintCode    = this.taxValue2str(taxWorkTrans.showTaxValue());
                        }
                    }
                    else if (taxWorkTrans.exemptCode()
                        && taxWriteSelection == TaxWriteSelection::PrintCode
                        && (taxWorkTrans.Source == TaxModuleType::Sales || taxWorkTrans.Source == TaxModuleType::FreeTxtInvoice))
                    {
                        taxSpecTmp.PrintCode = TaxTable::printCode(taxWorkTrans.TaxCode, taxWorkTrans.TransDate, taxWorkTrans.TaxBaseAmountCur);
                        taxSpecTmp.TaxSpecCode = taxWorkTrans.TaxCode;
                    }

                    if (taxWorkTrans.IntracomVAT)
                    {
                        taxSpecTmp.IntracomVAT = taxWorkTrans.IntracomVAT;
                    }
                    taxSpecTmp.insert();
                }
            }

            if (intracomVATInvoice)
            {
                this.taxSpecNoIntracomVAT();
            }
            else
            {
                if (_canGroupOnTaxDirection)
                {
                    // <GEELT><GEEHU>
                    if (countryRegion_LT || countryRegion_HU)
                    {
                        select
                            sum(TaxBaseQty),
                            sum(SourceTaxAmountCur),
                            sum(SourceBaseAmountCur),
                            sum(SourceRegulateAmountCur),
                            sum(TaxAmount),
                            sum(TaxBaseAmount)
                        from taxSpecTmp
                            group by TaxSpecCode, TaxDirection, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TransDate, euroTriangulation, ExcludeFromInvoice, ReportTaxSpecCode
                            where taxSpecTmp.TransRecId == headingRecId;
                    }
                    else
                    {
                    // </GEEHU></GEELT>
                        select
                            sum(TaxBaseQty),
                            sum(SourceTaxAmountCur),
                            sum(SourceBaseAmountCur),
                            sum(SourceRegulateAmountCur),
                            sum(TaxAmount),
                            sum(TaxBaseAmount)
                        from taxSpecTmp
                            group by TaxSpecCode, TaxDirection, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TransDate, euroTriangulation, ReportTaxSpecCode
                            where taxSpecTmp.TransRecId == headingRecId;
                    // <GEELT><GEEHU>
                    }
                    // </GEEHU></GEELT>
                }
                else
                {
                    // <GEELT><GEEHU>
                    if (countryRegion_LT || countryRegion_HU)
                    {
                        select
                            sum(TaxBaseQty),
                            sum(SourceTaxAmountCur),
                            sum(SourceBaseAmountCur),
                            sum(SourceRegulateAmountCur),
                            sum(TaxAmount),
                            sum(TaxBaseAmount)
                        from taxSpecTmp
                            group by TaxSpecCode, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TransDate, euroTriangulation, ExcludeFromInvoice, ReportTaxSpecCode
                            where taxSpecTmp.TransRecId == headingRecId;
                    }
                    // <GEECZ>
                    else if (countryRegion_CZ)
                    {
                        select
                            sum(TaxBaseQty),
                            sum(SourceTaxAmountCur),
                            sum(SourceBaseAmountCur),
                            sum(SourceRegulateAmountCur),
                            sum(TaxAmount),
                            sum(TaxBaseAmount)
                        from taxSpecTmp
                            group by TaxSpecCode, InvoiceId, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TransDate, euroTriangulation, ReportTaxSpecCode
                            where   taxSpecTmp.TransRecId == headingRecId;
                    }
                    // </GEECZ>
                    else
                    {
                    // </GEEHU></GEELT>
                        select
                            sum(TaxBaseQty),
                            sum(SourceTaxAmountCur),
                            sum(SourceBaseAmountCur),
                            sum(SourceRegulateAmountCur),
                            sum(TaxAmount),
                            sum(TaxBaseAmount)
                        from taxSpecTmp
                            group by TaxSpecCode, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TransDate, euroTriangulation, ReportTaxSpecCode
                            where taxSpecTmp.TransRecId == headingRecId;

                    // <GEELT><GEEHU>
                    }
                    // </GEEHU></GEELT>
                }
            }
        }
        else
        {
            next taxSpecTmp;
        }

        released  = NoYes::Yes;

        if (taxSpecTmp)
        {
            taxCode                 = taxSpecTmp.TaxSpecCode;
            taxDirection            = taxSpecTmp.TaxDirection;
            taxWriteCode            = taxSpecTmp.PrintCode;
            taxExemptCode           = taxSpecTmp.ExemptCode;
            currencyCode            = taxSpecTmp.SourceCurrencyCode;
            taxExemptDescription    = '';
            taxExemptDescriptionText = '';
            reportingTaxCode = taxSpecTmp.ReportTaxSpecCode;
            // <GEECZ>
            if (countryRegion_CZ)
            {
                invoiceId           = taxSpecTmp.InvoiceId;
            }
            // </GEECZ>

            //<GEELT><GEEHU>
            if (countryRegion_LT || countryRegion_HU)
            {
                this.parmExcludeFromInvoice(taxSpecTmp.ExcludeFromInvoice);
            }
            //</GEEHU></GEELT>

            // <GMY>
            if (this.parmIsGSTInvoice_MY())
            {
                taxExemptTax = taxSpecTmp.ExemptTax;
            }
            else
            {
            // </GMY>
            if (taxSpecTmp.ExemptTax && taxSpecTmp.ExemptCode)
            {
                taxExemptDescriptionText = TaxExemptCodeTable::txtText(taxExemptCode, languageId);
                taxExemptDescription = taxExemptDescriptionText;

                if (taxWorkTrans.Source == TaxModuleType::Sales || taxWorkTrans.Source == TaxModuleType::FreeTxtInvoice)
                {
                    taxCode = taxSpecTmp.TaxSpecCode;
                    taxWriteCode = taxSpecTmp.PrintCode;
                }
				else
                {
					taxCode              = '';
					taxWriteCode         = '';
                }
            }
            // <GMY>
            }
            // </GMY>

            taxAmountCur    = taxSpecTmp.SourceRegulateAmountCur;
            taxAmountMST    = taxSpecTmp.TaxAmount;
            taxBaseAmountCur    = taxSpecTmp.SourceBaseAmountCur;
            taxBaseAmountMST    = taxSpecTmp.TaxBaseAmount;
            taxBaseQty          = taxSpecTmp.TaxBaseQty;
            if (intracomVATInvoice)
            {
                taxInvoiceAmount   += taxAmountCur;
            }

            return true;
        }
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the instance of the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    ///    The instance of the <c>TmpTaxWorkTrans</c> table to set; optional
    /// </param>
    void setTmpTaxWorkTrans(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        ;
        taxWorkTrans = _tmpTaxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSpecNoIntracomVAT</Name>
				<Source><![CDATA[
    private void taxSpecNoIntracomVAT()
    {
        select
            sum(TaxBaseQty),
            sum(SourceTaxAmountCur),
            sum(SourceBaseAmountCur),
            sum(SourceRegulateAmountCur),
            sum(TaxAmount),
            sum(TaxBaseAmount)
        from taxSpecTmp
            group by TaxSpecCode, TaxDirection, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TaxAutoGenerated, TransDate, euroTriangulation, ReportTaxSpecCode
            where taxSpecTmp.TransRecId == headingRecId
               &&!taxSpecTmp.IntracomVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastSourceInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to update last changed sourceRecId and souceTableId.
    /// </summary>
    /// <returns>
    /// Returns the last changed sourceRecId and sourceTableId.
    /// </returns>
    protected container updateLastSourceInfo()
    {
        RecId               lastSourceRecId;
        TableId             lastSourceTableId;

        if(taxWorkTrans.SourceRecId != lastSourceRecId)
            lastSourceRecId = taxWorkTrans.SourceRecId;

        if(taxWorkTrans.SourceTableId != lastSourceTableId)
            lastSourceTableId = taxWorkTrans.SourceTableId;

        return [lastSourceRecId, lastSourceTableId];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>