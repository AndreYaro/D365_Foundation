<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostMarkupBalanceDimensionDerivationRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostMarkupBalanceDimensionDerivationRule</c> class derives the balance ledger dimension for a cost entry related to markup.
/// </summary>
public class CostMarkupBalanceDimensionDerivationRule extends CostBalanceLedgerDimensionDerivationRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve the balance ledger dimension for the markup related cost entry.
    /// </summary>
    protected void resolve()
    {
        CostProductCostDescriptor descriptor = entry.parmDescriptor();
        CostEventBase reconciledEvent = descriptor.parmReconciledEvent();

        if (reconciledEvent)
        {
            CostEntry reconciledEntry = reconciledEvent.findEntry(descriptor.reconciledDescriptor());
            this.resolveFromReconciledEntry(reconciledEntry);
        }
        else
        {
            MarkupTrans markupTrans = MarkupTrans::findRecId(descriptor.parmSource().parmSourceRecId());
            MarkupTable markupTable = markupTrans.markupTable();

            CostInventoryEvent inventoryEvent = entry.parmEvent().parmParentEvent();
            PurchLine purchLine = PurchLine::findInventTransId(InventTransOrigin::find(inventoryEvent.parmInventTransOriginId()).InventTransId);
            InventMov_Purch movement = InventMovement::construct(purchLine);

            if (movement.mustBeBookedCharge()
                && markupTable.VendType == MarkupType::LedgerAccount)
            {
                postingType = movement.postingStockVariation();
                ledgerDimensionAccount = CostLedgerDimensionDerivationRule::createLedgerDimension(movement.accountStockVariation(), movement.defaultDimension());
            }
            else
            {
                postingType = movement.postingOffsetPhysical();
                ledgerDimensionAccount = CostLedgerDimensionDerivationRule::createLedgerDimension(movement.offsetAccountPhysical(), movement.defaultDimension());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFromReconciledEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the ledger dimension from a reconciled entry.
    /// </summary>
    /// <param name = "_reconciledEntry">The reconciled entry.</param>
    protected void resolveFromReconciledEntry(CostEntry _reconciledEntry)
    {
        postingType             = _reconciledEntry.parmPostingType();
        ledgerDimensionAccount  = _reconciledEntry.parmLedgerDimension();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
