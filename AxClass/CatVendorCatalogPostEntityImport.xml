<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorCatalogPostEntityImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller class which imports CMR file and puts the data into staging tables.
/// </summary>
public class CatVendorCatalogPostEntityImport extends CatVendorCatalogPostBase
{
    private SharedServiceUnitFileID fileId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides implementation for post operations and call data management framework to import vendor catalog entity file.
    /// </summary>
    protected void postProcess()
    {
        this.importCatalogFile();
        this.postCatalogImportProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>importCatalogFile</Name>
				<Source><![CDATA[
    private void importCatalogFile()
    {
        DMFDefinitionGroup  definitionGroup = CatVendorCatalogMaintenance::findVendorCatalogDefinitionGroup();
        DMFExecutionId      executionId     = DMFUtil::setupNewExecution(definitionGroup.DefinitionGroupName);

        ttsbegin;
        // Find execution
        DictCompositeDataEntity compositeDataEntity = new DictCompositeDataEntity(this.compositeDataEntityName());
        DMFDefinitionGroupExecution execution =
                    DMFDefinitionGroupExecution::find(definitionGroup.DefinitionGroupName, compositeDataEntity.label(), executionId, true);
        execution.IsTransformed = NoYes::No;
        execution.FilePath = execution.applyTransforms(fileId);
        execution.IsTransformed = NoYes::Yes;
        execution.update();
        ttscommit;

        // Import data. Wait for data to be imported
        DMFQuickImportExport::doPGImport(definitionGroup.DefinitionGroupName, executionId);

        infolog.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessCatalogMaintenanceRequestXML</Name>
				<Source><![CDATA[
    protected void preProcessCatalogMaintenanceRequestXML()
    {
        CatVendorDateTime uploadDateTime = CatVendorCatalogMaintenanceRequest::findRecId(catVendorCatalogMaintenanceRecId).UploadDateTime;

        XmlDocument xmlDoc = XMLDocument::newFromStream(fileStream);

        XMLElement catalogMaintenanceRequestNode = xmlDoc.documentElement().getNamedElement(tableStr(CatVendorCatalogMaintenanceRequestEntity));
        XMLNode uploadDateTimeNode = xmlDoc.createElement(fieldStr(CatVendorCatalogMaintenanceRequestEntity, UploadDateTime));
        
        uploadDateTimeNode.text(DateTimeUtil::toStr(uploadDateTime));
        catalogMaintenanceRequestNode.appendChild(uploadDateTimeNode);
        
        System.IO.MemoryStream outputStream = new System.IO.MemoryStream();
        ClrObject inputArray = System.Text.Encoding::get_UTF8().GetBytes(xmlDoc.InnerXML());
        outputStream.Write(inputArray, 0, inputArray.get_length());

        fileId = this.uploadFileToTempStorage(outputStream, fullFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>compositeDataEntityName</Name>
				<Source><![CDATA[
    protected str compositeDataEntityName()
    {
        return dataentityviewstr(CatVendorCatalogEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCatalogImportProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a catalog maintenance request file post catalog import operation.
    /// </summary>
    /// <remarks>
    /// This method submits the catalog maintenance request file to workflow approval if the products are
    /// imported.
    /// </remarks>
    private void postCatalogImportProcess()
    {
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        if (catVendorCatalogMaintenanceRecId)
        {
            select firstonly catVendorProductCandidate where catVendorProductCandidate.CatalogMaintenanceRequest == catVendorCatalogMaintenanceRecId;

            if (catVendorProductCandidate)
            {
                catVendorCatalogMaintenanceRequest = CatVendorCatalogMaintenanceRequest::findRecId(catVendorCatalogMaintenanceRecId,true);
                catVendorCatalogMaintenanceRequest.LastImportStatus = CatVendorImportStatus::Inprogress;
                ttsbegin;
                catVendorCatalogMaintenanceRequest.update();

                if (catVendorCatalogMaintenanceRequest.UploadType == CatVendorCatalogFileUploadType::Replace)
                {
                    this.setupOldProductsForDelete();
                }

                ttscommit;
            }
            else
            {
                CatVendorCatalogImportEventLog::logEvent(catVendorCatalogMaintenanceRecId,CatImportProcessingMessageType::Warning,
                                                        CatVendorCatalogProcessingState::InvalidCMR,"@SYS335179");
                CatVendorCatalogImportEventLog::logEvent(catVendorCatalogMaintenanceRecId,CatImportProcessingMessageType::Info,
                                                        CatVendorCatalogProcessingState::FinishProcessing,"@SYS335180");
                catVendorCatalogMaintenanceRequest = CatVendorCatalogMaintenanceRequest::findRecId(catVendorCatalogMaintenanceRecId,true);
                catVendorCatalogMaintenanceRequest.LastImportStatus = CatVendorImportStatus::Failed;
                ttsbegin;
                catVendorCatalogMaintenanceRequest.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupOldProductsForDelete</Name>
				<Source><![CDATA[
    private void setupOldProductsForDelete()
    {
        CatVendorCatalogMaintenanceRequest catVendorCatalogMaintenanceRequest = CatVendorCatalogMaintenanceRequest::findRecId(catVendorCatalogMaintenanceRecId);
        CatVendorCatalogMaintenanceRequest allMaintenanceRequests;
        CatVendorProductCandidate productCandidateOld;
        CatVendorProductCandidate productCandidateNew;
        CatVendorProductCandidate productToDelete;
        CatVendorApprovedProduct approvedProduct;
        CatVendorCatalog vendorCatalog;

        CatProductActionType targetActionType = CatProductActionType::Delete;
        CatVendorProductStatus targetStatus = CatVendorProductStatus::NotSubmitted;

        insert_recordset productToDelete (CatalogMaintenanceRequest, ProductSubtype, Category, VendorProductCode, ConfigurationName, SizeName, ColorName, StyleName, ActionType, Status)
        select catVendorCatalogMaintenanceRecId, ProductSubType, EcoResCategory, VendorProductCode, ConfigurationName, SizeName, ColorName, StyleName, targetActionType, targetStatus from approvedProduct
            where approvedProduct.IsDeleted == NoYes::No
            exists join productCandidateOld
                where approvedProduct.VendorProductCode == productCandidateOld.VendorProductCode
                   && approvedProduct.ProductSubtype == productCandidateOld.ProductSubtype
                   && approvedProduct.ConfigurationName == productCandidateOld.ConfigurationName
                   && approvedProduct.SizeName == productCandidateOld.SizeName
                   && approvedProduct.ColorName == productCandidateOld.ColorName
                   && approvedProduct.StyleName == productCandidateOld.StyleName
                   && productCandidateOld.Status == CatVendorProductStatus::Approved
            exists join allMaintenanceRequests
                where allMaintenanceRequests.RecId == productCandidateOld.CatalogMaintenanceRequest
                   && allMaintenanceRequests.RecId != catVendorCatalogMaintenanceRecId
            exists join vendorCatalog
                where allMaintenanceRequests.VendorCatalog == vendorCatalog.RecId
                   && catVendorCatalogMaintenanceRequest.VendorCatalog == vendorCatalog.RecId
                   && approvedProduct.DirPartyTable == vendorCatalog.VendorParty
            notexists join productCandidateNew
                where productCandidateNew.CatalogMaintenanceRequest == catVendorCatalogMaintenanceRecId
                   && approvedProduct.VendorProductCode == productCandidateNew.VendorProductCode
                   && approvedProduct.ProductSubtype == productCandidateNew.ProductSubtype
                   && approvedProduct.ConfigurationName == productCandidateNew.ConfigurationName
                   && approvedProduct.SizeName == productCandidateNew.SizeName
                   && approvedProduct.ColorName == productCandidateNew.ColorName
                   && approvedProduct.StyleName == productCandidateNew.StyleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadFileToTempStorage</Name>
				<Source><![CDATA[
    private str uploadFileToTempStorage(System.IO.Stream _outputStream, str _fullFileName)
    {
        try
        {
            FileUploadTemporaryStorageStrategy fileUploadStrategy = new FileUploadTemporaryStorageStrategy();
            FileUploadTemporaryStorageResult fileUploadResult = fileUploadStrategy.uploadFile(_outputStream, _fullFileName);
            if (fileUploadResult == null || !fileUploadResult.getUploadStatus())
            {
                warning("@ApplicationPlatform:FileUploadFailed");
            }
            else
            {
                if (fileUploadResult.getFileId() == "")
                {
                    throw Exception::Error;
                }

                return fileUploadResult.getFileId();
            }
        }
        catch(Exception::Error)
        {
            warning("@ApplicationPlatform:FileUploadFailed");
        }
        return "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>