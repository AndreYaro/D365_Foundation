<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerOpeningPost_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to post transfer for the opening sheet.
/// </summary>
public class LedgerOpeningPost_ES  extends RunBaseBatch implements BatchRetryable
{
    private LedgerOpeningSheet_ES ledgerOpeningSheet;
    private DialogGroup dialogGroup;
    private TransDate postDate;
    private AcknowledgementDate acknowledgementDate;
    private OpeningSheet_ES sheet;
    private Voucher voucher;
    private FiscalPeriodType periodType;
    private CurrentOperationsTax currentOperationsTax;
    private FiscalCalendarPeriodRecId fiscalCalendarPeriodRecId;
    private FiscalCalendarRecId fiscalCalendarRecId;

    private const Version CurrentVersion = 1;

    #LOCALMACRO.CurrentList
                                        PostDate,
                                        Sheet
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunBase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        #ISOCountryRegionCodes
        super();

        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoES, GlobalizationConstants::FeatureReferenceES00006] ],
            funcName()
        );

        fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcknowledgementDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransDate parmAcknowledgementDate(AcknowledgementDate _acknowledgementDate = acknowledgementDate)
    {
        acknowledgementDate = _acknowledgementDate;
        return acknowledgementDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentOperationsTax</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CurrentOperationsTax parmCurrentOperationsTax(CurrentOperationsTax _currentOperationsTax = currentOperationsTax)
    {
        currentOperationsTax = _currentOperationsTax;

        return currentOperationsTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalCalendarPeriodRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RecId parmFiscalCalendarPeriodRecId(RecId _fiscalCalendarPeriodRecId = fiscalCalendarPeriodRecId)
    {
        fiscalCalendarPeriodRecId = _fiscalCalendarPeriodRecId;
        return fiscalCalendarPeriodRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpeningSheet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    OpeningSheet_ES parmOpeningSheet(OpeningSheet_ES _openingSheet = sheet)
    {
        sheet = _openingSheet;
        return sheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    FiscalPeriodType parmPeriodCode(FiscalPeriodType _periodType = periodType)
    {
        periodType = _periodType;
        return periodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransDate parmPostDate(TransDate _postDate = postDate)
    {
        postDate = _postDate;
        return postDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        NumberSeq                   numberSeq;
        LedgerOpeningTrans_ES       ledgerOpeningTrans;
        CurrencyCode                currencyCode;
        LedgerPostingController     postingController;
        LedgerVoucher               postingJournal;
        LedgerVoucherObject         postingReference;
        LedgerVoucherTransObject    postingTrans;
        CurrencyExchangeHelper      exchangeRateHelper;

        try
        {
            ttsbegin;

            select forupdate Voucher from ledgerOpeningSheet
                where ledgerOpeningSheet.Sheet == sheet &&
                    ledgerOpeningSheet.PostDate == postDate;

            numberSeq = NumberSeq::newGetVoucher(LedgerParameters::numRefOpeningSheet_ES(),false);
            voucher = numberSeq.voucher();
            if (!voucher)
            {
                throw error("@SYS26396");
            }

            currencyCode = CompanyInfoHelper::standardCurrency();

            postingJournal = LedgerVoucher::newLedgerPost(
                DetailSummary::Detail,
                SysModule::Ledger,
                numberSeq.parmVoucherSequenceCode());

            postingJournal.parmOpeningSheet_ES(true);
            postingJournal.parmCheckBlockedDimensions(false);

            postingController = LedgerPostingController::newForLedgerPostingJournal(postingJournal);

            postingReference = LedgerVoucherObject::newVoucher(
                voucher,
                postDate,
                SysModule::Ledger,
                LedgerTransType::Transfer,
                NoYes::No,
                currentOperationsTax);

            postingReference.parmAcknowledgementDate(acknowledgementDate);
            postingReference.parmFiscalCalendarPeriod(fiscalCalendarPeriodRecId);

            postingController.addReference(postingReference);

            exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                postingReference.parmAccountingDate());

            while select LedgerDimension, Amount, Txt from ledgerOpeningTrans
                where ledgerOpeningTrans.Sheet == sheet
            {
                postingTrans = LedgerVoucherTransObject::newTransactionAmountDefault(
                    postingReference,
                    LedgerPostingType::Opening_ES,
                    ledgerOpeningTrans.LedgerDimension,
                    currencyCode,
                    ledgerOpeningTrans.Amount,
                    exchangeRateHelper);

                postingTrans.parmTransTxt(ledgerOpeningTrans.Txt);

                postingController.addTrans(postingTrans);
            }

            postingController.post();

            ledgerOpeningSheet.Voucher = voucher;
            ledgerOpeningSheet.update();

            TransactionLog::create(TransactionLogType::LedgerOpening, strfmt("@SYS321301", date2StrUsr(ledgerOpeningSheet.PostDate, DateFlags::FormatAll), ledgerOpeningSheet.Voucher));

            info("@SYS321295");

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version      = conpeek(packedClass,1);

        switch (version)
        {
            case CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    private void updateFiscalCalendarPeriod()
    {
        FiscalCalendarPeriod fiscalCalendarPeriod;

        Debug::assert(fiscalCalendarPeriodRecId == 0);

        fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(
            fiscalCalendarRecId,
            postDate,
            periodType);

        if (fiscalCalendarPeriod != null)
        {
            fiscalCalendarPeriodRecId = fiscalCalendarPeriod.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object calledFrom = null)
    {
        LedgerOpeningSheet_ES                   ledgerOpeningSheetLocal;
        LedgerOpeningTrans_ES                   ledgerOpeningTransLocal;
        TransDate                               periodStart;
        TransDate                               tmpDate;

        if (!postDate)
        {
            return checkFailed("@SYS16668");
        }

        if (voucher)
        {
            return checkFailed("@SYS321295");
        }

        if (!sheet)
        {
            return checkFailed("@SYS18626");
        }

        if (periodType == FiscalPeriodType::Closing)
        {
            return checkFailed("@SYS321296");
        }

        if (periodType == FiscalPeriodType::Opening)
        {
            if (!LedgerFiscalCalendar::existOpeningPeriodForDate(fiscalCalendarRecId, postDate))
            {
                return checkFailed(strfmt("@SYS321297", date2StrUsr(postDate, DateFlags::FormatAll)));
            }
        }

        if (fiscalCalendarPeriodRecId == 0)
        {
            return checkFailed(strfmt("@SYS17614", periodType));
        }

        select firstonly RecId from ledgerOpeningSheetLocal
        where ledgerOpeningSheetLocal.Sheet    == sheet &&
              ledgerOpeningSheetLocal.PostDate == postDate;

        if (!ledgerOpeningSheetLocal)
        {
            return checkFailed("@SYS18626");
        }

        if (ledgerOpeningSheetLocal.Voucher)
        {
            return checkFailed("@SYS321295");
        }

        periodStart     = LedgerFiscalCalendar::findOpeningStartDateByDate(fiscalCalendarRecId, ledgerOpeningSheetLocal.FromDate);
        tmpDate         = LedgerFiscalCalendar::findOpeningStartDateByDate(fiscalCalendarRecId, ledgerOpeningSheetLocal.ToDate);

        if (periodStart != tmpDate)
        {
            return checkFailed(strfmt("@SYS28745",year(periodStart),year(tmpDate)));
        }

        select firstonly RecId from ledgerOpeningTransLocal
            where ledgerOpeningTransLocal.Sheet == sheet;

        if (!ledgerOpeningTransLocal)
        {
            return checkFailed("@SYS28652");
        }

        if (LedgerParameters::find().AcknowledgementDate_IT)
        {
            select firstonly RecId from ledgerOpeningSheetLocal
            where ledgerOpeningSheetLocal.Sheet               == sheet &&
                  ledgerOpeningSheetLocal.AcknowledgementDate <  ledgerOpeningSheetLocal.PostDate;

            if (ledgerOpeningSheetLocal)
            {
                // Posting date may not exceed competence date.
                return checkFailed("@SYS99223");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@SYS4586";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        LedgerOpeningPost_ES   ledgerOpeningPost;

        switch (args.dataset())
        {
            case tablenum(LedgerOpeningSheet_ES):
                ledgerOpeningPost   = LedgerOpeningPost_ES::newLedgerOpeningSheet(args.record());
                break;
            case tablenum(LedgerOpeningTable_ES):
                ledgerOpeningPost   = LedgerOpeningPost_ES::newLedgerOpeningTable(args.record());
                break;
            default:
                throw error("@SYS18626");
        }

        if (ledgerOpeningPost.validate())
        {
            ledgerOpeningPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerOpeningSheet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static LedgerOpeningPost_ES newLedgerOpeningSheet(LedgerOpeningSheet_ES _ledgerOpeningSheet)
    {
        LedgerOpeningPost_ES ledgerOpeningPost;

        ledgerOpeningPost = new LedgerOpeningPost_ES();
        ledgerOpeningPost.getLast();
        ledgerOpeningPost.parmOpeningSheet(_ledgerOpeningSheet.Sheet);
        ledgerOpeningPost.parmPostDate(_ledgerOpeningSheet.PostDate);
        ledgerOpeningPost.parmAcknowledgementDate(_ledgerOpeningSheet.AcknowledgementDate);
        ledgerOpeningPost.parmVoucher(_ledgerOpeningSheet.Voucher);
        ledgerOpeningPost.parmPeriodCode(_ledgerOpeningSheet.PeriodCode);
        ledgerOpeningPost.parmCurrentOperationsTax(_ledgerOpeningSheet.CurrentOperationsTax);

        if (_ledgerOpeningSheet.FiscalCalendarPeriod == 0)
        {
            ledgerOpeningPost.updateFiscalCalendarPeriod();
        }
        else
        {
            ledgerOpeningPost.parmFiscalCalendarPeriodRecId(_ledgerOpeningSheet.FiscalCalendarPeriod);
        }

        return ledgerOpeningPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerOpeningTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static LedgerOpeningPost_ES newLedgerOpeningTable(LedgerOpeningTable_ES _ledgerOpeningTable)
    {
        LedgerOpeningSheet_ES  ledgerOpeningSheet;
        LedgerOpeningPost_ES   ledgerOpeningPost;

        ledgerOpeningSheet = LedgerOpeningSheet_ES::find(_ledgerOpeningTable.Sheet);
        ledgerOpeningPost = LedgerOpeningPost_ES::newLedgerOpeningSheet(ledgerOpeningSheet);

        return ledgerOpeningPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if Audit policy can run in a new session.
    /// </summary>
    /// <returns>
    /// False.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>