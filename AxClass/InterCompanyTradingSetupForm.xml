<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyTradingSetupForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InterCompanyTradingSetupForm
{
    FormRun                 formRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buttonRemoveRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the relationship between the customer and the vendor <c>InterCompanyTradingPartner</c>
    ///    records.
    /// </summary>
    /// <param name="_tradingPartnerCustomer">
    ///    A customer record of the <c>InterCompanyTradingPartner</c> table.
    /// </param>
    /// <param name="_tradingPartnerVendor">
    ///    A vendor record of the <c>InterCompanyTradingPartner</c> table.
    /// </param>
    public void buttonRemoveRelationship(InterCompanyTradingPartner _tradingPartnerCustomer,
                                         InterCompanyTradingPartner _tradingPartnerVendor)
    {
        InterCompanyTradingRelation interCompanyTradingRelation;

        if (_tradingPartnerCustomer && _tradingPartnerVendor)
        {
            ttsbegin;

            _tradingPartnerCustomer.delete();
            _tradingPartnerVendor.delete();

            ttscommit;
        }
        else if (_tradingPartnerVendor && IntercompanyRemoveRelationshipEnableCleanUpFlight::instance().isEnabled())
        {
            ttsbegin;

            _tradingPartnerVendor.delete();

            ttscommit;
        }
        else if (_tradingPartnerCustomer && IntercompanyRemoveRelationshipEnableCleanUpFlight::instance().isEnabled())
        {
            ttsbegin;

            _tradingPartnerCustomer.delete();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSourceAgrmPolicyValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the validity of the record in the <c>IntercompanyAgreementActionPolicy</c> table to be
    ///    written.
    /// </summary>
    /// <param name="_dataSource">
    ///    The data source for which the validity check is needed.
    /// </param>
    /// <param name="_parentDataSource">
    ///    The parent data source for the <paramref name="_dataSource" /> parameter.
    /// </param>
    /// <returns>
    ///    true if the record in the <c>IntercompanyAgreementActionPolicy</c> table is valid; otherwise, false.
    /// </returns>
    public boolean formDataSourceAgrmPolicyValidateWrite(FormDataSource      _dataSource,
                                                         FormDataSource      _parentDataSource)
    {
        IntercompanyAgreementActionPolicy   intercompanyAgreementActionPolicy = _dataSource.cursor();
        boolean                             ret = true;

        if (!intercompanyAgreementActionPolicy.InterCompanyTradingPartner)
        {
            if (!_parentDataSource.cursor().RecId)
            {
                _parentDataSource.write();
            }
            intercompanyAgreementActionPolicy.InterCompanyTradingPartner = _parentDataSource.cursor().RecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSourcePolicyValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>InterCompanyEndpointActionPolicy</c> record to write.
    /// </summary>
    /// <param name="_dataSource">
    ///    The data source to validate.
    /// </param>
    /// <param name="_parentDataSource">
    ///    The parent data source for the <c>_dataSource</c> parameter.
    /// </param>
    /// <returns>
    ///    true if the <c>InterCompanyEndpointActionPolicy</c> record is valid; otherwise, false.
    /// </returns>
    public boolean formDataSourcePolicyValidateWrite(FormDataSource      _dataSource,
                                                     FormDataSource      _parentDataSource)
    {
        InterCompanyEndpointActionPolicy    interCompanyActionPolicy = _dataSource.cursor();
        boolean                             ret = false;

        if (!interCompanyActionPolicy.InterCompanyTradingPartner)
        {
            if (!_parentDataSource.cursor().RecId)
            {
                _parentDataSource.write();
            }
            interCompanyActionPolicy.InterCompanyTradingPartner = _parentDataSource.cursor().RecId;
        }

        ret = interCompanyActionPolicy.checkAllowUpdateOpenInterCompanyOrders();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSourceTransferValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>InterCompanyEndpointActionPolicyTransfer</c> record to write.
    /// </summary>
    /// <param name="_dataSource">
    ///    The data source to validate.
    /// </param>
    /// <param name="_parentDataSource">
    ///    The parent data source for the <c>_dataSource</c> parameter.
    /// </param>
    /// <returns>
    ///    true if the <c>InterCompanyEndpointActionPolicyTransfer</c> record is valid; otherwise, false.
    /// </returns>
    public boolean formDataSourceTransferValidateWrite(FormDataSource      _dataSource,
                                                       FormDataSource      _parentDataSource)
    {
        InterCompanyEndpointActionPolicyTransfer    interCompanyActionPolicyTransfer = _dataSource.cursor();
        boolean                                     ret = true;

        if (!interCompanyActionPolicyTransfer.InterCompanyEndpointActionPolicy)
        {
            if (!_parentDataSource.cursor().RecId)
            {
                _parentDataSource.write();
            }
            interCompanyActionPolicyTransfer.InterCompanyEndpointActionPolicy = _parentDataSource.cursor().RecId;
            ret = interCompanyActionPolicyTransfer.InterCompanyEndpointActionPolicy? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSourceValueMapValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the <c>InterCompanyTradingValueMap</c> record to write.
    /// </summary>
    /// <param name="_dataSource">
    ///    The data source to validate.
    /// </param>
    /// <param name="_parentDataSource">
    ///    The parent data source for the <c>_dataSource</c> parameter.
    /// </param>
    /// <returns>
    ///    true if the <c>InterCompanyTradingValueMap</c> record is valid; otherwise, false.
    /// </returns>
    public boolean formDataSourceValueMapValidateWrite(FormDataSource      _dataSource,
                                                       FormDataSource      _parentDataSource)
    {
        InterCompanyTradingValueMap         interCompanyTradingValueMap  = _dataSource.cursor();
        boolean                             ret = true;

        if (!interCompanyTradingValueMap.InterCompanyTradingPartner)
        {
            if (!_parentDataSource.cursor().RecId)
            {
                _parentDataSource.write();
            }
            interCompanyTradingValueMap.InterCompanyTradingPartner = _parentDataSource.cursor().RecId;
            ret = interCompanyTradingValueMap.InterCompanyTradingPartner? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodClose</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rereads the calling data source and closes the <c>InterCompanyTradingSetupForm</c> form.
    /// </summary>
    public void formMethodClose()
    {
        FormDataSource  datasource;

        if (formRun.args() && formRun.args().record())
        {
            datasource = FormDataUtil::getFormDataSource(formRun.args().record());
            if (datasource)
            {
                datasource.reread();
                datasource.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActionPolicyAccessPurchase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables and disables fields for the purchase <c>InterCompanyEndpointActionPolicy</c> and <c>InterCompanyEndpointActionPolicyTransfer</c> table data source.
    /// </summary>
    /// <param name="_interCompanyEndpointActionPolicy_ds">
    /// The <c>InterCompanyEndpointActionPolicy</c> table data source for which to enable and disable fields.
    /// </param>
    /// <param name="_interCompanyEndpointActionPolicyTransferIn_ds">
    /// The <c>InterCompanyEndpointActionPolicyTransfer</c> table data source for which to enable and disable fields.
    /// </param>
    public void setActionPolicyAccessPurchase(FormDataSource    _interCompanyEndpointActionPolicy_ds,
                                              FormDataSource    _interCompanyEndpointActionPolicyTransferIn_ds)
    {
        InterCompanyEndpointActionPolicy          interCompanyEndpointActionPolicy = _interCompanyEndpointActionPolicy_ds.cursor();
        InterCompanyEndpointActionPolicyTransfer  interCompanyEndpointActionPolicyTransferIn = _interCompanyEndpointActionPolicyTransferIn_ds.cursor();

        _interCompanyEndpointActionPolicy_ds.object(fieldnum(InterCompanyEndpointActionPolicy, PriceDiscountSearch)).enabled(!interCompanyEndpointActionPolicyTransferIn.PriceDiscount);
        _interCompanyEndpointActionPolicy_ds.object(fieldnum(InterCompanyEndpointActionPolicy, PrintPurchInvoice)).enabled(interCompanyEndpointActionPolicy.PostPurchInvoice);
        _interCompanyEndpointActionPolicy_ds.object(fieldnum(InterCompanyEndpointActionPolicy, PrintSalesInvoice)).enabled(interCompanyEndpointActionPolicy.PostSalesInvoice);

        _interCompanyEndpointActionPolicyTransferIn_ds.object(fieldnum(InterCompanyEndpointActionPolicyTransfer, PriceDiscount)).enabled(!interCompanyEndpointActionPolicy.PriceDiscountSearch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActionPolicyAccessSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables and disables fields for the sales <c>InterCompanyEndpointActionPolicy</c> and <c>InterCompanyEndpointActionPolicyTransfer</c> table data source.
    /// </summary>
    /// <param name="_interCompanyEndpointActionPolicy_ds">
    /// The <c>InterCompanyEndpointActionPolicy</c> table data source for which to enable and disable fields.
    /// </param>
    /// <param name="_interCompanyEndpointActionPolicyTransfer_ds">
    /// The <c>InterCompanyEndpointActionPolicyTransfer</c> table data source for which to enable and disable fields.
    /// </param>
    public void setActionPolicyAccessSales(FormDataSource   _interCompanyEndpointActionPolicy_ds,
                                           FormDataSource   _interCompanyEndpointActionPolicyTransfer_ds)
    {
        InterCompanyEndpointActionPolicy          interCompanyEndpointActionPolicy = _interCompanyEndpointActionPolicy_ds.cursor();
        InterCompanyEndpointActionPolicyTransfer  interCompanyEndpointActionPolicyTransfer = _interCompanyEndpointActionPolicyTransfer_ds.cursor();

        _interCompanyEndpointActionPolicy_ds.object(fieldnum(InterCompanyEndpointActionPolicy, SalesIdNumberSequence)).enabled(interCompanyEndpointActionPolicy.SalesIdNumbering == InterCompanySalesIdNumbering::NumberSequence);
        _interCompanyEndpointActionPolicy_ds.object(fieldnum(InterCompanyEndpointActionPolicy, InvoiceOriginalSales)).enabled(interCompanyEndpointActionPolicy.UnitPriceEqualsCostPrice);
        _interCompanyEndpointActionPolicy_ds.object(fieldnum(InterCompanyEndpointActionPolicy, AutoPostCustPaym)).enabled(interCompanyEndpointActionPolicy.LedgerJournalNameIdCustPaym ? true : false);

        if (IntrcmpSalesPriceAutoUpdFeature::instance().isEnabled())
        {
            _interCompanyEndpointActionPolicy_ds.object(fieldNum(InterCompanyEndpointActionPolicy, PriceDiscountSearchDerivedSalesLine)).enabled(interCompanyEndpointActionPolicy.PriceDiscountSearch);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueMapAccess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables and disables fields for the data source of the <c>InterCompanyTradingValueMap</c> table.
    /// </summary>
    /// <param name="interCompanyTradingValueMap_ds">
    ///    The data source of the <c>InterCompanyTradingValueMap</c> table for which to enable and disable
    ///    fields.
    /// </param>
    public void setValueMapAccess(FormDataSource    interCompanyTradingValueMap_ds)
    {
        InterCompanyTradingValueMap  interCompanyTradingValueMap = interCompanyTradingValueMap_ds.cursor();

        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, InventLocationExtCodeId)).enabled(interCompanyTradingValueMap.XmlMapInventLocation == XMLMapExternalCode::ExternalCode);

        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, ItemExtCodeId)).enabled(interCompanyTradingValueMap.XmlMapItemId == XMLMapItemId::ExternalCode);
        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, BarCodeSetupId)).enabled(interCompanyTradingValueMap.XmlMapItemId == XMLMapItemId::BarCode);
        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, BarCodeTypeCodeValue)).enabled(interCompanyTradingValueMap.XmlMapItemId == XMLMapItemId::BarCode);

        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, DlvModeExtCodeId)).enabled(interCompanyTradingValueMap.XmlMapDlvMode == XMLMapExternalCode::ExternalCode);
        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, DlvTermExtCodeId)).enabled(interCompanyTradingValueMap.XmlMapDlvTerm == XMLMapExternalCode::ExternalCode);
        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, MarkupExtCodeId)).enabled(interCompanyTradingValueMap.XmlMapMarkup == XMLMapExternalCode::ExternalCode);
        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, TaxExtCodeId)).enabled(interCompanyTradingValueMap.XmlMapTaxCode == XMLMapExternalCode::ExternalCode);

        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, ReturnReasonCodeExtCodeId)).enabled(interCompanyTradingValueMap.XmlMapReturnReasonCodeId == XMLMapExternalCode::ExternalCode);
        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, ReturnDispCodeExtCodeId)).enabled(interCompanyTradingValueMap.XmlMapReturnDispCodeId == XMLMapExternalCode::ExternalCode);
        interCompanyTradingValueMap_ds.object(fieldnum(InterCompanyTradingValueMap, AgreementClassificationExtCodeId)).enabled(interCompanyTradingValueMap.XmlMapAgreementClassification == XMLMapExternalCode::ExternalCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueMapAccessExt_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables and disables fields for the data source of the <c>AifEndPointActionValueMapExt_RU</c> table.
    /// </summary>
    /// <param name="aifEndpointActionValueMapExt_RU_ds">
    ///    The data source of the <c>AifEndPointActionValueMapExt_RU</c> table for which to enable and disable
    ///    fields.
    /// </param>
    public void setValueMapAccessExt_RU(FormDataSource    aifEndpointActionValueMapExt_RU_ds)
    {
        AifEndPointActionValueMapExt_RU  aifEndPointActionValueMapExt = aifEndpointActionValueMapExt_RU_ds.cursor();

        aifEndpointActionValueMapExt_RU_ds.object(fieldNum(AifEndPointActionValueMapExt_RU, InventProfileExtCodeId)).enabled(aifEndPointActionValueMapExt.xmlMapInventProfile == XMLMapExternalCode::ExternalCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of this class.
    /// </summary>
    /// <returns>
    ///    A new instance of the class.
    /// </returns>
    static public InterCompanyTradingSetupForm construct()
    {
        InterCompanyTradingSetupForm    interCompanyTradingSetupForm = new InterCompanyTradingSetupForm();

        return interCompanyTradingSetupForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSourceGetFieldFromEdtTypeNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a field of a given EDT type on the specified buffer, if one exists with a value. Used to
    /// initialise the form datasource for the partnership.
    /// </summary>
    /// <param name = "buffer">Table buffer on which to search.</param>
    /// <param name = "edtTypeNum">EDT type to search for.</param>
    /// <returns>DictField for the field on the buffer of the specified EDT type if the buffer contains a value in that field.</returns>
    public DictField formDataSourceGetFieldFromEdtTypeNum(Common buffer, ExtendedTypeId edtTypeNum)
    {
        DictTable dictTable = new DictTable(buffer.TableId);
        DictField dictField;

        for (int field = 1; field <= dictTable.fieldCnt(); field++)
        {
            FieldId fieldId = dictTable.fieldCnt2Id(field);

            dictField = new DictField(dictTable.id(), fieldId);

            if (dictField.typeId() == edtTypeNum)
            {
                // Skip the field if it does not contain a value:
                if (buffer.(dictField.id()))
                {
                    return dictField;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of this class.
    /// </summary>
    /// <param name="_formRun">
    ///    A handle to the current intercompany trading setup form.
    /// </param>
    /// <returns>
    ///    A new instance of the intercompany trading setup form class.
    /// </returns>
    static public InterCompanyTradingSetupForm newFormRun(FormRun  _formRun)
    {
        InterCompanyTradingSetupForm      interCompanyTradingSetupForm = InterCompanyTradingSetupForm::construct();

        interCompanyTradingSetupForm.parmFormRun(_formRun);

        return interCompanyTradingSetupForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>