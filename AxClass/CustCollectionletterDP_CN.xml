<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionletterDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustCollectionletterDP_CN</c> class provides data for the <c>CustCollectionletter_CN</c>
/// SQL Server Reporting Services (SSRS) report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(CustCollectionletter_CN)),
    SRSReportParameterAttribute(classStr(CustCollectionletterContract_CN))
]
public class CustCollectionletterDP_CN extends SRSReportDataProviderBase
{
    CustCollectionletterTmp_CN  custCollectionletterTmp_CN;
    Query                       query;
    CustAccount                 custAcc;
    TransDate                   asOn;
    TransDate                   agingRange;
    TransDate                   agingTo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private void buildQuery()
    {
        #define.Empty('')

        QueryBuildRange         qbRange;
        QueryBuildDatasource    qbdsCustTable, qbdsCustTrans;

        qbdsCustTable = query.dataSourceTable(tableNum(CustTable));

        if (custAcc)
        {
            qbRange  = qbdsCustTable.addRange(fieldNum(CustTable, AccountNum));
            qbRange.value(queryValue(custAcc));
        }
        else
        {
            SysQuery::findOrCreateRange(
                qbdsCustTable,
                fieldNum(CustTable, AccountNum)).value(SysQuery::range(#Empty, custAcc));
        }

        qbdsCustTrans = query.dataSourceTable(tableNum(CustTrans));

        SysQuery::findOrCreateRange(
            qbdsCustTrans,
            fieldNum(CustTrans, DueDate)).value(SysQuery::range(agingRange, agingTo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustCollectionletterTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>CustCollectionletterTmp_CN</c> table.
    /// </summary>
    /// <returns>
    /// Data from the <c>CustCollectionletterTmp_CN</c> table for the report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(CustCollectionletterTmp_CN))
    ]
    public CustCollectionletterTmp_CN getCustCollectionletterTmp_CN()
    {
        return custCollectionletterTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustCollectionletterTmp_CN</Name>
				<Source><![CDATA[
    private void insertCustCollectionletterTmp_CN(
        boolean                             _isVoucherCNUsed,
        SubledgerVoucherGeneralJournalEntry _subledgerVoucherGeneralJournalEntry,
        GeneralJournalEntry_W               _generalJournalEntryW,
        CustTrans                           _custTrans,
        CustTable                           _custTable)
    {
        AmountMSTDebCred        drAmountMst, drSettleAmountMst;
        LedgerTransType         drTransType;
        VoucherJournal          voucher;
        Correct                 correct;

        drAmountMst         = _custTrans.AmountMST;
        drSettleAmountMst   = _custTrans.SettleAmountMST;
        drTransType         = _custTrans.TransType;
        correct             = _custTrans.Correct;

        if ((drAmountMst != drSettleAmountMst)
            && (drTransType == LedgerTransType::Sales
                || drTransType == LedgerTransType::Cust))
        {
            custCollectionletterTmp_CN.AccountNum = _custTable.AccountNum;
            custCollectionletterTmp_CN.Name       = _custTable.name();
            custCollectionletterTmp_CN.DueDate    = _custTrans.DueDate;

            if (_isVoucherCNUsed)
            {
                voucher = _generalJournalEntryW.Voucher_CN;
            }
            else
            {
                voucher = _custTrans.Voucher;
            }

            custCollectionletterTmp_CN.Voucher    = voucher;
            custCollectionletterTmp_CN.Txt        = _custTrans.Txt;

            if (drAmountMst >= 0 || (drAmountMst < 0 && correct))
            {
                custCollectionletterTmp_CN.DebitAmount  = drAmountMst;
                custCollectionletterTmp_CN.CreditAmount = 0;
            }
            else
            {
                custCollectionletterTmp_CN.DebitAmount  = 0;
                custCollectionletterTmp_CN.CreditAmount = drAmountMst;
            }

            custCollectionletterTmp_CN.SettleAmountMST = drSettleAmountMst;

            custCollectionletterTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00115, funcName());

        QueryRun                            queryRun;
        boolean                             isVoucherCNUsed;
        int                                 rangeNum, toNum;
        CustTable                           custTable;
        CustTrans                           custTrans;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        GeneralJournalEntry_W               generalJournalEntryW;

        CustCollectionletterContract_CN contract = this.parmDataContract() as CustCollectionletterContract_CN;

        custAcc  = contract.parmCustAccount();
        asOn     = contract.parmAsOn();
        rangeNum = contract.parmRangeNum();
        toNum    = contract.parmToNum();

        if (!asOn)
        {
            asOn = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        agingRange = asOn - toNum;
        agingTo    = asOn - rangeNum;

        isVoucherCNUsed = LedgerParameters::isChineseVoucher_CN();

        query = this.parmQuery();
        this.buildQuery();
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            custTable                           = queryRun.get(tableNum(CustTable));
            custTrans                           = queryRun.get(tableNum(CustTrans));
            subledgerVoucherGeneralJournalEntry = queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry));
            generalJournalEntryW                = queryRun.get(tableNum(GeneralJournalEntry_W));

            this.insertCustCollectionletterTmp_CN(
                isVoucherCNUsed,
                subledgerVoucherGeneralJournalEntry,
                generalJournalEntryW,
                custTrans,
                custTable);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>