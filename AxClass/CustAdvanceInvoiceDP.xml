<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAdvanceInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustAdvanceInvoiceDP</c> class is the Report Data Provider class for the <c>CustAdvanceInvoice</c>
///    report
/// </summary>
[
    SRSReportQueryAttribute(querystr(CustAdvanceInvoiceReport)),
    SRSReportParameterAttribute(classStr(CustAdvanceInvoiceContract))
]
class CustAdvanceInvoiceDP extends CustVendAdvanceInvoiceDP
{
    private const str LocalizationFeatureReference = 'EEU-00044';
    boolean isCreditNote;
    LanguageId languageId;
    Counter lineNumber;
    AmountCur runningTotal;

    #ISOCountryRegionCodes
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInvoiceLineFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the invoice line fields from the report temporary table buffer.
    /// </summary>
    /// <remarks>
    /// This is done so the report can differentiate between advance invoice lines and other bands of the
    /// report.
    /// </remarks>
    protected void clearInvoiceLineFields()
    {
        super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            advanceInvoiceTmp.LineSign = '';
            advanceInvoiceTmp.LineNumber = 0;
            advanceInvoiceTmp.Qty = 0;
            advanceInvoiceTmp.TaxWriteCode = '';
            advanceInvoiceTmp.LineTaxAmount = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the core advance invoice line fields in the report temp table buffer and inserts the
    /// record.
    /// </summary>
    /// <param name="advanceInvoiceLine">
    /// The specific advance invoice line to default from.
    /// </param>
    protected void createInvoiceLine(CzAdvanceInvoiceLine advanceInvoiceLine)
    {
        CzCustAdvanceInvoiceLine    custAdvanceInvoiceLine = advanceInvoiceLine;
        CzCustAdvanceInvoiceLine    correctingLine;
        Amount                      lineAmountDiff;
        TaxAmount                   taxAmountDiff;
        PlCorrectionDesc            correctionDescription;
        boolean                     correctingLineFound;
        Label                       label = languageId ? new Label(languageId) : new Label();

        // Insert the primary advance invoice line
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if (isCreditNote)
            {
                if (custAdvanceInvoiceLine.OrigAdvanceInvoiceLineRecId)
                {
                    advanceInvoiceTmp.LineSign = '-';
                }
                else
                {
                    advanceInvoiceTmp.LineSign = '+';
                }
            }
            else
            {
                advanceInvoiceTmp.LineSign = '';
            }

            if (custAdvanceInvoiceLine.OrigAdvanceInvoiceLineRecId || !isCreditNote)
            {
                lineNumber++;
                advanceInvoiceTmp.LineNumber = LineNumber;
            }
            else
            {
                advanceInvoiceTmp.LineNumber = 0;
            }

            advanceInvoiceTmp.Qty = 1.0;
            advanceInvoiceTmp.TaxWriteCode = custAdvanceInvoiceLine.taxWriteCode();
            advanceInvoiceTmp.LineTaxAmount = custAdvanceInvoiceLine.VATAmount();

            advanceInvoiceTmp.PrevRunningTotalAmount = runningTotal;
            runningTotal += custAdvanceInvoiceLine.AmountCur;
        }

        super(advanceInvoiceLine);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            // For reversing lines on credit note advance invoices, create an additional line for each correcting line
            if (custAdvanceInvoiceLine.AdvanceInvoiceLineInternalRef && custAdvanceInvoiceLine.OrigAdvanceInvoiceLineRecId)
            {
                lineAmountDiff = 0;
                taxAmountDiff  = 0;

                while select correctingLine
                    where correctingLine.ParentRecId                   == custAdvanceInvoiceLine.ParentRecId &&
                          correctingLine.AdvanceInvoiceLineInternalRef == custAdvanceInvoiceLine.AdvanceInvoiceLineInternalRef &&
                          correctingLine.OrigAdvanceInvoiceLineRecId   == 0
                {
                    correctingLineFound = true;

                    lineAmountDiff += correctingLine.VATBaseAmount();
                    taxAmountDiff  += correctingLine.VATAmount();
                    correctionDescription = correctingLine.CorrectionDescription;

                    this.createInvoiceLine(correctingLine);
                }

                //  After printing the correcting line(s), show subtotals for each reversing line - correcting line(s)
                if (correctingLineFound)
                {
                    lineAmountDiff += custAdvanceInvoiceLine.VATBaseAmount();
                    taxAmountDiff  += custAdvanceInvoiceLine.VATAmount();

                    this.clearInvoiceLineFields();
                    advanceInvoiceTmp.ShowCorrectionLineSubtotal = NoYes::Yes;
                    advanceInvoiceTmp.LineTaxAmount = taxAmountDiff;
                    advanceInvoiceTmp.LineDescription = label.extractString(literalstr("@GLS109453"));
                    advanceInvoiceTmp.LineInvoiceText = correctionDescription;
                    advanceInvoiceTmp.LineAmountCur = lineAmountDiff + taxAmountDiff;

                    this.insertAdvanceInvoiceTmp();

                    advanceInvoiceTmp.ShowCorrectionLineSubtotal = NoYes::No;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginalDocument</Name>
				<Source><![CDATA[
/// <summary>
    /// Implements an original document section on the advance invoice report.
    /// </summary>
    /// <param name="advanceInvoiceTable">
    /// The specific advance invoice having an original document.
    /// </param>
    protected void createOriginalDocument(CzAdvanceInvoiceTable advanceInvoiceTable)
    {
        SalesTable  salesTable;
        CustInvoiceTable    custInvoiceTable;
        PlCustAdvanceInvoiceItems custAdvanceInvoiceItems;
        CzCustAdvanceInvoiceTable   custAdvanceInvoiceTable = advanceInvoiceTable;

        TaxAmount       totalTaxAmount;
        SalesLineAmount totalAmountExclTax;

        Common common;
        QueryRun queryRun;
        Query query = new Query();

        super(advanceInvoiceTable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if (custAdvanceInvoiceTable.SalesId
                || custAdvanceInvoiceTable.FreeInvoiceRefRecId)
            {
                advanceInvoiceTmp.ShowOriginalDocument = NoYes::Yes;

                if (custAdvanceInvoiceTable.SalesId)
                {
                    salesTable = salesTable::find(custAdvanceInvoiceTable.SalesId);
                    advanceInvoiceTmp.OriginalDocumentDescription = strFmt("@SYS76767", salesTable.SalesId);
                    }
                    else
                    {
                    custInvoiceTable = CustInvoiceTable::findRecId(custAdvanceInvoiceTable.FreeInvoiceRefRecId);
                    advanceInvoiceTmp.OriginalDocumentDescription = "@SYS23028";
                    }

                    this.insertAdvanceInvoiceTmp();

                if (custAdvanceInvoiceTable.Posted
                    && PlCustAdvanceInvoiceItems::exist(custAdvanceInvoiceTable.RecId))
                {
                    query = PlCustAdvanceInvoiceItems::createQuery(custAdvanceInvoiceTable);
                }
                else
                {
                    if (custAdvanceInvoiceTable.creditNote())
                    {
                        query = PlCustAdvanceInvoiceItems::createCreditNoteQuery(custAdvanceInvoiceTable);
            }
                    else
                {
                        if (custAdvanceInvoiceTable.SalesId)
                    {
                            query.addDataSource(tableNum(SalesLine)).addRange(fieldNum(SalesLine, SalesId)).value(queryValue(custAdvanceInvoiceTable.SalesId));
                    }
                    else
                    {
                            query.addDataSource(tableNum(CustInvoiceLine)).addRange(fieldNum(CustInvoiceLine, ParentRecId)).value(queryValue(custAdvanceInvoiceTable.FreeInvoiceRefRecId));
                        }
                    }
                    }

                queryRun = new QueryRun(query);

                while (queryRun.next())
                {
                    common = queryRun.getNo(1);

                    switch (common.TableId)
                    {
                        case tableNum(SalesLine):
                            custAdvanceInvoiceItems.initFromSalesLine(common);
                            break;

                        case tableNum(CustInvoiceLine):
                            custAdvanceInvoiceItems.initFromCustInvoiceLine(common);
                            break;

                        case tableNum(PlCustAdvanceInvoiceItems):
                            custAdvanceInvoiceItems.data(common);
                            break;
                    }

                    advanceInvoiceTmp.initFromPlCustAdvanceInvoiceItems(custAdvanceInvoiceItems);

                    totalAmountExclTax += advanceInvoiceTmp.OriginalLineAmountExclTax;
                    totalTaxAmount     += advanceInvoiceTmp.OriginalTaxAmount;

                    this.insertAdvanceInvoiceTmp();
                }
            }

            // Add a line on the report for the total invoice amounts
            if (advanceInvoiceTmp.ShowOriginalDocument == NoYes::Yes)
            {
                advanceInvoiceTmp.OriginalItemId = '';
                advanceInvoiceTmp.OriginalDocumentDescription = '';

                advanceInvoiceTmp.OriginalLineAmountExclTax = totalAmountExclTax;
                advanceInvoiceTmp.OriginalTaxAmount = totalTaxAmount;

                this.insertAdvanceInvoiceTmp();

                advanceInvoiceTmp.ShowOriginalDocument = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements a taxes section on the advance invoice report.
    /// </summary>
    /// <param name="advanceInvoiceTable">
    /// The specific advance invoice having tax details.
    /// </param>
    protected void createTaxes(CzAdvanceInvoiceTable advanceInvoiceTable)
    {
        CzCustAdvanceInvoiceTable   custAdvanceInvoiceTable = advanceInvoiceTable;
        CustFormletterParameters    formLetterParameters;
        TaxTrans                    taxTrans;
        TaxTable                    taxTable;
        SysDictType                 dictType = new SysDictType(extendedTypeNum(TaxValue));

        super(advanceInvoiceTable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            formLetterParameters = CustFormletterParameters::find();

            if (formLetterParameters.TaxSpecPrintLevel != TaxSpecPrintLevel::None)
            {
                while select * from taxTrans
                    where taxTrans.Voucher   == custAdvanceInvoiceTable.Voucher &&
                          taxTrans.TransDate == custAdvanceInvoiceTable.InvoiceDate
                    join TaxWriteSelection, RecId from taxTable
                        where taxTable.TaxCode == taxTrans.TaxCode
                {
                    advanceInvoiceTmp.ShowTaxTrans = NoYes::Yes;

                    if (!taxTrans.ExemptCode && taxTrans.TaxPrintDetail != TaxPrintDetail::TaxGroup)
                    {
                        if (taxTable.TaxWriteSelection == TaxWriteSelection::PrintCode)
                        {
                            if (taxTrans.PrintCode)
                            {
                                advanceInvoiceTmp.PrintCode    = taxTrans.PrintCode;
                            }
                            else
                            {
                                advanceInvoiceTmp.PrintCode    = TaxTable::printCode(taxTrans.TaxCode);
                            }
                        }

                        if (taxTable.TaxWriteSelection == TaxWriteSelection::TaxRate)
                        {
                            advanceInvoiceTmp.PrintCode = num2str(taxTrans.TaxValue, -1, dictType.noOfDecimals(), -1, -1);
                        }
                    }

                    advanceInvoiceTmp.TaxCode = taxTrans.TaxCode;
                    advanceInvoiceTmp.TaxBaseAmount = - taxTrans.TaxBaseAmount;
                    advanceInvoiceTmp.TaxBaseQty = - taxTrans.TaxBaseQty;
                    advanceInvoiceTmp.TaxAmount = - taxTrans.TaxAmount;
                    advanceInvoiceTmp.TaxDirective = LanguageTxt::find(tableNum(TaxTable), taxTable.RecId, advanceInvoiceTable.LanguageId).Txt;

                    if (taxTrans.ExemptTax && taxTrans.ExemptCode)
                    {
                        advanceInvoiceTmp.TaxExemptDescription = TaxExemptCodeTable::txt(taxTrans.ExemptCode, advanceInvoiceTable.LanguageId);
                        advanceInvoiceTmp.TaxCode = '';
                    }

                    this.insertAdvanceInvoiceTmp();
                }

                advanceInvoiceTmp.ShowTaxTrans = NoYes::No;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specific advance invoice record currently being printed.
    /// </summary>
    /// <returns>
    /// The specific advance invoice record currently being printed.
    /// </returns>
    protected CzAdvanceInvoiceTable getAdvanceInvoiceTable()
    {
        CzCustAdvanceInvoiceTable custAdvanceInvoiceTable;

        custAdvanceInvoiceTable = CzCustAdvanceInvoiceTable::findRecId(contract.parmAdvanceInvoiceRecId());

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            isCreditNote = custAdvanceInvoiceTable.creditNote();
            languageId = custAdvanceInvoiceTable.LanguageId;
        }

        return custAdvanceInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdvanceInvoiceLineMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record buffer with the lines for the advance invoice currently being printed.
    /// </summary>
    /// <param name="advanceInvoiceTable">
    /// The specific advance invoice currently being printed.
    /// </param>
    /// <returns>
    /// A dataset of lines for the advance invoice currently being printed, positioned on the first record;
    /// otherwise, an empty record buffer.
    /// </returns>
    /// <remarks>
    /// The use of the <c>firstonly</c> keyword is avoided so callers can iterate the possible dataset.
    /// </remarks>
    protected CzAdvanceInvoiceLine initAdvanceInvoiceLineMap(CzAdvanceInvoiceTable advanceInvoiceTable)
    {
        CzCustAdvanceInvoiceLine custAdvanceInvoiceLine;

        if (isCreditNote)
        {
            select custAdvanceInvoiceLine
                where custAdvanceInvoiceLine.ParentRecId == advanceInvoiceTable.RecId &&
                     (  custAdvanceInvoiceLine.OrigAdvanceInvoiceLineRecId ||
                      ! custAdvanceInvoiceLine.AdvanceInvoiceLineInternalRef);
        }
        else
        {
            select custAdvanceInvoiceLine
                where custAdvanceInvoiceLine.ParentRecId == advanceInvoiceTable.RecId;
        }

        return custAdvanceInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTxt</Name>
				<Source><![CDATA[
    protected FreeText invoiceTxt(CzAdvanceInvoiceTable _advanceInvoiceTable)
    {
        CustAdvanceInvoiceContract custContract;
        str  invoiceTxt;

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            // CZ and HU use more generic document title
            return super(_advanceInvoiceTable);
        }

        custContract = contract as CustAdvanceInvoiceContract;

        if (isCreditNote)
        {
            if (_advanceInvoiceTable.InvoiceId)
            {
                if (custContract.parmPrintCopyOriginal() == PrintCopyOriginal::Original)
                {
                    if (custContract.parmDuplicateInvoiceRecId())
                    {
                        invoiceTxt = "@GLS114117";
                    }
                    else
                    {
                        invoiceTxt = "@GLS114116";
                    }
                }
                else
                {
                    if (custContract.parmDuplicateInvoiceRecId())
                    {
                        invoiceTxt = "@GLS114118";
                    }
                    else
                    {
                        invoiceTxt = "@GLS114121";
                    }
                }
            }
            else
            {
                if (custContract.parmPrintCopyOriginal() == PrintCopyOriginal::Original)
                {
                    invoiceTxt = "@GLS114155";
                }
                else
                {
                    invoiceTxt = "@GLS114156";
                }
            }
        }
        else
        {
            if (_advanceInvoiceTable.InvoiceId)
            {
                if (custContract.parmPrintCopyOriginal() == PrintCopyOriginal::Original)
                {
                    if (custContract.parmDuplicateInvoiceRecId())
                    {
                        invoiceTxt = "@GLS114109";
                    }
                    else
                    {
                        invoiceTxt = "@GLS107927";
                    }
                }
                else
                {
                    if (custContract.parmDuplicateInvoiceRecId())
                    {
                        invoiceTxt = "@GLS114110";
                    }
                    else
                    {
                        invoiceTxt = "@GLS114115";
                    }
                }
            }
            else
            {
                if (custContract.parmPrintCopyOriginal() == PrintCopyOriginal::Original)
                {
                    invoiceTxt = "@GLS107933";
                }
                else
                {
                    invoiceTxt = "@GLS114154";
                }
            }
        }

        return invoiceTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceHeaderFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the core advance invoice header fields in the report temp table buffer.
    /// </summary>
    /// <param name="advanceInvoiceTable">
    /// The specific advance invoice currently being printed.
    /// </param>
    protected void setInvoiceHeaderFields(CzAdvanceInvoiceTable advanceInvoiceTable)
    {
        CustTable custTable;
        CzCustAdvanceInvoiceTable custAdvanceInvoiceTable = advanceInvoiceTable;
        CustAdvanceInvoiceContract custContract = contract as CustAdvanceInvoiceContract;
        CustInvoiceDuplicateTable_W duplicateTable;

        super(advanceInvoiceTable);

        custTable = CustTable::find(advanceInvoiceTable.OrderAccount);
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            advanceInvoiceTmp.DocumentDate = advanceInvoiceTable.DocumentDate;
            advanceInvoiceTmp.Payment = custAdvanceInvoiceTable.paymentCondition();
            advanceInvoiceTmp.SalesId = advanceInvoiceTable.SalesPurchId;
            advanceInvoiceTmp.PurchaseOrder = custAdvanceInvoiceTable.purchaseOrder();

            if (custContract.parmDuplicateInvoiceRecId())
            {
                duplicateTable = CustInvoiceDuplicateTable_W::find(custContract.parmDuplicateInvoiceRecId());
                advanceInvoiceTmp.DuplicateNum = duplicateTable.DuplicateNum;
                advanceInvoiceTmp.DuplicateDate = duplicateTable.DuplicateDate;
            }

            advanceInvoiceTmp.Name = custAdvanceInvoiceTable.orderName_PL();
            advanceInvoiceTmp.Address = custAdvanceInvoiceTable.orderAddress_PL();
            advanceInvoiceTmp.RegNum = custAdvanceInvoiceTable.orderRegNum_PL();
            advanceInvoiceTmp.CoRegNum = custAdvanceInvoiceTable.orderVatRegNum_PL();

            advanceInvoiceTmp.PayerName = custTable.name();
            advanceInvoiceTmp.PayerAddress = custTable.address();
            advanceInvoiceTmp.PayerCoRegNum = custAdvanceInvoiceTable.invoicingVatRegNum_PL();

            advanceInvoiceTmp.OriginalInvoiceReference = CzCustAdvanceInvoiceTable::originalInvoices_W(advanceInvoiceTable.RecId);

            RNumDateInWordConverter dateInWordConverter = RNumDateInWordConverter::construct(advanceInvoiceTable.LanguageId);
            advanceInvoiceTmp.InvoiceAmountInWords = dateInWordConverter.numeralsToTxt(advanceInvoiceTable.InvoiceAmount);

            advanceInvoiceTmp.InvoiceTaxAmount = - Tax::taxTotalVoucherDate(custAdvanceInvoiceTable.Voucher, custAdvanceInvoiceTable.InvoiceDate);
        }
        else
        {
            advanceInvoiceTmp.Name = custTable.name();
            advanceInvoiceTmp.RegNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, custAdvanceInvoiceTable.InvoiceDate);
            advanceInvoiceTmp.CoRegNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, custAdvanceInvoiceTable.InvoiceDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>