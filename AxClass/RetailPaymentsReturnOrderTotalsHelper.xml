<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPaymentsReturnOrderTotalsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailPaymentsReturnOrderTotalsHelper</c> contains helpers for calculating return order amounts.
/// </summary>
internal static final class RetailPaymentsReturnOrderTotalsHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateReturnOrderTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sales order totals.
    /// </summary>
    /// <param name = "_returnOrder">The return order header record.</param>
    /// <param name = "_salesTableTypeReturnItem">The return order object.</param>
    /// <returns>The sales order totals object.</returns>
    internal static McrSalesOrderTotals calculateReturnOrderTotals(SalesTable _returnOrder, SalesTableType_ReturnItem _salesTableTypeReturnItem)
    {
        McrSalesOrderTotals salesOrderTotals = new McrSalesOrderTotals(_returnOrder);

        if (!_salesTableTypeReturnItem)
        {
            return salesOrderTotals;
        }

        if (RetailPaymentsRefundBalanceFlight::instance().isEnabled())
        {
            if (RetailPaymentsReturnOrderTotalsHelper::calculateBalance(salesOrderTotals, _returnOrder) != 0)
            {
                // Do not delete any payments since a voucher could have been already posted.
                // Create the payments to cover the additional charges.
                _salesTableTypeReturnItem.mcrCreatePayments();
            }
        }
        else
        {
            if (McrCustPaymTable::getProcessedAmount(_returnOrder) != salesOrderTotals.getTotalOrder())
            {
                // The return payment amount does not cover the order total.
                // Delete any return payments that are 'Not submitted'.
                // The user should not have overriden the original payment method.
                McrCustPaymTable mcrCustPaymTableLocal;

                delete_from mcrCustPaymTableLocal
                    where mcrCustPaymTableLocal.RefRecId == _returnOrder.RecId
                        && mcrCustPaymTableLocal.RefTableId == _returnOrder.TableId
                        && mcrCustPaymTableLocal.AllowAlternateReturnPayments == NoYes::No
                        && mcrCustPaymTableLocal.Status == MCRCustPaymStatus::NotSubmitted;

                // Create the payments to cover the additional charges.
                _salesTableTypeReturnItem.mcrCreatePayments();
            }
        }

        return salesOrderTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the payment balance.
    /// </summary>
    /// <param name = "_salesOrderTotals">The sales order totals instance.</param>
    /// <param name = "_returnOrder">The return order record.</param>
    /// <returns>The balance amount.</returns>
    internal static AmountCur calculateBalance(McrSalesOrderTotals _salesOrderTotals, SalesTable _returnOrder)
    {
        AmountCur orderTotal = abs(_salesOrderTotals.getTotalOrder());
        AmountCur paymentTotal = abs(MCRCustPaymTotals::construct(_returnOrder.TableId, _returnOrder.RecId, _salesOrderTotals).getTotalPaymAmount());

        return orderTotal - paymentTotal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>