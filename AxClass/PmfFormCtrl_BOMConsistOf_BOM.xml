<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMConsistOf_BOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class manages the form controls for the ingredient lines on the <c>BOMConsistOf</c> form
/// </summary>
/// <remarks>
/// See also the form control class for the formula version lines: <c>PmfFormCtrl_BOMConsistOf_BOMVersion</c>
/// </remarks>
class PmfFormCtrl_BOMConsistOf_BOM extends PmfFormCtrl
{
    InventDim   inventDim;
    BOMVersion  bomVersion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the buffer as a typed BOM record
    /// </summary>
    /// <returns>
    /// The buffer as a BOM record
    /// </returns>
    protected BOM bom()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAxdSendBillsOfMaterialsVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the 'Send Bills of material' button should be visible
    /// </summary>
    /// <returns>
    /// true, if the form does not show a formula
    /// </returns>
    public boolean checkAxdSendBillsOfMaterialsVisible()
    {
        return !this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGroupBOMVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the fields used to group BOM lines should be visible
    /// </summary>
    /// <returns>
    /// true, if the end item is not a formula item
    /// </returns>
    public boolean checkGroupBOMVisible()
    {
        return !this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMeasureConfigVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the measurement fields should be visible
    /// </summary>
    /// <returns>
    /// true, if the fields should be visible
    /// </returns>
    public boolean checkMeasureConfigVisible()
    {
        return !this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the datasource <c>initValue</c> has been executed
    /// </summary>
    /// <param name="_buffer">
    /// The record buffer associated with the datasource
    /// </param>
    public void dataSourceInitValuePost(Common _buffer)
    {
        BOM         bom = _buffer as BOM;
        BOMVersion  bomVersionCalc = bomVersion::findVersionCalculation(bom.BOMId);
        BOMVersion  bomVersionSeries;

        if (this.isFormulaEnabled())
        {
            if (bomVersionCalc)
            {
                bom.BOMQtySerie = bomVersionCalc.PmfBatchSize;
            }
            else
            {
                if (bomVersion)
                {
                    bom.bomQtySerie = bomVersion.PmfBatchSize;
                }
                else
                {
                    select firstonly bomVersionSeries
                        where bomVersionSeries.BOMId == bom.BOMId;

                    if (bomVersionSeries)
                    {
                        bom.BOMQtySerie = bomVersionSeries.PmfBatchSize;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form is initialized
    /// </summary>
    /// <remarks>
    /// The method initializes the button manager for several controls on the form
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an exception, if the form run has not been set for the class
    /// </exception>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }

        if (this.isCatchWeightEnabled())
        {
            this.registerPdsCatchWeightCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, ItemType)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOM, isFormulaEnabled),
            ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMRouteCopyJob)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOM, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO316");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, Check)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOM, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO531");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formControlStr(BOMConsistOf,PDSPotencyIngredients)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOM, isPotencyFormulaEnabled),
            ButtonRuleEffectType::Visible);
        this.registerCtrlRuleNoGroup
            (formRun.design().controlName(formControlStr(BOMConsistOf, PDSActiveQty)),
            methodStr(PmfFormCtrl_BOMConsistOf_BOM, isPotencyFormulaEnabled),
            ButtonRuleEffectType::Visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPdsCatchWeightCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPdsCatchWeightCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOM_PdsCWUnitId)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOM, isFormulaEnabled),
            ButtonRuleEffectType::Visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeleteRefCompensationPrinciplesOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if any referencing compensation principle records may be deleted.
    /// </summary>
    /// <returns>
    /// true if any referencing compensation principle records may be deleted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This always returns true if there are no referencing compensation principle records. In such
    /// case this
    /// </remarks>
    protected boolean isDeleteRefCompensationPrinciplesOk()
    {
        boolean     ret = true;

        if (this.bom().pdsHasActiveRefCompensationPrinciples())
        {
            if (Box::yesNo("@PSC767", DialogButton::No, "@SYS336021") == DialogButton::No)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the version is a formula.
    /// </summary>
    /// <returns>
    /// True if the version is a formula; otherwise false.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        InventTable inventTable;

        Common      common = this.callerBuffer();

        boolean     ret = false;

        switch (common.TableId)
        {
            case tablenum(InventTable) :
                inventTable = common;
                ret = inventTable.isFormulaAllowed();
                break;
            default:
                ret = (this.menuItemName() == menuitemdisplaystr(PmfFormulaConsistOf));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLotGenealogyFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the lot inheritance feature and the current BOM is a for a formula.
    /// </summary>
    /// <returns>
    /// true if the lot inheritance feature is enabled and the current BOM is for a formula; otherwise, false.
    /// </returns>
    public boolean isLotGenealogyFormulaEnabled()
    {
        return #PDSLotGenealogyEnabled && this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPotencyFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the potency feature and the current BOM is a for a formula.
    /// </summary>
    /// <returns>
    /// true if the potency feature is enabled and the current BOM is for a formula; otherwise, false.
    /// </returns>
    public boolean isPotencyFormulaEnabled()
    {
        return #PDSPotencyEnabled && this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        PdsCWFormCtrl   cwFormCtrl;

        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);

        if (this.isCatchWeightEnabled())
        {
            cwFormCtrl = PdsCWFormCtrl_Std::construct();
            this.addSubFormCtrl(cwFormCtrl);
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(BOM,bomQty),
                    fieldnum(BOM,PdsCWQty),
                    false,
                    fieldnum(BOM,UnitId)]]
                ));
            cwFormCtrl.parmItemFieldId(fieldnum(BOM,ItemId));
            cwFormCtrl.parmUnitMethodStr(tablemethodstr(BOM,pdsCWUnitId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMVersion</Name>
				<Source><![CDATA[
    public BOMVersion parmBOMVersion(BOMVersion _bomVersion = bomVersion)
    {
        if (!prmisdefault(_bomVersion))
        {
            bomVersion = _bomVersion;
        }

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        if (!prmisdefault(_inventDim))
        {
            inventDim = _inventDim;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(BOM)
            || _datasources2.TableId != tablenum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.parmInventDim(_datasources2);

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design.
    /// </summary>
    /// <param name="_withReread">
    /// A Boolean value that determines whether to re-read the data source.
    /// </param>
    public void updateDesign(boolean _withReread = true)
    {
        BOM     bom             = this.bom();
        boolean isVariable      = bom.BOMConsump == BOMConsumpType::Variable;
        boolean isCatchWeight   = PdsGlobal::pdsIsCWItem(bom.ItemId);
        boolean isFormula       = bom.inventTable().isFormulaAllowed();
        boolean isPctEnabled    = false;
        boolean isScalable      = false;
        boolean allowEdit       = true;
        boolean hasVersionCalc  = false;
        boolean isStep          = bom.Formula == BOMFormula::Formula5;

        if (BOMParameters::find().BlockEditing && bom.bomTable().isApproved())
        {
            allowEdit = false;
        }

        super();

        if (this.isFormulaEnabled())
        {
            hasVersionCalc = bomVersion::findVersionCalculation(bom.BOMId).PmfFormulaVersionCalculation;

            isPctEnabled = bom.PmfPctEnable;
            isScalable   = bom.PmfScalable;

            this.visibleDSField(fieldnum(BOM, PmfPctEnable), true);
            this.visibleDSField(fieldnum(BOM, PmfScalable), true);
            this.visibleDSField(fieldnum(BOM, PmfFormulaPct), true);
            this.visibleDSField(fieldnum(BOM, PmfPlanGroupId), true);
            this.visibleDSField(fieldnum(BOM, PmfPlanGroupPriority), true);
            this.visibleDSField(fieldnum(BOM, bomQtySerie), true);

            this.enableDSField(fieldNum(BOM, BOMQtySerie), (!((isScalable && hasVersionCalc) || isPctEnabled) && !isStep));
            this.enableDSField(fieldnum(BOM, PmfPctEnable), (isVariable && !isCatchWeight && !isStep));
            this.enableDSField(fieldnum(BOM, PmfScalable), (isVariable && !isPctEnabled && !isCatchWeight && !isStep));
            this.enableDSField(fieldnum(BOM, PmfFormulaPct), (isVariable && isPctEnabled && !isCatchWeight));
            this.enableDSField(fieldnum(BOM, bomQty), (!isPctEnabled && !isCatchWeight && !isStep));
            this.enableDSField(fieldnum(BOM, Formula), true);
            this.enableDSField(fieldnum(BOM, BOMConsump), !isStep);
            this.enableDSField(fieldnum(BOM, PdsCWQty), !isStep && isCatchWeight);

            this.visibleDSField(fieldnum(BOM, PDSIngredientType), true);
            this.visibleDSField(fieldnum(BOM, PDSInheritCoProductShelfLife), true);
            this.visibleDSField(fieldnum(BOM, PDSInheritEndItemShelfLife),   true);
            this.visibleDSField(fieldnum(BOM, PDSInheritEndItemBatchAttrib), true);
            this.visibleDSField(fieldnum(BOM, PDSInheritCoProductBatchAttrib), true);
        }
        else
        {
            this.visibleDSField(fieldnum(BOM, PdsCWQty), false);

            this.visibleDSField(fieldnum(BOM, PDSIngredientType), false);
            this.visibleDSField(fieldnum(BOM, PDSInheritCoProductShelfLife), false);
            this.visibleDSField(fieldnum(BOM, PDSInheritEndItemShelfLife), false);
            this.visibleDSField(fieldnum(BOM, PDSInheritEndItemBatchAttrib), false);

            if (FeatureStateProvider::isFeatureEnabled(ReqItemSubstitutionForBOMInPlanningOptimizationFeature::instance()))
            {
                this.visibleDSField(fieldnum(BOM, PmfPlanGroupId), true);
                this.visibleDSField(fieldnum(BOM, PmfPlanGroupPriority), true);
            }
        }

        this.enableDSField(fieldnum(BOM, ScrapVar), !isCatchWeight);
        this.enableDSField(fieldnum(BOM, ScrapConst), !isCatchWeight);
        this.enableDSField(fieldnum(BOM, RoundUp), !isCatchWeight);
        this.enableDSField(fieldnum(BOM, RoundUpQty), !isCatchWeight && !isStep);

        if (this.isFormulaEnabled())
        {
            this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer));
            formDS.allowEdit(allowEdit);
        }

        if (_withReread)
        {
            this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer)).reread();
        }
        this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer)).refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies fields of form BOMTable of BOM data source.
    /// </summary>
    /// <param name="_fieldId">
    /// BOM data source field identifier.
    /// </param>
    public void fieldModified(FieldId _fieldId)
    {
        super(_fieldId);

        BOM bom = this.bom();

        switch (_fieldId)
        {
            case fieldNum(BOM, BOMConsump):
                if (this.isFormulaEnabled())
                {
                    if (bom.PmfPctEnable)
                    {
                        bom.PmfPctEnable = NoYes::No;
                        bom.bomQty       = 1;
                    }

                    bom.PmfScalable   = NoYes::No;
                    bom.PmfFormulaPct = 0;

                    this.updateDesign(false);
                }
                break;

            case fieldNum(BOM, PmfPctEnable):
                this.pctEnableModified(bom, bomVersion);
                this.updateDesign(false);
                break;

            case fieldNum(BOM, PmfScalable):
                this.scalableModified(bom, bomVersion);
                this.updateDesign(false);
                break;

            case fieldNum(BOM, PmfFormulaPct):
                this.formulaPctModified(bom, bomVersion);
                break;

            case fieldNum(BOM, BOMQty):
                if (this.isFormulaEnabled())
                {
                    this.bomQtyModified(bom);
                    this.modifiedBOMFormulaSize();
                }
                break;

            case fieldNum(BOM, UnitId):
                if (this.isFormulaEnabled())
                {
                    if (bom.PmfPctEnable)
                    {
                        this.formulaPctModified(bom, bomVersion);
                    }
                    else
                    {
                        this.updateFormulaSizeIfQtyDiffers(bom);
                    }
                }
                break;

            case fieldNum(BOM, PdsCWQty) :
                this.updateFormulaSizeIfQtyDiffers(bom);
                break;

            case fieldNum(BOM, WrkCtrConsumption) :
                if (this.isFormulaEnabled())
                {
                    this.updateDesign(false);
                }
                break;

            case fieldNum(BOM, ItemId):
                this.updateDesign(false);
                break;

            case fieldNum(BOM, Formula):
                if (bom.Formula == BOMFormula::Formula5)
                {
                    bom.PdsCWQty = 0;
                    bom.BOMQty = 0;
                    bom.PmfPctEnable = false;
                    bom.PmfFormulaPct = 0;
                    bom.PmfScalable = false;
                    bom.BOMConsump = BOMConsumpType::Constant;
                    bom.RoundUpQty = 0;
                }
                else
                {
                    PmfBOMStep::deleteByBomRecId(bom.RecId);
                    bom.BOMConsump = BOMConsumpType::Variable;
                }
                this.updateDesign(false);
                break;

            default:
                //break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormulaSizeIfQtyDiffers</Name>
				<Source><![CDATA[
    private void updateFormulaSizeIfQtyDiffers(BOM _bom)
    {
        if (_bom.orig().bomQty != _bom.bomQty)
        {
            this.modifiedBOMFormulaSize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedBOMFormulaSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the change of the formula size on the version
    /// </summary>
    public void modifiedBOMFormulaSize()
    {

        BOM bom = this.bom();

        this.pmfModifiedBOMFormulaSize(bom, bomVersion, this.parmFormDataSource());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFormulaApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates formula cost allocation for approval.
    /// </summary>
    /// <returns>
    /// Formula approved or not.
    /// </returns>
    public boolean validateFormulaApproval()
    {
        boolean ret = true;

        #define.NumOfDecimals(4)
        #define.Chars(7)
        #define.Separator1(1)
        #define.Separator2(0)

        if (this.isFormulaEnabled()
                && bomVersion.pmfTotalCostAlloc() > 100)
        {
            warning("@PRO1000"
                    + num2str(
                        decround(
                            bomVersion.pmfTotalCostAlloc(),
                            #NumOfDecimals),
                        #Chars,
                        #NumOfDecimals,
                        #Separator1,
                        #Separator2));

            ret = checkFailed("@PRO2026");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMConsistOf_BOM construct()
    {
        return new PmfFormCtrl_BOMConsistOf_BOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_BOMConsistOf_BOM newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_BOMConsistOf_BOM::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>