<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLinePurchLineImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>PurchLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(PurchLine))]
public class TaxModelDocLinePurchLineImpl_IN extends TaxModelDocLineWithholdImpl_IN
{
    PurchTable purchTable;
    PurchLine  purchLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value in accounting currency for the document line.
    /// </summary>
    /// <returns>
    /// The assessable value in accounting currency.
    /// </returns>
    public AmountCur getAssessableValueAccountingCurrency()
    {
        PurchLine_IN purchLine_IN = PurchLine_IN::findByPurchLine(purchLine.RecId);
        return purchLine_IN.AssessableValueAccountingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Direction
    /// </summary>
    /// <returns>
    /// The <c>Direction_IN</c>
    /// </returns>
    public Direction_IN getCustomsDirection()
    {
        return Direction_IN::Import;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount.
    /// </summary>
    /// <returns>The total discount amount</returns>
    public Amount getDiscAmount()
    {
        Amount totalDisc;

        PriceUnit priceUnit = purchLine.PriceUnit == 0 ? 1 : purchLine.PriceUnit;

        Amount netAmount = (purchLine.PurchQty * ((purchLine.PurchPrice - purchLine.discAmount()) / priceUnit)) * (100 - purchLine.discPercent()) / 100;

        totalDisc = netAmount * purchTable.DiscPercent / 100 + (purchLine.PurchQty * purchLine.PurchPrice / priceUnit) - netAmount;

        return totalDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        Qty ret;

        if (purchLine.RemainPurchFinancial * purchLine.RemainPurchPhysical < 0)
        {
            ret = purchLine.RemainPurchFinancial;
        }
        else
        {
            ret = purchLine.RemainPurchPhysical + purchLine.RemainPurchFinancial;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::IncomingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        TransDate       taxCalculationDate;

        if (_taxType == TaxType_IN::Excise)
        {
            taxCalculationDate = DateTimeUtil::date(purchTable.CreatedDateTime);
        }
        else
        {
            taxCalculationDate = purchLine.taxDate(DateTimeUtil::date(purchTable.CreatedDateTime));
        }

        return taxCalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return purchTable.createDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTable</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c>
    /// </returns>
    public VendTable getVendTable()
    {
        return purchTable.vendTable_InvoiceAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        purchLine = _documentLineMap;
        purchTable = purchLine.purchTable();
        super(_documentLineMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a foreign transaction or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a foregin foreign transaction; otherwise, false.
    /// </returns>
    public NoYes isForeignTransaction()
    {
        return purchLine.purchTable().purchTable_W().CustomsImportOrder_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// true if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return (!purchLine.isInvoiced());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type.
    /// </summary>
    /// <returns>
    /// The transaction tax module type.
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::PurchInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name = "_type">The transaction tax information type.</param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from transaction line delivery address
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        if (this.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getReferenceTaxModelDocLine().getTaxLogisticsPostalAddress(_type);
        }
        else if (purchLine.InterCompanyInventTransId)
        {
            InventDim inventDim = InventDim::find(documentLineMap.InventDimId);

            return LogisticsPostalAddress::findByLocation(TaxLogisticsLocationControllerHelper_IN::getDefaultLogisticsLocation(
                inventDim.InventLocationId, inventDim.InventSiteId));
        }
        else
        {
            return LogisticsPostalAddress::findRecId(documentLineMap.DeliveryLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSEZParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SEZ property of party.
    /// </summary>
    /// <returns>
    /// True, if the party is SEZ, else false 
    /// </returns>
    public NoYes getIsSEZParty()
    {
        return LogisticsLocationExt::find(this.getPartyLogisticsPostalAddress().Location).TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::SEZ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDeemedExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Deemed export property of party.
    /// </summary>
    /// <returns>
    /// yes if it is Deemed export; otherwise, no.
    /// </returns>
    public NoYes getIsDeemedExport()
    {
        return LogisticsLocationExt::find(this.getPartyLogisticsPostalAddress().Location).isDeemedExportType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return purchTable.createDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return purchTable.createDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportCalcTaxInAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether support calculate tax in accounting currency for this transaction line.
    /// </summary>
    /// <returns>
    /// True if support, otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean isSupportCalcTaxInAccountingCurrency()
    {
        return this.isForeignTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssessableValueAccountingCurrencyAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether user can set assessable value on UI for this transaction line.
    /// </summary>
    /// <returns>
    /// True if can, otherwise false;
    /// </returns>
    [Hookable(false)]
    internal boolean isAssessableValueAccountingCurrencyAvailable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>