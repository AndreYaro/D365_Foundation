<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvEmployeeBarcodeCoverPage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TrvEmployeeBarcodeCoverPage</c> class is used for generating the barcode cover page for a
///    worker.
/// </summary>
/// <remarks>
///    This is to support scenarios wherein the worker can fax in receipts before the expense report has
///    been created.This class implements the <c>BarcodeCoverPage</c> abstract class.
/// </remarks>
class TrvEmployeeBarcodeCoverPage extends BarcodeCoverPage
{
    #TrvReceiptsBarcodeCoverPage
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalBarcodeStrings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the additional strings that will be barcoded on the barcode cover page.
    /// </summary>
    /// <returns>
    /// An array of strings that will be barcoded on the barcode cover page.
    /// </returns>
    /// <remarks>
    /// Depending on the setup in expense parameters form, the <c>userId</c> value will be an additional
    /// barcode on the barcode cover page.
    /// </remarks>
    Array additionalBarcodeStrings()
    {
        Array           barcodes = new Array(Types::String);
        HcmWorker       hcmWorker;
        SysUserId       userId;

        if (TrvParameters::find().IncludeUserIDInBarcode)
        {
            hcmWorker = entityRecord;
            userId = DirPersonUserEx::worker2UserId(hcmWorker.RecId);
            if (userId)
            {
                barcodes.value(1, userId);
            }
        }

        return barcodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the barcode setup that will be used when generating the barcode for the expense report.
    /// </summary>
    /// <returns>
    ///    The barcode setup that will be used when generating the barcode for the expense report.
    /// </returns>
    /// <remarks>
    ///    The barcode setup has information about the bar code type, font, and size.
    /// </remarks>
    BarcodeSetup barcodeSetup()
    {
        return BarcodeSetup::find(TrvParameters::find().BarCodeSetupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>barCodeString</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a unique string that identifies a worker that will be barcoded on the barcode cover page.
    /// </summary>
    /// <returns>
    ///    The unique string that identifies the worker.
    /// </returns>
    /// <remarks>
    ///    The barcode string contains the personnel number.
    /// </remarks>
    BarCodeString barCodeString()
    {
        str         barcode;
        HcmWorker   hcmWorker;

        hcmWorker = entityRecord;
        if (hcmWorker)
        {
            barcode = hcmWorker.PersonnelNumber;
        }

        return barcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instructions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the instructions to be displayed on the barcode cover page.
    /// </summary>
    /// <returns>
    ///    The instructions to be displayed on the barcode cover page.
    /// </returns>
    /// <remarks>
    ///    The instructions are in the language of the user, and can be set up in the expense parameters setup
    ///    form.
    /// </remarks>
    BarcodeCoverPageInstructions instructions()
    {
        // get the instructions in the user's language
        TrvParameters parameters = TrvParameters::find();
        return TrvParametersTableHelper::userInstructions(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(HcmWorker _hcmWorker)
    {
        entityRecord = _hcmWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the title for the barcode cover page.
    /// </summary>
    /// <returns>
    ///    The title for the barcode cover page.
    /// </returns>
    BarcodeCoverPageTitle title()
    {
        return "@SYS132170";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TrvEmployeeBarcodeCoverPage construct(HcmWorker _hcmWorker)
    {
        return new TrvEmployeeBarcodeCoverPage(_hcmWorker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityFromBarcodeString</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>HcmWorker</c> record from the decoded barcode string.
    /// </summary>
    /// <param name="_barcodeStr">
    ///    The string that is decoded from the barcode on the barcode cover page.
    /// </param>
    /// <returns>
    ///    The worker that the barcode string identifies; otherwise, null
    /// </returns>
    /// <remarks>
    ///    The imported receipts will get attached to the record of this worker.
    /// </remarks>
    public static HcmWorker getEntityFromBarcodeString(str _barcodeStr)
    {
        HcmWorker               hcmWorker;
        HcmPersonnelNumberId    personnelNumber;
        boolean                 convertReturnedContentToInt = false;

        [personnelNumber] = str2con(_barcodeStr, #BarcodeStringSeparator, convertReturnedContentToInt);

        hcmWorker = HcmWorker::findByPersonnelNumber(personnelNumber);

        return hcmWorker ? hcmWorker : null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>