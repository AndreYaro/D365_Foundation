<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTax1099UpdateMultipleVendorsProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendTax1099UpdateMultipleVendorsProcessor</c> class handles updating 1099 box and transactions for multiple vendors, 
/// called from <c>VendTax1099UpdateMultipleVendorsController</c> class.
/// </summary>
internal final class VendTax1099UpdateMultipleVendorsProcessor
{
    // Telemetry Custom Properties
    private const str UpdateVendorTaxBox = 'UpdateVendorTaxBox';
    private const str NewTax1099Box = 'NewTax1099Box';
    private const str UpdateVendorTransactions = 'UpdateVendorTransactions';
    private const str RecalculateAmounts = 'RecalculateAmounts';
    private const str SetAll1099 = 'SetAll1099';
    private const str ExcludeRecIdDueToTax1099ReportsDisabled = 'ExcludeRecIdDueToTax1099ReportsDisabled';
    private const str ExcludeRecIdDueToTax1099FieldsNotSet = 'ExcludeRecIdDueToTax1099FieldsNotSet';
    private const str ExcludeRecIdTax1099TypeForSelection = 'ExcludeRecIdTax1099TypeForSelection';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(VendTax1099UpdateMultipleVendorsContract _contract)
    {
        int countOfVendorsProcessed;

        Query query = _contract.getQuery();

        using (SysInstrumentationActivityContext activityContext = this.logRunActivityContext(_contract, query))
        {
            QueryRun queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(VendTable)))
                {
                    VendTable vendTable = queryRun.get(tableNum(VendTable));

                    if (vendTable.Tax1099Fields == 0)
                    {
                        this.logExclusionInfo(
                            vendTable,
                            strFmt("@AccountsPayable:ExcludeVendorDueToTax1099FieldsNotSet", vendTable.AccountNum),
                            ExcludeRecIdDueToTax1099FieldsNotSet,
                            activityContext);
                    }
                    else if (this.shouldExcludeTax1099TypeForSelection(vendTable.Tax1099Fields))
                    {
                        this.logExclusionInfo(
                            vendTable,
                            strFmt("@AccountsPayable:ExcludeVendorDueToTax1099FieldsNotSupported", vendTable.AccountNum, Tax1099Fields::find(vendTable.Tax1099Fields).Tax1099Box),
                            ExcludeRecIdTax1099TypeForSelection,
                            activityContext);
                    }
                    else
                    {
                        if (VendTax1099UpdateSingleVendor::construct(vendTable, _contract).processUpdate())
                        {
                            countOfVendorsProcessed ++;
                        }
                    }
                }
            }
        }

        info(strFmt("@AccountsPayable:Tax1099UpdateForMultipleVendorsProcessed", countOfVendorsProcessed));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExcludeTax1099TypeForSelection</Name>
				<Source><![CDATA[
    private boolean shouldExcludeTax1099TypeForSelection(RecId _boxFor1099RecId)
    {
        boolean shouldExcludeSelection;
        Tax1099Type tax1099TypeValue = Tax1099Fields::find(_boxFor1099RecId).Tax1099Type;

        if (tax1099TypeValue == Tax1099Type::F1099G || tax1099TypeValue == Tax1099Type::F1099S)
        {
            shouldExcludeSelection = true;
        }

        return shouldExcludeSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExclusionInfo</Name>
				<Source><![CDATA[
    private void logExclusionInfo(VendTable _vendTable, str _infoMessageFormat, str _activityPropertyName, SysInstrumentationActivityContext _activityContext)
    {
        info(_infoMessageFormat);
        _activityContext.addCustomProperty(_activityPropertyName, any2Str(_vendTable.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRunActivityContext</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext logRunActivityContext(VendTax1099UpdateMultipleVendorsContract _contract, Query _query)
    {
        const str InstrumentationNamespace = classStr(VendTax1099UpdateMultipleVendorsProcessor);
        
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
        SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContext(InstrumentationNamespace, methodStr(VendTax1099UpdateMultipleVendorsProcessor, run));
       
        int rowCount = QueryRun::getQueryRowCount(_query, maxInt());

        activityContext.addCustomProperty(extendedTypeStr(NumberOfRecords), int2Str(rowCount));
        activityContext.addCustomProperty(extendedTypeStr(FromDate), date2StrXpp(_contract.parmFromDate()));
        activityContext.addCustomProperty(extendedTypeStr(ToDate), date2StrXpp(_contract.parmToDate()));
        activityContext.addCustomProperty(UpdateVendorTaxBox, any2Str(_contract.parmDoUpdateVendorBox()));
        activityContext.addCustomProperty(NewTax1099Box, _contract.parmNewTax1099Box());
        activityContext.addCustomProperty(UpdateVendorTransactions, any2Str(_contract.parmDoUpdateTransaction1099()));
        activityContext.addCustomProperty(RecalculateAmounts, any2Str(_contract.parmDoRecalcAmounts()));
        activityContext.addCustomProperty(SetAll1099, any2Str(_contract.parmDoSetAll1099()));
        
        return activityContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendTax1099UpdateMultipleVendorsProcessor construct()
    {
        return new VendTax1099UpdateMultipleVendorsProcessor();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>