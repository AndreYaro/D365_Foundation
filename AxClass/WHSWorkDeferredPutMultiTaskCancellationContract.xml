<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkDeferredPutMultiTaskCancellationContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The contract class used when cancelling deferred puts.
/// </summary>
[DataContract]
internal class WHSWorkDeferredPutMultiTaskCancellationContract implements SysOperationValidatable
{
    private WHSUserId   newWorkUserId;
    private NoYes       keepExistingWorkUserId;
    private List        workDeferredPutProcessingTaskList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWorkDeferredPutProcessingTaskList</Name>
				<Source><![CDATA[
    [DataMember, AifCollectionType('_workDeferredPutProcessingTaskList', Types::Int64), SysOperationControlVisibility(false), Hookable(false)]
    internal List parmWorkDeferredPutProcessingTaskList(List _workDeferredPutProcessingTaskList = workDeferredPutProcessingTaskList)
    {
        workDeferredPutProcessingTaskList = _workDeferredPutProcessingTaskList;
        return workDeferredPutProcessingTaskList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewWorkUserId</Name>
				<Source><![CDATA[
    [DataMember,
     SysOperationLabel(literalStr("@WAX:WHSWorkDeferredPutCancellationNewUser")),
     SysOperationHelpText(literalStr("@WAX:WHSWorkDeferredPutCancellationNewUserHelpText")),
     Hookable(false)
    ]
    internal WHSUserId parmNewWorkUserId(WHSUserId _newWorkUserId = newWorkUserId)
    {
        newWorkUserId = _newWorkUserId;
        return newWorkUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userAllowedWarehouseSet</Name>
				<Source><![CDATA[
    private Set userAllowedWarehouseSet()
    {
        Set set = new Set(Types::String);
        WHSWorkUserWarehouse workUserWarehouse;

        while select workUserWarehouse
                where workUserWarehouse.UserId == this.parmNewWorkUserId()
        {
            set.add(workUserWarehouse.InventLocationId);
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the contract.
    /// </summary>
    /// <returns>true if validation succeeded; Otherwise, false.</returns>
    public boolean validate()
    {
        if (this.parmNewWorkUserId() && this.parmKeepExistingWorkUserId())
        {
            return checkFailed(strFmt("@WAX:WHSWorkDeferredPutCancellationValidationKeepUservsNewUserError", this.parmNewWorkUserId()));
        }

        if (this.parmNewWorkUserId() 
            && this.parmWorkDeferredPutProcessingTaskList()
            && !this.validateWorkWarehouseVsUsersAllowedWarehouses())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkWarehouseVsUsersAllowedWarehouses</Name>
				<Source><![CDATA[
    private boolean validateWorkWarehouseVsUsersAllowedWarehouses()
    {
        Set userAllowedWarehouseSet = this.userAllowedWarehouseSet();

        ListEnumerator ls = this.parmWorkDeferredPutProcessingTaskList().getEnumerator();
        
        while (ls.moveNext())
        {
            WHSWorkDeferredPutProcessingTask task = WHSWorkDeferredPutProcessingTask::findByRecId(ls.current());
            
            if (!userAllowedWarehouseSet.in(task.WorkInventLocationId))
            {
                return checkFailed(strFmt("@WAX:WHSWorkDeferredPutCancellationValidationUserIsNotassignedToWorkWarehouseError", this.parmNewWorkUserId(), task.WorkId, task.WorkInventLocationId));
            }
        }

        return true;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeepExistingWorkUserId</Name>
				<Source><![CDATA[
    [DataMember,
     SysOperationLabel(literalStr("@WAX:WHSWorkDeferredPutCancellationKeepWorkLockedByUser")),
     SysOperationHelpText(literalStr("@WAX:WHSWorkDeferredPutCancellationKeepWorkLockedByUserHelpText")),
     SysOperationDisplayOrder('1'),
     Hookable(false)]
    internal NoYes parmKeepExistingWorkUserId(NoYes _keepExistingWorkUserId = keepExistingWorkUserId)
    {
        keepExistingWorkUserId = _keepExistingWorkUserId;
        return keepExistingWorkUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkDeferredPutMultiTaskCancellationContract construct()
    {
        return new WHSWorkDeferredPutMultiTaskCancellationContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>