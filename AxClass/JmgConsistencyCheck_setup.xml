<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgConsistencyCheck_setup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgConsistencyCheck_setup</c> class performs consistency checks for setup tables in the shop
///    floor control module.
/// </summary>
public class JmgConsistencyCheck_setup extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the configuration key, which should be enabled in order for the consistency check to be
    ///    run, which is Jmg.
    /// </summary>
    /// <returns>
    ///    The ID of the configuration key.
    /// </returns>
    configurationKeyId configurationKey()
    {
        return configurationkeynum(Jmg);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an integer representing the order of which the consistency check should be executed.
    /// </summary>
    /// <returns>
    ///    Integer : The order of execution
    /// </returns>
    Integer executionOrder()
    {
        return 10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    /// <remarks>
    ///       This method is a consistency check for the following tables:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             <c>JmgEmployee  </c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>JmgIpcCategory </c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>JmgIpcActivity </c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>JmgParameters </c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>JmgProfileDay </c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>JmgProfileGroup </c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>JmgProfileRelation </c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>JmgProfileTable </c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>JmgProfileSpec </c>
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>JmgTimeCalcParmeters</c>
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public void run()
    {
        // JmgEmployee
        this.kernelCheckTable(tablenum(JmgEmployee));

        // JmgFlexGroup
        this.kernelCheckTable(tablenum(JmgFlexGroup));

        // JmgGroupApprove
        this.kernelCheckTable(tablenum(JmgGroupApprove));

        // JmgGroupCalc
        this.kernelCheckTable(tablenum(JmgGroupCalc));

        // JmgIllegalEventCodeCombination
        this.kernelCheckTable(tablenum(JmgIllegalEventCodeCombination));

        // JmgIpcCategory
        this.kernelCheckTable(tablenum(JmgIpcCategory));

        // JmgIpcActivity
        this.kernelCheckTable(tablenum(JmgIpcActivity));

        // JmgParameters
        this.kernelCheckTable(tablenum(JmgParameters));

        // JmgProfileDay
        this.kernelCheckTable(tablenum(JmgProfileDay));

        // JmgProfileGroup
        this.kernelCheckTable(tablenum(JmgProfileGroup));

        // JmgProfileRelation
        this.kernelCheckTable(tablenum(JmgProfileRelation));

        // JmgProfileTable
        this.kernelCheckTable(tablenum(JmgProfileTable));

        // JmgProfileSpec
        this.kernelCheckTable(tablenum(JmgProfileSpec));

        // JmgRegistrationSetup
        this.kernelCheckTable(tablenum(JmgRegistrationSetup));

        // JmgScheduledLoan
        this.kernelCheckTable(tablenum(JmgSpecialDayTable));

        // JmgTimeCalcParmeters
        this.kernelCheckTable(tablenum(JmgTimeCalcParmeters));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the class ID of the parent class in the consistency check hierarchy, which is
    ///    <c>JmgConsistencyCheck</c>
    /// </summary>
    /// <returns>
    ///    The class ID of the parent class in the consistency check hierarchy.
    /// </returns>
    classId treeParentClassId()
    {
        return classnum(JmgConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the <c>JobId</c> field of the <c>JmgIpcActivity</c> table if that is the field specified.
    /// </summary>
    /// <param name="_common">
    ///     The specified record being validated.
    /// </param>
    /// <param name="_dictField">
    ///     The specified field being validated.
    /// </param>
    protected void validateField(Common _common, DictField _dictField)
    {
        JmgIpcActivity jmgIpcActivity;

        if (_common.TableId == tableNum(JmgIpcActivity) &&
            _dictField.id()                             &&
            _dictField.id() == fieldNum(JmgIpcActivity, JobId))
        {
            jmgIpcActivity = _common;
            if (jmgIpcActivity.SignIn == NoYes::No ||
                jmgIpcActivity.Type   == JmgStampTypeEnum::Error ||
                jmgIpcActivity.SignInOut == JmgSignInOut::SysIndirect)
            {
                return;
            }
        }
        super(_common, _dictField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS2186";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the help text associated with this consistency check.
    /// </summary>
    /// <returns>
    ///    The help text associated with this consistency check.
    /// </returns>
    static HelpTxt helpText()
    {
        return "@SYS40052";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SysConsistencyCheckJob      consistencyCheckJob;

        consistencyCheckJob = new SysConsistencyCheckJob(classnum(JmgConsistencyCheck));

        if (! consistencyCheckJob.prompt())
        {
            return;
        }
        consistencyCheckJob.runOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>