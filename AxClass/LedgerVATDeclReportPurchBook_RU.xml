<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVATDeclReportPurchBook_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerVATDeclReportPurchBook_RU extends LedgerVATDeclReportSalesPurchBook_RU
{
    boolean isOldBook;
    AmountMST totalTaxAmount;
    QueryRun purchBookQueryRun;
    SalesPurchBookRecId_RU bookRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFactureConRevision</Name>
				<Source><![CDATA[
    protected container getFactureConRevision(PurchBookTrans_RU _purchBookTrans)
    {
        FactureJour_RU          factureJour;
        container               result;
        RevisionNum_RU          revisionNum;
        FactureDate_External_RU revisionDate;

        void revisionFactureDate()
        {
            if (_purchBookTrans.FactureJour_RU)
            {
                factureJour = FactureJour_RU::findRecId(_purchBookTrans.FactureJour_RU);
            }
            else
            {
                factureJour = FactureJour_RU::find(_purchBookTrans.FactureId, _purchBookTrans.factureModule());
            }

            revisionNum = _purchBookTrans.RevisionSeqNumber;
            revisionDate = this.getRevisionFactureDate(
                factureJour,
                _purchBookTrans.RevisionSeqNumber);
        }

        if (_purchBookTrans.CorrectedFactureExternalId)
        {
            switch (_purchBookTrans.CorrectionType)
            {
                case FactureCorrectionType_RU::Revision:
                    revisionNum = _purchBookTrans.RevisionSeqNumber;
                    revisionDate = _purchBookTrans.FactureDate_External;
                    break;

                default:
                if (_purchBookTrans.RevisionSeqNumber > 0)
                    {
                        revisionFactureDate();
                    }
                    break;
            }
        }
        else
        {
            if (_purchBookTrans.RevisionSeqNumber > 0)
            {
                revisionFactureDate();
            }
        }

        if (revisionNum > 0)
        {
            result = [revisionNum, revisionDate];

        }
        else
        {
            result = [0, datenull()];
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevisionFactureDate</Name>
				<Source><![CDATA[
    protected FactureDate_External_RU getRevisionFactureDate(FactureJour_RU _factureJour_RU, RevisionNum_RU _revisionNum)
    {
        FactureJour_RU                  factureJour;

        select firstonly FactureDate_External from factureJour
        where  factureJour.RefRevisedFacture    == _factureJour_RU.RecId
            && factureJour.RevisionNum          == _revisionNum;

        return factureJour.FactureDate_External;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun initQueryRun()
    {
        QueryRun queryRun = new QueryRun(PurchBookTable_RU::createQuery(
            bookRecId,
            purchBookQueryRun ? purchBookQueryRun.query() : PurchBookTable_RU::createDefaultQuery(0, null, fromDate, toDate),
            fromDate,
            toDate,
            true));

        queryRun = PurchBookTable_RU::initQueryRunOnTmp(queryRun, groupCorrect);
        PurchBookTable_RU::updateQuery(queryRun, groupByFactures);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
    protected void insertHeader()
    {
        header.VATAmount = totalTaxAmount;
        header.ReportingYear = reportingYear;
        header.ReportingPeriodNum = reportingPeriodNum;

        header.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLine</Name>
				<Source><![CDATA[
    protected TmpLedgerVATDeclaratoinLine_RU insertLine(
        PurchBookTrans_RU    _purchBookTrans,
        int                  _row,
        SalesBookTrans_RU    _salesBookTrans)
    {
        container   factureDateNumCon, paymDateNumCon;
        INN_RU      inn;
        KPPU_RU     kpp;
        Name        name;
        container   conINNKPP;
        str         innKpp;
        boolean     isStandardCurrency;
        FactureJour_RU  factureJour;
        DirPartyRecId   party;

        if (_purchBookTrans.FactureJour_RU)
        {
            factureJour = FactureJour_RU::findRecId(_purchBookTrans.FactureJour_RU);
        }
        else
        {
            factureJour = FactureJour_RU::find(_purchBookTrans.FactureId, _purchBookTrans.factureModule());
        }

        isStandardCurrency = _purchBookTrans.CurrencyCode == CompanyInfoHelper::standardCurrency() || factureJour.PrintInMST;

        line.clear();
        line.LineNumber = _row;

        factureDateNumCon = this.getFactureCon(_purchBookTrans);
        line.FactureNum = conpeek(factureDateNumCon, 1);
        line.FactureDate = any2Date(conpeek(factureDateNumCon, 2));

        if (_purchBookTrans.CorrectedFactureExternalId)
        {
            switch (_purchBookTrans.CorrectionType)
            {
                case FactureCorrectionType_RU::Revision:
                switch (_purchBookTrans.RevisionType)
                    {
                        case FactureRevisionType_RU::RevisionOriginal:
                            factureDateNumCon = this.getFactureConRevision(_purchBookTrans);
                            line.FactureCorrRevision = conpeek(factureDateNumCon, 1);
                            line.FactureCorrDate = any2Date(conpeek(factureDateNumCon, 2));
                            break;

                        default:
                            factureDateNumCon = this.getFactureConCorrRevision(_purchBookTrans);
                            line.FactureCorrRevision = conpeek(factureDateNumCon, 1);
                            line.FactureCorrDate = any2Date(conpeek(factureDateNumCon, 2));

                            factureDateNumCon = this.getFactureConCorr(_purchBookTrans);
                            line.CorrFactureNum = conpeek(factureDateNumCon, 1);
                            line.CorrFactureDate = any2Date(conpeek(factureDateNumCon, 2));

                            factureDateNumCon = this.getFactureConRevision(_purchBookTrans);
                            line.CorrFactureCorrRevision = conpeek(factureDateNumCon, 1);
                            line.CorrFactureCorrDate = any2Date(conpeek(factureDateNumCon, 2));
                            break;
                    }
                    break;

                default:
                    factureDateNumCon = this.getFactureConRevisionCorr(_purchBookTrans);
                    line.FactureCorrRevision = conpeek(factureDateNumCon, 1);
                    line.FactureCorrDate = any2Date(conpeek(factureDateNumCon, 2));

                    factureDateNumCon = this.getFactureConCorr(_purchBookTrans);
                    line.CorrFactureNum = conpeek(factureDateNumCon, 1);
                    line.CorrFactureDate = any2Date(conpeek(factureDateNumCon, 2));

                    if (_purchBookTrans.RevisionSeqNumber > 0)
                    {
                        factureDateNumCon = this.getFactureConRevision(_purchBookTrans);
                        line.CorrFactureCorrRevision = conpeek(factureDateNumCon, 1);
                        line.CorrFactureCorrDate = any2Date(conpeek(factureDateNumCon, 2));
                    }

                    break;
            }
        }
        else
        {
            if (_purchBookTrans.RevisionSeqNumber > 0)
            {
                factureDateNumCon = this.getFactureConRevision(_purchBookTrans);
                line.FactureCorrRevision = conpeek(factureDateNumCon, 1);
                line.FactureCorrDate = any2Date(conpeek(factureDateNumCon, 2));
            }
        }

        boolean facturePrepaymentTaxCorrection = factureJour.PrepaymTaxCorrection == NoYes::Yes;

        if (_purchBookTrans.TransType != SalesPurchBookTransType_RU::Prepayment &&
            _purchBookTrans.TransType != SalesPurchBookTransType_RU::PrepaymentStorno &&
            !facturePrepaymentTaxCorrection)
        {
            line.DeliveryDate = _purchBookTrans.DeliveryDate;

            if (!_purchBookTrans.CorrectedFactureExternalId)
            {
                line.CountryGTD = _purchBookTrans.CountryGTD;
            }

            header.NotOnlyPrepaymentTrans = true;
        }

        if (isStandardCurrency)
        {
            line.CurrencyCode   = CompanyInfoHelper::standardCurrency();
        }
        else
        {
            line.CurrencyCode   = _purchBookTrans.CurrencyCode;
        }
        line.CurrencyCodeOKV = this.currencyCode(_purchBookTrans.CurrencyCode);
        line.AmountInclVAT    = _purchBookTrans.AmountInclVAT;
        line.AmountCurInclVAT = _purchBookTrans.AmountCurInclVAT;
        line.TaxAmountVAT = (PurchBookTable_RU::isCreditNote(_purchBookTrans, isOldBook) ?
            _salesBookTrans.TaxAmountVAT20 : _purchBookTrans.TaxAmountVAT20) 
            + _purchBookTrans.TaxAmountVAT10;
        line.OperationTypeCodes =_purchBookTrans.OperationTypeCodes;

        paymDateNumCon = this.paymNumDateCon(_purchBookTrans);
        line.PaymDocumentNum = conpeek(paymDateNumCon, 1);
        line.PaymentDate = any2date(conpeek(paymDateNumCon, 2));

        [name, inn, kpp] = BookTransCalc_RU::getCompanyData(FactureJour_RU::findRecId(_purchBookTrans.FactureJour_RU));

        if (kpp)
        {
            line.CompanyINN = inn;
            line.CompanyKPP = kpp;
        }
        else
        {
            line.PersonINN = inn;
        }

        if (_purchBookTrans.TransType == SalesPurchBookTransType_RU::PrepaymentStorno
            || _purchBookTrans.TransType == SalesPurchBookTransType_RU::CreditNote
            || facturePrepaymentTaxCorrection)
        {
            line.SellerBuyerName = name;
        }
        else
        {
            line.SellerBuyerName = _purchBookTrans.AccountName;
        }

        conINNKPP = str2con(_purchBookTrans.SalesPurchBookDataMap_RU::partyINNKPP(_purchBookTrans.FactureDate_External), '/');
        line.SellerBuyerINN = conLen(conINNKPP) >= 1 ? strFmt("@SYS82282", conPeek(conINNKPP, 1)) : '';
        line.SellerBuyerKPP = conLen(conINNKPP) >= 2 ? strFmt("@SYS82282", conPeek(conINNKPP, 2)) : '';

        if (_purchBookTrans.CommissionAgent)
        {
            [name, innKpp, party] = _purchBookTrans.SalesPurchBookDataMap_RU::commissionAgentData(_purchBookTrans.FactureDate_External);
            conINNKPP = str2con(innKpp, '/');

            if (conLen(conINNKPP) >= 2)
            {
                line.AgentCompanyINN = conPeek(conINNKPP, 1);
                line.AgentCompanyKPP = conPeek(conINNKPP, 2);
            }
            else
            {
                line.AgentPersonINN = conPeek(conINNKPP, 1);
            }

            line.AgentName = name;
            line.AgentParty = party;
        }

        [line.PurchBookTable_RU, line.PurchBookLineNum] = this.getPurchBookTableRecIdAndLineNum(_purchBookTrans);

        line.insert();

        return line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymNumDateCon</Name>
				<Source><![CDATA[
    protected container paymNumDateCon(PurchBookTrans_RU _purchBookTrans)
    {
        container ret = ['', datenull()];
        FactureJour_RU factureJour;

        if (_purchBookTrans.TransType == SalesPurchBookTransType_RU::TaxCorrection)
        {
            factureJour = FactureJour_RU::find(_purchBookTrans.FactureId, _purchBookTrans.factureModule());

            if (factureJour.FactureType == FactureType_RU::TaxCorrection
                && _purchBookTrans.PaymDocumentNum
                && _purchBookTrans.PaymentDate
                && (factureJour.VATTaxAgent || factureJour.PrepaymTaxCorrection))
            {
                ret = [_purchBookTrans.PaymDocumentNum, _purchBookTrans.PaymentDate];
            }
        }
        else if (_purchBookTrans.TransType == SalesPurchBookTransType_RU::PrepaymentStorno)
        {
            ret = [_purchBookTrans.PaymDocumentNum, _purchBookTrans.PaymentDate];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    #VATTransitionPeriod_RU
    protected void prepareData()
    {
        PurchBookTrans_RU purchBookTrans;
        SalesBookTrans_RU salesBookTrans;
        int cx;

        isOldBook = toDate < #BookCorrectionDate ? true : false;

        QueryRun queryRun = this.initQueryRun();

        if (queryRun)
        {
            while (queryRun.next())
            {
                purchBookTrans = queryRun.get(tablenum(PurchBookTrans_RU));

                cx++;

                salesBookTrans = PurchBookTable_RU::purchBookTrans2SalesBookTrans(purchBookTrans, isOldBook);

                line = this.insertLine(purchBookTrans, cx, salesBookTrans);
                this.updateTotals(line);
            }
        }

        this.insertHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContract</Name>
				<Source><![CDATA[
    public void setContract(container _contractPack)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();

        super(_contractPack);

        contract.unpack(_contractPack);

        if (isCalledFromXMLExcelReport && contract.parmSalesPurchBookQueryRun() != conNull())
        {
            purchBookQueryRun = new queryRun(contract.parmSalesPurchBookQueryRun());
        }

        bookRecId = contract.parmBookRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    protected void updateTotals(TmpLedgerVATDeclaratoinLine_RU _line)
    {
        totalTaxAmount += _line.TaxAmountVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerVATDeclReportPurchBook_RU construct()
    {
        return new LedgerVATDeclReportPurchBook_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchBookTableRecIdAndLineNum</Name>
				<Source><![CDATA[
    private container getPurchBookTableRecIdAndLineNum(PurchBookTrans_RU _tmpPurchBookTrans)
    {
        PurchBookTrans_RU purchBookTrans;

        select firstonly PurchBookTable_RU, LineNum
            from purchBookTrans
            where purchBookTrans.FactureExternalId == _tmpPurchBookTrans.FactureExternalId
                && purchBookTrans.FactureDate_External == _tmpPurchBookTrans.FactureDate_External
                && purchBookTrans.FactureJour_RU == _tmpPurchBookTrans.FactureJour_RU
                && purchBookTrans.FactureId == _tmpPurchBookTrans.FactureId
                && purchBookTrans.Annulment == _tmpPurchBookTrans.Annulment
                && purchBookTrans.RevisionSeqNumber == _tmpPurchBookTrans.RevisionSeqNumber;

        return [purchBookTrans.PurchBookTable_RU, purchBookTrans.LineNum];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>