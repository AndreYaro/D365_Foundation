<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayPickPack</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to handle picking/packing.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::PickPack)]
class WhsWorkExecuteDisplayPickPack extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildGetWorkId</Name>
				<Source><![CDATA[
    container buildGetWorkId(container _con, str _extraText = '')
    {
        container           ret = _con;

        if (!pass.exists(#InProcess))
        {
            ret += [this.buildControl(#RFLabel, 'ScanWorkId', 'Scan a Work Id', 1, '', #WHSRFUndefinedDataType, '', 0)];
        }
        else
        {
            ret += [this.buildControl(#RFLabel, 'InProgress', strFmt("@WAX1251", pass.lookup(#Counter)), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        ret += [this.buildControl(#RFText, #WorkId, "@WAX273", 1, '', extendedTypeNum(WHSWorkId), '', 0)];
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPassBeforeNextWork</Name>
				<Source><![CDATA[
    private void clearPassBeforeNextWork()
    {
        pass.remove(#LicensePlateId);
        pass.remove(#ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        Set                             excludeLocationId = new Set(Types::String);
        WMSLocationId                   newLocationId;
        WhsWorkExecute                  workExecute = WhsWorkExecute::construct();
        WHSWorkExecuteDisplay           workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        container                       ret = conNull();
        container                       con = _con;
        container                       tmpFieldValues;
        container                       tmpCon;
        boolean                         complete;
        boolean                         addCancel = true;
        int                             hasError = 0;
        Map                             fieldValues;
        Map                             globalPass;
        boolean                         recall;
        container                       tmpPass;
        WHSWorkLine                     tmpWorkLine;
        boolean                         cycleCountDisplayUpdated;
        WHSRFMenuItemTable              menuItemTable;
        str                             errorStr = '';

        globalPass = pass;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));
        pass = this.combineMaps(globalPass, pass);

        hasError = this.hasError(_con);

        if (pass.exists(#MenuItem))
        {
            menuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));
        }

        if (_buttonClicked == #RFDone)
        {
            step = #stepMax;
        }
        else if (_buttonClicked == #RFOverride)       // Override
        {
            step = #OverrideStep1;
        }
        else if (_buttonClicked == #RFFull && step != 0)  // Full (Split)
        {
            step = #SplitWork;
        }
        else if (_buttonClicked == #RFNoLocation)  // Suggest Location (NoLocation)
        {
            workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
            if (pass.exists(#ExcludedLocations))
            {
                excludeLocationId = this.buildLocationListFromStr(pass.lookup(#ExcludedLocations));
            }
            else
            {
                excludeLocationId = this.buildLocationListFromStr(workLine.wmsLocationId);
            }
            [newLocationId, tmpCon] = workExecute.findNewLocation(workLine, excludeLocationId);
            excludeLocationId = Set::create(tmpCon);
            pass.insert(#SuggestLocation, 1);
            pass.insert(#ExcludedLocations, this.buildLocationListFromSet(excludeLocationId));
            if (pass.exists(#PrevStep))
            {
                step = pass.lookup(#PrevStep);
            }
            else
            {
                pass.insert(#NoValidation, '1');
            }
        }

        switch (step)
        {
            case 0:
                addCancel = true;
                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                    pass.remove(#Recall);
                    pass.remove(#WorkComplete);
                    addCancel = false;
                }
                ret = this.buildGetWorkId(ret);
                step = 1;
                break;

            case 1:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                    con = this.clearErrors(con);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                [ret, complete] = this.processFieldValues(con, fieldValues);

                hasError = this.hasError(ret);

                if (complete)
                {
                    errorStr = workExecute.validateInitialPickPackWorkId(pass.lookup(#WorkId));

                    if (errorStr != '')
                    {
                        throw error(errorStr);
                    }

                    workTable = WHSWorkTable::find(pass.lookup(#WorkId));

                    if (pass.lookup(#InventLocationid) != workTable.InventLocationId)
                    {
                        throw error("@WAX1261");
                    }
                    else if (!WHSWorkTable::validateWorkInCluster(workTable.WorkId))
                    {
                        throw error("@WAX3828");
                    }

                    pass.insert(#TargetWorkId, pass.lookup(#WorkId));

                    workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);

                    if (this.workIncludesCatchWeightItems())
                    {
                        throw error(strFmt("@WAX:Error_PickPackDoesNotSupportCWItem", workLine.WorkId));
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }
                    pass.parmLineNum(workLine.LineNum);

                    // Must evaluate for prior event work audit templates
                    if (WHSWorkAuditTemplateTable::evaluateWorkAuditBreak(menuItemTable.WorkAuditTemplateId,
                                                                            workTable,
                                                                            menuItemTable.MenuItemName,
                                                                            WHSAuditBreakEvent::Prior, ''))
                    {
                        step  = #WorkAuditTemplate;
                        pass.insert(#AuditWorkId, workLine.WorkId);

                        [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);

                        if (step == #WorkAuditTemplate)
                        {
                            break;
                        }
                    }

                    if (workLine.wmsLocationId)
                    {
                        pass.insert(#WMSLocationId, workLine.wmsLocationId);
                    }
                    else
                    {
                        ret = conNull();
                        ret = this.buildGetLocation(ret);
                        step = #NoLocation;
                        break;
                    }

                    ret = conNull();
                    ret = this.buildPick(ret);

                    step = 2;
                }
                break;

            case 2:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                    con = this.clearErrors(con);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                workLine = workExecute.getFirstOpenLine(pass.parmWorkId(), userId);

                if (!workLine)
                {
                    throw error("@WAX3756");
                }

                [ret, complete] = this.processFieldValues(con, fieldValues);

                if (complete)
                {
                    if (pass.exists(#LicensePlateId) && pass.lookup(#LicensePlateId) != '')
                    {
                        workTable = WHSWorkTable::find(pass.lookup(#WorkId));

                        this.buildPick(ret, '', false);

                        if (pass.exists(#DimPrompt))
                        {
                            ret = conNull();
                            ret = this.buildPick(ret, '', false);
                            pass.remove(#DimPrompt);
                            break;
                        }

                        if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                        {
                            throw error("@WAX1459");
                        }
                        WHSWorkTable::setTargetLicensePlate(pass.lookup(#WorkId), pass.lookup(#LicensePlateId));

                        if (pass.exists(#TargetLicensePlateId) && pass.lookup(#TargetLicensePlateId) != '')
                        {
                            WHSWorkTable::setTargetLicensePlate(pass.lookup(#WorkId), pass.lookup(#TargetLicensePlateId));
                        }

                        tmpWorkLine = WHSWorkLine::find(workLine.WorkId, workLine.LineNum);

                        workLine = workExecute.pickWorkFromLicensePlate(pass.lookup(#LicensePlateId),
                                                                        workLine,
                                                                        userId,
                                                                        this.createInventDimFromPass(),
                                                                        pass.lookupStr(#TargetLicensePlateId),
                                                                        0, // catch weight enabled items not supported for pick and pack
                                                                        false,
                                                                        NoYes::No,
                                                                        false,
                                                                        false);
                    }
                    else
                    {
                        workTable = WHSWorkTable::find(pass.lookup(#WorkId));

                        this.buildPick(ret, '', false);

                        if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                        {
                            throw error("@WAX1459");
                        }
                        WHSWorkTable::setTargetLicensePlate(pass.lookup(#WorkId), pass.lookup(#TargetLicensePlateId));
                        workTable.TargetLicensePlateId = pass.lookup(#TargetLicensePlateId);

                        tmpWorkLine = WHSWorkLine::find(workLine.WorkId, workLine.LineNum);

                        workLine = workExecute.pickNonLicensePlateCheckDigitQuantities(workLine.WorkId,
                                                                                workLine.LineNum,
                                                                                workLine.ItemId,
                                                                                workLine.QtyRemain,
                                                                                0, // catch weight enabled items not supported for pick and pack
                                                                                workLine.UnitId,
                                                                                userId,
                                                                                this.createInventDimFromPass(),
                                                                                pass.lookup(#TargetLicensePlateId),
                                                                                false);
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }

                    if (workLine.AskForNewLicensePlate)
                    {
                        ret = conNull();
                        workTable.TargetLicensePlateId = '';
                        ret = this.buildPick(ret);
                    }
                    else if (tmpWorkLine.LineNum == workLine.LineNum)
                    {
                        this.clearPassBelowLicensePlate(workLine.ItemId);

                        workTable = tmpWorkLine.whsWorkTable();

                        if (workTable.TargetLicensePlateId)
                        {
                            pass.insert(#TargetLicensePlateId, workTable.TargetLicensePlateId);
                        }

                        ret = conNull();

                        pass.insert(WHSWorkExecuteDisplayPickPackControls::SkipPickQuantityAdjustment, 1);
                        ret = this.buildPick(ret);
                        pass.remove(WHSWorkExecuteDisplayPickPackControls::SkipPickQuantityAdjustment);
                    }
                    else
                    {
                        this.clearPassBelowLicensePlate(workLine.ItemId);

                        this.clearPassBeforeNextWork();

                        pass.remove(#LocVerification);
                        pass.remove(#CheckDigit);
                        pass.remove(#QtyVerification);

                        ret = conNull();

                        if (!this.checkForPickPackWork(pass.lookup(#TargetWorkId)))
                        {
                            ret = this.addErrorLabel(ret, "@WAX2875", WHSRFColorText::Success);
                        }

                        ret = this.buildGetWorkId(ret);
                        ret = this.addDoneButton(ret, true);
                        addCancel = false;
                        step = 3;

                        [cycleCountDisplayUpdated, ret] = this.checkCycleCountThresholdAndUpdateDisplay(
                                                                                            ret,
                                                                                            _buttonClicked,
                                                                                            tmpWorkLine);
                    }
                }
                break;

            case 3:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                    con = this.clearErrors(con);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                [ret, complete] = this.processFieldValues(con, fieldValues);

                hasError = this.hasError(ret);

                if (hasError)
                {
                    addCancel = false;
                }

                if (complete)
                {
                    errorStr = workExecute.validatePickPackGrouping(pass.lookup(#TargetWorkId), pass.lookup(#WorkId));
                    if (errorStr != '')
                    {
                        throw error(errorStr);
                    }

                    workTable = WHSWorkTable::find(pass.lookup(#WorkId));

                    if (pass.lookup(#InventLocationid) != workTable.InventLocationId)
                    {
                        throw error("@WAX1261");
                    }
                    else if (!WHSWorkTable::validateWorkInCluster(workTable.WorkId))
                    {
                        throw error("@WAX3828");
                    }

                    workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);

                    if (this.workIncludesCatchWeightItems())
                    {
                        throw error(strFmt("@WAX:Error_PickPackDoesNotSupportCWItem", workLine.WorkId));
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }
                    pass.parmLineNum(workLine.LineNum);

                    // Must evaluate for prior event work audit templates
                    if (WHSWorkAuditTemplateTable::evaluateWorkAuditBreak(menuItemTable.WorkAuditTemplateId,
                                                                            workTable,
                                                                            menuItemTable.MenuItemName,
                                                                            WHSAuditBreakEvent::Prior,
                                                                            '',
                                                                            pass.lookup(#TargetWorkId)))
                    {
                        step  = #WorkAuditTemplate;
                        pass.insert(#AuditWorkId, workLine.WorkId);

                        [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);

                        if (step == #WorkAuditTemplate)
                        {
                            break;
                        }
                    }

                    if (!workLine.wmsLocationId)
                    {
                        ret = conNull();
                        ret = this.buildGetLocation(ret);
                        step = #NoLocation;
                        break;
                    }

                    WHSWorkTable::setTargetLicensePlate(pass.lookup(#WorkId), WHSWorkTable::find(pass.lookup(#TargetWorkId)).TargetLicensePlateId);
                    workTable.TargetLicensePlateId = WHSWorkTable::find(pass.lookup(#TargetWorkId)).TargetLicensePlateId;

                    ret = conNull();
                    ret = this.buildPick(ret);

                    WHSWorkTable::setTargetLicensePlate(pass.lookup(#WorkId), '');
                    workTable.TargetLicensePlateId = WHSWorkTable::find(pass.lookup(#TargetWorkId)).TargetLicensePlateId;

                    addCancel = false;

                    ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
                    ret += [this.buildControl(#RFButton, #RFFinished, "@SYS56453", 1, '', #WHSRFUndefinedDataType, '', 0)];

                    step = 4;
                }
                break;

            case 4:
                workLine = workExecute.getFirstOpenLine(pass.parmWorkId(), userId);

                if (_buttonClicked == #RFFinished)
                {
                    if (workLine)
                    {
                        WHSWorkTable::setTargetLicensePlate(pass.parmWorkId(), '');
                        workTable.TargetLicensePlateId = '';
                    }

                    this.clearPassBeforeNextWork();

                    ret = conNull();
                    ret = this.buildGetWorkId(ret);
                    ret = this.addDoneButton(ret, true);
                    addCancel = false;

                    step = 3;
                }
                else
                {
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                        con = this.clearErrors(con);
                    }

                    [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass, fieldValues);

                    if (!workLine)
                    {
                        throw error("@WAX3756");
                    }

                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete)
                    {
                        WHSWorkTable::setTargetLicensePlate(pass.lookup(#WorkId), WHSWorkTable::find(pass.lookup(#TargetWorkId)).TargetLicensePlateId);
                        workTable.TargetLicensePlateId = WHSWorkTable::find(pass.lookup(#TargetWorkId)).TargetLicensePlateId;

                        if (pass.exists(#LicensePlateId) && pass.lookup(#LicensePlateId) != '')
                        {
                            workTable = WHSWorkTable::find(pass.lookup(#WorkId));

                            this.buildPick(ret, '', false);

                            if (pass.exists(#DimPrompt))
                            {
                                ret = conNull();
                                ret = this.buildPick(ret, '', false);
                                pass.remove(#DimPrompt);
                                break;
                            }

                            if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                            {
                                throw error("@WAX1459");
                            }

                            tmpWorkLine = WHSWorkLine::find(workLine.WorkId, workLine.LineNum);

                            workLine = workExecute.pickWorkFromLicensePlate(pass.lookup(#LicensePlateId),
                                                                            workLine,
                                                                            userId,
                                                                            this.createInventDimFromPass(),
                                                                            workTable.TargetLicensePlateId,
                                                                            0, // catch weight items are not supported for pick pack
                                                                            false,
                                                                            NoYes::No,
                                                                            false,
                                                                            false);
                        }
                        else
                        {
                            workTable = WHSWorkTable::find(pass.lookup(#WorkId));

                            this.buildPick(ret, '', false);

                            if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                            {
                                throw error("@WAX1459");
                            }

                            tmpWorkLine = WHSWorkLine::find(workLine.WorkId, workLine.LineNum);

                            workLine = workExecute.pickNonLicensePlateCheckDigitQuantities(workLine.WorkId,
                                                                                    workLine.LineNum,
                                                                                    workLine.ItemId,
                                                                                    workLine.QtyRemain,
                                                                                    0, // catch weight items are not supported for pick pack
                                                                                    workLine.UnitId,
                                                                                    userId,
                                                                                    this.createInventDimFromPass(),
                                                                                    WHSWorkTable::find(pass.lookup(#TargetWorkId)).TargetLicensePlateId,
                                                                                    false);
                        }

                        if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                        {
                            throw error("@WAX1459");
                        }

                        this.clearPassBelowLicensePlate(workLine.ItemId);

                        if (tmpWorkLine.LineNum == workLine.LineNum)
                        {
                            workTable = tmpWorkLine.whsWorkTable();

                            if (workTable.TargetLicensePlateId)
                            {
                                pass.insert(#TargetLicensePlateId, workTable.TargetLicensePlateId);
                            }

                            ret = conNull();
                            ret = this.buildPick(ret);
                        }
                        else
                        {
                            pass.remove(#LocVerification);
                            pass.remove(#CheckDigit);
                            pass.remove(#QtyVerification);

                            this.clearPassBeforeNextWork();

                            WHSWorkTable::combineWork(pass.lookup(#TargetWorkId), pass.lookup(#WorkId));

                            ret = conNull();

                            if (!this.checkForPickPackWork(pass.lookup(#TargetWorkId)))
                            {
                                ret = this.addErrorLabel(ret, "@WAX2875", WHSRFColorText::Success);
                            }

                            ret = this.buildGetWorkId(ret);
                            ret = this.addDoneButton(ret, true);
                            addCancel = false;
                            step = 3;

                            [cycleCountDisplayUpdated, ret] = this.checkCycleCountThresholdAndUpdateDisplay(
                                                                                                        ret,
                                                                                                        _buttonClicked,
                                                                                                        tmpWorkLine);
                        }
                    }
                }
                break;

            default:
                if (pass.exists(#TargetWorkId) || step == #WorkAuditTemplate)
                {
                    if (_buttonClicked == #RFDone)
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#TargetWorkId), userId);
                    }
                    else if (pass.exists(#AuditWorkId))
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#AuditWorkId), userId);

                        if (workLine.RecId == 0)
                        {
                            workLine = WHSWorkTable::getLastWorkLine(pass.lookup(#AuditWorkId));
                        }

                        pass.insert(#InventLocationId, workLine.whsWorkTable().InventLocationId);
                    }
                    else
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }

                    if (workLine)
                    {
                        if (_buttonClicked == #RFDone)
                        {
                            pass.insert(#DetermineStep, 1);
                        }
                        else
                        {
                            pass.remove(#DetermineStep);
                        }
                        workTable = workLine.whsWorkTable();
                        con = conPoke(con, 2, pass.pack());
                        [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                        pass = new WHSRFPassthrough(Types::String, Types::String);
                        pass = WHSRFPassthrough::create(tmpPass);

                        if (step == #Restart)
                        {
                            step = 0;
                        }
                        else if (step == #StepOne)
                        {
                            step = #StepMax;
                            pass.insert(#DetermineStep, 1);

                            if (pass.exists(#PickPackOverride))
                            {
                                if (workLine.WorkType == WHSWorkType::Pick)
                                {
                                    recall = false;

                                    workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);

                                    WHSWorkTable::setTargetLicensePlate(pass.lookup(#WorkId), WHSWorkTable::find(pass.lookup(#TargetWorkId)).TargetLicensePlateId);
                                    workTable.TargetLicensePlateId = WHSWorkTable::find(pass.lookup(#TargetWorkId)).TargetLicensePlateId;

                                    ret = conNull();
                                    ret = this.buildPick(ret);

                                    WHSWorkTable::setTargetLicensePlate(pass.lookup(#WorkId), '');
                                    workTable.TargetLicensePlateId = WHSWorkTable::find(pass.lookup(#TargetWorkId)).TargetLicensePlateId;

                                    addCancel = false;

                                    step = 2;

                                    if (workLine.WorkId != pass.lookup(#TargetWorkId))
                                    {
                                        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
                                        ret += [this.buildControl(#RFButton, #RFFinished, "@SYS56453", 1, '', #WHSRFUndefinedDataType, '', 0)];

                                        step = 4;
                                    }
                                }
                                else if (workLine.WorkType == WHSWorkType::Put)
                                {
                                    recall = false;

                                    workLine = workExecute.getFirstOpenLine(pass.lookup(#TargetWorkId), userId);

                                    ret = conNull();
                                    ret = this.buildPut(ret);

                                    addCancel = false;

                                    step = #Put;
                                }

                                pass.remove(#PickPackOverride);
                            }
                        }

                        if (recall)
                        {
                            con = this.updateModeStepPass(con, mode, step, pass);
                            con = conPoke(con, 1, [mode, step]);
                            workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                            ret = workExecuteDisplay.displayForm(con);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(conPeek(ret, 2));
                            if (pass.exists(#WorkId) && pass.exists(#LineNum))
                            {
                                workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                                workTable = workLine.whsWorkTable();
                            }
                        }
                    }
                    else
                    {
                        throw error("@WAX859");
                    }
                }
                else
                {
                    throw error("@WAX859");
                }
                break;
        }

        if (step > 1 && step != 3)
        {
            ret = this.addButtons(ret);
        }
        else if (addCancel)
        {
            ret = this.addCancelButton(ret, 1, true);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>