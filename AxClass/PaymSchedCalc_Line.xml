<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymSchedCalc_Line</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Subclass of <c>PaymSchedCalc</c>.
/// </summary>
final class PaymSchedCalc_Line extends PaymSchedCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPaymSchedTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the total amount of the payment schedule match the total amount of the invoice
    /// </summary>
    private void checkPaymSchedTotalAmount()
    {
        PaymSchedLine   paymSchedLineLocal;

        select sum(Value) from paymSchedLineLocal
            where paymSchedLineLocal.Name == paymSched.Name;

        if ( invoiceAmount != paymSchedLineLocal.Value )
        {
            throw error(strfmt("@SYS93433",paymSchedLineLocal.Value,invoiceAmount));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates transactions.
    /// </summary>
    /// <param name = "_custVendPaymentSchedLine">The customer vendor payment schedule line.</param>
    public void createTransaction(CustVendPaymentSchedLine _custVendPaymentSchedLine)
    {
        boolean first = true;
        boolean uncheckedValue = true;
        AmountCur amountCur;
        AmountCur dueAmountInclTax;
        CustVendPaymentSchedLine newCustVendPaymSchedLine  = _custVendPaymentSchedLine.data();
        PaymSchedLine paymSchedLineLocal;
        int num = 0;

        select count(RecId) from paymSchedLineLocal
            where paymSchedLineLocal.Name == paymSched.Name;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
            && splitPaymSumTax_IT)
        {
            this.adjustInvoiceAmountsSplitPaym_IT(AddRemove::Remove);
        }

        amountCur = invoiceAmount;
        paymentAmountCur = invoiceAmount;
        if (custVendPaymSched.TaxDistribution != PaymSchedTaxDistribution::Proportional)
        {
            paymentAmountCur -= invoiceTaxAmount;
        }

        ttsbegin;

        CustVendPaymSched::deletePaymSchedLines(custVendPaymSched, custVendPaymSchedLine, skipVersionChangeCheck);

        this.setDueDate();

        while select paymSchedLine
            order by Qty
            where paymSchedLine.Name == paymSched.Name
        {
            this.initNewCustVendPaymSchedLine(newCustVendPaymSchedLine, custVendPaymSched, paymSchedLine);

            switch (paymSchedLine.PercentAmount)
            {
                case PercentAmount::Percent :
                    dueAmountInclTax = CurrencyExchangeHelper::amount(paymentAmountCur * paymSchedLine.Value / 100 + invoiceTaxAmount, currencyCode);
                    if (first && custVendPaymSched.TaxDistribution == PaymSchedTaxDistribution::FirstRate)
                    {
                        newCustVendPaymSchedLine.DueAmount = dueAmountInclTax;
                        first = false;
                    }
                    else if (custVendPaymSched.TaxDistribution == PaymSchedTaxDistribution::LastRate)
                    {
                        num++;
                        if (paymSchedLineLocal.RecId != num)
                        {
                            newCustVendPaymSchedLine.DueAmount = CurrencyExchangeHelper::amount(paymentAmountCur * paymSchedLine.Value / 100, currencyCode);
                        }
                        else
                        {
                            newCustVendPaymSchedLine.DueAmount = dueAmountInclTax;
                        }
                    }
                    else
                    {
                        newCustVendPaymSchedLine.DueAmount = CurrencyExchangeHelper::amount(paymentAmountCur * paymSchedLine.Value / 100, currencyCode);
                    }
                    newCustVendPaymSchedLine.DiscAmount = CurrencyExchangeHelper::amount(cashDiscAmount   * paymSchedLine.Value / 100, currencyCode);
                    break;

                case PercentAmount::Amount :
                    if (uncheckedValue)
                    {
                        this.checkPaymSchedTotalAmount();
                        uncheckedValue = false;
                    }
                    newCustVendPaymSchedLine.DueAmount = paymSchedLine.Value * (invoiceAmount < 0 ? -1 : 1);
                    newCustVendPaymSchedLine.DiscAmount = 0;
                    break;

                default :
                    throw error(strfmt("@SYS23951",paymSched.Name,invoiceId));
            }

            amountCur -= newCustVendPaymSchedLine.DueAmount;

            if (abs(amountCur) <= paymSched.LowestAmount)
            {
                newCustVendPaymSchedLine.DueAmount += amountCur;
                amountCur = 0;
            }

            futures = Futures::construct(dueDate,
                                  paymSchedLine.Qty,
                                  paymSched.PeriodUnit);

            newCustVendPaymSchedLine.DueDate = this.nextDueDate();

            if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar)) && this.parmDueDateUpdatePolicy() != PaymentDueDateUpdatePolicy::NoUpdate)
            {
                newCustVendPaymSchedLine.DueDate = paymCalendarProcessor.adjustDateForCalendar(newCustVendPaymSchedLine.DueDate, this.parmDueDateUpdatePolicy(), paymCalendarResults);
            }

            newCustVendPaymSchedLine.DiscDate = this.nextDiscDate(newCustVendPaymSchedLine.DueDate);

            newCustVendPaymSchedLine.insert();
        }

        if (newCustVendPaymSchedLine && custVendPaymSched.TaxDistribution == PaymSchedTaxDistribution::LastRate)
        {
            amountCur -= dueAmountInclTax - newCustVendPaymSchedLine.DueAmount;

            if (abs(amountCur) <= paymSched.LowestAmount)
            {
                newCustVendPaymSchedLine.DueAmount += amountCur;
                newCustVendPaymSchedLine.update();
                amountCur = 0;
            }
        }

        if (!newCustVendPaymSchedLine)
        {
            throw error(strfmt("@SYS28948", custVendPaymSched.PaymBy));
        }

        if (amountCur)
        {
            this.remainAmountCur(newCustVendPaymSchedLine, amountCur);
        }

        if (MultipleTaxIdReportingHelper::isLegalEntityOrAddressInCountryRegion([#isoIT], MultipleTaxIdScope::VATDeclaration)
            && splitPaymSumTax_IT)
        {
            this.createTransactionSplitPaym_IT();
            this.adjustInvoiceAmountsSplitPaym_IT(AddRemove::Add);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice amount.
    /// </summary>
    public void setAmount()
    {
        paymentAmountCur = invoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewCustVendPaymSchedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>CustVendPaymentScheduleLine</c> map instance based on the created transaction.
    /// </summary>
    /// <param name="_custVendPaymentSchedLine">
    /// <c>CustVendPaymentSchedLine</c> map instance.
    /// </param>
    /// <param name="_custVendPaymentSched">
    /// <c>CustVendPaymentSched</c> record.
    /// </param>
    /// <param name="_paymSchedLine">
    /// <c>PaymSchedLine</c> record.
    /// </param>
    protected void initNewCustVendPaymSchedLine(CustVendPaymentSchedLine _newCustVendPaymSchedLine, CustVendPaymentSched _custVendPaymentSched, PaymSchedLine _paymSchedLine)
    {
        _newCustVendPaymSchedLine.initFromPaymSchedLine(_paymSchedLine);
        _newCustVendPaymSchedLine.initFromCustVendPaymSched(_custVendPaymentSched);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>