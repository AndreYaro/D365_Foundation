<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPDCReceiptController</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendPDCReceiptController extends SrsReportRunController implements BatchRetryable
{
    LedgerJournalAccountName    accName;
    CustVendACType              accType;
    Name                        bankBranch;
    Name                        bankName;
    Amount                      checkAmt;
    PostDatedCheckNum           checkNum;
    CurrencyCode                currency;
    PDCDateReceived             dateRecvd;
    PDCMaturityDate             matDate;

    #define.CustReportName('CustVendPDCAckIssueReceipt.Report_Cust')
    #define.VendorReportName('CustVendPDCAckIssueReceipt.Report_Vend')
    #define.checkNum('CheckNumber')
    #define.matDate('MaturityDate')
    #define.bankName('BankName')
    #define.bankBranch('BankBranch')
    #define.dateReceived('DateReceived')
    #define.amount('Amount')
    #define.currencyCode('Currency')
    #define.accName('AccountName')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAccountName</Name>
				<Source><![CDATA[
        public AccountName parmAccountName(AccountName _accName = accName)
    {
        accName = _accName;
        return accName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountType</Name>
				<Source><![CDATA[
        public CustVendACType parmAccountType(CustVendACType _accType = accType)
    {
        accType = _accType;
        return accType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankBranch</Name>
				<Source><![CDATA[
        public Name parmBankBranch(Name _bankBranch = bankBranch)
    {
        bankBranch = _bankBranch;
        return bankBranch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankName</Name>
				<Source><![CDATA[
        public Name parmBankName(Name _bankName = bankName)
    {
        bankName = _bankName;
        return bankName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckAmount</Name>
				<Source><![CDATA[
        public Amount parmCheckAmount(Amount _checkAmt = checkAmt)
    {
        checkAmt = _checkAmt;
        return checkAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckNum</Name>
				<Source><![CDATA[
        public PostDatedCheckNum parmCheckNum(PostDatedCheckNum _checkNum = checkNum)
    {
        checkNum = _checkNum;
        return checkNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrency</Name>
				<Source><![CDATA[
        public CurrencyCode parmCurrency(CurrencyCode _currency = currency)
    {
        currency = _currency;
        return currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateReceived</Name>
				<Source><![CDATA[
        public PDCDateReceived parmDateReceived(PDCDateReceived _dateRecvd = dateRecvd)
    {
        dateRecvd = _dateRecvd;
        return dateRecvd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaturityDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the maturity date parameter.
    /// </summary>
    /// <param name="_matDate">
    ///    The value of the parameter.
    /// </param>
    /// <returns>
    ///    The value of the maturity date parameter.
    /// </returns>
    public PDCMaturityDate parmMaturityDate(PDCMaturityDate _matDate = matDate)
    {
        matDate = _matDate;
        return matDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
        public void prePromptModifyContract()
    {
        SrsReportRdlDataContract rdlContractInfo;
        rdlContractInfo = this.parmReportContract().parmRdlContract();

        if (rdlContractInfo)
        {
            rdlContractInfo.setValue(#checkNum,checkNum);
            rdlContractInfo.setValue(#accName,accName);
            rdlContractInfo.setValue(#amount,checkAmt);
            rdlContractInfo.setValue(#bankName,bankName);
            rdlContractInfo.setValue(#bankBranch,bankBranch);
            rdlContractInfo.setValue(#currencyCode,currency);
            rdlContractInfo.setValue(#matDate,matDate);
            rdlContractInfo.setValue(#dateReceived,dateRecvd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report caption and opens the report.
    /// </summary>
    public void setReportName()
    {
        if (accType == CustVendACType::Cust)
        {
            this.parmReportName(#CustReportName);
            this.parmDialogCaption("@SYS322837");
        }
        else if (accType == CustVendACType::Vend)
        {
            this.parmReportName(#VendorReportName);
            this.parmDialogCaption("@SYS322837");
        }
        else
        {
            // Invalid AC Type
            error("@SYS327036");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _arg)
    {
        CustVendPDCReceiptController controller;

        controller = _arg.parmObject();
        if (controller)
        {
            controller.setReportName();
            controller.parmArgs(_arg);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>