<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCalcSettledAmounts_Cust_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
// ANVA, Tax Settlement Calculation
class CustVendCalcSettledAmounts_Cust_RU extends CustVendCalcSettledAmounts_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getOrigLineAmount</Name>
				<Source><![CDATA[
        private container getOrigLineAmount(CustInvoiceLineIdRef _custInvoiceLineIdRef)
    {
        CustInvoiceTrans    custInvoiceTrans;
        CustInterestTrans   custInterestTrans;
        MarkupTrans         markupTrans;
        AmountCur           origLineAmount;
        recId               sourceRecId;
        tableId             sourceTableId;

        switch (_custInvoiceLineIdRef.EntityType)
        {
            case CustInvoiceLineType::Customer:
                select RecId, LineAmount, TaxAmount from custInvoiceTrans
                    where custInvoiceTrans.CustInvoiceLineIdRef == _custInvoiceLineIdRef.RecId;

                sourceTableId   = custInvoiceTrans.TableId;
                sourceRecId     = custInvoiceTrans.RecId;
                origLineAmount  = custInvoiceTrans.LineAmount + custInvoiceTrans.TaxAmount;
                break;

            case CustInvoiceLineType::MarkupTrans:
                select RecId, Value, TaxAmount from markupTrans
                    where markupTrans.CustInvoiceLineIdRef == _custInvoiceLineIdRef.RecId;

                sourceTableId   = markupTrans.TableId;
                sourceRecId     = markupTrans.RecId;
                origLineAmount  = markupTrans.Value + markupTrans.TaxAmount;
                break;

            case CustInvoiceLineType::InterestNote:
                select RecId, InterestAmount from custInterestTrans
                    where custInterestTrans.CustInvoiceLineIdRef == _custInvoiceLineIdRef.RecId;

                sourceTableId   = custInterestTrans.TableId;
                sourceRecId     = custInterestTrans.RecId;
                origLineAmount  = custInterestTrans.InterestAmount;
                break;

            default:
                sourceRecId = 0;
        }

        return [sourceTableId, sourceRecId, origLineAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceJour</Name>
				<Source><![CDATA[
        public void initFromInvoiceJour(CustVendInvoiceJour  _custVendInvoiceJour)
    {
        mainTrans = new DictTable(tableNum(CustTrans)).makeRecord();
        super(_custVendInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
        protected Query query()
    {
        Query                   q = new Query();
        QueryBuildDataSource    qbds;
        QueryRun                qr;
        CustVendSettlement      custVendSettlement;
        CustInvoiceLineIdRef    custInvoiceLineIdRef;
        CustSettlementLine      custSettlementLine;
        AmountCur               origLineAmount;
        recId                   sourceRecId;
        tableId                 sourceTableId;
        Map                     settlementMap;
        AmountCur               settlementLineAmount;

        qbds = q.addDataSource(tableNum(CustSettlement));
        qbds.addSortField(fieldNum(CustSettlement, RecId));
        qbds.addRange(fieldNum(CustSettlement, TransRecId)).value(SysQuery::value(mainTrans.RecId));
        qbds.addRange(fieldNum(CustSettlement, CanBeReversed)).value(
            '((' + fieldStr(CustSettlement, CanBeReversed) +  ') || (' + fieldStr(CustSettlement, ReversedRecId_RU)+'))');

        if (CustParameters::find().MarkOpenInvoiceLine)
        {
            settlementLinesMap = new Map(Types::Int64, Types::Container);
            qr = new QueryRun(q);
            while (qr.next())
            {
                custVendSettlement      = qr.getNo(1);
                settlementMap           = new Map(Types::Container, Types::Container);
                settlementLineAmount    = 0;

                while select sum(SettledAmountCur) from custSettlementLine
                    where custSettlementLine.CustSettlement == custVendSettlement.RecId
                    join RecId, EntityType from custInvoiceLineIdRef group by RecId, EntityType
                    where custInvoiceLineIdRef.RecId == custSettlementLine.CustInvoiceLineIdRef
                {
                    [sourceTableId, sourceRecId, origLineAmount] = this.getOrigLineAmount(custInvoiceLineIdRef);
                    if (sourceRecId && origLineAmount)
                    {
                        settlementLineAmount += custSettlementLine.SettledAmountCur;
                        settlementMap.insert([sourceTableId, sourceRecId], [origLineAmount, custSettlementLine.SettledAmountCur]);
                    }
                    else
                    {
                        settlementLineAmount = 0;
                        break;
                    }
                }

                if (settlementLineAmount && settlementLineAmount < mainTrans.AmountCur)
                {
                    settlementLinesMap.insert(custVendSettlement.RecId, [settlementLineAmount, settlementMap.pack()]);
                }
            }
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTransAmounts</Name>
				<Source><![CDATA[
        protected Query queryTransAmounts(NoYes _useSourceRecId)
    {
        Query                   query = super(_useSourceRecId);
        QueryBuildDataSource    qbds;

        CustTransOpen           custTransOpen;
        CustTransOpenLine       custTransOpenLine;
        CustTransMarkedOpenLine custTransMarkedOpenLine;
        CustInvoiceLineIdRef    custInvoiceLineIdRef;
        AmountCur               origLineAmount;
        recId                   sourceRecId;
        tableId                 sourceTableId;

        qbds = query.dataSourceTable(tableNum(TaxTrans_RU));
        qbds.addSortField(fieldNum(TaxTrans_RU, CustVendTransPostingLog_RU));

        qbds = query.dataSourceTable(tableNum(TaxTrans));
        qbds.addSortField(fieldNum(TaxTrans, InventTransId));

        if (CustParameters::find().MarkOpenInvoiceLine)
        {
            custTransOpen = CustTransOpen::findRefId(mainTrans.RecId);

            if (custTransOpen && CustTransOpenLine::existByRefId(custTransOpen.RecId))
            {
                sourceTransMap = new Map(Types::Container, Types::Container);
                while select sum(AmountToSettle), sum(CashDiscLineToTake) from custTransMarkedOpenLine
                    join TableId from custTransOpenLine
                    join RecId, EntityType from custInvoiceLineIdRef group by RecId, EntityType
                    where custTransMarkedOpenLine.SpecTrans == SpecTrans::findByRef(custTransOpen.company(), custTransOpen.TableId, custTransOpen.RecId).RecId
                       && custTransOpenLine.RecId           == custTransMarkedOpenLine.CustTransOpenLine
                       && custInvoiceLineIdRef.RecId        == custTransOpenLine.CustInvoiceLineIdRef
                {
                    [sourceTableId, sourceRecId, origLineAmount] = this.getOrigLineAmount(custInvoiceLineIdRef);

                    if (sourceRecId && origLineAmount)
                    {
                        totalSourceTransAmount += custTransMarkedOpenLine.AmountToSettle + custTransMarkedOpenLine.CashDiscLineToTake;
                        sourceTransMap.insert([sourceTableId, sourceRecId], [origLineAmount, custTransMarkedOpenLine.AmountToSettle + custTransMarkedOpenLine.CashDiscLineToTake]);
                    }
                    else
                    {
                        totalSourceTransAmount = 0;
                        break;
                    }
                }

                if (!totalSourceTransAmount || totalSourceTransAmount >= mainTrans.AmountCur)
                {
                    sourceTransMap = null;
                }
            }

            if (sourceTransMap || settlementLinesMap)
            {
                qbds.addSortField(fieldNum(TaxTrans, SourceTableId));
                qbds.addSortField(fieldNum(TaxTrans, SourceRecId));
            }
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>