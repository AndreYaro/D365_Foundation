<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximUpdate_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim update class.
/// </summary>
abstract class EximUpdate_IN extends EximIncentiveSchemes_IN
{
    EximAuthorizationSchemesTable_IN authorizationSchemesTable;
    EximAuthorizationSchemesLine_IN  authorizationSchemesLine;
    EximDEPBSchemesLine_IN           depbSchemesLine;
    EximDEPBSchemesTable_IN          depbSchemesTable;
    EximEntitlementDetails_IN        eximEntitlementDetails;
    EximDEPBDetailsTable_IN          eximDEPBDetails;
    TmpEximTaxDetails_IN             tmpTaxDetails;
    TmpEximImportableItems_IN        tmpImportableItems;
    TmpEximEntitlementDetails_IN     tmpEximEntitlementDetails;
    RefRecId                         schemeTableRecId;
    RefTableId                       schemeTableId;
    LedgerVoucher                    ledgerVoucher;
    EximLicenseNum_IN                licenseNum;
    TaxAccountGroup_IN               taxAccountGroup;
    TaxRegistrationNumber_IN         iECNumber;
    EximTxt_IN                       txt;
    MenuItemName                     menuItemName;
    TransDate                        transDate;
    TransDate                        issueDate;
    TransDate                        importExpiryDate;
    TransDate                        exportExpiryDate;
    TransDateTime                    issueDateTime;
    TransDateTime                    importExpiryDateTime;
    AmountMST                        exportAssessableValue;
    AmountMST                        importAssessableValue;
    AmountMST                        totalDutyAmount;
    AmountMST                        totalDutyEntitlement;
    AmountMST                        totalComponentAmount;
    boolean                          postingStatus;
    boolean                          transferrable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates voucher information.
    /// </summary>
    /// <returns>
    /// The instacne of the <c>NumberSeq</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected NumberSeq allocateVoucher()
    {
        NumberSequenceReference voucherSeqRef;
        NumberSeq               numberSeq;

        switch (schemeType)
        {
            case EximAuthorizationType_IN::AA:
                voucherSeqRef = EximParameters_IN::numRefAAVoucher();
                break;

            case EximAuthorizationType_IN::DFIA:
                voucherSeqRef = EximParameters_IN::numRefDfiaVoucher();
                break;

            case EximAuthorizationType_IN::DEPB:
                voucherSeqRef = EximParameters_IN::numRefDEPBVoucher();
                break;
        }

        numberSeq = NumberSeq::newGetVoucher(voucherSeqRef);
        if (!voucherSeqRef.numberSequenceTable().Continuous)
        {
            throw error(strfmt("@SYS26207", voucherSeqRef.numberSequenceTable().NumberSequence));
        }

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>authorizationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets authorization type.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void authorizationType()
    {
        EximDEPBSchemesTable_IN depbSchemesTableLoc;
        EximDEPBSchemesLine_IN  depbSchemesLineLoc;

        switch (schemeTableId)
        {
            case tablenum(EximAuthorizationSchemesTable_IN):
            case tablenum(EximAuthorizationSchemesLine_IN):
                schemeType = EximAuthorizationSchemesTable_IN::find(schemeTableRecId).AuthorizationType;
                break;
            case tablenum(EximDEPBSchemesTable_IN):
                schemeType = EximDEPBSchemesTable_IN::findRecId(schemeTableRecId).AuthorizationType;
                break;
            case tablenum(EximDEPBSchemesLine_IN):
                select firstonly SchemeTableRecId
                    from depbSchemesLineLoc
                    where depbSchemesLineLoc.RecId == schemeTableRecId
                    join AuthorizationType, RecId
                        from depbSchemesTableLoc
                        where depbSchemesTableLoc.RecId == depbSchemesLineLoc.SchemeTableRecId;

                schemeType = depbSchemesTableLoc.AuthorizationType;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object  dialog()
    {
        Args    args = new Args();
        FormRun basisRelatedForm;

        args.parmEnumType(enumnum(EximAuthorizationType_IN));
        args.parmEnum(schemeType);

        args.caller(this);

        switch (classidget(this))
        {
            case classnum(EximUpd_Approval_IN) :

                switch (schemeTableId)
                {
                    case tablenum(EximAuthorizationSchemesTable_IN) :
                        if (hasMenuItemAccess(menuitemdisplaystr(EximTmpAuthorization_IN),  MenuItemType::Display))
                        {
                            args.name(formstr(EximTmpAuthorization_IN));
                            args.record(authorizationSchemesLine);
                        }
                        else
                        {
                            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximTmpAuthorization_IN)));
                        }
                        break;

                    case tablenum(EximDEPBSchemesTable_IN) :
                        if (hasMenuItemAccess(menuitemdisplaystr(EximDEPBApprove_IN),  MenuItemType::Display))
                        {
                            args.name(formstr(EximDEPBApprove_IN));
                        }
                        else
                        {
                            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximDEPBApprove_IN)));
                        }
                        break;
                }
                break;

            case classnum(EximUpd_Extension_IN) :

                switch (schemeTableId)
                {
                    case tablenum(EximAuthorizationSchemesTable_IN) :
                        if (hasMenuItemAccess(menuitemdisplaystr(EximTmpExtension_IN),  MenuItemType::Display))
                        {
                            args.name(formstr(EximTmpExtension_IN));
                            args.record(authorizationSchemesTable);
                        }
                        else
                        {
                            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximTmpExtension_IN)));
                        }
                        break;

                    case tablenum(EximDEPBSchemesLine_IN) :
                        if (hasMenuItemAccess(menuitemdisplaystr(EximDEPBExtension_IN),  MenuItemType::Display))
                        {
                            args.name(formstr(EximDEPBExtension_IN));
                        }
                        else
                        {
                            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximDEPBExtension_IN)));
                        }
                        break;
                }
                break;

            case classnum(EximUpd_Sale_IN) :

                switch (schemeTableId)
                {
                    case tablenum(EximAuthorizationSchemesTable_IN) :
                        if (hasMenuItemAccess(menuitemdisplaystr(EximAuthorization_Sale_IN),  MenuItemType::Display))
                        {
                            args.name(formstr(EximAuthorization_Sale_IN));
                            args.record(authorizationSchemesTable);
                        }
                        else
                        {
                            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximAuthorization_Sale_IN)));
                        }
                        break;
                    case tablenum(EximDEPBSchemesTable_IN) :
                        if (hasMenuItemAccess(menuitemdisplaystr(EximDEPBSale_IN),  MenuItemType::Display))
                        {
                            args.name(formstr(EximDEPBSale_IN));
                            args.record(depbSchemesTable);
                        }
                        else
                        {
                            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximDEPBSale_IN)));
                        }
                        break;
                }
                break;

            case classnum(EximUpd_Purchase_IN) :

                switch (schemeTableId)
                {
                    case tablenum(EximAuthorizationSchemesTable_IN) :
                        if (hasMenuItemAccess(menuitemdisplaystr(EximAuthorization_Purch_IN),  MenuItemType::Display))
                        {
                            args.name(formstr(EximAuthorization_Purch_IN));
                        }
                        else
                        {
                            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximAuthorization_Purch_IN)));
                        }
                        break;
                    case tablenum(EximDEPBSchemesTable_IN) :
                        if (hasMenuItemAccess(menuitemdisplaystr(EximDEPBPurchase_IN),  MenuItemType::Display))
                        {
                            args.name(formstr(EximDEPBPurchase_IN));
                        }
                        else
                        {
                            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximDEPBPurchase_IN)));
                        }
                        break;
                }
                break;

            case classnum(EximUpd_ReExport_IN) :

                switch (schemeTableId)
                {
                    case tablenum(EximDEPBSchemesTable_IN) :
                        if (hasMenuItemAccess(menuitemdisplaystr(EximDEPBReExport_IN),  MenuItemType::Display))
                        {
                            args.name(formstr(EximDEPBReExport_IN));
                            args.record(depbSchemesTable);
                        }
                        else
                        {
                            throw error(strfmt("@SYS104222", menuitemdisplaystr(EximDEPBReExport_IN)));
                        }
                        break;
                }
                break;
        }
        basisRelatedForm = classFactory.formRunClass(args);
        basisRelatedForm.init();

        return basisRelatedForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAuthorizationScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize authorization scheme.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initAuthorizationScheme()
    {
        Version versionNum;

        if (schemeType == EximAuthorizationType_IN::AA || schemeType == EximAuthorizationType_IN::DFIA)
        {
            authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(schemeTableRecId);
            versionNum                = EximAuthorizationSchemesLine_IN::findVersionNum(schemeTableRecId);
            authorizationSchemesLine  = EximAuthorizationSchemesLine_IN::findByAuthorizationVersionId(schemeTableRecId, versionNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAuthorizationSchemeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts authroization scheme line information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertAuthorizationSchemeLine()
    {
        authorizationSchemesLine.clear();
        authorizationSchemesLine.ImportAssessableValue      = importAssessableValue;
        authorizationSchemesLine.ImportExpiryDate           = importExpiryDate;
        authorizationSchemesLine.iecTaxRegistrationNumber   = TaxRegistrationNumbers_IN::findByNaturalKey(TaxRegistrationType_IN::Company,
                                                                                                              TaxType_IN::Customs,
                                                                                                              iecNumber).RecId;
        authorizationSchemesLine.TaxLedgerAccountGroup      = TaxLedgerAccountGroup_IN::findByTaxAccountGroup(taxAccountGroup).RecId;
        authorizationSchemesLine.LicenseStatus              = this.licenseStatus();

        switch (this.licenseStatus())
        {
            case EximLicenseStatus_IN::Extended:
                authorizationSchemesLine.ExportAssessableValue          = exportAssessableValue;
                authorizationSchemesLine.ExtensionNum                   = licenseNum;
                authorizationSchemesLine.ExtensionDate                  = issueDate;
                authorizationSchemesLine.AuthorizationSchemesTableRecId = schemeTableRecId;
                authorizationSchemesLine.VersionNum                     = EximAuthorizationSchemesLine_IN::findVersionNum(schemeTableRecId) + 1;
                break;

            case EximLicenseStatus_IN::Sold:
                authorizationSchemesLine.AuthorizationSchemesTableRecId = schemeTableRecId;
                authorizationSchemesLine.VersionNum                     = EximAuthorizationSchemesLine_IN::findVersionNum(schemeTableRecId) + 1;
                break;

            case EximLicenseStatus_IN::Original:
                authorizationSchemesLine.AuthorizationSchemesTableRecId = schemeTableRecId;
                break;
        }

        authorizationSchemesLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEximTaxDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts exim tax details.
    /// </summary>
    /// <param name="_voucher">
    /// The instance of the <c>Voucher</c> class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertEximTaxDetails(Voucher _voucher)
    {
        EximTaxDetails_IN taxDetails;

        taxDetails.Voucher                  = _voucher;
        taxDetails.LedgerDimension          = tmpTaxDetails.LedgerDimension;
        taxDetails.TaxAmount                = tmpTaxDetails.TaxAmount;
        taxDetails.TaxComponentTable        = tmpTaxDetails.TaxComponentTable;
        taxDetails.OffsetLedgerDimension    = tmpTaxDetails.OffsetLedgerDimension;
        taxDetails.TaxCode                  = tmpTaxDetails.TaxCode;
        taxDetails.TransDate                = transDate;

        if (schemeType == EximAuthorizationType_IN::DEPB)
        {
            taxDetails.AuthorizationSchemesLineRecId = depbSchemesLine.RecId;
        }
        else
        {
            taxDetails.AuthorizationSchemesLineRecId = authorizationSchemesLine.RecId;
        }

        taxDetails.AuthorizationType = schemeType;

        taxDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSummaryImportableItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts summary importable items.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertSummaryImportableItems()
    {
        EximValue_IN                    value;
        Qty                             qty;
        UnitOfMeasureSymbol             toUnit;
        EximSummaryImportableItems_IN   summaryImportableItems;
        RecordSortedList                summaryImportableItemsList;
        TmpEximImportableItems_IN       tmpImportableItemsLoc;

        summaryImportableItemsList = new RecordSortedList(tablenum(EximSummaryImportableItems_IN));
        summaryImportableItemsList.sortOrder(fieldnum(EximSummaryImportableItems_IN, ItemId));

        while select ItemId from tmpImportableItems
            group by ItemId
        {
            value = 0;
            qty   = 0;

            select firstonly Unit, RecId from summaryImportableItems
                where summaryImportableItems.AuthorizationSchemesTableRecId == schemeTableRecId
                   && summaryImportableItems.ItemId                         == tmpImportableItems.ItemId;

            if (!summaryImportableItems)
            {
                tmpImportableItemsLoc.setTmpData(this.parmTmpEximImportableItems());

                select firstonly Unit from tmpImportableItemsLoc
                    where tmpImportableItemsLoc.ItemId == tmpImportableItems.ItemId;
            }

            toUnit = summaryImportableItems ? summaryImportableItems.Unit : tmpImportableItemsLoc.Unit;

            tmpImportableItemsLoc.setTmpData(this.parmTmpEximImportableItems());

            while select sum(Qty), sum(Value), Unit from tmpImportableItemsLoc
                group by ItemId, Unit
                    where tmpImportableItemsLoc.ItemId == tmpImportableItems.ItemId
            {
                value += tmpImportableItemsLoc.Value;
                qty   += EcoResProductUnitConverter::convertForReleasedProduct(
                                                        tmpImportableItemsLoc.ItemId,
                                                        InventTable::getInventDimId(tmpImportableItemsLoc.ItemId),
                                                        tmpImportableItemsLoc.Qty,
                                                        UnitOfMeasure::unitOfMeasureIdBySymbol(tmpImportableItemsLoc.Unit),
                                                        UnitOfMeasure::unitOfMeasureIdBySymbol(toUnit),
                                                        NoYes::Yes);
            }

            qty = value ? 0 : qty;

            summaryImportableItems.clear();
            summaryImportableItems.AuthorizationSchemesTableRecId = schemeTableRecId;
            summaryImportableItems.LicenseStatus                  = this.licenseStatus();
            summaryImportableItems.VersionNum                     = EximAuthorizationSchemesLine_IN::findVersionNum(schemeTableRecId);
            summaryImportableItems.ItemId                         = tmpImportableItems.ItemId;
            summaryImportableItems.Unit                           = toUnit;
            summaryImportableItems.Value                          = value;
            summaryImportableItems.AllowedValue                   = value;
            summaryImportableItems.Qty                            = qty;
            summaryImportableItems.AllowedQty                     = qty;
            summaryImportableItemsList.ins(summaryImportableItems);
        }

        if (summaryImportableItemsList.len())
        {
            summaryImportableItemsList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the interface name.
    /// </summary>
    /// <returns>
    /// The interface name label id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LabelId interfaceName()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>licenseStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the license status.
    /// </summary>
    /// <returns>
    /// The instance of the <c>EximLicenseStatus_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected EximLicenseStatus_IN licenseStatus()
    {
        return EximLicenseStatus_IN::Original;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportAssessableValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST parmExportAssessableValue(AmountMST _exportAssessableValue = exportAssessableValue)
    {
        exportAssessableValue = _exportAssessableValue;

        return exportAssessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportExpiryDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmExportExpiryDate(TransDate _exportExpiryDate = exportExpiryDate)
    {
        exportExpiryDate = _exportExpiryDate;

        return exportExpiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIECNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRegistrationNumber_IN parmIECNumber(TaxRegistrationNumber_IN _iecNumber = iecNumber)
    {
        iecNumber = _iecNumber;

        return iecNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImportAssessableValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST parmImportAssessableValue(AmountMST _importAssessableValue = importAssessableValue)
    {
        importAssessableValue = _importAssessableValue;

        return importAssessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImportExpiryDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmImportExpiryDate(TransDate _importExpiryDate = importExpiryDate)
    {
        importExpiryDate = _importExpiryDate;

        return importExpiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImportExpiryDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime parmImportExpiryDateTime(TransDateTime _importExpiryDateTime = importExpiryDateTime)
    {
        importExpiryDateTime = _importExpiryDateTime;

        return importExpiryDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIssueDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmIssueDate(TransDate _issueDate = issueDate)
    {
        issueDate = _issueDate;

        return issueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIssueDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime parmIssueDateTime(TransDateTime _issueDateTime = issueDateTime)
    {
        issueDateTime = _issueDateTime;

        return issueDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicenseNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximLicenseNum_IN parmLicenseNumber(EximLicenseNum_IN _licenseNum = licenseNum)
    {
        licenseNum = _licenseNum;

        return licenseNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmPostingStatus(boolean _postingStatus = postingStatus)
    {
        postingStatus = _postingStatus;

        return postingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchemeTableId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public tableId parmSchemeTableId(RefTableId _schemeTableId = schemeTableId)
    {
        schemeTableId = _schemeTableId;

        return schemeTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchemeTableRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmSchemeTableRecId(RefRecId _schemeTableRecId = schemeTableRecId)
    {
        schemeTableRecId = _schemeTableRecId;

        return schemeTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAccountGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAccountGroup_IN parmTaxAccountGroup(TaxAccountGroup_IN _taxAccountGroup = taxAccountGroup)
    {
        taxAccountGroup = _taxAccountGroup;

        return taxAccountGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximEntitlementDetails</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximEntitlementDetails_IN parmTmpEximEntitlementDetails(TmpEximEntitlementDetails_IN _tmpEximEntitlementDetails = tmpEximEntitlementDetails)
    {
        tmpEximEntitlementDetails = _tmpEximEntitlementDetails;

        return tmpEximEntitlementDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximImportableItems</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximImportableItems_IN parmTmpEximImportableItems(TmpEximImportableItems_IN _tmpImportableItems = tmpImportableItems)
    {
        tmpImportableItems = _tmpImportableItems;

        return tmpImportableItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximTaxDetails</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximTaxDetails_IN parmTmpEximTaxDetails(TmpEximTaxDetails_IN _tmpTaxDetails = tmpTaxDetails)
    {
        tmpTaxDetails = _tmpTaxDetails;

        return tmpTaxDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalComponentAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST parmTotalComponentAmount(AmountMST _totalComponentAmount = totalComponentAmount)
    {
        totalComponentAmount = _totalComponentAmount;

        return totalComponentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalDutyEntitlement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST parmTotalDutyEntitlement(AmountMST _totalDutyEntitlement = totalDutyEntitlement)
    {
        totalDutyEntitlement = _totalDutyEntitlement;

        return totalDutyEntitlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferrable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYesId parmTransferrable(NoYesId _transferrable = transferrable)
    {
        transferrable = _transferrable;

        return transferrable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTxt</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximTxt_IN parmTxt(EximTxt_IN _txt = txt)
    {
        txt = _txt;

        return txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// The post method.
    /// </summary>
    /// <returns>
    /// Returns true if the post succeed.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean post()
    {
        LedgerVoucherTransObject ledgerVoucherTransObject;
        CurrencyCode             currencyCode = Ledger::accountingCurrency();
        CurrencyExchangeHelper   exchRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), transDate);

        if (tmpTaxDetails.LedgerDimension)
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucher.findLedgerVoucherObject(),
                                                                                                    LedgerPostingType::Tax,
                                                                                                    tmpTaxDetails.LedgerDimension,
                                                                                                    currencyCode,
                                                                                                    tmpTaxDetails.TaxAmount,
                                                                                                    exchRateHelper);

            ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Summary);
            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }

        if (tmpTaxDetails.OffsetLedgerDimension)
        {
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucher.findLedgerVoucherObject(),
                                                                                                    LedgerPostingType::Tax,
                                                                                                    tmpTaxDetails.OffsetLedgerDimension,
                                                                                                    currencyCode,
                                                                                                    -tmpTaxDetails.TaxAmount,
                                                                                                    exchRateHelper);

            ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Summary);
            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }
        // Returns tru if voucher successfully instantiated and ready for posting.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDutyEntitlementAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total duty entitlement amount.
    /// </summary>
    /// <param name="_eximEntitlementDetails">
    /// The exim entitlement details.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountMST</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST totalDutyEntitlementAmount(TmpEximEntitlementDetails_IN _eximEntitlementDetails)
    {
        TmpEximEntitlementDetails_IN eximEntitlementDetailsLoc;

        eximEntitlementDetailsLoc.setTmpData(_eximEntitlementDetails);

        select sum(DutyEntitlement) from eximEntitlementDetailsLoc;

        totalDutyEntitlement = eximEntitlementDetailsLoc.DutyEntitlement;

        return totalDutyEntitlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxComponentTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax amount of total tax component.
    /// </summary>
    /// <param name="_eximTaxDetails">
    /// The exim tax details.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountMST</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST totalTaxComponentTaxAmount(TmpEximTaxDetails_IN _eximTaxDetails)
    {
        TmpEximTaxDetails_IN eximTaxDetailsLoc;

        eximTaxDetailsLoc.setTmpData(_eximTaxDetails);

        select sum(TaxAmount) from eximTaxDetailsLoc;

        totalComponentAmount = eximTaxDetailsLoc.TaxAmount;

        return totalComponentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates and posts.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateAndPost()
    {
        NumberSeq numberSeq;
        boolean   ok = true;

        if (tmpTaxDetails)
        {
            numberSeq = this.allocateVoucher();

            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                         SysModule::Ledger,
                                                         numberSeq.parmVoucherSequenceCode());

            ledgerVoucher.addVoucher(
                        LedgerVoucherObject::newVoucher(numberSeq.voucher(),
                                                        this.parmTransDate(),
                                                        SysModule::Tax,
                                                        LedgerTransType::Tax));

            while select tmpTaxDetails
            {
                this.insertEximTaxDetails(ledgerVoucher.lastVoucher());

                if (this is EximUpd_Sale_IN)
                {
                    tmpTaxDetails.TaxAmount = (tmpTaxDetails.TaxAmount * -1);
                }

                if (!this.post())
                {
                    ok = false;
                    break;
                }
            }

            ok = ok && ledgerVoucher.end();

            if (!ok)
            {
                throw error("@SYS21533");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAuthorizationScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates authroization scheme information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateAuthorizationScheme()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDEPBSchemeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates DEPB scheme line information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateDEPBSchemeLine()
    {
        depbSchemesLine.clear();
        depbSchemesLine.SchemeTableRecId              = schemeTableRecId;
        depbSchemesLine.DutyEntitlementValue          = totalDutyEntitlement;
        depbSchemesLine.TotalComponentAmount          = totalComponentAmount;
        depbSchemesLine.iecTaxRegistrationNumberTable = TaxRegistrationNumbers_IN::findByNaturalKey(TaxRegistrationType_IN::Company,
                                                                                                                      TaxType_IN::Customs,
                                                                                                                      iecNumber).RecId;
        depbSchemesLine.TaxLedgerAccountGroup               = TaxLedgerAccountGroup_IN::findByTaxAccountGroup(taxAccountGroup).RecId;
        depbSchemesLine.LicenseStatus                 = this.licenseStatus();
        depbSchemesLine.Text                          = txt;

        if (this.licenseStatus() == EximLicenseStatus_IN::Original)
        {
            depbSchemesLine.ImportExpiryDateTime = DateTimeUtil::removeTimeZoneOffset(importExpiryDateTime, DateTimeUtil::getUserPreferredTimeZone());
        }
        else if (this.licenseStatus() == EximLicenseStatus_IN::Extended)
        {
            depbSchemesLine.SchemeTableRecId     = depbSchemesTable.RecId;
            depbSchemesLine.VersionNum           = EximDEPBSchemesLine_IN::findVersionNum(depbSchemesTable.RecId) + 1;
        }
        else
        {
            depbSchemesLine.VersionNum    = EximDEPBSchemesLine_IN::findVersionNum(schemeTableRecId) + 1;
        }

        depbSchemesLine.insert();

        while select tmpEximEntitlementDetails
        {
            eximEntitlementDetails.EximProductGroupTable         = tmpEximEntitlementDetails.EximProductGroupTable;
            eximEntitlementDetails.DutyEntitlement      = tmpEximEntitlementDetails.DutyEntitlement;
            eximEntitlementDetails.ImportExpiryDateTime = DateTimeUtil::removeTimeZoneOffset(importExpiryDateTime, DateTimeUtil::getUserPreferredTimeZone());
            eximEntitlementDetails.SchemesLineRecId     = depbSchemesLine.RecId;
            eximEntitlementDetails.LicenseStatus        = this.licenseStatus();
            eximEntitlementDetails.insert();

                select firstonly forupdate eximDEPBDetails
                    where eximDEPBDetails.SchemesTableRecId == depbSchemesLine.SchemeTableRecId
                       && eximDEPBDetails.EximProductGroupTable      == eximEntitlementDetails.EximProductGroupTable;

            if (eximDEPBDetails)
            {
                if (this.licenseStatus() == EximLicenseStatus_IN::Sold)
                {
                    eximDEPBDetails.Sold += eximEntitlementDetails.DutyEntitlement;
                }
                if (this.licenseStatus() == EximLicenseStatus_IN::Extended)
                {
                    eximDEPBDetails.DutyEntitlement += eximEntitlementDetails.DutyEntitlement;
                }
            }
            else
            {
                eximDEPBDetails.SchemesTableRecId = depbSchemesTable.RecId;
                eximDEPBDetails.EximProductGroupTable      = eximEntitlementDetails.EximProductGroupTable;
                eximDEPBDetails.DutyEntitlement   = eximEntitlementDetails.DutyEntitlement;
            }

            eximDEPBDetails.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeImportDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes import details information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void writeImportDetails()
    {
        EximImportDetails_IN                  importDetails;
        EximSummaryImportableItems_IN         summaryImportableItems;

        if (this.licenseStatus() == EximLicenseStatus_IN::Sold)
        {
            return;
        }

        while select ItemId, Unit, AllowedQty, AllowedValue, AuthorizationSchemesTableRecId
            from summaryImportableItems
                where summaryImportableItems.AuthorizationSchemesTableRecId == authorizationSchemesLine.AuthorizationSchemesTableRecId
                   && summaryImportableItems.LicenseStatus                  == this.licenseStatus()
                   && summaryImportableItems.VersionNum                     == authorizationSchemesLine.VersionNum
        {
            importDetails = EximImportDetails_IN::findByAuthorizationItemId(schemeTableRecId, summaryImportableItems.ItemId, true);

            if (importDetails
                && this.licenseStatus() == EximLicenseStatus_IN::Extended)
            {
                importDetails.Value += summaryImportableItems.AllowedValue;

                importDetails.Qty   = importDetails.Value ? 0 : importDetails.Qty + summaryImportableItems.AllowedQty;
            }
            else
            {
                importDetails.clear();
                importDetails.AuthorizationSchemesTableRecId = summaryImportableItems.AuthorizationSchemesTableRecId;
                importDetails.ItemId                         = summaryImportableItems.ItemId;
                importDetails.Unit                           = summaryImportableItems.Unit;
                importDetails.Qty                            = summaryImportableItems.AllowedQty;
                importDetails.Value                          = summaryImportableItems.AllowedValue;
            }

            importDetails.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The construction of the <c>EximUpdate_IN</c> class.
    /// </summary>
    /// <param name="_menuItemName">
    /// The name of the menu item.
    /// </param>
    /// <returns>
    /// The instance of the <c>EximUpdate_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximUpdate_IN construct(menuItemName _menuItemName)
    {
        switch (_menuItemName)
        {
            case  menuitemactionstr(EximUpd_Approval_IN)      :
            case  menuitemactionstr(EximUpd_DEPBApproval_IN)  : return new EximUpd_Approval_IN();
            case  menuitemactionstr(EximUpd_Extension_IN)     :
            case  menuitemactionstr(EximUpd_DEPBExtension_IN) : return new EximUpd_Extension_IN();
            case  menuitemactionstr(EximUpd_Sale_IN)          :
            case  menuitemactionstr(EximUpd_DEPBSale_IN)      : return new EximUpd_Sale_IN();
            case  menuitemactionstr(EximUpd_Purch_IN)         :
            case  menuitemactionstr(EximUpd_DEPBPurchase_IN)  : return new EximUpd_Purchase_IN();
            case  menuitemactionstr(EximUpd_DEPBReExport_IN)  : return new EximUpd_ReExport_IN();
        }

        throw error(strfmt("@SYS19306", funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Export expiry date.
    /// </summary>
    /// <param name="_schemeType">
    /// The type of the scheme.
    /// </param>
    /// <param name="_issueDate">
    /// The date of the issue.
    /// </param>
    /// <returns>
    /// The date time of the transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TransDate exportExpiryDate(
        EximAuthorizationType_IN _schemeType,
        TransDate                _issueDate)
    {
        EximParameters_IN eximParameters = EximParameters_IN::find();
        TransDate issuedDate = _issueDate;

        switch (_schemeType)
        {
            case EximAuthorizationType_IN::AA:
                if (eximParameters.aaExportPeriod)
                {
                    issuedDate = EximUpdate_IN::fetchDate(eximParameters.aaExportPeriodUnit,
                                                          eximParameters.aaExportPeriod,
                                                _issueDate) - 1;
                }
                break;

            case EximAuthorizationType_IN::DFIA:
                if (eximParameters.dfiaExportPeriod)
                {
                    issuedDate = EximUpdate_IN::fetchDate(eximParameters.dfiaExportPeriodUnit,
                                                          eximParameters.dfiaExportPeriod,
                                                _issueDate) - 1;
                }
                break;
        }

        return dateEndMth(issuedDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetchs date of the issue.
    /// </summary>
    /// <param name="_paymentPer">
    /// The instance of the <c>PaymentPer_IN</c> class.
    /// </param>
    /// <param name="_days">
    /// The instance of the <c>Days_IN</c> class.
    /// </param>
    /// <param name="_issueDate">
    /// The date of the issue.
    /// </param>
    /// <returns>
    /// The instance of the <c>TransDate</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TransDate fetchDate(
        PaymentPer_IN _paymentPer,
        Days_IN       _days,
        TransDate     _issueDate)
    {
        PeriodUnit periodUnit;
        Futures    futures;

        switch (_paymentPer)
        {
            case PaymentPer_IN::Days :
                periodUnit = PeriodUnit::Day;
                break;

            case PaymentPer_IN::Months :
                periodUnit = PeriodUnit::Month;
                break;

            case PaymentPer_IN::Years :
                periodUnit = PeriodUnit::Year;
                break;
        }

        futures = Futures::construct(_issueDate, _days, periodUnit);

        return futures.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>importExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inports expiry date.
    /// </summary>
    /// <param name="_schemeType">
    /// The type of the scheme.
    /// </param>
    /// <param name="_issueDate">
    /// The date of teh issue.
    /// </param>
    /// <returns>
    /// The isntance of the <c>TransDate</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TransDate importExpiryDate(
        EximAuthorizationType_IN _schemeType,
        TransDate                _issueDate)
    {
        EximParameters_IN eximParameters = EximParameters_IN::find();
        TransDate issuedDate = _issueDate;

        switch (_schemeType)
        {
            case EximAuthorizationType_IN::AA:
                if (eximParameters.aaImportPeriod)
                {
                    issuedDate = EximUpdate_IN::fetchDate(eximParameters.aaImportPeriodUnit,
                                                          eximParameters.aaImportPeriod,
                                                _issueDate) - 1;
                }
                break;

            case EximAuthorizationType_IN::DFIA:
                if (eximParameters.dfiaImportPeriod)
                {
                    issuedDate = EximUpdate_IN::fetchDate(eximParameters.dfiaImportPeriodUnit,
                                                          eximParameters.dfiaImportPeriod,
                                                _issueDate) - 1;
                }
                break;
            case EximAuthorizationType_IN::DEPB:
                if (eximParameters.depbImportPeriod)
                {
                    issuedDate = EximUpdate_IN::fetchDate(eximParameters.depbImportPeriodUnit,
                                                          eximParameters.depbImportPeriod,
                                                _issueDate) - 1;
                }
                break;
        }

        return dateEndMth(issuedDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Common                          record;
        FormDataSource                  formDataSource;
        menuItemName                    menuItemName;
        EximUpdate_IN                   eximUpdate;
        EximAuthorizationSchemesLine_IN authorizationSchemesLine;

        if (!_args || !_args.record())
        {
            throw error("@SYS25407");
        }

        menuItemName  = _args.menuItemName();
        eximUpdate    = EximUpdate_IN::construct(menuItemName);
        record        = _args.record();

        eximUpdate.parmSchemeTableRecId(record.RecId);
        eximUpdate.parmSchemeTableId(record.TableId);

        if (record.TableId == tablenum(EximAuthorizationSchemesLine_IN))
        {
            authorizationSchemesLine = record;
            eximUpdate.parmSchemeTableId(tablenum(EximAuthorizationSchemesTable_IN));
            eximUpdate.parmSchemeTableRecId(authorizationSchemesLine.AuthorizationSchemesTableRecId);
        }
        else
        {
            eximUpdate.parmSchemeTableId(record.TableId);
            eximUpdate.parmSchemeTableRecId(record.RecId);
        }

        eximUpdate.authorizationType();
        eximUpdate.initAuthorizationScheme();

        if (eximUpdate.prompt() && eximUpdate.parmPostingStatus())
        {
            eximUpdate.runOperation();

            formDataSource  = FormDataUtil::getFormDataSource(_args.record());

            EximUpdate_IN::updateCallerDataSource(formDataSource, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectAuthorization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Regects authorization.
    /// </summary>
    /// <param name="_authorizationRecId">
    /// The record id of the authorization.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void rejectAuthorization(RefRecId _authorizationRecId)
    {
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        EximAnnualConsumption_IN         annualConsumption;
        EximSummaryImportableItems_IN    summaryImportableItems;
        EximConfirmOrderTable_IN         confirmOrderTable;
        EximExportOrderTable_IN          exportOrderTable;
        EximImportableItems_IN           importableItems;

        ttsbegin;
        authorizationSchemesTable        = EximAuthorizationSchemesTable_IN::find(_authorizationRecId, true);
        authorizationSchemesTable.Status = EximAuthorizationStatus_IN::Rejected;
        authorizationSchemesTable.update();

        switch (authorizationSchemesTable.AuthorizationBasis)
        {
            case EximAuthorizationBasis_IN::AnnualConsumption:
                delete_from annualConsumption
                    where annualConsumption.AuthorizationSchemesTableRecId == _authorizationRecId;
                break;

            case EximAuthorizationBasis_IN::ConfirmedOrder:
                delete_from confirmOrderTable
                    where confirmOrderTable.AuthorizationSchemesTableRecId == _authorizationRecId;
                break;

            case EximAuthorizationBasis_IN::ExportOrder:
                delete_from exportOrderTable
                    where exportOrderTable.AuthorizationSchemesTableRecId == _authorizationRecId;
                break;
        }

        delete_from summaryImportableItems
            where summaryImportableItems.AuthorizationSchemesTableRecId == _authorizationRecId;

        delete_from importableItems
            where importableItems.AuthorizationSchemesTableRecId == _authorizationRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectDEPBScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rejects DEPB scheme.
    /// </summary>
    /// <param name="_schemeTableRecId">
    /// The table record id of the scheme.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void rejectDEPBScheme(RefRecId _schemeTableRecId)
    {
        EximDEPBSchemesTable_IN     depbSchemesTable;
        EximDEPBExportOrderTable_IN depbExportOrderTable;

        ttsbegin;
        depbSchemesTable        = EximDEPBSchemesTable_IN::findRecId(_schemeTableRecId,true);
        depbSchemesTable.Status = EximAuthorizationStatus_IN::Rejected;
        depbSchemesTable.update();

        switch (depbSchemesTable.Basis)
        {
            case EximDEPBBasis_IN::ExportOrder:
                delete_from depbExportOrderTable
                    where depbExportOrderTable.SchemeTableRecId == _schemeTableRecId;
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates data source of the caller.
    /// </summary>
    /// <param name="_formDataSource">
    /// The data source.
    /// </param>
    /// <param name="_recordExists">
    /// If 'True', the record exits.
    /// </param>
    // Method set to client static to be run on the client to minimize the interaction between tiers.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void updateCallerDataSource(
        Object  _formDataSource = null,
        boolean _recordExists   = false)
    {
        if (_recordExists)
        {
            _formDataSource.executeQuery();
        }
        else
        {
            _formDataSource.reSearch();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>