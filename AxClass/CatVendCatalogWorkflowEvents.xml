<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendCatalogWorkflowEvents</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatVendCatalogWorkflowEvents  implements
                                    WorkflowStartedEventHandler,
                                    WorkflowCanceledEventHandler

{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the canceled event for the workflow document.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        CatVendorCatalogMaintenanceRequest  catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorImportStatus               catVendorImportStatus;
        CatVendorCatalog                    catVendorCatalog;
        catVendorCatalogMaintenanceRequest  = CatVendorCatalogMaintenanceRequest::findRecId(_workflowEventArgs.parmWorkflowContext().parmRecId(),true);

        catVendorCatalog = CatVendorCatalog::findRecId(catVendorCatalogMaintenanceRequest.VendorCatalog);

        if (catVendorCatalog.IsDeleted == NoYes::Yes)
        {
            catVendorImportStatus = CatVendorImportStatus::Succeeded_Warnings;
        }
        else
        {
            // Delete all the approved products when user recalls the workflow from wrokflow form.
            //(In case of cancelation of workflow is done when catalog is deleted, the deletion of approved
            // products will be handled in a separate catalog file with new workflow process.)
            this.deleteApprovedProducts(catVendorCatalogMaintenanceRequest.RecId);
            catVendorImportStatus = CatVendorImportStatus::Canceled;
        }

        ttsbegin;
        catVendorCatalogMaintenanceRequest.WorkflowStatus = CatMaintenanceRequestWfStatus::Canceled;
        catVendorCatalogMaintenanceRequest.LastImportStatus =  catVendorImportStatus;
        catVendorCatalogMaintenanceRequest.update();

        // Log an event that workflow for catalog file has been canceled.
        CatVendorCatalogImportEventLog::logEvent(catVendorCatalogMaintenanceRequest.RecId,CatImportProcessingMessageType::Warning,
                                                                    CatVendorCatalogProcessingState::ImportFail,"@SYS330408");

        //Update all the products status to cancel on which no action taken yet.
        update_recordset catVendorProductCandidate
        setting
            Status = CatVendorProductStatus::Canceled
        where catVendorProductCandidate.CatalogMaintenanceRequest == catVendorCatalogMaintenanceRequest.RecId
                && (catVendorProductCandidate.Status != CatVendorProductStatus::Approved && catVendorProductCandidate.Status != CatVendorProductStatus::Rejected);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteApprovedProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the vendor product as deleted.
    /// </summary>
    /// <param name="_catVendorCatalogMaintenanceRequestID">
    /// The ID of <c>CatVendorCatalogMaintenanceRequest</c> table record.
    /// </param>
    /// <remarks>
    /// This method also stops the item from purchasing, if available.
    /// </remarks>
    private void deleteApprovedProducts(RefRecId _catVendorCatalogMaintenanceRequestID)
    {
        CatVendorProductCandidate           catVendorProductCandidate;
        CatVendorCatalogProductApproval     catVendorCatalogProductApproval;

        catVendorCatalogProductApproval = new CatVendorCatalogProductApproval();
        while select RecId from catVendorProductCandidate
            where catVendorProductCandidate.CatalogMaintenanceRequest == _catVendorCatalogMaintenanceRequestID
               && catVendorProductCandidate.Status == CatVendorProductStatus::Approved
        {
            catVendorCatalogProductApproval.deleteProduct(catVendorProductCandidate.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the started event for the workflow document.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        CatVendorCatalogMaintenanceRequest   catVendorCatalogMaintenanceRequest;
        catVendorCatalogMaintenanceRequest = CatVendorCatalogMaintenanceRequest::findRecId(_workflowEventArgs.parmWorkflowContext().parmRecId(),true);

        ttsbegin;
        catVendorCatalogMaintenanceRequest.LastImportStatus = CatVendorImportStatus::PendingApproval;
        catVendorCatalogMaintenanceRequest.update();
        ttscommit;
        CatVendorCatalogImportEventLog::logEvent(catVendorCatalogMaintenanceRequest.RecId,CatImportProcessingMessageType::Info,
                                                                    CatVendorCatalogProcessingState::PendingApproval,"@SYS191085");

        CatVendorReleaseCatalog::updateCatalog(CatVendorCatalog::findRecId(catVendorCatalogMaintenanceRequest.VendorCatalog));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>