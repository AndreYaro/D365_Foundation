<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestNoteContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInterestNoteContract</c> class is the data contract class for the
///    <c>CustInterestNote</c> SSRS report
/// </summary>
/// <remarks>
///    This is the data contract class for the <c>CustInterestNote</c> SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(CustInterestNoteUIBuilder),
    SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class CustInterestNoteContract
    implements SysOperationValidatable, SysOperationInitializable
{
    RecId recordId;
    Str60 printType;

    NoYes inclTransWithNoBillingClass;
    List billingClassification;

    NoYes markOpenInvoiceLine;

    LogisticsAddressCountryRegionISOCode countryContext;
    private boolean hideSSRSDestination;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data contract values.
    /// </summary>
    public void initialize()
    {
        billingClassification = new List(Types::String);

        if (!CustParameters::isBillingClassificationEnabled())
        {
            billingClassification.addEnd(SysLabel::labelId2String(literalStr("@GLS223107")));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillingClassification</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('BillingClassification'),
        SysOperationLabelAttribute(literalStr("@SPS371")),
        SysOperationHelpTextAttribute(literalStr("@SPS677")),
        SysOperationDisplayOrderAttribute('0'),
        AifCollectionTypeAttribute('return', Types::String)
    ]
    public List parmBillingClassification(List _billingClassification = billingClassification)
    {
        billingClassification = _billingClassification;
        return billingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryContext</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(CountryContext))
    ]
    public LogisticsAddressCountryRegionISOCode parmCountryContext(LogisticsAddressCountryRegionISOCode _countryContext = countryContext)
    {
        countryContext = _countryContext;
        return countryContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInclTransWithNoBillingClass</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('InclTransWithNoBillingClass'),
        SysOperationLabelAttribute(literalStr("@SPS691")),
        SysOperationHelpTextAttribute(literalStr("@SPS1009")),
        SysOperationDisplayOrderAttribute('0')
    ]
    public NoYes parmInclTransWithNoBillingClass(NoYes _inclTransWithNoBillingClass = inclTransWithNoBillingClass)
    {
        inclTransWithNoBillingClass = _inclTransWithNoBillingClass;
        return inclTransWithNoBillingClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkOpenInvoiceLine</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('MarkOpenInvoiceLine'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public NoYes parmMarkOpenInvoiceLine(NoYes _markOpenInvoiceLine = markOpenInvoiceLine)
    {
        markOpenInvoiceLine = CustParameters::findByCompany(curext()).MarkOpenInvoiceLine;
        return markOpenInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter printType.
    /// </summary>
    /// <param name="_printType">
    /// The new value of the datacontract parameter printType; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter printType
    /// </returns>
    [DataMemberAttribute('PrintType')]
    public Str60 parmPrintType(Str60 _printType = printType)
    {
        printType = _printType;
        return printType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter RecordId.
    /// </summary>
    /// <param name="_recordId">
    /// The new value of the datacontract parameter RecordId.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter RecordId.
    /// </returns>
    [DataMemberAttribute('RecordId')]
    public RecId parmRecordId(RecId _recordId = recordId)
    {
        recordId = _recordId;
        return recordId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the dialog values for errors. The dialog values are handled through the contract.
    /// </summary>
    /// <returns>
    /// False if an error has occured in the dialog values; otherwise true.
    /// </returns>
    public boolean validate()
    {
        return CustBillingClassificationReportManager::validate(billingClassification, inclTransWithNoBillingClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHideSSRSDestination</Name>
				<Source><![CDATA[
    public boolean parmHideSSRSDestination(boolean _hideSSRSDestination = hideSSRSDestination)
    {
        hideSSRSDestination = _hideSSRSDestination;
        return hideSSRSDestination;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>