<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_EcoResProductDetailsExtended</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PmfFormCtrl_EcoResProductDetailsExtended</c> class serves as a form control for the <c>EcoResProductDetailsExtende</c> form.
/// </summary>
public class PmfFormCtrl_EcoResProductDetailsExtended extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowPotencyDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the item has a base batch attribute defined.
    /// </summary>
    /// <returns>
    /// true if a base batch attribute is defined; otherwise, false.
    /// </returns>
    public NoYes allowPotencyDetail()
    {
        InventTable     inventTable = buffer;

        return #PDSPotencyEnabled && inventTable.PDSBaseAttributeId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowTargetValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the potency target value can be edited.
    /// </summary>
    /// <returns>
    /// true if the potency target value for the item can be edited; otherwise, false.
    /// </returns>
    public boolean allowTargetValue()
    {
        InventTable     inventTable = buffer;
        boolean         ret = #PDSPotencyEnabled;

        ret = ret && inventTable.PDSBaseAttributeId != '';

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBatchAttribByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if current item has any batch attributes defined.
    /// </summary>
    /// <returns>
    /// A true value if at least one batch attributes have been defined for the item; otherwise false.
    /// </returns>
    /// <remarks>
    /// The method first checks if the batch attributes config key is enabled
    /// before doing the select.
    /// </remarks>
    public boolean hasBatchAttribByItem()
    {
        InventTable     inventTable = buffer;

        return #PdsBatchAttribEnabled
                && PdsBatchAttribByItem::existItemIdAny(inventTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(EcoResProductDetailsExtended,EngineerBOM)),
                methodstr(PmfFormCtrl_EcoResProductDetailsExtended, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO529");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(EcoResProductDetailsExtended,PDSPotency_PDSBaseAttributeId)),
                methodStr(PmfFormCtrl_EcoResProductDetailsExtended, hasBatchAttribByItem),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(EcoResProductDetailsExtended,ButtonGroupSequencing)),
                methodStr(PmfFormCtrl_EcoResProductDetailsExtended, isSequencingEnabled),
                ButtonRuleEffectType::Enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item production type <c>PmfProductType::Formula</c> is enabled.
    /// </summary>
    /// <returns>
    /// A true value if the item production type is <c>PmfProductType::Formula</c>; otherwise false.
    /// </returns>
    /// <remarks>
    /// The call also checks the PMF configuration key.
    /// </remarks>
    public NoYes isFormulaEnabled()
    {
        InventTable     inventTable = buffer;

        return #PmfEnabled && inventTable.isFormulaAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item is a regular item.
    /// </summary>
    /// <returns>
    /// A true value if the item is not Catch-Weight; otherwise, false.
    /// </returns>
    public NoYes isItemCW()
    {
        InventTable inventTable = buffer;
        return PdsGlobal::pdsIsCWItem(inventTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemNotCW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the item is a regular item.
    /// </summary>
    /// <returns>
    /// A true value if the item is not Catch-Weight; otherwise, false.
    /// </returns>
    public NoYes isItemNotCW()
    {
        return !this.isItemCW();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSequencingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if sequencing should be enabled for the current product.
    /// </summary>
    /// <returns>
    /// true if sequencing should be enabled; otherwise, false.
    /// </returns>
    public boolean isSequencingEnabled()
    {
        return  #PMFSequencingEnabled
              && this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// Form Data source used by class - InventTable
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// Default value - null.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(InventTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_EcoResProductDetailsExtended construct()
    {
        return new PmfFormCtrl_EcoResProductDetailsExtended();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PmfFormCtrl_EcoResProductDetailsExtended</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// A new instance of class <c>PmfFormCtrl_EcoResProductDetailsExtended</c>
    /// </returns>
    /// <remarks>
    /// Initiates the creation of a new class derived from
    /// <c>PmfFormCtrl_EcoResProductDetailsExtended</c> and sets the formRun variable
    /// to the value of the calling form.
    /// </remarks>
    public static PmfFormCtrl_EcoResProductDetailsExtended newFromForm(FormRun _fr)
    {
        PmfFormCtrl_EcoResProductDetailsExtended frmCtrl;

        frmCtrl = PmfFormCtrl_EcoResProductDetailsExtended::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>