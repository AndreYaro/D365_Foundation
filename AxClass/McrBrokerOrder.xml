<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrBrokerOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRBrokerOrder</c> class creates charges when the sales line
/// meets at least one criteria on a broker contract, only one charge is
/// created for each contract.
/// </summary>
class McrBrokerOrder
{
    SalesLine   salesLine;
    ItemGroupId itemGroupId;

    #localMacro.ContractLineConditions
        where %1.ContractID == %2
            && ((%1.ItemCode == PriceDiscProductCodeType::Table
                && %1.ItemRelation == salesLine.ItemId)
            || (%1.ItemCode == PriceDiscProductCodeType::GroupId
                && %1.ItemRelation == itemGroupID)
            || %1.ItemCode == PriceDiscProductCodeType::All)
            && ((%1.AccountCode == PriceDiscPartyCodeType::Table
                && %1.AccountRelation == salesLine.CustAccount)
            || (%1.AccountCode == PriceDiscPartyCodeType::GroupId
                && %1.AccountRelation == salesLine.CustGroup)
            || %1.AccountCode == PriceDiscPartyCodeType::All)
    #endMacro

    #localMacro.ContractLineConditionsBreaks
            // If the break type is Qty, this sales line has a greater SalesQty than the contract line
            && ((%1.AmountType == MCRAmountQty::Qty
                && %1.Amount <= %2)
            // If the break type is Amount, this sales line's lineAmount is greater than the contract line
            || (%1.AmountType == MCRAmountQty::Amount
                && %1.Amount <= %3))
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustCalcBrokerageForSalesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if broker fees need to be calculated for the provided <c>SalesType</c> value.
    /// </summary>
    /// <param name = "_salesType">Type of sales document.</param>
    /// <returns>true, if broker fees need to be calculated; otherwise, false.</returns>
    public boolean mustCalcBrokerageForSalesType(SalesType _salesType)
    {
        return _salesType == SalesType::Sales
            || _salesType == SalesType::ReturnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesQtyForBrokerageCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the sales quantity to use for calculating broker fees.
    /// </summary>
    /// <param name = "_salesLine">Sales line record.</param>
    /// <returns>Sales quantity to use for calculation.</returns>
    public SalesQty getSalesQtyForBrokerageCalc(SalesLine _salesLine)
    {
        // Returns orders and credit notes have the return quantity in
        //  different fields.
        // For blind returns use expected return quantity
        if (salesLine.SalesType == SalesType::ReturnItem)
        {
            return abs(salesLine.ExpectedRetQty);
        }

        // For normal orders or returns created from SO form use sales quantity
        return abs(salesLine.SalesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBrokerage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates broker fees for an order.
    /// </summary>
    /// <param name="_salesLine">
    ///     The sales line for which the brokerage is to be calculated.
    /// </param>
    /// <param name="_deleteAllBrokerage">
    ///     true if need to delete all brokerage fees; otherwise, false.
    /// </param>
    /// <returns>
    ///     The amount of the brokerage.
    /// </returns>
    final public AmountCur calcBrokerage(SalesLine _salesLine, boolean _deleteAllBrokerage = true)
    {
        AmountCur               totalBrokerage;
        MCRBrokerContractTable  mcrBrokerContractTable;
        MCRBrokerContractTable  mcrBrokerContractTableCurrency;
        MCRBrokerContractLine   mcrBrokerContractLine;
        MCRBrokerContractLine   mcrBrokerContractLineCurrency;
        date                    todaysDate;
        AmountMST               lineAmount;

        salesLine  = _salesLine;

        // Delete all broker commissions and recalculate
        if (_deleteAllBrokerage)
        {
            this.deleteAllBrokerage();
        }

        if (this.mustCalcBrokerageForSalesType(salesLine.SalesType))
        {
            SalesQty salesQty = this.getSalesQtyForBrokerageCalc(salesLine);

            // If returning against an order, copy commissions from original.
            if (salesLine.RefReturnInvoiceTrans_W)
            {
                totalBrokerage = this.calcReturn(salesQty);
            }
            else if (salesLine.SalesQty > 0)
            {
                todaysDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                itemGroupId = salesLine.inventTable().itemGroupId();
                
                // Loop through all currencies that are part of applicable contracts
                SysDaQueryObject qeBrokerContractTableCurrency = this.buildMCRBrokerContractTableQuery(mcrBrokerContractTableCurrency, todaysDate);
                SysDaSearchObject	 soBrokerContractTableCurrency = new SysDaSearchObject(qeBrokerContractTableCurrency);
                SysDaSearchStatement ssBrokerContractTableCurrency = new SysDaSearchStatement();

                while (ssBrokerContractTableCurrency.findNext(soBrokerContractTableCurrency))
                {
                    lineAmount = salesLine.LineAmount;
                    // Convert amount from sales order currency to contract currency, if they differ
                    if (salesLine.CurrencyCode != mcrBrokerContractTableCurrency.Currency)
                    {
                        lineAmount = abs(CurrencyExchangeHelper::curAmount2CurAmount(lineAmount, salesLine.CurrencyCode, mcrBrokerContractTableCurrency.Currency));
                    }

                    SysDaQueryObject qeBrokerContractTable = this.buildMCRBrokerContractTableQuery(mcrBrokerContractTable, todaysDate, false, mcrBrokerContractTableCurrency.Currency, lineAmount, salesQty);
                    SysDaSearchObject	 soBrokerContractTable = new SysDaSearchObject(qeBrokerContractTable);
                    SysDaSearchStatement ssBrokerContractTable = new SysDaSearchStatement();
                        
                    // Create commissions by currency
                    while (ssBrokerContractTable.findNext(soBrokerContractTable))
                    {
                        totalBrokerage += this.calcSales(mcrBrokerContractTable, lineAmount, salesQty);
                    }
                }
            }
        }

        return totalBrokerage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMCRBrokerContractTableQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryObject buildMCRBrokerContractTableQuery(MCRBrokerContractTable _mcrBrokerContractTable, 
                                                                date _todaysDate,
                                                                boolean currencyGrouping = true,
                                                                CurrencyCode _currencyCode = '',
                                                                AmountMST _lineAmount = 0,
                                                                SalesQty _salesQty = 0)
    {
        SysDaQueryObject qeBrokerContractTable = new SysDaQueryObject(_mcrBrokerContractTable);

        qeBrokerContractTable.projection()
            .add(fieldStr(MCRBrokerContractTable, ContractID))
            .add(fieldStr(MCRBrokerContractTable, Currency));

        if (currencyGrouping)
        {
            qeBrokerContractTable.groupByClause()
                .add(fieldStr(MCRBrokerContractTable, Currency));
        }

        SysDaQueryExpression contractTableConditionWhereClause = this.buildWhereClauseContractTableConditions(_mcrBrokerContractTable, _todaysDate, currencyGrouping, _currencyCode);
        qeBrokerContractTable.whereClause(contractTableConditionWhereClause);

        MCRBrokerContractLine mcrBrokerContractLine;
        SysDaQueryObject qeBrokerContractLine = new SysDaQueryObject(mcrBrokerContractLine);
        SysDaQueryExpression contractLineConditionWhereClause = this.buildWhereClauseContractLineConditions(mcrBrokerContractLine, 
            new SysDaFieldExpression(_mcrBrokerContractTable, fieldStr(MCRBrokerContractTable, ContractId)));
        
        if (!currencyGrouping)
        {
            SysDaQueryExpression contractLineConditionsBreaksWhereClause = this.buildWhereClauseContractLineConditionsBreaks(mcrBrokerContractLine, _lineAmount, _salesQty);
            contractLineConditionWhereClause = contractLineConditionWhereClause.and(contractLineConditionsBreaksWhereClause);
        }
        qeBrokerContractLine.whereClause(contractLineConditionWhereClause);

        qeBrokerContractTable.joinClause(SysDaJoinKind::ExistsJoin, qeBrokerContractLine);
        
        return qeBrokerContractTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseContractTableConditions</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildWhereClauseContractTableConditions(MCRBrokerContractTable _mcrBrokerContractTable, 
                                                                            date _todaysDate, 
                                                                            boolean _currencyGrouping,
                                                                            CurrencyCode _currencyCode)
    {
        date dateNull = dateNull();
        SysDaQueryExpression contractTableConditionWhereClause =
                    (new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractTable, fieldStr(MCRBrokerContractTable, Status)), new SysDaValueExpression(MCRBrokerContractStatus::Approved))
                    .and((new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractTable, fieldStr(MCRBrokerContractTable, FromDate)), new SysDaValueExpression(dateNull)))
                        .or(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractTable, fieldStr(MCRBrokerContractTable, FromDate)), new SysDaValueExpression(_todaysDate))))
                    .and((new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractTable, fieldStr(MCRBrokerContractTable, ToDate)), new SysDaValueExpression(dateNull)))
                        .or(new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractTable, fieldStr(MCRBrokerContractTable, ToDate)), new SysDaValueExpression(_todaysDate)))));
                        
        if (!_currencyGrouping)
        {
            contractTableConditionWhereClause = contractTableConditionWhereClause
                    .and(new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractTable, fieldStr(MCRBrokerContractTable, Currency)), new SysDaValueExpression(_currencyCode)));
        }
                          
        return contractTableConditionWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReturn</Name>
				<Source><![CDATA[
    private AmountCur calcReturn(SalesQty _salesQty)
    {
        CustInvoiceTrans        custInvoiceTrans;
        MarkupTrans             markupTrans;
        real                    workPercent;
        MarkupValue             markupValue;
        AmountCur               totalBrokerage;
        MCRBrokerCommission     mcrBrokerCommission;

        while select Qty from custInvoiceTrans
            where  custInvoiceTrans.RecId  == salesLine.RefReturnInvoiceTrans_W
                && custInvoiceTrans.Qty > 0
            join markupTrans
                where markupTrans.TransRecId == custInvoiceTrans.RecId
                   && markupTrans.mcrBrokerContractFee  == NoYes::Yes
                   && markupTrans.TransTableId == tableNum(CustInvoiceTrans)
                join ContractID, BrokerID from mcrBrokerCommission
                    where mcrBrokerCommission.MarkupTransRecID == markupTrans.OrigRecId
        {
            // If returning more than the invoiced amount on the related line, set
            // return broker amount to the value of the current charge.

            if (markupTrans.MarkupCategory == MarkupCategory::Fixed)
            {
                if (_salesQty < custInvoiceTrans.Qty)
                {
                    workPercent = _salesQty / custInvoiceTrans.Qty;
                    markupValue = -markupTrans.Value * workPercent;
                }
                else
                {
                    markupValue = -markupTrans.Value;
                }
            }
            else
            {
                markupValue = markupTrans.Value;
            }

            if (markupValue)
            {
                if (markupTrans.CurrencyCode != salesLine.CurrencyCode)
                {
                    markupValue = Markup::convertChargeValue(markupValue, markupTrans.MarkupCategory, markupTrans.CurrencyCode, salesLine.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                }
                else
                {
                    markupValue = Markup::roundChargeValue(markupValue, markupTrans.MarkupCategory, salesLine.CurrencyCode);
                }


                MCRBrokerVendAccount commissionBrokerId = MCRBrokerOrderCalcReturnBrokerIDFlight::instance().isEnabled() 
                                                            ? mcrBrokerCommission.BrokerID
                                                            : MCRBrokerContractTable::find(mcrBrokerCommission.ContractID).BrokerID;
                
                totalBrokerage += this.writeBrokerage(markupTrans.MarkupCode,
                                                      markupValue,
                                                      markupTrans.MarkupCategory,
                                                      salesLine.CurrencyCode,
                                                      mcrBrokerCommission.ContractID,
                                                      markupTrans.TaxGroup,
                                                      markupTrans.LineNum,
                                                      commissionBrokerId);
            }
        }

        return totalBrokerage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the brokerage contract amount on a sales line.
    /// </summary>
    /// <param name="_mcrBrokerContractTable">
    /// The brokerage contract record on the order.
    /// </param>
    /// <param name="_lineAmount">
    /// The line amount on the sales line.
    /// </param>
    /// <param name="_salesQty">
    /// The sales quantity of the sales line.
    /// </param>
    /// <returns>
    /// The brokerage contract amount on the sales line.
    /// </returns>
    protected AmountCur calcSales(MCRBrokerContractTable _mcrBrokerContractTable,
                                AmountMST   _lineAmount,
                                SalesQty    _salesQty)
    {
        MCRBrokerContractLine   mcrBrokerContractLine;
        AmountCur               lineBrokerage = 0;

        SysDaQueryObject qeBrokerContractLine = this.buildMCRBrokerContractLineQuery(mcrBrokerContractLine, _mcrBrokerContractTable.ContractID, _lineAmount, _salesQty);
        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.find(new SysDaFindObject(qeBrokerContractLine));

        if (mcrBrokerContractLine)
        {
            container markupValueAndCategory = this.initializeMarkupValueAndCategory(mcrBrokerContractLine, _mcrBrokerContractTable);
            
            if (markupValueAndCategory == conNull())
            {
                throw error(strFmt("@MCR34432", enum2str(mcrBrokerContractLine.ValueType)));
            }

            MarkupCategory  markupCategory;
            MarkupValue     markupValue = 0;
            [markupValue, markupCategory] = markupValueAndCategory;

            if (markupValue != 0)
            {
                boolean chargeBrokerContractIfSalesLineCurrencyMatch = McrBrokerOrderSalesLineBrokerContractCurrencyMatchFlight::instance().isEnabled();
                
                if ((chargeBrokerContractIfSalesLineCurrencyMatch && _mcrBrokerContractTable.Currency == salesLine.CurrencyCode)
                    || !chargeBrokerContractIfSalesLineCurrencyMatch)
                {
                    lineBrokerage += this.writeBrokerage(mcrBrokerContractLine.MiscChargeCode,
                                        markupValue,
                                        markupCategory,
                                        salesLine.CurrencyCode,
                                        mcrBrokerContractLine.ContractID,
                                        mcrBrokerContractLine.TaxGroup ? mcrBrokerContractLine.TaxGroup : salesLine.TaxGroup,
                                        0,
                                        MCRBrokerContractTable::find(mcrBrokerContractLine.ContractID).BrokerID);
                }
            }
        }

        return lineBrokerage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMCRBrokerContractLineQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryObject buildMCRBrokerContractLineQuery(MCRBrokerContractLine _mcrBrokerContractLine, 
                                                                MCRBrokerContractID _contractId, 
                                                                AmountMST _lineAmount, 
                                                                SalesQty _salesQty)
    {
        SysDaQueryObject qeBrokerContractLine = new SysDaQueryObject(_mcrBrokerContractLine);

        qeBrokerContractLine.projection()
            .add(fieldStr(MCRBrokerContractLine, ValueType))
            .add(fieldStr(MCRBrokerContractLine, Value))
            .add(fieldStr(MCRBrokerContractLine, MiscChargeCode))
            .add(fieldStr(MCRBrokerContractLine, ContractID))
            .add(fieldStr(MCRBrokerContractLine, TaxGroup))
            .add(fieldStr(MCRBrokerContractLine, RecId));

        qeBrokerContractLine.orderByClause()
            .addDescending(fieldStr(MCRBrokerContractLine, Amount))
            .add(fieldStr(MCRBrokerContractLine, ItemCode))
            .add(fieldStr(MCRBrokerContractLine, AccountCode));

        qeBrokerContractLine.firstOnlyHint = true;

        SysDaQueryExpression contractLineConditionWhereClause = this.buildWhereClauseContractLineConditions(_mcrBrokerContractLine, new SysDaValueExpression(_contractId));
        SysDaQueryExpression contractLineConditionsBreaksWhereClause = this.buildWhereClauseContractLineConditionsBreaks(_mcrBrokerContractLine, _lineAmount, _salesQty);
        qeBrokerContractLine.whereClause(contractLineConditionWhereClause.and(contractLineConditionsBreaksWhereClause));
        
        return qeBrokerContractLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseContractLineConditions</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildWhereClauseContractLineConditions(MCRBrokerContractLine _mcrBrokerContractLine, SysDaQueryExpression _contractIdExpression) 
    {
        SysDaQueryExpression contractLineConditionWhereClause =
                    (new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, ContractID)), _contractIdExpression)
                    .and((new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, ItemCode)), new SysDaValueExpression(PriceDiscProductCodeType::Table))
                            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, ItemRelation)),  new SysDaValueExpression(salesLine.ItemId))))
                        .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, ItemCode)), new SysDaValueExpression(PriceDiscProductCodeType::GroupId))
                            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, ItemRelation)),  new SysDaValueExpression(itemGroupID))))
                        .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, ItemCode)), new SysDaValueExpression(PriceDiscProductCodeType::All))))
                    .and((new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, AccountCode)), new SysDaValueExpression(PriceDiscPartyCodeType::Table))
                            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, AccountRelation)),  new SysDaValueExpression(salesLine.CustAccount))))
                        .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, AccountCode)), new SysDaValueExpression(PriceDiscPartyCodeType::GroupId))
                            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, AccountRelation)),  new SysDaValueExpression(salesLine.CustGroup))))
                        .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, AccountCode)), new SysDaValueExpression(PriceDiscPartyCodeType::All)))));
                          
        return contractLineConditionWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseContractLineConditionsBreaks</Name>
				<Source><![CDATA[
    protected SysDaQueryExpression buildWhereClauseContractLineConditionsBreaks(MCRBrokerContractLine _mcrBrokerContractLine, 
                                                                                AmountMST _lineAmount,
                                                                                SalesQty _salesQty)
    {
        SysDaQueryExpression contractLineConditionsBreaksWhereClause =
                    // If the break type is Qty, this sales line has a greater SalesQty than the contract line
                    ((new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, AmountType)), new SysDaValueExpression(MCRAmountQty::Qty))
                        .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, Amount)), new SysDaValueExpression(_salesQty))))
                    // If the break type is Amount, this sales line's lineAmount is greater than the contract line
                    .or(new SysDaEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, AmountType)), new SysDaValueExpression(MCRAmountQty::Amount))
                        .and(new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(_mcrBrokerContractLine, fieldStr(MCRBrokerContractLine, Amount)), new SysDaValueExpression(_lineAmount)))));
                          
        return contractLineConditionsBreaksWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMarkupValueAndCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes markup value and category.  
    /// </summary>
    /// <param name = "_mcrBrokerContractLine">The broker contract line record.</param>
    /// <param name = "_mcrBrokerContractTable">The broker contract header record.</param>
    /// <returns>container with markup value and category.</returns>
    protected container initializeMarkupValueAndCategory(MCRBrokerContractLine _mcrBrokerContractLine, MCRBrokerContractTable _mcrBrokerContractTable)
    {
        MarkupValue    markupValue = 0;
        MarkupCategory markupCategory;

        switch (_mcrBrokerContractLine.ValueType)
        {
            case MCRBrokerValueType::Pcs:
                markupCategory = MarkupCategory::Pcs;
                // ExpectedRetQty and SalesQty are in the sales lines UOM, if this is different
                // than the items sales UOM, then need to convert
                SalesUnit itemSalesUnit = salesLine.inventTable().salesUnitId();
                if (itemSalesUnit != salesLine.SalesUnit)
                {
                    markupValue = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                        salesLine.InventDimId,
                                                                                                        _mcrBrokerContractLine.Value,
                                                                                                        salesLine.SalesUnit,
                                                                                                        itemSalesUnit,
                                                                                                        NoYes::Yes);
                }
                else
                {
                    markupValue = _mcrBrokerContractLine.Value;
                }
                // If the currency codes match skip conversion
                if (_mcrBrokerContractTable.Currency != salesLine.CurrencyCode)
                {
                    markupValue = CurrencyExchangeHelper::curAmount2CurAmount(markupValue, _mcrBrokerContractTable.Currency, salesLine.CurrencyCode);
                }
                else
                {
                    markupValue = CurrencyExchangeHelper::amount(markupValue, _mcrBrokerContractTable.Currency);
                }
                break;
            case MCRBrokerValueType::Percent:
                markupCategory = MarkupCategory::Percent;
                markupValue = _mcrBrokerContractLine.Value;
                break;
            case MCRBrokerValueType::Fixed:
                markupCategory = MarkupCategory::Fixed;
                markupValue = CurrencyExchangeHelper::amount(_mcrBrokerContractLine.Value, _mcrBrokerContractTable.Currency);
                // If the currency codes match skip conversion
                if (_mcrBrokerContractTable.Currency != salesLine.CurrencyCode)
                {
                    markupValue = CurrencyExchangeHelper::curAmount2CurAmount(markupValue, _mcrBrokerContractTable.Currency, salesLine.CurrencyCode);
                }
                break;
                
            default:
                return conNull(); 
        }

        return [markupValue, markupCategory];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllBrokerage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all broker charge records related to the
    /// current line, and all broker commission records
    /// that have not been invoiced.
    /// </summary>
    private void deleteAllBrokerage()
    {
        MarkupTrans markupTrans;
        MCRBrokerCommission mcrBrokerCommission;

        ttsbegin;

        delete_from markupTrans
            where markupTrans.TransRecId           == salesLine.RecId
                && markupTrans.TransTableId         == salesLine.TableId
                && markupTrans.mcrBrokerContractFee  == NoYes::Yes;

        // Delete any broker commission record that has not been invoiced (even partially)
        delete_from mcrBrokerCommission
            where mcrBrokerCommission.SalesLineRecID == salesLine.RecId
            notexists join markupTrans
            where markupTrans.OrigRecId == mcrBrokerCommission.MarkupTransRecID;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeBrokerage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts a broker fee misc charge using the passed
    ///     markup code, amount, currency code, and contract.
    /// </summary>
    /// <param name="_markupCode">
    ///     The markup code used in the misc charge.
    /// </param>
    /// <param name="_markupValue">
    ///     The markup value of the misc charge being inserted.
    /// </param>
    /// <param name="_currencyCode">
    ///     The currency of the misc charge being inserted.
    /// </param>
    /// <param name="_brokerContractId">
    /// Contract ID of the <c>MCRBrokerContractLine</c> record.
    /// </param>
    /// <param name="_taxGroup">
    /// Sales tax group of the new charge.
    /// </param>
    /// <param name="_lineNum">
    /// Line number of the new charge.
    /// </param>
    /// <returns>
    /// The amount of the brokerage.
    /// </returns>
    private AmountCur writeBrokerage(MarkupCode             _markupCode,
                                     MarkupValue            _markupValue,
                                     MarkupCategory         _markupCategory,
                                     CurrencyCode           _currencyCode,
                                     MCRBrokerContractID    _brokerContractId,
                                     TaxGroup               _taxGroup,
                                     LineNum                _lineNum = 0,
                                     MCRBrokerVendAccount   _brokerId = '')
    {
        MarkupTransRefRecId     transRecId = salesLine.RecId;
        MarkupTransRefTableId   transTableId = salesLine.TableId;

        AmountCur               calculatedMarkupAmount;

        MarkupTable markupTable = MarkupTable::find(MarkupModuleType::Cust, _markupCode);

        if (_markupValue && markupTable)
        {
            MarkupTrans markupTrans;
            markupTrans.initFromMarkupTable(markupTable);

            markupTrans.CurrencyCode         = _currencyCode;
            markupTrans.LineNum              = _lineNum ? _lineNum : MarkupTrans::lastLineNum(transTableId, transRecId) + 1;
            markupTrans.MarkupCategory       = _markupCategory;
            markupTrans.keep                 = true;
            markupTrans.MarkupCode           = _markupCode;
            markupTrans.TransRecId           = transRecId;
            markupTrans.TransTableId         = transTableId;
            markupTrans.ModuleCategory       = HeadingLine::Line;
            markupTrans.Value                = _markupValue;
            markupTrans.mcrBrokerContractFee = NoYes::Yes;
            // Only set sales tax group for charges against the customer
            if (markupTable.CustType == MarkupType::CustVend)
            {
                markupTrans.TaxGroup         = _taxGroup;
            }

            if (markupTrans.validateWrite())
            {
                markupTrans.insert();
            }
            else
            {
                throw error("@SYS104318");
            }

            if (markupTrans.RecId)
            {
                MCRBrokerCommission mcrBrokerCommission = this.initializeBrokerCommission(markupTrans, _brokerContractId, _brokerId);
                
                if (mcrBrokerCommission.validateWrite())
                {
                    mcrBrokerCommission.insert();
                }
                else
                {
                    throw error("@SYS104318");
                }
            }

            calculatedMarkupAmount = this.calculateLineBrokerMarkupAmount(markupTrans, _currencyCode);
        }

        return calculatedMarkupAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBrokerCommission</Name>
				<Source><![CDATA[
    protected MCRBrokerCommission initializeBrokerCommission(
        MarkupTrans             _markupTrans,
        MCRBrokerContractID     _brokerContractId,
        MCRBrokerVendAccount    _brokerId)
    {
        MCRBrokerCommission brokerCommission;
        brokerCommission.clear();
        brokerCommission.SalesLineRecID = _markupTrans.TransRecId;
        brokerCommission.MarkupTransRecID = _markupTrans.RecId;
        brokerCommission.ContractID = _brokerContractId;
        brokerCommission.BrokerID = _brokerId;
        return brokerCommission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineBrokerMarkupAmount</Name>
				<Source><![CDATA[
    protected AmountCur calculateLineBrokerMarkupAmount(
        MarkupTrans     _markupTrans,
        CurrencyCode    _currencyCode)
    {
        return Markup::calcMarkupAmount(
            _markupTrans,
            salesLine.SalesQty,
            salesLine.lineAmountExclTax(), // _amount
            0.0, //_intercompanyAmount
            NoYes::No, // _isInclTax
            NoYes::No, // _convertSign
            _currencyCode,
            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>