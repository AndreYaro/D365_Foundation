<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAcceleratedDepreciationController_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetAcceleratedDepreciationController_JP</c> class opens the <c>AssetAcceleratedDepreciation_JP</c> report.
/// </summary>
class AssetAcceleratedDepreciationController_JP extends SrsReportRunController implements BatchRetryable
{
    RecId accDepDocTableRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report name.
    /// </summary>
    public void initReportName()
    {
        reportName = ssrsReportStr(AssetAcceleratedDepreciation_JP, Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00024] ],
            funcName()
        );

        AssetAcceleratedDepreciationController_JP   controller;
        AssetDocumentAcceleratedDepTable_JP         accDepDocTable;

        controller = new AssetAcceleratedDepreciationController_JP();
        controller.parmArgs(_args);
        controller.initReportName();

        if (_args && _args.record() && _args.dataset() == tableNum(AssetDocumentAcceleratedDepTable_JP))
        {
            accDepDocTable = _args.record();
            controller.parmLoadFromSysLastValue(false);
            controller.parmShowDialog(false);
            controller.getReportContract().parmRdpContract().parmAccDepDocTableRecId(accDepDocTable.RecId);
            ISrsReportFileFormatExportable callerForm = _args.caller();
            controller.getReportContract().parmRdpContract().parmFileFormat(callerForm.parmFileFormat());
        }
        else
        {
            controller.getReportContract().parmRdpContract().parmAccDepDocTableRecId(0);
            controller.getReportContract().parmRdpContract().parmFileFormat(SRSReportFileFormat::PDF);
        }

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppress print setting.
    /// </summary>
    /// <returns>false</returns>
    public boolean showPrintSettings()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SRSPrintDestinationSettings printSetting  = this.parmReportContract().parmPrintSettings();
        ISrsReportFileFormatContract fileFormatContract = this.parmReportContract().parmRdpContract() as ISrsReportFileFormatContract;

        if (this.isInBatch())
        {
            printSetting.printMediumType(SRSPrintMediumType::Archive);
        }
        else
        {
            SrsReportFileFormatControllerHelper::setPrintMedium(printSetting, fileFormatContract.parmFileFormat(), this.parmReportName());
        }

        super();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>