<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeCDSQuotationDefaultSalesOrderMessageType</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysMessageTypeFactoryAttribute(SysMessageType::SalesD365SalesQuotationDefaultSalesOrder)]
internal class TradeCDSQuotationDefaultSalesOrderMessageType extends SysMessageTypeMetadata
{
    #OCCRetryCount

    private static const int LinesPerMessageDefault = 50;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLineBundleSizeLimit</Name>
				<Source><![CDATA[
    private static int getLineBundleSizeLimit()
    {
        int linesPerMessage = SalesParameters::find().MessageProcessorQuotationDefaultSalesOrderLinesPerMessage;

        return linesPerMessage > 0 ? linesPerMessage : LinesPerMessageDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowedMessageStateTransitions</Name>
				<Source><![CDATA[
    internal Enumerator getAllowedMessageStateTransitions()
    {
        return SysMessageStateTransition::getProcessedCancelledStateTransitions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDependencies</Name>
				<Source><![CDATA[
    internal List getDependencies(SysMessage _message)
    {
        List dependencies = new List(Types::Record);

        return dependencies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageQueue</Name>
				<Source><![CDATA[
    internal SysMessageQueue getMessageQueue()
    {
        return SysMessageQueue::SalesD365SalesIntegration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMessageStateTransition</Name>
				<Source><![CDATA[
    internal void processMessageStateTransition(SysMessage _message, SysMessageStateTransition _messageStateTransition)
    {
        if (_messageStateTransition.isEqual(SysMessageStateTransition::newFromStates(SysMessageState::Queued, SysMessageState::Processed)))
        {
            TradeCDSQuotationDefaultSalesOrderMessageType::process(this.getContract(_message));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    private static void process(TradeCDSQuotationDefaultSalesOrderDataContract _contract)
    {
        SalesTable salesTable = SalesTable::find(_contract.parmSalesId());

        if (salesTable.QuotationId)
        {
            ttsbegin;
            if (_contract.parmDefaultHeader())
            {
                TradeCDSQuotationDefaultSalesOrderMessageType::processOrder(salesTable);
                TradeCDSQuotationDefaultSalesOrderMessageType::scheduleProcessOrderLines(_contract);
            }
            else
            {
                TradeCDSQuotationDefaultSalesOrderMessageType::processOrderLines(_contract);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOrder</Name>
				<Source><![CDATA[
    internal static void processOrder(SalesTable _salesTable)
    {
        if (_salesTable.QuotationId)
        {
            try
            {
                ttsbegin;
                SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(_salesTable.QuotationId);
                SalesCDSSalesOrderHeaderDefaulter::newFromSalesTable(_salesTable).defaultFromQuotation(salesQuotationTable);
                ttscommit;
            }
            catch (Exception::UpdateConflict)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleProcessOrderLines</Name>
				<Source><![CDATA[
    private static void scheduleProcessOrderLines(TradeCDSQuotationDefaultSalesOrderDataContract _contract)
    {
        SalesLine salesLine;

        select count(RecId), minof(LineCreationSequenceNumber) from salesLine
            where salesLine.SalesId == _contract.parmSalesId();

        int linesPerMessage = TradeCDSQuotationDefaultSalesOrderMessageType::getLineBundleSizeLimit();

        if (salesLine.RecId < linesPerMessage
            || !TradeCDSQuotationDefaultSalesOrderBundledFlight::instance().isEnabled())
        {
            TradeCDSQuotationDefaultSalesOrderMessageType::processOrderLines(_contract);
        }
        else
        {
            _contract.parmLineCreationSequenceNumberFrom(salesLine.LineCreationSequenceNumber);
            select maxof(LineCreationSequenceNumber) from salesLine where salesLine.SalesId == _contract.parmSalesId();
            _contract.parmLineCreationSequenceNumberTo(salesLine.LineCreationSequenceNumber);

            TradeCDSQuotationDefaultSalesOrderMessageType::processOrderLinesBundledAsync(_contract, linesPerMessage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOrderLinesBundledAsync</Name>
				<Source><![CDATA[
    private static void processOrderLinesBundledAsync(TradeCDSQuotationDefaultSalesOrderDataContract _contract, int _linesPerMessage)
    {
        int i = _contract.parmLineCreationSequenceNumberFrom();

        while (i <= _contract.parmLineCreationSequenceNumberTo())
        {
            int currentLineCreationSequenceNumberFrom = i;
            int currentLineCreationSequenceNumberTo = min(i + _linesPerMessage - 1, _contract.parmLineCreationSequenceNumberTo());

            TradeCDSMessageQueue::processQuotationDefaultSalesOrder(_contract.getSalesTable(), currentLineCreationSequenceNumberFrom, currentLineCreationSequenceNumberTo, false);

            i += _linesPerMessage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOrderLines</Name>
				<Source><![CDATA[
    private static void processOrderLines(TradeCDSQuotationDefaultSalesOrderDataContract _contract)
    {
        SalesLine salesLine;
        SalesQuotationLine salesQuotationLine;

        ttsbegin;

        while select * from salesLine
            where salesLine.SalesId == _contract.parmSalesId()
                && salesLine.LineCreationSequenceNumber >= _contract.parmLineCreationSequenceNumberFrom()
                && salesLine.LineCreationSequenceNumber <= _contract.parmLineCreationSequenceNumberTo()
            join * from salesQuotationLine
                where salesQuotationLine.QuotationId == _contract.parmSalesQuotationId()
                    && salesQuotationLine.LineCreationSequenceNumber == salesLine.LineCreationSequenceNumber
        {
            TradeCDSQuotationDefaultSalesOrderMessageType::processOrderLine(salesLine, _contract.getSalesTable(), salesQuotationLine);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOrderLine</Name>
				<Source><![CDATA[
    internal static void processOrderLine(SalesLine _salesLine, SalesTable _salesTable, SalesQuotationLine _salesQuotationLine)
    {
        try
        {
            ttsbegin;
            SalesCDSSalesOrderLineDefaulter::newFromSalesLine(_salesLine, _salesTable).defaultFromQuotationLine(_salesQuotationLine);
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSendMessage</Name>
				<Source><![CDATA[
    internal boolean canSendMessage(SysMessageQueue _messageQueue, SysMessageTargetRecId _messageTarget, SysMessageTargetRecId _sourceMessageTarget)
    {
        return _messageQueue == SysMessageQueue::SalesD365SalesIntegration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    private TradeCDSQuotationDefaultSalesOrderDataContract getContract(SysMessage _message)
    {
        TradeCDSQuotationDefaultSalesOrderDataContract contract = FormJsonSerializer::deserializeObject(classNum(TradeCDSQuotationDefaultSalesOrderDataContract), _message.Content);

        return contract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>