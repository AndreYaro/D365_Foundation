<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementConfirmationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AgreementConfirmationDP</c> class is the report data provider class for purchase and sales
/// agreement confirmation of  reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AgreementConfirmationRDPContract))
]
public class AgreementConfirmationDP extends SrsReportDataProviderPreProcess
{
    AgreementHeaderTmp              agreementHeaderTmp;
    AgreementLineTmp                agreementLineTmp;

    DocuOnFormular                  docuOnAgreement;
    DocuOnFormularTypeId            docuTypeAgreement;
    RecId                           recId;
    NoYes                           proforma;
    ModuleSalesPurch                moduleSalesPurch;
    AgreementClassificationCategory classificationCategory;
    PrePrintLevel                   printLevel;
    InventDimFixed                  inventDimToShow;
    NoYes                           showDeliveryTerm;
    NoYes                           showModeOfDelivery;
    NoYes                           showPayment;
    NoYes                           showCashDiscount;
    NoYes                           showContractReference;
    NoYes                           showAgreementType;
    NoYes                           showMaxIsEnforced;
    container                       inventDimFields;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAgreementHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the <c>AgreementHeaderTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>AgreementHeaderTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AgreementHeaderTmp))
    ]
    public AgreementHeaderTmp getAgreementHeaderTmp()
    {
        select firstonly * from agreementHeaderTmp;
        return agreementHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuOnFormularAgreement</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal DocuOnFormular parmDocuOnFormularAgreement(DocuOnFormular _docuOnAgreement = docuOnAgreement)
    {
        docuOnAgreement = _docuOnAgreement;
        return docuOnAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuOnFormulaTypeAgreement</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal DocuOnFormularTypeId parmDocuOnFormulaTypeAgreement(DocuOnFormularTypeId _docuTypeAgreement = docuTypeAgreement)
    {
        docuTypeAgreement = _docuTypeAgreement;
        return docuTypeAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>AgreementLineTmp</c> table with the data for a pro forma report.
    /// </summary>
    /// <param name="_agreementLineTmp">
    ///    The table to fill with the data.
    /// </param>
    protected void getAgreementLine(AgreementLineTmp _agreementLineTmp)
    {
        this.createQuantityCommitmentAgreementLines();

        this.createVolumeCommitmentAgreementLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuantityCommitmentAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the quantity commitment agreement lines.
    /// </summary>
    protected void createQuantityCommitmentAgreementLines()
    {
        AgreementLineQuantityCommitment  agreementLineQuantityCommitment;
        AgreementHeader                  agreementHeader;
        AgreementLine                    agreementLineDoc;
        AgreementLineDefault             agreementLineDefault;
        InventDim                        inventDim;

        while select agreementLineQuantityCommitment
            where !agreementLineQuantityCommitment.IsDeleted
            join RecId from agreementLineDoc
                where agreementLineDoc.RecId == agreementLineQuantityCommitment.RecId
            join Currency, Language from agreementHeader
                where agreementHeader.RecId == agreementLineQuantityCommitment.Agreement
                    && agreementHeader.RecId == recid
            outer join inventDim
                where inventDim.InventDimId == agreementLineQuantityCommitment.InventDimId
            outer join SalesModeOfDelivery from agreementLineDefault
                where agreementLineDefault.AgreementLine == agreementLineQuantityCommitment.RecId
        {
            AgreementConfirmationDPLineCreationParameters parameters = AgreementConfirmationDPLineCreationParameters::construct();
            parameters.agreementLineQuantityCommitment = agreementLineQuantityCommitment;
            parameters.agreementHeader = agreementHeader;
            parameters.agreementLineDoc = agreementLineDoc;
            parameters.agreementLineDefault = agreementLineDefault;
            parameters.inventDim = inventDim;

            this.createQuantityCommitmentAgreementLine(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuantityCommitmentAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a quantity commitment agreement line based on the specified parameters.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>AgreementConfirmationDPLineCreationParameters</c>.</param>
    protected void createQuantityCommitmentAgreementLine(AgreementConfirmationDPLineCreationParameters _parameters)
    {
        this.initializeQuantityCommitmentAgreementLine(_parameters);
        
        agreementLineTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuantityCommitmentAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a quantity commitment agreement line based on the specified parameters.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>AgreementConfirmationDPLineCreationParameters</c>.</param>
    protected void initializeQuantityCommitmentAgreementLine(AgreementConfirmationDPLineCreationParameters _parameters)
    {
        agreementLineTmp.clear();
        AgreementLine agreementLine = _parameters.agreementLineQuantityCommitment;
        this.setAgreementLineTmpFromMap(agreementLineTmp, _parameters.inventDim, agreementLine, _parameters.agreementHeader.Language);

        agreementLineTmp.CommitedQuantity     = _parameters.agreementLineQuantityCommitment.CommitedQuantity;
        agreementLineTmp.PdsCWCommitedQuantity = _parameters.agreementLineQuantityCommitment.PdsCWCommitedQuantity;
        agreementLineTmp.pdsCWUnit             = _parameters.agreementLineQuantityCommitment.pdsCWUnitId();
        agreementLineTmp.PriceUnit            = _parameters.agreementLineQuantityCommitment.PriceUnit;
        agreementLineTmp.PricePerUnit         = _parameters.agreementLineQuantityCommitment.PricePerUnit;
        agreementLineTmp.LineDiscountAmount   = _parameters.agreementLineQuantityCommitment.LineDiscountAmount;
        agreementLineTmp.ProductUnitOfMeasure = _parameters.agreementLineQuantityCommitment.ProductUnitOfMeasure;
        agreementLineTmp.Currency             = _parameters.agreementHeader.Currency;

        agreementLineTmp.SalesModeOfDelivery  = _parameters.agreementLineDefault.SalesModeOfDelivery;

        agreementLineTmp.Notes                = this.getLineNotes(_parameters.agreementLineDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVolumeCommitmentAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the volume commitment agreement lines.
    /// </summary>
    protected void createVolumeCommitmentAgreementLines()
    {
        AgreementLineVolumeCommitment    agreementLineVolumeCommitment;
        AgreementHeader                  agreementHeader;
        AgreementLine                    agreementLineDoc;
        AgreementLineDefault             agreementLineDefault;
        InventDim                        inventDim;
        EcoResCategory                   ecoResCategory;

        while select agreementLineVolumeCommitment
            where !agreementLineVolumeCommitment.IsDeleted
            join RecId from agreementLineDoc
                where agreementLineDoc.RecId == agreementLineVolumeCommitment.RecId
            join Currency, Language from agreementHeader
                where agreementHeader.RecId == agreementLineVolumeCommitment.Agreement
                    && agreementHeader.RecId == recid
            outer join inventDim
            where inventDim.InventDimId == agreementLineVolumeCommitment.InventDimId
            outer join SalesModeOfDelivery from agreementLineDefault
            where agreementLineDefault.AgreementLine == agreementLineVolumeCommitment.RecId
            outer join ecoResCategory where ecoResCategory.RecId == agreementLineVolumeCommitment.Category
        {
            AgreementConfirmationDPLineCreationParameters parameters = AgreementConfirmationDPLineCreationParameters::construct();
            parameters.agreementLineVolumeCommitment = agreementLineVolumeCommitment;
            parameters.agreementHeader = agreementHeader;
            parameters.agreementLineDoc = agreementLineDoc;
            parameters.agreementLineDefault = agreementLineDefault;
            parameters.inventDim = inventDim;
            parameters.ecoResCategory = ecoResCategory;

            this.createVolumeCommitmentAgreementLine(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVolumeCommitmentAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a volume commitment agreement line based on the specified parameters.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>AgreementConfirmationDPLineCreationParameters</c>.</param>
    protected void createVolumeCommitmentAgreementLine(AgreementConfirmationDPLineCreationParameters _parameters)
    {
        this.initializeVolumeCommitmentAgreementLine(_parameters);

        agreementLineTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVolumeCommitmentAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a volume commitment agreement line based on the specified parameters.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>AgreementConfirmationDPLineCreationParameters</c>.</param>
    protected void initializeVolumeCommitmentAgreementLine(AgreementConfirmationDPLineCreationParameters _parameters)
    {
        agreementLineTmp.clear();

        AgreementLine agreementLine = _parameters.agreementLineVolumeCommitment;

        this.setAgreementLineTmpFromMap(agreementLineTmp, _parameters.inventDim, agreementLine, _parameters.agreementHeader.Language);

        if (_parameters.agreementLineVolumeCommitment.AgreementLineType != CommitmentType::ProductRootCategory)
        {
            agreementLineTmp.Category         = _parameters.ecoResCategory.Name;
        }
        agreementLineTmp.CommitedAmount       = _parameters.agreementLineVolumeCommitment.CommitedAmount;
        agreementLineTmp.Currency             = _parameters.agreementHeader.Currency;

        agreementLineTmp.SalesModeOfDelivery  = _parameters.agreementLineDefault.SalesModeOfDelivery;

        agreementLineTmp.Notes                = this.getLineNotes(_parameters.agreementLineDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementLineHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>AgreementLineTmp</c> table with the data for a confirmation report.
    /// </summary>
    /// <param name="_agreementLineTmp">
    ///    The table to fill with the data.
    /// </param>
    protected void getAgreementLineHistory(AgreementLineTmp _agreementLineTmp)
    {
        this.createQuantityCommitmentHistoryAgreementLines();
        
        this.createVolumeCommitmentHistoryAgreementLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuantityCommitmentHistoryAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the quantity commitment history agreement lines.
    /// </summary>
    protected void createQuantityCommitmentHistoryAgreementLines()
    {
        AgreementLineHistory                    agreementLineHistoryDoc;
        AgreementLineQuantityCommitmentHistory  agreementLineQuantityCommitmentHistory;
        InventDim                               inventDim;
        AgreementLineDefaultHistory             agreementLineDefaultHistory;
        AgreementLine                           agreementLine;
        AgreementHeader                         agreementHeader;
        AgreementHeaderHistory                  agreementHeaderHistory;

        while select agreementLineQuantityCommitmentHistory
            join RecId from agreementLineHistoryDoc
                where agreementLineHistoryDoc.RecId == agreementLineQuantityCommitmentHistory.RecId
            join RecId from agreementLine
                where agreementLine.RecId == agreementLineQuantityCommitmentHistory.AgreementLine
            join RecId from agreementHeader
                where agreementHeader.RecId == agreementLine.Agreement
            join Currency, Language from agreementHeaderHistory
                where agreementHeaderHistory.RecId == recid
                    && agreementHeaderHistory.AgreementHeader == agreementHeader.RecId
                    && agreementLineQuantityCommitmentHistory.ValidFrom <= agreementHeaderHistory.CreatedDateTime
                    && agreementLineQuantityCommitmentHistory.ValidTo > agreementHeaderHistory.CreatedDateTime
            outer join inventDim
                where inventDim.InventDimId == agreementLineQuantityCommitmentHistory.InventDimId
            outer join SalesModeOfDelivery from agreementLineDefaultHistory
                where agreementLineDefaultHistory.AgreementLineHistory == agreementLineQuantityCommitmentHistory.RecId
        {
            AgreementConfirmationDPLineHistoryCreationParameters parameters = AgreementConfirmationDPLineHistoryCreationParameters::construct();
            parameters.agreementLineQuantityCommitmentHistory = agreementLineQuantityCommitmentHistory;
            parameters.agreementLineHistoryDoc = agreementLineHistoryDoc;
            parameters.inventDim = inventDim;
            parameters.agreementLineDefaultHistory = agreementLineDefaultHistory;
            parameters.agreementHeaderHistory = agreementHeaderHistory;

            this.createQuantityCommitmentHistoryAgreementLine(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuantityCommitmentHistoryAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a quantity commitment history agreement line based on the specified parameters.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>AgreementConfirmationDPLineHistoryCreationParameters</c>.</param>
    protected void createQuantityCommitmentHistoryAgreementLine(AgreementConfirmationDPLineHistoryCreationParameters _parameters)
    {
        this.initializeQuantityCommitmentHistoryAgreementLine(_parameters);
        
        agreementLineTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuantityCommitmentHistoryAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a quantity commitment history agreement line based on the specified parameters.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>AgreementConfirmationDPLineHistoryCreationParameters</c>.</param>
    protected void initializeQuantityCommitmentHistoryAgreementLine(AgreementConfirmationDPLineHistoryCreationParameters _parameters)
    {
        agreementLineTmp.clear();
        AgreementLineHistory agreementLineHistory = _parameters.agreementLineQuantityCommitmentHistory;
        this.setAgreementLineTmpFromMap(agreementLineTmp, _parameters.inventDim, agreementLineHistory, _parameters.agreementHeaderHistory.Language);

        agreementLineTmp.CommitedQuantity      = _parameters.agreementLineQuantityCommitmentHistory.CommitedQuantity;
        agreementLineTmp.PdsCWCommitedQuantity = _parameters.agreementLineQuantityCommitmentHistory.PdsCWCommitedQuantity;
        agreementLineTmp.pdsCWUnit             = _parameters.agreementLineQuantityCommitmentHistory.pdsCWUnitId();
        agreementLineTmp.PriceUnit             = _parameters.agreementLineQuantityCommitmentHistory.PriceUnit;
        agreementLineTmp.PricePerUnit          = _parameters.agreementLineQuantityCommitmentHistory.PricePerUnit;
        agreementLineTmp.LineDiscountAmount    = _parameters.agreementLineQuantityCommitmentHistory.LineDiscountAmount;
        agreementLineTmp.ProductUnitOfMeasure  = _parameters.agreementLineQuantityCommitmentHistory.ProductUnitOfMeasure;
        agreementLineTmp.Currency              = _parameters.agreementHeaderHistory.Currency;

        agreementLineTmp.SalesModeOfDelivery   = _parameters.agreementLineDefaultHistory.SalesModeOfDelivery;

        agreementLineTmp.Notes                 = this.getLineNotes(_parameters.agreementLineHistoryDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVolumeCommitmentHistoryAgreementLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the volume commitment history agreement lines.
    /// </summary>
    protected void createVolumeCommitmentHistoryAgreementLines()
    {
        AgreementLineHistory                    agreementLineHistory;
        AgreementLineHistory                    agreementLineHistoryDoc;
        AgreementLineVolumeCommitmentHistory    agreementLineVolumeCommitmentHistory;
        InventDim                               inventDim;
        AgreementLineDefaultHistory             agreementLineDefaultHistory;
        AgreementLine                           agreementLine;
        AgreementHeader                         agreementHeader;
        AgreementHeaderHistory                  agreementHeaderHistory;
        EcoResCategory                          ecoResCategory;

        while select agreementLineVolumeCommitmentHistory
            join RecId from agreementLineHistoryDoc
                where agreementLineHistoryDoc.RecId == agreementLineVolumeCommitmentHistory.RecId
            join RecId from agreementLine
                where agreementLine.RecId == agreementLineVolumeCommitmentHistory.AgreementLine
            join RecId from agreementHeader
                where agreementHeader.RecId == agreementLine.Agreement
            join Currency, Language from agreementHeaderHistory
                where agreementHeaderHistory.RecId == recid
                    && agreementHeaderHistory.AgreementHeader == agreementHeader.RecId
                    && agreementLineVolumeCommitmentHistory.ValidFrom <= agreementHeaderHistory.CreatedDateTime
                    && agreementLineVolumeCommitmentHistory.ValidTo > agreementHeaderHistory.CreatedDateTime
            outer join inventDim
                where inventDim.InventDimId == agreementLineVolumeCommitmentHistory.InventDimId
            outer join SalesModeOfDelivery from agreementLineDefaultHistory
                where agreementLineDefaultHistory.AgreementLineHistory == agreementLineVolumeCommitmentHistory.RecId
            outer join ecoResCategory where ecoResCategory.RecId == agreementLineVolumeCommitmentHistory.Category
        {
            AgreementConfirmationDPLineHistoryCreationParameters parameters = AgreementConfirmationDPLineHistoryCreationParameters::construct();
            parameters.AgreementLineVolumeCommitmentHistory = AgreementLineVolumeCommitmentHistory;
            parameters.agreementLineHistoryDoc = agreementLineHistoryDoc;
            parameters.inventDim = inventDim;
            parameters.agreementLineDefaultHistory = agreementLineDefaultHistory;
            parameters.agreementHeaderHistory = agreementHeaderHistory;
            parameters.ecoResCategory = ecoResCategory;

            this.createVolumeCommitmentHistoryAgreementLine(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVolumeCommitmentHistoryAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a volume commitment history agreement line based on the specified parameters.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>AgreementConfirmationDPLineHistoryCreationParameters</c>.</param>
    protected void createVolumeCommitmentHistoryAgreementLine(AgreementConfirmationDPLineHistoryCreationParameters _parameters)
    {
        this.initializeVolumeCommitmentHistoryAgreementLine(_parameters);

        
        agreementLineTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVolumeCommitmentHistoryAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a volume commitment history agreement line based on the specified parameters.
    /// </summary>
    /// <param name = "_parameters">An instance of <c>AgreementConfirmationDPLineHistoryCreationParameters</c>.</param>
    protected void initializeVolumeCommitmentHistoryAgreementLine(AgreementConfirmationDPLineHistoryCreationParameters _parameters)
    {
        agreementLineTmp.clear();

        AgreementLineHistory agreementLineHistory = _parameters.agreementLineVolumeCommitmentHistory;
        this.setAgreementLineTmpFromMap(agreementLineTmp, _parameters.inventDim, agreementLineHistory, _parameters.agreementHeaderHistory.Language);

        if (_parameters.agreementLineVolumeCommitmentHistory.AgreementLineType != CommitmentType::ProductRootCategory)
        {
            agreementLineTmp.Category         = _parameters.ecoResCategory.Name;
        }
        agreementLineTmp.CommitedAmount       = _parameters.agreementLineVolumeCommitmentHistory.CommitedAmount;
        agreementLineTmp.Currency             = _parameters.agreementHeaderHistory.Currency;

        agreementLineTmp.SalesModeOfDelivery  = _parameters.agreementLineDefaultHistory.SalesModeOfDelivery;

        agreementLineTmp.Notes                = this.getLineNotes(_parameters.agreementLineHistoryDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementLineTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the <c>AgreementLineTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>AgreementLineTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AgreementLineTmp))
    ]
    public AgreementLineTmp getAgreementLineTmp()
    {
        select * from agreementLineTmp;
        return agreementLineTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the container of the inventory dimension field IDs to print on the report.
    /// </summary>
    /// <returns>
    ///    The container of the field IDs.
    /// </returns>
    protected container getInventDimFieldList()
    {
        container       con;
        FieldId         fieldId;
        List            inventDimFieldList = InventDim::dimAgreementFieldList();
        ListEnumerator  fieldListEnumerator = inventDimFieldList.getEnumerator();
        InventDimParm   inventDimParm;

        InventDimFixedClass::inventDimFixed2InventDimParm(inventDimToShow, inventDimParm);

        while (fieldListEnumerator.moveNext())
        {
            fieldId = fieldListEnumerator.current();
            if (inventDimParm.(InventDim::dim2dimParm(fieldId)))
            {
                con += fieldId;
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the notes that are attached to the agreement line.
    /// </summary>
    /// <param name="_line">
    /// The agreement line from which to get the notes.
    /// </param>
    /// <returns>
    /// The notes that are attached to the agreement line..
    /// </returns>
    private Notes getLineNotes(Common _line)
    {
        DocuRefSearch   docuRefSearch;
        Notes           notes;

        if ((docuOnAgreement == DocuOnFormular::All)
         || (docuOnAgreement == DocuOnFormular::Line))
        {
            docuRefSearch = DocuRefSearch::newTypeIdAndRestriction(_line, docuTypeAgreement, DocuRestriction::External);
            notes         = Docu::concatDocuRefNotes(docuRefSearch);
        }

        return notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>AgreementHeaderTmp</c> table with the data for a purchase agreement pro forma report.
    /// </summary>
    /// <param name="_agreementHeaderTmp">
    ///    The table to fill with the data.
    /// </param>
    [Wrappable(true)]
    internal void getPurchAgreementHeader(AgreementHeaderTmp  _agreementHeaderTmp)
    {
        AgreementHeaderDefault       agreementHeaderDefault;
        AgreementHeader              agreementHeader;
        PurchAgreementHeader         purchAgreementHeader;
        PurchAgreementHeaderDefault  purchAgreementHeaderDefault;

        select purchAgreementHeader
        where purchAgreementHeader.RecId == recId
        outer join ContactPerson, DeliveryName, DeliveryPostalAddress, DeliveryTerm, DeliveryMode, CashDiscountDataAreaId, CashDiscountCode from agreementHeaderDefault
            where agreementHeaderDefault.AgreementHeader == purchAgreementHeader.RecId
        outer join VendorInvoiceAccountDataAreaId, VendorInvoiceAccount, PaymentSpecification from purchAgreementHeaderDefault
            where purchAgreementHeaderDefault.PurchaseAgreementHeader == purchAgreementHeader.RecId;

        agreementHeader = purchAgreementHeader;
        _agreementHeaderTmp.Title = SysLabel::labelId2String(literalStr("@SYS315255"), purchAgreementHeader.Language);
        this.setAgreementHeaderTmpFromMaps(_agreementHeaderTmp, agreementHeader, agreementHeaderDefault);

        _agreementHeaderTmp.PdsEnabled               = (#PdsEnabled? NoYes::Yes : NoYes::No);

        _agreementHeaderTmp.ConfirmationNumber       = AgreementHeaderHistory::nextConfirmationNum(recId);
        _agreementHeaderTmp.AgreementId              = purchAgreementHeader.PurchNumberSequence;

        _agreementHeaderTmp.CustVendAddress          = DirParty::primaryPostalAddress(
                                                                                      purchAgreementHeader.vendTable()
                                                                                                  .Party,
                                                                                                  purchAgreementHeader.CreatedDateTime).Address;
        _agreementHeaderTmp.CustVendName             = purchAgreementHeader.vendName();
        if (purchAgreementHeaderDefault.VendorInvoiceAccount)
        {
            _agreementHeaderTmp.InvoiceAddress       =
                                                       purchAgreementHeaderDefault.invoiceVendTable().
                                                       postalAddress().Address;
        }

        if (showPayment)
        {
            _agreementHeaderTmp.PaymentSpecification = purchAgreementHeaderDefault.PaymentSpecification;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchAgreementHeaderHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>AgreementHeaderTmp</c> table with the data for a purchase agreement confirmation
    ///    report.
    /// </summary>
    /// <param name="_agreementHeaderTmp">
    ///    The table to fill with the data.
    /// </param>
    [Wrappable(true)]
    internal void getPurchAgreementHeaderHistory(AgreementHeaderTmp  _agreementHeaderTmp)
    {
        AgreementHeaderDefaultHistory       agreementHeaderDefaultHistory;
        AgreementHeaderHistory              agreementHeaderHistory;
        PurchAgreementHeaderHistory         purchAgreementHeaderHistory;
        PurchAgreementHeaderDefaultHistory  purchAgreementHeaderDefaultHistory;

        select purchAgreementHeaderHistory
        where purchAgreementHeaderHistory.RecId == recId
        outer join ContactPerson, DeliveryPostalAddress, DeliveryTerm, DeliveryName, DeliveryMode, CashDiscountDataAreaId, CashDiscountCode from agreementHeaderDefaultHistory
            where agreementHeaderDefaultHistory.AgreementHeaderHistory == purchAgreementHeaderHistory.RecId
        outer join VendorInvoiceAccountDataAreaId, VendorInvoiceAccount, PaymentSpecification from purchAgreementHeaderDefaultHistory
            where purchAgreementHeaderDefaultHistory.PurchaseAgreementHeaderHistory == purchAgreementHeaderHistory.RecId;

        agreementHeaderHistory = purchAgreementHeaderHistory;
        _agreementHeaderTmp.Title = SysLabel::labelId2String(literalStr("@SYS315256"), purchAgreementHeaderHistory.Language);
        this.setAgreementHeaderTmpFromMaps(_agreementHeaderTmp, agreementHeaderHistory, agreementHeaderDefaultHistory);

        _agreementHeaderTmp.PdsEnabled                      = (#PdsEnabled? NoYes::Yes : NoYes::No);

        _agreementHeaderTmp.ConfirmationNumber       = purchAgreementHeaderHistory.ConfirmationNumber;
        _agreementHeaderTmp.AgreementId              = purchAgreementHeaderHistory.PurchNumberSequence;

        _agreementHeaderTmp.CustVendAddress      = DirUtility::replaceAddressTokenLanguage(DirParty::primaryPostalAddress(
                                                                                           purchAgreementHeaderHistory.vendTable().Party,
                                                                                           purchAgreementHeaderHistory.CreatedDateTime),
                                                                                           agreementHeaderHistory.Language);

        _agreementHeaderTmp.CustVendName                 = purchAgreementHeaderHistory.vendName();
        if (purchAgreementHeaderDefaultHistory.VendorInvoiceAccount)
        {
            _agreementHeaderTmp.InvoiceAddress       =
                                                       DirUtility::replaceAddressTokenLanguage(purchAgreementHeaderDefaultHistory.invoiceVendTable().
                                                            postalAddress(), agreementHeaderHistory.language);
        }
        else if (purchAgreementHeaderDefaultHistory.VendorInvoiceAccount)
        {
            _agreementHeaderTmp.InvoiceAddress       =
                                                       purchAgreementHeaderDefaultHistory.invoiceVendTable().
                                                            postalAddress().Address;
        }

        if (showPayment)
        {
            _agreementHeaderTmp.PaymentSpecification = purchAgreementHeaderDefaultHistory.PaymentSpecification;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>AgreementHeaderTmp</c> table with the data for a sales agreement pro forma report.
    /// </summary>
    /// <param name="_agreementHeaderTmp">
    ///    The table to fill with the data.
    /// </param>
    [Wrappable(true)]
    internal void getSalesAgreementHeader(AgreementHeaderTmp  _agreementHeaderTmp)
    {
        AgreementHeaderDefault       agreementHeaderDefault;
        AgreementHeader              agreementHeader;
        SalesAgreementHeader         salesAgreementHeader;
        SalesAgreementHeaderDefault  salesAgreementHeaderDefault;

        select salesAgreementHeader
        where salesAgreementHeader.RecId == recId
        outer join ContactPerson, DeliveryName, DeliveryPostalAddress, DeliveryTerm, DeliveryMode, CashDiscountDataAreaId, CashDiscountCode, PaymentTerms from agreementHeaderDefault
            where agreementHeaderDefault.AgreementHeader == salesAgreementHeader.RecId
        outer join CustomerInvoiceAccountDataAreaId, CustomerInvoiceAccount, CustomerPaymentSpec from salesAgreementHeaderDefault
            where salesAgreementHeaderDefault.SalesAgreementHeader == salesAgreementHeader.RecId;
        
        agreementHeader = salesAgreementHeader;
        _agreementHeaderTmp.Title = SysLabel::labelId2String(literalStr("@SYS315253"), salesAgreementHeader.Language);
        this.setAgreementHeaderTmpFromMaps(_agreementHeaderTmp, agreementHeader, agreementHeaderDefault);
        
        _agreementHeaderTmp.PdsEnabled         = (#PdsEnabled? NoYes::Yes : NoYes::No);
        _agreementHeaderTmp.ConfirmationNumber = AgreementHeaderHistory::nextConfirmationNum(recId);
        
        _agreementHeaderTmp.initializeFromSalesAgreementHeader(salesAgreementHeader);

        _agreementHeaderTmp.initializeFromSalesAgreementHeaderDefault(salesAgreementHeaderDefault, showPayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesAgreementHeaderHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>AgreementHeaderTmp</c> table with the data for a sales agreement confirmation report.
    /// </summary>
    /// <param name="_agreementHeaderTmp">
    ///    The table to fill with the data.
    /// </param>
    [Wrappable(true)]
    internal void getSalesAgreementHeaderHistory(AgreementHeaderTmp  _agreementHeaderTmp)
    {
        AgreementHeaderDefaultHistory       agreementHeaderDefaultHistory;
        AgreementHeaderHistory              agreementHeaderHistory;
        SalesAgreementHeaderHistory         salesAgreementHeaderHistory;
        SalesAgreementHeaderDefaultHistory  salesAgreementHeaderDefaultHistory;

        select salesAgreementHeaderHistory
            where salesAgreementHeaderHistory.RecId == recId
            outer join ContactPerson, DeliveryName, DeliveryPostalAddress, DeliveryTerm, DeliveryMode, CashDiscountDataAreaId, CashDiscountCode, PaymentTerms from agreementHeaderDefaultHistory
                where agreementHeaderDefaultHistory.AgreementHeaderHistory == salesAgreementHeaderHistory.RecId
            outer join CustomerInvoiceAccountDataAreaId, CustomerInvoiceAccount, CustomerPaymentSpec from salesAgreementHeaderDefaultHistory
                where salesAgreementHeaderDefaultHistory.SalesAgreementHeaderHistory == salesAgreementHeaderHistory.RecId;

        agreementHeaderHistory = salesAgreementHeaderHistory;
        _agreementHeaderTmp.Title = SysLabel::labelId2String(literalStr("@SYS315254"), salesAgreementHeaderHistory.Language);
        this.setAgreementHeaderTmpFromMaps(_agreementHeaderTmp, agreementHeaderHistory, agreementHeaderDefaultHistory);

        _agreementHeaderTmp.PdsEnabled                      = (#PdsEnabled? NoYes::Yes : NoYes::No);

        _agreementHeaderTmp.initializeFromSalesAgreementHeaderHistory(salesAgreementHeaderHistory);

        _agreementHeaderTmp.initializeFromSalesAgreementHeaderDefaultHistory(salesAgreementHeaderDefaultHistory, showPayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Parses the report parameters and fills the <c>AgreementHeaderTmp</c> and <c>AgreementLineTmp</c>
    ///    tables with data.
    /// </summary>
    public void processReport()
    {
        AgreementConfirmationRDPContract    contract;

        contract                = this.parmDataContract() as AgreementConfirmationRDPContract;

        recId                   = contract.parmRecordId();
        proforma                = contract.parmProforma();
        moduleSalesPurch        = contract.parmModuleSalesPurch();
        classificationCategory  = contract.parmAgreementClassificationCategory();
        printLevel              = contract.parmPrintLevel();
        inventDimToShow         = contract.parmInventoryDimensions();
        showDeliveryTerm        = contract.parmShowDeliveryTerm();
        showModeOfDelivery      = contract.parmShowModeofDelivery();
        showPayment             = contract.parmShowPayment();
        showCashDiscount        = contract.parmShowCashDiscount();
        showContractReference   = contract.parmShowContractReference();
        showAgreementType       = contract.parmShowAgreementClassification();
        showMaxIsEnforced       = contract.parmShowMaxIsEnforced();
        
        if (inventDimToShow)
        {
            inventDimFields = this.getInventDimFieldList();
        }

        agreementHeaderTmp = this.createAgreementHeaderTmp();

        //Insert lines
        if (proforma)
        {
            this.getAgreementLine(agreementLineTmp);
        }
        else
        {
            this.getAgreementLineHistory(agreementLineTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>AgreementHeaderTmp</c> record.
    /// </summary>
    /// <returns>
    /// The created <c>AgreementHeaderTmp</c> record.
    /// </returns>
    protected AgreementHeaderTmp createAgreementHeaderTmp()
    {
        AgreementHeaderTmp agreementHeaderTmpRecord = this.initializeAgreementHeaderTmp();

        agreementHeaderTmpRecord.insert();

        return agreementHeaderTmpRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAgreementHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes a <c>AgreementHeaderTmp</c> record.
    /// </summary>
    /// <returns>
    /// The initialized <c>AgreementHeaderTmp</c> record.
    /// </returns>
    protected AgreementHeaderTmp initializeAgreementHeaderTmp()
    {
        AgreementHeaderTmp agreementHeaderTmpRecord;

        // Set the user connection to use on table.
        // This is required to ensure that createdTransactionId of inserted record is different than default transaction.
        agreementHeaderTmpRecord.setConnection(this.parmUserConnection());
        agreementLineTmp.setConnection(this.parmUserConnection());

        agreementHeaderTmpRecord.PrintLogo            = NoYes::No;
        if (printLevel == PrePrintLevel::BlankPaper)
        {
            CompanyInfo companyInfo = CompanyInfo::find();
            agreementHeaderTmpRecord.CompanyName              = companyInfo.name();
            agreementHeaderTmpRecord.CompanyAddress           = companyInfo.postalAddress().Address;
            agreementHeaderTmpRecord.CompanyPhone             = companyInfo.phone();
            agreementHeaderTmpRecord.CompanyTeleFax           = companyInfo.teleFax();
            agreementHeaderTmpRecord.CompanyGiro              = companyInfo.Giro;
            agreementHeaderTmpRecord.CompanyCoRegNum          = companyInfo.CoRegNum;
            agreementHeaderTmpRecord.CompanyLogo              = CompanyImage::findByRecord(companyInfo).Image;
            agreementHeaderTmpRecord.CompanyVATNum            = TaxRegistration::getCompanyTaxRegNum_W();
            agreementHeaderTmpRecord.ShowCompanyVATNum        =    (moduleSalesPurch == ModuleSalesPurch::Sales && CustFormletterParameters::find().PrintSalesAgreementVATNum)
                                                                || (moduleSalesPurch == ModuleSalesPurch::Purch && VendFormletterParameters::find().PrintPurchAgreementVATNum);
            if (conLen(agreementHeaderTmpRecord.CompanyLogo) > 0)
            {
                agreementHeaderTmpRecord.PrintLogo            = NoYes::Yes;
            }
        }

        AgreementConfirmationReportClassificationCategory confirmationReportClassificationCategory = AgreementConfirmationReportClassificationCategory::newFromType(moduleSalesPurch, classificationCategory);
        if(!confirmationReportClassificationCategory)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        confirmationReportClassificationCategory.setDocuOnFormulaAgreement(this);
        confirmationReportClassificationCategory.getAgreementHeader(this, agreementHeaderTmpRecord, this.proforma);

        return agreementHeaderTmpRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementHeaderTmpFromMaps</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>AgreementHeaderTmp</c> table with the data from the specified
    ///    <c>AgreementHeaderMap</c> and <c>AgreementHeaderDefaultMap</c> map buffers.
    /// </summary>
    /// <param name="_agreementHeaderTmp">
    ///    The table to fill with the data.
    /// </param>
    /// <param name="_agreementHeaderMap">
    ///    The map with the data to be copied to the <c>AgreementHeaderTmp</c> buffer.
    /// </param>
    /// <param name="_agreementHeaderDefaultMap">
    ///    The map with the data to be copied to the <c>AgreementHeaderTmp</c> buffer.
    /// </param>
    protected void setAgreementHeaderTmpFromMaps(AgreementHeaderTmp        _agreementHeaderTmp,
                                                 AgreementHeaderMap        _agreementHeaderMap,
                                                 AgreementHeaderDefaultMap _agreementHeaderDefaultMap)
    {
        _agreementHeaderTmp.PdsEnabled                      = (#PdsEnabled? NoYes::Yes : NoYes::No);

        _agreementHeaderTmp.DocumentTitle                   = _agreementHeaderMap.DocumentTitle;

        if (proforma)
        {
            _agreementHeaderTmp.DateConfirmed               = DateTimeUtil::getSystemDateTime();
        }
        else
        {
            _agreementHeaderTmp.DateConfirmed               = _agreementHeaderMap.CreatedDateTime;
        }

        _agreementHeaderTmp.CompanyEnterpriseNumber  = CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, DateTimeUtil::date(_agreementHeaderTmp.DateConfirmed));

        if (showAgreementType)
        {
            _agreementHeaderTmp.AgreementClassificationName = AgreementClassification::find(_agreementHeaderMap.AgreementClassification).Name;
        }
        if (showContractReference)
        {
            _agreementHeaderTmp.DocumentExternalReference   = _agreementHeaderMap.DocumentExternalReference;
        }

        _agreementHeaderTmp.OriginatorName                  = _agreementHeaderMap.originatorName();
        _agreementHeaderTmp.ContactPersonName               = ContactPerson::name(_agreementHeaderDefaultMap.ContactPerson);

        _agreementHeaderTmp.DeliveryName                    = _agreementHeaderDefaultMap.DeliveryName;
        if (_agreementHeaderDefaultMap.DeliveryPostalAddress)
        {
            _agreementHeaderTmp.DeliveryPostalAddress       = DirUtility::replaceAddressTokenLanguage(LogisticsPostalAddress::findRecId(_agreementHeaderDefaultMap.DeliveryPostalAddress), _agreementHeaderMap.language);            
        }

        if (showDeliveryTerm)
        {
            _agreementHeaderTmp.DeliveryTerm                = _agreementHeaderDefaultMap.DeliveryTerm;
        }

        if (showModeOfDelivery)
        {
            _agreementHeaderTmp.DeliveryMode                = _agreementHeaderDefaultMap.DeliveryMode;
        }

        if (showCashDiscount && _agreementHeaderDefaultMap.CashDiscountCode)
        {
            _agreementHeaderTmp.CashDiscountDescription     = CashDisc::findByCompany(_agreementHeaderDefaultMap.CashDiscountDataAreaId,
                                                                                      _agreementHeaderDefaultMap.CashDiscountCode).Description;
        }

        if ((docuOnAgreement == DocuOnFormular::All)
         || (docuOnAgreement == DocuOnFormular::Head))
        {
            DocuRefSearch docuRefSearch = _agreementHeaderMap.getAttachedDocuments(docuTypeAgreement, DocuRestriction::External);
            _agreementHeaderTmp.Notes = Docu::concatDocuRefNotes(docuRefSearch);

            if (!_agreementHeaderTmp.Notes && _agreementHeaderMap)
            {
                _agreementHeaderTmp.Notes = Docu::concatDocuRefNotes(DocuRefSearch::newTypeIdAndRestriction(
                                                        this.getAgreementHeaderTable(_agreementHeaderMap),
                                                        docuTypeAgreement,
                                                        DocuRestriction::External));
            }
        }

        if (showPayment)
        {
            _agreementHeaderTmp.PaymentTerms = _agreementHeaderDefaultMap.PaymentTerms;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementHeaderTable</Name>
				<Source><![CDATA[
    [Hookable]
    private Common getAgreementHeaderTable(AgreementHeaderMap _agreementHeaderMap)
    {
        if (_agreementHeaderMap.getInstanceRelationType() == tableStr(PurchAgreementHeaderHistory)
         || _agreementHeaderMap.getInstanceRelationType() == tableStr(SalesAgreementHeaderHistory))
        {
            AgreementHeaderHistory  agreementHeaderHistory = _agreementHeaderMap;
            return AgreementHeader::find(agreementHeaderHistory.AgreementHeader);
        }
        else
        {
            return _agreementHeaderMap;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAgreementLineTmpFromMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>AgreementLineTmp</c> table with the data from the <c>InventDim</c> table and the
    ///    <c>AgreementLineMap</c> map buffer.
    /// </summary>
    /// <param name="_agreementLineTmp">
    ///    The table to fill with the data.
    /// </param>
    /// <param name="_inventDim">
    ///    The table with the data to be copied to the <c>AgreementLineTmp</c> table buffer.
    /// </param>
    /// <param name="_agreementLineMap">
    ///    The map with the data to be copied to the <c>AgreementLineTmp</c> table buffer.
    /// </param>
    /// <param name="_languageId">
    ///    The language for this agreement.
    /// </param>
    protected void setAgreementLineTmpFromMap(AgreementLineTmp _agreementLineTmp,
                                              InventDim        _inventDim,
                                              AgreementLineMap _agreementLineMap,
                                              LanguageId       _languageId)
    {
        _agreementLineTmp.AgreementLineType = _agreementLineMap.AgreementLineType;
        _agreementLineTmp.LineNumber = _agreementLineMap.LineNumber;
        _agreementLineTmp.ExpirationDate = _agreementLineMap.ExpirationDate;
        _agreementLineTmp.EffectiveDate = _agreementLineMap.EffectiveDate;
        _agreementLineTmp.LineDiscountPercent = _agreementLineMap.LineDiscountPercent;
        _agreementLineTmp.AgreedReleaseLineMinAmount = _agreementLineMap.AgreedReleaseLineMinAmount;
        _agreementLineTmp.AgreedReleaseLineMaxAmount = _agreementLineMap.AgreedReleaseLineMaxAmount;
        if (showMaxIsEnforced)
        {
            _agreementLineTmp.IsMaxEnforced = _agreementLineMap.IsMaxEnforced;
        }
        if (_agreementLineMap.AgreementLineType == CommitmentType::ProductVolume
            || _agreementLineMap.AgreementLineType == CommitmentType::ProductQuantity)
        {
            _agreementLineTmp.ItemId = _agreementLineMap.ItemId;
            _agreementLineTmp.ItemName = InventTable::name(_agreementLineMap.ItemId, _inventDim, _languageId);
        }

        if (inventDimToShow)
        {
            _agreementLineTmp.InventDim = InventDim::dimReportStrAll(_inventDim, inventDimFields, _languageId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>