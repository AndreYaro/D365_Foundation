<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjReserveResource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Project reserve resources.
/// </summary>
class ProjReserveResource
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>releaseWorkerByEmploymentDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases all reservation of the resource associated with the worker and legal entity.
    /// </summary>
    /// <param name="_hcmWorker">
    /// Worker recId.
    /// </param>
    /// <param name="_workerLE">
    /// Worker leagle entity  recId.
    /// </param>
    /// <param name="_fromDate">
    /// Worker/legal entity from date.
    /// </param>
    /// <param name="_toDate">
    /// Worker/legal entity to date.
    /// </param>
    /// <remarks>
    /// This method will remove the project scheduling reservation past the employment end date if user confirms the removal.
    /// </remarks>
    public static void releaseWorkerByEmploymentDates(HcmWorkerRecId _hcmWorker, LegalEntityRecId _workerLE,
        ValidFromDateTime _fromDate, ValidToDateTime _toDate)
    {
        ResourceRecId   resource = ResourceFacade::findByWorker(_hcmWorker, _workerLE);

        if (resource && _toDate < DateTimeUtil::maxValue())
        {
            // Add 1 second to the end time, so if time 23:59:59 is passed here, we release the reservation starting 12:00:00 next day
            utcdatetime schedulingEndDate = DateTimeUtil::newDateTime(DateTimeUtil::date(DateTimeUtil::addSeconds(_toDate, 1)), 0);

            PSAProjSchedRole    teamTable;
            ResBooking          resBooking;
            
            select firstonly crossCompany teamTable
                where teamTable.Resource == resource
                exists join resBooking
                    where resBooking.ActivityResource == teamTable.RecId
                        && resBooking.Day >= schedulingEndDate;

            if (teamTable)
            {
                if (Box::yesNo("@Res:ConfirmRemoveReservationPastEmploymentEndDate", DialogButton::No) == DialogButton::Yes)
                {
                    while select crossCompany teamTable
                        where teamTable.Resource == resource
                    {
                        ActivityResourceFacade::releaseReservations(teamTable.RecId, schedulingEndDate, DateTimeUtil::maxValue(), false);
                    }
                }
            }

            if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
            {
                // Update resource ResRollup table records.
                ResourceLegalEntityView resourceEffectiveDatesView;
                select firstonly resource from resourceEffectiveDatesView
                where resourceEffectiveDatesView.Resource == resource;

                ActivityResourceId activityResourceId = strFmt(ResUtil::activityResourceIdStrFormat, 0, int642Str(resource), 0);
                if (resourceEffectiveDatesView.resource)
                {
                    ResRollup rollupTable;

                    select maxof(Timeframe) from rollupTable
                    where rollupTable.Resource == resourceEffectiveDatesView.resource
                        && rollupTable.Timescale == AVTimeframeType::Day;

                    // Update the resource ResRollup table records from the scheduling end day of this month to the latested date in the table.
                    utcdatetime start = AVTimeframe::getTimeframe(_toDate,
                    AVTimeframeType::Month).start();
                    utcdatetime end = rollupTable.Timeframe;

                    container arguments = [activityResourceId, start, end];
                    Global::runAsync(classNum(ResRollUpWriter),
                    staticMethodStr(ResRollUpWriter, updateRollUpForSpecificActivityResourceIdAsync), arguments);
                }
                else
                {
                    container arguments = [activityResourceId];
                    Global::runAsync(classNum(ResRollUpWriter),
                    staticMethodStr(ResRollUpWriter, removeRollUpForSpecificActivityResourceIdAsync), arguments);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>