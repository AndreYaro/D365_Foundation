<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchDispCheck_PackSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles the disposition check for packing Slips.
/// </summary>
class PdsBatchDispCheck_PackSlip extends PdsBatchDispCheck
{
    InventTransChildType inventTransChildType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNotRestrict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if shipping is blocked for the module type _moduleType.
    /// </summary>
    /// <param name="_moduleType">
    /// Module type used during disposition check.
    /// </param>
    /// <returns>
    /// True if batch is not restricted, false if it is restricted.
    /// </returns>
    protected boolean checkNotRestrict(PdsDispModuleType _moduleType)
    {
        boolean                 ret = true;
        PdsDispositionMaster    dispMaster;

        dispMaster = PdsDispositionMaster::find(
                            inventBatch.PdsDispositionCode);

        switch (_moduleType)
        {
            case PdsDispModuleType::Sales:
                if (dispMaster.PdsSalesBlockShip)
                {
                    ret = this.setReturn();
                }
                break;

            case PdsDispModuleType::Transfer:
                if (dispMaster.PdsTransBlockShip)
                {
                    ret = this.setReturn();
                }
                break;

            case PdsDispModuleType::Production:
                if (dispMaster.PdsProdBlockProductionPickingJournal
                &&  this.parmInventTransChildtype() == InventTransChildType::ProdJournalBOM)
                {
                    ret = this.setReturn();
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs standard new functionality, overriden to make protected.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransChildtype</Name>
				<Source><![CDATA[
        protected InventTransChildType parmInventTransChildtype(InventTransChildType _inventTransChildType = inventTransChildType)
    {
        inventTransChildType = _inventTransChildType;

        return inventTransChildType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns false and displays the error for the blocked <c>InventBatchId</c>.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    protected PdsDispBatchCheck setReturn()
    {
        if (!suppressMessage)
        {
            if (this.parmInventTransChildtype() == InventTransChildType::ProdJournalBOM)
            {
                checkFailed(strFmt("@SYS4000279",inventBatch.InventBatchId));
            }
            else
            {
                checkFailed(strFmt("@PRO2124",inventBatch.InventBatchId));
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method performs the disposition check on the _common record.
    /// </summary>
    /// <param name="_common">
    /// Record to perform the disposition chekc on.
    /// </param>
    /// <returns>
    /// Result of disposition check.
    /// </returns>
    public boolean validateCheck(Common _common)
    {
        boolean                 ret = true;
        SalesLine               salesLine;
        SalesParmLine           salesParmLine;
        ProdBOM                 prodBOM;
        InventTransferJourLine  transferLine;
        WMSOrderTrans           wmsOrderTrans;
        WMSOrder                wmsOrder;
        ReqTrans                reqTrans;
        PdsDispModuleType       modType;

        //clear this since it could be set when calling validateTransCheck
        this.parmInventTransChildtype(InventTransChildType::None);

        if (_common)
        {
            switch (_common.TableId)
            {
                case tableNum(SalesLine):
                    salesLine = _common;
                    this.parmBatch(InventBatch::find(
                        salesLine.inventDim().InventBatchId,salesLine.ItemId));
                    modType = PdsDispModuleType::Sales;
                    break;

                case tableNum(SalesParmLine):
                    salesParmLine = _common;
                    this.parmBatch(InventBatch::find(
                        salesParmLine.inventDim().InventBatchId,
                        salesParmLine.ItemId));
                    modType = PdsDispModuleType::Sales;
                    break;

                case tableNum(WMSOrderTrans):
                    wmsOrderTrans = _common;
                    this.parmBatch(InventBatch::find(
                        wmsOrderTrans.inventDim().InventBatchId,wmsOrderTrans.ItemId));
                    switch (wmsOrderTrans.InventTransType)
                    {
                        case InventTransType::Sales :
                            modType = PdsDispModuleType::Sales;
                            break;
                        case InventTransType::ProdLine :
                            modType = PdsDispModuleType::Production;
                            break;
                        case InventTransType::TransferOrderShip :
                            modType = PdsDispModuleType::Transfer;
                            break;
                    }
                    break;

                case tableNum(WMSOrder):
                    wmsOrder = _common;
                    this.parmBatch(InventBatch::find(
                        wmsOrder.inventDim().InventBatchId,
                        wmsOrder.ItemId));
                    switch (wmsOrder.InventTransType)
                    {
                        case InventTransType::Sales :
                            modType = PdsDispModuleType::Sales;
                            break;
                        case InventTransType::ProdLine :
                            modType = PdsDispModuleType::Production;
                            break;
                        case InventTransType::TransferOrderShip :
                            modType = PdsDispModuleType::Transfer;
                            break;
                    }
                    break;

                case tableNum(ProdBOM):
                    prodBOM = _common;
                    this.parmBatch(InventBatch::find(
                        prodBOM.inventDim().InventBatchId, prodBOM.ItemId));
                    modType = PdsDispModuleType::Production;
                    break;

                case tableNum(InventTransferJourLine):
                    transferLine = _common;
                    this.parmBatch(InventBatch::find(
                        InventDim::find(transferLine.InventDimId).InventBatchId,
                        transferLine.ItemId));
                    modType = PdsDispModuleType::Transfer;
                    break;

                case tableNum(ReqTrans):
                    reqTrans = _common;
                    this.parmBatch(InventBatch::find(
                        reqTrans.inventDim().InventBatchId,
                        reqTrans.ItemId));
                    modType = PdsDispModuleType::Planning;
                    break;
            }
        }

        ret = this.checkNotRestrict(modType);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs disposition check on inventTrans record, and either _batchId
    /// parameter or the batch related to the transaction.
    /// </summary>
    /// <param name="_inventTrans">
    /// InventTrans record to perform check on.
    /// </param>
    /// <param name="_batchId">
    /// Option batchId to perform check on.  If left blank the check is performed
    /// on the batch on the InventTrans record.
    /// </param>
    /// <returns>
    /// Result of disposition check.
    /// </returns>
    public boolean validateTransCheck(
        InventTrans     _inventTrans,
        InventBatchId   _batchId = '')
    {
        boolean                 ret = false;
        PdsDispModuleType       modType;

        if (_inventTrans)
        {
            this.parmInventTransChildtype(_inventTrans.TransChildType);
            if (!_batchId)
            {
                this.parmBatch(InventBatch::find(_inventTrans.inventBatchId(),
                                                 _inventTrans.ItemId));
            }
            else
            {
                this.parmBatch(InventBatch::find(_batchId,_inventTrans.ItemId));
            }

            switch (_inventTrans.inventTransOrigin().ReferenceCategory)
            {
                case InventTransType::Sales:
                    modType = PdsDispModuleType::Sales;
                    break;

                case InventTransType::ProdLine:
                    modType = PdsDispModuleType::Production;
                    break;

                case InventTransType::TransferOrderShip,
                     InventTransType::WMSOrder:
                    modType = PdsDispModuleType::Transfer;
                    break;

                default:
                    ret = true;
            }
        }

        if (!ret)
        {
            ret = this.checkNotRestrict(modType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a new instance of the PdsBatchDispCheck_PackSlip class.
    /// </summary>
    /// <returns>
    /// New instance of the PdsBatchDispCheck_PackSlip class.
    /// </returns>
    public static PdsBatchDispCheck_PackSlip construct()
    {
        return new PdsBatchDispCheck_PackSlip();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>