<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteDisplayCluster</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to cluster pick/put.
/// </summary>
abstract class WhsWorkExecuteDisplayCluster extends WHSWorkExecuteDisplay
{
    protected WHSWorkLine nextWorkLine;
    internal boolean suggestLocationFlightEnabled = WHSClusterPutawaySuggestPutLocationFlight::instance().isEnabled();
    internal WMSLocationId newLocationId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildAssignPositions</Name>
				<Source><![CDATA[
    /// <summary>
	/// Adds controls to form state for Assign Work to Cluster screen.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <returns>
	/// Container containing the form state after the controls are added.
	/// </returns>
    container buildAssignPositions(container _con)
    {
        return this.buildAssignPositionsFromClusterLine(_con, null);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAssignPositionsFromClusterLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Assign Work to Cluster screen based on the work cluster line record
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_workClusterLine">
    /// The cluster line to build positions for
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    private container buildAssignPositionsFromClusterLine(container _con, WHSWorkClusterLine _workClusterLine)
    {
        container           ret = _con;
        WHSClusterProfile   clusterProfile = WHSClusterProfile::find(pass.lookup(#ClusterProfile));
        
        ret += [this.buildControl(#RFLabel, #Scan, "@WAX3620", 1, '', #WHSRFUndefinedDataType, '', 0, false)];
        ret += [this.buildControl(#RFLabel, #ClusterId, strFmt("@WAX3618", pass.lookupStr(#ClusterId)), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSClusterId))];

        if (!pass.exists(#PositionCounter))
        {
            pass.insert(#PositionCounter, 0);
        }

        if (clusterProfile.ClusterPositionsActive)
        {
            if (_workClusterLine.RecId != 0)
            {
                ret += [this.buildControl(#RFLabel, #PositionName, strFmt("@WAX3619", _workClusterLine.ClusterPosition), 1, '', #WHSRFUndefinedDataType, '', 0, false)];
            }
            else
            {
                pass.insert(#ClusterPosition, this.clusterPosition(clusterProfile, str2int(pass.lookup(#PositionCounter))));
                ret += [this.buildControl(#RFLabel, #PositionName, strFmt("@WAX3619", pass.lookup(#ClusterPosition)), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSClusterPosition))];
            }
        }

        if (_workclusterLine.RecId != 0)
        {
            ret += [this.buildControl(#RFText, #WorkId, "@WAX273", 1, _workclusterLine.WorkId, extendedTypeNum(WHSWorkId), '', 0, 0)];
        }
        else
        {
            ret += [this.buildControl(#RFText, #WorkId, "@WAX273", 1, pass.lookupStr(#WorkId), extendedTypeNum(WHSWorkId), '', 0)];
        }

        if (!WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).GenerateLP)
        {
            WHSLicensePlateId targetLicensePlate = WHSWorkTable::find(pass.lookupStr(#WorkId)).TargetLicensePlateId;
            ret += [this.buildControl(#RFText, #TargetLicensePlateId, "@WAX1214", 1, targetLicensePlate, extendedTypeNum(WHSLicensePlateId), '', 0)];
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        if (str2int(pass.lookup(#PositionCounter)) > 0 && _workclusterLine.RecId == 0)
        {
            ret += [this.buildControl(#RFButton, #RFDone, "@SYS112206", 1, '', #WHSRFUndefinedDataType, '', 0)];
        }
  
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clusterPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the cluster position.
    /// </summary>
    /// <param name = "_clusterProfile">The cluster profile.</param>
    /// <param name = "_position">The current cluster position, zero based.</param>
    /// <returns>The cluster position.</returns>
    [Replaceable]
    protected WHSClusterPosition clusterPosition(WHSClusterProfile _clusterProfile, int _position)
    {
        switch (_clusterProfile.ClusterPositionName)
        {
            case WHSClusterPositionName::Alpha:
                return num2char(#AsciiA + _position);

            case WHSClusterPositionName::Numeric:
                return int2str(1 + _position);
        }

        throw Error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetClusterId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds controls to form state for Scan a Cluster Id screen.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <param name="_extraText">
	/// Label text.
	/// </param>
	/// <returns>
	/// Container containing the form state after the controls are added.
	/// </returns>
    container buildGetClusterId(container _con, str _extraText = '')
    {
        container   ret = _con;
        str         finalLabel = _extraText ? _extraText : "@WAX3542";     // Scan a Cluster Id

        ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #ClusterId, "@WAX3571", 1, '', extendedTypeNum(WHSClusterId), '', 0)];
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGroupPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds grouped pick screen.
    /// </summary>
    /// <param name="_con">
    /// Current container that represents the currently build RF screen.
    /// </param>
    /// <param name="_locationId">
    /// The warehouse location ID.
    /// </param>
    /// <returns>
    /// A container that represents the currently build RF screen including any controls built in this method.
    /// </returns>
    container buildGroupPick(container      _con,
                             WMSLocationId  _locationId)
    {
        container ret = _con;

        ret = this.buildInitialGroupPickControls(ret, _locationId);
        
        ret = this.buildPositionControls(ret, _locationId, WHSWorkType::Pick);

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFPass, "@SYS113811", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGroupPickWithoutPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds grouped pick screen without the position controls.
    /// </summary>
    /// <param name="_con">
    /// Current container that represents the currently build RF screen.
    /// </param>
    /// <param name="_locationId">
    /// The warehouse location ID.
    /// </param>
    /// <returns>
    /// A container that represents the currently build RF screen including any controls built in this method.
    /// </returns>
    protected container buildGroupPickWithoutPosition(container _con, WMSLocationId _locationId)
    {
        container ret = _con;

        ret = this.buildInitialGroupPickControls(ret, _locationId);

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFPass, "@SYS113811", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInitialGroupPickControls</Name>
				<Source><![CDATA[
    private container buildInitialGroupPickControls(container _con, WMSLocationId _locationId)
    {
        WMSLocation         location = WMSLocation::find(_locationId, pass.lookup(#InventLocationId));
        WHSRFDescription1   description1;
        WHSRFDescription2   description2;
        ItemId              itemId;
        container           ret = _con;

        itemId = this.getClusterWorkLineItemId(pass.lookup(#ClusterId), _locationId, WHSWorkType::Pick);

        description1    = WHSInventTable::find(itemId).rfDescription1;
        description2    = WHSInventTable::find(itemId).rfDescription2;

        ret += [this.buildControl(#RFLabel, 'Pick', strFmt("@WAX1275", WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #ClusterId, strFmt("@WAX3618", pass.lookup(#ClusterId)), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSClusterId))];

        ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0, false)];

        if (pass.exists(#MenuItem))
        {
            if (WHSRFAutoConfirm::isLocationConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Pick))
            {
                if (location.CheckText)
                {
                    ret += [this.buildControl(#RFText, #CheckDigit, "@WAX1197", 1, pass.lookupStr(#CheckDigit), extendedTypeNum(WMSCheckText), '', 0)];
                }
                else
                {
                    ret += [this.buildControl(#RFText, #LocVerification, "@WAX1196", 1, pass.lookupStr(#LocVerification), extendedTypeNum(WMSLocationId), '', 0)];
                }
            }
        }

        if (itemId)
        {
            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, itemId, extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

            if (description1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', description1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', InventTable::find(itemId).productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (description2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', description2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, "@WAX402", extendedTypeNum(InventInventItemSearchItem), '', 0, false)];
        }

        ret += [this.buildControl(#RFLabel, #RFQtyLabel, strFmt("@WAX3188", this.getClusterWorkLineQty(pass.lookup(#ClusterId), _locationId, WHSWorkType::Pick)), 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(Qty))];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGroupPut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds grouped put screen.
    /// </summary>
    /// <param name="_con">
    /// Current container that represents the currently build RF screen.
    /// </param>
    /// <param name="_locationId">
    /// The warehouse location ID.
    /// </param>
    /// <returns>
    /// A container that represents the currently build RF screen including any controls built in this method.
    /// </returns>
    container buildGroupPut(container      _con,
                            WMSLocationId  _locationId)
    {
        container           ret = _con;
        WMSLocation         location = WMSLocation::find(_locationId, pass.lookup(#InventLocationId));
        WHSRFDescription1   description1;
        WHSRFDescription2   description2;
        ItemId              itemId;

        if (suggestLocationFlightEnabled && !_locationId)
        {
            itemId = workLine.ItemId;
        }
        else
        {
            itemId = this.getClusterWorkLineItemId(pass.lookup(#ClusterId), _locationId, WHSWorkType::Put);
        }

        description1    = WHSInventTable::find(itemId).rfDescription1;
        description2    = WHSInventTable::find(itemId).rfDescription2;

        ret += [this.buildControl(#RFLabel, 'Put', strFmt("@WAX1270", WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #ClusterId, strFmt("@WAX3618", pass.lookup(#ClusterId)), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSClusterId))];

        if (suggestLocationFlightEnabled && !_locationId)
        {
            if (newLocationId)
            {
                ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, newLocationId, extendedTypeNum(WMSLocationId), '', 0, true)];
            }
            else
            {
                ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0, true)];
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0, false)];
        }

        if (pass.exists(#MenuItem))
        {
            if (WHSRFAutoConfirm::isLocationConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Put))
            {
                if (WHSWorkExecuteClusterPutNoAutoFillPreviousConfirmedFieldsFlight::instance().isEnabled())
                {
                    if (location.CheckText)
                    {
                        ret += [this.buildControl(#RFText, #CheckDigit, "@WAX1197", 1, '', extendedTypeNum(WMSCheckText), '', 0)];
                    }
                    else
                    {
                        ret += [this.buildControl(#RFText, #LocVerification, "@WAX1196", 1, '', extendedTypeNum(WMSLocationId), '', 0)];
                    }
                }
                else
                {
                    if (location.CheckText)
                    {
                        ret += [this.buildControl(#RFText, #CheckDigit, "@WAX1197", 1, pass.lookupStr(#CheckDigit), extendedTypeNum(WMSCheckText), '', 0)];
                    }
                    else
                    {
                        ret += [this.buildControl(#RFText, #LocVerification, "@WAX1196", 1, pass.lookupStr(#LocVerification), extendedTypeNum(WMSLocationId), '', 0)];
                    }
                }
            }
        }

        if (itemId)
        {
            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, itemId, extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

            if (description1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', description1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', InventTable::find(itemId).productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (description2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', description2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }

            if (this.mustAddProductConfirmationControl())
            {
                ret += this.addProductConfirmationControl(WHSWorkType::Put);
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, "@WAX402", extendedTypeNum(InventInventItemSearchItem), '', 0, false)];
        }

        InventHandlingQty qtyToPut = this.calculateGroupPutQty(pass.lookup(#ClusterId), _locationId);

        ret += [this.buildControl(#RFLabel, #RFQtyLabel, strFmt("@WAX3188", qtyToPut), 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(Qty))];

        if (this.mustAddQtyConfirmationControl(itemId))
        {
            pass.insert(#Qty, qtyToPut);
            ret += [this.buildControl(#RFText, #QtyVerification, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];
        }

        ret = this.buildPositionControls(ret, _locationId, WHSWorkType::Put);

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFPass, "@SYS113811", 1, '', #WHSRFUndefinedDataType, '', 0)];

        if (!_locationId)
        {
            ret = this.addSuggestLocationButton(ret, true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPopulateProductConfirmationValue</Name>
				<Source><![CDATA[
    internal boolean mustPopulateProductConfirmationValue()
    {
        boolean ret = super();
        return ret && !WHSWorkExecuteClusterPutNoAutoFillPreviousConfirmedFieldsFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddProductConfirmationControl</Name>
				<Source><![CDATA[
    internal boolean mustAddProductConfirmationControl()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddQtyConfirmationControl</Name>
				<Source><![CDATA[
    internal boolean mustAddQtyConfirmationControl(ItemId _itemId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGroupPutQty</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateGroupPutQty(WHSClusterId _clusterId, WMSLocationId  _locationId)
    {
        WHSWorkClusterLine  workClusterLine;
        WHSWorkLine         clusterWorkLine;

        InventHandlingQty groupPutQuantity;

        while select WorkId, LineNum, WorkType, InventQtyRemain from clusterWorkLine
            where clusterWorkLine.WorkType      == WHSWorkType::Put
               && clusterWorkLine.wmsLocationId == _locationId
               && clusterWorkLine.WorkStatus    != WHSWorkStatus::Cancelled
            exists join workClusterLine
                where workClusterLine.WorkId    == clusterWorkLine.WorkId
                   && workClusterLine.ClusterId == _clusterId
        {
            WHSWorkLine oppositeWorkLine = WHSWorkLine::getPrevOppositeWorkLine(clusterWorkLine.WorkId, clusterWorkLine.LineNum, clusterWorkLine.WorkType);

            if (oppositeWorkLine.WorkStatus == WHSWorkStatus::Closed)
            {
                groupPutQuantity += clusterWorkLine.InventQtyRemain;
            }
        }

        return groupPutQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPositionControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds position controls for grouped picks/puts.
    /// </summary>
    /// <param name="_con">
    /// Current container that represents the currently build RF screen.
    /// </param>
    /// <param name="_locationId">
    /// The warehouse location ID.
    /// </param>
    /// <param name="_workType">
    /// The work type.
    /// </param>
    /// <returns>
    /// A container that represents the currently build RF screen including any controls built in this method.
    /// </returns>
    container buildPositionControls(container       _con,
                                    WMSLocationId   _locationId,
                                    WHSWorkType     _workType)
    {   
        if (_workType == WHSWorkType::Put)
        {
            if (suggestLocationFlightEnabled && !_locationId)
            {
                return this.buildPositionControlsForPutWorkTypeEmptyLocation(_con);
            }

            return this.buildPositionControlsForPutWorkType(_con, _locationId);
        }

        container           ret = _con;
        int                 i;
        WHSWorkClusterLine  clusterLine;
        WHSWorkLine         tmpWorkLine;
        
        while select ClusterPosition from clusterLine
            group by ClusterPosition
            join WorkId, WorkType, wmsLocationId, InventQtyRemain from tmpWorkLine
            where  clusterLine.ClusterId        == pass.lookup(#ClusterId)  
                && tmpWorkLine.WorkId           == clusterLine.WorkId    
                && tmpWorkLine.WorkType         == _workType                
                && tmpWorkLine.wmsLocationId    == _locationId              
                && tmpWorkLine.InventQtyRemain   > 0
                && tmpWorkLine.WorkStatus       != WHSWorkStatus::Cancelled
        {
            ret += [this.buildControl(#RFLabel, strFmt('%1', i), strFmt("@WAX3619", clusterLine.ClusterPosition), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSClusterPosition))];
            ++i;
        }
       

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPositionControlsForPutWorkType</Name>
				<Source><![CDATA[
    private container buildPositionControlsForPutWorkType(container _con, WMSLocationId _locationId)
    {
        container           ret = _con;
        int                 clusterPositionCountForPutLocation;
        WHSWorkClusterLine  clusterLine;
        WHSWorkLine         localworkLine;
        Set clusterPositionSet = new Set(Types::String);

        while select ClusterPosition from clusterLine
            order by ClusterPosition asc
            join WorkId, WorkType, LineNum, ItemId, InventDimId from localWorkLine
            where  clusterLine.ClusterId        == pass.lookup(#ClusterId)
                && localWorkLine.WorkId           == clusterLine.WorkId
                && localWorkLine.WorkType         == WHSWorkType::Put
                && localWorkLine.wmsLocationId    == _locationId
                && localWorkLine.InventQtyRemain   > 0
                && localWorkLine.WorkStatus       != WHSWorkStatus::Cancelled
        {
            if (clusterPositionSet.in(clusterLine.ClusterPosition))
            {
                continue;
            } 
            boolean positionAdded;
            [positionAdded, ret] = this.buildClusterPositionControlForPut(ret, localWorkLine, clusterLine.ClusterPosition, clusterPositionCountForPutLocation);

            if (positionAdded)
            {
                clusterPositionSet.add(clusterLine.ClusterPosition);
                ++clusterPositionCountForPutLocation;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPositionControlsForPutWorkTypeEmptyLocation</Name>
				<Source><![CDATA[
    private container buildPositionControlsForPutWorkTypeEmptyLocation(container _con)
    {
        container           ret = _con;
        WHSWorkClusterLine  clusterLine;
        boolean positionAdded;

        Set clusterPositionSet = new Set(Types::String);

        select ClusterPosition from clusterLine
            order by ClusterPosition asc
            where  clusterLine.ClusterId        == pass.lookup(#ClusterId)
                && clusterLine.WorkId           == workLine.WorkId;

        [positionAdded, ret] = this.buildClusterPositionControlForPut(ret, workLine, clusterLine.ClusterPosition, 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildClusterPositionControlForPut</Name>
				<Source><![CDATA[
    private container buildClusterPositionControlForPut(container _con, WHSWorkLine _workLine, WHSClusterPosition _clusterPosition, int _positionCount)
    {
        boolean positionAdded = false;
        container ret = _con;
        WHSWorkLine oppositeWorkLine = WHSWorkLine::getPrevOppositeWorkLine(_workLine.WorkId, _workLine.LineNum, _workLine.WorkType);

        if (oppositeWorkLine.WorkStatus == WHSWorkStatus::Closed)
        {
            positionAdded = true;

            ret += [this.buildControl(#RFLabel, strFmt('%1', _positionCount), strFmt("@WAX3619", _clusterPosition), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSClusterPosition))];
            if (mode == WHSWorkExecuteMode::SystemDirectedClusterPicking)
            {
                ret = this.buildAboveLocationDimensions(ret, InventDim::find(_workLine.InventDimId), _workLine.ItemId);
            }
        }

        return [positionAdded, ret];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClusterItemLocationQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the remaining qty for a cluster location, cluster position and Item
    /// </summary>
    /// <param name="_clusterId">
    /// The Work Cluster ID
    /// </param>
    /// <param name="_locationId">
    /// The Location for which Qty should be calculated
    /// </param>
    /// <param name="_itemId">
    /// The item for which Qty should be calculated
    /// </param>
    /// <param name="_workType">
    /// The Work Type for which Qty should be calculated
    /// </param>
    /// <returns>
    /// The summed remaining Qty
    /// </returns>
    public Qty getClusterItemLocationQty(WHSClusterId   _clusterId,
                                        WMSLocationId   _locationId,
                                        ItemId          _itemId,
                                        WHSWorkType     _workType = WHSWorkType::pick)
    {
        WHSWorkClusterLine  whsWorkClusterLine;
        WHSWorkLine         whsWorkLine;

       select sum(InventQtyRemain) from whsWorkLine
            where whsWorkLine.ItemId        == _itemId
            &&    whsWorkLine.wmsLocationId == _locationId
            &&    whsWorkLine.WorkType      == _workType
                    exists join whsWorkClusterLine
                    where whsWorkClusterLine.WorkId    == whsWorkLine.WorkId
                    &&   whsWorkClusterLine.ClusterId == _clusterId;

        return whsWorkLine.InventQtyRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClusterWorkLineItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets clustered work's Item ID if possible.
    /// </summary>
    /// <param name="_clusterId">
    /// The cluster ID.
    /// </param>
    /// <param name="_locationId">
    /// The warehouse location ID.
    /// </param>
    /// <param name="_workType">
    /// The work type.
    /// </param>
    /// <returns>
    /// Clustered work's Item ID if it exists otherwise, empty string.
    /// </returns>
    ItemId getClusterWorkLineItemId(WHSClusterId    _clusterId,
                                    WMSLocationId   _locationId,
                                    WHSWorkType     _workType)
    {
        WHSWorkClusterLine  clusterLine;
        WHSWorkLine         clusterWorkLine;
        ItemId              tmpItemId;

        while select ItemId from clusterWorkLine
            join WorkId, ClusterId from clusterLine
            where clusterWorkLine.WorkId         == clusterLine.WorkId       &&
                  clusterLine.ClusterId          == _clusterId               &&
                  clusterWorkLine.wmsLocationId  == _locationId              &&
                  clusterWorkLine.WorkType       == _workType                &&
                  (clusterWorkLine.WorkStatus    == WHSWorkStatus::Open      ||
                   clusterWorkLine.WorkStatus    == WHSWorkStatus::InProcess)
        {
            if (!clusterWorkLine.ItemId)
            {
                tmpItemId = '';
                break;
            }
            else if (!tmpItemId)
            {
                tmpItemId = clusterWorkLine.ItemId;
            }
            else if (clusterWorkLine.ItemId != tmpItemId)
            {
                tmpItemId = '';
                break;
            }
        }

        return tmpItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClusterWorkLineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining qty for a group pick
    /// </summary>
    /// <param name="_clusterId">
    /// The cluster ID
    /// </param>
    /// <param name="_locationId">
    /// The warehouse location ID
    /// </param>
    /// <param name="_workType">
    /// The work type
    /// </param>
    /// <returns>
    /// The remaining qty for a group pick
    /// </returns>
    public Qty getClusterWorkLineQty(WHSClusterId    _clusterId,
                              WMSLocationId   _locationId,
                              WHSWorkType     _workType)
    {
        WHSWorkClusterLine  workClusterLine;
        WHSWorkLine         clusterWorkLine;

        select sum(InventQtyRemain) from clusterWorkLine
            join WorkId, ClusterId from workClusterLine
            where  clusterWorkLine.WorkId        == workClusterLine.WorkId       
                && clusterWorkLine.WorkType      == _workType                    
                && clusterWorkLine.wmsLocationId == _locationId         
                && clusterWorkLine.WorkStatus    != WHSWorkStatus::Cancelled         
                && workClusterLine.ClusterId     == _clusterId;

        return clusterWorkLine.InventQtyRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextGroupPickLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get location of summed Pick work lines after initial picks.
    /// </summary>
    /// <param name="_clusterId">
    /// The work cluster ID.
    /// </param>
    /// <returns>
    /// Container of pick work line warehouse location is and pick work line work stop value.
    /// </returns>
    container getNextGroupPickLocation(WHSClusterId _clusterId)
    {
        WHSWorkLine             pickWorkLine;
        WHSWorkLine             prevWorkLine;
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    qbdsPickWorkLine;
        QueryBuildDataSource    qbdsCluster;
        QueryBuildRange         qbrPickWorkStatus;
        QueryBuildRange         qbrPickWorkType;
        QueryBuildRange         qbrCluster;
        WHSClusterSort          clusterSort;
        SortOrder               sortOrder;

        query = new Query();

        qbdsCluster         = query.addDataSource(tableNum(WHSWorkClusterLine));
        qbdsPickWorkLine    = qbdsCluster.addDataSource(tableNum(WHSWorkLine));

        qbdsPickWorkLine.relations(true);
        qbdsPickWorkLine.addLink(fieldNum(WHSWorkClusterLine, WorkId), fieldNum(WHSWorkLine, WorkId), qbdsCluster.name());

        qbrCluster = qbdsCluster.addRange(fieldNum(WHSWorkClusterLine, ClusterId));
        qbrCluster.value(_clusterId);

        qbrPickWorkStatus = qbdsPickWorkLine.addRange(fieldNum(WHSWorkLine, WorkStatus));
        qbrPickWorkStatus.value(strFmt("@SYS26868", enum2str(WHSWorkStatus::Open), enum2str(WHSWorkStatus::InProcess)));

        qbrPickWorkType = qbdsPickWorkLine.addRange(fieldNum(WHSWorkLine, WorkType));
        qbrPickWorkType.value(enum2str(WHSWorkType::Pick));

        qbdsPickWorkLine.addOrderByField(fieldNum(WHSWorkLine, WorkStop), SortOrder::Descending);

        // Add Order by fields
        while select clusterSort
            where clusterSort.ClusterProfileId == pass.lookup(#ClusterProfile)
        {
            if (clusterSort.AscendingDescending == AscendingDescending::Ascending)
            {
                sortOrder = SortOrder::Ascending;
            }
            else
            {
                sortOrder = SortOrder::Descending;
            }

            qbdsPickWorkLine.addOrderByField(fieldName2id(tableNum(WHSWorkLine), clusterSort.FieldName), sortOrder);
        }

        queryRun = new QueryRun(query);

        boolean isPutawayClusterPickLocPrevWorkLineEnabled = WHSPutawayClusterPickLocPrevWorkLineFlight::instance().isEnabled();
        
        boolean isClusterTypePicking = WHSWorkClusterTable::isClusterTypePicking(_clusterId);

        while (queryRun.next())
        {
            pickWorkLine = queryRun.get(tableNum(WHSWorkLine));

            if (isPutawayClusterPickLocPrevWorkLineEnabled
                && !isClusterTypePicking)
            {
                prevWorkLine = WHSWorkLine::getPrevOppositeWorkLine(pickWorkLine.WorkId, pickWorkLine.LineNum, pickWorkLine.WorkType);
            }
            else
            {
                select firstonly prevWorkLine
                    where prevWorkLine.WorkId    == pickWorkLine.WorkId   &&
                          prevWorkLine.LineNum   == pickWorkLine.LineNum - 1;
            }
            
            if (this.isInitialPickForPutawayCluster(_clusterId, prevWorkLine))
            {
                break;
            }

            if (prevWorkLine.WorkStatus == WHSWorkStatus::Closed)
            {
                break;
            }
            else
            {
                pickWorkLine.clear();
            }
        }

        if (!isClusterTypePicking 
            && pickWorkLine
            && WHSPutawayClusterWorkClassIdCheckFlight::instance().isEnabled()
            && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), pickWorkLine.WorkClassId))
        {
            throw error("@WAX1459");
        }

        nextWorkLine = pickWorkLine;

        return [pickWorkLine.wmsLocationId, pickWorkLine.WorkStop];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInitialPickForPutawayCluster</Name>
				<Source><![CDATA[
    private boolean isInitialPickForPutawayCluster(WHSClusterId _clusterId, WHSWorkLine _prevWorkLine)
    {
        return WHSWorkClusterTable::find(_clusterId).ClusterType == WHSClusterType::Putaway
            && _prevWorkLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextGroupPutLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get warehouse location ID of summed putaway work lines after initial picks.
    /// </summary>
    /// <param name="_clusterId">
    /// The cluster ID.
    /// </param>
    /// <returns>
    /// Warehouse location ID of summed putaway work lines after initial picks.
    /// </returns>
    WMSLocationId getNextGroupPutLocation(WHSClusterId _clusterId)
    {
        WHSWorkLine             putWorkLine;
        WHSWorkLine             prevWorkLine;
       
        Query query = WHSWorkClusterQueryBuilder::newFromClusterId(_clusterId).buildPutWorkLinesCanBeProcessed(pass.lookup(#ClusterProfile));
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            putWorkLine = queryRun.get(tableNum(WHSWorkLine));

            prevWorkLine = WHSWorkLine::getPrevOppositeWorkLine(putWorkLine.WorkId, putWorkLine.LineNum, putWorkLine.WorkType);

            if (prevWorkLine.WorkStatus == WHSWorkStatus::Closed)
            {
                break;
            }
            else
            {
                putWorkLine.clear();
            }
        }
        return putWorkLine.wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllWorkLinesHaveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all work line associated to the work have location set.
    /// </summary>
    /// <param name="_workId">
    /// The Id of the work being validated.
    /// </param>
    /// <returns>
    /// True if all work lines have a location; otherwise False.
    /// </returns>
    [Hookable(false)]
    internal boolean checkAllWorkLinesHaveLocation(WHSWorkId _workId)
    {
        WHSWorkLine noLocWorkLine;
    
        select firstOnly RecId from noLocWorkLine
            where noLocWorkLine.WorkId == _workId
                && noLocWorkLine.WMSLocationId == '';
    
        return noLocWorkLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAssignPositionsForCluster</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Adds controls to form state for Assign Work to Cluster screen.
    /// </summary>
    /// <param name = "_con">Container containing the form state before the controls are added.</param>
    /// <param name = "_workClusterLine">The <c>WhsWorkClusterLine</c> record to use as input</param>
    /// <returns>Container containing the form state after the controls are added.</returns>
    [Hookable(false)]
    internal final container buildAssignPositionsForCluster(container _con, WHSWorkClusterLine _workClusterLine)
    {
        container ret = _con;
        
        
        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).MenuItemDirectedBy == WHSMenuItemDirectedBy::SystemDirectedClusterPicking)
        {
            ret = this.buildAssignPositionsFromClusterLine(_con, _workClusterLine);
            return ret;
        } 
        else if (_workClusterLine) 
        {
            throw error("@SYS104799");
        }

        ret = this.buildAssignPositions(_con);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeBatchPrintForCluster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes batch print for cluster.
    /// </summary>
    /// <param name = "_clusterId">Cluster ID.</param>
    /// <param name = "_con"> Current container that represents the currently build RF screen.</param>
    [Hookable(false)]
    protected void executeBatchPrintForCluster(
        WHSClusterId _clusterId,
        container    _con)
    {
        WHSWorkClusterLine  workClusterLine;
        WHSWorkTable        printWorkTable;
        WHSWorkLine         printWorkLine;

        while select WorkId, WorkTransType, TargetLicensePlateId
            from printWorkTable
            order by WorkId asc
        join printWorkLine
            order by LineNum asc
            where printWorkLine.WorkId     == printWorkTable.WorkId
            &&    printWorkLine.WorkType   == WHSWorkType::Print
            &&   (printWorkLine.WorkStatus == WHSWorkStatus::Open
            ||    printWorkLine.WorkStatus == WHSWorkStatus::InProcess)
        exists join workClusterLine
            where workClusterLine.ClusterId == _clusterId
            &&    workClusterLine.WorkId    == printWorkTable.WorkId
        {
            this.processPrintWorkLine(printWorkTable, printWorkLine, _con);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPrintWorkLine</Name>
				<Source><![CDATA[
    private void processPrintWorkLine(
        WHSWorkTable _printWorkTable,
        WHSWorkLine  _printWorkLine,
        container    _con)
    {
        WHSWorkLine prevWorkLine;

        select firstonly WorkStatus, LineNum
            from prevWorkLine
            order by LineNum desc
            where prevWorkLine.WorkId     == _printWorkLine.WorkId
            &&    prevWorkLine.LineNum    <  _printWorkLine.LineNum
            &&    prevWorkLine.WorkStatus != WHSWorkStatus::Cancelled
            &&    prevWorkLine.WorkStatus != WHSWorkStatus::Skipped;

        if (!prevWorkLine || prevWorkLine.WorkStatus == WHSWorkStatus::Closed)
        {
            WHSWorkExecuteMode workExecuteMode = this.getWorkExecuteModeFromWorkTransType(_printWorkTable.WorkTransType, _printWorkTable.TargetLicensePlateId);

            workLine = _printWorkLine;

            this.getStep(_con, workExecuteMode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeBatchCustomWorkForCluster</Name>
				<Source><![CDATA[
    internal boolean executeBatchCustomWorkForCluster(
        WHSClusterId _clusterId)
    {
        boolean workLineProcessed = false;

        WHSWorkClusterLine  workClusterLine;
        WHSWorkLine         customWorkLine;
        WHSWorkLine         prevWorkLine;

        while select customWorkLine
            order by LineNum asc
            where customWorkLine.WorkType   == WHSWorkType::Custom
            &&   (customWorkLine.WorkStatus == WHSWorkStatus::Open
            ||    customWorkLine.WorkStatus == WHSWorkStatus::InProcess)
        exists join workClusterLine
            where workClusterLine.ClusterId == _clusterId
            &&    workClusterLine.WorkId    == customWorkLine.WorkId
        notexists join prevWorkLine
            where prevWorkLine.WorkId == customWorkLine.WorkId
               && prevWorkLine.LineNum < customWorkLine.LineNum
               &&   (prevWorkLine.WorkStatus == WHSWorkStatus::Open
               ||    prevWorkLine.WorkStatus == WHSWorkStatus::InProcess)
        {
            this.processCustomWorkLine(customWorkLine);
            workLineProcessed = true;
        }

        return workLineProcessed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustomWorkLine</Name>
				<Source><![CDATA[
    private void processCustomWorkLine(
        WHSWorkLine  _customWorkLine)
    {
        WHSWorkTypeCustom workTypeCustom = WHSWorkTypeCustom::find(_customWorkLine.WorkTypeCustomCode);
    
        // Actual custom method invocation.
        if (workTypeCustom.WorkTypeCustomMethod)
        {
            WhsWorkTypeCustomProcessParameters processParameters = WhsWorkTypeCustomProcessParameters::construct();
            processParameters.workLine = _customWorkLine;
            processParameters.pass = pass;
            workTypeCustom.processWorkLine(processParameters);
        }
    
        WhsWorkExecute::construct().confirmCustomWork(_customWorkLine.WorkId, _customWorkLine.LineNum, userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findClusterWorkLineForOverride</Name>
				<Source><![CDATA[
    internal final WHSWorkLine findClusterWorkLineForOverride(
        WHSClusterId    _clusterId,
        WMSLocationId   _locationId)
    {
        WHSWorkLine         putWorkLine;
        WHSWorkClusterLine  workClusterLine;
    
        select firstOnly putWorkLine
            where putWorkLine.WorkType          == WHSWorkType::Put
            &&    putWorkLine.InventQtyRemain   != 0
            &&    putWorkLine.WMSLocationId     == _locationId
            exists join workClusterLine
                where workClusterLine.WorkId    == putWorkLine.WorkId
                &&    workClusterLine.ClusterId == _clusterId;
    
        return putWorkLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>