<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableForm_DeliverySchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTableForm_DeliverySchedule</c> class is used to manage delivery schedules.
/// </summary>
/// <remarks>
///    This class is used by the <c>PurchDeliverySchedule</c> form.
/// </remarks>
[PurchTableFormIdFactoryAttribute(PurchTableFormId::DeliverySchedule)]
class PurchTableForm_DeliverySchedule extends PurchTableForm_DlvScheduleSyncEnabled
{
    PurchLine                               callerPurchLine;
    PurchLine                               orderLine;

    List                                    scheduleLines;
    DlvScheduleMarkupConversionMode         dlvScheduleMarkupConversionMode;
    LineNum                                 minLineNum;
    TradeDeliveryScheduleLineNumberManager  deliveryScheduleLineNumberManager;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        dlvScheduleMarkupConversionMode
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAgreementDisassociation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the update of the <c>PurchLine</c> table with the values that are stored in the
    ///    temporary form data source would cause a disassociation from an agreement.
    /// </summary>
    /// <returns>
    ///    true if the agreement disassociation would be needed; otherwise, false.
    /// </returns>
    boolean checkAgreementDisassociation()
    {
        PurchQty            qtyDiff;
        PurchLine           testPurchLine;
        PurchLine           tmpPurchLine;
        AgreementLine       agreementLine;
        boolean             linkOk = true;
        ListEnumerator      scheduleLinesEnumerator = scheduleLines.getEnumerator();

        if (!callerPurchLine.isLinkedToAgreement())
        {
            return false;
        }

        agreementLine = AgreementLine::find(callerPurchLine.MatchingAgreementLine);

        scheduleLinesEnumerator.reset();

        while (linkOk && scheduleLinesEnumerator.moveNext())
        {
            [tmpPurchLine] = scheduleLinesEnumerator.current();
            // testing each line against agreement conditions with Qty modified by the cumulative Qty delta of all the previous lines
            testPurchLine = PurchLine::findInventTransId(tmpPurchLine.InventTransId, false);
            if (testPurchLine)
            {
                testPurchLine.initFromPurchLine(tmpPurchLine, true, true, true);
                testPurchLine.DeliveryDate  = tmpPurchLine.DeliveryDate;
                testPurchLine.ConfirmedDlv  = tmpPurchLine.ConfirmedDlv;
            }
            else
            {
                testPurchLine = tmpPurchLine;
            }

            testPurchLine.PurchQty += qtyDiff;
            linkOk = agreementLine.isLinkValid(testPurchLine, false);
            testPurchLine.PurchQty -= qtyDiff;

            qtyDiff += tmpPurchLine.PurchQty - testPurchLine.orig().PurchQty;
        }

        return !linkOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the business logic triggered by pressing the OK button on the delivery schedule form.
    /// </summary>
    /// <param name="_formDataSource">
    ///    The data source of the delivery schedule form.
    /// </param>
    /// <returns>
    ///    true if the form should be closed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is called from the client. It just packs and passes all the data to a server method.
    /// </remarks>
    boolean closeOk(FormDataSource _formDataSource)
    {
        List        newScheduleLines = new List(Types::Container);
        PurchLine   purchLine;

        purchLine.setTmp();
        purchLine.setTmpData(_formDataSource.cursor());

        while select purchLine
        {
            newScheduleLines.addEnd([purchLine]);
        }

        return PurchTableForm_DeliverySchedule::closeOkServer(callerPurchLine,
            newScheduleLines.pack(),
            dlvScheduleMarkupConversionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a new order line can be created.
    /// </summary>
    /// <param name="_purchLine">
    ///    The currently selected purchase order line.
    /// </param>
    /// <returns>
    ///    true if order lines can be edited and the intercompany settings enable line creation; otherwise,
    ///    false.
    /// </returns>
    boolean createLineAllowed(PurchLine _purchLine)
    {
        boolean  createLine = this.editLineAllowed(_purchLine);

        if (createLine
            && purchTable.interCompanyAllowIndirectCreationOrig())
        {
            createLine = false;
        }

        return createLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLineAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified order line can be deleted.
    /// </summary>
    /// <param name="_purchLine">
    ///    The order line to check for deletion.
    /// </param>
    /// <returns>
    ///    true if order lines can be edited, the intercompany settings enable line deletion, and the
    ///    <c>checkDelete</c> method returns true; otherwise, false.
    /// </returns>
    boolean deleteLineAllowed(PurchLine _purchLine)
    {
        boolean  deleteLine = true;

        if (_purchLine.InterCompanyOrigin == InterCompanyOrigin::Derived
            && purchTable.isInterCompanyOrder())
        {
            deleteLine = false;
        }
        else
        {
            deleteLine = this.editLineAllowed(_purchLine) && _purchLine.checkDelete(false, purchTable);
        }

        return deleteLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves committed total quantity of the delivery schedule.
    /// </summary>
    /// <returns>
    ///     The quantity on the order line captured at the time of opening the form.
    /// </returns>
    public PurchQty getOrderLineQty()
    {
        return orderLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueElementName()
    {
        return formStr(PurchDeliverySchedule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>SalesTableForm_DeliverySchedule</c> object.
    /// </summary>
    /// <param name="_source">
    /// The line for which the form was opened.
    /// </param>
    void new(Common _source)
    {
        callerPurchLine     = _source;
        scheduleLines       = new List(Types::Container);

        switch (callerPurchLine.LineDeliveryType)
        {
            case LineDeliveryType::OrderLineWithMultipleDeliveries:
                orderLine.data(callerPurchLine);
                break;
            case LineDeliveryType::DeliveryLine:
                orderLine = PurchDeliverySchedule::findOrderLineForDeliveryLine(callerPurchLine.InventTransId);
                if (!orderLine)
                {
                    // The order line of the selected delivery line was deleted.
                    throw error("@SYS131419");
                }
                break;
            default:
                // called for an order line without delivery lines
                orderLine.data(callerPurchLine);
        }

        super (callerPurchLine.purchTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupConversionMode</Name>
				<Source><![CDATA[
    DlvScheduleMarkupConversionMode parmMarkupConversionMode(DlvScheduleMarkupConversionMode _dlvScheduleMarkupConversionMode = dlvScheduleMarkupConversionMode)
    {
        dlvScheduleMarkupConversionMode = _dlvScheduleMarkupConversionMode;
        return dlvScheduleMarkupConversionMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduleLines</Name>
				<Source><![CDATA[
    public List parmScheduleLines(List _scheduleLines = scheduleLines)
    {
        scheduleLines = _scheduleLines;

        return scheduleLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTotalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total quantity of the delivery schedule.
    /// </summary>
    /// <returns>
    ///     The sum of quantity of all the lines in the delivery schedule.
    /// </returns>
    protected PdsCWInventQty pdsCWTotalQty()
    {
        PdsCWInventQty  qty;
        PurchLine       purchLine;
        ListEnumerator  scheduleLinesEnumerator = scheduleLines.getEnumerator();

        scheduleLinesEnumerator.reset();
        while (scheduleLinesEnumerator.moveNext())
        {
            purchLine = scheduleLinesEnumerator.current();
            qty += purchLine.PdsCWQty;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsGetCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves committed total catch weight quantity of the delivery schedule.
    /// </summary>
    /// <returns>
    ///     The catch weight quantity on the order line captured at the time of opening the form.
    /// </returns>
    public PdsCWInventQty pdsGetCWQty()
    {
        return orderLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_Init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data source of the form.
    /// </summary>
    /// <param name="_purchLine">
    /// The cursor of the data source to be initialized.
    /// </param>
    /// <remarks>
    /// It sets the data source table buffer to temporary mode and then populates it with the delivery
    /// lines of the schedule that the form was called for or with the line that it was called for to make
    /// sure it was not an order line without delivery lines.
    /// </remarks>
    public void purchLine_Init(PurchLine _purchLine)
    {
        PurchLine               localPurchLine;
        PurchDeliverySchedule   purchDeliverySchedule;

        _purchLine.setTmp();
        delete_from _purchLine;

        deliveryScheduleLineNumberManager = TradeDeliveryScheduleLineNumberManager::newOrderLineWithMultipleDeliveries(callerPurchLine);
        lineNumberManager                 = deliveryScheduleLineNumberManager;

        if (callerPurchLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
        || callerPurchLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
        {
            deliveryScheduleLineNumberManager.addUsedLineNumber(orderLine.LineNumber);
            while select localPurchLine
                where !localPurchLine.IsDeleted
                exists join purchDeliverySchedule
                    where purchDeliverySchedule.OrderLine    == orderLine.InventTransId
                       && purchDeliverySchedule.DeliveryLine == localPurchLine.InventTransId
            {
                _purchLine.data(localPurchLine);
                _purchLine.doInsert();
                deliveryScheduleLineNumberManager.addUsedLineNumber(_purchLine.LineNumber);
            }
        }
        else
        {
            // The callerPurchLine should be moved to last (It will not be written until form close)
            deliveryScheduleLineNumberManager.moveLineToLast(false);
            deliveryScheduleLineNumberManager.addUsedLineNumber(callerPurchLine.LineNumber);
            _purchLine.data(callerPurchLine);
            _purchLine.LineDeliveryType         = LineDeliveryType::DeliveryLine;
            _purchLine.InventTransId            = '';
            _purchLine.SourceDocumentLine       = 0;
            _purchLine.ManualEntryChangepolicy  = 0;
            _purchLine.SystemEntryChangePolicy  = 0;
            _purchLine.PurchReqLineRefId        = emptyGuid();

            deliveryScheduleLineNumberManager.setLine(_purchLine);
            deliveryScheduleLineNumberManager.preUpdateLineNumber(true);
            deliveryScheduleLineNumberManager.updateLineNumber();
            deliveryScheduleLineNumberManager.postUpdateLineNumber();
            _purchLine.doInsert();
        }
        deliveryScheduleLineNumberManager.initLineNumberRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_InitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new delivery line.
    /// </summary>
    /// <param name="_purchLine">
    /// The line to initialize.
    /// </param>
    void purchLine_InitValue(PurchLine _purchLine)
    {
        _purchLine.initFromOrderLineWithMultipleDeliveries(orderLine);
        deliveryScheduleLineNumberManager.setLine(_purchLine);
        deliveryScheduleLineNumberManager.preUpdateLineNumber(true, FormDataUtil::getFormDataSource(_purchLine));
        deliveryScheduleLineNumberManager.updateLineNumber();

        InventMovement::bufferSetTransQtyUnit(_purchLine);
        InventMovement::bufferSetRemainQty(_purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_ValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes write validation logic on a purchase delivery line.
    /// </summary>
    /// <param name="_purchLine">
    /// A buffer of the <c>PurchLine</c> table.
    /// </param>
    /// <returns>
    /// true if the validation success; otherwise, false.
    /// </returns>
    public boolean purchLine_ValidateWrite(PurchLine _purchLine)
    {
        boolean ret = true;

        if (ret)
        {
            deliveryScheduleLineNumberManager.setLine(_purchLine);
            ret = deliveryScheduleLineNumberManager.checkLineNumber();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_WritePostSuper</Name>
				<Source><![CDATA[
    /*
      In previous version <c>purchLine</c> was passed in as parameter, now <c>purchLine</c> must be added to the input contract object passed in.
    */
    public PurchLineWritePostSuperOutputContract purchLine_WritePostSuper(PurchLineWritePostSuperInputContract _inputContract)
    {
        PurchLineWritePostSuperOutputContract outputContract;
        outputContract = super(_inputContract);
        deliveryScheduleLineNumberManager.postUpdateLineNumber();
        return outputContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total quantity of the delivery schedule.
    /// </summary>
    /// <returns>
    ///     The sum of quantity of all the lines in the delivery schedule.
    /// </returns>
    protected PurchQty totalQty()
    {
        PurchQty        qty;
        PurchLine       purchLine;
        ListEnumerator  scheduleLinesEnumerator = scheduleLines.getEnumerator();

        scheduleLinesEnumerator.reset();
        while (scheduleLinesEnumerator.moveNext())
        {
            purchLine = scheduleLinesEnumerator.current();
            qty += purchLine.PurchQty;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedPurchLineForInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized event for the <c>PurchLine</c> being inserted; a point to add further initializations.
    /// </summary>
    /// <param name = "_purchLine">The initialized <c>PurchLine</c> record.</param>
    protected void initializedPurchLineForInsert(PurchLine _purchLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers an accepted delivery schedule from the temporary form data source to the <c>PurchLine</c>
    /// table in the database.
    /// </summary>
    /// <param name="_agreementDisassociationNeeded">
    /// A Boolean value that indicates whether delivery schedule needs to be unlinked form an agreement
    /// before being updated.
    /// </param>
    /// <remarks>
    /// If the form was opened for an order line without delivery lines it is first converted to a delivery
    /// schedule.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The delivery schedule update failed, it violates the referenced agreement constraints, the
    /// insertion of the delivery line failed, or the deletion of the delivery line failed.
    /// </exception>
    void updatePurchLineTable(boolean _agreementDisassociationNeeded)
    {
        #OCCRetryCount

        try
        {
            if (WHSLoadTable::existShippedLoadForOrderLine(orderLine.InventTransId))
            {
                throw error("@WAX:DeliveryScheduleError");
            }

            ttsbegin;

            if (_agreementDisassociationNeeded)
            {
                AgreementLineReleasedLine::unlinkPurchDeliverySchedule(orderLine.InventTransId);
                orderLine.reread(); // orderLine.MatchingAgreementLine is zeroed.
            }

            // Change all line numbers to negative to avoid update conflicts.
            ListEnumerator scheduleLinesEnumerator = scheduleLines.getEnumerator();
            TradeDeliveryScheduleLineNumberManager::construct().setNegativeLineNumbers(scheduleLinesEnumerator);

            boolean                     initialConversion = false;
            SalesQty                    totalQty;
            SalesQty                    allocateQtyRemain;
            SalesMarkup                 purchMarkupAllocateRemain;
            SalesMarkup                 purchMarkupAllocateHere;
            PurchLineAmount             lineAmountAllocateRemain;
            PurchLineAmount             lineAmountAllocateHere;
            Map                         fixedMarkupRemainMap;
            if (callerPurchLine.LineDeliveryType == LineDeliveryType::OrderLine)
            {
                initialConversion = true;
                totalQty = this.totalQty();
                allocateQtyRemain = totalQty;
                purchMarkupAllocateRemain = orderLine.PurchMarkup;
                lineAmountAllocateRemain = callerPurchLine.LineAmount;
                orderLine.PurchQty = this.totalQty(); // set totalQty for misc charges allocation purposes
                fixedMarkupRemainMap = new Map(Types::Int64, Types::Container);
            }

            PurchLine                           dbPurchLine;
            PurchDeliverySchedule               purchDeliverySchedule;
            Set                                 inventTransIds = new Set(Types::String);
            PurchLineWritePreSuperInputContract inputContract = PurchLineWritePreSuperInputContract::construct();

            scheduleLinesEnumerator.reset();
            while (scheduleLinesEnumerator.moveNext())
            {
                PurchLine tmpPurchLine;

                [tmpPurchLine] = scheduleLinesEnumerator.current();

                if (tmpPurchLine.PurchQty == orderLine.PurchQty
                    &&  WHSLoadLine::existsForInventTransId(orderLine.InventTransId))
                {
                    throw error("@WAX:DeliveryScheduleErrorMovingPurchaseLine");
                }

                if (initialConversion)
                {
                    // for split markup allocation calculate the markup for the current line.
                    if (dlvScheduleMarkupConversionMode == DlvScheduleMarkupConversionMode::Split)
                    {
                        if (tmpPurchLine.PurchQty >= allocateQtyRemain)
                        {
                            purchMarkupAllocateHere = CurrencyExchangeHelper::amount(purchMarkupAllocateRemain, tmpPurchLine.CurrencyCode);
                        }
                        else
                        {
                            purchMarkupAllocateHere = CurrencyExchangeHelper::amount(orderLine.PurchMarkup * tmpPurchLine.PurchQty / totalQty, tmpPurchLine.CurrencyCode);
                        }
                        purchMarkupAllocateRemain -= purchMarkupAllocateHere;
                    }

                    // when converting a line without unit price allocate the LineAmount according to quantity
                    if (!callerPurchLine.PurchPrice && callerPurchLine.LineAmount)
                    {
                        if (tmpPurchLine.PurchQty >= allocateQtyRemain)
                        {
                            lineAmountAllocateHere = CurrencyExchangeHelper::amount(lineAmountAllocateRemain, tmpPurchLine.CurrencyCode);
                        }
                        else
                        {
                            lineAmountAllocateHere = CurrencyExchangeHelper::amount(callerPurchLine.LineAmount * tmpPurchLine.PurchQty / totalQty, tmpPurchLine.CurrencyCode);
                        }
                        lineAmountAllocateRemain -= lineAmountAllocateHere;
                    }

                    allocateQtyRemain -= tmpPurchLine.PurchQty;
                }

                dbPurchLine = PurchLine::findInventTransId(tmpPurchLine.InventTransId, true);

                if (dbPurchLine)
                {
                    if (!dbPurchLine.IsFinalized)
                    {
                        dbPurchLine.initFromPurchLine(tmpPurchLine);
                        dbPurchLine.DeliveryDate    = tmpPurchLine.DeliveryDate;
                        dbPurchLine.ConfirmedDlv    = tmpPurchLine.ConfirmedDlv;
                        dbPurchLine.LineNumber      = tmpPurchLine.LineNumber;

                        if (initialConversion && dlvScheduleMarkupConversionMode == DlvScheduleMarkupConversionMode::Split)
                        {
                            dbPurchLine.PurchMarkup = purchMarkupAllocateHere;
                            dbPurchLine.LineAmount  = dbPurchLine.calcLineAmountForced();
                        }

                        if (initialConversion && !callerPurchLine.PurchPrice && callerPurchLine.LineAmount)
                        {
                            dbPurchLine.LineAmount = lineAmountAllocateHere;
                        }

                        inputContract.parmPurchLine(dbPurchLine);
                        this.purchLine_WritePreSuper(inputContract);

                        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
                        {
                            dbPurchLine.purchLine_IN().assessableValueV2(dbPurchLine);
                        }
                        if (dbPurchLine.validateWrite())
                        {
                            dbPurchLine.updateWithoutUpdatingDeliveryScheduleLines();
                        }
                        else
                        {
                            // Delivery Schedule update failed.
                            throw error("@SYS131420");
                        }

                        if (!dbPurchLine.refreshAgreementLink(new AgreementAutolinkHelperPurchLine(), true))
                        {
                            // Delivery Schedule update violates the referenced Agreement constrains.
                            throw error("@SYS131421");
                        }
                    }
                    else
                    {
                        dbPurchLine.LineNumber      = tmpPurchLine.LineNumber;
                        dbPurchLine.doUpdate();
                    }
                }
                else
                {
                    dbPurchLine.data(tmpPurchLine.data());
                    dbPurchLine.RecId = 0;
                    dbPurchLine.MatchingAgreementLine = orderLine.MatchingAgreementLine;

                    if (initialConversion && dlvScheduleMarkupConversionMode == DlvScheduleMarkupConversionMode::Split)
                    {
                        dbPurchLine.PurchMarkup = purchMarkupAllocateHere;
                        dbPurchLine.LineAmount = dbPurchLine.calcLineAmountForced();
                    }

                    if (initialConversion && !callerPurchLine.PurchPrice && callerPurchLine.LineAmount)
                    {
                        dbPurchLine.LineAmount = lineAmountAllocateHere;
                    }

                    inputContract.parmPurchLine(dbPurchLine);
                    this.purchLine_WritePreSuper(inputContract);

                    this.initializedPurchLineForInsert(dbPurchLine);

                    if (!dbPurchLine.validateWrite())
                    {
                        // The insertion of the delivery line failed.
                        throw error("@SYS131422");
                    }

                    // <GIN>
                    if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
                    {
                        dbPurchLine.initFromPurchLine_IN(orderLine);
                        dbPurchLine.purchLine_IN().assessableValueV2(dbPurchLine);
                    }
                    // </GIN>

                    // When change management is used and the line is referencing planned order.
                    if (dbPurchLine.ReqPOId && dbPurchLine.purchTable().ChangeRequestRequired)
                    {
                        // Removing the ReqPOId as it is used in purchLine.insert as a condition to create inventory transactions; Instead the transactions will be created during approval.
                        dbPurchLine.ReqPOId = '';
                    }

                    dbPurchLine.insert(false, false, false);

                    PurchLineOrigin purchLineOrigin;
                    purchLineOrigin.PurchLineDataAreaId      = dbPurchLine.DataAreaId;
                    purchLineOrigin.PurchLineInventTransId   = dbPurchLine.InventTransId;
                    purchLineOrigin.OriginSourceDocumentLine = orderLine.SourceDocumentLine;
                    purchLineOrigin.insert();

                    if (!dbPurchLine.refreshAgreementLink(new AgreementAutolinkHelperPurchLine(), true))
                    {
                        // Delivery Schedule update violates the referenced Agreement constrains.
                        throw error("@SYS131421");
                    }

                    purchDeliverySchedule.OrderLine    = orderLine.InventTransId;
                    purchDeliverySchedule.DeliveryLine = dbPurchLine.InventTransId;
                    purchDeliverySchedule.insert();

                    if (dbPurchLine.isCategoryBased())
                    {
                        PurchLineForeignTradeCategory purchLineForeignTradeCategory;
                        purchLineForeignTradeCategory.initFromPurchLine(dbPurchLine);
                        purchLineForeignTradeCategory.insert();
                    }
                }

                if (initialConversion)
                {
                    Markup::copyFromOrderLineWithMultipleDeliveries(orderLine, dbPurchLine, dlvScheduleMarkupConversionMode, fixedMarkupRemainMap);
                }

                inventTransIds.add(dbPurchLine.InventTransId);

                this.copyDocuRefFromCallerPurchLine(dbPurchLine);                
            }

            while select forupdate dbPurchLine
                where !dbPurchLine.IsDeleted
                join purchDeliverySchedule
                    where purchDeliverySchedule.OrderLine    == orderLine.InventTransId
                       && purchDeliverySchedule.DeliveryLine == dbPurchLine.InventTransId
            {
                if (!inventTransIds.in(dbPurchLine.InventTransId))
                {
                    if (dbPurchLine.validateDelete())
                    {
                        dbPurchLine.deleteWithoutUpdatingDeliveryScheduleLines();
                    }
                    else
                    {
                        // The deletion of the delivery line failed.
                        throw error("@SYS131423");
                    }
                }
            }

            orderLine  = PurchLine::findRecId(orderLine.RecId, true);
            // recalculate price on order line if it was disassociated from a agreement.
            if (_agreementDisassociationNeeded)
            {
                PurchLine::modifyPurchQty(orderLine, orderLine.inventDim());
            }
            if (initialConversion)
            {
                Markup::delete(orderLine);
                orderLine.LineDeliveryType         = LineDeliveryType::OrderLineWithMultipleDeliveries;
                orderLine.LineAmount               = 0;
                orderLine.PurchMarkup              = 0;
                orderLine.RemainPurchPhysical      = 0;
                orderLine.RemainPurchFinancial     = 0;
                orderLine.RemainInventPhysical     = 0;
                orderLine.RemainInventFinancial    = 0;
                orderLine.LineNumber               = callerPurchLine.LineNumber;

                if (orderLine.isStocked() && !purchTable.isChangeRequestRequired())
                {
                    InventUpd_DeleteMovement::newMovement(InventMovement::construct(orderLine)).updateNow();
                }

                WHSLoadLine::deleteAllForInventTransId(orderLine.InventTransId, "@WAX:DeliveryScheduleErrorLoadLineDeletion");
            }

            inputContract.parmPurchLine(orderLine);
            this.purchLine_WritePreSuper(inputContract);
            orderLine.recalculateDeliveryScheduleOrderLine();
            if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
            {
                orderLine.purchLine_IN().assessableValueV2(orderLine);
            }
            orderLine.updateWithoutUpdatingDeliveryScheduleLines(initialConversion);
            callerPurchLine.reread();

            // Reset negative purch line history records line number
            PurchLineHistory purchLineHistory;
            purchLineHistory.ValidTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            while select forupdate purchLineHistory
                where purchLineHistory.LineNumber <  0
                   && purchLineHistory.purchId    == orderLine.PurchId
            {
                purchLineHistory.LineNumber = -purchLineHistory.LineNumber;
                purchLineHistory.doUpdate();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }

        this.deliveryLinesSync(orderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the business logic triggered by pressing the OK button on the delivery schedule form.
    /// </summary>
    /// <returns>
    ///    true if the form should be closed; otherwise, false.
    /// </returns>
    boolean updateSchedule()
    {
        boolean ret = false;
        boolean agreementDisassociationNeeded = this.checkAgreementDisassociation();

        // Your changes break constrains of the referenced Agreement. Do you want to disassociate the Delivery Schedule from the Agreement?
        if (!agreementDisassociationNeeded
            || Box::yesNo("@SYS138463", DialogButton::No) == DialogButton::Yes)
        {
            this.updatePurchLineTable(agreementDisassociationNeeded);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOkServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the business logic triggered by pressing the OK button on the delivery schedule form.
    /// </summary>
    /// <param name="_callerPurchLine">
    ///     The line for which the form was opened.
    /// </param>
    /// <param name="_scheduleLines">
    ///     A list of lines from the datasource of the form.
    /// </param>
    /// <param name="_dlvScheduleMarkupConversionMode">
    ///     The mode of converting markup from order line to delivery lines.
    /// </param>
    /// <returns>
    ///     true if the form should be closed; false otherwise.
    /// </returns>
    /// <remarks>
    ///     This method creates the object of the class on the server based on the serialized data passed by the client
    ///     and then calls the updateSchedule() method.
    /// </remarks>
    static boolean closeOkServer(
        PurchLine _callerPurchLine,
        container _scheduleLines,
        DlvScheduleMarkupConversionMode _dlvScheduleMarkupConversionMode)
    {
        PurchTableForm_DeliverySchedule purchTableForm_DeliverySchedule = new PurchTableForm_DeliverySchedule(_callerPurchLine);

        purchTableForm_DeliverySchedule.parmScheduleLines(List::create(_scheduleLines));
        purchTableForm_DeliverySchedule.parmMarkupConversionMode(_dlvScheduleMarkupConversionMode);
        return purchTableForm_DeliverySchedule.updateSchedule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDocuRefFromCallerPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of DocuRef for each delivery line.
    /// </summary>
    /// <param name="_dbPurchLine">
    //      A buffer of the <c>PurchLine</c> table.
    /// </param>
    protected void copyDocuRefFromCallerPurchLine(PurchLine _dbPurchLine)
    {
        if (this.mayDocuRefBeCopiedFromCallerPurchLine(_dbPurchLine))
        {            
            DocuRef callerPurchLineDocuRef;

            while select callerPurchLineDocuRef
                where callerPurchLineDocuRef.RefCompanyId == callerPurchLine.DataAreaId &&
                      callerPurchLineDocuRef.RefTableId   == callerPurchLine.TableId    &&
                      callerPurchLineDocuRef.RefRecId     == callerPurchLine.RecId
            {
                DocuRef::createFromDocuRef(callerPurchLineDocuRef, _dbPurchLine.RecId, _dbPurchLine.TableId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayDocuRefBeCopiedFromCallerPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to create a copy of DocuRef for each delivery line.
    /// </summary>
    /// <param name="_dbPurchLine">
    //      A buffer of the <c>PurchLine</c> table.
    /// </param>
    /// <returns>
    ///     true if DocuRef should be copied; false otherwise.
    /// </returns>
    protected boolean mayDocuRefBeCopiedFromCallerPurchLine(PurchLine _dbPurchLine)
    {
        return (callerPurchLine.RecId != _dbPurchLine.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>