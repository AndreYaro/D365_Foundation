<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsLocationSelectForm_Agreement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LogisticsLocationSelectForm_Agreement extends LogisticsLocationSelectForm
{
    AgreementHeaderDefault    agreementHeaderDefault;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyAddressToCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the selected address to the calling purchase order line.
    /// </summary>
    /// <param name="_transferFromTable">
    /// The source of the address.
    /// </param>
    /// <param name="_addressRecId">
    /// The selected address in which to copy.
    /// </param>
    public void copyAddressToCaller(Common _transferFromTable, LogisticsPostalAddressRecId _addressRecId)
    {
        agreementHeaderDefault.DeliveryPostalAddress = _addressRecId;
        agreementHeaderDefault.setDeliveryName();

        if (AgreementHeaderDefaultCopyShippingInformationFlight::instance().isEnabled())
        {
            LogisticsPostalAddress address = LogisticsPostalAddress::findRecId(_addressRecId);
            LogisticsLocation locationToCopyFrom = LogisticsLocation::find(address.Location);

            this.copyShippingCarrierInformation(locationToCopyFrom);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets initial selected source for addresses on the form.
    /// </summary>
    /// <returns>
    /// The <c>LogisticslocationSelectSourceType</c> enumeration value that corresponds to the address
    /// source.
    /// </returns>
    public LogisticsLocationSelectSourceType defaultSource()
    {
        LogisticsLocationSelectSourceType sourceType = super();
        int agreementHeaderTableId;

        if (agreementHeaderDefault && agreementHeaderDefault.AgreementHeader)
        {
            agreementHeaderTableId = int642int(AgreementHeader::find(agreementHeaderDefault.AgreementHeader).InstanceRelationType);
        }
        else if (FormDataUtil::getFormDataSource(agreementHeaderDefault))
        {
            agreementHeaderTableId = agreementHeaderDefault.joinParent().TableId;
        }

        switch (agreementHeaderTableId)
        {
            case tableNum(PurchAgreementHeader) :
                sourceType = LogisticsLocationSelectSourceType::Company;
                break;

            case tableNum(SalesAgreementHeader) :
                sourceType = LogisticsLocationSelectSourceType::Customer;
                break;
        }

        return sourceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLookupRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record that the grid of the target form should have selected upon opening.
    /// </summary>
    /// <returns>
    /// Always return null.
    /// </returns>
    public Common getLookupRecord()
    {
        // AgreementHeaderDefault table has no AddressRefTableId+AddressRefRecId columns.
        Common addressOwner = super();
        AgreementHeader agreementHeader;
        PurchAgreementHeader purchAgreementHeader;
        SalesAgreementHeader salesAgreementHeader;

        if (agreementHeaderDefault && agreementHeaderDefault.AgreementHeader)
        {
            agreementHeader = AgreementHeader::find(agreementHeaderDefault.AgreementHeader);

            switch (int642int(agreementHeader.InstanceRelationType))
            {
                case tableNum(PurchAgreementHeader) :
                    purchAgreementHeader = PurchAgreementHeader::find(agreementHeader.RecId);
                    addressOwner = purchAgreementHeader.buyingCompanyInfo();
                    break;

                case tableNum(SalesAgreementHeader) :
                    salesAgreementHeader = SalesAgreementHeader::find(agreementHeader.RecId);
                    addressOwner = salesAgreementHeader.custTable();
                    break;
            }
        }
        else if (FormDataUtil::getFormDataSource(agreementHeaderDefault))
        {
            FormRun formRun = FormDataUtil::getFormDataSource(agreementHeaderDefault).formRun();

            switch (agreementHeaderDefault.joinParent().TableId)
            {
                case tableNum(PurchAgreementHeader) :
                    FormDataSource purchAgreementHeader_ds = SysFormDataSource::findDataSource(FormDataUtil::getFormDataSource(agreementHeaderDefault).formRun(), tableNum(PurchAgreementHeader));
                    purchAgreementHeader = purchAgreementHeader_ds.cursor() as PurchAgreementHeader;
                    addressOwner = purchAgreementHeader.buyingCompanyInfo();
                    break;

                case tableNum(SalesAgreementHeader) :
                    FormDataSource salesAgreementHeader_ds = SysFormDataSource::findDataSource(FormDataUtil::getFormDataSource(agreementHeaderDefault).formRun(), tableNum(SalesAgreementHeader));
                    salesAgreementHeader = salesAgreementHeader_ds.cursor() as SalesAgreementHeader;
                    addressOwner = salesAgreementHeader.custTable();
                    break;
            }
        }

        return addressOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(AgreementHeaderDefault _agreementHeaderDefault)
    {
        agreementHeaderDefault = _agreementHeaderDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>LogisticsLocationSelectForm_Agreement</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The record that is used to initialize the <c>LogisticsLocationSelectForm_Agreement</c> object.
    /// </param>
    /// <returns>
    /// A new instance of the <c>LogisticsLocationSelectForm_Agreement</c> class.
    /// </returns>
    public static LogisticsLocationSelectForm_Agreement construct(Common _buffer)
    {
        return new LogisticsLocationSelectForm_Agreement(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyShippingCarrierInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy carrier info from a location to a agreement header default.
    /// </summary>
    /// <param name="_locationToCopyFrom">
    /// The location from where to copy carrier info.
    /// </param>
    /// <remarks>
    /// Will only copy from delivery or invoice locations.
    /// </remarks>
    private void copyShippingCarrierInformation(LogisticsLocation _locationToCopyFrom)
    {
        ShipCarrierAddress   shipCarrierAddress;

        if (_locationToCopyFrom.isRole(LogisticsLocationRoleType::Delivery) ||
            _locationToCopyFrom.isRole(LogisticsLocationRoleType::Invoice))
        {
            select firstonly DlvTermId, DlvModeId from shipCarrierAddress
                where shipCarrierAddress.Location == _locationToCopyFrom.RecId;

            if (shipCarrierAddress.DlvModeId)
            {
                agreementHeaderDefault.DeliveryMode = shipCarrierAddress.DlvModeId;
            }

            if (shipCarrierAddress.DlvTermId)
            {
                agreementHeaderDefault.DeliveryTerm = shipCarrierAddress.DlvTermId;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>