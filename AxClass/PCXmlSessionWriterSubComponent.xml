<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionWriterSubComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlSessionWriterSubComponent</c> class writes session XML for the sub component records.
/// </summary>
public class PCXmlSessionWriterSubComponent
{
    #PC
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the session XML for the component from a sub component record
    /// </summary>
    /// <param name="_subComponent">
    /// The sub component record for which to generate the XML.
    /// </param>
    /// <param name="_attributeTypeWriter">
    /// The XML writer used to store the types of attributes.
    /// </param>
    /// <param name="_componentTypeWriter">
    /// The XML writer used to store the types of components.
    /// </param>
    /// <param name="_parentInstance">
    /// The configuration instance of the parent component.
    /// </param>
    /// <param name="_modelUIControl">
    /// The UI definition used to sort the attribute groups and attributes of each component.
    /// </param>
    /// <param name="_componentControl">
    /// The UI definition used to sort the attribute groups and attributes of each component.
    /// </param>
    /// <param name="_parsedTypes">
    /// A collection containing the record IDs of the attribute types already parsed.
    /// </param>
    /// <param name="_parsedSystemTableConstraintTypes">
    /// A collection containing the record IDs of the system table constraint types already parsed.
    /// </param>
    /// <param name="_parsedIntegerDomains">
    /// A map containing integer domains that have already been encountered during the XML generation.
    /// </param>
    /// <param name="_subComponentTypeNames">
    /// The set containing string values with the names of the component types parsed.
    /// </param>
    /// <param name="_sessionLanguage">
    /// The language ID of the current session.
    /// </param>
    /// <param name="_component">
    /// The component involved in the sub component relation.
    /// </param>
    /// <param name="_assignedComponentID">
    /// The ID assigned to the component
    /// </param>
    /// <param name="_subComponentPath">
    /// The path to the current sub-component as a list of <c>PCSubComponent</c> records.
    /// </param>
    /// <param name="_runtimeInstanceIdManager">
    /// A instance ID manager.
    /// </param>
    /// <param name="_priceMethod">
    /// The method used to calculate the unit price.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// A runtime price model instance.
    /// </param>
    public void writeComponent(
        PCSubComponent                      _subComponent,
        PCXmlWriter                         _attributeTypeWriter,
        PCXmlWriter                         _componentTypeWriter,
        PCComponentInstance                 _parentInstance,
        PCConfigurationControl              _modelUIControl,
        PCComponentControl                  _componentControl,
        Set                                 _parsedTypes,
        PCXmlSessionDatabaseRelationTypes   _parsedSystemTableConstraintTypes,
        Map                                 _parsedIntegerDomains,
        Set                                 _subComponentTypeNames,
        LanguageId                          _sessionLanguage,
        PCClass                             _component,
        str                                 _assignedComponentID,
        StackBase                           _subComponentPath,
        PCRuntimeInstanceIdManager          _runtimeInstanceIdManager,
        PCPriceMethod                       _priceMethod,
        PCRuntimePriceModelInstance         _runtimePriceModelInstance = PCRuntimePriceModelInstance::construct()
        )
    {
        PCComponentInstance                 childComponentInstance;
        PCComponentInstanceSubComponent     subComponentInstance;
        PCXmlSessionWriterComponent         xmlSessionWriterComponent   = PCXmlSessionWriterComponent::construct();

        select firstonly childComponentInstance
        join firstonly RecId from subComponentInstance
        where   subComponentInstance.ChildComponentInstance == childComponentInstance.RecId
        &&      subComponentInstance.ParentComponentInstance == _parentInstance.RecId
        &&      subComponentInstance.SubComponent == _subComponent.RecId;

        //don't assign the same definition twice
        if (!_subComponentTypeNames.in(_assignedComponentID))
        {
            _subComponentTypeNames.add(_assignedComponentID);
            xmlSessionWriterComponent.write(_component,
                                            _assignedComponentID,
                                            _attributeTypeWriter,
                                            _componentTypeWriter,
                                            childComponentInstance,
                                            _modelUIControl,
                                            _componentControl,
                                            _parsedTypes,
                                            _parsedSystemTableConstraintTypes,
                                            _parsedIntegerDomains,
                                            _sessionLanguage,
                                            _subComponentPath,
                                            _runtimeInstanceIdManager,
                                            _priceMethod,
                                            _runtimePriceModelInstance
                                            );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the session XML representation of a sub component.
    /// </summary>
    /// <param name="_subComponent">
    /// The sub component record for which to generate the XML.
    /// </param>
    /// <param name="_attributeTypeWriter">
    /// The XML writer that is used to store the types of attributes.
    /// </param>
    /// <param name="_componentTypeWriter">
    /// The XML writer that is used to store the types of components.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_parentInstance">
    /// The configuration instance of the parent component.
    /// </param>
    /// <param name="_modelUIControl">
    /// The UI definition used to sort the attribute groups and attributes of each component.
    /// </param>
    /// <param name="_componentControl">
    /// The UI definition used to sort the attribute groups and attributes of each component.
    /// </param>
    /// <param name="_parsedTypes">
    /// A collection that contains the record IDs of the attribute types already parsed.
    /// </param>
    /// <param name="_parsedSystemTableConstraintTypes">
    /// A collection that contains the record IDs of the system table constraint types already parsed.
    /// </param>
    /// <param name="_parsedIntegerDomains">
    /// A map that contains integer domains that have already been encountered during the XML generation.
    /// </param>
    /// <param name="_subComponentTypeNames">
    /// The set that contains string values with the names of the component types parsed.
    /// </param>
    /// <param name="_sessionLanguage">
    /// The language ID of the current session.
    /// </param>
    /// <param name="_subComponentPath">
    /// The path of the current sub-component as a list of <c>PCSubComponent</c> records.
    /// </param>
    /// <param name="_runtimeInstanceIdManager">
    /// A runtime instance ID manager.
    /// </param>
    /// <param name="_priceMethod">
    /// The method used to calculate the unit price.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// A runtime price model instance.
    /// </param>
    public void write(
        PCSubComponent                      _subComponent,
        PCXmlWriter                         _attributeTypeWriter,
        PCXmlWriter                         _componentTypeWriter,
        PCXmlWriter                         _componentTreeWriter,
        PCComponentInstance                 _parentInstance,
        PCConfigurationControl              _modelUIControl,
        PCComponentControl                  _componentControl,
        Set                                 _parsedTypes,
        PCXmlSessionDatabaseRelationTypes   _parsedSystemTableConstraintTypes,
        Map                                 _parsedIntegerDomains,
        Set                                 _subComponentTypeNames,
        LanguageId                          _sessionLanguage,
        StackBase                           _subComponentPath,
        PCRuntimeInstanceIdManager          _runtimeInstanceIdManager,
        PCPriceMethod                       _priceMethod = PCPriceMethod::Cost,
        PCRuntimePriceModelInstance         _runtimePriceModelInstance = PCRuntimePriceModelInstance::construct()
        )
    {
        PCClass                             component           = PCClass::find(_subComponent.ChildComponentClass);
        str                                 assignedComponentID = component.Name;

        PCXmlSessionWriterSubComponentControl xmlSessionWriterSubComponentControl = PCXmlSessionWriterSubComponentControl::construct();

        //
        //as each sub-component owns an UI definition (that changes how the model is built)
        //each sub-Component now forceably writes his own definition
        //
        if (_componentControl)
        {
            assignedComponentID = component.Name + int642str(_componentControl.RecId);
        }
        _subComponentPath.push(_subComponent);
        this.writeComponent(_subComponent,
                    _attributeTypeWriter,
                    _componentTypeWriter,
                    _parentInstance,
                    _modelUIControl,
                    _componentControl,
                    _parsedTypes,
                    _parsedSystemTableConstraintTypes,
                    _parsedIntegerDomains,
                    _subComponentTypeNames,
                    _sessionLanguage,
                    component,
                    assignedComponentID,
                    _subComponentPath,
                    _runtimeInstanceIdManager,
                    _priceMethod,
                    _runtimePriceModelInstance);

        _subComponentPath.pop();

        _componentTreeWriter.writeStartElement(#subComponentElement);
        _componentTreeWriter.writeAttributeString(#nameAttribute, _subComponent.SolverName);
        _componentTreeWriter.writeAttributeString(#displayName, _subComponent.getTranslatedName());

        // unique identifier for the component definition
        _componentTreeWriter.writeAttributeString(#componentDefinitionId, int642str(component.RecId));

        // unique identifier for the sub component instance
        _componentTreeWriter.writeAttributeString(#ReqIdAttribute, int642str(_subComponent.RecId));
        _componentTreeWriter.writeAttributeString(#componentAttribute, assignedComponentID);

        xmlSessionWriterSubComponentControl.write(_subComponent, _componentTreeWriter);

        _componentTreeWriter.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionWriterSubComponent construct()
    {
        return new PCXmlSessionWriterSubComponent();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>