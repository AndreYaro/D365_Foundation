<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Scrap_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventMovementFactoryAttribute(tableStr(RAssetScrap))]
final class InventMov_Scrap_RU extends InventMovement
{
    RAssetScrap          assetScrap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::PurchReceipt));
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::SalesIssue));
            }
        }
        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        RAssetStandards assetStandardsDefault = RAssetStandards::find(assetScrap.AssetId, RAssetParameters::find().StandardIdDefault);

        if (!cacheAccountOperations)
        {
            cacheAccountOperations = RAssetLedgerAccounts::assetOffsetLedgerDimension(
                assetScrap.AssetId,
                this.assetTransType(),
                assetStandardsDefault.PostingProfile,
                assetStandardsDefault.AssetStandardId);
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an asset trans type.
    /// </summary>
    /// <returns>The asset trans type</returns>
    protected RAssetTransType assetTransType()
    {
        return (assetScrap.Assembling ? RAssetTransType::Acquisition : RAssetTransType::DisposalScrap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheAccountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount cacheAccountOperations(LedgerDimensionDefaultAccount _cacheAccountOperations = cacheAccountOperations)
    {
        cacheAccountOperations = _cacheAccountOperations;
        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    public boolean canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    public boolean canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotOverDelivery</Name>
				<Source><![CDATA[
    public boolean checkNotOverDelivery(InventQty _physicalNow, boolean _isPhysicalUpdate
        , PdsCWInventQty _cwQty = 0.0
        )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotSubDelivery</Name>
				<Source><![CDATA[
    public boolean checkNotSubDelivery(InventQty _physicalNow, InventQty _remainPhysicalNow, boolean _isPhysicalUpdate
        , PdsCWInventQty _cwQtyNow = 0.0
        , PdsCWInventQty _cwRemainPhysical = 0.0
        )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
    public boolean checkUpdateEstimated(InventUpd_Estimated    _updateNow,
                                        InventMovement         _this_Orig)
    {
        return super(_updateNow, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && assetScrap.RecId)
        {
            InventTransOriginRAssetScrap_RU::writeOriginOwnerRelationship(
                assetScrap.RecId,
                originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the set of financial dimensions to use when posting the scrap.
    /// </summary>
    /// <returns>
    ///    The set of financial dimensions.
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        List          dimensionSources = new List(Types::Class);
        RAssetStandards     assetStandards   = RAssetStandards::find(assetScrap.AssetId, RAssetParameters::find().StandardIdDefault);

        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(RAssetParameters::find().DefaultDimension));
        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(RAssetStandardTable::find(assetStandards.AssetStandardId).DefaultDimension));
        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(assetStandards.DefaultDimension));
        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(assetScrap.DefaultDimension));

        return LedgerDimensionDefaultingEngine::getDefaultDimension(dimensionSources);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return assetScrap.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId  itemId()
    {
        return assetScrap.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    public boolean mustBeAutoReserved()
    {
        ItemReservation reservation = RAssetParameters::find().Reservation;
        return reservation == ItemReservation::Automatic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    public boolean mustBeBookedFinancially()
    {
        boolean ret = super();
        return (assetScrap.Assembling ? ret : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeSameTransSign</Name>
				<Source><![CDATA[
    public boolean mustBeSameTransSign()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RAssetScrap _assetScrap,
                    InventType  _inventType = new InventType(_assetScrap))
    {
        assetScrap = _assetScrap;
        super(assetScrap, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (assetScrap.Assembling)
        {
            if (assetScrap.RecId)
                return new InventMov_Scrap_RU(assetScrap.orig());
            else
                return null;
        }
        else
            return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        if (this.transQty() >= 0)
            return LedgerPostingType::InventReceipt;

        return LedgerPostingType::InventIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::LedgerJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty remainPhysical()
    {
        return this.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    public InventQty reserveQty()
    {
        if (this.transSign() > 0)
            return 0;

        return abs(assetScrap.Qty) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty  _qtyInvent)
    {
        assetScrap.Qty = - _qtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return assetScrap.TransDate ? assetScrap.TransDate : RAssetTable::find(assetScrap.AssetId).AcquisitionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return assetScrap.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty transQty()
    {
        return assetScrap.Qty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        return (assetScrap.Assembling ? -1 : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::FixedAssets_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancialSecCur_RU</Name>
				<Source><![CDATA[
    #define.BondLogLength(2)
    public CostAmountSecCur_RU updateLedgerFinancialSecCur_RU(LedgerVoucher         _ledgerVoucher,
                                                              InventUpd_Financial   _updateNow,
                                                              boolean               _allowNegative = false)
    {
        CostAmount           costAmountSecCur;

        if (! this.checkInventSiteDimension(this.inventdim()))
        {
            throw error("@SYS18447");
        }

        if (this.mustBeBookedOnhandSecCur_RU())
        {
            if (!isTelemetryForSecCurSent)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00111, funcName());
                isTelemetryForSecCurSent = true;
            }

            LedgerVoucherObject voucherObjectSecCur = _ledgerVoucher.findOrCreateReferenceSecCur_RU();
            LedgerBondClient_RU ledgerBondClient = voucherObjectSecCur.ledgerBondClient_RU();

            if (ledgerBondClient)
            {
                ledgerBondClient.addNewLogObject();
            }

            if (this.mustBeBookedBalanceSheet())
            {
                voucherObjectSecCur.addTrans(
                    LedgerVoucherTransObject::newBasicSecondary_RU(
                        voucherObjectSecCur,
                        this.postingBalanceSheet(),
                        LedgerDimensionFacade::serviceCreateLedgerDimension(this.accountBalanceSheet(), this.defaultDimension()),
                        _updateNow.parmCurrencyCode(),
                        _updateNow.parmCostAmountCurSecCur_RU(),
                        NoYes::No));

                _updateNow.updCostAmountSecCurLedger_RU(_updateNow.parmCostAmountCurSecCur_RU());
                costAmountSecCur = _updateNow.parmCostAmountCurSecCur_RU();
            }

            if (this.mustBeBookedOperations())
            {
                voucherObjectSecCur.addTrans(
                    LedgerVoucherTransObject::newBasicSecondary_RU(
                        voucherObjectSecCur,
                        this.postingOperations(),
                        LedgerDimensionFacade::serviceCreateLedgerDimension(this.accountOperations(), this.defaultDimension()),
                        _updateNow.parmCurrencyCode(),
                        -_updateNow.parmCostAmountCurSecCur_RU(),
                        NoYes::No));
            }

            if (ledgerBondClient)
            {
                if (ledgerBondClient.currentLogLength() == #BondLogLength)
                {
                    ledgerBondClient.bondLastVRef2CurrentLog();
                }

                ledgerBondClient.removeCurrentLogObject();
            }

            _ledgerVoucher.restoreReferenceSecCur_RU();
        }

        return costAmountSecCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromRAssetScrap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Scrap_RU</c> class that is based on the
    ///    specified record.
    /// </summary>
    /// <param name="_rAssetScrap">
    ///    The <c>RAssetScrap</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Scrap_RU</c> class.
    /// </returns>
    public static InventMov_Scrap_RU newFromRAssetScrap(RAssetScrap _rAssetScrap)
    {
        return new InventMov_Scrap_RU(_rAssetScrap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>