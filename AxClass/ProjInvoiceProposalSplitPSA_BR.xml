<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalSplitPSA_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Splits project invoice proposal by fiscal establishment, fiscal document type and service code
/// </summary>
class ProjInvoiceProposalSplitPSA_BR
{
    RecordSortedList        projProposalJourList;
    ProjInvoiceTable        projInvoiceTable;
    ProjInvoiceType         projInvoiceType;
    InvoiceDate             invoiceDate;
    InterCompanyPosted      interCompanyPosted;
    SalesEndDiscPct         endDiscPercent;

    Map                     splitMap;
    Map                     serviceInvoiceLinesMap;
    Map                     productInvoiceLinesMap;

    FiscalEstablishment_BR  companyDefaultFiscalEstablishment;
    SalesLine               salesLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildKey</Name>
				<Source><![CDATA[
    private str buildKey(PSATmpProjProposalTrans    _tmpProjProposalTrans)
    {
        str                     key;
        TaxServiceCodeId_BR     serviceCodeId;
        ProjTable               projTable;

        key += this.parmProjInvoiceTable().ProjInvoiceProjId;
        key += _tmpProjProposalTrans.CurrencyCode;
        key += int642str(_tmpProjProposalTrans.FundingSourceRefId);

        projTable = ProjTable::find(_tmpProjProposalTrans.ProjId);
        key += enum2str(projTable.PSAInvoiceMethod);

        if (ProjParameters::find().SplitServiceCodeInvoice)
        {
            serviceCodeId = this.getServiceCodeId(_tmpProjProposalTrans);

            if (!this.isProjTransAnItem(_tmpProjProposalTrans) && !serviceCodeId)
            {
                throw Error(strfmt("@GLS61136", tableid2pname(_tmpProjProposalTrans.RefTableId)));
            }

            key += serviceCodeId;
        }
        else
        {
            key += this.getCFOPId(_tmpProjProposalTrans);
        }

        key += this.getFiscalEstablishment(_tmpProjProposalTrans).FiscalEstablishmentId;
        key += int642str(this.getFiscaldocumentType(_tmpProjProposalTrans));

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildKeyFromProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Key value of the sales line associated with project transaction.
    /// </summary>
    /// <param name="_projProposalTransMap">
    /// Table map for project transactions.
    /// </param>
    /// <param name="_projFundingRefId">
    /// The projFundingRefId added into key.
    /// </param>
    /// <param name="_taxGroup">
    /// The taxGroup added into key.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code added into Key.
    /// </param>
    /// <returns>
    /// The Key value.
    /// </returns>
    private str buildKeyFromProposalTrans(ProjProposalTransMap_BR    _projProposalTransMap,
                         ProjFundingSourceRefId     _projFundingRefId,
                         TaxGroup                   _taxGroup,
                         CurrencyCode               _currencyCode)
    {
        str                     key;
        TaxServiceCodeId_BR     serviceCodeId;
        ProjTable               projTable;

        key += this.parmProjInvoiceTable().ProjInvoiceProjId;
        key += _currencyCode;
        key += int642str(_projFundingRefId);
        key += _taxGroup;

        projTable = ProjTable::find(_projProposalTransMap.ProjId);
        key += enum2str(projTable.PSAInvoiceMethod);

        if (ProjParameters::find().SplitServiceCodeInvoice)
        {
            serviceCodeId = this.getServiceCodeIdForProposalTrans(_projProposalTransMap, _projFundingRefId);

            if (!this.isProjTransAnItemFromProposalTrans(_projProposalTransMap) && !serviceCodeId)
            {
                throw Error(strfmt("@GLS61136", tableid2pname(_projProposalTransMap.TableId)));
            }

            key += serviceCodeId;
        }
        else
        {
            key += this.getCFOPIdFromProposalTrans(_projProposalTransMap);
        }

        key += this.getFiscalEstablishmentFromProposalTrans(_projProposalTransMap).FiscalEstablishmentId;
        key += int642str(this.getFiscaldocumentTypeFromProposalTrans(_projProposalTransMap, _projFundingRefId));

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFOPIdFromProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cfop id of the sales line associated with project transaction.
    /// </summary>
    /// <param name="_projProposalTransMap">
    /// Table map for project transactions that need to be split.
    /// </param>
    /// <returns>
    /// CFOPId of the sales line.
    /// </returns>
    private CFOPId_BR getCFOPIdFromProposalTrans(ProjProposalTransMap_BR _projProposalTransMap)
    {
        CFOPId_BR cfopId;

        if (_projProposalTransMap.TableId == tablenum(SalesLine))
        {
            salesLine = _projProposalTransMap;
            cfopId = salesLine.SalesType == SalesType::ItemReq ? '' : substr(CFOPTable_BR::find(salesLine.salesLine_BR().CFOPTable_BR).CFOPId, 1, 1);
        }

        return cfopId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscaldocumentTypeFromProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscaldocumentTypeId value of the sales line associated with project transaction.
    /// </summary>
    /// <param name="_projProposalTransMap">
    /// Table map for project transactions.
    /// </param>
    /// <param name="fundingSource">
    /// passing fundingSource RecID by finding fiscaldocumentTypeId.
    /// </param>
    /// <returns>
    /// The fiscaldocumentTypeId value.
    /// </returns>
    private FiscalDocumentTypeRecID_BR getFiscaldocumentTypeFromProposalTrans(ProjProposalTransMap_BR _projProposalTransMap, RecId fundingSource)
    {
        FiscalDocumentTypeRecID_BR          fiscaldocumentTypeId;

        if (_projProposalTransMap.TableId == tableNum(SalesLine))
        {
            salesLine = _projProposalTransMap;

            fiscaldocumentTypeId = salesLine.salesLine_BR().FiscalDocumentType_BR;
        }
        else
        {
            fiscaldocumentTypeId = CustFiscalDocumentType_BR::findFiscalDocumentType(
                    ProjFundingSource::find(fundingSource).CustAccount, this.getFiscalEstablishmentFromProposalTrans(_projProposalTransMap), ItemType::Service);
        }

        if (!fiscaldocumentTypeId)
        {
            throw error("@GLS62");
        }

        return fiscaldocumentTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishmentFromProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fiscalEstablishment value of the sales line associated with project transaction.
    /// </summary>
    /// <param name="_projProposalTransMap">
    /// Table map for project transactions.
    /// </param>
    /// <returns>
    /// The fiscalEstablishment value.
    /// </returns>
    private FiscalEstablishment_BR getFiscalEstablishmentFromProposalTrans(ProjProposalTransMap_BR _projProposalTransMap)
    {
        FiscalEstablishment_BR fiscalEstablishment;

        if (_projProposalTransMap.TableId == tableNum(SalesLine))
        {
            salesLine = SalesLine::findRecId(_projProposalTransMap.RecId);
            fiscalEstablishment = this.getFiscalEstablishmentByInventDimId(salesLine.InventDimId);
        }
        else if (_projProposalTransMap.TableId == tableNum(ProjItemTransSale))
        {
            ProjItemTrans projItemTrans = this.getProjItemTransBySaleRecId(_projProposalTransMap.RecId);
            fiscalEstablishment = this.getFiscalEstablishmentByInventDimId(projItemTrans.InventDimId);
        }

        if (!fiscalEstablishment)
        {
            fiscalEstablishment = this.getDefaultFiscalEstablishment();
        }

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjProposalJourCreateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>ProjProposalJourCreateParameters</c> class.
    /// </summary>
    /// <param name = "_projInvoiceType">
    /// A <c>ProjInvoiceType</c> value.
    /// </param>
    /// <param name = "_currencyId">
    /// A <c>CurrencyCode</c> value.
    /// </param>
    /// <param name = "_projFundingSourceRefId">
    /// A <c>ProjFundingSourceRefId</c> value.
    /// </param>
    /// <param name = "_invoiceDate">
    /// An <c>InvoiceDate</c> value.
    /// </param>
    /// <param name = "_interCompanyPosted">
    /// An <c>InterCompanyPosted</c> value.
    /// </param>
    /// <param name = "_psaInvoiceMethod">
    /// A <c>PSAInvoiceMethod</c> value.
    /// </param>
    /// <param name = "_taxPeriodPaymentCode">
    /// A <c>PlTaxPeriodPaymentCode</c> value.
    /// </param>
    /// <param name = "_defaultDimension">
    /// A <c>DimensionDefault</c> value.
    /// </param>
    /// <param name = "_exchRate">
    /// A <c>ExchRate</c> value.
    /// </param>
    /// <returns>
    /// The <c>ProjProposalJourCreateParameters</c> instance.
    /// </returns>
    protected ProjProposalJourCreateParameters createProjProposalJourCreateParameters(
        ProjInvoiceType           _projInvoiceType,
        CurrencyCode              _currencyId               = '',
        ProjFundingSourceRefId    _projFundingSourceRefId   = 0,
        InvoiceDate               _invoiceDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        InterCompanyPosted        _interCompanyPosted       = false,
        PSAInvoiceMethod          _psaInvoiceMethod         = PSAInvoiceMethod::Progress,
        PlTaxPeriodPaymentCode    _taxPeriodPaymentCode     = '',
        DimensionDefault          _defaultDimension         = 0,
        ExchRate                  _exchRate                 = 0)
    {
        return ProjProposalJourCreateParameters::construct(
                    _projInvoiceType,
                    _currencyId,
                    _projFundingSourceRefId,
                    _invoiceDate,
                    _interCompanyPosted,
                    _psaInvoiceMethod,
                    _taxPeriodPaymentCode,
                    _defaultDimension,
                    _exchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjProposalJour</Name>
				<Source><![CDATA[
    private ProjProposalJour createProjProposalJour(FiscalEstablishmentRecId_BR fiscalEstablishmentRecId,
                                                    FiscalDocumentTypeRecId_BR _fiscalDocumentTypeRecId,
                                                    ProjFundingSourceRefId  _projFundingRefId,
                                                    CurrencyCode            _currencyId,
                                                    ProjInvoiceProjId       _sBillTo = '',
                                                    DimensionDefault        _defaultDimension = 0,
                                                    TaxServiceCodeId_BR     _serviceCodeId = '')
    {
        ProjProposalJour rProjProposalJour;

        rProjProposalJour = projInvoiceTable.createProposalJourFromParameters(
            this.createProjProposalJourCreateParameters(
                projInvoiceType,
                _currencyId,
                _projFundingRefId,
                invoiceDate,
                this.interCompanyPosted(),
                PSAInvoiceMethod::Progress,
                '',
                _defaultDimension));

        rProjProposalJour.DiscPercent = this.parmEndDiscPercent();

        if (ProjParameters::find().SplitServiceCodeInvoice)
        {
            rProjProposalJour.TaxServiceCodeId_BR = _serviceCodeId;
        }

        if (salesLine)
        {
            CustPostingProfile salesTablePostingProfile = SalesTable::find(salesLine.SalesId).PostingProfile;
            if (salesTablePostingProfile != '')
            {
                rProjProposalJour.PostingProfile = salesTablePostingProfile;
            }
        }

        rProjProposalJour.FiscalEstablishment_BR = fiscalEstablishmentRecId;
        rProjProposalJour.FiscalDocumentType_BR = _fiscalDocumentTypeRecId;
        rProjProposalJour.update();

        projProposalJourList.ins(rProjProposalJour);

        return rProjProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits a proposal journal.
    /// </summary>
    /// <param name="_tmpProjProposalTrans">
    /// Temporaty table for proposal lines that need to be split
    /// </param>
    /// <param name="_sBillTo">
    /// Contract id
    /// </param>
    /// <param name="_defaultDimension">
    /// The default dimension
    /// </param>
    /// <returns>
    /// Return the project invoice proposal for the transaction.
    /// </returns>

    public ProjProposalJour doSplit(PSATmpProjProposalTrans     _tmpProjProposalTrans,
                                    ProjInvoiceProjId           _sBillTo = '',
                                    DimensionDefault            _defaultDimension = 0)
    {
        str                 key;
        ProjProposalJour    projProposalJour;

        key = this.buildKey(_tmpProjProposalTrans);

        if (splitMap.exists(key))
        {
            projProposalJour = splitMap.lookup(key);
        }
        else
        {
            projProposalJour = this.createProjProposalJour(
                this.getFiscalEstablishment(_tmpProjProposalTrans).RecId,
                this.getFiscaldocumentType(_tmpProjProposalTrans),
                _tmpProjProposalTrans.FundingSourceRefId,
                _tmpProjProposalTrans.CurrencyCode,
                _sBillTo,
                _defaultDimension,
                this.getServiceCodeId(_tmpProjProposalTrans));

            splitMap.insert(key, projProposalJour);
        }

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFOPId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cfop id of the sales line associated with project transaction.
    /// </summary>
    /// <param name="_tmpProjProposalTrans">
    /// Temporaty table for proposal lines that need to be split
    /// </param>
    /// <returns>
    /// CFOPId of the sales line.
    /// </returns>
    private CFOPId_BR getCFOPId(PSATmpProjProposalTrans _tmpProjProposalTrans)
    {
        CFOPId_BR cfopId;

        if (_tmpProjProposalTrans.RefTableId == tablenum(SalesLine))
        {
            salesLine = this.getSalesLine(_tmpProjProposalTrans);
            cfopId = salesLine.SalesType == SalesType::ItemReq ? '' : substr(CFOPTable_BR::find(salesLine.salesLine_BR().CFOPTable_BR).CFOPId, 1, 1);
        }

        return cfopId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscaldocumentType</Name>
				<Source><![CDATA[
    private FiscalDocumentTypeRecID_BR getFiscaldocumentType(PSATmpProjProposalTrans _tmpProjProposalTrans)
    {
        FiscalDocumentTypeRecID_BR          fiscaldocumentTypeId;

        if (_tmpProjProposalTrans.RefTableId == tableNum(SalesLine))
        {
            salesLine = this.getSalesLine(_tmpProjProposalTrans);

            fiscaldocumentTypeId = salesLine.salesLine_BR().FiscalDocumentType_BR;
        }
        else
        {
            fiscaldocumentTypeId = CustFiscalDocumentType_BR::findFiscalDocumentType(
                        ProjFundingSource::find(_tmpProjProposalTrans.FundingSourceRefId).CustAccount, this.getFiscalEstablishment(_tmpProjProposalTrans), ItemType::Service);
        }

        if (!fiscaldocumentTypeId)
        {
            throw error("@GLS62");
        }

        return fiscaldocumentTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishment</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR getFiscalEstablishment(PSATmpProjProposalTrans _tmpProjProposalTrans)
    {
        FiscalEstablishment_BR fiscalEstablishment;

        if (_tmpProjProposalTrans.RefTableId == tableNum(SalesLine))
        {
            salesLine = this.getSalesLine(_tmpProjProposalTrans);
            fiscalEstablishment = this.getFiscalEstablishmentByInventDimId(salesLine.InventDimId);
        }
        else if (_tmpProjProposalTrans.RefTableId == tableNum(ProjItemTransSale))
        {
            ProjItemTrans projItemTrans = this.getProjItemTransBySaleRecId(_tmpProjProposalTrans.RefRecId);
            fiscalEstablishment = this.getFiscalEstablishmentByInventDimId(projItemTrans.InventDimId);
        }

        if (!fiscalEstablishment)
        {
            fiscalEstablishment = this.getDefaultFiscalEstablishment();
        }

        Debug::assert(fiscalEstablishment.RecId != 0);

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalEstablishmentByInventDimId</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR getFiscalEstablishmentByInventDimId(InventDimId _inventDimId)
    {
        FiscalEstablishment_BR fiscalEstablishment;

        if (_inventDimId)
        {
            FiscalEstablishmentInventSite_BR fiscalEstablishmentInventSite;
            InventDim inventDim;
            InventSite inventSite;

            select firstonly fiscalEstablishment
                exists join fiscalEstablishmentInventSite
                    where fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
                exists join inventSite
                    where inventSite.SiteId == fiscalEstablishmentInventSite.InventSite
                exists join inventDim
                    where inventDim.InventSiteId == fiscalEstablishmentInventSite.InventSite
                        && inventDim.inventDimId == _inventDimId;
        }
        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultFiscalEstablishment</Name>
				<Source><![CDATA[
    private FiscalEstablishment_BR getDefaultFiscalEstablishment()
    {
        FiscalEstablishment_BR fiscalEstablishment;
        
        if (!companyDefaultFiscalEstablishment)
        {
            DirPartyLocation dirPartylocation;
            LogisticsPostalAddress logisticsPostaladdress = companyInfo::find().postalAddress();
                
            select firstonly fiscalEstablishment
                exists join dirPartylocation
                    where dirPartylocation.RecId == fiscalEstablishment.DirPartyLocation
                        && dirPartylocation.Location == logisticsPostaladdress.Location;

            companyDefaultFiscalEstablishment = fiscalEstablishment;
        }
        else
        {
            fiscalEstablishment = companyDefaultFiscalEstablishment;
        }

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLine</Name>
				<Source><![CDATA[
    private SalesLine getSalesLine(PSATmpProjProposalTrans _tmpProjProposalTrans)
    {
        if (salesLine.RecId != _tmpProjProposalTrans.RefRecId)
        {
            select firstonly salesLine
                where salesLine.RecId == _tmpProjProposalTrans.RefRecId;
        }

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjItemTransBySaleRecId</Name>
				<Source><![CDATA[
    private ProjItemTrans getProjItemTransBySaleRecId(RecId _projItemTransSaleRecId)
    {
        ProjItemTransSale projItemTransSale;
        ProjItemTrans projItemTrans;

        select firstonly projItemTrans
            join RecId from projItemTransSale
                where projItemTransSale.RecId == _projItemTransSaleRecId
                    && projItemTrans.ProjTransId == projItemTransSale.ProjTransId;
                    
        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the service code of the project transaction.
    /// </summary>
    /// <param name="_tmpProjProposalTrans">
    /// Table map for project transactions that need to be split.
    /// </param>
    /// <returns>
    /// Service code of the transaction.
    /// </returns>
    private TaxServiceCodeId_BR getServiceCodeId(PSATmpProjProposalTrans    _tmpProjProposalTrans)
    {
        TaxServiceCodeId_BR         serviceCodeId;
        LogisticsPostalAddress      invoicePostalAddress;
        CustTable                   custTable;

        switch (_tmpProjProposalTrans.RefTableId)
        {
            case tablenum(SalesLine) :
                salesLine = this.getSalesLine(_tmpProjProposalTrans);
                if (salesLine.SalesType == SalesType::ItemReq) // item is sold always as service, read service code from category
                {
                    serviceCodeId = ProjCategory::find(_tmpProjProposalTrans.CategoryId).TaxServiceCodeId_BR;
                }
                else
                {
                    serviceCodeId = salesLine.salesLine_BR().TaxServiceCode_BR;
                }
                break;

            case tablenum(ProjOnAccTransSale) : // ProjOnAccTrans do not have category, use service code directly
                serviceCodeId = ProjOnAccTrans::find(_tmpProjProposalTrans.RefTransId).TaxServiceCodeId_BR;
                break;

            default :
                serviceCodeId = ProjCategory::find(_tmpProjProposalTrans.CategoryId).TaxServiceCodeId_BR;
        }

        if (projInvoiceTable.TaxServiceCodeOnDlvAddress_BR)
        {
            custTable = CustTable::find(ProjFundingSource::find(_tmpProjProposalTrans.FundingSourceRefId).CustAccount);

            invoicePostalAddress = custTable.postalAddress();

            serviceCodeId = TaxServiceCode_BR::findDlvServiceCode(serviceCodeId, invoicePostalAddress.CountryRegionId, invoicePostalAddress.State, invoicePostalAddress.City).ServiceCodeId;
        }

        return serviceCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets/Gets <c>InterCompanyPosted</c> attribute
    /// </summary>
    /// <param name="_interCompanyPosted">
    /// New/Default value for <c>interCompanyPosted</c> attribute
    /// </param>
    /// <returns>
    /// InterCompanyPosted attribute
    /// </returns>
    public InterCompanyPosted interCompanyPosted(InterCompanyPosted _interCompanyPosted = interCompanyPosted)
    {
        interCompanyPosted = _interCompanyPosted;

        return interCompanyPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjTransAnItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if a transaction is a item or not.
    /// </summary>
    /// <param name="_tmpProjProposalTrans">
    /// Temporaty table for proposal lines that need to be split
    /// </param>
    /// <returns>
    /// True when sales type is an item requirement (all item requirements are services) or for other sales types, method returns true just when item type is Service.
    /// False if the transaction is associated with a service.
    /// </returns>
    private boolean isProjTransAnItem(PSATmpProjProposalTrans _tmpProjProposalTrans)
    {
        boolean         isItem = false;

        if (_tmpProjProposalTrans.RefTableId == tablenum(SalesLine))
        {
            salesLine = this.getSalesLine(_tmpProjProposalTrans);

            if (salesLine.SalesType == SalesType::ItemReq)
            {
                isItem = false;
            }
            else
            {
                isItem = salesLine.inventTable().ItemType != ItemType::Service ? true : false;
            }
        }

        return isItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>ProjInvoiceProposalSplitPSA_BR</c>
    /// </summary>
    /// <param name="_projInvoiceTable">
    /// <c>ProInvoiceTable</c> table record
    /// </param>
    /// <param name="_projInvoiceType">
    /// Projec invoice type
    /// </param>
    void new(ProjInvoiceTable _projInvoiceTable, ProjInvoiceType _projInvoiceType)
    {
        projProposalJourList = new RecordSortedList(tablenum(ProjProposalJour));
        projProposalJourList.sortOrder(fieldnum(ProjProposalJour, RecId));

        splitMap = new Map(Types::String, Types::Record);

        serviceInvoiceLinesMap = new Map(Types::String, Types::Integer);
        productInvoiceLinesMap = new Map(Types::String, Types::Integer);

        projInvoiceTable = _projInvoiceTable;
        projInvoiceType = _projInvoiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDiscPercent</Name>
				<Source><![CDATA[
    public SalesEndDiscPct parmEndDiscPercent(SalesEndDiscPct _endDiscPercent = endDiscPercent)
    {
        endDiscPercent = _endDiscPercent;

        return endDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
    public InvoiceDate parmInvoiceDate(InvoiceDate _invoiceDate = invoiceDate)
    {
        invoiceDate = _invoiceDate;

        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceTable</Name>
				<Source><![CDATA[
    public ProjInvoiceTable parmProjInvoiceTable(ProjInvoiceTable _projInvoiceTable = projInvoiceTable)
    {
        projInvoiceTable = _projInvoiceTable;

        return projInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOneProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ProposalTrans value with project transactions.
    /// </summary>
    /// <param name="_projProposalJour">
    /// passing _projProposalJour to get ProposalTrans.
    /// </param>
    /// <returns>
    /// The proposal trans record.
    /// </returns>
    private ProjProposalTransMap_BR getOneProposalTrans(ProjProposalJour _projProposalJour)
    {
        ProjCostTrans           projCostTrans;
        ProjCostTransSale       projCostTransSale;
        ProjProposalCostDetail  projProposalCostDetail;
        ProjProposalCost        projProposalCost;

        ProjEmplTrans           projEmplTrans;
        ProjEmplTransSale       projEmplTransSale;
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjProposalEmpl        projProposalEmpl;

        ProjItemTrans           projItemTrans;
        ProjItemTransSale       projItemTransSale;
        ProjProposalItemDetail  projProposalItemDetail;
        ProjProposalItem        projProposalItem;

        ProjOnAccTrans          projOnAccTrans;
        ProjOnAccTransSale      projOnAccTransSale;
        ProjProposalOnAccDetail projProposalOnAccDetail;
        ProjProposalOnAcc       projProposalOnAcc;

        ProjRevenueTrans            projRevenueTrans;
        ProjRevenueTransSale        projRevenueTransSale;
        ProjProposalRevenueDetail   projProposalRevenueDetail;
        ProjProposalRevenue         projProposalRevenue;

        select firstOnly projEmplTrans
        exists join projEmplTransSale
            where projEmplTrans.TransId == projEmplTransSale.TransId
                exists join projProposalEmplDetail
                     where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
                        exists join projProposalEmpl
                            where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
                            &&    projProposalEmpl.ProposalId == _projProposalJour.ProposalId;

        if (projEmplTrans.RecId)
        {
            return projEmplTrans;
        }

        select firstOnly projCostTrans
        exists join projCostTransSale
            where projCostTrans.TransId == projCostTransSale.TransId
                exists join projProposalCostDetail
                    where   projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
                        exists join projProposalCost
                            where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
                            && projProposalCost.ProposalId == _projProposalJour.ProposalId;

        if (projCostTrans.RecId)
        {
            return projCostTrans;
        }

        select firstOnly projItemTrans
        exists join projItemTransSale
            where projItemTrans.ProjTransId == projItemTransSale.ProjTransId
                exists join projProposalItemDetail
                    where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
                        exists join projProposalItem
                            where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
                            &&    projProposalItem.ProposalId == _projProposalJour.ProposalId;

        if (projItemTrans.RecId)
        {
            return projItemTrans;
        }

        select firstOnly projOnAccTrans
        exists join projOnAccTransSale
            where projOnAccTrans.TransId == projOnAccTransSale.TransId
                exists join projProposalOnAccDetail
                    where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
                        exists join projProposalOnAcc
                    where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId
                    &&    projProposalOnAcc.ProposalId == _projProposalJour.ProposalId;

        if (projOnAccTrans.RecId)
        {
            return projOnAccTrans;
        }

        select firstOnly projRevenueTrans
        exists join projRevenueTransSale
            where projRevenueTrans.TransId == projRevenueTransSale.TransId
                exists join projProposalRevenueDetail
                    where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
                        exists join projProposalRevenue
                            where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
                            &&    projProposalRevenue.ProposalId == _projProposalJour.ProposalId;

        if (projRevenueTrans.RecId)
        {
            return projRevenueTrans;
        }

        select firstOnly salesLine
        exists join projProposalItem
            where projProposalItem.ProposalId   == _projProposalJour.ProposalId
            &&    projProposalItem.ItemType     == ProjItemType::SalesOrder
            &&    salesLine.SalesId             == projProposalItem.SalesId;

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceCodeIdForProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the service code of the project transaction.
    /// </summary>
    /// <param name="_projProposalTransMap">
    /// Table map for project transactions that need to be split.
    /// </param>
    /// <param name="_projFundingRefId">
    /// The project funding recId.
    /// </param>
    /// <returns>
    /// Service code of the transaction.
    /// </returns>
    private TaxServiceCodeId_BR getServiceCodeIdForProposalTrans(ProjProposalTransMap_BR _projProposalTransMap, ProjFundingSourceRefId _projFundingRefId)
    {
        TaxServiceCodeId_BR         serviceCodeId;
        LogisticsPostalAddress      invoicePostalAddress;
        CustTable                   custTable;

        switch (_projProposalTransMap.TableId)
        {
            case tablenum(SalesLine) :
                salesLine = _projProposalTransMap;
                if (salesLine.SalesType == SalesType::ItemReq) // item is sold always as service, read service code from category
                {
                    serviceCodeId = ProjCategory::find(_projProposalTransMap.ProjCategoryId).TaxServiceCodeId_BR;
                }
                else
                {
                    serviceCodeId = salesLine.salesLine_BR().TaxServiceCode_BR;
                }
                break;

            case tablenum(ProjOnAccTrans) : // ProjOnAccTrans do not have category, use service code directly
                serviceCodeId = _projProposalTransMap.ServiceCodeId;
                break;

            default :
                serviceCodeId = ProjCategory::find(_projProposalTransMap.ProjCategoryId).TaxServiceCodeId_BR;
        }

        custTable = CustTable::find(ProjFundingSource::find(_projFundingRefId).CustAccount);

        if (custTable.ServiceCodeOnDlvAddress_BR)
        {
            invoicePostalAddress = custTable.postalAddress();

            serviceCodeId = TaxServiceCode_BR::findDlvServiceCode(serviceCodeId, invoicePostalAddress.CountryRegionId, invoicePostalAddress.State, invoicePostalAddress.City).ServiceCodeId;
        }

        return serviceCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjTransAnItemFromProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if a transaction is a item or not.
    /// </summary>
    /// <param name="_projProposalTransMap">
    /// Table map for project transactions that need to be split.
    /// </param>
    /// <returns>
    /// True when sales type is an item requirement (all item requirements are services) or for other sales types, method returns true just when item type is Service.
    /// False if the transaction is associated with a service.
    /// </returns>
    private boolean isProjTransAnItemFromProposalTrans(ProjProposalTransMap_BR _projProposalTransMap)
    {
        boolean         isItem = false;

        if (_projProposalTransMap.TableId == tablenum(SalesLine))
        {
            salesLine = _projProposalTransMap;

            if (salesLine.SalesType == SalesType::ItemReq)
            {
                isItem = false;
            }
            else
            {
                isItem = salesLine.inventTable().ItemType != ItemType::Service ? true : false;
            }
        }

        return isItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentProjProposalJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current <c>ProjProposalJour</c> as the first ProjProposalJour in the list.
    /// </summary>
    /// <param name="_currentProjProposalJour">
    /// The current <c>ProjProposalJour</c>, optional if the it is adding new lines on an exisiting proposal
    /// </param>
    public void setCurrentProjProposalJour(ProjProposalJour _currentProjProposalJour)
    {
        str key;

        this.parmProjInvoiceTable(ProjInvoiceTable::find(_currentProjProposalJour.ProjInvoiceProjId));

        key = this.buildKeyFromProposalTrans(this.getOneProposalTrans(_currentProjProposalJour), _currentProjProposalJour.FundingSource, _currentProjProposalJour.TaxGroupId, _currentProjProposalJour.CurrencyId);

        splitMap.insert(key, _currentProjProposalJour);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>