<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCORWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchCORWorkflow</c> class is used when confirming product receipt workflows.
/// </summary>
abstract class PurchCORWorkflow
{
    Common  documentRecord;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates a workflow.
    /// </summary>
    /// <param name="_args">
    /// The arguments that contain the document record to activate the workflow.
    /// </param>
    protected void activateWorkflow(Args _args)
    {
        WorkflowSubmitDialog    workflowSubmitDialog = this.getWorkflowSubmitDialog(_args);

        if (workflowSubmitDialog.parmIsClosedOK())
        {
            documentRecord = _args.record();

            try
            {
                ttsbegin;
                this.startWorkflow(workflowSubmitDialog.parmWorkflowComment());

                this.updateCaller(_args);
                ttscommit;
            }
            catch(Exception::Error)
            {
                info("@SYS303438");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels the workflows on the document record.
    /// </summary>
    protected void cancelWorkflow()
    {
        if ((this.getState() == TradeWorkflowState::PendingCompletion) ||
           (this.getState() == TradeWorkflowState::Submitted))
        {
            TradeWorkflow::cancelWorkflow(documentRecord, this.getWorkflowType());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the document record can be submitted to the workflow.
    /// </summary>
    /// <returns>
    ///    true if the document record can be submitted to the workflow; otherwise, false.
    /// </returns>
    protected boolean canSubmit()
    {
        if (!this.checkSubmitState())
        {
            return false;
        }
        if (!this.checkActiveWorkflowType())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActiveWorkflowType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an active workflow has been defined.
    /// </summary>
    /// <returns>
    /// true if an active workflow exists; otherwise, false.
    /// </returns>
    protected boolean checkActiveWorkflowType()
    {
        return WorkflowTable::findActiveTemplate(this.getWorkflowType()).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a COR policy has been defined.
    /// </summary>
    /// <returns>
    /// true if the COR policy exists; otherwise, false.
    /// </returns>
    protected boolean checkPolicy()
    {
        return PurchCORPolicyTable::findPolicy(documentRecord as PurchLine).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSubmitState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the document can be submitted.
    /// </summary>
    /// <returns>
    /// true if the document can be submitted; otherwise, false.
    /// </returns>
    protected boolean checkSubmitState()
    {
        return this.getState() == TradeWorkflowState::NotSubmitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of a menu item that is used when taking the complete action.
    /// </summary>
    /// <returns>
    /// A menu item name.
    /// </returns>
    abstract protected menuItemNameAction completeAction()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Activates the <c>Complete</c> task action on the workflow.
    /// </summary>
    protected void completeTask()
    {
        ListEnumerator        listEnumerator;
        List                  workflowsToComplete;
        WorkflowWorkItemTable workflowWorkItemTable;

        if ((this.getState() == TradeWorkflowState::PendingCompletion) ||
           (this.getState() == TradeWorkflowState::Submitted))
        {
            workflowsToComplete = PurchCORPurchLineDocument::findWorkItemsForDocument(documentRecord);

            ttsbegin;
            listEnumerator = workflowsToComplete.getEnumerator();
            while (listEnumerator.moveNext())
            {
                workflowWorkItemTable = WorkflowWorkItemTable::find(listEnumerator.current());
                if ((workflowWorkItemTable.RecId) &&
                   (workflowWorkItemTable.workflowVersionTable().workflowTable().TemplateName == this.getWorkflowType()))
                {
                    this.takeAction(workflowWorkItemTable);
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the state of a <c>PurchLine</c> record.
    /// </summary>
    /// <returns>
    /// The state of the <c>PurchLine</c> record.
    /// </returns>
    abstract protected TradeWorkflowState getState()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowSubmitDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a dialog box where submission information can be entered.
    /// </summary>
    /// <param name="_args">
    /// The arguments with the caller form that contains a <c>getActiveWorkflowConfiguration</c> method.
    /// </param>
    /// <returns>
    /// A dialog class that contains the submission information.
    /// </returns>
    protected WorkflowSubmitDialog getWorkflowSubmitDialog(Args _args)
    {
        WorkflowSubmitDialog workflowSubmitDialog;

        workflowSubmitDialog = WorkflowSubmitDialog::construct(_args.caller().getActiveWorkflowConfiguration());
        workflowSubmitDialog.run();

        return workflowSubmitDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of a workflow type that is used when activating the workflow.
    /// </summary>
    /// <returns>
    /// A workflow type name.
    /// </returns>
    abstract protected workflowTypeName getWorkflowType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentRecord</Name>
				<Source><![CDATA[
    protected Common parmDocumentRecord(Common _documentRecord = documentRecord)
    {
        documentRecord = _documentRecord;

        return documentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setState</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the workflow state.
    /// </summary>
    abstract protected void setState()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>startWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a workflow.
    /// </summary>
    /// <param name="_workflowComment">
    /// A comment that is used when starting the workflow.
    /// </param>
    /// <returns>
    /// The ID of the workflow instance.
    /// </returns>
    private WorkflowCorrelationId startWorkflow(WorkflowComment _workflowComment)
    {
        // Activate the workflow.
        return Workflow::activateFromWorkflowType(  this.getWorkflowType(),
                                                    documentRecord.RecId,
                                                    _workflowComment,
                                                    NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the purchase requisition workflow.
    /// </summary>
    /// <param name="_workflowComment">
    /// The workflow comment to submit.
    /// </param>
    /// <remarks>
    /// Activates the workflow configuration by calling the <c>Workflow.ActivateFromWorkflowtemplate</c>
    /// method that has information about the purchase line record.
    /// </remarks>
    protected void submit(WorkflowComment _workflowComment)
    {
        WorkflowCorrelationId   workflowCorrelationId;
        int                     line = Global::infologLine();

        if (this.canSubmit())
        {
            try
            {
                ttsbegin;
                workflowCorrelationId = this.startWorkflow(_workflowComment);
                if (workflowCorrelationId)
                {
                    this.setState();
                }
                ttscommit;
            }
            catch(Exception::Error)
            {
                infolog.clear(line);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes the complete action.
    /// </summary>
    /// <param name="_workflowWorkItemTable">
    /// The work item that is used when taking the completed action.
    /// </param>
    protected void takeAction(WorkflowWorkItemTable _workflowWorkItemTable)
    {
        WorkflowWorkItem::takeAction(   _workflowWorkItemTable.Id,
                                        WorkflowWorkItemActionManager::findOutcomeNameForMenuItem(
                                            _workflowWorkItemTable, this.completeAction()),
                                        "@SYS303430");
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the calling form.
    /// </summary>
    /// <param name="_args">
    /// The arguments that contain the caller form.
    /// </param>
    protected void updateCaller(Args _args)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>