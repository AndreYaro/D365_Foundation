<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorRequestNVAWorkflowEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendVendorRequestNVAWorkflowEventHandler</c> class implements the <c>WorkflowEvent</c> interfaces.
/// </summary>
public class VendVendorRequestNVAWorkflowEventHandler implements WorkflowStartedEventHandler, WorkflowCanceledEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a start event for a workflow.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// A value that is used to obtain the workflow context of the workflow that fired the event.
    /// </param>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequestManager::getVendorRequestFromWorkflowEvent(_workflowEventArgs);
        VendVendorRequestManager::construct(vendorRequest.RequestEntityType).updateRequestStateToPendingApproval(vendorRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    public void canceled(WorkflowEventArgs  _workflowEventArgs)
    {
        if (VendVendorRequestWorkflowCancelledHandledFlight::instance().isEnabled())
        {
            VendVendorRequest vendorRequest = VendVendorRequestManager::getVendorRequestFromWorkflowEvent(_workflowEventArgs);
            VendVendorRequestManager::construct(vendorRequest.RequestEntityType).updateRequestStateToWorkflowCanceled(vendorRequest.RecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>