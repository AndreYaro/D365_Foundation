<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxHMRCHelper_UK</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Text.RegularExpressions;

/// <summary>
/// The <c>TaxHMRCHelper_UK</c> class is the helper class containing functionality needed for processing of tax HMRC VAT obligation.
/// </summary>
public class TaxHMRCHelper_UK
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPlatformBuildVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns platform build version.
    /// </summary>
    /// <returns>
    /// Platform build version.
    /// </returns>
    public static str getPlatformBuildVersion()
    {
        Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider provider = Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider::get_Provider();
        str platformBuildVersion = provider.get_PlatformBuildVersion();

        return platformBuildVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductBuildVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Product build version.
    /// </summary>
    /// <returns>
    /// Product build version.
    /// </returns>
    public static str getProductBuildVersion()
    {
        Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider provider = Microsoft.Dynamics.BusinessPlatform.ProductInformation.Provider.ProductInfoProvider::get_Provider();
        str productBuildVersion = provider.get_ApplicationBuildVersion();

        return productBuildVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovClientTimezone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>Gov-Client-Timezone</c> fraud prevention header value.
    /// </summary>
    /// <returns>
    /// <c>Gov-Client-Timezone</c> fraud prevention header value.
    /// </returns>
    /// <remarks>
    /// For Batch process direct connection method.
    /// </remarks>
    public static str getGovClientTimezone()
    {
        TextBuffer tb = new TextBuffer();
        str ret;

        tb.setText(xGlobal::machineTzDisplayName());

        if (tb.find('UTC[+-]:d:d[:]:d:d'))
        {
            ret = tb.subStr(tb.matchPos(), tb.matchLen());
        }
        else
        {
            ret = 'UTC+00:00';
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUTCDateTimeNowStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns current date time in UTC format.
    /// </summary>
    /// <returns>
    /// Current UTC date time.
    /// </returns>
    /// <remarks>
    /// Date time format: 'yyyy-MM-ddThh:mm:ss.sssZ'. 'Z' designates zero time offset.
    /// </remarks>
    public static str getUTCDateTimeNowStr()
    {
        str ret = System.DateTime::UtcNow.ToString('yyyy-MM-ddTHH:mm:ss.fff') + 'Z';

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovClientMACAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>Gov-Client-MAC-Addresses</c> fraud prevention header value.
    /// </summary>
    /// <returns>
    /// <c>Gov-Client-MAC-Addresses</c> fraud prevention header value.
    /// </returns>
    /// <remarks>
    /// For Batch process direct connection method.
    /// </remarks>
    public static str getGovClientMACAddresses()
    {
        SysUrlEncoder encoder = new SysUrlEncoder();
        System.Net.NetworkInformation.NetworkInterface[] nics = System.Net.NetworkInformation.NetworkInterface::GetAllNetworkInterfaces();
        int nicsQty = nics.get_Length();
        container con;

        for (int i = 0; i < nicsQty; i++)
        {
            System.Net.NetworkInformation.NetworkInterface nic = nics.GetValue(i);

            if (nic.get_OperationalStatus() == System.Net.NetworkInformation.OperationalStatus::Up
                && nic.get_NetworkInterfaceType() != System.Net.NetworkInformation.NetworkInterfaceType::Loopback)
            {
                System.Net.NetworkInformation.PhysicalAddress physicalAddress = nic.GetPhysicalAddress();
                str physicalAddressStr = physicalAddress.ToString();
                str physicalAddressFormattedStr = '';

                for (int j = 1; j <= strLen(physicalAddressStr); j++)
                {
                    physicalAddressFormattedStr += subStr(physicalAddressStr, j, 1);
                    if (j mod 2 == 0 && j != strLen(physicalAddressStr))
                    {
                        physicalAddressFormattedStr += ':';
                    }
                }

                con += encoder.encode(physicalAddressFormattedStr);
            }
        }

        str ret;

        if (conLen(con) > 0)
        {
            ret = con2Str(con);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovClientLocalIPs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>Gov-Client-Local-IPs</c> fraud prevention header value.
    /// </summary>
    /// <returns>
    /// <c>Gov-Client-Local-IPs</c> fraud prevention header value.
    /// </returns>
    /// <remarks>
    /// For Batch process direct connection method.
    /// </remarks>
    public static str getGovClientLocalIPs()
    {
        SysUrlEncoder encoder = new SysUrlEncoder();
        System.String hostName = System.Net.Dns::GetHostName();
        System.Net.IPHostEntry hostEntry = System.Net.Dns::GetHostEntry(hostName);
        System.Net.IPAddress[] addresses = hostEntry.get_AddressList();
        System.Collections.IEnumerator enumerator = addresses.GetEnumerator();
        container con;

        while (enumerator.MoveNext())
        {
            System.Net.IPAddress address = enumerator.get_Current();
            System.Net.Sockets.AddressFamily addressFamily = address.get_AddressFamily();
            switch(addressFamily)
            {
                case System.Net.Sockets.AddressFamily::InterNetwork:
                    con = con + address.ToString();

                    break;
                case System.Net.Sockets.AddressFamily::InterNetworkV6:
                    con += encoder.encode(address.ToString());

                    break;
            }
        }

        str ret;

        if (conLen(con) > 0)
        {
            ret = con2Str(con);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovClientDeviceID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>Gov-Client-Device-ID</c> fraud prevention header value.
    /// </summary>
    /// <returns>
    /// <c>Gov-Client-Device-ID</c> fraud prevention header value.
    /// </returns>
    /// <remarks>
    /// For Batch process direct connection method.
    /// </remarks>
    public static str getGovClientDeviceID()
    {
        xSession xS = new xSession();
        str aosName = xS.AOSName();

        TaxHMRCServerDeviceInfo_UK serverDevice;

        select firstonly serverDevice
            where serverDevice.ServerId == aosName;

        if (!serverDevice)
        {
            ttsBegin;
            serverDevice.ServerId = aosName;
            serverDevice.DeviceId = newGuid();
            serverDevice.insert();
            ttsCommit;
        }

        return strRem(strRem(guid2Str(serverDevice.DeviceId), '{'), '}');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovClientUserAgent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>Gov-Client-User-Agent</c> fraud prevention header value.
    /// </summary>
    /// <returns>
    /// <c>Gov-Client-User-Agent</c> fraud prevention header value.
    /// </returns>
    /// <remarks>
    /// For Batch process direct connection method.
    /// </remarks>
    public static str getGovClientUserAgent()
    {
        container headerCon;
        SysUrlEncoder encoder = new SysUrlEncoder();

        headerCon += 'os-family=Windows';

        str commandResult = TaxHMRCHelper_UK::runCommand('cmd.exe', '/C "wmic os get Caption && wmic computersystem get Manufacturer && wmic computersystem get Model"');
        container resultCon = str2con(commandResult, '\n');

        for (int i = 1; i <= conLen(resultCon); i++)
        {
            str curValue = conPeek(resultCon, i);

            if(strScan(curValue, 'Caption', 0, strLen(curValue)) > 0)
            {
                System.String propValue = conPeek(resultCon, i+1);
                propValue = propValue.Trim();

                if (propValue)
                {
                    headerCon += strFmt('os-version=%1', strReplace(encoder.encode(propValue), '+', '%20'));
                }
            }
            else if(strScan(curValue, 'Manufacturer', 0, strLen(curValue)) > 0)
            {
                System.String propValue = conPeek(resultCon, i+1);
                propValue = propValue.Trim();

                if (propValue)
                {
                    headerCon += strFmt('device-manufacturer=%1', strReplace(encoder.encode(propValue), '+', '%20'));
                }
            }
            else if(strScan(curValue, 'Model', 0, strLen(curValue)) > 0)
            {
                System.String propValue = conPeek(resultCon, i+1);
                propValue = propValue.Trim();

                if (propValue)
                {
                    headerCon += strFmt('device-model=%1', strReplace(encoder.encode(propValue), '+', '%20'));
                }
            }
        }

        return con2Str(headerCon, '&');
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCommand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the command with arguments and then close the process.
    /// </summary>
    /// <param name="_command">
    /// The string that sets the application to start.
    /// </param>
    /// <param name="_params">
    /// The string with arguments to use when starting the application.
    /// </param>
    /// <returns>
    /// The string with the process output.
    /// </returns>
    private static str runCommand(str _command, str _params)
    {
        str output = '';

        new InteropPermission(InteropKind::ClrInterop).assert();

        using (System.Diagnostics.Process process = new System.Diagnostics.Process())
        {
            System.Diagnostics.ProcessStartInfo startInfo = process.get_StartInfo();

            startInfo.set_FileName(_command);
            startInfo.set_Arguments(_params);
            startInfo.set_UseShellExecute(false);
            startInfo.set_CreateNoWindow(true);
            startInfo.set_WindowStyle(System.Diagnostics.ProcessWindowStyle::Hidden);
            startInfo.set_RedirectStandardOutput(true);

            process.Start();

            System.IO.StreamReader reader = process.get_StandardOutput();
            output = reader.ReadToEnd();
        }

        CodeAccessPermission::revertAssert();

        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovVendorPublicIP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>Gov-Vendor-Public-IP</c> fraud prevention header value.
    /// </summary>
    /// <param name="_webResources">
    /// The string JSON with web services information for particular fraud prevention headers.
    /// </param>
    /// <returns>
    /// <c>Gov-Vendor-Public-IP</c> fraud prevention header value.
    /// </returns>
    public static str getGovVendorPublicIP(str _webResources)
    {
        const str VendorPublicIPHeader = 'Gov-Vendor-Public-IP';
        const str UrlPropertyName = 'url';
        const str RegexPropertyName = 'regex';
        const str DefaultIPRegex = '([0-9]{1,3}(\\.[0-9]{1,3}){3})|(([0-9A-Fa-f]{0,4}:){2,7}([0-9A-Fa-f]{1,4}))';
        str publicIP;

        if (strContains(_webResources, VendorPublicIPHeader))
        {
            Map webResourcesMap = RetailCommonWebAPI::getMapFromJsonString(_webResources);

            if (webResourcesMap)
            {
                container webResourcesCon = webResourcesMap.lookup(VendorPublicIPHeader);

                if (webResourcesCon != conNull() && conPeek(webResourcesCon, 1))
                {
                    List conList = List::create(webResourcesCon);
                    ListEnumerator listEnumerator = conList.getEnumerator();
                    while (listEnumerator.moveNext())
                    {
                        Map value = Map::create(listEnumerator.current());

                        if (value)
                        {
                            str resp = TaxHMRCHelper_UK::getResponseFromHttpsRequest(value.lookup(UrlPropertyName));

                            if (resp)
                            {
                                str regexValue = value.lookup(RegexPropertyName);
                                Regex regex = new Regex(regexValue ? regexValue : DefaultIPRegex, RegexOptions::IgnoreCase);
                                Match m = regex.Match(resp);
                                if (m.Success)
                                {
                                    publicIP = m.Value;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        return publicIP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseFromHttpsRequest</Name>
				<Source><![CDATA[
    private static str getResponseFromHttpsRequest(str _url)
    {
        str responseData;

        if (_url && strStartsWith(_url, 'https'))
        {
            try
            {
                System.Net.HttpWebRequest request = System.Net.WebRequest::Create(_url) as System.Net.HttpWebRequest;

                request.set_Method('GET');
                request.set_Timeout(1000);

                CLRObject webResponse = request.GetResponse();
                System.Net.HttpWebResponse response = webResponse as System.Net.HttpWebResponse;

                responseData = TaxHMRCHelper_UK::readResponseData(response);
                response.Close();

                int httpStatusCode = response.get_StatusCode();

                if (httpStatusCode != 200)
                {
                    responseData = '';
                }
            }
            catch (Exception::CLRError)
            {
                System.Exception ex = ClrInterop::getLastException();
                if (ex != null)
                {
                    ex = ex.get_InnerException();
                    error(ex.Message);
                }
            }
        }

        return responseData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readResponseData</Name>
				<Source><![CDATA[
    private static str readResponseData(System.Net.HttpWebResponse response)
    {
        int batchSize = 1024;
        System.IO.Stream receiveStream;
        System.Text.Encoding encode;
        System.Char[] read;
        System.Text.StringBuilder sb;
        System.String readString;
        str contentEncoding;

        int countRead;

        if (response == null)
        {
            return '';
        }

        receiveStream = response.GetResponseStream();
        contentEncoding = response.get_ContentEncoding();
        if (contentEncoding)
        {
            encode = System.Text.Encoding::GetEncoding(contentEncoding);
        }
        else
        {
            encode = new System.Text.UTF8Encoding();
        }

        using (System.IO.StreamReader readStream = new System.IO.StreamReader(receiveStream, encode))
        {
            read = new System.Char[batchSize]();

            countRead = readStream.Read(read, 0, batchSize);

            sb = new System.Text.StringBuilder();
            while (countRead > 0)
            {
                readString = new System.String(read, 0, countRead);
                sb.Append(readString);
                countRead = readStream.Read(read, 0, batchSize);
            }
        }

        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovWebApp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns fraud prevention header values about originating device and user consent.
    /// </summary>
    /// <returns>
    /// <c>DataContract</c> with fraud prevention header values and user consent.
    /// </returns>
    public static TaxHMRCWebContextContract_UK getGovWebApp()
    {
        TaxHMRCWebContextContract_UK context;

        Args args = new Args();

        FormRun formRun = new MenuFunction(menuitemDisplayStr(TaxHMRCWebContextForm_UK), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();

        var webContext = formRun as TaxIHMRCWebContext_UK;
        if (webContext)
        {
            context = webContext.getWebContextContractOnCloseOk();
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGovWebContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns fraud prevention header values about originating device, user consent and server.
    /// </summary>
    /// <param name="_webApplicationRefRecId">
    /// The reference to <c>EMWebApplication</c>.
    /// </param>
    /// <param name="_webResources">
    /// The string JSON with web services information for particular fraud prevention headers.
    /// </param>
    /// <returns>
    /// <c>TaxHMRCWebContextContract_UK</c> data contract with fraud prevention header values and user consent.
    /// </returns>
    public static TaxHMRCWebContextContract_UK getGovWebContext(RefRecId _webApplicationRefRecId, str _webResources)
    {
        TaxHMRCWebContextContract_UK context;

        TaxHMRCWebContextFormArgs_UK webContextArgs = new TaxHMRCWebContextFormArgs_UK();

        webContextArgs.parmWebResourcesJSON(_webResources);
        webContextArgs.parmWebApplicationRefRecId(_webApplicationRefRecId);

        Args args = new Args();
        args.parmObject(webContextArgs);

        FormRun formRun = new MenuFunction(menuitemDisplayStr(TaxHMRCWebContextForm_UK), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();

        var webContext = formRun as TaxIHMRCWebContext_UK;
        if (webContext)
        {
            context = webContext.getWebContextContractOnCloseOk();
        }

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWebApplSupplementaryHeaderValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the supplementary header value for the given <c>EMWebApplication</c>.
    /// </summary>
    /// <param name = "_webApplicationRefRecId">The reference to <c>EMWebApplication</c>.</param>
    /// <param name = "_header">The supplementary header definition.</param>
    /// <returns>The supplementary header value.</returns>
    public static str getWebApplSupplementaryHeaderValue(RefRecId _webApplicationRefRecId, str _header)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSHA512</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates SHA-512 hash of the input string <paramref name="_inputStr"/>.
    /// </summary>
    /// <param name="_inputStr">
    /// The string to be hashed.
    /// </param>
    /// <returns>
    /// SHA-512 hash of the input string <paramref name="_baseStr"/>
    /// </returns>
    /// <remarks>
    /// UTF-8 encoding is used to convert input string to array of bytes.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// In case of any CLR exception.
    /// </exception>
    public static str calculateSHA512(str _inputStr)
    {
        str                                 ret;
        System.Security.Cryptography.SHA512 sha512;
        System.Text.Encoding                encoding;
        System.Byte[]                       inputStrBytes, resultBytes;
        System.Exception                    clrException;

        new InteropPermission(InteropKind::ClrInterop).assert();

        try
        {
            encoding = System.Text.Encoding::get_UTF8();
            inputStrBytes = encoding.GetBytes(_inputStr);

            sha512 = System.Security.Cryptography.SHA512::Create();
            resultBytes = SHA512.ComputeHash(inputStrBytes);

            ret = System.BitConverter::ToString(resultBytes);
            ret = strRem(ret, '-');
        }
        catch (Exception::CLRError)
        {
            //BP deviation documented
            clrException = CLRInterop::getLastException();
            error(clrException.get_Message());
            throw error("@SYS106158");
        }

        CodeAccessPermission::revertAssert();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>