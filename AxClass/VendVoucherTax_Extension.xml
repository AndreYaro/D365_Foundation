<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVoucherTax_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendVoucherTax_ApplicationSuite_Extension</c> class is extension of <c>VendVoucher</c> class.
/// </summary>
[ExtensionOf(classStr(VendVoucher))]
internal final class VendVoucherTax_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateVendTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tax amount related to withholding tax for <c>VendTrans</c> and <c>VendTransOpen</c> during posting.
    /// </summary>
    /// <param name = "_vendTrans">The <c>VendTrans</c> object.</param>
    /// <param name = "_vendTransOpen">The <c>VendTransOpen</c> object.</param>
    /// <returns>The updated <c>VendTrans</c> and <c>VendTransOpen</c> objects.</returns>
    protected container updateVendTrans_IN(VendTrans _vendTrans, VendTransOpen _vendTransOpen)
    {
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;

        [vendTrans, vendTransOpen] = next updateVendTrans_IN(_vendTrans, _vendTransOpen);

        if (TaxWithholdParameters_IN::checkTaxParameters()
            && _vendTrans
            && _vendTransOpen)
        {
            LedgerJournalTrans ledgerJournalTrans;
            LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtensionIN;
            LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

            vendTrans = _vendTrans;
            vendTransOpen = _vendTransOpen;

            if (TaxWHTVendInvTDSAmountUpdateForInvoiceRegiseterPO_INFlight::instance().isEnabled())
            {
                select firstonly RecId, TDSGroup, TCSGroup from ledgerJournalTransTaxExtensionIN
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == ledgerJournalTransTaxExtensionIN.LedgerJournalTrans
                            && ledgerJournalTrans.Voucher == _vendTrans.Voucher
                            && ledgerJournalTrans.TransDate == _vendTrans.TransDate;
            }
            else
            {
                select firstonly RecId, TDSGroup, TCSGroup from ledgerJournalTransTaxExtensionIN
                    exists join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == ledgerJournalTransTaxExtensionIN.LedgerJournalTrans
                    exists join ledgerJournalVoucherChanged
                        where ledgerJournalVoucherChanged.JournalNum == ledgerJournalTrans.JournalNum
                            && ledgerJournalVoucherChanged.ToVoucher == ledgerJournalTrans.Voucher
                            && ledgerJournalVoucherChanged.FromVoucher == _vendTrans.Voucher
                            && ledgerJournalVoucherChanged.FromDate == _vendTrans.TransDate;
            }

            // Deducte WHT TDS or add TCS when posting PO through invoice pool or invoice approval, and WHT isn't calculated in invoice register.
            if (ledgerJournalTransTaxExtensionIN.RecId && (!ledgerJournalTransTaxExtensionIN.TDSGroup && !ledgerJournalTransTaxExtensionIN.TCSGroup))
            {
                ttsbegin;

                vendTrans.selectForUpdate(true);

                if (!(isTCSApplicable && TaxWithholdEnableIncludeTCSInTotalFeatureToggle::isFeatureEnabled()))
                {
                    vendTrans.AmountCur += taxWithholdAmount;
                }

                vendTrans.AmountMST = CurrencyExchangeHelper::mstAmount(vendTrans.AmountCur, currencyCode, transDate, Currency::noYes2UnknownNoYes(triangulation), exchRate, exchRateSecondary);

                // Reset reporting currency to zero, and reinit it.
                vendTrans.ReportingCurrencyAmount = 0;
                this.initCustVendTransReportingCurrency(vendTrans);

                CustVendTrans_W custVendTrans_W = vendTrans.CustVendTrans::getCustVendTrans_W();

                if (isTDSApplicable)
                {
                    custVendTrans_W.tdsAmount_IN = taxWithholdAmount + taxWithholdBank + taxWithhold + custVendWHTAmount;

                    // tdsAmount is positive for vendor.
                    custVendTrans_W.tdsAmount_IN = abs(custVendTrans_W.tdsAmount_IN);
                    custVendTrans_W.TaxWithholdAmountOrigin_IN = taxWithholdAmountOrigin * -1;
                }
                else if (isTCSApplicable)
                {
                    custVendTrans_W.tcsAmount_IN = taxWithholdAmount + taxWithholdBank + taxWithhold + custVendWHTAmount;

                    // tcsAmount is negative for vendor.
                    custVendTrans_W.tcsAmount_IN = abs(custVendTrans_W.tcsAmount_IN) * -1;
                    custVendTrans_W.TaxWithholdAmountOrigin_IN = taxWithholdAmountOrigin * -1;
                }

                vendTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
                vendTrans.update();

                vendTransOpen.selectForUpdate(true);
                vendTransOpen.AmountCur = vendTrans.AmountCur;
                vendTransOpen.AmountMST = vendTrans.AmountMST;
                vendTransOpen.ReportingCurrencyAmount = vendTrans.ReportingCurrencyAmount;
                vendTransOpen = this.initVendTransOpenWHTAmount_IN(vendTrans, vendTransOpen);
                vendTransOpen.update();

                ttscommit;
            }
        }

        return [vendTrans, vendTransOpen];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendTransOpenWHTAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits amount for table <c>VednTransOpen</c> that releted to withholding tax.
    /// </summary>
    /// <param name = "_vendTrans">The <c>VendTrans</c> object.</param>
    /// <param name = "_vendTransOpen">The <c>VendTransOpen</c> object to be updated.</param>
    /// <returns>The updated <c>VendTransOpen</c> object.</returns>
    public VendTransOpen initVendTransOpenWHTAmount_IN(VendTrans _vendTrans, VendTransOpen _vendTransOpen)
    {
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            _vendTransOpen.TaxWithholdStatus_IN = this.parmTaxWitholdSettled_IN();
            _vendTransOpen.TaxWithholdRegNumber_IN = this.parmTaxWithholdTAN_IN();
            VendInvoiceJour vendInvoiceJourloc = VendInvoiceJour::findFromVendTrans(_vendTrans.Invoice, _vendTrans.TransDate, _vendTrans.AccountNum);

            if (isTDSApplicable && (taxWithholdAmount || taxWithholdBank || taxWithhold || totalWHTBankAmount || custVendWHTAmount))
            {
                _vendTransOpen.tdsAmount_IN = taxWithholdAmount + taxWithholdBank + taxWithhold + totalWHTBankAmount + custVendWHTAmount;
                //tdsAmount should be positive for vendor transaction.
                if (_vendTransOpen.tdsAmount_IN < 0 && vendInvoiceJourloc.Qty > 0)
                {
                    _vendTransOpen.tdsAmount_IN = _vendTransOpen.tdsAmount_IN * -1;
                }
                _vendTransOpen.TaxWithholdAmountOrigin_IN = taxWithholdAmountOrigin * -1;
            }
            if (isTCSApplicable && (taxWithholdAmount || taxWithholdBank || taxWithhold || totalWHTBankAmount || custVendWHTAmount))
            {
                _vendTransOpen.tcsAmount_IN = taxWithholdAmount + taxWithholdBank + taxWithhold + totalWHTBankAmount + custVendWHTAmount;
                //tcsAmount should be negative for vendor transaction.
                if (_vendTransOpen.tcsAmount_IN > 0 && vendInvoiceJourloc.Qty > 0)
                {
                    _vendTransOpen.tcsAmount_IN = _vendTransOpen.tcsAmount_IN * -1;
                }
                _vendTransOpen.TaxWithholdAmountOrigin_IN = taxWithholdAmountOrigin * -1;
            }
        }

        return _vendTransOpen;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>