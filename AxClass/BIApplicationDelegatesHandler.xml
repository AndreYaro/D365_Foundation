<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BIApplicationDelegatesHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BIApplicationDelegatesHandler
{
    #BIFramework

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrencyNameDelegateHandler</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(BIFrameworkDelegates), delegatestr(BIFrameworkDelegates, getCurrencyNameDelegate))]
    public static void getCurrencyNameDelegateHandler(CompanyId _companyId, EventHandlerResult _result)
    {
        CompanyInfo companyInfo;
        Currency currency;
        CurrencyName currencyName;

        changecompany(_companyId)
        {
            select RecId from companyInfo where companyInfo.DataArea == _companyId;
            if (companyInfo)
            {
                select firstonly Txt from currency where currency.CurrencyCode == Ledger::accountingCurrency(companyInfo.RecId);
                if (currency)
                {
                    currencyName = currency.Txt;
                }
            }
        }

        _result.result(currencyName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBIFrameworkTableDelegateHandler</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(BIFrameworkDelegates), delegatestr(BIFrameworkDelegates, isBIFrameworkTableDelegate))]
    public static void isBIFrameworkTableDelegateHandler(str _tableName, EventHandlerResult _result)
    {
        int length = strLen(_tableName);

        if (_result.result() == true)
            return;

        if (1 == strScan(_tableName, tableStr(BICompanyView), 0, length))
        {
            _result.result(true);
        }
        else
        {
            _result.result(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndDateDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default date to use as the end date for a dimension.
    /// </summary>
    /// <returns>
    ///    The latest date in the <c>FiscalCalendarPeriod</c> table when a date is found; otherwise, the last
    ///    date of the of the year five years in the future.
    /// </returns>
    [SubscribesTo(classstr(BIFrameworkDelegates), delegatestr(BIFrameworkDelegates, getEndDateDelegate))]
    public static void getEndDateDelegateHandler(EventHandlerResult _result)
    {
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        FiscalCalendarYear      fiscalCalendarYear;
        int thisYear = year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        TransDate returnDate;

        try
        {
            select firstonly EndDate, FiscalCalendarYear from fiscalCalendarPeriod order by EndDate desc
            join RecId, FiscalCalendar  from fiscalCalendarYear
            where fiscalCalendarYear.RecId == fiscalCalendarPeriod.FiscalCalendarYear
            && fiscalCalendarYear.FiscalCalendar == Ledger::fiscalCalendar(CompanyInfo::current());
        }
        catch
        {
            fiscalCalendarPeriod = null;
        }

        returnDate =  fiscalCalendarPeriod != null ? fiscalCalendarPeriod.EndDate : BiDateDimensionManager::getDefaultEndDate();

        _result.result(returnDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartDateDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default date to use as the start date for a dimension.
    /// </summary>
    /// <returns>
    ///    The earliest date in the <c>FiscalCalendarPeriod</c> table when a date is found; otherwise, the
    ///    first date of the year which is ten years in the past.
    /// </returns>
    [SubscribesTo(classstr(BIFrameworkDelegates), delegatestr(BIFrameworkDelegates, getStartDateDelegate))]
    public static void getStartDateDelegateHandler(EventHandlerResult _result)
    {
        TransDate returnDate;
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        FiscalCalendarYear      fiscalCalendarYear;
        int thisYear = year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        try
        {
            select firstonly StartDate, FiscalCalendarYear from fiscalCalendarPeriod order by StartDate asc
            join RecId, FiscalCalendar  from fiscalCalendarYear
            where fiscalCalendarYear.RecId == fiscalCalendarPeriod.FiscalCalendarYear
            && fiscalCalendarYear.FiscalCalendar == Ledger::fiscalCalendar(CompanyInfo::current());
        }
        catch
        {
            fiscalCalendarPeriod = null;
        }

        returnDate = fiscalCalendarPeriod != null ? fiscalCalendarPeriod.StartDate : BiDateDimensionManager::getDefaultStartDate();
        if (date2num(returnDate) > date2num(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())))
        {
            returnDate = BiDateDimensionManager::getDefaultStartDate();
        }

        _result.result(returnDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>