<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdTDSPayableCertificate_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class does the Create, Update and Validate the TDS Payable transactions for CertificateNumber update.
/// </summary>
class TaxWithholdTDSPayableCertificate_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetAndShowTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the Tmp tables with the TDS transactions which needs to be updated with the certificate number.
    /// </summary>
    /// <param name="_tmpTaxWithholdCertificateOverview">
    /// The TmpTaxWithholdCertificateOverview_IN table buffer.
    /// </param>
    /// <param name="_vendor">
    /// The vendor account.
    /// </param>
    /// <param name="_customer">
    /// The customer account.
    /// </param>
    /// <param name="_fromDate">
    /// The fromdate for which TDS transactions needs to be fetched.
    /// </param>
    /// <param name="_toDate">
    /// The todate for which TDS transactions needs to be fetched.
    /// </param>
    /// <param name="_isCertificateNumblank">
    /// The CertificateNumber, which needs to be updated to the TDS transactions.
    /// </param>
    public static void GetAndShowTransactions(
        TmpTaxWithholdCertificateOverview_IN    _tmpTaxWithholdCertificateOverview,
        VendAccount                             _vendor,
        CustAccount                             _customer,
        FromDate                                _fromDate,
        ToDate                                  _toDate,
        boolean                                 _isCertificateNumblank)
    {
        TaxWithholdTrans_IN                 taxWithholdTransloc;
        QuarterOfYear                       quarterOfYear,
                                            prevQuarter;
        RefRecId                            taxWithholdCertificateOverviewRecId;
        TaxWithholdDesignerTable_IN         taxWithholdDesignerTable;
        TaxWithholdProvisionalReceipt_IN    taxWithholdProvisionalReceipt;
        CurrencyExchangeHelper              currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        TmpTaxWithholdCertificateOverview_IN::deleteCertificateTmpTables(_tmpTaxWithholdCertificateOverview);

        while select VendAccount, CustAccount, TaxWithholdAmountCur, TaxWithholdBaseAmountCur, TransDate, CertificateNumber, CurrencyCode,
            TaxWithholdRegNumber, TaxWithholdCode, TaxWithholdGroup
            from taxWithholdTransloc
            order by TransDate
            where ((_vendor && taxWithholdTransloc.VendAccount == _vendor)
                   || (_customer && taxWithholdTransloc.CustAccount == _customer))
               && taxWithholdTransloc.TransDate >= _fromDate
               && taxWithholdTransloc.transdate <= _toDate
               && taxWithholdTransloc.TaxType   == TaxWithholdCodeType_IN::TDS
               && (!_isCertificateNumblank
                    || taxWithholdTransloc.CertificateNumber == '')
               && taxWithholdTransloc.Source    != TaxModuleType::TaxWithhold_IN
            exists join taxWithholdProvisionalReceipt
                where taxWithholdProvisionalReceipt.TaxWithholdRegNumber == taxWithholdTransloc.TaxWithholdRegNumber
                   && taxWithholdProvisionalReceipt.ReceiptNumber        != ''
                   && taxWithholdProvisionalReceipt.ProvisionalReceiptNumber != ''
                   && (taxWithholdProvisionalReceipt.Statement           == TaxWithholdStatement_IN::Form26Q
                       || taxWithholdProvisionalReceipt.Statement        == TaxWithholdStatement_IN::Form27Q)
                   && taxWithholdProvisionalReceipt.FromDate        <= taxWithholdTransloc.TransDate
                   && taxWithholdProvisionalReceipt.ToDate          >= taxWithholdTransloc.TransDate
        {
            select Basis from taxWithholdDesignerTable
                where taxWithholdDesignerTable.TaxWithholdCode == taxWithholdTransloc.TaxWithholdCode
                   && taxWithholdDesignerTable.TaxWithholdGroup == taxWithholdTransloc.TaxWithholdGroup;

            switch (mthOfYr(taxWithholdTransloc.TransDate))
            {
                case MonthsQuarter::April,
                     MonthsQuarter::May,
                     MonthsQuarter::June:
                     quarterOfYear = QuarterOfYear::Q1;
                break;
                case MonthsQuarter::July,
                     MonthsQuarter::August,
                     MonthsQuarter::September:
                     quarterOfYear = QuarterOfYear::Q2;
                break;
                case MonthsQuarter::October,
                     MonthsQuarter::November,
                     MonthsQuarter::December:
                     quarterOfYear = QuarterOfYear::Q3;
                break;
                case MonthsQuarter::January,
                     MonthsQuarter::February,
                     MonthsQuarter::March:
                     quarterOfYear = QuarterOfYear::Q4;
                break;
                default :
            }
            //Groupby year and quarter fields.
            if (quarterOfYear != prevQuarter
                || (year(taxWithholdTransloc.TransDate) != _tmpTaxWithholdCertificateOverview.Year))
            {
                _tmpTaxWithholdCertificateOverview.clear();
                if (taxWithholdDesignerTable.Basis == TaxWithholdBasis_IN::GrossAmount)
                {
                    _tmpTaxWithholdCertificateOverview.Amount    = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(taxWithholdTransloc.CurrencyCode, taxWithholdTransloc.TaxWithholdBaseAmountCur);
                }
                _tmpTaxWithholdCertificateOverview.TaxAmount               = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(taxWithholdTransloc.CurrencyCode, taxWithholdTransloc.TaxWithholdAmountCur);
                _tmpTaxWithholdCertificateOverview.CustVendAccount         = taxWithholdTransloc.VendAccount ? taxWithholdTransloc.VendAccount : taxWithholdTransloc.CustAccount;
                _tmpTaxWithholdCertificateOverview.AccountType             = taxWithholdTransloc.VendAccount ? LedgerJournalACType::Vend : LedgerJournalACType::Cust;
                _tmpTaxWithholdCertificateOverview.Year                    = year(taxWithholdTransloc.TransDate);
                _tmpTaxWithholdCertificateOverview.CertificateNumber       = taxWithholdTransloc.CertificateNumber;
                _tmpTaxWithholdCertificateOverview.Quarter                 = quarterOfYear;
                _tmpTaxWithholdCertificateOverview.insert();

                prevQuarter = quarterOfYear;
                taxWithholdCertificateOverviewRecId = _tmpTaxWithholdCertificateOverview.RecId;
            }
            else
            {
                _tmpTaxWithholdCertificateOverview.selectForUpdate(true);

                if (taxWithholdDesignerTable.Basis == TaxWithholdBasis_IN::GrossAmount)
                {
                    _tmpTaxWithholdCertificateOverview.Amount += currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(taxWithholdTransloc.CurrencyCode, taxWithholdTransloc.TaxWithholdBaseAmountCur);
                }
                _tmpTaxWithholdCertificateOverview.TaxAmount += currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(taxWithholdTransloc.CurrencyCode, taxWithholdTransloc.TaxWithholdAmountCur);
                _tmpTaxWithholdCertificateOverview.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCertificateNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the certificate number to the TaxWithholdTrans_IN table.
    /// </summary>
    /// <param name="_tmpTaxWithholdCertificateOverview">
    /// The TmpTaxWithholdCertificateOverview_IN buffer.
    /// </param>
    /// <param name="_taxWithholdCertificateNumber">
    /// The TaxWithholdCertificateNumber_IN number, which needs to be updated to TaxWithholdTrans_IN table.
    /// </param>
    public static void updateCertificateNumber(
        TmpTaxWithholdCertificateOverview_IN _tmpTaxWithholdCertificateOverview,
        TaxWithholdCertificateNumber_IN      _taxWithholdCertificateNumber)
    {
        FromDate            fromDateloc;
        ToDate              toDateloc;
        TaxWithholdTrans_IN taxWithholdTrans;

        #TaxWithhold_IN

        if (_taxWithholdCertificateNumber)
        {
            switch (_tmpTaxWithholdCertificateOverview.Quarter)
            {
                case QuarterOfYear::Q1 :
                    fromDateloc = str2Date(strFmt(#Q1StartDate + "%1", _tmpTaxWithholdCertificateOverview.Year), #MonthDateYear);
                    toDateloc = str2Date(strFmt(#Q1EndDate + "%1", _tmpTaxWithholdCertificateOverview.Year), #MonthDateYear);
                    break;
                case QuarterOfYear::Q2 :
                    fromDateloc = str2Date(strFmt(#Q2StartDate + "%1", _tmpTaxWithholdCertificateOverview.Year), #MonthDateYear);
                    toDateloc = str2Date(strFmt(#Q2EndDate + "%1", _tmpTaxWithholdCertificateOverview.Year), #MonthDateYear);
                    break;
                case QuarterOfYear::Q3 :
                    fromDateloc = str2Date(strFmt(#Q3StartDate + "%1", _tmpTaxWithholdCertificateOverview.Year), #MonthDateYear);
                    toDateloc = str2Date(strFmt(#Q3EndDate + "%1", _tmpTaxWithholdCertificateOverview.Year), #MonthDateYear);
                    break;
                case QuarterOfYear::Q4 :
                    fromDateloc = str2Date(strFmt(#Q4StartDate + "%1", _tmpTaxWithholdCertificateOverview.Year), #MonthDateYear);
                    toDateloc = str2Date(strFmt(#Q4EndDate + "%1", _tmpTaxWithholdCertificateOverview.Year), #MonthDateYear);
                    break;
                default: break;
            }

            update_recordSet taxWithholdTrans
                setting certificateNumber = _taxWithholdCertificateNumber
                where taxWithholdTrans.TransDate >= fromDateloc
                    && taxWithholdTrans.TransDate <= toDateloc
                    && taxWithholdTrans.TaxType == TaxWithholdCodeType_IN::TDS
                    && taxWithholdTrans.Source  != TaxModuleType::TaxWithhold_IN
                    && (taxWithholdTrans.VendAccount == _tmpTaxWithholdCertificateOverview.CustVendAccount
                        && _tmpTaxWithholdCertificateOverview.AccountType == LedgerJournalACType::Vend)
                        || (taxWithholdTrans.CustAccount == _tmpTaxWithholdCertificateOverview.CustVendAccount
                            && _tmpTaxWithholdCertificateOverview.AccountType == LedgerJournalACType::Cust);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates FromDate for following validations:
    /// FromDate should be start of the period.
    /// FromDate should be less than ToDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The FromDate value.
    /// </param>
    /// <param name="_toDate">
    /// The ToDate value.
    /// </param>
    /// <returns>
    /// true, if the validations are passed, otherwise false.
    /// </returns>
    public static boolean validateFromDate(FromDate   _fromDate, ToDate   _toDate)
    {
        boolean ret = true;
        int     month, day;

        month = mthOfYr(_fromDate);
        day = dayOfMth(_fromDate);

        if (day != DaysOfMonth::Day1
            || (month != MonthsQuarter::January && month != MonthsQuarter::April && month != MonthsQuarter::July && month != MonthsQuarter::October))
        {
            ret = checkFailed("@SYS4000944");
        }

        if (ret && _fromDate && _toDate
            && _fromDate > _toDate)
        {
            ret = checkFailed("@SYS16982");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates ToDate for following validations:
    /// ToDate should be end of the period.
    /// ToDate should be greater than FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The FromDate value.
    /// </param>
    /// <param name="_toDate">
    /// The ToDate value.
    /// </param>
    /// <returns>
    /// true, if the validations are passed, otherwise false.
    /// </returns>
    public static boolean validateToDate(FromDate   _fromDate, ToDate   _toDate)
    {
        boolean ret = true;
        int     month, day;

        month = mthOfYr(_toDate);
        day = dayOfMth(_toDate);

        if ((day == DaysOfMonth::Day30
                    && (month != MonthsQuarter::June && month != MonthsQuarter::September))
            ||
            (day == DaysOfMonth::Day31
                    && (month == MonthsQuarter::June || month == MonthsQuarter::September))
            ||
            (day == DaysOfMonth::Day31
                    && (month != MonthsQuarter::March && month != MonthsQuarter::December))
            ||
            (day == DaysOfMonth::Day30
                    && (month == MonthsQuarter::March || month == MonthsQuarter::December))
            ||
            (day != DaysOfMonth::Day30 && day != DaysOfMonth::Day31))
        {
            ret = checkFailed("@SYS4000945");
        }

        if (ret && _fromDate && _toDate
            && _fromDate > _toDate)
        {
            ret = checkFailed("@SYS16982");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>