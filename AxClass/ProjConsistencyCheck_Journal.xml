<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjConsistencyCheck_Journal</Name>
  <SourceCode>
    <Declaration><![CDATA[
public class ProjConsistencyCheck_Journal extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>configurationKey</Name>
        <Source><![CDATA[
        public configurationKeyId configurationKey()
    {
        return configurationKeyNum(Project);
    }

]]></Source>
      </Method>
      <Method>
        <Name>executionOrder</Name>
        <Source><![CDATA[
        public Integer executionOrder()
    {
        return 4;
    }

]]></Source>
      </Method>
      <Method>
        <Name>getCurPrefix</Name>
        <Source><![CDATA[
        public str getCurPrefix(Common common)
    {
        ProjJournalTrans    projJournalTrans;
        str                 ret;
        ;

        ret = super(common);

        if (common.tableId == tablenum(ProjJournalTrans))
        {
            projJournalTrans = common;
            ret = "@SYS8993" + ': ' + projJournalTrans.journalId + ' ' + ret;
        }

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        Query                           query;
        QueryBuildDataSource            qbds;
        QueryRun                        queryRun;
        ;

        // projJournalTable - Only open journals
        query   = new Query();
        qbds    = query.addDataSource(tablenum(ProjJournalTable));
        qbds.addRange(fieldNum(ProjJournalTable,posted)).value(SysQuery::value(NoYes::No));
        queryRun  = new QueryRun(query);
        this.kernelCheckRecords(queryRun);

        // projJournalTrans - Only open journals
        qbds = qbds.addDataSource(tablenum(ProjJournalTrans));
        qbds.addLink(fieldnum(ProjJournalTable,journalId),fieldnum(ProjJournalTrans,journalId));
        queryRun  = new QueryRun(query);
        this.kernelCheckRecords(queryRun,2);
    }

]]></Source>
      </Method>
      <Method>
        <Name>treeParentClassId</Name>
        <Source><![CDATA[
        public classId treeParentClassId()
    {
        return classNum(ProjConsistencyCheck);
    }

]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
        private static ClassDescription description()
    {
        return "@SYS9020";
    }

]]></Source>
      </Method>
      <Method>
        <Name>helpText</Name>
        <Source><![CDATA[
        private static HelpTxt helpText()
    {
        return "@SYS59219";
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>