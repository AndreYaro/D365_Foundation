<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTExportInvoiceDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GSTExportInvoiceDP_IN</c> class provides base implementation of a data provider class for export invoice reports.
/// </summary>
public class TaxGSTExportInvoiceDP_IN extends GSTInvoiceDPBase_IN
{
    CustomsShippingBillJour_IN  customsShippingBillJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    public void createData()
    {
        super();
        select gstInvoiceHeaderFooterTmp where gstInvoiceHeaderFooterTmp.RecId == headerRecId;
        
        if (gstInvoiceHeaderFooterTmp)
        {
            ttsBegin;
            gstInvoiceHeaderFooterTmp.selectForUpdate(true);

            if (taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::BillOfSupply)
            {
                gstInvoiceHeaderFooterTmp.GrandTotal = gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure;
            }
            else
            {
                gstInvoiceHeaderFooterTmp.GrandTotal = grandTotal;
            }

            gstInvoiceHeaderFooterTmp.doUpdate();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        contract = gstInvoiceDPBase.parmDataContract() as GSTInvoiceContract_IN;
        customsShippingBillJour = CustomsShippingBillJour_IN::find(contract.parmRecordId());
        this.parmInvoiceJournal(customsShippingBillJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceHeaderFooterTmp()
    {
        TaxDocumentComponentTransaction taxDocumentComponentTransaction;
        TaxDocumentRowTransaction       taxDocumentRowTransaction;
        SalesParmLine                   salesParmLine;
        SalesParmTable                  salesParmTable;

        select firstOnly salesParmLine
            where salesParmLine.ParmId == customsShippingBillJour.ParmId;

        taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(salesParmLine);

        super();

        salesParmTable = salesParmLine.salesParmTable();

        select TaxBaseAmount from taxDocumentComponentTransaction
            exists join taxDocumentRowTransaction
                where taxDocumentRowTransaction.RecId                       == taxDocumentComponentTransaction.TaxDocumentRowTransactionRecId
                    && taxDocumentRowTransaction.TransactionHeaderTableId   == salesParmTable.TableId
                    && taxDocumentRowTransaction.TransactionHeaderRecId     == salesParmTable.RecId;

        gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure = taxDocumentComponentTransaction.TaxBaseAmount;
        gstInvoiceHeaderFooterTmp.TotalInvoiceValueInWords = numeralsToTxt_IN(abs(gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure));

        gstInvoiceHeaderFooterTmp.insert();
        headerRecId = gstInvoiceHeaderFooterTmp.RecId;
        gstInvoiceHeaderFooterTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceTmp(str _className = '')
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        SalesParmLine salesParmLine;
        ITaxDocumentMeasure taxAmountMeasure;

        super(_className);

        if (chargeCode)
        {
            gstInvoiceTmp.Name  = MarkupTable::find(MarkupModuleType::Cust, chargeCode).Txt;
        }
        else
        {
            if (tableNum(CustomsShippingBillTrans_IN) == lineTableId)
            {
                customsShippingBillTrans = CustomsShippingBillTrans_IN::find(lineRecId);
                salesParmLine = SalesParmLine::findInventTransId(customsShippingBillJour.ParmId, customsShippingBillTrans.InventTransId);

                if (salesParmLine && classStr(ITaxDocumentLine) == _className)
                {
                    gstInvoiceTmp.ItemId        = salesParmLine.ItemId;
                    gstInvoiceTmp.Unit          = salesParmLine.salesUnit();
                    gstInvoiceTmp.UnitPrice     = salesParmLine.salesPrice();
                    gstInvoiceTmp.LineAmount    = salesParmLine.salesPrice() * gstInvoiceTmp.Qty;
                }
            }
        }

        gstInvoiceTmp.insert();
        gstInvoiceTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that <c>createdTransactionId</c> of inserted record is different than default transaction.
    /// </remarks>
    public void setTableConnections()
    {
        gstInvoiceHeaderFooterTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
        gstInvoiceTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>