<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAdj_Transact</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventAdj_Transact extends InventAdj implements BatchRetryable
{
    container               transact;
    TransDate               transDate;
    InventAdjustmentSpec    specification;
    NoYes                   updateLedger;
    FreeTxt                 freeTxt;
    LedgerCorrection        ledgerCorrection;

    #EECountryRegionCodes
    #ISOCountryRegionCodes

    DialogField             dialogDate;
    DialogField             dialogSpecification;
    DialogField             dialogLedger;
    DialogField             dialogNotes;
    DialogField             dialogLedgerCorrection;

    #DEFINE.CurrentVersion(12)

    #LOCALMACRO.CurrentList
        Transact,
        TransDate,
        Specification,
        UpdateLedger,
        freeTxt,
        ledgerCorrection
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase dialog = super();

        dialogDate              = dialog.addFieldValue(extendedTypeStr(TransDate), transDate, "@SYS14475", "@SYS8449");
        dialogSpecification     = dialog.addFieldValue(enumStr(InventAdjustmentSpec), specification, "@SYS78941", "@SYS19204");
        dialogLedger            = dialog.addFieldValue(enumStr(NoYes), updateLedger, "@SYS17508", "@SYS28266");
        dialogNotes             = dialog.addFieldValue(extendedTypeStr(FreeTxt), freeTxt, "@SYS13887", "@SYS27801");
        // <GEEU>
        if (LedgerParameters::isStornoEnabledEE())
        {
            dialogLedgerCorrection  = dialog.addFieldValue(extendedTypeStr(LedgerCorrection),
                                                           InventParameters::find().InventAdjustCorrection,
                                                           "@GLS112547",
                                                           "@GLS112548");
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00015, funcName());
        }
        // </GEEU>

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        transDate          = dialogDate.value();
        specification      = dialogSpecification.value();
        updateLedger       = dialogLedger.value();
        freeTxt            = dialogNotes.value();
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            ledgerCorrection   = dialogLedgerCorrection && dialogLedgerCorrection.value();
        }
        // </GEEU>

        if (! updateLedger)
        {
            if (Box::yesNo("@SYS19298"+'\n'+ "@SYS60031"+'\n\n',DialogButton::Yes) != DialogButton::Yes)
            {
                return false;
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found by calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    void initParmDefault()
    {
        specification      = InventAdjustmentSpec::Total;
        updateLedger       = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container  pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreeTxt</Name>
				<Source><![CDATA[
    FreeTxt parmFreeTxt(FreeTxt _freeTxt = freeTxt)
    {
        freeTxt    = _freeTxt;
        return freeTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecification</Name>
				<Source><![CDATA[
    InventAdjustmentSpec parmSpecification(InventAdjustmentSpec _specification = specification)
    {
        specification = _specification;
        return specification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransact</Name>
				<Source><![CDATA[
    container parmTransact(container _transact = transact)
    {
        transact = _transact;
        return transact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        NumberSeq   numberSeq;
        Integer     logPointBegin = infologLine();
        boolean         countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        
        if (countryRegion_RU)
        {
            setPrefix(InventAdj_Transact::description(inventTransCurrency));
        }
        else
        {
            setPrefix(InventAdj_Transact::description());
        }
        
        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            // <GEERU>
            if (countryRegion_RU)
            {
                numberSeq = NumberSeq::newGetNum(InventClosing::numberSequenceReference(InventAdjustmentType::Transaction,inventTransCurrency));
            }
            else
            {
            // </GEERU>
                numberSeq = NumberSeq::newGetNum(InventClosing::numberSequenceReference(InventAdjustmentType::Transaction));
            // <GEERU>
            }

            this.initInventoryClosing(numberSeq.num());
            InventDataAdjTransact data = InventDataAdjTransact::newPacked(transact);

            if (countryRegion_RU)
            {
                this.progressInit(InventAdj_Transact::description(inventTransCurrency),data.lineCount(),#AviUpdate);
            }
            else
            {
                this.progressInit(InventAdj_Transact::description(),data.lineCount(),#AviUpdate);
            }

            this.updateInvent(data);

            if (countryRegion_RU)
            {
                if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
                {
                    this.updateLedger(InventClosing::ledgerTransTxt(InventAdjustmentType::Transaction), NoYes::No, '', false, true, numberSeq.parmNumberSequenceCode());
                }
                else
                {
                    this.updateLedgerSecCur_RU(InventClosing::ledgerTransTxt(InventAdjustmentType::Transaction), NoYes::No, '', false, true, numberSeq.parmNumberSequenceCode());
                }
            }
            else
            {
                this.updateLedger(InventClosing::ledgerTransTxt(InventAdjustmentType::Transaction),ledgerCorrection,'',false,true,numberSeq.parmNumberSequenceCode());
            }

            inventClosing.createTransactionLog();

            inventClosing.End = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());

            inventClosing.insert();

            Integer logPointNow = infologLine();
            if (logPointBegin +1 <= logPointNow)
            {
                inventClosing.writeLog(infolog.copy(logPointBegin+1,logPointNow));
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventoryClosing</Name>
				<Source><![CDATA[
	/// <summary>
    /// Initialize <c>InventClosing</c> buffer.
    /// </summary>
    /// <param name = "_voucher">Voucher for <c>InventClosing</c>.</param>
    protected void initInventoryClosing(Voucher _voucher)
    {
        inventClosing.Executed          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        inventClosing.Start             = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());

        inventClosing.Voucher           = _voucher;

        inventClosing.AdjustmentType    = InventAdjustmentType::Transaction;
        inventClosing.Active            = NoYes::Yes;
        inventClosing.TransDate         = transDate;
        inventClosing.AdjustmentSpec    = specification;
        inventClosing.Ledger            = updateLedger;
        inventClosing.Notes             = freeTxt;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            inventClosing.LedgerCorrection = ledgerCorrection;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            inventClosing.InventTransCurrency_RU = inventTransCurrency;
            inventClosing.StornoAdjustment_RU    = storno_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvent</Name>
				<Source><![CDATA[
    void updateInvent(InventDataAdj _data)
    {
        InventTransAdjust       transAdjust;
        TmpFormLookUp           tmpFormLookUp;

        InventModelTypeCache    inventModelTypeCache    = InventModelTypeCache::construct();
        // <GEERU>
        boolean         countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if (countryRegion_RU)
        {
            transAdjust = InventTransAdjust::construct(inventClosing.TransDate,inventClosing.Voucher,false,inventTransCurrency);
        }
        else
        {
        // </GEERU>
            transAdjust = new InventTransAdjust(inventClosing.TransDate,inventClosing.Voucher);
        // <GEERU>
        }
        // </GEERU>

        tmpFormLookUp.setTmpData(_data.tmpFormLookUp());
        while select tmpFormLookUp
        {
            progress.incCount();

            if (tmpFormLookUp.AdjustNow)
            {
                InventTrans inventTrans = InventTrans::findRecId(tmpFormLookUp.TransRecId,true);

                setPrefix(#PrefixField(InventTrans,ItemId));
                setPrefix(#PrefixField(InventTrans,inventDimId));
                setPrefix(#PrefixField(InventTrans,DateFinancial));

                if (inventTrans.RecId        != tmpFormLookUp.TransRecId    ||
                    inventTrans.Qty          != tmpFormLookUp.Qty)
                {
                    throw error("@SYS5149");
                }

                InventModelGroup inventModelGroup = InventTable::modelGroupByItemId(inventTrans.ItemId);
                // <GEERU>
                if ((countryRegion_RU && !inventModelTypeCache.inventModelType(inventModelGroup.ModelGroupId, inventTransCurrency).allowTransactionAdjustment())
                     || (!countryRegion_RU && (!inventModelTypeCache.inventModelType(inventModelGroup.ModelGroupId).allowTransactionAdjustment())))
                // </GEERU>
                {
                    throw error(strFmt("@SYS104804",inventModelGroup.InventModel));
                }
                // <GEERU>
                if ((countryRegion_RU && !inventModelTypeCache.inventModelType(inventModelGroup.ModelGroupId, inventTransCurrency).allowTransactionAdjustment(inventTrans))
                     || (!countryRegion_RU && (!inventModelTypeCache.inventModelType(inventModelGroup.ModelGroupId).allowTransactionAdjustment(inventTrans))))
                // </GEERU>
                {
                    throw error(strFmt("@SYS51070",inventTrans.inventTransOrigin().ReferenceCategory));
                }
                progress.setText("@SYS8516"+'/'+inventTrans.ItemId);

                LedgerPostingType postingBalanceSheet = inventTrans.postingBalanceSheet();
                LedgerDimensionAccount accountBalanceSheet = inventTrans.accountBalanceSheetLedgerDimension();

                if (!accountBalanceSheet || !postingBalanceSheet)
                {
                    postingBalanceSheet    = InventAdj::errorPostingBalanceSheet(inventTrans.Qty);
                    // <GCN>
                    if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                    {
                        accountBalanceSheet = InventAdj::errorAccountBalanceSheet_CN(
                                    inventTrans.ItemId,
                                    inventTrans.inventTable().itemGroupId(),
                                    inventTrans.Qty,
                                    InventPostingExtendParm_CN::constructInventDim(inventTrans.inventDim()));
                    }
                    else
                    {
                    // </GCN>
                        // <GEERU>
                        if (countryRegion_RU)
                        {
                            accountBalanceSheet    = InventAdj::errorAccountBalanceSheet(inventTrans.ItemId,
                                                                                InventTable::itemGroupIdByItemId(inventTrans.ItemId),
                                                                                inventTrans.Qty,
                                                                                inventTrans.inventDim());
                        }
                        else
                        {
                        // </GEERU>
                            accountBalanceSheet    = InventAdj::errorAccountBalanceSheet(inventTrans.ItemId,
                                                                                InventTable::itemGroupIdByItemId(inventTrans.ItemId),
                                                                                inventTrans.Qty);
                        // <GEERU>
                        }
                        // </GEERU>
                    // <GCN>
                    }
                    // </GCN>
                }

                // <GEERU>
                if (countryRegion_RU)
                {
                    LedgerDimensionAccount corrLedgerAccountLoc = corrLedgerAccount_RU;
                    LedgerPostingType corrLedgerPostingLoc = corrLedgerPosting_RU;

                    transAdjust.parmMarkupCode_RU(tmpFormLookUp.MarkupCode_RU);
                    if (tmpFormLookUp.MarkupCode_RU)
                    {
                        corrLedgerAccountLoc = LedgerDimensionFacade::serviceCreateLedgerDimension(MarkupTable::find(MarkupModuleType::Invent, tmpFormLookUp.MarkupCode_RU).parmVendorLedgerDimension(), corrDimension_RU);

                        corrLedgerPostingLoc = MarkupTable::find(
                                        MarkupModuleType::Invent
                                        , tmpFormLookUp.MarkupCode_RU).VendPosting;
                    }

                    transAdjust.updateNow(inventTrans,
                                            NoYes::No,
                                            NoYes::Yes,
                                            tmpFormLookUp.AdjustNow,
                                            !inventTrans.ProjId,
                                            corrLedgerPostingLoc ? corrLedgerPostingLoc : inventTrans.postingLossProfit(tmpFormLookUp.adjustNow),
                                            corrLedgerAccountLoc ? corrLedgerAccountLoc : inventTrans.accountLossProfitLedgerDimension(tmpFormLookUp.AdjustNow),
                                            true,
                                            postingBalanceSheet,
                                            accountBalanceSheet,
                                            true,
                                            null,
                                            InventAdjustmentSpec::Total);
                }
                else
                {
                // </GEERU>
                    transAdjust.updateNow(inventTrans,
                                        NoYes::No,
                                        NoYes::Yes,
                                        tmpFormLookUp.AdjustNow,
                                        !inventTrans.ProjId,
                                        inventTrans.postingLossProfit(tmpFormLookUp.AdjustNow),
                                        inventTrans.accountLossProfitLedgerDimension(tmpFormLookUp.AdjustNow),
                                        true,
                                        postingBalanceSheet,
                                        accountBalanceSheet);
                // <GEERU>
                }
                // </GEERU>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean  validate(Object calledFrom = null)
    {
        if (! transDate)
            return checkFailed("@SYS16668");

        if (transact== conNull())
            return checkFailed("@SYS18753");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventAdj_Transact construct()
    {
        return new InventAdj_Transact();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description(InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        // <GEERU>
        boolean         countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        // <GEERU>
        if (countryRegion_RU)
        {
            return _inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? "@SYS18752" : "@GLS102380";
        }
        else
        {
        // </GEERU>
            return "@SYS18752";
        // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransact</Name>
				<Source><![CDATA[
    static InventAdj_Transact newTransact(container              transact,
                                                 InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        // <GEERU>
        boolean         countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        InventAdj_Transact inventAdj_Transact = InventAdj_Transact::construct();

        inventAdj_Transact.getLast();
        inventAdj_Transact.parmTransact(transact);
        inventAdj_Transact.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        inventAdj_Transact.parmFreeTxt("");
        // <GEERU>
        if (countryRegion_RU)
        {
            inventAdj_Transact.parmInventTransCurrency_RU(_inventTransCurrency);
        }
        // </GEERU>

        return inventAdj_Transact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>