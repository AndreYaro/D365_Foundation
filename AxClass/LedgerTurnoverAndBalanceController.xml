<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTurnoverAndBalanceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendTurnoverAndBalanceController</c> class is the controller class for the <c>CustVendTurnoverAndBalance</c> report.
/// </summary>
public class LedgerTurnoverAndBalanceController extends SrsReportRunController implements BatchRetryable
{
    #define.Comma(', ')
    #define.Equals(' = ')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00026, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        LedgerTurnoverAndBalanceContract dataContract;

        dataContract = this.parmReportContract().parmRdpContract();
        dataContract.parmSysVersion(SysReportRun::sysVersion());
        dataContract.parmUserName(SysReportRun::userName());

        if (!dataContract.parmFromDate())
        {
            // Provide a default date because the last value is empty
            dataContract.parmFromDate(FiscalCalendars::findFirstDayofYear(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        if (!dataContract.parmToDate())
        {
            // Provide a default date because the last value is empty
            dataContract.parmToDate(FiscalCalendars::findLastDayofYear(Ledger::fiscalCalendar(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        LedgerTurnoverAndBalanceContract    contract;
        FreeText                            dimensionRange;
        DimensionAttribute                  dimensionAttribute;
        MapEnumerator                       controlMapEnum;
        Map                                 dimRangeMap;
        RecId                               dimAttrRecId;
        DimensionValue                      dimensionCriteria;

        super();

        contract = this.parmReportContract().parmRdpContract() as LedgerTurnoverAndBalanceContract;

        dimRangeMap = contract.parmDimensionRangeMap();
        controlMapEnum = dimRangeMap.getEnumerator();

        while (controlMapEnum.moveNext())
        {
            dimAttrRecId = controlMapEnum.currentKey();
            dimensionCriteria = controlMapEnum.currentValue();

            if (dimensionCriteria != '')
            {
                dimensionAttribute = dimensionAttribute::find(dimAttrRecId);
                if (dimensionRange)
                {
                    dimensionRange += #Comma;
                }
                dimensionRange += dimensionAttribute.Name + #Equals;
                dimensionRange += dimensionCriteria;
            }
        }

        if (!dimensionRange)
        {
            dimensionRange += "@SYS35266";
        }

        contract.parmDimensionRange(dimensionRange);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerTurnoverAndBalanceController controller = new LedgerTurnoverAndBalanceController();
        controller.parmReportName(ssrsReportStr(LedgerTurnoverAndBalance, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>