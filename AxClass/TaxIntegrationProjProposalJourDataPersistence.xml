<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationProjProposalJourDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationProjProposalJourDataPersistence</c> class persists data to <c>ProjProposalJour</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(ProjProposalJour))]
public class TaxIntegrationProjProposalJourDataPersistence
    extends TaxIntegrationSalesTableDataPersistence
{
    protected ProjProposalJour projProposalJour;
    protected ProjProposalItem projProposalItem;
    protected TaxIntegrationProjProposalLinesUnionView taxIntegrationProjProposalLinesUnionView;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (this.document.getLocalRecord())
        {
            this.projProposalJour = this.document.getLocalRecord();
            projProposalJour.selectForUpdate(true);
            return null;
        }
        else
        {
            throw error(strFmt("@TaxIntegrationException:RecordNotFound",
                fieldStr(ProjProposalJour, RecId),
                this.document.getLocalRecId(),
                tableStr(ProjProposalJour)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.taxIntegrationProjProposalLinesUnionView)
            .forUpdate()
            .where(this.taxIntegrationProjProposalLinesUnionView, fieldStr(taxIntegrationProjProposalLinesUnionView, ProposalId))
                .isEqualToLiteral(this.projProposalJour.ProposalId)
            .outerJoin(this.projProposalItem)
                .where(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineTableName))
                    .isEqualToLiteral(tableStr(ProjProposalItem))
                .where(this.projProposalItem, fieldStr(ProjProposalItem, RecId))
                    .isEqualTo(this.taxIntegrationProjProposalLinesUnionView, fieldStr(TaxIntegrationProjProposalLinesUnionView, LineRecId))
            .outerJoin(this.salesLine)
                .where(this.projProposalItem, fieldStr(ProjProposalItem, ItemType))
                    .isEqualToLiteral(enum2int(ProjItemType::SalesOrder))
                .where(this.salesLine, fieldStr(SalesLine, InventTransId))
                    .isEqualTo(this.projProposalItem, fieldStr(ProjProposalItem, InventTransId))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .forUpdate()
            .innerJoin(this.salesTable)
                .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                    .isEqualTo(this.salesTable, fieldStr(SalesTable, TableId))
                .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                    .isEqualTo(this.salesTable, fieldStr(SalesTable, RecId))
                .existsJoin(this.projProposalItem)
                    .where(this.projProposalItem, fieldStr(ProjProposalItem, SalesId))
                        .isEqualTo(this.salesTable, fieldStr(SalesTable, SalesId))
                    .where(this.projProposalItem, fieldStr(ProjProposalItem, ProposalId))
                        .isEqualToLiteral(this.projProposalJour.ProposalId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected TaxIntegrationLineObject getLine()
    {
        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(
            tableName2Id(this.taxIntegrationProjProposalLinesUnionView.LineTableName),
            this.taxIntegrationProjProposalLinesUnionView.LineRecId);

        if (!document.checkLine(localId))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:LineOnDocumentNotFound", localId, document.getLocalId())));
            return null;
        }

        return document.getLine(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document.
    /// </summary>
    /// <returns>Always true.</returns>
    protected boolean saveDocument()
    {
        TaxIntegrationTaxIdUtility::saveTaxIDFromDocumentToTable(document, projProposalJour);
        TaxIntegrationListCodeUtility::saveListCodeFromDocumentToTable(document, projProposalJour);

        if (TaxIntegrationUtils::isMultipleTaxIdEnabled())
        {
            this.saveProjProposalNumberSequenceGroupToTable();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveLine(TaxIntegrationLineObject _line)
    {
        TaxGroup taxGroup = _line.getTaxGroup();
        TaxItemGroup taxItemGroup = _line.getTaxItemGroup();
        if (taxGroup != taxIntegrationProjProposalLinesUnionView.TaxGroupId
            || taxItemGroup != taxIntegrationProjProposalLinesUnionView.TaxItemGroupId)
        {
            taxIntegrationProjProposalLinesUnionView.UpdateTaxGroupAndTaxItemGroup(taxGroup, taxItemGroup);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveProjProposalNumberSequenceGroupToTable</Name>
				<Source><![CDATA[
    private void saveProjProposalNumberSequenceGroupToTable()
    {
        NumberSequenceGroupId numberSequenceGroupId = document.getNumberSequenceGroupId();

        if (numberSequenceGroupId && projProposalJour.numberSequenceGroupId != numberSequenceGroupId)
        {
            projProposalJour.numberSequenceGroupId = numberSequenceGroupId;
            projProposalJour.doUpdate();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>