<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchJournalSelect</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class SalesPurchJournalSelect
{
    DocumentStatus          basedOnDocument;
    TmpFrmVirtual           tmpFrmVirtual;
    FormDataSource          journalHeader_ds;
    FormDataSource          journalLines_ds;
    FormRun                 formRun;
    FormLetterServiceController formLetter;
    ParmId                  parmId;
    Set                     orderSet;

    //<GEERU>
    TradeLineRefId          tradeLineRefId;
    PostingProfile          postingProfile;
    container               vendPSTransExcludeRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    abstract protected void buildQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOK</Name>
				<Source><![CDATA[
    public void closeOK()
    {
        List    selectedList = new List(Types::Record);

        while select tmpFrmVirtual
        {
            selectedList.addEnd(tmpFrmVirtual);
        }

        this.formLetter_SelectFromJournal(selectedList.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceNameAll</Name>
				<Source><![CDATA[
    protected abstract str dataSourceNameAll()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSourceAll</Name>
				<Source><![CDATA[
    protected FormDataSource formDataSourceAll()
    {
        FormDataSource formDataSource = formRun.dataSource(this.dataSourceNameAll());
        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSourceQueryAll</Name>
				<Source><![CDATA[
    protected Query formDataSourceQueryAll()
    {
        Query                   q;

        FormDataSource fds = this.formDataSourceAll();
        if (fds)
        {
            q    = fds.query();
        }
        if (q)
            return q;
        return new Query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetter_SelectFromJournal</Name>
				<Source><![CDATA[
    protected void formLetter_SelectFromJournal(container   _packedTmpFrmVirtualList)
    {
        //<GEERU>
        formLetter.parmTradeLineRefId_RU(tradeLineRefId);
        //</GEERU>
        formLetter.selectFromJournal(_packedTmpFrmVirtualList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeAll</Name>
				<Source><![CDATA[
    public void includeAll(boolean _markAll = false)
    {
        QueryRun qr = new QueryRun(this.formDataSourceQueryAll());

        while (qr.next())
        {
            this.included(true, qr.get(this.journalHeader_ds().table()), _markAll);
        }

        formRun.arrange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>included</Name>
				<Source><![CDATA[
    public NoYes included(
        boolean    _set,
        Common     _buffer,
        NoYes      _included)
    {
        NoYes           included;

        select tmpFrmVirtual
            where tmpFrmVirtual.TableNum    == _buffer.TableId &&
                  tmpFrmVirtual.RecordNo    == _buffer.RecId;

        if (tmpFrmVirtual.NoYes)
        {
            included = NoYes::Yes;
        }

        if (_set)
        {
            if (_included)
            {
                tmpFrmVirtual.TableNum      = _buffer.TableId;
                tmpFrmVirtual.RecordNo      = _buffer.RecId;
                tmpFrmVirtual.NoYes         = NoYes::Yes;
                tmpFrmVirtual.Id            = this.orderId(_buffer);
                tmpFrmVirtual.write();
                included = NoYes::Yes;
            }
            else
            {
                tmpFrmVirtual.delete();
                included = NoYes::No;
            }
        }

        return included;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesPurchJournalSelect</c> class.
    /// </summary>
    public void init()
    {
        this.initIncluded(); //must be called before buildQuery.
        this.buildQuery();
        this.setJournalHeader_allowEdit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIncluded</Name>
				<Source><![CDATA[
    protected void initIncluded()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalHeader_ds</Name>
				<Source><![CDATA[
    protected FormDataSource journalHeader_ds()
    {
        FormDataSource ds = formRun.dataSource();
        return ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalHeader_ds_Active</Name>
				<Source><![CDATA[
    public void journalHeader_ds_Active(Common _header)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLines_ds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the data source used by the bottom grid on the corresponding form.
    /// </summary>
    /// <returns>
    ///    The data source that corresponds to the matching packing slips grid.
    /// </returns>
    protected FormDataSource journalLines_ds()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderId</Name>
				<Source><![CDATA[
    protected Num orderId(Common _buffer)
    {
        Num                 orderId;

        switch (_buffer.TableId)
        {
            case tableNum(VendPackingSlipJour) :
                VendPackingSlipJour vendPackingSlipJour = _buffer;
                orderId = vendPackingSlipJour.PurchId;
                break;

            case tableNum(CustPackingSlipJour) :
                CustPackingSlipJour custPackingSlipJour = _buffer;
                orderId = custPackingSlipJour.SalesId;
                break;
        }

        return orderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBasedOnDocument</Name>
				<Source><![CDATA[
    public DocumentStatus parmBasedOnDocument(DocumentStatus _basedOnDocument = basedOnDocument)
    {
        basedOnDocument = _basedOnDocument;
        return basedOnDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormLetter</Name>
				<Source><![CDATA[
    public FormLetterServiceController parmFormLetter(FormLetterServiceController _formLetter = formLetter)
    {
        formLetter = _formLetter;
        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmId</Name>
				<Source><![CDATA[
    public ParmId parmParmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile_RU</Name>
				<Source><![CDATA[
    public PostingProfile parmPostingProfile_RU(PostingProfile _postingProfile = postingProfile)
    {
        postingProfile = _postingProfile;
        return postingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeLineRefId_RU</Name>
				<Source><![CDATA[
    public TradeLineRefId parmTradeLineRefId_RU(TradeLineRefId _tradeLineRefId = tradeLineRefId)
    {
        tradeLineRefId = _tradeLineRefId;
        return tradeLineRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qbdsAll</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource qbdsAll()
    {
        Query q = this.formDataSourceQueryAll();

        QueryBuildDataSource qbds = q.dataSourceName(this.dataSourceNameAll());
        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalHeader_allowEdit</Name>
				<Source><![CDATA[
    protected void setJournalHeader_allowEdit()
    {
        SysDictTable    dictTable = new SysDictTable(this.journalHeader_ds().table());
        Counter         i;
        FormDataSource  fds = this.formDataSourceAll();

        Counter fieldCount = dictTable.fieldCntWithoutSys();

        // Set the allowEdit property on all fields to false for both the journal header and the "all" data source
        for (i = 1; i <= fieldCount; i++)
        {
            fieldId fieldId = dictTable.fieldCnt2Id(i);

            if (fieldId)
            {
                FormDataObject field = this.journalHeader_ds().object(fieldId);

                if (field)
                {
                    field.allowEdit(false);
                }

                field = fds.object(fieldId);

                if (field)
                {
                    field.allowEdit(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCaller</Name>
				<Source><![CDATA[
    static boolean checkCaller(FormRun  _formRun,
                               str      _formName)
    {
        boolean ret;

        if (_formRun.args().caller() &&
            _formRun.args().caller() is FormRun)
        {
            FormRun fr = _formRun.args().caller();
            if (fr.name() == _formName)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchJournalSelect</Name>
				<Source><![CDATA[
    static SalesPurchJournalSelect newPurchJournalSelect(DocumentStatus         _basedOnDocumentStatus,
                                                         FormRun                _formRun,
                                                         ParmId                 _parmId
                                                         , TradeLineRefId         _tradeLineRefId = ""
                                                         , PostingProfile         _postingProfile = ""
                                                         )
    {
        DocumentStatus          documentStatus;
        PurchFormLetter         purchFormLetter;
        SalesPurchJournalSelect journalSelect;

        if (SalesPurchJournalSelect::checkCaller(_formRun, formStr(VendEditInvoice)))
        {
            purchFormLetter = _formRun.args().caller().purchFormLetter();
            documentStatus  = purchFormLetter.documentStatus();
        }

        switch (documentStatus)
        {
            case DocumentStatus::Invoice        :
            case DocumentStatus::ApproveJournal :
            // <GEERU>
            case DocumentStatus::Facture_RU     :
            // </GEERU>
            // <GEEPL>
            case DocumentStatus::PlSAD          :
            // </GEEPL>
            journalSelect = PurchJournalSelect_Invoice::construct();
                break;
            default :
                throw error(strFmt("@SYS19306",funcName()));
        }

        // <GEERU>
        journalSelect.parmTradeLineRefId_RU(_tradeLineRefId);
        journalSelect.parmPostingProfile_RU(_postingProfile);
        // </GEERU>
        journalSelect.parmBasedOnDocument(_basedOnDocumentStatus);
        journalSelect.parmFormRun(_formRun);
        journalSelect.parmFormLetter(purchFormLetter);
        journalSelect.parmParmId(_parmId);
        journalSelect.init();

        return journalSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchPackingSlipJournalSelect</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the appropriate <c>SalesPurchJournalSelect</c> class derivative based on the
    ///    caller.
    /// </summary>
    /// <param name="_basedOnDocumentStatus">
    ///    The DocumentStatus to set on the <c>SalesPurchJournalSelect</c> class instance.
    /// </param>
    /// <param name="_formRun">
    ///    A value that represents the caller.
    /// </param>
    /// <returns>
    ///    An instance of appropriate <c>SalesPurchJournalSelect</c> class derivative.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    Thrown when unexpected document status is set on the caller.
    /// </exception>
    public static SalesPurchJournalSelect newPurchPackingSlipJournalSelect(
        DocumentStatus _basedOnDocumentStatus,
        FormRun        _formRun)
    {
        DocumentStatus          documentStatus;
        PurchFormLetter         purchFormLetter;
        SalesPurchJournalSelect journalSelect;

        if ((SalesPurchJournalSelect::checkCaller(_formRun, formStr(PurchEditLines))) ||
            (SalesPurchJournalSelect::checkCaller(_formRun, formStr(VendEditInvoice))) ||
            (SalesPurchJournalSelect::checkCaller(_formRun, formStr(VendInvoiceMatchingDetails))))
        {
            purchFormLetter = _formRun.args().caller().purchFormLetter();
            documentStatus  = purchFormLetter.documentStatus();
        }

        switch (documentStatus)
        {
            // <GEERU>
            case DocumentStatus::Facture_RU :
            // </GEERU>
            // <GEEPL>
            case DocumentStatus::PlSAD      :
            // </GEEPL>
            case DocumentStatus::Invoice    :
                journalSelect = PurchJournalMatch_Invoice::construct();
                break;
            case DocumentStatus::ApproveJournal :
                journalSelect = PurchJournalMatch_Invoice::construct();
                break;
            default :
                throw error(strFmt("@SYS19306", funcName()));
        }

        journalSelect.parmBasedOnDocument(_basedOnDocumentStatus);
        journalSelect.parmFormRun(_formRun);
        journalSelect.parmFormLetter(purchFormLetter);
        journalSelect.init();

        return journalSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesJournalSelect</Name>
				<Source><![CDATA[
    static SalesPurchJournalSelect newSalesJournalSelect(DocumentStatus         _basedOnDocumentStatus,
                                                         FormRun                _formRun,
                                                         ParmId                 _parmId)
    {
        DocumentStatus          documentStatus;
        SalesFormLetter         salesFormLetter;
        SalesPurchJournalSelect journalSelect;

        if (SalesPurchJournalSelect::checkCaller(_formRun, formStr(SalesEditLines)))
        {
            salesFormLetter = _formRun.args().caller().runBase();
            documentStatus  = salesFormLetter.documentStatus();
        }

        switch (documentStatus)
        {
            case DocumentStatus::Invoice :
            // <GEERU>
            case DocumentStatus::Facture_RU :
            // </GEERU>
            journalSelect = SalesJournalSelect_Invoice::construct();
                break;
            default :
                throw error(strFmt("@SYS19306",funcName()));
        }

        journalSelect.parmBasedOnDocument(_basedOnDocumentStatus);
        journalSelect.parmFormRun(_formRun);
        journalSelect.parmFormLetter(salesFormLetter);
        journalSelect.parmParmId(_parmId);
        journalSelect.init();

        return journalSelect;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
