<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalLineTaxWithholdDocument_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjAdvancedJournalLineTaxWithholdDocument_IN</c> is Indian withholding tax document for project advanced journal lines
/// </summary>
internal class ProjAdvancedJournalLineTaxWithholdDocument_IN extends ProjAdvancedJournalLineTaxDocument
{
    private TaxWithhold_IN taxWithhold;
    private TaxWithholdCalculation_IN taxWithholdCalculation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>ProjAdvancedJournalLineTaxWithholdDocument_IN</c>.
    /// </summary>
    /// <param name="_projAdvancedJournalLine">
    /// The project advanced journal line buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjAdvancedJournalLineTaxWithholdDocument_IN</c>.
    /// </returns>
    public static ProjAdvancedJournalLineTaxWithholdDocument_IN construct(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        ProjAdvancedJournalLineTaxWithholdDocument_IN projAdvancedJournalLineTaxWithholdDocument = new ProjAdvancedJournalLineTaxWithholdDocument_IN();
        projAdvancedJournalLineTaxWithholdDocument.parmProjAdvancedJournalLine(_projAdvancedJournalLine);
        projAdvancedJournalLineTaxWithholdDocument.parmProjAdvancedJournal(_projAdvancedJournalLine.getProjAdvancedJournal());

        return projAdvancedJournalLineTaxWithholdDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax amounts.
    /// </summary>
    /// <param name="_forceRecreate">
    /// If true, tax will be recalculated even if there is an existing TaxUncommitted record.
    /// If false, tax will only be recalculated if there is not an existing TaxUncommitted record.
    /// </param>
    /// <returns>
    /// Calculated tax amount.
    /// </returns>
    public TaxAmountCur calcTax(boolean _forceRecreate = false)
    {
        TaxAmountCur taxAmount = super(_forceRecreate);
        boolean shouldProcessTaxes = ProjAdvancedJournalPost::shouldProcessTaxes(projAdvancedJournalLine);

        if (shouldProcessTaxes)
        {
            if (FeatureStateProvider::isFeatureEnabled(TaxProjOpsIntegrationJournal_INFeature::instance()))
            {
                this.calcWithholdTax();
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceHeader</Name>
				<Source><![CDATA[
    public Common getSourceHeader()
    {
        return projAdvancedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalizedDocument</Name>
				<Source><![CDATA[
    public Common getJournalizedDocument()
    {
        return projAdvancedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithhold</Name>
				<Source><![CDATA[
    /// <summary>
    /// The tax withhold information.
    /// </summary>
    /// <param name="_taxWithhold">
    /// The tax withhold information.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxWithhold_IN</c> class.
    /// </returns>
    public TaxWithhold_IN taxWithhold(TaxWithhold_IN  _taxWithhold = taxWithhold)
    {
        taxWithhold = _taxWithhold;

        return taxWithhold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// The tax withhold calculation information.
    /// </summary>
    /// <param name = "_taxWithholdCalculation">
    /// The tax withhold calculation information.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxWithholdCalculation_IN</c> class.
    /// </returns>
    public TaxWithholdCalculation_IN taxWithholdCalculation(TaxWithholdCalculation_IN _taxWithholdCalculation = taxWithholdCalculation)
    {
        taxWithholdCalculation = _taxWithholdCalculation;
        return taxWithholdCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withholding tax.
    /// </summary>
    /// <returns>
    /// The calculated withholding tax amount.
    /// </returns>
    public AmountCur calcWithholdTax()
    {
        AmountCur taxWithholdAmountCur;

        if (projAdvancedJournalLine.checkTaxWithholdExpense_IN())
        {
            boolean loadTaxWHTUncommitted = TaxWithholdUncommitted_IN::existBySourceId(projAdvancedJournalLine.TableId, projAdvancedJournalLine.RecId);
            boolean loadTaxWithholdTrans = TaxWithholdTrans_IN::existBySourceId(projAdvancedJournalLine.TableId, projAdvancedJournalLine.RecId);

            if (loadTaxWHTUncommitted
                && !TaxWithholdParameters_IN::find().DisableThresholdCumulativeTracking)
            {
                loadTaxWHTUncommitted = !TaxWHTThresholdCumulativeChangeTracking_IN::determineCumulativeChanged(
                    projAdvancedJournal.TableId,
                    projAdvancedJournal.RecId,
                    projAdvancedJournalLine.Voucher);
            }

            TaxWithholdCalculation_IN taxWithholdCalcProjAdvancedJournal = TaxWithholdCalculation_IN::newForSourceTypeWithTaxUncommitted(
                TaxSourceType::ProjAdvancedJournal,
                this,
                loadTaxWHTUncommitted,
                false,
                false);

            if (!loadTaxWHTUncommitted && !loadTaxWithholdTrans)
            {
                taxWithholdAmountCur = taxWithholdCalcProjAdvancedJournal.calculateTax();
            }
            else
            {
                taxWithholdAmountCur = taxWithholdCalcProjAdvancedJournal.totalTaxWithholdAmount();
            }

            taxWithhold = new TaxWithhold_IN();

            taxWithhold.tmpTaxWithholdWorkTrans(taxWithholdCalcProjAdvancedJournal.tmpTaxWithholdWorkTrans());
            taxWithhold.loadTaxWithholdRegulation(taxWithhold.tmpTaxWithholdWorkTrans());

            this.taxWithholdCalculation(taxWithholdCalcProjAdvancedJournal);
        }
        return taxWithholdAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and posts the withholding tax.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller.
    /// </param>
    /// <param name="_isPost">
    /// Whether to post. Optional.
    /// </param>
    public void post(LedgerPostingController _ledgerPostingController, boolean _isPost = true)
    {
        super(_ledgerPostingController, _isPost);

        TaxWithholdPost_IN taxWithholdPost = TaxWithholdPost_IN::newForSourceType(TaxSourceType::ProjAdvancedJournal, this, _isPost);
        taxWithholdPost.updateAndPost(_ledgerPostingController);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>