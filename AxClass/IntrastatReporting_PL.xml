<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatReporting_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes
/// <summary>
/// The <c>IntrastatReporting_PL</c> class is responsible for generating file and report for Intrastat Poland.
/// </summary>
[IntrastatCountryRegionAttribute(#isoPL)]
class IntrastatReporting_PL extends IntrastatReporting
{
    IntrastatDirection          direction;
    IntrastatReportSeqNum       sequenceNum;

    DialogField     dialogDirection;
    DialogField     dialogXmlNum;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        direction
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        // Disable ToDate as it will be automatically set
        dialogToDate.enabled(false);

        dialogDirection      = dialog.addFieldValue(enumStr(IntrastatDirection), direction);
        if (IntrastatReportingByTaxIdToggle::isPLCountryRegionORMultipleTaxIdIntrastatEnabled())
        {
            dialogXmlNum     = dialog.addFieldValue(extendedTypeStr(PlIntrastatXMLFileNum), this.getDefaultFileNumber());
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate_Modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs neccesary processing when the From date field is modified in the dialog.
    /// </summary>
    /// <param name="_formControl">
    /// The control triggering the modified event.
    /// </param>
    /// <returns>
    /// true, if the modified event was processed correctly; otherwise, false.
    /// </returns>
    public boolean fromDate_Modified(FormDateControl _formControl)
    {
        boolean             ret = _formControl.modified();
        FromDate            fromDateTemp = dialogFromDate.value();

        if (dayOfMth(fromDateTemp) != 1)
        {
            ret = checkFailed("@SYS312862");
        }

        if (ret)
        {
            dialogToDate.value(endmth(fromDateTemp));
        }
        else //reset fromDate value
        {
            dialogFromDate.value(fromDateTemp);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        super();

        direction          = dialogDirection.value();
        if (dialogXmlNum)
        {
            xmlNum         = dialogXmlNum.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    public void registerEventHandlers()
    {
        super();
        dialogFromDate.control().registerOverrideMethod(
            methodStr(FormDateControl, modified),
            methodStr(IntrastatReporting_PL, fromDate_Modified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    return super(packedSuper);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultFileNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the next sequence number from the Polish XML file number number sequence, and returns a valid
    /// formatted file number using the next sequence number and the current year.
    /// </summary>
    /// <returns>
    /// A valid file number.
    /// </returns>
    /// <remarks>
    /// File number is used in the header of the exported file. File number is used as part of the actual file name.
    /// </remarks>
    protected PLIntrastatXMLFileNum getDefaultFileNumber()
    {
        const str intrastatAbbrevation = "IST";
        NumberSequenceReference ref = IntrastatParameters::numRefXmlFileNum_PL();
        if (!ref)
        {
            throw error(strfmt("@IntrastatByTaxId:NumberSeqForReferenceInForeignTradeParamNotSetup", extendedTypeId2pname(extendedTypeNum(PlIntrastatXMLFileNum))));
        }
        NumberSeq ns = NumberSeq::newGetNum(ref);
        return strFmt('%1%2%3', substr(int2str(year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))), 3, 2), intrastatAbbrevation, ns.num());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource prepareQuery()
    {
        QueryBuildDataSource dataSource;
        dataSource = super();

        return this.updateRange(dataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRun</Name>
				<Source><![CDATA[
    protected void preRun()
    {
        super();
        reportDirection = IntrastatReporting::direction2ReportDirection(direction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRange</Name>
				<Source><![CDATA[
    private QueryBuildDataSource updateRange(QueryBuildDataSource _dataSource)
    {
        if (_dataSource)
        {
            _dataSource.addRange(fieldNum(Intrastat, Direction)).value(queryValue(direction));
        }

        return _dataSource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>