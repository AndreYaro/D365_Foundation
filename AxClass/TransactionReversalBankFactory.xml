<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversalBankFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TransactionReversalBankFactory</c> class constructs the appropriate implementation for the <c>TransactionReversal_Bank</c> class.
/// </summary>
internal final class TransactionReversalBankFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromBankTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the class.
    /// </summary>
    /// <param name = "_bankAccountTrans">The bank account trans</param>
    /// <param name = "_cancelDate">The cancel date.</param>
    /// <param name = "_reasonCode">The reason code.</param>
    /// <param name = "_reasonComment">The reason comment.</param>
    /// <returns>The new instance of the <c>TransactionReversal_Bank</c> class.</returns>
    internal static TransactionReversal_Bank newFromBankTrans(
        BankAccountTrans _bankAccountTrans,
        TransDate _cancelDate,
        ReasonCode _reasonCode,
        ReasonComment _reasonComment)
    {
        TransactionReversal_Bank transactionReversal_Bank;

        if (_bankAccountTrans.Manual == NoYes::Yes || BankTransCorrectionVoucherHistory::exist(_bankAccountTrans.RecId))
        {
            transactionReversal_Bank = TransactionReversal_BankSeparateVoucher::construct();
        }
        else
        {
            transactionReversal_Bank = TransactionReversal_BankCombinedVoucher::construct();
        }
        
        transactionReversal_Bank.initializeTransactionReversal_Bank(_cancelDate, _reasonCode, _reasonComment);
        return transactionReversal_Bank;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>