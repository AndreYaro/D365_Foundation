<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentHeaderProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SourceDocumentHeaderProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAccountingDateChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether changing the accounting date on a source document is allowed.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// The source document header.
    /// </param>
    /// <returns>
    /// true if changing the accounting date on the source document is allowed; otherwise, false.
    /// </returns>
    public static boolean allowAccountingDateChange(SourceDocumentHeaderRecId _sourceDocumentHeader)
    {
        SourceDocumentLine      sourceDocumentLine;
        AccountingDistribution  accountingDistribution;

        select firstonly RecId
            from sourceDocumentLine
                where sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeader
                    && (sourceDocumentLine.AccountingStatus     == SourceDocumentLineAccountingStatus::FullyDistributed ||
                        sourceDocumentLine.AccountingStatus     == SourceDocumentLineAccountingStatus::PartlyDistributed)
            exists join accountingDistribution
                where accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId
                    && accountingDistribution.ReferenceRole      == AccountingDistributionReferenceRole::Reversing;

        return (sourceDocumentLine.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBudgetReservations</Name>
				<Source><![CDATA[
/// <summary>
    /// Determines whether a source document has reservations in budget.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// The source document header.
    /// </param>
    /// <returns>
    /// true if the source document has reservations in budget; otherwise, false.
    /// </returns>
    public static boolean hasBudgetReservations(SourceDocumentHeaderRecId _sourceDocumentHeader)
    {
        SourceDocumentLine      sourceDocumentLine;
        BudgetSource            budgetSource;
        BudgetSourceTracking    budgetSourceTracking;

        select firstonly RecId
        from sourceDocumentLine
        where sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeader
        exists join budgetSource
        where budgetSource.BudgetSourceType     == BudgetSourceType::SourceDocumentLine
           && budgetSource.SourceDocumentLine   == sourceDocumentLine.RecId
        exists join budgetSourceTracking
            where  budgetSourceTracking.BudgetSource == budgetSource.RecId
                && budgetSourceTracking.Status == BudgetSourceTrackingStatus::Confirmed;

        return (sourceDocumentLine.RecId != 0);
    }
]]></Source>
			</Method>
			<Method>
				<Name>isJournalized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a source document is journalized.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// The source document header.
    /// </param>
    /// <returns>
    /// true if the source document is journalized; otherwise, false.
    /// </returns>
    public static boolean isJournalized(SourceDocumentHeaderRecId _sourceDocumentHeader)
    {
        AccountingEvent                             accountingEvent;
        SubledgerJournalEntry                       subledgerJournalEntry;

        // check for an AccountingEvent that has been journalized
        select firstonly recId
            from accountingEvent
                where accountingEvent.SourceDocumentHeader == _sourceDocumentHeader
                    && accountingEvent.State != AccountingEventState::Started
            exists join subledgerJournalEntry
                where subledgerJournalEntry.AccountingEvent == accountingEvent.Recid;

        return (accountingEvent.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExchangeRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the exchange rate date on the related source document lines.
    /// </summary>
    /// <param name="_sourceDocumentHeader">
    /// The source document header.
    /// </param>
    /// <param name="_exchangeRateDate">
    /// The exchange rate date.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The exchange rate date cannot be updated because the source document is journalized.
    /// </exception>
    public static void updateExchangeRateDate(SourceDocumentHeaderRecId _sourceDocumentHeader, ExchangeRateDate _exchangeRateDate)
    {
        SourceDocumentLine      sourceDocumentLine;

        if (!SourceDocumentHeaderProvider::isJournalized(_sourceDocumentHeader))
        {
            update_recordSet SourceDocumentLine
                setting ExchangeRateDate = _exchangeRateDate
                where sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeader;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>