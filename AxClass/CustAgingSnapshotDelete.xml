<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAgingSnapshotDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class CustAgingSnapshotDelete
{
    private CustVendReportName agingPeriodDefinition;
    private CustCollectionsPool custCollectionsPool;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteAgingSnapshot</Name>
				<Source><![CDATA[
    internal static void deleteAgingSnapshot(CustVendReportName _agingPeriodDefinition, CustCollectionsPool _custCollectionsPool = null)
    {
        CustAgingSnapshotDelete snapshotDelete = new CustAgingSnapshotDelete();
        snapshotDelete.parmAgingPeriodDefinition(_agingPeriodDefinition);
        snapshotDelete.parmCustCollectionsPool(_custCollectionsPool);

        snapshotDelete.deleteSnapshot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSnapshot</Name>
				<Source><![CDATA[
    private void deleteSnapshot()
    {
        if (CustAgingSnapshotDeletePerfImprovementFlight::instance().isEnabled())
        {
            this.deleteAgingInChunks();
        }
        else
        {
            // Order matters
            this.deleteCustAgingLine();
            this.deleteCustAgingLegalEntity();
            this.deleteCustAging();
        }  
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustAgingLine</Name>
				<Source><![CDATA[
    private void deleteCustAgingLine()
    {
        Query q = new Query();

        q.addDataSource(tableNum(CustAgingLine));

        QueryBuildDataSource legalEntityDS = q.dataSourceTable(tableNum(CustAgingLine)).addDataSource(tableNum(CustAgingLegalEntity));
        legalEntityDS.addLink(fieldNum(CustAgingLine, CustAgingLegalEntity), fieldNum(CustAgingLegalEntity, RecId));
        legalEntityDS.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource custAgingDS = legalEntityDS.addDataSource(tableNum(CustAging));
        custAgingDS.addLink(fieldNum(CustAgingLegalEntity, CustAging), fieldNum(CustAging, RecId));
        custAgingDS.addRange(fieldNum(CustAging, StatRepInterval)).value(SysQuery::value(this.parmAgingPeriodDefinition()));
        custAgingDS.joinMode(JoinMode::ExistsJoin);

        if (this.parmCustCollectionsPool())
        {
            CustCollectionsPool::appendPoolQueryByAccountNum(this.parmCustCollectionsPool(), custAgingDS, fieldNum(CustAging, CustTable));

            QueryBuildDataSource custTableDS = q.dataSourceTable(tableNum(CustTable));
            custTableDS.joinMode(JoinMode::ExistsJoin);
        }

        Query::delete_from(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustAgingLegalEntity</Name>
				<Source><![CDATA[
    private void deleteCustAgingLegalEntity()
    {
        Query q = new Query();

        q.addDataSource(tableNum(CustAgingLegalEntity));

        QueryBuildDataSource custAgingDS = q.dataSourceTable(tableNum(CustAgingLegalEntity)).addDataSource(tableNum(CustAging));
        custAgingDS.addLink(fieldNum(CustAgingLegalEntity, CustAging), fieldNum(CustAging, RecId));
        custAgingDS.addRange(fieldNum(CustAging, StatRepInterval)).value(SysQuery::value(this.parmAgingPeriodDefinition()));
        custAgingDS.joinMode(JoinMode::ExistsJoin);

        if (this.parmCustCollectionsPool())
        {
            CustCollectionsPool::appendPoolQueryByAccountNum(this.parmCustCollectionsPool(), custAgingDS, fieldNum(CustAging, CustTable));

            QueryBuildDataSource custTableDS = q.dataSourceTable(tableNum(CustTable));
            custTableDS.joinMode(JoinMode::ExistsJoin);

            // CustAgingLine is deleted, removing datasource from query
            this.disableDataSource(q.dataSourceTable(tableNum(CustAgingLine)));
        }

        Query::delete_from(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustAging</Name>
				<Source><![CDATA[
    protected void deleteCustAging()
    {
        Query q = new Query();

        q.addDataSource(tableNum(CustAging));

        QueryBuildDataSource custAgingDS = q.dataSourceTable(tableNum(CustAging));
        custAgingDS.addRange(fieldNum(CustAging, StatRepInterval)).value(SysQuery::value(this.parmAgingPeriodDefinition()));

        if (this.parmCustCollectionsPool())
        {
            CustCollectionsPool::appendPoolQueryByAccountNum(this.parmCustCollectionsPool(), custAgingDS, fieldNum(CustAging, CustTable));

            QueryBuildDataSource custTableDS = q.dataSourceTable(tableNum(CustTable));
            custTableDS.joinMode(JoinMode::ExistsJoin);

            // CustAgingLine and CustAgingLegalEntity are deleted, removing datasources from query
            this.disableDataSource(q.dataSourceTable(tableNum(CustAgingLine)));
            this.disableDataSource(q.dataSourceTable(tableNum(CustAgingLegalEntity)));
        }

        Query::delete_from(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAgingInChunks</Name>
				<Source><![CDATA[
    private void deleteAgingInChunks()
    {
        CustAgingDeleteChunkSize defaultChunkSize = 100000;
        CustParameters custParameters = CustParameters::find();

        CustAgingDeleteChunkSize chunkSize = custParameters.CustAgingDeleteChunkSize <= 0 ? defaultChunkSize : custParameters.CustAgingDeleteChunkSize;
        
        Query q = new Query();

        QueryBuildDataSource custAgingDS = q.addDataSource(tableNum(CustAging));
        custAgingDS.addRange(fieldNum(CustAging, StatRepInterval)).value(SysQuery::value(this.parmAgingPeriodDefinition()));

        if (this.parmCustCollectionsPool())
        {
            CustCollectionsPool::appendPoolQueryByAccountNum(this.parmCustCollectionsPool(), custAgingDs, fieldNum(CustAging, CustTable));

            QueryBuildDataSource custTableDS = q.dataSourceTable(tableNum(CustTable));
            custTableDS.joinMode(JoinMode::ExistsJoin);
           
        }

        // For query used in insert_recordset, dynamicFieldList(false) should be set for all datasources of query
        this.setDynamicNoToAllDataSources(q);
        custAgingDS.addSelectionField(fieldNum(CustAging, RecId));

        Map fieldMap = new Map(Types::String, Types::Container);
        fieldMap.insert(fieldStr(CustAgingDeleteTmp, CustAgingRecId), [custAgingDS.uniqueId(), fieldStr(CustAging, RecId)]);

        int counter = (this.getOptimizedRowCountFromQuery(q) / chunkSize) + 1;

        q.topRows(chunkSize);

        while (counter > 0)
        {
            //Temptable when declared as method variable and out of transaction scope, then each time kernal would return empty existing temp table instance.
            CustAgingDeleteTmp agingRecTmp;
            Query::insert_recordset(agingRecTmp, fieldMap, q);

            this.deleteCustAgingLineWithTmp(agingRecTmp);
            this.deleteCustAgingLegalEntityWithTmp(agingRecTmp);
            this.deleteCustAgingWithTmp(agingRecTmp);

            //Temp table data will be emptied.
            agingRecTmp.dispose();
            counter--;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDynamicNoToAllDataSources</Name>
				<Source><![CDATA[
    private void setDynamicNoToAllDataSources(Query _q)
    {
        int dsCount = _q.dataSourceCount();
        for (int i = 0; i < dsCount; i++)
        {
            QueryBuildDataSource childDS = _q.dataSourceNo(i + 1);

            //All the datasources of the query should be cleared for insert_recordset function
            if (childDS.enabled())
            {
                childDs.fields().dynamic(NoYes::No);
                childDs.fields().clearFieldList();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOptimizedRowCountFromQuery</Name>
				<Source><![CDATA[
    private int getOptimizedRowCountFromQuery(Query _agingQuery)
    {
        // Below code taken from SysQuery::countTotal(queryRun)
        // Almost all of the logic was taken from it. With minor edits for query optimizations.
        // To make this query run using SELECT COUNT.
        QueryRun countQueryRun = new QueryRun(_agingQuery);
        Query countQuery = countQueryRun.query();
        QueryBuildDataSource countDataSource = countQuery.dataSourceNo(1);
        countDataSource.update(false);
        countDataSource.sortClear();
        QueryBuildFieldList countBuildFieldsList = countDataSource.fields();
        countBuildFieldsList.dynamic(false);
        countBuildFieldsList.clearFieldList();
        
        // Change "SELECT * FROM CustAging" to "SELECT COUNT (RECID) FROM CustAging"
        // In the SysQuery::countTotal code, this was done only if there was only one datasource.
        // But in our case, this should always be done.
        // The code in SysQuery::countTotal executes several queries and added up the number of rows in these dataSources,
        // this led to unrealistically large results, sometimes they were even negative.
        countDataSource.addSelectionField(fieldNum(Common, RecId), SelectionField::Count);
        countQueryRun = new QueryRun(countQuery);

        if (countQueryRun.next())
        {
            return countQueryRun.get(tableNum(CustAging)).RecId;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustAgingWithTmp</Name>
				<Source><![CDATA[
    private void deleteCustAgingWithTmp(CustAgingDeleteTmp _agingRecTmp)
    {
        CustAging custAging;

        //To avoid converting set based delete_from to row-by-row operation deleteActions are skipped.
        custAging.skipDeleteActions(true);

        ttsbegin;
        delete_from custAging
            exists join _agingRecTmp
            where custAging.RecId == _agingRecTmp.CustAgingRecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustAgingLegalEntityWithTmp</Name>
				<Source><![CDATA[
    private void deleteCustAgingLegalEntityWithTmp(CustAgingDeleteTmp _agingRecTmp)
    {
        CustAgingLegalEntity custAgingLegalEntity;
        custAgingLegalEntity.skipDeleteActions(true);

        ttsbegin;
        delete_from custAgingLegalEntity
            exists join _agingRecTmp
            where custAgingLegalEntity.CustAging == _agingRecTmp.CustAgingRecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustAgingLineWithTmp</Name>
				<Source><![CDATA[
    private void deleteCustAgingLineWithTmp(CustAgingDeleteTmp _agingRecTmp)
    {
        CustAgingLine custAgingLine;
        CustAgingLegalEntity custAgingLegalEntity;
        
        ttsbegin;
        delete_from custAgingLine
            exists join custAgingLegalEntity
                where custAgingLine.CustAgingLegalEntity == custAgingLegalEntity.RecId
            exists join _agingRecTmp
                where _agingRecTmp.CustAgingRecId == custAgingLegalEntity.CustAging;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableDataSource</Name>
				<Source><![CDATA[
    private void disableDataSource(QueryBuildDataSource _qbds)
    {
        if (_qbds)
        {
            _qbds.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgingPeriodDefinition</Name>
				<Source><![CDATA[
    private CustVendReportName parmAgingPeriodDefinition(CustVendReportName _agingPeriodDefinition = agingPeriodDefinition)
    {
        agingPeriodDefinition = _agingPeriodDefinition;
        return agingPeriodDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustCollectionsPool</Name>
				<Source><![CDATA[
    private CustCollectionsPool parmCustCollectionsPool(CustCollectionsPool _custCollectionsPool = custCollectionsPool)
    {
        custCollectionsPool = _custCollectionsPool;
        return custCollectionsPool;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>