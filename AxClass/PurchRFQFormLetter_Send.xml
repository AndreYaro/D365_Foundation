<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQFormLetter_Send</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQFormLetter_Send extends PurchRFQFormLetter implements BatchRetryable
{
    boolean canSend;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    protected void chooseLines()
    {
        PurchRFQParmUpdate purchRFQParmUpdate = this.purchRFQParmUpdate();

        // make default Filter to be All in the business logic
        purchRFQParmUpdate.LineStatusFilter = PurchRFQStatusFilter::All;

        this.purchRFQParmUpdate(purchRFQParmUpdate);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::RFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postRequestForQuoteSend),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = purchRFQFormLetterContract.parmPurchRFQCaseTable())
    {
        if (_sourceTable.TableId == tableNum(PurchRFQCaseTable))
        {
            return purchRFQFormLetterContract.parmPurchRFQCaseTable(_sourceTable);
        }
        return _sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the print management document type for sending a request for a quote.
    /// </summary>
    /// <returns>
    ///    The print management document type for sending request for quotes.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQStatus</Name>
				<Source><![CDATA[
    protected PurchRFQStatus purchRFQStatus()
    {
        return PurchRFQStatus::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQUpdateType</Name>
				<Source><![CDATA[
    PurchRFQUpdateType purchRFQUpdateType()
    {
        return PurchRFQUpdateType::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer             version = conPeek(_packedClass,1);
        ParmId              parmId;
        PurchRFQParmUpdate  purchRFQParmUpdate;
        Printout            printout;
        NoYes               printFormletter;
        container           printerSettingsFormLetter;
        boolean             printReplySheet;
        boolean             printPriceAmount;
        boolean             usePrintManagement;
        PurchRFQCaseTable   purchRFQCaseTable;
        container           datasourceRecordsPacked;

        #LOCALMACRO.ParmList_v3
            parmId,
            purchRFQParmUpdate,
            Printout,
            PrintFormletter,
            PrinterSettingsFormLetter,
            printReplySheet,
            printPriceAmount,
            usePrintManagement,
            purchRFQCaseTable,
            datasourceRecordsPacked
        #ENDMACRO

        switch (version)
        {
            case 3:
                [version, #ParmList_v3] = _packedClass;
                this.setNewContract(PurchRFQFormLetterSendContract::construct());

                contractIsFromPreviousVersion = true;
                this.parmId(parmId);
                this.purchRFQParmUpdate(purchRFQParmUpdate);
                this.printout(printout);
                this.printFormLetter(printFormletter);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletter, PrintSetupOriginalCopy::Original);
                this.printReplySheet(printReplySheet);
                this.printPriceAmount(printPriceAmount);
                this.usePrintManagement(usePrintManagement);
                break;

            default :
                return super(_packedClass);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQFormLetter_Send construct(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postRequestForQuoteSend),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        PurchRFQFormLetter_Send formLetter =  new PurchRFQFormLetter_Send(_className, _methodName, _executionMode);
        formLetter.init();
        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description(MenuItemName _callerMenuItem = '')
    {
        if (_callerMenuItem == menuItemActionStr(PurchRFQFormLetterSelfInvite_PSN))
        {
            return "@SCM:PurchRFQSelfInvitePrepare";
        }

        return "@SYS106003";
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterPrompt</Name>
				<Source><![CDATA[
    void afterPrompt()
    {
        super();

        if (this.parmCanSend())
        {
            info(strFmt("@SYP4950039", PurchRFQCaseTable::findRecId(this.parmSourceTable().RecId).RFQCaseId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanSend</Name>
				<Source><![CDATA[
    public boolean parmCanSend(boolean _canSend = canSend)
    {
        canSend = _canSend;
        return canSend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(VendorCollaboration_PSN))
            || this.parmCanSend()
            || !showSelectionDialog)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return this.checkRunInNewSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return PurchRFQFormLetter_Send::description(this.parmCallerMenuItem());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>