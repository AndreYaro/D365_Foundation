<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationRoundingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationRoundingHelper</c> will use the same mechanism with tax service for rounding.
/// It is to do the rounding line by line, every line rounding diff will be added to next line before next line rounding.
/// </summary>
internal final class TaxIntegrationRoundingHelper
{
    private TaxIntegrationRoundingConfiguration roundingConfiguration;
    private Map roundingDiffMap; // cross line context
    private boolean isCalculateByTotal, isCalculatedByLine, isRoundingByTaxCode, isRoundingByTaxCodeCombination;
    private Map currencyCache;
    private boolean isRoundAmountInLineWithTaxCode = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(TaxIntegrationRoundingConfiguration _roundingConfiguration)
    {
        this.roundingConfiguration = _roundingConfiguration;
        this.roundingDiffMap = new Map(Types::Container, Types::Real);
        this.isCalculateByTotal = this.roundingConfiguration.getRoundOffCalculationMethod() == TaxRoundOffCalculationMethod::Total;
        this.isCalculatedByLine = this.roundingConfiguration.getRoundOffCalculationMethod() == TaxRoundOffCalculationMethod::Line;
        this.isRoundingByTaxCode = this.roundingConfiguration.getRoundOffPrinciple() == TaxRoundOffPrinciple::TaxCode;
        this.isRoundingByTaxCodeCombination = this.roundingConfiguration.getRoundOffPrinciple() == TaxRoundOffPrinciple::TaxCodeCombination;
        this.currencyCache = new Map(Types::String, Types::AnyType);
        this.isRoundAmountInLineWithTaxCode = this.isCalculatedByLine && this.isRoundingByTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRoundingInLineWithTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether rounding for calculate in line and round with tax code.
    /// </summary>
    /// <returns>True if rounding for calculate in line and round with tax code; Otherwise, False</returns>
    internal boolean isRoundingInLineWithTaxCode()
    {
        return this.isRoundAmountInLineWithTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the rounding base on differnet combinations
    /// </summary>
    /// <param name = "_value">amount to be rounded</param>
    /// <param name = "_targetCurrency">target rounding currency</param>
    /// <param name = "_parameter">identifier of the rounding diff context</param>
    /// <returns>Amount after rounding</returns>
    public Amount roundAmount(Amount _value, CurrencyCode _targetCurrency, TaxIntegrationRoundingParameter _parameter)
    {
        if (_value == 0)
        {
            return 0;
        }

        if (this.isRoundingBaseAmount(_parameter))
        {
            return this.roundWithRule(_value, _targetCurrency, _parameter);
        }

        if (this.isCalculatedByLine)
        {
            if (this.isRoundingByTaxCode)
            {
                return this.roundAmountInLineWithTaxCode(_value, _targetCurrency, _parameter);
            }
            else if (this.isRoundingByTaxCodeCombination)
            {
                return this.roundAmountInLineWithTaxCodeCombination(_value, _targetCurrency, _parameter);
            }
        }
        else if (this.isCalculateByTotal)
        {
            if (this.isRoundingByTaxCode)
            {
                return this.roundAmountInTotalWithTaxCode(_value, _targetCurrency, _parameter);
            }
            else if (this.isRoundingByTaxCodeCombination)
            {
                return this.roundAmountInTotalWithTaxCodeCombination(_value, _targetCurrency, _parameter);
            }
        }
        return _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundWithCurrencyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounding for calculating in line simple without different conditions.
    /// </summary>
    /// <param name = "_value">Amount</param>
    /// <param name = "_targetCurrency">CurrencyCode</param>
    /// <param name = "_currency">TaxCurrency</param>
    /// <returns>Rounded amount</returns>
    internal Amount roundWithCurrencyType(Amount _value, CurrencyCode _targetCurrency, TaxCurrency _currency)
    {
        if (_currency == TaxCurrency::TransactionCurrency)
        {
            return this.roundWithTaxRule(_value, _targetCurrency);
        }
        else
        {
            return this.roundWithCurrencyRule(_value, _targetCurrency);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRoundingBaseAmount</Name>
				<Source><![CDATA[
    protected boolean isRoundingBaseAmount(TaxIntegrationRoundingParameter _parameter)
    {
        TaxIntegrationAmountType amountType = _parameter.getAmountType();
        return amountType == TaxIntegrationAmountType::SourceBaseAmountCur
            || amountType == TaxIntegrationAmountType::TaxBaseAmount
            || amountType== TaxIntegrationAmountType::TaxBaseAmountCur
            || amountType== TaxIntegrationAmountType::TaxBaseAmountRep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmountInLineWithTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounding for calculate in line and round with tax code. This is the most simple scenario that tax is calculated by line, and rounding within the same tax code.
    /// In this case, we only need to round the tax amount inside per transaction line, and per tax code.
    /// </summary>
    /// <param name = "_value">Amount value</param>
    /// <param name = "_targetCurrency">Target currency</param>
    /// <param name = "_parameter">Processing keys</param>
    /// <returns>Rounded amount</returns>
    private Amount roundAmountInLineWithTaxCode(Amount _value, CurrencyCode _targetCurrency, TaxIntegrationRoundingParameter _parameter)
    {
        return this.roundWithRule(_value, _targetCurrency, _parameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmountInTotalWithTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounding for calculate in total and round with tax code. If calculation method is in total, the rounding diff. should be leveraged among all lines with the samw tax code.
    /// </summary>
    /// <param name = "_value">Amount value</param>
    /// <param name = "_targetCurrency">Target currency</param>
    /// <param name = "_parameter">Processing keys</param>
    /// <returns>Rounded amount</returns>
    private Amount roundAmountInTotalWithTaxCode(Amount _value, CurrencyCode _targetCurrency, TaxIntegrationRoundingParameter _parameter)
    {
        container key = [curExt(), _parameter.getCurrency(), _parameter.getTaxCode(), _parameter.getAmountType()];
        Amount diff = roundingDiffMap.exists(key)? roundingDiffMap.lookup(key) : 0;
        Amount result = _value;
        result -= diff;
        result = this.roundWithRule(result, _targetCurrency, _parameter);
        roundingDiffMap.insert(key, result - _value);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmountInLineWithTaxCodeCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounding for calculate in line and round with tax code combination. 
    /// If calculation method is in total and rounding with tax code combination, the rounding diff. should only be leveraged within certain line.
    /// </summary>
    /// <param name = "_value">Amount value</param>
    /// <param name = "_targetCurrency">Target currency</param>
    /// <param name = "_parameter">Processing keys</param>
    /// <returns>Rounded amount</returns>
    private Amount roundAmountInLineWithTaxCodeCombination(
        Amount _value, 
        CurrencyCode _targetCurrency, 
        TaxIntegrationRoundingParameter _parameter)
    {
        container key = [curExt(), _parameter.getCurrency(), _parameter.getSourceTableId(), _parameter.getSourceRecId(), _parameter.getAmountType()];
        Amount diff = roundingDiffMap.exists(key)? roundingDiffMap.lookup(key) : 0;
        Amount result = _value;
        result -= diff;
        result = this.roundWithRule(result, _targetCurrency, _parameter);
        roundingDiffMap.insert(key, result - _value);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmountinTotalWithTaxCodeCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounding for calculate in total and round with tax code combination.
    /// If calculation method is in total and rounding with tax code combination, 
    /// the rounding diff. should be leveraged among all lines with the same tax code combination.
    /// </summary>
    /// <param name = "_value">Amount value</param>
    /// <param name = "_targetCurrency">Target currency</param>
    /// <param name = "_parameter">Processing keys</param>
    /// <returns>Rounded amount</returns>
    private Amount roundAmountinTotalWithTaxCodeCombination(Amount _value, CurrencyCode _targetCurrency, TaxIntegrationRoundingParameter _parameter)
    {
        container key = [curExt(), _parameter.getCurrency(), _parameter.getTaxCodeSet(), _parameter.getAmountType()];
        Amount diff = roundingDiffMap.exists(key)? roundingDiffMap.lookup(key) : 0;
        Amount result = _value;
        result -= diff;
        result = this.roundWithRule(result, _targetCurrency, _parameter);
        roundingDiffMap.insert(key, result - _value);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundWithRule</Name>
				<Source><![CDATA[
    private Amount roundWithRule(Amount _value, CurrencyCode _targetCurrency, TaxIntegrationRoundingParameter _parameter)
    {
        return this.roundWithCurrencyType(_value, _targetCurrency, _parameter.getCurrency());
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundWithTaxRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// For tax integration, only rounding precision should go with currency rounding precision, for all other patameters, it should be aligned with integration configuration.
    /// </summary>
    /// <param name = "_value">Amount value</param>
    /// <param name = "_targetCurrency">Target currency</param>
    /// <returns>Rounded amount</returns>
    private Amount roundWithTaxRule(Amount _value, CurrencyCode _targetCurrency)
    {
        return CurrencyExchange::roundWithRule(
            _value,
            this.findCurrency(_targetCurrency).RoundingPrecision,
            this.roundingConfiguration.getRoundOffType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundWithCurrencyRule</Name>
				<Source><![CDATA[
    private Amount roundWithCurrencyRule(Amount _value, CurrencyCode _targetCurrency)
    {
        return this.findCurrency(_targetCurrency).amount_Instance(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrency</Name>
				<Source><![CDATA[
    private Currency findCurrency(CurrencyCode _currencyCode)
    {
        Currency result;

        if (currencyCache.exists(_currencyCode))
        {
            TaxIntegrationCurrencyWrapper currencyWrapper = currencyCache.lookup(_currencyCode);
            result = currencyWrapper.getCurrency();
        }
        else
        {
            result = Currency::find(_currencyCode);
            currencyCache.insert(_currencyCode, new TaxIntegrationCurrencyWrapper(result));
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>