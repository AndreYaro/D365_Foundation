<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymFileAnalyze</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendPaymFileAnalyze extends RunBase implements CustVendBankPaymFormat
{
    Filename    fileNameRead;
    DialogField dialogFileNameRead;
    AsciiStreamIo     fileWrite;

    AsciiStreamIo     file;
    Filename    filename;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fileNameRead
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configuration key that enables functionality of class.
    /// </summary>
    /// <returns>Configuration key number.</returns>
    public configurationKeyId configurationKey()
    {
        return configurationKeyNum(BankElectronicBanking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase(this.interfaceName(),this);
        ;
        dialogFileNameRead = dialog.addFieldValue(extendedtypestr(FilenameOpen),fileNameRead);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNameWrite</Name>
				<Source><![CDATA[
    public Filename fileNameWrite()
    {
        ;
        return fileNameRead + '.txt';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        fileNameRead    = dialogFileNameRead.value();
        filename        = this.fileNameWrite();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public PaymInterfaceName interfaceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    public void open()
    {
        // Open file for text-output
        fileWrite = CustVendPaymFileAnalyze::openFileOnClient(filename);

        if (!fileWrite || fileWrite.status() != IO_Status::Ok)
        {
            throw error(strfmt("@SYS73665",filename));
        }

        file.outRecordDelimiter('\r\n');
        file.outFieldDelimiter('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    public boolean openFile()
    {
        boolean ret = false;
        ;
        file = CustVendPaymFileAnalyze::openFileOnClient(fileNameRead, 'r');

        if (file)
        {
            if (file.status())
            {
                throw error("@SYS52680");
            }
            file.inFieldDelimiter('\r\n');
            file.inRecordDelimiter('\r\n');

            ret = true;
        }
        else
        {
            throw error("@SYS112406");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    public Filename parmFileName(Filename _filename = filename)
    {
        ;
        filename = _filename;
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileNameRead</Name>
				<Source><![CDATA[
    public Filename parmFileNameRead(Filename _fileNameRead = fileNameRead)
    {
        ;
        fileNameRead = _fileNameRead;
        return fileNameRead;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    public void processRecord(container _record)
    {
        ;
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        container   subRecord;

        this.openFile();
        this.open();

        if (this.writeFileInfo())
        {
            this.write(strfmt("@SYS119749", this.interfaceName()));
            this.write(strfmt("@SYS119750", fileNameRead));
            this.write(strfmt("@SYS119670", filename));
            this.write('');
        }

        while (! file.status())
        {
            subRecord = file.read();

            this.processRecord(subRecord);
        }

        fileWrite = null;
        info(strfmt("@SYS119670", filename));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileNames</Name>
				<Source><![CDATA[
    public void setFileNames(Filename _filename)
    {
        ;
        this.parmFileNameRead(_filename);
        this.parmFileName(this.fileNameWrite());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version      = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean          ok = true;

        if (!filename)
        {
            ok = checkFailed("@SYS18624");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    public void write(str _record)
    {
        fileWrite.write(_record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeFileInfo</Name>
				<Source><![CDATA[
    public boolean writeFileInfo()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Object construct(SysModule  _sysModule,
                                   PaymMode   _paymMode)
    {
        DictClass   dictClass;
        Object      action;
        classId     classId;
        Query       infoActionQuery;
        ;

        switch (_sysModule)
        {
            case SysModule::Cust :
                classId = CustPaymModeTable::find(_paymMode).ClassIdFileAnalyze;

                if (! classId)
                {
                    infoActionQuery = new Query();
                    infoActionQuery.addDataSource(tablenum(CustPaymModeTable)).addRange(fieldnum(CustPaymModeTable,PaymMode)).value(_paymMode);

                    throw error(strfmt("@SYS119748", "@SYS119478", new DictType(extendedtypenum(PaymMode)).label(), _paymMode),
                                SysHelpPath::applForm(formstr(CustPaymMode)));
                }

                if (! SysDictClass::isSuperclass(classId,classnum(CustVendPaymFileAnalyze)))
                {
                    throw error(strfmt("@SYS119745", _paymMode));
                }

                break;

            case SysModule::Vend :
                classId = VendPaymModeTable::find(_paymMode).ClassIdFileAnalyze;

                if (! classId)
                {
                    infoActionQuery = new Query();
                    infoActionQuery.addDataSource(tablenum(VendPaymModeTable)).addRange(fieldnum(VendPaymModeTable,PaymMode)).value(_paymMode);

                    throw error(strfmt("@SYS119748", "@SYS119478", new DictType(extendedtypenum(PaymMode)).label(), _paymMode),
                                SysHelpPath::applForm(formstr(VendPaymMode)));
                }

                if (! SysDictClass::isSuperclass(classId,classnum(CustVendPaymFileAnalyze)))
                {
                    throw error(strfmt("@SYS119745", _paymMode));
                }

                break;
        }

        dictClass   = new DictClass(classId);
        action      = dictClass.makeObject();

        return action;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendPaymFileAnalyze custVendPaymFileAnalyze = CustVendPaymFileAnalyze::newCustVendPaymFileAnalyze(_args.record());
        ;

        if (custVendPaymFileAnalyze.prompt())
        {
            custVendPaymFileAnalyze.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendPaymFileAnalyze</Name>
				<Source><![CDATA[
    public static CustVendPaymFileAnalyze newCustVendPaymFileAnalyze(Common _paymModeTable)
    {
        CustPaymModeTable       custPaymModeTable;
        VendPaymModeTable       vendPaymModeTable;
        CustVendPaymFileAnalyze ret;
        ;

        switch (_paymModeTable.TableId)
        {
            case tablenum(CustPaymModeTable) :
                custPaymModeTable = _paymModeTable;
                ret = CustVendPaymFileAnalyze::construct(SysModule::Cust, custPaymModeTable.PaymMode);
                break;
            case tablenum(VendPaymModeTable) :
                vendPaymModeTable = _paymModeTable;
                ret = CustVendPaymFileAnalyze::construct(SysModule::Vend, vendPaymModeTable.PaymMode);
                break;
            default:
                throw error(Error::missingRecord(funcname()));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFileOnClient</Name>
				<Source><![CDATA[
    protected static AsciiStreamIo openFileOnClient(Filename    _filename,
                                                     str         _mode = 'w',
                                                     str         _type = 'AsciiIo')
    {
        /* PostR1AXLTODO File IO needs to be reimagined in Rainier
        AsciiIo ret;
        ;
        switch (_type)
        {
            case 'TextIo':
                ret = new AsciiIo(_filename, _mode);
            case 'CommaIo':
                ret = new CommaIo(_filename, _mode);
            default:
                ret = new AsciiIo(_filename, _mode);
        }
        return ret;
        */
        throw error('Not implemented');
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFileAnalyze</Name>
				<Source><![CDATA[
    public static void runFileAnalyze(PaymMode _paymMode, SysModule _sysModule, Filename _filename)
    {
        CustVendPaymFileAnalyze custVendPaymFileAnalyze;
        classId                 classId;
        DictClass               dictClass;
        Query                   infoActionQuery;
        ;

        switch (_sysModule)
        {
            case SysModule::Cust :
                classId = CustPaymModeTable::find(_paymMode).ClassIdFileAnalyze;
                break;
            case SysModule::Vend :
                classId = VendPaymModeTable::find(_paymMode).ClassIdFileAnalyze;
                break;
            default:
                break;
        }

        if (classId)
        {
            //PostR1TODO
            //if (WinAPI::fileExists(_filename))
            //{
                dictClass   = new DictClass(classId);
                custVendPaymFileAnalyze = dictClass.makeObject();

                custVendPaymFileAnalyze.setFileNames(_filename);

                if (custVendPaymFileAnalyze.parmFileName())
                {
                    custVendPaymFileAnalyze.runOperation();
                }
            //}
        }
        else
        {
            switch (_sysModule)
            {
                case SysModule::Cust :
                    infoActionQuery = new Query();
                    infoActionQuery.addDataSource(tablenum(CustPaymModeTable)).addRange(fieldnum(CustPaymModeTable,PaymMode)).value(_paymMode);

                    info(strfmt("@SYS119748", "@SYS119478", new DictType(extendedtypenum(PaymMode)).label(), _paymMode),
                         SysHelpPath::applForm(formstr(CustPaymMode)));
                    break;
                case SysModule::Vend :
                    infoActionQuery = new Query();
                    infoActionQuery.addDataSource(tablenum(VendPaymModeTable)).addRange(fieldnum(VendPaymModeTable,PaymMode)).value(_paymMode);

                    info(strfmt("@SYS119748", "@SYS119478", new DictType(extendedtypenum(PaymMode)).label(), _paymMode),
                         SysHelpPath::applForm(formstr(VendPaymMode)));
                    break;
                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>