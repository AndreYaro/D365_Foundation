<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionConsistencyCheckerAsyncController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionConsistencyCheckerAsyncController</c> class executes the transaction consistency checker in async mode.
/// </summary>
internal class RetailTransactionConsistencyCheckerAsyncController extends RunBaseBatch implements BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    private RetailTransactionConsistencyCheckerTaskParameters taskParameters;
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return taskParameters.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {   
        taskParameters = RetailTransactionConsistencyCheckerTaskParameters::constructEmpty();

        return taskParameters.unpack(_packedClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        if (taskParameters.getStatementId())
        {
            return strFmt("@Retail:RetailTransactionConsistencyCheckerControllerStatement", taskParameters.getStatementId());
        }
        else
        {
            return strFmt("@Retail:RetailTransactionConsistencyCheckerControllerStore", taskParameters.getStoreId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct new consistency checker driver for a given statement.
    /// </summary>
    /// <param name = "_params">The task parameters.</param>
    /// <returns>Consistency checker driver.</returns>
    public static RetailTransactionConsistencyCheckerAsyncController constructForParameters(RetailTransactionConsistencyCheckerTaskParameters _params)
    {
        RetailTransactionConsistencyCheckerAsyncController transactionConsistencyCheckerController = new RetailTransactionConsistencyCheckerAsyncController();
        
        transactionConsistencyCheckerController.taskParameters = _params;

        return transactionConsistencyCheckerController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        System.Collections.Generic.List<System.Threading.Tasks.Task> tasks = new System.Collections.Generic.List<System.Threading.Tasks.Task>();
        
        RetailStoreTable storeTable = RetailStoreTable::find(taskParameters.getStoreId());

        eventSource.EventWriteTransactionValidationStartTransactionValidationTask(storeTable.RecId);

        eventSource.EventWriteTransactionValidationStartRestoreFailedTransactions(storeTable.RecId);
        RetailTransactionValidationHelper::restoreFailedTransactions(taskParameters);
        eventSource.EventWriteTransactionValidationFinishRestoreFailedTransactions(storeTable.RecId);

        int numberOfThreads = this.getNumberOfThreads();

        eventSource.EventWriteTransactionValidationScheduleTopPickingTransactions(numberOfThreads, storeTable.RecId);
        
        for (int i = 0; i < numberOfThreads; i++)
        {
            var task = runAsync(classNum(RetailTransactionConsistencyCheckerController),
                                staticMethodStr(RetailTransactionConsistencyCheckerController, runAsync),
                                taskParameters.pack(),
                                System.Threading.CancellationToken::None,
                                0, null, conNull(), null, null, null, null,
                                System.Threading.Tasks.TaskCreationOptions::LongRunning);
            
            eventSource.EventWriteTransactionValidationScheduleTopPickingTransactionValidationTask(i, storeTable.RecId);
            
            tasks.Add(task);
        }
    
        eventSource.EventWriteTransactionValidationFinishTransactionValidationTask(storeTable.RecId);

        System.Threading.Tasks.Task[] allTasks = tasks.ToArray();
        System.Threading.Tasks.Task::WaitAll(allTasks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfThreads</Name>
				<Source><![CDATA[
    private int getNumberOfThreads()
    {
        RetailStoreTable storeTable = RetailStoreTable::find(taskParameters.getStoreId());

        RetailTransactionTable transactionTable;
        transactionTable.allowIndexHint(true);

        select count(RecId) from transactionTable
            index hint invoiceIdSOIdStmtIdx
            where   transactionTable.store == taskParameters.getStoreId()
                &&  transactionTable.statementId == taskParameters.getStatementId()
                &&  transactionTable.type == RetailTransactionType::Sales
                &&  transactionTable.entryStatus == RetailEntryStatus::None
                && (    transactionTable.ValidationStatus == RetailTransactionValidationStatus::None
                    ||  transactionTable.ValidationStatus == RetailTransactionValidationStatus::Pending);

        int maxNumOfThreads = this.getMaxNumberOfThreads();
        int numOfThreads = min(transactionTable.RecId, maxNumOfThreads);

        eventSource.EventWriteTransactionValidationThreadsAndTransactionCount(transactionTable.RecId, maxNumOfThreads, storeTable.RecId);

        return min(transactionTable.RecId, maxNumOfThreads);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxNumberOfThreads</Name>
				<Source><![CDATA[
    private int getMaxNumberOfThreads()
    {
        int overriddenMaxNumberOfThreads = RetailStatementFeatureControl::getOverridenMaxNumberOfThreadsConsistencyCheckerValue();

        // Always use the override value if it is set.
        if (overriddenMaxNumberOfThreads)
        {
            return overriddenMaxNumberOfThreads;
        }
        else
        {
            int numberOfThreadsToUse = 0;
            int maxNumberOfThreads = RetailParameters::find().MaxNumberOfThreadsConsistencyChecker;
            
            // We will at most use System.Environment::ProcessorCount threads and at a minimum use 4 threads.
            numberOfThreadsToUse = min(maxNumberOfThreads, System.Environment::ProcessorCount);
            numberOfThreadsToUse = max(4, numberOfThreadsToUse);

            return numberOfThreadsToUse;
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>