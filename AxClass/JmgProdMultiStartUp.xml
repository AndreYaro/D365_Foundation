<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProdMultiStartUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgProdMultiStartUp</c> class is used to report productions
/// as started from the registration form.
/// </summary>
public class JmgProdMultiStartUp extends ProdMultiStartUp implements BatchRetryable
{
    boolean     userCanceled;
    InventDimId inventDimId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decides whether the class is shown in the list of batch journal types.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class for which the same parameters can repeatedly
    ///    be used. Of course, the dialog box can be shown and the parameters can be changed, but parameters
    ///    of some classes might build on data that is only valid for a short time. Not all classes can be run
    ///    two times with the same parameters. If the <c>canGoBatch</c> method returns false, this method will
    ///    not have any effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Disables controls on the dialog, which the user should not have access to when reporting
    ///    productions as started from Manufacturing execution.
    /// </summary>
    /// <param name="dialog">
    ///    The dialog on which to disable controls.
    /// </param>
    public void dialogPostRun(DialogRunbase dialog)
    {
        FormRun         fr;
        FormDataSource  fds;

        super(dialog);

        fr = dialog.formRun();

        // User should not be able to add or delete records
        fds = fr.dataSource();
        fds.allowCreate(false);
        fds.allowDelete(false);

        // All fields containing on data from registration should be locked.
        // These are ProdId, StartQty, FromOpr, ToOpr, PostDate
        fds.object(fieldId2Ext(fieldnum(ProdParmStartUp, ProdId), 1)).allowEdit(false);
        fds.object(fieldId2Ext(fieldnum(ProdParmStartUp, FromOprNum), 1)).allowEdit(false);
        fds.object(fieldId2Ext(fieldnum(ProdParmStartUp, ToOprNum), 1)).allowEdit(false);
        fds.object(fieldId2Ext(fieldnum(ProdParmStartUp, StartUpQty), 1)).allowEdit(false);
        fds.object(fieldId2Ext(fieldnum(ProdParmStartUp, PostDate), 1)).allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProdParmStartup</c> record to use when reporting productions as started from
    ///    Manufacturing Execution.
    /// </summary>
    /// <param name="_prodParmStartUp">
    ///    he <c>ProdParmStartup</c> record to initialize.
    /// </param>
    void initParmBuffer(ParmBuffer _prodParmStartUp)
    {
        ProdParmStartUp         prodParmStartUp = _prodParmStartUp;
        JmgProdParametersDim    jmgProdParametersDim = JmgProdParametersDim::find(inventDimId);

        if (jmgProdParametersDim.StartUpUseSFCParameters == NoYes::Yes)
        {
            prodParmStartUp.StartUpProduction       = jmgProdParametersDim.StartUpProduction;
            prodParmStartUp.References              = jmgProdParametersDim.StartUpReferences;
            prodParmStartUp.RouteJournalNameId      = jmgProdParametersDim.StartUpRouteJournalNameId;
            prodParmStartUp.RouteAutoConsump        = jmgProdParametersDim.StartUpRouteAutoConsump;
            prodParmStartUp.PostNowRoute            = jmgProdParametersDim.StartUpPostNowRoute;
            prodParmStartUp.EndRouteCard            = jmgProdParametersDim.StartUpEndRouteCard;
            prodParmStartUp.bomJournalNameId        = jmgProdParametersDim.StartUpBomJournalNameId;
            prodParmStartUp.bomAutoConsump          = jmgProdParametersDim.StartUpBOMAutoConsump;
            prodParmStartUp.bomJournalSplit         = jmgProdParametersDim.StartUpBOMJournalSplit;
            prodParmStartUp.PostNowBOM              = jmgProdParametersDim.StartUpPostNowBOM;
            prodParmStartUp.EndPicklist             = jmgProdParametersDim.StartUpEndPicklist;
            prodParmStartUp.ReducePhysical          = jmgProdParametersDim.StartUpReducePhysical;
            prodParmStartUp.DrawNegative            = jmgProdParametersDim.StartUpDrawNegative;
            prodParmStartUp.CompletePickListJournal = jmgProdParametersDim.StartUpCompletePickListJournal;
        }
        else
        {
            super(prodParmStartUp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSFCParmId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes SFC specific parameters.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The <c>InventDim</c> record ID of the site currently reporting productions as started.
    /// </param>
    void initSFCParmId(InventDimId _inventDimId)
    {
        userCanceled = false;
        this.getLast();
        this.initParmId();

        inventDimId = _inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserCanceled</Name>
				<Source><![CDATA[
    public boolean parmUserCanceled(boolean _value = userCanceled)
    {
        userCanceled = _value;
        return userCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>