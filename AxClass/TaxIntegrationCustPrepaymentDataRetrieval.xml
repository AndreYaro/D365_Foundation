<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationCustPrepaymentDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationCustPrepaymentDataRetrieval</c> class retrieves data from <c>CustPrepaymentInvoiceTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(CustPrepaymentInvoiceTable))]
public class TaxIntegrationCustPrepaymentDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected CustPrepaymentInvoiceTable custPrepaymentInvoiceTable;
    protected CustPrepaymentInvoiceLine custPrepaymentInvoiceLine;
    protected CustTable custTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.custPrepaymentInvoiceTable)
            .where(this.custPrepaymentInvoiceTable, fieldStr(CustPrepaymentInvoiceTable, RecId))
                .isEqualToLiteral(this.document.getLocalRecId())
            .outerJoin(this.custTable)
            .where(this.custTable, fieldStr(CustTable, AccountNum))
                    .isEqualTo(this.custPrepaymentInvoiceTable, fieldStr(CustPrepaymentInvoiceTable, InvoiceAccount))
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.CustPrepaymentInvoiceLine)
            .where(this.CustPrepaymentInvoiceLine, fieldStr(CustPrepaymentInvoiceLine, CustPrepaymentInvoiceTable))
                .isEqualToLiteral(this.CustPrepaymentInvoiceTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        // Here return null since only need header info to determine some info (e.g. tax-related cash discount parameters).
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        // Here return null since only need header info to determine some info (e.g. tax-related cash discount parameters).
        return null;

    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
            this.custPrepaymentInvoiceLine.TableId,
            this.custPrepaymentInvoiceLine.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        // For now, only header info is needed for Customer invouce journal, so skip document charge and line.
        document.setShouldSkipDocumentCharge(true);
        document.setShouldSkipLine(false);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Sales);
        document.setInvoiceId(this.custPrepaymentInvoiceTable.InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>PlSADTrans</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setLedgerDimension(this.custPrepaymentInvoiceTable.DefaultDimension);
        _line.setTaxGroup(this.CustPrepaymentInvoiceLine.TaxGroup);
        _line.setTaxItemGroup(this.CustPrepaymentInvoiceLine.TaxItemGroup);
        _line.setOverrideSalesTax(this.CustPrepaymentInvoiceLine.OverrideSalesTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
        _line.setBaseAmount(this.custPrepaymentInvoiceLine.LineAmount);
        _line.setTransactionAmount(this.custPrepaymentInvoiceLine.LineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>SalesTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        document.setIncludingTax(true);
        document.setOrderAccount(this.custPrepaymentInvoiceTable.OrderAccount);
        document.setOrderAccountGroup(this.custPrepaymentInvoiceTable.CustGroup);
        document.setInvoiceAccount(this.custPrepaymentInvoiceTable.InvoiceAccount);
        document.setInvoiceAccountGroup(this.custPrepaymentInvoiceTable.CustGroup);
        document.setTransactionCurrencyCode(this.custPrepaymentInvoiceTable.CurrencyCode);
        document.setDocumentDate(this.custPrepaymentInvoiceTable.DocumentDate);
        document.setDueDate(this.custPrepaymentInvoiceTable.DueDate);
        document.setInvoiceDate(this.custPrepaymentInvoiceTable.InvoiceDate);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>