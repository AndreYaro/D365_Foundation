<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReverseChargeSalesOrder_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The class <c>ReverseChargeSalesOrder_W</c> contains logic of appliyng reverse charge tax groups to sales order lines.
/// </summary>
public class ReverseChargeSalesOrder_W extends ReverseCharge_W
{
    private SalesTable  salesTable;
    private SalesLine   salesLine;

    private CustAccount                 lastInvoiceAccount;
    private LogisticsPostalAddressRecId lastDeliveryAddress;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    protected ReverseChargeDocumentType_W documentType()
    {
        return ReverseChargeDocumentType_W::SalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerChanged</Name>
				<Source><![CDATA[
    protected void headerChanged()
    {
        super();

        partnerCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(salesTable.custTable_InvoiceAccount().postalAddress());

        if (salesTable.DeliveryPostalAddress)
        {
            deliveryCountryRegionType = IntrastatCountryRegionParameters::getCountryRegionType(salesTable.deliveryAddress());
        }
        else
        {
            deliveryCountryRegionType = partnerCountryRegionType;
        }

        lastInvoiceAccount  = salesTable.InvoiceAccount;
        lastDeliveryAddress = salesTable.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderChanged</Name>
				<Source><![CDATA[
    protected boolean isHeaderChanged()
    {
        boolean ret;

        if (super()
            || lastInvoiceAccount  != salesTable.InvoiceAccount
            || lastDeliveryAddress != salesTable.DeliveryPostalAddress)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseChargeGroupSet</Name>
				<Source><![CDATA[
    protected boolean isReverseChargeGroupSet()
    {
        return salesLine.TaxGroup == salesTaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected AmountMST lineAmount(RecId _lineRecId, Common _line = null)
    {
        AmountMST lineAmount;
        SalesLine salesLineLocal;

        if (_lineRecId
            && _lineRecId != salesLine.RecId
            && lineAmountMap.exists(_lineRecId))
        {
            lineAmount = lineAmountMap.lookup(_lineRecId);
        }
        else
        {
            if (prmisDefault(_line))
            {
                salesLineLocal = SalesLine::findRecId(_lineRecId);
            }
            else
            {
                salesLineLocal = _line;
            }

            lineAmount = CurrencyExchangeHelper::mstAmount(salesLineLocal.calcLineAmountExclTax(), salesLineLocal.CurrencyCode);

            if (_lineRecId)
            {
                lineAmountMap.insert(_lineRecId, lineAmount);
            }
            else
            {
                currentlineAmount = lineAmount;
            }
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineChanged</Name>
				<Source><![CDATA[
    protected void lineChanged()
    {
        super();

        itemGroupId = this.findGroupByItemCategory(
            ReverseChargePurchSales_W::Sales,
            salesLine.ItemId,
            salesLine.SalesCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderRecord</Name>
				<Source><![CDATA[
    protected void setHeaderRecord(Common _headerRecord)
    {
        super(_headerRecord);

        salesTable = _headerRecord as SalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineRecord</Name>
				<Source><![CDATA[
    protected void setLineRecord(Common _lineRecord)
    {
        super(_lineRecord);

        salesLine = _lineRecord as SalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroup</Name>
				<Source><![CDATA[
    protected void setReverseChargeGroup()
    {
        salesLine.TaxGroup = salesTaxGroup;
        this.setOverrideSalesTax(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReverseChargeGroupMatchingLines</Name>
				<Source><![CDATA[
    public void setReverseChargeGroupMatchingLines(boolean _fromHeader = false)
    {
        #OCCRetryCount
        SalesLine      salesLineLocal;
        SetEnumerator  se;
        boolean        researchDS;

        if (updateMatchingLines)
        {
            try
            {
                ttsBegin;

                if (ruleItemGroupId &&
                lineGroupMap    &&
                lineGroupMap.exists(ruleItemGroupId))
                {
                    se = lineGroupMap.lookup(ruleItemGroupId).getEnumerator();

                    while (se.moveNext())
                    {
                        if (_fromHeader || se.current() != salesLine.RecId)
                        {
                            salesLineLocal = SalesLine::findRecId(se.current(), true);

                            if (salesLineLocal && (salesLineLocal.TaxGroup != salesTaxGroup || this.needSetOverrideSalesTax(salesLineLocal)))
                            {
                                salesLineLocal.TaxGroup = salesTaxGroup;
                                this.setOverrideSalesTax(salesLineLocal);
                                salesLineLocal.update();

                                researchDS = true;
                            }
                        }
                    }
                }
                else
                {
                    while select forUpdate salesLineLocal
                        where salesLineLocal.SalesId == salesLine.SalesId
                            && (salesLineLocal.TaxGroup != salesTaxGroup || this.needSetOverrideSalesTax(salesLineLocal))
                            && (_fromHeader || salesLineLocal.RecId != salesLine.RecId)
                    {
                        if (this.checkItemGroupNoThreshold(
                                ReverseChargePurchSales_W::Sales,
                                salesLineLocal.ItemId,
                                salesLineLocal.SalesCategory))
                        {
                            salesLineLocal.TaxGroup = salesTaxGroup;
                            this.setOverrideSalesTax(salesLineLocal);
                            salesLineLocal.update();

                            researchDS = true;
                        }
                    }
                }

                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                throw error("@SYS93835");
            }

            FormObjectSet dataSource = FormDataUtil::getFormDataSource(salesLine);

            if (!_fromHeader && researchDS && dataSource)
            {
                dataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdByGroupUseDB</Name>
				<Source><![CDATA[
    protected AmountMST thresholdByGroupUseDB(ReverseChargeItemGroupId_W _ruleItemGroupId)
    {
        SalesLine                   salesLineLocal;
        ReverseChargeItemGroupId_W  lineGroupId;
        AmountMST                   threshold;

        if (_ruleItemGroupId)
        {
            lineGroupMap = new Map(Types::Int64, Types::Class);
        }

        while select salesLineLocal
        where salesLineLocal.SalesId == salesLine.SalesId &&
              salesLineLocal.RecId   != salesLine.RecId
        {
            if (_ruleItemGroupId)
            {
                lineGroupId = this.findGroupByItemCategory(ReverseChargePurchSales_W::Sales, salesLineLocal.ItemId, salesLineLocal.SalesCategory);

                this.addLineToCache(lineGroupId, salesLineLocal.RecId);
            }

            if (!_ruleItemGroupId || lineGroupId == _ruleItemGroupId)
            {
                threshold += this.lineAmount(salesLineLocal.RecId, salesLineLocal);
            }
        }

        return threshold;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>