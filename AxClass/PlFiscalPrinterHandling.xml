<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlFiscalPrinterHandling</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PlFiscalPrinterHandling
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelTransaction</Name>
				<Source><![CDATA[
    public boolean cancelTransaction(container _fpc = [''])
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmation</Name>
				<Source><![CDATA[
    public boolean confirmation(container _fpc = [''])
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmationEnd</Name>
				<Source><![CDATA[
    public boolean confirmationEnd(container _p1)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>connect</Name>
				<Source><![CDATA[
    public boolean connect(container _fpc = [''])
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWin2Maz</Name>
				<Source><![CDATA[
    public str convertWin2Maz(str variable)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayReport</Name>
				<Source><![CDATA[
    public boolean dayReport(container _fpc = [''])
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>disconect</Name>
				<Source><![CDATA[
    public boolean disconect(container _fpc = [''])
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentHeader</Name>
				<Source><![CDATA[
    public boolean documentHeader(container _fpc = [''])
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentLine</Name>
				<Source><![CDATA[
    public boolean documentLine(
        container             _fpc,
        PlFiscalDocumentTrans _trans)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorTxt</Name>
				<Source><![CDATA[
    public str errorTxt(container _fpc = [''])
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isError</Name>
				<Source><![CDATA[
    public boolean isError()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>libraryOk</Name>
				<Source><![CDATA[
    public boolean libraryOk()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PlFiscalPrinterHandling construct(PlFiscalPrinterType _fiscalPrinterType)
    {
        PlFiscalPrinterHandling ret = PlFiscalPrinterHandling::createPlFiscalPrinterHandling(_fiscalPrinterType);

        if (!ret)
        {
            throw error(strfmt("@SYS19306", funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlFiscalPrinterHandling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>PlFiscalPrinterHandling</c> depending on the fiscal printer type.
    /// </summary>
    /// <param name = "_fiscalPrinterType"></param>
    /// <returns>The <c>PlFiscalPrinterHandling</c> depending on the fiscal printer type.</returns>
    protected static PlFiscalPrinterHandling createPlFiscalPrinterHandling(PlFiscalPrinterType _fiscalPrinterType)
    {
        PlFiscalPrinterHandling ret;

        switch (_fiscalPrinterType)
        {
            case PlFiscalPrinterType::Elzab:
                ret = new PlFiscalPrinter_Elzab();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFiscalDoc</Name>
				<Source><![CDATA[
    #define.NumCount(10)
    public static void generateFiscalDoc(PlFiscalDocument _fiscalDocument)
    {
        PlFiscalDocument        updateFiscalDocument;
        PlFiscalDocumentExtension updateFiscalDocumentExtension;
        PlFiscalDocumentTrans   trans;
        RecordSortedList        transList;
        boolean                 err;
        AmountCur               invoiceAmount = 0;
        PlFiscalPrinterTable    fiscalPrinterTable;
        PlFiscalPrinterHandling fpH;
        int                     lineNo = 0;
        Name                    itemName;
        PlFiscalItemPrintCode   fiscalItemPrintCode = SalesParameters::find().FiscalItemPrintCode_PL;
        recId hcmWorkerId;
        PlFiscalPrinterWorkerSetup fiscalPrinterWorkerSetup;

        void first()
        {
            DictTable dict = new DictTable(_fiscalDocument.transTableID_W());

            if (! dict)
                throw error(Error::wrongUseOfFunction(funcname()));

            trans = dict.makeRecord();
            transList.first(trans);
        }

        hcmWorkerId = HcmWorker::userId2Worker(curUserId());

        if (! hcmWorkerId)
        {
            throw error("@GLS110160");
        }

        fiscalPrinterWorkerSetup = PlFiscalPrinterWorkerSetup::find(hcmWorkerId);
        fiscalPrinterTable = PlFiscalPrinterTable::find(fiscalPrinterWorkerSetup.FiscalPrinterCode);

        if (! fiscalPrinterTable.RecId)
        {
            throw error(strfmt("@GLS110161", curuserid()));
        }

        if (fiscalPrinterTable.FiscalPrinterType == PlFiscalPrinterType::Posnet && ! fiscalPrinterTable.FiscalPosnetPrinterType)
        {
            throw error(strfmt("@GLS110265", fiscalPrinterTable.FiscalPrinterCode));
        }

        if (fiscalPrinterTable.FiscalPrinterType == PlFiscalPrinterType::Elzab && _fiscalDocument.origInvoiceId_PL())
        {
            throw error("@GLS110242");
        }

        fpH = PlFiscalPrinterHandling::construct(fiscalPrinterTable.FiscalPrinterType);

        if (! fpH.libraryOk())
        {
            throw error(strfmt("@GLS110162", fiscalPrinterTable.FiscalPrinterCode));
        }

        transList = _fiscalDocument.transList_W();
        first();
        while (trans)
        {
            if (PlFiscalTaxTable::findFiscalTaxCode(trans.TaxGroup, trans.TaxItemGroup, fiscalPrinterTable.FiscalPrinterCode) == PlFiscalTaxCode::None)
            {
                throw error("@GLS109806");
            }

            invoiceAmount += trans.lineAmountInclTax();
            if (! transList.next(trans))
            {
                break;
            }
        }

        if (invoiceAmount != _fiscalDocument.InvoiceAmount)
        {
            throw error("@GLS109807");
        }

        if (! fpH.connect([ fiscalPrinterTable.FiscalPortNo ]))
        {
            throw error("@GLS110163");
        }

        fpH.documentHeader([ "@GLS110266" + _fiscalDocument.InvoiceId ]);

        first();
        while (trans)
        {
            lineNo ++;

            if (trans.itemId_W())
            {
                switch (fiscalItemPrintCode)
                {
                    case PlFiscalItemPrintCode::ConfigName:
                        if (trans.inventTable().configActive())
                        {
                            itemName = trans.inventDim().ConfigId;
                        }
                        else
                        {
                            itemName = trans.inventTable().defaultProductName();
                        }
                        break;

                    case PlFiscalItemPrintCode::ItemName:
                        itemName = trans.inventTable().defaultProductName();
                        break;

                    default:
                        itemName = trans.itemId_W();
                }
            }
            else
            {
                itemName = trans.Name;
            }

            itemName = fpH.convertWin2Maz(itemName);
            fpH.documentLine([ lineNo,
                               itemName,
                               strltrim(num2str(trans.qty_W(), #NumCount, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(trans.unit_W())), 1, 0)),
                               enum2str(PlFiscalTaxTable::findFiscalTaxCode(trans.TaxGroup, trans.TaxItemGroup, fiscalPrinterTable.FiscalPrinterCode)),
                               trans.priceAfterDisc_PL(),
                               trans.lineAmountInclTax() ],
                             trans);

            if (! transList.next(trans))
            {
                break;
            }
        }

        if (! fiscalPrinterTable.FiscalPosnetPrinterType || fiscalPrinterTable.FiscalPosnetPrinterType == PlFiscalPosnetPrinterType::OldSoft)
        {
            fpH.confirmation([ 0,
                               fiscalPrinterTable.FiscalPrinterPrintCode,
                               fiscalPrinterWorkerSetup.FiscalPrinterUserCode,
                               _fiscalDocument.InvoiceAmount,
                               _fiscalDocument.InvoiceAmount ]);
        }
        else
        {
            fpH.confirmationEnd([ 0,
                                  fiscalPrinterTable.FiscalPrinterPrintCode,
                                  fiscalPrinterWorkerSetup.FiscalPrinterUserCode,
                                  _fiscalDocument.InvoiceAmount,
                                  _fiscalDocument.InvoiceAmount,
                                  _fiscalDocument.InvoiceId ]);
        }

        if (fpH.isError())
        {
            Box::warning(fpH.errorTxt());
            fpH.cancelTransaction();
            err = true;
        }
        fpH.disconect();

        if (! err)
        {
            ttsbegin;

            updateFiscalDocument = new DictTable(_fiscalDocument.TableId).makeRecord();
            select firstonly forupdate updateFiscalDocument
                where updateFiscalDocument.RecId == _fiscalDocument.RecId;
            if (updateFiscalDocument.RecId)
            {
                updateFiscalDocumentExtension = updateFiscalDocument.PlFiscalDocument::getPlFiscalDocumentExtension();
                updateFiscalDocumentExtension.FiscalDocState = PlFiscalDocState::PrintedFiscalDocument;
                updateFiscalDocumentExtension.FiscalPrinterCode = fiscalPrinterTable.FiscalPrinterCode;
                updateFiscalDocument.PlFiscalDocument::packPlFiscalDocumentExtension(updateFiscalDocumentExtension);

                updateFiscalDocument.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    #define.DayRep("DayRep")
    public static void main(Args _args)
    {
        PlFiscalPrinterHandling     fpH;
        recId                       hcmWorkerId;
        PlFiscalPrinterWorkerSetup fiscalPrinterWorkerSetup;
        PlFiscalPrinterTable        fiscalPrinterTable;

        if (! _args)
        {
            throw error(strfmt("@SYS22828", funcname()));
        }

        hcmWorkerId = HcmWorker::userId2Worker(curUserId());

        if (! hcmWorkerId)
        {
            throw error("@GLS110160");
        }

        fiscalPrinterWorkerSetup = PlFiscalPrinterWorkerSetup::find(hcmWorkerId);
        fiscalPrinterTable = PlFiscalPrinterTable::find(fiscalPrinterWorkerSetup.FiscalPrinterCode);

        if (! fiscalPrinterTable.RecId)
        {
            throw error(strfmt("@GLS110161", curuserid()));
        }

        fpH = PlFiscalPrinterHandling::construct(fiscalPrinterTable.FiscalPrinterType);

        if (! fpH.libraryOk())
        {
            throw error(strfmt("@GLS110162", fiscalPrinterTable.FiscalPrinterCode));
        }

        if (! fpH.connect([fiscalPrinterTable.FiscalPortNo]))
        {
            throw error("@GLS110163");
        }

        switch (_args.parm())
        {
            case #DayRep   :
                fpH.dayReport([DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())]);
                if (fpH.isError())
                {
                    Box::warning(fpH.errorTxt());
                }
            break;
        }

        fpH.disconect();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>