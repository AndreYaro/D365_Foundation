<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLoyaltyProcessNonTransactionalTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class processes the non-transactional activities as a batch task.
/// </summary>
class RetailLoyaltyProcessNonTransactionalTask extends RunBaseBatch implements BatchRetryable
{
    RefRecId                   channelId;
    container                  packedNonTransactionalActivityIdList;

    #define.RetryNum(3)
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        packedNonTransactionalActivityIdList
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current lists of non-transactional activities.
    /// </summary>
    /// <returns>
    /// A container containing the current list of non-transactional activities.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedNonTransactionalActivityIdList</Name>
				<Source><![CDATA[
    public container parmPackedNonTransactionalActivityIdList(container _packedNonTransactionalActivityIdList = packedNonTransactionalActivityIdList)
    {
        packedNonTransactionalActivityIdList = _packedNonTransactionalActivityIdList;

        return packedNonTransactionalActivityIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNonTransactionalActivities</Name>
				<Source><![CDATA[
    private void processNonTransactionalActivities()
    {
        RetailLoyaltyCardRewardPointNonTransactionalActivity nonTransactionalActivity;

        Array       nonTransactionalIdList;
        int         i, lastIndex, recordAffected = 0;
        boolean     isSuccess;

        RetailTracer::Info(classStr(RetailLoyaltyProcessOfflineTask), funcName(), 'Start');

        // Unpack and process the list of non-transactional activities.
        nonTransactionalIdList = Array::create(this.parmPackedNonTransactionalActivityIdList());
        lastIndex = nonTransactionalIdList.lastIndex();

        for (i = 1; i <= lastIndex; i++)
        {
            try
            {
                ttsBegin;

                select crossCompany nonTransactionalActivity
                where nonTransactionalActivity.NonTransactionalActivityId == nonTransactionalIdList.value(i);

                isSuccess = this.processRewardPointTrans(nonTransactionalActivity);
                if (isSuccess)
                {
                    recordAffected++;
                }

                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }

        RetailTracer::Info(classStr(RetailLoyaltyProcessOfflineTask), funcName(), strfmt("@RET3001", recordAffected));
        RetailTracer::Info(classStr(RetailLoyaltyProcessOfflineTask), funcName(), 'End');
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRewardPointTrans</Name>
				<Source><![CDATA[
    private boolean processRewardPointTrans(RetailLoyaltyCardRewardPointNonTransactionalActivity _trans)
    {
        boolean isSuccess;
        str message;

        [isSuccess, message] = RetailLoyaltyManager::PostNonTransactionalLoyaltyPoints(_trans);

        if (!isSuccess)
        {
            error(message);
        }

        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.processNonTransactionalActivities();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="packedClass" /> parameter value to an instance of the
    /// <c>RetailLoyaltyProcessNonTransactionalTask</c> class.
    /// </summary>
    /// <param name="packedClass">
    /// The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    /// true if deserialization was successful; otherwise, false.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the class.
    /// </summary>
    /// <returns>
    /// The description of the class.
    /// </returns>
    public static ClassDescription description()
    {
        return "@Retail:ProcessNonTransactionalActivities";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailLoyaltyProcessNonTransactionalTask</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailLoyaltyProcessNonTransactionalTask</c>
    /// cannot be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>