<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSItemAndDimensionsOnHandInventoryStatusRetriever</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSItemAndDimensionsOnHandInventoryStatusRetriever</c> class is responsible for retrieving the inventory status from the on-hand inventory
/// based on the supplied item and inventory dimensions.
/// </summary>
internal final class WHSItemAndDimensionsOnHandInventoryStatusRetriever
{
    // Positions for elements in container used to find unique inventory status id for an on-hand quantity
    private const int ResultStatusPostition = 1;
    private const int ResultPostition = 2;
    // Values for ResultStatus
    private const int MultipleValues = 2;
    private const int SingleValue = 1;
    private const int NoValue = 0;

    private ItemId itemId;
    private InventDim inventDim;

    private boolean throwIfNoUniqueStatus;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemIdAndInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSItemAndDimensionsOnHandInventoryStatusRetriever newFromItemIdAndInventDim(ItemId _itemId, InventDim _inventDim)
    {
        var retriever = new WHSItemAndDimensionsOnHandInventoryStatusRetriever();
        
        retriever.itemId = _itemId;
        retriever.inventDim = _inventDim;

        return retriever;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowIfNoUniqueStatus</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmThrowIfNoUniqueStatus(boolean _throwIfNoUniqueStatus = throwIfNoUniqueStatus)
    {
        throwIfNoUniqueStatus = _throwIfNoUniqueStatus;

        return throwIfNoUniqueStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveInventoryStatusId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WhsInventStatusId retrieveInventoryStatusId()
    {
        container res = this.getInventStatusWithPhysicalOnHand();

        if (throwIfNoUniqueStatus
            && conPeek(res, ResultStatusPostition) == MultipleValues)
        {
            throw error("@WAX:ErrorCannotResolveUniqueInventoryStatus");
        }

        return conPeek(res, ResultPostition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventStatusWithPhysicalOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Inventory status for a physical on-hand quantity.
    /// </summary>
    /// <returns>
    /// Container with two elements:
    ///     An integer indicating if zero, one or multiple quantities are found with different inventory statuses
    ///     The <c>WhsInventStatusId</c> in case a single status could be resolved; otherwise empty string
    /// </returns>
    private container getInventStatusWithPhysicalOnHand()
    {
        InventDimParm       inventDimParm;
        WhsInventStatusId   inventStatusId;
        InventDim           inventDimJoin;
        counter             inventoryStatusCount;

        inventDimParm.initFromInventDim(inventDim);

        if ((itemId && InventUpdateOnhandGlobal::mustAddInventSumDeltaOnhand(itemId))
            || (!itemId && InventUpdateOnhandGlobal::instance().inventUpdateOnhand().mustAddAnyInventSumDeltaOnhand()))
        {
            InventSumUnionDeltaPhysicalQty inventSumUnionDeltaPhysicalQty;

            while select firstOnly10 tableId from inventSumUnionDeltaPhysicalQty
                group by inventDimJoin.InventStatusId
                where (!itemId || inventSumUnionDeltaPhysicalQty.ItemId == itemId)
                    &&    inventSumUnionDeltaPhysicalQty.PhysicalInvent > 0
                #inventDimInnerJoin(inventSumUnionDeltaPhysicalQty.InventDimId, inventDimJoin, inventDim, inventDimParm)
                    && inventDimJoin.InventStatusId != ''
            {
                inventStatusId = inventDimJoin.InventStatusId;
                inventoryStatusCount++;

                if (inventoryStatusCount > 1)
                {
                    break;
                }
            }
        }
        else
        {
            InventSum inventSum;

            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select firstOnly10 tableId from inventSum
                    group by inventSum.InventStatusId
                    where   (!itemId || inventSum.ItemId == itemId)
                        &&  inventSum.PhysicalInvent	 > 0
                        &&  inventSum.ClosedQty		    == NoYes::No
                        &&  #inventDimFieldsFilter(inventSum, inventDim, inventDimParm)
                        &&  inventSum.InventStatusId    != ''
                {
                    inventStatusId = inventSum.InventStatusId;
                    inventoryStatusCount++;

                    if (inventoryStatusCount > 1)
                    {
                        break;
                    }
                }
            }
            else
            {
                while select firstOnly10 tableId from inventSum
                    group by inventDimJoin.InventStatusId
                    where (!itemId || inventSum.ItemId == itemId)
                        &&    inventSum.PhysicalInvent	> 0
                        &&    inventSum.ClosedQty		== NoYes::No
                    #inventDimInnerJoin(inventSum.InventDimId, inventDimJoin, inventDim, inventDimParm)
                        && inventDimJoin.InventStatusId != ''
                {
                    inventStatusId = inventDimJoin.InventStatusId;
                    inventoryStatusCount++;

                    if (inventoryStatusCount > 1)
                    {
                        break;
                    }
                }
            }
        }

        container res;
        switch (inventoryStatusCount)
        {
            case 0:
                res = [NoValue, ''];
                break;

            case 1:
                res = [SingleValue, inventStatusId];
                break;

            case 2:
                res = [MultipleValues, ''];
                break;
        }

        return res;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>