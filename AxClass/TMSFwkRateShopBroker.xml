<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkRateShopBroker</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Xml.Linq;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;

/// <summary>
/// The <c>TMSFwkRateShopBroker</c> class performs rate shopping.
/// </summary>
public class TMSFwkRateShopBroker extends TMSFwkBaseRateBroker
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>rateEntity</Name>
				<Source><![CDATA[
    public void rateEntity(TmsTransactionFacade _transactionFacade, XElement _entity)
    {
        System.Exception ex;
        try
        {
            // see if there is a transportation template override
            TMSTransportationTemplate transportationTemplate = TMSFwkTransportationTemplateService::processShipTransportationTemplate(_transactionFacade, _entity);
            var ratingDTOs = TMSFwkRatingService::retrieveRatingDtoList(_transactionFacade, _entity);

            // constraints
            this.parmRatingService().processConstraints(_transactionFacade, _entity, ratingDTOs);

            // rate
            if (!transportationTemplate.ShipRoutePlanCode && !this.spotRatesExist(_entity) && !this.isManualFreightRate(_entity))
            {
                TMSFwkRatingService::rateEntity(_transactionFacade, _entity, ratingDTOs);
            }

            // transit time needs to be calculated before accessorial charges - accessorial charges may depend on transit time data
            this.parmRatingService().processTransitTime(_transactionFacade, _entity, ratingDTOs);

            // accessorials, this should be after rating
            this.parmRatingService().processAccessorialCharges(_transactionFacade, _entity, ratingDTOs);

            // discounts
            TMSFwkDiscountService::processDiscounts(_transactionFacade, _entity, ratingDTOs);

            TMSFwkRatingService::addCustomerChargeForDirectDelivery(_entity, ratingDTOs);

            TMSFwkRatingService::fillMissingRates(_entity, ratingDTOs);
        }
        catch (ex)
        {
            _transactionFacade.parmXTransaction().GenerateElementForXPath(EntityXmlConstants::RatingEntities, EntityXmlConstants::RatingEntity)
                .AddError(StringHelpers::FormatError(TMSFwkErrorDtoBuilderGeneral::buildTechnicalError(), ex.ToString()));
            TMSException::ThrowException("@TRX2583", ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>spotRatesExist</Name>
				<Source><![CDATA[
    private boolean spotRatesExist(XElement _entity)
    {
        var spotRates = new XElementList(_entity.Descendants(GenericEngineConstants::SpotRate))
            .WhereStringValue(GenericEngineConstants::SpotRatesY);

        return spotRates.Count > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isManualFreightRate</Name>
				<Source><![CDATA[
    private boolean isManualFreightRate(XElement _entity)
    {
        boolean retValue = false;

        var freightRates = new XElementList(_entity.Descendants(ElementXmlConstants::Rate))
            .WhereMatchingIntElement(ElementXmlConstants::RateType, TmsRateType::Rate);

        XElementListEnumerator freightRateEnumerator = freightRates.GetListEnumerator();
        while (freightRateEnumerator.MoveNext())
        {
            if (freightRateEnumerator.Current().GetBool(ElementXmlConstants::User))
            {
                retValue = true;
                break;
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>