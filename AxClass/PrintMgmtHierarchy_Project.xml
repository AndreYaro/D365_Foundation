<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtHierarchy_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PrintMgmtHierarchy_Project</c> class is responsible for managing the Project hierarchy.
/// </summary>
/// <remarks>
///    The <c>PrintMgmtHierarchy_Project</c> class manages the defaulting hierarchy for the Accounts
///    Payable module. It manages Print Management data for transactions, customers and the entire
///    module-level.
/// </remarks>
public class PrintMgmtHierarchy_Project extends PrintMgmtHierarchy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodesImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds valid nodes for the <c>PrintMgmtHierarchy_Project</c> class.
    /// </summary>
    /// <returns>
    ///    A list of <c>PrintMgmtNodeType</c> enumeration values that specify the valid nodes forthe
    ///    <c>PrintMgmtHierarchy_Project</c> class hierarchy.
    /// </returns>
    /// <remarks>
    ///    The valid nodes for this hierarchy are <c>PrintMgmtNode_Project</c>, <c>PrintMgmtNode_CustTable</c>
    ///    and <c>PrintMgmtNode_ProjInvoiceTable</c>.
    /// </remarks>
    protected List getNodesImplementation()
    {
        List supportedNodes = new List(Types::Enum);

        // Add allowable nodes for this hierarchy
        supportedNodes.addEnd(PrintMgmtNodeType::Project);
        supportedNodes.addEnd(PrintMgmtNodeType::CustTable);
        supportedNodes.addEnd(PrintMgmtNodeType::ProjInvoiceTable);
        supportedNodes.addEnd(PrintMgmtNodeType::ProjProposalJour);
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            supportedNodes.addEnd(PrintMgmtNodeType::ProjectQuotation);
        }
        return supportedNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the parent node instance based on the information passed in as parameters.
    /// </summary>
    /// <param name="_nodeInstance">
    ///    The instance of the <c>PrintMgmtNodeInstance</c> class for which the parent is being requested.
    /// </param>
    /// <param name="_docType">
    ///    The <c>PrintMgmtDocumentType</c> enumeration value that is used to determine the appropriate parent.
    /// </param>
    /// <returns>
    ///    An instance of the parent <c>PrintMgmtNodeInstance</c> class; otherwise, null.
    /// </returns>
    /// <remarks>
    ///    The parent returned can vary on the table being referenced by the <paramref name="_nodeInstance" />
    ///    parameter and the <paramref name="_docType" /> parameter being requested
    /// </remarks>
    protected PrintMgmtNodeInstance getParentImplementation(PrintMgmtNodeInstance _nodeInstance, PrintMgmtDocumentType _docType)
    {
        // Find the appropriate parent
        PrintMgmtNodeInstance   result;
        ProjInvoiceTable        projInvoiceTable;
        ProjFundingSource       projFundingSource;
        ProjProposalJour        invoiceProposal;
        SalesQuotationTable     salesQuotationTable;
        CustTable               custTable;

        result = new PrintMgmtNodeInstance();

        // Get the node instance type
        switch (_nodeInstance.parmNodeDefinition().getNodeType())
        {
            case PrintMgmtNodeType::ProjectQuotation:
                salesQuotationTable = _nodeInstance.parmReferencedTableBuffer();
                if (salesQuotationTable.ProjInvoiceProjId)
                {
                    projInvoiceTable = ProjInvoiceTable::find(salesQuotationTable.ProjInvoiceProjId);
                }
                else if (salesQuotationTable.CustAccount)
                {
                    custTable = CustTable::find(salesQuotationTable.CustAccount);
                }
                if (projInvoiceTable)
                {
                    result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::ProjInvoiceTable));
                    result.parmReferencedTableBuffer(projInvoiceTable);
                }
                else if (custTable)
                {
                    result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::CustTable));
                    result.parmReferencedTableBuffer(custTable);
                }
                else
                {
                    result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::Project));
                    result.parmReferencedTableBuffer(null);
                }
                break;

            case PrintMgmtNodeType::ProjProposalJour:
                invoiceProposal  = _nodeInstance.parmReferencedTableBuffer();

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::ProjInvoiceTable));
                result.parmReferencedTableBuffer(invoiceProposal.selectRefRecord(fieldNum(ProjProposalJour, ProjInvoiceProjId)));
                break;
            case PrintMgmtNodeType::ProjInvoiceTable:
                projInvoiceTable = _nodeInstance.parmReferencedTableBuffer();
                projFundingSource = ProjFundingSource::findCustAccount(projInvoiceTable.ProjInvoiceProjId);

                if (this.shouldGetRelatedCustTableRecord(_nodeInstance, _docType) && (strLen(projFundingSource.CustAccount) != 0))
                {
                    // Get the related CustTable record because the relation on CustAccount field is with CustTable table.
                    result.parmReferencedTableBuffer(projFundingSource.selectRefRecord(fieldNum(ProjFundingSource, CustAccount)));
                }
                else
                {
                    // No specific "instance" present
                    result.parmReferencedTableBuffer(null);
                }

                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::CustTable));
                break;

            case PrintMgmtNodeType::CustTable:
                // No record to reference, but there is another node in the hierarchy
                result.parmReferencedTableBuffer(null);
                result.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::Project));
                break;

            case PrintMgmtNodeType::Project:
                // When no parent is present, return null
                result = null;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldGetRelatedCustTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the related <c>CustTable</c> record should be found.
    /// </summary>
    /// <param name="_nodeInstance">
    ///    The instance of the <c>PrintMgmtNodeInstance</c> class for which the parent is being requested.
    /// </param>
    /// <param name="_docType">
    ///    The <c>PrintMgmtDocumentType</c> enumeration value that is used to determine the appropriate parent.
    /// </param>
    /// <returns>
    ///    true if the related <c>CustTable</c> record should be found; otherwise, false.
    /// </returns>
    protected boolean shouldGetRelatedCustTableRecord(PrintMgmtNodeInstance _nodeInstance, PrintMgmtDocumentType _docType)
    {
        return (_docType == PrintMgmtDocumentType::ProjectInvoice                      ||
                    _docType == PrintMgmtDocumentType::SIProjInvoice                   ||
                    _docType == PrintMgmtDocumentType::SIProjInvoiceWithBR             ||
                    _docType == PrintMgmtDocumentType::SIManagedProjInvoice            ||
                    _docType == PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice ||
                    _docType == PrintMgmtDocumentType::ProjectQuotation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>PrintMgmtHierarchy_Project</c> class.
    /// </summary>
    /// <remarks>
    ///    Call the <c>construct</c> method of the <c>PrintMgmtHierarchy</c> class and pass the appropriate
    ///    hierarchy type to construct this class.
    /// </remarks>
    void new()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>