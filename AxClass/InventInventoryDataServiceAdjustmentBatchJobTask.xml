<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceAdjustmentBatchJobTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceAdjustmentBatchJobTask extends InventInventoryDataServiceBatchJobTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    internal System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventInventoryDataServiceAdjustmentBatchJobTask),
                                                          staticMethodStr(InventInventoryDataServiceAdjustmentBatchJobTask, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    protected static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventInventoryDataServiceAdjustmentBatchJobTask dataCollectionTask = new InventInventoryDataServiceAdjustmentBatchJobTask();
        container packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.runProcessAdjustmentQueue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessAdjustmentQueue</Name>
				<Source><![CDATA[
    public void runProcessAdjustmentQueue()
    {
        List adjustmentEvents = InventInventoryDataServiceOnhandAdjustmentQueueTemp::generateAdjustmentEvents(minRecId, maxRecId);

        if (!adjustmentEvents.empty())
        {
            this.postAdjustmentEventList(adjustmentEvents);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAdjustmentEventList</Name>
				<Source><![CDATA[
    protected void postAdjustmentEventList(List adjustmentEvents)
    {
        var inventoryServiceClient = new InventoryServiceClient();
        var inventInventoryDataServiceInstrumentationActivity = logger.getInventoryDataServiceActivity();
        using (var activityContext = inventInventoryDataServiceInstrumentationActivity.getActivityContext_PostAdjustment())
        {
            InventInventoryDataServiceOnhandAdjustmentQueueTemp adjustmentQueueTemp;
            InventInventoryDataServiceBulkPostingResponse responses;
            var correlationId = '';
            try
            {
                try
                {
                    responses = inventoryServiceClient.postInventAdjustments(adjustmentEvents);
                }
                catch
                {
                    if (InventInventoryDataServiceRetryHelper::retryTransientError())
                    {
                        retry;
                    }
                    else
                    {
                        throw;
                    }
                }

                correlationId = responses.parmCorrelationId();
                ListEnumerator failureResponseEnum =  (responses.parmFailure()).getEnumerator();
                str failedRecIdsAndErrorMessages = '';

                ttsbegin;
                while(failureResponseEnum.moveNext())
                {
                    InventInventoryDataServicePostingResponse failureResponse = failureResponseEnum.current() as InventInventoryDataServicePostingResponse;
                    while select forupdate adjustmentQueueTemp
                            where adjustmentQueueTemp.EventId == failureResponse.parmId()
                    {
                        adjustmentQueueTemp.PostFailed = true;
                        adjustmentQueueTemp.update();
                        failedRecIdsAndErrorMessages += int642Str(adjustmentQueueTemp.RecId) + ': ';
                        failedRecIdsAndErrorMessages += failureResponse.parmMessage() + '; ';
                    }
                }
                ttscommit;

                NoYes postSuccessed = failedRecIdsAndErrorMessages == '' ? NoYes::Yes : NoYes::No;
                inventInventoryDataServiceInstrumentationActivity.logPostAdjustmentEventInfo(activityContext, minRecId, maxRecId, postSuccessed, correlationId, failedRecIdsAndErrorMessages);
            }
            catch
            {
                ttsbegin;
                update_recordset adjustmentQueueTemp
                    setting PostFailed = true
                    where adjustmentQueueTemp.RecId >= minRecId
                        && adjustmentQueueTemp.RecId <= maxRecId;
                ttscommit;

                inventInventoryDataServiceInstrumentationActivity.logPostAdjustmentEventInfo(activityContext, minRecId, maxRecId, NoYes::No, correlationId, 'Post request failed. Please find more information for this request on Kusto.');
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>