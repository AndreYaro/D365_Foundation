<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetAcquisitionDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Report Data Provider <c>RAssetAcquisitionDP</c> class for <c>RAssetAcquisition</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(RAsset)),
    SRSReportParameterAttribute(classStr(RAssetSRSReportContract))
]
class rAssetAcquisitionDP extends SRSReportDataProviderBase
{
    RAssetAcquisitionTMP    rAssetAcquisitionTMP;
    TransDate               rAssetTransDate;
    RAssetStandardId        rAssetStandardId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRAssetAcquisitionTmp</Name>
				<Source><![CDATA[
        /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// Temporary table <c>RAssetListingTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(RAssetAcquisitionTMP))
    ]
    public RAssetAcquisitionTMP getRAssetAcquisitionTmp()
    {
        return rAssetAcquisitionTMP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRAssetAcquisitionTmp</Name>
				<Source><![CDATA[
        /// <summary>
    ///     Inserts all the values into the <c>rAssetAcquisitionTmp</c> temporary table.
    /// </summary>
    /// <param name="_rAssetStandards">
    /// Passes <c>RAssetStandards</c> table object.
    /// </param>
    private void insertRAssetAcquisitionTmp(RAssetStandards _rAssetStandards)
    {
        RAssetTable         rAssetTable = RAssetTable::find(_rAssetStandards.AssetId);
        RAssetSumCalc       rAssetSum = RAssetSumCalc_Trans::newAssetPeriod(_rAssetStandards.AssetId, rAssetStandardId, rAssetTransDate);

        rAssetAcquisitionTMP.clear();
        rAssetAcquisitionTMP.AssetMainGroupId   = rAssetTable.AssetGroup;
        rAssetAcquisitionTMP.AssetGroupId       = _rAssetStandards.AssetGroup;
        rAssetAcquisitionTMP.AssetId            = _rAssetStandards.AssetId;
        rAssetAcquisitionTMP.AssetSubGroupId    = _rAssetStandards.SubGroupId;
        rAssetAcquisitionTMP.AssetName          = rAssetTable.Name;
        rAssetAcquisitionTMP.CurrencyCode       = _rAssetStandards.CurrencyCode;
        rAssetAcquisitionTMP.AcquisitionDate    = rAssetTable.AcquisitionDate;
        rAssetAcquisitionTMP.AcquisitionValue   = rAssetSum.acquisitionValue();
        rAssetAcquisitionTMP.AcquisitionPrice   = _rAssetStandards.AcquisitionPrice;
        rAssetAcquisitionTMP.AssetGroupTypes    = RAssetMainGroup::find(rAssetTable.AssetGroup).GroupType;
        rAssetAcquisitionTMP.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
        /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                qr;
        QueryBuildDataSource    qbs;
        RAssetStandards         rAssetStandards;

        RAssetSRSReportContract contract = this.parmDataContract() as RAssetSRSReportContract;

        rAssetTransDate     = contract.parmRAssetTransDate();
        rAssetStandardId    = contract.parmRAssetStandardId();

        qr  = new QueryRun(this.parmQuery());
        qbs = qr.query().dataSourceTable(tableNum(RAssetStandards));
        SysQuery::findOrCreateRange(qbs,fieldNum(RAssetStandards, AssetStandardId)).value(rAssetStandardId);

        qbs = qbs.addDataSource(tableNum(RAssetTrans));
        qbs.fetchMode(JoinMode::ExistsJoin);
        qbs.relations(true);
        qbs.addRange(fieldNum(RAssetTrans, AssetTransType)).value(queryValue(RAssetTransType::Acquisition));
        qbs.addRange(fieldNum(RAssetTrans, TransDate)).value(SysQuery::range(dateNull(), rAssetTransDate));
        qbs.addRange(fieldNum(RAssetTrans, StornoRecId)).value(queryValue(0));
        while(qr.next())
        {

            rAssetStandards = qr.get(tableNum(RAssetStandards));
            this.insertRAssetAcquisitionTmp(rAssetStandards);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>