<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowTimeSeriesTransformationPipeline</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal static class CashFlowTimeSeriesTransformationPipeline
{
    private const TableId ResultTableId = tableNum(CashFlowTimeSeriesResult);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>transformAggregatesToTimeSeries</Name>
				<Source><![CDATA[
    internal static void transformAggregatesToTimeSeries()
    {
        ttsbegin;
        CashFlowTimeSeriesTransformationPipeline::deleteStaleRows();
        ttscommit;

        // inflow
        TimeSeriesId inflow = CashFlowInsightsParameterConstants::InflowTimeSeriesId;

        ttsbegin;
        CashFlowTimeSeriesTransformationPipeline::updateExistingRows(inflow);
        CashFlowTimeSeriesTransformationPipeline::insertNotExistingRows(inflow);
        ttscommit;

        // outflow
        TimeSeriesId outflow = CashFlowInsightsParameterConstants::OutflowTimeSeriesId;

        ttsbegin;
        CashFlowTimeSeriesTransformationPipeline::updateExistingRows(outflow);
        CashFlowTimeSeriesTransformationPipeline::insertNotExistingRows(outflow);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingRows</Name>
				<Source><![CDATA[
    private static void updateExistingRows(TimeSeriesId _timeSeriesId)
    {
        CashFlowForecastTimeSeriesBalance balance;
        CashFlowTimeSeries cashFlowTimeSeries;

        const NoYes IsActuals = NoYes::Yes;
        const NoYes IsOpeningBalance = NoYes::No;

        if (_timeSeriesId == CashFlowInsightsParameterConstants::InflowTimeSeriesId)
        {
            update_recordset cashFlowTimeSeries
                setting
                    AmountMST = balance.AccountingCurrencyAmountIn
                join balance
                    where cashFlowTimeSeries.TimeSeriesId == _timeSeriesId
                        && cashFlowTimeSeries.CashFlowDate == balance.AccountingDate
                        && cashFlowTimeSeries.CashFlowDimension == balance.DefaultDimension
                        && cashFlowTimeSeries.MainAccount == balance.MainAccount
                        && cashFlowTimeSeries.AmountMST != balance.AccountingCurrencyAmountIn  // This ensures we don't fire unecessary updates (affects trickle feed).
                        && balance.IsActuals == IsActuals
                        && balance.IsOpeningBalance == IsOpeningBalance;
        }
        else if (_timeSeriesId == CashFlowInsightsParameterConstants::OutflowTimeSeriesId)
        {
            update_recordset cashFlowTimeSeries
                setting
                    AmountMST = balance.AccountingCurrencyAmountOut
                join balance
                    where cashFlowTimeSeries.TimeSeriesId == _timeSeriesId
                        && cashFlowTimeSeries.CashFlowDate == balance.AccountingDate
                        && cashFlowTimeSeries.CashFlowDimension == balance.DefaultDimension
                        && cashFlowTimeSeries.MainAccount == balance.MainAccount
                        && cashFlowTimeSeries.AmountMST != balance.AccountingCurrencyAmountOut  // This ensures we don't fire unecessary updates (affects trickle feed).
                        && balance.IsActuals == IsActuals
                        && balance.IsOpeningBalance == IsOpeningBalance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNotExistingRows</Name>
				<Source><![CDATA[
    private static void insertNotExistingRows(TimeSeriesId _timeSeriesId)
    {
        CashFlowForecastTimeSeriesBalance balance;
        CashFlowTimeSeries cashFlowTimeSeries;

        const NoYes IsActuals = NoYes::Yes;
        const NoYes IsOpeningBalance = NoYes::No;

        // branch here because we can't pass in the fieldNum for accountingcurrencyamount
        if (_timeSeriesId == CashFlowInsightsParameterConstants::InflowTimeSeriesId)
        {
            insert_recordset cashFlowTimeSeries (TimeSeriesId, CashFlowDate, CashFlowDimension, MainAccount, AmountMST)
                select _timeSeriesId, AccountingDate, DefaultDimension, MainAccount, AccountingCurrencyAmountIn from balance
                    where balance.AccountingCurrencyAmountIn != 0
                        && balance.IsActuals == IsActuals
                        && balance.IsOpeningBalance == IsOpeningBalance
                    notexists join cashFlowTimeSeries
                        where cashFlowTimeSeries.TimeSeriesId == _timeSeriesId
                            && cashFlowTimeSeries.CashFlowDate == balance.AccountingDate
                            && cashFlowTimeSeries.CashFlowDimension == balance.DefaultDimension
                            && cashFlowTimeSeries.MainAccount == balance.MainAccount;
        }
        else if (_timeSeriesId == CashFlowInsightsParameterConstants::OutflowTimeSeriesId)
        {
            insert_recordset cashFlowTimeSeries (TimeSeriesId, CashFlowDate, CashFlowDimension, MainAccount, AmountMST)
                select _timeSeriesId, AccountingDate, DefaultDimension, MainAccount, AccountingCurrencyAmountOut from balance
                    where balance.AccountingCurrencyAmountOut != 0
                        && balance.IsActuals == IsActuals
                        && balance.IsOpeningBalance == IsOpeningBalance
                    notexists join cashFlowTimeSeries
                        where cashFlowTimeSeries.TimeSeriesId == _timeSeriesId
                            && cashFlowTimeSeries.CashFlowDate == balance.AccountingDate
                            && cashFlowTimeSeries.CashFlowDimension == balance.DefaultDimension
                            && cashFlowTimeSeries.MainAccount == balance.MainAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteStaleRows</Name>
				<Source><![CDATA[
    private static void deleteStaleRows()
    {
        CashFlowForecastTimeSeriesBalance balance;
        CashFlowTimeSeries cashFlowTimeSeries;

        const NoYes IsActuals = NoYes::Yes;
        const NoYes IsOpeningBalance = NoYes::No;

        delete_from cashFlowTimeSeries
            notexists join balance
                where cashFlowTimeSeries.CashFlowDate == balance.AccountingDate
                    && cashFlowTimeSeries.CashFlowDimension == balance.DefaultDimension
                    && cashFlowTimeSeries.MainAccount == balance.MainAccount
                    && balance.IsOpeningBalance == IsOpeningBalance
                    && balance.IsActuals == IsActuals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewResultBalanceRecords</Name>
				<Source><![CDATA[
    private static void insertNewResultBalanceRecords()
    {
        CashFlowForecastTimeSeriesResultBalanceTmp unCollapsed;

        CashFlowForecastTimeSeriesResultBalanceInsertTmpResults::newForInFlow(unCollapsed).execute();
        CashFlowForecastTimeSeriesResultBalanceInsertTmpResults::newForOutFlow(unCollapsed).execute();

        CashFlowForecastTimeSeriesResultBalance result;
        
        insert_recordset result (Company, AccountingDate, MainAccount, DefaultDimension,
            AccountingCurrencyAmountIn, EnterpriseCurrencyAmountIn, AccountingCurrencyAmountOut, EnterpriseCurrencyAmountOut)
            select Company, AccountingDate, MainAccount, DefaultDimension,
                sum(AccountingCurrencyAmountIn), sum(EnterpriseCurrencyAmountIn), sum(AccountingCurrencyAmountOut), sum(EnterpriseCurrencyAmountOut) 
            from unCollapsed
                group by Company, AccountingDate, MainAccount, DefaultDimension;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingResultBalanceRecords</Name>
				<Source><![CDATA[
    private static void updateExistingResultBalanceRecords()
    {
        CashFlowForecastTimeSeriesResultBalanceUpdateResults::newForInFlow().execute();
        CashFlowForecastTimeSeriesResultBalanceUpdateResults::newForOutFlow().execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformResultToResultBalance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void transformResultToResultBalance()
    {
        CashFlowTimeSeriesTransformationPipeline::updateExistingResultBalanceRecords();
        CashFlowTimeSeriesTransformationPipeline::insertNewResultBalanceRecords();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>