<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCost_CalcProdFlowBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCost_CalcProdFlowBase</c> class represents the base class for running backflush costing of a single production flow order.
/// </summary>
/// <remarks>
///    For each production flow that must be backflush costing, a separate instance of this class will be
///    created to trigger it.
/// </remarks>
public abstract class LeanCost_CalcProdFlowBase extends LeanCost
{
    LeanProductionFlowCostingRefRecId           leanProductionFlowCostingRecId;
    LeanProductionFlowCosting                   leanProductionFlowCosting;
    LeanProductionFlowReference                 leanProductionFlowReference;

    LeanCostLogger                              logger;

    boolean                                     isResumed;

    private CostManagementInstrumentation       instrumentation;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        leanProductionFlowCostingRecId,
        isResumed
    #ENDMACRO
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkStatus</Name>
				<Source><![CDATA[
        /// <summary>
        ///    Validates that a lean production flow costing record has been initialized and that the status is
        ///    not ended.
        /// </summary>
        /// <returns>
        ///    true if a lean production flow costing record exists; otherwise false.
        /// </returns>
        protected boolean checkStatus()
        {
            boolean ret = super();

            if (ret && !leanProductionFlowCosting.RecId)
            {
                error("@SYS301724");
                ret = false;
            }

            if (ret && !leanProductionFlowReference.RecId)
            {
                error("@SYS301725");
                ret = false;
            }

            if (ret && leanProductionFlowCosting.Status == LeanProductionFlowCostingStatus::Ended)
            {
                error(strFmt("@SYS301726", leanProductionFlowCosting.displayProductionFlowName()));
                ret = false;
            }

            return ret;
        }

]]></Source>
			</Method>
			<Method>
				<Name>initLogger</Name>
				<Source><![CDATA[
        /// <summary>
        /// Initializes the logger.
        /// </summary>
        protected void initLogger()
        {
            logger = LeanCostLogger::newFromLeanProductionFlowCostingRecId(leanProductionFlowCostingRecId);
        }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
        /// <summary>
        ///    Performs the backflush costing.
        /// </summary>
        protected void execute()
        {
            CostManagementInstrumentationLogger LeanCost_CalcProdFlow_Base_Logger = CostManagementInstrumentationLogger::createLogger(classStr(LeanCost_CalcProdFlowBase));

            using (var backflushCostingActivityContext = LeanCost_CalcProdFlow_Base_Logger.backflushCostingActivities().executeBase(
                                                                ProdParameters::find().LeanCostSplitLedgerVoucherTransactions,
                                                                ProdParameters::find().LeanCostEnableFullBatchParallelization,
                                                                LedgerVoucherPostPersistable::isLedgerPostPersistableSupported(),
                                                                this.isInBatch(),
                                                                this.isResumed))
            {
                setPrefix(strFmt("@SYS313425", leanProductionFlowCosting.displayProductionFlowName()));

                if (this.checkStatus())
                {
                    this.updateWIP();

                    this.getUnusedQty();

                    this.runVarianceCalculation();
                }
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>persistLog</Name>
				<Source><![CDATA[
        /// <summary>
        /// Persists the logs.
        /// </summary>
        protected void persistLog()
        {
            ProdParameters parameters = ProdParameters::find();

            if (!this.isInBatch()
            || !parameters.LeanCostSplitLedgerVoucherTransactions
            || !parameters.LeanCostEnableFullBatchParallelization)
            {
                logger.persistLog();
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>updateWIP</Name>
				<Source><![CDATA[
        /// <summary>
        ///    Triggers the recalculation of the Work-In-Progress (WIP) balances.
        /// </summary>
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void updateWIP()
        {
            // Now update the prodCalcTrans
            LeanWIPBalanceUpdate::updateBalances(leanProductionFlowReference, leanCosting.ToDate);
        }

]]></Source>
			</Method>
			<Method>
				<Name>runVarianceCalculation</Name>
				<Source><![CDATA[
        /// <summary>
        /// Runs the variance calculation process.
        /// </summary>
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected abstract void runVarianceCalculation()
        {
        }

]]></Source>
			</Method>
			<Method>
				<Name>getUnusedQty</Name>
				<Source><![CDATA[
        /// <summary>
        /// Retrieves the unused quantities from the production flow.
        /// </summary>
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected abstract void getUnusedQty()
        {
        }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
        {
            return [#CurrentVersion,#CurrentList] + [super()];
        }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanProductionFlowCostingRecId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RecId parmLeanProductionFlowCostingRecId(RecId _leanProductionFlowCostingRecId = leanProductionFlowCostingRecId)
        {
            leanProductionFlowCostingRecId = _leanProductionFlowCostingRecId;

            return leanProductionFlowCostingRecId;
        }

]]></Source>
			</Method>
			<Method>
				<Name>rereadRecords</Name>
				<Source><![CDATA[
        /// <summary>
        ///    Retrieves the record IDs for the lean costing record from the database.
        /// </summary>
        /// <remarks>
        ///    This is performed so that the current version of the records is always available.
        /// </remarks>
        protected void rereadRecords()
        {
            super();

            // Necessary to serialize based on the usage of this record
            select firstonly pessimisticlock leanProductionFlowCosting where leanProductionFlowCosting.RecId == leanProductionFlowCostingRecId;

            leanProductionFlowReference = LeanProductionFlowReference::find(leanProductionFlowCosting.LeanProductionFlowReference);
        }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container  _packedClass)
        {
            Integer  version = conPeek(_packedClass,1);

            switch (version)
            {
                case #CurrentVersion:
                    container base;
                    [version, #CurrentList, base]        = _packedClass;
                    return super(base);
                default:
                    return false;
            }
        }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static ClassDescription description()
        {
            return "@SYS301730";
        }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
        protected boolean canRunInNewSession()
        {
            return true;
        }

]]></Source>
			</Method>
			<Method>
				<Name>setIsResumed</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void setIsResumed(boolean _isResumed)
        {
            isResumed = _isResumed;
        }

]]></Source>
			</Method>
			<Method>
				<Name>clearUnusedQty</Name>
				<Source><![CDATA[
        protected void clearUnusedQty()
        {
            LeanProductionFlowCostingUnusedQty obsoleteCostingUnusedQty;
            
            delete_from obsoleteCostingUnusedQty where obsoleteCostingUnusedQty.LeanProductionFlowCosting == leanProductionFlowCosting.RecId;
        }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        /// <summary>
        /// Creates an instance of the <c>LeanCost_CalcProdFlowBase</c> class.
        /// </summary>
        /// <param name="_leanCostingFacade">
        /// The instance of the <c>LeanCostingFacadeBase</c> class to use.
        /// </param>
        /// <param name="_isResumed">
        /// True if the backflush costing process is being resumed, otherwise false; optional.
        /// </param>
        /// <returns>
        /// The new instance of the <c>LeanCost_CalcProdFlowBase</c> class.
        /// </returns>
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static LeanCost_CalcProdFlowBase construct(LeanCostingFacadeBase _leanCostingFacade, boolean _isResumed = false)
        {
            LeanCost_CalcProdFlowBase leanCostCalcProdFlow;

            if (ProdParameters::find().LeanCostSplitLedgerVoucherTransactions
            && LedgerVoucherPostPersistable::isLedgerPostPersistableSupported())
            {
                leanCostCalcProdFlow = LeanCost_CalcProdFlow_Multi::construct(_leanCostingFacade);
            }
            else
            {
                leanCostCalcProdFlow = LeanCost_CalcProdFlow_Single::construct(_leanCostingFacade);
            }
        
            leanCostCalcProdFlow.setIsResumed(_isResumed);
            leanCostCalcProdFlow.parmLeanCostingFacade(_leanCostingFacade);
            return leanCostCalcProdFlow;
        }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
        {
            super();
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>