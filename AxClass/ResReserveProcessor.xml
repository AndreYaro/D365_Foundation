<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResReserveProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reserve processor factory class.
/// </summary>
public abstract class ResReserveProcessor implements ResIReserveProcessor
{
    #TimeConstants

    ResIReservationSchedule schedule;
    List schedules;
    real capacity;
    AVTimeframeType timeFrameType;
    boolean useActivityCalendar;
    boolean uiOperation;
    ResBookingType reserveProcessorType;
    utcdatetime taskStartDateTime;
    utcdatetime taskEndDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Schedules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules to reserve.
    /// </summary>
    /// <param name = "_schedules">Schedule to be reserved.</param>
    /// <returns>Instance of <c>ResReservationSchedule</c> class.</returns>
    public List Schedules(List _schedules = schedules)
    {
        schedules = _schedules;
        return schedules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Capacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Capacity shared by the specified schedules.
    /// </summary>
    /// <param name = "_capacity">Capacity amount to split, front-load or duplicate in schedules.</param>
    /// <returns>Real. Capacity amount.</returns>
    public real Capacity(real _capacity = capacity)
    {
        capacity = _capacity;
        return capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TimeFrameType</Name>
				<Source><![CDATA[
    /// <summary>
    /// The specific time frame type which user has choosen to use.
    /// </summary>
    /// <param name = "_timeFrameType">Time frame type.</param>
    /// <returns>The specific time frame type.</returns>
    public AVTimeframeType TimeFrameType(AVTimeframeType _timeFrameType = timeFrameType)
    {
        timeFrameType = _timeFrameType;
        return timeFrameType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReserveProcessorType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get reserve processory type.
    /// </summary>
    /// <returns>A <c>ResBookingType</c> enum value as reserve processor type.</returns>
    public ResBookingType getReserveProcessorType()
    {
        return reserveProcessorType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UseActivityCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets reservation to use the engagement associated calendar instead of the resurce associated calendar.
    /// </summary>
    /// <param name = "_useActivityCalendar">ture to specify to use activity calendar.</param>
    /// <returns>true if the engagement has use ignore resource calendar set to true; otherwise, false.</returns>
    [SysObsoleteAttribute('This method is no longer needed as calendar can be retrieved from ResIReservationSchedule.parmcalendar().', true, 25\08\2017)]
    public boolean UseActivityCalendar(boolean _useActivityCalendar = useActivityCalendar)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>Reserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the reserve process.
    /// </summary>
    /// <returns>true when the reserve operation succeeds; otherwise, false.</returns>
    public boolean Reserve()
    {
        boolean result;
        boolean resolveActivityResources;
        boolean activityResourceExistsBeforeReserve;

        if (schedules.elements())
        {
            ListEnumerator enum = schedules.getEnumerator();
            ResourceRecId resource;

            ttsbegin;

            while (enum.moveNext())
            {
                schedule = enum.current();
                this.resolveCapacity(schedule);
                this.resolveResourceCategory(schedule);
                [resolveActivityResources, activityResourceExistsBeforeReserve] = this.resolveActivityResources(schedule);
                resource = schedule.Resource();
                this.setupCalendar();
                if (schedule.activity() && schedule.activityType() == PSARSEntityType::None)
                {
                    schedule.activityType(ActivityFacade::getActivityType(schedule.activity()));
                }

                switch (schedule.ReservationType())
                {
                    case ResReservationType::Assignment:
                        if (this.validateAssignmentSchedulingDate())
                        {
                            result = this.assign() || result;
                        }
                        break;
                    case ResReservationType::Both:
                        if (this.validateAssignmentSchedulingDate())
                        {
                            result = (this.book() && this.assign()) || result;
                        }
                        break;
                    default:
                        result = this.book() || result;
                        break;
                }

                if (!result && !activityResourceExistsBeforeReserve)
                {
                    this.removeActivityResourceWithNoReservation(schedule.activityResource());
                }
            }
            ttscommit;
        }

        // Post reservation operation will update engagement team member start and end date fields in <c>PSAProjSchedRole</c>
        // and activity scheduling status. It will not be run if schedule has processRollUpByAssignmentRequest equal to true.
        if (result && !schedule.parmProcessRollUpByAssignmentRequest())
        {
            this.postReserveOperations();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssignmentSchedulingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate whether the assignment scheduling date are within the task date ranges. Also set the task start / end date time parameters.
    /// </summary>
    /// <returns>true if the scheduling dates range overlaps with the task dates range; otherwise false. </returns>
    protected boolean validateAssignmentSchedulingDate()
    {
        boolean validAssignmentSchedulingDate;

        //Validate if the assignment scheduling date is within activity scheduling date range.
        date schedulingStartDate = DateTimeUtil::date(schedule.Start());
        date schedulingEndDate = DateTimeUtil::date(schedule.End());

        PSAActivitySetup activitySetupTable = PSAActivitySetup::findActivityNumber(smmActivities::findWithRecId(schedule.activity()).ActivityNumber);
        validAssignmentSchedulingDate = !(activitySetupTable.PSASchedStart > schedulingEndDate || activitySetupTable.PSASchedEnd < schedulingStartDate);
        if (validAssignmentSchedulingDate)
        {
            taskStartDateTime = DateTimeUtil::newDateTime(activitySetupTable.PSASchedStart, 0);
            taskEndDateTime = DateTimeUtil::newDateTime(activitySetupTable.PSASchedEnd, #LastSecondOfTheDay);
        }

        return (!(activitySetupTable.PSASchedStart > schedulingEndDate || activitySetupTable.PSASchedEnd < schedulingStartDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup scheduling calendar value if it has not been defined.
    /// </summary>
    protected void setupCalendar()
    {
        if (!schedule.parmCalendar())
        {
            CalendarRecId calendar;

            if (schedule.activityResource())
            {
                calendar = ActivityResourceFacade::getCalendarByActivityAndDate(
                    schedule.activityResource(), schedule.activity(), DateTimeUtil::date(schedule.start()));
            }
            else
            {
                calendar = ResourceFacade::getCalendarByActivityAndDate(
                    schedule.resource(), schedule.activity(), DateTimeUtil::date(schedule.start()));
            }

            schedule.parmCalendar(calendar);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeActivityResourceWithNoReservation</Name>
				<Source><![CDATA[
    protected void removeActivityResourceWithNoReservation(ActivityResourceRecId _activityResource)
    {
        ProjValEmplProjSetup        projValEmplProjSetup;
        PSAProjSchedRole            projectTeamMember;
        ResReservationDayUnionView  resourceReservation;

        // If the activity resoruce has no reservation,
        // delete it from the resource project validation and project team table.
        if (schedule.activityType() == PSARSEntityType::Project)
        {
            delete_from projValEmplProjSetup
                exists join RecId from projectTeamMember
                where projectTeamMember.RecId == _activityResource
                    && projectTeamMember.ProjId == projValEmplProjSetup.ProjId
                    && projectTeamMember.Resource == projValEmplProjSetup.Resource
                notExists join RecId from resourceReservation
                        where resourceReservation.ActivityResource == _activityResource;
        }

        delete_from projectTeamMember
            where projectTeamMember.RecId == _activityResource
            notExists join RecId from resourceReservation
                where resourceReservation.ActivityResource == _activityResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveCapacity</Name>
				<Source><![CDATA[
    protected boolean resolveCapacity(ResIReservationSchedule _schedule)
    {
        real schedCapacity = _schedule.Capacity();
        if (!schedCapacity && capacity)
        {
            schedCapacity = capacity;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveActivityResources</Name>
				<Source><![CDATA[
    protected container resolveActivityResources(ResIReservationSchedule _schedule)
    {
        boolean resolveActivityResource = false;
        boolean activityResourceExist = false;
        ActivityResourceRecId activityResource = _schedule.ActivityResource();

        if (!activityResource)
        {
            ActivityRecId activity = _schedule.Activity();
            ResourceRecId resource = _schedule.Resource();

            if (activity && resource)
            {
                activityResource = ActivityFacade::findActivityResource(activity, resource);
            }

            if (!activityResource)
            {
                ResIProjTeamController projTeamController;
                projTeamController = ResProjTeamController::getInstanceFromActivityRecId(activity);
                activityResource = projTeamController.add(_schedule.ResourceCategory(),
                    DateTimeUtil::date(_schedule.Start()), DateTimeUtil::date(_schedule.End()), resource, false);
            }
            else
            {
                activityResourceExist = true;
            }

            _schedule.ActivityResource(activityResource);
        }
        else
        {
            activityResourceExist = true;
        }

        resolveActivityResource = activityResource ? true : false;
        return [resolveActivityResource, activityResourceExist];
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveResourceCategory</Name>
				<Source><![CDATA[
    protected boolean resolveResourceCategory(ResIReservationSchedule _schedule)
    {
        ResourceCategoryRecId resourceCategory = _schedule.ResourceCategory();
        if (!resourceCategory)
        {
            resourceCategory = ResourceCategoryFacade::defaultResourceCategory();
            _schedule.ResourceCategory(resourceCategory);
        }

        return resourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>book</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books generic resource full capacity based on calendar capacity.
    /// </summary>
    /// <returns>TRUE when the book operation succeeds.</returns>
    protected abstract boolean book()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books resource full capacity based on resource calendar capacity.
    /// </summary>
    /// <returns>TRUE when the book operation succeeds.</returns>
    protected abstract boolean bookResource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>assign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns generic resource full capacity based on calendar.
    /// </summary>
    /// <returns>TRUE when the assign operation succeeds.</returns>
    protected abstract boolean assign()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns resource full capacity based on resource calendar.
    /// </summary>
    /// <returns>TRUE when the assign operation succeeds.</returns>
    protected abstract boolean assignResource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postReserveOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update scheduling status.
    /// </summary>
    protected void postReserveOperations()
    {
        if (schedule)
        {
            ActivityRecId   activity = schedule.Activity();

            // Update team info and scheduling status
            ResUtil::updateTeamInfo(activity);
            ProjActivityCapacity::updateScheduleStatusByActivity(activity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>ResReserveProcessor</c> class.
    /// </summary>
    protected void new()
    {
        schedules = new List(Types::Class);
        timeFrameType = AVTimeframeType::Day;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a Reserve processor based on the specified Booking type.
    /// </summary>
    /// <param name = "_bookingType">Booking type.</param>
    /// <returns>Instance of <c>ResReserveProcessor class</c>.</returns>
    public static ResIReserveProcessor getProcessor(ResBookingType _bookingType = ResBookingType::RemainingCapacity)
    {
        ResIReserveProcessor reserveProcessor;

        switch (_bookingType)
        {
            case ResBookingType::FullCapacity:
                reserveProcessor = ResReserveCapacity::construct(ResBookingType::FullCapacity);
                break;
            case ResBookingType::CapacityPercentage:
                reserveProcessor = ResReserveCapacity::construct(ResBookingType::CapacityPercentage);
                break;
            case ResBookingType::DistributeCapacityEvenly:
                reserveProcessor = ResReserveCapacity::construct(ResBookingType::DistributeCapacityEvenly);
                break;
            case ResBookingType::Manual:
                reserveProcessor = ResReserveCapacity::construct(ResBookingType::Manual);
                break;
            case ResBookingType::FrontLoadCapacity:
                reserveProcessor = ResFrontLoadCapacity::construct();
                break;
            case ResBookingType::RemainingCapacity:
            default:
                reserveProcessor = ResRemainingCapacity::construct();
                break;
        }

        return reserveProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestedResourceCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Total capacity that's requested to reserve.
    /// </summary>
    /// <param name = "_resource">Resource record identifier</param>
    /// <returns>
    /// Total capacity that's requested to reserve.
    ///</returns>
    protected Seconds getRequestedResourceCapacity(ResourceRecId _resource)
    {
        return real2int(capacity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestedCalendarCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Total capacity that's requested to reserve.
    /// </summary>
    /// <param name = "_calendar">Calendar record identifier</param>
    /// <returns>
    /// Total capacity that's requested to reserve.
    ///</returns>
    protected Seconds getRequestedCalendarCapacity(CalendarRecId _calendar)
    {
        return real2int(capacity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookByCalendarCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Book capacity according to the specified calendar capacity.
    /// </summary>
    /// <param name = "_activityResource"> Activity resource. </param>
    /// <param name = "_commitment">Commitment type.</param>
    /// <param name = "_calendar">Calendar.</param>
    /// <param name = "_activity">Activity to book.</param>
    /// <param name = "_capacity">Capacity get booked.</param>
    /// <param name = "_timeframe">Time frame when book happen.</param>
    /// <param name = "_hours">Count of hours.</param>
    /// <param name = "_timeScale">Time scale type.</param>
    protected void bookByCalendarCapacity(ActivityResourceRecId _activityResource, ResCommitType _commitment, CalendarRecId _calendar,
        ActivityRecId _activity, real _capacity, utcdatetime _timeframe, int _hours, AVTimeframeType _timeScale = AVTimeframeType::Day)
    {
        ResBooking bookingTable;
        ResCalendarCapacity calendarCapacityTable;
        
        //Table ResBooking.End field type is real
        real hourCapacity = roundUp(_capacity / _hours, 1);

        this.skipDatabaseLogAndEvent(bookingTable);

        insert_recordset bookingTable (ActivityResource, Activity, CommitType,
                Start, End, Hour, Day, Week, Month, Quarter, HalfYear)
            select _activityResource, _activity, _commitment,
                Start, hourCapacity, Hour, Day, Week, Month, Quarter, HalfYear
            from calendarCapacityTable
                where calendarCapacityTable.Calendar == _calendar
                && ((_timeScale == AVTimeframeType::Hour && calendarCapacityTable.Hour == _timeframe)
                    || calendarCapacityTable.Day == _timeframe)
                && calendarCapacityTable.End > calendarCapacityTable.Start;

    }

]]></Source>
			</Method>
			<Method>
				<Name>bookByResourceCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Book capacity according to resource capacity defined by resource associated calendar.
    /// </summary>
    /// <param name = "_activityResource"> Activity resource. </param>
    /// <param name = "_commitment">Commitment type.</param>
    /// <param name = "_activity">Activity to book.</param>
    /// <param name = "_capacity">Capacity get booked.</param>
    /// <param name = "_timeframe">Time frame when book happen.</param>
    /// <param name = "_hours">Count of hours.</param>
    /// <param name = "_timeScale">Time scale type.</param>
    protected void bookByResourceCapacity(ActivityResourceRecId _activityResource, ResCommitType _commitment,
        ActivityRecId _activity, real _capacity, utcdatetime _timeframe, int _hours, AVTimeframeType _timeScale = AVTimeframeType::Day)
    {
        ResBooking bookingTable;
        ResCalendarCapacity resourceCapacityTable;
        
        //Table ResBooking.End field type is real
        real hourCapacity = roundUp(_capacity / _hours, 1);

        //Since ResourceCalendarView validFrom and validTo dates are based on HcmEmployment hiring date time which is based on
        //user preferred time zone while scheduling start and end date time is 0 base, this converstion is needed.
        utcdatetime validFromDateTime = datetoendUtcDateTime(DateTimeUtil::date(schedule.Start()), DateTimeUtil::getUserPreferredTimeZone());
        utcdatetime validToDateTime = datetobeginUtcDateTime(DateTimeUtil::date(schedule.End()), DateTimeUtil::getUserPreferredTimeZone());

        CalendarRecId resourceCalendar = ResourceFacade::getCalendarUtc(schedule.Resource(), validFromDateTime, validToDateTime);

        this.skipDatabaseLogAndEvent(bookingTable);

        insert_recordset bookingTable (ActivityResource, Activity, CommitType,
                Start, End, Hour, Day, Week, Month, Quarter, HalfYear)
            select _activityResource, _activity, _commitment,
                Start, hourCapacity, Hour, Day, Week, Month, Quarter, HalfYear
            from resourceCapacityTable
                where resourceCapacityTable.Calendar == resourceCalendar
                && ((_timeScale == AVTimeframeType::Hour && resourceCapacityTable.Hour == _timeframe)
                    || resourceCapacityTable.Day == _timeframe)
                && resourceCapacityTable.End > resourceCapacityTable.Start;

    }

]]></Source>
			</Method>
			<Method>
				<Name>assignByCalendarCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign capacity according to the specified calendar capacity.
    /// </summary>
    /// <param name = "_activityResource"> Activity resource. </param>
    /// <param name = "_commitment">Commitment type.</param>
    /// <param name = "_calendar">Calendar.</param>
    /// <param name = "_activity">Activity to assign.</param>
    /// <param name = "_capacity">Capacity get assigned.</param>
    /// <param name = "_timeframe">Time frame when assignment happen.</param>
    /// <param name = "_hours">Count of hours.</param>
    /// <param name = "_timeScale">Time scale type.</param>
    protected void assignByCalendarCapacity(ActivityResourceRecId _activityResource, ResCommitType _commitment, CalendarRecId _calendar,
        ActivityRecId _activity, real _capacity, utcdatetime _timeframe, int _hours, AVTimeframeType _timeScale = AVTimeframeType::Day)
    {
        ResAssignment assignmentTable;
        ResCalendarCapacity calendarCapacityTable;
        
        //Table ResAssignment.End field type is real
        real hourCapacity = roundUp(_capacity / _hours, 1);

        this.skipDatabaseLogAndEvent(assignmentTable);

        insert_recordset assignmentTable (ActivityResource, Activity, CommitType,
                Start, End, Hour, Day, Week, Month, Quarter, HalfYear)
            select _activityResource, _activity, _commitment,
                Start, hourCapacity, Hour, Day, Week, Month, Quarter, HalfYear
            from calendarCapacityTable
                where calendarCapacityTable.Calendar == _calendar
                && ((_timeScale == AVTimeframeType::Hour && calendarCapacityTable.Hour == _timeframe)
                    || calendarCapacityTable.Day == _timeframe)
                && calendarCapacityTable.End > calendarCapacityTable.Start;

    }

]]></Source>
			</Method>
			<Method>
				<Name>assignByResourceCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign capacity according to resource capacity defined by resource associated calendar.
    /// </summary>
    /// <param name = "_activityResource"> Activity resource. </param>
    /// <param name = "_commitment">Commitment type.</param>
    /// <param name = "_activity">Activity to book.</param>
    /// <param name = "_capacity">Capacity get booked.</param>
    /// <param name = "_timeframe">Time frame type.</param>
    /// <param name = "_hours">Count of hours.</param>
    /// <param name = "_timeScale">Time scale type.</param>
    protected void assignByResourceCapacity(ActivityResourceRecId _activityResource, ResCommitType _commitment,
        ActivityRecId _activity, real _capacity, utcdatetime _timeframe, int _hours, AVTimeframeType _timeScale = AVTimeframeType::Day)
    {
        ResAssignment assignmentTable;
        ResCalendarCapacity resourceCapacityTable;
        ResCommitType   stagedCommit = ResCommitType::None;

        //Table ResAssignment.End field type is real
        real hourCapacity = roundUp(_capacity / _hours, 1);

        //Since ResourceCalendarView validFrom and validTo dates are based on HcmEmployment hiring date time which is based on
        //user preferred time zone while scheduling start and end date time is 0 base, this converstion is needed.
        utcdatetime validFromDateTime = datetoendUtcDateTime(DateTimeUtil::date(schedule.Start()), DateTimeUtil::getUserPreferredTimeZone());
        utcdatetime validToDateTime = datetobeginUtcDateTime(DateTimeUtil::date(schedule.End()), DateTimeUtil::getUserPreferredTimeZone());

        CalendarRecId resourceCalendar = ResourceFacade::getCalendarUtc(schedule.Resource(), validFromDateTime, validToDateTime);

        this.skipDatabaseLogAndEvent(assignmentTable);

        insert_recordset assignmentTable (ActivityResource, Activity, CommitType,
                Start, End, Hour, Day, Week, Month, Quarter, HalfYear)
            select _activityResource, _activity, _commitment,
                Start, hourCapacity, Hour, Day, Week, Month, Quarter, HalfYear
            from resourceCapacityTable
                where resourceCapacityTable.Calendar == resourceCalendar
                && ((_timeScale == AVTimeframeType::Hour && resourceCapacityTable.Hour == _timeframe)
                    || resourceCapacityTable.Day == _timeframe)
                && resourceCapacityTable.End > resourceCapacityTable.Start;

    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDatabaseLogAndEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skip data base log and event to improve performance.
    /// </summary>
    /// <param name = "_table">The specified table buffer.</param>
    protected void skipDatabaseLogAndEvent(Common _table)
    {
        _table.skipDatabaseLog(true);
        _table.skipEvents(true);
        _table.skipDataMethods(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TimeScale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return time scale as Day if time frame type is not hour.
    /// </summary>
    /// <returns>Time scale type.</returns>
    protected AVTimeframeType TimeScale()
    {
        return this.timeFrameType() != AVTimeframeType::Hour ? AVTimeframeType::Day : AVTimeframeType::Hour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>