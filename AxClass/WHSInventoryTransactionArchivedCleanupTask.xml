<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionArchivedCleanupTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Automation task for the archived warehouse inventory transactions cleanup.
/// </summary>
[Export(identifierStr(Microsoft.Dynamics.AX.Application.ProcessAutomationTask))]
[ExportMetadata(classStr(ProcessAutomationTask), classStr(WHSInventoryTransactionArchivedCleanupTask))]
internal final class WHSInventoryTransactionArchivedCleanupTask extends ProcessAutomationTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isProcessAutomationEnabledForThisTask</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isProcessAutomationEnabledForThisTask()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfWorkToBePerformed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected List getListOfWorkToBePerformed()
    {
        List tasks = new List(Types::Class);

        SysOperationServiceController serviceController = WHSInventoryTransactionArchivedCleanupController::construct();

        ProcessScheduleWorkItem processScheduleWorkItemContract = serviceController.getDataContractObject() as ProcessScheduleWorkItem;
        processScheduleWorkItemContract.initializeFromScheduleWorkItem(this.parmProcessScheduleWorkItem());

        tasks.addEnd(serviceController);

        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected BatchCaption batchJobCaption()
    {
        return "@WHSInventory:WHSInventoryTransactionArchivedCleanup_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>