<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationGroupDocMatchRuleProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
[BankReconciliationMatchTypeAttribute(BankReconciliationStmtMatchMathingType::OneToMany)]
internal final class BankReconciliationGroupDocMatchRuleProcessor extends BankReconciliationGroupMatchRuleProcessorBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(BankReconciliationMatchRule _matchRule, BankReconciliationStatementOpenTmp _statementTmp, BankReconciliationDocumentOpenTmp _documentTmp, BankReconciliationHeader _reconciliation, BankReconciliationDataManager _dataManager)
    {
        super(_matchRule, _statementTmp, _documentTmp, _reconciliation, _dataManager);
        groupDocumentQuery = new BankReconciliationGroupDocumentOpenQuery(_matchRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnmatchedStatementCount</Name>
				<Source><![CDATA[
    internal protected int64 getUnmatchedStatementCount()
    {
        select count(RecId) from reconciliationStatementTmp
            where reconciliationStatementTmp.IsMatched == NoYes::No;

        return reconciliationStatementTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentStatement</Name>
				<Source><![CDATA[
    internal protected Common getCurrentStatement(QueryRun _statementQueryRun)
    {
        return _statementQueryRun.get(tableNum(BankReconciliationStatementOpenTmp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStatementQueryRun</Name>
				<Source><![CDATA[
    internal protected QueryRun buildStatementQueryRun()
    {
        statementQuery.buildQuery();
        QueryRun statementQueryRun = new QueryRun(statementQuery.getQuery());
        statementQuery.setQueryRunRecord(statementQueryRun, reconciliationStatementTmp);

        return statementQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMatchAction</Name>
				<Source><![CDATA[
    internal protected void performMatchAction(Common _openStatementForMatch, BankStmtTmp _bankStatementsToUpdate)
    {
        this.performMultiMatchAction(_openStatementForMatch, searchedDocumentIdList);
        BankReconciliationStatementOpenTmp openStatement = _openStatementForMatch as BankReconciliationStatementOpenTmp;
        if (BankReconciliationMatchRuleBreakTransactionScopeFlight::instance().isEnabled())
        {
            BankStmtISOAccountStatement::updateBankStatementStatus(openStatement.BankStmtISOAccountStatement);
        }
        else
        {
            BankReconciliationAutoMatchUtils::addBankStatementForUpdate(_bankStatementsToUpdate, openStatement.BankStmtISOReportEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMultiMatchAction</Name>
				<Source><![CDATA[
    private void performMultiMatchAction(Common _openStatementForMatch, List _searchedDocumentIdList)
    {
        List impactedStatementIdList = new List(Types::Int64);

        impactedStatementIdList.addEnd(_openStatementForMatch.RecId);

        if (this.match(impactedStatementIdList, _searchedDocumentIdList))
        {
            this.updateMatchStatusForGroupDocumentOpen();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>