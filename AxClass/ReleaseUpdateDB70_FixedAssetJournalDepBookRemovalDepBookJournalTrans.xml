<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Upgrades data from <c>AssetDepBookJournalTrans</c> to <c>LedgerJournalTrans</c> table.
/// </summary>
class ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans extends ReleaseUpdateDB70_FixedAssets
{
    // Specify a preferable approach of vouchers allocation
    // true, if you want to use an existing number sequence code from Dynamics 365 for Operations
    // false, if you intend to use the system-defined number sequence (default)
    const boolean NumberSequenceUseExistingCode = false;

    // If using the system-defined number sequence approach, specify the parameters for the number sequence.
    // We will create a new number sequence with these parameters.
    const str NumberSequenceDefaultCode = 'FADBUpgr';
    const str NumberSequenceDefaultParameterPrefix = 'FADBUpgr';
    const int NumberSequenceDefaultParameterAlpanumericLength = 9;
    const int NumberSequenceDefaultParameterStartNumber = 1;

    // If using the existing number sequence approach, specify the existing number sequence code
    // Voucher allocation will go row-by-row for existing number sequences
    const str NumberSequenceExistingCode = '';
    // Specify the scope of the existing number sequence code
    // true, if the specified number sequence is shared
    // false, if the specified number sequence is per-company
    // We will use the default system-defined number sequence if a number sequence code with the specified scope is not found
    const boolean NumberSequenceExistingIsShared = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postSyncAllocateVoucherAssetDepBookJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Move <c>AssetDepBookJournalTrans</c> data into a temporary table.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
    UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
    UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
    UpgradeScriptTableAttribute('AssetDepBookJournalTrans', false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncAllocateVoucherAssetDepBookJournalTrans()
    {
        // If we have at least one AssetDepBookJournalTrans records for this company
        if (!this.skipAssetDepBookJournalTransToLedgerJournalTransUpgrade())
        {
            this.copyUpgradeAssetDepBookJournalTransAllocateVouchers();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyUpgradeAssetDepBookJournalTransAllocateVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Voucher column to <c>AssetDepBookJournalTrans</c> table.
    /// Allocate voucher numbers for transaction records.
    /// Parameters are used for testing.
    /// </summary>
    /// <param name = "_numberSequenceUseExistingCode">Use existing code.</param>
    /// <param name = "_numberSequenceExistingCode">The existing number sequence code.</param>
    /// <param name = "_numberSequenceExistingIsShared">The existing number sequence is shared.</param>
    /// <param name = "_numberSequenceDefaultCode">The default number sequence code.</param>
    /// <param name = "_numberSequenceDefaultParameterPrefix">The prefix of a new number sequence.</param>
    /// <param name = "_numberSequenceDefaultParameterAlpanumericLength">The length of the alphanumeric part of a new number sequence.</param>
    /// <param name = "_numberSequenceDefaultParameterStartNumber">The start number of a new number sequence.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void copyUpgradeAssetDepBookJournalTransAllocateVouchers(
        boolean _numberSequenceUseExistingCode = NumberSequenceUseExistingCode,
        str     _numberSequenceExistingCode = NumberSequenceExistingCode,
        boolean _numberSequenceExistingIsShared = NumberSequenceExistingIsShared,
        str     _numberSequenceDefaultCode = NumberSequenceDefaultCode,
        str     _numberSequenceDefaultParameterPrefix = NumberSequenceDefaultParameterPrefix,
        int     _numberSequenceDefaultParameterAlpanumericLength = NumberSequenceDefaultParameterAlpanumericLength,
        int     _numberSequenceDefaultParameterStartNumber = NumberSequenceDefaultParameterStartNumber)
    {
        boolean skipVoucherCreation = this.skipDepreciationBookToValueModelUpgrade();

        if (!skipVoucherCreation)
        {
            // Add the voucher column to AssetDepBookJournalTrans
            this.executeSqlStatement(this.getSQLAddVoucherColumnToAssetDepBookJournalTrans());
            
            ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalVouchersAllocation numberSequenceAllocation;

            if (_numberSequenceUseExistingCode && _numberSequenceExistingCode != '')
            {
                RefRecId numberSequenceScopeRecId;

                if (_numberSequenceExistingIsShared)
                {
                    numberSequenceScopeRecId = NumberSeqScopeFactory::createGlobalScope().getId();
                }
                else
                {
                    numberSequenceScopeRecId = NumberSeqScopeFactory::createDataAreaScope(curExt()).getId();
                }

                NumberSequenceTable numberSequenceTable;

                if (numberSequenceScopeRecId != 0)
                {
                    numberSequenceTable = NumberSequenceTable::findByNaturalKey(_numberSequenceExistingCode, numberSequenceScopeRecId);
                }

                if (numberSequenceTable.RecId != 0)
                {
                    numberSequenceAllocation =
                        ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalVouchersAllocation::contructExistingNS(numberSequenceTable);
                }
            }

            if (!numberSequenceAllocation)
            {
                numberSequenceAllocation =
                    ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalVouchersAllocation::constructDefaultFast(
                        _numberSequenceDefaultCode,
                        _numberSequenceDefaultParameterPrefix,
                        _numberSequenceDefaultParameterAlpanumericLength,
                        _numberSequenceDefaultParameterStartNumber);
            }

            numberSequenceAllocation.runAllocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncUpgradeAssetDepBookJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the <c>AssetDepBookJournalTrans</c> data into <c>LedgerJournalTrans</c> table.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
     UpgradeDependsOnModuleAttribute(classStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans), methodStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans, postSyncAllocateVoucherAssetDepBookJournalTrans)),
     UpgradeDependsOnModuleAttribute(classStr(ReleaseUpdateDB70_FixedAssetTransactionDepBookRemovalDepBookTrans), methodStr(ReleaseUpdateDB70_FixedAssetTransactionDepBookRemovalDepBookTrans, postSyncUpgradeAssetDepBookTrans)),     
     UpgradeScriptTableAttribute(tableStr(LedgerJournalTrans), true, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncUpgradeAssetDepBookJournalTrans()
    {        
        // If we have at least one AssetDepBookJournalTrans records for this company
        if (!this.skipAssetDepBookJournalTransToLedgerJournalTransUpgrade())
        {
            // Move the data into the LedgerJournalTrans from the AssetDepBookJournalTransUpgradeTmp table
            this.executeSqlStatement(this.getSQLInsertLedgerJournalTrans());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncUpgradeAssetDepBookJournalTrans2LJTA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the <c>AssetDepBookJournalTrans</c> data into <c>LedgerJournalTrans_Asset</c> table.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
    UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
    UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
    UpgradeDependsOnTaskAttribute(methodStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans, postSyncUpgradeAssetDepBookJournalTrans)),
    UpgradeScriptTableAttribute(tableStr(LedgerJournalTrans_Asset), true, true, false, false),
    UpgradeScriptTableAttribute(tableStr(LedgerJournalTrans), true, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncUpgradeAssetDepBookJournalTrans2LJTA()
    {
        // If we have at least one AssetDepBookJournalTrans records for this company
        if (!this.skipAssetDepBookJournalTransToLedgerJournalTransUpgrade())
        {
            // Move the data into the LedgerJournalTrans_Asset from the AssetDepBookJournalTransUpgradeTmp table
            this.executeSqlStatement(this.getSQLInsertLedgerJournalTransAsset());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncUpgradeAssetDepBookJournalTransRevalueTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates RevauledTransId to point to AssetTrans instead of DepBookTrans
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
    UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
    UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
    UpgradeDependsOnTaskAttribute(methodStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans, postSyncUpgradeAssetDepBookJournalTrans2LJTA)),
    UpgradeScriptTableAttribute(tableStr(LedgerJournalTrans), true, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncUpgradeAssetDepBookJournalTransRevalueTransId()
    {                
        // If we have at least one AssetDepBookJournalTrans records for this company
        if (!this.skipAssetDepBookJournalTransToLedgerJournalTransUpgrade())
        {
            // Note: CustTransId field is used to store RevaluedTransId value
            this.executeSqlStatement(this.getSQLUpdateLedgerJournalTransRevaluedTransId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncUpgradeAssetDepBookJournalTransDimResolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves <c>LedgerJournalTrans.LedgerDimensions</c> for asset.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
    UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
    UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
    UpgradeDependsOnTaskAttribute(methodStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans, postSyncUpgradeAssetDepBookJournalTransRevalueTransId)),
    UpgradeScriptTableAttribute(tableStr(LedgerJournalTrans), true, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncUpgradeAssetDepBookJournalTransDimResolve()
    {        
        // If we have at least one AssetDepBookJournalTrans records for this company
        if (!this.skipAssetDepBookJournalTransToLedgerJournalTransUpgrade())
        {
            // Resolve LedgerJournalTrans.LedgerDimensions for asset.
            AssetDimensionSetBasedResolver::resolveForLedgerJournalTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncUpgradeAssetDepBookJournalTransDepDistLineJP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrade the RefReserveTableId, RefReserveRecId columns for those AssetDepDistributionLine_JP records
    ///  which have RefReserveTableId/RefReserveRecId pointing to AssetDepBookJournalTrans
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
    UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
    UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
    UpgradeDependsOnTaskAttribute(methodStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans, postSyncUpgradeAssetDepBookJournalTransDimResolve)),
    UpgradeScriptTableAttribute('AssetDepBookJournalTrans', false, true, false, false),
    UpgradeScriptTableAttribute(tableStr(AssetDepDistributionLine_JP), true, true, false, false),
    UpgradeScriptTableAttribute('AssetDepBookTrans', false, true, false, false),
    UpgradeScriptTableAttribute(tableStr(LedgerJournalTrans_Asset), true, true, false, false),
    UpgradeScriptTableAttribute(tableStr(LedgerJournalTrans), true, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncUpgradeAssetDepBookJournalTransDepDistLineJP()
    {
        #IsoCountryRegionCodes
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            this.executeSqlStatement(this.getSQLUpdateAssetDepDistributionLineJP());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncUpgradeAssetDepBookJournalTransDepDistJP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrade the RefTableId, RefRecId columns for those AssetDepDistribution_JP records
    ///  which have RefTableId/RefRecId pointing to AssetDepBookJournalTrans
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
    UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
    UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::StandardScript),
    UpgradeDependsOnTaskAttribute(methodStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans, postSyncUpgradeAssetDepBookJournalTransDepDistLineJP)),
    UpgradeScriptTableAttribute('AssetDepBookJournalTrans', false, true, false, false),
    UpgradeScriptTableAttribute(tableStr(AssetDepDistribution_JP), true, true, false, false),
    UpgradeScriptTableAttribute('AssetDepBookTrans', false, true, false, false),
    UpgradeScriptTableAttribute(tableStr(LedgerJournalTrans_Asset), true, true, false, false),
    UpgradeScriptTableAttribute(tableStr(LedgerJournalTrans), true, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncUpgradeAssetDepBookJournalTransDepDistJP()
    {
        #IsoCountryRegionCodes
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            this.executeSqlStatement(this.getSQLUpdateAssetDepDistributionJP());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLUpdateAssetDepDistributionJP</Name>
				<Source><![CDATA[
    private str getSQLUpdateAssetDepDistributionJP()
    {
        str sqlStatement = strFmt(@"
            If EXISTS (SELECT 1 FROM [dbo].[ASSETDEPDISTRIBUTION_JP]
                    WHERE [ASSETDEPDISTRIBUTION_JP].[DATAAREAID] = '%2'
                        AND [ASSETDEPDISTRIBUTION_JP].[PARTITION] = %3 )
            BEGIN
                UPDATE [dbo].[ASSETDEPDISTRIBUTION_JP]
                    SET REFTABLEID = %1,
                        REFRECID = [LEDGERJOURNALTRANS_ASSET].[RECID]
                FROM [dbo].[ASSETDEPDISTRIBUTION_JP]
                JOIN [dbo].[ASSETDEPBOOKJOURNALTRANS] ON [ASSETDEPBOOKJOURNALTRANS].[RECID] = [ASSETDEPDISTRIBUTION_JP].[REFRECID]
                    AND [ASSETDEPDISTRIBUTION_JP].[REFTABLEID] = %4
                    AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = [ASSETDEPDISTRIBUTION_JP].[DATAAREAID]
                    AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = [ASSETDEPDISTRIBUTION_JP].[PARTITION]
                JOIN [dbo].[LEDGERJOURNALTRANS] ON [LEDGERJOURNALTRANS].[JOURNALNUM] = [ASSETDEPBOOKJOURNALTRANS].[JOURNALID]
                    AND [LEDGERJOURNALTRANS].[LINENUM] = [ASSETDEPBOOKJOURNALTRANS].[LINENUM]
                    AND [LEDGERJOURNALTRANS].[DATAAREAID] = [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID]
                    AND [LEDGERJOURNALTRANS].[PARTITION] = [ASSETDEPBOOKJOURNALTRANS].[PARTITION]
                JOIN [dbo].[LEDGERJOURNALTRANS_ASSET] ON LEDGERJOURNALTRANS_ASSET.REFRECID = LEDGERJOURNALTRANS.RECID
                    AND [LEDGERJOURNALTRANS_ASSET].[DATAAREAID] = [LEDGERJOURNALTRANS].[DATAAREAID]
                    AND [LEDGERJOURNALTRANS_ASSET].[PARTITION] = [LEDGERJOURNALTRANS].[PARTITION]
                WHERE [ASSETDEPDISTRIBUTION_JP].[DATAAREAID] = '%2'
                    AND [ASSETDEPDISTRIBUTION_JP].[PARTITION] = %3

            END
            ", tableNum(LedgerJournalTrans_Asset), curExt(), getCurrentPartitionRecId(), tableName2Id('AssetDepBookJournalTrans'));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLUpdateAssetDepDistributionLineJP</Name>
				<Source><![CDATA[
    private str getSQLUpdateAssetDepDistributionLineJP()
    {
        str sqlStatement = strFmt(@"
            If EXISTS (SELECT 1 FROM [dbo].[ASSETDEPDISTRIBUTIONLINE_JP]
                    WHERE [ASSETDEPDISTRIBUTIONLINE_JP].[DATAAREAID] = '%2'
                        AND [ASSETDEPDISTRIBUTIONLINE_JP].[PARTITION] = %3 )
            BEGIN
                UPDATE [dbo].[ASSETDEPDISTRIBUTIONLINE_JP]
                    SET REFRESERVETABLEID = %1,
                        REFRESERVERECID = [LEDGERJOURNALTRANS_ASSET].[RECID]
                FROM [dbo].[ASSETDEPDISTRIBUTIONLINE_JP]
                JOIN [dbo].[ASSETDEPBOOKJOURNALTRANS] ON [ASSETDEPBOOKJOURNALTRANS].[RECID] = [ASSETDEPDISTRIBUTIONLINE_JP].[REFRESERVERECID]
                    AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = [ASSETDEPDISTRIBUTIONLINE_JP].[DATAAREAID]
                    AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = [ASSETDEPDISTRIBUTIONLINE_JP].[PARTITION]
                JOIN [dbo].[LEDGERJOURNALTRANS] ON [LEDGERJOURNALTRANS].[JOURNALNUM] = [ASSETDEPBOOKJOURNALTRANS].[JOURNALID]
                    AND [LEDGERJOURNALTRANS].[LINENUM] = [ASSETDEPBOOKJOURNALTRANS].[LINENUM]
                    AND [LEDGERJOURNALTRANS].[DATAAREAID] = [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID]
                    AND [LEDGERJOURNALTRANS].[PARTITION] = [ASSETDEPBOOKJOURNALTRANS].[PARTITION]
                JOIN [dbo].[LEDGERJOURNALTRANS_ASSET] ON LEDGERJOURNALTRANS_ASSET.REFRECID = LEDGERJOURNALTRANS.RECID
                    AND [LEDGERJOURNALTRANS_ASSET].[DATAAREAID] = [LEDGERJOURNALTRANS].[DATAAREAID]
                    AND [LEDGERJOURNALTRANS_ASSET].[PARTITION] = [LEDGERJOURNALTRANS].[PARTITION]
                WHERE [ASSETDEPDISTRIBUTIONLINE_JP].[REFRESERVETABLEID] = %4
                    AND [ASSETDEPDISTRIBUTIONLINE_JP].[DATAAREAID] = [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID]
                    AND [ASSETDEPDISTRIBUTIONLINE_JP].[PARTITION] = [ASSETDEPBOOKJOURNALTRANS].[PARTITION]
                    AND [ASSETDEPDISTRIBUTIONLINE_JP].[DATAAREAID] = '%2'
                    AND [ASSETDEPDISTRIBUTIONLINE_JP].[PARTITION] = %3

            END
            ", tableNum(LedgerJournalTrans_Asset), curExt(), getCurrentPartitionRecId(), tableName2Id('AssetDepBookJournalTrans'));

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLAddVoucherColumnToAssetDepBookJournalTrans</Name>
				<Source><![CDATA[
    private str getSQLAddVoucherColumnToAssetDepBookJournalTrans()
    {
        str sqlStatement = @"
            IF NOT EXISTS (SELECT * FROM sys.columns where Name = 'VOUCHER' AND Object_ID = OBJECT_ID('ASSETDEPBOOKJOURNALTRANS'))
            BEGIN
                ALTER TABLE [dbo].[ASSETDEPBOOKJOURNALTRANS]
                    ADD [VOUCHER] [nvarchar](20) NOT NULL DEFAULT 0
            END            
            ";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLDropVoucherColumnFromAssetDepBookJournalTrans</Name>
				<Source><![CDATA[
    private str getSQLDropVoucherColumnFromAssetDepBookJournalTrans()
    {
        str sqlStatement = @"
            ALTER TABLE [dbo].[ASSETDEPBOOKJOURNALTRANS]
            DROP COLUMN [VOUCHER]
            ";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLInsertLedgerJournalTrans</Name>
				<Source><![CDATA[
    private str getSQLInsertLedgerJournalTrans()
    {
        str sqlStatement = strFmt(@"
            INSERT INTO [dbo].[LEDGERJOURNALTRANS]
                       ([ACCOUNTTYPE]
                       ,[AMOUNTCURCREDIT]
                       ,[AMOUNTCURDEBIT]
                       ,[CURRENCYCODE]
                       ,[COMPANY]
                       ,[CUSTTRANSID]
                       ,[EXCHRATE]
                       ,[FILECREATED]
                       ,[JOURNALNUM]
                       ,[LINENUM]
                       ,[OFFSETCOMPANY]
                       ,[REASONREFRECID]
                       ,[RELEASEDATE]
                       ,[RELEASEDATETZID]
                       ,[TRANSACTIONTYPE]
                       ,[TRANSDATE]
                       ,[TRANSFERREDBY]
                       ,[TRANSFERREDON]
                       ,[TRANSFERREDTO]
                       ,[TXT]
                       ,[VOUCHER]
                       ,[DATAAREAID]
                       ,[PARTITION])
                SELECT %1
                      ,[AMOUNTCURCREDIT]
                      ,[AMOUNTCURDEBIT]
                      ,[CURRENCYCODE]
                      ,[DATAAREAID]
                      ,[REVALUEDTRANSID]
                      ,1
                      ,[FILECREATED]
                      ,[JOURNALID]
                      ,[LINENUM]
                      ,[DATAAREAID]
                      ,[REASONREFRECID]
                      ,[RELEASEDATE]
                      ,[RELEASEDATETZID]
                      ,%2
                      ,[TRANSDATE]
                      ,[TRANSFERREDBY]
                      ,[TRANSFERREDON]
                      ,[TRANSFERREDTO]
                      ,[TXT]
                      ,[VOUCHER]
                      ,[DATAAREAID]
                      ,[PARTITION]
                  FROM [dbo].[ASSETDEPBOOKJOURNALTRANS]
                  WHERE [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = '%3'
                     AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = %4
                     AND NOT EXISTS
                     (SELECT RECID FROM [dbo].[LEDGERJOURNALTRANS]
                     WHERE [ASSETDEPBOOKJOURNALTRANS].[JOURNALID] = [LEDGERJOURNALTRANS].[JOURNALNUM]
                         AND [ASSETDEPBOOKJOURNALTRANS].[LINENUM] = [LEDGERJOURNALTRANS].[LINENUM]
                         AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = [LEDGERJOURNALTRANS].[DATAAREAID]
                         AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = [LEDGERJOURNALTRANS].[PARTITION])
            ", enum2int(LedgerJournalACType::FixedAssets), enum2int(LedgerTransType::FixedAssets), curExt(), getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLUpdateLedgerJournalTransRevaluedTransId</Name>
				<Source><![CDATA[
    private str getSQLUpdateLedgerJournalTransRevaluedTransId()
    {
        str sqlStatement = strFmt(@"
            If EXISTS (SELECT 1 FROM [dbo].[ASSETTRANS]
                    WHERE [ASSETTRANS].[TRANSTYPE] = %1
                        AND [ASSETTRANS].[DATAAREAID] = '%2'
                        AND [ASSETTRANS].[PARTITION] = %3 )
            BEGIN
                UPDATE [dbo].[LEDGERJOURNALTRANS]
                    SET [LEDGERJOURNALTRANS].[CUSTTRANSID] = [REVALUEDTRANS].[ASSETTRANSRECID]
                    FROM [dbo].[LEDGERJOURNALTRANS]
                    JOIN [dbo].[ASSETTRANSASSETDEPBOOKTRANSLINKUPGRADETMP] REVALUEDTRANS ON 
                        [REVALUEDTRANS].ASSETDEPBOOKTRANSRECID = [LEDGERJOURNALTRANS].[CUSTTRANSID]
                        AND [REVALUEDTRANS].[DATAAREAID] = [LEDGERJOURNALTRANS].[DATAAREAID]
                        AND [REVALUEDTRANS].[PARTITION] = [LEDGERJOURNALTRANS].[PARTITION]
                    WHERE [LEDGERJOURNALTRANS].[DATAAREAID] = '%2'
                        AND [LEDGERJOURNALTRANS].[PARTITION] = %3
            END
            ", enum2int(AssetTransType::Revaluation), curExt(), getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLInsertLedgerJournalTransAsset</Name>
				<Source><![CDATA[
    private str getSQLInsertLedgerJournalTransAsset()
    {
        str sqlStatement = strFmt(@"
            INSERT INTO [dbo].[LEDGERJOURNALTRANS_ASSET]
                    ([ASSETDOCUMENTENTRY_JP]
                    ,[ASSETGROUP_IN]
                    ,[ASSETID]
                    ,[BOOKID]
                    ,[COMPANY]
                    ,[CONSUMPTIONQUANTITY]
                    ,[DEPRECIATIONTIME]
                    ,[DOCUMENTTYPE_JP]
                    ,[ISADJUSTEDDEPRECIATION]
                    ,[ISPRIORYEAR]
                    ,[LOWVALUEPOOLTYPE_AU]
                    ,[LVPTRANSFERID_AU]
                    ,[REFRECID]
                    ,[RESERVETRANSID]
                    ,[REVALUATIONAMOUNT]
                    ,[REVALUATIONTRANS]
                    ,[TRANSTYPE]
                    ,[DATAAREAID]
                    ,[PARTITION])
              SELECT
                     [ASSETDOCUMENTENTRY_JP]
                    ,[ASSETGROUP_IN]
                    ,[ASSETID]
                    ,[DEPRECIATIONBOOKID]
                    ,[LJT].[DATAAREAID]
                    ,[CONSUMPTIONUNITS]
                    ,[DEPRECIATIONTIME]
                    ,[DOCUMENTTYPE_JP]
                    ,[ISADJUSTEDDEPRECIATION]
                    ,[ISPRIORYEAR]
                    ,[LOWVALUEPOOLTYPE_AU]
                    ,[LVPTRANSFERID_AU]
                    ,[LJT].[RECID]
                    ,CASE
                        WHEN [RESERVE].[ASSETTRANSRECID] IS NULL THEN 0
                        ELSE [RESERVE].[ASSETTRANSRECID]
                     END
                    ,[REVALUATIONAMOUNT]
                    ,[REVALUATIONTRANS]
                    ,CASE [UPG].[TRANSACTIONTYPE]
                        WHEN 1 THEN 1
                        WHEN 2 THEN 2
                        WHEN 3 THEN 3
                        WHEN 4 THEN 4
                        WHEN 5 THEN 15
                        WHEN 6 THEN 5
                        WHEN 7 THEN 6
                        WHEN 8 THEN 7
                        WHEN 9 THEN 8
                        WHEN 10 THEN 9
                        WHEN 11 THEN 10
                        WHEN 12 THEN 11
                        WHEN 13 THEN 12
                        WHEN 100 THEN 100
                        ELSE 0
                     END
                    ,[UPG].[DATAAREAID]
                    ,[UPG].[PARTITION]
                  FROM [dbo].[ASSETDEPBOOKJOURNALTRANS] UPG
                  JOIN [dbo].[LEDGERJOURNALTRANS] LJT on LJT.JOURNALNUM = UPG.JOURNALID
                    AND LJT.LINENUM = UPG.LINENUM
                    AND LJT.DATAAREAID = UPG.DATAAREAID
                    AND LJT.PARTITION = UPG.PARTITION
                  LEFT OUTER JOIN [dbo].[ASSETTRANSASSETDEPBOOKTRANSLINKUPGRADETMP] RESERVE
                    ON [RESERVE].[ASSETDEPBOOKTRANSRECID] = [UPG].[RESERVETRANSID]
                    AND [RESERVE].[DATAAREAID] = [UPG].[DATAAREAID]
                    AND [RESERVE].[PARTITION] = [UPG].[PARTITION]
                    WHERE
                            [UPG].[DATAAREAID] = '%1'
                        AND [UPG].[PARTITION] = %2
                        AND NOT EXISTS
                        (SELECT RECID FROM [dbo].[LEDGERJOURNALTRANS_ASSET]
                        WHERE [LEDGERJOURNALTRANS_ASSET].[REFRECID] = [LJT].[RECID]
                            AND [LEDGERJOURNALTRANS_ASSET].[DATAAREAID] = [LJT].[DATAAREAID]
                            AND [LEDGERJOURNALTRANS_ASSET].[PARTITION] = [LJT].[PARTITION])
                ", curExt(), getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>