<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetSumCalc_Budget</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetSumCalc_Budget extends RAssetSumCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(RAssetBudgetTrans));

        queryBuildDataSource.orderMode(OrderMode::GroupBy);

        queryBuildDataSource.addSelectionField(fieldNum(RAssetBudgetTrans, AmountCur), SelectionField::Sum);

        queryBuildDataSource.addSortField(fieldNum(RAssetBudgetTrans, AssetTransType));
        queryBuildDataSource.addSortField(fieldNum(RAssetBudgetTrans, CurrencyCode));
        queryBuildDataSource.addSortField(fieldNum(RAssetBudgetTrans, TransDate));

        queryBuildDataSource.addRange(fieldNum(RAssetBudgetTrans, AssetId)).value(sumDescendants
            ? this.getDescendantRange(rangeAssetId, rAssetStandardId)
            : rangeAssetId);

        queryBuildDataSource.addRange(fieldNum(RAssetBudgetTrans, BudgetModel)).value(rangebudgetModel);

        if (dateTo)
        {
            queryBuildDataSource.addRange(fieldNum(RAssetBudgetTrans, TransDate)).value(queryRange(dateFrom, dateTo));
        }

        queryBuildDataSource.addRange(fieldNum(RAssetBudgetTrans, AssetStandardId)).value(queryValue(rAssetStandardId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        if (!calculated)
        {
            RAssetStandards rAssetStandards = RAssetStandards::find(rangeAssetId, rAssetStandardId);
            QueryRun queryRun = new QueryRun(this.buildQuery());

            while (queryRun.next())
            {
                RAssetBudgetTrans rAssetBudgetTrans = queryRun.get(tableNum(RAssetBudgetTrans));
                
                RAssetAmount amountParamCur;
                if (rAssetStandards.CurrencyCode != rAssetBudgetTrans.CurrencyCode)
                {
                    amountParamCur = CurrencyExchangeHelper::curAmount2CurAmount(rAssetBudgetTrans.AmountCur, rAssetBudgetTrans.CurrencyCode, rAssetStandards.CurrencyCode, rAssetBudgetTrans.TransDate);
                }
                else
                {
                    amountParamCur = rAssetBudgetTrans.AmountCur;
                }

                RAssetAmount rassetAmountMST = CurrencyExchangeHelper::mstAmount(rAssetBudgetTrans.AmountCur, rAssetBudgetTrans.CurrencyCode, rAssetBudgetTrans.TransDate);

                this.updateSum(rAssetBudgetTrans.AssetTransType, amountParamCur, rassetAmountMST);
            }

            if (sumDescendants)
            {
                container descendants = str2con_RU(this.getDescendantRange(rangeAssetId, rAssetStandardId));
                for (int loop = 1; loop <= conLen(descendants); loop++)
                {
                    if (conPeek(descendants, loop))
                    {
                        this.updateSumExtra(conPeek(descendants, loop), rAssetStandardId);
                    }
                }
            }
            else
            {
                this.updateSumExtra(rangeAssetId, rAssetStandardId);
            }

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetPeriod</Name>
				<Source><![CDATA[
    public static RAssetSumCalc_Budget newAssetPeriod(Range _rangeAssetId,
        Range _rassetStandardId,
        Range _rangeBudgetModel,
        RAssetTransDate _dateTo = dateNull(),
        RAssetTransDate _dateFrom = dateNull(),
        boolean _sumDescendants = false)
    {
        RAssetSumCalc_Budget rAssetSumCalc_Budget = new RAssetSumCalc_Budget();
        rAssetSumCalc_Budget.parmRangeAssetId(_rangeAssetId);
        rAssetSumCalc_Budget.parmRangeAssetStandard(_rassetStandardId);
        rAssetSumCalc_Budget.parmRangeBudgetModel(_rangeBudgetModel);
        rAssetSumCalc_Budget.parmDateFrom(_dateFrom);
        rAssetSumCalc_Budget.parmDateTo(_dateTo);
        rAssetSumCalc_Budget.parmSumDescendants(_sumDescendants);
        return rAssetSumCalc_Budget;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>