<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchConfirmationRequestJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used to create journal when sending a purchase order to a vendor, to request confirmation from the vendor.
/// </summary>
public class PurchConfirmationRequestJournalCreate extends PurchPurchOrderJournalCreate
{
    PurchConfirmationRequestJour purchConfirmationRequestJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLedgerPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that posting in the ledger period is allowed.
    /// </summary>
    /// <returns>
    /// true if posting in the ledger period is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Allow sending of the confirmation request even if ledger period is closed.
    /// </remarks>
    protected boolean checkLedgerPeriod()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header when the purchase order is sent to the vendor.
    /// </summary>
    protected void createJournalHeader()
    {
        this.setDeliveryFields();

        purchConfirmationRequestJour.Qty                  = purchTotals.purchQty();
        purchConfirmationRequestJour.Weight               = purchTotals.purchWeight();
        purchConfirmationRequestJour.Volume               = purchTotals.purchVolume();
        purchConfirmationRequestJour.OrderBalance         = purchTotals.purchBalance();
        PurchConfirmationRequestJour.SumLineDisc          = purchTotals.purchLineDisc();
        purchConfirmationRequestJour.EndDisc              = purchTotals.purchEndDisc();
        purchConfirmationRequestJour.SumMarkup            = purchTotals.purchMarkup();
        purchConfirmationRequestJour.SumTax               = purchTotals.purchTaxTotal();
        purchConfirmationRequestJour.RoundOff             = purchTotals.purchRoundOff();
        purchConfirmationRequestJour.Amount               = purchTotals.purchTotalAmount();

        purchConfirmationRequestJour.insert();

        if (purchConfirmationRequestJour.VendVendorCollaborationType != VendVendorCollaborationType::Disabled)
        {
			PurchaseOrderResponseCreate purchaseOrderResponseCreate =
				PurchaseOrderResponseCreate::newFromPurchTable(purchTable, purchConfirmationRequestJour.DocumentDate);

			var responseRecId =
				purchaseOrderResponseCreate.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>PurchConfirmationRequestJour</c> record.
    /// </summary>
    /// <returns>
    /// The <c>PurchConfirmationRequestJour</c> record.
    /// </returns>
    public Common getJournal()
    {
        return purchConfirmationRequestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header record.
    /// </summary>
    protected void initJournalHeader()
    {
        purchConfirmationRequestJour.clear();
        purchConfirmationRequestJour.initValue();

        purchConfirmationRequestJour.DocumentDate = this.updateDate();

        if (!purchTable.selectForUpdate())
        {
            purchTable = PurchTable::findRecId(purchTable.RecId, true);
        }

        VersioningPurchaseOrder::newPurchaseOrder(purchTable).sendToVendor();

        purchConfirmationRequestJour.PurchTableVersion = PurchTableVersion::findLatest(purchTable.PurchId, purchTable.DataAreaId).RecId;
        purchConfirmationRequestJour.initFromPurchTable(purchTable);

        purchConfirmationRequestJour.setDocNum(purchTable);

        purchConfirmationRequestJour.InterCompanyPosted = this.parmInterCompanyPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousJournalEntryExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a previous journal entry exists.
    /// </summary>
    /// <returns>
    /// true if a previous journal entry exists; otherwise, false.
    /// </returns>
    protected boolean previousJournalEntryExists()
    {
        PurchConfirmationRequestJour    localPurchConfirmationRequestJour;
        PurchTableVersion               localPurchTableVersion;

        select firstOnly RecId
        from localPurchConfirmationRequestJour
        exists join localPurchTableVersion
        where localPurchConfirmationRequestJour.PurchTableVersion == localPurchTableVersion.RecId
            && localPurchTableVersion.PurchId                      == purchTable.PurchId
            && localPurchTableVersion.PurchIdDataAreaId            == purchTable.dataAreaId
            && localPurchConfirmationRequestJour.RecId             != purchConfirmationRequestJour.RecId;

        return (localPurchConfirmationRequestJour.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DeliveryPostalAddress</c> and <c>DeliveryName</c> fields on the <c>PurchConfirmationRequestJour</c> record.
    /// </summary>
    protected void setDeliveryFields()
    {
        PurchLine           localPurchLine;

        if (!purchParmTable.DeliveryPostalAddress
            || !purchParmTable.DeliveryName)
        {
            select firstonly DeliveryPostalAddress, DeliveryName, PurchId from localPurchLine
                where localPurchLine.PurchId == purchTable.PurchId;
        }

        purchConfirmationRequestJour.DeliveryPostalAddress = purchParmTable.DeliveryPostalAddress ? purchParmTable.DeliveryPostalAddress : localPurchLine.DeliveryPostalAddress;

        purchConfirmationRequestJour.DeliveryName          = purchParmTable.DeliveryName          ? purchParmTable.DeliveryName          : localPurchLine.DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchConfirmationRequestJournalCreate construct()
    {
        return new PurchConfirmationRequestJournalCreate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>