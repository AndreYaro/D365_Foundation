<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMassDeviceUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using EventLogger = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

/// <summary>
/// The <c>RetailMassDeviceUpdate</c> class implements the <c>RetailIOperatingUnitPickerCaller</c> interface for showing mass update dialog.
/// </summary>
public class RetailMassDeviceUpdate extends RunBaseBatch implements RetailIOperatingUnitPickerCaller, BatchRetryable
{
    Set         selectedOMInternalOrgRecIds;
    RecId       oMHierarchyRecId;
    container   packedOMUnits;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        packedOMUnits,
        oMHierarchyRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>.
    /// </summary>
    /// <returns>The class that contains the methods that are described by the <c>RunBaseDialogable</c>.</returns>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(RetailOperatingUnitPicker), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>RunBase</c> class.
    /// </summary>
    /// <returns>A container that contains the current instance of the <c>RunBase</c> class.</returns>
    public container pack()
    {
        if (selectedOMInternalOrgRecIds)
        {
            packedOMUnits = selectedOMInternalOrgRecIds.pack();
        }

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOMHierarchyRecId</Name>
				<Source><![CDATA[
    public RecId  parmOMHierarchyRecId(RecId _oMHierarchyRecId = oMHierarchyRecId)
    {
        oMHierarchyRecId = _oMHierarchyRecId;

        return oMHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedOMInternalOrgRecIds</Name>
				<Source><![CDATA[
    public Set parmSelectedOMInternalOrgRecIds(Set _selectedOMInternalOrgRecIds = selectedOMInternalOrgRecIds)
    {
        if (!prmIsDefault(_selectedOMInternalOrgRecIds))
        {
            selectedOMInternalOrgRecIds = _selectedOMInternalOrgRecIds;
        }

        return selectedOMInternalOrgRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSelectedOMInternalOrgRecIds</Name>
				<Source><![CDATA[
    [SysObsolete("The method is deprecated. Use getPickerInitParameters()", true, 30\11\2017)]
    public Set GetSelectedOMInternalOrgRecIds()
    {
        return selectedOMInternalOrgRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickerInitParameters</Name>
				<Source><![CDATA[
    RetailOperatingUnitPickerData getPickerInitParameters()
    {
        RetailOperatingUnitPickerData pickerInitParameter = new RetailOperatingUnitPickerData();
        pickerInitParameter.hierarchyPurpose = HierarchyPurpose::RetailPOSPosting;

        if (this.parmInBatch())
        {
            pickerInitParameter.omInternalOrganizationRecIds = this.selectedOMInternalOrgRecIds;
            pickerInitParameter.omHierarchyTypeRecId = this.oMHierarchyRecId;
        }

        return pickerInitParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperatingUnitPickerData</Name>
				<Source><![CDATA[
    void processOperatingUnitPickerData(RetailOperatingUnitPickerData operatingUnitPickerData)
    {
        this.parmSelectedOMInternalOrgRecIds(operatingUnitPickerData.omInternalOrganizationRecIds);
        this.parmOMHierarchyRecId(operatingUnitPickerData.omHierarchyTypeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    [SysObsolete('use parmSelectedOMInternalOrgRecIds method instead', true, 30\11\2017)]
    QueryRun queryRun(QueryRun  _queryRun = null)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
	/// <summary>
    /// Applies the mass activation allowed flag for all devices based upon the store selection. 
    /// </summary>
    public void run()
    {
        RetailStoreTable        storeTable;
        RetailTerminalTable     terminalTable;
        RetailDevice            device;
        PackageType             devicePackageType;
        SetEnumerator           selectedStoreEnumerator;
        SetEnumerator           oMInternalOrgRecIds;
        RetailChannelTable      retailChannelTable;
        Set selectedStoreRecIds = new Set(Types::Int64);
        Set operatingUnitType = new Set(Types::Enum);
        Set                     descendants;
        SetEnumerator           descendantsEnumerator;
        str                     unProcessedList;
        Counter                 processed, unProcessed, skipProcess;

        System.Exception exception;

        try
        {
            EventLogger::EventWriteRetailServicingInformation('Retail Mass Device Update started.'); 

            oMInternalOrgRecIds = selectedOMInternalOrgRecIds.getEnumerator();

            // Used to filter the OMOperating unit type to include only Retail channel.
            operatingUnitType.add(OMOperatingUnitType::RetailChannel);

            while (oMInternalOrgRecIds.moveNext())
            {
                //get all the descendents for selected hierarchy node.
                descendants = OMOperatingUnit::getDescendantsAndSelf(
                                        oMInternalOrgRecIds.current(),
                                        oMHierarchyRecId,
                                        DateTimeUtil::utcNow(),
                                        operatingUnitType
                                        );

                // start traversing on the descendants.
                descendantsEnumerator = descendants.getEnumerator();
                while (descendantsEnumerator.moveNext())
                {
                    retailChannelTable = RetailChannelTable::findByOperatingUnitId(descendantsEnumerator.current());

                    if (retailChannelTable.RecId &&
                        retailChannelTable.ChannelType == RetailChannelType::RetailStore &&
                        !selectedStoreRecIds.in(retailChannelTable.RecId))
                    {
                        selectedStoreRecIds.add(retailChannelTable.RecId);
                    }
                }
            }

            // start processing for selected Stores.
            selectedStoreEnumerator = selectedStoreRecIds.getEnumerator();
            while (selectedStoreEnumerator.moveNext())
            {
                storeTable = RetailStoreTable::findRecId(selectedStoreEnumerator.current());

                while select * from terminalTable where terminalTable.StoreRecId == storeTable.RecId
                {
                    try
                    {
                        while select forupdate * from device where device.Terminal == terminalTable.terminalId
                        {
                            devicePackageType = device.computePackageTypeFilter();

                            if ((devicePackageType == PackageType::ModernPosWithOffline) || (devicePackageType == PackageType::ModernPosWithoutOffline))
                            {   // Only process for Modern POS (with or without offline)
                                device.AllowMassActivation = NoYes::Yes;
                                device.update();

                                processed++;
                            }
                            else
                            {
                                skipProcess++;
                            }
                        }
                    }
                    catch (exception)
                    {
                        unProcessed++;

                        if (unProcessedList)
                        {
                            unProcessedList = unProcessedList + ', ' + terminalTable.terminalId;
                        }
                        else
                        {
                            unProcessedList = terminalTable.terminalId;
                        }
                        
                        continue; //Although this one failed, we can still continue with others.
                    }
                }
            }

            if (this.isInBatch())
            {
                if (unProcessed)
                {
                    throw Global::error(strFmt('%1 of %2 are processed failed: %3', unProcessed, processed + unProcessed, unProcessedList));
                }
                else if (!processed)
                {
                    throw Global::error('No devices processed.');
                }
            }
        
            EventLogger::EventWriteRetailServicingInformation(strfmt('Retail Mass Update completed - Processed: %1 skipped: %2', processed, skipProcess));
        }
        catch (exception)
        {
            if (this.isInBatch())
            {
                EventLogger::EventWriteRetailServicingInformation('Retail Mass Update completed with exception.');
                throw Global::error('Retail Mass Device Updae job failed.');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                if (packedOMUnits)
                {
                    selectedOMInternalOrgRecIds = Set::create(packedOMUnits);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Retail:RetailMassDeviceUpdate";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailMassDeviceUpdate   RetailMassDeviceUpdate  = new RetailMassDeviceUpdate();

        if (RetailMassDeviceUpdate.prompt())
        {
            RetailMassDeviceUpdate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    [SysObsolete('use run method instead', true, 30\11\2017)]
    static void runServer(container _packedRetailMassDeviceUpdate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>