<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventValueReportController</c> class handles initialization for the
///    <c>InventValueReport</c> report.
/// </summary>
class InventValueReportController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogShow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detaches the form after the report viewer is shown.
    /// </summary>
    /// <remarks>
    /// This method lets the user show multiple report viewers.
    /// </remarks>
    protected void dialogShow()
    {
        if (useReportViewerForm)
        {
            var sysOperationDialog = dialog as SysOperationDialog;
            if (sysOperationDialog)
            {
                sysOperationDialog.run();
                var formRun = sysOperationDialog.formRun();
                formRun.detach();
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventValueReportContract inventValueReportContract = this.parmReportContract().parmRdpContract() as InventValueReportContract;

        inventValueReportContract.setReportLayoutParameters();

        if (this.isInBatch())
        {
            inventValueReportContract.parmSRSPrintSettings(this.parmReportContract().parmPrintSettings().pack());
        }
        inventValueReportContract.parmReportName(this.parmReportName());

        this.saveLast();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true if all the parameters are valid; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean isValid = super();
        
        InventValueReportContract inventValueReportContract = this.parmReportContract().parmRdpContract() as InventValueReportContract;
        InventValueReportUIBuilder::infoOnce(inventValueReportContract);
        isValid = isValid && InventValueReportUIBuilder::isTransactionModeSet(inventValueReportContract, this.dialog().formRun());

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueReportController construct()
    {
        return new InventValueReportController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDimensionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the given dimension set has more than 1 dimension.
    /// </summary>
    /// <param name="_dimensionSet">
    /// The record ID of the dimension set.
    /// </param>
    /// <returns>
    /// true if the dimension set has more than 1 dimension; otherwise, false.
    /// </returns>
    public static boolean hasDimensionSet(RefRecId _dimensionSet)
    {
        boolean                 retVal = false;
        DimensionHierarchyLevel dimensionHierarchyLevel;

        // Only print a dimension set if the dimenset has more than 1 dimension
        if (_dimensionSet)
        {
            select count(RecId) from dimensionHierarchyLevel
                where dimensionHierarchyLevel.DimensionHierarchy == _dimensionSet;
            retVal = dimensionHierarchyLevel.RecId > 1;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventValueReportController controller = InventValueReportController::construct();
        ReportName reportName = InventValueReportController::reportName(_args);

        controller.parmReportName(reportName);
        controller.parmDialogCaption("@SYS323601");
        controller.parmDisableRefreshButton(true);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the report name.
    /// </summary>
    /// <param name = "_args">An instance of the <c>Args</c>.</param>
    /// <returns>The report name.</returns>
    protected static ReportName reportName(Args _args)
    {
        if (_args.menuItemName() == menuItemOutputStr(InventValueExport))
        {
            return ssrsReportStr(InventValue, Excel);
        }
        
        return ssrsReportStr(InventValue, Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportLayoutParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the <c>InventValueReportContract</c> object member-variables according to the report definition.
    /// </summary>
    /// <param name="_inventValueReportContract">
    /// The report contract object.
    /// </param>
    [SysObsolete('This method is obsolete. Use InventValueReportContract.setReportLayoutParameters instead.', false, 31\03\2021)]
    public static void setReportLayoutParameters(InventValueReportContract _inventValueReportContract)
    {
        #localmacro.SetInventDimReportParameter
            _inventValueReportContract.parmView%1(inventValueReport.viewInventDimParm().isFieldIdEnabled(fieldNum(InventDim, %1)));
            _inventValueReportContract.parmView%1Total(inventValueReport.totalInventDimParm().isFieldIdEnabled(fieldNum(InventDim, %1)));
        #endmacro

        InventValueReport inventValueReport = InventValueReport::findByReportId(_inventValueReportContract.parmReportId());

        #SetInventDimReportParameter(ConfigId)

        #SetInventDimReportParameter(InventColorId)

        #SetInventDimReportParameter(InventStyleId)

        #SetInventDimReportParameter(InventVersionId)

        // <GEERU>
        #SetInventDimReportParameter(InventGTDId_RU)
        #SetInventDimReportParameter(InventProfileId_RU)
        #SetInventDimReportParameter(InventOwnerId_RU)
        // </GEERU>

        #SetInventDimReportParameter(InventSizeId)

        #SetInventDimReportParameter(InventSiteId)

        #SetInventDimReportParameter(InventLocationId)

        #SetInventDimReportParameter(WMSLocationId)

        #SetInventDimReportParameter(WMSPalletId)

        #SetInventDimReportParameter(InventBatchId)

        #SetInventDimReportParameter(InventSerialId)

        #SetInventDimReportParameter(InventDimension1);
        #SetInventDimReportParameter(InventDimension2);
        #SetInventDimReportParameter(InventDimension3);
        #SetInventDimReportParameter(InventDimension4);
        #SetInventDimReportParameter(InventDimension5);
        #SetInventDimReportParameter(InventDimension6);
        #SetInventDimReportParameter(InventDimension7);
        #SetInventDimReportParameter(InventDimension8);
        #SetInventDimReportParameter(InventDimension9);
        #SetInventDimReportParameter(InventDimension10);
        #SetInventDimReportParameter(InventDimension11);
        #SetInventDimReportParameter(InventDimension12);

        _inventValueReportContract.parmIncludeNotPostedValue(inventValueReport.IncludeNotPostedValue);

        _inventValueReportContract.parmWithDimensionSet(InventValueReportController::hasDimensionSet(inventValueReport.DimensionFocus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        if (InventValueReportAdjFromAndToDateToDateIntervalFlight::instance().isEnabled())
        {
            InventValueReportContract contract = this.parmReportContract().parmRdpContract() as InventValueReportContract;

            if (contract)
            {
                contract.adjustFromAndToDateToDateInterval();
            }
        }

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>