<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobStatusNotPlanned</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobStatusNotPlanned</c> class performs operations for kanban jobs that are in a not
///    planned state.
/// </summary>
[LeanKanbanJobStatusFactoryAttribute(LeanKanbanJobStatus::NotPlanned)]
public class KanbanJobStatusNotPlanned extends KanbanJobStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a kanban job with the <c>LeanKanbanJobStatus::NotPlanned</c> status can be
    /// deleted.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean canDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadyForStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether all preconditions are met and the <c>KanbanJob</c> is ready for a given target
    /// status update.
    /// </summary>
    /// <param name="_status">
    /// The target status.
    /// </param>
    /// <param name="_silent">
    /// A Boolean value that indicates whether the method can add warnings to the infolog; optional.
    /// </param>
    /// <returns>
    /// true if the kanban job is ready for the status update; otherwise, false.
    /// </returns>
    /// <remarks>
    /// For jobs that can have a 'planned' status, this status must be set explicitly and cannot be skipped.
    /// </remarks>
    public boolean isReadyForStatusUpdate(
        LeanKanbanJobStatus _status = this.nextStatus(),
        boolean             _silent = false)
    {
        Kanban      kanban      = kanbanJob.kanban();
        KanbanRule  kanbanRule  = KanbanRule::find(kanban.KanbanRule);

        if (kanbanRule.status().isOutdated())
        {
            return _silent ? false : checkFailed(strFmt("@SYS138404",kanban.KanbanId,kanbanJob.PlanActivityName,_status,kanbanRule.RuleId));
        }

        if (   !kanbanRule.UsesCirculatingCards
            && !kanban.kanbanCard())
        {
            return _silent ? false : checkFailed(strFmt("@SYS135901",kanban.KanbanId,kanbanJob.PlanActivityName,_status));
        }

        if (   _status != LeanKanbanJobStatus::Planned
            && kanbanJob.type().canHaveStatus(LeanKanbanJobStatus::Planned)
            && kanbanJob.QuantityOrdered)
        {
            return _silent ? false : checkFailed(strFmt("@SYS134365",kanban.KanbanId,kanbanJob.PlanActivityName,_status));
        }

        return super(_status,_silent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static KanbanJobStatus construct()
    {
        return new KanbanJobStatusNotPlanned();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>