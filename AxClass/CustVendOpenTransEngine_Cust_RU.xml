<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOpenTransEngine_Cust_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendOpenTransEngine_Cust_RU extends CustVendOpenTransEngine_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLookupForAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the sales agreements lookup.
    /// </summary>
    /// <param name="_ctrl">
    ///     The control for which lookup will be created.
    /// </param>
    /// <param name="_company">
    ///     The company account identifier; optional.
    /// </param>
    protected void createLookupForAgreement(
        FormStringControl   _ctrl,
        CompanyId           _company = curext())
    {
        SalesTable salesTable;
        ;
        salesTable.CustAccount = custVendAC;

        changeCompany(this.validateCompany(_company))
        {
            SalesAgreementHeader::salesAgreementLookup(_ctrl, salesTable, '', true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpRecIDValue_RU</Name>
				<Source><![CDATA[
        protected TmpRecIDValue_RU createTmpRecIDValue_RU()
    {
        TmpRecIDValue_RU        retTmpRecIDValue_RU;
        Query                   q;
        QueryBuildDataSource    ds;
        QueryBuildRange         range;
        ;

        //Add transactions amount difference
        q = new Query(querystr(CustOpenTrans_FactureJour_RU));
        ds = q.dataSourceTable(tablenum(CustTransOpen));

        range = findOrCreateRange_W(ds, fieldnum(CustTransOpen, AccountNum));
        range.value(this.custVendAC());

        retTmpRecIDValue_RU = TmpRecIDValue_RU::create( q,
                                                        tablenum(CustTrans),
                                                        fieldnum(CustTrans, RecId),
                                                        tablenum(FactureJour_RU),
                                                        fieldnum(FactureJour_RU, FactureId));

        //Add everything else transactions entry into invoice
        q = new Query(querystr(CustOpenTrans_FactureTrans_RU));
        ds = q.dataSourceTable(tablenum(CustTransOpen));

        range = findOrCreateRange_W(ds, fieldnum(CustTransOpen, AccountNum));
        range.value(this.custVendAC());

        retTmpRecIDValue_RU = TmpRecIDValue_RU::create( q,
                                                        tablenum(CustTrans),
                                                        fieldnum(CustTrans, RecId),
                                                        tablenum(FactureJour_RU),
                                                        fieldnum(FactureJour_RU, FactureId),
                                                        retTmpRecIDValue_RU);

        //If temporary table ther aren't records, need add into table empty records
        select firstonly retTmpRecIDValue_RU;

        if (! retTmpRecIDValue_RU)
        {
            retTmpRecIDValue_RU = TmpRecIDValue_RU::emptyTable();
        }

        return retTmpRecIDValue_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSourceName</Name>
				<Source><![CDATA[
        //Initialize datasources
    #define.CreditCustTrans('CreditCustTrans')
    #define.CreditCustTransOpen('CreditCustTransOpen')

    #define.DebitCustTrans('DebitCustTrans')
    #define.DebitCustTransOpen('DebitCustTransOpen')

    protected void initDataSourceName()
    {
        ;
        super();

        //Datasources names are
        creditCustVendTransName     = #CreditCustTrans;
        creditCustVendTransOpenName = #CreditCustTransOpen;

        debitCustVendTransName      = #DebitCustTrans;
        debitCustVendTransOpenName  = #DebitCustTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormFromCustInvoiceJour</Name>
				<Source><![CDATA[
        //It do initialization form from CustInvoiceJour
    protected void initFormFromCustInvoiceJour()
    {
        CustInvoiceJour     custInvoiceJour;

        ;

        custInvoiceJour      = formRun.args().record();

        if (! custInvoiceJour.RecId)
        {
             throw error("@SYS22996");
        }

        currencyCode    = custInvoiceJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormFromCustTable</Name>
				<Source><![CDATA[
        //It do initialization form from CustTable
    protected void initFormFromCustTable()
    {
        ;

        custVendTable     = formRun.args().record();

        if (! custVendTable.RecId)
        {
            throw error("@SYS22842");
        }

        currencyCode      = custVendTable.Currency;
        custVendAC        = custVendTable.AccountNum;
        partyRecId        = custVendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormFromLedgerJournalTrans</Name>
				<Source><![CDATA[
        //It do initialization form from LedgerJournalTrans
    protected void initFormFromLedgerJournalTrans()
    {
        LedgerJournalTrans  ledgerJournalTrans;

        ;

        ledgerJournalTrans = formRun.args().record();

        if (! ledgerJournalTrans.RecId)
        {
             throw error("@SYS22996");
        }

        transactionDate     = ledgerJournalTrans.TransDate;
        discGraceDays       = VendPaymModeTable::find(ledgerJournalTrans.PaymMode).DiscGraceDays;
        currencyCode        = ledgerJournalTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormFromSalesTable</Name>
				<Source><![CDATA[
        //It do initialization form from SalesTable
    protected void initFormFromSalesTable()
    {
        SalesTable  salesTable;

        ;

        salesTable      = formRun.args().record();

        if (! salesTable.RecId)
        {
             throw error("@SYS22996");
        }

        currencyCode    = salesTable.CurrencyCode;
        custVendAC      = salesTable.CustAccount;
        custVendTable   = CustTable::find(custVendAC);
        partyRecId      = custVendTable.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommon</Name>
				<Source><![CDATA[
        //Initialization from common table [common == formRun.args().record()]
    protected void initFromCommon()
    {
        ;

        super();

        switch (common.TableId)
        {
            case (tablenum(CustTable)):
                this.initFormFromCustTable();
                break;

            case (tablenum(SalesTable)):
                this.initFormFromSalesTable();
                break;

            case (tablenum(CustInvoiceJour)):
                this.initFormFromCustInvoiceJour();
                break;

            case (tablenum(LedgerJournalTrans)):
                this.initFormFromLedgerJournalTrans();
                break;

            default :
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRemainAmount</Name>
				<Source><![CDATA[
        public void initRemainAmount()
    {
        SpecTrans       specTrans;
        CustTransOpen   custTransOpen;

        ;

        while select  specTrans
                where   specTrans.SpecTableId   == common.TableId           &&
                        specTrans.SpecRecId     == common.RecId
                join    RecId from custTransOpen
                where   custTransOpen.TableId   == specTrans.RefTableId     &&
                        custTransOpen.RecId     == specTrans.RefRecId
        {
            if (specTrans.Balance01 > 0)
            {
                this.insertIntoDebitAmount( custTransOpen.RecId,
                                            specTrans.Balance01,
                                            specTrans.custTrans().CurrencyCode,
                                            DebCredUnknown_RU::Debit);
            }
            else if (specTrans.Balance01 < 0)
            {
                this.insertIntoCreditAmount( custTransOpen.RecId,
                                            specTrans.Balance01,
                                            specTrans.custTrans().CurrencyCode,
                                            DebCredUnknown_RU::Credit);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableID</Name>
				<Source><![CDATA[
        //Initialize TableId
    protected void initTableID()
    {
        ;
        custVendInvoiceJourID    = tablenum(CustInvoiceJour);
        custVendInvoiceTransID   = tablenum(CustInvoiceTrans);
        custVendTableID          = tablenum(CustTable);
        custVendTransID          = tablenum(CustTrans);
        custVendTransOpenID      = tablenum(CustTransOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(FormRun _formRun)
    {
        ;

        super(_formRun);

        cashDiscUnspecificSpecific = CustParameters::find().CashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilterValueForAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets filter value for agreements.
    /// </summary>
    /// <param name="_formDS">
    ///     Datasource where filter will be applied to.
    /// </param>
    /// <param name="_agreementId">
    ///     The filter value.
    /// </param>
    protected void setFilterValueForAgreement(FormDataSource _formDS, Range _agreementId)
    {
        QueryBuildDataSource    ds;
        QueryBuildRange         range;
        Query                   q = this.getQuery(_formDS);
        RecId                   dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();
        ;

        SysQuery::clearDimensionRangesFromQuery(q);

        if (_agreementId && dimAttrRecId)
        {
            ds = q.dataSourceTable(custVendTransID);

            range = SysQuery::addDimensionAttributeRange(
                q,
                ds.name(),
                fieldStr(CustTrans, DefaultDimension),
                DimensionComponent::DimensionAttribute,
                _agreementId,
                DimensionAttribute::find(dimAttrRecId).Name);

            if (range)
            {
                range.status(RangeStatus::Locked);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>