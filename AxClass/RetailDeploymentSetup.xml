<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDeploymentSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
using AppLogging = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;
using Microsoft.Dynamics.ApplicationPlatform.Environment;
using Microsoft.Dynamics.Commerce.Deployment.Headquarters;

/// <summary>
/// The <c>RetailDeploymentSetup</c> class which enables retail deployment configuration changes during AOS install.
/// </summary>
[SysSetupTableAttribute(tableStr(UserInfo))]
public final class RetailDeploymentSetup implements SysSetup
{
    private str identityProvider;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates retail service user, which will be used by retail server to communicate with Real-time service (RTS).
    /// </summary>
    public void loadData()
    {
        const str userId = 'RetailServerSystemAccount@dynamics.com';
        identityProvider = RetailDeploymentUtility::GetAadAuthorityPrefix();
        str aadTenantId = RetailDeploymentUtility::GetAadTenantId();

        // Create the user
        if (!System.String::IsNullOrWhiteSpace(identityProvider))
        {
            ttsbegin;
            AppLogging::EventWriteRetailDeploymentSetupInformation(strFmt('Begin creating retail service user with the identity provider: %1', identityProvider));
            RetailDeploymentUtility::CreateRetailServiceUser(userId, identityProvider);
            AppLogging::EventWriteRetailDeploymentSetupInformation(strFmt('Finished creating retail service user with the identity provider: %1', identityProvider));
            ttscommit;
        }
        else
        {
            AppLogging::EventWriteRetailDeploymentSetupWarning('Skipping retail service user creation since the identity provider is missing in the web.config file.');
        }

        if (RetailDeploymentUtility::shouldSetupDataForTestEnvironment(identityProvider, aadTenantId))
        {
            this.runSeedData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSeedData</Name>
				<Source><![CDATA[
    private void runSeedData()
    {
        int fromLine;
 
        try
        {
            AppLogging::EventWriteRetailDeploymentSetupInformation('Running CDX seed data...');
            fromLine = Global::infologLine();
            RetailCDXSeedDataAX7 seed = new RetailCDXSeedDataAX7(true);
            seed.run();
            AppLogging::EventWriteRetailDeploymentSetupInformation('Running CDX seed data completed.');
        }
        catch (Exception::CLRError)
        {
            System.Exception clrException = RetailUtilities::getLatestClrException();
            AppLogging::EventWriteRetailDeploymentSetupWarning(strFmt('CLR Exception thrown when trying to run seed data. Message: %1 Stack Trace: %2', clrException.Message, clrException.StackTrace));
        }
        catch (Exception::Error)
        {
            str exceptionMessage = RetailTransactionServiceUtilities::getInfologMessages(fromLine);
            AppLogging::EventWriteRetailDeploymentSetupWarning(strFmt('X++ Exception thrown when trying to run seed data. Message: %1', exceptionMessage));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>