<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransPerJournalDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerTransPerJournalDP</c> class is the Report Data Provider class for the
///    <c>LedgerTransPerJournal</c> SSRS report.
/// </summary>
/// <remarks>
///    The base class of this class changed in Microsoft Dynamics AX 2012 R3. Please review the new
///    base class for more information.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(LedgerTransPerJournal)),
    SRSReportParameterAttribute(classStr(LedgerTransPerJournalContract))
]
public class LedgerTransPerJournalDP extends SrsReportDataProviderPreProcessTempDB
{
    LedgerTransPerJournalTmp ledgerTransPerJournalTmp;
    private LedgerEntryJournal ledgerEntryJournal;
    private LedgerTransModuleTmp ledgerTransModuleTemp;

    boolean onlyLedger, showDimensions;
    Counter transactionCounter;
    Counter taxTransCounter;

    private const str InstrumentationNamespace = 'LedgerTransPerJournal';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCredit</Name>
				<Source><![CDATA[
    private AmountCurCredit amountCredit(LedgerTransModuleTmp _transModuleTmp)
    {
        AmountCurCredit amountCurCredit;

        if (_transModuleTmp.Correct)
        {
            if (_transModuleTmp.AmountCur > 0)
            {
                amountCurCredit = -_transModuleTmp.AmountCur;
            }
        }
        else
        {
            if (_transModuleTmp.AmountCur < 0)
            {
                amountCurCredit = -_transModuleTmp.AmountCur;
            }
        }
        return  amountCurCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCreditReporting</Name>
				<Source><![CDATA[
    private Amount amountCreditReporting(LedgerTransModuleTmp _transModuleTmp)
    {
        Amount amountCreditReporting;

        if (_transModuleTmp.Correct)
        {
            if (_transModuleTmp.ReportingCurrencyAmount > 0)
            {
                amountCreditReporting = -_transModuleTmp.ReportingCurrencyAmount;
            }
        }
        else
        {
            if (_transModuleTmp.ReportingCurrencyAmount < 0)
            {
                amountCreditReporting = -_transModuleTmp.ReportingCurrencyAmount;
            }
        }
        return  amountCreditReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDebit</Name>
				<Source><![CDATA[
    private AmountCurDebit amountDebit(LedgerTransModuleTmp _transModuleTmp)
    {
        AmountCurDebit amountCurDebit;

        if (_transModuleTmp.Correct)
        {
            if (_transModuleTmp.AmountCur < 0)
            {
                amountCurDebit = _transModuleTmp.AmountCur;
            }
        }
        else
        {
            if (_transModuleTmp.AmountCur > 0)
            {
                amountCurDebit = _transModuleTmp.AmountCur;
            }
        }
        return  amountCurDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDebitReporting</Name>
				<Source><![CDATA[
    private Amount amountDebitReporting(LedgerTransModuleTmp _transModuleTmp)
    {
        Amount amountDebitReporting;

        if (_transModuleTmp.Correct)
        {
            if (_transModuleTmp.ReportingCurrencyAmount < 0)
            {
                amountDebitReporting = _transModuleTmp.ReportingCurrencyAmount;
            }
        }
        else
        {
            if (_transModuleTmp.ReportingCurrencyAmount > 0)
            {
                amountDebitReporting = _transModuleTmp.ReportingCurrencyAmount;
            }
        }
        return  amountDebitReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDimensions</Name>
				<Source><![CDATA[
    private void clearDimensions()
    {
        ledgerTransPerJournalTmp.Flag = LedgerTransPerJournal::Zero;
        ledgerTransPerJournalTmp.DimensionAttributeName = '';
        ledgerTransPerJournalTmp.DimensionsName = '';
        ledgerTransPerJournalTmp.Value = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRelatedVoucherDetails</Name>
				<Source><![CDATA[
    private void clearRelatedVoucherDetails()
    {
        ledgerTransPerJournalTmp.ParentVoucher = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTaxDetails</Name>
				<Source><![CDATA[
    private void clearTaxDetails()
    {
        ledgerTransPerJournalTmp.Flag = LedgerTransPerJournal::One;
        ledgerTransPerJournalTmp.TaxCode = '';
        ledgerTransPerJournalTmp.TaxGroup = '';
        ledgerTransPerJournalTmp.TaxItemGroup = '';
        ledgerTransPerJournalTmp.TaxName = '';
        ledgerTransPerJournalTmp.TaxCurrencyCode = '';
        ledgerTransPerJournalTmp.TaxAmountDebit = 0;
        ledgerTransPerJournalTmp.TaxAmountCredit = 0;
        ledgerTransPerJournalTmp.VoucherTransactionCounter = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTransationDetails</Name>
				<Source><![CDATA[
    private void clearTransationDetails()
    {
        ledgerTransPerJournalTmp.Id = '';
        ledgerTransPerJournalTmp.Module = SysModule::None;
        ledgerTransPerJournalTmp.IdName = '';
        ledgerTransPerJournalTmp.TransText = '';
        ledgerTransPerJournalTmp.CurrencyCode = '';
        ledgerTransPerJournalTmp.AmountDebit = 0;
        ledgerTransPerJournalTmp.AmountCredit = 0;
        ledgerTransPerJournalTmp.VoucherTransactionCounter = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionDisplayValue</Name>
				<Source><![CDATA[
    private void getDimensionDisplayValue(DimensionAttribute _dimensionAttribute, DimensionAttributeValue _dimensionAttributeValue)
    {
        TmpLedgerBaseDimensions ledgerBaseDimensions;

        ledgerBaseDimensions.Name = _dimensionAttributeValue.getName();
        ledgerBaseDimensions.Value = _dimensionAttributeValue.getValue();
        ledgerBaseDimensions.DimensionAttributeName = _dimensionAttribute.localizedName();

        this.insertForDimension(ledgerBaseDimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransPerJournalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>LedgerTransPerJournalTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>LedgerTransPerJournalTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerTransPerJournalTmp))]
    public LedgerTransPerJournalTmp getLedgerTransPerJournalTmp()
    {
        select ledgerTransPerJournalTmp;

        return ledgerTransPerJournalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (FeatureStateProvider::isFeatureEnabled(LedgerSSRSReportSkipReportTransactionParmFlight::instance()))
        {
            skipReportTransaction = true;
        }
        return skipReportTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method inserts the filtered data into the <c>LedgerTransPerJournalTmp</c> table.
    /// </summary>
    /// <param name="_ledgerBaseDimensions">
    ///    The <c>LedgerBaseDimensions</c> table buffer.
    /// </param>
    private void insertForDimension(TmpLedgerBaseDimensions _ledgerBaseDimensions)
    {
        ledgerTransPerJournalTmp.Flag = LedgerTransPerJournal::Three;

        ledgerTransPerJournalTmp.DimensionAttributeName = _ledgerBaseDimensions.DimensionAttributeName;
        ledgerTransPerJournalTmp.DimensionsName = _ledgerBaseDimensions.Name;
        ledgerTransPerJournalTmp.Value = _ledgerBaseDimensions.Value;

        ledgerTransPerJournalTmp.insert();

        // Clear dimension details to avoid getting inserted along with other transactions.
        this.clearDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForLedgerBase</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method inserts the filtered data into the <c>LedgerTransPerJournalTmp</c> table.
    /// </summary>
    /// <param name="_transModuleTmp">
    ///    The <c>LedgerTransModuleTmp</c> table buffer.
    /// </param>
    protected void insertForLedgerBase(LedgerTransModuleTmp _transModuleTmp)
    {
        ledgerTransPerJournalTmp = this.populateLedgerTransPerJournalTmp(_transModuleTmp);
        ledgerTransPerJournalTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLedgerTransPerJournalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>LedgerTransPerJournalTmp</c> table buffer.
    /// </summary>
    /// <param name="_transModuleTmp">
    /// The <c>LedgerTransModuleTmp</c> table buffer.
    /// </param>
    /// <returns>
    /// Initialized <c>LedgerTransPerJournalTmp</c> records.
    /// </returns>
    [Wrappable(true)]
    final protected LedgerTransPerJournalTmp populateLedgerTransPerJournalTmp(LedgerTransModuleTmp _transModuleTmp)
    {
        ledgerTransPerJournalTmp.Id = _transModuleTmp.Id;
        ledgerTransPerJournalTmp.Module = _transModuleTmp.Module;
        ledgerTransPerJournalTmp.IdName = _transModuleTmp.IdName;
        ledgerTransPerJournalTmp.TransText = _transModuleTmp.TransText;
        ledgerTransPerJournalTmp.CurrencyCode = _transModuleTmp.CurrencyCode;
        
        if (_transModuleTmp.AmountCur == 0)
        {
            ledgerTransPerJournalTmp.AmountDebit = this.amountDebitReporting(_transModuleTmp);
            ledgerTransPerJournalTmp.AmountCredit = this.amountCreditReporting(_transModuleTmp);
        }
        else
        {
            ledgerTransPerJournalTmp.AmountDebit = this.amountDebit(_transModuleTmp);
            ledgerTransPerJournalTmp.AmountCredit = this.amountCredit(_transModuleTmp);
        }
        
        ledgerTransPerJournalTmp.VoucherTransactionCounter = transactionCounter;

        return ledgerTransPerJournalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method inserts the filtered data into the <c>LedgerTransPerJournalTmp</c> table.
    /// </summary>
    /// <param name="_taxTrans">
    ///    The <c>TaxTrans</c> table buffer.
    /// </param>
    private void insertForTaxTrans(TaxTrans _taxTrans)
    {
        ledgerTransPerJournalTmp.Flag = LedgerTransPerJournal::One;
        ledgerTransPerJournalTmp.TaxCode = _taxTrans.TaxCode;
        ledgerTransPerJournalTmp.TaxGroup = _taxTrans.TaxGroup;
        ledgerTransPerJournalTmp.TaxItemGroup = _taxTrans.TaxItemGroup;
        ledgerTransPerJournalTmp.TaxName = TaxTable::find(_taxTrans.TaxCode).TaxName;
        ledgerTransPerJournalTmp.TaxCurrencyCode = _taxTrans.CurrencyCode;
        ledgerTransPerJournalTmp.TaxAmountDebit = (_taxTrans.TaxAmountCur > 0) ? _taxTrans.TaxAmountCur : 0;
        ledgerTransPerJournalTmp.TaxAmountCredit = (_taxTrans.TaxAmountCur < 0) ? -(_taxTrans.TaxAmountCur) : 0;
        ledgerTransPerJournalTmp.VoucherTransactionCounter = taxTransCounter;

        ledgerTransPerJournalTmp.insert();

        // Clear tax transaction details to avoid getting inserted along with other transactions.
        this.clearTaxDetails();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVoucherDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method inserts the filtered data into the LedgerTransPerJournalTmp table.
    /// </summary>
    /// <param name="_ledgerEntryJournal">
    ///    The <c>LedgerEntryJournal</c> record.
    /// </param>
    /// <param name="_generalJournalNumber">
    ///     The general journal number that needs to be inserted.
    /// </param>
    /// <param name="_generalJournalEntryRecId">
    ///     The <c>GeneralJournalEntry</c> record id.
    /// </param>
    /// <param name="_voucher">
    ///    The <c>voucher</c> number that needs to be inserted.
    /// </param>
    /// <param name="_accountingDate">
    ///    The <c>AccountingDate</c> value that needs to be inserted.
    /// </param>
    /// <param name="_currentParentVoucher">
    ///    The <c>voucher</c> number of the parent voucher that needs to be inserted.
    /// </param>
    /// <param name="_parentGeneralJournalEntryRecId">
    ///     The record ID of the parent <c>GeneralJournalEntry</c> record; optional.
    /// </param>
    /// <param name="_ledgerJournalTable">
    ///     The <c>LedgerJournalTable</c> record; optional.
    /// </param>
    [Wrappable(true)]
    protected final void insertVoucherDetails(
        LedgerEntryJournal                  _ledgerEntryJournal,
        GeneralJournalEntryJournalNumber    _generalJournalNumber,
        GeneralJournalEntryRecId            _generalJournalEntryRecId,
        Voucher                             _voucher,
        AccountingDate                      _accountingDate,
        Voucher                             _currentParentVoucher = '',
        GeneralJournalEntryRecId            _parentGeneralJournalEntryRecId = 0,
        LedgerJournalTable                  _ledgerJournalTable = null)
    {
        ledgerTransPerJournalTmp.JournalNumber = _ledgerEntryJournal.JournalNumber;
        ledgerTransPerJournalTmp.JournalName = _ledgerJournalTable.JournalName;
        ledgerTransPerJournalTmp.Name = _ledgerJournalTable.Name;
        ledgerTransPerJournalTmp.PostedDateTime = _ledgerJournalTable.PostedDateTime;

        ledgerTransPerJournalTmp.GeneralJournalNumber = _generalJournalNumber;
        ledgerTransPerJournalTmp.GeneralJournalEntry = _generalJournalEntryRecId;
        ledgerTransPerJournalTmp.Voucher = _voucher;
        ledgerTransPerJournalTmp.AccountingDate = _accountingDate;
        ledgerTransPerJournalTmp.ParentVoucher = _currentParentVoucher;
        ledgerTransPerJournalTmp.ParentGeneralJournalEntry = _parentGeneralJournalEntryRecId;

        ledgerTransPerJournalTmp.insert();

        // Clear related voucher details to avoid getting inserted along with other transactions.
        this.clearRelatedVoucherDetails();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDimensions</Name>
				<Source><![CDATA[
    private void printDimensions(LedgerTransModuleTmp _transModuleTmp)
    {
        DimensionAttributeValue dimAttributeValue;
        DimensionAttribute dimAttribute;
        DimensionAttributeValueGroupCombination dimAttrValueGroupCombo;
        DimensionAttributeValueGroup dimAttrValueGroup;
        DimensionAttributeLevelValue dimAttrLevelValue;
        DimensionAttributeValueSetItem dimAttrValueSetItem;
        Set dimAttributes;
        RecId mainAccountDimAttr;

        switch (_transModuleTmp.Module)
        {
            case SysModule::Ledger:
                dimAttributes = new Set(Types::Int64);

                mainAccountDimAttr = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

                while select RecId from dimAttrValueGroupCombo
                    order by dimAttrValueGroupCombo.Ordinal asc, dimAttribute.Name asc
                    where dimAttrValueGroupCombo.DimensionAttributeValueCombination == _transModuleTmp.LedgerDimension
                join RecId from dimAttrValueGroup
                    where dimAttrValueGroup.RecId == dimAttrValueGroupCombo.DimensionAttributeValueGroup
                join RecId from dimAttrLevelValue
                    where dimAttrLevelValue.DimensionAttributeValueGroup == dimAttrValueGroup.RecId
                join * from dimAttributeValue
                    where dimAttributeValue.RecId == dimAttrLevelValue.DimensionAttributeValue
                join * from dimAttribute
                    where dimAttribute.RecId == dimAttributeValue.DimensionAttribute
                        && dimAttribute.RecId != mainAccountDimAttr
                {
                    // Prevent showing the same value if it exists in both an
                    // account structure and a rule structure.
                    if (!dimAttributes.in(dimAttribute.RecId))
                    {
                        dimAttributes.add(dimAttribute.RecId);
                        this.getDimensionDisplayValue(dimAttribute, dimAttributeValue);
                    }
                }
                break;

            default:
                if (_transModuleTmp.DefaultDimension)
                {
                    while select RecId from dimAttrValueSetItem
                        order by dimAttribute.Name asc
                        where dimAttrValueSetItem.DimensionAttributeValueSet == _transModuleTmp.DefaultDimension
                    join dimAttributeValue
                        where dimAttributeValue.RecId == dimAttrValueSetItem.DimensionAttributeValue
                    join dimAttribute
                        where dimAttribute.RecId == dimAttributeValue.DimensionAttribute
                    {
                        this.getDimensionDisplayValue(dimAttribute, dimAttributeValue);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printRelatedVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the vouchers that are related to the specified parent voucher.
    /// </summary>
    /// <param name="_voucher">
    /// The parent ledger transaction record that contains the parent voucher information.
    /// </param>
    /// <param name="_transDate">
    /// The parent ledger transaction record that contains the parent transdate information.
    /// </param>
    /// <param name="_showFullLedgerAccount">
    /// A Boolean value that specifies whether to show the full ledger account.
    /// </param>
    /// <param name="_generalJournalEntry">
    /// The <c>GeneralJournalEntry</c> record ID; optional.
    /// </param>
    [Wrappable(true)]
    protected final void printRelatedVouchers(Voucher _voucher,
        TransDate _transDate,
        boolean _showFullLedgerAccount,
        GeneralJournalEntryRecId _generalJournalEntry = 0)
    {
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        GeneralJournalEntry generalJournalEntry;
        RecId voucherGroupId;
        LedgerTransVoucherLink ledgerTransVoucherLink;
        LedgerJournalTable ledgerJournalTable;

        voucherGroupId = LedgerTransVoucherLink::findVoucherGroupId(_voucher, _transDate);

        if (voucherGroupId != 0)
        {
            // loop thru the related vouchers for the parent ledger transaction, excluding the parent
            while select ledgerTransVoucherLink
                where ledgerTransVoucherLink.VoucherGroupId == voucherGroupId
                    && (ledgerTransVoucherLink.Voucher != _voucher
                        || (ledgerTransVoucherLink.Voucher == _voucher && ledgerTransVoucherLink.TransDate != _transDate))
            join RecId from subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == ledgerTransVoucherLink.Voucher
                    && subledgerVoucherGeneralJournalEntry.AccountingDate == ledgerTransVoucherLink.TransDate
                    && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == ledgerTransVoucherLink.DataAreaId
            join AccountingDate, JournalNumber, RecId from generalJournalEntry
                where generalJournalEntry.RecId == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
            {
                ledgerTransPerJournalTmp.TransactionsFound = false;
                ledgerTransPerJournalTmp.DimensionsFound = showDimensions;
                ledgerTransPerJournalTmp.TaxTransactionsFound = false;

                // Ignore the parent voucher which has the same transdate since the voucher details would have already been inserted

                // Print voucher and date header
                ledgerJournalTable = LedgerJournalTable::find(ledgerEntryJournal.JournalNumber);
                this.insertVoucherDetails(ledgerEntryJournal,
                    generalJournalEntry.JournalNumber,
                    generalJournalEntry.RecId,
                    ledgerTransVoucherLink.Voucher,
                    generalJournalEntry.AccountingDate,
                    _voucher,
                    _generalJournalEntry,
                    ledgerJournalTable);

                // Print transaction lines for related voucher
                this.printTransactions(_showFullLedgerAccount, generalJournalEntry.RecId);

                // Print taxes for related voucher
                this.printTaxTrans(ledgerTransVoucherLink.Voucher, ledgerTransVoucherLink.TransDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts the filtered data from <c>TaxTrans</c> buffer into the <c>LedgerTransPerJournalTmp</c> table.
    /// </summary>
    /// <param name = "_voucher">
    /// The voucher value.
    /// </param>
    /// <param name = "_transDate">
    /// The Transaction Date.
    /// </param>
    [Wrappable(true)]
    protected final void printTaxTrans(Voucher _voucher, TransDate _transDate)
    {
        TaxTrans taxTrans;

        while select taxTrans
            where taxTrans.Voucher == _voucher
                && taxTrans.TransDate == _transDate
        {
            taxTransCounter++;
            this.insertForTaxTrans(taxTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints transaction lines for a <c>GeneralJournalEntry</c> record.
    /// </summary>
    /// <param name="_showFullLedgerAccount">
    /// A value that indicates whether to display the ledger account or the main account.
    /// </param>
    /// <param name="_generalJournalEntryRecId">
    /// The record ID of the <c>GeneralJournalEntry</c> record.
    /// </param>
    [Wrappable(true)]
    protected final void printTransactions(boolean _showFullLedgerAccount, RecId _generalJournalEntryRecId)
    {
        LedgerTransModule ledgerTransModule;
        LedgerTransModuleTmp transModuleTmp;

        if (!_showFullLedgerAccount)
        {
            ledgerTransPerJournalTmp.Flag = LedgerTransPerJournal::Two;
        }

        transModuleTmp.linkPhysicalTableInstance(ledgerTransModuleTemp);

        // Find all the transaction records for the voucher and date and add these as records
        // in the transModuleTmp table
        ledgerTransModule = LedgerTransModule::constructForSpecificTable(transModuleTmp);
        ledgerTransModule.parmShowMainAccountOnly(!_showFullLedgerAccount);

        if (onlyLedger)
        {
            ledgerTransModule.excludeAllModules();
            ledgerTransModule.parmExcludeGeneralLedger(false);
        }

        ledgerTransModule.createTransModule(_generalJournalEntryRecId);
        transModuleTmp = ledgerTransModule.transModule();

        while select transModuleTmp
           order by AmountCur desc, Module asc, Id asc
        {
            transactionCounter++;
            this.insertForLedgerBase(transModuleTmp);

            if (showDimensions)
            {
                this.printDimensions(transModuleTmp);
            }

            // Clear tmp ledger base details after the dimension details for the
            // ledger account is inserted, in this way we avoid the transaction
            // details from getting inserted unnecessarily.
            this.clearTransationDetails();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by the
    ///    <c>LedgerTransPerJournal</c> report.
    /// </remarks>
    public void processReport()
    {
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
        LedgerTransPerJournalContract contract = this.parmDataContract() as LedgerTransPerJournalContract;

        using (SysInstrumentationActivityContext activityContext = this.logProcessReport(instrumentationLogger, contract))
        {
            GeneralJournalEntry generalJournalEntry;
            LedgerJournalTable ledgerJournalTable;
            LedgerTransPerJournalTmp ledgerTransPerJournalTmpJoin;

            boolean showFullLedgerAccount = contract.parmShowFullLedgerAccount();
            onlyLedger = contract.parmOnlyLedger();
            showDimensions = contract.parmShowDimensions();
            transactionCounter = 0;
            taxTransCounter = 0;

            this.takeOwnershipOfTempTable(ledgerTransPerJournalTmp);
            this.takeOwnershipOfTempTable(ledgerTransPerJournalTmpJoin);
            ledgerTransPerJournalTmpJoin.linkPhysicalTableInstance(ledgerTransPerJournalTmp);

            Query query = this.buildQueryToProcessReport();

            QueryRun queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
                ledgerEntryJournal = queryRun.get(tableNum(LedgerEntryJournal)) as LedgerEntryJournal;
                ledgerJournalTable = queryRun.get(tableNum(LedgerJournalTable)) as LedgerJournalTable;

                ledgerTransPerJournalTmp.clear();

                ledgerTransPerJournalTmp.TransactionsFound = false;
                ledgerTransPerJournalTmp.DimensionsFound = showDimensions;
                ledgerTransPerJournalTmp.TaxTransactionsFound = false;

                this.insertVoucherDetails(ledgerEntryJournal,
                    generalJournalEntry.JournalNumber,
                    generalJournalEntry.RecId,
                    generalJournalEntry.SubledgerVoucher,
                    generalJournalEntry.AccountingDate,
                    '',
                    0,
                    ledgerJournalTable);

                this.printTransactions(showFullLedgerAccount, generalJournalEntry.RecId);

                this.printTaxTrans(generalJournalEntry.SubledgerVoucher, generalJournalEntry.AccountingDate);

                this.printRelatedVouchers(generalJournalEntry.SubledgerVoucher,
                    generalJournalEntry.AccountingDate,
                    showFullLedgerAccount,
                    generalJournalEntry.RecId);
            }

            // Sets flags to indicate which record types were generated for each voucher. These flags are used to
            // toggle visibility of controls on the report design
            update_recordSet ledgerTransPerJournalTmp
                setting TransactionsFound = true
                exists join ledgerTransPerJournalTmpJoin
                    where ledgerTransPerJournalTmpJoin.Voucher == ledgerTransPerJournalTmp.Voucher
                        && ledgerTransPerJournalTmpJoin.VoucherTransactionCounter != 0;

            if (showDimensions)
            {
                update_recordSet ledgerTransPerJournalTmp
                    setting DimensionsFound = false
                    notExists join ledgerTransPerJournalTmpJoin
                        where ledgerTransPerJournalTmpJoin.Voucher == ledgerTransPerJournalTmp.Voucher
                            && ledgerTransPerJournalTmpJoin.VoucherTransactionCounter == ledgerTransPerJournalTmp.VoucherTransactionCounter
                            // Dimension records have Flag = Three
                            && ledgerTransPerJournalTmpJoin.Flag == LedgerTransPerJournal::Three;
            }

            update_recordSet ledgerTransPerJournalTmp
                setting TaxTransactionsFound = true
                exists join ledgerTransPerJournalTmpJoin
                    where ledgerTransPerJournalTmpJoin.Voucher == ledgerTransPerJournalTmp.Voucher
                        // Tax records have Flag = One
                        && ledgerTransPerJournalTmpJoin.Flag == LedgerTransPerJournal::One;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryToProcessReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a query to process the report business logic.
    /// </summary>
    /// <returns>
    /// Returns the query to process the report business logic.
    /// </returns>
    [Wrappable(true)]
    protected final Query buildQueryToProcessReport()
    {
        Query query = this.parmQuery();

        QueryBuildDataSource ds = query.dataSourceTable(tableNum(GeneralJournalEntry));
        QueryBuildRange range = SysQuery::findOrCreateRange(ds, fieldNum(GeneralJournalEntry, Ledger));
        range.value(SysQuery::value(Ledger::current()));

        if (this.parmDataContract().parmFromDate() != dateNull()
            && this.parmDataContract().parmToDate() != dateNull())
        {
            QueryBuildRange dateRange = SysQuery::findOrCreateRange(ds, fieldnum(GeneralJournalEntry, AccountingDate));
            dateRange.value(SysQuery::range(this.parmDataContract().parmFromDate(), this.parmDataContract().parmToDate()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessReport</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext logProcessReport(SysInstrumentationLogger _instrumentationLogger, LedgerTransPerJournalContract _reportContract)
    {
        const str MetricName = methodStr(LedgerTransPerJournalDP, processReport);

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(
            MetricName,
            InstrumentationNamespace);

        return _instrumentationLogger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>