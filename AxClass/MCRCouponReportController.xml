<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCouponReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRCouponReportController</c> class is the controller class for the
/// <c>MCRGiftCertIssue</c> report.
/// </summary>
public class MCRCouponReportController extends SrsReportRunController implements BatchRetryable
{
    const static str fromDateParameterName  = 'FromDate';
    const static str toDateParameterName    = 'ToDate';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getUIBuilderForDataContractInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the UI builder instance to be used with for the report.
    /// </summary>
    /// <param name="_contractInfo">
    ///     A <c>SysOperationDataContractInfo</c> instance.
    /// </param>
    /// <returns>
    ///     A <c>SysOperationUIBuilder</c> instance.
    /// </returns>
    /// <remarks>
    /// This method is overridden to allow hooking up the custom UI builder class with the report.
    /// </remarks>
    protected SysOperationUIBuilder getUIBuilderForDataContractInfo(SysOperationDataContractInfo _contractInfo)
    {
        SysOperationUIBuilder parameterUIBuilder;

        if (_contractInfo is SrsReportRdlDataContractInfo)
        {
            parameterUIBuilder = new MCRCouponReportUIBuilder(dialog, this, _contractInfo.key());
        }
        else
        {
            parameterUIBuilder = super(_contractInfo);
        }

        return parameterUIBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the contract before the report is run.
    /// </summary>
    public void preRunModifyContract()
    {
        SrsReportRdlDataContract contract = this.parmReportContract().parmRdlContract();
        Query query = this.getFirstQuery();
        TransDate startDate   = contract.getParameter(fromDateParameterName).getValueTyped();
        TransDate endDate     = contract.getParameter(toDateParameterName).getValueTyped();

        SrsReportHelper::addFromAndToDateRangeToQuery(query, startDate, endDate, tableNum(MCRCoupon), fieldNum(MCRCoupon, MCRFromDate));
        SrsReportHelper::addFromAndToDateRangeToQuery(query, startDate, endDate, tableNum(MCRCoupon), fieldNum(MCRCoupon, MCRToDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, assigns parameter values and runs the <c>MCRGiftCertIssue</c> SSRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        MCRCouponReportController controller = new  MCRCouponReportController();
        controller.parmReportName(ssrsReportStr(MCRCoupon, Report));
        controller.parmArgs(_args);
        controller.ignoreTimeZoneConversion();
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>