<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The runtime class for the Credit Card control.
/// </summary>
[FormControlAttribute("CreditCardControl", "/resources/html/CreditCardControl", classstr(BuildCreditCardControl))]
class CreditCardControl extends FormTemplateControl
{
    FormProperty tokenizationPageUrlProperty;
    FormProperty tokenizationContentProperty;
    FormProperty tokenizationPageSubmitUrlProperty;
    FormProperty tokenizationMessageOriginProperty;
    FormProperty readyForSubmitProperty;
    FormProperty readyForCancelProperty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormBuildControl _build, FormRun _formRun)
    {
        super(_build, _formRun);

        this.setTemplateId("CreditCardControl");
        this.setResourceBundleName("/resources/html/CreditCardControl");

        tokenizationPageUrlProperty = this.addProperty(methodstr(CreditCardControl, parmTokenizationPageUrl), Types::String);
        tokenizationContentProperty = this.addProperty(methodstr(CreditCardControl, parmTokenizationContent), Types::String);
        tokenizationPageSubmitUrlProperty = this.addProperty(methodstr(CreditCardControl, parmTokenizationPageSubmitUrl), Types::String);
        tokenizationMessageOriginProperty = this.addProperty(methodstr(CreditCardControl, parmTokenizationMessageOrigin), Types::String);
        readyForSubmitProperty = this.addProperty(methodstr(CreditCardControl, parmReadyForSubmit), Types::String);
        readyForCancelProperty = this.addProperty(methodstr(CreditCardControl, parmReadyForCancel), Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTokenizationPageUrl</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "TokenizationPageUrl", true)]
    public str parmTokenizationPageUrl(str tokenizationPageUrl = tokenizationPageUrlProperty.parmValue())
    {
        if (!prmIsDefault(tokenizationPageUrl))
        {
            tokenizationPageUrlProperty.setValueOrBinding(tokenizationPageUrl);
        }
        return tokenizationPageUrlProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTokenizationContent</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "TokenizationContent", true)]
    public str parmTokenizationContent(str tokenizationContent = tokenizationContentProperty.parmValue())
    {
        if (!prmIsDefault(tokenizationContent))
        {
            tokenizationContentProperty.setValueOrBinding(tokenizationContent);
        }
        return tokenizationContentProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTokenizationPageSubmitUrl</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "TokenizationPageSubmitUrl", true)]
    public str parmTokenizationPageSubmitUrl(str tokenizationPageSubmitUrl = tokenizationPageSubmitUrlProperty.parmValue())
    {
        if (!prmIsDefault(tokenizationPageSubmitUrl))
        {
            tokenizationPageSubmitUrlProperty.setValueOrBinding(tokenizationPageSubmitUrl);
        }
        return tokenizationPageSubmitUrlProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTokenizationMessageOrigin</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "TokenizationMessageOrigin", true)]
    public str parmTokenizationMessageOrigin(str tokenizationMessageOrigin = tokenizationMessageOriginProperty.parmValue())
    {
        if (!prmIsDefault(tokenizationMessageOrigin))
        {
            tokenizationMessageOriginProperty.setValueOrBinding(tokenizationMessageOrigin);
        }
        return tokenizationMessageOriginProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReadyForSubmit</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "ReadyForSubmit", true)]
    public str parmReadyForSubmit(str readyForSubmit = readyForSubmitProperty.parmValue())
    {
        if (!prmIsDefault(readyForSubmit))
        {
            readyForSubmitProperty.setValueOrBinding(readyForSubmit);
        }
        return readyForSubmitProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReadyForCancel</Name>
				<Source><![CDATA[
    [FormPropertyAttribute(FormPropertyKind::Value, "ReadyForCancel", true)]
    public str parmReadyForCancel(str readyForCancel = readyForCancelProperty.parmValue())
    {
        if (!prmIsDefault(readyForCancel))
        {
            readyForCancelProperty.setValueOrBinding(readyForCancel);
        }
        return readyForCancelProperty.parmValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTokenized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles token access code when tokenization is completed.
    /// </summary>
    /// <param name = "tokenAccessCode">The token access code.</param>
    [FormCommandAttribute("OnTokenized")]
    public void onTokenized(str tokenAccessCode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Triggers when the tokenization is successfully cancelled.
    /// </summary>
    [FormCommandAttribute("OnCancelled")]
    public void onCancelled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays an error message.
    /// </summary>
    /// <param name = "code">The error code.</param>
    /// <param name = "message">The error message.</param>
    [FormCommandAttribute("ShowErrorMessage")]
    public void showErrorMessage(int code, str message)
    {
        // Map code to message if message is empty.
        if (!message)
        {
            message = CreditCardPaymentError::code2Message(code);
        }

        Global::warning(message);

        // Reset readyForSubmit so it can be submit again
        this.parmReadyForSubmit("");
    }

]]></Source>
			</Method>
			<Method>
				<Name>tokenizeAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Begins tokenizing the credit card.
    /// </summary>
    public void tokenizeAsync()
    {
        // Set readyForSubmit to true so the observer on the client triggers the submit of the tokenization page.
        this.parmReadyForSubmit('true');
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels tokenization.
    /// </summary>
    public void cancelAsync()
    {
        // Set readyForCancel to true
        // so the observer on the client unregister the "message" event listener.
        this.parmReadyForCancel('true');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>