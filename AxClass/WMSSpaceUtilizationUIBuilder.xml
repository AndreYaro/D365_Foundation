<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsSpaceUtilizationUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSSpaceUtilizationUIBuilder</c> class is used to build lookup for the report parameters.
/// </summary>
class wmsSpaceUtilizationUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField         reportSetupField;

    // We want to revert any chenges to setupDispCtr made by user
    // other than lookup. This variable tracks whether current change
    // was made by lookup.
    boolean             wasLookupPerformed;

    #define.SetupDispCtrName('setupDisplayControl')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrentSetupRecId</Name>
				<Source><![CDATA[
    private RecId getCurrentSetupRecId()
    {
        WMSSpaceUtilizationContract     spaceUtilizationContract;
        WMSWorkloadReportDataContract   workloadReportDataContract;
        RecId                           setupRecId;

        if (this.dataContractObject() is WMSSpaceUtilizationContract)
        {
            spaceUtilizationContract = this.dataContractObject() as WMSSpaceUtilizationContract;
            setupRecId = spaceUtilizationContract.parmWMSReportSetup();
        }
        else
        if (this.dataContractObject() is WMSWorkloadReportDataContract)
        {
            workloadReportDataContract = this.dataContractObject() as WMSWorkloadReportDataContract;
            setupRecId = workloadReportDataContract.parmReportSetupRecId();
        }

        return setupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentSetupType</Name>
				<Source><![CDATA[
    private WMSReportSetupType getCurrentSetupType()
    {
        WMSReportSetupType  reportSetupType;

        if (this.dataContractObject() is WMSSpaceUtilizationContract)
        {
            reportSetupType = WMSReportSetupType::SpaceUtilization;
        }
        else
        if (this.dataContractObject() is WMSWorkloadReportDataContract)
        {
            reportSetupType = WMSReportSetupType::Workload;
        }

        return reportSetupType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportSetupDisplayId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>WMSReportSetup</c> record ID.
    /// </summary>
    /// <param name="_wmsReportSetup">
    /// The <c>WMSReportSetup</c> record to use.
    /// </param>
    /// <returns>
    /// The <c>WMSReportSetup</c> record ID.
    /// </returns>
    private str getReportSetupDisplayId(WMSReportSetup _wmsReportSetup)
    {
        str result = '';

        if (_wmsReportSetup)
        {
            if (_wmsReportSetup.Name && _wmsReportSetup.Name != '')
            {
                result = strFmt('%1 - %2',
                                _wmsReportSetup.ReportSetupId,
                                _wmsReportSetup.Name);
            }
            else
            {
                result = _wmsReportSetup.ReportSetupId;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>WMSSpaceUtilizationUIBuilder</c> class.
    /// </summary>
    /// <param name="_dialog">
    /// The dialog instance.
    /// </param>
    /// <param name="_controller">
    /// The instance of the controller used to render and run report.
    /// </param>
    /// <param name="_dataContractKey">
    /// The key to look up the related <c>SysOperationDataContractInfo</c> object.
    /// </param>
    public void new(Dialog _dialog, SysOperationController _controller, str _dataContractKey)
    {
        super(_dialog, _controller, _dataContractKey);

        wasLookupPerformed = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method in order to initialize the dialog fields after the fields are built.
    /// </summary>
    public void postBuild()
    {
        FormBuildGroupControl   mainGroup = this.dialog().mainFormGroup();
        FormBuildStringControl  setupDisplayControl;
        WMSReportSetupType      reportSetupType = this.getCurrentSetupType();

        if (!mainGroup)
        {
            throw error("@SYS111577");
        }

        super();

        // Hide original WMSReportSetup control
        switch (reportSetupType)
        {
            case WMSReportSetupType::SpaceUtilization:
                reportSetupField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(WMSSpaceUtilizationContract, parmWMSReportSetup));
            break;

            case WMSReportSetupType::Workload:
                reportSetupField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(WMSWorkloadReportDataContract, parmReportSetupRecId));
            break;
        }

        if (!reportSetupField)
        {
            throw error("@SYS111577");
        }
        reportSetupField.visible(false);

        // Add new control for WMSReportSetup that uses human-readable text
        setupDisplayControl = mainGroup.addControl(FormControlType::String, #SetupDispCtrName);

        switch (this.getCurrentSetupType())
        {
            case WMSReportSetupType::SpaceUtilization:
                setupDisplayControl.label("@GLS180358");
                setupDisplayControl.helpText("@GLS180359");
            break;

            case WMSReportSetupType::Workload:
                setupDisplayControl.label("@GLS180315");
                setupDisplayControl.helpText("@GLS180435");
            break;
        }

        setupDisplayControl.lookupButton(2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Override this method in order to register the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        FormStringControl           setupDispCtr = this.setupDispCtr();
        WMSReportSetup              wmsReportSetup;

        if (!this.dataContractObject()
            || !setupDispCtr)
        {
            throw error("@SYS111577");
        }

        super();

        // This method should be called in order to handle events on dialogs
        this.dialog().formRun().controlMethodOverload(false);

        // Register overriding methods
        setupDispCtr.registerOverrideMethod(
                                    methodStr(FormStringControl, lookup),
                                    methodStr(WMSSpaceUtilizationUIBuilder, reportSetupLookup),
                                    this);
        setupDispCtr.registerOverrideMethod(
                                    methodStr(FormStringControl, modified),
                                    methodStr(WMSSpaceUtilizationUIBuilder, reportSetupModified),
                                    this);

        //  Update setupDisplayControl
        wmsReportSetup = WMSReportSetup::find(this.getCurrentSetupRecId());
        setupDispCtr.text(this.getReportSetupDisplayId(wmsReportSetup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportSetupLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects a <c>WMSReportSetup</c> record.
    /// </summary>
    /// <param name="_reportSetupDialogControl">
    /// A <c>WMSReportSetup</c> record.
    /// </param>
    public void reportSetupLookup(FormStringControl _reportSetupDialogControl)
    {
        if (!_reportSetupDialogControl)
        {
            throw error("@SYS111577");
        }

        // Change to control made by lookup
        wasLookupPerformed = true;

        // Perform ordinary lookup to fill control with reportSetupIds
        WMSReportSetup::lookup(_reportSetupDialogControl, this.getCurrentSetupType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportSetupModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the change in report setup.
    /// </summary>
    /// <param name="_reportSetupDialogControl">
    /// The form control that had the value changed.
    /// </param>
    /// <returns>
    /// The handling success indicator.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An invalid argument.
    /// </exception>
    public boolean reportSetupModified(FormStringControl _reportSetupDialogControl)
    {
        WMSReportSetupId    reportSetupId;
        WMSReportSetup      wmsReportSetup;
        FormInt64Control    recIdControl = reportSetupField.control();

        if (!_reportSetupDialogControl
            || !recIdControl)
        {
            throw error("@SYS111577");
        }

        // Update the state if modification was triggered by a lookup...
        if (wasLookupPerformed)
        {
            // Clear lookup state
            wasLookupPerformed = false;

            reportSetupId = _reportSetupDialogControl.text();

            wmsReportSetup = WMSReportSetup::findSetupId(reportSetupId, this.getCurrentSetupType());

            // Update the WMSReportSetup parameter control
            // and trigger refresh on all parameters
            recIdControl.setFocus();
            recIdControl.value(wmsReportSetup.RecId);
            recIdControl.hasChanged(true);
            recIdControl.leave();
        }
        // ...or discard the modification otherwise
        else
        {
            wmsReportSetup = WMSReportSetup::find(recIdControl.value());
        }

        // Set reportSetupId to correct value
        _reportSetupDialogControl.text(this.getReportSetupDisplayId(wmsReportSetup));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupDispCtr</Name>
				<Source><![CDATA[
    private FormStringControl setupDispCtr()
    {
        FormRun formrun = this.dialog().formRun();

        return formrun.control(formRun.controlId(#setupDispCtrName));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>