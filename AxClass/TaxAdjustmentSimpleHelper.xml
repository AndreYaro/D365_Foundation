<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxAdjustmentSimpleHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a simple helper for use tax assessment adjustment
/// </summary>
internal final class TaxAdjustmentSimpleHelper
{
    Tax tax;
    TmpTaxWorkTrans tmpTaxWorkTrans;
    TaxAmountCur taxTotal;
    Map subTotalMap = new Map(Types::String, Types::Real);


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(TmpTaxWorkTrans _tmpTaxWorkTrans, Tax _tax)
    {
        this.tmpTaxWorkTrans = _tmpTaxWorkTrans;
        this.tax = _tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateRegulatedAmountPerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocate the regulattion amount to every voucher line from vendor charged sales tax.
    /// </summary>
    /// <param name = "_taxRegulationTotalCur">TaxRegulationAmountCur</param>
    /// <returns>Map</returns>
    internal Map allocateRegulatedAmountPerLine(TaxRegulationAmountCur _taxRegulationTotalCur)
    {
        Map result = new Map(Types::String, Types::Real);
        TmpTaxWorkTrans tmpTaxWorkTransLoc = this.tmpTaxWorkTrans;
        TaxAmountCur summedTaxTotal;
        int subTotalCount = subTotalMap.elements();
        int iteratorCount = 0;

        this.calcTaxTotal();
        if (! this.taxTotal)
        {
            return result;
        }

        MapIterator iterator = new MapIterator(subTotalMap);
        while (iterator.more())
        {
            iteratorCount++;
            if (iteratorCount == subTotalCount)
            {
                result.insert(iterator.key(), (taxTotal - summedTaxTotal));
            }
            else
            {
                summedTaxTotal += iterator.value();
                result.insert(iterator.key(), (_taxRegulationTotalCur * iterator.value() / taxTotal));
            }
            iterator.next();
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxTotal</Name>
				<Source><![CDATA[
    private void calcTaxTotal()
    {
        TableId sourceTableId;
        RecId sourceRecId;
        TaxAmountCur subTaxTotal;
        while select * from tmpTaxWorkTrans
            order by tmpTaxWorkTrans.sourceTableId, tmpTaxWorkTrans.SourceRecId
            where tmpTaxWorkTrans.Warning == TaxWarning::NoWarning
                && tmpTaxWorkTrans.IsDeleted == NoYes::No
        {
            if (tmpTaxWorkTrans.TaxDirection == TaxDirection::UseTax && FeatureStateProvider::isFeatureEnabled(TaxAdjustmentIgnoreUseTaxFeature::instance()))
            {
                // When TaxInvoiceRegisterIgnoreUseTaxFeature is enabled, ignore Use Tax.
                continue;
            }

            if (sourceRecId != tmpTaxWorkTrans.SourceRecId
                || sourceTableId != tmpTaxWorkTrans.sourceTableId)
            {
                if (sourceTableId && sourceRecId)
                {
                    subTotalMap.add((any2Str(sourceTableId) + '|' + any2Str(sourceRecId)), subTaxTotal);
                }
                sourceRecId = tmpTaxWorkTrans.SourceRecId;
                sourceTableId = tmpTaxWorkTrans.sourceTableId;
                subTaxTotal = 0;
            }

            if (tmpTaxWorkTrans.TaxDirection == TaxDirection::OutgoingTax
                && tmpTaxWorkTrans.ReverseCharge_W == NoYes::Yes
                && !Tax::changeSignForReverseCharge(tmpTaxWorkTrans))
            {
                taxTotal += tmpTaxWorkTrans.SourceTaxAmountCur;
                subTaxTotal += tmpTaxWorkTrans.SourceTaxAmountCur;
            }
            else
            {
                taxTotal += tax.taxAmountSign(tmpTaxWorkTrans.SourceTaxAmountCur, tmpTaxWorkTrans.TaxDirection);
                subTaxTotal += tax.taxAmountSign(tmpTaxWorkTrans.SourceTaxAmountCur, tmpTaxWorkTrans.TaxDirection);
            }
        }
        if (sourceTableId && sourceRecId)
        {
            subTotalMap.add((any2Str(sourceTableId) + '|' + any2Str(sourceRecId)), subTaxTotal);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>