<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTableForm_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesQuotationTypeFactoryAttribute(QuotationType::Sales)]
class SalesQuotationTableForm_Sales extends SalesQuotationTableForm
{
    SalesQuotationLine   orderLineOrig;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultQuotationType</Name>
				<Source><![CDATA[
    QuotationType  defaultQuotationType()
    {
        return QuotationType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryLinesSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the delivery lines with the order line after a change on either the order line or the
    /// delivery line.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The line that was changed.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that indicates whether the synchronization should be interactive; optional.
    /// </param>
    /// <returns>
    /// true if any lines were changed and the form refresh is needed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the <paramref name="_interactive" /> parameter is false, the positive answer is assumed for all
    /// question that would have been asked if it was an interactive mode.
    /// </remarks>
    boolean deliveryLinesSync(SalesQuotationLine _salesQuotationLine, boolean _interactive = true)
    {
        SalesQuotationLine  orderLine;
        boolean             needRefresh = false;

        if (_salesQuotationLine.LineDeliveryType == LineDeliveryType::OrderLine)
            return needRefresh;

        if (_salesQuotationLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            orderLine = _salesQuotationLine;
        }
        else
        {
            orderLine = SalesQuotationDeliverySchedule::findOrderLineForDeliveryLine(_salesQuotationLine.InventTransId);
        }

        needRefresh = this.syncDeliveryScheduleCommercialAttributes(orderLine, _interactive);
        needRefresh = this.syncDeliveryScheduleDDC(orderLine, _interactive) || needRefresh;
        return needRefresh;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUpdateButtonGroup</Name>
				<Source><![CDATA[
    void enableUpdateButtonGroup(SalesQuotationTable        _salesQuotationTable,
                                 FormMenuButtonControl      _buttonGroupUpdate)
    {
        _buttonGroupUpdate.enabled(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    // Template method, mustn't be named lastValueElementName
    public identifierName lastValueElementName()
    {
        return formstr(SalesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDeliveryLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes delivery lines after the order line with multiple deliveries was changed.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The selected quotation line.
    /// </param>
    /// <remarks>
    /// This method rereads the delivery lines that are found in the client cache one by one.It does not
    /// need to re-query the data source, which would be time consuming for a large order.The assumption is
    /// that there will not be hundreds of delivery lines. Therefore, the one by one re-read will normally
    /// perform much better taking into account slow <c>findRecord</c> method that would need to be called
    /// after the re-query.
    /// </remarks>
    protected void refreshDeliveryLines(SalesQuotationLine _salesQuotationLine)
    {
        FormDataSource      salesQuotationLineDS = FormDataUtil::getFormDataSource(_salesQuotationLine);

        if (salesQuotationLineDS)
        {
            SalesQuotationLine localSalesQuotationLine = salesQuotationLineDS.getFirst(0,false); // skip records not in memory.
            while (localSalesQuotationLine)
            {
                if (localSalesQuotationLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
                {
                    localSalesQuotationLine.reread();
                }
                localSalesQuotationLine = salesQuotationLineDS.getNext();
            }

            // -1 means refresh all records, the default is -2 which refreshes only certain specific records (eg marked)
            salesQuotationLineDS.refreshEx(-1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the delivery lines when order or delivery line was modified.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The changed quotation line.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that indicates whether the synchronization should be interactive; optional.
    /// </param>
    /// <remarks>
    /// If the <paramref name="_interactive" /> parameter is false, the positive answer is assumed for all
    /// question that would have been asked if it was an interactive mode.
    /// </remarks>
    void refreshDeliverySchedule(SalesQuotationLine _salesQuotationLine, boolean _interactive = true)
    {
        if (_salesQuotationLine.LineDeliveryType != LineDeliveryType::OrderLine)
        {
            if (_salesQuotationLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
            {
                this.refreshOrderLineWithMultipleDeliveries(_salesQuotationLine);
            }

            if (this.deliveryLinesSync(_salesQuotationLine, _interactive))
            {
                // refresh if user wanted to update commercial attributes on delivery lines.
                _salesQuotationLine.reread();
                this.refreshDeliveryLines(_salesQuotationLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshOrderLineWithMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the order line with multiple deliveries if it was changed in the result of delivery line change.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///     The delivery line that changed.
    /// </param>
    protected void refreshOrderLineWithMultipleDeliveries(SalesQuotationLine _salesQuotationLine)
    {
        SalesQuotationLine  orderLine               = SalesQuotationDeliverySchedule::findOrderLineForDeliveryLine(_salesQuotationLine.InventTransId);
        boolean             found                   = false;
        FormDataSource      salesQuotationLineDS    = FormDataUtil::getFormDataSource(_salesQuotationLine);

        if (salesQuotationLineDS)
        {
            SalesQuotationLine localSalesQuotationLine = salesQuotationLineDS.getFirst(0, false); // skip records not in memory.
            while (localSalesQuotationLine && !found)
            {
                if (localSalesQuotationLine.InventTransId == orderLine.InventTransId)
                {
                    localSalesQuotationLine.reread();
                    found = true;
                }
                localSalesQuotationLine = salesQuotationLineDS.getNext();
            }

            // -1 means refresh all records, the default is -2 which refreshes only certain specific records (eg marked)
            salesQuotationLineDS.refreshEx(-1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLine_Write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Captures the order line before the update of a line that will trigger delivery schedule synchronization.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///     The line that will be changed.
    /// </param>
    void salesQuotationLine_Write(SalesQuotationLine _salesQuotationLine)
    {
        orderLineOrig.clear();

        switch (_salesQuotationLine.LineDeliveryType)
        {
            case LineDeliveryType::OrderLineWithMultipleDeliveries:
                orderLineOrig.data(_salesQuotationLine.orig().data());
                break;

            case LineDeliveryType::DeliveryLine:
                orderLineOrig = SalesQuotationDeliverySchedule::findOrderLineForDeliveryLine(_salesQuotationLine.InventTransId);
                break;
        }

        super(_salesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveDeliveryScheduleCommercialAttributesChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the delivery schedule commercial attributes have changed.
    /// </summary>
    /// <param name = "_orderLine">A <c>SalesQuotationLine</c> record.</param>
    /// <returns>true if the delivery schedule commercial attributes have changed; otherwise, false.</returns>
    protected boolean haveDeliveryScheduleCommercialAttributesChanged(SalesQuotationLine _orderLine)
    {
        return (_orderLine.SalesPrice  !=  orderLineOrig.SalesPrice  ||
             _orderLine.PriceUnit      !=  orderLineOrig.PriceUnit    ||
             _orderLine.LineDisc       !=  orderLineOrig.LineDisc    ||
             _orderLine.LinePercent    !=  orderLineOrig.LinePercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDeliveryScheduleCommercialAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any of the commercial attributes changed on the order line with multiple
    /// deliveries and then prompts the user to determine whether the changed attributes should be copied
    /// to all the delivery lines and does the copying.
    /// </summary>
    /// <param name="_orderLine">
    /// The new order line with multiple deliveries.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that indicates whether the synchronization should be interactive; optional.
    /// </param>
    /// <returns>
    /// true if delivery lines were changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the <paramref name="_interactive" /> parameter is false, delivery lines are always updated with
    /// new commercial attributes.Commercial attributes are: <c>SalesPrice</c>, <c>PriceUnit</c>,
    /// <c>LineDisc</c>, <c>LinePercent</c>.Change detection is based on comparison with the order line
    /// captured by invocation of <c>salesQuotationLine_Write</c> method before the actual update of the
    /// delivery schedule.
    /// </remarks>
    protected boolean syncDeliveryScheduleCommercialAttributes(SalesQuotationLine _orderLine, boolean _interactive = true)
    {
        #OCCRetryCount
        SalesQuotationLine               deliveryLine;
        SalesQuotationDeliverySchedule   salesQuotationDeliverySchedule;

        if (!this.haveDeliveryScheduleCommercialAttributesChanged(_orderLine)
            || (_interactive && Box::yesNo("@SYS131418", DialogButton::Yes) == DialogButton::No))
        {
            // user doesn't want to update commercial attributes.
            return false;
        }

        try
        {
            ttsbegin;

            while select forupdate deliveryLine
                    join salesQuotationDeliverySchedule
                        where salesQuotationDeliverySchedule.OrderLine     == _orderLine.InventTransId
                           && salesQuotationDeliverySchedule.DeliveryLine  == deliveryLine.InventTransId
            {
                this.setDeliveryScheduleCommercialAttributes(_orderLine, deliveryLine);
                deliveryLine.update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryScheduleCommercialAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the delivery schedule commercial attributes.
    /// </summary>
    /// <param name = "_orderLine">A <c>SalesQuotationLine</c> record which is the order line.</param>
    /// <param name = "_deliveryLine">A <c>SalesQuotationLine</c> record which is the delivery line, that is being set with the commercial attributes.</param>
    protected void setDeliveryScheduleCommercialAttributes(SalesQuotationLine _orderLine, SalesQuotationLine _deliveryLine)
    {
        if (_orderLine.SalesPrice     !=  orderLineOrig.SalesPrice)
        {
            _deliveryLine.SalesPrice = _orderLine.SalesPrice;
            _deliveryLine.modifiedField(fieldnum(SalesQuotationLine, SalesPrice));
        }
        if (_orderLine.PriceUnit      !=  orderLineOrig.PriceUnit)
        {
            _deliveryLine.PriceUnit = _orderLine.PriceUnit;
            _deliveryLine.modifiedField(fieldnum(SalesQuotationLine, PriceUnit));
        }
        if (_orderLine.LineDisc       !=  orderLineOrig.LineDisc)
        {
            _deliveryLine.LineDisc = _orderLine.LineDisc;
            _deliveryLine.modifiedField(fieldnum(SalesQuotationLine, LineDisc));
        }
        if (_orderLine.LinePercent    !=  orderLineOrig.LinePercent)
        {
            _deliveryLine.LinePercent = _orderLine.LinePercent;
            _deliveryLine.modifiedField(fieldnum(SalesQuotationLine, LinePercent));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDeliveryScheduleDDC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are any delivery lines with shipment dates that are lower than the new
    /// order line values and then prompts the user to determine whether Delivery Date Control should be
    /// run on delivery lines.
    /// </summary>
    /// <param name="_orderLine">
    /// The new order line.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that specifies whether the synchronization should be interactive; optional.
    /// </param>
    /// <returns>
    /// true if any delivery lines were changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the <paramref name="_interactive" /> parameter is false, the Delivery Date Control is always run
    /// for delivery lines with shipment dates that are lower than the shipment date of the order line.
    /// </remarks>
    protected boolean syncDeliveryScheduleDDC(SalesQuotationLine _orderLine, boolean _interactive = true)
    {
        #OCCRetryCount
        SalesQuotationLine              deliveryLine;
        SalesQuotationDeliverySchedule  salesQuotationDeliverySchedule;
        boolean                         needRefresh = false;

        select deliveryLine
            where deliveryLine.ShippingDateRequested  <  _orderLine.ShippingDateRequested
            exists join salesQuotationDeliverySchedule
                where salesQuotationDeliverySchedule.OrderLine      == _orderLine.InventTransId
                   && salesQuotationDeliverySchedule.DeliveryLine   == deliveryLine.InventTransId;

        // Shipment date on the order line exceeds the shipment date of the first delivery line.
        // Do you want to run delivery date control on delivery lines?
        if (deliveryLine
            && (!_interactive
                || Box::yesNo("@SYS131417", DialogButton::Yes) == DialogButton::Yes
               )
           )
        {
            needRefresh = true;
            try
            {
                ttsbegin;

                deliveryLine.selectForUpdate(true);

                while (deliveryLine)
                {
                    SalesCalcAvailableDlvDates salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates::newCommonSalesDlvDateType(deliveryLine, fieldnum(SalesQuotationLine, DeliveryDateControlType));
                    salesCalcAvailableDlvDates.modifiedFieldBeforeInsert(deliveryLine, false);
                    deliveryLine.update();
                    next deliveryLine;
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                ttsabort;
                throw error("@SYS93835");
            }
        }

        return needRefresh;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
