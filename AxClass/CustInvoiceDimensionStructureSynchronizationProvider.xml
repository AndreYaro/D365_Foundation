<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>CustInvoiceDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for customer invoice data.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.DimensionStructureISynchronizationTransactionProvider))]
[DimensionStructureSynchronizationProviderCaptionAttribute("@AccountsReceivable:CustInvoiceDimensionStructureSynchronizationProviderCaption")]
[DimensionStructureSynchronizationProviderInterfaceAttribute(true)]
[DimensionStructureSynchronizationProviderV2Flight(classStr(CustInvoiceDimensionStructureSynchronizationV2Flight))]
public class CustInvoiceDimensionStructureSynchronizationProvider implements DimensionStructureISynchronizationTransactionProvider, DimensionStructureISynchronizationTransactionProviderV2
{
    private const str InstrumentationNamespace = classStr(CustInvoiceDimensionStructureSynchronizationProvider);
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
    private const int MaxRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfStuctureRemovalFromLedgerIsPrevented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the account structure is prevented from being removed from the ledger.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The account structure being removed.
    /// </param>
    /// <param name="_ledger">
    /// The <c>Ledger</c> record from which the structure is being removed.
    /// </param>
    /// <param name = "_ret">
    /// The event handler result.
    /// </param>
    /// <returns>
    /// true if the account structure cannot be removed; otherwise, false.
    /// </returns>
    [SubscribesTo(classStr(LedgerStructureDelegates), delegateStr(LedgerStructureDelegates, checkIfStuctureRemovalFromLedgerIsPrevented))]
    public static void checkIfStuctureRemovalFromLedgerIsPrevented(DimensionHierarchy _dimensionHierarchy, Ledger _ledger, EventHandlerResult _ret)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(CustInvoiceDimensionStructureSynchronizationProvider),
            staticMethodStr(CustInvoiceDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(CustInvoiceDimensionStructureSynchronizationProvider));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            activityContext.addCustomProperty('MethodName', 'checkIfStuctureRemovalFromLedgerIsPrevented');

            CustInvoiceDistributionTemplate custInvoiceDistributionTemplate;
            DimensionAttributeValueCombination dimAttrValueCombination;
            DimensionAttributeValueGroupCombination dimAttrValueGroupCombination;
            DimensionAttributeValueGroup dimAttrValueGroup;

            unchecked (Uncheck::XDS)
            {
                CompanyInfo companyInfo = CompanyInfo::find(_ledger.PrimaryForLegalEntity);

                changecompany (companyInfo.DataArea)
                {
                    // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                    custInvoiceDistributionTemplate.clear();

                    // Locate any LedgerDimension from unposted customer invoice distribution templates
                    select firstonly RecId from custInvoiceDistributionTemplate
                    exists join dimAttrValueCombination
                        where dimAttrValueCombination.RecId == custInvoiceDistributionTemplate.LedgerDimension
                            && dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                    exists join dimAttrValueGroupCombination
                        where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                    exists join dimAttrValueGroup
                        where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                            && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId;
                }
            }

            if (custInvoiceDistributionTemplate.RecId)
            {
                // The account structure is referenced by an unposted customer invoice distribution template
                checkFailed(strfmt("@AccountsReceivable:CustInvoiceDistributionTemplateLedgerDimensionWithStructureInUseForLedger", _dimensionHierarchy.Name, _ledger.Name));
                _ret.booleanResult(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronize</Name>
				<Source><![CDATA[
    public void insertDimensionSynchronize(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize                dimSynchronize;
            DimensionSynchronize                dimSynchronizeNotExists;
            DimensionSynchronizeLedger          dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeNotExists.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            CustInvoiceDistributionTemplate     custInvoiceDistributionTemplate;
            DimensionAttributeValueCombination  dimAttrValueCombination;
            DataArea                            company;
            DataAreaId                          companyId;

            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(CustInvoiceDimensionStructureSynchronizationProvider, insertDimensionSynchronize));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked (Uncheck::XDS)
                {
                    while select Id from company
                    where company.IsVirtual == NoYes::No
                    {
                        companyId = company.Id;

                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;

                        if (dimSynchronizeLedger.RecId)
                        {
                            changecompany (companyId)
                            {
                                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                                custInvoiceDistributionTemplate.clear();

                                // Extract LedgerDimension's from customer invoice distribution templates
                                insert_recordset dimSynchronize (OriginalLedgerDimension, LedgerDimensionType, DataArea)
                                select LedgerDimension from custInvoiceDistributionTemplate
                                group by custInvoiceDistributionTemplate.LedgerDimension, dimAttrValueCombination.LedgerDimensionType, dimSynchronizeLedger.DataArea
                                join LedgerDimensionType from dimAttrValueCombination
                                    where dimAttrValueCombination.RecId == custInvoiceDistributionTemplate.LedgerDimension
                                       && dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                                join DataArea from dimSynchronizeLedger
                                    where dimSynchronizeLedger.DataArea == companyId
                                notexists join dimSynchronizeNotExists
                                    where dimSynchronizeNotExists.OriginalLedgerDimension == custInvoiceDistributionTemplate.LedgerDimension;

                                activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronize');
                                activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronize.rowCount() > 0));
                            }
                        }
                    }

                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChanges</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChanges(DimensionSynchronize _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferences</Name>
				<Source><![CDATA[
    public void updateProviderReferences(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize            dimSynchronize;
            DimensionSynchronizeLedger      dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            CustInvoiceDistributionTemplate custInvoiceDistributionTemplate;
            DataArea                        company;
            DataAreaId                      companyId;
            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(CustInvoiceDimensionStructureSynchronizationProvider, updateProviderReferences));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked (Uncheck::XDS)
                {
                    while select Id from company
                        where company.IsVirtual == NoYes::No
                    {
                        companyId = company.Id;

                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;

                        if (dimSynchronizeLedger.RecId)
                        {
                            changecompany (companyId)
                            {
                                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                                custInvoiceDistributionTemplate.clear();

                                // Update customer invoice distribution templates with the new ledger dimension values
                                update_recordset custInvoiceDistributionTemplate
                                setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                join UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == custInvoiceDistributionTemplate.LedgerDimension
                                       && dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension;

                                Info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", custInvoiceDistributionTemplate.rowCount(), tableId2PName(custInvoiceDistributionTemplate.TableId), companyId));

                                activityContext.addCustomProperty('MethodName', 'updateProviderReferences');
                                activityContext.addCustomProperty('WereRecordsUpdated', int2str(custInvoiceDistributionTemplate.rowCount() > 0));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronizeV2</Name>
				<Source><![CDATA[
    public RefRecId insertDimensionSynchronizeV2(DimensionStructureSynchronizationRequestV2 _synchronizationRequest)
    {
        DimensionSynchronizeDetail                dimSynchronize;
        DimensionSynchronizeDetail                dimSynchronizeNotExists;
        DimensionSynchronizeLedgerDetail          dimSynchronizeLedger;
        CustInvoiceDistributionTemplate           custInvoiceDistributionTemplate;
        DimensionAttributeValueCombination        dimAttrValueCombination;
        DataArea                                  company;
        DataAreaId                                companyId;
        RefRecId                                  providerStatusTrackingId;
        DimensionStructureSyncProviderStatusTracking dimensionStructureSyncProviderStatusTracking;
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(CustInvoiceDimensionStructureSynchronizationProvider, insertDimensionSynchronizeV2));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
            unchecked (Uncheck::XDS)
            {
                select forupdate firstonly dimensionStructureSyncProviderStatusTracking
                    where dimensionStructureSyncProviderStatusTracking.BatchJobId == batchJobId &&
                        dimensionStructureSyncProviderStatusTracking.ProviderName == _synchronizationRequest.parmProviderName();

                if (!dimensionStructureSyncProviderStatusTracking)
                {
                    dimensionStructureSyncProviderStatusTracking.BatchJobId = batchJobId;
                    dimensionStructureSyncProviderStatusTracking.ProviderName = _synchronizationRequest.parmProviderName();
                    dimensionStructureSyncProviderStatusTracking.insert();
                    providerStatusTrackingId = dimensionStructureSyncProviderStatusTracking.RecId;

                    // Skip event handlers to avoid falling back to row-by-row operation.
                    custInvoiceDistributionTemplate.skipEvents(true);
                    custInvoiceDistributionTemplate.skipPostLoad(true);

                    ttsbegin;

                    while select Id from company
                    where company.IsVirtual == NoYes::No
                    {
                        companyId = company.Id;

                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;

                        if (dimSynchronizeLedger.RecId)
                        {
                            changecompany (companyId)
                            {
                                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                                custInvoiceDistributionTemplate.clear();

                                // Extract LedgerDimension's from customer invoice distribution templates
                                insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, LedgerDimensionType, DataArea)
                                select providerStatusTrackingId, LedgerDimension from custInvoiceDistributionTemplate
                                group by custInvoiceDistributionTemplate.LedgerDimension, dimAttrValueCombination.LedgerDimensionType, dimSynchronizeLedger.DataArea
                                join LedgerDimensionType from dimAttrValueCombination
                                    where dimAttrValueCombination.RecId == custInvoiceDistributionTemplate.LedgerDimension
                                       && dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                                join DataArea from dimSynchronizeLedger
                                    where dimSynchronizeLedger.DataArea == companyId
                                notexists join dimSynchronizeNotExists
                                    where dimSynchronizeNotExists.OriginalLedgerDimension == custInvoiceDistributionTemplate.LedgerDimension &&
                                        dimSynchronizeNotExists.ProviderStatusTrackingId == providerStatusTrackingId;;

                                activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronizeV2');
                                activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronize.rowCount() > 0));
                            }
                        }
                    }

                    dimensionStructureSyncProviderStatusTracking.Status = DimensionStructureSyncProviderStatus::Inserted;
                    dimensionStructureSyncProviderStatusTracking.update();
                    ttscommit;

                }
                else
                {
                    providerStatusTrackingId = dimensionStructureSyncProviderStatusTracking.RecId;
                }
            }
        }

        return providerStatusTrackingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChangesV2</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChangesV2(DimensionSynchronizeDetail _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferencesV2</Name>
				<Source><![CDATA[
    public void updateProviderReferencesV2(DimensionStructureSynchronizationRequestV2 _request)
    {
        DimensionSynchronizeDetail            dimSynchronize;
        DimensionSynchronizeLedgerDetail      dimSynchronizeLedger;
        CustInvoiceDistributionTemplate       custInvoiceDistributionTemplate;
        DataArea                              company;
        DataAreaId                            companyId;
        
        RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(CustInvoiceDimensionStructureSynchronizationProvider, updateProviderReferences));

        try
        {
            ttsbegin;

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked (Uncheck::XDS)
                {
                    // Skip event handlers to avoid falling back to row-by-row operation.
                    custInvoiceDistributionTemplate.skipEvents(true);
                    custInvoiceDistributionTemplate.skipPostLoad(true);

                    while select Id from company
                        where company.IsVirtual == NoYes::No
                    {
                        companyId = company.Id;

                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;

                        if (dimSynchronizeLedger.RecId)
                        {
                            changecompany (companyId)
                            {
                                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                                custInvoiceDistributionTemplate.clear();

                                // Update customer invoice distribution templates with the new ledger dimension values
                                update_recordset custInvoiceDistributionTemplate
                                setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                join UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == custInvoiceDistributionTemplate.LedgerDimension
                                       && dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                                       && dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId();

                                Info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", custInvoiceDistributionTemplate.rowCount(), tableId2PName(custInvoiceDistributionTemplate.TableId), companyId));

                                activityContext.addCustomProperty('MethodName', 'updateProviderReferencesV2');
                                activityContext.addCustomProperty('WereRecordsUpdated', int2str(custInvoiceDistributionTemplate.rowCount() > 0));
                            }
                        }
                    }
                }
            }

            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() > MaxRetryCount)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>