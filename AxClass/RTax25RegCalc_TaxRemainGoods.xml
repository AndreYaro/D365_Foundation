<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_TaxRemainGoods</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rTax25RegCalc_TaxRemainGoods extends RTax25RegCalc implements BatchRetryable
{

    TmpRTax25TaxRemainGoods     tmpRTax25TaxRemainGoods;

    RefRecId                    intDepRefRecId, notInfIncRefRecId, tanDepRefRecId, deferralsRefRecId;

    Set                         mainAccountAssetDeferr;

    TmpRTax25LedgerAccountList  tmpLedgerAccountList;

    container                   headerSection;
    int                         numSection;
    DimensionAttribute          dimAttr;
    DimensionAttribute          mainAccountAttr;

    private const str EmptyField = '<...>';
    private const str GenRange = '((\%1 \%2 0) && (\%3 = \%4))';
    private const str OffsetRange = '(\%1.\%2 \%3 \%4.\%5)';
    private const str More = '>';
    private const str Less = '<';
    private const str NotEqual = '!=';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str accountFilter(Range _parameter)
    {
        RTax25LedgerInterval    ledgerInterval;
        Range                   accountFilter;

        while select FromMainAccountId, ToMainAccountId from ledgerInterval
            where ledgerInterval.rTax25LedgerIntervalGroup == RTax25LedgerIntervalGroup::findByIntervalGroup(strLRTrim(_parameter)).RecId
        {
            if (accountFilter)
            {
                accountFilter += ',' + this.filterValue(MainAccount::find(ledgerInterval.FromMainAccountId).MainAccountId,
                                                        MainAccount::find(ledgerInterval.ToMainAccountId).MainAccountId);
            }
            else
            {
                accountFilter = this.filterValue(MainAccount::find(ledgerInterval.FromMainAccountId).MainAccountId,
                                                 MainAccount::find(ledgerInterval.ToMainAccountId).MainAccountId);
            }
        }

        if (!accountFilter)
        {
            accountFilter = SysQuery::valueEmptyString();
        }

        return accountFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountAccountDim</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountMST amountAccountDim(RecId _mainAccountRecId, boolean _charge, anytype _dimValue = '')
    {
        Query                   genQuery;
        QueryBuildDataSource    genQbds;
        QueryRun                genQueryRun;
        QueryBuildRange         genQbr;
        str                     rangeTxt;
        str                     nameGjae1, nameGjae2;
    
        GeneralJournalAccountEntry      accountEntry;
    
        genQuery = new Query(queryStr(GeneralJournalBondBatchTransReporting_RU));
    
        genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry), 1);
        genQbds.fetchMode(QueryFetchMode::One2One);
        nameGjae1 = genQbds.name();
        genQbds.addSelectionField(fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
    
        genQbr = SysQuery::addDimensionAttributeRange(genQuery,
                                                      genQbds.name(),
                                                      fieldstr(GeneralJournalAccountEntry, LedgerDimension),
                                                      DimensionComponent::DimensionAttribute,
                                                      MainAccount::find(_mainAccountRecId).MainAccountId,
                                                      mainAccountAttr.Name);
        if (genQbr)
        {
            genQbr.dataSource().joinMode(JoinMode::ExistsJoin);
        }
    
        if (!prmisdefault(_dimValue))
        {
    
            genQbr = SysQuery::addDimensionAttributeRange(genQuery,
                                                          genQbds.name(),
                                                          fieldstr(GeneralJournalAccountEntry, LedgerDimension),
                                                          DimensionComponent::DimensionAttribute,
                                                          _dimValue ? any2str(_dimValue): SysQuery::valueEmptyString(),
                                                          dimAttr.Name);
    
            if (genQbr)
            {
                genQbr.dataSource().joinMode(JoinMode::ExistsJoin);
            }
        }

        rangeTxt = strfmt(GenRange,
                    fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount)),
                    _charge ? Less : More,
                    fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, IsCorrection)),
                    enum2int(NoYes::No));
        genQbds.addRange(fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount)).value(rangeTxt);
        rangeTxt = strfmt(GenRange,
                    fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount)),
                    _charge ? More : Less,
                    fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, IsCorrection)),
                    enum2int(NoYes::Yes));
        genQbds.addRange(fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount)).value(rangeTxt);
    
        genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalEntryReportingView_RU));
        genQbds.addRange(fieldnum(GeneralJournalEntryReportingView_RU, Ledger)).value(queryValue(Ledger::current()));
        rTax25PeriodIterator.applyExtendedRange(genQbds);
    
        genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry_W), 1);
        genQbds.fetchMode(QueryFetchMode::One2One);
        genQbds.joinMode(JoinMode::ExistsJoin);
    
        genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry_W), 2);
        genQbds.fetchMode(QueryFetchMode::One2One);
        genQbds.joinMode(JoinMode::ExistsJoin);
    
        genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry), 2);
        nameGjae2 = genQbds.name();
        genQbds.fetchMode(QueryFetchMode::One2One);
        genQbds.joinMode(JoinMode::NoExistsJoin);
    
        rangeTxt = strfmt(
                OffsetRange,
                nameGjae1,
                fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, IsCredit)),
                NotEqual,
                nameGjae2,
                fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, IsCredit)));
        genQbds.addRange(fieldnum(GeneralJournalAccountEntry, IsCredit)).value(rangeTxt);

        genQbr = SysQuery::addDimensionAttributeRange(genQuery,
                                                      genQbds.name(),
                                                      fieldstr(GeneralJournalAccountEntry, LedgerDimension),
                                                      DimensionComponent::DimensionAttribute,
                                                      MainAccount::find(_mainAccountRecId).MainAccountId,
                                                      mainAccountAttr.Name);
        if (genQbr)
        {
            genQbr.dataSource().joinMode(JoinMode::ExistsJoin);
        }
    
    	genQuery.firstOnly1(true);
        genQueryRun = new QueryRun(genQuery);
    
        if (genQueryRun.next())
        {
            accountEntry = genQueryRun.get(tablenum(GeneralJournalAccountEntry));
        }
    
        return abs(accountEntry.AccountingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountAsset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountMST amountAsset(
        RecId    _mainAccountRecId,
        RefRecId _profitTableRecId)
    {
        RAssetTrans                      rAssetTrans, rAssetTransTax;
        RTax25RegisterTrans_IntangibleDepr  inTanDepr;
        RTax25RegisterTrans_TangibleDepr    tanDepr;
        AmountMST                        amountMST;
        SetEnumerator                    se = mainAccountAssetDeferr.getEnumerator();
        DimensionAttributeLevelValueView dimAttrView, dimAttrViewTax;
    
        while (se.moveNext())
        {
            select sum(DeprAmount) from inTanDepr
                where inTanDepr.JournalTransRefRecId == intDepRefRecId                 &&
                      inTanDepr.BlockType            == ReportBlockType::Body          &&
                      inTanDepr.rTax25ProfitTable    == _profitTableRecId
            exists join rAssetTransTax
                where rAssetTransTax.RecId           == inTanDepr.RefRecId
            exists join dimAttrViewTax
                where dimAttrViewTax.ValueCombinationRecId == rAssetTransTax.OffsetLedgerDimension  &&
                      dimAttrViewTax.DimensionAttribute    == mainAccountAttr.RecId                 &&
                      dimAttrViewTax.DisplayValue          == se.current()
            exists join rAssetTrans
                where rAssetTrans.AccountNum            == rAssetTransTax.AccountNum                &&
                      rAssetTrans.AssetDeprPeriod       == rAssetTransTax.AssetDeprPeriod           &&
                      rAssetTrans.RecId                 != rAssetTransTax.RecId
            exists join dimAttrView
                where dimAttrView.ValueCombinationRecId == rAssetTrans.OffsetLedgerDimension     &&
                      dimAttrView.DimensionAttribute    == mainAccountAttr.RecId                 &&
                      dimAttrView.EntityInstance        == _mainAccountRecId;
    
            amountMST += inTanDepr.DeprAmount;
    
            select sum(DeprAmount) from tanDepr
                where tanDepr.JournalTransRefRecId == tanDepRefRecId                 &&
                      tanDepr.BlockType            == ReportBlockType::Body          &&
                      tanDepr.rTax25ProfitTable    == _profitTableRecId
            exists join rAssetTransTax
                where rAssetTransTax.RecId         == tanDepr.RefRecId
            exists join dimAttrViewTax
                where dimAttrViewTax.ValueCombinationRecId == rAssetTransTax.OffsetLedgerDimension  &&
                      dimAttrViewTax.DimensionAttribute    == mainAccountAttr.RecId                 &&
                      dimAttrViewTax.DisplayValue          == se.current()
            exists join rAssetTrans
                where rAssetTrans.AccountNum            == rAssetTransTax.AccountNum                &&
                      rAssetTrans.AssetDeprPeriod       == rAssetTransTax.AssetDeprPeriod           &&
                      rAssetTrans.RecId                 != rAssetTransTax.RecId
            exists join dimAttrView
                where dimAttrView.ValueCombinationRecId == rAssetTrans.OffsetLedgerDimension     &&
                      dimAttrView.DimensionAttribute    == mainAccountAttr.RecId                 &&
                      dimAttrView.EntityInstance        == _mainAccountRecId;
    
            amountMST += tanDepr.DeprAmount;
        }
    
        return  amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDeferrals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountMST amountDeferrals(
        RecId    _mainAccountRecId,
        RefRecId _profitTableRecId)
    {
        RDeferralsTrans     rDeferralsTrans, rDeferralsTransTax;
        RTax25RegisterTrans_Deferrals regTrans;
        AmountMST           amountMST;
        SetEnumerator       se = mainAccountAssetDeferr.getEnumerator();
        DimensionAttributeLevelValueView dimAttrView, dimAttrViewTax;
    
        while (se.moveNext())
        {
            select sum(MonthlyAmount) from regTrans
                where regTrans.JournalTransRefRecId   == deferralsRefRecId                  &&
                      regTrans.BlockType              == ReportBlockType::Body              &&
                      regTrans.rTax25ProfitTable      == _profitTableRecId
            exists join rDeferralsTransTax
                where rDeferralsTransTax.RecId        == regTrans.RefRecId
            exists join dimAttrViewTax
                where dimAttrViewTax.ValueCombinationRecId == rDeferralsTransTax.OffsetLedgerDimension &&
                      dimAttrViewTax.DimensionAttribute    == mainAccountAttr.RecId                    &&
                      dimAttrViewTax.DisplayValue          == se.current()
            exists join rDeferralsTrans
                where rDeferralsTrans.DeferralsId       == rDeferralsTransTax.DeferralsId           &&
                      rDeferralsTrans.DeferralsPeriod   == rDeferralsTransTax.DeferralsPeriod       &&
                      rDeferralsTrans.RecId             != rDeferralsTransTax.RecId
            exists join dimAttrView
                where dimAttrView.ValueCombinationRecId == rDeferralsTrans.OffsetLedgerDimension    &&
                      dimAttrView.DimensionAttribute    == mainAccountAttr.RecId                    &&
                      dimAttrView.EntityInstance        == _mainAccountRecId;
    
            amountMST += abs(regTrans.MonthlyAmount);
        }
    
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountNotInfluence</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountMST amountNotInfluence(
        RecId    _mainAccountRecId,
        RefRecId _profitTableRecId)
    {
        RTax25RegisterTrans_NotInfluenceIncome regTrans;
        LedgerJournalTrans               ledgerJournalTrans;
        DimensionAttributeLevelValueView dimAttrView;
    
        if (RTax25ProfitTable::find(_profitTableRecId).DirectExpenseType == NoYes::No)
        {
            return 0;
        }
        select sum(IssueAmount) from regTrans
                where regTrans.JournalTransRefRecId     == notInfIncRefRecId      &&
                      regTrans.BlockType                == ReportBlockType::Body  &&
                      regTrans.rTax25ProfitTable        == _profitTableRecId
        exists join ledgerJournalTrans
            where ledgerJournalTrans.RecId          == regTrans.RefRecId
        exists join dimAttrView
            where dimAttrView.ValueCombinationRecId == ledgerJournalTrans.LedgerDimension       &&
                  dimAttrView.DimensionAttribute    == mainAccountAttr.RecId  &&
                  dimAttrView.EntityInstance        == _mainAccountRecId;
    
        return abs(regTrans.IssueAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountTax</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountMST amountTax(
        RecId    _mainAccountRecId,
        RefRecId _profitTableRecId)
    {
        QueryRun                queryRun;
        RTax25LedgerInterval    rTax25LedgerInterval;
        MainAccount             mainAccount;
        RTax25ProfitLedgerSetup rTax25ProfitLedgerSetup;
    
        AmountMST               amountCalc;
        AmountMST               amountCredit;
        AmountMST               amountAsset;
        AmountMST               amountDefferals;
        Set                     mainAccountSet = new Set(Types::Int64);
    
        GeneralJournalEntryReportingView_RU entry;
        GeneralJournalAccountEntry          accountEntry;
    
        Query                               genQuery;
        QueryRun                            genQueryRun;
        QueryBuildDataSource                genQbds,                    dimQbds;
        QueryBuildRange                     genQbr;
        str                                 rangeTxt;
    
        while select AccountIntervalType, AccountNumGroup from rTax25ProfitLedgerSetup
            where rTax25ProfitLedgerSetup.rTax25ProfitTable == _profitTableRecId
        {
            switch (rTax25ProfitLedgerSetup.AccountIntervalType)
            {
                case TableGroupAll::Table :
                    mainAccountSet.add(MainAccount::findByMainAccountId(rTax25ProfitLedgerSetup.AccountNumGroup).RecId);
                    break;
    
                case TableGroupAll::GroupId :
                    while select FromMainAccountId, ToMainAccountId from rTax25LedgerInterval
                        where rTax25LedgerInterval.rTax25LedgerIntervalGroup == RTax25LedgerIntervalGroup::findByIntervalGroup(rTax25ProfitLedgerSetup.AccountNumGroup).RecId
                    {
                        while select RecId from mainAccount
                             where mainAccount.MainAccountId >= MainAccount::find(rTax25LedgerInterval.FromMainAccountId).MainAccountId &&
                                   mainAccount.MainAccountId <= MainAccount::find(rTax25LedgerInterval.ToMainAccountId).MainAccountId
                        {
                            mainAccountSet.add(mainAccount.RecId);
                        }
                    }
            }
        }
    
        if (!mainAccountSet.in(_mainAccountRecId))
        {
            queryRun = this.mainAccountQueryRun();
    
            while(queryRun.next())
            {
                mainAccount = queryRun.get(tablenum(MainAccount));
                mainAccountSet.add(mainAccount.RecId);
            }
        }
    
        if (!mainAccountSet.in(_mainAccountRecId))
            return 0;
    
        RTax25ProfitTable rTax25ProfitTable = RTax25ProfitTable::find(_profitTableRecId);
        if ( rTax25ProfitTable.DirectExpenseType == NoYes::Yes )
        {
            genQuery = new Query(queryStr(GeneralJournalBondBatchTransReporting_RU));
    
            genQbds = genQuery.dataSourceName(identifierStr(GJAE));
            genQbds.addSelectionField(fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
    
            rangeTxt = strfmt(GenRange,
                        fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount)),
                        More,
            fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, IsCorrection)),
                        enum2int(NoYes::No));
            genQbds.addRange(fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount)).value(rangeTxt);
            rangeTxt = strfmt(GenRange,
                        fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount)),
                        Less,
            fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, IsCorrection)),
                        enum2int(NoYes::Yes));
            genQbds.addRange(fieldnum(GeneralJournalAccountEntry, AccountingCurrencyAmount)).value(rangeTxt);
            genQbr = SysQuery::addDimensionAttributeRange(genQuery,
                                                          genQbds.name(),
                                                          fieldstr(GeneralJournalAccountEntry, LedgerDimension),
                                                          DimensionComponent::DimensionAttribute,
                                                          MainAccount::find(_mainAccountRecId).MainAccountId,
                                                          mainAccountAttr.Name);
    
            if (genQbr)
            {
                genQbr.dataSource().joinMode(JoinMode::ExistsJoin);
            }
    
            genQbr = SysQuery::addDimensionAttributeRange(genQuery,
                                                          genQbds.name(),
                                                          fieldstr(GeneralJournalAccountEntry, LedgerDimension),
                                                          DimensionComponent::DimensionAttribute,
                                                          rTax25ProfitTable.ProfitId,
                                                          dimAttr.Name);
    
            if (genQbr)
            {
                genQbr.dataSource().joinMode(JoinMode::ExistsJoin);
            }
    
            genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalEntryReportingView_RU));
            genQbds.fetchMode(QueryFetchMode::One2One);
            genQbds.joinMode(JoinMode::InnerJoin);
            genQbds.addRange(fieldnum(GeneralJournalEntryReportingView_RU, Ledger)).value(queryValue(Ledger::current()));
            rTax25PeriodIterator.applyExtendedRange(genQbds);
            genQbds.addGroupByField(fieldnum(GeneralJournalEntryReportingView_RU, JournalCategory));
    
            genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry_W), 1);
            genQbds.fetchMode(QueryFetchMode::One2One);
            genQbds.joinMode(JoinMode::ExistsJoin);
    
            genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry_W), 2);
            genQbds.fetchMode(QueryFetchMode::One2One);
            genQbds.joinMode(JoinMode::ExistsJoin);
    
            genQbds = genQuery.dataSourceName(identifierStr(GJAE_Bond));
            genQbds.fetchMode(QueryFetchMode::One2One);
            genQbds.joinMode(JoinMode::NoExistsJoin);
    
            rangeTxt = strfmt(
                    OffsetRange,
            identifierStr(GJAE),
                    fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, IsCredit)),
                    NotEqual,
            identifierStr(GJAE_Bond),
                    fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, IsCredit)));
    
            genQbds.addRange(fieldnum(GeneralJournalAccountEntry, IsCredit)).value(rangeTxt);
    
            rangeTxt = strfmt(
                    OffsetRange,
            identifierStr(GJAE),
                    fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, RecId)),
                    NotEqual,
            identifierStr(GJAE_Bond),
                    fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, RecId)));
    
            genQbds.addRange(fieldnum(GeneralJournalAccountEntry, IsCredit)).value(rangeTxt);
    
            genQbr = SysQuery::addDimensionAttributeRange(genQuery,
                                                          genQbds.name(),
                                                          fieldstr(GeneralJournalAccountEntry, LedgerDimension),
                                                          DimensionComponent::DimensionAttribute,
                                                          MainAccount::find(_mainAccountRecId).MainAccountId,
                                                          mainAccountAttr.Name);
    
            if (genQbr)
            {
                genQbr.dataSource().joinMode(JoinMode::ExistsJoin);
            }
    
            genQueryRun = new QueryRun(genQuery);
            while (genQueryRun.next())
            {
                entry        = genQueryRun.get(tablenum(GeneralJournalEntryReportingView_RU));
                accountEntry = genQueryRun.get(tablenum(GeneralJournalAccountEntry));
                switch (entry.JournalCategory)
                {
                    case LedgerTransType::FixedAssets :
                    case LedgerTransType::FixedAssets_RU :
                        amountAsset += accountEntry.AccountingCurrencyAmount;
                        break;
                    case LedgerTransType::RDeferrals :
                        amountDefferals += accountEntry.AccountingCurrencyAmount;
                        break;
                    default :
                        amountCredit += accountEntry.AccountingCurrencyAmount;
                }
            }
        }
        amountCalc      = this.amountAsset(_mainAccountRecId, _profitTableRecId);
        amountAsset     = amountCalc ? amountCalc : amountAsset;
    
        amountCalc      = this.amountDeferrals(_mainAccountRecId, _profitTableRecId);
        amountDefferals = amountCalc ? amountCalc : amountDefferals;
    
        amountCredit    += amountAsset + amountDefferals;
    
        amountCredit    -= this.amountNotInfluence(_mainAccountRecId, _profitTableRecId);
    
        return amountCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        try
        {
            ttsbegin;

            super();

            this.calcStartBalance();

            this.calcSection1();
            this.calcSection234();
            this.calcSection5();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSection1</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcSection1()
    {
        QueryRun                            mainAccountQueryRun;
        MainAccount                         mainAccount;
        MainAccountNum                      mainAccountNum,     sumMainAccountNum;
        RecId                               mainAccountId,      sumMainAccountId;
        AmountMST                           amountDebit,        amountDebitTax;
        AmountMST                           amountCredit,       amountCreditTax;
        AmountMST                           amountDebitTotal,   amountDebitTaxTotal;
        AmountMST                           amountCreditTotal,  amountCreditTaxTotal;
        Query                               genQuery;
        QueryRun                            genQueryRun;
        QueryBuildDataSource                genQbds;
        QueryBuildRange                     accountRange;
        RTax25ProfitId                      profitId;
    
        numSection  = 1;
    
        mainAccountQueryRun = this.mainAccountQueryRun();
        this.createHeader(conpeek(headerSection, numSection));
    
        genQuery = new Query();

        QueryBuildDataSource genQbdsGJAE = genQuery.addDataSource(tablenum(GeneralJournalAccountEntry));

        const FieldName dimensionField = fieldstr(GeneralJournalAccountEntry, LedgerDimension);

        accountRange = SysQuery::addDimensionAttributeRange(genQuery,
                                                            genQbdsGJAE.name(),
                                                            dimensionField,
                                                            DimensionComponent::DimensionAttribute,
                                                            SysQuery::valueNotEmptyString(),
                                                            mainAccountAttr.Name);

        DimensionProvider dimProvider = DimensionProviderFactory::getDimensionProviderForDimensionField(genQbdsGJAE, dimensionField);
        QueryBuildRange dimensionRange = dimProvider.addAttributeRangeToQuery(genQuery, genQbdsGJAE.name(), dimensionField, DimensionComponent::DimensionAttribute, 'PlaceHolder', dimAttr.Name);
        dimensionRange.value(SysQuery::valueUnlimited());

        QueryBuildDataSource dimQBDS = dimensionRange.dataSource();
        dimQBDS.addGroupByField(dimensionRange.field());
        dimQBDS.orderMode(OrderMode::GroupBy);

        genQbds = genQbdsGJAE.addDataSource(tablenum(GeneralJournalEntryReportingView_RU));
        genQbds.fetchMode(QueryFetchMode::One2One);
        genQbds.joinMode(JoinMode::ExistsJoin);
        genQbds.addLink(fieldnum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldnum(GeneralJournalEntryReportingView_RU, TransRecId));
        genQbds.addRange(fieldnum(GeneralJournalEntryReportingView_RU, Ledger)).value(queryValue(Ledger::current()));
        rTax25PeriodIterator.applyExtendedRange(genQbds);
    
        while (mainAccountQueryRun.next())
        {
            mainAccount = mainAccountQueryRun.get(tablenum(MainAccount));
            tmpLedgerAccountList.addRecord(0, mainAccount.RecId);
    
            mainAccountNum          = mainAccount.MainAccountId;
            mainAccountId           = mainAccount.RecId;
            sumMainAccountNum       = MainAccount::getTotalAccount_RU(mainAccountNum);
            sumMainAccountId        = MainAccount::findByMainAccountId(sumMainAccountNum).RecId;
    
            amountDebitTotal        = 0;
            amountDebitTaxTotal     = 0;
            amountCreditTotal       = 0;
            amountCreditTaxTotal    = 0;
    
            accountRange.value(SysQuery::value(mainAccountNum));
            genQueryRun = new QueryRun(genQuery);
            while (genQueryRun.next())
            {
                str dimValue = dimProvider.getDimensionValueFromQueryRun(genQueryRun, genQbdsGJAE.name(), dimensionField, DimensionComponent::DimensionAttribute, dimAttr.Name);

                profitId         = dimValue;
                if (!profitId)
                {
                    profitId = EmptyField;
                }
    
                amountDebit     = this.amountAccountDim(mainAccountId, false, dimValue);
                amountCredit    = this.amountAccountDim(mainAccountId, true, dimValue);
                amountCreditTax = 0;
                amountDebitTax  = 0;
    
                if (profitId != EmptyField)
                {
                    amountDebitTax = this.amountTax(mainAccountId, RTax25ProfitTable::findByProfitId(profitId).RecId);
    
                    select forupdate tmpRTax25TaxRemainGoods
                        where tmpRTax25TaxRemainGoods.MainAccountId     == mainAccountId       &&
                              tmpRTax25TaxRemainGoods.SumMainAccountId  == sumMainAccountId    &&
                              tmpRTax25TaxRemainGoods.NumSection        == numSection          &&
                              tmpRTax25TaxRemainGoods.ProfitId          == profitId;
    
                    if ((tmpRTax25TaxRemainGoods.StartBalance + tmpRTax25TaxRemainGoods.AmountDebit + amountDebit) != 0)
                    {
                        amountCreditTax = (tmpRTax25TaxRemainGoods.StartBalanceTax + tmpRTax25TaxRemainGoods.AmountDebitTax + amountDebitTax) *
                                          (tmpRTax25TaxRemainGoods.AmountCredit + amountCredit) /
                                          (tmpRTax25TaxRemainGoods.StartBalance + tmpRTax25TaxRemainGoods.AmountDebit + amountDebit);
                    }
    
                    amountDebitTaxTotal     += amountDebitTax;
                    amountCreditTaxTotal    += amountCreditTax;
                }
    
                amountDebitTotal        += amountDebit;
                amountCreditTotal       += amountCredit;
    
                this.updateTaxRemainGoods(mainAccountId, sumMainAccountId, amountDebit, amountCredit, amountDebitTax, amountCreditTax, false, tablenum(MainAccount), mainAccountId, profitId);
            }
    
            select forupdate tmpRTax25TaxRemainGoods
                where tmpRTax25TaxRemainGoods.MainAccountId    == mainAccountId       &&
                      tmpRTax25TaxRemainGoods.SumMainAccountId == sumMainAccountId    &&
                      tmpRTax25TaxRemainGoods.NumSection       == numSection          &&
                      !tmpRTax25TaxRemainGoods.ProfitId;
    
            this.updateTaxRemainGoods(mainAccountId, sumMainAccountId, amountDebitTotal, amountCreditTotal, amountDebitTaxTotal, amountCreditTaxTotal);
    
            select forupdate tmpRTax25TaxRemainGoods
                where tmpRTax25TaxRemainGoods.MainAccountId    == sumMainAccountId    &&
                      tmpRTax25TaxRemainGoods.NumSection       == numSection          &&
                      tmpRTax25TaxRemainGoods.FinalAccount;
    
            this.updateTaxRemainGoods(sumMainAccountId, sumMainAccountId, amountDebitTotal, amountCreditTotal, amountDebitTaxTotal, amountCreditTaxTotal, true);
        }
    
        while select tmpRTax25TaxRemainGoods order by FinalAccount desc, SumMainAccountNum, MainAccountNum, ProfitId
            where tmpRTax25TaxRemainGoods.NumSection == numSection
        {
            if (tmpRTax25TaxRemainGoods.ProfitId || tmpRTax25TaxRemainGoods.ManualInput)
            {
                RTax25ProfitTable rTax25ProfitTable = RTax25ProfitTable::findByProfitId(tmpRTax25TaxRemainGoods.ProfitId);
                regQuery.addBodyRecord(rTax25ProfitTable.RecId,
                               [(tmpRTax25TaxRemainGoods.ProfitId == EmptyField) ? EmptyField :
                                 tmpRTax25TaxRemainGoods.ManualInput ? tmpRTax25TaxRemainGoods.ManualInputTxt :
                                 rTax25ProfitTable.Description,
                               tmpRTax25TaxRemainGoods.StartBalance,
                               tmpRTax25TaxRemainGoods.StartBalanceTax,
                               tmpRTax25TaxRemainGoods.AmountDebit,
                               tmpRTax25TaxRemainGoods.AmountDebitTax,
                               tmpRTax25TaxRemainGoods.AmountCredit,
                               tmpRTax25TaxRemainGoods.AmountCreditTax,
                               tmpRTax25TaxRemainGoods.StartBalance + tmpRTax25TaxRemainGoods.AmountDebit - tmpRTax25TaxRemainGoods.AmountCredit,
                               tmpRTax25TaxRemainGoods.StartBalanceTax + tmpRTax25TaxRemainGoods.AmountDebitTax - tmpRTax25TaxRemainGoods.AmountCreditTax,
                               tmpRTax25TaxRemainGoods.AmountCredit - tmpRTax25TaxRemainGoods.AmountCreditTax,
                               1,
                               '',
                               0],
                               tmpRTax25TaxRemainGoods.RefTableId,
                               tmpRTax25TaxRemainGoods.RefRecId,
                               (tmpRTax25TaxRemainGoods.ProfitId == EmptyField) ? EmptyField : rTax25ProfitTable.Description);
            }
            else
            {
                regQuery.addFooterRecord(0,
                               [strfmt(tmpRTax25TaxRemainGoods.FinalAccount ? "@GLS113836" : "@GLS113837", tmpRTax25TaxRemainGoods.MainAccountNum),
                               tmpRTax25TaxRemainGoods.StartBalance,
                               tmpRTax25TaxRemainGoods.StartBalanceTax,
                               tmpRTax25TaxRemainGoods.AmountDebit,
                               tmpRTax25TaxRemainGoods.AmountDebitTax,
                               tmpRTax25TaxRemainGoods.AmountCredit,
                               tmpRTax25TaxRemainGoods.AmountCreditTax,
                               tmpRTax25TaxRemainGoods.StartBalance + tmpRTax25TaxRemainGoods.AmountDebit - tmpRTax25TaxRemainGoods.AmountCredit,
                               tmpRTax25TaxRemainGoods.StartBalanceTax + tmpRTax25TaxRemainGoods.AmountDebitTax - tmpRTax25TaxRemainGoods.AmountCreditTax,
                               tmpRTax25TaxRemainGoods.AmountCredit - tmpRTax25TaxRemainGoods.AmountCreditTax,
                               1,
                               tmpRTax25TaxRemainGoods.MainAccountNum,
                               tmpRTax25TaxRemainGoods.FinalAccount ? 1 : 0],
                               0,
                               strfmt(tmpRTax25TaxRemainGoods.FinalAccount ? "@GLS113836" : "@GLS113837", tmpRTax25TaxRemainGoods.MainAccountNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSection234</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcSection234()
    {
        QueryRun                queryRun;
        MainAccount             mainAccount;
        TmpRTax25TaxRemainGoods tmpRTax25TaxRemainGoodsLast;
        RecId                   mainAccountId, sumMainAccountId;
        AmountMST               amountDebit, amountDebitTax;
        AmountMST               amountCredit, amountCreditTax;
    
        const int StartNumSection = 2;
        numSection = StartNumSection;
        tmpRTax25TaxRemainGoodsLast.setTmpData(tmpRTax25TaxRemainGoods);
    
        while (numSection <= conlen(headerSection))
        {
            queryRun = this.mainAccountQueryRun();
            this.createHeader(conpeek(headerSection, numSection));
    
            while(queryRun.next())
            {
                mainAccount = queryRun.get(tablenum(MainAccount));
                tmpLedgerAccountList.addRecord(0, mainAccount.RecId);
    
                mainAccountId = mainAccount.RecId;
                sumMainAccountId = MainAccount::findByMainAccountId(MainAccount::getTotalAccount_RU(mainAccount.MainAccountId)).RecId;
                amountDebit     = this.amountAccountDim(mainAccountId, false);
                amountCredit    = this.amountAccountDim(mainAccountId, true);
    
                select forupdate tmpRTax25TaxRemainGoods
                    where tmpRTax25TaxRemainGoods.MainAccountId    == mainAccountId       &&
                          tmpRTax25TaxRemainGoods.SumMainAccountId == sumMainAccountId    &&
                          tmpRTax25TaxRemainGoods.NumSection       == numSection;
    
                this.updateTaxRemainGoods(mainAccountId, sumMainAccountId, amountDebit, amountCredit, 0, 0, false, tablenum(MainAccount), mainAccount.RecId);
    
                select forupdate tmpRTax25TaxRemainGoods
                    where tmpRTax25TaxRemainGoods.MainAccountId    == sumMainAccountId    &&
                          tmpRTax25TaxRemainGoods.NumSection       == numSection          &&
                          tmpRTax25TaxRemainGoods.FinalAccount;
    
                this.updateTaxRemainGoods(sumMainAccountId, sumMainAccountId, amountDebit, amountCredit, 0, 0, true);
            }
    
            while select forupdate tmpRTax25TaxRemainGoods order by FinalAccount desc, SumMainAccountNum, MainAccountNum, ProfitId
                where tmpRTax25TaxRemainGoods.NumSection == numSection
            {
                if (tmpRTax25TaxRemainGoods.FinalAccount)
                {
                    select sum(AmountCredit), sum(AmountCreditTax) from tmpRTax25TaxRemainGoodsLast
                        where tmpRTax25TaxRemainGoodsLast.NumSection == (numSection - 1) &&
                              tmpRTax25TaxRemainGoodsLast.FinalAccount;
    
                    if (!tmpRTax25TaxRemainGoodsLast.AmountCredit && !tmpRTax25TaxRemainGoodsLast.AmountCreditTax && numSection == 3)
                    {
                        select sum(AmountCredit), sum(AmountCreditTax) from tmpRTax25TaxRemainGoodsLast
                            where tmpRTax25TaxRemainGoodsLast.NumSection == 1 &&
                                  tmpRTax25TaxRemainGoodsLast.FinalAccount;
                    }
    
                    amountDebitTax = 0;
                    amountCreditTax = 0;
    
                    if (tmpRTax25TaxRemainGoodsLast.AmountCredit)
                    {
                        amountDebitTax =  tmpRTax25TaxRemainGoodsLast.AmountCreditTax * tmpRTax25TaxRemainGoods.AmountDebit / tmpRTax25TaxRemainGoodsLast.AmountCredit;
                    }
    
                    if ((tmpRTax25TaxRemainGoods.StartBalance + tmpRTax25TaxRemainGoods.AmountDebit) != 0)
                    {
                        amountCreditTax = (tmpRTax25TaxRemainGoods.StartBalanceTax + amountDebitTax) *  tmpRTax25TaxRemainGoods.AmountCredit / (tmpRTax25TaxRemainGoods.StartBalance + tmpRTax25TaxRemainGoods.AmountDebit);
                    }
    
                    tmpRTax25TaxRemainGoods.AmountDebitTax  = amountDebitTax;
                    tmpRTax25TaxRemainGoods.AmountCreditTax = amountCreditTax;
                    tmpRTax25TaxRemainGoods.update();
    
                    regQuery.addFooterRecord(0,
                                       [strfmt("@GLS113836", tmpRTax25TaxRemainGoods.MainAccountNum),
                                       tmpRTax25TaxRemainGoods.StartBalance,
                                       tmpRTax25TaxRemainGoods.StartBalanceTax,
                                       tmpRTax25TaxRemainGoods.AmountDebit,
                                       amountDebitTax,
                                       tmpRTax25TaxRemainGoods.AmountCredit,
                                       amountCreditTax,
                                       tmpRTax25TaxRemainGoods.StartBalance + tmpRTax25TaxRemainGoods.AmountDebit - tmpRTax25TaxRemainGoods.AmountCredit,
                                       tmpRTax25TaxRemainGoods.StartBalanceTax + amountDebitTax - amountCreditTax,
                                       tmpRTax25TaxRemainGoods.AmountCredit - amountCreditTax,
                                       numSection,
                                       tmpRTax25TaxRemainGoods.MainAccountNum,
                                       1],
                                       0,
                                       strfmt("@GLS113836", tmpRTax25TaxRemainGoods.MainAccountNum));
                }
                else
                {
                    regQuery.addBodyRecord(0,
                                       [strfmt("@GLS113837", tmpRTax25TaxRemainGoods.MainAccountNum),
                                       tmpRTax25TaxRemainGoods.StartBalance,
                                       tmpRTax25TaxRemainGoods.StartBalanceTax,
                                       tmpRTax25TaxRemainGoods.AmountDebit,
                                       0.00,
                                       tmpRTax25TaxRemainGoods.AmountCredit,
                                       0.00,
                                       tmpRTax25TaxRemainGoods.StartBalance + tmpRTax25TaxRemainGoods.AmountDebit - tmpRTax25TaxRemainGoods.AmountCredit,
                                       0.00,
                                       0.00,
                                       numSection,
                                       tmpRTax25TaxRemainGoods.MainAccountNum,
                                       0],
                                       tmpRTax25TaxRemainGoods.RefTableId,
                                       tmpRTax25TaxRemainGoods.RefRecId,
                                       strfmt("@GLS113837", tmpRTax25TaxRemainGoods.MainAccountNum));
                }
            }
    
            numSection ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSection5</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcSection5()
    {
        QueryRun                            queryRun;
        TmpRTax25TaxRemainGoods             tmpRTax25TaxRemainGoodsLast;
        AmountMST                           amountCreditTax;
        RTax25ProfitId                      profitId;
        MainAccount                         mainAccount;
        MainAccount                         offsetMainAccount;
    
        GeneralJournalAccountEntry          accountEntry, offsetAccountEntry;
        GeneralJournalAccountEntry_W        accountEntryW, offsetAccountEntryW;
        GeneralJournalEntryReportingView_RU entry;
        DimensionAttributeLevelValueView    dimAttributeLevelValueView, offsetDimAttributeLevelValueView;
    
        this.createHeader("@SYS97268");
    
        const int NumSection5 = 5;
        numSection = 1;
        tmpRTax25TaxRemainGoodsLast.setTmpData(tmpRTax25TaxRemainGoods);
    
        while (numSection <= conlen(headerSection))
        {
            queryRun = this.mainAccountQueryRun();
    
            while(queryRun.next())
            {
                mainAccount = queryRun.get(tablenum(MainAccount));
    
                rTax25PeriodIterator.first();
    
                do
                {
                    while select TableId from accountEntry
                    where ((accountEntry.AccountingCurrencyAmount < 0 && !accountEntry.IsCorrection) ||
                           (accountEntry.AccountingCurrencyAmount > 0 && accountEntry.IsCorrection))
                    join RecId from accountEntryW
                        where accountEntryW.GeneralJournalAccountEntry == accountEntry.RecId
                    join TableId from dimAttributeLevelValueView
                        where dimAttributeLevelValueView.ValueCombinationRecId  == accountEntry.LedgerDimension   &&
                              dimAttributeLevelValueView.DimensionAttribute     == mainAccountAttr.RecId                &&
                              dimAttributeLevelValueView.EntityInstance         == mainAccount.RecId
                    join TableId from entry
                            where entry.TransRecId     == accountEntry.GeneralJournalEntry          &&
                              entry.Ledger         == Ledger::current()                  &&
                                  entry.AccountingDate >= rTax25PeriodIterator.fromDateAccounting() &&
                                  entry.AccountingDate <= rTax25PeriodIterator.toDateAccounting()   &&
                                  entry.ReportingDate  >= rTax25PeriodIterator.fromDateReporting()  &&
                                  entry.ReportingDate  <= rTax25PeriodIterator.toDateReporting()
                    join RecId from offsetAccountEntryW
                        where offsetAccountEntryW.BondBatchTrans_RU == accountEntryW.BondBatchTrans_RU
                    join AccountingCurrencyAmount, LedgerDimension from offsetAccountEntry
                        where offsetAccountEntry.IsCredit != accountEntry.IsCredit &&
                              offsetAccountEntry.GeneralJournalEntry == accountEntry.GeneralJournalEntry &&
                              offsetAccountEntry.RecId == offsetAccountEntryW.GeneralJournalAccountEntry
                    join EntityInstance from offsetDimAttributeLevelValueView
                        where offsetDimAttributeLevelValueView.ValueCombinationRecId  == offsetAccountEntry.LedgerDimension &&
                              offsetDimAttributeLevelValueView.DimensionAttribute     == mainAccountAttr.RecId                    &&
                              offsetDimAttributeLevelValueView.EntityInstance         != mainAccount.RecId
                    notexists join tmpLedgerAccountList
                        where tmpLedgerAccountList.MainAccountId == offsetDimAttributeLevelValueView.EntityInstance
                    {
                        offsetMainAccount = MainAccount::find(offsetDimAttributeLevelValueView.EntityInstance);
    
                        select sum(StartBalanceTax), sum(AmountDebitTax), sum(StartBalance), sum(AmountDebit) from tmpRTax25TaxRemainGoodsLast
                        where tmpRTax25TaxRemainGoodsLast.NumSection == numSection &&
                              tmpRTax25TaxRemainGoodsLast.FinalAccount;
    
                        if ((tmpRTax25TaxRemainGoodsLast.StartBalance + tmpRTax25TaxRemainGoodsLast.AmountDebit) != 0)
                        {
                            amountCreditTax = (tmpRTax25TaxRemainGoodsLast.StartBalanceTax + tmpRTax25TaxRemainGoodsLast.AmountDebitTax) *
                            offsetAccountEntry.AccountingCurrencyAmount / (tmpRTax25TaxRemainGoodsLast.StartBalance + tmpRTax25TaxRemainGoodsLast.AmountDebit);
                        }
                        else
                        {
                            amountCreditTax = 0;
                        }
    
                        profitId = RTax25ProfitTable::findDefaultDimension(LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(offsetAccountEntry.LedgerDimension)).ProfitId;
                        if (!profitId)
                        {
                        profitId = EmptyField;
                        }
    
                        select forupdate tmpRTax25TaxRemainGoods
                        where tmpRTax25TaxRemainGoods.MainAccountId == offsetMainAccount.RecId  &&
                              tmpRTax25TaxRemainGoods.NumSection    == NumSection5              &&
                              tmpRTax25TaxRemainGoods.ProfitId      == profitId;
    
                        this.updateTaxRemainGoods(offsetMainAccount.RecId, 0, 0, offsetAccountEntry.AccountingCurrencyAmount, 0, amountCreditTax, false, tablenum(MainAccount), offsetMainAccount.RecId, profitId, NumSection5);
    
                        select forupdate tmpRTax25TaxRemainGoods
                        where tmpRTax25TaxRemainGoods.MainAccountId == offsetMainAccount.RecId  &&
                              tmpRTax25TaxRemainGoods.NumSection    == NumSection5              &&
                              !tmpRTax25TaxRemainGoods.ProfitId;
    
                        this.updateTaxRemainGoods(offsetMainAccount.RecId, 0, 0, offsetAccountEntry.AccountingCurrencyAmount, 0, amountCreditTax, true, tablenum(MainAccount), offsetMainAccount.RecId, '', NumSection5);
                    }
                }
                while (rTax25PeriodIterator.next());
            }
    
            numSection ++;
        }
    
        while select tmpRTax25TaxRemainGoods order by MainAccountNum, FinalAccount desc, ProfitId desc
            where tmpRTax25TaxRemainGoods.NumSection == NumSection5 &&
                  tmpRTax25TaxRemainGoods.AmountCredit
        {
            if(tmpRTax25TaxRemainGoods.ProfitId)
            {
                RTax25ProfitTable rTax25ProfitTable = RTax25ProfitTable::findByProfitId(tmpRTax25TaxRemainGoods.ProfitId);
                regQuery.addBodyRecord(rTax25ProfitTable.RecId,
                                   [(tmpRTax25TaxRemainGoods.ProfitId == EmptyField) ? EmptyField : rTax25ProfitTable.Description,
                                   0.00,
                                   0.00,
                                   0.00,
                                   0.00,
                                   tmpRTax25TaxRemainGoods.AmountCredit,
                                   tmpRTax25TaxRemainGoods.AmountCreditTax,
                                   0.00,
                                   0.00,
                                   tmpRTax25TaxRemainGoods.AmountCredit - tmpRTax25TaxRemainGoods.AmountCreditTax,
                                   NumSection5,
                                   '',
                                   0],
                                   tmpRTax25TaxRemainGoods.RefTableId,
                                   tmpRTax25TaxRemainGoods.RefRecId,
                                   (tmpRTax25TaxRemainGoods.ProfitId == EmptyField) ? EmptyField : rTax25ProfitTable.Description);
            }
            else
            {
                regQuery.addFooterRecord(0,
                                   [strfmt("@GLS113838", tmpRTax25TaxRemainGoods.MainAccountNum),
                                   0.00,
                                   0.00,
                                   0.00,
                                   0.00,
                                   tmpRTax25TaxRemainGoods.AmountCredit,
                                   tmpRTax25TaxRemainGoods.AmountCreditTax,
                                   0.00,
                                   0.00,
                                   tmpRTax25TaxRemainGoods.AmountCredit - tmpRTax25TaxRemainGoods.AmountCreditTax,
                                   NumSection5,
                                   tmpRTax25TaxRemainGoods.MainAccountNum,
                                   0],
                                   0,
                                   strfmt("@GLS113838", tmpRTax25TaxRemainGoods.MainAccountNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStartBalance</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcStartBalance()
    {
        RTax25RegisterJournalTable  journalTable;
        RTax25RegisterTrans_TaxRemainGoods  regTrans;
        RTax25RegisterJournalTrans  journalTrans;
        RTax25RegisterJournalLink   journalLink;
    
        MainAccount                 mainAccount;
        MainAccount                 sumMainAccount;
        AmountMST                   startBalance;
        AmountMST                   startBalanceTax;
    
        select firstOnly JournalNum, PeriodNum, PeriodType, FiscalYear, EnableCorrective from journalTable
            order by Version desc, PeriodType desc
            where journalTable.Accepted            != RTax25CorrectionAccepted::Rejected   &&
                  journalTable.RegisterJournalType == RTax25RegisterJournalType::ProfitTax &&
                  journalTable.EndDate             == (dateFrom - 1);
    
        if (journalTable.EnableCorrective)
        {
            select ManualInput, Section, rTax25ProfitTable, Account, ClosingBalanceAccounting, ClosingBalanceTA, TotalAccount,
                         RefTableId, RefRecId, Name
                from regTrans
                order by LineNumber
                where regTrans.BlockType           != ReportBlockType::Header
            exists join journalTrans
                where journalTrans.RecId           == regTrans.JournalTransRefRecId &&
                      journalTrans.RegisterId      == registerId                    &&
                      journalTrans.Cancelled       == NoYes::No
            exists join journalLink
                where journalLink.TransRecId == journalTrans.RecId &&
                      journalLink.TableRecId == journalTable.RecId;
        }
        else
        {
            select ManualInput, Section, rTax25ProfitTable, Account, ClosingBalanceAccounting, ClosingBalanceTA, TotalAccount,
                         RefTableId, RefRecId, Name
                from regTrans
                order by LineNumber
                where regTrans.BlockType           != ReportBlockType::Header
            exists join journalTrans
                where journalTrans.RecId           == regTrans.JournalTransRefRecId &&
                      journalTrans.RegisterId      == registerId                    &&
                      journalTrans.JournalNum      == journalTable.JournalNum       &&
                      journalTrans.PeriodNum       == journalTable.PeriodNum        &&
                      journalTrans.PeriodType      == journalTable.PeriodType       &&
                      journalTrans.FiscalYear      == journalTable.FiscalYear       &&
                      ! journalTrans.Cancelled;
        }
    
        while(regTrans)
        {
            if (!regTrans.ManualInput)
            {
                numSection = regTrans.Section;
            }
    
            const int Section5 = 5;
            if (numSection == Section5)
            {
                continue;
            }
    
            if (!regTrans.rTax25ProfitTable && !regTrans.ManualInput && regTrans.Name != EmptyField)
            {
                mainAccount      = MainAccount::findByMainAccountId(regTrans.Account);
                sumMainAccount   = MainAccount::findByMainAccountId(MainAccount::getTotalAccount_RU(mainAccount.MainAccountId));
            }
    
            startBalance    = regTrans.ClosingBalanceAccounting;
            startBalanceTax = regTrans.ClosingBalanceTA;
    
            if (!startBalance && !startBalanceTax)
            {
                continue;
            }
    
            tmpRTax25TaxRemainGoods.clear();
    
            if (regTrans.TotalAccount)
            {
                tmpRTax25TaxRemainGoods.MainAccountId   = sumMainAccount.RecId;
                tmpRTax25TaxRemainGoods.MainAccountNum  = sumMainAccount.MainAccountId;
                tmpRTax25TaxRemainGoods.FinalAccount    = NoYes::Yes;
            }
            else
            {
                tmpRTax25TaxRemainGoods.MainAccountId   = mainAccount.RecId;
                tmpRTax25TaxRemainGoods.MainAccountNum  = mainAccount.MainAccountId;
                tmpRTax25TaxRemainGoods.RefTableId      = regTrans.RefTableId;
                tmpRTax25TaxRemainGoods.RefRecId        = regTrans.RefRecId;
            }
    
            tmpRTax25TaxRemainGoods.SumMainAccountId    = sumMainAccount.RecId;
            tmpRTax25TaxRemainGoods.SumMainAccountNum   = sumMainAccount.MainAccountId;
            tmpRTax25TaxRemainGoods.ManualInput         = regTrans.ManualInput;
            tmpRTax25TaxRemainGoods.ManualInputTxt      = regTrans.ManualInput ? regTrans.Name : '';
            tmpRTax25TaxRemainGoods.ProfitId            = (regTrans.Name == EmptyField) ? EmptyField : RTax25ProfitTable::find(regTrans.rTax25ProfitTable).ProfitId;
            tmpRTax25TaxRemainGoods.NumSection          = numSection;
            tmpRTax25TaxRemainGoods.StartBalance        = startBalance;
            tmpRTax25TaxRemainGoods.StartBalanceTax     = startBalanceTax;
            tmpRTax25TaxRemainGoods.insert();
    
            next regTrans;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterValue</Name>
				<Source><![CDATA[
    private str filterValue(str _fromValue, str _toValue = _fromValue)
    {
        if (_fromValue == _toValue)
        {
            if (_fromValue)
            {
                return SysQuery::value(_fromValue);
            }

            return SysQuery::valueEmptyString();
        }

        return SysQuery::range(_fromValue, _toValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean     ret = super(_registerJournalTrans, _batch);
        MainAccount mainAccount;
        QueryRun    queryRun;
    
        dimAttr         = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);
        mainAccountAttr = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));
        headerSection   = ["@GLS113839",
                           "@GLS113840",
                           "@GLS113841",
                           "@GLS113842"];
    
        intDepRefRecId    = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::IntangibleDepreciation, _registerJournalTrans).RecId;
        notInfIncRefRecId = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::NotInfluenceIncome, _registerJournalTrans).RecId;
        tanDepRefRecId    = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::TangibleDepreciation, _registerJournalTrans).RecId;
        deferralsRefRecId = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::Deferrals, _registerJournalTrans).RecId;
    
        mainAccountAssetDeferr = new Set(Types::String);
        queryRun = this.mainAccountQueryRun(RTax25RegisterParameters::find(registerId, 10).Parameter);
        while (queryRun.next())
        {
            mainAccount = queryRun.get(tablenum(MainAccount));
            mainAccountAssetDeferr.add(mainAccount.MainAccountId);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for finding the main account.
    /// </summary>
    /// <param name="_parameter">
    /// The account number criteria.
    /// </param>
    /// <returns>
    /// The query used to find the the main account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun mainAccountQueryRun(Range _parameter = RTax25RegisterParameters::find(registerId, numSection).Parameter)
    {
        Query                   query;
        QueryBuildDataSource    qbdsMainAccoint;
        ;

        query = new Query();
        qbdsMainAccoint = query.addDataSource(tablenum(MainAccount));
        qbdsMainAccoint.addRange(fieldnum(MainAccount, MainAccountId)).value(this.accountFilter(_parameter));
        qbdsMainAccoint.addSelectionField(fieldnum(MainAccount, MainAccountId));
        qbdsMainAccoint.addSelectionField(fieldnum(MainAccount, RecId));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxRemainGoods</Name>
				<Source><![CDATA[
    private void updateTaxRemainGoods(RecId            _mainAccountRecId,
                                      RecId            _sumMainAccountRecId,
                                      AmountMST        _amountDebit,
                                      AmountMST        _amountCredit,
                                      AmountMST        _amountDebitTax,
                                      AmountMST        _amountCreditTax,
                                      NoYes            _finalAccount   = false,
                                      RefTableId       _refTableId     = 0,
                                      RefRecId         _refRecId       = 0,
                                      RTax25ProfitId   _profitId       = '',
                                      int              _numSection     = numSection)
    {
        if (!_amountDebit && !_amountCredit && !_amountDebitTax && !_amountCreditTax)
        {
            return;
        }

        if (tmpRTax25TaxRemainGoods.RecId)
        {
            tmpRTax25TaxRemainGoods.AmountDebit     += _amountDebit;
            tmpRTax25TaxRemainGoods.AmountCredit    += _amountCredit;
            tmpRTax25TaxRemainGoods.AmountDebitTax  += _amountDebitTax;
            tmpRTax25TaxRemainGoods.AmountCreditTax += _amountCreditTax;
            tmpRTax25TaxRemainGoods.update();
        }
        else
        {
            tmpRTax25TaxRemainGoods.MainAccountId     = _mainAccountRecId;
            tmpRTax25TaxRemainGoods.MainAccountNum    = MainAccount::find(_mainAccountRecId).MainAccountId;
            tmpRTax25TaxRemainGoods.SumMainAccountId  = _sumMainAccountRecId;
            tmpRTax25TaxRemainGoods.SumMainAccountNum = MainAccount::find(_sumMainAccountRecId).MainAccountId;
            tmpRTax25TaxRemainGoods.FinalAccount      = _finalAccount;
            tmpRTax25TaxRemainGoods.AmountDebit       = _amountDebit;
            tmpRTax25TaxRemainGoods.AmountCredit      = _amountCredit;
            tmpRTax25TaxRemainGoods.AmountDebitTax    = _amountDebitTax;
            tmpRTax25TaxRemainGoods.AmountCreditTax   = _amountCreditTax;
            tmpRTax25TaxRemainGoods.RefTableId        = _refTableId;
            tmpRTax25TaxRemainGoods.RefRecId          = _refRecId;
            tmpRTax25TaxRemainGoods.NumSection        = _numSection;
            tmpRTax25TaxRemainGoods.ProfitId          = _profitId;
            tmpRTax25TaxRemainGoods.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        ReportingDate_RU    correctedPeriodDate, correctedPeriodDate5;
    
        correctedPeriodDate = this.correctedPeriodDateSection234(_fromDateCalc, _toDateCalc, _toDateCorr);
    
        correctedPeriodDate5 = this.correctedPeriodDateSection5(_fromDateCalc, _toDateCalc, _toDateCorr);
    
        if (!correctedPeriodDate || (correctedPeriodDate5 && correctedPeriodDate > correctedPeriodDate5))
        {
            correctedPeriodDate = correctedPeriodDate5;
        }
    
        return correctedPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDateSection234</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    private ReportingDate_RU correctedPeriodDateSection234(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        Query                   genQuery;
        QueryBuildDataSource    genQbds;
        QueryRun                genQueryRun, queryRun;
        QueryBuildRange         genQbr;
        int                     i;
        MainAccount             mainAccount;
        str                     nameGjae1, nameGjae2;
        ReportingDate_RU        correctedPeriodDate;
        str                     rangeTxt;
    
        GeneralJournalEntryReportingView_RU    generalJournalEntry;
    
        for (i = 1; i <= conlen(headerSection); i++)
        {
            numSection = i;

            queryRun = this.mainAccountQueryRun();

            while (queryRun.next())
            {
                mainAccount = queryRun.get(tableNum(MainAccount));
                tmpLedgerAccountList.addRecord(0, mainAccount.RecId);
    
                genQuery = new Query(queryStr(GeneralJournalBondBatchTransReporting_RU));
    
                genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalEntryReportingView_RU));
                genQbds.addRange(fieldnum(GeneralJournalEntryReportingView_RU, Ledger)).value(queryValue(Ledger::current()));
                genQbds.addRange(fieldnum(GeneralJournalEntryReportingView_RU, AccountingDate)).value(queryRange(_fromDateCalc, _toDateCalc));
                genQbds.addRange(fieldnum(GeneralJournalEntryReportingView_RU, ReportingDate)).value(queryRange(dateNull(), _toDateCorr));
                genQbds.addSortField(fieldnum(GeneralJournalEntryReportingView_RU, ReportingDate), SortOrder::Ascending);
                genQbds.addSelectionField(fieldNum(GeneralJournalEntryReportingView_RU, ReportingDate));
    
                genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry), 1);
                genQbds.fetchMode(QueryFetchMode::One2One);
                genQbds.joinMode(JoinMode::ExistsJoin);
                nameGjae1 = genQbds.name();
    
                genQbr = SysQuery::addDimensionAttributeRange(genQuery,
                                                              genQbds.name(),
                                                              fieldstr(GeneralJournalAccountEntry, LedgerDimension),
                                                              DimensionComponent::DimensionAttribute,
                                                              mainAccount.MainAccountId,
                                                              mainAccountAttr.Name);
                if (genQbr)
                {
                    genQbr.dataSource().joinMode(JoinMode::ExistsJoin);
                }
    
                genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry_W), 1);
                genQbds.fetchMode(QueryFetchMode::One2One);
                genQbds.joinMode(JoinMode::ExistsJoin);
    
                genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry_W), 2);
                genQbds.fetchMode(QueryFetchMode::One2One);
                genQbds.joinMode(JoinMode::ExistsJoin);
    
                genQbds = genQuery.dataSourceTable(tablenum(GeneralJournalAccountEntry), 2);
                nameGjae2 = genQbds.name();
                genQbds.fetchMode(QueryFetchMode::One2One);
                genQbds.joinMode(JoinMode::NoExistsJoin);
    
                rangeTxt = strfmt(
                        OffsetRange,
                nameGjae1,
                        fieldStr(GeneralJournalAccountEntry, IsCredit),
                        NotEqual,
                nameGjae2,
                        fieldStr(GeneralJournalAccountEntry, IsCredit));
    
                genQbds.addRange(fieldnum(GeneralJournalAccountEntry, IsCredit)).value(rangeTxt);
    
                genQbr = SysQuery::addDimensionAttributeRange(genQuery,
                                                              genQbds.name(),
                                                              fieldstr(GeneralJournalAccountEntry, LedgerDimension),
                                                              DimensionComponent::DimensionAttribute,
                                                              mainAccount.MainAccountId,
                                                              mainAccountAttr.Name);
                if (genQbr)
                {
                    genQbr.dataSource().joinMode(JoinMode::ExistsJoin);
                }
    
                genQuery.firstOnly1(true);

                genQueryRun = new QueryRun(genQuery);
    
                if (genQueryRun.next())
                {
                    generalJournalEntry = genQueryRun.get(tableNum(GeneralJournalEntryReportingView_RU)) as GeneralJournalEntryReportingView_RU;
    
                    if (!correctedPeriodDate || correctedPeriodDate > generalJournalEntry.ReportingDate)
                    {
                        correctedPeriodDate = dateEndQtr(generalJournalEntry.ReportingDate);
                    }
                }
            }
        }
    
    
    
        return correctedPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDateSection5</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    private ReportingDate_RU correctedPeriodDateSection5(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        QueryRun            queryRun;
        ReportingDate_RU    correctedPeriodDate;
    
        MainAccount                         mainAccount;
        GeneralJournalAccountEntry          accountEntry, offsetAccountEntry;
        GeneralJournalAccountEntry_W        accountEntryW, offsetAccountEntryW;
        GeneralJournalEntryCorrectiveView_RU entry;
        DimensionAttributeLevelValueView    dimAttributeLevelValueView, offsetDimAttributeLevelValueView;
    
        numSection = 1;
    
        while (numSection <= conlen(headerSection))
        {
            queryRun = this.mainAccountQueryRun();
    
            while(queryRun.next())
            {
                mainAccount = queryRun.get(tablenum(MainAccount));
    
                select firstOnly TableId from accountEntry
                    where ((accountEntry.AccountingCurrencyAmount < 0 && !accountEntry.IsCorrection) ||
                            (accountEntry.AccountingCurrencyAmount > 0 && accountEntry.IsCorrection))
                    join RecId from accountEntryW
                        where accountEntryW.GeneralJournalAccountEntry == accountEntry.RecId
                    join TableId from dimAttributeLevelValueView
                        where dimAttributeLevelValueView.ValueCombinationRecId  == accountEntry.LedgerDimension   &&
                                dimAttributeLevelValueView.DimensionAttribute     == mainAccountAttr.RecId                &&
                                dimAttributeLevelValueView.EntityInstance         == mainAccount.RecId
                    join ReportingDate from entry
                        order by ReportingDate
                        where entry.RecId            == accountEntry.GeneralJournalEntry &&
                                entry.Ledger         == Ledger::current()                &&
                                entry.AccountingDate >= _fromDateCalc                    &&
                                entry.AccountingDate <= _toDateCalc                      &&
                                entry.ReportingDate  <= _toDateCorr
                    join RecId from offsetAccountEntryW
                        where offsetAccountEntryW.BondBatchTrans_RU == accountEntryW.BondBatchTrans_RU
                    join TableId from offsetAccountEntry
                        where offsetAccountEntry.IsCredit != accountEntry.IsCredit &&
                                offsetAccountEntry.GeneralJournalEntry == accountEntry.GeneralJournalEntry &&
                                offsetAccountEntry.RecId == offsetAccountEntryW.GeneralJournalAccountEntry
                    join TableId from offsetDimAttributeLevelValueView
                        where offsetDimAttributeLevelValueView.ValueCombinationRecId  == offsetAccountEntry.LedgerDimension &&
                                offsetDimAttributeLevelValueView.DimensionAttribute     == mainAccountAttr.RecId                    &&
                                offsetDimAttributeLevelValueView.EntityInstance         != mainAccount.RecId
                    notexists join tmpLedgerAccountList
                        where tmpLedgerAccountList.MainAccountId == offsetDimAttributeLevelValueView.EntityInstance;
    
                if (entry.ReportingDate && (!correctedPeriodDate || entry.ReportingDate < correctedPeriodDate))
                {
                    correctedPeriodDate = dateEndQtr(entry.ReportingDate);
                }
            }
    
            numSection++;
        }
    
        return correctedPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    private void createHeader(RTax25Description   _lineDescription)
    {
        RTax25RegisterTrans_TaxRemainGoods  regTrans;
    
        regQuery.addHeaderRecord(0, conNull(), 0, _lineDescription);
        regTrans = regQuery.getRecord();
        if (regQuery.getSortedList().find(regTrans))
        {
            regQuery.getSortedList().del(regTrans);
            regTrans.Name = regTrans.LineDescription;
            regQuery.getSortedList().ins(regTrans);
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>