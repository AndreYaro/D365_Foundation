<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransportLoadCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTransportLoadCreator</c> class is used to create a <c>WHSTransportLoad</c>
/// and add <c>WHSWorkTable</c> records to the transport load.
/// </summary>
public class WHSTransportLoadCreator
{
    private WHSTransportLoad   transportLoad;
    private WHSTransportLoadId transportLoadId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSTransportLoadCreator construct()
    {
        return new WHSTransportLoadCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransportLoadId</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates a new instance of <c>WHSTransportLoadCreator</c> with reference
	/// to a transport load id.
    /// </summary>
    /// <param name = "_transportLoadId">
    /// A transport load id that will be created.
    /// </param>
	/// <returns>Returns an instance of the <c>WHSTransportLoadCreator</c> class.</returns>
    public static WHSTransportLoadCreator newFromTransportLoadId(WHSTransportLoadId _transportLoadId)
    {
        WHSTransportLoadCreator transportLoadCreator = new WHSTransportLoadCreator();

        transportLoadCreator.initFromTransportLoadId(_transportLoadId);

        return transportLoadCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTransportLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSTransportLoadId</c>.
    /// </summary>
    /// <param name = "_transportLoadId">The <c>WHSTransportLoadId</c> that will be initialized.</param>
    protected void initFromTransportLoadId(WHSTransportLoadId _transportLoadId)
    {
        transportLoadId = _transportLoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTransportLoad</Name>
				<Source><![CDATA[
    private void findOrCreateTransportLoad()
    {
        transportLoad = WHSTransportLoad::findByTransportLoadId(transportLoadId);

        if (!transportLoad)
        {
            this.createTransportLoad(transportLoadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransportLoad</Name>
				<Source><![CDATA[
    private void createTransportLoad(WHSTransportLoadId _transportLoadId)
    {
        transportLoad.TransportLoadId     = _transportLoadId;
        transportLoad.TransportLoadStatus = WHSTransportLoadStatus::InProgress;
        transportLoad.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorkTableToNewOrFoundTransportLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attempts to find or create a <c>WHSTransportLoad</c> record
    /// and link it to a <c>WHSWorkTable</c> record through the creation
    /// of a <c>WHSTransportLoadLoadedWork</c> record.
    /// </summary>
    /// <param name = "_workId">
    /// The work Id that should be linked to the <c>WHSTransportLoad</c>
    /// denoted by the transport load instance variables in the <c>WHSTransportLoadCreator</c>
    /// </param>
    public void addWorkTableToNewOrFoundTransportLoad(WHSWorkId _workId)
    {
        ttsbegin;

        this.findOrCreateTransportLoad();

        // Only need to validate transport loads if they haven't been 
        // created through the findOrCreate() method.
        if (!transportLoad.isTransportLoadEligibleForTransportLoading())
        {
            // Have to perform this check for each pick to ensure that the transport load
            // has not been shipped even if no new link is created.
            throw error(strFmt("@WAX:ErrorTransportLoadingNoLongerEligible", transportLoadId));
        }

        this.createTransportLoadLoadedWork(_workId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransportLoadLoadedWork</Name>
				<Source><![CDATA[
    private void createTransportLoadLoadedWork(WHSWorkId _workId)
    {
        WHSTransportLoadLoadedWork transportLoadLoadedWork;

        transportLoadLoadedWork.WorkId        = _workId;
        transportLoadLoadedWork.TransportLoad = transportLoad.RecId;
        transportLoadLoadedWork.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>