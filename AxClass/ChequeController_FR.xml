<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChequeController_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ChequeController_FR</c> class is the controller class for the <c>Cheque_FR</c> SSRS report.
/// </summary>
public class ChequeController_FR extends SrsReportRunController implements BatchRetryable
{
    TmpChequePrintout           tmpChequePrintout;
    SRSPrintDestinationSettings printDestinationSetting;
    SRSCatalogItemName          chequeReport;
    boolean                     isTest;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00001, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChequeReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the initialize method for printer settings and sets up temporary data.
    /// </summary>
    /// <returns>
    ///    A cheque report name.
    /// </returns>
    public SRSCatalogItemName getChequeReport()
    {
        this.init();

        return chequeReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes all the required objects here.
    /// </summary>
    /// <remarks>
    ///    This method calls the <c>Cheque_FR</c> report based on the caller object.
    /// </remarks>
    public void init()
    {
        Object                  caller = args.caller();
        BankChequePrint         bankChequePrint;
        container               printerSetting;
        ChequeTmp_FR            chequeTmp_FR;
        printDestinationSetting = new SRSPrintDestinationSettings();

        delete_from chequeTmp_FR;
        delete_from tmpChequePrintout;

        // Init print settings and also temp table.
        switch (classIdGet(caller))
        {
            case classNum(BankChequePrint) :

                isTest = false;

                bankChequePrint = caller;
                printerSetting = bankChequePrint.parmPrintJobSettingsPacked();

                if (conLen(printerSetting) > 0)
                {
                    printDestinationSetting.unpack(printerSetting);
                }
                else
                {
                    printDestinationSetting.printMediumType(SRSPrintMediumType::Printer);
                    printDestinationSetting.fromPage(1);
                    printDestinationSetting.toPage(99999999);
                    printDestinationSetting.printLandscape(false);
                    printDestinationSetting.numberOfCopies(0);
                }

                tmpChequePrintout.setTmpData(bankChequePrint.parmTmpChequePrintout());
                break;

            case classNum(BankPrintTestCheque) :

                isTest = true;
                bankChequePrint = args.object();
                tmpChequePrintout.setTmpData(bankChequePrint.parmTmpChequePrintout());
                break;

            case classNum(BankChequeCopy) :
                bankChequePrint = args.object();
                tmpChequePrintout.setTmpData(bankChequePrint.parmTmpChequePrintout());
                break;

            default:
                isTest = true;
                break;
        }

        select tmpChequePrintout;

        if (tmpChequePrintout.ChequeFormType == ChequeFormType::FRStyle)
        {
            chequeReport = ssrsReportStr(Cheque_FR, Report);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        ChequeContract_FR contract = this.parmReportContract().parmRdpContract() as ChequeContract_FR;

        contract.parmIsTest(isTest);
        // get the Temp table, and marshall it across to SSRS
        new SRSReportRunPermission().assert();
        contract.parmTmpTableDataRecId(SRSTmpTblMarshaller::sendTmpTblToDataProvider(tmpChequePrintout));

        // set the print destination in contract
        if (printDestinationSetting)
        {
            this.parmReportContract().parmPrintSettings(printDestinationSetting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ChequeController_FR controller = new ChequeController_FR();

        controller.parmArgs(_args);
        controller.parmReportName(controller.getChequeReport());
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>