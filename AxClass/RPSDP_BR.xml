<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPSDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retrieves data for RPS_BR report
/// </summary>
[
    SRSReportParameterAttribute(classStr(FiscalDocumentContract_BR))
]
public class RPSDP_BR extends SrsReportDataProviderPreProcess
{
    #NFPrinting_BR
    FiscalDocument_BR       fiscalDocument;
    EFDocumentCity_BR       efDocCity;
    RPSTmp_BR               rpsTmp;
    RPSItemsTmp_BR          rpsItemsTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAdditionalInformation</Name>
				<Source><![CDATA[
    private void createAdditionalInformation()
    {
        rpsTmp.AdditionalInformation =  this.headerLegalTexts(fiscalDocument.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalEstabFields</Name>
				<Source><![CDATA[
    private void createFiscalEstabFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        LogisticsPostalAddress fiscalEstabPartyPostalAddress = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmFiscalEstablishmentPostalAddress());

        rpsTmp.FiscalEstabCNPJ          = _fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF();
        rpsTmp.FiscalEstabName          = _fiscalDocumentParmData.parmFiscalEstablishmentName();
        rpsTmp.FiscalEstabStreet        = fiscalEstabPartyPostalAddress.Street;
        rpsTmp.FiscalEstabAddressNumber = fiscalEstabPartyPostalAddress.StreetNumber;
        rpsTmp.FiscalEstabAddressComp   = fiscalEstabPartyPostalAddress.BuildingCompliment;
        rpsTmp.FiscalEstabDistrict      = fiscalEstabPartyPostalAddress.DistrictName;
        rpsTmp.FiscalEstabCity          = fiscalEstabPartyPostalAddress.City;
        rpsTmp.FiscalEstabState         = fiscalEstabPartyPostalAddress.State;
        rpsTmp.FiscalEstabZipCode       = fiscalEstabPartyPostalAddress.ZipCode;
        rpsTmp.FiscalEstabIEnum         = _fiscalDocumentParmData.parmFiscalEstablishmentIE();
        rpsTmp.FiscalEstabPhone         = _fiscalDocumentParmData.parmFiscalEstablishmentPhone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIdentifFields</Name>
				<Source><![CDATA[
    private void createIdentifFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        CompanyInfo     companyInfo;
        CompanyImage    companyImage;

        efDocCity = EFDocumentCity_BR::findByFiscalDocumentRef(fiscalDocument.RecId);

        rpsTmp.FiscalDocumentDate   = _fiscalDocumentParmData.parmFiscalDocumentDate();
        rpsTmp.RPSNumber            = efDocCity.RPSNumber;
        rpsTmp.RPSEmissionDate      = efDocCity.RPSDate;

        companyInfo = CompanyInfo::find();
        companyImage = CompanyImage::find(companyInfo.dataAreaId, companyInfo.TableId, companyInfo.RecId, false);

        if (companyImage)
        {
            rpsTmp.FiscalEstabLogo = companyImage.Image;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductsFields</Name>
				<Source><![CDATA[
    private void createProductsFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        FiscalDocumentLineParmData_BR   fiscalDocLineParmData;
        ListEnumerator                  lines;
        Notes                           lineAdditionalInformation;

        lines = _fiscalDocumentParmData.parmLines().getEnumerator();

        while (lines.moveNext())
        {
            fiscalDocLineParmData = lines.current();
            lineAdditionalInformation = this.lineLegalTexts(fiscalDocLineParmData.parmRecId());

            rpsItemsTmp.clear();
            rpsItemsTmp.Quantity        = fiscalDocLineParmData.parmQuantity();
            rpsItemsTmp.Unit            = fiscalDocLineParmData.parmUnit();
            rpsItemsTmp.Description     = fiscalDocLineParmData.parmDescription() + (lineAdditionalInformation ? '|' +  lineAdditionalInformation : '');
            rpsItemsTmp.UnitPrice       = fiscalDocLineParmData.parmUnitPrice();
            rpsItemsTmp.GrossLineAmount = fiscalDocLineParmData.parmLineAmount();
            this.insertRPSItemsTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createThirdPartyFields</Name>
				<Source><![CDATA[
    private void createThirdPartyFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        LogisticsPostalAddress thirdPartyPostalAddress = LogisticsPostalAddress::findRecId(_fiscalDocumentParmData.parmThirdPartyPostalAddress());

        rpsTmp.ThirdPartyCNPJ               = _fiscalDocumentParmData.parmThirdPartyCNPJCPF();
        rpsTmp.ThirdPartyName               = _fiscalDocumentParmData.parmThirdPartyName();
        rpsTmp.ThirdPartyStreet             = thirdPartyPostalAddress.Street;
        rpsTmp.ThirdPartyAddressNumber      = thirdPartyPostalAddress.StreetNumber;
        rpsTmp.ThirdPartyAddressComp        = thirdPartyPostalAddress.BuildingCompliment;
        rpsTmp.ThirdPartyAddressDistrict    = thirdPartyPostalAddress.DistrictName;
        rpsTmp.ThirdPartyCity               = thirdPartyPostalAddress.City;
        rpsTmp.ThirdPartyState              = thirdPartyPostalAddress.State;
        rpsTmp.ThirdPartyZipCode            = thirdPartyPostalAddress.ZipCode;
        rpsTmp.ThirdPartyIEnum              = _fiscalDocumentParmData.parmThirdPartyIE();
        rpsTmp.ThirdPartyCCM                = _fiscalDocumentParmData.parmThirdPartyCCMNum();

        if (fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Customer)
        {
            rpsTmp.ThirdPartyEmail = EFDocumentCity_BR::find(fiscalDocument.RecId).recipientEmail();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalFields</Name>
				<Source><![CDATA[
    private void createTotalFields(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        rpsTmp.TotalAmount = _fiscalDocumentParmData.parmTotalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsDetail</Name>
				<Source><![CDATA[
    private void dsDetail(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        this.createProductsFields(_fiscalDocumentParmData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsHeader</Name>
				<Source><![CDATA[
    private void dsHeader(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        rpsTmp.clear();
        this.createIdentifFields(_fiscalDocumentParmData);
        this.createFiscalEstabFields(_fiscalDocumentParmData);
        this.createThirdPartyFields(_fiscalDocumentParmData);
        this.createTotalFields(_fiscalDocumentParmData);
        this.createAdditionalInformation();
        this.insertRPSTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRPSItemsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>RPSItemsTmp_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(RPSItemsTmp_BR))
    ]
    public RPSItemsTmp_BR getRPSItemsTmp()
    {
        select * from rpsItemsTmp;
        return rpsItemsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRPSTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>RPSTmp_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(RPSTmp_BR))
    ]
    public RPSTmp_BR getRPSTmp()
    {
        select * from rpsTmp;
        return rpsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerLegalTexts</Name>
				<Source><![CDATA[
    private Notes headerLegalTexts(RecId _fiscalDocumentRecId)
    {
        FiscalDocument_BR   localFiscalDocument;

        localFiscalDocument = FiscalDocument_BR::find(_fiscalDocumentRecId);

        return localFiscalDocument.getLegalTextsAsString(DocuRestriction::External);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRPSItemsTmp</Name>
				<Source><![CDATA[
    private void insertRPSItemsTmp()
    {
        rpsItemsTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRPSTmp</Name>
				<Source><![CDATA[
    private void insertRPSTmp()
    {
        rpsTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineLegalTexts</Name>
				<Source><![CDATA[
    private Notes lineLegalTexts(RecId _fiscalDocLineRecId)
    {
        FiscalDocumentLine_BR   fiscalDocumentLine;

        fiscalDocumentLine = FiscalDocumentLine_BR::find(_fiscalDocLineRecId);

        return fiscalDocumentLine.getAdditionalInformationAsString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRPSTmp</Name>
				<Source><![CDATA[
    public RPSTmp_BR parmRPSTmp(RPSTmp_BR _rpsTmp = rpsTmp)
    {
        rpsTmp = _rpsTmp;
        return _rpsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the RPS_BR report
    /// </summary>
    public void processReport()
    {
        FiscalDocumentParmData_BR   fiscalDocumentParmData;
        FiscalDocumentContract_BR   contract;

        // Set the userconnection to use on table.
        rpsTmp.setConnection(this.parmUserConnection());
        rpsItemsTmp.setConnection(this.parmUserConnection());

        contract = this.parmDataContract() as FiscalDocumentContract_BR;

        select fiscalDocument
            where fiscalDocument.RecId == contract.parmRecordId();

        fiscalDocumentParmData = FiscalDocParmDataCreatorFDoc_BR::construct(fiscalDocument.RecId);
        this.dsHeader(fiscalDocumentParmData);
        this.dsDetail(fiscalDocumentParmData);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>