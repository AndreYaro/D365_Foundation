<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgFormat_XmlExport_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates and interprets the XML to be sent to the customer for approved NF-e's.
/// </summary>
class EFDocMsgFormat_XmlExport_BR extends EFDocMsgFormat_XmlBase_BR implements IEFDocMsgFormat
{
    IEFDocMsgStream_BR      stream;
    EFiscalDocument_BR      fiscalDocument;
    Exception               procResultMessageType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doFormat</Name>
				<Source><![CDATA[
    protected void doFormat()
    {
        XmlDocument         nfeDocument;
        XmlDocument         protocolDocument;
        XmlElement          nfeElement;
        XmlElement          protocolElement;
        XmlNamespaceManager nsmgr;
        str                 xmlDocumentTemplate;
        str                 version;

        nsmgr = new XmlNamespaceManager(xmlDoc.nameTable());
        nsmgr.addNamespace('x', 'http://www.portalfiscal.inf.br/nfe');

        xmlDocumentTemplate = @'<?xml version="1.0" encoding="UTF-8"?>
                              <nfeProc versao="%1" xmlns="http://www.portalfiscal.inf.br/nfe">
                                  %2
                                  <protNFe versao="%3">%4</protNFe>
                              </nfeProc>';

        str xmlSubmit, xmlSubmitReturn;

        if (creationMode == BusinessDocumentCreationMode::EInvoicingService
            && isBR00053Enabled)
        {
            xmlSubmit = this.getXmlFromService(EFDocEmailVariableType_BR::Submit, fiscalDocument.fiscalDocument());
            xmlSubmitReturn = this.getXmlFromService(EFDocEmailVariableType_BR::SubmitReturnResponse, fiscalDocument.fiscalDocument());
        }
        else
        {
            xmlSubmit = fiscalDocument.eFDocumentXML().Submission;
            xmlSubmitReturn = fiscalDocument.eFDocumentXML().SubmitReturnResponse;
        }

        if (xmlSubmit && xmlSubmitReturn)
        {
            nfeDocument = XmlDocument::newXml(xmlSubmit);
            nfeElement = nfeDocument.selectSingleNode('//x:NFe', nsmgr);

            version = nfeDocument.selectSingleNode('//x:NFe/x:infNFe/@versao', nsmgr).innerText();

            protocolDocument = XmlDocument::newXml(xmlSubmitReturn);
            protocolElement = protocolDocument.selectSingleNode('//x:infProt', nsmgr);

            stream.write(strFmt(xmlDocumentTemplate, version, nfeElement.outerXml(), version, protocolElement.outerXml()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>eFiscalDocVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the NF-e manual that this class adheres to.
    /// </summary>
    /// <returns>The version of the NF-e manual from <c>EFiscalDocVersion_BR</c> enumerator.</returns>
    public EFiscalDocVersion_BR eFiscalDocVersion()
    {
        return EFiscalDocVersion_BR::V4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXMLVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the XML version of the document being exported.
    /// </summary>
    /// <param name="_sentXML">
    /// The original XML document that will be exported.
    /// </param>
    /// <returns>
    /// The version of the format of the given XML.
    /// </returns>
    private str getXMLVersion(XmlDocument _sentXML)
    {
        XmlNamespaceManager nsmgr;
        XmlNode versionNode;
        str version;

        if (_sentXML)
        {
            nsmgr = new XmlNamespaceManager(xmlDoc.nameTable());
            nsmgr.addNamespace('x', 'http://www.portalfiscal.inf.br/nfe');
            versionNode = _sentXML.selectSingleNode('//x:infNFe/@versao', nsmgr);
            if (versionNode)
            {
                version = versionNode.innerText();
            }
        }
        return version;
    }

]]></Source>
			</Method>
			<Method>
				<Name>read</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the returned XML.
    /// </summary>
    /// <param name="_stream">The stream from which to read the XML.</param>
    /// <param name="_returnInfo">A parm object to fill the return information.</param>
    void read(IEFDocMsgStream_BR _stream, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        #ExportFiscalDocument_BR
    }

]]></Source>
			</Method>
			<Method>
				<Name>version</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version of the XML that this class creates and interprets.
    /// </summary>
    /// <returns>The XML version in string format.</returns>
    public str version()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>webService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves which web service this format is to be sent to.
    /// </summary>
    /// <returns>A web service from <c>EFDocWebService_BR</c> enumerator.</returns>
    EFDocWebService_BR webService()
    {
        return EFDocWebService_BR::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML messages and sends it to the provided message stream.
    /// </summary>
    /// <param name="_stream">The stream to be used to send the messages</param>
    /// <param name="_documentList">A <c>EFiscalDocumentList_BR</c> list of documents to be sent.</param>
    public void write(IEFDocMsgStream_BR _stream, EFiscalDocumentList_BR _documentList)
    {
        stream = _stream;

        if (_documentList.moveNext())
        {
            fiscalDocument = _documentList.current();

            this.doFormat();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocMsgFormat_XmlExport_BR</c> object.
    /// </summary>
    /// <returns>A <c>EFDocMsgFormat_XmlExport_BR</c> object.</returns>
    public static EFDocMsgFormat_XmlExport_BR construct()
    {
        return new EFDocMsgFormat_XmlExport_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>