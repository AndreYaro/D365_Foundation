<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetComponentReversal_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes reversal of asset component.
/// </summary>
public class AssetComponentReversal_JP
{
    RefRecId                assetTransRecId;
    TransactionReversal     transactionReversal;
    AssetTrans              assetTrans;

    LedgerJournalTable          ledgerJournalTable;
    LedgerJournalTrans          ledgerJournalTransOrigin;
    LedgerJournalTrans_Asset    ledgerJournalTrans_AssetOrigin;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Addes journal.
    /// </summary>
    protected void addJournal()
    {
        LedgerJournalName           ledgerJournalName;

        ledgerJournalName = ledgerJournalTransOrigin.ledgerJournalTable().ledgerJournalName();
        ledgerJournalTable.clear();
        ledgerJournalTable.initFromLedgerJournalName(ledgerJournalName.JournalName);
        ledgerJournalTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds journal lines.
    /// </summary>
    protected void addJournalTrans()
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_Asset    ledgerJournalTrans_Asset;

        ledgerJournalTrans = this.getInitializedLedgerJournalTrans(ledgerJournalTable.JournalNum);

        // Add trans
        ledgerJournalTrans.AccountType  = ledgerJournalTransOrigin.AccountType;
        ledgerJournalTrans.parmLedgerDimension(ledgerJournalTransOrigin.parmLedgerDimension());
        ledgerJournalTrans.OffsetAccountType = ledgerJournalTransOrigin.OffsetAccountType;
        ledgerJournalTrans.parmOffsetLedgerDimension(ledgerJournalTransOrigin.parmOffsetLedgerDimension());
        ledgerJournalTrans.TransactionType = LedgerTransType::FixedAssets;
        ledgerJournalTrans.PostingProfile = ledgerJournalTransOrigin.PostingProfile;
        ledgerJournalTrans.AmountCurCredit = assetTrans.AmountMST;
        ledgerJournalTrans.Txt = "@SYS78541";
        ledgerJournalTrans.insert();

        ledgerJournalTrans_Asset.clear();
        ledgerJournalTrans_Asset.RefRecId           = ledgerJournalTrans.RecId;
        ledgerJournalTrans_Asset.AssetId            = ledgerJournalTrans_AssetOrigin.AssetId;
        ledgerJournalTrans_Asset.Company            = ledgerJournalTrans.Company;
        ledgerJournalTrans_Asset.TransType          = this.transtype();
        ledgerJournalTrans_Asset.BudgetModel        = ledgerJournalTrans_AssetOrigin.BudgetModel;
        ledgerJournalTrans_Asset.ReserveTransId     = assetTrans.RecId;
        ledgerJournalTrans_Asset.BookId             = ledgerJournalTrans_AssetOrigin.BookId;
        ledgerJournalTrans_Asset.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReverseTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the transactions.
    /// </summary>
    protected void doReverseTransaction()
    {
        ttsBegin;

        if (this.validate())
        {
            this.updateAssetComponent();
            this.postJournal();
            this.updateAssetTrans();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitializedLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the initialized instance of <c>LedgerJournalTrans</c>.
    /// </summary>
    /// <param name="_journalNum">
    ///     The journal number.
    /// </param>
    /// <returns>
    ///     The instance of <c>LedgerJournalTrans</c>.
    /// </returns>
    protected LedgerJournalTrans getInitializedLedgerJournalTrans(LedgerJournalId _journalNum)
    {
        LedgerJournalTrans ledgerJournalTrans;

        ledgerJournalTrans.Voucher      = transactionReversal.parmReversalVoucher();
        ledgerJournalTrans.JournalNum   = _journalNum;
        ledgerJournalTrans.CurrencyCode = CompanyInfoHelper::standardCurrency();
        ledgerJournalTrans.ExchRate     = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode);
        ledgerJournalTrans.TransDate    = transactionReversal.parmReversalDate();

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance.
    /// </summary>
    protected void initialize()
    {
        assetTrans = AssetTrans::find(assetTransRecId);
        transactionReversal.parmReversalTraceNum(
            transactionReversal.getReference(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetComponentReverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the reverse asset component.
    /// </summary>
    /// <param name="_assetComponentOrigin">
    /// The original component.
    /// </param>
    /// <returns>
    /// The reverse asset component.
    /// </returns>
    protected AssetComponent_JP newAssetComponentReverse(AssetComponent_JP _assetComponentOrigin)
    {
        AssetComponent_JP           assetComponentReverse;
        assetComponentReverse.clear();
        assetComponentReverse.data(_assetComponentOrigin);
        assetComponentReverse.Voucher   = '';
        assetComponentReverse.TransDate = dateNull();
        assetComponentReverse.Qty = -_assetComponentOrigin.Qty;
        assetComponentReverse.CostAmount = -_assetComponentOrigin.CostAmount;
        assetComponentReverse.StornoRecId = _assetComponentOrigin.RecId;
        assetComponentReverse.RecId = 0;

        return assetComponentReverse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTransRecId</Name>
				<Source><![CDATA[
    public RefRecId parmAssetTransRecId(RefRecId _assetTransRecId = assetTransRecId)
    {
        assetTransRecId = _assetTransRecId;

        return assetTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionReversal</Name>
				<Source><![CDATA[
    public TransactionReversal parmTransactionReversal(TransactionReversal _transactionReversal = transactionReversal)
    {
        transactionReversal = _transactionReversal;

        return transactionReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the journal.
    /// </summary>
    protected void postJournal()
    {
        LedgerJournalCheckPost      ledgerJournalCheckPost;

        ledgerJournalTransOrigin = LedgerJournalTrans::findJournalForVoucher(assetTrans.Voucher, assetTrans.TransDate);
        ledgerJournalTrans_AssetOrigin = LedgerJournalTrans_Asset::find(ledgerJournalTransOrigin.RecId);

        this.addJournal();
        this.addJournalTrans();

        ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::Yes);
        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    /// The transaction type.
    /// </summary>
    /// <returns>
    /// The transaction type.
    /// </returns>
    protected AssetTransTypeJournal transType()
    {
        return AssetTransTypeJournal::AcquisitionAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the asset component.
    /// </summary>
    protected void updateAssetComponent()
    {
        AssetComponent_JP           assetComponentOrigin;
        AssetComponent_JP           assetComponentReverse;

        while select forUpdate assetComponentOrigin
            where   assetComponentOrigin.AssetTrans == assetTrans.RecId
                &&  assetComponentOrigin.AssetId    == assetTrans.AssetId
        {
            assetComponentReverse = this.newAssetComponentReverse(assetComponentOrigin);
            assetComponentReverse.insert();

            assetComponentOrigin.StornoRecId = assetComponentReverse.RecId;
            assetComponentOrigin.update(NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the asset transaction.
    /// </summary>
    protected void updateAssetTrans()
    {
        AssetComponent_JP           assetComponentOrigin;
        AssetComponent_JP           assetComponentReverse;
        TransactionReversal_Asset   transactionReversal_Asset = transactionReversal as TransactionReversal_Asset;

        select firstOnly RecId, StornoRecId, AssetTrans from assetComponentOrigin
            where assetComponentOrigin.AssetTrans == assetTrans.RecId;

        select firstOnly RecId, AssetTrans from assetComponentReverse
            where assetComponentReverse.RecId == assetComponentOrigin.StornoRecId;

        TransactionReversalTrans::createTransaction(tableNum(AssetTrans),
                                                assetComponentOrigin.AssetTrans,
                                                transactionReversal.parmReversalTraceNum(),
                                                true,
                                                false,
                                                true);

        TransactionReversalTrans::createTransaction(tableNum(AssetTrans),
                                                assetComponentReverse.AssetTrans,
                                                transactionReversal.parmReversalTraceNum(),
                                                false,
                                                true,
                                                true);
        transactionReversal_Asset.updateAssetBookOrigReversal(
            AssetTrans::find(assetComponentReverse.AssetTrans),
            AssetTrans::find(assetComponentOrigin.AssetTrans),
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the validation.
    /// </summary>
    /// <returns>
    /// True if it passes the validation; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        AssetComponent_JP   assetComponent;
        boolean             result = true;
        select firstonly ItemId, RecId from assetComponent
            where   assetComponent.AssetTrans == assetTrans.RecId
                &&  (assetComponent.DisassembledQty             != 0
                    ||  assetComponent.DisassembledQtyUnposted  != 0);
        if (assetComponent.RecId)
        {
            result = checkFailed(strFmt("@SYP4880005", assetComponent.ItemId));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the reversal.
    /// </summary>
    /// <param name="_assetTransRecId">
    /// The asset transaction record id.
    /// </param>
    /// <param name="_transactionReversal">
    /// The transaction reversal instance.
    /// </param>
    /// <param name="_isAssembling">
    /// Assembling or disassembling.
    /// </param>
    /// <returns>
    /// The reversal.
    /// </returns>
    public static AssetComponentReversal_JP construct(RefRecId _assetTransRecId, TransactionReversal_Asset _transactionReversal, boolean _isAssembling)
    {
        AssetComponentReversal_JP assetComponentReversal;

        if (_isAssembling)
        {
            assetComponentReversal = new AssetComponentReversal_JP();
        }
        else
        {
            assetComponentReversal = new AssetComponentReversalDisassemble_JP();
        }
        assetComponentReversal.parmAssetTransRecId(_assetTransRecId);
        assetComponentReversal.parmTransactionReversal(_transactionReversal);
        assetComponentReversal.initialize();

        return assetComponentReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssetTransRelatedToAssembling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the asset transaction is related to assembling.
    /// </summary>
    /// <param name="_assetTransRecId">
    /// Asset transaction record id.
    /// </param>
    /// <returns>
    /// True if it is related to assembling; otherwise, false.
    /// </returns>
    public static boolean isAssetTransRelatedToAssembling(RefRecId _assetTransRecId)
    {
        AssetComponent_JP   assetComponent;

        if (AssetComponent_JP::isAssemblingEnabled())
        {
            select firstOnly RecId from assetComponent
                where   assetComponent.AssetTrans == _assetTransRecId
                    &&  !assetComponent.StornoRecId;
        }

        return assetComponent.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes reversal.
    /// </summary>
    /// <param name="_assetTransRecId">
    /// The asset transaction record id.
    /// </param>
    /// <param name="_transactionReversal">
    /// The transaction reversal.
    /// </param>
    public static void reverseTransaction(RefRecId _assetTransRecId, TransactionReversal_Asset _transactionReversal)
    {
        AssetComponent_JP           assetComponent;
        AssetComponentReversal_JP   assetComponentReversal;

        if (AssetComponent_JP::isAssemblingEnabled())
        {
            select firstOnly RecId, Assembling from assetComponent
                where assetComponent.AssetTrans == _assetTransRecId;
            if (assetComponent.RecId)
            {
                assetComponentReversal = AssetComponentReversal_JP::construct(_assetTransRecId, _transactionReversal, assetComponent.Assembling);
                assetComponentReversal.doReverseTransaction();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>