<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalances2Key</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerBalances2Key</c> class generates ledger allocation lines.
/// </summary>
class LedgerBalances2Key extends RunBaseBatch implements BatchRetryable
{
    QueryRun            queryRun;

    TransDate           baseDate;
    NoYes               period;
    NoYes               dimensions;

    DialogField         dialogPeriod;
    DialogField         dialogDimension;
    DialogField         dialogBaseDate;

    LedgerAllocateKeyId key;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        key,
        period,
        dimensions,
        baseDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always return true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase("@GeneralLedger:AllocateKeyLinesCaption", this);

        dialogPeriod    = dialog.addFieldValue(enumStr(NoYes), period, "@SYS40", "@SYS25885");
        dialogDimension = dialog.addFieldValue(enumStr(NoYes), dimensions, "@SYS14926", "@SYS25886");
        dialogBaseDate  = dialog.addFieldValue(extendedTypeStr(TransDate), baseDate, "@SYS7402", "@SYS25884");

        dialog.addMenuItemButton(MenuItemType::Display, menuItemDisplayStr(RunBaseQueryDialog), DialogMenuItemGroup::BottomGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        period          = dialogPeriod.value();
        dimensions      = dialogDimension.value();
        baseDate        = dialogBaseDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerBalances2Key</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerBalances2Key</c> object.</returns>
    public static LedgerBalances2Key construct()
    {
        return new LedgerBalances2Key();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        Query query = new Query(querystr(GeneralJournalSummary));
        query.title("@GeneralLedger:AllocateKeyLinesCaption");

        GeneralJournalEntry::addSecureRangeForLedger(query.dataSourceTable(tableNum(GeneralJournalEntry)));

        QueryBuildDataSource mainAcctDS = query.dataSourceTable(tableNum(MainAccount));
        if (!mainAcctDS)
        {
            QueryBuildDataSource gjaeDS = query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
            mainAcctDS = gjaeDS.addDataSource(tableNum(MainAccount));
            mainAcctDS.relations(false);
            mainAcctDS.joinMode(JoinMode::ExistsJoin);
            mainAcctDS.addLink(fieldNum(GeneralJournalAccountEntry, MainAccount), fieldNum(MainAccount, RecId));
        }

        // Add ranges for the user.
        mainAcctDS.addRange(fieldNum(MainAccount, MainAccountId));

        QueryBuildDataSource fiscalPeriodDS = query.dataSourceTable(tableNum(FiscalCalendarPeriod));
        fiscalPeriodDS.addRange(fieldNum(FiscalCalendarPeriod, StartDate));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKey</Name>
				<Source><![CDATA[
    LedgerAllocateKeyId parmKey(LedgerAllocateKeyId _ledgerAllocateKeyId = key)
    {
        key = _ledgerAllocateKeyId;
        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerAllocateTrans ledgerAllocateTrans;
        DimensionDefault defaultDimension;
        TransDate accountingDate;

        if (dimensions)
        {
            QueryBuildDataSource gjaeDS = queryRun.query().dataSourceTable(tableNum(GeneralJournalAccountEntry));
            gjaeDS.addGroupByField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        }

        if (period)
        {
            QueryBuildDataSource gjeDS = queryRun.query().dataSourceTable(tableNum(GeneralJournalEntry));
            gjeDS.addGroupByField(fieldNum(GeneralJournalEntry, AccountingDate));
        }

        TmpAccountSum tmpAccountSum;
        AmountMST totalAmount;

        while (queryRun.next())
        {
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;

            totalAmount += generalJournalAccountEntry.AccountingCurrencyAmount;

            if (period)
            {
                accountingDate = generalJournalEntry.AccountingDate;
            }
            else
            {
                accountingDate = dateNull();
            }

            if (dimensions)
            {
                defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(generalJournalAccountEntry.LedgerDimension);
            }
            else
            {
                defaultDimension = 0;
            }

            select firstonly forupdate tmpAccountSum
                where tmpAccountSum.sortDate == accountingDate
                    && tmpAccountSum.DefaultDimension == defaultDimension;

            tmpAccountSum.balance01 += generalJournalAccountEntry.AccountingCurrencyAmount;

            if (tmpAccountSum)
            {
                tmpAccountSum.update();
            }
            else
            {
                tmpAccountSum.SortDate = accountingDate;
                tmpAccountSum.DefaultDimension = defaultDimension;
                tmpAccountSum.insert();
            }
        }

        if (! totalAmount)
        {
            return;
        }

        ttsbegin;

        delete_from ledgerAllocateTrans
            where ledgerAllocateTrans.Key == key;

        ledgerAllocateTrans.clear();
        ledgerAllocateTrans.Key = key;
        ledgerAllocateTrans.LineNum = 1;

        while select tmpAccountSum
            order by sortDate
        {
            if (tmpAccountSum.Balance01)
            {
                if (period)
                {
                    accountingDate = tmpAccountSum.SortDate;
                    ledgerAllocateTrans.Freq = accountingDate - baseDate;
                    ledgerAllocateTrans.FreqCode = PeriodUnit::Day;
                }

                if (dimensions)
                {
                    ledgerAllocateTrans.DefaultDimension = tmpAccountSum.DefaultDimension;
                }

                ledgerAllocateTrans.PctProportion = tmpAccountSum.Balance01 / totalAmount * 100;
                ledgerAllocateTrans.insert();

                ledgerAllocateTrans.LineNum += 1;
            }

            tmpAccountSum.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer          version = conpeek(_packedClass, 1);
        container        packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args   args)
    {
        LedgerBalances2Key ledgerBalances2Key;

        switch (args.dataset())
        {
            case tablenum(LedgerAllocateKey):
                ledgerBalances2Key = LedgerBalances2Key::newLedgerAllocateKey(args.record());
                break;

            default:
                throw error("@SYS18626");
        }

        if (ledgerBalances2Key.prompt())
        {
            ledgerBalances2Key.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerAllocateKey</Name>
				<Source><![CDATA[
    static LedgerBalances2Key newLedgerAllocateKey(LedgerAllocateKey _ledgerAllocateKey)
    {
        LedgerBalances2Key ledgerBalances2Key;

        ledgerBalances2Key = new LedgerBalances2Key();

        ledgerBalances2Key.getLast();
        ledgerBalances2Key.parmKey(_ledgerAllocateKey.key);

        return ledgerBalances2Key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>