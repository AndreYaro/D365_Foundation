<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAgingDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventAgingDP</c> class provides data for the <c>InventAgingDP</c>
/// SQL Server Reporting Services (SSRS) report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventAging)),
    SRSReportParameterAttribute(classStr(InventAgingContract))
]
public class InventAgingDP extends SrsReportDataProviderPreProcess
{
    InventAgingReportLines              inventAgingReportLinesDetail, inventAgingResportLinesSelected;
    InventAgingCmdAggregateCost         inventAgingCmdAggregateCost;
    InventAgingCmdMapQuery              inventAgingCmdMapQueryAsOf;
    boolean                             cannotCalculateAsOfQtyWithAsOfQuery;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>commandsToExecuteForFetchedAsOfQtyRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventAgingCmdList</c> class with a list of commands to
    /// execute for each fetched row in the as of qty query.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> that fetched the as of qty.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventAgingCmdList</c> class with a list of commands to
    /// execute for each fetched row in the as of qty query.
    /// </returns>
    private InventAgingCmdList commandsToExecuteForFetchedAsOfQtyRow(QueryRun _queryRun)
    {
        InventAgingCmdMapQuery inventAgingCmdMapQuery = InventAgingCmdMapQuery::newFromQueryRun(_queryRun);
        InventAgingCmdAggregateAsOfQty inventAgingCmdAggregateAsOfQty = InventAgingCmdAggregateAsOfQty::newFromParameters(inventAgingCmdMapQuery, inventAgingReportLinesDetail);

        return InventAgingCmdList::construct().add(inventAgingCmdMapQuery)
                                              .add(inventAgingCmdAggregateAsOfQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commandsToExecuteForFetchedAsOfRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventAgingCmdList</c> class with a list of commands to
    /// execute for each fetched row in the as of qty and amount query.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> that fetched the as of qty.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventAgingCmdList</c> class with a list of commands to
    /// execute for each fetched row in the as of qty and amount query.
    /// </returns>
    private InventAgingCmdList commandsToExecuteForFetchedAsOfRow(QueryRun _queryRun)
    {
        InventAgingCmdList list = InventAgingCmdList::construct();

        inventAgingCmdMapQueryAsOf = InventAgingCmdMapQuery::newFromQueryRun(_queryRun);
        list.add(inventAgingCmdMapQueryAsOf);

        inventAgingCmdAggregateCost = InventAgingCmdAggregateCost::newFromParameters(inventAgingCmdMapQueryAsOf);
        list.add(inventAgingCmdAggregateCost);

        if (!cannotCalculateAsOfQtyWithAsOfQuery)
        {
            list.add(InventAgingCmdAggregateAsOfQty::newFromParameters(inventAgingCmdMapQueryAsOf, inventAgingReportLinesDetail));
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commandsToExecuteForFetchedReceiptRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventAgingCmdList</c> class with a list of commands to
    /// execute for each fetched row in the receipt query.
    /// </summary>
    /// <param name="_inventAgingCmdMapQuery">
    /// The <c>InventAgingCmdMapQuery</c> class that maps the recipt query.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventAgingCmdList</c> class with a list of commands to
    /// execute for each fetched row in the receipt query.
    /// </returns>
    private InventAgingCmdList commandsToExecuteForFetchedReceiptRow(InventAgingCmdMapQuery _inventAgingCmdMapQuery)
    {
        InventAgingCmdAggregateReceiptQty inventAgingCmdAggregateReceiptQty = InventAgingCmdAggregateReceiptQty::newFromParameters(_inventAgingCmdMapQuery,
                                                                                                                                   this.parmDataContract(),
                                                                                                                                   inventAgingReportLinesDetail);

        return InventAgingCmdList::construct().add(_inventAgingCmdMapQuery)
                                              .add(inventAgingCmdAggregateReceiptQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>commandsToExecuteOnDetailLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventAgingCmdList</c> class with a list of commands to execute
    /// on the detailed lines.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventAgingCmdList</c> class with a list of commands to execute
    /// on the detailed lines.
    /// </returns>
    private InventAgingCmdList commandsToExecuteOnDetailLines()
    {
        InventAgingCmdCalcAgingQty inventAgingCmdCalcAgingQty = InventAgingCmdCalcAgingQty::newFromInventAgingReportLines(inventAgingReportLinesDetail);
        InventAgingCmdCalcAmounts inventAgingCmdCalcAmounts = InventAgingCmdCalcAmounts::newFromParameters(inventAgingReportLinesDetail,
                                                                                                           inventAgingCmdAggregateCost);
        InventAgingCmdAggregateSelected inventAgingCmdAggregateSelected = InventAgingCmdAggregateSelected::newFromParameters(this.parmDataContract(),
                                                                                                                             inventAgingReportLinesDetail,
                                                                                                                             inventAgingResportLinesSelected);

        return InventAgingCmdList::construct().add(inventAgingCmdCalcAgingQty)
                                              .add(inventAgingCmdCalcAmounts)
                                              .add(inventAgingCmdAggregateSelected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isViewNonMandatoryFinancialDimension</Name>
				<Source><![CDATA[
    private boolean isViewNonMandatoryFinancialDimension()
    {
        InventAgingContract contract = this.parmDataContract() as InventAgingContract;
        return  contract.parmViewConfigId()
                || contract.parmViewDimension1()
                || contract.parmViewDimension2()
                || contract.parmViewDimension3()
                || contract.parmViewDimension4()
                || contract.parmViewDimension5()
                || contract.parmViewDimension6()
                || contract.parmViewDimension7()
                || contract.parmViewDimension8()
                || contract.parmViewDimension9()
                || contract.parmViewDimension10()
                || contract.parmViewInventBatchId()
                || contract.parmViewInventColorId()
                || contract.parmViewInventGTDId_RU()
                || contract.parmViewInventLocationId()
                || contract.parmViewInventOwnerId_RU()
                || contract.parmViewInventProfileId_RU()
                || contract.parmViewInventSerialId()
                || contract.parmViewInventSizeId()
                || contract.parmViewInventStatusId()
                || contract.parmViewInventStyleId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryProcessorForAsOf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance <c>InventAgingQueryProcessor</c> class configured with an as of query on qty and amount and
    /// a list of commands to execute for each row.
    /// </summary>
    /// <returns>
    /// An instance <c>InventAgingQueryProcessor</c> class.
    /// </returns>
    private InventAgingQueryProcessor createQueryProcessorForAsOf()
    {
        InventAgingQueryBuilder inventAgingQueryBuilder = InventAgingQueryBuilder::newAsOfQtyAndAmountQuery(this.parmDataContract());
        Query query = inventAgingQueryBuilder.build();

        boolean isWMSorWHSEnabled = isConfigurationkeyEnabled(configurationKeyNum(WMSBasic))
                                    || isConfigurationkeyEnabled(configurationKeyNum(WHSAndTMS));
        cannotCalculateAsOfQtyWithAsOfQuery = !inventAgingQueryBuilder.canCalculateAsOfQty() || (isWMSorWHSEnabled && this.isViewNonMandatoryFinancialDimension());


        QueryRun queryRun = new QueryRun(query);
        InventAgingQueryProcessor inventAgingQueryProcessor = InventAgingQueryProcessor::newFromParameters(queryRun,
                                                                                                           this.commandsToExecuteForFetchedAsOfRow(queryRun));
        inventAgingQueryProcessor.parmSetDelimiter(InventAgingSetDelimiterAsOf::construct(queryRun));

        return inventAgingQueryProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryProcessorForAsOfQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance <c>InventAgingQueryProcessor</c> class configured with an as of query on qty and
    /// a list of commands to execute for each row.
    /// </summary>
    /// <returns>
    /// An instance <c>InventAgingQueryProcessor</c> class.
    /// </returns>
    private InventAgingQueryProcessor createQueryProcessorForAsOfQty()
    {
        Query query = InventAgingQueryBuilder::newAsOfQtyQuery(this.parmDataContract()).build();
        QueryRun queryRun = new QueryRun(query);
        InventAgingQueryProcessor inventAgingQueryProcessor = InventAgingQueryProcessor::newFromParameters(queryRun,
                                                                                                           this.commandsToExecuteForFetchedAsOfQtyRow(queryRun));
        inventAgingQueryProcessor.parmSetDelimiter(InventAgingSetDelimiterReceipt::construct(queryRun, inventAgingCmdMapQueryAsOf));

        return inventAgingQueryProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryProcessorForReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventAgingCmdList</c> class configured with a <c>InventAgingQueryProcessor</c> to process
    /// receipt for each period.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventAgingCmdList</c> class configured with a <c>InventAgingQueryProcessor</c> to process
    /// receipt for each period.
    /// </returns>
    private InventAgingCmdList createQueryProcessorForReceipt()
    {
        InventAgingCmdList  list = InventAgingCmdList::construct();

        list.add(this.createQueryProcessorForReceiptPeriod(this.parmDataContract().getPeriodOne(), this.parmDataContract().parmAsOnDate()));
        list.add(this.createQueryProcessorForReceiptPeriod(this.parmDataContract().getPeriodTwo(), this.parmDataContract().getPeriodOne()-1));
        list.add(this.createQueryProcessorForReceiptPeriod(this.parmDataContract().getPeriodThree(), this.parmDataContract().getPeriodTwo()-1));
        list.add(this.createQueryProcessorForReceiptPeriod(this.parmDataContract().getPeriodFour(), this.parmDataContract().getPeriodThree()-1));

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryProcessorForReceiptPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance <c>InventAgingQueryProcessor</c> class configured with a reciept qty query and
    /// a list of commands to execute for each row.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date of the period to query.
    /// </param>
    /// <param name="_toDate">
    /// The to date of the period to query.
    /// </param>
    /// <returns>
    /// An instance <c>InventAgingQueryProcessor</c> class.
    /// </returns>
    private InventAgingQueryProcessor createQueryProcessorForReceiptPeriod(TransDate _fromDate, TransDate _toDate)
    {
        Query query = InventAgingQueryBuilder::newReceiptQtyQuery(this.parmDataContract(), _fromDate, _toDate).build();
        QueryRun queryRun = new QueryRun(query);

        var inventAgingCmdMapQueryReciept = InventAgingCmdMapQuery::newFromQueryRun(queryRun);
        InventAgingQueryProcessor inventAgingQueryProcessorReceipt = InventAgingQueryProcessor::newFromParameters(queryRun,
                                                                                                                  this.commandsToExecuteForFetchedReceiptRow(inventAgingCmdMapQueryReciept));

        inventAgingQueryProcessorReceipt.parmSetDelimiter(InventAgingSetDelimiterReceipt::construct(queryRun, inventAgingCmdMapQueryAsOf));
        inventAgingQueryProcessorReceipt.parmSkipRecord(InventAgingSkipRecordReceipt::construct(inventAgingCmdMapQueryAsOf, inventAgingCmdMapQueryReciept));

        return inventAgingQueryProcessorReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getinventoryAgingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>InventAgingTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventAgingTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventAgingTmp))
    ]
    public InventAgingTmp getinventoryAgingTmp()
    {
        InventAgingTmp        inventoryAgingTransTmp;

        inventoryAgingTransTmp.setConnection(this.parmUserConnection());

        select inventoryAgingTransTmp;
        return inventoryAgingTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SQL Server Reporting Services (SSRS) report.
    /// </summary>
    /// <remarks>
    /// This method will be called by SSRS at run time.The method will compute the data and populate the
    /// data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        InventAgingContract contract = this.parmDataContract();

        contract.parmQuery(this.parmQuery());

        InventAgingDP::newFromContract(contract).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the inventory aging report.
    /// </summary>
    protected void run()
    {
        InventAgingQueryProcessor           queryProcessorAsOf, queryProcessorAsOfQty;
        CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventAgingDP));
        
        using (var activityContext = instrumentationLogger.agingDPActivities().run(this.parmCreatedTransactionId()))
        {
            ttsbegin;
            inventAgingReportLinesDetail = InventAgingReportLines::construct();
            inventAgingResportLinesSelected = InventAgingReportLines::construct();

            queryProcessorAsOf = this.createQueryProcessorForAsOf();
            if (cannotCalculateAsOfQtyWithAsOfQuery)
            {
                queryProcessorAsOfQty = this.createQueryProcessorForAsOfQty();
            }
            InventAgingICommand queryProcessorReceipt = this.createQueryProcessorForReceipt();
            InventAgingCmdList commandsToExecuteOnDetailLines = this.commandsToExecuteOnDetailLines();

            do
            {
                queryProcessorAsOf.execute();
                if (queryProcessorAsOfQty)
                {
                    queryProcessorAsOfQty.execute();
                }
                queryProcessorReceipt.execute();

                inventAgingReportLinesDetail.executeCommand(commandsToExecuteOnDetailLines);

                inventAgingReportLinesDetail.flush();
                inventAgingCmdAggregateCost.flush();

                if (this.parmDataContract().parmViewItem())
                {
                    inventAgingResportLinesSelected.insertDatabase();
                }
            }
            while (queryProcessorAsOf.isSetDelimited());

            if (!this.parmDataContract().parmViewItem())
            {
                inventAgingResportLinesSelected.insertDatabase();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventAgingDP construct()
    {
        return new InventAgingDP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventAgingDP</c> class.
    /// </summary>
    /// <param name="_contract">
    /// An instance of the <c>InventAgingContract</c> class that specifies how the report should be build.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventAgingDP</c> class.
    /// </returns>
    public static InventAgingDP newFromContract(
        InventAgingContract              _contract)
    {
        InventAgingDP    inventAgingDP = InventAgingDP::construct();

        inventAgingDP.parmDataContract(_contract);
        inventAgingDP.parmQuery(_contract.parmQuery());

        return inventAgingDP;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>