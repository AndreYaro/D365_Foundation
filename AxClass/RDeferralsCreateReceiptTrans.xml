<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsCreateReceiptTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[

class rDeferralsCreateReceiptTrans extends RunBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertStatus</Name>
				<Source><![CDATA[
    protected void revertStatus(RDeferralsBook  _deferralsBook,  RDeferralsStatus _status)
    {
        RDeferralsBook  deferralsBook;

        deferralsBook.skipDataMethods(true);
        update_recordset deferralsBook
            setting Status = _status
            where deferralsBook.DeferralsBookId == _deferralsBook.DeferralsBookId &&
                  deferralsBook.DeferralsId     == _deferralsBook.DeferralsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        RDeferralsTable     deferralsTable;
        RDeferralsBook      deferralsBook;
        RDeferralsTrans     deferralsTrans;
        RDeferralsStatus    status;

        LedgerVoucher ledgerVoucher(RDeferralsTable _deferralsTable)
        {
            RTax25StdChannel_Deferral   channel;
            channel = RTax25StdChannel_Deferral::construct();

            return channel.deferralsLedgerVoucher(_deferralsTable);
        }

        ttsbegin;
        while select deferralsBook
            where deferralsBook.Status != RDeferralsStatus::Scheduled
             notexists join deferralsTrans
                where deferralsTrans.DeferralsBookId    == deferralsBook.DeferralsBookId &&
                      deferralsTrans.DeferralsId        == deferralsBook.DeferralsId     &&
                      deferralsTrans.TransType          == RDeferralsTransType::Receipt

        {
            status = deferralsBook.Status;
            deferralsTable = RDeferralsTable::find(deferralsBook.DeferralsId);
            RDeferralsTrans::createTrans(deferralsBook, ledgerVoucher(deferralsTable));
            this.revertStatus(deferralsBook, status);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static RDeferralsCreateReceiptTrans construct()
    {
        return new RDeferralsCreateReceiptTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS115954";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RDeferralsCreateReceiptTrans    createTrans = RDeferralsCreateReceiptTrans::construct();

        if (createTrans.prompt())
            createTrans.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>