<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransPartialUnrealizedTaxSettledCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Calculates the partial unrealized VAT settled.
/// </summary>
class TaxTransPartialUnrealizedTaxSettledCalculator
{
    internal boolean enableWHTOnCharges = LedgerParameters::find().EnableWHTOnCharges == NoYes::Yes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create a new instance of the class.
    /// </summary>
    /// <param name = "_isTaxWithholdUK">Is this a tax withhold UK scenario?</param>
    /// <returns>A new instance of the class.</returns>
    public static TaxTransPartialUnrealizedTaxSettledCalculator construct(boolean _isTaxWithholdUK = false)
    {
        #ISOCountryRegionCodes

        if (_isTaxWithholdUK)
        {
            return TaxTransPartialUnrealizedTaxSettledCalculator_W::construct();
        }

        if (TaxThaiGovCertificationFeatureChecker::isTaxWithholdEnabled())
        {
            return TaxTransPartialUnrealizedTaxSettledCalculator_W::construct();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            return TaxTransPartialUnrealizedTaxSettledCalculator_W::construct();
        }

        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled())
        {
            return TaxTransPartialUnrealizedTaxSettledCalculator_W::construct();
        }

        return new TaxTransPartialUnrealizedTaxSettledCalculator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartialUnrealisedTaxSettled</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get the partial invoice amount settled calculation for the unrealized VAT.
    /// </summary>
    /// <param name = "_inventTransId">The inventory transaction id.</param>
    /// <param name = "_paymentAmount">The payment amount of the unrealized tax.</param>
    /// <param name = "_isCustomer">Is the payment for a customer transaction?</param>
    /// <param name = "_finalPayment">Is this the final payment?</param>
    /// <param name = "_inclTax">Is this an included tax scenario?</param>
    /// <param name = "_voucher">The voucher for the transaction.</param>
    /// <param name = "_sourceDocumentLineRecId">The source document line rec id for the parent line of the tax transaction.</param>
    /// <param name = "_invoiceLineRecId">The invoice line rec id for the tax transaction.</param>
    /// <param name = "_isTaxWithholdUK">Is this a tax withhold UK scenario?</param>
    /// <returns>The partial unrealized tax amount settled.</returns>
    public AmountCur getPartialUnrealisedTaxSettled(InventTransId  _inventTransId,
                                                    AmountCur      _paymentAmount,
                                                    boolean        _isCustomer,
                                                    boolean        _finalPayment,
                                                    boolean        _inclTax,
                                                    Voucher        _voucher,
                                                    RefRecId       _sourceDocumentLineRecId = 0,
                                                    RefRecId       _invoiceLineRecId = 0,
                                                    boolean        _isTaxWithholdUK = false)
    {
        TaxTrans    taxTrans;
        AmountCur   taxAmountCurLoc;
        PurchLine   purchLineLoc;
        SalesLine   salesLineLoc;
        LineAmount  lineAmount;
        VendTrans   vendTransLoc;
        CustTrans   custTransLoc;
        AmountCur   costAmountPosted;
        CustInvoiceTrans    custInvoiceTransLoc;
        TaxTrans            taxTransSum;
        SourceDocumentLine  sourceDocumentLine;

        [taxTrans, sourceDocumentLine] = this.getTaxTransAndSourceDocumentLine(_inventTransId, 
            _sourceDocumentLineRecId,
            _invoiceLineRecId,
            _isTaxWithholdUK);

        if (taxTrans)
        {
            if (_isCustomer)
            {
                [custInvoiceTransLoc, costAmountPosted] = this.getCustInvoiceTransAndCostAmountPosted(taxTrans, _inclTax, sourceDocumentLine);

                select firstonly AmountCur, Voucher, TransDate from custTransLoc
                    where custTransLoc.Voucher == taxTrans.Voucher;

                [salesLineLoc, lineAmount] = this.getSalesLineAndLineAmount(taxTrans, costAmountPosted, custInvoiceTransLoc);

                if (salesLineLoc.RecId && salesLineLoc.InventTransId)
                {
                    while select Source, TaxValue from taxTrans
                        where taxTrans.Voucher == custTransLoc.Voucher
                            && taxTrans.TransDate == custTransLoc.TransDate
                            && taxTrans.InventTransId == salesLineLoc.InventTransId
                    {
                        taxAmountCurLoc += this.getTaxAmountCurForCustomer(custTransLoc, salesLineLoc, taxTrans, _finalPayment, _inclTax, lineAmount, _paymentAmount);
                    }
                }
                else
                {
                    taxAmountCurLoc = this.getTaxAmountCurForCustomer(custTransLoc, salesLineLoc, taxTrans, _finalPayment, _inclTax, lineAmount, _paymentAmount);
                }
            }
            else
            {
                vendTransLoc = this.findVendTransByVoucher(taxTrans.Voucher);
                purchLineLoc = PurchLine::findInventTransId(taxTrans.InventTransId);

                taxTransSum = this.getTaxTransSum(_sourceDocumentLineRecId, _inventTransId, _invoiceLineRecId, _isTaxWithholdUK);

                taxAmountCurLoc = this.getTaxAmountCurForVendor(purchLineLoc, vendTransLoc, _finalPayment, _paymentAmount, taxTransSum);
            }
        }

        // If TaxTrans is not found the taxAmountCurLoc variable is never set and the value returned is 0
        return  taxAmountCurLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendTransByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>VendTrans</c> by specific voucher.
    /// Add logic to handle the scenario with Invoice Register, that the voucher can be modified.
    /// </summary>
    /// <param name = "_voucher">Specific voucher.</param>
    /// <returns><c>VendTrans</c> record found.</returns>
    private VendTrans findVendTransByVoucher(Voucher _voucher)
    {
        VendTrans vendTrans;

        select firstonly AmountCur from vendTrans
            where vendTrans.Voucher == _voucher;

        if (!vendTrans)
        {
            LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

            select firstonly ledgerJournalVoucherChanged
                where ledgerJournalVoucherChanged.ToVoucher == _voucher;

            if (ledgerJournalVoucherChanged)
            {
                select firstonly AmountCur from vendTrans
                    where vendTrans.Voucher == ledgerJournalVoucherChanged.FromVoucher;
            }
        }

        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransAndSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Find the tax transaction and if present its related source document line record.
    /// </summary>
    /// <param name = "_inventTransId">The inventory transaction id identifying the tax transaction.</param>
    /// <param name = "_sourceDocumentLineRecId">The parent source document line rec id for the tax transaction.</param>
    /// <param name = "_invoiceLineRecId">The invoice line record id. This used by the extension classes.</param>
    /// <param name = "_isTaxWithholdUK">Is this a tax withhold UK scenario? This is used by the extension classes.</param>
    /// <returns>The found tax transaction and source document line record.</returns>
    protected container getTaxTransAndSourceDocumentLine(InventTransId  _inventTransId,
                                                         RefRecId       _sourceDocumentLineRecId = 0,
                                                         RefRecId       _invoiceLineRecId = 0,
                                                         boolean        _isTaxWithholdUK = false)
    {
        TaxTrans            taxTrans;
        SourceDocumentLine  sourceDocumentLine;

        if (_sourceDocumentLineRecId)
        {
            select firstonly taxTrans
                where (!_inventTransId || taxTrans.InventTransId == _inventTransId)
                join sourceDocumentLine
                where taxTrans.SourceDocumentLine == sourceDocumentLine.RecId
                    && sourceDocumentLine.ParentSourceDocumentLine == _sourceDocumentLineRecId;
        }
        if (!taxTrans && _inventTransId)
        {
            select firstonly taxTrans
                where taxTrans.InventTransId == _inventTransId
                    && (!enableWHTOnCharges || (taxTrans.SourceTableId != tablenum(MarkupTrans)));
        }

        return [taxTrans, sourceDocumentLine];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceTransAndCostAmountPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get the customer invoice transaction and the cost amount posted.
    /// </summary>
    /// <param name = "_taxTrans">The tax transaction to get the customer invoice transaction and cost amount posted for.</param>
    /// <param name = "_inclTax">Are we in an includes tax scenario? If true return the sum of the line and tax amount.</param>
    /// <param name = "_sourceDocumentLine">The source document line record related to the tax transaction. This is used by the extension classes.</param>
    /// <returns>The customer invoice transaction record and the cost amount posted from that record.</returns>
    protected container getCustInvoiceTransAndCostAmountPosted(TaxTrans _taxTrans, boolean _inclTax, SourceDocumentLine _sourceDocumentLine)
    {
        CustInvoiceJour custInvoiceJourLoc;
        CustInvoiceTrans custInvoiceTransLoc;
        AmountCur costAmountPosted;

        if (_taxTrans.Source == TaxModuleType::Sales)
        {
            custInvoiceJourLoc = CustInvoiceJour::findFromTaxTrans(_taxTrans.Voucher, _taxTrans.TransDate);

            custInvoiceTransLoc = CustInvoiceTrans::findCustInvoiceTrans(custInvoiceJourLoc.SalesId,
                                                        custInvoiceJourLoc.InvoiceId,
                                                        custInvoiceJourLoc.InvoiceDate,
                                                        custInvoiceJourLoc.NumberSequenceGroup,
                                                        _taxTrans.InventTransId);
        }

        if (_taxTrans.Source == TaxModuleType::FreeTxtInvoice
            && _taxTrans.SourceTableId == tableNum(CustInvoiceTrans))
        {
            custInvoiceTransLoc = CustInvoiceTrans::findRecId(_taxTrans.SourceRecId);
        }

        if (custInvoiceTransLoc)
        {
            if (_inclTax)
            {
                costAmountPosted = this.getCostAmountPostedIncludingTax(custInvoiceTransLoc);
            }
            else
            {
                costAmountPosted = custInvoiceTransLoc.LineAmount;
            }
        }

        return [custInvoiceTransLoc, costAmountPosted];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostAmountPostedIncludingTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get the cost amount posted when in the includes tax scenario.
    /// </summary>
    /// <param name = "_custInvoiceTransLoc">The customer invoice transaction</param>
    /// <returns></returns>
    protected AmountCur getCostAmountPostedIncludingTax(CustInvoiceTrans _custInvoiceTransLoc)
    {
        AmountCur costAmountPostedIncludingTax;

        costAmountPostedIncludingTax = _custInvoiceTransLoc.LineAmount + _custInvoiceTransLoc.TaxAmount;

        return costAmountPostedIncludingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineAndLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get the sales line record and the line amount for the tax transaction.
    /// </summary>
    /// <param name = "_taxTrans">The tax transaction to find the sales line record and line amount for.</param>
    /// <param name = "_costAmountPosted">The cost amount posted of the transaction.</param>
    /// <param name = "_custInvoiceTransLoc">The customer invoice transaction record.</param>
    /// <returns>The sales line record and the line amount of the tax transaction</returns>
    /// <remarks>The returned sales line may be null but a valid line amount will still be retrieved.</remarks>
    protected container getSalesLineAndLineAmount(TaxTrans _taxTrans, AmountCur _costAmountPosted, CustInvoiceTrans _custInvoiceTransLoc)
    {
        SalesLine   salesLineLoc;
        LineAmount  lineAmount;

        if (_taxTrans.Source == TaxModuleType::FreeTxtInvoice)
        {
            lineAmount = CustInvoiceLine::findBySourceDocumentLine(_custInvoiceTransLoc.SourceDocumentLine).AmountCur;

            if (_costAmountPosted && lineAmount)
            {
                if (_costAmountPosted != lineAmount)
                {
                    lineAmount = _costAmountPosted;
                }
            }
        }
        else
        {
            salesLineLoc = SalesLine::findInventTransId(_taxTrans.InventTransId);
            lineAmount = salesLineLoc.LineAmount;

            if (_costAmountPosted && salesLineLoc.LineAmount)
            {
                if (_costAmountPosted != salesLineLoc.LineAmount)
                {
                    salesLineLoc.LineAmount = _costAmountPosted;
                    lineAmount = _costAmountPosted;
                }
            }
        }

        return [salesLineLoc, lineAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountCurForCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get the tax amount for the customer.
    /// </summary>
    /// <param name = "_custTransLoc">The customer transaction record.</param>
    /// <param name = "_salesLineLoc">The sales line record for the transaction. May be null.</param>
    /// <param name = "_taxTrans">The tax transaction record.</param>
    /// <param name = "_finalPayment">Is this a final payment scenario?</param>
    /// <param name = "_inclTax">Is this a tax included scenario?</param>
    /// <param name = "_lineAmount">The line amount for the customer transaction.</param>
    /// <param name = "_paymentAmount">The payment amount.</param>
    /// <returns>The tax amount for the customer.</returns>
    protected AmountCur getTaxAmountCurForCustomer(CustTrans  _custTransLoc,
                                                   SalesLine  _salesLineLoc,
                                                   TaxTrans   _taxTrans,
                                                   boolean    _finalPayment,
                                                   boolean    _inclTax,
                                                   LineAmount _lineAmount,
                                                   AmountCur  _paymentAmount)
    {
        AmountCur   taxAmountCurLoc;

        if (_custTransLoc.AmountCur
            && (InventTable::find(_salesLineLoc.ItemId).ItemType == ItemType::Service
                || _taxTrans.Source == TaxModuleType::FreeTxtInvoice
                // <GTH>
                || this.doOverrideItemTypeConstraintForCustomer()
                // </GTH>
                )
            )
        {
            if (_finalPayment)
            {
                if (_inclTax)
                {
                    taxAmountCurLoc = (_lineAmount * 100 / (100 + _taxTrans.TaxValue)) *(_taxTrans.TaxValue/100);
                }
                else
                {
                    taxAmountCurLoc =  _lineAmount *(_taxTrans.TaxValue/100);
                }
            }
            else
            {
                if (_inclTax)
                {
                    _paymentAmount          = _paymentAmount * 100 / (100 + _taxTrans.TaxValue);
                    _custTransLoc.AmountCur  = _custTransLoc.AmountCur * 100 / (100 + _taxTrans.TaxValue);
                    _lineAmount              = _lineAmount * 100 / (100 + _taxTrans.TaxValue);
                }

                taxAmountCurLoc = this.calculateTaxAmountCurForCustomerForNonFinalPayment(_paymentAmount, _custTransLoc, _lineAmount, _taxTrans);
            }
        }

        return taxAmountCurLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxAmountCurForCustomerForNonFinalPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculate the tax amount for the customer in a non final payment scenario.
    /// </summary>
    /// <param name = "_paymentAmount">The payment amount.</param>
    /// <param name = "_custTransLoc">The customer transaction record.</param>
    /// <param name = "_lineAmount">The line amount.</param>
    /// <param name = "_taxTrans">The tax transaction record.</param>
    /// <returns>The calculated tax amount.</returns>
    protected AmountCur calculateTaxAmountCurForCustomerForNonFinalPayment(AmountCur    _paymentAmount,
                                                                           CustTrans    _custTransLoc,
                                                                           LineAmount   _lineAmount,
                                                                           TaxTrans     _taxTrans)
    {
        return ((_paymentAmount / abs(_custTransLoc.AmountCur))* _lineAmount)*(_taxTrans.TaxValue/100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOverrideItemTypeConstraintForCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Override provided for use by extension classes to allow for the processing of the customer transaction
    ///  amount to find the tax amount for the customer.
    /// </summary>
    /// <returns>True if overriding the item type restriction for customers; otherwise false.</returns>
    protected boolean doOverrideItemTypeConstraintForCustomer()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get the tax transaction sum for all related tax transactions.
    /// </summary>
    /// <param name = "_sourceDocumentLineRecId">The source document line rec id for the parent record for the tax transaction.</param>
    /// <param name = "_inventTransId">The inventory transaction id. This is used to find related tax transactions.</param>
    /// <param name = "_invoiceLineRecId">The invoice line rec id. This is used by extension classes.</param>
    /// <param name = "_isTaxWithholdUK">Is this a tax withhold UK scenario? This is used by extension classes.</param>
    /// <returns>A tax transaction record that contains the sum of the SourceRegulateAmountCur.</returns>
    /// <remakrs>
    ///  If the source document line rec id is provided then the inventory transaction id is not used when finding the
    ///  sum of the tax transactions.
    /// </remakrs>
    protected TaxTrans getTaxTransSum(SourceDocumentLineRecId _sourceDocumentLineRecId,
                                      InventTransId _inventTransId,
                                      RefRecId _invoiceLineRecId,
                                      boolean _isTaxWithholdUK)
    {
        TaxTrans taxTransSum;
        SourceDocumentLine sourceDocumentLine;

        if (_sourceDocumentLineRecId)
        {
            taxTransSum = this.getTaxTransSumFromSourceDocumentLineRecId(_sourceDocumentLineRecId);
        }
        else
        {
            select sum(SourceRegulateAmountCur) from taxTransSum
                where taxTransSum.InventTransId == _inventTransId
                && (!enableWHTOnCharges || (taxTransSum.SourceTableId != tablenum(MarkupTrans)));
        }

        return taxTransSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransSumFromSourceDocumentLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get the sum of the tax transactions that are related to the same parent source document line record.
    /// </summary>
    /// <param name = "_sourceDocumentLineRecId">
    ///  The source document line record for the parent source document line to the tax transactions.
    /// </param>
    /// <returns>A tax transaction record that contains the sum of the related tax transactions.</returns>
    protected TaxTrans getTaxTransSumFromSourceDocumentLineRecId(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        TaxTrans            taxTransSum;
        SourceDocumentLine  sourceDocumentLine;

        select sum(SourceRegulateAmountCur) from taxTransSum
            where (!enableWHTOnCharges || (taxTransSum.SourceTableId != tablenum(MarkupTrans)))
            exists join sourceDocumentLine
                where taxTransSum.SourceDocumentLine == sourceDocumentLine.RecId
                    && sourceDocumentLine.ParentSourceDocumentLine == _sourceDocumentLineRecId;

        return taxTransSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountCurForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get the tax amount for the vendor.
    /// </summary>
    /// <param name = "_purchLineLoc">The purchase line record.</param>
    /// <param name = "_vendTransLoc">The vendor transaction record.</param>
    /// <param name = "_finalPayment">Is this a final payment scenario?</param>
    /// <param name = "_paymentAmount">The payment amount.</param>
    /// <param name = "_taxTransSum">The tax transaction record that contains the sum of the related tax transactions.</param>
    /// <returns>The tax amount for the vendor.</returns>
    protected AmountCur getTaxAmountCurForVendor(PurchLine _purchLineLoc,
                                                 VendTrans _vendTransLoc,
                                                 boolean   _finalPayment,
                                                 AmountCur _paymentAmount,
                                                 TaxTrans  _taxTransSum)
    {
        #ISOCountryRegionCodes

        AmountCur taxAmountCurLoc;

        if (_vendTransLoc.AmountCur
            && (InventTable::find(_purchLineLoc.ItemId).ItemType == ItemType::Service
                || this.doOverrideItemTypeConstraintForVendor(_purchLineLoc))
            )
        {
            if (_finalPayment)
            {
                taxAmountCurLoc = _taxTransSum.SourceRegulateAmountCur;
            }
            else
            {
                taxAmountCurLoc = this.calculateTaxAmountCurForVendorForNonFinalPayment(_paymentAmount, _vendTransLoc, _taxTransSum);
            }
        }

        return taxAmountCurLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxAmountCurForVendorForNonFinalPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculate the tax amount for the vendor in a non final payment scenario.
    /// </summary>
    /// <param name = "_paymentAmount">The payment amount.</param>
    /// <param name = "_vendTransLoc">The vendor transaction record.</param>
    /// <param name = "_taxTransSum">The tax transaction record that contains the sum of teh related tax transactions.</param>
    /// <returns>The vendor tax amount.</returns>
    protected AmountCur calculateTaxAmountCurForVendorForNonFinalPayment(AmountCur _paymentAmount, VendTrans _vendTransLoc, TaxTrans _taxTransSum)
    {
        return ((_paymentAmount / abs(_vendTransLoc.AmountCur))* _taxTransSum.SourceRegulateAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOverrideItemTypeConstraintForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Override provided for use by extension classes to allow for the processing of the vendor transaction
    ///  amount to find the tax amount for the vendor.
    /// </summary>
    /// <param name = "_purchLineLoc">The purchase line record.</param>
    /// <returns>True if overriding the item type restriction for vendors; otherwise false.</returns>
    protected boolean doOverrideItemTypeConstraintForVendor(PurchLine _purchLineLoc)
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>