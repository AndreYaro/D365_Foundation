<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAssessmentDetailCreatorISS_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates the ISS tax assessment details
/// </summary>
class FBTaxAssessmentDetailCreatorISS_BR extends FBTaxAssessmentDetailCreator_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAllAssessmentDetails</Name>
				<Source><![CDATA[
    public void createAllAssessmentDetails()
    {
        FiscalDocument_BR                       fiscalDocument;
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTrans;
        FBBookingPeriodFiscalDocument_BR        bookingPeriodFiscalDocument;
        FBTaxTrans_BR                           fbTaxTrans;
        FBTaxTrans_BR                           existingFbTaxTrans;

        while select AccountingDate, Voucher, Direction, RecId, DataAreaId, FiscalEstablishment
            from fiscalDocument
            where fiscalDocument.AccountingDate  >= fbTaxAssessment.FromDate
                && fiscalDocument.AccountingDate <= fbTaxAssessment.ToDate
            join fbBookingPeriod_BR
                from bookingPeriodFiscalDocument
                where bookingPeriodFiscalDocument.FBBookingPeriod_BR == fbTaxAssessment.FBBookingPeriod_BR
                    && bookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                    && (bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Regular
                        || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::Complementary
                        || bookingPeriodFiscalDocument.FiscalSituation == FBFiscalDocumentSituation_BR::SpecialLegislation)
            join cfop, RecId
                from fiscalDocumentLine
                where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
            join RecId, RetainedTax, TaxationOrigin, TaxationCode, TaxBaseAmount, TaxBaseAmountExempt, TaxBaseAmountOther, TaxAmount
                from fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type              == TaxType_BR::ISS
            notexists join existingFbTaxTrans
                where existingFbTaxTrans.FiscalDocumentTaxTrans_BR  == fiscalDocumentTaxTrans.RecId
        {
            fbTaxTrans.TaxType                     = TaxType_BR::ISS;
            fbTaxTrans.Classification              = this.getTaxAssessmentClassification(fiscalDocument.Direction, fiscalDocumentTaxTrans.RetainedTax);
            fbTaxTrans.FBTaxAssessment_BR          = fbTaxAssessment.RecId;
            fbTaxTrans.FiscalDocument_BR           = fiscalDocument.RecId;
            fbTaxTrans.FiscalEstablishmentId       = fiscalDocument.FiscalEstablishment;
            fbTaxTrans.FiscalEstablishmentDataArea = fiscalDocument.dataAreaId;
            fbTaxTrans.CFOP                        = fiscalDocumentLine.cfop;

            fbTaxTrans.FiscalDocumentTaxTrans_BR   = fiscalDocumentTaxTrans.RecId;
            fbTaxTrans.TaxationCode                = strFmt('%1%2', enum2int(fiscalDocumentTaxTrans.TaxationOrigin), fiscalDocumentTaxTrans.TaxationCode);
            fbTaxTrans.TaxBaseAmount               = fiscalDocumentTaxTrans.TaxBaseAmount;
            fbTaxTrans.TaxBaseAmountExempt         = fiscalDocumentTaxTrans.TaxBaseAmountExempt;
            fbTaxTrans.TaxBaseAmountOther          = fiscalDocumentTaxTrans.TaxBaseAmountOther;
            fbTaxTrans.TaxAmount                   = fiscalDocumentTaxTrans.TaxAmount;
            fbTaxTrans.WithholdingTax              = fiscalDocumentTaxTrans.RetainedTax;

            fbTaxTrans.Voucher                     = fiscalDocument.Voucher;
            fbTaxTrans.VoucherDataArea             = fiscalDocument.dataAreaId;
            fbTaxTrans.VoucherTransDate            = fiscalDocument.AccountingDate;

            fbTaxTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAssessmentClassification</Name>
				<Source><![CDATA[
    private FBTaxAssessmentClassification_BR getTaxAssessmentClassification(FiscalDocDirection_BR _direction, NoYes _retainedTax)
    {
        FBTaxAssessmentClassification_BR        classification;

        // Classifies as document debit only if tax is to be paid.
        if ((_direction == FiscalDocDirection_BR::Outgoing && _retainedTax == NoYes::No)
            || (_direction == FiscalDocDirection_BR::Incoming && _retainedTax == NoYes::Yes))
        {
            classification = FBTaxAssessmentClassification_BR::DocumentDebit;
        }
        else
        {
            classification = FBTaxAssessmentClassification_BR::Informative;
        }

        return classification;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>