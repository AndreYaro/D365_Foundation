<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_WHSOrderCommittedReservation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_WHSOrderCommittedReservation</c> class is a specialized <c>InventMovement</c> class version that is responsible for handling Order-committed reservations.
/// </summary>
[InventMovementFactoryAttribute(tableStr(WHSOrderCommittedReservation), InventMovSubType::None)]
public class InventMov_WHSOrderCommittedReservation extends InventMovement
{
    private WHSOrderCommittedReservation orderCommittedReservation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the automatic report as finished is allowed.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean  canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the movement must be automatically reserved.
    /// </summary>
    /// <returns>
    /// true if the movement must be automatically reserved; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is often called together with the <c>canBeReserved</c> method, which returns a Boolean
    /// value from the <c>inventType</c> class hierarchy.
    /// </remarks>
    public boolean  mustBeAutoReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReservationFormBeEdited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the reservation can be edited through the form.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean canReservationFormBeEdited()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowManualMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the marking can be edited manually.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean checkAllowManualMarking()
    {
        return checkFailed("@WAX:Error_AttemptToManualMarkingForReservationRequest");
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory transaction can be on all invent locations.
    /// </summary>
    /// <returns>
    /// true if the inventory transaction can be on all invent locations; otherwise, false.
    /// </returns>
    public boolean canBeOnAllInventLocations()
    {
        // Since Order-committed reservation dimensions are copied from the parent originator, no additional validations should be performed.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventSites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the inventory transaction can be on all invent sites.
    /// </summary>
    /// <returns>
    /// true if the inventory transaction can be on all invent sites; otherwise, false.
    /// </returns>
    public boolean canBeOnAllInventSites()
    {
        // Since Order-committed reservation dimensions are copied from the parent originator, no additional validations should be performed.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory dimensions ID value from the Order-committed reservation table.
    /// </summary>
    /// <returns>
    /// The inventory dimensions ID value.
    /// </returns>
    public InventDimId inventDimId()
    {
        return orderCommittedReservation.CommittingOriginInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item ID value from the Order-committed reservation table.
    /// </summary>
    /// <returns>
    /// An item ID.
    /// </returns>
    public ItemId itemId()
    {
        return orderCommittedReservation.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the quarantine control is required.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        WHSOrderCommittedReservation _orderCommittedReservation,
        InventType                   _inventType = InventType::construct(_orderCommittedReservation))
    {
        orderCommittedReservation = _orderCommittedReservation;

        super(_orderCommittedReservation, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining physical quantity.
    /// </summary>
    /// <returns>
    /// The remaining physical quantity.
    /// </returns>
    public InventQty remainPhysical()
    {
        return this.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the Order-committed reservation transaction type.
    /// </summary>
    /// <returns>
    /// The Order-committed reservation transaction type.
    /// </returns>
    public InventTransType transType()
    {
        return InventTransType::WHSOrderCommittedReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && orderCommittedReservation.RecId)
        {
            WHSInventTransOriginOrderCommittedReservation::writeOriginOwnerRelationship(orderCommittedReservation.RecId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the relationship between the inventory transactions originator and the corresponding owner.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (orderCommittedReservation.RecId)
        {
            WHSInventTransOriginOrderCommittedReservation::deleteOwnerRelationship(orderCommittedReservation.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    /// The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    /// The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId && orderCommittedReservation.RecId)
            {
                inventTransOriginId = WHSInventTransOriginOrderCommittedReservation::findInventTransOriginId(orderCommittedReservation.RecId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMovement</c> class based on the original record.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventMovement</c> class based on the original record.
    /// </returns>
    public InventMovement newMovement_Orig()
    {
        InventMovement movement_orig;

        if (orderCommittedReservation.orig().InventTransId)
        {
            movement_orig = InventMovement::construct(orderCommittedReservation.orig(), this.inventMovSubType());
        }

        return movement_orig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction reservation quantity.
    /// </summary>
    /// <returns>
    /// The inventory transaction reservation quantity.
    /// </returns>
    public InventQty reserveQty()
    {
        return this.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(orderCommittedReservation.CreatedDateTime, DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transfer direction of the Order-committed reservation movements.
    /// </summary>
    /// <returns>
    /// The transfer direction of the Order-committed reservation movements.
    /// </returns>
    public InventDirection transferDirection()
    {
        return InventDirection::Issue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Order-committed reservation transaction ID from the <c>WHSOrderCommittedReservation</c> table.
    /// </summary>
    /// <returns>
    /// The Order-committed reservation transaction ID.
    /// </returns>
    public InventTransId transId()
    {
        return orderCommittedReservation.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public InventTransRefId transRefId()
    {
        return this.orderCommittedReservationParentMovement().transRefId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction quantity.
    /// </summary>
    /// <returns>
    /// The inventory transaction quantity.
    /// </returns>
    public InventQty transQty()
    {
        return -orderCommittedReservation.QtyRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty _qtyInvent)
    {
        orderCommittedReservation.QtyRemain = -_qtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationHierarchyLevelStrategyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list containing <c>WHSReservationHierarchyLevelStrategy</c> instances for this movement.
    /// </summary>
    /// <param name="_inventDimReservationCriteria">
    /// An <c>InventDim</c> buffer with the values that are required to be reserved.
    /// </param>
    /// <returns>
    /// A list containing <c>WHSReservationHierarchyLevelStrategy</c> instances for this movement.
    /// </returns>
    public List reservationHierarchyLevelStrategyList(InventDim _inventDimReservationCriteria)
    {
        List reservationStrategyList = new List(Types::Class);

        reservationStrategyList.addEnd(WHSReservationHierarchyLevelStrategy::newFromStrategyType(WHSReservationHierarchyLevelStrategyType::OrderCommitted, this.inventTable(), _inventDimReservationCriteria));

        return reservationStrategyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromOrderCommittedReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventMov_WHSOrderCommittedReservation</c> class that is based on the specified record.
    /// </summary>
    /// <param name="_orderCommittedReservation">
    /// The <c>WHSOrderCommittedReservation</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventMov_WHSOrderCommittedReservation</c> class.
    /// </returns>
    public static InventMov_WHSOrderCommittedReservation newFromOrderCommittedReservation(WHSOrderCommittedReservation _orderCommittedReservation)
    {
        return new InventMov_WHSOrderCommittedReservation(_orderCommittedReservation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderCommittedReservationParentMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>InventMovement</c> object for the parent of the current Order-committed reservation record.
    /// </summary>
    /// <returns>
    /// The <c>InventMovement</c> object.
    /// </returns>
    internal InventMovement orderCommittedReservationParentMovement()
    {
        switch (orderCommittedReservation.CommittingOriginInventTransType)
        {
            case InventTransType::Sales:
                return InventMov_Sales::newFromSalesLine(SalesLine::findInventTransId(orderCommittedReservation.CommittingOriginInventTransId));
        }

        return InventMovement::construct(InventTransOrigin::findByInventTransId(orderCommittedReservation.CommittingOriginInventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventBatchReservationPolicy</Name>
				<Source><![CDATA[
    internal WHSInventBatchReservationPolicy inventBatchReservationPolicy()
    {
        return this.orderCommittedReservationParentMovement().inventBatchReservationPolicy();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>