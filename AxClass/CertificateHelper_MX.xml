<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CertificateHelper_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;

using System.Security.Cryptography;
/// <summary>
/// The <c>CertificateHelper_MX</c> class contains helper methods to access
/// digital certificates that are used by CFDI.
/// </summary>
public static class CertificateHelper_MX
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrentDigitalCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currently selected certificate.
    /// </summary>
    /// <returns>
    /// The currently selected certificate.
    /// </returns>
    public static X509Certificate2 getCurrentDigitalCertificate()
    {
        EInvoiceCFDIParameters_MX eInvoiceCFDIParameters_MX = EInvoiceCFDIParameters_MX::find();
        return CertificateHelper_MX::getDigitalCertificate(SystemParameters::find().UseAdvCertificateStore,
                                                           eInvoiceCFDIParameters_MX.KeyVaultCertificateRef,
                                                           eInvoiceCFDIParameters_MX.CertificateSubject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPACDigitalCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currently PAC selected certificate
    /// </summary>
    /// <returns>The currently selected certificate</returns>
    public static X509Certificate2 getCurrentPACDigitalCertificate()
    {
        EInvoiceCFDIParameters_MX eInvoiceCFDIParameters_MX = EInvoiceCFDIParameters_MX::find();
        return CertificateHelper_MX::getDigitalCertificate(SystemParameters::find().UseAdvCertificateStore,
                                                           eInvoiceCFDIParameters_MX.PACKeyVaultCertificateRef,
                                                           eInvoiceCFDIParameters_MX.CFDIPACCertificate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentCFDIPACPrivateKeyReadable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the private key for the currently selected digital certificate is readable
    /// </summary>
    /// <returns>True if the private key for the currently selected digital certificate is readable</returns>
    public static boolean isCurrentCFDIPACPrivateKeyReadable()
    {
        EInvoiceCFDIParameters_MX eInvoiceCFDIParameters_MX = EInvoiceCFDIParameters_MX::find();
        RSACryptoServiceProvider privatKey = CertificateHelper_MX::getPrivateKey(SystemParameters::find().UseAdvCertificateStore,
                                                                                eInvoiceCFDIParameters_MX.PACKeyVaultCertificateRef,
                                                                                eInvoiceCFDIParameters_MX.CFDIPACCertificate);
        return privatKey != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateInBase64</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the certificate as Base64 string.
    /// </summary>
    /// <param name="_certificate">
    /// The X509 certificate CLR object.
    /// </param>
    /// <returns>
    /// The certificate Base64 string.
    /// </returns>
    public static str getCertificateInBase64(X509Certificate2 _certificate)
    {
        str certificateInBase64 =  System.Convert::ToBase64String(_certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType::Cert));

        return certificateInBase64;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the certificate serial number that is used by the posted document.
    /// </summary>
    /// <param name="_certificate">
    /// The X509 certificate CLR object.
    /// </param>
    /// <returns>
    /// The certificate serial number that is used by the posted document.
    /// </returns>
    public static SerialCertificationNumber_MX getCertificateSerialNumber(X509Certificate2 _certificate)
    {
        str serialNumberstr;
        str serialNumberHex = _certificate.get_SerialNumber();
        int pos = 1;
        str hexaStr = subStr(serialNumberHex, pos, 2);

        while (hexaStr != '')
        {
            int serialNumberInt = System.Int32::Parse(hexaStr, System.Globalization.NumberStyles::HexNumber);
            serialNumberStr += num2char(serialNumberInt);

            pos += 2;
            hexaStr = subStr(serialNumberHex, pos, 2);
        }

        return serialNumberstr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentCFDIPrivateKeyReadable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if the private key for the currently selected digital certificate is readable
    /// </summary>
    /// <returns>True if the private key for the currently selected digital certificate is readable</returns>
    public static boolean isCurrentCFDIPrivateKeyReadable()
    {
        EInvoiceCFDIParameters_MX eInvoiceCFDIParameters_MX = EInvoiceCFDIParameters_MX::find();
        RSACryptoServiceProvider privatKey = CertificateHelper_MX::getPrivateKey(SystemParameters::find().UseAdvCertificateStore,
                                                                                eInvoiceCFDIParameters_MX.KeyVaultCertificateRef,
                                                                                eInvoiceCFDIParameters_MX.CertificateSubject);
        return privatKey != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDigitalCertificate</Name>
				<Source><![CDATA[
    public static X509Certificate2 getDigitalCertificate(UseAdvCertificateStore _useAdvCert,
                                                         KeyVaultCertificateRef _keyVaultCertificateRef = 0,
                                                         DigitalCertificateSubject _certificateSubject = null)
    {
        X509Certificate2 certificate = null;

        if (_useAdvCert && _keyVaultCertificateRef)
        {
            certificate = KeyVaultCertificateHelper::getDigitalCertificate(_keyVaultCertificateRef);
        }
        else if(!_useAdvCert && _certificateSubject)
        {
            certificate = DigitalCertificateManager::getDigitalCertificate(_certificateSubject);
        }

        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrivateKey</Name>
				<Source><![CDATA[
    public static RSACryptoServiceProvider getPrivateKey(UseAdvCertificateStore _useAdvCert,
                                                         KeyVaultCertificateRef _keyVaultCertificateRef = 0,
                                                         DigitalCertificateSubject _certificateSubject = null)
    {
        RSACryptoServiceProvider privatKey = null;

        if (_useAdvCert && _keyVaultCertificateRef)
        {
            privatKey = KeyVaultCertificateHelper::getPrivateKey(_keyVaultCertificateRef);
        }
        else if(!_useAdvCert && _certificateSubject)
        {
            privatKey = DigitalCertificateManager::getPrivateKey(_certificateSubject);
        }

        return privatKey;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>