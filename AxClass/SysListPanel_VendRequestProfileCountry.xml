<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysListPanel_VendRequestProfileCountry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SysListPanel_VendRequestProfileCountry</c> class represents a list panel control. A list
///    panel is a combination of selected list and an available list where both lists are list controls
///    and has add and remove buttons to move items between lists. This class follows the pattern of
///    extending a sub-class of the <c>SysListPanel</c> class or the
///    <c>SysListPanelRelationTableCallback</c> class in this case to provide the configuration of a list
///    panel.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class SysListPanel_VendRequestProfileCountry extends SysListPanel
{
    private VendRequestRecId vendRequestRecId;

    /// <summary> 
    /// The number of columns shown both in the available countries list and the selected countries list.
    /// </summary>
    private const int numberOfColumns = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>numOfColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method overrides the default number of columns. 
    /// </summary>
    /// <returns>The number of columns.</returns>
    public int numOfColumns()
    {
        return numberOfColumns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method implements the abstract method in the parent class.
    /// The method is called when the user adds countries to a profile.
    /// </summary>
    /// <param name = "countryRegions">The container with countries added by the user.</param>
    public void addData(container countryRegions)
    {
        ttsbegin;

        for (int i = 1; i < conlen(countryRegions) + 1; i++)
        {
            VendRequestProfileCountry vendRequestProfileCountry;
            vendRequestProfileCountry.CountryRegion = conpeek(countryRegions, i);
            vendRequestProfileCountry.VendRequestProfile = vendRequestRecId;
            vendRequestProfileCountry.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method implements the abstract method in the parent class.
    /// The method is called when the user removes countries from a profile.
    /// </summary>
    /// <param name = "countryRegions">The container with countries removed by the user.</param>
    public void removeData(container countryRegions)
    {
        ttsbegin;

        for (int i = 1; i < conlen(countryRegions) + 1; i++)
        {
            VendRequestProfileCountry vendRequestProfileCountry;
            delete_from vendRequestProfileCountry
                where vendRequestProfileCountry.CountryRegion == conpeek(countryRegions, i)
                    && vendRequestProfileCountry.VendRequestProfile == vendRequestRecId;
        }

        ttscommit;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmVendRequestProfileRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the request recid.
    /// </summary>
    /// <param name = "_recId">The VendRequestProfile recid.</param>
    /// <returns>The VendRequestProfile recid.</returns>
    public VendRequestRecId parmVendRequestProfileRecId(VendRequestRecId _recId = vendRequestRecId)
    {
        vendRequestRecId = _recId;
        return vendRequestRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableCountriesRegions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the available countries and regions for a configuration profile.
    /// </summary>
    /// <returns>
    /// A container that contains the available countries and regions in the following format
    /// <c>[country/region ID, country/region ID, country/region name]</c>.
    /// </returns>
    private container getAvailableCountriesRegions()
    {
        container data = conNull();
        
        if (vendRequestRecId)
        {
            VendRequestProfile thisConfiguration = VendRequestProfile::find(vendRequestRecId);

            if (thisConfiguration)
            {
                LogisticsAddressCountryRegion availableCountriesRegions;
                LogisticsAddressCountryRegionNameView logisticsAddressCountryRegionNameView;
                VendRequestProfileCountry selectedCountriesRegions;
                VendRequestProfile vendRequestProfile;
                
                if (!thisConfiguration.IsDefault)
                {
                    while select CountryRegionId, ShortName from logisticsAddressCountryRegionNameView
                            where logisticsAddressCountryRegionNameView.LanguageId == currentUserLanguage()
                        exists join availableCountriesRegions
                            where logisticsAddressCountryRegionNameView.CountryRegionId == availableCountriesRegions.CountryRegionId                                
                        notexists join selectedCountriesRegions where availableCountriesRegions.CountryRegionId == selectedCountriesRegions.CountryRegion
                            exists join vendRequestProfile
                                where selectedCountriesRegions.VendRequestProfile == vendRequestProfile.RecId
                                    && vendRequestProfile.ProfileType == thisConfiguration.ProfileType
                    {
                        data += [[logisticsAddressCountryRegionNameView.CountryRegionId, logisticsAddressCountryRegionNameView.CountryRegionId, logisticsAddressCountryRegionNameView.ShortName]];
                    }
                }
            }
        }

        return data;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves both available and selected countries.
    /// </summary>
    /// <returns>
    /// A container that contains the available and selected countries and regions.
    /// </returns>
    public container getData()
    {
        container selectedData = this.getSelectedCountriesRegions();
        container availableData = this.getAvailableCountriesRegions();

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedCountriesRegions</Name>
				<Source><![CDATA[
    private container getSelectedCountriesRegions()
    {
        container selectedCountriesRegions = conNull();
        
		if (vendRequestRecId)
        {
            VendRequestProfileCountry vendRequestProfileCountry;
            LogisticsAddressCountryRegionNameView logisticsAddressCountryRegionNameView;
            while select vendRequestProfileCountry
                where vendRequestProfileCountry.VendRequestProfile == vendRequestRecId
                join firstonly CountryRegionId, ShortName from logisticsAddressCountryRegionNameView
                    where logisticsAddressCountryRegionNameView.CountryRegionId == vendRequestProfileCountry.CountryRegion
                        && logisticsAddressCountryRegionNameView.LanguageId == currentUserLanguage()
            {
                selectedCountriesRegions += [[logisticsAddressCountryRegionNameView.CountryRegionId, logisticsAddressCountryRegionNameView.CountryRegionId, logisticsAddressCountryRegionNameView.ShortName]];
            }
        }

        return selectedCountriesRegions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysListPanel_VendRequestProfileCountry construct()
    {
        return new SysListPanel_VendRequestProfileCountry();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the user interface for the selection of the countries and regions for a configuration
    /// profile.
    /// </summary>
    /// <param name="_formRun">
    /// The form that will contain the list panel controls for selected countries.
    /// </param>
    /// <param name="_parentControlId">
    /// The parent form control ID that will contain the list panel controls for selected countries.
    /// </param>
    /// <returns>
    /// A <c>SysListPanelRelationTable</c> table configured for the selection of the countries and regions.
    /// </returns>
    public static SysListPanel_VendRequestProfileCountry newForm(FormRun _formRun, int _parentControlId)
    {
        SysListPanel_VendRequestProfileCountry sysListPanel = SysListPanel_VendRequestProfileCountry::construct();
        sysListPanel.parmFormRun(_formRun);
        sysListPanel.parmParentId(_parentControlId);
        sysListPanel.parmOnlyViewAccess(FormSecurity::getMenuItemAccessRight(_formRun) <= AccessRight::View);
        sysListPanel.parmHasRemoveAllButton(true);
        sysListPanel.parmHasAddAllButton(true);
        sysListPanel.parmCaptionSelected("@SYS136207");
        sysListPanel.parmCaptionAvailable("@SYS130849");

        sysListPanel.build();
        return sysListPanel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>