<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBRCustomerMerge</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRBRCustomerMerge</c> merges business relations
/// when related customers are merged.
/// </summary>
public class MCRBRCustomerMerge
{
    smmBusRelTable      smmBusRelTableFrom;
    smmBusRelTable      smmBusRelTableTo;

    MCRsmmBusRelTable   mcrsmmBusRelTableFrom;
    MCRsmmBusRelTable   mcrsmmBusRelTableTo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>businessSectorExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a business sector record exists for the mergeTo BR.
    /// </summary>
    /// <param name="_busSectorId">
    ///     The buisness sector providing the match criteria.
    /// </param>
    /// <returns>
    ///     true if a buisness sector matches search criteria; otherwise false.
    /// </returns>
    private boolean businessSectorExist(smmBusinessSectorId _busSectorId)
    {
        boolean                 ret = false;
        smmBusRelSectorTable    busRelSectorTable;

        if (!_busSectorId
            || !smmBusRelTableTo.Party)
        {
            return false;
        }

        select firstonly RecId from busRelSectorTable
            where busRelSectorTable.Party == smmBusRelTableTo.Party
                && busRelSectorTable.BusinessSectorId == _busSectorId;

        if (busRelSectorTable)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBusinessSectors</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loops through the merged business relation's business sectors and copies them
    ///     to the survivor, provided they don't already exist for the business relation based
    ///     upon checking in the businessSectorExist() method.
    /// </summary>
    private void copyBusinessSectors()
    {
        smmBusRelSectorTable busRelSectorTableFrom, smmBusRelSectorTableNew;

        if (smmBusRelTableFrom.Party
            && smmBusRelTableTo.Party)
        {
            while select busRelSectorTableFrom
                where busRelSectorTableFrom.Party == smmBusRelTableFrom.Party
            {
                if (!this.businessSectorExist(busRelSectorTableFrom.BusinessSectorId))
                {
                    ttsBegin;
                    smmBusRelSectorTableNew = busRelSectorTableFrom.data();
                    smmBusRelSectorTableNew.Party = smmBusRelTableTo.Party;
                    smmBusRelSectorTableNew.MCRFromMergedPartyID = smmBusRelTableFrom.Party;
                    smmBusRelSectorTableNew.KeyId = smmParameters::getNumber(smmNumbSeqUsed::ParmId);
                    if (smmBusRelSectorTableNew.validateWrite())
                    {
                        smmBusRelSectorTableNew.insert();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }
                    ttsCommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuoteCompetitorGrp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loops through the mergedFrom business relation's Competitor Groups and copies them
    ///     to the survivor, provided they don't already exist for the BR based
    ///     upon checking in the quoteCompetitorGroupExist() method.
    /// </summary>
    private void copyQuoteCompetitorGrp()
    {
        smmQuotationCompetitorGroup quotCompetitorGrpFrom, smmQuotationCompetitorNew;

        if (smmBusRelTableFrom.Party
            && smmBusRelTableTo.Party)
        {
            while select quotCompetitorGrpFrom
                where quotCompetitorGrpFrom.Party == smmBusRelTableFrom.Party
            {
                if (!this.quoteCompetitorGroupExist())
                {
                    ttsBegin;
                    smmQuotationCompetitorNew = quotCompetitorGrpFrom.data();
                    smmQuotationCompetitorNew.Party = smmBusRelTableTo.Party;
                    smmQuotationCompetitorNew.MCRFromMergedPartyID = smmBusRelTableFrom.Party;
                    if (smmQuotationCompetitorNew.validateWrite())
                    {
                        smmQuotationCompetitorNew.insert();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }
                    ttsCommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsBRtableFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the from <c>SMMBusRelTable</c> class variable
    /// has been set.
    /// </summary>
    /// <returns>
    /// true if the form has been set; otherwise, false.
    /// </returns>
    public boolean existsBRtableFrom()
    {
        return (smmBusRelTableFrom ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeBRCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Merges a business relation customer when its
    ///     related customer is merged.
    /// </summary>
    void mergeBRCustomer()
    {
        ttsBegin;

        this.copyBusinessSectors();
        this.copyQuoteCompetitorGrp();

        mcrsmmBusRelTableFrom.MergedParent = CustTable::findByPartyRecId(smmBusRelTableTo.Party).AccountNum;
        mcrsmmBusRelTableFrom.MergedRoot   = mcrsmmBusRelTableFrom.MergedParent;

        smmBusRelTableFrom.mcrPackMCRsmmBusRelTable(mcrsmmBusRelTableFrom);
        smmBusRelTableFrom.update();

        this.mergeChildren();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeChildren</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Points the children business relation's of the merged from to the
    ///     mergedFrom's parent.
    /// </summary>
    private void mergeChildren()
    {
        MCRsmmBusRelTable   mcrsmmBusRelTable;
        CustAccount         custAccountNumFrom, custAccountNumTo;

        custAccountNumFrom = CustTable::findByPartyRecId(smmBusRelTableFrom.Party).AccountNum;
        custAccountNumTo   = CustTable::findByPartyRecId(smmBusRelTableTo.Party).AccountNum;

        //Update the root node for any potential children that were merged into the
        //mergeFrom customer.

        if (custAccountNumFrom && custAccountNumTo)
        {
            update_recordSet mcrsmmBusRelTable
                setting MergedRoot = custAccountNumTo
                where mcrsmmBusRelTable.MergedRoot == custAccountNumFrom;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets class attributes needed to merge a business relation account.
    /// </summary>
    /// <param name="_mergeFrom">
    ///     The business relation account to be merged.
    /// </param>
    /// <param name="_mergeTo">
    ///     The business relation account to merge to.
    /// </param>
    void new(smmBusRelAccount _mergeFrom, smmBusRelAccount _mergeTo)
    {
        if (!_mergeFrom || !_mergeTo)
        {
            throw error("@MCR10769", funcName());
        }

        smmBusRelTableFrom = smmBusRelTable::find(_mergeFrom);
        smmBusRelTableTo = smmBusRelTable::find(_mergeTo);

        if (!smmBusRelTableFrom || !smmBusRelTableTo)
        {
            throw error("@MCR10769", funcName());
        }

        mcrsmmBusRelTableFrom = smmBusRelTableFrom.mcrsmmBusRelTable();
        mcrsmmBusRelTableTo = smmBusRelTableTo.mcrsmmBusRelTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>quoteCompetitorGroupExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if a competitor group record exists for the merge to business relation.
    /// </summary>
    /// <returns>
    ///     true if a quotation competitor group exist with the same party ID as the business relation; otherwise false.
    /// </returns>
    private boolean quoteCompetitorGroupExist()
    {
        boolean                     ret = false;
        smmQuotationCompetitorGroup quotationCompetitorGroup;

        select firstonly RecId from quotationCompetitorGroup
            where quotationCompetitorGroup.Party == smmBusRelTableTo.Party;

        if (quotationCompetitorGroup)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyMerge</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Merges a business relation customer when its related customer is merged.
    /// </summary>
    /// <param name="_mergeFrom">
    ///     The BR customer which is to be merged.
    /// </param>
    /// <param name="_mergeTo">
    ///     The business relation customer to which to merge.
    /// </param>
    public static void applyMerge(smmBusRelAccount _mergeFrom, smmBusRelAccount _mergeTo)
    {
        MCRBRCustomerMerge   mcrBRCustomerMerge = new MCRBRCustomerMerge(_mergeFrom, _mergeTo);

        //If there is info to merge, do the merge
        if (mcrBRCustomerMerge.existsBRtableFrom())
        {
            mcrBRCustomerMerge.mergeBRCustomer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmergeBRCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Unmerges an account from its parent and updates the root
    ///     of any potential children that were merged into the account that is
    ///     now being unmerged.
    /// </summary>
    /// <param name="_busRelAccount">
    ///     The business relation account to be unmerged.
    /// </param>
    public static void unmergeBRCustomer(smmBusRelAccount _busRelAccount)
    {
        smmBusRelTable      smmBusRelTable;
        MCRsmmBusRelTable   mcrsmmBusRelTable;

        smmBusRelTable = smmBusRelTable::find(_busRelAccount, true);
        if (smmBusRelTable)
        {
            ttsBegin;
            mcrsmmBusRelTable = smmBusRelTable.mcrsmmBusRelTable();
            mcrsmmBusRelTable.MergedParent = '';
            mcrsmmBusRelTable.MergedRoot   = '';

            smmBusRelTable.mcrPackMCRsmmBusRelTable(mcrsmmBusRelTable);
            smmBusRelTable.update();

            //recursive call to unmerge any children from the root node and make unmerged account new parent
            MCRBRCustomerMerge::updateMergedRootsForUnmerge(_busRelAccount, _busRelAccount);
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMergedRootsForUnmerge</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the root node of child accounts during an unmerge.
    /// </summary>
    /// <param name="_accountNum">
    ///     The account number being unmerged.
    /// </param>
    /// <param name="_newMergedRoot">
    ///     The account number of the new child node to unmerge.
    /// </param>
    private static void updateMergedRootsForUnmerge(smmBusRelAccount _accountNum, smmBusRelAccount _newMergedRoot)
    {
        smmBusRelTable      smmBusRelTable;
        MCRsmmBusRelTable   mcrsmmBusRelTable;

        if (_accountNum && _newMergedRoot)
        {
            ttsBegin;
            //loop through all the immediate children
            while select forUpdate mcrsmmBusRelTable
                where mcrsmmBusRelTable.MergedParent == _accountNum
                join BusRelAccount from smmBusRelTable
                where smmBusRelTable.RecId == mcrsmmBusRelTable.smmBusRelTable
            {
                mcrsmmBusRelTable.MergedRoot = _newMergedRoot;
                if (mcrsmmBusRelTable.validateWrite())
                {
                    mcrsmmBusRelTable.update();
                }
                else
                {
                    throw error("@SYS104318");
                }

                //recursively check if there are any children.
                MCRBRCustomerMerge::updateMergedRootsForUnmerge(smmBusRelTable.BusRelAccount, _newMergedRoot);
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>