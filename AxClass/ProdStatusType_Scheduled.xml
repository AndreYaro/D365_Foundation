<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdStatusType_Scheduled</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdStatusType_Scheduled</c> class is the base class for running job or operations
/// scheduling.
/// </summary>
/// <remarks>
/// The <c>ProdStatusType_Scheduled</c> class encapsulates the behavior of a scheduled production order
/// and always creates an instance of one of the derived classes depending on the kind of scheduling
/// chosen by the user.
/// </remarks>
public abstract class ProdStatusType_Scheduled extends ProdStatusType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoAuthorization</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether production order status is legal when firming is made automatically.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean autoAuthorization()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    public void deleting()
    {
        throw error(strfmt(
                        "@SYS22042",
                        prodTable.ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertedProdRoute</Name>
				<Source><![CDATA[
    public void insertedProdRoute(ProdRoute _prodRoute)
    {
        super(_prodRoute);

        if (_prodRoute.mustRouteJobsBeCreated())
        {
            ProdJobUpdate prodJobUpdate;

            prodJobUpdate = ProdJobUpdate::newProdIdOprNum(
                                _prodRoute.ProdId,
                                _prodRoute.OprNum);
            prodJobUpdate.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ProdTable _prodTable)
    {
        super(_prodTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousProdStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the previous status for a scheduled production order.
    /// </summary>
    /// <returns>
    ///    Always returns the <c>ProdStatus::CostEstimated</c> value.
    /// </returns>
    public ProdStatus previousProdStatus()
    {
        return ProdStatus::CostEstimated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodCheckCopying</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a production order status allows copying.
    /// </summary>
    /// <returns>
    ///    true if a specific production order exists in the context; otherwise return value from the base class.
    /// </returns>
    public boolean prodCheckCopying()
    {
        if (ProdBomRouteAllowCopyContext::exist(prodTable.ProdId))
        {
            return true;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAutoUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements performing of an automatic update of a production order.
    /// </summary>
    /// <remarks>
    ///    This method always throws an exception because an automatic update must be uniquely implemented in
    ///    derived classes.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    A production order does not allow automatic update.
    /// </exception>
    public void runAutoUpdate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSplit</Name>
				<Source><![CDATA[
    public boolean runSplit(
        ProdParmSplit       _prodParmSplit,
        boolean             _ask            = false,
        RunbaseRecsMapable  _multi          = null
        )
    {
        if (_ask && prodTable.CollectRefLevel == 0)
        {
            return this.prodTableType().pmfCanSplit();
        }

        return super(_prodParmSplit, _ask, _multi);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivityRequirementSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the activity requirement set and also recreates the jobs if necessary
    /// </summary>
    /// <param name="_wrkCtrActivityRequirementSet">
    ///    The activity requirement set to update.
    /// </param>
    /// <param name="_prodRoute">
    ///    The production route that the set is connected to.
    /// </param>
    public void updateActivityRequirementSet(WrkCtrActivityRequirementSet _wrkCtrActivityRequirementSet, ProdRoute _prodRoute)
    {
        boolean              updateJobs     = false;

        ttsbegin;

        if (prodTable.RouteJobs
            && _wrkCtrActivityRequirementSet.Quantity != _wrkCtrActivityRequirementSet.orig().Quantity)
        {
            updateJobs = true;
        }

        super(_wrkCtrActivityRequirementSet, _prodRoute);

        if (updateJobs)
        {
            ProdJobUpdate prodJobUpdate = ProdJobUpdate::newProdIdOprNum(
                                              _prodRoute.ProdId,
                                              _prodRoute.OprNum);
            prodJobUpdate.run();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedProdRoute</Name>
				<Source><![CDATA[
    public void updatedProdRoute(ProdRoute _prodRoute, ProdRoute _prodRouteOrig)
    {
        super(_prodRoute, _prodRouteOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProdRouteJobsBeUpdated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustProdRouteJobsBeUpdated(ProdRoute _prodRoute, ProdRoute _prodRouteOrig)
    {
        return prodTable.RouteJobs
            && _prodRoute.OprNum
            && _prodRoute.mustRouteJobsBeUpdated(_prodRouteOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a scheduled production order can be deleted.
    /// </summary>
    /// <returns>
    ///    Always returns false because a scheduled production order cannot be deleted.
    /// </returns>
    public boolean validateDelete()
    {
        return checkFailed("@SYS18511");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeleteProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the production bills of materials of a scheduled production order can be deleted.
    /// </summary>
    /// <param name="_prodBOM">
    ///    The production bills of materials parameter. This parameter is disregarded by the method.
    /// </param>
    /// <returns>
    ///    Always returns false because production bills of materials cannot be deleted.
    /// </returns>
    public boolean validateDeleteProdBOM(ProdBOM _prodBOM)
    {
        return checkFailed(strfmt(
                            "@SYS22042",
                            prodTable.ProdStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProdBOM</Name>
				<Source><![CDATA[
    public boolean validateWriteProdBOM(ProdBOM _prodBOM)
    {
        if (_prodBOM.pdsPotencyFieldModified())
        {
            return checkFailed(strfmt("@PSC33", prodTable.ProdStatus));
        }

        return super(_prodBOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdStatusType_Scheduled construct(ProdTable _prodTable)
    {
        switch (_prodTable.SchedStatus)
        {
            case ProdSchedStatus::JobScheduled:
                return ProdStatusType_JobScheduled::construct(_prodTable);
            case ProdSchedStatus::OperationScheduled:
                return ProdStatusType_OperationScheduled::construct(_prodTable);
            case ProdSchedStatus::None:
                switch (_prodTable.prodParametersDim().SchedMethod)
                {
                    case ProdSchedMethod::JobScheduling:
                        return ProdStatusType_JobScheduled::construct(_prodTable);
                    case ProdSchedMethod::OperationScheduling:
                        return ProdStatusType_OperationScheduled::construct(_prodTable);
                }
        }
        throw error(strfmt(
            "@SYS19306",
            funcname()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>