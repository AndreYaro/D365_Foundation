<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyUpdateRemPhys_PurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InterCompanyUpdateRemPhys_PurchLine extends InterCompanyUpdateRemPhys
{
    PurchLine   purchLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public void parmBuffer(Common _buffer)
    {
        super(_buffer);
        purchLine = _buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateICSalesLineRemainInventPhysical</Name>
				<Source><![CDATA[
    private InventQty calculateICSalesLineRemainInventPhysical(SalesLine _salesLine, InventQty _diffInventPhysical, boolean _creditNoteLine)
    {
        if (_salesLine.RemainInventPhysical == 0 && _diffInventPhysical > 0
            && !(IntercompanyCredNoteSORemQtyUpdatedAfterCancelFlight::instance().isEnabled() && _creditNoteLine))
        {
            return 0;
        }
        else
        {
            return _salesLine.RemainInventPhysical - _diffInventPhysical;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateICSalesLineRemainSalesPhysical</Name>
				<Source><![CDATA[
    private InventQty calculateICSalesLineRemainSalesPhysical(SalesLine _salesLine, InventQty _diffPurchSalesPhysical, boolean _creditNoteLine)
    {
        if (_salesLine.RemainSalesPhysical == 0 && _diffPurchSalesPhysical > 0
            && !(IntercompanyCredNoteSORemQtyUpdatedAfterCancelFlight::instance().isEnabled() && _creditNoteLine))
        {
            return 0;
        }
        else
        {
            return _salesLine.RemainSalesPhysical - _diffPurchSalesPhysical;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateICSalesLineRemainPdsCWRemainInventPhysical</Name>
				<Source><![CDATA[
    private InventQty calculateICSalesLineRemainPdsCWRemainInventPhysical(SalesLine _salesLine, InventQty _diffPdsCWRemainInventPhysical, boolean _creditNoteLine)
    {
        if (_salesLine.PdsCWRemainInventPhysical == 0 && _diffPdsCWRemainInventPhysical > 0
            && !(IntercompanyCredNoteSORemQtyUpdatedAfterCancelFlight::instance().isEnabled() && _creditNoteLine))
        {
            return 0;
        }
        else
        {
            return _salesLine.PdsCWRemainInventPhysical - _diffPdsCWRemainInventPhysical;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeExternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes physical quantities from intercompany purchase order line to intercompany sales order line in other company
    /// </summary>
    public void synchronizeExternal()
    {
        SalesLine       salesLine;
        InventQty       newRemainInventPhysical;
        InventQty       newRemainPurchSalesPhysical;
        PdsCWInventQty  newPdsCWRemainInventPhysical;
        boolean         interCompanyStocked;
        boolean         isStocked = purchLine.isStocked();

        if (purchLine.InterCompanyInventTransId)
        {
            UnitOfMeasureSymbol purchCompanyInventUnit = purchLine.inventTable().inventUnitId();

            changecompany(purchLine.purchTable().InterCompanyCompanyId)
            {
                setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                salesLine = SalesLine::findInventTransId(purchLine.InterCompanyInventTransId,true);
                //
                //  No conversion needed between sales/purchase units since they have to match in an intercompany chain
                //

                // Handle if the product is stocked in one company and not stocked in the other company
                interCompanyStocked = salesLine.isStocked();

                if (isStocked && !interCompanyStocked && diffInventPhysical)
                {
                    // If ICSO line is not stocked then keep InventPhysical at zero
                    diffInventPhysical = 0;
                }

                if (diffInventPhysical)
                {
                    // Inventory units might differ
                    UnitOfMeasureSymbol salesCompanyInventUnit  = salesLine.inventTable().inventUnitId();
                    diffInventPhysical = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                               salesLine.InventDimId,
                                                                                                               diffInventPhysical,
                                                                                                               purchCompanyInventUnit,
                                                                                                               salesCompanyInventUnit,
                                                                                                               NoYes::Yes);
                }

                if (!isStocked && interCompanyStocked && !diffInventPhysical)
                {
                    // If ICPO line is not stocked then diffInventPhysical is zero and we need to calculate the value to synchronize
                    diffInventPhysical = salesLine.calcQtyOrdered(diffPurchSalesPhysical);
                }

                if (salesLine.SalesType == SalesType::ReturnItem)                
                {
                    newRemainInventPhysical = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                                    salesLine.InventDimId,
                                                                                                                    salesLine.ExpectedRetQty,
								                                                                                    salesLine.SalesUnit,
                                                                                                                    salesLine.inventTable().inventUnitId(),
                                                                                                                    NoYes::Yes)  - diffInventPhysical;
                    newRemainPurchSalesPhysical  = salesLine.ExpectedRetQty  - diffPurchSalesPhysical;
                    newPdsCWRemainInventPhysical = salesLine.PdsCWExpectedRetQty - diffPdsCWRemainInventPhysical;                   
                }
                else                
                {
                    //Handle situations where Deliver remainder is set to 0 on IC Sales line
                    boolean creditNoteLine = salesLine.creditNoteLine();

                    newRemainInventPhysical      = this.calculateICSalesLineRemainInventPhysical(salesLine, diffInventPhysical, creditNoteLine);
                    newRemainPurchSalesPhysical  = this.calculateICSalesLineRemainSalesPhysical(salesLine, diffPurchSalesPhysical, creditNoteLine);
                    newPdsCWRemainInventPhysical = this.calculateICSalesLineRemainPdsCWRemainInventPhysical(salesLine, diffPdsCWRemainInventPhysical, creditNoteLine);
                }
                //
                //  Remain physical must not be negative
                //

                if (purchLine.creditNoteLine())
                {
                    if (newRemainInventPhysical > 0 || newRemainPurchSalesPhysical > 0)
                    {
                        throw error("@SYS12641");
                    }
                }
                else
                {
                    if (newRemainInventPhysical < 0 || newRemainPurchSalesPhysical < 0)
                    {
                        throw error("@SYS6657");
                    }
                }

                salesLine.RemainInventPhysical      = newRemainInventPhysical;
                salesLine.RemainSalesPhysical       = newRemainPurchSalesPhysical;
                salesLine.PdsCWRemainInventPhysical = newPdsCWRemainInventPhysical;

                setPrefix(#PreFixField(SalesLine, SalesId));

                if (!this.salesLineValidateWrite(salesLine))
                {
                    throw error("@SYS18738");
                }
                
                InterCompanyUpdateRemPhys::synchronize(salesLine,
                                                       diffInventPhysical,
                                                       diffPurchSalesPhysical,
                                                       InterCompanySkipUpdate::InterCompany,
                                                       diffPdsCWRemainInventPhysical);

                // Reread the salesLine buffer in order to avoid updating conflicts.
                // In certain drop shipment scenarios, the salesLine buffer is updated in method InterCompanyUpdateRemPhys::synchronize().
                if (salesLine.InterCompanyInventTransId
                    || (salesLine.InventRefType == InventRefType::Purch
                    &&  salesLine.InventRefTransId
                    &&  salesLine.DeliveryType  == TradeLineDlvType::DropShip))
                {
                    salesLine.reread();
                    salesLine.RemainInventPhysical      = newRemainInventPhysical;
                    salesLine.RemainSalesPhysical       = newRemainPurchSalesPhysical;
                    salesLine.PdsCWRemainInventPhysical = newPdsCWRemainInventPhysical;
                }

                salesLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeInternal</Name>
				<Source><![CDATA[
    public void synchronizeInternal()
    {
        SalesLine   salesLine;
        InventQty   newRemainInventPhysical;
        InventQty   newRemainPurchSalesPhysical;
        InventQty   newDiffInventPhysical;
        InventQty   newDiffPurchSalesPhysical;
        PdsCWInventQty newPdsCWRemainInventPhysical;

        if (purchLine.ItemRefType  == InventRefType::Sales
        &&  purchLine.InventRefTransId
        &&  purchLine.isDropShipment())
        {
            salesLine = SalesLine::findInventTransId(purchLine.InventRefTransId,true);
            //
            //  Unit conversion is performed internally, since Sales- and PurchUnit can differ
            //
            if (purchLine.PurchUnit != salesLine.SalesUnit)
            {
                diffPurchSalesPhysical = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
                                                                                                               purchLine.InventDimId,
                                                                                                               diffPurchSalesPhysical,
                                                                                                               purchLine.PurchUnit,
                                                                                                               salesLine.SalesUnit,
                                                                                                               NoYes::Yes);
                diffInventPhysical     = salesLine.calcQtyOrdered(diffPurchSalesPhysical);
            }

            //Handle cases where Deliver remainder is set to 0 on direct delivery Sales line
            newRemainPurchSalesPhysical  = salesLine.RemainSalesPhysical ? salesLine.RemainSalesPhysical  - diffPurchSalesPhysical : 0;
            newRemainInventPhysical      = salesLine.RemainInventPhysical ? salesLine.RemainInventPhysical - diffInventPhysical : 0;
            newPdsCWRemainInventPhysical = salesLine.PdsCWRemainInventPhysical ? salesLine.PdsCWRemainInventPhysical - diffPdsCWRemainInventPhysical : 0;

            //  Remain physical must not be negative
            if (!purchLine.creditNoteLine() &&
                (newRemainInventPhysical < 0 || newRemainPurchSalesPhysical < 0))
            {
                throw error("@SYS6657");
            }

            newDiffInventPhysical       = salesLine.RemainInventPhysical - newRemainInventPhysical;
            newDiffPurchSalesPhysical   = salesLine.RemainSalesPhysical  - newRemainPurchSalesPhysical;

            salesLine.RemainInventPhysical      = newRemainInventPhysical;
            salesLine.RemainSalesPhysical       = newRemainPurchSalesPhysical;
            salesLine.PdsCWRemainInventPhysical = newPdsCWRemainInventPhysical;

            setPrefix(#PreFixField(SalesLine, SalesId));

            if (this.salesLineValidateWrite(salesline, true))
            {
                salesLine.update();

                InterCompanyUpdateRemPhys::synchronize(salesLine,
                                                       newDiffInventPhysical,
                                                       newDiffPurchSalesPhysical,
                                                       InterCompanySkipUpdate::Internal,
                                                       diffPdsCWRemainInventPhysical);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>