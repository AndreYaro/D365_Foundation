<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSummarizedGLDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerSummarizedGLDP_CN</c> class provides data for the <c>LedgerSummarizedGL</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the data provider class for <c>LedgerSummarizedGL</c> SSRS report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerSummarizedGLContract_CN))
]
class LedgerSummarizedGLDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    #MacroLib.Admin
    #MacroLib.File

    TmpSummarizedGL_CN  tmpSummarizedGL;
    TmpSummarizedGL_CN  tmpSummarizedGLLocal;
    Level               fromAccountLevel;
    Level               toAccountLevel;
    Counter             maxLines;
    Counter             pageBreakCounter;
    Counter             numOfLines;
    QueryRun            queryRun;
    boolean             isPreprintPaper;
    NoYes               isFiscalYearClosed;

    LedgerPreprintSummerized_CN     legerPreprintSummarized;
    LedgerPrintLayoutCurrency_CN    ledgerPrintLayoutCurrency;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerSummarizedGLQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the LedgerSummarizedGL_CN query for <c>LedgerSummarizedGL</c> SSRS report.
    /// </summary>
    /// <param name="_fromMainAccountNum">
    /// From main account number
    /// </param>
    /// <param name="_toMainAccountNum">
    /// To main account number
    /// </param>
    /// <param name="_fiscalYearName">
    /// Fiscal calendar year name
    /// </param>
    /// <param name="_fiscalPeriodName">
    /// Fiscal calendar period name
    /// </param>
    /// <returns>
    /// An instance of the ledgerSummarizedGL_CN query.
    /// </returns>
    public Query createLedgerSummarizedGLQuery(
        MainAccountNum  _fromMainAccountNum,
        MainAccountNum  _toMainAccountNum,
        FiscalYearName  _fiscalYearName,
        PeriodName      _fiscalPeriodName)
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         range;
        MainAccountNum          minMainAccountNum;
        MainAccountNum          maxMainAccountNum;

        query = new query(queryStr(LedgerSummarizedGL_CN));

        qbds = query.dataSourceTable(tablenum(MainAccount));
        range = SysQuery::findOrCreateRange(qbds, fieldnum(MainAccount, MainAccountId));
        [minMainAccountNum, maxMainAccountNum] =
            LedgerInquirySum_CN::getModifiedMainAccountParameters(_fromMainAccountNum, _toMainAccountNum);

        range.value(queryRange(minMainAccountNum, maxMainAccountNum));

        range = SysQuery::findOrCreateRange(qbds, fieldnum(MainAccount, LedgerChartOfAccounts));
        range.value(queryValue(LedgerChartOfAccounts::current()));

        qbds = Query.dataSourceTable(tableNum(FiscalCalendarYear));
        range = SysQuery::findOrCreateRange(qbds, fieldnum(FiscalCalendarYear, Name));
        if (_fiscalYearName)
        {
            range.value(queryValue(_fiscalYearName));
        }

        range = SysQuery::findOrCreateRange(qbds, fieldNum(FiscalCalendarYear, FiscalCalendar));
        range.value(queryValue(Ledger::fiscalCalendar(CompanyInfo::current())));

        qbds = Query.dataSourceTable(tableNum(FiscalCalendarPeriod));
        range = SysQuery::findOrCreateRange(qbds, fieldnum(FiscalCalendarPeriod, Name));
        if (_fiscalPeriodName)
        {
            range.value(queryValue(_fiscalPeriodName));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpSummarizedGL_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>TmpSummarizedGL_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TmpSummarizedGL_CN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpSummarizedGL_CN))
    ]
    public TmpSummarizedGL_CN getTmpSummarizedGL_CN()
    {
        select tmpSummarizedGL;
        return tmpSummarizedGL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpSummarizedGL_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate <c>TmpSummarizedGL_CN</c> temporary table for <c>LedgerSummarizedGL</c> SSRS report.
    /// </summary>
    private void insertTmpSummarizedGL_CN()
    {
        int i;
        NoYes   isDefaultCurrency;

        if ((isPreprintPaper && legerPreprintSummarized == LedgerPreprintSummerized_CN::TR202) ||
            (!isPreprintPaper && ledgerPrintLayoutCurrency == LedgerPrintLayoutCurrency_CN::DefaultCurrency))
        {
            isDefaultCurrency = NoYes::Yes;
        }

        while select tmpSummarizedGLLocal
            where tmpSummarizedGLLocal.isPrimary == NoYes::Yes || tmpSummarizedGLLocal.isPrimary == isDefaultCurrency
        {
            if (numOfLines > 0)
            {
                this.pageBreak();
            }

            tmpSummarizedGL.AccountNum               = tmpSummarizedGLLocal.AccountNum;
            tmpSummarizedGL.AccountName              = tmpSummarizedGLLocal.AccountName;

            tmpSummarizedGL.AccountName              = this.updateAccountFullNameEx();

            tmpSummarizedGL.CurrencyCode             = tmpSummarizedGLLocal.CurrencyCode;
            tmpSummarizedGL.IsPrimary                = tmpSummarizedGLLocal.isPrimary;
            tmpSummarizedGL.BeginningBalanceStatus   = tmpSummarizedGLLocal.BeginningBalanceStatus;
            tmpSummarizedGL.BeginningAmountCur       = tmpSummarizedGLLocal.BeginningAmountCur;
            tmpSummarizedGL.BeginningAmountMST       = tmpSummarizedGLLocal.BeginningAmountMST;
            tmpSummarizedGL.DebitPeriodAmountCur     = tmpSummarizedGLLocal.DebitPeriodAmountCur;
            tmpSummarizedGL.CreditPeriodAmountCur    = tmpSummarizedGLLocal.CreditPeriodAmountCur;
            tmpSummarizedGL.DebitPeriodAmountMST     = tmpSummarizedGLLocal.DebitPeriodAmountMST;
            tmpSummarizedGL.CreditPeriodAmountMST    = tmpSummarizedGLLocal.CreditPeriodAmountMST;
            tmpSummarizedGL.EndingBalanceStatus      = tmpSummarizedGLLocal.EndingBalanceStatus;
            tmpSummarizedGL.EndingBalanceCur         = tmpSummarizedGLLocal.EndingBalanceCur;
            tmpSummarizedGL.EndingBalance            = tmpSummarizedGLLocal.EndingBalance;
            tmpSummarizedGL.PageBreakCounter         = pageBreakCounter;

            tmpSummarizedGL.insert();

            numOfLines++;
        }

        select firstOnly RecId from tmpSummarizedGL;
        if (tmpSummarizedGL.RecId)
        {
            if (isFiscalYearClosed == NoYes::Yes)
            {
                this.pageBreak();
                tmpSummarizedGL.clear();
                // Continued on the next year
                tmpSummarizedGL.AccountName      = "@GLS54676";
                tmpSummarizedGL.PageBreakCounter = pageBreakCounter;
                tmpSummarizedGL.insert();
                numOfLines++;
            }

            if (!isPreprintPaper)
            {
                for (i = 0; i < (maxLines - numOfLines); i++)
                {
                    tmpSummarizedGL.clear();
                    tmpSummarizedGL.PageBreakCounter = pageBreakCounter;
                    tmpSummarizedGL.insert();
                }
            }
        }
        else
        {
            // in order to show an empty report with title content.
            tmpSummarizedGL.clear();
            tmpSummarizedGL.PageBreakCounter = 0;
            tmpSummarizedGL.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageBreak</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value for PageBreakCounter
    /// </summary>
    public void pageBreak()
    {
        #define.NumOfLineForNextPage(2)

        if (tmpSummarizedGL && tmpSummarizedGL.RecId)
        {
            if (maxLines == numOfLines)
            {
                pageBreakCounter++;
                numOfLines = #NumOfLineForNextPage;

                tmpSummarizedGL.PageBreakCounter = pageBreakCounter;
                tmpSummarizedGL.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SSRS report.
    /// </summary>
    /// <remarks>
    /// This method will be called by SSRS at run time. The method will compute the data and populate the
    /// data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        #define.MaxLines(30)
        Query                           query;
        LedgerSummarizedGLContract_CN   contract;
        LedgerInquirySummarizedGL_CN    ledgerInquirySum;
        PeriodName                      fiscalPeriodName;
        FiscalYearName                  fiscalYearName;
        MainAccountNum                  fromMainAccountNum;
        MainAccountNum                  toMainAccountNum;

        numOfLines = 0;
        contract = this.parmDataContract();

        isPreprintPaper = contract.parmPreprintPaperGroupOptionValue();
        if (isPreprintPaper)
        {
            maxLines = #MaxLines;
        }
        else
        {
            maxLines = contract.parmMaxLines();
        }

        fromAccountLevel            = contract.parmFromLevel();
        toAccountLevel              = contract.parmToLevel();
        legerPreprintSummarized     = contract.parmLegerPreprintSummarized();
        ledgerPrintLayoutCurrency   = contract.parmLedgerPrintLayoutCurrency();
        fromMainAccountNum          = contract.parmFromMainAccountNum();
        toMainAccountNum            = contract.parmToMainAccountNum();
        fiscalYearName              = contract.parmFiscalYearPeriodContract().parmPeriodYearName();
        fiscalPeriodName            = contract.parmFiscalYearPeriodContract().parmPeriodName();

        query = this.createLedgerSummarizedGLQuery(fromMainAccountNum, toMainAccountNum, fiscalYearName, fiscalPeriodName);

        queryRun = new QueryRun(query);

        ledgerInquirySum = LedgerInquirySummarizedGL_CN::construct(queryRun, fromAccountLevel, toAccountLevel);

        ledgerInquirySum.preProcess();
        isFiscalYearClosed = ledgerInquirySum.getIsFiscalYearClosed();

        ledgerInquirySum.createPeriodBalances();

        tmpSummarizedGLLocal.linkPhysicalTableInstance(ledgerInquirySum.periodBalances());

        this.insertTmpSummarizedGL_CN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountFullNameEx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update account name that combines account number and account name.
    /// </summary>
    /// <returns>
    /// account full name
    /// </returns>
    private AccountName updateAccountFullNameEx()
    {
        #define.Hyphen('-')

        AccountName accountFullName;

        accountFullName = tmpSummarizedGL.AccountNum + (tmpSummarizedGL.AccountNum ? #Hyphen + tmpSummarizedGL.AccountName: tmpSummarizedGL.AccountName);

        return accountFullName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>