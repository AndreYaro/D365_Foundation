<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerAdjustmentJournalCreationDialogContractValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Performs validations on <c>GeneralLedgerAdjustmentJournalCreationDialogContract</c> instances given to implementations of
/// <c>GeneralLedgerAdjustmentIJournalCreationDialog</c>.
/// </summary>
/// <remarks>
/// This is currently an instance class because some validations will prompt the user with a warning and allow the user to continue
/// with journal creation despite the failed validation. The handling of these warnings is specific to each implementation of
/// <c>GeneralLedgerAdjustmentIJournalCreationDialog</c>.
/// </remarks>
internal final class GeneralLedgerAdjustmentJournalCreationDialogContractValidator
{
    private GeneralLedgerAdjustmentIJournalCreationDialog journalCreationDialog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>newForJournalCreationDialog</Name>
				<Source><![CDATA[
    internal static GeneralLedgerAdjustmentJournalCreationDialogContractValidator newForJournalCreationDialog(
        GeneralLedgerAdjustmentIJournalCreationDialog _journalCreationDialog)
    {
        GeneralLedgerAdjustmentJournalCreationDialogContractValidator validator = new
            GeneralLedgerAdjustmentJournalCreationDialogContractValidator();

        validator.journalCreationDialog = _journalCreationDialog;

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalCreationContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the <c>GeneralLedgerAdjustmentJournalCreationDialogContract</c> given to the implementation of
    /// <c>GeneralLedgerAdjustmentIJournalCreationDialog</c> is a valid journal creation dialog contract.
    /// </summary>
    /// <returns>True if the given contract is valid; else, false.</returns>
    internal boolean validateJournalCreationContract()
    {
        GeneralLedgerAdjustmentJournalCreationDialogContract dialogContract = journalCreationDialog.getJournalCreationDialogContract();
        return this.validateDialogContract(dialogContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDialogContract</Name>
				<Source><![CDATA[
    private boolean validateDialogContract(GeneralLedgerAdjustmentJournalCreationDialogContract _dialogContract)
    {
        GeneralLedgerAdjustmentProposedAdjustmentTmp adjustmentsMarkedForJournal = _dialogContract.getMarkedAdjustments();

        return this.validateJournalDataArea(_dialogContract) &&
               this.validateMarkedAdjustmentCount(adjustmentsMarkedForJournal) &&
               this.validateMarkedAdjustmentsNotZero(adjustmentsMarkedForJournal) &&
               this.validateMarkedAdjustmentsBalance(adjustmentsMarkedForJournal) &&
               this.validateMarkedVouchersBalance(adjustmentsMarkedForJournal) &&
               this.validateAndNotifyUserOfPostingAdjustmentsToTaxAccount(adjustmentsMarkedForJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalDataArea</Name>
				<Source><![CDATA[
    private boolean validateJournalDataArea(GeneralLedgerAdjustmentJournalCreationDialogContract _dialogContract)
    {
        boolean isJournalDataAreaValid = true;

        // Validate that a data area has been given for journal creation
        if (!_dialogContract.getJournalDataArea())
        {
            isJournalDataAreaValid = checkFailed("@GeneralLedgerAdjustment:JournalCreationDialogContractValidationNoDataArea");
        }

        return isJournalDataAreaValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMarkedAdjustmentCount</Name>
				<Source><![CDATA[
    private boolean validateMarkedAdjustmentCount(GeneralLedgerAdjustmentProposedAdjustmentTmp _markedAdjustments)
    {
        boolean isMarkedAdjustmentCountValid = true;

        select count(RecId) from _markedAdjustments;

        // Validate that the user has marked at least one adjustment for journal creation
        if (_markedAdjustments.RecId == 0)
        {
            isMarkedAdjustmentCountValid = checkFailed("@GeneralLedgerAdjustment:JournalCreationDialogContractValidationNoMarkedAdjustments");
        }

        return isMarkedAdjustmentCountValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMarkedAdjustmentsNotZero</Name>
				<Source><![CDATA[
    private boolean validateMarkedAdjustmentsNotZero(GeneralLedgerAdjustmentProposedAdjustmentTmp _markedAdjustments)
    {
        boolean continueWithJournalCreation = true;

        GeneralLedgerAdjustmentProposedAdjustment adjustmentResults;

        select firstonly RecId from adjustmentResults
            exists join _markedAdjustments
                where adjustmentResults.RecId == _markedAdjustments.AdjustmentRecId
                   && adjustmentResults.TransactionCurrencyRecommendedAdjustment == 0;

        if (adjustmentResults.RecId)
        {
            // If marked adjustments are found with a zero amount, warn the user and ask them if they would wish
            // to continue with journal creation
            continueWithJournalCreation =
                journalCreationDialog.askUserIfTheyWantToContinueWithJournalCreation("@GeneralLedgerAdjustment:JournalCreationDialogContractValidationZeroAmountMarkedAdjustments");
        }

        return continueWithJournalCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMarkedAdjustmentsBalance</Name>
				<Source><![CDATA[
    private boolean validateMarkedAdjustmentsBalance(GeneralLedgerAdjustmentProposedAdjustmentTmp _markedAdjustments)
    {
        boolean continueWithJournalCreation = true;

        GeneralLedgerAdjustmentProposedAdjustment adjustmentResults;

        select sum(TransactionCurrencyRecommendedAdjustment) from adjustmentResults
            exists join _markedAdjustments
                where adjustmentResults.RecId == _markedAdjustments.AdjustmentRecId;

        real sumOfMarkedAdjustments = adjustmentResults.TransactionCurrencyRecommendedAdjustment;

        if (sumOfMarkedAdjustments != 0)
        {
            // If marked adjustments to not balance, warn the user and ask if they wish to continue with
            // journal creation
            continueWithJournalCreation =
                journalCreationDialog.askUserIfTheyWantToContinueWithJournalCreation("@GeneralLedgerAdjustment:JournalCreationDialogContractValidationMarkedAdjustmentDoNotBalance");
        }

        return continueWithJournalCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMarkedVouchersBalance</Name>
				<Source><![CDATA[
    private boolean validateMarkedVouchersBalance(GeneralLedgerAdjustmentProposedAdjustmentTmp _markedAdjustments)
    {
        boolean continueWithJournalCreation = true;
        boolean doMarkedAdjustmentsContainNotBalancedVoucher = false;

        GeneralLedgerAdjustmentProposedAdjustment adjustmentResults;
        GeneralLedgerAdjustmentTotalAmountPerVoucher amountSumPerVoucher;

        insert_recordset amountSumPerVoucher (
            SubledgerJournalEntry,
            TransactionCurrencyRecommendedAdjustment
            )
        select
            SubledgerJournalEntry,
            sum(TransactionCurrencyRecommendedAdjustment)
        from adjustmentResults
            group by adjustmentResults.SubledgerJournalEntry
            exists join _markedAdjustments
                where adjustmentResults.RecId == _markedAdjustments.AdjustmentRecId;

        select firstonly SubledgerJournalEntry from amountSumPerVoucher
            where amountSumPerVoucher.TransactionCurrencyRecommendedAdjustment != 0;

        if(amountSumPerVoucher.SubledgerJournalEntry)
        {
            doMarkedAdjustmentsContainNotBalancedVoucher = true;
        }

        if (doMarkedAdjustmentsContainNotBalancedVoucher)
        {
            // If some vouchers among the marked adjustments do not balance, warn the user and ask if they
            // wish to continue with journal creation
            continueWithJournalCreation =
                journalCreationDialog.askUserIfTheyWantToContinueWithJournalCreation("@GeneralLedgerAdjustment:JournalCreationDialogContractValidationMarkedVouchersDoNotBalance");
        }

        return continueWithJournalCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndNotifyUserOfPostingAdjustmentsToTaxAccount</Name>
				<Source><![CDATA[
    private boolean validateAndNotifyUserOfPostingAdjustmentsToTaxAccount(GeneralLedgerAdjustmentProposedAdjustmentTmp _markedAdjustments)
    {
        
        boolean continueWithJournalCreation = true;
        boolean doMarkedAdjustmentsPostToTaxAccounts = false;
        GeneralLedgerAdjustmentProposedAdjustment adjustmentResults;
        MainAccount mainAccount;

        while select AccountType, LedgerDimension from adjustmentResults
            exists join _markedAdjustments
                where adjustmentResults.RecId == _markedAdjustments.AdjustmentRecId
        {
            if (adjustmentResults.AccountType == LedgerJournalACType::Ledger)
            {
                mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(adjustmentResults.LedgerDimension);

                if (mainAccount &&
                MainAccount::existLedgerPostingType(mainAccount.RecId, LedgerPostingType::Tax))
                {                    
                    doMarkedAdjustmentsPostToTaxAccounts = true;
                    break;
                }
            }
        }

        if (doMarkedAdjustmentsPostToTaxAccounts)
        {
            // If any adjusments post to tax accounts, warn the user
            continueWithJournalCreation =
                journalCreationDialog.askUserIfTheyWantToContinueWithJournalCreation("@GeneralLedgerAdjustment:JournalCreationDialogContractValidationPostingToTaxAccount");
        }

        return continueWithJournalCreation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>