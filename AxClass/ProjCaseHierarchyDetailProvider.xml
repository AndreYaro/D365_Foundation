<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCaseHierarchyDetailProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>ProjCaseHierarchyDetailProvider</c> class is an implementation of <c>CaseIHierarchyDetail</c> for Project hierarchy type.
/// </summary>
[ExportMetadataAttribute('CaseIHierarchyDetail', 'Project'), ExportAttribute('Dynamics.AX.Application.CaseIHierarchyDetail')]
class ProjCaseHierarchyDetailProvider implements CaseIHierarchyDetail
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInitRootParameter</Name>
				<Source><![CDATA[
    public HierarchyName getInitRootParameter(Hierarchy _hierachyContext)
    {
        if (!_hierachyContext.IsTemplate)
        {
            ProjTable projTable = HierarchyLinkTable::findAssociation(_hierachyContext.Hierarchyid, tableNum(ProjTable));
            return  projTable.projId;
        }
        return _hierachyContext.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateControls</Name>
				<Source><![CDATA[
    public boolean shouldUpdateControls()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
    public str getCaption()
    {
        return "@SYS338946";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeleteButtonEnabled</Name>
				<Source><![CDATA[
    public boolean isDeleteButtonEnabled(int _idx, HierarchyTree _hierarchytree)
    {
        if (!_hierarchytree.isRoot())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreationOfNewTask</Name>
				<Source><![CDATA[
    public boolean validateCreationOfNewTask(HierarchyTree _tree, smmActivities _smmActivities, boolean _isCallerQuotation, boolean _absTemplate)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (!_isCallerQuotation)
            {
                ProjTable projTableLoc = HierarchyLinkTable::findAssociation(_tree.parmHierarchyId(), tableNum(ProjTable));
                // If ProjTable exists then need to verify that the calendar is set or not.
                if (projTableLoc)
                {
                    if (!_absTemplate && !projTableLoc.psaSchedCalendarId)
                    {
                        throw error ("@PSA11087");
                    }

                    if (!_absTemplate && (_smmActivities.ActivityNumber || projTableLoc.ProjId))
                    {
                        //If activity is already scheduled, then user can't create child activity under that activity until reservation is released
                        if (ActivityFacade::existsAnyAssignmentForActivity(_smmActivities.RecId))
                        {
                            throw error("@PSA11114");
                        }
                    }
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSMMActivites</Name>
				<Source><![CDATA[
    public smmActivities getSMMActivites(Common _common, smmActivities _smmActivities, boolean _isCallerQuotation)
    {
        ProjTable projTable = _common as ProjTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project))? !_isCallerQuotation : true)
        {
            _smmActivities.initFromProjTable(projTable);
        }
        return _smmActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddMenuOptionCreateNode</Name>
				<Source><![CDATA[
    public boolean shouldAddMenuOptionCreateNode(HierarchyTree _tree, HierarchyTreeTable _treeTable, FormTreeControl _ctrlTree, boolean _isCreatedStatus, boolean _isTemplate)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddMenuOptionOnTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds if we can add a menu item button on the tree.
    /// </summary>
    /// <param name = "_tree">The <c>HierarchyTree</c> record.</param>
    /// <param name = "_treeTable">The <c>HierarchyTreeTable</c> record</param>
    /// <param name = "_ctrlTree"The form tree control></param>
    /// <returns>true if the menu option can be added; otherwise, false.</returns>
    public static boolean canAddMenuOptionOnTree(HierarchyTree _tree, HierarchyTreeTable _treeTable, FormTreeControl _ctrlTree)
    {
        boolean isRoot = _tree.isRoot();
        boolean isNode = _tree.isNode();

        if (!isNode || isRoot)
        {
            return false;
        }

        if (_ctrlTree.allowEdit() && _treeTable.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddMenuOptionNewAppointmentNode</Name>
				<Source><![CDATA[
    public boolean shouldAddMenuOptionNewAppointmentNode(HierarchyTree _tree, HierarchyTreeTable _treeTable, FormTreeControl _ctrlTree, boolean _isCreatedStatus)
    {
        return ProjCaseHierarchyDetailProvider::canAddMenuOptionOnTree(_tree, _treeTable, _ctrlTree);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddMenuOptionNewActionNode</Name>
				<Source><![CDATA[
    public boolean shouldAddMenuOptionNewActionNode(HierarchyTree _tree, HierarchyTreeTable _treeTable, FormTreeControl _ctrlTree, boolean _isCreatedStatus)
    {
        return ProjCaseHierarchyDetailProvider::canAddMenuOptionOnTree(_tree, _treeTable, _ctrlTree);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddMenuOptionNewEventNode</Name>
				<Source><![CDATA[
    public boolean shouldAddMenuOptionNewEventNode(HierarchyTree _tree, HierarchyTreeTable _treeTable, FormTreeControl _ctrlTree, boolean _isCreatedStatus)
    {
        return ProjCaseHierarchyDetailProvider::canAddMenuOptionOnTree(_tree, _treeTable, _ctrlTree);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddMenuOptionNewTaskNode</Name>
				<Source><![CDATA[
    public boolean shouldAddMenuOptionNewTaskNode(HierarchyTree _tree, HierarchyTreeTable _treeTable, FormTreeControl _ctrlTree, boolean _isCreatedStatus, boolean _isTemplate, boolean _isCallerQuotation)
    {
        if (ProjCaseHierarchyDetailProvider::canAddMenuOptionOnTree(_tree, _treeTable, _ctrlTree))
        {
            return true;
        }

        if (!_isTemplate)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _isCallerQuotation)
            {
                if (_isCreatedStatus)
                {
                    return true;
                }
            }
            else
            {
                return true;
            }
        }
        else
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddMenuOptionDeleteNode</Name>
				<Source><![CDATA[
    public boolean shouldAddMenuOptionDeleteNode(HierarchyTree _tree, HierarchyTreeTable _treeTable, FormTreeControl _ctrlTree, boolean _isCreatedStatus, boolean _isCallerQuotation, int _treeSelectedIndex)
    {
        boolean isRoot = _tree.isRoot();

        if (isRoot)
        {
            return false;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && _isCallerQuotation)
        {
            if (_isCreatedStatus)
            {
                return true;
            }
        }
        else
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>