<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocEmailProcess_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Coordinates the process of sending e-mails generated for all approved NF-e
/// </summary>
public class EFDocEmailProcess_BR extends RunBaseBatch implements BatchRetryable
{
    boolean processedWithErrors;
    private EFDocEmailType_BR emailType;
    private BusinessDocumentCreationMode creationMode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processEmails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process emails to send.
    /// </summary>
    protected void processEmails()
    {
        EFDocEmailHistory_BR emailHistory;
        EFDocument_BR efDocument;
        EFDocEmailStatus_BR newStatus;
        String255 comment;

        while select forUpdate emailHistory
            where emailHistory.EFDocEmailStatus_BR == EFDocEmailStatus_BR::Waiting
                || emailHistory.EFDocEmailStatus_BR == EFDocEmailStatus_BR::Failed
            join efDocument
                where efDocument.RecId == emailHistory.EFDocument_BR
        {
            newStatus = EFDocEmailStatus_BR::Generated;

            try
            {
                emailType = emailHistory.Type;
                creationMode = emailHistory.CreationMode;
                comment = this.sendEmail(efDocument);

                if (comment != '')
                {
                    newStatus = EFDocEmailStatus_BR::Failed;
                }
                else
                {
                    comment = "@SYS4007184";
                }
            }
            catch
            {
                newStatus = EFDocEmailStatus_BR::Failed;
                comment = "@SYS4007183";

                processedWithErrors = true;
            }

            ttsBegin;

            emailHistory.Comment = comment;
            emailHistory.DateTime = DateTimeUtil::getSystemDateTime();
            emailHistory.EFDocEmailStatus_BR = newStatus;
            emailHistory.update();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.processEmails();

        if (processedWithErrors)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends an e-mail to all of the recipients of the Electronic Fiscal Document
    /// </summary>
    /// <param name="efDocument">
    /// The Electronic Fiscal Document that will be attached to the e-mail.
    /// </param>
    /// <returns>
    /// A comment regarding the result of the operation. An empty string if the operation has succeeded.
    /// </returns>
    /// <remarks>
    /// This method will return a label with an error comment if the process fails.
    /// </remarks>
    protected String255 sendEmail(EFDocument_BR efDocument)
    {
        EFDocEmailSender_BR     emailSender;

        emailSender = EFDocEmailSender_BR::construct(efDocument, true);
        emailSender.parmEFDocEmailType(emailType);
        emailSender.parmCreationMode(creationMode);

        if (emailType == EFDocEmailType_BR::CorrectionLetter)
        {
            emailSender.getEmailTemplateForEFDocEvent(EFDocSchemaType_BR::CorrectionLetter);
            return emailSender.sendEmailBySchemaType(null, EFDocSchemaType_BR::CorrectionLetter);
        }
        else
        {
            return emailSender.sendEmail();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a description of the class' task.
    /// </summary>
    /// <returns>A string with the class description.</returns>
    public static str description()
    {
        return "@SYS4003264";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes class' job.
    /// </summary>
    /// <param name="args">The parameters for the job execution.</param>
    static void main(Args args)
    {
        EFDocEmailProcess_BR process = new EFDocEmailProcess_BR();

        if (process.prompt())
        {
            process.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>