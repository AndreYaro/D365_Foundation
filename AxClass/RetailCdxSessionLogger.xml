<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCdxSessionLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>RetailCdxSessionLogger</c> class is for logging various information in processing download/upload sessions.
/// </summary>
class RetailCdxSessionLogger
{
    RetailCDXSessionNumber session, uploadSession;
    RetailConnProfileName  dataStoreName;
    RetailCDXDataStoreType dataStoreType;
    RetailConnJobId jobId;
    guid packageId;
    System.Reflection.Assembly instrumentationAssembly;
    System.Type applicationEventSourceType;
    Set sessions, currentSessions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize objects for reflection.
    /// </summary>
    void new()
    {
        instrumentationAssembly = System.Reflection.Assembly::Load('Microsoft.Dynamics.Application.Instrumentation');
        applicationEventSourceType = instrumentationAssembly.GetType('Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the session number this logging instance is working for.
    /// </summary>
    /// <param name = "_session">Session number.</param>
    public void setSession(RetailCDXSessionNumber _session)
    {
        session = _session;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSessions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the session numbers this logging instance is working for.
    /// </summary>
    /// <param name = "_sessions">The session numbers.</param>
    public void setSessions(Set _sessions)
    {
        this.sessions = _sessions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentSessions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current selected sessions for subjob processing logs.
    /// </summary>
    /// <param name = "_sessions">The current selected sessions.</param>
    public void setCurrentSessions(Set _currentSessions)
    {
        this.currentSessions = _currentSessions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the data store RecId this logging instance is working for.
    /// </summary>
    /// <param name = "_dataStoreRecId">RecId of the data store.</param>
    public void setDataStore(RetailCDXDataStoreRefRecId _dataStoreRecId)
    {
        RetailConnDatabaseProfile dataStore;

        select firstonly Name, DataStoreType
            from dataStore
            where dataStore.RecId == _dataStoreRecId;

        if (dataStore)
        {
            this.dataStoreName = dataStore.Name;
            this.dataStoreType = dataStore.DataStoreType;
        }
        else
        {
            this.dataStoreName = int642Str(_dataStoreRecId);
            this.dataStoreType = RetailCDXDataStoreType::ChannelDatabase;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set job Id.
    /// </summary>
    /// <param name = "_jobId">Job Id.</param>
    public void setJobId(RetailConnJobId _jobId)
    {
        this.jobId = _jobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUploadSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set parameters for upload session.
    /// </summary>
    /// <param name = "_uploadSessionId">Upload session Id.</param>
    /// <param name = "_dataStoreRecId">Data store Id.</param>
    /// <param name = "_jobId">Job Id.</param>
    public void setUploadSession(RetailCDXSessionNumber _uploadSessionId, RetailCDXDataStoreRefRecId _dataStoreRecId, RetailConnJobId _jobId)
    {
        this.uploadSession = _uploadSessionId;
        this.setDataStore(_dataStoreRecId);
        this.setJobId(_jobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPackageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set package Id.
    /// </summary>
    /// <param name = "_packageId">Package Id.</param>
    public void setPackageId(guid _packageId)
    {
        this.packageId = _packageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSessionInfo</Name>
				<Source><![CDATA[
    private container getSessionInfo(RetailCDXSessionNumber _sessionNumber)
    {
        RetailCDXUploadSession          uploadSessionLoc;
        RetailCDXDownloadSession        downloadSessionLoc;
        RetailConnSchedulerJobTable     job;
        RetailCDXUploadSessionStatus    uploadSessionStatus;
        RetailCDXDownloadSessionStatus  downloadSessionStatus;
        RetailCDXFileSize               fileSizeLoc;
        RetailCDXRowsAffected           rowsAffectedLoc;

        select firstonly IsUpload
            from job
            where job.JobId == this.jobId;

        if (job)
        {
            // upload session
            if (Job.IsUpload == NoYes::Yes)
            {
                select firstonly Status, FileSize, RowsAffected
                    from uploadSessionLoc
                    where uploadSessionLoc.UploadSessionId == _sessionNumber;

                if (uploadSessionLoc)
                {
                    uploadSessionStatus = uploadSessionLoc.Status;
                    fileSizeLoc = uploadSessionLoc.FileSize;
                    rowsAffectedLoc = uploadSessionLoc.RowsAffected;

                    return [uploadSessionStatus, fileSizeLoc, rowsAffectedLoc];
                }
            }
            else // download session
            {
                select firstonly Status, FileSize, RowsAffected
                    from downloadSessionLoc
                    where downloadSessionLoc.Session == _sessionNumber;

                if (downloadSessionLoc)
                {
                    downloadSessionStatus = downloadSessionLoc.Status;
                    fileSizeLoc = downloadSessionLoc.FileSize;
                    rowsAffectedLoc = downloadSessionLoc.RowsAffected;

                    return [downloadSessionStatus, fileSizeLoc, rowsAffectedLoc];
                }
            }
        }

        // Return empty container if session data is not available
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logChannelDataFilteringStartTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the operation for starting channel data filtering for table.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    /// <param name = "_isFullSync">True if this query is for full data sync, otherwise, false.</param>
    /// <param name = "_isBaseline">True if this query is for baseline data set calculation, otherwise, false.</param>
    public void logChannelDataFilteringStartTable(TableName _axTableName, boolean _isFullSync, boolean _isBaseline)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxChannelDataFilteringTableRunStart(currentSession.parmSessionNumber(), _axTableName, _isFullSync, _isBaseline);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logChannelDataFilteringFinishTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the operation for finishing channel data filtering for table.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    /// <param name = "_isFullSync">True if this query is for full data sync, otherwise, false.</param>
    /// <param name = "_isBaseline">True if this query is for baseline data set calculation, otherwise, false.</param>
    public void logChannelDataFilteringFinishTable(TableName _axTableName, boolean _isFullSync, boolean _isBaseline)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxChannelDataFilteringTableRunStop(currentSession.parmSessionNumber(), _axTableName, _isFullSync, _isBaseline);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logChannelDataFilteringStartTableQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the operation for starting execution channel data filtering query for table.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    /// <param name = "_queryId">Query Id.</param>
    /// <param name = "_dataAreaId">The company context in which the query is running. Empty if query is running on global table.</param>
    /// <param name = "_isFullSync">True if this query is for full data sync, otherwise, false.</param>
    /// <param name = "_isBaseline">True if this query is for baseline data set calculation, otherwise, false.</param>
    public void logChannelDataFilteringStartTableQuery(TableName _axTableName, RetailCDXSqlQueryID _queryId, DataAreaId _dataAreaId, boolean _isFullSync, boolean _isBaseline)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxChannelDataFilteringTableQueryRunStart(currentSession.parmSessionNumber(), _axTableName, _queryId, _dataAreaId, _isFullSync, _isBaseline);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logChannelDataFilteringFinishTableQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the operation for finishing execution channel data filtering query for table.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    /// <param name = "_queryId">Query Id.</param>
    /// <param name = "_dataAreaId">The company context in which the query is running. Empty if query is running on global table.</param>
    /// <param name = "_isFullSync">True if this query is for full data sync, otherwise, false.</param>
    /// <param name = "_isBaseline">True if this query is for baseline data set calculation, otherwise, false.</param>
    public void logChannelDataFilteringFinishTableQuery(TableName _axTableName, RetailCDXSqlQueryID _queryId, DataAreaId _dataAreaId, boolean _isFullSync, boolean _isBaseline)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxChannelDataFilteringTableQueryRunStop(currentSession.parmSessionNumber(), _axTableName, _queryId, _dataAreaId, _isFullSync, _isBaseline);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logChannelDataFilteringStartDeltaTableQueryFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the operation for starting execution of channel data filtering query for table with filter.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    /// <param name = "_queryId">Query Id.</param>
    /// <param name = "_dataAreaId">The company context in which the query is running. Empty if query is running on global table.</param>
    /// <param name = "_filterId">Filter Id.</param>
    public void logChannelDataFilteringStartDeltaTableQueryFilter(TableName _axTableName, RetailCDXSqlQueryID _queryId, DataAreaId _dataAreaId, RetailCdxQueryFilterId _filterId)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxChannelDataFilteringTableDeltaQueryFilterRunStart(currentSession.parmSessionNumber(), _axTableName, _queryId, _dataAreaId, _filterId, 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logChannelDataFilteringDeltaTableQueryFilterStop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the operation for finishing execution of channel data filtering query for table with filter.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    /// <param name = "_queryId">Query Id.</param>
    /// <param name = "_dataAreaId">The company context in which the query is running. Empty if query is running on global table.</param>
    /// <param name = "_filterId">Filter Id.</param>
    /// <param name = "_rowsAffected">Rows affected.</param>
    internal void logChannelDataFilteringDeltaTableQueryFilterStop(TableName _axTableName, RetailCDXSqlQueryID _queryId, DataAreaId _dataAreaId, RetailCdxQueryFilterId _filterId, int _rowsAffected)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxChannelDataFilteringTableDeltaQueryFilterRunStop(currentSession.parmSessionNumber(), _axTableName, _queryId, _dataAreaId, _filterId, _rowsAffected);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataOutputStartProcessingDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start processing delete for target table.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    public void logDataOutputStartProcessingDelete(TableName _axTableName)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxDataOutputWritingDeleteDataFileStart(currentSession.parmSessionNumber(), _axTableName, 0, 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataOutputFinishProcessingDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish processing delete for target table.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    /// <param name = "_rowsAffected">Number of rows affected.</param>
    /// <param name = "_dataFileSize">Data file size.</param>
    public void logDataOutputFinishProcessingDelete(TableName _axTableName, RetailCDXRowsAffected _rowsAffected, RetailCDXFileSize _dataFileSize)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxDataOutputWritingDeleteDataFileStop(currentSession.parmSessionNumber(), _axTableName, _rowsAffected, _dataFileSize);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataOutputStartWritingFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start writing data to file.
    /// </summary>
    /// <param name = "_axTableName">Name of the table.</param>
    public void logDataOutputStartWritingFile(TableName _axTableName)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxDataOutputWritingDataFileStart(currentSession.parmSessionNumber(), _axTableName, 0, 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataPackageGenerationComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log data package generation complete.
    /// </summary>
    /// <param name = "_packageId">Package Id.</param>
    public void logDataPackageGenerationComplete(guid _packageId)
    {
        ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataPackageGenerationComplete(this.session, _packageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDeleteDataFileSkipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs that the delete data package was skipped for the session.
    /// </summary>
    /// <param name = "_subjobId">The skipped subjob Id.</param>
    public void logDeleteDataFileSkipped(RetailConnSubJobId _subjobId)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataFileDeleteSkipped(currentSession.parmSessionNumber(), _subjobId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataFileSkipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs that the data package was skipped for the session.
    /// </summary>
    /// <param name = "_subjobId">The skipped subjob Id.</param>
    public void logDataFileSkipped(RetailConnSubJobId _subjobId)
    {
        if (currentSessions != null)
        {
            SetEnumerator sessionsEnumerator = currentSessions.getEnumerator();

            while(sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.current();

                ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataFileSkipped(currentSession.parmSessionNumber(), _subjobId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataOutputStartCompressing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start compressing data package.
    /// </summary>
    public void logDataOutputStartCompressing()
    {
        ApplicationEventSource::EventWriteRetailCdxDataOutputCompressingStart(this.session, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataOutputFinishCompressing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish compressing data package.
    /// </summary>
    /// <param name = "_fileSize">The file size of the data output.</param>
    public void logDataOutputFinishCompressing(RetailCDXFileSize _fileSize)
    {
        ApplicationEventSource::EventWriteRetailCdxDataOutputCompressingStop(this.session, _fileSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataOutputStartUploading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start uploading data package.
    /// </summary>
    public void logDataOutputStartUploading()
    {
        ApplicationEventSource::EventWriteRetailCdxDataOutputUploadingStart(this.session);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataOutputFinishUploading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish uploading data package.
    /// </summary>
    public void logDataOutputFinishUploading()
    {
        ApplicationEventSource::EventWriteRetailCdxDataOutputUploadingStop(this.session);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDownloadSessionDataStoreStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log data writing logic kicks off and starts looking for available download session data store records.
    /// </summary>
    public void logDownloadSessionDataStoreStart()
    {
        ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataStoreRunStart(this.dataStoreName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDownloadSessionDataStoreFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log data writing finish.
    /// </summary>
    public void logDownloadSessionDataStoreFinish()
    {
        ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataStoreRunStop(this.dataStoreName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDownloadSessionDataStoreStartDownloading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start downloading data package.
    /// </summary>
    public void logDownloadSessionDataStoreStartDownloading()
    {
        ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataStoreSessionDownloadingStart(this.dataStoreName, this.session);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDownloadSessionDataStoreFinishDownloading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish downloading data package and start applying
    /// </summary>
    public void logDownloadSessionDataStoreFinishDownloading()
    {
        ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataStoreSessionDownloadingStop(this.dataStoreName, this.session);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDownloadSessionDataStoreCheckSumValidationFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log checksum validation failure in download session.
    /// </summary>
    public void logDownloadSessionDataStoreCheckSumValidationFailed()
    {
        ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataStoreCheckSumValidationFailed(this.dataStoreName, this.session);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDownloadSessionDataStoreStartApplying</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start applying data package.
    /// </summary>
    public void logDownloadSessionDataStoreStartApplying()
    {
        ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataStoreSessionApplyingStart(this.dataStoreName, this.session, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDownloadSessionDataStoreFinishApplying</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish applying data package.
    /// </summary>
    /// <param name = "_rowsAffected">Number of rows affected.</param>
    public void logDownloadSessionDataStoreFinishApplying(RetailCDXRowsAffected _rowsAffected)
    {
        ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataStoreSessionApplyingStop(this.dataStoreName, this.session, _rowsAffected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDownloadSessionDataStoreApplyFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log data package applying failure.
    /// </summary>
    /// <param name = "_errorMessage">Error message.</param>
    /// <param name = "_tryCount">Try count.</param>
    /// <param name = "_maxTryCount">Max try count.</param>
    /// <param name = "_status">Status of the download session.</param>
    public void logDownloadSessionDataStoreApplyFailed(str _errorMessage, int _tryCount, int _maxTryCount, RetailCDXDownloadSessionStatus _status = RetailCDXDownloadSessionStatus::ApplyFailed)
    {
        ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataStoreApplyFailed(this.dataStoreName, this.session, _errorMessage, _tryCount, _maxTryCount, this.jobId, _status, this.dataStoreType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDownloadSessionDataStoreSqlLoginFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log data package sql login failed .
    /// </summary>
    /// <param name = "_sqlErrorCode">Login failed sql error code.</param>
    public void logDownloadSessionDataStoreSqlLoginFailed(int _sqlErrorCode)
    {
        SetEnumerator sessionsEnumerator = sessions.getEnumerator();

        while(sessionsEnumerator.moveNext())
        {
            RetailCDXSessionNumber sessionNumber = sessionsEnumerator.current();

            ApplicationEventSource::EventWriteRetailCdxDownloadSessionDataStoreSqlLoginFailed(this.dataStoreName, sessionNumber, _sqlErrorCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionStartReading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start reading channel database.
    /// </summary>
    /// <param name = "_rerunSessionId">Re-run upload session Id.</param>
    public void logUploadSessionStartReading(RetailCDXSessionNumber _rerunSessionId)
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionReadingStart(this.packageId, this.dataStoreName, this.jobId, _rerunSessionId, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionFinishReading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish reading channel database.
    /// </summary>
    /// <param name = "_rerunSessionId">Re-run upload session Id.</param>
    /// <param name = "_rowsAffected">Rows affected.</param>
    public void logUploadSessionFinishReading(RetailCDXSessionNumber _rerunSessionId, RetailCDXRowsAffected _rowsAffected)
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionReadingStop(this.packageId, this.dataStoreName, this.jobId, _rerunSessionId, _rowsAffected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionStartCompressing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start compressing data package.
    /// </summary>
    public void logUploadSessionStartCompressing()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionCompressingStart(this.packageId, this.dataStoreName, this.jobId, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionFinishCompressing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish compressing data package.
    /// </summary>
    /// <param name = "_fileSize">Data package file size.</param>
    public void logUploadSessionFinishCompressing(RetailCDXFileSize _fileSize)
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionCompressingStop(this.packageId, this.dataStoreName, this.jobId, _fileSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionStartUploading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start uploading data package.
    /// </summary>
    public void logUploadSessionStartUploading()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionUploadingStart(this.packageId, this.dataStoreName, this.jobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionFinishUploading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish uploading data package.
    /// </summary>
    public void logUploadSessionFinishUploading()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionUploadingStop(this.packageId, this.dataStoreName, this.jobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionStartPreparingReadRequestHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start preparing read request header.
    /// </summary>
    public void logUploadSessionStartPreparingReadRequestHeader()
    {
        guid emptyGuid;
        ApplicationEventSource::EventWriteRetailCdxUploadSessionPreparingReadRequestHeaderStart(emptyGuid, this.dataStoreName, this.jobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionFinishPreparingReadRequestHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log preparing read request header.
    /// </summary>
    public void logUploadSessionFinishPreparingReadRequestHeader()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionPreparingReadRequestHeaderStop(this.packageId, this.dataStoreName, this.jobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionStartProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start processing upload session.
    /// </summary>
    public void logUploadSessionStartProcessing()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionProcessingStart(this.dataStoreName, this.jobId, this.uploadSession);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionFinishProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish processing upload session.
    /// </summary>
    public void logUploadSessionFinishProcessing()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionProcessingStop(this.dataStoreName, this.jobId, this.uploadSession);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionStartDownloading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start downloading data package.
    /// </summary>
    public void logUploadSessionStartDownloading()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionDownloadingStart(this.dataStoreName, this.jobId, this.uploadSession);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionFinishDownloading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish downloading data package.
    /// </summary>
    public void logUploadSessionFinishDownloading()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionDownloadingStop(this.dataStoreName, this.jobId, this.uploadSession);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionStartDecompressing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start decompressing data package.
    /// </summary>
    public void logUploadSessionStartDecompressing()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionDecompressingStart(this.dataStoreName, this.jobId, this.uploadSession);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionFinishDecompressing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish decompressing data package.
    /// </summary>
    public void logUploadSessionFinishDecompressing()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionDecompressingStop(this.dataStoreName, this.jobId, this.uploadSession);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionCheckSumValidationFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log checksum validation failure in upload session.
    /// </summary>
    public void logUploadSessionCheckSumValidationFailed()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionCheckSumValidationFailed(this.dataStoreName, this.jobId, this.uploadSession);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionStartApplying</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start applying data package.
    /// </summary>
    public void logUploadSessionStartApplying()
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionApplyingStart(this.packageId, this.dataStoreName, this.jobId, this.uploadSession, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionFinishApplying</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish applying data package.
    /// </summary>
    /// <param name = "_rowsAffected">Number of rows affected.</param>
    public void logUploadSessionFinishApplying(RetailCDXRowsAffected _rowsAffected)
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionApplyingStop(this.packageId, this.dataStoreName, this.jobId, this.uploadSession, _rowsAffected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionStartBulkCopying</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start bulkcopying data for table.
    /// </summary>
    /// <param name = "_tableName">Name of the table.</param>
    public void logUploadSessionStartBulkCopying(TableName _tableName)
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionBulkCopyingStart(this.packageId, this.dataStoreName, this.jobId, this.uploadSession, _tableName, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionFinishBulkCopying</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish bulkcopying data package.
    /// </summary>
    /// <param name = "_tableName">Name of the table.</param>
    /// <param name = "_rowsAffected">Number of rows affected.</param>
    public void logUploadSessionFinishBulkCopying(TableName _tableName, RetailCDXRowsAffected _rowsAffected)
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionBulkCopyingStop(this.packageId, this.dataStoreName, this.jobId, this.uploadSession, _tableName, _rowsAffected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionStartInserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log start inserting data to target table.
    /// </summary>
    /// <param name = "_tableName">Name of the table.</param>
    public void logUploadSessionStartInserting(TableName _tableName)
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionInsertingStart(this.packageId, this.dataStoreName, this.jobId, this.uploadSession, _tableName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionFinishInserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log finish inserting data to target table.
    /// </summary>
    /// <param name = "_tableName">Name of the table.</param>
    public void logUploadSessionFinishInserting(TableName _tableName)
    {
        ApplicationEventSource::EventWriteRetailCdxUploadSessionInsertingStop(this.packageId, this.dataStoreName, this.jobId, this.uploadSession, _tableName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionProcessingFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log upload session processing failure.
    /// </summary>
    /// <param name = "_errorMessage">Error message.</param>
    /// <param name = "_tryCount">Try count.</param>
    /// <param name = "_maxTryCount">Max try count.</param>
    public void logUploadSessionProcessingFailed(str _errorMessage, int _tryCount, int _maxTryCount)
    {
        int                             sessionStatus;
        RetailCDXFileSize               fileSize;
        RetailCDXRowsAffected           rowsAffected;

        SetEnumerator sessionsEnumerator = sessions.getEnumerator();

        while(sessionsEnumerator.moveNext())
        {
            RetailCDXSessionNumber sessionNumber = sessionsEnumerator.current();

            container sessionInfo = this.getSessionInfo(sessionNumber);
            
            if (conLen(sessionInfo))
            {
                [sessionStatus, fileSize, rowsAffected] = sessionInfo;
            }

            ApplicationEventSource::EventWriteRetailCdxUploadSessionProcessingFailed(this.packageId, this.dataStoreName, this.jobId, this.uploadSession, _errorMessage, _tryCount, _maxTryCount, sessionStatus, this.dataStoreType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUpdateChannelDbDownloadSessionFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log update download session in channel database failure.
    /// </summary>
    /// <param name = "_errorMessage">Error message.</param>
    public void logUpdateChannelDbDownloadSessionFailed(str _errorMessage)
    {
        ApplicationEventSource::EventWriteRetailCdxUpdateChannelDbDownloadSessionFailed(this.dataStoreName, this.session, _errorMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionCreateLocalUploadSessionFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log create local upload session failure.
    /// </summary>
    /// <param name = "_errorMessage">Error message.</param>
    public void logUploadSessionCreateLocalUploadSessionFailed(str _errorMessage)
    {
        System.Reflection.MethodInfo eventWriteMethod = applicationEventSourceType.GetMethod('EventWriteRetailCdxUploadSessionCreateLocalUploadSessionFailed');

        if (eventWriteMethod != null)
        {
            eventWriteMethod.Invoke(applicationEventSourceType, [this.packageId, this.dataStoreName, this.jobId, _errorMessage]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUploadSessionCreateAXUploadSessionFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log create AX upload session failure.
    /// </summary>
    /// <param name = "_localUploadSessionId">local upload session Id.</param>
    /// <param name = "_errorMessage">Error message.</param>
    public void logUploadSessionCreateAXUploadSessionFailed(RetailCDXSessionNumber _localUploadSessionId, str _errorMessage)
    {
        System.Reflection.MethodInfo eventWriteMethod = applicationEventSourceType.GetMethod('EventWriteRetailCdxUploadSessionCreateAXUploadSessionFailed');

        if (eventWriteMethod != null)
        {
            eventWriteMethod.Invoke(applicationEventSourceType, [this.packageId, this.dataStoreName, this.jobId, _localUploadSessionId, _errorMessage]);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>