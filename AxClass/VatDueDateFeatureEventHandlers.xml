<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VatDueDateFeatureEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VatDueDateFeatureEventHandlers</c> class contains VatDueDateFeature-related event handlers.
/// </summary>
public static class VatDueDateFeatureEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>menuItemFeatureHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the visibility of "VAT register transactions" menu item based on country-context and feature exposure.
    /// </summary>
    /// <param name = "_rootMenu">Root menu.</param>
    /// <param name = "_subMenu">Sub menu.</param>
    /// <param name = "_visible">Whether or not the submenu should be visible.</param>
    [SubscribesTo(classstr(SysMenuNavigationObjectFactory), staticdelegatestr(SysMenuNavigationObjectFactory, checkAddSubMenuDelegate))]
    public static void menuItemFeatureHandler(
        SysDictMenu     _rootMenu,
        SysDictMenu     _subMenu,
        SysBoxedBoolean _visible)
    {
        if (_subMenu.isMenuItem())
        {
            var metaElement = _subMenu.GetMenuItemMetaElement();
            if (metaElement != null)
            {
                if (metaElement.Name == menuItemDisplayStr(RegisterVAT_W))
                {
                    _visible.value = false;
                }
                if (metaElement.Name == menuItemDisplayStr(RegisterVAT_W_V2))
                {
                    _visible.value = TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysFeatureStateV0_onValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the feature can be disabled.
    /// </summary>
    /// <param name = "_sender">The <c>FeatureManagementState</c> record to be written.</param>
    /// <param name = "_e">The event arguments. The argument ValidateResult is used to communicate the validation results.</param>
    [DataEventHandler(tableStr(FeatureManagementState), DataEventType::ValidatedWrite)]
    public static void SysFeatureStateV0_onValidatedWrite(Common _sender, DataEventArgs _e)
    {
        ValidateEventArgs validateEventArgs = _e as ValidateEventArgs;
        FeatureManagementState featureManagementState = _sender;
        boolean ret = true;

        if (   featureManagementState.Name == FeatureStateProvider::featureName(VatDueDateFeature::instance())
            && featureManagementState.orig().IsEnabled == NoYes::Yes
            && featureManagementState.IsEnabled == NoYes::No)
        {
            #ISOCountryRegionCodes
            CompanyInfo companyInfo;
            container dataAreaCon;

            while select DataArea from companyInfo
            {
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT], companyInfo.DataArea))
                {
                    changecompany(companyInfo.DataArea)
                    {
                        if (TaxParameters::find().ReportUseVatDueDate_W)
                        {
                            dataAreaCon += companyInfo.DataArea;
                        }
                    }
                }
            }

            if (dataAreaCon != conNull())
            {
                ret = checkFailed(strFmt("@VatDueDate:CannotDisableFeatureWarningMessage",
                                    fieldPName(TaxParameters, ReportUseVatDueDate_W),
                                    con2Str(dataAreaCon, ', ')));
            }
        }

        if (!ret)
        {
            validateEventArgs.parmValidateResult(ret);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>