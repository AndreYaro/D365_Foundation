<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConsolidationEngine</c> class contains the main logic of the Manual shipment consolidation feature.
/// </summary>
internal class WHSShipConsolidationEngine
{
    private WHSShipConsolidationQueryCriteria   queryCriteria;
    private WHSShipConsolidationSessionRecId    shipConsolidationSessionId;
    private WHSWarehouseReleaseQueryBuilder     warehouseReleaseQueryBuilder;
    private SessionId                           clientSessionId;

    #xppTexts
    #define.CurrentVersion(1)

    #localmacro.CurrentList
        shipConsolidationSessionId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>WHSShipConsolidationEngine</c> class.
    /// </summary>
    /// <param name = "_queryCriteria">Parameters for the proposed shipments.</param>
    /// <returns>Instance of the <c>WHSShipConsolidationEngine</c> class.</returns>
    internal static WHSShipConsolidationEngine construct()
    {
        WHSShipConsolidationEngine shipConsolidationEngine = new WHSShipConsolidationEngine();

        return shipConsolidationEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>WHSShipConsolidationEngine</c> class.
    /// </summary>
    /// <param name = "_parameters">Packed parameters.</param>
    /// <returns>Instance of the <c>WHSShipConsolidationEngine</c> class.</returns>
    internal static WHSShipConsolidationEngine create(container _parameters)
    {
        WHSShipConsolidationEngine shipConsolidationEngine = WHSShipConsolidationEngine::construct();

        shipConsolidationEngine.unpack(_parameters);

        return shipConsolidationEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    internal container pack()
    {
        return [#CurrentVersion, queryCriteria.pack(), #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    internal void unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);
        container queryCriteriaPacked;

        switch (version)
        {
            case #CurrentVersion:
                [version, queryCriteriaPacked, #CurrentList] = _packedClass;
                queryCriteria = WHSShipConsolidationQueryCriteria::create(queryCriteriaPacked);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryCriteria</Name>
				<Source><![CDATA[
    internal WHSShipConsolidationQueryCriteria parmQueryCriteria(WHSShipConsolidationQueryCriteria _queryCriteria)
    {
        queryCriteria = _queryCriteria;

        return queryCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipConsolidationSessionId</Name>
				<Source><![CDATA[
    internal WHSShipConsolidationSessionRecId parmShipConsolidationSessionId()
    {
        return shipConsolidationSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClientSessionId</Name>
				<Source><![CDATA[
    private SessionId parmClientSessionId(SessionId _clientSessionId = clientSessionId)
    {
        clientSessionId = _clientSessionId;

        return clientSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipConsolidationErrorList2Str</Name>
				<Source><![CDATA[
    private static str shipConsolidationErrorList2Str(List _errors)
    {
        str ret;

        ListEnumerator listEnumerator = _errors.getEnumerator();

        while (listEnumerator.moveNext())
        {
            WHSShipConsolidationError shipConsolidationError = listEnumerator.current();

            ret += (ret ? #newLine : '') + shipConsolidationError.labelDescription();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warehouseReleaseQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>WHSWarehouseReleaseQueryBuilder</c> instance used for building the query to select load lines that can be released to the warehouse.
    /// </summary>
    /// <returns>A <c>WHSWarehouseReleaseQueryBuilder</c> instance.</returns>
    private WHSWarehouseReleaseQueryBuilder warehouseReleaseQueryBuilder()
    {
        if (!warehouseReleaseQueryBuilder)
        {
            warehouseReleaseQueryBuilder = WHSWarehouseReleaseQueryBuilder::construct();
        }

        return warehouseReleaseQueryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnlinkedShipmentContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes unlinked shipment consolidation content records.
    /// </summary>
    private void updateUnlinkedShipmentContent()
    {
        WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;
        WHSShipConsolidationProposedShipment        shipConsolidationProposedShipment;

        delete_from shipConsolidationProposedShipment
            where shipConsolidationProposedShipment.ShipConsolidationSession == shipConsolidationSessionId
        notexists join shipConsolidationProposedShipmentContent
            where shipConsolidationProposedShipmentContent.ProposedShipment == shipConsolidationProposedShipment.RecId;

        update_recordset shipConsolidationProposedShipmentContent
            setting ProposedShipment = 0
            where shipConsolidationProposedShipmentContent.ShipConsolidationSession == shipConsolidationSessionId
            &&    shipConsolidationProposedShipmentContent.ProposedShipment
        notexists join shipConsolidationProposedShipment
            where shipConsolidationProposedShipment.RecId == shipConsolidationProposedShipmentContent.ProposedShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCriteriaQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the query object for the shipment records.
    /// </summary>
    /// <returns>
    /// A query object for the shipment records.
    /// </returns>
    private Query getCriteriaQuery()
    {
        WHSShipConsolidationPolicyTypeProvider policyTypeProvider = WHSShipConsolidationPolicyTypeProvider::singletonFromType(queryCriteria.parmShipConsolidationPolicyType());
        WHSShipConsolidationQueryBuilder       queryBuilder = policyTypeProvider.getShipConsolidationQueryBuilder();
        Query                                  query = queryBuilder.buildQuery(queryCriteria);

        query.validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixQueryDSForInsert</Name>
				<Source><![CDATA[
    private void fixQueryDSForInsert(QueryBuildDataSource _qbDS)
    {
        _qbDS.fields().dynamic(QueryFieldListDynamic::No);
        _qbDS.fields().clearFieldList();

        for (int i=_qbDS.childDataSourceCount(); i>0; i--)
        {
            this.fixQueryDSForInsert(_qbDS.childDataSourceNo(i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposeShipments</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates proposed shipments in the <c>WHSShipConsolidationProposedShipment</c> table.
    /// </summary>
    /// <returns>The shipment consolidation session Id.</returns>
    private WHSShipConsolidationSessionRecId proposeShipments()
    {
        Query                                query = this.getCriteriaQuery();
        QueryBuildDataSource                 shipmentTableDS = query.dataSourceTable(tableNum(WHSShipmentTable));
        int									 proposedGroup;
        Set                                  policies = new Set(extendedTypeId2Type(extendedTypeNum(RecId)));
        RecordInsertList                     proposedShipmentContentInsertList = new RecordInsertList(tableNum(WHSShipConsolidationProposedShipmentContent));
        WHSShipConsolidationSession          shipConsolidationSession;
        Set                                  shipments;
        WHSShipConsolidationProposedShipment shipConsolidationProposedShipment;

        void createShipConsolidationProposedShipmentContent(WHSShipmentTable _shipmentTable)
        {
            if (!shipments || !shipments.in(_shipmentTable.ShipmentId))
            {
                WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;

                shipConsolidationProposedShipmentContent.initValue();
                shipConsolidationProposedShipmentContent.ShipConsolidationSession = shipConsolidationSession.RecId;
                shipConsolidationProposedShipmentContent.ShipmentId               = _shipmentTable.ShipmentId;
                shipConsolidationProposedShipmentContent.ProposedGroup            = proposedGroup;
                shipConsolidationProposedShipmentContent.TotalWeight              = _shipmentTable.displayTotalWeight();
                shipConsolidationProposedShipmentContent.TotalVolume              = _shipmentTable.displayTotalVolume();
                shipConsolidationProposedShipmentContent.ProposedShipment         = shipConsolidationProposedShipment.RecId;

                proposedShipmentContentInsertList.add(shipConsolidationProposedShipmentContent);

                if (shipments)
                {
                    shipments.add(_shipmentTable.ShipmentId);
                }
            }
        }

        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = instrumentationLogger.shipConsolidationPolicyActivities().manualConsolidationProposal())
        {
            WHSShipmentTable shipmentTable;
            WHSTmpShipmentId tmpShipment;

            this.fixQueryDSForInsert(shipmentTableDS);
            shipmentTableDS.addSelectionField(fieldNum(WHSShipmentTable, ShipmentId));
            Map fieldMapping = new Map(Types::String, Types::Container);
            fieldMapping.insert(fieldStr(WHSTmpShipmentId, ShipmentId), [shipmentTableDS.uniqueId(), fieldStr(WHSShipmentTable, ShipmentId)]);
            Query::insert_recordset(tmpShipment, fieldMapping, query);

            while select tmpShipment
			join shipmentTable
            group by ShipConsolidationPolicy
            where shipmentTable.ShipmentId == tmpShipment.ShipmentId
            {
                policies.add(shipmentTable.ShipConsolidationPolicy);
            }

            if (policies.empty())
            {
                return 0;
            }

            SetEnumerator policyEnumerator = policies.getEnumerator();

            ttsbegin;

            shipConsolidationSession.initValue();
            shipConsolidationSession.initClientSession(clientSessionId);
            shipConsolidationSession.insert();

            shipConsolidationSessionId = shipConsolidationSession.RecId;

            while (policyEnumerator.moveNext())
            {
                WHSShipConsolidationPolicy     shipConsolidationPolicy = WHSShipConsolidationPolicy::findByRecId(policyEnumerator.current());
                WHSShipConsolidationPolicyData shipConsolidationPolicyData = WHSShipConsolidationPolicyData::construct(shipConsolidationPolicy);

                shipments = null;

                if (shipConsolidationPolicy)
                {
                    shipments       = new Set(Types::String);
                    query           = this.warehouseReleaseQueryBuilder().buildBaseShipmentWorkbenchQueryForPolicyAndTmpShipment(shipConsolidationPolicyData);
                    shipmentTableDS = query.dataSourceTable(tableNum(WHSShipmentTable));

                    shipmentTableDS.addGroupByAndSelectionField(fieldNum(WHSShipmentTable, ShipmentId));

                    QueryRun queryRun  = new QueryRun(query);
                    queryRun.setRecord(tmpShipment);

                    while (queryRun.next())
                    {
                        WHSShipmentTable baseShipment = queryRun.get(tableNum(WHSShipmentTable));
                        Set              proposedShipmentContentIds = new Set(extendedTypeId2Type(extendedTypeNum(RecId)));

                        if (!shipments.in(baseShipment.ShipmentId))
                        {
                            shipConsolidationProposedShipment.clear();

                            if (shipConsolidationPolicy && !shipConsolidationPolicyData.shipConsolidationPolicyFields().empty())
                            {
                                shipConsolidationPolicyData.calcShipConsolidationFieldValues(baseShipment, queryRun);

                                Query    shipmentQuery = this.warehouseReleaseQueryBuilder().buildShipmentWorkbenchQueryForPolicyAndTmpShipment(shipConsolidationPolicyData, baseShipment);
                                QueryRun shipmentQueryRun = new QueryRun(shipmentQuery);
                                int		 contentCount = 0;

                                WHSTmpShipmentId tmpShipmentLocal;
                                tmpShipmentLocal.linkPhysicalTableInstance(tmpShipment);
                                shipmentQueryRun.setRecord(tmpShipmentLocal);

                                proposedGroup++;
                            
                                shipConsolidationProposedShipment.initValue();
                                shipConsolidationProposedShipment.ShipConsolidationSession = shipConsolidationSessionId;
                                shipConsolidationProposedShipment.insert();

                                while (shipmentQueryRun.next())
                                {
                                    contentCount++;
                                    shipmentTable = shipmentQueryRun.get(tableNum(WHSShipmentTable));
                                
                                    createShipConsolidationProposedShipmentContent(shipmentTable);
                                }

                                proposedShipmentContentInsertList.insertDatabase();

                                if (contentCount>1)
                                {
                                    this.calculateProposedShipments(shipConsolidationProposedShipment.RecId, false, null);
                                }
                                else
                                {
                                    WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;

                                    update_recordset shipConsolidationProposedShipmentContent
                                    setting ProposedShipment = 0
                                    where shipConsolidationProposedShipmentContent.ProposedShipment == shipConsolidationProposedShipment.RecId;

                                    shipConsolidationProposedShipment.delete();
                                }
                            }
                            else
                            {
                                proposedGroup++;

                                createShipConsolidationProposedShipmentContent(WHSShipmentTable::find(baseShipment.ShipmentId));
                            }
                        }
                    }
                }
                else // !shipConsolidationPolicy
                {
                    WHSShipmentTable baseShipment;

                    while select TableId
                    from tmpShipment
					join baseShipment
                    where baseShipment.ShipmentId              == tmpShipment.ShipmentId
                    &&    baseShipment.ShipConsolidationPolicy == policyEnumerator.current()
                    {
                        proposedGroup++;

                        createShipConsolidationProposedShipmentContent(baseShipment);
                    }
                }
            }

            proposedShipmentContentInsertList.insertDatabase();

            shipConsolidationSession.SessionState = WHSShipConsolidationSessionState::ShipmentsProposed;
            shipConsolidationSession.update();

            ttscommit;
        }

        return shipConsolidationSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposeShipmentsAsync</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates proposed shipments in the <c>WHSShipConsolidationProposedShipment</c> table.
    /// </summary>
    /// <returns>The shipment consolidation session Id.</returns>
    internal WHSShipConsolidationSessionRecId proposeShipmentsAsync()
    {
        if (SysOperationSandbox::CanSysOperationActivitiesExecuteInNewSession())
        {
            container parameters = [this.pack(), new Session().sessionId()];
            container result = SysOperationSandbox::callStaticMethod(classNum(WHSShipConsolidationEngine), staticMethodStr(WHSShipConsolidationEngine, proposeShipmentsAsyncMethod), parameters, "@WAX:ShipmentConsolidationWorkbench");
            boolean   resultOk = conLen(result) ? conPeek(result, 1) : false;

            if (!resultOk)
            {
                throw error("@SYS6144");
            }

            shipConsolidationSessionId = conPeek(result, 2);
        }
        else
        {
            shipConsolidationSessionId = this.proposeShipments();
        }

        return shipConsolidationSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposeShipmentsAsyncMethod</Name>
				<Source><![CDATA[
    private static container proposeShipmentsAsyncMethod(container _parameters)
    {
        WHSShipConsolidationEngine shipConsolidationEngine = WHSShipConsolidationEngine::create(conPeek(_parameters, 1));
        SessionId                  localClientSessionId = conPeek(_parameters, 2);

        shipConsolidationEngine.parmClientSessionId(localClientSessionId);

        return [true, shipConsolidationEngine.proposeShipments()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProposedShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the <c>WHSShipConsolidationProposedShipment</c> table.
    /// </summary>
    /// <param name = "_proposedShipmentRecId">Reference to a record of the <c>WHSShipConsolidationProposedShipment</c> table.</param>
    /// <param name = "_isUpdate">Determines whether the procedure was called for updating existing records or for creating new ones.</param>
    /// <param name = "_proposedShipmentContentIds">Shipments being moved into the proposed shipment.</param>
    /// <returns>A <c>RefRecId</c> of table's record for the base shipment</returns>
    private RefRecId calculateProposedShipments(RecId _proposedShipmentRecId, boolean _isUpdate, Set _proposedShipmentContentIds)
    {
        WHSShipmentTable                            shipmentTable;
        WHSShipmentTable                            baseShipment;
        Integer                                     prevProposedGroup;
        WHSLoadTemplate                             baseLoadTemplate;
        WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;
        WHSShipConsolidationProposedShipment        baseShipConsolidationProposedShipment;
        Weight                                      totalWeight;
        Volume                                      totalVolume;
        WHSShipConsolidationPolicy                  shipConsolidationPolicy;
        Integer                                     contentCount;
        WHSTmpShipmentId                            tmpShipment;
        WHSShipConsolidationProposedShipment        shipConsolidationProposedShipment;
        Map                                         proposedShipmentContentHardStopErrors;
        WHSTmpShipmentId                            tmpSkippedShipment;
        RecordInsertList                            tmpSkippedShipmentInsertList;

        Set proposedShipments = new Set(extendedTypeId2Type(extendedTypeNum(RecId)));

        void initBaseShipment(WHSShipmentTable _shipmentTable)
        {
            baseShipment.data(_shipmentTable);
            baseLoadTemplate = WHSLoadTemplate::find(WHSLoadTable::find(baseShipment.LoadId).LoadTemplateId);
        }

        void updateProposedShipment()
        {
            if (baseShipConsolidationProposedShipment)
            {
                if (contentCount > 1 || _isUpdate)
                {
                    baseShipConsolidationProposedShipment.update();

                    WHSShipConsolidationValidateWorkbench shipConsolidationValidate = WHSShipConsolidationValidateWorkbench::newWorkbench(baseShipConsolidationProposedShipment, WHSShipConsolidationValidationMode::GenerateAndSaveValidationResult);
                    shipConsolidationValidate.run();
                }
                else
                {
                    baseShipConsolidationProposedShipment.delete();
                }
            }
        }

        void preValidateProposedShipment()
        {
            proposedShipmentContentHardStopErrors = null;

            if (_isUpdate)
            {
                if (_proposedShipmentContentIds && !_proposedShipmentContentIds.empty())
                {
                    WHSShipConsolidationValidateWorkbench shipConsolidationValidate = WHSShipConsolidationValidateWorkbench::newWorkbenchMove(baseShipConsolidationProposedShipment, WHSShipConsolidationValidationMode::GenerateValidationResult, _proposedShipmentContentIds);

                    shipConsolidationValidate.run();

                    proposedShipmentContentHardStopErrors = shipConsolidationValidate.proposedShipmentContentHardStopErrors();
                }
            }
            else
            {
                WHSShipConsolidationValidateWorkbench shipConsolidationValidate = WHSShipConsolidationValidateWorkbench::newWorkbench(baseShipConsolidationProposedShipment, WHSShipConsolidationValidationMode::GenerateValidationResult);

                shipConsolidationValidate.run();

                proposedShipmentContentHardStopErrors = shipConsolidationValidate.proposedShipmentContentHardStopErrors();
            }

            if (!_isUpdate && proposedShipmentContentHardStopErrors && proposedShipmentContentHardStopErrors.exists(0))
            {
                baseShipment.clear();
            }
        }

        void resetProposedAndBaseShipments()
        {
            update_recordset shipConsolidationProposedShipment
                setting ShipmentId = ''
                where shipConsolidationProposedShipment.RecId                    == _proposedShipmentRecId
            notexists join shipConsolidationProposedShipmentContent
                where shipConsolidationProposedShipmentContent.ProposedShipment == shipConsolidationProposedShipment.RecId
                &&    shipConsolidationProposedShipmentContent.ShipmentId       == shipConsolidationProposedShipment.ShipmentId;

            select firstonly forupdate baseShipConsolidationProposedShipment
                where baseShipConsolidationProposedShipment.RecId == _proposedShipmentRecId
            outer join shipmentTable
                where shipmentTable.ShipmentId == baseShipConsolidationProposedShipment.ShipmentId
                &&    shipmentTable.ShipmentId;

            if (shipmentTable.ShipmentId)
            {
                initBaseShipment(shipmentTable);

                baseShipConsolidationProposedShipment.initFromBaseShipment(baseShipment);

                preValidateProposedShipment();
            }
        }

        void fillTmpShipmentTableBasedOnProposedShipmentContentIds()
        {
		    SetEnumerator    proposedShipmentContentIdsSetEnumerator = _proposedShipmentContentIds.getEnumerator();
            RecordInsertList tmpShipmentInsertList = new RecordInsertList(tmpShipment.TableId, true, true, true, true, true, tmpShipment);

            while (proposedShipmentContentIdsSetEnumerator.moveNext())
            {
                shipConsolidationProposedShipmentContent = WHSShipConsolidationProposedShipmentContent::find(proposedShipmentContentIdsSetEnumerator.current());
                tmpShipment.ShipmentId = shipConsolidationProposedShipmentContent.ShipmentId;

                tmpShipmentInsertList.add(tmpShipment);
            }

            tmpShipmentInsertList.insertDatabase();
        }

        void findShipConsolidationProposedShipmentContent()
        {
            if (_proposedShipmentContentIds && !_proposedShipmentContentIds.empty())
            {
                fillTmpShipmentTableBasedOnProposedShipmentContentIds();

                if (_proposedShipmentRecId)
                {
                    WHSTmpShipmentId tmpShipmentLocal;

                    tmpShipmentLocal.linkPhysicalTableInstance(tmpShipment);

                    insert_recordset tmpShipment (ShipmentId)
                        select ShipmentId
                        from shipConsolidationProposedShipmentContent
                        where shipConsolidationProposedShipmentContent.ShipConsolidationSession == shipConsolidationSessionId
                        &&    shipConsolidationProposedShipmentContent.ProposedShipment         == _proposedShipmentRecId
                    notexists join tmpShipmentLocal
                        where tmpShipmentLocal.ShipmentId == shipConsolidationProposedShipmentContent.ShipmentId;
                }

                select forupdate shipConsolidationProposedShipmentContent
                    where shipConsolidationProposedShipmentContent.ShipConsolidationSession == shipConsolidationSessionId
                join TableId
                    from tmpShipment
                    where tmpShipment.ShipmentId == shipConsolidationProposedShipmentContent.ShipmentId
                outer join shipmentTable
                    order by ShipmentStatus desc, ShipmentId asc
                    where shipmentTable.ShipmentId == shipConsolidationProposedShipmentContent.ShipmentId;
            }
            else
            {
                select forupdate shipConsolidationProposedShipmentContent
                    where shipConsolidationProposedShipmentContent.ShipConsolidationSession == shipConsolidationSessionId
                    &&    shipConsolidationProposedShipmentContent.ProposedShipment         == _proposedShipmentRecId
                outer join shipmentTable
                    order by ShipmentStatus desc, ShipmentId asc
                    where shipmentTable.ShipmentId == shipConsolidationProposedShipmentContent.ShipmentId;
            }
        }

        void findSkippedShipConsolidationProposedShipmentContent()
        {
            tmpSkippedShipmentInsertList.insertDatabase();

            if (baseShipment.ShipmentId)
            {
                select forupdate shipConsolidationProposedShipmentContent
                    where shipConsolidationProposedShipmentContent.ShipConsolidationSession == shipConsolidationSessionId
                join TableId
                    from tmpSkippedShipment
                    where tmpSkippedShipment.ShipmentId == shipConsolidationProposedShipmentContent.ShipmentId
                outer join shipmentTable
                    order by ShipmentStatus desc, ShipmentId asc
                    where shipmentTable.ShipmentId == shipConsolidationProposedShipmentContent.ShipmentId;
            }
            else
            {
                update_recordset shipConsolidationProposedShipmentContent
                    setting ProposedShipment = 0
                    where shipConsolidationProposedShipmentContent.ShipConsolidationSession == shipConsolidationSessionId
                exists join tmpSkippedShipment
                    where tmpSkippedShipment.ShipmentId == shipConsolidationProposedShipmentContent.ShipmentId;

                shipConsolidationProposedShipmentContent.clear();
            }
        }

        void removeProposedContentFromProposedShipment()
        {
            if (shipConsolidationProposedShipmentContent.ProposedShipment)
            {
                shipConsolidationProposedShipment = WHSShipConsolidationProposedShipment::find(shipConsolidationProposedShipmentContent.ProposedShipment, true);

                if (shipConsolidationProposedShipment)
                {
                    proposedShipments.add(shipConsolidationProposedShipment.RecId);

                    if (shipConsolidationProposedShipment.ShipmentId == shipConsolidationProposedShipmentContent.ShipmentId)
                    {
                        shipConsolidationProposedShipment.ShipmentId = '';
                        shipConsolidationProposedShipment.update();
                    }
                }

                shipConsolidationProposedShipmentContent.ProposedShipment = 0;
                shipConsolidationProposedShipmentContent.update();
            }
        }

        ttsbegin;

        if (_proposedShipmentRecId)
        {
            resetProposedAndBaseShipments();
        }

        findShipConsolidationProposedShipmentContent();

        while (shipConsolidationProposedShipmentContent)
        {
            if (!shipmentTable.ShipmentId)
            {
                removeProposedContentFromProposedShipment();
            }
            else
            {
                boolean skipShipment = false;

                if (!_isUpdate && baseShipment.ShipmentId)
                {
                    boolean consolidateShipment = true;

                    if (queryCriteria.parmSplitByLoadTemplateMaxValues() &&
                        baseLoadTemplate.LoadMaxWeight &&
                        totalWeight + shipConsolidationProposedShipmentContent.TotalWeight > baseLoadTemplate.LoadMaxWeight)
                    {
                        consolidateShipment = false;
                    }

                    if (consolidateShipment &&
                        queryCriteria.parmSplitByLoadTemplateMaxValues() &&
                        baseLoadTemplate.LoadMaxVolume &&
                        totalVolume + shipConsolidationProposedShipmentContent.TotalVolume > baseLoadTemplate.LoadMaxVolume)
                    {
                        consolidateShipment = false;
                    }

                    if (!consolidateShipment)
                    {
                        updateProposedShipment();
                        baseShipment.clear();
                        baseShipConsolidationProposedShipment.clear();

                        totalWeight       = 0;
                        totalVolume       = 0;
                        contentCount      = 0;
                    }
                }

                if (!baseShipment.ShipmentId)
                {
                    initBaseShipment(shipmentTable);

                    if (baseShipConsolidationProposedShipment)
                    {
                        baseShipConsolidationProposedShipment.initFromProposedShipmentContent(shipConsolidationProposedShipmentContent);
                        baseShipConsolidationProposedShipment.initFromBaseShipment(baseShipment);
                    }
                    else
                    {
                        baseShipConsolidationProposedShipment.clear();
                        baseShipConsolidationProposedShipment.initValue();
                        baseShipConsolidationProposedShipment.insert();
                        baseShipConsolidationProposedShipment.initFromProposedShipmentContent(shipConsolidationProposedShipmentContent);
                        baseShipConsolidationProposedShipment.initFromBaseShipment(baseShipment);
                    }

                    preValidateProposedShipment();

                    if (!baseShipment.ShipmentId)
                    {
                        if (!tmpSkippedShipmentInsertList)
                        {
                            tmpSkippedShipmentInsertList = new RecordInsertList(tmpSkippedShipment.TableId, true, true, true, true, true, tmpSkippedShipment);
                        }

                        tmpSkippedShipment.ShipmentId = shipConsolidationProposedShipmentContent.ShipmentId;

                        tmpSkippedShipmentInsertList.add(tmpSkippedShipment);

                        skipShipment = true;
                    }
                }

                if (!skipShipment && proposedShipmentContentHardStopErrors && proposedShipmentContentHardStopErrors.exists(shipConsolidationProposedShipmentContent.RecId))
                {
                    if (!_isUpdate)
                    {
                        skipShipment = true;
                    }
                    else if (_proposedShipmentContentIds && _proposedShipmentContentIds.in(shipConsolidationProposedShipmentContent.RecId))
                    {
                        checkFailed(strFmt("@WAX:Error_ShipmentCanNotBeConsolidatedWithDueToTheFollowingHardStopErrors", shipConsolidationProposedShipmentContent.ShipmentId, baseShipment.ShipmentId) + #newline + WHSShipConsolidationEngine::shipConsolidationErrorList2Str(proposedShipmentContentHardStopErrors.lookup(shipConsolidationProposedShipmentContent.RecId)));

                        skipShipment = true;
                    }
                }

                if (skipShipment)
                {
                    if (!_isUpdate)
                    {
                        shipConsolidationProposedShipmentContent.ProposedShipment = 0;
                    }
                }
                else
                {
                    if (!shipConsolidationPolicy || shipConsolidationPolicy.RecId != baseShipment.ShipConsolidationPolicy)
                    {
                        shipConsolidationPolicy = WHSShipConsolidationPolicy::findByRecId(baseShipment.ShipConsolidationPolicy);
                    }

                    if (shipConsolidationProposedShipmentContent.ProposedShipment && shipConsolidationProposedShipmentContent.ProposedShipment != baseShipConsolidationProposedShipment.RecId)
                    {
                        shipConsolidationProposedShipment = WHSShipConsolidationProposedShipment::find(shipConsolidationProposedShipmentContent.ProposedShipment, true);

                        if (shipConsolidationProposedShipment)
                        {
                            proposedShipments.add(shipConsolidationProposedShipment.RecId);

                            if (shipConsolidationProposedShipment.ShipmentId == shipConsolidationProposedShipmentContent.ShipmentId)
                            {
                                shipConsolidationProposedShipment.ShipmentId = '';
                                shipConsolidationProposedShipment.update();
                            }
                        }
                    }

                    shipConsolidationProposedShipmentContent.ProposedShipment = baseShipConsolidationProposedShipment.RecId;

                    if (baseShipment.ShipmentId != shipmentTable.ShipmentId)
                    {
                        baseShipment.consolidateShipmentStatus(shipmentTable);
                        baseShipment.consolidateLineShipmentForPolicy(shipmentTable, shipConsolidationPolicy);
                    }

                    totalWeight += shipConsolidationProposedShipmentContent.TotalWeight;
                    totalVolume += shipConsolidationProposedShipmentContent.TotalVolume;
                    contentCount++;
                }

                shipConsolidationProposedShipmentContent.update();
            }

            next shipConsolidationProposedShipmentContent;

            if (!shipConsolidationProposedShipmentContent && tmpSkippedShipmentInsertList)
            {
                findSkippedShipConsolidationProposedShipmentContent();
            }
        }

        updateProposedShipment();

        this.updateUnlinkedShipmentContent();

        while select RecId
            from shipConsolidationProposedShipment
            where shipConsolidationProposedShipment.ShipConsolidationSession == shipConsolidationSessionId
            &&   !shipConsolidationProposedShipment.ShipmentId
        {
            proposedShipments.add(shipConsolidationProposedShipment.RecId);
        }

        SetEnumerator setEnumerator = proposedShipments.getEnumerator();
        
        while (setEnumerator.moveNext())
        {
            RecId proposedShipmentRecId = setEnumerator.current();

            this.updateProposedShipments(proposedShipmentRecId, null);
        }

        ttscommit;

        return baseShipConsolidationProposedShipment.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProposedShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates records in the <c>WHSShipConsolidationProposedShipment</c> table.
    /// </summary>
    /// <param name = "_proposedShipmentRecId">Reference to a record of the <c>WHSShipConsolidationProposedShipment</c> table.</param>
    /// <param name = "_proposedShipmentContentIds">Shipments being moved into the proposed shipment.</param>
    /// <returns>A <c>RefRecId</c> of table's record for the base shipment</returns>
    internal RefRecId updateProposedShipments(RecId _proposedShipmentRecId, Set _proposedShipmentContentIds)
    {
        RefRecId baseProposedShipmentRecId = this.calculateProposedShipments(_proposedShipmentRecId, true, _proposedShipmentContentIds);

        return baseProposedShipmentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReferenceToProposedShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the references from a list of <c>WHSShipConsolidationProposedShipmentContent</c> records to <c>WHSShipConsolidationProposedShipment</c> entry
    /// </summary>
    /// <param name = "_proposedShipmentContentIds">Set of RecIds of shipment contents to be updated.</param>
    internal void removeReferenceToProposedShipment(Set _proposedShipmentContentIds)
    {
        this.setReferenceToProposedShipment(_proposedShipmentContentIds, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReferenceToProposedShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// On the specified proposed shipment contents, sets the reference top to the specified proposed shipment.
    /// </summary>
    /// <param name = "_proposedShipmentContentIds">Set of RecIds of shipment contents to be updated.</param>
    /// <param name = "_proposedShipmentId">Shipment Id a proposed shipment.</param>
    internal void setReferenceToProposedShipment(Set _proposedShipmentContentIds, WHSShipmentId _proposedShipmentId)
    {
        if (!_proposedShipmentContentIds || _proposedShipmentContentIds.empty())
        {
            return;
        }

        WHSShipConsolidationProposedShipment  shipConsolidationProposedShipment = _proposedShipmentId ? WHSShipConsolidationProposedShipment::findByShipment(shipConsolidationSessionId, _proposedShipmentId) : null;

        if (shipConsolidationProposedShipment)
        {
            this.updateProposedShipments(shipConsolidationProposedShipment.RecId, _proposedShipmentContentIds);
        }
        else
        {
            SetEnumerator                               se = _proposedShipmentContentIds.getEnumerator();
            WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;
            Set                                         proposedShipments = new Set(extendedTypeId2Type(extendedTypeNum(RecId)));

            ttsbegin;

            while (se.moveNext())
            {
                shipConsolidationProposedShipmentContent = WHSShipConsolidationProposedShipmentContent::find(se.current(), true);

                if (shipConsolidationProposedShipmentContent)
                {
                    if (shipConsolidationProposedShipmentContent.ProposedShipment)
                    {
                        proposedShipments.add(shipConsolidationProposedShipmentContent.ProposedShipment);
                    }

                    shipConsolidationProposedShipmentContent.ProposedShipment = shipConsolidationProposedShipment.RecId;
                    shipConsolidationProposedShipmentContent.ProposedGroup = 0;
                    shipConsolidationProposedShipmentContent.update();
                }
            }

            SetEnumerator setEnumerator = proposedShipments.getEnumerator();
        
            while (setEnumerator.moveNext())
            {
                RecId proposedShipmentRecId = setEnumerator.current();

                this.updateProposedShipments(proposedShipmentRecId, null);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProposedShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes specified proposed shipments.
    /// </summary>
    /// <param name = "_proposedShipmentIds">Set of RecIds of proposed shipments to be deleted.</param>
    internal void removeProposedShipments(Set _proposedShipmentIds)
    {
        if (!_proposedShipmentIds || _proposedShipmentIds.empty())
        {
            return;
        }

        SetEnumerator se = _proposedShipmentIds.getEnumerator();

        ttsbegin;

        while (se.moveNext())
        {
            WHSShipConsolidationProposedShipment shipConsolidationProposedShipment = WHSShipConsolidationProposedShipment::find(se.current(), true);

            if (shipConsolidationProposedShipment)
            {
                shipConsolidationProposedShipment.delete();
            }
        }

        this.updateUnlinkedShipmentContent();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContentAsBaseProposedShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes a shipment as a base shipment for consolidation.
    /// </summary>
    /// <param name = "_proposedShipmentContentRecId">RecId of the <c>WHSShipConsolidationProposedShipmentContent</c> table record.</param>
    internal void setContentAsBaseProposedShipment(RecId _proposedShipmentContentRecId)
    {
        if (!_proposedShipmentContentRecId)
        {
            return;
        }

        ttsbegin;

        WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent = WHSShipConsolidationProposedShipmentContent::find(_proposedShipmentContentRecId);

        if (!shipConsolidationProposedShipmentContent)
        {
            return;
        }

        if (shipConsolidationProposedShipmentContent.ProposedShipment)
        {
            WHSShipConsolidationProposedShipment shipConsolidationProposedShipment = WHSShipConsolidationProposedShipment::find(shipConsolidationProposedShipmentContent.ProposedShipment, true);

            shipConsolidationProposedShipment.ShipmentId = shipConsolidationProposedShipmentContent.ShipmentId;
            shipConsolidationProposedShipment.update();

            this.updateProposedShipments(shipConsolidationProposedShipment.RecId, null);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewBaseProposedShipmentFromContent</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates a new base shipment based on the selected unused shipments.
    /// </summary>
    /// <param name = "_proposedShipmentContentIds">Set of RecIds of proposed shipment content records to be used.</param>
    /// <returns>The <c>WHSShipConsolidationProposedShipment</c> table's record for the base shipment</returns>
    internal RefRecId createNewBaseProposedShipmentFromContent(Set _proposedShipmentContentIds)
    {
        RefRecId	baseProposedShipmentRecId;

		if (_proposedShipmentContentIds && !_proposedShipmentContentIds.empty())
        {
            baseProposedShipmentRecId = this.updateProposedShipments(0, _proposedShipmentContentIds);
        }

        return baseProposedShipmentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConsolidatedShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates consolidated shipments.
    /// </summary>
    /// <param name = "_selectedShipmentIds">A set of selected shipment IDs.</param>
    private void createConsolidatedShipments(Set _selectedShipmentIds)
    {
        WHSShipConsolidationSession          shipConsolidationSession = WHSShipConsolidationSession::find(shipConsolidationSessionId, true);
        WHSShipConsolidationProposedShipment shipConsolidationProposedShipment;
        WHSShipConsolidationError            shipConsolidationError;
        boolean                              exceptionOccured;

        int									 numOfOriginShipments;
        int									 numOfConsolidatedShipments;

        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = instrumentationLogger.shipConsolidationPolicyActivities().manualConsolidation())
        {
            if (!shipConsolidationSession)
            {
                throw error("@WAX:ShipmentConsolidationSessionWasNotFound");
            }

            if (shipConsolidationSession.SessionState != WHSShipConsolidationSessionState::ShipmentsProposed)
            {
                throw error(strFmt("@WAX:TheShipmentConsolidationSessionIsInAnUnexpectedState", shipConsolidationSession.SessionState, WHSShipConsolidationSessionState::ShipmentsProposed));
            }

            using (WHSShipmentTableConsolidateShipmentsContext shipmentTableConsolidateShipmentsContext = WHSShipmentTableConsolidateShipmentsContext::construct())
            {
                WHSTmpShipmentId tmpShipmentId;

                WHSShipConsolidationEngine::fillTmpShipmentTable(tmpShipmentId, _selectedShipmentIds);
				
				while select shipConsolidationProposedShipment
                    order by ShipConsolidationPolicy
                    where shipConsolidationProposedShipment.ShipConsolidationSession == shipConsolidationSessionId
				join tmpShipmentId
                    where tmpShipmentId.ShipmentId == shipConsolidationProposedShipment.ShipmentId
				notexists join shipConsolidationError
                    where  shipConsolidationError.ProposedShipment == shipConsolidationProposedShipment.RecId
                        && !shipConsolidationError.ErrorOverride
                {
                    try
                    {
                        setPrefix(shipConsolidationProposedShipment.ShipmentId);
                        shipmentTableConsolidateShipmentsContext.shipConsolidationProposedShipment = shipConsolidationProposedShipment;

                        WHSShipConsolidationProposedShipmentContent shipConsolidationProposedShipmentContent;
                        container shipmentIds = conNull();

                        while select ShipmentId
                            from shipConsolidationProposedShipmentContent
                            where  shipConsolidationProposedShipmentContent.ProposedShipment == shipConsolidationProposedShipment.RecId
                                && shipConsolidationProposedShipmentContent.ShipmentId       != shipConsolidationProposedShipment.ShipmentId
                        {
                            shipmentIds += shipConsolidationProposedShipmentContent.ShipmentId;
                            numOfOriginShipments++;
                        }

                        numOfConsolidatedShipments++;

						WHSShipmentTable::consolidateShipments(shipConsolidationProposedShipment.ShipmentId, shipmentIds, queryCriteria.parmUpdateScheduledShipDateTime());
                    }
                    catch
                    {
                        exceptionOccured = true;
                    }
                }
            }

            if (exceptionOccured)
            {
                warning("@WAX:SomeShipmentsCanNotBeConsolidated");
            }
            else
            {
                ttsbegin;

                shipConsolidationSession.SessionState = WHSShipConsolidationSessionState::ShipmentsCreated;
                shipConsolidationSession.update();

                ttscommit;

                WHSShipConsolidationSession::cleanUpSession(shipConsolidationSessionId);
            }

			instrumentationLogger.logInformation(strFmt('Number of origin shipments: %1', numOfOriginShipments));
			instrumentationLogger.logInformation(strFmt('Number of consolidated shipments: %1', numOfConsolidatedShipments));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConsolidatedShipmentsAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates consolidated shipments.
    /// </summary>
    internal void createConsolidatedShipmentsAsync(Set _selectedShipmentIds)
    {
        if (SysOperationSandbox::CanSysOperationActivitiesExecuteInNewSession())
        {
            container parameters = [this.pack(), _selectedShipmentIds.pack()];
            container result = SysOperationSandbox::callStaticMethod(classNum(WHSShipConsolidationEngine), staticMethodStr(WHSShipConsolidationEngine, createConsolidatedShipmentsAsyncMethod), parameters, "@WAX:ShipmentConsolidationWorkbench");
            boolean   resultOk = conLen(result) ? conPeek(result, 1) : false;

            if (!resultOk)
            {
                throw error("@SYS6144");
            }
        }
        else
        {
            this.createConsolidatedShipments(_selectedShipmentIds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConsolidatedShipmentsAsyncMethod</Name>
				<Source><![CDATA[
    private static container createConsolidatedShipmentsAsyncMethod(container _parameters)
    {
        WHSShipConsolidationEngine shipConsolidationEngine = WHSShipConsolidationEngine::create(conPeek(_parameters, 1));
        Set						   selectedShipmentsId = Set::create(conPeek(_parameters, 2));

        shipConsolidationEngine.createConsolidatedShipments(selectedShipmentsId);

        return [true];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpShipmentTable</Name>
				<Source><![CDATA[
    private static void fillTmpShipmentTable(WHSTmpShipmentId _tmpShipment, Set _shipmentIdSet)
    {
        SetEnumerator    setEnumerator = _shipmentIdSet.getEnumerator();
        RecordInsertList tmpShipmentInsertList = new RecordInsertList(_tmpShipment.TableId, true, true, true, true, true, _tmpShipment);

        while (setEnumerator.moveNext())
        {
            _tmpShipment.ShipmentId = setEnumerator.current();

			tmpShipmentInsertList.add(_tmpShipment);
        }

        tmpShipmentInsertList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>