<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransactionRoleParticipantProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
      
/// <summary>
///    The <c>BudgetManagerGlobalWorkflowParticipantProvider</c> class implements the <c>WorkflowParticipantProvider</c> interface
///    to provide the budget register entry role participants.
/// </summary>
public class BudgetTransactionRoleParticipantProvider implements WorkflowParticipantProvider
{
          
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParticipantTokens</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of participants to display in the workflow configuration user interface.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>WorkflowParticipantTokenList</c> class.
    /// </returns>
    public WorkflowParticipantTokenList getParticipantTokens()
    {
        WorkflowRoleParticipantProvider workflowRoleParticipantProvider = WorkflowRoleParticipantProvider::construct();

        return workflowRoleParticipantProvider.getParticipantTokens();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resolves a <c>WorkflowContext</c> class to a list of budget register entry users.
    /// </summary>
    /// <param name="_context">
    ///    An instance of the <c>WorkflowContext</c> class.
    /// </param>
    /// <param name="_participantTokenName">
    ///    The workflow participant token.
    /// </param>
    /// <returns>
    ///    An instance of the <c>WorkflowUserList</c> class.
    /// </returns>
    public WorkflowUserList resolve(WorkflowContext _context, WorkflowParticipantToken _participantTokenName)
    {
        WorkflowUserList userList = WorkflowUserList::construct();
        BudgetTransactionHeader budgetTransactionHeader;

        if (_context)
        {
            if (_context.parmTableId() == tableNum(BudgetTransactionHeader))
            {
                budgetTransactionHeader = BudgetTransactionHeader::find(_context.parmRecId());
            }
            else if (_context.parmTableId() == tableNum(BudgetTransactionLine))
            {
                budgetTransactionHeader = BudgetTransactionLine::find(_context.parmRecId()).getBudgetTransactionHeader();
            }
        }
        
        if (budgetTransactionHeader)
        {
            _context.parmCompanyId(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(budgetTransactionHeader.PrimaryLedger)));

            changecompany(_context.parmCompanyId())
            {
                WorkflowRoleParticipantProvider baseParticipantProvider = WorkflowRoleParticipantProvider::construct();
                userList = baseParticipantProvider.resolve(_context, _participantTokenName);
            }
        }

        return userList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetTransactionRoleParticipantProvider construct()
    {
        return new BudgetTransactionRoleParticipantProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>