<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetModeStrategyCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetModeStrategyCalculate</c> class represents the costing sheet properties and
///    behavior in the calculation mode.
/// </summary>
/// <remarks>
///    The calculation mode is primarily used when overhead costs over the input transaction data are
///    calculated.
/// </remarks>
class CostSheetModeStrategyCalculate extends CostSheetModeStrategy
{
    CostCalcTransData   costCalcTransData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCalculationFactorsQuery</Name>
				<Source><![CDATA[
    public Query buildCalculationFactorsQuery(CostSheetId       _costSheetId,
                                              CostSheetNodeId   _costSheetNodeId)
    {
        Query                   factorSelectionQuery = super(_costSheetId, _costSheetNodeId);

        if (! this.parmCostCalcTransData())
        {
            return factorSelectionQuery;
        }

        if (costCalcTransData.getBOMCalcItem())
        {
            var bomCalcItem = costCalcTransData.getBOMCalcItem();

            if (bomCalcItem.parmCostingVersionId() && bomCalcItem.parmBOMCalcFallBack() == BOMCalcFallBack::None)
            {
                QueryBuildDataSource qbdsBOMCalcFallBack = factorSelectionQuery.dataSourceTable(tableNum(CostSheetCalculationFactor));
                QueryBuildRange qbrCostingVersionStatus = qbdsBOMCalcFallBack.addRange(fieldNum(CostSheetCalculationFactor, CostingVersionStatus));
                qbrCostingVersionStatus.value(strFmt('((%4.%1 == %2) || (%4.%1 == %3))',
                                     fieldStr(CostSheetCalculationFactor, CostingVersionStatus),
                                     enum2int(CostingVersionStatus::Current),
                                     enum2int(CostingVersionStatus::Pending),
                                     qbdsBOMCalcFallBack.name()));

                QueryBuildRange qbrVersionId = qbdsBOMCalcFallBack.addRange(fieldNum(CostSheetCalculationFactor, VersionId));
                qbrVersionId.value(strFmt('((%3.%1 == "%2"))',
                                     fieldStr(CostSheetCalculationFactor, VersionId),
                                     costCalcTransData.getBOMCalcItem().parmCostingVersionId(),
                                     qbdsBOMCalcFallBack.name()));
            }
        }

        QueryBuildDataSource qbds = factorSelectionQuery.dataSourceTable(tableNum(CostSheetCalculationFactor));
        QueryBuildRange qbr = qbds.addRange(fieldNum(CostSheetCalculationFactor, ItemRelation));

        ItemGroupId itemGroupId = this.parmCostCalcTransData().getItemGroupId();
        str escapedItemGroupId = itemGroupId; // Using buffer because reassigning to itemGroupId causes errors later, if it contains spaces.
        if (itemGroupId)
        {
            escapedItemGroupId =  queryValue(ItemGroupId);
        }

        ItemId itemId = this.parmCostCalcTransData().getItemId();
        str escapedItemId = itemId; // Using buffer because reassigning to itemId causes errors later, if it contains spaces.
        if (itemId)
        {
            escapedItemId = queryValue(itemId);
        }

        qbr.value(strFmt('((%8.%1 == %2) || ((%8.%1 == %3) && (%8.%4 == "%5")) || ((%8.%1 == %6) && (%8.%4 == "%7")))',
                                                        fieldStr(CostSheetCalculationFactor, ItemCode),
                                                        enum2int(TableGroupAll::All),
                                                        enum2int(TableGroupAll::GroupId),
                                                        fieldStr(CostSheetCalculationFactor, ItemRelation),
                                                        escapedItemGroupId,
                                                        enum2int(TableGroupAll::Table),
                                                        escapedItemId,
                                                        qbds.name()));

        return factorSelectionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyCostSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the costing sheet can be modified in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the costing sheet can be modified; otherwise, false.
    /// </returns>
    public boolean canModifyCostSheet()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCostSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a costing sheet instance based on input data.
    /// </summary>
    /// <param name="_sheetId">
    ///    The costing sheet identifier.
    /// </param>
    /// <returns>
    ///    The costing sheet instance.
    /// </returns>
    /// <remarks>
    ///    If the input data is provided, this method checks whether the related costing sheet structure is
    ///    stored in the cache. If the related costing sheet structure is stored in the cache, the costing
    ///    sheet is unpacked and returned; otherwise, the new costing sheet is packed and saved to the cache.
    /// </remarks>
    public CostSheet createCostSheet(CostSheetId _sheetId)
    {
        CostSheetCache              costSheetCache;
        boolean                     saveToCache = false;

        CostSheetCostGroupImpact::generateFromCostSheet(_sheetId);

        if (costCalcTransData != null)
        {
            // Try to use the cache first
            CostSheetInputDataKey inputDataKey = costCalcTransData.key();
            if (inputDataKey != '')
            {
                select firstonly costSheetCache
                    where costSheetCache.SheetId == _sheetId
                       && costSheetCache.CostType == costType
                       && costSheetCache.InputDataKey == inputDataKey;

                if (costSheetCache.RecId != 0)
                {
                    return CostSheet::create(costSheetCache.PackedCostSheet);
                }
                else
                {
                    saveToCache = true;
                }
            }
        }

        CostSheet costSheet = super(_sheetId);
        Counter logCount;

        if (saveToCache)
        {
            UserConnection userConnection = new UserConnection();
            try
            {
                costSheetCache.setConnection(userConnection);
                userConnection.ttsbegin();
                costSheetCache.clear();
                costSheetCache.SheetId = _sheetId;
                costSheetCache.CostType = costType;
                costSheetCache.InputDataKey = costCalcTransData.key();
                costSheetCache.PackedCostSheet = costSheet.pack();
                logCount = infologLine();
                costSheetCache.insert();
                userConnection.ttscommit();
            }
            catch (Exception::DuplicateKeyException)
            {
                // A validation attempt on another user connection already inserted the costSheetCache record.
                userConnection.ttsabort();
                infolog.clear(logCount);
            }
            finally
            {
                userConnection.finalize();
            }
        }

        return costSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAllowedNodeIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a set of costing sheet node IDs for the current input.
    /// </summary>
    /// <param name="_sheetId">
    ///    The costing sheet identifier.
    /// </param>
    /// <remarks>
    ///    If no input data was provided, the full set of nodes will be used.
    /// </remarks>
    protected void fillAllowedNodeIdSet(CostSheetId _sheetId)
    {
        CostSheetCostGroupImpact    costSheetCostGroupImpact;
        CostSheetNodeTable          costSheetNodeTable;

        if (costCalcTransData != null)
        {
            CostTmpCalcTrans costTmpCalcTrans = costCalcTransData.getCostTmpCalcTrans();

            allowedNodeIdSet = new Set(Types::Integer);

            while select CostGroupId from costTmpCalcTrans
                group by CostGroupId
            {
                while select NodeId from costSheetCostGroupImpact
                exists join costSheetNodeTable
                    where costSheetNodeTable.NodeId == costSheetCostGroupImpact.NodeId
                       && costSheetNodeTable.SheetId == costSheetCostGroupImpact.SheetId
                       && costSheetCostGroupImpact.CostGroupId == costTmpCalcTrans.CostGroupId
                       && costSheetCostGroupImpact.SheetId == _sheetId
                       && (costSheetNodeTable.PriceType == costType
                        || costSheetNodeTable.Type == CostSheetNodeType::Root)
                {
                    allowedNodeIdSet.add(costSheetCostGroupImpact.NodeId);
                }
            }
        }
        else
        {
            super(_sheetId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the current costing sheet mode type.
    /// </summary>
    /// <returns>
    ///    The costing sheet mode type.
    /// </returns>
    public CostSheetMode getType()
    {
        return CostSheetMode::Calculate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDisplayUnMappedUnCoveredCostGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the cost groups that are not presented in the costing sheet or covered by the
    ///    default cost groups must be added to the costing sheet structure in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the unmapped cost groups must be added; otherwise, false.
    /// </returns>
    public boolean mustDisplayUnMappedUnCoveredCostGroups()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustFindUnMappedCostGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the unmapped cost groups must be found in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the cost groups must be found; otherwise, false.
    /// </returns>
    public boolean mustFindUnMappedCostGroups()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustLoadCalculationBasisAndFactors</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the indirect cost basis and factors must be loaded in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the basis and factors must be loaded; otherwise, false.
    /// </returns>
    public boolean mustLoadCalculationBasisAndFactors()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustLoadCostGroupSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the subnodes of the cost group nodes must be loaded in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the cost group subnodes must be loaded; otherwise, false.
    /// </returns>
    public boolean mustLoadCostGroupSubnodes()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustLoadSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the subnodes of the costing sheet nodes must be loaded in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the subnodes must be loaded; otherwise, false.
    /// </returns>
    public boolean mustLoadSubnodes()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostCalcTransData</Name>
				<Source><![CDATA[
    public CostCalcTransData parmCostCalcTransData(CostCalcTransData _costCalcTransData = costCalcTransData)
    {
        costCalcTransData = _costCalcTransData;

        return costCalcTransData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostSheetModeStrategyCalculate construct()
    {
        return new CostSheetModeStrategyCalculate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameter</Name>
				<Source><![CDATA[
    public static CostSheetModeStrategyCalculate newParameter(
        CostPriceType       _costType,
        CostCalcTransData   _costCalcTransData = null)
    {
        CostSheetModeStrategyCalculate modeStrategy = CostSheetModeStrategyCalculate::construct();
        modeStrategy.parmCostType(_costType);
        modeStrategy.parmCostCalcTransData(_costCalcTransData);

        return modeStrategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>