<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransCostTransSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransCostTransSale extends ProjTransCostTrans
{
    ProjCostTransSale   projCostTransSale;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that indicates whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        ProjFundingSource   projFundingSource;
        boolean             ret;
        
        ProjTable projTableLocal = this.projTable();

        if (ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(projTableLocal, ProjTransType::Cost))
        {
            ret = super(_chargeable);
        }
        else if (projTableLocal.psaDoInvoiceCost == NoYes::Yes && ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTableLocal, ProjTransType::Cost))
        {
            ret = super(_chargeable);
        }

        else
        {
            ret = false;
        }

        if (ret == true)
        {
            projFundingSource = ProjFundingSource::find(this.fundingSource());
            if ((projFundingSource.FundingType == ProjFundingType::Organization) ||
                (projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource))
            {
                ret = false;
            }
        }

        if (ret)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoiceable(this.projId(), this.categoryId(), this.psaContractLineNum(), this.transType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost template ID for this transaction.
    /// </summary>
    /// <returns>
    /// The cost template ID for this transaction.
    /// </returns>
    public ProjControlId controlId()
    {
        return projCostTransSale.ControlId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlPeriodTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date of the project period for this transaction.
    /// </summary>
    /// <returns>
    /// The end date of the project period for this transaction.
    /// </returns>
    public ProjPeriodFrom controlPeriodTo()
    {
        return projCostTransSale.wipPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version number of the project period for this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjControlVersion</c> value that indicates the version number.
    /// </returns>
    public ProjControlVersion controlVersion()
    {
        return projCostTransSale.ControlVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default dimensions for this transaction.
    /// </summary>
    /// <returns>
    /// The default dimension for this transaction.
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        return  projCostTransSale.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projCostTransSale.FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
/// <summary>
    /// Determines whether this transaction has been invoiced.
    /// </summary>
    /// <returns>
    /// true if this transaction has been invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  boolean invoiced()
    {
        boolean ret;

        if (ProjCostTrans.TransactionOrigin == ProjOrigin::BeginningBalance && projCostTransSale.TransStatus == ProjTransStatus::Invoiced)
        {
            ret = true;
        }
        else
        {
            ret = ProjInvoiceCostDetail::find(this.recId()).RecId ? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice date of this transaction.
    /// </summary>
    /// <returns>
    /// The invoice date of this transaction.
    /// </returns>
    public InvoiceDate invoiceDate()
    {
        return ProjInvoiceCostDetail::find(this.recId()).projInvoiceCost().InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice ID of the invoice for this transaction.
    /// </summary>
    /// <returns>
    /// The invoice ID of the invoice for this transaction.
    /// </returns>
    public ProjInvoiceId invoiceId()
    {
        if (this.transStatus() == ProjTransStatus::CreditnoteProposal)
        {
            return '';
        }
        else
        {
            return  ProjInvoiceCostDetail::find(this.recId()).projInvoiceCost().ProjInvoiceId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerSalesAmountMST()
    {
        return projCostTransSale.LedgerSalesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales have been posted to the general ledger.
    /// </summary>
    /// <returns>
    /// A <c>NoYes</c> enumeration value.
    /// </returns>
    public NoYes ledgerSalesPosted()
    {
        return projCostTransSale.LedgerSalesPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether budgetary control is enabled.
    /// </summary>
    /// <returns>
    ///    true if the quantity is less than zero; otherwise, false.
    /// </returns>
    public boolean mustHandleBudget()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjCostTrans _projCostTrans, ProjCostTransSale _projCostTransSale)
    {
        projCostTransSale = _projCostTransSale;

        super(_projCostTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction is from a project proposal.
    /// </summary>
    /// <returns>
    /// true if this transaction is from a project proposal; otherwise, false.
    /// </returns>
    public  boolean proposal()
    {
        return ProjProposalCostDetail::findActiveProposalId(this.recId()) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  ProjProposalId proposalId()
    {
        return ProjProposalCostDetail::findActiveProposalId(this.recId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction
    /// </returns>
    public RecId recId()
    {
        return projCostTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    public SalesPrice salesPrice()
    {
        return projCostTransSale.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjCostTransSale));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public  Amount transCost()
    {
        return 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transStatus</Name>
				<Source><![CDATA[
    public ProjTransStatus transStatus()
    {
        return projCostTransSale.TransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        return projCostTransSale.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditNoteOrigTransInvoiceDate</Name>
				<Source><![CDATA[
    internal TransDate getCreditNoteOrigTransInvoiceDate()
    {
        ProjCostTransSale projCostTransSaleLoc;
        ProjInvoiceCost projInvoiceCostLoc;
        ProjInvoiceCostDetail projInvoiceCostDetailLoc;

        select firstonly InvoiceDate from projInvoiceCostLoc
            order by projInvoiceCostLoc.InvoiceDate desc
            where projInvoiceCostLoc.TransId == this.transId()
                && projInvoiceCostLoc.Qty == this.qty()
            exists join projInvoiceCostDetailLoc
                where projInvoiceCostDetailLoc.InvoiceRefRecId == projInvoiceCostLoc.RecId
            exists join projCostTransSaleLoc
                where projCostTransSaleLoc.RecId == projInvoiceCostDetailLoc.SaleRefRecId
                    && projCostTransSaleLoc.TransStatus == ProjTransStatus::MarkedCreditNote
                    && projCostTransSaleLoc.FundingSource == this.fundingSource();

        InvoiceDate origInvoiceDate = projInvoiceCostLoc.InvoiceDate;
        
        return origInvoiceDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>