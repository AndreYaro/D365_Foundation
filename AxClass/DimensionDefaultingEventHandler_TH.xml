<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionDefaultingEventHandler_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionDefaultingEventHandler_TH</c> class is the event handler for dimension defaulting events for Thailand.
/// </summary>
class DimensionDefaultingEventHandler_TH
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dimensionValueBeingModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds aditional logic when a dimension value is being changed.
    /// </summary>
    /// <param name="_eventHandlerResult">
    /// The event handler result.
    /// </param>
    /// <param name="_dimensionAttribute">
    /// The dimension attribute that value is being changed.
    /// </param>
    /// <param name="_origValue">
    /// The original value.
    /// </param>
    /// <param name="_newValue">
    /// The new value.
    /// </param>
    [SubscribesTo(classStr(DimensionEntryControl), delegateStr(DimensionEntryControl, onModifyingDimensionValue))]
    public static void dimensionValueBeingModified(
        EventHandlerResult      _eventHandlerResult,
        DimensionAttribute      _dimensionAttribute,
        DimensionValue          _origValue,
        DimensionValue          _newValue)
    {
        int         dimAttrIndex;
        boolean     ret;

        // Skip processing if another handler has already prevented modification
        if (_eventHandlerResult.hasResult() && !_eventHandlerResult.booleanResult())
        {
            return;
        }

        if (_dimensionAttribute.backingEntityType == tableNum(DimAttributeTaxBranch) &&
            !TaxBranchType::confirmTaxBranchChanged(_origValue, _newValue))
        {
            // Only set the result in the event modification needs to be prevented
            _eventHandlerResult.booleanResult(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>