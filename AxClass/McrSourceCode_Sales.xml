<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrSourceCode_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRSourceCode_Sales</c> controls source code
/// logic around sales orders.
/// </summary>
class McrSourceCode_Sales extends MCRSourceCode
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mcrCreateCatalogGiftLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Maintains free gifts that are awarded when the source code is changed on a sales order.
    /// </summary>
    public void mcrCreateCatalogGiftLine()
    {
        SalesLine                   salesLineLocal;
        AxSalesLine                 salesLineWrite;
        AxMCRSalesLineDropShipment  mcrSalesLineDropShipmentWrite;
        MCRSalesLineDropShipment    mcrSalesLineDropShipment;
        container                   c;
        int                         idx ;
        ItemId                      itemId;
        MCRSalesLine                mcrSalesLine;
        MCRSalesTable               mcrSalesTable;
        MCRInventTable              mcrInventTable;

        // If the order hasn't been saved yet, there shouldn't be any items created.
        if (!salesTable.RecId)
        {
            return;
        }

        // Delete any of the free gifts that may have been awarded by a different catalog since this logic is called when the source is changed.
        delete_from salesLineLocal
            where salesLineLocal.SalesId == salesTable.SalesId
            exists join mcrSalesLine
            where mcrSalesLine.SalesLine == salesLineLocal.RecId
                && mcrSalesLine.LineType == MCRLineType::CatalogFreeGift;

        // Find all free items in the promotional item table.
        mcrSalesTable = McrSalesTable::findSalesId(salesTable.SalesId);
        c = MCRCatalogFreeProduct::getFreeGiftItems(MCRSourceCodeSetup::find(mcrSalesTable.SourceId).Catalog);
        if (c != conNull())
        {
            for (idx = 1; idx <= conLen(c); idx++)
            {
                salesLineWrite = AxSalesLine::newValidateInput();
                mcrSalesLineDropShipmentWrite = AxMCRSalesLineDropShipment::construct();
                itemId = conPeek(c, idx);
                mcrInventTable = MCRInventTable::findByItemId(itemId);

                // Assign Sales Line values.
                salesLineWrite.parmItemId(itemId);
                salesLineWrite.parmQtyOrdered (1);
                salesLineWrite.parmSalesQty (1);
                // Get the default sales unit from the inventTable.
                salesLineWrite.parmSalesUnit(InventTableModule::find(itemId, ModuleInventPurchSales::Sales).UnitId);
                salesLineWrite.parmSalesId (salesTable.SalesId);
                salesLineWrite.parmCustAccount(salesTable.CustAccount);
                salesLineWrite.parmCustGroup(salesTable.CustGroup);
                salesLineWrite.parmCurrencyCode(salesTable.CurrencyCode);
                salesLineWrite.parmSalesPrice(0);

                if (mcrInventTable.DropShipment)
                {
                    salesLineWrite.axInventDim().parmInventLocationId(
                        InventTable::findRecId(mcrInventTable.InventTable).inventTableModuleSales().inventLocationId());
                }

                salesLineWrite.save();
                salesLineLocal = salesLineWrite.currentRecord();

                // Set up drop ship info.
                if (mcrInventTable.DropShipment)
                {
                    mcrSalesLineDropShipment = salesLineLocal.mcrSalesLineDropShipment();
                    mcrSalesLineDropShipment.DropShipment = NoYes::Yes;
                    mcrSalesLineDropShipment.DropShipStatus = MCRDropShipStatus::ToBeDropShipped;
                    salesLineLocal.mcrPackMCRSalesLineDropShipment(mcrSalesLineDropShipment);
                }

                mcrSalesLine = salesLineLocal.mcrSalesLine();
                mcrSalesLine.SourceId = mcrSalesTable.SourceId;
                mcrSalesLine.LineType = MCRLineType::CatalogFreeGift;
                salesLineLocal.mcrPackMCRSalesLine(mcrSalesLine);
                salesLineLocal.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrInitFromSourceCodeSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values for sales order source codes based on passed parameters.
    /// </summary>
    /// <param name="_sourceCodeSetup">
    /// The <c>MCRSourceCodeSetup</c> record used to initialize values.
    /// </param>
    /// <param name="_custBRAcct">
    /// The customer or business relation account number.
    /// </param>
    /// <returns>
    /// The updated <c>SalesTable</c> record.
    /// </returns>
    public Common mcrInitFromSourceCodeSetup(MCRSourceCodeSetup _sourceCodeSetup, ExternalAccount _custBRAcct)
    {
        MCRDefaultDimensions    mcrDefaultDimensions;
        NoYes                   isExchange;
        boolean                 isValid = true;

        if (_sourceCodeSetup.SourceID)
        {
            // Validate source is effective.
            isExchange = salesTable.mcrReturnSalesTable().IsExchange;
            // Don't validate exchange order source codes if the system is
            // setup not to.
            if (!isExchange
                || (!MCROrderParameters::find().mcrAllowExpiredSourceCode
                && isExchange))
            {
                isValid = MCRSourceCodeSetup::validateSourceEffective(_sourceCodeSetup.SourceID);
            }

            if (isValid)
            {
                // Set the financial dimensions using class MCRDefaultDimensions.
                mcrDefaultDimensions = MCRDefaultDimensions::construct(salesTable);
                mcrDefaultDimensions.setDefaultDimensions();

                // If a future order date is on the offer, assign it to the sales
                // table delivery date, else put in the system date.
                if (_sourceCodeSetup.FutureOrderDate != dateNull())
                {
                    salesTable.DeliveryDate = _sourceCodeSetup.FutureOrderDate;
                }
                else
                {
                    salesTable.DeliveryDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                }

                this.mcrCreateCatalogGiftLine();
            }
        }
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a buffer of the <c>CustTable</c> table.
    /// </summary>
    /// <param name="_salesTable">
    /// A record of the <c>SalesTable</c> table.
    /// </param>
    public void new(SalesTable _salesTable)
    {
        super();
        salesTable = _salesTable;
        custTable = CustTable::find(salesTable.CustAccount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>