<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchJournalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventBatchJournalController</c> class provides specific functionality based on the type of a
///    inventory batch journal.
/// </summary>
abstract class InventBatchJournalController
{
    InventBatchJournal  inventBatchJournal;

    UnknownNoYes        hasBatchAttributes;
    List                batchAttributes;

    #define.InventQtyPos(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an inventory batch to the inventory batch journal.
    /// </summary>
    /// <param name="_inventBatchId">
    ///    The inventory batch ID to add.
    /// </param>
    public abstract void addInventBatchId(InventBatchId _inventBatchId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the list of batch attribute IDs for the inventory batch journal item.
    /// </summary>
    /// <returns>
    ///    A list containing the batch attribute IDs for the inventory batch journal item.
    /// </returns>
    public List batchAttributes()
    {
        if (!batchAttributes)
        {
            batchAttributes = InventBatchJournalAttribute::attributesForJournal(inventBatchJournal.RecId);
            if (!batchAttributes.elements())
            {
                batchAttributes = PdsBatchAttribByItem::batchAttributesForItem(inventBatchJournal.ItemId);
            }
        }

        return batchAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateSourceAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or updates the stored source batch attribute data for a given inventory batch ID.
    /// </summary>
    /// <param name="_inventBatchId">
    ///    The inventory batch ID.
    /// </param>
    protected void createOrUpdateSourceAttributes(InventBatchId _inventBatchId)
    {
        InventBatchJournalAttributePage         attributePage;

        if (this.hasBatchAttributes())
        {
            int pagesToLoad = this.numAttributePages();

            for (attributePage = 1; attributePage <= pagesToLoad; attributePage++)
            {
                InventBatchJournalSourceAttributeValue inventBatchJournalSourceAttributeValue = InventBatchJournalSourceAttributeValue::find(inventBatchJournal.RecId, _inventBatchId, attributePage, true);
                if (!inventBatchJournalSourceAttributeValue.RecId)
                {
                    inventBatchJournalSourceAttributeValue.InventBatchJournal = inventBatchJournal.RecId;
                    inventBatchJournalSourceAttributeValue.InventBatchId      = _inventBatchId;
                    inventBatchJournalSourceAttributeValue.AttributePage      = attributePage;
                }
                inventBatchJournalSourceAttributeValue.initFromBatchAttributes(inventBatchJournal, _inventBatchId);
                inventBatchJournalSourceAttributeValue.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableOnHandPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get physical available on hand quatity for the specified item and invent dimension.
    /// </summary>
    /// <param name="_itemId">
    /// ItemId to get the on hand quantity for.
    /// </param>
    /// <param name="_inventDim">
    /// Invent dimesions to get the on hand quantity for.
    /// </param>
    /// <returns>
    /// The on hand physical available on hand quantity
    /// </returns>
    private InventQty getAvailableOnHandPhysical(ItemId _itemId, InventDim _inventDim)
    {
        return InventAvailabilityProvider::findByItemIdDim(_itemId, _inventDim).parmInventAvailability().availPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the inventory batch journal item has batch attributes.
    /// </summary>
    /// <returns>
    ///    true if the inventory batch journal item has batch attributes; otherwise, false.
    /// </returns>
    public boolean hasBatchAttributes()
    {
        if (hasBatchAttributes == UnknownNoYes::Unknown)
        {
            hasBatchAttributes = #PdsBatchAttribEnabled
                && PdsBatchAttribByItem::existItemIdAny(inventBatchJournal.ItemId) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return hasBatchAttributes == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the inventory batch journal has journal lines.
    /// </summary>
    /// <returns>
    ///    true if the inventory batch journal has lines; otherwise, false.
    /// </returns>
    public boolean hasLines()
    {
        return (select inventBatchJournalSource
            where inventBatchJournalSource.InventBatchJournal == inventBatchJournal.RecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineForBatchExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the inventory batch journal has a line for a given batch ID.
    /// </summary>
    /// <param name="_inventBatchId">
    ///    The batch ID to search for.
    /// </param>
    /// <returns>
    ///    true if the inventory batch journal has at least one line that references batch <paramref name="_inventBatchId"/>.
    /// </returns>
    public boolean lineForBatchExists(InventBatchId _inventBatchId)
    {
        InventBatchJournalSource    inventBatchJournalSource;
        InventDim                   localInventDim;

        select firstonly RecId from inventBatchJournalSource
            where inventBatchJournalSource.InventBatchJournal == inventBatchJournal.RecId
            exists join TableId from localInventDim
                where localInventDim.InventDimId      == inventBatchJournalSource.InventDimId
                    && localInventDim.InventBatchId   == _inventBatchId;

        return inventBatchJournalSource.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>numAttributePages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number of batch attribute pages to show.
    /// </summary>
    /// <returns>
    ///    The number of batch attribute pages to show.
    /// </returns>
    public InventBatchJournalAttributePage numAttributePages()
    {
        return ((this.batchAttributes().elements() - 1) div InventBatchJournalAttribute::attributesPerPage()) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes code when the record for the <c>InventBatchJournal</c> table is inserted.
    /// </summary>
    public void onInsert()
    {
        this.reloadAttributesForJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSourceLinesDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes journal type specific logic when one or more inventory batch journal source records are deleted.
    /// </summary>
    public void onSourceLinesDeleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes code when the record for the <c>InventBatchJournal</c> table is updated.
    /// </summary>
    /// <param name="_inventBatchJournalOrig">
    ///    The original contents of the record for the <c>InventBatchJournal</c> table.
    /// </param>
    public void onUpdate(InventBatchJournal _inventBatchJournalOrig)
    {
        InventBatchJournalSource    inventBatchJournalSource;
        InventBatchJournalResult    inventBatchJournalResult;

        if (_inventBatchJournalOrig.ItemId != inventBatchJournal.ItemId)
        {
            delete_from inventBatchJournalSource
                where inventBatchJournalSource.InventBatchJournal == inventBatchJournal.RecId;

            delete_from inventBatchJournalResult
                where inventBatchJournalResult.InventBatchJournal == inventBatchJournal.RecId;

            this.reloadAttributesForJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBatchJournal</Name>
				<Source><![CDATA[
    public InventBatchJournal parmInventBatchJournal(InventBatchJournal _inventBatchJournal = inventBatchJournal)
    {
        inventBatchJournal = _inventBatchJournal;

        return inventBatchJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityForBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity for a given batch from the journal lines.
    /// </summary>
    /// <param name="_inventBatchId">
    ///    The batch number.
    /// </param>
    /// <returns>
    ///    A container with the total inventory quantity and catch weight quantity for the batch in the journal lines.
    /// </returns>
    public abstract container quantityForBatch(InventBatchId _inventBatchId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshSourceLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the source line(s) and recomputes any results.
    /// </summary>
    public abstract void refreshSourceLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reloadAttributesForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reloads the batch attribute IDs for the journal.
    /// </summary>
    protected void reloadAttributesForJournal()
    {
        InventBatchJournalAttribute             inventBatchJournalAttribute;
        InventBatchJournalSourceAttributeValue  inventBatchJournalSourceAttributeValue;
        InventBatchJournalResult                inventBatchJournalResult;
        InventBatchJournalResultAttributeValue  inventBatchJournalResultAttributeValue;
        InventBatchJournalAttributePage         page;

        // Clear current attributes and cached values in case the item changed or the list of attributes has changed
        delete_from inventBatchJournalAttribute
            where inventBatchJournalAttribute.InventBatchJournal == inventBatchJournal.RecId;

        delete_from inventBatchJournalSourceAttributeValue
            where inventBatchJournalSourceAttributeValue.InventBatchJournal == inventBatchJournal.RecId;

        delete_from inventBatchJournalResultAttributeValue
            exists join inventBatchJournalResult
                where inventBatchJournalResult.InventBatchJournal == inventBatchJournal.RecId
                    && inventBatchJournalResultAttributeValue.InventBatchJournalResult == inventBatchJournalResult.RecId;

        hasBatchAttributes = UnknownNoYes::Unknown;
        batchAttributes    = null;

        // Load the batch attributes for the journal
        if (this.hasBatchAttributes())
        {
            List attributes = this.batchAttributes();
            int pagesToLoad = this.numAttributePages();

            for (page = 1; page <= pagesToLoad; page++)
            {
                inventBatchJournalAttribute.clear();
                inventBatchJournalAttribute.InventBatchJournal = inventBatchJournal.RecId;
                inventBatchJournalAttribute.AttributePage      = page;
                inventBatchJournalAttribute.initFromBatchAttributes(attributes);
                inventBatchJournalAttribute.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceBatchCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a count of the number of unique batches referenced in the batch journal source lines.
    /// </summary>
    /// <returns>
    ///    The number of unique inventory batches referenced in the batch journal source lines.
    /// </returns>
    public int sourceBatchCount()
    {
        InventBatchJournalSource    source;
        InventDim                   inventDim;
        int                         numBatches;

        while select InventBatchId
            from inventDim
            group by InventBatchId
            exists join source
                where source.InventBatchJournal == inventBatchJournal.RecId
                    && source.InventDimId       == inventDim.InventDimId
        {
            numBatches++;
        }

        return numBatches;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a batch number may be added as a source.
    /// </summary>
    /// <param name="_inventBatchId">
    ///    The inventory batch ID to validate.
    /// </param>
    /// <returns>
    ///    true if the batch number may be used as a source; otherwise, false.
    /// </returns>
    public boolean validateSourceBatch(InventBatchId _inventBatchId)
    {
        InventQty               inventOnHandAvail;

        boolean         ret = true;

        if (!_inventBatchId)
        {
            ret = checkFailed(strFmt("@SYS53724", fieldPName(InventDim, InventBatchId)));
        }

        if (ret)
        {
            InventBatch inventBatch = InventBatch::find(_inventBatchId, inventBatchJournal.ItemId);
            if (!inventBatch)
            {
                ret = checkFailed(strFmt("@SYS54778", _inventBatchId, inventBatchJournal.ItemId));
            }
        }

        if (ret)
        {
            InventDim inventDim = inventBatchJournal.inventDim();
            inventDim.InventBatchId = _inventBatchId;
            inventDim = InventDim::findOrCreate(inventDim);

            // Check if avaible on hand exists for the item for the specified dimensions.
            inventOnHandAvail = this.getAvailableOnHandPhysical(inventBatchJournal.ItemId, inventDim);

            if (inventOnHandAvail <= 0)
            {
                ret = checkFailed(strFmt("@SYS4001857", _inventBatchId));
            }
        }

        if (ret)
        {
            container quantities = this.quantityForBatch(_inventBatchId);

            if (conPeek(quantities, #InventQtyPos) >= inventOnHandAvail)
            {
                ret = checkFailed(strFmt("@SYS4001858", _inventBatchId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of a <c>InventBatchJournalController</c> class depending on the batch handling journal type.
    /// </summary>
    /// <param name="_inventBatchJournal">
    ///    The record of the <c>InventBatchJournal</c> table for the batch handling journal.
    /// </param>
    /// <returns>
    ///    A new instance of a <c>InventBatchJournalController</c> sub-class for the type of the batch handling journal.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if <paramref name="_batchHandling"/> is a journal type that is unknown.
    /// </exception>
    public static InventBatchJournalController newBatchJournal(InventBatchJournal _inventBatchJournal)
    {
        InventBatchJournalController inventBatchJournalController = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventBatchJournalController),
                                                                         new InventBatchJournalTypeAttribute(_inventBatchJournal.JournalType));
        inventBatchJournalController.parmInventBatchJournal(_inventBatchJournal);

        return inventBatchJournalController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
