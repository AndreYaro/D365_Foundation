<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashBalanceRecalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
// RCash Ii
public class rCashBalanceRecalc extends RunBaseBatch implements BatchRetryable
{
    TransDate     dateFrom, dateTo;
    boolean       throwOnError;

    DialogField   dialogDateFrom, dialogDateTo;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        dateFrom,
        dateTo
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog  = super();
        ;

        dialog.caption("@GLS104444");
        dialog.addGroup("@SYS40");
        dialogDateFrom = dialog.addFieldValue(extendedTypeStr(TransDate), endmth(prevMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))) + 1,   "@SYS2168");
        dialogDateTo   = dialog.addFieldValue(extendedTypeStr(TransDate), endmth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())),                "@SYS14656");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        dateFrom = dialogDateFrom.value();
        dateTo   = dialogDateTo.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(boolean _throwOnError = true)
    {
        super();

        throwOnError = _throwOnError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _dateFrom)
    {
        dateFrom = _dateFrom;
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _dateTo)
    {
        dateTo = _dateTo;
        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RCashTrans           cashTrans;
        RCashBalances        balances;
        FiscalCalendarPeriod fiscalPeriodFrom, fiscalPeriodTo, fiscalPeriodCur;
        RecId                mainAccountId;

        fiscalPeriodFrom = RCashBalanceRecalc::fiscalCalendarPeriod(dateFrom);
        fiscalPeriodTo   = RCashBalanceRecalc::fiscalCalendarPeriod(dateTo);

        if (!(fiscalPeriodFrom && fiscalPeriodTo))
            return;

        try
        {
            ttsbegin;

            delete_from balances
                where balances.PeriodStart >= fiscalPeriodFrom.StartDate &&
                      balances.PeriodStart <= fiscalPeriodTo.EndDate;

            while select cashTrans
                 where cashTrans.TransDate   >= fiscalPeriodFrom.StartDate &&
                       cashTrans.TransDate   <= fiscalPeriodTo.EndDate     &&
                       cashTrans.TransStatus == RCashTransStatus::Approved
            {
                fiscalPeriodCur = RCashBalanceRecalc::fiscalCalendarPeriod(cashTrans.TransDate);

                mainAccountId = LedgerDimensionFacade::getMainAccountFromLedgerDimension(cashTrans.LedgerDimension).RecId;

                select firstonly forupdate balances
                    where balances.AccountNum    == cashTrans.AccountNum      &&
                          balances.MainAccountId == mainAccountId             &&
                          balances.PeriodStart   == fiscalPeriodCur.StartDate &&
                          balances.CurrencyCode  == cashTrans.CurrencyCode;

                balances.AccountNum    = cashTrans.AccountNum;
                balances.MainAccountId = mainAccountId;
                if (cashTrans.DocType != RCashDocType::ExchRateDifference)
                {
                    balances.AmountCur      += cashTrans.AmountCur;
                    balances.AmountMST      += cashTrans.AmountMST;
                }
                else
                {
                    balances.ExchAdjustment += cashTrans.AmountMST;
                }
                balances.CurrencyCode  = cashTrans.CurrencyCode;
                balances.PeriodStart   = fiscalPeriodCur.StartDate;
                balances.write();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS103231";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalCalendarPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record of the <c>FiscalCalendarPeriod</c> table for the specified date in the fiscal
    ///    calendar associated with the company information record.
    /// </summary>
    /// <param name="_transDate">
    ///    The date specified for the <c>FiscalCalendarPeriod</c> record.
    /// </param>
    /// <returns>
    ///    A record of the <c>FiscalCalendarPeriod</c> table; otherwise, an empty buffer.
    /// </returns>
    public static FiscalCalendarPeriod fiscalCalendarPeriod(TransDate _transDate)
    {
        FiscalCalendarPeriod       fiscalCalendarPeriod;
        FiscalCalendarYear         fiscalCalendarYear;
        FiscalCalendarRecId        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod;

        fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(calendarRecId, _transDate);

        if (!fiscalCalendarPeriod)
        {
            select firstonly RecId from fiscalCalendarPeriod
                where fiscalCalendarPeriod.StartDate    <= _transDate &&
                      fiscalCalendarPeriod.EndDate      >= _transDate
            exists join fiscalCalendarYear
                where fiscalCalendarYear.RecId          == fiscalCalendarPeriod.FiscalCalendarYear &&
                      fiscalCalendarYear.FiscalCalendar == calendarRecId                           &&
                      fiscalCalendarYear.StartDate      <= _transDate                              &&
                      fiscalCalendarYear.EndDate        >= _transDate;
        }

        if (!fiscalCalendarPeriod)
        {
            throw error(strFmt("@SYS17614", _transDate));
        }

        ledgerFiscalCalendarPeriod = LedgerFiscalCalendar::findLedgerPeriod(fiscalCalendarPeriod.RecId, Ledger::current());

        if (ledgerFiscalCalendarPeriod.Status != FiscalPeriodStatus::Open)
        {
                throw error(strFmt("@SYS17615", _transDate));
        }

        return fiscalCalendarPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RCashBalanceRecalc  balanceRecalc = new RCashBalanceRecalc();
        ;

        if (balanceRecalc.prompt())
            balanceRecalc.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>