<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_PurchCreditNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_PurchCreditNote</c> class is used as a data carrier together with the <c>InventUpdate</c>
///    class when the inventory is updated with purchase line transactions.
/// </summary>
/// <remarks>
///    This class is used when creating or making changes to a purchase order credit note line.
/// </remarks>
class InventMov_PurchCreditNote extends InventMov_Purch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(PurchLine _purchLine, InventType  _inventType = PurchLineType::construct(_purchLine))
    {
        super(_purchLine, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>InventMov_PurchCreditNote</c> class.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> record for which the class is instantiated.
    /// </param>
    /// <param name="_inventType">
    /// The <c>InventType</c> value for the line.
    /// </param>
    /// <returns>
    /// The instance of the <c>InventMov_PurchCreditNote</c> class.
    /// </returns>
    public static InventMov_PurchCreditNote construct(PurchLine _purchLine, InventType  _inventType = PurchLineType::construct(_purchLine))
    {
        return new InventMov_PurchCreditNote(_purchLine, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>informAboutIncompleteMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Notifies users about incomplete marking of credited quantities.
    /// </summary>
    /// <param name="_totalQty">
    /// Quantity to be marked.
    /// </param>
    /// <param name="_markedQty">
    /// Quantity marked for a transaction.
    /// </param>
    /// <param name="_voucherId">
    /// Voucher used to be marked for a transaction; Optional.
    /// </param>
    public void informAboutIncompleteMarking(InventQty _totalQty, InventQty _markedQty, Voucher _voucherId = '')
    {
        // Warning: The quantity %1 credited to the invoice with voucher %2, exceeds the available quantity %3.
        // Therefore, full marking was not possible. The full quantity %1 will be credited, but %4 will not be marked against the specified invoice.
        // The cost of those not marked will instead be assigned using the inventory model associated with the product.
        warning(strFmt("@SCM:InformationOnCreditNoteInvoiceMarking", _totalQty, _voucherId, _markedQty, (_totalQty - _markedQty)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingPreferPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the physically updated transactions are preferred over expected when finding
    /// transactions for marking.
    /// </summary>
    /// <returns>
    /// Returns true for credit notes.
    /// </returns>
    public boolean markingPreferPhysical()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates a reference voucher related to the movement.
    /// </summary>
    /// <returns>
    /// The reference voucher related to the movement i.e. the voucher to be credited.
    /// </returns>
    public Voucher relatedVoucher()
    {
        return this.voucherToBeCredited();
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherToBeCredited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher to be credited based on the <c>VendInvoiceTrans</c> record related to the <c>PurchLine</c> record.
    /// </summary>
    /// <returns>
    /// The voucher to be credited related to the movement.
    /// </returns>
    public Voucher voucherToBeCredited()
    {
        VendInvoiceTrans    vendInvoiceTrans;
        VendInvoiceJour     vendInvoiceJour;

        if (purchLine.CreditedVendInvoiceTrans)
        {
            select firstOnly CostLedgerVoucher from vendInvoiceJour
            exists join RecId, InvoiceId, InvoiceDate, PurchId, NumberSequenceGroup, InternalInvoiceId from vendInvoiceTrans
                where vendInvoiceTrans.RecId                == purchLine.CreditedVendInvoiceTrans
                    && vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId
                    && vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate
                    && vendInvoiceTrans.PurchId             == vendInvoiceJour.PurchId
                    && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                    && vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId;
        }

        return vendInvoiceJour.CostLedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingInventDimParmFixed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills an <c>InventDimParm</c> buffer with values that specify which dimensions are fixed when
    /// marking is applied.
    /// For returned purchase lines we need to be able to mark against all consistent dimensions since primary dimensions might be too strict.
    /// </summary>
    /// <returns>
    /// The <c>InventDimParm</c> buffer.
    /// </returns>
    public InventDimParm markingInventDimParmFixed()
    {
        InventDimParm activeConsistentInventDimParm, inventDimParmMovement;

        // get InventDimParm with active and consistent dimensions flags set to Yes
        this.inventDimGroupSetup().inventDimParmActiveConsistent(activeConsistentInventDimParm);
        // get InventDimParm with flags set to Yes for every specified dimension for this movement
        inventDimParmMovement.initFromInventDim(this.inventdim());
        // clear consistent dimensions which are not specified for this movement
        activeConsistentInventDimParm = InventDimParm::andParms(activeConsistentInventDimParm, inventDimParmMovement);

        return activeConsistentInventDimParm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>