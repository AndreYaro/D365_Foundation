<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSBatchInheritor_Prod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PDSBatchInheritor_Prod</c> class provides the logic to inherit batch values from other batches for
/// production or batch order reported as finished processing.
/// </summary>
class PDSBatchInheritor_Prod extends PDSBatchInheritor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inheritAttributes</Name>
				<Source><![CDATA[
        public void inheritAttributes()
    {
        ProdJournalProd         line = movement.childBuffer();
        PDSBatchAttribTransfer  transfers;
        BOM                     bom;
        PdsBatchAttributes      attributes;
        PdsBatchAttribValue     fromValue;
        ProdTable               prodTable;
        InventTable             inventTable;
        boolean                 inherited = false;
        boolean                 inheritToEndFlightEnabled = PDSBatchAttributeValueInheritToEndItemFlight::instance().isEnabled();
        
        if (!line 
         || (inventBatch.PDSInheritBatchAttrib && !inheritToEndFlightEnabled))
        {
            return;
        }

        prodTable   = line.prodTable();
        inventTable = InventTable::find(line.ItemId);

        if (inventTable.isCoProduct())
        {
            select transfers
                where transfers.BOMId           == prodTable.BOMId
                    && transfers.EndItemId      == line.ItemId
                    && transfers.Active
                    exists join bom
                        where bom.RecId         == transfers.BOMRefRecId
                            && bom.PDSInheritCoProductBatchAttrib;
        }
        else
        {
            select transfers
                where transfers.BOMId           == prodTable.BOMId
                    && transfers.EndItemId      == line.ItemId
                    && transfers.Active
                    exists join bom
                        where bom.RecId         == transfers.BOMRefRecId
                            && bom.PDSInheritEndItemBatchAttrib;
        }

        while (transfers)
        {
            if (!PdsBatchAttributes::allowInheritance(line.ItemId, inventBatch.InventBatchId, transfers.PdsBatchAttribId)
             && !inheritToEndFlightEnabled)
            {
                next transfers;
                continue;
            }

            fromValue = transfers.fromValue(line.ProdId, line.TransDate);

            if (!fromValue)
            {
                warning(strfmt("@PSC200", transfers.PdsBatchAttribId, transfers.RawItemId));
                next transfers;
                continue;
            }

            ttsBegin;

            attributes = PdsBatchAttributes::find(line.ItemId, inventBatch.inventBatchId, transfers.PdsBatchAttribId, true);

            if (attributes)
            {
                if (!attributes.PDSInherited || inheritToEndFlightEnabled)
                {
                    attributes.PdsBatchAttribValue  = fromValue;
                    attributes.PDSInherited         = true;
                    attributes.update();

                    inherited = true;
                }
            }
            else
            {
                attributes.initValue();
                attributes.InventBatchId        = inventBatch.InventBatchId;
                attributes.PdsBatchAttribId     = transfers.PdsBatchAttribId;
                attributes.PdsBatchAttribValue  = fromValue;
                attributes.PDSInherited         = true;
                attributes.ItemId               = line.ItemId;
                attributes.insert();

                inherited = true;
            }

            ttsCommit;

            next transfers;
        }

        inventBatch.PDSInheritBatchAttrib = inherited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inheritShelfLife</Name>
				<Source><![CDATA[
        public void inheritShelfLife()
    {
        ProdJournalProd         line        = movement.childBuffer();
        ProdTableJour           prodTableJour;
        ProdTable               prodTable   = line.prodTable();
        ProdBOM                 prodBOM;
        PdsBestBeforeDate       bestBefore  = dateMax();
        PdsExpiryDate           expiryDate  = dateMax();
        InventTable             inventTable = movement.inventTable();
        InventTrans             inventTransLocal;
        InventBatch             inventBatchLocal;

        if (!line || !inventTable.isShelfLifeItem())
        {
            return;
        }

        if (inventTable.isCoProduct())
        {
            select ItemId, InventDimId
            from prodBOM
            where prodBOM.ProdId == prodTable.ProdId
                && prodBOM.PDSInheritCoProductShelfLife;
        }
        else
        {
            select ItemId, InventDimId
            from prodBOM
            where prodBOM.ProdId == prodTable.ProdId
                && prodBOM.PDSInheritEndItemShelfLife;
        }

        if (prodBOM)
        {
            while (prodBOM)
            {
                if (prodBOM.inventDim().InventBatchId)
                {
                    inventBatchLocal = InventBatch::find(prodBOM.inventDim().InventBatchId, prodBOM.ItemId);

                    if (inventBatchLocal.PdsBestBeforeDate)
                    {
                        bestBefore = min(bestBefore, inventBatchLocal.PdsBestBeforeDate);
                    }

                    if (inventBatchLocal.ExpDate)
                    {
                        expiryDate = min(expiryDate, inventBatchLocal.ExpDate);
                    }
                }
                else
                {
                    while select inventTransLocal
                        order by DatePhysical
                        where !inventTransLocal.PackingSlipReturned
                            && inventTransLocal.DatePhysical <= line.TransDate
                            && inventTransLocal.ItemId       == prodBOM.ItemId
                            exists join  prodTableJour
                                where prodTableJour.ProdId       == line.ProdId
                                    && prodTableJour.JournalType == ProdJourType::Release
                                    && prodTableJour.TransDate   == inventTransLocal.DatePhysical
                                    && prodTableJour.Voucher     == inventTransLocal.VoucherPhysical
                    {
                        inventBatchLocal = InventBatch::find(inventTransLocal.inventBatchId(), inventTransLocal.ItemId);

                        if (inventBatchLocal.PdsBestBeforeDate)
                        {
                            bestBefore = min(bestBefore, inventBatchLocal.PdsBestBeforeDate);
                        }

                        if (inventBatchLocal.ExpDate)
                        {
                            expiryDate = min(expiryDate, inventBatchLocal.ExpDate);
                        }
                    }
                }

                next prodBOM;
            }

            if (bestBefore == dateMax() || expiryDate == dateMax())
            {
                warning("@PSC219");
            }
            else
            {
                inventBatch.PdsBestBeforeDate     = min(bestBefore, expiryDate);
                inventBatch.ExpDate               = expiryDate;
                inventBatch.PDSInheritedShelfLife = NoYes::Yes;

                if (inventTrans)
                {
                    inventBatch.prodDate = movement.batchProdDate(inventTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PDSBatchInheritor_Prod construct()
    {
        return new PDSBatchInheritor_Prod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovementBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PDSBatchInheritor_Prod</c> class given a movement and batch record.
    /// </summary>
    /// <param name="_movement">
    /// An instance of the <c>InventMovement</c> class representing the current inventory movement.
    /// </param>
    /// <param name="_inventBatch">
    /// A record of the <c>InventBatch</c> table that is to be updated.
    /// </param>
    /// <param name="_inventTrans">
    /// A record of the <c>InventTrans</c> table; optional. If provided, this will recompute the batch production date if shelf-life dates have been
    /// inherited.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PDSBatchInheritor_Prod</c> class.
    /// </returns>
    public static PDSBatchInheritor_Prod newMovementBatch(InventMovement _movement, InventBatch _inventBatch, InventTrans _inventTrans = null)
    {
        PDSBatchInheritor_Prod      inheritor = PDSBatchInheritor_Prod::construct();

        inheritor.parmMovement(_movement);
        inheritor.parmInventBatch(_inventBatch);
        inheritor.parmInventTrans(_inventTrans);
        return inheritor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>