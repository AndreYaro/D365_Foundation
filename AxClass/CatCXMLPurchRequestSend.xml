<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCXMLPurchRequestSend</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>CatCXMLPurchRequestSend</c> class contains all the methods related to sending of a CXML Purch request
/// </summary>
internal class CatCXMLPurchRequestSend
{
    CatCXMLPurchRequestHistory              cxmlPurchRequestHistory;
    CatExternalCatalogProperties            catExternalCatalogProperties;
    CatExternalCatalog                      catExternalCatalog;
    PurchResponseXML                        purchResponseXML;
    ErrorMsg                                sendError;
    Log                                     traceLog;
    boolean                                 traceCode;
    private CatCXMLInstrumentationLogger    instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the message to log
    /// </summary>
    /// <param name = "_message">
    /// message to be added to log
    /// </param>
    public void addToLog(Log _message)
    {
        if(traceCode)
        {
            traceLog = traceLog + _message + '\n';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLog</Name>
				<Source><![CDATA[
    public Log parmLog(Log _traceLog = traceLog)
    {
        traceLog = _traceLog;

        return traceLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTraceCode</Name>
				<Source><![CDATA[
    public boolean parmTraceCode(Boolean _traceCode = traceCode)
    {
        traceCode = _traceCode;

        return traceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSendError</Name>
				<Source><![CDATA[
    public ErrorMsg parmSendError(ErrorMsg _sendError = sendError)
    {
        sendError = _sendError;

        return sendError;

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchResponseXML</Name>
				<Source><![CDATA[
    public PurchResponseXML parmPurchResponseXML(PurchResponseXML _purchResponseXML = purchResponseXML)
    {
        purchResponseXML = _purchResponseXML;

        return purchResponseXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatCXMLPurchRequestHistory</Name>
				<Source><![CDATA[
    public CatCXMLPurchRequestHistory parmCatCXMLPurchRequestHistory(CatCXMLPurchRequestHistory _cxmlPurchRequestHistory = cxmlPurchRequestHistory)
    {
        cxmlPurchRequestHistory = _cxmlPurchRequestHistory;

        return cxmlPurchRequestHistory;

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatExternalCatalog</Name>
				<Source><![CDATA[
    public CatExternalCatalog parmCatExternalCatalog(CatExternalCatalog _catExternalCatalog = catExternalCatalog)
    {
        catExternalCatalog = _catExternalCatalog;

        If (this.getCatSessionProperty('TRACESEND') == 'TRUE')
        {
            traceCode = true;
        }

        return catExternalCatalog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatSessionProperty</Name>
				<Source><![CDATA[
    private CatPropertyValue getCatSessionProperty(CatPropertyName _catPropertyName)
    {
        select firstonly * from catExternalCatalogProperties
            where catExternalCatalogProperties.ExternalCatalog == catExternalCatalog.RecId
                && catExternalCatalogProperties.Name           == _catPropertyName;

        return catExternalCatalogProperties.editCatPropertyName(false, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeaders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add web request headers
    /// </summary>
    /// <param name = "_webrequest">
    /// An instance of <c>System.Net.WebRequest</c> data type
    /// </param>
    /// <returns>
    /// An instance of <c>System.Net.WebRequest</c> data type after adding headers
    /// </returns>
    public System.Net.WebRequest addHeaders(System.Net.WebRequest _webrequest)
    {
        System.Net.WebHeaderCollection  headers;
        CatExternalCatalogProperties    catproperties;
        str                             propname;

        propname = '';

        //Setup the headers
        this.addToLog("@CXM:AddingHeaders");
        headers = _webrequest.get_Headers();

        //Look for any properties that are prefixed with H_ as these will denote optional headers.
        while select * from catproperties
            where catproperties.ExternalCatalog == catExternalCatalog.RecId 
            && catproperties.Name like 'H_*'
        {
            propname = subStr(catproperties.Name,3,strLen(catproperties.Name) - 2);
            this.addToLog(propname + ' : ' + catproperties.editCatPropertyName(false, ''));
            headers.Add(propname, catproperties.editCatPropertyName(false, ''));
        }

        _webrequest.set_Headers(headers);

        return _webrequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse vendor response
    /// </summary>
    /// <returns>
    /// Return true if URL can be parsed successfully else false
    /// </returns>
    public boolean vendorResponse()
    {
        URL                             supplierURL;
        System.Net.WebRequest           webRequest;
        System.Byte[]                   byteArray;
        System.Text.Encoding            encodingUTF8;
        System.Net.SecurityProtocolType secprotocol;
        str                             ENABLEHEADERS, CONTENTTYPE;
        System.Exception                exception;
        boolean                         ret = false;

        //Clear log each new document
        this.parmLog('');

        ENABLEHEADERS = this.getCatSessionProperty('ENABLEHEADERS');
        this.addToLog("@CXM:CheckIfHeadersRequired" + ENABLEHEADERS);

        CONTENTTYPE = this.getCatSessionProperty('CONTENTTYPE');
        this.addToLog("@CXM:ContentType" + CONTENTTYPE);

        //Get the Order URL from the external catalog settings.
        this.addToLog("@CXM:OrderCheckURL");
        supplierURL = this.getCatSessionProperty('ORDERCHECKURL');
        this.addToLog("@CXM:SupplierURL" + supplierURL);

        //check if there is likely a valid URL's in the parameters. If there aren't many characters in the URL it's likely not setup right.
        if (strLen(supplierURL) < 3)
        {
            this.parmSendError("@CXM:OrderCheckURLError");
            this.addToLog("@CXM:OrderCheckURLError");

            return ret;
        }

        // Check the protocol
        if (!CatCXMLUseSystemDefaultSecurityProtocols::instance().isEnabled()
            && System.Net.ServicePointManager::get_SecurityProtocol() == System.Net.SecurityProtocolType::Ssl3 | System.Net.SecurityProtocolType::Tls)
        {
            SysSecurityProtocolTypeHelper::SetSecurityProtocolType(/*ssl3Support:*/ false);
        }

        secprotocol = System.Net.ServicePointManager::get_SecurityProtocol();
        this.addToLog(secprotocol.ToString());

        this.addToLog("@CXM:SupplierURLWebRequestCreate");
        webRequest = System.Net.WebRequest::Create(supplierURL);

        //Adding headers if they are enabled.
        if (ENABLEHEADERS == 'true' || ENABLEHEADERS == 'TRUE')
        {
            webRequest = this.AddHeaders(webRequest);
        }

        //Get message ready to send.
        this.addToLog("@CXM:EncodeMessage");
        encodingUTF8 = System.Text.Encoding::get_UTF8();
        byteArray = encodingUTF8.GetBytes(cxmlPurchRequestHistory.purchRequestXMLEdit(false,''));

        //Setup the POST and send the data.
        this.addToLog("@CXM:PreparePostResponse");
        webRequest.set_Method('POST');

        //Add optional condition to not set this. This is in case a supplier system returns a 500 code we can disable
        //The contentType and see if that resolves the error.
        if (CONTENTTYPE == 'false' || CONTENTTYPE == 'FALSE')
        {
            webRequest.set_ContentLength(byteArray.get_Length());
        }
        else
        {
            webRequest.set_ContentType('text/xml');
            webRequest.set_ContentLength(byteArray.get_Length());
        }

        this.addToLog("@CXM:GetRequestStream");
        
        using (var activityContext = this.instrumentationLogger().calculateActivities().startVendorResponseWriteToDataStream())
        {
            try
            {
                using (System.IO.Stream dataStream = webRequest.GetRequestStream())
                {

                    this.addToLog("@CXM:WriteToDataStream");
                    dataStream.Write(byteArray, 0, byteArray.get_Length());
                }
            }
            catch(exception)
            {
                this.addToLog(exception.Message);
  
                ret = false;
            }
        }

        //Get the response
        this.addToLog("@CXM:GetVendorResponse");
        
        using (var activityContext = this.instrumentationLogger().calculateActivities().startVendorResponseXMLRead())
        {
            try
            {
                using (System.Net.WebResponse webResponse = webRequest.GetResponse())
                {
                    using (System.IO.Stream dataStream = webResponse.GetResponseStream())
                    {
                        using(System.IO.StreamReader streamReader = new System.IO.StreamReader(dataStream))
                        {
                            purchResponseXML = streamReader.ReadToEnd();

                            ret = true;
                        }
                    }
                }
            }
            catch (exception)
            {
                this.addToLog(exception.Message);
                ret = false;
            }
            finally
            {
                //Add the response message to see if we can see someting incase there is an exception generated later.
                this.addToLog("@CXM:DashedLine");
                this.addToLog(purchResponseXML);
                this.addToLog("@CXM:DashedLine");

                //Clean up.
                //streamReader.Close();
                this.addToLog("@CXM:StreamReaderClose");

                //dataStream.Close();
                this.addToLog("@CXM:DataStreamClose");

                //webResponse.Close();
                this.addToLog("@CXM:WebResponseClose");
            }
        }
                        
        return ret;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorResponseStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse Vendor response status
    /// </summary>
    /// <returns>
    /// An instance of <c>PurchReqVendStatus</c> data type
    /// </returns>
    public PurchReqVendStatus vendorResponseStatus()
    {
        PurchReqVendStatus              purchReqVendStatus;
        //System.Xml.XmlReader            xmlreader;
        System.Xml.XmlReaderSettings    readerSettings;
        //System.IO.StringReader          stringReader;
        System.Text.Encoding            encodingUTF8;
        System.Byte[]                   byteArray;
        str                             encoding = '';
        str                             xmlmessage, xmlpo;
        str                             stringstart = '';
        str                             responsecode;
        str                             responsetext;
        str                             responstextsub;
        int                             stringcheck;
        
        try
        {
            //Check if there is a custom response text property on the catalog
            responsetext = this.getCatSessionProperty('RESPONSETEXT');
            responstextsub = this.getCatSessionProperty('RESPONSETEXTSUB');

            if (responsetext == '')
            {
                responsetext = 'NO RESPONSE TEXT SET';
            }

            this.addToLog("@CXM:CustomResponseTextOnExternalCatalog" + responsetext);

            //create example response message. Suppliers like Dell sent the PO back in the success message.
            xmlpo = 'PO = ' + cXMLPurchRequestHistory.PurchId;

            this.addToLog("@CXM:VendorResponseReadBegin");
            //Run it through to encode for UTF8 just to be sure, probably un-necessary
            encodingUTF8 = System.Text.Encoding::get_UTF8();
            byteArray = encodingUTF8.GetBytes(purchResponseXML);
            encoding = encodingUTF8.GetString(byteArray, 0, byteArray.Length);

            this.addToLog("@CXM:VendorResponseText");
            this.addToLog("@CXM:DashedLine");
            this.addToLog(encoding);
            this.addToLog("@CXM:DashedLine");

            //If there is no data in the string just error.
            if (!System.String::IsNullOrEmpty(encoding))
            {
                try
                {
                    //get the first 5 characters as this should be the start of and XML doc we can test for.
                    stringstart = subStr(encoding,1,5);

                    if (stringstart == '<?xml')
                    {
                        this.addToLog("@CXM:LoadResponseToStringReader");
                        //Setup reader. Read the string parsed in and then load it into the XMLReader.
                        using (System.IO.StringReader stringReader = new System.IO.StringReader(encoding))
                        {

                            //Setup reader settings
                            readerSettings = new System.Xml.XmlReaderSettings();

                            //As the cXML files use DTD's then we needs to turn this parsing on otherwise the reader will fail.
                            readerSettings.set_DtdProcessing(System.Xml.DtdProcessing::Parse);

                            this.addToLog("@CXM:LoadStringtoXMLReader");

                            using(System.Xml.XmlReader xmlreader = System.Xml.XmlReader::Create(stringReader,readerSettings))
                            {
                                xmlreader.MoveToContent();

                                this.addToLog("@CXM:FindStatus");
                                if (xmlreader.ReadToDescendant('Status'))
                                {
                                    this.addToLog("@CXM:GetResponseText");
                                    xmlmessage = XmlReader.GetAttribute('text');
                                    responsecode = XmlReader.GetAttribute('code');
                                    this.addToLog("@CXM:ResponseCode" + ' ' + responsecode);
                       
                                    if (responsecode == '200')
                                    {
                                        this.addToLog("@CXM:ResponseCode200OK");
                                    }
                                    else
                                    {
                                        this.AddToLog("@CXM:ResponseCodeNot200OK");
                                    }

                                    //Have to check the message because status code 200 sometimes is used for error message.
                                    //CDW sends order received. Office Depot sends success. Dell sends PO back.
                                    if (xmlmessage == responsetext || xmlmessage == 'Order Received' || xmlmessage == 'OK' || xmlmessage == 'success' || xmlmessage == 'Accepted' || xmlmessage == xmlpo)
                                    {
                                        purchReqVendStatus = PurchReqVendStatus::VendorAcknowledged;
                                    }
                                    else
                                    {
                                        if (responstextsub == 'TRUE' || responstextsub == 'true')
                                        {
                                            this.addToLog("@CXM:ResponseTextSub" + '=' + responstextsub);
                                            stringcheck = strScan(xmlmessage,responsetext,1, strLen(xmlmessage));
                                            if (stringcheck > 0)
                                            {
                                                purchReqVendStatus = PurchReqVendStatus::VendorAcknowledged;
                                            }
                                            else
                                            {
                                                this.addToLog("@CXM:ResposeTextReturned" + ' : ' + responsetext + ' : ' + xmlmessage);
                                                this.addToLog("@CXM:VendorResponseInvalid");
                                                purchReqVendStatus = PurchReqVendStatus::VendorError;

                                            }
                                        }
                                        else
                                        {
                                            this.addToLog("@CXM:VendorResponseInvalid");
                                            purchReqVendStatus = PurchReqVendStatus::VendorError;
                                        }
                                    }

                                }
                                else
                                {
                                    this.addToLog("@CXM:ReturnedXMLWithInvalidStatus");
                                    purchReqVendStatus = PurchReqVendStatus::VendorError;
                                }
                            }
                        }

                        this.addToLog("@CXM:CloseStringXMLReader");

                    }
                    else
                    {
                        this.addToLog("@CXM:InvalidXML");
                        purchReqVendStatus = PurchReqVendStatus::VendorError;
                    }

                }
                catch (Exception::Error)
                {
                    this.addToLog("@CXM:VendorResponseReadError");
                    purchReqVendStatus = PurchReqVendStatus::VendorError;
                }

            }
            else
            {
                this.addToLog("@CXM:VendorResponseEmptyString");
                purchReqVendStatus = PurchReqVendStatus::VendorError;
            }

        }
        catch (Exception::Error)
        {
            this.addToLog("@CXM:SupplierInvalidResponse");
            purchReqVendStatus = PurchReqVendStatus::VendorError;
        }

        return PurchReqVendStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CatCXMLPurchRequestSend construct()
    {
        CatCXMLPurchRequestSend cxmlPurchRequestSend;

        cxmlPurchRequestSend = new CatCXMLPurchRequestSend();

        return cxmlPurchRequestSend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private CatCXMLInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = CatCXMLInstrumentationLogger::createLogger(this.GetType().Name);
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>