<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_MB4</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_MB4 extends RAssetReport_MB implements ERIReportPostProcessingSupported
{
    protected Map rowsMap;
    protected Map backRowsMap;
    protected RAssetDocument rAssetDocument;
    protected RAssetAmount amountWOVat;
    protected RAssetAmount depreciationAmount;
    protected RAssetComment docComment;
    protected InventQty qty;
    protected ItemId itemId;
    protected RAssetStatus assetStatus;
    protected RAssetAcquisitionPrice acquisitionPrice;
    protected RAssetAcquisitionValue acquisitionValueMST;
    protected RAssetDepreciation deprAmountMST;
    protected RAssetTransDate issueDate;
    protected RAssetEmployee employeeId;
    protected int insertedRows1;
    protected int insertedRows2;

    protected const str ConstDocNum = 'DocNum';
    protected const str ConstDeptName = 'DeptName';
    protected const str ConstDeptCode = 'DeptCode';
    protected const str ConstLedgerAcc = 'LedgerAcc';
    protected const str ConstCodeOKDP = 'CodeOKDP';
    protected const str ConstDocReason = 'DocReason';
    protected const str ConstAmountTotal = 'AmountTotal';
    protected const str ConstDeprAmount = 'DeprAmount';
    protected const str ConstColItemName = 'A';
    protected const str ConstAnalysisCode = 'CE14';
    protected const str ConstColItemId = 'R';
    protected const str ConstColCodeOKEI = 'AB';
    protected const str ConstColUnitId = 'AI';
    protected const str ConstColQty = 'AV';
    protected const str ConstColAcquisitionPrice = 'BH';
    protected const str ConstColRAssetAmount1 = 'BP';
    protected const str ConstColRAssetAmount2 = 'BY';
    protected const str ConstColReasonName = 'CM';
    protected const int ConstRowStartP1 = 20;
    protected const str ConstColEmplName = 'A';
    protected const str ConstColEmplId = 'T';
    protected const str ConstColIssueDate = 'AD';
    protected const str ConstColdeprPercent = 'BC';
    protected const str ConstColdeprAmount = 'BI';
    protected const int ConstRowStartP2 = 11;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRowData</Name>
				<Source><![CDATA[
    protected void addRowData(container _conKey, container _conValue, Map _targetMap)
    {
        if (_conKey == conNull()
            || _conValue == conNull()
            || !_targetMap)
        {
            return;
        }

        if (_targetMap.exists(_conKey))
        {
            container con = _targetMap.lookup(_conKey);

            for (int i = 1; i <= conLen(_conValue); i++)
            {
                real value = conPeek(_conValue, i) + conPeek(con, i);
                con = conPoke(con, i, value);
            }

            _targetMap.insert(_conKey, con);
        }
        else
        {
            _targetMap.insert(_conKey, _conValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReportRowData</Name>
				<Source><![CDATA[
    protected void buildReportRowData()
    {
        RAssetScrap rAssetScrap;

        void actualScrap(RAssetId _assetId)
        {
            select firstonly rAssetScrap
                where rAssetScrap.AssetId == _assetId
                    && rAssetScrap.Assembling == NoYes::Yes
                    && ! rAssetScrap.StornoRecId;
        }

        queryRun = new QueryRun(this.queryReport());

        while (queryRun.next())
        {
            documentHeader = queryRun.get(tableNum(RAssetDocument), 1);
            documentLine = queryRun.get(tableNum(RAssetDocument), 2);
            rAssetTable = queryRun.get(tableNum(RAssetTable));

            this.initReportHeaderData();

            RAssetSumCalc_Trans rAssetSumCalc = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNumReference, documentLine.StandardId, this.documentDate());

            actualScrap(rAssetTable.AccountNum);

            acquisitionValueMST = rAssetSumCalc.acquisitionTotalMST();
            acquisitionPrice = rAssetSumCalc.acquisitionTotalMST();
            assetStatus = rAssetTable.Status;
            itemId = rAssetScrap.ItemId;
            qty = abs(rAssetScrap.Qty);
            actualScrap(rAssetTable.AccountNum);
            issueDate = rAssetScrap.TransDate;
            employeeId = RAssetMoveHist::findLastOperation(rAssetTable.AccountNum, RAssetMoveType::Transfer, NoYes::No, this.documentDate()).NewEmployee;

            rAssetSumCalc = this.regNumberSumCalc(rAssetTable.AccountNumReference, documentLine.StandardId);
            deprAmountMST = abs(rAssetSumCalc.depreciationTotalMST());

            this.addRowData([itemId, acquisitionPrice, assetStatus], [qty, acquisitionValueMST, deprAmountMST], rowsMap);
            this.addRowData([employeeId, issueDate], [acquisitionValueMST, deprAmountMST], backRowsMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    protected Caption caption()
    {
        return "@GLS114060";
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeDocument</Name>
				<Source><![CDATA[
    protected void closeDocument()
    {
        this.completeDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    protected str comment()
    {
        return "@GLS114060";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        return new Dialog(this.comment(), this, '', new Form(formStr(RAssetReport)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileExt</Name>
				<Source><![CDATA[
    protected str fileExt()
    {
        #file
        return #excelDocumentExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportHeaderData</Name>
				<Source><![CDATA[
    protected void initReportHeaderData()
    {
        super();

        docComment = docComment ? docComment : documentHeader.Comment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args args)
    {
        super(args);

        rowsMap = new Map(Types::Container, Types::Container);
        backRowsMap = new Map(Types::Container, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReportKey</Name>
				<Source><![CDATA[
    protected container newReportKey()
    {
        return [rAssetTrans.LedgerDimension, assetLocationId, ledgerJournalTransRAsset.getTransDate(ledgerJournalTrans)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSheets</Name>
				<Source><![CDATA[
    private void prepareSheets()
    {
        int cntRows1 = rowsMap.elements();
        int cntRows2 = backRowsMap.elements();

        const int RowsInTempl = 3;

        if (cntRows1 > RowsInTempl)
        {
            insertedRows1 = cntRows1 - RowsInTempl;
            excelDocument.insertRows(21, 21, 1, 1, insertedRows1, 1);
        }

        if (cntRows2 > RowsInTempl)
        {
            insertedRows2 = cntRows2 - RowsInTempl;
            excelDocument.insertRows(12, 12, 1, 1, insertedRows2, 2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryReport</Name>
				<Source><![CDATA[
    protected Query queryReport()
    {
        Query query = new Query();

        const str DocumentHeaderDS = 'DocumentHeader';
        const str DocumentLineDS = 'DocumentLine';

        QueryBuildDataSource qbdDocumentHeader = query.addDataSource(tableNum(RAssetDocument), DocumentHeaderDS);
        qbdDocumentHeader.addRange(fieldNum(RAssetDocument, Num)).value(this.documentNumber());
        qbdDocumentHeader.addRange(fieldNum(RAssetDocument, Type)).value(queryValue(this.reportType()));
        qbdDocumentHeader.addRange(fieldNum(RAssetDocument, Date)).value(queryValue(this.documentDate()));
        qbdDocumentHeader.addRange(fieldNum(RAssetDocument, AssetId)).value(SysQuery::valueEmptyString());

        QueryBuildDataSource qbdDocumentLine = qbdDocumentHeader.addDataSource(tableNum(RAssetDocument), DocumentLineDS);
        qbdDocumentLine.relations(true);
        qbdDocumentLine.addRange(fieldNum(RAssetDocument, AssetId)).value(SysQuery::valueNotEmptyString());

        QueryBuildDataSource  qbdsRAssetTable = qbdDocumentLine.addDataSource(tableNum(RAssetTable));
        qbdsRAssetTable.addLink(fieldNum(RAssetDocument, AssetId), fieldNum(RAssetTable, AccountNum));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedRecord</Name>
				<Source><![CDATA[
    // Returns record which this report should be linked with
    public Common relatedRecord()
    {
        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportBody</Name>
				<Source><![CDATA[
    protected void reportBody(container _conKey, container _conValue, int _pageNo)
    {
        if (_pageNo == 1)
        {
            [itemId, acquisitionPrice, assetStatus] = _conKey;
            [qty, acquisitionValueMST, deprAmountMST] = _conValue;

            InventTable inventTable = InventTable::find(itemId);
            UnitOfMeasure unitOfMeasure = UnitOfMeasure::findBySymbol(inventTable.inventUnitId());

            excelDocument.insertValue(strFmt("@GLS116884", ConstColItemName, curRow), inventTable.itemName(), _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColItemId, curRow), inventTable.ItemId, _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColCodeOKEI, curRow), UnitOfMeasure_RU::codeOKEI_RU(unitOfMeasure), _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColUnitId, curRow), unitOfMeasure.Symbol, _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColQty, curRow), qty, _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColAcquisitionPrice, curRow), acquisitionPrice, _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColRAssetAmount1, curRow), acquisitionValueMST, _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColRAssetAmount2, curRow), deprAmountMST, _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColReasonName, curRow), strFmt("@GLS106745", assetStatus), _pageNo);

            amountWOVat += acquisitionValueMST;
            depreciationAmount += deprAmountMST;
        }
        else
        {
            [employeeId, issueDate] = _conKey;
            [acquisitionValueMST, deprAmountMST] = _conValue;

            EmployeeTable_RU employeeTable = EmployeeTable_RU::findByEmployeeId(employeeId);

            Percent percent;
            RAssetAmount amountWitoutDepr;

            if (acquisitionValueMST)
            {
                percent = (deprAmountMST / acquisitionValueMST) * 100;
                amountWitoutDepr = acquisitionValueMST - deprAmountMST;
            }

            excelDocument.insertValue(strFmt("@GLS116884", ConstColEmplName, curRow), employeeTable.worker().getFIO_RU(), _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColEmplId, curRow), employeeId, _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColIssueDate, curRow), date2str(issueDate, 123, 1, 2, 2, 2, 2,DateFlags::None), _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColdeprPercent, curRow), percent, _pageNo);
            excelDocument.insertValue(strFmt("@GLS116884", ConstColdeprAmount, curRow), amountWitoutDepr, _pageNo);
        }

        curRow++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFooter</Name>
				<Source><![CDATA[
    protected void reportFooter()
    {
        excelDocument.insertValue(ConstDocReason, docComment);
        excelDocument.insertValue(ConstAmountTotal, amountWOVat);
        excelDocument.insertValue(ConstDeprAmount, depreciationAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs report header data to excel
    /// </summary>
    protected void reportHeader()
    {
        excelDocument.insertValue(ConstDocNum, this.documentNumber());
        excelDocument.insertValue(ConstCompanyName, companyInfo.name());
        excelDocument.insertValue(ConstDeptName, RAssetLocation::find(assetLocationId).Name);
        excelDocument.insertValue(ConstCodeOKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, documentDate));
        excelDocument.insertValue(ConstCodeOKDP, CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, documentDate));
        excelDocument.insertValue(ConstActDate, date2str(documentDate, 123, 2, 2, 2, 2, 4,DateFlags::None));
        excelDocument.insertValue(ConstDeptCode, assetLocationId);
        excelDocument.insertValue(ConstLedgerAcc, mainAccountNum);
        excelDocument.insertValue(ConstAnalysisCode, analysisCode);

        amountWOVat = 0;
        depreciationAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.buildReportRowData();

        if (rowsMap.empty())
        {
            info("@GLS101555");
            return;
        }

        if (!this.makeDocument())
        {
            throw error(strFmt("@GLS101764", this.caption()));
        }

        this.prepareSheets();
        this.reportHeader();

        curRow = ConstRowStartP1;
        
        container conKey;
        container conValue;

        MapEnumerator rowsEnumerator = rowsMap.getEnumerator();
        while(rowsEnumerator.moveNext())
        {
            conKey = rowsEnumerator.currentKey();
            conValue = rowsEnumerator.currentValue();

            this.reportBody(conKey, conValue, 1);
        }
        this.reportFooter();

        curRow = ConstRowStartP2;
        rowsEnumerator = backRowsMap.getEnumerator();
        while(rowsEnumerator.moveNext())
        {
            conKey = rowsEnumerator.currentKey();
            conValue = rowsEnumerator.currentValue();

            this.reportBody(conKey, conValue, 4);
        }

        if (excelDocument)
        {
            this.closeDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAssetMB4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficeXMLDocument</Name>
				<Source><![CDATA[
    protected boolean initOfficeXMLDocument()
    {
        boolean ret = true;

        excelDocument = XMLExcelDocument_RU::newFromResource(this.templateName(), false);
        if (excelDocument == null)
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return documentPath + "@SYS34952" + this.documentNumber() + "@SYS34953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'MB4';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>