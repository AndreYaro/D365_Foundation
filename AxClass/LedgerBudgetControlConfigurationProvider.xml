<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBudgetControlConfigurationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Budget control configuration information provider.
/// </summary>
[ExportMetadataAttribute("LedgerIBudgetControlConfigurationProvider", "DefaultProvider"),ExportAttribute("Dynamics.AX.Application.LedgerIBudgetControlConfigurationProvider")]
public class LedgerBudgetControlConfigurationProvider implements LedgerIBudgetControlConfigurationProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existActiveForPrimaryLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if budget control is active for primary <c>Ledger</c>.
    /// </summary>
    /// <param name = "_primaryLedgerRecId">The record id of the primary <c>Ledger</c>.</param>
    /// <param name = "_useCacheLookup">Indicates a cache lookup can be used.</param>
    /// <returns>true if budget control is active for primary ledger; otherwise, false.</returns>
    public boolean existActiveForPrimaryLedger(RefRecId _primaryLedgerRecId, boolean _useCacheLookup = true)
    {
        return BudgetControlConfiguration::existActiveForPrimaryLedger(_primaryLedgerRecId, _useCacheLookup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowAccountStructureRemovalByLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if <c>AccountStructure</c> removal is allowed for <c>Ledger</c>.
    /// </summary>
    /// <param name = "_dimensionHierarchy">The account structure.</param>
    /// <param name = "_ledger">The <c>Ledger</c>.</param>
    /// <returns>true if removal is allowed; otherwise, false.</returns>
    public boolean allowAccountStructureRemovalByLedger(DimensionHierarchy _dimensionHierarchy, LedgerRecId _ledger)
    {
        boolean isAllowed = true;

        if (_dimensionHierarchy && _ledger)
        {
            Ledger ledger;
            BudgetControlConfiguration budgetControlConfiguration;

            while select Name from ledger
                where ledger.RecId == _ledger
                exists join budgetControlConfiguration
                    where budgetControlConfiguration.PrimaryLedger == ledger.RecId
                        && budgetControlConfiguration.DimensionHierarchyAccountStructure == _dimensionHierarchy.RecId
            {
                // The account structure is referenced by a budget control configuration.
                isAllowed = checkFailed(strfmt("@SYS329542", _dimensionHierarchy.Name, ledger.Name));
            }
        }

        return isAllowed;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>