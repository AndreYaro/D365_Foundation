<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustFreeInvoiceWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustFreeInvoiceWorkflow</c> class is used to start a free text invoice workflow by calling
///    the <c>activateFromWorkflowTemplate</c> method of the <c>Workflow</c> class.
/// </summary>
public class CustFreeInvoiceWorkflow
{
    RecId custInvoiceTableId;
    WorkflowVersionTable workflowVersionTable;
    WorkflowComment workflowComment;
    boolean submit;
    WorkflowWorkItemTable workflowWorkItemTable;
    userId userId;
    menuItemName menuItemName;
    workflowTypeName workflowTemplateName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens a dialog box for submitting a free text invoice.
    /// </summary>
    /// <returns>
    ///    true if the dialog box was closed by pressing the Ok button; otherwise, false.
    /// </returns>
    public boolean dialogOk()
    {
        WorkflowSubmitDialog workflowSubmitDialog;
        WorkflowWorkItemActionDialog workflowWorkItemActionDialog;
        boolean ok;

        if (menuItemName == menuitemActionStr(CustFreeInvoiceSubmitToWorkflow))
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(this.parmWorkflowVersionTable());
            workflowSubmitDialog.run();
            this.parmWorkflowComment(workflowSubmitDialog.parmWorkflowComment());
            ok = workflowSubmitDialog.parmIsClosedOK();
        }

        else if (menuItemName == menuitemActionStr(CustFreeInvoiceReSubmit))
        {
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(
                                                workflowWorkItemTable,
                                                WorkflowWorkItemActionType::Resubmit,
                                                new MenuFunction(menuitemActionStr(CustFreeInvoiceReSubmit), MenuItemType::Action));

            workflowWorkItemActionDialog.run();
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            ok = workflowWorkItemActionDialog.parmIsClosedOK();
            userId = workflowWorkItemActionDialog.parmTargetUser();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the free text invoice workflow.
    /// </summary>
    /// <param name="_documentRecordId">
    /// The document record ID for which the workflow is initialized.
    /// </param>
    /// <param name="_menuItemName">
    /// The name of the caller menu item.
    /// </param>
    /// <param name="_workflowVersionTable">
    /// A record in the <c>WorkflowVersionTable</c> table.
    /// </param>
    /// <param name="_workflowWorkItemTable">
    /// A record in the <c>WorkflowWorkItemTable</c> table.
    /// </param>
    public void init(
        RecId _documentRecordId,
        menuItemName _menuItemName,
        WorkflowVersionTable _workflowVersionTable,
        WorkflowWorkItemTable _workflowWorkItemTable)
    {
        if (_documentRecordId)
        {
            this.parmCustInvoiceTableId(_documentRecordId);
            this.parmSubmit(_menuItemName == menuitemActionStr(CustFreeInvoiceSubmitToWorkflow));
            this.parmMenuItemName(_menuItemName);

            this.parmWorkflowVersionTable(_workflowVersionTable);
            this.parmWorkflowWorkItemtable(_workflowWorkItemTable);
            this.parmWorkflowTemplateName(this.parmWorkflowVersionTable().workflowTable().TemplateName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>CustInvoiceTable</c> record identity.
    /// </summary>
    /// <param name="_custInvoiceTableId">
    ///    The <c>CustInvoiceTable</c> record to set.
    /// </param>
    /// <returns>
    ///    The current <c>CustInvoiceTable</c> record identity.
    /// </returns>
    public RecId parmCustInvoiceTableId(RecId _custInvoiceTableId = custInvoiceTableId)
    {
        custInvoiceTableId = _custInvoiceTableId;

        return custInvoiceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the name of the workflow menu item.
    /// </summary>
    /// <param name="_menuItemName">
    ///    The menu item name to set.
    /// </param>
    /// <returns>
    ///    The current menu item name.
    /// </returns>
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;
        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the submit class variable.
    /// </summary>
    /// <param name="_submit">
    ///    The value of submit class variable to set.
    /// </param>
    /// <returns>
    ///    The current value of the submit class variable.
    /// </returns>
    public boolean parmSubmit(boolean _submit = submit)
    {
        submit = _submit;
        return submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>WorkflowComment</c> record.
    /// </summary>
    /// <param name="_workflowComment">
    ///    The <c>WorkflowComment</c> record to set.
    /// </param>
    /// <returns>
    ///    The current <c>WorkflowComment</c> record.
    /// </returns>
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;
        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowTemplateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the template name of the free text invoice workflow.
    /// </summary>
    /// <param name="_workflowTemplateName">
    ///    The template name of the free text invoice workflow to set.
    /// </param>
    /// <returns>
    ///    The current template name of the free text invoice workflow.
    /// </returns>
    public workflowTypeName parmWorkflowTemplateName(workflowTypeName _workflowTemplateName = workflowTemplateName)
    {
        workflowTemplateName = _workflowTemplateName;
        return workflowTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>WorkflowVersionTable</c> record.
    /// </summary>
    /// <param name="_workflowVersionTable">
    ///    The <c>WorkflowVersionTable</c> record to set.
    /// </param>
    /// <returns>
    ///    The current <c>WorkflowVersionTable</c> record.
    /// </returns>
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;
        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemtable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>WorkflowWorkItemTable</c> record.
    /// </summary>
    /// <param name="_workflowWorkItemTable">
    ///    The <c>WorkflowWorkItemTable</c> record to set.
    /// </param>
    /// <returns>
    ///    The current <c>WorkflowWorkItemTable</c> record.
    /// </returns>
    public WorkflowWorkItemTable parmWorkflowWorkItemtable(WorkflowWorkItemTable _workflowWorkItemTable = workflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;
        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resubmits the free text invoice to workflow.
    /// </summary>
    /// <remarks>
    ///    This method is called from the workflow framework when a task or approval is resubmitted.
    /// </remarks>
    public void reSubmit()
    {
        CustFreeInvoiceWFApprovalState custInvoiceWFApprovalState = CustInvoiceTable::findRecId(custInvoiceTableId).WorkflowApprovalState;

        if (custInvoiceWFApprovalState == CustFreeInvoiceWFApprovalState::Returned
            || custInvoiceWFApprovalState == CustFreeInvoiceWFApprovalState::ChangeRequest)
        {
            WorkflowWorkItemActionManager::dispatchWorkItemAction(
                workflowWorkItemTable,
                workflowComment,
                userId,
                WorkflowWorkItemActionType::Resubmit,
                menuItemName);

            CustInvoiceTable::setWorkflowState(custInvoiceTableId, CustFreeInvoiceWFApprovalState::Submitted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Activates the free text invoice workflow.
    /// </summary>
    /// <remarks>
    ///    This method starts the workflow configuration by calling the <c>activateFromWorkflowTemplate</c>
    ///    method of the <c>Workflow</c> class by using information about the free text invoice record.
    /// </remarks>
    public void submit()
    {
        if (custInvoiceTable::findRecId(custInvoiceTableId).WorkflowApprovalState == CustFreeInvoiceWFApprovalState::NotSubmitted)
        {
            Workflow::activateFromWorkflowType(
                this.parmWorkflowTemplateName(),
                custInvoiceTableId,
                this.parmWorkflowComment(),
                NoYes::No);

            CustInvoiceTable::setWorkflowState(custInvoiceTableId, CustFreeInvoiceWFApprovalState::Submitted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustFreeInvoiceWorkflow construct()
    {
        return new CustFreeInvoiceWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Submits a free text invoice document and starts the corresponding workflow.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> value from the caller.
    /// </param>
    public static void main(Args _args)
    {
        CustFreeInvoiceWorkflow custFreeInvoiceWorkflow = CustFreeInvoiceWorkflow::construct();
        CustInvoiceTable custInvoiceTable;
        FormDataSource custInvoiceTableDataSource;
        str callerMenuItemName;
        FormRun caller;

        if (_args)
        {
            callerMenuItemName = _args.menuItemName();
            caller = _args.caller();
            custInvoiceTable = _args.record();
            custInvoiceTableDataSource = FormDataUtil::getFormDataSource(custInvoiceTable);
        }
        else
        {
            throw error("@SYS25407");
        }

        if (callerMenuItemName == menuitemActionStr(CustFreeInvoiceSubmitToWorkflow) ||
            callerMenuItemName == menuitemActionStr(CustFreeInvoiceReSubmit))
        {
            custFreeInvoiceWorkflow.init(
                custInvoiceTable.RecId,
                callerMenuItemName,
                caller.getActiveWorkflowConfiguration(),
                caller.getActiveWorkflowWorkItem());
        }
        else
        {
            custFreeInvoiceWorkflow.init(
                custInvoiceTable.RecId,
                callerMenuItemName,
                null,
                null);
        }

        if (custFreeInvoiceWorkflow.dialogOk())
        {
            if (custFreeInvoiceWorkflow.canSubmitCustFreeInvoiceWorkflow(custInvoiceTable))
            {
                if (custFreeInvoiceWorkflow.parmSubmit())
                {
                    custFreeInvoiceWorkflow.submit();
                }
                else
                {
                    custFreeInvoiceWorkflow.reSubmit();
                }
            }

            if (custInvoiceTableDataSource)
            {
                custInvoiceTableDataSource.research(true);
                custInvoiceTableDataSource.refresh();
            }

            if (callerMenuItemName == menuitemActionStr(CustFreeInvoiceSubmitToWorkflow) ||
                    callerMenuItemName == menuitemActionStr(CustFreeInvoiceReSubmit))
            {
                caller.updateWorkflowControls();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitCustFreeInvoiceWorkflow</Name>
				<Source><![CDATA[
    private boolean canSubmitCustFreeInvoiceWorkflow(CustInvoiceTable _custInvoiceTable)
    {
        boolean canSubmit;

        CustParameters custParameters = CustParameters::find();

        if ((AccountingDistributionWorkflowSubmissionFeature::isEnabled() && custParameters.BypassValidationOfAccountingDistributions == NoYes::Yes)
            || _custInvoiceTable.validateAccountingDistributions())
        {
            canSubmit = true;
        }

        return canSubmit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>