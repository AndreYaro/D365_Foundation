<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalPostVendorProdBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides capabilities for posting BOM and route prod subcontracting journals based on one or more instances of <c>ProdBOM</c>.
/// In order to post, a <c>ProdBOM</c> representing the vendor work is needed. 
/// The <c>ProdBOM</c> to post is determined in the shouldPostSubVendorWork method.
/// </summary>
public class ProdJournalPostVendorProdBOM
{    
    private ProdBOM serviceProdBOM;
    private TransDate postDate;
    private InventQty prodQtyCalc;
    private InventQty qtyOfServiceBOMBeforeCalc;
    private PurchLine purchLine;
    private Map prodQtyMap = new Map(Types::Int64, Types::Real);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the provided <c>ProdBOM</c>'s quantity for posting.
    /// If the <c>ProdBOM</c> passes the verification, it is also set as the service which represents the vendor work.
    /// </summary>
    /// <param name = "_prodBOM">The ProdBOM which is being posted.</param>
    /// <param name = "_postDate">The post date.</param>
    /// <param name = "_qtyUpdateNow">The quantity to update now.</param>
    /// <param name = "_purchLine">The purchase line that is being processed.</param>
    public void addProdBOM(ProdBOM _prodBOM, TransDate _postDate, InventQty _qtyUpdateNow, PurchLine _purchLine)
    {
        if (this.checkProdBOM(_prodBOM))
        {
            InventQty qtyCalc = this.addProdQtyToMap(_qtyUpdateNow, _prodBOM);
            if (this.shouldPostSubVendorWork(_prodBOM))
            {

                // The first verifiable item is assigned as the vendor service
                if (!this.serviceProdBOM)
                {
                    qtyOfServiceBOMBeforeCalc = _qtyUpdateNow;

                    this.serviceProdBOM = _prodBOM;
                    this.postDate = _postDate;
                    this.prodQtyCalc = qtyCalc;
                    if (_purchLine.RecId)
                    {
                        // Retrieve a new PurchLine buffer to remove the link with the input parameter variable
                        this.purchLine = PurchLine::findRecId(_purchLine.RecId);
                    }
                    else
                    {
                        this.purchLine = _purchLine;
                    }
                }
                else
                {
                    _prodBOM.postVendorProdBOM(_postDate, _qtyUpdateNow, purchLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the production journal if a service item has been set.
    /// </summary>
    public void postProdBOM()
    {
        if (serviceProdBOM)
        {
            boolean ok = true;
            boolean isJournalCreated = false;
            ProdJournalTable prodJournalTable;
            ProdParametersDim prodParametersDim = serviceProdBOM.prodTable().prodParametersDim();

            // create journal
            if (this.mustCreatePickList(serviceProdBOM, prodParametersDim))
            {
                setPrefix(strFmt("@SYS90210", serviceProdBOM.ProdId));
                setPrefix("@SYS60017");

                ProdJournalCreateBOM prodJournalCreateBOM = this.setupProdJournalCreateBOM(serviceProdBOM, postDate, purchLine, prodParametersDim, prodQtyCalc, prodQtyMap);
                ok = this.checkCreateBOMInitialization(prodJournalCreateBOM, prodParametersDim);

                if (ok)
                {
                    prodJournalCreateBOM.runOperation();
                    prodJournalTable = prodJournalCreateBOM.usedProdJournalTable();
                }

                // post journal
                if (ok && prodJournalTable.RecId && prodJournalTable.JournalId)
                {
                    isJournalCreated = true;
                    ProdJournalCheckPostBOM prodJournalCheckPostBOM = ProdJournalCheckPostBOM::newPostJournal(prodJournalTable.JournalId, prodParametersDim.PurchReceiveShowInfo);
                    prodJournalCheckPostBOM.parmThrowCheckFailed(false);

                    ok = ok && prodJournalCheckPostBOM.validateJournalTable(prodJournalTable);

                    if (ok)
                    {
                        prodJournalCheckPostBOM.runOperation();
                        purchLine.reread();
                    }
                }
            }

            if (!ok)
            {
                if (isJournalCreated)
                {
                    info(strFmt("@SYS98241", prodJournalTable.JournalId));
                }

                warning("@SYS23002");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the production route if a service <c>ProdBOM</c> has been set.
    /// </summary>
    public void postProdRoute()
    {
        if (serviceProdBOM)
        {
            serviceProdBOM.postVendorProdRoute(postDate, qtyOfServiceBOMBeforeCalc, purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProdQtyToMap</Name>
				<Source><![CDATA[
    private InventQty addProdQtyToMap(InventQty _qtyUpdateNow, ProdBOM _prodBOM)
    {
        InventQty prodQty = _prodBOM.calcSeriesSizeFromInventQty(_qtyUpdateNow);
        prodQtyMap.insert(_prodBOM.RecId, prodQty);
        return prodQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdBOM</Name>
				<Source><![CDATA[
    private boolean checkProdBOM(ProdBOM _prodBOM)
    {
        return _prodBOM.OprNum && _prodBOM.type().isPeggedSupply();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostSubVendorWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sub-vendor work should be posted by the given <c>ProdBOM</c>.
    /// </summary>
    /// <param name = "_prodBOM">The <c>ProdBOM</c> instance to check.</param>
    /// <returns>True if the work should be posted by the given <c>ProdBOM</c>; false if not.</returns>
    private boolean shouldPostSubVendorWork(ProdBOM _prodBOM)
    {
        return _prodBOM.itemType() == ItemType::Service && _prodBOM.OprNum != serviceProdBOM.OprNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreateBOMInitialization</Name>
				<Source><![CDATA[
    private boolean checkCreateBOMInitialization(ProdJournalCreateBOM _createBOM, ProdParametersDim _prodParametersDim)
    {
        boolean ok = true;
        if (_prodParametersDim.bomJournalNameId)
        {
            _createBOM.init();
            _createBOM.initProdJournalTableData(ProdJournalType::Picklist);
        }
        else
        {
            ok = checkFailed("@SYS26138");
        }
        return ok && _createBOM.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupProdJournalCreateBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up a <c>ProdJournalCreateBOM</c> instance with the necessary parameters.
    /// </summary>
    /// <param name = "_prodBOM">The production BOM.</param>
    /// <param name = "_postDate">The posting date</param>
    /// <param name = "_purchLine">The purchase order line</param>
    /// <param name = "_prodParametersDim">The production parameters</param>
    /// <param name = "_prodQtyCalc">The BOM quantity</param>
    /// <param name = "_prodQtyMap">A Map of production quantity values per production BOM record IDs</param>
    /// <returns>A new instance of the <c>ProdJournalCreateBOM</c> class initialized with the given parameters.</returns>
    protected ProdJournalCreateBOM setupProdJournalCreateBOM(
        ProdBOM _prodBOM,
        TransDate _postDate,
        PurchLine _purchLine,
        ProdParametersDim _prodParametersDim,
        InventQty _prodQtyCalc,
        Map _prodQtyMap)
    {
        ProdParameters prodParameters = ProdParameters::find();
        NoYes endUpdatePickList = _purchLine.RemainPurchPhysical ? NoYes::No : NoYes::Yes;
        ProdJournalCreateBOM prodJournalCreateBOM = ProdJournalCreateBOM::construct();
        prodJournalCreateBOM.parmTransDate(_postDate);
        prodJournalCreateBOM.parmProdId(_prodBOM.ProdId);
        prodJournalCreateBOM.parmEndUpdate(endUpdatePickList);
        prodJournalCreateBOM.parmOprNumFrom(_prodBOM.OprNum);
        prodJournalCreateBOM.parmOprNumTo(_prodBOM.OprNum);
        prodJournalCreateBOM.parmConsumpAsProposal(NoYes::Yes);
        prodJournalCreateBOM.parmProposalAsConsump(NoYes::No);
        prodJournalCreateBOM.parmConsumpProposal(ProdBOMConsumpProposal::Qty);
        prodJournalCreateBOM.parmBOMAutoConsump(_prodParametersDim.bomAutoConsumpPurchReceive);
        prodJournalCreateBOM.parmSkipAccError(NoYes::No);
        prodJournalCreateBOM.parmJournalNameId(_prodParametersDim.bomJournalNameId);
        prodJournalCreateBOM.parmDrawNegative(prodParameters.bomJournalDrawNegative);
        prodJournalCreateBOM.parmQtyCalc(_prodQtyCalc);
        prodJournalCreateBOM.parmProdQtyMap(_prodQtyMap);
        prodJournalCreateBOM.setPartialReceive(_prodBOM, _prodQtyCalc);

        // set both to ensure that the proposed quantity is calculated
        ProdRoute prodRoute = _prodBOM.prodRoute();
        prodJournalCreateBOM.parmProdIsStart(prodRoute.OprStartedUp == NoYes::No);
        prodJournalCreateBOM.parmProdIsFinish(true);
        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreatePickList</Name>
				<Source><![CDATA[
    private boolean mustCreatePickList(ProdBOM _prodBOM, ProdParametersDim _prodParametersDim)
    {
        return _prodParametersDim && (
            (_prodParametersDim.bomAutoConsumpPurchReceive == BOMAutoConsump::Always)
            ||
            (_prodParametersDim.bomAutoConsumpPurchReceive == BOMAutoConsump::FlushingPrincip
                            && _prodBOM.flushingPrinciple() != ProdFlushingPrincipBOM::Manual)
            );
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>