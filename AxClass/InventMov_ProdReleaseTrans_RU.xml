<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_ProdReleaseTrans_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventMov_ProdReleaseTrans_RU extends InventMovement
{
    ProdTable           prodTable;
    ProdReleaseTrans_RU prodReleaseTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
        public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (!cacheAccountBalanceSheet)
        {
            if (prodTable.ProdPostingType == ProdPostingType::ProdGroup)
            {
                cacheAccountBalanceSheet = ProdGroup::find(prodTable.ProdGroupId).ReceiptLedgerDimension;
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReceipt));
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
        public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            if (prodTable.ProdPostingType == ProdPostingType::ProdGroup)
            {
                cacheAccountOperations = ProdGroup::find(prodTable.ProdGroupId).ReceiptOffsetLedgerDimension;
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReceiptOffsetAccount));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountPhysical</Name>
				<Source><![CDATA[
        public LedgerDimensionDefaultAccount accountPhysical()
    {
        if (! cacheAccountPhysical)
        {
            if (prodTable.ProdPostingType == ProdPostingType::ProdGroup)
            {
                cacheAccountPhysical = ProdGroup::find(prodTable.ProdGroupId).ReportLedgerDimension;
            }
            else
            {
                cacheAccountPhysical = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReportFinished));
            }
        }

        return cacheAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
        public void addRemainPhysical(InventQty _inventQty)
    {
        prodReleaseTrans.InventRemainPhysical += _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysicalUnit</Name>
				<Source><![CDATA[
        public void addRemainPhysicalUnit(UnitQty _unitQty)
    {
        prodReleaseTrans.RemainPhysical += _unitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>childBuffer</Name>
				<Source><![CDATA[
        public Common childBuffer(Common _prodReleaseTrans = prodReleaseTrans)
    {
        prodReleaseTrans = _prodReleaseTrans as ProdReleaseTrans_RU;
        return prodReleaseTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
        public InventDimId inventDimId()
    {
        return prodReleaseTrans.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
        public ItemId itemId()
    {
        return prodReleaseTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
        public boolean mustBeBookedPhysically()
    {
        if (this.inventModelType().mustAlwaysBeBookedPhysically() || ! prodTable.prodParametersDim().NoPostReleaseJournal_RU)
        {
            return super();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
        public boolean mustBeRemainControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProdReleaseTrans_RU _prodReleaseTrans,
                    InventType          _inventType = new InventType(_prodReleaseTrans))
    {
        super(_prodReleaseTrans, _inventType);

        prodReleaseTrans    = _prodReleaseTrans;
        prodTable           = _prodReleaseTrans.prodTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
        public InventMovement newMovement_Orig()
    {
        if (prodReleaseTrans.RecId)
        {
            return new InventMov_ProdReleaseTrans_RU(prodReleaseTrans.orig(), inventType);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountPhysical</Name>
				<Source><![CDATA[
        public LedgerDimensionDefaultAccount offsetAccountPhysical()
    {
        if (! cacheOffsetAccountPhysical)
        {
            if (prodTable.ProdPostingType == ProdPostingType::ProdGroup)
            {
                cacheOffsetAccountPhysical = ProdGroup::find(prodTable.ProdGroupId).ReportOffsetLedgerDimension;
            }
            else
            {
                cacheOffsetAccountPhysical = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReportFinishedOffsetAccount));
            }
        }

        return cacheOffsetAccountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
        public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::ProdReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
        public LedgerPostingType postingOffsetPhysical()
    {
        return LedgerPostingType::ProdReportFinishedOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
        public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::ProdReceiptOffsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
        public LedgerPostingType postingPhysical()
    {
        return LedgerPostingType::ProdReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
        public InventQty remainPhysical()
    {
        return prodReleaseTrans.InventRemainPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysicalUnit</Name>
				<Source><![CDATA[
        public UnitQty remainPhysicalUnit()
    {
        return prodReleaseTrans.RemainPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
        public void setRemainPhysical(InventQty _inventQty)
    {
        prodReleaseTrans.InventRemainPhysical = _inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysicalUnit</Name>
				<Source><![CDATA[
        public void setRemainPhysicalUnit(UnitQty _unitQty)
    {
        prodReleaseTrans.RemainPhysical = _unitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storno_RU</Name>
				<Source><![CDATA[
        public Storno_RU storno_RU()
    {
        return storno || prodReleaseTrans.Storno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
        public TransDate transDate()
    {
        return prodReleaseTrans.DateWIP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
        public InventTransId transId()
    {
        return prodReleaseTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
        public InventQty transQty()
    {
        return prodReleaseTrans.inventReleaseQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQtyUnit</Name>
				<Source><![CDATA[
        public UnitQty transQtyUnit()
    {
        return prodReleaseTrans.ReleaseQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
        public InventTransRefId transRefId()
    {
        return prodReleaseTrans.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
        public InventTransType transType()
    {
        return InventTransType::ProdRelease_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transUnitId</Name>
				<Source><![CDATA[
        public UnitOfMeasureSymbol transUnitId()
    {
        return prodReleaseTrans.UnitId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>