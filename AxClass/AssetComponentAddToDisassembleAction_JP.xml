<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetComponentAddToDisassembleAction_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Runbase for adding disassembling.
/// </summary>
class AssetComponentAddToDisassembleAction_JP extends RunBase
{
    DialogField dialogAvailableQty;
    DialogField dialogAddQty;
    DialogRunbase dialog;

    Qty availableQty;
    Qty addQty;

    AssetComponent_JP assetComponent;
    FormDataSource dataSource;
    boolean isQtyNeedSpecified;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks is batch allowed.
    /// </summary>
    /// <returns>
    /// True if batch is allowed; otherwise, false.
    /// </returns>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYS4110646";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        // Qty
        dialogAvailableQty = dialog.addFieldValue(extendedTypeStr(Qty), availableQty, "@SYS54429", "@SYS4110663");
        dialogAvailableQty.allowEdit(false);
        dialogAddQty = dialog.addFieldValue(extendedTypeStr(QtyStandard), addQty, "@SYS35402", "@SYS4110673");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        addQty = dialogAddQty.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes.
    /// </summary>
    protected void initialize()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00028, funcName());

        if (isQtyNeedSpecified)
        {
            availableQty = assetComponent.availableScrapQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetComponent</Name>
				<Source><![CDATA[
    public AssetComponent_JP parmAssetComponent(AssetComponent_JP _assetComponent = assetComponent)
    {
        assetComponent = _assetComponent;
        return assetComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmDataSource(FormDataSource _dataSource = dataSource)
    {
        dataSource = _dataSource;
        return dataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsQtyNeedSpecified</Name>
				<Source><![CDATA[
    public boolean parmIsQtyNeedSpecified(boolean _isQtyNeedSpecified = isQtyNeedSpecified)
    {
        isQtyNeedSpecified = _isQtyNeedSpecified;

        return isQtyNeedSpecified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (isQtyNeedSpecified
            && addQty
            && assetComponent.isScrapable())
        {
            AssetComponentAddToDisassemble_JP::addDisassemble(
                assetComponent.RecId,
                0,
                addQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMultiple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run multile entries disassembling.
    /// </summary>
    public void runMultiple()
    {
        container markedRecordIdContainer;
        AssetComponent_JP assetComponentAssembling;
        assetComponentAssembling = dataSource.getFirst(1);
        while (assetComponentAssembling)
        {
            if (assetComponentAssembling.isScrapable())
            {
                markedRecordIdContainer += assetComponentAssembling.RecId;
            }
            assetComponentAssembling = dataSource.getNext();
        }

        if (markedRecordIdContainer)
        {
            AssetComponentAddToDisassembleAction_JP::addDisassembleEntries(markedRecordIdContainer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perfroms validation.
    /// </summary>
    /// <param name="calledFrom">
    /// The called form.
    /// </param>
    /// <returns>
    /// True if validation is passed;otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (availableQty < addQty)
            {
                ret = checkFailed("@SYS4110674");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDisassembleEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add disassembling entries.
    /// </summary>
    /// <param name="_recids">
    /// The container of recordids.
    /// </param>
    private static void addDisassembleEntries(container _recids)
    {
        int i;
        RefRecId assetComponentRecid;
        Qty availabeQty;

        ttsBegin;
        for (i = 1; i <= conLen(_recids); i++)
        {
            assetComponentRecid = conPeek(_recids, i);
            availabeQty = AssetComponent_JP::find(assetComponentRecid).availableScrapQty(false);
            if (availabeQty)
            {
                AssetComponentAddToDisassemble_JP::addDisassemble(
                    assetComponentRecid,
                    0,
                    availabeQty);
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AssetComponentAddToDisassembleAction_JP construct()
    {
        return new AssetComponentAddToDisassembleAction_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        AssetComponentAddToDisassembleAction_JP addToDisassemble;

        if (!args.record()
            || args.dataset() != tableNum(AssetComponent_JP)
            || FormDataUtil::getFormDataSource(args.record()) == null)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        addToDisassemble = AssetComponentAddToDisassembleAction_JP::construct();
        addToDisassemble.parmAssetComponent(args.record());
        addToDisassemble.parmDataSource(FormDataUtil::getFormDataSource(args.record()));
        addToDisassemble.parmIsQtyNeedSpecified(addToDisassemble.parmDataSource().recordsMarked().lastIndex() <= 1
            && addToDisassemble.parmAssetComponent().isScrapable());
        addToDisassemble.initialize();

        if (addToDisassemble.parmIsQtyNeedSpecified())
        {
            if (addToDisassemble.prompt())
            {
                addToDisassemble.runOperation();
            }
        }
        else
        {
            addToDisassemble.runMultiple();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>