<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostLevelCompletionTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Waits for <c>InventCostCalculateTask</c> classes to be completed for a given level.
/// </summary>
class InventCostLevelCompletionTask extends InventCostTaskBase implements BatchRetryable
{
    BOMLevel            bomLevel;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        bomLevel
     #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the batch tasks for the next level or iteration.
    /// </summary>
    /// <remarks>
    /// If the current level has completed, next level is created.
    /// If the current level has not completed, then the current level is re-processed.
    /// If the current level is zero tasks are created for the next iteration.
    /// </remarks>
    protected void doRun()
    {
        if (inventCostTaskController.isCurrentBundleComplete(bomLevel))
        {
            inventCostTaskController.createBatchTasks(this.getNextBomLevel());
        }
        else
        {
            inventCostTaskController.restartCurrentBundles(bomLevel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextBomLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a bom level of the next waiting bundle.
    /// </summary>
    private BOMLevel getNextBomLevel()
    {
        BOMLevel nextBomLevel;

        if (bomLevel > 0)
        {
            nextBomLevel = bomLevel - 1;
        }
        else if (inventCostTaskController.remainingItems(voucher, 0, 0))
        {
            nextBomLevel = 0;
        }
        else if (inventCostTaskController.remainingItems(voucher, 0, inventClosing.NumOfIteration + 1))
        {
            nextBomLevel = 0;

            inventCostTaskController.updateIteration();
        }
        else
        {
            nextBomLevel = -1;
        }

        return nextBomLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    protected ClassDescription getTaskDescription()
    {
        return InventCostLevelCompletionTask::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMLevel</Name>
				<Source><![CDATA[
    public BOMLevel parmBOMLevel(BOMLevel _bomLevel = bomLevel)
    {
        bomLevel = _bomLevel;

        return bomLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);
        container packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedBase] = _packedClass;
                return super(packedBase);
        }

        return super(_packedClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventCostLevelCompletionTask construct()
    {
        return new InventCostLevelCompletionTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYS4001036";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventCostLevelCompletionTask</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher of the inventory closing.
    /// </param>
    /// <param name="_transDate">
    /// The date of the inventory closing.
    /// </param>
    /// <param name="_bomLevel">
    /// The level for which the inventory closing should be performed.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCostLevelCompletionTask</c> class.
    /// </returns>
    public static InventCostLevelCompletionTask newTask(
        Voucher             _voucher,
        TransDate           _transDate,
        BOMLevel            _bomLevel
        )
    {
        InventCostLevelCompletionTask inventCostLevelCompletionTask = InventCostLevelCompletionTask::construct();

        inventCostLevelCompletionTask.parmVoucher(_voucher);
        inventCostLevelCompletionTask.parmTransDate(_transDate);
        inventCostLevelCompletionTask.parmBOMLevel(_bomLevel);

        return inventCostLevelCompletionTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>