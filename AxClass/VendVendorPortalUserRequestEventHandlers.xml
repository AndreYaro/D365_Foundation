<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorPortalUserRequestEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the Vendor portal user request extensions events for the <c>SysUserRequestListPage</c>,
/// <c>SysUserRequest</c>, <c>SysUserRequestParameters</c> and the <c>SysUserReqeustPreviewPan</c> forms.
/// </summary>
final class VendVendorPortalUserRequestEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SysUserRequest_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnQueryExecuting event of the <c>SysUserRequest</c> data source for the <c>SysUserRequestListPage</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(SysUserRequestListPage, SysUserRequest), FormDataSourceEventType::QueryExecuting)]
    public static void SysUserRequest_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun sysUserRequestListPageForm = _sender.formRun();
        DirPerson dirPerson = sysUserRequestListPageForm.args().record() as DirPerson;

        if (dirPerson.RecId != 0)
        {
            FormDataSource sysUserRequest_ds = sysUserRequestListPageForm.dataSource(formDataSourceStr(SysUserRequestListPage, SysUserRequest)) as FormDataSource;

            QueryBuildRange range;
            range = SysQuery::findOrCreateRange(sysUserRequest_ds.query().dataSourceTable(tableNum(SysUserRequest)), fieldNum(VendVendorPortalUserRequest, Person));
            range.status(RangeStatus::Hidden);
            range.value(SysQueryRangeUtil::value(dirPerson.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysUserRequest_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnActivated event of the <c>SysUserRequest</c> data source for the <c>SysUserRequestListPage</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(SysUserRequestListPage, SysUserRequest), FormDataSourceEventType::Activated)]
    public static void SysUserRequest_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun sysUserRequestListPageForm = _sender.formRun();
        FormDataSource contactPerson_ds = sysUserRequestListPageForm.dataSource(formDataSourceStr(SysUserRequestListPage, SysUserRequest)) as FormDataSource;

        FormControl recallButton = sysUserRequestListPageForm.control(sysUserRequestListPageForm.controlId(formControlStr(SysUserRequestListPage, VendVendorPortalUserRequestWorkflowCancel)));

        if (recallButton != null && recallButton.isVisible())
        {
            VendVendorPortalUserRequest userRequest = contactPerson_ds.cursor() as VendVendorPortalUserRequest;
            recallButton.enabled(userRequest.isRecallingRequestAllowed());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ContactPerson_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnQueryExecuting event of the <c>ContactPerson</c> data source for the <c>SysUserRequest</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(SysUserRequest, ContactPerson), FormDataSourceEventType::QueryExecuting)]
    public static void ContactPerson_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun sysUserRequestForm = _sender.formRun();
        VendVendorPortalUserRequest userRequest = sysUserRequestForm.args().record() as VendVendorPortalUserRequest;
        FormControl contactFor = sysUserRequestForm.control(sysUserRequestForm.controlId(formControlStr(SysUserRequest, ContactFor_Details)));

        if (contactFor != null && userRequest.Person != 0)
        {
            FormDataSource contactPerson_ds = sysUserRequestForm.dataSource(formDataSourceStr(SysUserRequest, ContactPerson)) as FormDataSource;
            SysUserRequest sysUserRequestBuffer = sysUserRequestForm.dataSource(formDataSourceStr(SysUserRequest, SysUserRequest)).cursor();
            contactPerson_ds.queryBuildDataSource().addDynalink(fieldNum(ContactPerson, Party), sysUserRequestBuffer, fieldNum(SysUserRequest, Person));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysUserRequest_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configure form Args object to enable user to open user request record with workflow link for example.
    /// </summary>
    /// <param name="_sender">The <c>SysUserRequest</c> form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(SysUserRequest), FormEventType::Initializing)]
    public static void SysUserRequest_OnInitializing(xFormRun _sender, FormEventArgs _e)
    {
        Args args = _sender.args();

        // Call from workflow.
        if (!args.record() &&
            !args.lookupRecord() &&
            args.menuItemType() == MenuItemType::Display &&
            args.menuItemName() == menuItemDisplayStr(SysUserRequest))
        {
            if (VendVendorPortalUserRequestOpenLookupFilterFlight::instance().isEnabled()
                && args.lookupField()
                && args.lookupField() == fieldNum(Common, RecId)
                && args.lookupValue())
            {
                SysUserRequest userRequest = SysUserRequest::find(str2Int64(args.lookupValue()));
            
                if (userRequest && userRequest.requestType() == SysUserRequestEntityType::VendorPortalUser)
                {
                    args.record(userRequest);
                    args.menuItemName(menuItemDisplayStr(VendVendorPortalUserRequestListPage));
                }
            }
            else
            {
                str query = getClientURLQueryValue('q');
            
                if (query)
                {
                    SysUserRequest userRequest = RequestContextHelper::findRecordFromRequestContextQuery(query, tableNum(SysUserRequest));

                    if (userRequest && userRequest.requestType() == SysUserRequestEntityType::VendorPortalUser)
                    {
                        args.record(userRequest);
                        args.menuItemName(menuItemDisplayStr(VendVendorPortalUserRequestListPage));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysUserRequest_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add BusinessJustification fields on the SysUserRequest form.
    /// </summary>
    /// <param name="_sender">The <c>SysUserRequest</c> form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(SysUserRequest), FormEventType::Initialized)]
    public static void SysUserRequest_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        VendVendorPortalUserRequest userRequest = _sender.args().record() as VendVendorPortalUserRequest;

        if (userRequest && userRequest.requestType() == SysUserRequestEntityType::VendorPortalUser)
        {
            FormGroupControl userSetup = _sender.control(_sender.controlId('UserSetup')) as FormGroupControl;
            userSetup.addDataField(_sender.dataSource(tableStr(SysUserRequest) + '_' + tableStr(VendVendorPortalUserRequest)).id(), fieldNum(VendVendorPortalUserRequest, BusinessJustification));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysUserRequest_updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// The updateFormDesignDelegate handler for the <c>SysUserRequestManager</c> delegate method of the <c>SysUserRequestManager</c> class.
    /// </summary>
    /// <param name = "_userRequestManager">The <c>SysUserRequestManager</c> class.</param>
    /// <param name = "_userRequest">The <c>SysUserRequest</c> class.</param>
    /// <param name = "_formRun">The FormRun of the <c>SysUserRequest</c> form.</param>
    [SubscribesTo(classStr(SysUserRequestManager), staticDelegateStr(SysUserRequestManager, updateFormDesignDelegate))]
    public static void SysUserRequest_updateDesign(SysUserRequestManager _userRequestManager, SysUserRequest _userRequest, FormRun _formRun)
    {
        if (_userRequestManager.entityType() == SysUserRequestEntityType::VendorPortalUser)
        {
            FormControl formTabPageAddUser = _formRun.control(_formRun.controlId(formControlStr(SysUserRequest, FormTabPageAddUser)));
            formTabPageAddUser.visible(true);
            formTabPageAddUser.allowEdit(false);

            FormControl formTabPageRoles = _formRun.control(_formRun.controlId(formControlStr(SysUserRequest, FormTabPageRoles)));
            formTabPageRoles.visible(true);
            formTabPageRoles.allowEdit(false);

            if (VendVendorPortalUserRequestDisallowCreateDeleteRolesFlight::instance().isEnabled())
            {
                FormDataSource securityRoles_ds = _formRun.dataSource(formDataSourceStr(SysUserRequest,SysUserRequestSecurityRoles));
                securityRoles_ds.allowCreate(false);
                securityRoles_ds.allowDelete(false);
            }

            FormControl formTabPageInactivateUser = _formRun.control(_formRun.controlId(formControlStr(SysUserRequest, FormTabPageInactivateUser)));
            formTabPageInactivateUser.visible(true);
            formTabPageInactivateUser.allowEdit(false);

            _formRun.control(_formRun.controlId(formControlStr(SysUserRequest, ContactFor_Details))).visible((_userRequest.Person));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysUserRequestListPageInteraction_initializeListPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// The initializeListPage event handler for the <c>SysUserRequestListPageInteraction</c> class of the <c>SysUserRequestListPage.VendorPortalExtension</c> form extension.
    /// </summary>
    /// <param name = "_userRequestManager">The <c>SysUserRequestManager</c> class.</param>
    /// <param name = "_listPage">The <c>ListPage</c> listpage.</param>
    [SubscribesTo(classStr(SysUserRequestListPageInteraction), staticDelegateStr(SysUserRequestListPageInteraction, initializeListPage))]
    public static void SysUserRequestListPageInteraction_initializeListPage(SysUserRequestManager _requestManager, ListPage _listPage)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(VendorPortal)) && _requestManager.entityType() != SysUserRequestEntityType::VendorPortalUser)
        {
            FormRun formRun = _listPage.formRun();
            formRun.control(formRun.controlId(formControlStr(SysUserRequestListPage, VendVendorPortalUserRequestWorkflowCancel))).visible(false);
            formRun.control(formRun.controlId(formControlStr(SysUserRequestListPage, SysUserRequest_VendVendorPortalUserRequest_BusinessJustification))).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysUserRequest_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes ApplicationSuite specific logic after updating a <c>SysUserRequest</c> record.
    /// </summary>
    /// <param name="_sender">The <c>SysUserRequest</c> record.</param>
    /// <param name="_e">The arguments for the event.</param>
    [DataEventHandler(tableStr(SysUserRequest), DataEventType::Updated)]
    public static void SysUserRequest_onUpdated(Common _sender, DataEventArgs _e)
    {
        SysUserRequest userRequest = _sender as SysUserRequest;
        if (userRequest.InstanceRelationType == tableNum(VendVendorPortalUserRequest) && userRequest.RequestStatus == SysUserRequestStatus::ApprovalDenied)
        {
            VendProspectiveVendorRegistrationRequest registrationRequest = VendProspectiveVendorRegistrationRequest::findByUserRequestId(userRequest.RequestID);
            if (!VendVendorPortalUserRequestCheckProspRegistrationFoundFlight::instance().isEnabled()
                || registrationRequest)
            {
                ttsbegin;
                registrationRequest.selectForUpdate(true);
                registrationRequest.setRequestStateToRejected();
                registrationRequest.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>