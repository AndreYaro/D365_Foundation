<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupBaseValueCalcEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class MarkupBaseValueCalcEngine
{
    private Tax tax;

    private MarkupAmount headerCompoundMarkupAmount;
    private MarkupAmount lineCompoundMarkupAmount;

    private Map headerCompoundMap;
    private Map lineCompoundMap;

    private MarkupAutoLineTaxCharge tmpMarkupAutoLineTaxCharge;
    private RecId lastMarkupTransRecId;
    private boolean lastMarkupTransHasTaxCodes;
    private boolean taxIncludedInItemPrice;

    private boolean markupCalcPerInvoiceForSummaryUpdate = SalesParameters::find().IsMarkupCalculationPerInvoiceForSummaryUpdateEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static MarkupBaseValueCalcEngine construct()
    {
        return new MarkupBaseValueCalcEngine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        headerCompoundMap = new Map(Types::Int64, Types::Record);
        lineCompoundMap = new Map(Types::Int64, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setTax(Tax _tax)
    {
        tax = _tax;

        if (_tax != null)
        {
            this.setTaxIncludedInItemPrice(tax.getTaxIncludedInItemPrice());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxIncludedInItemPrice</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setTaxIncludedInItemPrice(boolean _taxIncludedInItemPrice)
    {
        taxIncludedInItemPrice = _taxIncludedInItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBaseAmount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal AmountCur calculateBaseAmount(AmountCur _origBaseValue, MarkupTrans _markupTrans)
    {
        if (_markupTrans.MarkupCategory != MarkupCategory::Percent || !_markupTrans.markupTable().isMarkupOfTypeCustVend())
        {
            return _origBaseValue;
        }

        AmountCur newBaseValue = _origBaseValue;

        if (this.isHeaderMarkup(_markupTrans))
        {
            if (this.includeOrderLineTaxForHeader(_markupTrans))
            {
                newBaseValue -= this.calcOrderLineTax(_markupTrans);
            }

            if (this.includeOrderLineMarkup())
            {
                newBaseValue += lineCompoundMarkupAmount;

                if (this.includeOrderLineMarkupTax(_markupTrans))
                {
                    newBaseValue -= this.calcLineMarkupTax(_markupTrans);
                }
            }

            if (_markupTrans.IsCompound && _markupTrans.MarkupAutoLineRecId)
            {
                newBaseValue += headerCompoundMarkupAmount;

                if (this.includeOrderHeaderMarkupTax(_markupTrans))
                {
                    newBaseValue -= this.calcHeaderMarkupTax(_markupTrans);
                }
            }

            if (this.shouldAdjustBaseValueForTaxIncludedInItemPrice() && MarkupBaseValueAdjustHeaderFlight::instance().isEnabled())
            {
                newBaseValue = this.adjustBaseValueForTaxIncludedInItemPrice(newBaseValue, _markupTrans);
            }
        }
        else if (this.isLineMarkup(_markupTrans))
        {
            if (this.includeOrderLineTaxForLine(_markupTrans))
            {
                newBaseValue += -this.calcOrderLineTax(_markupTrans);
            }

            if (this.shouldAdjustBaseValueForTaxIncludedInItemPrice() && MarkupBaseValueAdjustLineFlight::instance().isEnabled())
            {
                newBaseValue = this.adjustBaseValueForTaxIncludedInItemPrice(newBaseValue, _markupTrans);
            }
        }

        return newBaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compoundMarkupValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void compoundMarkupValue(MarkupAmount _markupAmount, MarkupTrans _markupTrans)
    {
        if (_markupTrans.markupTable().isMarkupOfTypeCustVend())
        {
            if (this.isHeaderMarkup(_markupTrans))
            {
                this.compoundHeaderMarkupValue(_markupAmount, _markupTrans);
            }
            else if (this.isLineMarkup(_markupTrans))
            {
                this.compoundLineMarkupValue(_markupAmount, _markupTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compoundHeaderMarkupValue</Name>
				<Source><![CDATA[
    private void compoundHeaderMarkupValue(MarkupAmount _markupAmount, MarkupTrans _markupTrans)
    {
        if (!headerCompoundMap.exists(_markupTrans.RecId))
        {
            headerCompoundMarkupAmount += _markupAmount;
            headerCompoundMap.add(_markupTrans.RecId, _markupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compoundLineMarkupValue</Name>
				<Source><![CDATA[
    private void compoundLineMarkupValue(MarkupAmount _markupAmount, MarkupTrans _markupTrans)
    {
        if (!lineCompoundMap.exists(_markupTrans.RecId))
        {
            lineCompoundMarkupAmount += _markupAmount;
            lineCompoundMap.add(_markupTrans.RecId, _markupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHeaderMarkup</Name>
				<Source><![CDATA[
    private boolean isHeaderMarkup(MarkupTrans _markupTrans)
    {
        return Markup::isSequenceAndCompoundEnabledForHeaderSource(_markupTrans.TransTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineMarkup</Name>
				<Source><![CDATA[
    private boolean isLineMarkup(MarkupTrans _markupTrans)
    {
        return Markup::isSequenceAndCompoundEnabledForLineSource(_markupTrans.TransTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeOrderLineTaxForHeader</Name>
				<Source><![CDATA[
    private boolean includeOrderLineTaxForHeader(MarkupTrans _markupTrans)
    {
        return tax != null && ((!taxIncludedInItemPrice && _markupTrans.MarkupTaxCharge != conNull()) || taxIncludedInItemPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeOrderLineMarkup</Name>
				<Source><![CDATA[
    private boolean includeOrderLineMarkup()
    {
        return SalesParameters::find().MarkupValueBase == MarkupValueBase::LineAmountInclCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeOrderLineMarkupTax</Name>
				<Source><![CDATA[
    private boolean includeOrderLineMarkupTax(MarkupTrans _markupTrans)
    {
        return tax != null && ((!taxIncludedInItemPrice && _markupTrans.MarkupTaxCharge != conNull()) || taxIncludedInItemPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeOrderHeaderMarkupTax</Name>
				<Source><![CDATA[
    private boolean includeOrderHeaderMarkupTax(MarkupTrans _markupTrans)
    {
        return tax != null && ((!taxIncludedInItemPrice && _markupTrans.MarkupTaxCharge != conNull()) || taxIncludedInItemPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeOrderLineTaxForLine</Name>
				<Source><![CDATA[
    private boolean includeOrderLineTaxForLine(MarkupTrans _markupTrans)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAdjustBaseValueForTaxIncludedInItemPrice</Name>
				<Source><![CDATA[
    private boolean shouldAdjustBaseValueForTaxIncludedInItemPrice()
    {
        return tax != null && tax.getTaxIncludedInItemPrice() && !taxIncludedInItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBaseValueForTaxIncludedInItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// If document has 'tax included in item price' enabled and we forcefully change that tax is not included, then
    /// do the following. If markup is being taxed we retrieve its tax base amount and calculate markup base from it.
    /// Otherwise we deduct tax from calculated markup base value (newBaseValue).
    /// </summary>
    /// <param name="_newBaseValue">Current base value that needs adjusting</param>
    /// <param name="_markupTrans">Current charge record</param>
    /// <returns>Adjusted base value</returns>
    private AmountCur adjustBaseValueForTaxIncludedInItemPrice(AmountCur _newBaseValue, MarkupTrans _markupTrans)
    {
        TaxBase markupTaxBase = tax.getOriginForSourceLine(_markupTrans.TableId, _markupTrans.RecId, false, 0, true);

        if (markupTaxBase)
        {
            _newBaseValue = -markupTaxBase * 100 / _markupTrans.Value;
        }
        else
        {
            _newBaseValue = tax.amountExclTax(_newBaseValue, false, false, 0, '', '', _markupTrans.RecId, _markupTrans.TableId);
        }

        return _newBaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxCodesIntoTmp</Name>
				<Source><![CDATA[
    private void populateTaxCodesIntoTmp(MarkupTrans _markupTrans)
    {
        if (_markupTrans.RecId != lastMarkupTransRecId)
        {
            lastMarkupTransHasTaxCodes = false;

            tmpMarkupAutoLineTaxCharge.setTmp();    // Convert to in-memory.        
            delete_from tmpMarkupAutoLineTaxCharge;

            if (_markupTrans.MarkupTaxCharge != conNull())
            {
                MarkupTaxCharge markupTaxCharge = MarkupTaxCharge::construct();
                markupTaxCharge.unpack(_markupTrans.MarkupTaxCharge);

                if (markupTaxCharge.parmSalesTaxCodeList() && !markupTaxCharge.parmSalesTaxCodeList().empty())
                {
                    lastMarkupTransHasTaxCodes = true;

                    ListEnumerator salesTaxCodesListEnum = markupTaxCharge.parmSalesTaxCodeList().getEnumerator();

                    while (salesTaxCodesListEnum.moveNext())
                    {
                        tmpMarkupAutoLineTaxCharge.clear();
                        tmpMarkupAutoLineTaxCharge.initValue();
                        tmpMarkupAutoLineTaxCharge.TaxCode = salesTaxCodesListEnum.current();
                        tmpMarkupAutoLineTaxCharge.MarkupAutoLineRecId = _markupTrans.MarkupAutoLineRecId;
                        tmpMarkupAutoLineTaxCharge.insert();
                    }
                }
            }

            lastMarkupTransRecId = _markupTrans.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOrderLineTax</Name>
				<Source><![CDATA[
    private TaxAmountCur calcOrderLineTax(MarkupTrans _markupTrans)
    {
        TaxAmountCur totalTaxAmount;

        this.populateTaxCodesIntoTmp(_markupTrans);

        if (this.isHeaderMarkup(_markupTrans))
        {
            TmpTaxWorkTrans tmpTaxWorkTrans;

            tmpTaxWorkTrans.setTmpData(tax.tmpTaxWorkTrans());

            while select SourceTableId, SourceRecId from tmpTaxWorkTrans
                group by SourceTableId, SourceRecId
                where tmpTaxWorkTrans.SourceTableId != tableNum(MarkupTrans) &&
                    (markupCalcPerInvoiceForSummaryUpdate ||
                        (tmpTaxWorkTrans.HeadingRecId == _markupTrans.TransRecId &&
                         tmpTaxWorkTrans.HeadingTableId == _markupTrans.TransTableId))
            {
                totalTaxAmount += this.calcTax(tmpTaxWorkTrans.SourceTableId, tmpTaxWorkTrans.SourceRecId);
            }
        }
        else if (this.isLineMarkup(_markupTrans))
        {
            totalTaxAmount += this.calcTax(_markupTrans.TransTableId, _markupTrans.TransRecId);
        }

        return totalTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHeaderMarkupTax</Name>
				<Source><![CDATA[
    private TaxAmountCur calcHeaderMarkupTax(MarkupTrans _markupTrans)
    {
        TaxAmountCur totalTaxAmount;
        MapEnumerator headerCompoundEnum = headerCompoundMap.getEnumerator();

        this.populateTaxCodesIntoTmp(_markupTrans);

        while (headerCompoundEnum.moveNext())
        {
            MarkupTrans currentMarkupTrans = headerCompoundEnum.currentValue();
            
            if (currentMarkupTrans.Position < _markupTrans.Position)
            {
                totalTaxAmount += this.calcTax(currentMarkupTrans.TableId, currentMarkupTrans.RecId);
            }
        }

        return totalTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineMarkupTax</Name>
				<Source><![CDATA[
    private TaxAmountCur calcLineMarkupTax(MarkupTrans _markupTrans)
    {
        TaxAmountCur totalTaxAmount;
        MapEnumerator lineCompoundEnum = lineCompoundMap.getEnumerator();

        this.populateTaxCodesIntoTmp(_markupTrans);

        while (lineCompoundEnum.moveNext())
        {
            MarkupTrans currentMarkupTrans = lineCompoundEnum.currentValue();
            
            totalTaxAmount += this.calcTax(currentMarkupTrans.TableId, currentMarkupTrans.RecId);
        }

        return totalTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    private TaxAmountCur calcTax(TableId _sourceTableId, RecId _sourceRecId)
    {
        if (_sourceTableId && _sourceRecId)
        {
            TmpTaxWorkTrans tmpTaxWorkTrans;
        
            tmpTaxWorkTrans.setTmpData(tax.tmpTaxWorkTrans());

            if (taxIncludedInItemPrice) // Deduct non-included tax codes.
            {
                select sum(SourceRegulateAmountCur) from tmpTaxWorkTrans
                    where tmpTaxWorkTrans.SourceTableId == _sourceTableId &&
                        tmpTaxWorkTrans.SourceRecId == _sourceRecId &&
                        tmpTaxWorkTrans.TaxDirection != TaxDirection::UseTax &&
                        tmpTaxWorkTrans.TaxOrigin != TaxOrigin::TaxReversed &&
                        tmpTaxWorkTrans.TaxOrigin != TaxOrigin::Transfer
                    notexists join tmpMarkupAutoLineTaxCharge
                        where tmpMarkupAutoLineTaxCharge.TaxCode == tmpTaxWorkTrans.TaxCode;

                return -tmpTaxWorkTrans.SourceRegulateAmountCur;
            }
            else if (lastMarkupTransHasTaxCodes)
            {            
                select sum(SourceRegulateAmountCur) from tmpTaxWorkTrans
                    where tmpTaxWorkTrans.SourceTableId == _sourceTableId &&
                        tmpTaxWorkTrans.SourceRecId == _sourceRecId &&
                        tmpTaxWorkTrans.TaxDirection != TaxDirection::UseTax &&
                        tmpTaxWorkTrans.TaxOrigin != TaxOrigin::TaxReversed &&
                        tmpTaxWorkTrans.TaxOrigin != TaxOrigin::Transfer
                    exists join tmpMarkupAutoLineTaxCharge
                        where tmpMarkupAutoLineTaxCharge.TaxCode == tmpTaxWorkTrans.TaxCode;

                return tmpTaxWorkTrans.SourceRegulateAmountCur;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveTaxForMarkup</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static Tax resolveTaxForMarkup(Tax _tax)
    {
        if (_tax != null && !_tax.getTaxIncludedInItemPrice() && _tax is ITaxMarkupCompound)
        {
            return (_tax as ITaxMarkupCompound).getTaxMarkupCompound();
        }
        else
        {
            return _tax;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>