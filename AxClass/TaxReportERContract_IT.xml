<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportERContract_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
[SysOperationGroup('ParameterGroup', "@SYS7764", '1', FormArrangeMethod::Vertical)]
[SysOperationGroup('PrintOutGroup', "@SYS12608", '2', FormArrangeMethod::Vertical)]
[SysOperationGroup('UpdateGroup', "@SYS23285", '3', FormArrangeMethod::Vertical)]
[SysOperationContractProcessing(classstr(TaxReportERUIBuilder_IT))]
internal final class TaxReportERContract_IT implements SysOperationValidatable, SysOperationInitializable
{
    private str taxReport_IT;
    private TaxBookId taxBookIdSummary;
    private TaxBookId taxBookIdSkipUpdateNumberOfPages;
    private Set includedTaxBookIds;
    private container includedTaxBookIdsPacked;

    // ParameterGroup
    private TaxPeriod taxPeriod;
    private boolean isVariativePeriod;
    private FromDate fromDate;
    private FromDate toDate;
    private TaxBookTypeJournal taxBookTypeJournal;
    private TaxBookRecId fromTaxBookRecId;
    private TaxBookRecId toTaxBookRecId;

    // PrintOutGroup
    private boolean printVATBooks;
    private boolean printVATSummary;
    private boolean printVATPayment;
    private boolean printPlafond_IT;
    private InstalledLanguageId languageId;

    // UpdateGroup
    private boolean updateNumberOfPages;

    // Sales tax payment
    private AmountMST vatBalancePeriod;
    private AmountMST prevVATCredit;
    private AmountMST vatCompensation;
    private AmountMST prevVATDebit;
    private AmountMST vatPrePayment;
    private AmountMST vatBalance;
    private AmountMST vatPaymentAmount;
    private TransDate paymentDate;
    private CompanyBankAccountId bankAccountId;
    private BankReference_IT bankRef1;
    private BankReference_IT bankRef2;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        languageId = xUserInfo::find().Language;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReport_IT</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public str parmTaxReport_IT(str _taxReport_IT = taxReport_IT)
    {
        taxReport_IT = _taxReport_IT;
        return taxReport_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxBookIdSkipUpdateNumberOfPages</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public TaxBookId parmTaxBookIdSkipUpdateNumberOfPages(TaxBookId _taxBookIdSkipUpdateNumberOfPages = taxBookIdSkipUpdateNumberOfPages)
    {
        taxBookIdSkipUpdateNumberOfPages = _taxBookIdSkipUpdateNumberOfPages;
        return taxBookIdSkipUpdateNumberOfPages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxBookIdSummary</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public TaxBookId parmTaxBookIdSummary(TaxBookId _taxBookIdSummary = taxBookIdSummary)
    {
        taxBookIdSummary = _taxBookIdSummary;
        return taxBookIdSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludedTaxBookIdsPacked</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public container parmIncludedTaxBookIdsPacked(container _includedTaxBookIdsPacked = includedTaxBookIdsPacked)
    {
        includedTaxBookIdsPacked = _includedTaxBookIdsPacked;
        return includedTaxBookIdsPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludedTaxBookIds</Name>
				<Source><![CDATA[
    public Set parmIncludedTaxBookIds(Set _includedTaxBookIds = includedTaxBookIds)
    {
        Set ret;

        if (prmIsDefault(_includedTaxBookIds))
        {
            if (includedTaxBookIdsPacked)
            {
                ret = Set::create(includedTaxBookIdsPacked);
            }
        }
        else if (_includedTaxBookIds)
        {
            includedTaxBookIdsPacked = _includedTaxBookIds.pack();
            ret = _includedTaxBookIds;
        }
        else
        {
            includedTaxBookIdsPacked = conNull();
            ret = _includedTaxBookIds;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(TaxPeriod)),
        SysOperationLabel(literalStr("@SYS60050")),
        SysOperationHelpText(literalStr("@SYS342328")),
        SysOperationGroupMember('ParameterGroup'),
        SysOperationDisplayOrder('1')
    ]
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsVariativePeriod</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(IsVariativePeriod)),
        SysOperationLabel(literalStr("@ExtendedItallianLocalization:VariativePeriod")),
        SysOperationGroupMember('ParameterGroup'),
        SysOperationDisplayOrder('2')
    ]
    public boolean parmIsVariativePeriod(boolean _isVariativePeriod = isVariativePeriod)
    {
        isVariativePeriod = _isVariativePeriod;
        return isVariativePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(FromDate)),
        SysOperationLabel(literalStr("@SYS5209")),
        SysOperationHelpText(literalStr("@SYS12292")),
        SysOperationGroupMember('ParameterGroup'),
        SysOperationDisplayOrder('3')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(ToDate)),
        SysOperationLabel(literalStr("@SYS14656")),
        SysOperationHelpText(literalStr("@ExtendedItallianLocalization:PeriodEndDay")),
        SysOperationGroupMember('ParameterGroup'),
        SysOperationDisplayOrder('4')
    ]
    public FromDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxBookTypeJournal</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(TaxBookTypeJournal)),
        SysOperationLabel(literalStr("@SYS74849")),
        SysOperationHelpText(literalStr("@SYS342329")),
        SysOperationGroupMember('ParameterGroup'),
        SysOperationDisplayOrder('5')
    ]
    public TaxBookTypeJournal parmTaxBookTypeJournal(TaxBookTypeJournal _taxBookTypeJournal = taxBookTypeJournal)
    {
        taxBookTypeJournal = _taxBookTypeJournal;
        return taxBookTypeJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromTaxBookRecId</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(FromTaxBookRecId)),
        SysOperationLabel(literalStr("@SYS79405")),
        SysOperationHelpText(literalStr("@SYS342331")),
        SysOperationGroupMember('ParameterGroup'),
        SysOperationDisplayOrder('6')
    ]
    public TaxBookRecId parmFromTaxBookRecId(TaxBookRecId _fromTaxBookRecId = fromTaxBookRecId)
    {
        fromTaxBookRecId = _fromTaxBookRecId;
        return fromTaxBookRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToTaxBookRecId</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(ToTaxBookRecId)),
        SysOperationLabel(literalStr("@SYS79407")),
        SysOperationHelpText(literalStr("@SYS342327")),
        SysOperationGroupMember('ParameterGroup'),
        SysOperationDisplayOrder('7')
    ]
    public TaxBookRecId parmToTaxBookRecId(TaxBookRecId _toTaxBookRecId = toTaxBookRecId)
    {
        toTaxBookRecId = _toTaxBookRecId;
        return toTaxBookRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintVATBooks</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(PrintVATBooks)),
        SysOperationLabel(literalStr("@SYS79413")),
        SysOperationHelpText(literalStr("@SYS342333")),
        SysOperationGroupMember('PrintOutGroup'),
        SysOperationDisplayOrder('1')
    ]
    public boolean parmPrintVATBooks(boolean _printVATBooks = printVATBooks)
    {
        printVATBooks = _printVATBooks;
        return printVATBooks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintVATSummary</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(PrintVATSummary)),
        SysOperationLabel(literalStr("@SYS75125")),
        SysOperationHelpText(literalStr("@SYS342330")),
        SysOperationGroupMember('PrintOutGroup'),
        SysOperationDisplayOrder('2')
    ]
    public boolean parmPrintVATSummary(boolean _printVATSummary = printVATSummary)
    {
        printVATSummary = _printVATSummary;
        return printVATSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintVATPayment</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(PrintVATPayment)),
        SysOperationLabel(literalStr("@SYS75093")),
        SysOperationHelpText(literalStr("@SYS342332")),
        SysOperationGroupMember('PrintOutGroup'),
        SysOperationDisplayOrder('3')
    ]
    public boolean parmPrintVATPayment(boolean _printVATPayment = printVATPayment)
    {
        printVATPayment = _printVATPayment;
        return printVATPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintPlafond_IT</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(PrintPlafond_IT)),
        SysOperationLabel(literalStr("@ExtendedItallianLocalization:Plafond")),
        SysOperationHelpText(literalStr("@ExtendedItallianLocalization:PrintPlafondReport")),
        SysOperationGroupMember('PrintOutGroup'),
        SysOperationDisplayOrder('4')
    ]
    public boolean parmPrintPlafond_IT(boolean _printPlafond = printPlafond_IT)
    {
        printPlafond_IT = _printPlafond;
        return printPlafond_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageId</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(LanguageId)),
        SysOperationLabel(literalStr("@SYS95066")),
        SysOperationGroupMember('PrintOutGroup'),
        SysOperationDisplayOrder('5')
    ]
    public InstalledLanguageId parmLanguageId(InstalledLanguageId _languageId = languageId)
    {
        languageId = _languageId;
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateNumberOfPages</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(UpdateNumberOfPages)),
        SysOperationLabel(literalStr("@ExtendedItallianLocalization:UpdateNumberOfPages")),
        SysOperationHelpText(literalStr("@ExtendedItallianLocalization:UpdateNumberOfPagesHelpText")),
        SysOperationGroupMember('UpdateGroup'),
        SysOperationDisplayOrder('1')
    ]
    public boolean parmUpdateNumberOfPages(boolean _updateNumberOfPages = updateNumberOfPages)
    {
        updateNumberOfPages = _updateNumberOfPages;
        return updateNumberOfPages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVATBalancePeriod</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public AmountMST parmVATBalancePeriod(AmountMST _vatBalancePeriod = vatBalancePeriod)
    {
        vatBalancePeriod = _vatBalancePeriod;
        return vatBalancePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevVATCredit</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public AmountMST parmPrevVATCredit(AmountMST _prevVATCredit = prevVATCredit)
    {
        prevVATCredit = _prevVATCredit;
        return prevVATCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVATCompensation</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public AmountMST parmVATCompensation(AmountMST _vatCompensation = vatCompensation)
    {
        vatCompensation = _vatCompensation;
        return vatCompensation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevVATDebit</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public AmountMST parmPrevVATDebit(AmountMST _prevVATDebit = prevVATDebit)
    {
        prevVATDebit = _prevVATDebit;
        return prevVATDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVATPrePayment</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public AmountMST parmVATPrePayment(AmountMST _vatPrePayment = vatPrePayment)
    {
        vatPrePayment = _vatPrePayment;
        return vatPrePayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVATBalance</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public AmountMST parmVATBalance(AmountMST _vatBalance = vatBalance)
    {
        vatBalance = _vatBalance;
        return vatBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVATPaymentAmount</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public AmountMST parmVATPaymentAmount(AmountMST _vatPaymentAmount = vatPaymentAmount)
    {
        vatPaymentAmount = _vatPaymentAmount;
        return vatPaymentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentDate</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public TransDate parmPaymentDate(TransDate _paymentDate = paymentDate)
    {
        paymentDate = _paymentDate;
        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccountId</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public CompanyBankAccountId parmBankAccountId(CompanyBankAccountId _bankAccountId = bankAccountId)
    {
        bankAccountId = _bankAccountId;
        return bankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankRef1</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public BankReference_IT parmBankRef1(BankReference_IT _bankRef1 = bankRef1)
    {
        bankRef1 = _bankRef1;
        return bankRef1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankRef2</Name>
				<Source><![CDATA[
    [DataMember, SysOperationControlVisibility(false)]
    public BankReference_IT parmBankRef2(BankReference_IT _bankRef2 = bankRef2)
    {
        bankRef2 = _bankRef2;
        return bankRef2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        #ISOCountryRegionCodes
        boolean ret = true;

        if (taxPeriod
            && !MultipleTaxIdReportingHelper::isLegalEntityOrTaxPeriodInCountryRegion(
                taxPeriod, [#isoIT], MultipleTaxIdScope::VATDeclaration))
        {
            ret = checkFailed(strFmt("@ExtendedItallianLocalization:SettlementPeriodIsNotItalian", taxPeriod));
        }

        if (ret && !printVATBooks && !printVATSummary && !printVATPayment)
        {
            ret = checkFailed("@SYS70894");
        }

        if (ret && isVariativePeriod)
        {
            if (!fromDate)
            {
                ret = checkFailed(strFmt("@SYS84753", "@SYS5209"));
            }

            if (!toDate)
            {
                ret = checkFailed(strFmt("@SYS84753", "@SYS14656"));
            }

            if (fromDate > toDate)
            {
                ret = checkFailed("@SYS107147");
            }
        }

        if (ret && !languageId)
        {
            ret = checkFailed(strFmt("@SYS84753", "@SYS36423"));
        }

        if (ret && updateNumberOfPages)
        {
            boolean separateTaxSummary = TaxAuthorityAddress::find(
                TaxPeriodHead::find(taxPeriod).TaxAuthority).SeparateTaxSummary;

            boolean isSummaryTaxBookIncluded = !separateTaxSummary && this.isTaxBookIncluded(TaxBook::findByTaxBookId(taxBookIdSummary));

            if (!fromTaxBookRecId
                && !toTaxBookRecId
                && printVATBooks
                && ((printVATSummary && !printVATPayment)
                    || (!printVATSummary && printVATPayment)))
            {
                if (Box::yesNo("@ExtendedItallianLocalization:NumberOfPagesForBookCannotBeUpdated1", DialogButton::Yes) == DialogButton::Yes)
                {
                    this.parmTaxBookIdSkipUpdateNumberOfPages(TaxReportERHelper_IT::separateTaxSummaryTaxBookId());
                }
                else
                {
                    ret = checkFailed("@SYS319214");
                }
            }
            else if (!separateTaxSummary
                && isSummaryTaxBookIncluded
                && printVATBooks
                && ((!printVATSummary && !printVATPayment)
                    || (!printVATSummary && printVATPayment)
                    || (printVATSummary && !printVATPayment)))
            {
                if (Box::yesNo(strFmt("@ExtendedItallianLocalization:NumberOfPagesForBookCannotBeUpdated2", taxBookIdSummary), DialogButton::Yes) == DialogButton::Yes)
                {
                    this.parmTaxBookIdSkipUpdateNumberOfPages(taxBookIdSummary);
                }
                else
                {
                    ret = checkFailed("@SYS319214");
                }
            }
            else if (!separateTaxSummary
                && isSummaryTaxBookIncluded
                && !printVATBooks
                && ((printVATSummary && printVATPayment)
                    || (!printVATSummary && printVATPayment)
                    || (printVATSummary && !printVATPayment)))
            {
                if (Box::yesNo(strFmt("@ExtendedItallianLocalization:NumberOfPagesForBookCannotBeUpdated3", taxBookIdSummary), DialogButton::Yes) == DialogButton::Yes)
                {
                    this.parmTaxBookIdSkipUpdateNumberOfPages(taxBookIdSummary);
                }
                else
                {
                    ret = checkFailed("@SYS319214");
                }
            }
        }

        if (ret && updateNumberOfPages)
        {
            includedTaxBookIds = new Set(Types::String);
            TaxBook taxBook;
            while select taxBook
            {
                if (this.isTaxBookIncluded(taxBook))
                {
                    includedTaxBookIds.add(taxBook.TaxBookId);
                }
            }

            this.parmIncludedTaxBookIds(includedTaxBookIds);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxBookIncluded</Name>
				<Source><![CDATA[
    private boolean isTaxBookIncluded(TaxBook _taxBook)
    {
        return TmpTaxReport_ITSummary::isTaxBookIncluded(
            _taxBook,
            taxPeriod,
            fromDate,
            toDate,
            taxBookTypeJournal,
            TaxBook::find(fromTaxBookRecId).TaxBookId,
            TaxBook::find(toTaxBookRecId).TaxBookId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>