<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransferOpeningDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransferOpeningDP</c> class processes the business logic for the <c>LedgerTransferOpening</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(GeneralJournalWithSubLedgerVoucher)),
    SRSReportParameterAttribute(classStr(LedgerTransferOpeningContract))
]
public class LedgerTransferOpeningDP extends SRSReportDataProviderPreProcessTempDB
{
    LedgerTransferOpeningTmp ledgerTransferOpeningTmp;
    UserConnection userConnection;
    TransDate periodEnd;
    OpeningMethod methodStatus;
    OpeningMethod methodOperations;
    MainAccountNum transferResult;
    GeneralJournalAccountEntry generalJournalAccountEntry;
    GeneralJournalEntry generalJournalEntry;
    MainAccountLedgerDimensionView mainAccountLedgerDimensionView;

    //<PubSect>
    MainAccountLedgerDimensionView mainAccountLedgerDimensionViewOffset;
    int session;
    UTCTimestamp processTimestamp;
    LedgerTransferOpeningSumTmp yearEndProcessTable;
    //</PubSect>

    CompanyInfo companyInfo;
    FiscalCalendarRecId calendarRecId;

    private static const str emptyString = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerTransferOpeningTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the actual data for the report from the <c>LedgerTransferOpeningTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>LedgerTransferOpeningTmp</c> temporary table.
    /// </returns>
    [SrsReportDataSetAttribute(tableStr(LedgerTransferOpeningTmp))]
    public ledgerTransferOpeningTmp getLedgerTransferOpeningTmp()
    {
        select ledgerTransferOpeningTmp;

        return ledgerTransferOpeningTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;

        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection on the table buffer.
    /// </summary>
    /// <param name="_common">
    /// The table buffer.
    /// </param>
    private void setUserConnection(Common _common)
    {
        UserConnection userConn = this.parmUserConnection();

        if (userConn)
        {
            _common.setConnection(userConn);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerTransferOpeningTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>LedgerTransferOpeningTmp</c> buffer fields.
    /// </summary>
    /// <param name="_fiscalCalendarPeriod">
    /// A <c>FiscalCalendarPeriod</c> table buffer to set the required field in the
    /// <c>LedgerTransferOpeningTmp</c> temporary table.
    /// </param>
    /// <param name="_subledgerVoucherGenJourEntry">
    /// A <c>SubledgerVoucherGeneralJournalEntry</c> table buffer to set the required field in the
    /// <c>LedgerTransferOpeningTmp</c> temporary table.
    /// </param>
    private LedgerTransferOpeningTmp setLedgerTransferOpeningTmp(
        FiscalCalendarPeriod _fiscalCalendarPeriod,
        SubledgerVoucherGeneralJournalEntry _subledgerVoucherGenJourEntry)
    {
        ledgerTransferOpeningTmp.clear();
        ledgerTransferOpeningTmp.TransferResult = transferResult;
        ledgerTransferOpeningTmp.MethodStatus = methodStatus;
        ledgerTransferOpeningTmp.MethodOperations = methodOperations;
        ledgerTransferOpeningTmp.FullyQualifiedAccount = mainAccountLedgerDimensionView.FullyQualifiedAccount;
        ledgerTransferOpeningTmp.MainAccount = mainAccountLedgerDimensionView.MainAccountRecId;
        ledgerTransferOpeningTmp.TransDate = generalJournalEntry.AccountingDate;
        ledgerTransferOpeningTmp.Voucher = _subledgerVoucherGenJourEntry.Voucher;
        ledgerTransferOpeningTmp.Txt = generalJournalAccountEntry.Text;
        ledgerTransferOpeningTmp.CurrencyCode = generalJournalAccountEntry.TransactionCurrencyCode;
        ledgerTransferOpeningTmp.AmountCur = generalJournalAccountEntry.TransactionCurrencyAmount;

        if (generalJournalAccountEntry.IsCredit)
        {
            ledgerTransferOpeningTmp.AmountCreditMST = -1 * generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        else
        {
            ledgerTransferOpeningTmp.AmountDebitMST = generalJournalAccountEntry.AccountingCurrencyAmount;
        }

        ledgerTransferOpeningTmp.ReportingCurrencyAmount = generalJournalAccountEntry.ReportingCurrencyAmount;
        ledgerTransferOpeningTmp.AccountName = MainAccount::getLocalizedName(mainAccountLedgerDimensionView.MainAccountRecId);
        ledgerTransferOpeningTmp.CompanyName = companyInfo.Name;
        ledgerTransferOpeningTmp.CompanyAddress = companyInfo.postalAddress().Address;
        ledgerTransferOpeningTmp.TextPhone = companyInfo.phone();
        ledgerTransferOpeningTmp.TextTelex = companyInfo.telex();
        ledgerTransferOpeningTmp.TextFax = companyInfo.teleFax();
        ledgerTransferOpeningTmp.TextURL = companyInfo.url();
        ledgerTransferOpeningTmp.TextEmail = companyInfo.email();

        ledgerTransferOpeningTmp.FiscalYearStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, periodEnd);
        LedgerTransferOpeningTmp.FiscalYearEndDate = periodEnd;
        ledgerTransferOpeningTmp.DeleteOpening =  LedgerParameters::find().DeleteOpening;
        ledgerTransferOpeningTmp.PeriodClosingPosting = LedgerParameters::find().PeriodClosingPosting;
        ledgerTransferOpeningTmp.PeriodCode = _fiscalCalendarPeriod.Type;

        return ledgerTransferOpeningTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerTransferOpeningTmpForPS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>LedgerTransferOpeningTmp</c> buffer fields.
    /// </summary>
    /// <param name="_fiscalCalendarPeriod">
    /// The <c>FiscalCalendarPeriod</c> table buffer containing the fiscal calendar period value of the new <c>LedgerTransferOpeningTmp</c> table record.
    /// </param>
    private LedgerTransferOpeningTmp setLedgerTransferOpeningTmpForPS(FiscalCalendarPeriod _fiscalCalendarPeriod)
    {
        ledgerTransferOpeningTmp.clear();
        ledgerTransferOpeningTmp.TransferResult = transferResult;
        ledgerTransferOpeningTmp.MethodStatus = methodStatus;
        ledgerTransferOpeningTmp.MethodOperations = methodOperations;
        ledgerTransferOpeningTmp.FullyQualifiedAccount = mainAccountLedgerDimensionView.FullyQualifiedAccount;
        ledgerTransferOpeningTmp.MainAccount = mainAccountLedgerDimensionView.MainAccountRecId;
        ledgerTransferOpeningTmp.TransDate = yearEndProcessTable.TransDate;
        ledgerTransferOpeningTmp.Voucher = yearEndProcessTable.Voucher;
        ledgerTransferOpeningTmp.Txt = yearEndProcessTable.TransTxt;
        ledgerTransferOpeningTmp.CurrencyCode = yearEndProcessTable.CurrencyCode;
        ledgerTransferOpeningTmp.AmountCur = yearEndProcessTable.TransactionCurrencyAmount;
        ledgerTransferOpeningTmp.AccountName = mainAccountLedgerDimensionView.Name;
        ledgerTransferOpeningTmp.CompanyName = companyInfo.Name;
        ledgerTransferOpeningTmp.CompanyAddress = companyInfo.postalAddress().Address;
        ledgerTransferOpeningTmp.TextPhone = companyInfo.phone() ? strfmt('%1: %2',"@SYS7869",companyInfo.phone()) : emptyString;
        ledgerTransferOpeningTmp.TextTelex = companyInfo.telex() ? strfmt('%1: %2',"@SYS4142",companyInfo.telex()) : emptyString;
        ledgerTransferOpeningTmp.TextFax = companyInfo.teleFax() ? strfmt('%1: %2',"@SYS7888",companyInfo.teleFax()) : emptyString;
        ledgerTransferOpeningTmp.TextURL = companyInfo.url() ? strfmt('%1: %2',"@SYS22221",companyInfo.url()) : emptyString;
        ledgerTransferOpeningTmp.TextEmail = companyInfo.email() ? strfmt('%1: %2',"@SYS5845",companyInfo.email()) : emptyString;
        ledgerTransferOpeningTmp.DeleteOpening =  LedgerParameters::find().DeleteOpening;
        ledgerTransferOpeningTmp.PeriodClosingPosting = LedgerParameters::find().PeriodClosingPosting;
        ledgerTransferOpeningTmp.PeriodCode = _fiscalCalendarPeriod.Type;

        ledgerTransferOpeningTmp.ReportingCurrencyAmount = yearEndProcessTable.ReportingCurrencyAmount;

        if (yearEndProcessTable.AccountingCurrencyAmount > 0)
        {
            ledgerTransferOpeningTmp.AmountDebitMST = yearEndProcessTable.TransactionCurrencyAmount;
        }
        else
        {
            ledgerTransferOpeningTmp.AmountCreditMST = abs(yearEndProcessTable.TransactionCurrencyAmount);
        }

        ledgerTransferOpeningTmp.insert();

        ledgerTransferOpeningTmp.FullyQualifiedAccount = mainAccountLedgerDimensionViewOffset.FullyQualifiedAccount;
        ledgerTransferOpeningTmp.MainAccount = mainAccountLedgerDimensionViewOffset.MainAccountRecId;
        ledgerTransferOpeningTmp.AmountCur = - yearEndProcessTable.TransactionCurrencyAmount;
        ledgerTransferOpeningTmp.ReportingCurrencyAmount = - yearEndProcessTable.ReportingCurrencyAmount;

        if (ledgerTransferOpeningTmp.AmountCreditMST != 0)
        {
            ledgerTransferOpeningTmp.AmountDebitMST = ledgerTransferOpeningTmp.AmountCreditMST;
            ledgerTransferOpeningTmp.AmountCreditMST = 0;
        }
        else
        {
            ledgerTransferOpeningTmp.AmountCreditMST = ledgerTransferOpeningTmp.AmountDebitMST;
            ledgerTransferOpeningTmp.AmountDebitMST = 0;
        }

        ledgerTransferOpeningTmp.AccountName = mainAccountLedgerDimensionViewOffset.Name;

        return ledgerTransferOpeningTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records that are based on the parameters entered.
    /// </summary>
    public void processReport()
    {
        Query query = new Query(this.parmQuery());
        FiscalCalendarYear fiscalCalendarYear;
        TransDate periodNext;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGenJourEntry;

        LedgerTransferOpeningContract contract = this.parmDataContract() as LedgerTransferOpeningContract;
        this.setUserConnection(ledgerTransferOpeningTmp);

        companyInfo = CompanyInfo::find();
        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        boolean calledFromMenu = contract.parmCalledFromMenu();
        methodStatus = contract.parmMethodStatus();
        methodOperations = contract.parmMethodOperations();
        transferResult = contract.parmTransferResult();
        PeriodStartClosing periodEndInput = contract.parmPeriodEndInput();

        // <PubSect>
        // we need to set the processTimestamp regardless of PublicSector
        session = contract.parmSession();
        processTimestamp = contract.parmProcessTimestamp();
        // </PubSect>

        if (calledFromMenu)
        {
            periodEnd = LedgerFiscalCalendar::findYearEndClosingPeriodByDate(calendarRecId,periodEndInput).StartDate;

            select firstonly StartDate from fiscalCalendarPeriod
                order by StartDate
                where fiscalCalendarPeriod.StartDate > periodEnd
                exists join FiscalCalendar, RecId from fiscalCalendarYear
                    where fiscalCalendarYear.FiscalCalendar == calendarRecId &&
                        fiscalCalendarYear.RecId == fiscalCalendarPeriod.FiscalCalendarYear;

            periodNext = fiscalCalendarPeriod.StartDate;
        }
        else
        {
            periodEnd = contract.parmPeriodEnd();
            periodNext = contract.parmPeriodNext();

            if (PublicSectorUtils::isLedgerYearEndClosingEnabled())
            {
                // This method will populate the report table for PubSect, so we need to stop execution after it is done
                this.processReportForPublicSector(contract);
                return;
            }
        }

        QueryBuildDataSource generalJournalEntry_qbds = query.dataSourceTable(tablenum(GeneralJournalEntry));

        SysQuery::findOrCreateRange(
            generalJournalEntry_qbds, fieldNum(GeneralJournalEntry, Ledger)).value(
                queryValue(Ledger::current()));

        QueryBuildDataSource fiscalCalendarPeriod_qbds = generalJournalEntry_qbds.addDataSource(tablenum(FiscalCalendarPeriod));
        fiscalCalendarPeriod_qbds.joinMode(JoinMode::InnerJoin);
        fiscalCalendarPeriod_qbds.fetchMode(QueryFetchMode::One2One);
        fiscalCalendarPeriod_qbds.addLink(fieldNum(GeneralJournalEntry, fiscalCalendarPeriod), fieldNum(fiscalCalendarPeriod, RecId));

        fiscalCalendarPeriod_qbds.addRange(fieldnum(FiscalCalendarPeriod, Type)).value(
            strfmt('!%1', SysQuery::value(FiscalPeriodType::Operating)));

        generalJournalEntry_qbds.addRange(fieldnum(GeneralJournalEntry, AccountingDate)).value(
            SysQuery::range(periodEnd, periodNext));

        RecordInsertList recordsToAdd = new RecordInsertList(
            tableNum(LedgerTransferOpeningTmp),
            true,
            true,
            true,
            true,
            true,
            ledgerTransferOpeningTmp);

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            generalJournalAccountEntry = queryRun.get(tablenum(GeneralJournalAccountEntry));
            generalJournalEntry = queryRun.get(tablenum(GeneralJournalEntry));
            mainAccountLedgerDimensionView = queryRun.get(tablenum(MainAccountLedgerDimensionView));
            fiscalCalendarPeriod = queryRun.get(tablenum(FiscalCalendarPeriod));
            subledgerVoucherGenJourEntry = queryRun.get(tablenum(SubledgerVoucherGeneralJournalEntry));

            recordsToAdd.add(this.setLedgerTransferOpeningTmp(fiscalCalendarPeriod, subledgerVoucherGenJourEntry));
        }

        recordsToAdd.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportForPublicSector</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report records from the work table that stores the year end process records.
    /// </summary>
    /// <param name="_contract">
    /// The data contract object that contains the data parameters for the report.
    /// </param>
    /// <remarks>
    /// This method is called when we are running the report to display the results of the process. It does not
    /// select from the actual GL transaction tables like the regular report does.
    /// </remarks>
    protected void processReportForPublicSector(LedgerTransferOpeningContract _contract)
    {
        Query query = new Query();
        FiscalCalendarPeriod closingPeriod = LedgerFiscalCalendar::findYearEndClosingPeriodByDate(calendarRecId, _contract.parmPeriodEnd());
        FiscalCalendarPeriod openingPeriod = LedgerFiscalCalendar::findOpeningPeriodByDate(calendarRecId, _contract.parmPeriodNext());

        LedgerTransferOpeningContract contract = this.parmDataContract() as LedgerTransferOpeningContract;

        QueryBuildDataSource qbdsLedgerTransferOpeningSumTmp = query.addDataSource(tableNum(LedgerTransferOpeningSumTmp));
        QueryBuildRange range = SysQuery::findOrCreateRange(qbdsLedgerTransferOpeningSumTmp, fieldNum(LedgerTransferOpeningSumTmp, UTCTimeStamp));
        range.value(SysQuery::value(processTimestamp));
        range = SysQuery::findOrCreateRange(qbdsLedgerTransferOpeningSumTmp, fieldNum(LedgerTransferOpeningSumTmp, SessionId));
        range.value(SysQuery::value(int2str(session)));

        QueryBuildDataSource qbdsMainAccountLedgerDimensionView = qbdsLedgerTransferOpeningSumTmp.addDataSource(tableNum(mainAccountLedgerDimensionView), 'LedgerDimension');
        qbdsMainAccountLedgerDimensionView.joinMode(JoinMode::InnerJoin);
        qbdsMainAccountLedgerDimensionView.fetchMode(QueryFetchMode::One2One);
        qbdsMainAccountLedgerDimensionView.addLink(fieldNum(LedgerTransferOpeningSumTmp, LedgerDimension), fieldNum(mainAccountLedgerDimensionView, LedgerDimensionID));

        QueryBuildDataSource qbdsMainAccountLedgerDimensionViewOffset = qbdsLedgerTransferOpeningSumTmp.addDataSource(tableNum(mainAccountLedgerDimensionView), 'OffsetLedgerDimension');
        qbdsMainAccountLedgerDimensionViewOffset.joinMode(JoinMode::InnerJoin);
        qbdsMainAccountLedgerDimensionViewOffset.fetchMode(QueryFetchMode::One2One);
        qbdsMainAccountLedgerDimensionViewOffset.addLink(fieldNum(LedgerTransferOpeningSumTmp, OffsetLedgerDimension), fieldNum(mainAccountLedgerDimensionView, LedgerDimensionID));

        RecordInsertList recordsToAdd = new RecordInsertList(
            tableNum(LedgerTransferOpeningTmp),
            true,
            true,
            true,
            true,
            true,
            ledgerTransferOpeningTmp);

        QueryRun queryRun = new QueryRun(query);

        ttsBegin;

        while (queryRun.next())
        {
            mainAccountLedgerDimensionView = queryRun.get(tablenum(MainAccountLedgerDimensionView),1);
            mainAccountLedgerDimensionViewOffset = queryRun.get(tablenum(MainAccountLedgerDimensionView),2);
            yearEndProcessTable = queryRun.get(tableNum(LedgerTransferOpeningSumTmp));

            if (yearEndProcessTable.Posting == LedgerPostingType::Closing)
            {
                recordsToAdd.add(this.setLedgerTransferOpeningTmpForPS(closingPeriod));
            }
            else
            {
                recordsToAdd.add(this.setLedgerTransferOpeningTmpForPS(openingPeriod));
            }
        }

        recordsToAdd.insertDatabase();

        delete_from yearEndProcessTable
            where (yearEndProcessTable.SessionId == session
                && yearEndProcessTable.utcTimestamp == processTimestamp);

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>