<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationLineCopyFromSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is responsible for copying data from various sources to an instance of <c>SalesQuotationLine</c>
/// </summary>
abstract class SalesQuotationLineCopyFromSource
{
    boolean                                 needToCopyForeignTradeRecord;
    Common                                  copyFromSourceRecord;
    TmpFrmVirtual                           tmpFrmVirtualLine;
    SalesQuotationLine                      salesQuotationLine;
    SalesQuotationLineForeignTradeCategory  salesQuotationLineForeignTradeCategory;
    SalesQuotationCopying                   salesQuotationCopying;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromSalesQuotationCopyingParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the proper implementation of the <c>SalesQuotationCopyFromSource</c> class with parameters, needed to perform the copying operation.
    /// </summary>
    /// <param name = "_tmpFrmVirtualLine">A virtual line, used to find a source record to copy information from.</param>
    /// <param name = "_salesQuotationLine">A sales quotation line to copy data to.</param>
    /// <param name = "_salesQuotationLineForeignTradeCategory">A sales quotation foreign trade category.</param>
    /// <param name = "_salesQuotationCopying">An instance that encapsulates numerous parameters for copying.</param>
    /// <returns>An instance that is capable to copy information from particular source to a <c>SalesQuotationLine</c> instance.</returns>
    public static SalesQuotationLineCopyFromSource newFromSalesQuotationCopyingParameters(TmpFrmVirtual _tmpFrmVirtualLine, SalesQuotationLine _salesQuotationLine, SalesQuotationLineForeignTradeCategory _salesQuotationLineForeignTradeCategory, SalesQuotationCopying _salesQuotationCopying)
    {
        SalesQuotationLineCopyFromSourceFactoryAttribute attribute = new SalesQuotationLineCopyFromSourceFactoryAttribute(tableId2Name(_tmpFrmVirtualLine.TableNum));
        SalesQuotationLineCopyFromSource salesQuotationLineCopyFromSource = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(SalesQuotationLineCopyFromSource), attribute) as SalesQuotationLineCopyFromSource;

        if (!salesQuotationLineCopyFromSource)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        salesQuotationLineCopyFromSource.initialize(_tmpFrmVirtualLine, _salesQuotationLine, _salesQuotationLineForeignTradeCategory, _salesQuotationCopying);

        return salesQuotationLineCopyFromSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needToCopyForeignTradeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if foreign trade record has to be copied.
    /// </summary>
    /// <returns>true if foreign trade record has to be copied; otherwise, false.</returns>
    public boolean needToCopyForeignTradeRecord()
    {
        return needToCopyForeignTradeRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs copying from the source record to the provided instance of <c>SalesQuotationLine</c>.
    /// </summary>
    public void copyLine()
    {
        this.copy();
        this.updateAfterCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of a class that inherits from <c>SalesQuotationLineCopyFromSource</c> with the passed parameters.
    /// </summary>
    /// <param name = "_tmpFrmVirtualLine">A virtual line, used to find a source record to copy information from.</param>
    /// <param name = "_salesQuotationLine">A sales quotation line to copy data to.</param>
    /// <param name = "_salesQuotationLineForeignTradeCategory">A sales quotation foreign trade category.</param>
    /// <param name = "_salesQuotationCopying">An instance that encapsulates numerous parameters for copying.</param>
    protected void initialize(TmpFrmVirtual _tmpFrmVirtualLine, SalesQuotationLine _salesQuotationLine, SalesQuotationLineForeignTradeCategory _salesQuotationLineForeignTradeCategory, SalesQuotationCopying _salesQuotationCopying)
    {
        tmpFrmVirtualLine                      = _tmpFrmVirtualLine;
        salesQuotationLine                     = _salesQuotationLine;
        salesQuotationLineForeignTradeCategory = _salesQuotationLineForeignTradeCategory;
        salesQuotationCopying                  = _salesQuotationCopying;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAfterCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs updating of the relevant properties based on the parameters, set in the passed instance of <c>SalesQuotationCopying</c>.
    /// </summary>
    protected void updateAfterCopy()
    {
        if (salesQuotationCopying.shouldCopyQty())
        {
            this.copyQty();
        }

        var sourceCurrencyCode = this.sourceCurrencyCode();

        if (sourceCurrencyCode && salesQuotationLine.CurrencyCode != sourceCurrencyCode)
        {
            this.convertPriceInfoToNewCurrency(sourceCurrencyCode);
        }

        SalesCalcAvailableDlvDates::initDateFields(salesQuotationLine);

        this.recalculateSalesQuotationLineAmount();

        salesQuotationLine.createLine(true, false, false, !salesQuotationCopying.parmCopyPrecisely(), !salesQuotationCopying.parmCopyMarkup(), salesQuotationCopying.parmRecalculateAmount(), this.sourceTradeInventTransId(), true);

        this.copyForeignTradeRecord();

        this.setPriceDiscLineChangePolicy();

        salesQuotationLine.update();

        this.copyMarkup(this.sourceRecord());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies markup from the source record to the destination instance of <c>SalesQuotationLine</c>, in case if requested by an initialization parameter.
    /// </summary>
    /// <param name = "_sourceRecord">The source record to copy markup from.</param>
    protected void copyMarkup(Common _sourceRecord)
    {
        if (salesQuotationCopying.parmCopyMarkup())
        {
            Markup::copy(NoYes::No, _sourceRecord, salesQuotationLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceDiscLineChangePolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets price discount policies for the lines of the new sales quotation.
    /// </summary>
    protected void setPriceDiscLineChangePolicy()
    {
        if (RetailPricingSkipChangePolicyWhenCopyFromSalesLineFlight::instance().isEnabled()
            && RetailPricingEngine::useRetailPricingEngineForSalesQuatation(salesQuotationLine.QuotationId)
            && RetailPricingCustomizableFeatureToggle::isPreventUnintendedRecalculationEnabled())
        {
            return; // Skip change policy when retail price lock is enabled, as price lock serves the same purpose as overriding price.
        }

        switch (tmpFrmVirtualLine.TableNum)
        {
            case tablenum(SalesLine)            :
            case tablenum(CustInvoiceTrans)     :
            case tablenum(CustPackingSlipTrans) :
            case tablenum(CustConfirmTrans)     :
                salesQuotationLine.setPriceDiscChangePolicy(PriceDiscSystemSource::CopyFromSalesOrder);
                break;

            case tablenum(SalesQuotationLine)   :
                salesQuotationLine.setPriceDiscChangePolicy(PriceDiscSystemSource::CopyFromSalesQuotation);
                break;

            case tablenum(ProjInvoiceItem)      :
                salesQuotationLine.setPriceDiscChangePolicy(PriceDiscSystemSource::Project);
                break;

            default : break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyForeignTradeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies information about foreign trade category.
    /// </summary>
    protected void copyForeignTradeRecord()
    {
        if (this.needToCopyForeignTradeRecord())
        {
            salesQuotationLineForeignTradeCategory.initFromSalesQuotationLine(salesQuotationLine);
            salesQuotationLineForeignTradeCategory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRecalculateLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if line amount must be recalculated.
    /// </summary>
    /// <returns>true if LineAmount property must be recalculated; otherwise, false.</returns>
    protected boolean mustRecalculateLineAmount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateSalesQuotationLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the line amount.
    /// </summary>
    protected void recalculateSalesQuotationLineAmount()
    {
        if (!this.mustRecalculateLineAmount())
        {
            return;
        }
        
        salesQuotationLine.LineAmount = salesQuotationLine.calcLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPriceInfoToNewCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts price related information to a new currency if it has changed after copying.
    /// </summary>    
    /// <param name = "_currencyCode">Currency code to convert to.</param>
    protected void convertPriceInfoToNewCurrency(CurrencyCode _currencyCode)
    {
        salesQuotationLine.SalesPrice  = ExchangeRateHelper::curPrice2CurPrice(salesQuotationLine.SalesPrice, _currencyCode, salesQuotationLine.CurrencyCode);
        salesQuotationLine.LineDisc    = ExchangeRateHelper::curPrice2CurPrice(salesQuotationLine.LineDisc, _currencyCode, salesQuotationLine.CurrencyCode);
        salesQuotationLine.MultiLnDisc = ExchangeRateHelper::curPrice2CurPrice(salesQuotationLine.MultiLnDisc, _currencyCode, salesQuotationLine.CurrencyCode);
        salesQuotationLine.SalesMarkup = ExchangeRateHelper::curPrice2CurPrice(salesQuotationLine.SalesMarkup, _currencyCode, salesQuotationLine.CurrencyCode);
        salesQuotationLine.LineAmount  = CurrencyExchangeHelper::curAmount2CurAmount(salesQuotationLine.LineAmount, _currencyCode, salesQuotationLine.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies sales quotation line quantity.
    /// </summary>
    protected void copyQty()
    {
        if (salesQuotationLine.ProjTransType == QuotationProjTransType::Item)
        {
            salesQuotationLine.SalesQty = decround(salesQuotationLine.SalesQty * salesQuotationCopying.parmQuantityFactor(), UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(salesQuotationLine.SalesUnit)));
        }
        else
        {
            salesQuotationLine.SalesQty = salesQuotationLine.SalesQty * salesQuotationCopying.parmQuantityFactor();
        }

        salesQuotationLine.QtyOrdered = salesQuotationLine.QtyOrdered * salesQuotationCopying.parmQuantityFactor();
        salesQuotationLine.PdsCWQty = salesQuotationLine.PdsCWQty * salesQuotationCopying.parmQuantityFactor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs copying of the sales quotation line data from the source entity.
    /// </summary>
    protected abstract void copy()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// The currency code, specified on the source record.
    /// </summary>
    /// <returns>The currency code.</returns>
    protected abstract CurrencyCode sourceCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source record from which information has been copied.
    /// </summary>
    /// <returns>Source record.</returns>
    protected abstract Common sourceRecord()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTradeInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source <c>TradeInventTransId</c>.
    /// </summary>
    /// <returns>The trade invent trans id of the source record.</returns>
    protected abstract TradeInventTransId sourceTradeInventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpFrmVirtualLine</Name>
				<Source><![CDATA[
    public TmpFrmVirtual getTmpFrmVirtualLine()
    {
        return tmpFrmVirtualLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>