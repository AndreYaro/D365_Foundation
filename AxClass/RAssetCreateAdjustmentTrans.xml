<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetCreateAdjustmentTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetCreateAdjustmentTrans extends RunBaseBatch implements BatchRetryable
{
    QueryRun              queryRun;
    RAssetAdjustmentTable assetAdjustmentTable;

    Counter               progressCounter;

    RAssetStandardId      assetStandardId;
    DialogField           dialogAssetStandard;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        assetStandardId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanCreate</Name>
				<Source><![CDATA[
    private boolean checkCanCreate(RAssetTable           _assetTable,
                                   RAssetStandardId      _assetStandardId)
    {
        RAssetStandards     assetStandards = RAssetStandards::find(_assetTable.AccountNum, _assetStandardId);
        RAssetSumCalc       assetSumCalcTrans;
        ;

        if (! assetStandards.Depreciation)
        {
            info(strFmt("@GLS116207", _assetTable.AccountNum));
            return false;
        }

        if (RAssetTrans::transLastDate(_assetTable.AccountNum, _assetStandardId,false) > assetAdjustmentTable.TransDate)
        {
            info(strFmt("@FixedAssets:FA_MessageError_TransactionDateIsLessThanLastOperationDate", _assetTable.AccountNum, _assetStandardId));
            return false;
        }

        if (RAssetInventoryTable::checkInventory(_assetTable, assetAdjustmentTable.TransDate))
        {
            info(strFmt("@GLS116567", _assetTable.AccountNum));
            return false;
        }

        assetSumCalcTrans = RAssetSumCalc_Trans::newAssetPeriod(_assetTable.AccountNum,
                                                                _assetStandardId,
                                                                assetAdjustmentTable.PositionDate);

        if (! assetSumCalcTrans.netBookValue())
            return false;

        return assetStandards.checkDeprPeriod(assetAdjustmentTable.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    public void createLine(RAssetTable       _assetTable,
                            RAssetStandardId  _assetStandardId)
    {
        RAssetStandards rAssetStandards;
        ;

        while select AssetStandardId from rAssetStandards
            where rAssetStandards.AssetId         == _assetTable.AccountNum &&
                  (! _assetStandardId ||
                   rAssetStandards.AssetStandardId == _assetStandardId)
        {
            if (this.checkCanCreate(_assetTable, rAssetStandards.AssetStandardId))
            {
                RAssetAdjustmentTrans::createLine(assetAdjustmentTable, _assetTable, rAssetStandards.AssetStandardId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116574");
        dialogAssetStandard = dialog.addField(extendedTypeStr(RAssetStandardId), "@GLS116120");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    private void displayProgress(RAssetId   _assetId)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(strFmt("@GLS116533", _assetId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        assetStandardId = dialogAssetStandard.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RAssetAdjustmentTable _assetAdjustmentTable)
    {
        ;

        assetAdjustmentTable = _assetAdjustmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        ;

        super();

        queryRun             = new QueryRun(queryStr(RAssetTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardId</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetStandardId parmStandardId(RAssetStandardId _standardId = assetStandardId)
    {
        assetStandardId = _standardId;

        return assetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetTable     rAssetTable;
        Counter         progressTotal;

        #macrolib.AviFiles

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@GLS116574", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        queryRun.query().dataSourceTable(tableNum(RAssetTable)).update(true);

        ttsbegin;

        while (queryRun.next())
        {
            rAssetTable = queryRun.get(tableNum(RAssetTable));

            this.displayProgress(rAssetTable.AccountNum);

            this.createLine(rAssetTable, assetStandardId);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version     = conPeek(_packedClass, 1);
        PackedQueryRun  packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdjustmentTrans</Name>
				<Source><![CDATA[
    public static void createAdjustmentTrans(RAssetAdjustmentTable _assetAdjustmentTable)
    {
        RAssetCreateAdjustmentTrans assetAdjustment = new RAssetCreateAdjustmentTrans();
        ;

        assetAdjustment.initValue(_assetAdjustmentTable);

        if(assetAdjustment.prompt())
        {
            assetAdjustment.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>