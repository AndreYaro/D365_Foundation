<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceDPApplicationSuite_AE_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classstr(SalesInvoiceDP))]
public final class SalesInvoiceDPApplicationSuite_AE_Extension
{    
    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateSalesInvoiceTmp</Name>
				<Source><![CDATA[
    protected void populateSalesInvoiceTmp(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        next populateSalesInvoiceTmp(
            _custInvoiceJour,
            _custInvoiceTrans,
            _taxSpec,
            _custPaymSchedLine,
            _prepaymentCustTrans,
            _prepaymentTaxTrans);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]))
        {
            SalesInvoiceTmp salesInvoiceTmp = this.parmSalesInvoiceTmp_AE();

            if (_taxSpec)
            {
                salesInvoiceTmp.LineAmount = -_taxSpec.taxBaseAmount();
                salesInvoiceTmp.VATAmount_AE = -(_taxSpec.taxAmount());
                salesinvoicetmp.VATPercent_AE = this.getTaxValue(_taxSpec, _custInvoiceJour);
                salesInvoiceTmp.EndDisc_AE = _custInvoiceJour.EndDiscMST;
                salesInvoiceTmp.SumMarkup_AE = _custInvoiceJour.SumMarkupMST;
                salesInvoiceTmp.InvoiceRoundOff_AE = _custInvoiceJour.InvoiceRoundOffMST;
                salesInvoiceTmp.CurrencyCode = Ledger::accountingCurrency(CompanyInfo::current());
                salesInvoiceTmp.Qty = -_taxSpec.taxBaseQty();
                salesInvoiceTmp.IsVATLine_AE = NoYes::Yes;

                //If transactional currency is different from reporting currency
                if (_taxSpec.CurrencyCode() != salesInvoiceTmp.CustInvoiceJourCurrencyCode)
                {
                    salesInvoiceTmp.ShowReportingCurTotals_AE = NoYes::Yes;
                }
                this.parmSalesInvoiceTmp_AE(salesInvoiceTmp);
            }
            else
            {
                salesInvoiceTmp.VATAmount_AE = _custInvoiceTrans.TaxAmount ? _custInvoiceTrans.TaxAmount :
                    Tax::calcTaxAmount(_custInvoiceTrans.TaxGroup,
                        _custInvoiceTrans.TaxItemGroup,
                        _custInvoiceJour.InvoiceDate,
                        (_custInvoiceTrans.CurrencyCode ? _custInvoiceTrans.CurrencyCode : _custInvoiceJour.CurrencyCode),
                        _custInvoiceTrans.LineAmount,
                        TaxModuleType::SalesInvoice);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesInvoiceTmp_AE</Name>
				<Source><![CDATA[
    public SalesInvoiceTmp parmSalesInvoiceTmp_AE(SalesInvoiceTmp _salesInvoiceTmp = salesInvoiceTmp)
    {
        this.salesInvoiceTmp = _salesInvoiceTmp;
        return this.salesInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesInvoiceHeaderFooterTmp_AE</Name>
				<Source><![CDATA[
    public SalesInvoiceHeaderFooterTmp parmSalesInvoiceHeaderFooterTmp_AE(SalesInvoiceHeaderFooterTmp _salesInvoiceHeaderFooterTmp = salesInvoiceHeaderFooterTmp)
    {
        salesInvoiceHeaderFooterTmp = _salesInvoiceHeaderFooterTmp;
        return salesInvoiceHeaderFooterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    protected void populateSalesInvoiceHeaderFooterTmp(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        next populateSalesInvoiceHeaderFooterTmp(_custInvoiceJour, _companyInfo);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]))
        {
            SalesInvoiceHeaderFooterTmp salesInvoiceHeaderFooterTmp = this.parmSalesInvoiceHeaderFooterTmp_AE();

            salesInvoiceHeaderFooterTmp.TaxRegistrationNumber_AE = _custInvoiceJour.custTable_InvoiceAccount().registrationNumber();

            CustInvoiceTrans custInvoiceTrans, custInvoiceTransReversal;
            InventTransOrigin inventTransOrigin, inventTransOriginReversal;
            InventTrans inventTrans;
            select firstOnly RecId from inventTrans
                where inventTrans.InvoiceReturned
                exists join inventTransOriginReversal
                    where inventTransOriginReversal.RecId == inventTrans.InventTransOrigin
                exists join custInvoiceTransReversal
                    where custInvoiceTransReversal.InventTransId == inventTransOriginReversal.InventTransId
                        && custInvoiceTransReversal.SalesId == _custInvoiceJour.SalesId
                        && custInvoiceTransReversal.InvoiceId == _custInvoiceJour.InvoiceId
                        && custInvoiceTransReversal.InvoiceDate == _custInvoiceJour.InvoiceDate
                        && custInvoiceTransReversal.numberSequenceGroup == _custInvoiceJour.numberSequenceGroup;

            if (inventTrans)
            {
                container originalInvoiceIdCon;

                while select InvoiceId from custInvoiceTrans
                    group by InvoiceId
                    exists join inventTransOrigin
                        where inventTransOrigin.InventTransId == custInvoiceTrans.InventTransId
                    exists join inventTrans
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    exists join inventTransOriginReversal
                        where inventTransOriginReversal.RecId == inventTrans.ReturnInventTransOrigin
                    exists join custInvoiceTransReversal
                        where custInvoiceTransReversal.InventTransId == inventTransOriginReversal.InventTransId
                            && custInvoiceTransReversal.SalesId == _custInvoiceJour.SalesId
                            && custInvoiceTransReversal.InvoiceId == _custInvoiceJour.InvoiceId
                            && custInvoiceTransReversal.InvoiceDate == _custInvoiceJour.InvoiceDate
                            && custInvoiceTransReversal.numberSequenceGroup == _custInvoiceJour.numberSequenceGroup
                {
                    originalInvoiceIdCon += custInvoiceTrans.InvoiceId;
                }

                salesInvoiceHeaderFooterTmp.OriginalInvoiceReference = con2Str(originalInvoiceIdCon, ', ');
            }
            else
            {
                CustPackingSlipJour custPackingSlipJour_AE;
                select firstonly DeliveryDate from custPackingSlipJour_AE
                    order by DeliveryDate asc
                    where _custInvoiceJour.SalesId
                        && custPackingSlipJour_AE.SalesId == _custInvoiceJour.SalesId;

                if (custPackingSlipJour_AE)
                {
                    salesInvoiceHeaderFooterTmp.SupplyDate_AE = custPackingSlipJour_AE.DeliveryDate;
                }
            }

            this.parmSalesInvoiceHeaderFooterTmp_AE(salesInvoiceHeaderFooterTmp);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>