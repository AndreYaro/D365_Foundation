<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationToLineField</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationToLineField</c> class manages the table to line table for the sales quotations.
/// </summary>
class SalesQuotationToLineField extends SalesPurchTableToLineField
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findParametersTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>SalesQuotationToLineParameters</c> table.
    /// </summary>
    /// <param name="_fieldId">
    /// The key field for the <c>SalesQuotationToLineParameters</c> table.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether the record is selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>SalesQuotationToLineParameters</c> record.
    /// </returns>
    protected SalesPurchTableToLineParameters findParametersTable(FieldId _fieldId, boolean _update = false)
    {
        return SalesQuotationToLineParameters::find(_fieldId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldDescriptionDelegate</Name>
				<Source><![CDATA[
	/// <summary>
    /// Delegate for retrieving a user friendly description of a field that is used in the header to lines update..
    /// </summary>
    /// <param name = "_fieldId">The field ID of the field that is used in the header to lines update.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> object to return the user friendly description of the field that is used in the header to lines update.</param>
    delegate void getFieldDescriptionDelegate(FieldId _fieldId, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldDescription</Name>
				<Source><![CDATA[
	/// <summary>
    /// Retrieves a user friendly description of a field that is used in the header to lines update.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that is used in the header to lines update.
    /// </param>
    /// <returns>
    /// A user friendly description of the field that is used in the header to lines update.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The specified field ID is not part of the header to lines update.
    /// </exception>
    protected FieldLabel getFieldDescription(FieldId _fieldId)
    {
        FieldLabel              description;

        _fieldId = fieldExt2Id(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesQuotationTable, CustAccount)       :
                if (PriceParameters::find().isSalesPriceCustAccountActive())
                {
                    description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, SalesPrice));
                }
                if (PriceParameters::find().isSalesLineDiscCustAccountActive())
                {
                    if (description)
                    {
                        description= strFmt("@SYS26868", description,
                                     strFmt("@SYS26868", fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, LineDisc)),
                                                         fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, LinePercent))));
                    }
                    else
                    {
                        description= strFmt("@SYS26868", fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, LineDisc)),
                                                         fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, LinePercent)));
                    }
                }
                if (description)
                {
                    description= strFmt("@SYS26868", description, tableId2pname(tableNum(MarkupTable)));
                }
                else
                {
                    description= tableId2pname(tableNum(MarkupTable));
                }
                description = strFmt("@SYS62815", description, fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, ExternalItemId)));
                break;

            case fieldNum(SalesQuotationTable, SalesGroup)       :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, SalesGroup));
                break;

            case fieldNum(SalesQuotationTable, TaxGroup)         :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, TaxGroup));
                break;

            case fieldNum(SalesQuotationTable, OverrideSalesTax):
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, OverrideSalesTax));
                break;

            case fieldNum(SalesQuotationTable, DefaultDimension) :
                description = "@SYS14926";
                break;

            case fieldNum(SalesQuotationTable, InventLocationId) :
                description = "@SYS108782";
                break;

            case fieldNum(SalesQuotationTable, TransactionCode)  :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, TransactionCode));
                break;

            case fieldNum(SalesQuotationTable, Transport)        :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, Transport));
                break;

            case fieldNum(SalesQuotationTable, Port)             :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, Port));
                break;

            case fieldNum(SalesQuotationTable, StatProcId)       :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, StatProcId));
                break;

            case fieldNum(SalesQuotationTable, PriceGroupId)     :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, SalesPrice));
                break;

            case fieldNum(SalesQuotationTable, LineDisc)         :
                description = strFmt("@SYS62815", fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, LineDisc)),
                                           fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, LinePercent)));
                break;

            case fieldNum(SalesQuotationTable, MarkupGroup)      :
                description = tableId2pname(tableNum(MarkupTable));
                break;

            case fieldNum(SalesQuotationTable, DlvMode) :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, DlvMode));
                break;

            case fieldNum(SalesQuotationTable, DlvTerm) :
                return fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, DlvTerm));

            case fieldNum(SalesQuotationTable, LanguageId)       :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, Name));
                break;

            case fieldNum(SalesQuotationTable, ShippingDateRequested)       :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, ShippingDateRequested));
                break;

            case fieldNum(SalesQuotationTable, ReceiptDateRequested)       :
                description = fieldId2pname(tableNum(SalesQuotationLine), fieldNum(SalesQuotationLine, ReceiptDateRequested));
                break;

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.getFieldDescriptionDelegate(_fieldId, result);
                if(result.hasResult())
                {
                    description = result.result();
                }
				else
                {
                    throw error(strFmt("@SYS19306",funcName()));
                }
        }

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameterHelp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a user friendly help text for a field that is used in the header to lines update.
    /// </summary>
    /// <returns>
    /// The user friendly help text for a field that is used in the header to lines update.
    /// </returns>
    public FieldHelp parameterHelp()
    {
        return strFmt("@GLS180172", this.lineUpdateDescription(), this.fieldName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionHelp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a user friendly question help text for a field that is used in the header to lines update.
    /// </summary>
    /// <returns>
    /// The user friendly question help text for a field that is used in the header to lines update.
    /// </returns>
    public FieldHelp questionHelp()
    {
        return strFmt("@GLS180173", this.lineUpdateDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for the header table of the document.
    /// </summary>
    /// <returns>
    /// The table ID of the <c>SalesQuotationTable</c> table.
    /// </returns>
    public TableId tableId()
    {
        return tableNum(SalesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesPurchTableToLineParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the header to lines update parameter record that corresponds to the field ID of a field.
    /// </summary>
    public void updateSalesPurchTableToLineParameters()
    {
        SalesQuotationToLineParameters   salesQuotationToLineParameters = SalesQuotationToLineParameters::find(this.parmFieldId(), true);

        if (table2lineUpdate != salesQuotationToLineParameters.Table2LineUpdate)
        {
            ttsbegin;

            salesQuotationToLineParameters.FieldId = this.parmFieldId();
            salesQuotationToLineParameters.Table2LineUpdate = table2lineUpdate;
            salesQuotationToLineParameters.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>SalesQuotationToLineField</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>SalesQuotationToLineField</c> class.
    /// </returns>
    public static SalesQuotationToLineField construct()
    {
        SalesQuotationToLineField salesQuotationToLineField = new SalesQuotationToLineField();

        return salesQuotationToLineField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>SalesQuotationToLineField</c> object from a previously packed <c>SalesQuotationToLineField</c> object.
    /// </summary>
    /// <param name="_packedClass">
    ///    A container that contains a previously packed <c>SalesQuotationToLineField</c>.
    /// </param>
    /// <returns>
    ///    A <c>SalesQuotationToLineField</c> object.
    /// </returns>
    static public SalesQuotationToLineField create(container _packedClass)
    {
        SalesQuotationToLineField salesQuotationToLineField = SalesQuotationToLineField::construct();
        salesQuotationToLineField.unpack(_packedClass);

        return salesQuotationToLineField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance that is based on a field ID.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID that is used to create the new instance.
    /// </param>
    /// <returns>
    /// A new instance that is based on the field ID.
    /// </returns>
    public static SalesQuotationToLineField newFieldId(FieldId _fieldId)
    {
        SalesQuotationToLineField salesQuotationToLineField = SalesQuotationToLineField::construct();
        salesQuotationToLineField.initFieldId(_fieldId);

        return salesQuotationToLineField;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
