<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_TAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class of ledger journal engine T-Account.
/// </summary>
// This class is used for feature T-Account of Japan
class LedgerJournalEngine_TAccount extends LedgerJournalEngine
{
    FormDataSource                          ledgerJournalTransDebit_ds;
    FormDataSource                          ledgerJournalTransCredit_ds;

    NumberSeqFormHandlerLedgerJournal       numberSeqFormHandlerJournalDebit;
    NumberSeqFormHandlerLedgerJournal       numberSeqFormHandlerJournalCredit;

    boolean                                 voucherAmountBalancesTAccount;
    boolean                                 isNewVoucher;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts date of the ledger journal engine.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// An instance of the <c>LedgerJournalTrans</c> class.
    /// </param>
    public void adjustDate(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTransLocal;

        ttsbegin;
        oldTransDate = _ledgerJournalTrans.TransDate;

        while   select  forupdate ledgerJournalTransLocal
                where   ledgerJournalTransLocal.JournalNum == _ledgerJournalTrans.JournalNum &&
                        ledgerJournalTransLocal.Voucher    == _ledgerJournalTrans.Voucher &&
                        ledgerJournalTransLocal.RecId      != _ledgerJournalTrans.RecId
        {
            ledgerJournalTransLocal.TransDate = _ledgerJournalTrans.TransDate;
            ledgerJournalTransLocal.AcknowledgementDate = _ledgerJournalTrans.AcknowledgementDate;

            this.currencyModified(ledgerJournalTransLocal);

            ledgerJournalTransLocal.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the ledger journal engine's field is allow edit.
    /// </summary>
    /// <returns>
    /// true if the field is allow edit; otherwise, false.
    /// </returns>
    public boolean allowEdit()
    {
        boolean ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVoucherAmountBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the voucher is balanced.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The data in the <c>LedgerJournalTrans</c> table.
    /// </param>
    public void checkVoucherAmountBalances(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean                         ret = false;
        Voucher                         maxVoucher;

        if (oldVoucher)
        {
            ret = this.isVoucherAmountBalances(_ledgerJournalTrans, oldVoucher);
        }
        else
        {
            maxVoucher = (select maxof(Voucher) from ledgerJournalTrans
                   where ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum).Voucher;

            if (maxVoucher)
            {
                ret = this.isVoucherAmountBalances(_ledgerJournalTrans, maxVoucher);
                oldVoucher = maxVoucher;
                oldTransDate = (select TransDate from ledgerJournalTrans
                                    where ledgerJournalTrans.Voucher == maxVoucher && ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum).TransDate;
            }
            else
            {
                ret = true;
            }
        }
        voucherAmountBalancesTAccount = ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases form data source.
    /// </summary>
    /// <remarks>
    /// The reference from <c>LedgerJournalEngine</c> class, close
    /// </remarks>
    public void close()
    {
        ledgerJournalTransDebit_ds  = null;
        ledgerJournalTransCredit_ds = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the exchange rate value to the specified record of the <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The data of the <c>LedgerJournalTrans</c> table
    /// </param>
    /// <param name="_selectTriangulation">
    /// A Boolean value that indicates whether the triangulation is enabled.
    /// </param>
    /// <remarks>
    /// The reference from the <c>LedgerJournalEngine</c> class.
    /// </remarks>
    public void currencyModified(
        LedgerJournalTrans _ledgerJournalTrans,
        boolean            _selectTriangulation = true)
    {
        ExchRateSecondTxt exchRateSecondTxt;
        UnknownNoYes      triangulationResult;

        if (ledgerJournalTable.FixedExchRate
            && ledgerJournalTable.CurrencyCode == _ledgerJournalTrans.CurrencyCode)
        {
            _ledgerJournalTrans.ExchRate          = ledgerJournalTable.ExchRate;
            _ledgerJournalTrans.ExchRateSecond    = ledgerJournalTable.ExchrateSecondary;
            _ledgerJournalTrans.Triangulation     = ledgerJournalTable.euroTriangulation;
        }
        else
        {
            [triangulationResult,
            _ledgerJournalTrans.ExchRate,
            _ledgerJournalTrans.ExchRateSecond,
            exchRateSecondTxt] = ledgerJournalEngine_Server::currencyModified(_ledgerJournalTrans, _selectTriangulation);

            _ledgerJournalTrans.Triangulation = Currency::unknownNoYes2Noyes(triangulationResult);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the voucher field of the <c>LedgerJournalTrans</c> table can be edited.
    /// </summary>
    public void enableVoucher()
    {
        NumberSequenceTable numberSequenceTable;
        boolean             ret;

        numberSequenceTable = NumberSequenceTable::find(ledgerJournalTable.NumberSequenceTable);

        ret = (ledgerJournalTable.ledgerJournalName().NewVoucher == NewVoucher::Manually
            || numberSequenceTable.AllowChangeDown
            || numberSequenceTable.AllowChangeUp);

        ledgerJournalTransDebit_ds.object(fieldnum(LedgerJournalTrans, Voucher)).allowEdit(ret);
        ledgerJournalTransCredit_ds.object(fieldnum(LedgerJournalTrans, Voucher)).allowEdit(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodClosePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>NumberSeqFormHandlerLedgerJournal</c> object.
    /// </summary>
    /// <remarks>
    /// This method must be called from the close method of the T-account form, before super().
    /// </remarks>
    public void formMethodClosePre()
    {
        if (numberSeqFormHandlerJournalDebit)
        {
            numberSeqFormHandlerJournalDebit.formMethodClose();
        }

        if (numberSeqFormHandlerJournalCredit)
        {
            numberSeqFormHandlerJournalCredit.formMethodClose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>NumberSeqFormHandlerLedgerJournal</c> object.
    /// </summary>
    /// <remarks>
    /// This method must be called from the <c>NumberSeqFormHandlerLedgerJournal</c> data source
    /// of the T-account form method <c>linkActive()</c> before <c>super()</c>.
    /// </remarks>
    public void formMethodDataSourceLinkActivePre()
    {
        if (numberSeqFormHandlerJournalDebit)
        {
            this.numberSeqFormHandlerJournalDebit().formMethodDataSourceLinkActive();
            numberSeqFormHandlerJournalDebit = null;
        }
        if (numberSeqFormHandlerJournalCredit)
        {
            this.numberSeqFormHandlerJournalCredit().formMethodDataSourceLinkActive();
            numberSeqFormHandlerJournalCredit = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transaction date for new line.
    /// </summary>
    /// <returns>
    /// The session date if it is a new voucher or no date is specified when voucher number can be modified
    /// by users; otherwise, the value of old transaction date.
    /// </returns>
    public TransDate getTransDate()
    {
        TransDate   transDate = oldTransDate;

        if (isNewVoucher)
        {
            transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            if (ledgerJournalName.NewVoucher == NewVoucher::Manually
                && !transDate)
            {
                transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets voucher number for new line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The data of <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <param name="_isDebit">
    /// A Boolean value that indicates whether to generate voucher for debit data source or credit data
    /// source.
    /// </param>
    /// <returns>
    /// The new voucher number if it is a new voucher; otherwise value of old voucher.
    /// </returns>
    public Voucher getVoucher(LedgerJournalTrans  _ledgerJournalTrans, boolean _isDebit = true)
    {
        Voucher     voucher = oldVoucher;

        if (isNewVoucher)
        {
            if (_isDebit)
            {
                this.numberSeqFormHandlerJournalDebit().formMethodDataSourceCreate();
            }
            else
            {
                this.numberSeqFormHandlerJournalCredit().formMethodDataSourceCreate();
            }
            voucher = _ledgerJournalTrans.Voucher;
        }
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field values in the <c>LedgerJournalTable</c> table.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The data of <c>LedgerJournalTrans</c> table.
    /// </param>
    public void initFromLedgerJournalTable(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (ledgerJournalTable)
        {
            _ledgerJournalTrans.JournalNum        = ledgerJournalTable.JournalNum;

            if (ledgerJournalTable.CurrencyCode)
            {
                _ledgerJournalTrans.CurrencyCode  = ledgerJournalTable.CurrencyCode;

                if (ledgerJournalTable.FixedExchRate)
                {
                    _ledgerJournalTrans.ExchRate  = ledgerJournalTable.ExchRate;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field values for the specified record of the <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A record of the <c>LedgerJournalTrans</c> table
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset">
    /// A record of the <c>LedgerJournalTrans_Asset</c> table
    /// </param>
    /// <param name="_isDebit">
    /// Indicates whether to generate voucher for debit data source or credit data source.
    /// </param>
    /// <remarks>
    /// The <c>initValue()</c> method of the <c>LedgerJournalTrans</c> class is called here.
    /// </remarks>
    public void initValue(LedgerJournalTrans _ledgerJournalTrans,LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null, boolean _isDebit =  true)
    {
        if (_ledgerJournalTrans.RecId == 0)
        {
            _ledgerJournalTrans.initValue();
            this.initFromLedgerJournalTable(_ledgerJournalTrans);

            this.checkVoucherAmountBalances(_ledgerJournalTrans);
            this.isNewVoucher(_ledgerJournalTrans);

            oldVoucher = this.getVoucher(_ledgerJournalTrans, _isDebit);
            _ledgerJournalTrans.Voucher       = oldVoucher;

            oldTransDate = this.getTransDate();
            _ledgerJournalTrans.TransDate = oldTransDate;

            if (!ledgerJournalTable.FixedExchRate)
            {
                this.currencyModified(_ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for isNewVoucher.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Record of <c>LedgerJournalTrans</c> table
    /// </param>
    public void isNewVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        isNewVoucher = (voucherAmountBalancesTAccount
            || !_ledgerJournalTrans)
            && this.takeNewVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVoucherAmountBalances</Name>
				<Source><![CDATA[
    private boolean isVoucherAmountBalances(LedgerJournalTrans _ledgerJournalTrans, Voucher _voucher)
    {
        LedgerJournalTrans              ledgerJournalTransLocal;
        AmountMST                       drAmt;
        AmountMST                       crAmt;
        boolean                         ret = false;

        if (_voucher)
        {
            while select TransDate, Voucher, AmountCurDebit, AmountCurCredit,
                OffsetLedgerDimension, CurrencyCode, ExchRate, ExchRateSecond, ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary, JournalNum
                from ledgerJournalTransLocal
                where ledgerJournalTransLocal.Voucher == _voucher
                && ledgerJournalTransLocal.JournalNum == _ledgerJournalTrans.JournalNum
            {
                if (ledgerJournalTransLocal.AmountCurDebit)
                {
                    drAmt += ledgerJournalTransLocal.calcDebitMST();
                }

                if (ledgerJournalTransLocal.AmountCurCredit)
                {
                    crAmt += ledgerJournalTransLocal.calcCreditMST();
                }

                if (ledgerJournalTransLocal.OffsetLedgerDimension != 0
                    && ledgerJournalTransLocal.AmountCurDebit)
                {
                    crAmt += ledgerJournalTransLocal.calcDebitMST();
                }

                if (ledgerJournalTransLocal.OffsetLedgerDimension != 0
                    && ledgerJournalTransLocal.AmountCurCredit)
                {
                    drAmt += ledgerJournalTransLocal.calcCreditMST();
                }
            }

            if (drAmt
                || crAmt)
            {
                if (drAmt - crAmt == 0)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(FormRun _formRun = null)
    {
        super(_formRun);

        if (_formRun)
        {
            ledgerJournalTransDebit_ds      = _formRun.dataSource(1);
            ledgerJournalTransCredit_ds     = _formRun.dataSource(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerJournalCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>NumberSeqFormhandler</c> object of the <c>NumberSeqFormHandlerLedgerJournal</c>
    /// object.
    /// </summary>
    /// <returns>
    /// The <c>NumberSeqFormHandler</c> class.
    /// </returns>
    /// <remarks>
    /// If not already initialized, the <c>NumberSeqFormHandler</c> object is initialized by this method.
    /// </remarks>
    public NumberSeqFormHandlerLedgerJournal numberSeqFormHandlerJournalCredit()
    {
        if (!numberSeqFormHandlerJournalCredit)
        {
            numberSeqFormHandlerJournalCredit = NumberSeqFormHandler::newForm(ledgerJournalTable.NumberSequenceTable,
                                                                        ledgerJournalTransCredit_ds.formRun(),
                                                                        ledgerJournalTransCredit_ds,
                                                                        fieldNum(LedgerJournalTrans, Voucher));

            numberSeqFormHandlerJournalCredit.parmLedgerJournalEngine(this);
        }
        return numberSeqFormHandlerJournalCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandlerJournalDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>NumberSeqFormhandler</c> object of the <c>NumberSeqFormHandlerLedgerJournal</c>
    /// object.
    /// </summary>
    /// <returns>
    /// The <c>NumberSeqFormHandler</c> class.
    /// </returns>
    /// <remarks>
    /// If not already initialized, the <c>NumberSeqFormHandler</c> object is initialized by this method.
    /// </remarks>
    public NumberSeqFormHandlerLedgerJournal numberSeqFormHandlerJournalDebit()
    {
        if (!numberSeqFormHandlerJournalDebit)
        {
            numberSeqFormHandlerJournalDebit = NumberSeqFormHandler::newForm(ledgerJournalTable.NumberSequenceTable,
                                                                        ledgerJournalTransDebit_ds.formRun(),
                                                                        ledgerJournalTransDebit_ds,
                                                                        fieldNum(LedgerJournalTrans, Voucher));

            numberSeqFormHandlerJournalDebit.parmLedgerJournalEngine(this);
        }
        return numberSeqFormHandlerJournalDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parms method for <c>LedgerJournalTable</c> table.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// Data of <c>LedgerJournalTable</c> table.
    /// </param>
    /// <returns>
    /// Data of <c>LedgerJournalTable</c> table.
    /// </returns>
    public LedgerJournalTable parmLedgerJournalTable(LedgerJournalTable _ledgerJournalTable = ledgerJournalTable)
    {
        ledgerJournalTable = _ledgerJournalTable;
        ledgerJournalName  = LedgerJournalName::find(ledgerJournalTable.JournalName);

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parms method for oldTransDate variable.
    /// </summary>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <returns>
    /// Transaction date.
    /// </returns>
    public TransDate parmTransDate(TransDate _transDate = oldTransDate)
    {
        oldTransDate = _transDate;
        return oldTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parms method for oldVoucher variable.
    /// </summary>
    /// <param name="_voucher">
    /// Voucher number.
    /// </param>
    /// <returns>
    /// Voucher number.
    /// </returns>
    public Voucher parmVoucher(Voucher _voucher = oldVoucher)
    {
        oldVoucher = _voucher;
        return oldVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>takeNewVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a new voucher number will be created.
    /// </summary>
    /// <returns>
    /// true if a new voucher number is required; otherwise, false.
    /// </returns>
    public boolean takeNewVoucher()
    {
        boolean ret = false;

        switch (ledgerJournalName.NewVoucher)
        {
            case NewVoucher::BalanceSheet:
                ret = voucherAmountBalancesTAccount;
                break;

            case NewVoucher::OneVoucher:
                ret = !oldVoucher;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCurCreditDebitModifiedOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts a <c>LedgerJournalTrans</c> table record and corresponding <c>LedgerJournalTrans_Project</c>
    /// fields in response to a change in the <c>AmountCurDebit</c> or <c>AmountCurCredit</c> value.
    /// </summary>
    /// <param name="_ledgerJournalTransRecId">
    /// The RecId of <c>LedgerJournalTrans</c> table record being modified.
    /// </param>
    /// <param name="_amounctToChange">
    /// The amount which the field will change to.
    /// </param>
    /// <param name="_isDebitField">
    /// The flag to mark which field was being modified.
    /// True, <c>AmountCurDebit</c> field; otherwise, <c>AmountCurCredit</c> field.
    /// </param>
    /// <remarks>
    /// This method is only used to the journal whose AccountType or OffsetAccountType is Project.
    /// </remarks>
    public static void amountCurCreditDebitModifiedOnServer(
        RecId       _ledgerJournalTransRecId,
        AmountCur   _amounctToChange,
        boolean     _isDebitField)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_Project  ledgerJournalTrans_Project;
        LedgerJournalEngine         ledgerJournalEngine = new LedgerJournalEngine();

        ttsBegin;
        ledgerJournalTrans = LedgerJournalTrans::findRecId(_ledgerJournalTransRecId, true);
        ledgerJournalTrans_Project = LedgerJournalTrans_Project::find(ledgerJournalTrans.RecId, true);

        if (_isDebitField)
        {
            ledgerJournalTrans.AmountCurDebit = _amounctToChange;
            ledgerJournalEngine.amountCurDebitModified(ledgerJournalTrans, ledgerJournalTrans_Project);
        }
        else
        {
            ledgerJournalTrans.AmountCurCredit = _amounctToChange;
            ledgerJournalEngine.amountCurCreditModified(ledgerJournalTrans, ledgerJournalTrans_Project);
        }

        LedgerJournalEngine::setProjCostSalesPrice(LedgerJournalTrans, ledgerJournalTrans_Project, ledgerJournalEngine.parmSalesPrice());

        // Recalc Project Qty Amount based on UnitCost and CreditAmount
        ledgerJournalEngine.projCostPriceModified(LedgerJournalTrans, ledgerJournalTrans_Project);

        ledgerJournalTrans_Project.update();
        ledgerJournalTrans.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor of the <c>LedgerJournalEngine_TAccount</c> class instance.
    /// </summary>
    /// <param name="_formRun">
    /// The instance of the <c>FormRun</c> class.
    /// </param>
    /// <returns>
    /// The instance of the <c>LedgerJournalEngine_TAccount</c> class.
    /// </returns>
    public static LedgerJournalEngine_TAccount construct(FormRun  _formRun = null)
    {
        LedgerJournalEngine_TAccount     ledgerJournalEngine_TAccount;

        ledgerJournalEngine_TAccount = new LedgerJournalEngine_TAccount(_formRun);

        return ledgerJournalEngine_TAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>