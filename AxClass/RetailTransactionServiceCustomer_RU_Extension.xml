<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceCustomer_RU_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionServiceCustomer_RU_Extension</c> class provides extensibility to Retail Transaction Service Customer.
/// </summary>
[ExtensionOf(classStr(RetailTransactionServiceCustomerExtensions))]
internal final class RetailTransactionServiceCustomer_RU_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beforeAddressUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extensibility point in <c>RetailTransactionServiceCustomer</c> run before the customer address is updated.
    /// </summary>
    /// <param name = "address">The customer address for updating.</param>
    /// <param name = "extensionProperties">The extension properties.</param>
    public static void beforeAddressUpdate(LogisticsPostalAddress address, str extensionProperties)
    {
        if (LogisticsPostalAddress::isSimplifiedCustomerAddressFunctionalityEnabled())
        {
            address.IsSimplifiedAddress_RU = RetailTransactionServiceCustomerExtensions::isSimplifiedAddress(extensionProperties);
        }
        else
        {
            if (LogisticsPostalAddressUtility::isCountryRegionRU(address.CountryRegionId))
            {
                address.CityRecId = RetailTransactionServiceCustomerExtensions::getCityRecId_RU(address.CountryRegionId, address.state, address.county, address.city);
                address.District = RetailTransactionServiceCustomerExtensions::getDistrictRecId_RU(address.CountryRegionId, address.state, address.county, address.CityRecId, address.districtName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeAddressCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extensibility point in <c>RetailTransactionServiceCustomer</c> run before the customer address is created.
    /// </summary>
    /// <param name = "addressView">The customer address for creating.</param>
    /// <param name = "extensionProperties">The extension properties.</param>
    public static void beforeAddressCreate(DirPartyPostalAddressView addressView, str extensionProperties)
    {
        if (LogisticsPostalAddress::isSimplifiedCustomerAddressFunctionalityEnabled())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRURET00007, funcName());
            addressView.IsSimplifiedAddress_RU = RetailTransactionServiceCustomerExtensions::isSimplifiedAddress(extensionProperties);
        }
        else
        {
            if (LogisticsPostalAddressUtility::isCountryRegionRU(addressView.CountryRegionId))
            {
                addressView.CityRecId = RetailTransactionServiceCustomerExtensions::getCityRecId_RU(addressView.CountryRegionId, addressView.state, addressView.county, addressView.city);
                addressView.District = RetailTransactionServiceCustomerExtensions::getDistrictRecId_RU(addressView.CountryRegionId, addressView.state, addressView.county, addressView.CityRecId, addressView.districtName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSimplifiedAddress</Name>
				<Source><![CDATA[
    private static boolean isSimplifiedAddress(str extensionProperties)
    {
        if (extensionProperties == '')
        {
            return false;
        }

        XmlElement xmlElement = RetailTransactionServiceUtilities::ParseRootElement(extensionProperties);

        const str simplifiedAddress_RU = 'SimplifiedAddress_RU';

        str isSimpleAddress = RetailTransactionServiceUtilities::GetValue(xmlElement, simplifiedAddress_RU);
        return (strCmp(strUpr(isSimpleAddress), 'TRUE')) == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCityRecId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets primary key value for Cities table based on natural key fields.
    /// </summary>
    /// <param name="_countryRegionId">
    /// Country code.
    /// </param>
    /// <param name="_stateId">
    /// State code.
    /// </param>
    /// <param name="_countyId">
    /// County code.
    /// </param>
    /// <param name="_cityName">
    /// City name.
    /// </param>
    /// <returns>
    /// Record Id of city.
    /// </returns>
    /// <remarks>
    /// City table has no natural key [country/state/county/city].
    /// Assumption that there are no two cities with same name for given combination of country/state/county was made for Russia.
    /// </remarks>
    private static LogisticsAddressCityRecId getCityRecId_RU(LogisticsAddressCountryRegionId  _countryRegionId,
                                                             LogisticsAddressStateId          _stateId,
                                                             LogisticsAddressCountyId         _countyId,
                                                             LogisticsAddressCityName         _cityName)
    {
        LogisticsAddressCity city;
        int64 result = 0;
        
        if (_cityName)
        {
            select firstOnly RecId from city
            where city.CountryRegionId == _countryRegionId
               && city.StateId == _stateId
               && city.CountyId == _countyId
               && city.Name == _cityName;
            
            result = city.RecId;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistrictRecId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets record id for districts based on natural key fields.
    /// </summary>
    /// <param name="_countryRegionId">
    /// Country code.
    /// </param>
    /// <param name="_stateId">
    /// State code.
    /// </param>
    /// <param name="_countyId">
    /// County code.
    /// </param>
    /// <param name="_cityRecId">
    /// Record id of city.
    /// </param>
    /// <param name="_districtName">
    /// District name.
    /// </param>
    /// <returns>
    /// Record id of district.
    /// </returns>
    private static LogisticsAddressDistrictRecId getDistrictRecId_RU(LogisticsAddressCountryRegionId  _countryRegionId,
                                                                     LogisticsAddressStateId          _stateId,
                                                                     LogisticsAddressCountyId         _countyId,
                                                                     LogisticsAddressCityRecId        _cityRecId,
                                                                     LogisticsAddressDistrictName     _districtName)
    {
        LogisticsAddressDistrict district;

        if (!_districtName)
        {
            return 0;
        }

        if (_cityRecId)
        {
            select RecId from district
                where district.City == _cityRecId
                   && district.Name == _districtName;
        }
        else
        {
            select RecId from district
                where district.CountryRegionId_RU == _countryRegionId
                   && district.StateId_RU == _stateId
                   && district.CountyId_RU == _countyId
                   && district.City == 0
                   && district.Name == _districtName;
        }

        return district.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>