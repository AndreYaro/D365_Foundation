<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCreateSpecificLabel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Check for the filters. Create and print the labels for item selected.
/// </summary>
class RetailCreateSpecificLabel extends RunBaseBatch implements BatchRetryable
{
    RetailInventItemLabel  rboInventItemLabel;

    RetailLabelTypeBase    labelType;
    ItemId              itemId;
    RetailStoreId          storeId;
    RetailVariantId        variantId;
    UnitOfMeasureSymbol UOMId;
    RetailLabelValidOnDate validOnDate;
    RetailQty              qty;
    RetailReportName       reportName;
    RetailDescription      text1;
    RetailDescription      text2;
    ItemBarCode            itemBarCode;
    RecordSortedList       recordSortedList;
    InventDimId            inventDimId;

    boolean             itemDim;

    DialogRunbase   dialog;

    DialogField     fieldItemId;
    DialogField     fieldStoreId;
    DialogField     fieldVariantId;
    DialogField     fieldUOMId;
    DialogField     fieldValidOnDate;
    DialogField     fieldQty;
    DialogField     fieldReportName;
    DialogField     fieldText1;
    DialogField     fieldText2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        boolean ret;

        ret = false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ClassDescription ret;

        ret = "@RET4689";

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the ranges selected in the print product or shelf labels form.
    /// </summary>
    /// <returns>
    /// true if the validation passes; otherwise false.
    /// </returns>
    /// <remarks>
    /// Checks for valid variant ID, store number and bar code for the item.
    /// </remarks>
    public boolean checkFilters()
    {
        boolean res;
        str errorMessage;

        setPrefix(strFmt("@SYS24300", itemId));

        [res, errorMessage] = this.validateLabel();

        if (!res)
        {
            checkFailed(errorMessage);
            checkFailed("@REX4161131");
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLabelSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Infolog for label creating successfully.
    /// </summary>
    /// <param name="_labelType">
    /// Label type.
    /// </param>
    protected void createLabelSuccess(RetailLabelTypeBase _labelType)
    {
        switch (_labelType)
        {
            case RetailLabelTypeBase::ItemLabel:
                info(strFmt("@REX4520247", "@RET4299"));
                break;
            case RetailLabelTypeBase::ShelfLabel:
                info(strFmt("@REX4520247", "@RET4298"));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a dialog with the filters like item ID, Store ID, Variant ID, UOM, qty, report name etc.
    /// </summary>
    /// <returns>
    /// An initialized instance of dialog class.
    /// </returns>
    Object dialog()
    {
        dialog = super();

        dialog.caption("@RET3861");

        dialog.addGroup("@RET3783");
        fieldItemId = dialog.addFieldValue(extendedtypestr(ItemId),itemId);
        fieldStoreId = dialog.addFieldValue(extendedtypestr(RetailStoreId),storeId);
        fieldVariantId = dialog.addFieldValue(extendedtypestr(RetailVariantId),variantId);
        fieldUOMId = dialog.addFieldValue(extendedtypestr(UnitOfMeasureSymbol),UOMId);
        fieldValidOnDate = dialog.addFieldValue(extendedtypestr(RetailLabelValidOnDate),validOnDate);
        fieldQty = dialog.addFieldValue(extendedtypestr(RetailQty),Qty);
        fieldReportName = dialog.addFieldValue(extendedtypestr(RetailReportName),reportName);
        fieldText1 = dialog.addFieldValue(extendedtypestr(RetailDescription),text1);
        fieldText2 = dialog.addFieldValue(extendedtypestr(RetailDescription),text2);
        fieldItemId.allowEdit(false);
        fieldStoreId.allowEdit(false);

        fieldVariantId.allowEdit(itemDim);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the dialog form to override control method at runtime.
    /// </summary>
    /// <param name="_dialog">
    /// Runtime dialog object.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        dialog.dialogForm().formRun().controlMethodOverload(true);
        dialog.dialogForm().formRun().controlMethodOverloadObject(this);
        dialog.formRun().controlMethodOverload(true);
        dialog.formRun().controlMethodOverloadObject(this);
        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Fld3_1_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is the overridden lookup method for the control variant field "fieldVariantId" at runtime.
    /// The fieldVariantId.name() is Fld3_1.
    /// Changes to fields or changes to the field order can have an effect on this method.
    /// </summary>
    void Fld3_1_lookup()
    {
        FormRun formRun = ClassFactory.formRunClass(new Args(formstr(RetailVariantLookup)));

        formRun.args().parm(itemId);
        formRun.args().caller(fieldItemId.control());//_formControl);
        formRun.init();

        //_formControl
        fieldItemId.control().performFormLookup(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Fld7_1_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the query on the <c>RetailInventItemLabelReportSetup</c> table with the range on <c>type</c> field.
    /// </summary>
    public void Fld7_1_lookup()
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(RetailInventItemLabelReportSetup), fieldReportName.control());
        query                   query = new query();

        sysTableLookup.addLookupfield(fieldNum(RetailInventItemLabelReportSetup, ReportName));

        query.addDataSource(tablenum(RetailInventItemLabelReportSetup));
        query.dataSourceTable(tableNum(RetailInventItemLabelReportSetup)).addRange(fieldNum(RetailInventItemLabelReportSetup, type)).value(queryValue(labelType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRecSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate data set to be printed.
    /// </summary>
    private void generateRecSortedList()
    {
        RetailInventItemLabel           rboInventItemLabelLocal;
        RetailInventItemLabel           retailInventItemLabel;

        if (recordSortedList.first(rboInventItemLabelLocal))
        {
            do
            {
                select forUpdate RecId, Qty, ItemId, InventDim from retailInventItemLabel
                    where retailInventItemLabel.RecId == rboInventItemLabelLocal.RecId;

                //Same product from different dimensions will be recognized as different products.
                //Only same product from same dimensions need to be merged.
                //so return to update the record in the <c>recordSortedList<c> instead of insert a new one.
                if (retailInventItemLabel.ItemId == rboInventItemLabel.ItemId &&
                    retailInventItemLabel.InventDim == rboInventItemLabel.InventDim &&
                    retailInventItemLabel.VariantId == rboInventItemLabel.VariantId &&
                    retailInventItemLabel.Text2 == rboInventItemLabel.Text2 &&
                    retailInventItemLabel.UnitID == rboInventItemLabel.UnitID &&
                    retailInventItemLabel.ValidOnDate == rboInventItemLabel.ValidOnDate &&
                    retailInventItemLabel.StoreId == rboInventItemLabel.StoreId)
                {
                    retailInventItemLabel.Qty += rboInventItemLabel.Qty;
                    retailInventItemLabel.update();
                    recordSortedList.ins(retailInventItemLabel,true);
                    return;
                }
            }
            while (recordSortedList.next(rboInventItemLabelLocal));
        }

        recordSortedList.ins(rboInventItemLabel,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the values from the filters selected from the dialog.
    /// </summary>
    /// <returns>
    /// A boolean value of the <c>RunBaseBatch</c> class <c>getFromDialog</c> method.
    /// </returns>
    boolean getFromDialog()
    {
        itemId = fieldItemId.value();
        storeId = fieldStoreId.value();
        variantId = fieldVariantId.value();
        UOMId = fieldUOMId.value();
        validOnDate = fieldValidOnDate.value();
        Qty = fieldQty.value();
        reportName = fieldReportName.value();
        text1 = fieldText1.value();
        text2 = fieldText2.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the variables based on the Retail parameters and the filters selected.
    /// </summary>
    /// <returns>
    /// A boolean value true if the variables are initialized properly, otherwise false.
    /// </returns>
    public boolean init()
    {
        boolean ret;

        ret = super();

        itemDim = EcoResProductDimensionGroup::find(InventTable::itemProductDimensionGroup(itemId)).hasProductDimensionsActive();

        itemBarCode = InventItemBarcode::findRetailUseForPrinting(itemId,variantId,UOMId,true).itemBarCode;
        if (!itemBarCode)
            itemBarCode  = InventItemBarcode::findRetailUseForPrinting(itemId,variantId,UOMId,false).itemBarCode;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes the <c>inventTable</c> table with the caller record.
    /// </summary>
    /// <param name="_args">
    /// The caller arguments.
    /// </param>
    /// <remarks>
    /// Initialize the variables labeltype and item based on the caller record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If the caller dataset is not InventTable.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If there is no caller record for this class.
    /// </exception>
    void initFromArgs(Args _args)
    {
        InventTable inventTable;

        if (_args && _args.dataset())
        {
            if (_args.dataset() == tablenum(InventTable))
            {
                inventTable = _args.record();
                labelType   = _args.parmEnum();
                itemId      = inventTable.ItemId;
            }
            else
                throw error ("@RET4123");
        }
        else
        {
            throw error ("@RET4123");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpAddProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the variables with the record <c>TmpRetailLabelsToPrint</c>.
    /// </summary>
    /// <param name="_tmpAddProducts">
    /// The record <c>TmpRetailLabelsToPrint</c> used for initialize the variables.
    /// </param>
    public void initFromTmpAddProducts(TmpRetailLabelsToPrint _tmpAddProducts)
    {
        itemId      =   _tmpAddProducts.ItemId;
        text1       =   _tmpAddProducts.Text1;
        text2       =   _tmpAddProducts.Text2;
        UOMId       =   _tmpAddProducts.UnitId;
        qty         =   _tmpAddProducts.Quantity;
        inventDimId =   _tmpAddProducts.InventDim;
        validOnDate =   _tmpAddProducts.ValidDate;
        variantId   =   _tmpAddProducts.VariantId;
        storeId     =   _tmpAddProducts.StoreId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creating label for items selected.
    /// </summary>
    /// <remarks>
    /// Inserts the record into the <c>RetailInventItemLabel</c> table.
    /// </remarks>
    void makeLabel()
    {
        rboInventItemLabel.clear();

        this.initRboInventItemLabel();

        rboInventItemLabel.insert();

        this.generateRecSortedList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRboInventItemLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializing <c>RetailInventItemLabel</c> record rboInventItemLabel.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If the item barcode is null.
    /// </exception>
    protected void initRboInventItemLabel()
    {
        InventDim                       inventDimLocal;

        rboInventItemLabel.LabelType    = labelType;
        rboInventItemLabel.StoreId      = storeId;
        rboInventItemLabel.VariantId    = variantId;
        rboInventItemLabel.UnitID       = UOMId;
        rboInventItemLabel.ValidOnDate  = validOnDate;
        rboInventItemLabel.ItemId       = itemId;
        rboInventItemLabel.Qty          = qty;
        rboInventItemLabel.ReportName   = reportName;
        rboInventItemLabel.Text1        = text1;
        rboInventItemLabel.Text2        = text2;
        rboInventItemLabel.InventDim    = inventDimId;
        rboInventItemLabel.Printed      = false;

        inventDimLocal.data(InventDim::find(inventDimId));
        inventDimLocal.clearNotSelectedDim(EcoResProductDimGroupSetup::inventDimParmProductDimensions());
        inventDimLocal = InventDim::findDim(inventDimLocal);

        rboInventItemLabel.Price = RetailPricingEngine::getRetailPriceByItem(storeId, itemId, UOMId, inventDimLocal.inventDimId, DateTimeUtil::newDateTime(validOnDate, DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone())), variantId);
        rboInventItemLabel.CompLabelPrice = RetailPriceUtilities::calcComparisonPrice(itemId, rboInventItemLabel.Price);

        rboInventItemLabel.ItemBarCode  = itemBarCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    identifiername name()
    {
        identifiername ret;

        ret = classstr(RetailCreateSpecificLabel);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a record sorted list.
    /// </summary>
    public void newRecordList()
    {
        recordSortedList = new RecordSortedList(tableNum(RetailInventItemLabel));
        recordSortedList.sortOrder(fieldNum(RetailInventItemLabel, ItemId),
                                   fieldNum(RetailInventItemLabel, InventDim),
                                   fieldNum(RetailInventItemLabel, Text2),
                                   fieldNum(RetailInventItemLabel, UnitID),
                                   fieldNum(RetailInventItemLabel, ValidOnDate),
                                   fieldNum(RetailInventItemLabel, storeId),
                                   fieldNum(RetailInventItemLabel, variantId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>otherUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the unit ID value of the specified item.
    /// </summary>
    /// <returns>
    /// A string value that holds the unitID value.
    /// </returns>
    public UnitOfMeasureSymbol otherUnit()
    {
        return InventTableModule::find(itemId,ModuleInventPurchSales::Invent).unitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabelType</Name>
				<Source><![CDATA[
    public RetailLabelTypeBase parmLabelType(RetailLabelTypeBase _labelType = labelType)
    {
        labelType = _labelType;
        return labelType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportName</Name>
				<Source><![CDATA[
    public RetailReportName parmReportName(RetailReportName _reportName = reportName)
    {
        reportName = _reportName;
        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the Menu function to print the newly created labels in the report.
    /// </summary>
    void printLabel()
    {
        Args args = new Args();
        MenuFunction    CreateReportForLabelsMen = new MenuFunction(strfmt("%1",ReportName), MenuItemType::Output);

        args.record(rboInventItemLabel);
        args.object(recordSortedList);
        args.parmEnumType(enumnum(boolean));
        args.parmEnum(true);

        CreateReportForLabelsMen.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the methods to validate and create the label.
    /// </summary>
    /// <param name="_supress_dialog">
    /// Boolean value, which shows suppress dialog state.
    /// </param>
    void run(boolean _supress_dialog = false)
    {
        RetailLabelUtils rboLabelUtils = new RetailLabelUtils();

        if (RetailLabelUtils::findLabelSetup(labelType,itemId,storeId))
        {
            ttsbegin;
            this.checkFilters();
            this.newRecordList();

            this.makeLabel();
            ttscommit;
            this.printLabel();
        }
        else
        {
            if (!_supress_dialog)
            {
                box::info("@RET4124");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the methods to validate and create the label.
    /// </summary>
    /// <param name="_formDs">
    /// Caller form datasource
    /// </param>
    /// <param name="_reportName">
    /// Report name
    /// </param>
    /// <param name="_labelType">
    /// Label type
    /// </param>
    public void runForPrint(FormDataSource _formDs, str _reportName, RetailLabelTypeBase  _labelType)
    {
        TmpRetailLabelsToPrint      tmpAddProducts;
        Object                      fDs = _formDs;
        boolean                     hasRecForPrint;
        Set                         recIdSet = new Set(typeName2Type(extendedTypeStr(recId)));

        this.parmReportName(_reportName);
        this.parmLabelType(_labelType);
        this.newRecordList();

        setPrefix("@SYS74342");

        for (tmpAddProducts = _formDs.getFirst(true)?_formDs.getFirst(true):_formDs.cursor();
        tmpAddProducts;
        tmpAddProducts = _formDs.getNext())
        {
            this.initFromTmpAddProducts(tmpAddProducts);
            this.init();
            if (this.checkFilters())
            {
                hasRecForPrint = true;
                ttsbegin;
                this.makeLabel();
                ttscommit;
                recIdSet.add(tmpAddProducts.RecId);
                this.createLabelSuccess(labelType);
            }
        }

        if (hasRecForPrint)
        {
            fDs.removeLines(recIdSet);
            this.printLabel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns the ID of the selected item.
    /// </summary>
    /// <returns>
    /// Selected item ID.
    /// </returns>
    public itemId selectedItemId()
    {
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the field <c>Print</c> in the table <c>rboInventItemLabel</c> to true after printing it in the report.
    /// </summary>
    void updateRecord()
    {
        rboInventItemLabel.Printed = true;
        rboInventItemLabel.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a recordSortedList which is used to hold <c>inventTransferParmTable</c> records.
    /// </summary>
    /// <returns>
    /// Returns a new recordSortedList object which is used to hold <c>inventTransferParmTable</c> records.
    /// </returns>
    /// <remarks>
    /// Sort the record list by RecId of <c>InventTransferParmTable</c>table.
    /// </remarks>
    public static RecordSortedList initRecordSortedList()
    {
        RecordSortedList    recordSortedList;
        recordSortedList = new RecordSortedList(tableNum(InventTransferParmTable));
        recordSortedList.sortOrder(fieldNum(InventTransferParmTable,RecId));
        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The main method which initializes the call for the other methods.
    /// </summary>
    /// <param name="args">
    /// Retail catalog scheduler job record.
    /// </param>
    /// <param name="_supress_dialog">
    /// Boolean value, which shows suppress dialog state.
    /// </param>
    public static void main(args args, boolean _supress_dialog = false)
    {
        RetailCreateSpecificLabel rboCreateSpecificLabel = new RetailCreateSpecificLabel();

        rboCreateSpecificLabel.initFromArgs(args);
        rboCreateSpecificLabel.init();

        if (!_supress_dialog)
        {
            if (rboCreateSpecificLabel.prompt())
            {
                rboCreateSpecificLabel.runOperation();
            }
        }
        else
        {
            rboCreateSpecificLabel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrintLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Print labels for transfer order during ship or receive, including product labels and shelf labels.
    /// </summary>
    /// <param name="_args">
    /// An args from calling form.
    /// </param>
    /// <param name="_transferStatus">
    /// InventTransfer order status
    /// </param>
    /// <param name="_parmId">
    /// The parm Id.
    /// </param>
    public static void PrintLabels(Args _args, InventTransferStatus _transferStatus, ParmId _parmId)
    {
        FormDataSource              formDataSource;
        InventTransferTable         transferTable;
        InventTransferParmTable     inventTransferParmTableLocal;
        RecordSortedList            recListForProductLabel;
        RecordSortedList            recListForShelfLabel;
        WMSJournalTable             wmsJournalTable;
        Common                      common;

        Args                        args;
        boolean   retailEnable = RetailParameters::isRetailEnabledAndInUse();

        // Only allow to print labels when retail configuraion key is enabled
        // Only allow to print labels when the following argument data sources are _args:
        // InventTransferTable - sent from transfer order form
        // WMSJournalTable - sent from arrival journal form
        if (retailEnable && _args 
            && (_args.dataset() == tablenum(InventTransferTable) || _args.dataset() == tablenum(WMSJournalTable))
            && FormDataUtil::getFormDataSource(_args.record()))
        {
            args = new Args();
            args.caller(_args.caller());

            recListForProductLabel  = RetailCreateSpecificLabel::initRecordSortedList();
            recListForShelfLabel    = RetailCreateSpecificLabel::initRecordSortedList();

            formDataSource = FormDataUtil::getFormDataSource(_args.record());
            formDataSource.reread();

            // Loop all transfer orders during one posting ship or receive
            for (common = formDataSource.getFirst(true)? formDataSource.getFirst(true): formDataSource.cursor();
            common;
            common = formDataSource.getNext())
            {
                if (common is InventTransferTable)
                {
                    transferTable = common;
                }
                else if (common is WMSJournalTable)
                {
                    wmsJournalTable = common;

                    if (wmsJournalTable.inventTransRefId && wmsJournalTable.inventTransType == InventTransType::TransferOrderReceive)
                    {
                        transferTable = InventTransferTable::find(wmsJournalTable.inventTransRefId);
                    }
                }
                else
                {
                    continue;
                }

                // If posting is finished or posting partial transfer order is finished,
                // Print labels for products which have marked to be printed.
                if (transferTable.TransferStatus == _transferStatus ||
                transferTable.isPartialTransfer(_transferStatus))
                {
                    select firstOnly PrintProductLabel, PrintshelfLabel, ParmId, TransferId from inventTransferParmTableLocal
                    order by inventTransferParmTableLocal.ParmId desc
                    where inventTransferParmTableLocal.TransferId == transferTable.TransferId
                        && inventTransferParmTableLocal.ParmId     == _ParmId
                        && (inventTransferParmTableLocal.PrintProductLabel
                        ||  inventTransferParmTableLocal.PrintShelfLabel);

                    // Get product labels which are needed to be printed.
                    if (inventTransferParmTableLocal.PrintProductLabel)
                    {
                        recListForProductLabel.ins(inventTransferParmTableLocal);
                    }

                    // Get shelf labels which are needed to be printed.
                    if (inventTransferParmTableLocal.PrintShelfLabel)
                    {
                        recListForShelfLabel.ins(inventTransferParmTableLocal);
                    }
                }
            }

            args.record(inventTransferParmTableLocal);

            // Create product and shelf labels for available products needed to be printed
            RetailCreateSpecificLabel::runPrint(args, recListForProductLabel, RetailLabelTypeBase::ItemLabel);
            RetailCreateSpecificLabel::runPrint(args, recListForShelfLabel, RetailLabelTypeBase::ShelfLabel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run display menu item RetailCreateMultipleItemsLabel/RetailCreateMultipleShelfsLabel.
    /// </summary>
    /// <param name="_args">
    /// Caller args from caller form.
    /// </param>
    /// <param name="_recordSortedList">
    /// The <c>RecordSortedList</c> object that contains the records to be passed to the form.
    /// </param>
    /// <param name="_labelType">
    /// The label type.
    /// </param>
    public static void runPrint(Args _args,
                                RecordSortedList _recordSortedList,
                                RetailLabelTypeBase _labelType)
    {
        Args productLabel = new Args();

        if (!_args)
        {
            throw error("@SYS30498");
        }

        if (_args.caller() && _recordSortedList.len() >= 1)
        {
            productLabel.caller(_args.caller());
            productLabel.parmObject(_recordSortedList);
            productLabel.record(_args.record());

            RetailCreateSpecificLabel::runPrintForRetailLabelTypeBase(_labelType, productLabel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintForRetailLabelTypeBase</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Run menu functions based on <c>RetailLabelTypeBase</c> enum.
    /// </summary>
    /// <param name = "_labelType">
    ///     The label type.
    /// </param>
    /// <param name = "_productLabel">
    ///     Product label as <c>Args</c> type.
    /// </param>
    protected static void runPrintForRetailLabelTypeBase(RetailLabelTypeBase _labelType, Args _productLabel)
    {
        switch (_labelType)
        {
            case RetailLabelTypeBase::ItemLabel:
                new MenuFunction(menuitemDisplayStr(RetailCreateMultipleItemsLabel), MenuItemType::Display).run(_productLabel);
                break;
            case RetailLabelTypeBase::ShelfLabel:
                new MenuFunction(menuitemDisplayStr(RetailCreateMultipleShelfsLabel), MenuItemType::Display).run(_productLabel);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItemToPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds item for printing.
    /// </summary>
    /// <param name="_storeId">
    /// Store Number.
    /// </param>
    /// <param name="_labelSetup">
    /// Reytail invent item label setup.
    /// </param>
    /// <param name="_variantId">
    /// Item variant.
    /// </param>
    /// <param name="_qty">
    /// Item quantity to print.
    /// </param>
    /// <param name="_validOnDate">
    /// Report date.
    /// </param>
    /// <returns>
    ///  Container with operation result and error message.
    /// </returns>
    public container addItemToPrint(RetailStoreId _storeId, RetailInventItemLabelSetup _labelSetup, RetailVariantId _variantId, RetailQty _qty, date _validOnDate)
    {
        RetailInventItemLabelSetup retailInventItemLabelSetup;
        boolean result;
        str     errorMessage;
        EcoResProductName productName;

        storeId     = _storeId;
        itemId      = _labelSetup.ItemId;
        variantId   = _variantId;
        qty         = _qty;
        validOnDate = _validOnDate;
        Text1       = retailInventItemLabelSetup.Text1;
        Text2       = retailInventItemLabelSetup.Text2;
        UOMId       = InventTableModule::find(_labelSetup.ItemId,ModuleInventPurchSales::Sales).UnitId;

        //if item is variant
        if (_variantId)
        {
            productName   = InventDimCombination::findVariantId(_variantId).defaultProductName();
            if (productName)
            {
                Text1 = productName;
            }
        }

        this.init();

        [result, errorMessage] = this.validateLabel();
        if (result)
        {
            ttsBegin;
            this.makeLabel();
            ttsCommit;
        }

        return [result, errorMessage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSpecificLabelsToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints specific labels to file.
    /// </summary>
    /// <param name="fileFormat">
    /// Output file format.
    /// </param>
    /// <param name="fileName">
    /// File name.
    /// </param>
    /// <returns>
    ///  container with operation result and error message.
    /// </returns>
    /// <remarks>
    /// Items to print should be added by calling addItemToPrint for each item before this method call.
    /// </remarks>
    public container printSpecificLabelsToFile(SRSReportFileFormat fileFormat, str fileName)
    {
        Args args = new Args();
        SrsReportDataContract dataContract;
        SRSPrintDestinationSettings printSettings;
        RetailLabelController controller = new retailLabelController();
        SRSReportExecutionInfo execInfo;
        str ssrsReportName;
        boolean result;
        str errorMessage;

        args.record(rboInventItemLabel);
        args.object(recordSortedList);
        args.parmEnumType(enumnum(boolean));
        args.parmEnum(true);

        controller.parmArgs(args);
        ssrsReportName = RetailCreateSpecificLabel::getSSRSReportName(this.parmReportName());
        controller.parmReportName(ssrsReportName);

        dataContract = controller.parmReportContract();
        printSettings = dataContract.parmPrintSettings();
        printSettings.printMediumType(SRSPrintMediumType::File);
        printSettings.fileFormat(fileFormat);
        printSettings.parmFileName(fileName);

        controller.startOperation();

        execInfo = dataContract.parmReportExecutionInfo();
        result = execInfo.parmIsSuccessful();
        if (!result)
        {
            errorMessage = execInfo.parmErrorMessage();
        }
        return [result, errorMessage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runLabelChangeJournalReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints label report for label change journal.
    /// </summary>
    /// <param name="_journalNum">
    /// Label change journal number.
    /// </param>
    /// <param name="_reprint">
    /// Defines if report is printed first time or existing report should be reprinted.
    /// </param>
    protected void runLabelChangeJournalReport(RetailLabelChangeJournalId _journalNum, boolean  _reprint)
    {
        while select rboInventItemLabel
            where   rboInventItemLabel.ReportName             == reportName
                && rboInventItemLabel.LabelType               == labelType
                && rboInventItemLabel.LabelChangeJournalNum   == _journalNum
                && rboInventItemLabel.Printed                 == _reprint
                && rboInventItemLabel.Qty                     >  0

        {
            recordSortedList.ins(rboInventItemLabel);
        }

        if (recordSortedList.len() > 0)
        {
            this.printLabel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLabel</Name>
				<Source><![CDATA[
    private container validateLabel()
    {
        if (itemDim && InventDimCombination::findVariantId(variantId).ItemId != itemId)
        {
            return [false, "@Retail:RetailLabelPrintingProductMaster"];
        }

        if (!storeId)
        {
            return [false, strFmt("@RET260015", fieldStr(TmpRetailLabelsToPrint, storeId)) ];
        }

        if (!itemBarCode)
        {
            return [false, "@RET4128"];
        }

        return [true, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSSRSReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retreives SSRS report name.
    /// </summary>
    /// <param name="_reportMenuName">
    /// SSRS report menu name.
    /// </param>
    /// <returns>
    /// SSRS report name if it is found; fals otherwise.
    /// SSRS name will be in format 'ReportName.ReportDesign'
    /// </returns>
    public static str getSSRSReportName(str _reportMenuName)
    {
        MenuFunction menuFunc;
        str report;
        str reportDesign;
        str menuReportName;

        menuFunc = new MenuFunction(_reportMenuName, MenuItemType::Output);
        report = menuFunc.linkedPermissionObject();
        reportDesign = menuFunc.linkedPermissionObjectChild();
        //If menu item contains report name and design
        if (report && reportDesign)
        {
            menuReportName = strFmt('%1.%2', report, reportDesign);
        }

        return menuReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabelChangeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints labels for change journal.
    /// </summary>
    /// <param name="_labelType">
    /// Label type (product or shelf).
    /// </param>
    /// <param name="_reportName">
    /// Report name.
    /// </param>
    /// <param name="_journalNum">
    /// Change journal number.
    /// </param>
    /// <param name="_reprint">
    /// Defines if report is printed first time or existing report should be reprinted.
    /// </param>
    public static void printLabelChangeJournal(RetailLabelType _labelType, RetailReportNameEx2 _reportName, RetailLabelChangeJournalId _journalNum, boolean _reprint)
    {
        RetailCreateSpecificLabel reportLabel;

        reportLabel = new RetailCreateSpecificLabel();
        reportLabel.parmReportName(_reportName);
        reportLabel.parmLabelType(_labelType);
        reportLabel.newRecordList();

        reportLabel.runLabelChangeJournalReport(_journalNum, _reprint);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>