<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SimulationJournalReOpen_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class reopens simulation journal.
/// </summary>
public class SimulationJournalReOpen_IT
    extends RunBaseBatch 
    implements SysPackable, BatchRetryable
{
    public LedgerJournalId ledgerJournalId;
    public boolean isPostingLedger;

    const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the caption of the batch.
    /// </summary>
    /// <returns>
    ///    The caption of the batch.
    /// </returns>
    /// <remarks>
    ///    The caption is also used as the title of the dialog.
    /// </remarks>
    public ClassDescription caption()
    {
        return "@ExtendedItallianLocalization:ReopenSimulationJournal";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog;
        DialogField dlgLedgerJournalId;


        dialog = super();

        dlgLedgerJournalId = dialog.addField(extendedtypestr(LedgerJournalId));
        dlgLedgerJournalId.value(ledgerJournalId);
        dlgLedgerJournalId.allowEdit(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new (LedgerJournalId _ledgerJournalId = '')
    {
        super();

        ledgerJournalId = _ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, ledgerJournalId, isPostingLedger];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPostingLedger</Name>
				<Source><![CDATA[
    public Boolean parmIsPostingLedger(Boolean _isPostingLedger = isPostingLedger)
    {
        isPostingLedger = _isPostingLedger;

        return isPostingLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmLedgerJournalId(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reOpenSimJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reopen simulation journal.
    /// </summary>
    protected boolean reOpenSimJournal()
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerEntryJournalSim_IT ledgerEntryJournalSim;
        GeneralJournalEntrySim_IT generalJournalEntrySim;
        
        GeneralJournalAccountEntrySim_IT generalJournalAccountEntrySim;
        RecId ledger = Ledger::current();

        DimensionFocusUnprocessedTransactionsSim_IT dimFocusUnprocessedTransactionsSim;
        boolean ret;


        ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId, true);

        if (ledgerJournalTable.SimulationPosted_IT
            && ledgerJournalTable.JournalType == LedgerJournalType::Daily
            && ledgerJournalTable.IsSimulation_IT()
            && (!ledgerJournalTable.Posted || isPostingLedger))
        {
            //Reverse simulation transactions
            while select forUpdate generalJournalAccountEntrySim
                exists join generalJournalEntrySim
                exists join ledgerEntryJournalSim
                where generalJournalAccountEntrySim.GeneralJournalEntry == generalJournalEntrySim.RecId
                    && generalJournalEntrySim.LedgerEntryJournal == ledgerEntryJournalSim.RecId
                    && ledgerEntryJournalSim.JournalNumber == ledgerJournalId
                    && generalJournalEntrySim.Ledger == ledger
            {
                generalJournalAccountEntrySim.TransactionCurrencyAmount = -generalJournalAccountEntrySim.TransactionCurrencyAmount;
                generalJournalAccountEntrySim.ReportingCurrencyAmount = -generalJournalAccountEntrySim.ReportingCurrencyAmount;
                generalJournalAccountEntrySim.AccountingCurrencyAmount = -generalJournalAccountEntrySim.AccountingCurrencyAmount;
                generalJournalAccountEntrySim.update();
            }

            //Make balances unprocessed
            while select GeneralJournalEntry from generalJournalAccountEntrySim
                group by GeneralJournalEntry
                exists join generalJournalEntrySim
                exists join ledgerEntryJournalSim
                where generalJournalAccountEntrySim.GeneralJournalEntry == generalJournalEntrySim.RecId
                    && generalJournalEntrySim.LedgerEntryJournal == ledgerEntryJournalSim.RecId
                    && ledgerEntryJournalSim.JournalNumber == ledgerJournalId
                    && generalJournalEntrySim.Ledger == ledger
            {
                this.processGeneralJournalAccountEntrySim(generalJournalAccountEntrySim);
            }

            // Update balances
            // With the General ledger balance feature enabled, the balance updates will occur with process automation
            if (!FeatureStateProvider::isFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                DimensionFocusUpdateBalanceSim_IT::processAutomaticUpdates();
            }

            //GeneralJournalAccountEntry are deleted by the delete action in generalJournalEntry
            SubledgerVoucherGeneralJournalEntrySim_IT subledgerVoucherGeneralJournalEntrySim;

            //SubLedgerVoucherGeneralJournalEntrySim
            delete_from subledgerVoucherGeneralJournalEntrySim
                exists join generalJournalEntrySim
                exists join ledgerEntryJournalSim
                where subledgerVoucherGeneralJournalEntrySim.GeneralJournalEntry == generalJournalEntrySim.RecId
                    && ledgerEntryJournalSim.RecId == generalJournalEntrySim.LedgerEntryJournal
                    && ledgerEntryJournalSim.JournalNumber == ledgerJournalId
                    && generalJournalEntrySim.Ledger == ledger;

            LedgerEntryJournalSim_IT ledgerEntryJournalSim4Upd;
            //LedgerEntryJournalSim (select)
            select firstOnly forUpdate ledgerEntryJournalSim4Upd
                exists join generalJournalEntrySim
                where generalJournalEntrySim.LedgerEntryJournal == ledgerEntryJournalSim4Upd.RecId
                    && ledgerEntryJournalSim4Upd.JournalNumber == ledgerJournalId
                    && generalJournalEntrySim.Ledger == ledger;

            // GeneralJournalEntrySim
            // Do not delete with the General ledger balance feature enabled. The GeneralJournalEntrySim_IT record is 
            // required to process balances with process automation.
            if (!FeatureStateProvider::isFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
            {
                delete_from generalJournalEntrySim
                    exists join ledgerEntryJournalSim
                    where ledgerEntryJournalSim.RecId == generalJournalEntrySim.LedgerEntryJournal
                        && ledgerEntryJournalSim.JournalNumber == ledgerJournalId
                        && generalJournalEntrySim.Ledger == ledger;
            }

            //LedgerEntryJournalSim (delete)
            ledgerEntryJournalSim4Upd.delete();

            if (!isPostingLedger)
            {
                ttsbegin;
                ledgerJournalTable.SimulationPosted_IT = NoYes::No;
                ledgerJournalTable.update();
                ttscommit;
            }

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGeneralJournalAccountEntrySim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process <c>GeneralJournalAccountEntrySim</c> record.
    /// </summary>
    /// <param name = "_generalJournalAccountEntrySim">The <c>GeneralJournalAccountEntrySim</c> record.</param>
    private void processGeneralJournalAccountEntrySim(GeneralJournalAccountEntrySim_IT _generalJournalAccountEntrySim)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            GeneralLedgerBalanceUnprocessedTransactionsSim_IT unprocessedTransactions;
            unprocessedTransactions.GeneralJournalEntry = _generalJournalAccountEntrySim.GeneralJournalEntry;
            unprocessedTransactions.State = GeneralLedgerBalanceCalculationState::Pending;
            unprocessedTransactions.IsReopenSimulation = NoYes::Yes;
            unprocessedTransactions.insert();
        }
        else
        {
            DimensionHierarchy dimHierarchy;
            DimensionFocusUnprocessedTransactionsSim_IT dimFocusUnprocessedTransactionsSim, newUnprocessedTrans;

            RecordInsertList unprocessedTransList = new RecordInsertList(tableNum(DimensionFocusUnprocessedTransactionsSim_IT));

            while select RecId from dimHierarchy
                    group by dimHierarchy.RecId
                where dimHierarchy.StructureType == DimensionHierarchyType::Focus
                    && (dimHierarchy.FocusState == DimensionFocusBalanceInitializationState::InProcess
                    || dimHierarchy.FocusState == DimensionFocusBalanceInitializationState::Initialized)
            {
                newUnprocessedTrans.data(dimFocusUnprocessedTransactionsSim);
                newUnprocessedTrans.GeneralJournalEntry = _generalJournalAccountEntrySim.GeneralJournalEntry;
                newUnprocessedTrans.FocusDimensionHierarchy = dimHierarchy.RecId;
                newUnprocessedTrans.State = DimensionFocusBalanceCalculationState::Pending;
                unprocessedTransList.add(newUnprocessedTrans);
            }

            unprocessedTransList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        super();

        SimulationJournalReOpen_IT::runReOpen(this.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReOpenTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reopens simulation journals.
    /// </summary>
    public void runReOpenTask()
    {

        const int RetryNum = 5;

        try
        {
            ttsBegin;

            this.progressInit(this.caption(), 0, #AviFindFile);

            if (this.reOpenSimJournal())
            {
                info (strFmt("@ExtendedItallianLocalization:SimulationJournalReopened", ledgerJournalId));
            }

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean success;
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, ledgerJournalId, isPostingLedger] = _packedClass;
                success = true;
                break;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SimulationJournalReOpen_IT construct(ledgerJournalId _ledgerJournalId = '')
    {
        return new SimulationJournalReOpen_IT(_ledgerJournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SimulationJournalReOpen_IT simulationJournalReOpen = SimulationJournalReOpen_IT::construct();

        switch (_args.dataset())
        {
            case tableNum(LedgerJournalTable):
                LedgerJournalTable ledgerJournalTable = _args.record() as LedgerJournalTable;
                simulationJournalReOpen.parmLedgerJournalId(ledgerJournalTable.JournalNum);
                break;

            case tableNum(LedgerJournalTrans):
                LedgerJournalTrans ledgerJournalTrans = _args.record() as LedgerJournalTrans;
                simulationJournalReOpen.parmLedgerJournalId(ledgerJournalTrans.JournalNum);
                break;
        }

        if (simulationJournalReOpen.prompt())
        {
            simulationJournalReOpen.runOperation();
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00051, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReOpen</Name>
				<Source><![CDATA[
    private static void runReOpen(container _packedClass)
    {
        SimulationJournalReOpen_IT simulationJournalReOpen = SimulationJournalReOpen_IT::construct();
        simulationJournalReOpen.unpack(_packedClass);
        simulationJournalReOpen.runReOpenTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>