<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCreateProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdJournalCreateProd extends ProdJournalCreate
{
    InventDimId                 inventDimId;
    ProdReportedGood            qtyGood;
    ProdReportedError           qtyError;
    PdsCWBatchGood              cwQtyGood;
    PdsCWBatchErr               cwQtyError;
    ProdErrorCause              errorCause;
    boolean                     reversed;
    NoYes                       acceptError;

    ParmId                      parmId;
    boolean                     allQty;

    //<GEERU>
    ProdReleaseRejectKindId_RU  releaseKindId;
    //</GEERU>

    // <GEERU>
    #DEFINE.CurrentVersion(3)
    // </GEERU>

    #LOCALMACRO.CurrentList
        inventDimId,
        qtyGood,
        qtyError,
        cwQtyGood,
        cwQtyError,
        errorCause,
        reversed,
        acceptError
        //GEERU
        , releaseKindId
        //<GEERU>
    #ENDMACRO

    PDSBaseValue pdsBaseValue;

    #Define.PDSCurrentVersion(1)
    #LOCALMACRO.PDSCurrentList
        pdsBaseValue
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    protected void createLines()
    {
        ProdJournalProd prodJournalProd;

        setprefix("@SYS28546");

        this.initProdJournalTableData(ProdJournalType::ReportFinished);

        prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalProd, prodJournalTableData);
        if (prodJournalTable.NumOfLines)
        {
            prodJournalTransData.parmLastLineNum(ProdJournalProd::lastLineNum(journalId));
        }

        ProdTable       prodTable   = ProdTable::find(prodId);
        InventTable     inventTable = prodTable.inventTable();
        if ((qtyGood || qtyError || endUpdate)
            && inventTable.PmfProductType != PmfProductType::MainItem
            && this.canCreateProdJournalTransData(inventTable.ItemId, cwQtyGood, endUpdate))
        {
            if (FeatureStateProvider::isFeatureEnabled(ProdMultiLineReportAsFinishSerialNumFeature::instance()) & inventTable.isItemSerialNumberActivated() && JmgSerialNumberSpecification::existsByParmIdItemIdProdId(parmId, inventTable.ItemId, prodId))
            {
                this.createMultiLineSerialNumberReportFinishLines(prodJournalProd, inventTable, prodTable);
            }
            else
            {
                this.createProdJournalTransData(prodJournalProd);
            }
        }

        if (inventTable.isFormulaAllowed())
        {
            this.pmfCreateCoByLines();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateProdJournalTransData</Name>
				<Source><![CDATA[
    private boolean canCreateProdJournalTransData(ItemId _itemId, PdsCWBatchGood _cwQtyGood, NoYes _endUpdate)
    {
        return (!WHSInventEnabled::exist(_itemId)
                || !PdsGlobal::pdsIsCWItem(_itemId)
                || _endUpdate
                || _cwQtyGood);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdJournalTransData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the product journal line.
    /// </summary>
    /// <param name = "_prodJournalProd">The <c>ProdJournalProd</c> being created.</param>
    protected void createProdJournalTransData(ProdJournalProd _prodJournalProd)
    {
        if (BOMParameters::find().EnableTrackedComponents)
        {
            this.createReportAsFinishedLineFromProductLotAssociation(_prodJournalProd);
        }
        else
        {
            prodJournalTableData.initJournalId();
            this.initTransFromProdTable(_prodJournalProd, ProdTable::find(prodId));
            prodJournalTransData.create();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportAsFinishedLineFromProductLotAssociation</Name>
				<Source><![CDATA[
    internal boolean createReportAsFinishedLineFromProductLotAssociation(ProdJournalProd _prodJournalProd)
    {
        prodJournalTableData.initJournalId();

        ProdTable                               productionOrder = ProdTable::find(prodId);
        ProdAsBuiltBOMProductLotAssociation     productLotAssociation;
        InventDim                               inventDim = InventDim::find(inventDimId);       

        boolean associationsExist = false;

        while select productLotAssociation
            where productLotAssociation.ReferenceId   == productionOrder.ProdId
               && productLotAssociation.InventTransId == productionOrder.InventTransId
               && productLotAssociation.IsActive
               && !productLotAssociation.IsCompleted
               && (!inventDim.InventBatchId  || productLotAssociation.BatchNumberId  == inventDim.InventBatchId)
               && (!inventDim.InventSerialId || productLotAssociation.SerialNumberId == inventDim.InventSerialId)
        {
            _prodJournalProd.clear();
            _prodJournalProd.initValue();

            _prodJournalProd.initFromProdTable(productionOrder);
            prodJournalTransData.initFromJournalTable();

            InventDim inventDimLocal;

            if (ProdAsBuiltBOMResolveRAFLocationLPFlight::instance().isEnabled())
            {
                inventDimLocal.data(inventDim);
                inventDimLocal.InventBatchId  = productLotAssociation.BatchNumberId;
                inventDimLocal.InventSerialId = productLotAssociation.SerialNumberId;
            }
            else
            {
                inventDimLocal = InventDim::find(productLotAssociation.InventDimId);
                inventDimLocal.wMSLocationId = productionOrder.defaultOutputLocation(productionOrder.ItemId, transDate, '', inventDimLocal);
            }
            inventDimLocal = inventDim::findOrCreate(inventDimLocal);

            _prodJournalProd.InventDimId      = inventDimLocal.InventDimId;
            _prodJournalProd.QtyGood          = productLotAssociation.QtyGood;
            _prodJournalProd.QtyError         = productLotAssociation.QtyError;
            _prodJournalProd.ErrorCause       = errorCause;
            _prodJournalProd.TransDate        = transDate;

            if (countryRegion_RU)
            {
                _prodJournalProd.ReleaseKindId_RU  = releaseKindId;
                _prodJournalProd.StornoPhysical_RU = stornoPhysical;
            }

            _prodJournalProd.pdsBaseValue     = pdsBaseValue;

            prodJournalTransData.create();

            productLotAssociation.updateFromReportFinishedLine(_prodJournalProd);
            associationsExist = true;
        }

        if (!associationsExist)
        {
            this.initTransFromProdTable(_prodJournalProd, productionOrder);
            prodJournalTransData.create();
        }

        return associationsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdJournalTableData</Name>
				<Source><![CDATA[
    public void initProdJournalTableData(ProdJournalType _journalType)
    {
        super(_journalType);

        if (!journalId)
        {
            prodJournalTable.AcceptError = acceptError;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromProdTable</Name>
				<Source><![CDATA[
    protected void initTransFromProdTable(
        ProdJournalProd     _prodJournalProd,
        ProdTable           _prodTable
        )
    {
        _prodJournalProd.clear();
        _prodJournalProd.initValue();

        _prodJournalProd.initFromProdTable(_prodTable);
        prodJournalTransData.initFromJournalTable();

        _prodJournalProd.PdsCWBatchGood   = cwQtyGood;
        _prodJournalProd.PdsCWBatchErr    = cwQtyError;

        _prodJournalProd.InventDimId      = this.inventDimIdWithOutputLocation(_prodTable);
        _prodJournalProd.QtyGood          = qtyGood;
        _prodJournalProd.QtyError         = qtyError;
        _prodJournalProd.ErrorCause       = errorCause;

        _prodJournalProd.TransDate        = transDate;
        _prodJournalProd.ProdFinished     = endUpdate;

        // <GEERU>
        if (countryRegion_RU)
        {
            _prodJournalProd.ReleaseKindId_RU  = releaseKindId;
            _prodJournalProd.StornoPhysical_RU = stornoPhysical;
        }
        // </GEERU>

        _prodJournalProd.pdsBaseValue     = pdsBaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdJournalProdPreviousOperationError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an additional RAF journal line if scrap has been reported on previous operation.
    /// </summary>
    /// <param name = "_prodJournalProd"> The <c>ProdJournalProd</c> record. </param>
    /// <param name = "_prodTable"> The <c>ProdTable</c> record. </param>
    /// <param name = "_qtyError"> Error quantity reported. </param>
    /// <param name = "_pdsCWQtyError"> CW error quantity reported. </param>
    private void initProdJournalProdPreviousOperationError(ProdJournalProd _prodJournalProd, ProdTable _prodTable, Qty _qtyError = 0, Qty _pdsCWQtyError = 0)
    {
        _prodJournalProd.clear();
        _prodJournalProd.initValue();

        _prodJournalProd.initFromProdTable(_prodTable);
        prodJournalTransData.initFromJournalTable();

        _prodJournalProd.QtyError         = _qtyError;
        _prodJournalProd.PdsCWBatchErr    = _pdsCWQtyError;
        _prodJournalProd.ErrorCause       = errorCause;

        _prodJournalProd.TransDate        = transDate;
        _prodJournalProd.ProdFinished     = endUpdate;

        _prodJournalProd.pdsBaseValue     = pdsBaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdWithOutputLocation</Name>
				<Source><![CDATA[
    private InventDimId inventDimIdWithOutputLocation(ProdTable _prodTable)
    {
        InventDim inventDimLocal = InventDim::find(inventDimId);

        inventDimLocal.wMSLocationId = _prodTable.defaultOutputLocation(_prodTable.ItemId, transDate, '', inventDimLocal);
        inventDimLocal = inventDim::findOrCreate(inventDimLocal);

        return inventDimLocal.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()
        ,this.pdsPack()
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceptError</Name>
				<Source><![CDATA[
    public NoYes parmAcceptError(NoYes _acceptError = acceptError)
    {
        acceptError = _acceptError;
        return _acceptError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllQty</Name>
				<Source><![CDATA[
    public boolean parmAllQty(boolean _allQty = allQty)
    {
        allQty = _allQty;
        return allQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorCause</Name>
				<Source><![CDATA[
    public ProdErrorCause parmErrorCause(ProdErrorCause _errorCause = errorCause)
    {
        errorCause = _errorCause;
        return errorCause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    public ParmId parmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPDSBaseValue</Name>
				<Source><![CDATA[
    public PDSBaseValue parmPDSBaseValue(PDSBaseValue _pdsBaseValue = pdsBaseValue)
    {
        pdsBaseValue = _pdsBaseValue;
        return pdsBaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWBatchError</Name>
				<Source><![CDATA[
    public PdsCWBatchErr parmPdsCWBatchError(PdsCWBatchErr _cwQtyError = cwQtyError)
    {
        cwQtyError = _cwQtyError;
        return cwQtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWBatchGood</Name>
				<Source><![CDATA[
    public PdsCWBatchGood parmPdsCWBatchGood(PdsCWBatchGood _cwQtyGood = cwQtyGood)
    {
        cwQtyGood = _cwQtyGood;
        return cwQtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyError</Name>
				<Source><![CDATA[
    public ProdReportedError parmQtyError(ProdReportedError _qtyError = qtyError)
    {
        qtyError = _qtyError;
        return qtyError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyGood</Name>
				<Source><![CDATA[
    public ProdReportedGood parmQtyGood(ProdReportedGood _qtyGood = qtyGood)
    {
        qtyGood = _qtyGood;
        return qtyGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseKindId_RU</Name>
				<Source><![CDATA[
    public ProdReleaseRejectKindId_RU parmReleaseKindId_RU(ProdReleaseRejectKindId_RU _releaseKindId = releaseKindId)
    {
        releaseKindId = _releaseKindId;
        return releaseKindId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversed</Name>
				<Source><![CDATA[
    public boolean parmReversed(boolean _reversed = reversed)
    {
        reversed = _reversed;
        return reversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the values into the custom container.
    /// </summary>
    /// <returns>
    /// The packed container with the values.
    /// </returns>
    protected container pdsPack()
    {
        return [#PDSCurrentVersion, #PDSCurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUnpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the custom container.
    /// </summary>
    /// <param name="_packedClass">
    /// The container which to unpack.
    /// </param>
    /// <returns>
    /// true if container was successfully unpacked; otherwise, false.
    /// </returns>
    protected boolean pdsUnpack(container _packedClass)
    {
        Integer     version = conPeek(_packedClass, 1);
        boolean     ret = true;

        switch (version)
        {
            case #PDSCurrentVersion:
                [version, #PDSCurrentList] = _packedClass;
                break;
            case 0:
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMultiLineSerialNumberReportFinishLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates RAF journal with multiple serial number lines.
    /// </summary>
    /// <param name = "_prodJournalProd"> Buffer for report as finished journal line. </param>
    /// <param name = "_inventTable"> The <c>InventTable</c> record. </param>
    /// <param name = "_prodTable"> The <c>ProdTable</c> record. </param>
    [Hookable(false)]
    internal void createMultiLineSerialNumberReportFinishLines(ProdJournalProd _prodJournalProd, InventTable _inventTable, ProdTable _prodTable)
    {
        JmgSerialNumberSpecification jmgSerialNumberSpecification;
        Qty sumQtyError;
        Qty sumPdsCWQtyError;

        while select jmgSerialNumberSpecification where
            jmgSerialNumberSpecification.ParmId == parmId &&
            jmgSerialNumberSpecification.ItemId == _inventTable.ItemId &&
            jmgSerialNumberSpecification.ProdId == prodId
        {
            prodJournalTableData.initJournalId();

            _prodJournalProd.clear();
            _prodJournalProd.initValue();

            prodJournalTransData.initFromJournalTable();

            _prodJournalProd.initFromProdTable(_prodTable);
            _prodJournalProd.initFromJmgSerialNumberSpecification(jmgSerialNumberSpecification);
            prodJournalTransData.create();

            sumQtyError      += jmgSerialNumberSpecification.QtyError;
            sumPdsCWQtyError += jmgSerialNumberSpecification.PdsCWQtyError;
        }

        // RAF line for scrap from current and/or previous operation should be created.
        if (qtyError > sumQtyError || cwQtyError > sumPdsCWQtyError)
        {
            this.initProdJournalProdPreviousOperationError(_prodJournalProd,
                                                           _prodTable, 
                                                           qtyError - sumQtyError, 
                                                           cwQtyError - sumPdsCWQtyError);
            prodJournalTransData.create();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCreateCoByLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the co-product or byproduct lines for the journal.
    /// </summary>
    public void pmfCreateCoByLines()
    {
        ProdJournalProd prodJournalProd;
        boolean isProdResetCoProductLotValidationFlightEnabled = ProdResetCoProductLotValidationFlight::instance().isEnabled();

        if (allQty)
        {
            PmfProdCoBy prodCoBy;

            while select forupdate prodCoBy
                where prodCoBy.ProdId == this.parmProdId()
            {
                if (reversed)
                {
                    boolean isCoByProductResetLotAlready = false;
                    if (isProdResetCoProductLotValidationFlightEnabled)
                    {
                        InventQty goodQty, errorQty;
                        PdsCWQty  cwGoodQty, cwErrorQty;
                        [goodQty, errorQty, cwGoodQty, cwErrorQty] = prodJournalProd::sumGoodErrorQuantityInventTransId(prodCoBy.ProdId, prodCoBy.InventTransId);
                        isCoByProductResetLotAlready = goodQty == 0 && errorQty == 0 && cwGoodQty == 0 && cwErrorQty == 0;
                    }

                    if (!prodCoBy.QtyCoByStUp && (prodCoBy.RemainCoByPhysical || isCoByProductResetLotAlready))
                    {
                        continue;
                    }
                    prodCoBy.QtyCoByStUp = 0;
                    prodCoBy.RemainCoByPhysical = prodCoBy.QtyCoByCalc;

                    prodCoBy.PdsCWInventStup = 0;
                    prodCoBy.PdsCWRemainPhysical = prodCoBy.PdsCWInventCalc;

                    prodCoBy.update();
                }

                prodJournalTableData.initJournalId();

                prodJournalProd = prodJournalTransData.journalTrans();
                this.pmfInitTransFromProdCoBy(prodJournalProd, prodCoBy);

                if (prodJournalProd.QtyGood || prodJournalProd.QtyError || endUpdate)
                {
                    prodJournalTransData.create();
                }
            }
        }
        else
        {
            ProdParmReportFinished prodParmReportFinished;

            while select forupdate prodParmReportFinished
                where prodParmReportFinished.ParmId == this.parmId()
                    && prodParmReportFinished.ProdId == this.parmProdId()
                    && prodParmReportFinished.JobStatus == ParmJobStatus::Waiting
                    && (prodParmReportFinished.PmfProductType == PmfProductType::By_Product
                        || prodParmReportFinished.PmfProductType == PmfProductType::Co_Product)
            {
                prodJournalTableData.initJournalId();

                prodJournalProd = prodJournalTransData.journalTrans();
                this.pmfInitTransFromProdParm(prodJournalProd,prodParmReportFinished);
                prodJournalTransData.create();

                // If InventTransId is not set on the parm line, means we are trying to report as finished a Co/By product that is not on the Formula definition
                // InventTransId in that case gets created on the fly together with the corresponding PmfProdCoBy record in the line above.
                if (!prodParmReportFinished.InventTransId)
                {
                    prodParmReportFinished.InventTransId = prodJournalProd.InventTransId;
                }
                prodParmReportFinished.JobStatus = ParmJobStatus::Executed;
                prodParmReportFinished.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInitTransFromProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes production journal transaction from a co-product or byproduct transaction.
    /// </summary>
    /// <param name="_prodJournalProd">
    /// A production journal buffer.
    /// </param>
    /// <param name="_prodCoBy">
    /// A selected co-product or byproduct record.
    /// </param>
    protected void pmfInitTransFromProdCoBy(
        ProdJournalProd     _prodJournalProd,
        PmfProdCoBy         _prodCoBy)
    {
        _prodJournalProd.clear();
        _prodJournalProd.initValue();

        _prodJournalProd.ProdId         = _prodCoBy.ProdId;
        _prodJournalProd.InventTransId  = _prodCoBy.InventTransId;
        _prodJournalProd.InventDimId    = _prodCoBy.InventDimId;
        _prodJournalProd.ItemId         = _prodCoBy.ItemId;
        _prodJournalProd.PmfProductType = _prodCoBy.ProductType;

        prodJournalTransData.initFromJournalTable();

        if (reversed)
        {
            _prodJournalProd.QtyGood = ProdJournalProd::pmfCoByReportedFinishedGood(
                                           _prodCoBy.ProdId,
                                           _prodCoBy.InventTransId);
            _prodJournalProd.QtyError = ProdJournalProd::pmfCoByReportedFinishedError(
                                           _prodCoBy.ProdId,
                                           _prodCoBy.InventTransId);

            if (PdsGlobal::pdsIsCWItem(_prodJournalProd.ItemId))
            {
                _prodJournalProd.PdsCWBatchGood = ProdJournalProd::pdsCWCoByReportedFinishedGood(
                                                     _prodCoBy.ProdId,
                                                     _prodCoBy.InventTransId);
                _prodJournalProd.PdsCWBatchErr = ProdJournalProd::pdsCWCoByReportedFinishedError(
                                                     _prodCoBy.ProdId,
                                                     _prodCoBy.InventTransId);
            }

            _prodJournalProd.QtyGood        = -_prodJournalProd.QtyGood;
            _prodJournalProd.QtyError       = -_prodJournalProd.QtyError;
            _prodJournalProd.PdsCWBatchGood = -_prodJournalProd.PdsCWBatchGood;
            _prodJournalProd.PdsCWBatchErr  = -_prodJournalProd.PdsCWBatchErr;
            _prodJournalProd.ErrorCause     = errorCause;
        }
        else
        {
            [_prodJournalProd.QtyGood, _prodJournalProd.PdsCWBatchGood] = _prodCoBy.type().calcCoByReportFinishedQty(qtyGood, cwQtyGood);
        }

        _prodJournalProd.TransDate           = transDate;
        _prodJournalProd.ProdFinished        = _prodJournalProd.ProdFinished;
        _prodJournalProd.PmfAcceptError      = acceptError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfInitTransFromProdParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal lines from the reported as finished parameters.
    /// </summary>
    /// <param name="_prodJournalProd">
    /// A production journal entry.
    /// </param>
    /// <param name="_prodParmReportFinished">
    /// A <c>ProdParmReportFinished</c> record.
    /// </param>
    protected void pmfInitTransFromProdParm(
        ProdJournalProd         _prodJournalProd,
        ProdParmReportFinished  _prodParmReportFinished)
    {
        _prodJournalProd.clear();
        _prodJournalProd.initValue();

        _prodJournalProd.ProdId         = _prodParmReportFinished.ProdId;
        _prodJournalProd.InventTransId  = _prodParmReportFinished.InventTransId;
        _prodJournalProd.InventDimId    = _prodParmReportFinished.InventDimId;
        _prodJournalProd.ItemId         = _prodParmReportFinished.ItemId;
        _prodJournalProd.PmfProductType = _prodParmReportFinished.PmfProductType;

        prodJournalTransData.initFromJournalTable();

        _prodJournalProd.QtyGood = _prodParmReportFinished.QtyGood;
        _prodJournalProd.QtyError = _prodParmReportFinished.QtyError;

        _prodJournalProd.PdsCWBatchGood = _prodParmReportFinished.PdsCWBatchGood;
        _prodJournalProd.PdsCWBatchErr = _prodParmReportFinished.PdsCWBatchErr;

        _prodJournalProd.ErrorCause          = _prodParmReportFinished.ErrorCause;
        _prodJournalProd.TransDate           = _prodParmReportFinished.TransDate ? _prodParmReportFinished.TransDate : transDate;
        _prodJournalProd.ProdFinished        = _prodParmReportFinished.EndJob;
        _prodJournalProd.PmfAcceptError      = acceptError || _prodParmReportFinished.AcceptError;

        _prodJournalProd.pdsBaseValue        = _prodParmReportFinished.pdsBaseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer     version = conPeek(_packedClass,1);
        container   base;
        container   pdsPackedClass;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base
                ,pdsPackedClass
                ] = _packedClass;
                super(base);
                break;
            default:
                return false;
        }

        this.pdsUnpack(pdsPackedClass);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        if (reversed)
        {
            ok = ok && ProdJournalProd::checkNotMissingPosting(prodId, journalId);
        }

        return ok && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdJournalCreateProd construct()
    {
        return new ProdJournalCreateProd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGoodAndErrorQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the good and error quantities of the specified production order RAF and route card journals.
    /// </summary>
    /// <param name="_prodId">
    ///     The ID of the production order.
    /// </param>
    /// <param name="_prodJournalIdRoute">
    ///     The ID of the route journal.
    /// </param>
    /// <returns>
    ///     A container with the values for the good quantity and error quantity.
    /// </returns>
    public static Container getGoodAndErrorQty(
        ProdId              _prodId,
        ProdJournalIdRoute  _prodJournalIdRoute
        )
    {
        ProdJournalProd  prodJournalProd;
        ProdJournalRoute prodJournalRoute;

        select sum(QtyGood), sum(QtyError), sum(PdsCWBatchGood), sum(PdsCWBatchErr) from prodJournalProd
        exists join prodJournalRoute
            where prodJournalRoute.ProdReportFinishedJournalId  == prodJournalProd.JournalId
                && prodJournalRoute.JournalId                   == _prodJournalIdRoute
                && prodJournalRoute.ProdId                      == _prodId;

        return [ProdUpdReportFinished::proposalQtyGood(_prodId)  - prodJournalProd.QtyGood,
                ProdUpdReportFinished::proposalQtyError(_prodId) - prodJournalProd.QtyError,
                ProdUpdReportFinished::pdsCWProposalQtyGood(_prodId) - prodJournalProd.PdsCWBatchGood,
                ProdUpdReportFinished::pdsCWProposalQtyError(_prodId) - prodJournalProd.PdsCWBatchErr];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCheckPostRoute</Name>
				<Source><![CDATA[
    public static ProdJournalCreateProd newCheckPostRoute(
        ProdJournalRoute        _prodJournalRoute,
        ProdJournalId           _prodJournalId
        )
    {
        ProdJournalCreateProd prodJournalCreate = ProdJournalCreateProd::construct();

        prodJournalCreate.getLast();

        prodJournalCreate.parmEndUpdate(_prodJournalRoute.OprFinished);
        prodJournalCreate.parmProdId(_prodJournalRoute.ProdId);
        prodJournalCreate.parmJournalId(_prodJournalId);
        prodJournalCreate.parmJournalNameId(ProdJournalTable::find(_prodJournalRoute.JournalId).JournalNameIdReportFinish);
        prodJournalCreate.parmTransDate(_prodJournalRoute.TransDate);

        prodJournalCreate.parmErrorCause(_prodJournalRoute.ErrorCause);
        prodJournalCreate.parmInventDimId(_prodJournalRoute.ProdInventDimId);

        prodJournalCreate.parmQtyGood(_prodJournalRoute.QtyGood);
        prodJournalCreate.parmQtyError(_prodJournalRoute.QtyError);

        if (_prodJournalRoute.isCwItem())
        {
            prodJournalCreate.parmPdsCWBatchGood(_prodJournalRoute.PdsCWQtyGood);
            prodJournalCreate.parmPdsCWBatchError(_prodJournalRoute.PdsCWQtyError);
        }

        prodJournalCreate.parmReversed(false);
        prodJournalCreate.parmAcceptError(ProdParameters::find().JournalAcceptError);
        // report as finished co/by product as part of formula/planning item RAF from route/job card journal
        prodJournalCreate.parmAllQty(true);

        prodJournalCreate.init();

        return prodJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReportFinished</Name>
				<Source><![CDATA[
    public static ProdJournalCreateProd newReportFinished(
        ProdParmReportFinished  _prodParmReportFinished,
        ProdReportedGood        _qtyGood  = _prodParmReportFinished.QtyGood,
        ProdReportedError       _qtyError = _prodParmReportFinished.QtyError)
    {
        ProdJournalCreateProd   prodJournalCreate = ProdJournalCreateProd::construct();

        prodJournalCreate.getLast();

        prodJournalCreate.parmId(_prodParmReportFinished.ParmId);

        prodJournalCreate.parmEndUpdate(_prodParmReportFinished.EndJob);
        prodJournalCreate.parmProdId(_prodParmReportFinished.ProdId);
        prodJournalCreate.parmJournalId('');
        prodJournalCreate.parmJournalNameId(_prodParmReportFinished.ProdJournalNameId);
        prodJournalCreate.parmTransDate(_prodParmReportFinished.TransDate);

        prodJournalCreate.parmErrorCause(_prodParmReportFinished.ErrorCause);
        prodJournalCreate.parmInventDimId(_prodParmReportFinished.InventDimId);
        prodJournalCreate.parmQtyError(_qtyError);
        prodJournalCreate.parmQtyGood(_qtyGood);
        prodJournalCreate.parmPdsCWBatchError(_prodParmReportFinished.PdsCWBatchErr);
        prodJournalCreate.parmPdsCWBatchGood(_prodParmReportFinished.PdsCWBatchGood);

        prodJournalCreate.parmReversed(NoYes::No);
        prodJournalCreate.parmAcceptError(_prodParmReportFinished.AcceptError);

        prodJournalCreate.parmPDSBaseValue(_prodParmReportFinished.pdsBaseValue);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            prodJournalCreate.parmReleaseKindId_RU(_prodParmReportFinished.ReleaseKindId_RU);
        }
        // </GEERU>

        prodJournalCreate.init();

        return prodJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStatusDecrease</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>ProdJournalCreateProd</c> class that will be used for reversal.
    /// </summary>
    /// <param name="_prodTable">
    ///     The production to be reversed.
    /// </param>
    /// <param name="_inventDimId">
    ///     The dimension that the production was reported finished on.
    /// </param>
    /// <param name="_qtyGood">
    ///     The previously reported as finished good quantity.
    /// </param>
    /// <param name="_qtyError">
    ///     The previously reported as finished error quantity.
    /// </param>
    /// <param name="_journalId">
    ///     The journal Id on which the new reversal journal should be posted.
    /// </param>
    /// <param name="_pdsCWQtyGood">
    ///     The previously reported as finished catch weight good quantity; optional.
    /// </param>
    /// <param name="_pdsCWQtyError">
    ///     The previously reported as finished catch weight error quantity; optional.
    /// </param>
    /// <returns>
    ///     An instance of the <c>ProdJournalCreateProd</c> class.
    /// </returns>
    public static ProdJournalCreateProd newStatusDecrease(
        ProdTable           _prodTable,
        InventDimId         _inventDimId,
        ProdReportedGood    _qtyGood,
        ProdReportedError   _qtyError,
        JournalId           _journalId,
        ProdReportedGood    _pdsCWQtyGood = 0,
        ProdReportedError   _pdsCWQtyError = 0
        )
    {
        ProdJournalCreateProd   prodJournalCreate = ProdJournalCreateProd::construct();

        prodJournalCreate.getLast();

        prodJournalCreate.parmEndUpdate(NoYes::No);
        prodJournalCreate.parmProdId(_prodTable.ProdId);
        prodJournalCreate.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        prodJournalCreate.parmJournalId(_journalId);
        prodJournalCreate.parmJournalNameId(_prodTable.prodParametersDim().ProdJournalNameId);

        prodJournalCreate.parmErrorCause(ProdErrorCause::None);
        prodJournalCreate.parmInventDimId(_inventDimId);
        prodJournalCreate.parmQtyError(-_qtyError);
        prodJournalCreate.parmQtyGood(-_qtyGood);
        prodJournalCreate.parmReversed(NoYes::Yes);
        prodJournalCreate.parmAcceptError(NoYes::Yes);

        prodJournalCreate.parmAllQty(true);

        prodJournalCreate.parmPdsCWBatchError(-_pdsCWQtyError);
        prodJournalCreate.parmPdsCWBatchGood(-_pdsCWQtyGood);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            prodJournalCreate.parmStornoPhysical_RU(InventParameters::find().StornoPhysicalPosting_RU);
        }
        // </GEERU>

        prodJournalCreate.init();

        return prodJournalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportAsFinishedFromProdAsBuiltBOMProductLotAssociation</Name>
				<Source><![CDATA[
    internal static ProdJournalCreateProd reportAsFinishedFromProdAsBuiltBOMProductLotAssociation(ProdAsBuiltBOMProductLotAssociation _productLotAssociation)
    {
        ProdJournalCreateProd prodJournalCreate = ProdJournalCreateProd::construct();
        ProdTable             prodTable = ProdTable::find(_productLotAssociation.ReferenceId);

        prodJournalCreate.getLast();
        prodJournalCreate.parmEndUpdate(NoYes::No);
        prodJournalCreate.parmProdId(_productLotAssociation.ReferenceId);
        prodJournalCreate.parmJournalId('');
        prodJournalCreate.parmJournalNameId(prodTable.prodParametersDim().ProdJournalNameId);
        prodJournalCreate.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        prodJournalCreate.parmQtyGood(_productLotAssociation.QtyGood);
        prodJournalCreate.parmQtyError(_productLotAssociation.QtyError);
        prodJournalCreate.parmReversed(false);
        prodJournalCreate.parmAcceptError(ProdParameters::find().JournalAcceptError);
        prodJournalCreate.parmInventDimId(_productLotAssociation.InventDimId); 

        prodJournalCreate.init();

        return prodJournalCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>