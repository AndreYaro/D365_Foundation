<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgAbsenceStatisticsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgAbsenceStatisticsController</c> class is the controller class for the
///    <c>JmgAbsenceStatistics</c> report.
/// </summary>
class JmgAbsenceStatisticsController extends JmgReportBaseController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWorkerRange</Name>
				<Source><![CDATA[
        protected QueryBuildRange getWorkerRange()
    {
        Query   query           = this.getQuery();

        return SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(JmgStampTrans)), fieldNum(JmgStampTrans, Worker));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before the dialog box is displayed to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract. A common use case is to add or change, or both, a
    /// query. This method is called only during an interactive scenario, before rendering the UI to
    /// user.For batch scenario we do not call this method, since there is no user interaction and contract
    /// values are already saved in batch.Do not initialize any instance variables in this code if they are
    /// used during the lifetime of controller, since these will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        JmgAbsenceStatisticsContract    rdpContract = this.parmReportContract().parmRdpContract();
        boolean                         isAbsenceReport = (this.parmArgs().parmEnum() == JmgNoneNoYesEnum::Yes);
        QueryBuildDataSource            qbdsHrmAbsenceCode;

        super();

        rdpContract.parmIsAbsenceReport(isAbsenceReport);

        if (isAbsenceReport)
        {
            rdpContract.parmReportTitle("@SYS118887");
            this.parmDialogCaption("@SYS118887");

            // The absence statistics report must have a lookup on absence codes added
            qbdsHrmAbsenceCode = this.getQuery().dataSourceTable(tableNum(HRMAbsenceCode));
            if (qbdsHrmAbsenceCode == null)
            {
                qbdsHrmAbsenceCode = SysQuery::findOrCreateDataSource(this.getQuery(), tableNum(HRMAbsenceCode), tableNum(JmgStampTrans));
                qbdsHrmAbsenceCode.joinMode(JoinMode::ExistsJoin);
                qbdsHrmAbsenceCode.addLink(fieldNum(JmgStampTrans, ActOprID), fieldNum(HRMAbsenceCode, HrmAbsenceCodeId));
                SysQuery::findOrCreateRange(qbdsHrmAbsenceCode, fieldNum(HRMAbsenceCode, HrmAbsenceCodeId));
            }
        }
        else
        {
            rdpContract.parmReportTitle("@SYS313947");
            this.parmDialogCaption("@SYS313947");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static JmgAbsenceStatisticsController construct()
    {
        return new JmgAbsenceStatisticsController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        static void main(Args _args)
    {
        JmgReportBaseController::startOperationWithArgs(_args, JmgAbsenceStatisticsController::construct(), ssrsReportStr(JmgAbsenceStatistics, Report));
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>