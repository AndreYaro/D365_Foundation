<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsBatchDispCheck_Reserve</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles the disposition check for invent reservation.
/// </summary>
class PdsBatchDispCheck_Reserve extends PdsBatchDispCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNotRestrict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if reservation is blocked for the module type _moduleType.
    /// </summary>
    /// <param name="_moduleType">
    /// Module type used during disposition check.
    /// </param>
    /// <returns>
    /// True if batch is not restricted, false if it is restricted.
    /// </returns>
    public boolean checkNotRestrict(PdsDispModuleType _moduleType)
    {
        boolean                 ret =true;
        PdsDispositionMaster    dispMaster;

        dispMaster = PdsDispositionMaster::find(
                            inventBatch.PdsDispositionCode);

        switch (_moduleType)
        {
            case PdsDispModuleType::Production :
                if (dispMaster.PdsProdBlockReserve)
                {
                    ret = this.setReturn();
                }
                break;
            case PdsDispModuleType::Sales:
                if (dispMaster.PdsSalesBlockReserve)
                {
                    ret = this.setReturn();
                }
                break;
            case PdsDispModuleType::Transfer:
                if (dispMaster.PdsTransBlockReserve)
                {
                    ret = this.setReturn();
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs standard new functionality, overriden to make protected.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns false and displays the error for the blocked <c>InventBatchId</c>.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    protected PdsDispBatchCheck setReturn()
    {
        if (!suppressMessage)
        {
            checkFailed(strFmt("@PRO2122",inventBatch.InventBatchId));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the PdsDispModuleType from either the _inventTrans or _refRecord
    /// parameters, to be used in the disposition check.
    /// </summary>
    /// <param name="_inventTrans">
    /// InventTrans record used to determine PdsDispModuleType for check.
    /// </param>
    /// <param name="_refRecord">
    /// The record used to determine the PdsDispModuleType for check.
    /// </param>
    /// <returns>
    /// Result of disposition check.
    /// </returns>
    public boolean validateTransCheck(
        InventTrans _inventTrans,
        Common      _refRecord = null)
    {
        boolean                 ret = false;
        PdsDispModuleType       modType;

        if (_inventTrans.ItemId)
        {
            this.parmBatch(InventBatch::find(_inventTrans.inventBatchId(),
                                             _inventTrans.ItemId));

            if (_refRecord)
            {
                switch (_refRecord.TableId)
                {
                    case tableNum(SalesParmLine):
                        //Fall Through
                    case tableNum(SalesLine):
                        modType = PdsDispModuleType::Sales;
                        break;

                    case tableNum(ProdBOM):
                        //Fall Through
                    case tableNum(ProdJournalBOM):
                        modType = PdsDispModuleType::Production;
                        break;

                    case tableNum(InventTransferJourLine):
                        //Fall Through
                    case tableNum(InventTransferLine):
                        //Fall Through
                    case tableNum(InventTransferParmLine):
                        modType = PdsDispModuleType::Transfer;
                        break;

                    case tableNum(ReqTrans):
                        modType = PdsDispModuleType::Planning;
                        break;

                    case tableNum(InventJournalTrans):
                        if (_refRecord.(fieldNum(InventJournalTrans, JournalType)) == InventJournalType::Transfer)
                        {
                            modType = PdsDispModuleType::Transfer;
                        }
                        else
                        {
                            ret = true;
                        }
                        break;

                    case tableNum(WMSOrderTrans):
                        switch (_refRecord.
                                    (fieldNum(WMSOrderTrans, InventTransType)))
                        {
                            case InventTransType::Sales :
                                modType = PdsDispModuleType::Sales;
                                break;
                            case InventTransType::ProdLine :
                                modType = PdsDispModuleType::Production;
                                break;
                            case InventTransType::TransferOrderShip :
                                modType = PdsDispModuleType::Transfer;
                                break;
                        }
                        break;

                    case tableNum(WMSOrder):
                        switch (_refRecord.(fieldNum(WMSOrder, InventTransType)))
                        {
                            case InventTransType::Sales :
                                modType = PdsDispModuleType::Sales;
                                break;
                            case InventTransType::ProdLine :
                                modType = PdsDispModuleType::Production;
                                break;
                            case InventTransType::TransferOrderShip :
                                modType = PdsDispModuleType::Transfer;
                                break;
                        }
                        break;

                    default:
                        ret = true;
                }
            }
            else
            {
                switch (_inventTrans.inventTransOrigin().ReferenceCategory)
                {
                    case InventTransType::Sales:
                        modType = PdsDispModuleType::Sales;
                        break;

                    case InventTransType::ProdLine:
                        modType = PdsDispModuleType::Production;
                        break;

                    case InventTransType::TransferOrderShip:
                    case InventTransType::WMSOrder:
                        modType = PdsDispModuleType::Transfer;
                        break;

                    default:
                        ret = true;
                }
            }
        }

        if (!ret)
        {
            ret = this.checkNotRestrict(modType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a new instance of the PdsBatchDispCheck_Reserve class.
    /// </summary>
    /// <returns>
    /// New instance of the PdsBatchDispCheck_Reserve class.
    /// </returns>
    public static PdsBatchDispCheck_Reserve construct()
    {
        return new PdsBatchDispCheck_Reserve();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>