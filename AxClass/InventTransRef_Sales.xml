<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransRef_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransRef_Sales extends InventTransReference
{
    CustInvoiceTrans    custInvoiceTrans;
    CustInvoiceJour     custInvoiceJour;
    ProjItemTrans       projItemTrans;
    ProjTable           projTable;

    SalesLine           salesOrderLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
        public CurrencyCode currencyCode()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
        {
            return custInvoiceTrans.CurrencyCode;
        }
        else if (inventTrans.isUpdatedFinancial() && projItemTrans.RecId)
        {
            return projItemTrans.CurrencyId;
        }

        return salesOrderLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAC</Name>
				<Source><![CDATA[
        public CustVendAC custVendAC()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceJour.RecId)
        {
            return custInvoiceJour.OrderAccount;
        }
        else if (inventTrans.isUpdatedFinancial() && projTable.RecId)
        {
            return projTable.CustAccount;
        }

        return salesOrderLine.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
        public Amount discAmount()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
        {
            return custInvoiceTrans.DiscAmount;
        }
        else if (inventTrans.isUpdatedFinancial() && projItemTrans.RecId)
        {
            return 0;
        }

        return salesOrderLine.discAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
        public Percent discPercent()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
        {
            return custInvoiceTrans.DiscPercent;
        }
        else if (inventTrans.isUpdatedFinancial() && projItemTrans.RecId)
        {
            return 0;
        }

        return salesOrderLine.discPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventVendCust</Name>
				<Source><![CDATA[
        public InventVendCust inventVendCust()
    {
        return InventVendCust::Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
        public Amount lineAmount()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
        {
            return -custInvoiceTrans.LineAmount * factor;
        }
        else if (inventTrans.isUpdatedFinancial() && projItemTrans.RecId)
        {
            return -projItemTrans.lineAmount() * factor;
        }

        return -salesOrderLine.lineAmountExclTax() * factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPrice</Name>
				<Source><![CDATA[
        public Price pcsPrice()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
        {
            if (!custInvoiceTrans.RecId)
            {
                return 0;
            }

            return (custInvoiceTrans.Qty * custInvoiceTrans.SalesPrice /
                   (custInvoiceTrans.PriceUnit ? custInvoiceTrans.PriceUnit : 1) +
                    custInvoiceTrans.SalesMarkup) /
                   (custInvoiceTrans.Qty ? custInvoiceTrans.Qty : 1);
        }
        else if (inventTrans.isUpdatedFinancial() && projItemTrans.RecId)
        {
            if (!projItemTrans.RecId)
            {
                return 0;
            }

            return projItemTrans.salesPrice();
        }
        else
        {
            if (!salesOrderLine.RecId)
            {
                return 0;
            }

            return (salesOrderLine.SalesQty * salesOrderLine.SalesPrice /
                   (salesOrderLine.PriceUnit ? salesOrderLine.PriceUnit : 1) +
                    salesOrderLine.SalesMarkup) /
                   (salesOrderLine.SalesQty ? salesOrderLine.SalesQty : 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
        public Qty qtyUnit()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
        {
            return -custInvoiceTrans.Qty * factor;
        }
        else if (inventTrans.isUpdatedFinancial() && projItemTrans.RecId)
        {
            return -projItemTrans.Qty * factor;
        }

        return -salesOrderLine.SalesQty * factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefTrans</Name>
				<Source><![CDATA[
        protected void setRefTrans()
    {
        super();

        custInvoiceTrans.clear();
        custInvoiceJour.clear();
        projItemTrans.clear();
        projTable.clear();
        if (inventTrans.isUpdatedFinancial())
        {
            select firstonly custInvoiceTrans
                where custInvoiceTrans.InventTransId      == inventTransOrigin.InventTransId
                   && custInvoiceTrans.InvoiceDate        == inventTrans.DateFinancial
                   && custInvoiceTrans.InvoiceId          == inventTrans.InvoiceId
                outer join custInvoiceJour
                    where custInvoiceJour.InvoiceId           == custInvoiceTrans.InvoiceId
                       && custInvoiceJour.InvoiceDate         == custInvoiceTrans.InvoiceDate
                       && custInvoiceJour.SalesId             == custInvoiceTrans.SalesId
                       && custInvoiceJour.NumberSequenceGroup == custInvoiceTrans.NumberSequenceGroup;

            if (!custInvoiceTrans.RecId && isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                select firstonly projItemTrans
                    where projItemTrans.InventTransId == inventTransOrigin.InventTransId
                       && projItemTrans.ProjAdjustRefId == inventTrans.ProjAdjustRefId
                    join projTable
                        where projTable.ProjId == projItemTrans.ProjId;
            }
        }
        if (!custInvoiceTrans.RecId && !projItemTrans.RecId)
        {
            salesOrderLine = InventTransOriginSalesLine::salesLine(inventTransOrigin.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
        public UnitOfMeasureSymbol unitId()
    {
        if (inventTrans.isUpdatedFinancial() && custInvoiceTrans.RecId)
        {
            return custInvoiceTrans.SalesUnit;
        }
        else if (inventTrans.isUpdatedFinancial() && projItemTrans.RecId)
        {
            return projItemTrans.SalesUnit;
        }

        return salesOrderLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventTransRef_Sales construct()
    {
        return new InventTransRef_Sales();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>