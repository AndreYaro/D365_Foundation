<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXJobRunner</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Runs the specified batch job as a task
/// </summary>
public class RetailCDXJobRunner extends RunBaseBatch implements BatchRetryable
{
    RefRecId            dataGroupRecID;
    RetailConnJobId     jobID;
    RetailCDXRowVersion lastSyncVer;
    RefRecId            scheduleRecID;
    container           targetDataStore;
    boolean             deleteExistingData;
    boolean             readingOnly;
    guid                correlationId;
    private             RefRecId batchJobId;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        dataGroupRecID,
        jobID,
        lastSyncVer,
        scheduleRecID,
        targetDataStore,
        deleteExistingData,
        readingOnly,
        correlationId,
        batchJobId
    #endmacro

    #localmacro.Version1List
        dataGroupRecID,
        jobID,
        lastSyncVer,
        scheduleRecID,
        targetDataStore,
        deleteExistingData,
        readingOnly,
        correlationId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        RetailCDXDataGroup dataGroup;

        select Name from dataGroup where dataGroup.RecId == dataGroupRecID;

        return jobID + ':' + dataGroup.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDataGroupRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of data group id.
    /// </summary>
    /// <param name="_dataGroupRecID">
    /// The value of <c>_dataGroupRecID</c>.
    /// </param>
    /// <returns>
    /// Data group id.
    /// </returns>
    public RefRecId paramDataGroupRecID(RefRecId _dataGroupRecID)
    {
        dataGroupRecID = _dataGroupRecID;
        return dataGroupRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDeleteExistingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of delete exsiting data.
    /// </summary>
    /// <param name="_deleteExistingData">
    /// The value of <c>_deleteExistingData</c>; optional.
    /// </param>
    /// <returns>
    /// Delete existing data.
    /// </returns>
    public boolean paramDeleteExistingData(boolean _deleteExistingData = deleteExistingData)
    {
        deleteExistingData = _deleteExistingData;

        return deleteExistingData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramReadingOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of if the data packing should not be distributed to any data store.
    /// </summary>
    /// <param name="_readingOnly">
    /// The value of the flag indicating if the data package should not be distributed to any data store.
    /// </param>
    /// <returns>
    /// The flag indicating if the data package should not be distributed to any data store.
    /// </returns>
    public boolean paramReadingOnly(boolean _readingOnly = readingOnly)
    {
        readingOnly = _readingOnly;

        return readingOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramJobID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for job ID in <c>RetailConnJobID</c>.
    /// </summary>
    /// <param name="_jobID">
    /// The value of <c>RetailConnJobID</c>; optional.
    /// </param>
    /// <returns>
    /// Job ID.
    /// </returns>
    public RetailConnJobID paramJobID(RetailConnJobID _jobID = jobID)
    {
        jobID = _jobID;

        return jobID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramLastSyncVer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of last sync version
    /// </summary>
    /// <param name="_lastSyncVer">
    /// The value of <c>LastSyncVer</c>; optional.
    /// </param>
    /// <returns>
    /// Last sync version.
    /// </returns>
    public int64 paramLastSyncVer(int64 _lastSyncVer = lastSyncVer)
    {
        lastSyncVer = _lastSyncVer;

        return lastSyncVer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramScheduleRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of schedule rec id.
    /// </summary>
    /// <param name="_scheduleRecID">
    /// The value of <c>ScheduleRecID</c>; optional.
    /// </param>
    /// <returns>
    /// Schedule rec id.
    /// </returns>
    public RefRecId paramScheduleRecID(RefRecId _scheduleRecID = scheduleRecID)
    {
        scheduleRecID = _scheduleRecID;

        return scheduleRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramTargetDataStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of target data store.
    /// </summary>
    /// <param name="_targetDataStore">
    /// The value of <c>target data store</c>; optional.
    /// </param>
    /// <returns>
    /// Value of target data store.
    /// </returns>
    public container paramTargetDataStore(container _targetDataStore = targetDataStore)
    {
        targetDataStore = _targetDataStore;

        return targetDataStore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramBatchJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of Batch job Id.
    /// </summary>
    /// <param name="_batchJobId">
    /// The value of <c>_batchJobId</c>; optional.
    /// </param>
    /// <returns>
    /// Batch job id.
    /// </returns>
    internal RefRecId paramBatchJobId(RefRecId _batchJobId = batchJobId)
    {
        batchJobId = _batchJobId;

        return batchJobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramCorrelationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the correlation Id..
    /// </summary>
    /// <param name="_correlationId">The correlation Id.</param>
    /// <returns>The correlation Id. </returns>
    internal guid paramCorrelationId(guid _correlationId = correlationId)
    {
        correlationId = _correlationId;

        return correlationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RetailCDXDataSync::sync([scheduleRecID, dataGroupRecID, jobID, lastSyncVer, targetDataStore, deleteExistingData, readingOnly, correlationId, batchJobId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            case 1:
                [version, #Version1List] = _packedClass;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>