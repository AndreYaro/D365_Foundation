<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankClientAutoReconciliation_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Automatically reconciliation of bank statement
/// </summary>
class BankClientAutoReconciliation_RU extends RunBase
{
    BankAccountStatement   bankAccountStatement;
    Set                    settledTrans;

    #define.CurrentVersion(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(BankAccountStatement   _bankAccountStatement)
    {
        super();
        bankAccountStatement = _bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates bank transaction reference on Client-Bank's payments and
    /// bank statement is assigned to bank transactions
    /// </summary>
    /// <returns>
    /// Returns true if updates are valid
    /// </returns>
    protected boolean processBankAccountTrans()
    {
        boolean                 ret;
        BankAccountTrans        bankAccountTrans;
        BankClientPayment_RU    paymentTable;

        while select forupdate paymentTable
            where paymentTable.AccountID == bankAccountStatement.AccountId &&
                  paymentTable.Posted
            join forupdate bankAccountTrans
                where bankAccountTrans.AccountId == paymentTable.AccountID  &&
                      bankAccountTrans.Voucher   == paymentTable.Voucher    &&
                      bankAccountTrans.TransDate == paymentTable.TransDate

        {
            if (this.validateBankAccountTrans(paymentTable, bankAccountTrans))
            {
                paymentTable.RefTableId = tablenum(BankAccountTrans);
                paymentTable.RefRecId   = bankAccountTrans.RecId;
                paymentTable.update();
                bankAccountTrans.Included               = NoYes::Yes;
                bankAccountTrans.AccountStatement       = bankAccountStatement.AccountStatementNum;
                bankAccountTrans.AccountStatementDate   = bankAccountStatement.AccountStatementDate;
                bankAccountTrans.update();
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates ledger journal transactions reference on Client-Bank's payments and
    /// sets payment status on journal transactions
    /// </summary>
    protected void processLedgerJournalTrans()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        BankClientPayment_RU    paymentTable;
        LedgerJournalTable      ledgerJournalTable;
        DimensionAttributeValueCombination dimAttrValueCombo;

        while select forupdate paymentTable
            where paymentTable.AccountID == bankAccountStatement.AccountId
            join RecId from dimAttrValueCombo
                where dimAttrValueCombo.DisplayValue == paymentTable.AccountID
            join forupdate ledgerJournalTrans
                where ledgerJournalTrans.OffsetAccountType      == LedgerJournalACType::Bank    &&
                      ledgerJournalTrans.OffsetLedgerDimension  == dimAttrValueCombo.RecId      &&
                      ledgerJournalTrans.Voucher                == paymentTable.Voucher         &&
                      ledgerJournalTrans.TransDate              == paymentTable.TransDate
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                      !ledgerJournalTable.Posted
        {
            paymentTable.RefTableId = tablenum(LedgerJournalTrans);
            paymentTable.RefRecId   = ledgerJournalTrans.RecId;
            paymentTable.update();
            ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Confirmed;
            ledgerJournalTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (! bankAccountStatement)
        {
            return;
        }
        ttsbegin;
        this.processBankAccountTrans();
        this.processLedgerJournalTrans();

        this.updateEndBalance();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEndBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates ending balance of bank statement
    /// </summary>
    protected void updateEndBalance()
    {
        BankAccountStatement    accountStatementUpd;
        AmountCur   balanceAmount;
        container con;
        #define.endBalancePos(4)

        con = BankClientAccountBalance_RU::calcBalance(bankAccountStatement.AccountId,
                                                       bankAccountStatement.AccountStatementDate,
                                                       bankAccountStatement.AccountStatementDate);

        balanceAmount = conpeek(con, #endBalancePos);

        if (balanceAmount)
            update_recordset accountStatementUpd setting endingBalance = balanceAmount
                where accountStatementUpd.RecId == bankAccountStatement.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates matching of amount and currency in payment and bank transaction
    /// </summary>
    /// <param name="_paymentTable">
    /// Client-Bank's payment record
    /// </param>
    /// <param name="_bankAccountTrans">
    /// Bank transaction record
    /// </param>
    /// <returns>
    /// Returns true if a certain fields in payment and
    /// bank transaction are equal and bank transaction wasn't settled, otherwise false
    /// </returns>
    protected boolean validateBankAccountTrans(BankClientPayment_RU    _paymentTable,
                                               BankAccountTrans        _bankAccountTrans)
    {
        boolean ret = true;

        if (!settledTrans)
        {
            settledTrans = new Set(Types::Int64);
        }

        if (!settledTrans.in(_bankAccountTrans.RecId))
        {
            ret = _bankAccountTrans.AmountCur       == _paymentTable.amountCur() &&
                  _bankAccountTrans.CurrencyCode    == _paymentTable.CurrencyCode;
            if (ret)
            {
                settledTrans.add(_bankAccountTrans.RecId);
            }
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankClientAutoReconciliation_RU construct(BankAccountStatement   _bankAccountStatement)
    {
        return new BankClientAutoReconciliation_RU(_bankAccountStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS115374";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BankAccountStatement                bankAccountStatement;
        BankClientAutoReconciliation_RU     bankClientAutoReconciliation;

        if (! args)
        {
            return;
        }
        bankAccountStatement = args.record();
        bankClientAutoReconciliation = BankClientAutoReconciliation_RU::construct(bankAccountStatement);

        bankClientAutoReconciliation.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>