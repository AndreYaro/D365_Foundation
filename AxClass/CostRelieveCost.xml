<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostRelieveCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostRelieveCost</c> class creates entries to relieve cost entries from a previous inventory and related cost event.
/// </summary>
public class CostRelieveCost extends CostPostingRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process(CostEventBase _event)
    {
        CostEventBase               inventoryEvent, reconciledInventoryEvent, reconciledCostEvent;
        CostEntryBase               inventoryEntry, reconciledCostEntry, entry;
        CostEntryEnumerator         inventoryEntryEnumerator, reconciledEntryEnumerator;
        Map                         reconciledEventMap = new Map(Types::Class, Types::Class);
        CostDescriptorBalanceMap    reconciledBalance, remainingBalance, reconciledCostBalance;
        CostMagnitude               reconciledMagnitude, remainingMagnitude;

        inventoryEvent = _event.parmParentEvent();
        inventoryEntryEnumerator = inventoryEvent.getEntries();
        while (inventoryEntryEnumerator.moveNext())
        {
            inventoryEntry = inventoryEntryEnumerator.current();
            reconciledInventoryEvent = inventoryEntry.parmDescriptor().parmReconciledEvent();
            if (reconciledInventoryEvent)
            {
                if (reconciledEventMap.exists(reconciledInventoryEvent))
                {
                    reconciledBalance = reconciledEventMap.lookup(reconciledInventoryEvent);
                }
                else
                {
                    reconciledBalance = CostDescriptorBalanceMap::construct();
                    reconciledEventMap.insert(reconciledInventoryEvent, reconciledBalance);
                }
                reconciledBalance.addMagnitude(CostProductCostQuantityDescriptor::newFromDescriptor(inventoryEntry.parmDescriptor()), inventoryEntry.parmMagnitude());
            }
        }
        MapEnumerator reconciledEventEnumerator = reconciledEventMap.getEnumerator();
        while (reconciledEventEnumerator.moveNext())
        {
            reconciledInventoryEvent = reconciledEventEnumerator.currentKey();
            reconciledBalance = reconciledEventEnumerator.currentValue();
            reconciledCostEvent = CostEvent::newCostEvent(reconciledInventoryEvent);
            if (reconciledCostEvent)
            {
                remainingBalance = CostRelieveCost::remainingBalance(reconciledInventoryEvent);

                reconciledCostBalance = CostDescriptorBalanceMap::construct();
                reconciledCostBalance.substractEntries(reconciledCostEvent.getReconcilingEntries());

                reconciledEntryEnumerator = reconciledCostEvent.getEntries();
                while (reconciledEntryEnumerator.moveNext())
                {
                    reconciledCostEntry = reconciledEntryEnumerator.current();
                    CostProductCostDescriptor productCostDescriptor = reconciledCostEntry.parmDescriptor();
                    CostEntryDescriptorBase productCostQuantityDescriptor = CostProductCostQuantityDescriptor::newFromDescriptor(productCostDescriptor);
                    reconciledMagnitude = reconciledBalance.getBalance(productCostQuantityDescriptor);
                    if (reconciledMagnitude)
                    {
                        remainingMagnitude = remainingBalance.getBalance(productCostQuantityDescriptor);
                        reconciledMagnitude = abs(reconciledMagnitude) * sign(remainingMagnitude);

                        entry = CostEntry::newCostEntry(_event,
                                                    CostProductCostDescriptor::newDescriptor(productCostDescriptor.parmCostObject(),
                                                                                             productCostDescriptor.parmCostGroupId(),
                                                                                             productCostDescriptor.parmSource(),
                                                                                             reconciledCostEvent),
                                                    -CurrencyExchangeHelper::amount((reconciledCostEntry.parmMagnitude() - reconciledCostBalance.getBalance(productCostDescriptor)) * reconciledMagnitude / (remainingMagnitude + reconciledMagnitude)));
                        _event.addEntry(entry);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostRelieveCost construct()
    {
        return new CostRelieveCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostDescriptorBalanceMap</c> populated with the remaning balance per <c>CostProductCostQuantityDescriptor</c>
    /// for an instance of an <c>CostInventoryEvent</c> class.
    /// </summary>
    /// <param name="_event">
    /// The <c>CostInventoryEvent</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostDescriptorBalanceMap</c>.
    /// </returns>
    public static CostDescriptorBalanceMap remainingBalance(CostInventoryEvent _event)
    {
        CostEntryBase               entry;

        CostDescriptorBalanceMap remainingBalance = CostDescriptorBalanceMap::construct();
        CostEntryEnumerator enumerator = _event.getEntries();
        while (enumerator.moveNext())
        {
            entry = enumerator.current();
            remainingBalance.addMagnitude(CostProductCostQuantityDescriptor::newFromDescriptor(entry.parmDescriptor()), entry.parmMagnitude());
        }
        enumerator = _event.getReconcilingEntries();
        while (enumerator.moveNext())
        {
            entry = enumerator.current();
            remainingBalance.substractMagnitude(CostProductCostQuantityDescriptor::newFromDescriptor(entry.parmDescriptor()), entry.parmMagnitude());
        }

        return remainingBalance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
