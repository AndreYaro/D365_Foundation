<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPromissoryNoteDocumentCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankPromissoryNoteDocumentCancel extends RunBase
{
    RecordSortedList ledgerJournalTransList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerJournalTransList</Name>
				<Source><![CDATA[
    RecordSortedList parmLedgerJournalTransList(RecordSortedList _ledgerJournalTransList = ledgerJournalTransList)
    {
        ledgerJournalTransList = _ledgerJournalTransList;
        return ledgerJournalTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            this.update();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update()
    {
        boolean ok = true;
        LedgerJournalTrans ledgerJournalTrans;
        BankPromissoryNoteTable bankPromissoryNoteTable;

        boolean found = ledgerJournalTransList.first(ledgerJournalTrans);

        while (found)
        {
            bankPromissoryNoteTable = BankPromissoryNoteTable::find(
                ledgerJournalTrans.BankAccountId,
                ledgerJournalTrans.BankPromissoryNoteNum,
                true);

            if (bankPromissoryNoteTable)
            {
                if (bankPromissoryNoteTable.DocumentStatus == BankPromissoryNoteStatus::Posted)
                {
                    ok = checkFailed("@SYS74189");
                }
                else
                {
                    bankPromissoryNoteTable.DocumentStatus = BankPromissoryNoteStatus::Cancelled;
                    bankPromissoryNoteTable.doUpdate();

                    ledgerJournalTrans = LedgerJournalTrans::findRecId(ledgerJournalTrans.RecId, true);
                    ledgerJournalTrans.BankPromissoryNoteNum = '';
                    ledgerJournalTrans.PaymReference = '';
                    ledgerJournalTrans.NoEdit = NoYes::No;
                    ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::None;
                    ledgerJournalTrans.doUpdate();
                }
            }

            found = ledgerJournalTransList.next(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        BankPromissoryNoteDocumentCancel bankPromissoryNoteDocumentCancel;
        LedgerJournalTrans ledgerJournalTrans;
        RecordSortedList ledgerJournalTransList = new RecordSortedList(tablenum(LedgerJournalTrans));
        FormDataSource formDS;

        if (!args || args.dataset() != tablenum(LedgerJournalTrans))
        {
            throw error(Error::missingRecord(funcname()));
        }

        ledgerJournalTransList.sortOrder(fieldnum(LedgerJournalTrans, RecId));

        formDS = FormDataUtil::getFormDataSource(args.record());

        for (ledgerJournalTrans = formDS.getFirst(true)
                ? formDS.getFirst(true)
                : args.record(); ledgerJournalTrans; ledgerJournalTrans=formDS.getNext())
        {
            ledgerJournalTransList.ins(ledgerJournalTrans);
        }

        bankPromissoryNoteDocumentCancel = new BankPromissoryNoteDocumentCancel();
        bankPromissoryNoteDocumentCancel.parmLedgerJournalTransList(ledgerJournalTransList);

        if (Box::yesNo("@SYS74187", DialogButton::No) == DialogButton::Yes)
        {
            bankPromissoryNoteDocumentCancel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>