<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsMRCRegulated_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class controls the MRC Regulated for sales
/// </summary>
class PdsMRCRegulated_Sales extends PdsMRCRegulated
{
    SalesLine salesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>alertOnAdvise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends alert of the MRC parameters is set to alert on advise for sales line.
    /// </summary>
    protected void alertOnAdvise()
    {
        if (parameters.AlertOnAdviseIntervalSales)
        {
            this.sendEvent(PdsMRCEventType::SalesAdvise);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>alertOnExpiry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends alert of the MRC parameters is set to alert on expiry for sales line.
    /// </summary>
    protected void alertOnExpiry()
    {
        if (parameters.AlertOnExpirySales)
        {
            this.sendEvent(PdsMRCEventType::SalesExpiry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>alertOnNoDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends alert of the MRC parameters is set to alert on no document for sales line.
    /// </summary>
    protected void alertOnNoDoc()
    {
        if (parameters.AlertOnExpirySales)
        {
            this.sendEvent(PdsMRCEventType::SalesNoDoc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the MRCEventTracker table from the
    /// active document for the current salesLine, with the eventType of
    /// _eventType.
    /// </summary>
    /// <param name="_eventType">Type of event to be sent.</param>
    protected void sendEvent(PdsMRCEventType _eventType)
    {
        tracker.initFromSalesLine(salesLine);
        tracker.initFromPdsMRCDocuments(activeDocument, _eventType);
        tracker.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the global variables for the class from the common parameter, in this case a SalesLine record.
    /// </summary>
    /// <param name="_common">Record used to initialize and run the class.</param>
    public void setBuffer(Common _common)
    {
        LogisticsPostalAddress  deliveryAddress;

        salesLine   = _common;
        itemId      = salesLine.ItemId;
        bomId       = salesLine.ItemBOMId;
        languageId  = salesLine.salesTable().LanguageId;

        if (PdsMRCRegulated::useSalesLineAddress())
        {
            deliveryAddress = salesLine.deliveryAddress();
        }
        else
        {
            deliveryAddress = salesLine.salesTable().deliveryAddress();
        }

        addrCountryRegId    = deliveryAddress.CountryRegionId;
        addrStateId         = deliveryAddress.State;

        //Determine the appropriate effective date.
        if (parameters.EffectiveDayType == PdsMRCEffectiveDateBasis::CurrentDate)
        {
            effectiveDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            effectiveDate = salesLine.deliveryDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the MRCCustomerHistory table with the
    /// information from the current purchline
    /// </summary>
    /// <returns>Returns whether or not the history record was
    /// able to be inserted without error.</returns>
    protected boolean updateHistory()
    {
        PdsMRCCustomerHistory history;

        history = PdsMRCCustomerHistory::find(
            salesLine.CustAccount,
            salesLine.SalesId,
            salesLine.ItemId,
            activeDocument.DocumentId,
            true);

        history.Customer    = salesLine.CustAccount;
        history.ItemId      = salesLine.ItemId;
        history.SalesId     = salesLine.SalesId;
        history.DocumentId  = activeDocument.DocumentId;
        history.bomId       = activeDocument.bomid;
        history.CountryId   = activeDocument.CountryId;
        history.LanguageId  = activeDocument.Language;

        history.LastSent    = PdsMRCCustomerHistory::findLastSentDate(
                                                        salesLine.CustAccount,
                                                        salesLine.ItemId,
                                                        activeDocument.DocumentId,
                                                        false);
        if (!history.LastSent)
        {
            history.LastSent = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        try
        {
            if (history.RecId)
            {
                ttsbegin;
                history.update();
                ttscommit;
            }
            else
            {
                history.insert();
            }
        }
        catch (Exception::Error)
        {
            if (history.RecId)
            {
                ttsabort;
            }
            return checkFailed("@PDS909");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningOnExpiry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Issues a warning if Regulation warning on sales lines is set on the MRC parameters.
    /// </summary>
    /// <param name="_ignoreParameters">Should the
    /// MRC parameters to issue warning be ignored?
    /// </param>
    protected void warningOnExpiry(boolean _ignoreParameters = false)
    {
        if (parameters.RegulationWarningOnSales || _ignoreParameters)
        {
            warning("@PDS911");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasDocumentSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether or not the document was sent.
    /// </summary>
    /// <param name="_docId">Document to check if sent.</param>
    /// <returns>result of check in MRCCustomerHistoryTable for
    /// document with DocumentId of _docId.  True if found, otherwise
    /// false.</returns>
    protected boolean wasDocumentSent(PdsMRCDocumentId _docId)
    {
        PdsMRCCustomerHistory history;

        history = PdsMRCCustomerHistory::find(salesLine.CustAccount,
            salesLine.SalesId,
            salesLine.ItemId,
            _docId);

        if (history.RecId && history.LastSent)
        {
            lastSent = history.LastSent;
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasMinorDocumentSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether or not and minor documents have been sent.
    /// </summary>
    /// <param name="_docId">Document to check if sent.</param>
    /// <returns>result of check in MRCDocument and MRCCustomerHistoryTable for
    /// document with DocumentId of _docId and for a minor version.  True if found, otherwise
    /// false.</returns>
    protected boolean wasMinorDocumentSent(PdsMRCDocumentId _docId)
    {
        PdsMRCCustomerHistory   history;
        PdsMRCDocument          minorDoc;
        PdsMRCDocument          majorDoc;
        boolean                 ret = false;

        majorDoc = PdsMRCDocument::find(_docId);

        while select DocumentId
            from minorDoc
            order by MinorVersion desc
            where  minorDoc.ItemId          == majorDoc.ItemId
                && minorDoc.CountryId       == majorDoc.CountryId
                && minorDoc.Language        == majorDoc.Language
                && minorDoc.bomid           == majorDoc.bomid
                && minorDoc.MajorVersion    == majorDoc.MajorVersion
                && minorDoc.MinorVersion    <  majorDoc.MinorVersion
        {
            history = PdsMRCCustomerHistory::find(salesLine.CustAccount,
                salesLine.SalesId,
                salesLine.ItemId,
                minorDoc.DocumentId);
            if (history.RecId)
            {
                lastSent = history.LastSent;
                ret = true;
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    public static PdsMRCRegulated_Sales construct()
    {
        return new PdsMRCRegulated_Sales();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>