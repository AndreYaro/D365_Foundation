<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceCompareStorageService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemPriceCompareStorageService</c> class provides the service operation for generating item price comparisons.
/// </summary>
public final class InventItemPriceCompareStorageService
{
    private Query                                   query;
    private createdTransactionId                    transactionId;
    private InventItemPriceCompareContract          contract;
     
    private CostingVersion                          costingVersion;
    private CostingVersion                          compareToCostingVersion;
    private InventItemPriceCompare                  inventItemPriceCompare, inventItemPriceCompareTo;
    private InventItemPriceCompareStorageDetails    inventItemPriceCompareResult;
    private InventCostLevel                         detailCostLevel;

    private static boolean isInventItemPriceComparePerformanceFlightEnabled = InventItemPriceComparePerformanceFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCreatedTransactionId</Name>
				<Source><![CDATA[
    public createdTransactionId parmCreatedTransactionId(createdTransactionId _transactionId = transactionId)
    {
        transactionId = _transactionId;
        return transactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    private Query parmQuery(Query _query = query)
    {
        query = _query;
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataContract</Name>
				<Source><![CDATA[
    private InventItemPriceCompareContract parmDataContract(InventItemPriceCompareContract _dataContract = contract)
    {
        contract = _dataContract;
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the data provider should compare the total.
    /// </summary>
    /// <returns>
    /// true if the data provider should compare the total; otherwise, false.
    /// </returns>
    protected boolean compareTotal()
    {
        return !(costingVersion.CostingType == CostingVersionCostingType::Standard
                && (compareToCostingVersion.CostingType == CostingVersionCostingType::Standard
                    || contract.parmCompareTo() == CostingVersionCompareTo::Active)
                && contract.parmComparePriceType() == CostingVersionPriceType::Cost
                && (contract.parmCompareLevel() == InventItemPriceCompareLevel::CostGroupType
                    || contract.parmCompareLevel() == InventItemPriceCompareLevel::CostGroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractHasRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the contract has a range on a table.
    /// </summary>
    /// <returns>
    /// true if the contract has a range on the table; otherwise, false.
    /// </returns>
    protected boolean contractHasRange()
    {
        return SysQueryRangeUtil::queryHasRange(contract.parmQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertComparePrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the prices to compare into the temporary table inventItemPriceCompare.
    /// </summary>
    private void insertComparePrices()
    {
        InventItemPriceSim inventItemPriceSim;
        InventDim inventDim;

        if (this.contractHasRange())
        {
            QueryBuildDataSource dataSource = query.dataSourceTable(tableNum(InventItemPriceSim));
            dataSource.addRange(fieldNum(InventItemPriceSim, PriceType)).value(queryValue(contract.parmComparePriceType()));
            dataSource.addRange(fieldNum(InventItemPriceSim, VersionId)).value(queryValue(contract.parmCompareVersionId()));
            dataSource.addRange(fieldNum(InventItemPriceSim, FromDate)).value(queryRange(dateNull(), contract.parmCompareDate()));

            QueryRun queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                inventItemPriceSim = queryRun.get(tableNum(InventItemPriceSim));
                inventItemPriceCompare.ItemId = inventItemPriceSim.ItemId;
                inventItemPriceCompare.InventDimId = inventItemPriceSim.InventDimId;
                inventItemPriceCompare.PriceType = inventItemPriceSim.PriceType;
                inventItemPriceCompare.FromDate = inventItemPriceSim.FromDate;
                if (isInventItemPriceComparePerformanceFlightEnabled)
                {
                    inventDim = InventDim::find(inventItemPriceSim.InventDimId);
                    inventItemPriceCompare.configId = inventDim.configId;
                    inventItemPriceCompare.InventSizeId = inventDim.InventSizeId;
                    inventItemPriceCompare.InventColorId = inventDim.InventColorId;
                    inventItemPriceCompare.InventStyleId = inventDim.InventStyleId;
                    inventItemPriceCompare.InventVersionId = inventDim.InventVersionId;
                    inventItemPriceCompare.InventSiteId = inventDim.InventSiteId;
                }
                inventItemPriceCompare.insert();
            }
        }
        else
        {
            if (isInventItemPriceComparePerformanceFlightEnabled)
            {
                insert_recordset inventItemPriceCompare (ItemId, InventDimId, PriceType, FromDate, configId, InventSizeId, InventColorId, InventStyleId, InventVersionId, InventSiteId)
                    select ItemId, InventDimId, PriceType, maxof(FromDate)
                    from inventItemPriceSim
                    group by ItemId, InventDimId, PriceType
                    where inventItemPriceSim.PriceType == contract.parmComparePriceType()
                       && inventItemPriceSim.VersionId == contract.parmCompareVersionId()
                       && inventItemPriceSim.FromDate <= contract.parmCompareDate()
                    join configId, InventSizeId, InventColorId, InventStyleId, InventVersionId, InventSiteId
                        from inventDim
                        group by configId, InventSizeId, InventColorId, InventStyleId, InventVersionId, InventSiteId
                        where inventDim.inventDimId == inventItemPriceSim.InventDimId;
            }
            else
            {
                insert_recordset inventItemPriceCompare (ItemId, InventDimId, PriceType, FromDate)
                    select ItemId, InventDimId, PriceType, maxof(FromDate)
                        from inventItemPriceSim
                    group by ItemId, InventDimId, PriceType
                    where inventItemPriceSim.PriceType == contract.parmComparePriceType()
                       && inventItemPriceSim.VersionId == contract.parmCompareVersionId()
                       && inventItemPriceSim.FromDate <= contract.parmCompareDate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareResultForActivePrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the compare results for active prices into the temporary table <c>inventItemPriceCompareResult</c>.
    /// </summary>
    private void insertCompareResultForActivePrices()
    {
        if (this.compareTotal())
        {
            InventItemPriceSimView          inventItemPriceSim;
            InventItemPriceView             inventItemPrice;
            InventItemPriceCompareItemView  inventItemPriceCompareItemView;

            insert_recordset inventItemPriceCompareResult(
                    ItemId, InventDimId,
                    FromDate, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup, UnitID, CostCalculationMethod,
                    CompareToFromDate, CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, CompareToUnitID, CompareToCostCalculationMethod,
                    ItemName, DefaultOrderType)
                select ItemId, InventDimId
                from inventItemPriceCompare
                    join FromDate, Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                        from inventItemPriceSim
                            where inventItemPriceSim.VersionId      == contract.parmCompareVersionId()
                               && inventItemPriceSim.ItemId         == inventItemPriceCompare.ItemId
                               && inventItemPriceSim.InventDimId    == inventItemPriceCompare.InventDimId
                               && inventItemPriceSim.PriceType      == inventItemPriceCompare.PriceType
                               && inventItemPriceSim.FromDate       == inventItemPriceCompare.FromDate
                    join inventItemPriceCompareTo
                        where inventItemPriceCompareTo.ItemId       == inventItemPriceCompare.ItemId
                           && inventItemPriceCompareTo.InventDimId  == inventItemPriceCompare.InventDimId
                           && inventItemPriceCompareTo.PriceType    == inventItemPriceCompare.PriceType
                            join ActivationDate, Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                                from inventItemPrice
                                    where inventItemPrice.ItemId            == inventItemPriceCompareTo.ItemId
                                       && inventItemPrice.InventDimId       == inventItemPriceCompareTo.InventDimId
                                       && inventItemPrice.PriceType         == inventItemPriceCompareTo.PriceType
                                       && inventItemPrice.ActivationDate    == inventItemPriceCompareTo.FromDate
                                       && inventItemPrice.CreatedDateTime1  == inventItemPriceCompareTo.ActivatedDataTime
                    join Name, DefaultOrderType
                        from inventItemPriceCompareItemView
                            where inventItemPriceCompareItemView.ItemId == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareItemView.ItemDataAreaId == inventItemPriceCompare.DataAreaId;
        }
        else
        {
            this.insertCompareResultForActiveRollup();
            this.insertCompareResultForActiveRollupNX();
            this.insertCompareResultForActiveRollupNXTo();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareResultForActiveRollup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts compare result for active rollup where rollup exists for compare and compare to.
    /// </summary>
    private void insertCompareResultForActiveRollup()
    {
        InventItemPriceSimView              inventItemPriceSim;
        InventItemCostGroupRollupSimView    inventItemCostGroupRollupSim;
        InventItemPriceView                 inventItemPrice;
        InventItemCostGroupRollupView       inventItemCostGroupRollup;
        InventItemPriceCompareItemView      inventItemPriceCompareItemView;

        insert_recordset inventItemPriceCompareResult(
                ItemId, InventDimId,
                FromDate, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup, UnitID, CostCalculationMethod,
                CostGroupId, UnitPrice, CostGroupType, CostLevel,
                CompareToFromDate, CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, CompareToUnitID, CompareToCostCalculationMethod,
                CompareToUnitPrice,
                ItemName, DefaultOrderType)
            select ItemId, InventDimId
                from inventItemPriceCompare
                    join FromDate, Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                        from inventItemPriceSim
                            where inventItemPriceSim.VersionId      == contract.parmCompareVersionId()
                               && inventItemPriceSim.ItemId         == inventItemPriceCompare.ItemId
                               && inventItemPriceSim.InventDimId    == inventItemPriceCompare.InventDimId
                               && inventItemPriceSim.PriceType      == inventItemPriceCompare.PriceType
                               && inventItemPriceSim.FromDate       == inventItemPriceCompare.FromDate
                    join CostGroupId, UnitPrice, CostGroupType, detailCostLevel
                        from inventItemCostGroupRollupSim
                             where inventItemCostGroupRollupSim.InventItemPriceSimRefRecId == inventItemPriceSim.RecId
                    join inventItemPriceCompareTo
                        where inventItemPriceCompareTo.ItemId       == inventItemPriceCompare.ItemId
                           && inventItemPriceCompareTo.InventDimId  == inventItemPriceCompare.InventDimId
                           && inventItemPriceCompareTo.PriceType    == inventItemPriceCompare.PriceType
                            join ActivationDate, Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                                from inventItemPrice
                                    where inventItemPrice.ItemId            == inventItemPriceCompareTo.ItemId
                                       && inventItemPrice.InventDimId       == inventItemPriceCompareTo.InventDimId
                                       && inventItemPrice.PriceType         == inventItemPriceCompareTo.PriceType
                                       && inventItemPrice.ActivationDate    == inventItemPriceCompareTo.FromDate
                                       && inventItemPrice.CreatedDateTime1  == inventItemPriceCompareTo.ActivatedDataTime
                                        join UnitPrice
                                            from inventItemCostGroupRollup
                                                where inventItemCostGroupRollup.InventItemPriceRefRecId == inventItemPrice.RecId
                                                   && inventItemCostGroupRollup.CostGroupId             == inventItemCostGroupRollupSim.CostGroupId
                    join Name, DefaultOrderType
                        from inventItemPriceCompareItemView
                            where inventItemPriceCompareItemView.ItemId == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareItemView.ItemDataAreaId == inventItemPriceCompare.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareResultForActiveRollupNX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts compare result for active rollup where rollup doesn't exist for compare.
    /// </summary>
    private void insertCompareResultForActiveRollupNX()
    {
        InventItemPriceSimView              inventItemPriceSim;
        InventItemCostGroupRollupSimView    inventItemCostGroupRollupSim;
        InventItemPriceView                 inventItemPrice;
        InventItemCostGroupRollupView       inventItemCostGroupRollup;
        InventItemPriceCompareItemView      inventItemPriceCompareItemView;

        insert_recordset inventItemPriceCompareResult(
                ItemId, InventDimId, FromDate, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup, UnitID, CostCalculationMethod,
                CompareToFromDate, CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, CompareToUnitID, CompareToCostCalculationMethod,
                CostGroupId, CompareToUnitPrice,
                CostGroupType, CostLevel,
                ItemName, DefaultOrderType)
            select ItemId, InventDimId, FromDate
                from inventItemPriceCompare
                    join Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                        from inventItemPriceSim
                            where inventItemPriceSim.VersionId      == contract.parmCompareVersionId()
                               && inventItemPriceSim.ItemId         == inventItemPriceCompare.ItemId
                               && inventItemPriceSim.InventDimId    == inventItemPriceCompare.InventDimId
                               && inventItemPriceSim.PriceType      == inventItemPriceCompare.PriceType
                               && inventItemPriceSim.FromDate       == inventItemPriceCompare.FromDate
                        join inventItemPriceCompareTo
                            where inventItemPriceCompareTo.ItemId       == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareTo.InventDimId  == inventItemPriceCompare.InventDimId
                               && inventItemPriceCompareTo.PriceType    == inventItemPriceCompare.PriceType
                                join ActivationDate, Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                                    from inventItemPrice
                                        where inventItemPrice.ItemId            == inventItemPriceCompareTo.ItemId
                                           && inventItemPrice.InventDimId       == inventItemPriceCompareTo.InventDimId
                                           && inventItemPrice.PriceType         == inventItemPriceCompareTo.PriceType
                                           && inventItemPrice.ActivationDate    == inventItemPriceCompareTo.FromDate
                                           && inventItemPrice.CreatedDateTime1  == inventItemPriceCompareTo.ActivatedDataTime
                                            join CostGroupId, UnitPrice, CostGroupType, detailCostLevel
                                                from inventItemCostGroupRollup
                                                    where inventItemCostGroupRollup.InventItemPriceRefRecId == inventItemPrice.RecId
                    join Name, DefaultOrderType
                        from inventItemPriceCompareItemView
                            where inventItemPriceCompareItemView.ItemId == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareItemView.ItemDataAreaId == inventItemPriceCompare.DataAreaId
                    notexists join inventItemCostGroupRollupSim
                        where inventItemCostGroupRollupSim.InventItemPriceSimRefRecId == inventItemPriceSim.RecId
                           && inventItemCostGroupRollupSim.CostGroupId                == inventItemCostGroupRollup.CostGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareResultForActiveRollupNXTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts compare result for active rollup where rollup doesn't exist for compare to.
    /// </summary>
    private void insertCompareResultForActiveRollupNXTo()
    {
        InventItemPriceSimView              inventItemPriceSim;
        InventItemCostGroupRollupSimView    inventItemCostGroupRollupSim;
        InventItemPriceView                 inventItemPrice;
        InventItemCostGroupRollupView       inventItemCostGroupRollup;
        InventItemPriceCompareItemView      inventItemPriceCompareItemView;

        insert_recordset inventItemPriceCompareResult(
                ItemId, InventDimId, FromDate,
                Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup, UnitID, CostCalculationMethod,
                CostGroupId, UnitPrice, CostGroupType, CostLevel,
                CompareToFromDate, CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, CompareToUnitID, CompareToCostCalculationMethod,
                ItemName, DefaultOrderType)
            select ItemId, InventDimId, FromDate
                from inventItemPriceCompare
                    join Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                        from inventItemPriceSim
                            where inventItemPriceSim.VersionId      == contract.parmCompareVersionId()
                               && inventItemPriceSim.ItemId         == inventItemPriceCompare.ItemId
                               && inventItemPriceSim.InventDimId    == inventItemPriceCompare.InventDimId
                               && inventItemPriceSim.PriceType      == inventItemPriceCompare.PriceType
                               && inventItemPriceSim.FromDate       == inventItemPriceCompare.FromDate
                                join CostGroupId, UnitPrice, CostGroupType, detailCostLevel
                                    from inventItemCostGroupRollupSim
                                        where inventItemCostGroupRollupSim.InventItemPriceSimRefRecId == inventItemPriceSim.RecId
                    join inventItemPriceCompareTo
                    where inventItemPriceCompareTo.ItemId       == inventItemPriceCompare.ItemId
                       && inventItemPriceCompareTo.InventDimId  == inventItemPriceCompare.InventDimId
                       && inventItemPriceCompareTo.PriceType    == inventItemPriceCompare.PriceType
                        join ActivationDate, Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                            from inventItemPrice
                                where inventItemPrice.ItemId            == inventItemPriceCompareTo.ItemId
                                   && inventItemPrice.InventDimId       == inventItemPriceCompareTo.InventDimId
                                   && inventItemPrice.PriceType         == inventItemPriceCompareTo.PriceType
                                   && inventItemPrice.ActivationDate    == inventItemPriceCompareTo.FromDate
                                   && inventItemPrice.CreatedDateTime1  == inventItemPriceCompareTo.ActivatedDataTime

                    join Name, DefaultOrderType
                        from inventItemPriceCompareItemView
                            where inventItemPriceCompareItemView.ItemId == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareItemView.ItemDataAreaId == inventItemPriceCompare.DataAreaId
                    notexists join inventItemCostGroupRollup
                        where inventItemCostGroupRollup.InventItemPriceRefRecId == inventItemPrice.RecId
                           && inventItemCostGroupRollup.CostGroupId             == inventItemCostGroupRollupSim.CostGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareResultForNonExistingPrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the compare results for non-existing prices into the temporary table inventItemPriceCompareResult.
    /// </summary>
    private void insertCompareResultForNonExistingPrices()
    {
        InventItemPriceSimView              inventItemPriceSim;
        InventItemCostGroupRollupSimView    inventItemCostGroupRollupSim;
        InventItemPriceCompareItemView      inventItemPriceCompareItemView;
        PriceUnit                           defaultPriceUnit = 1.0;
        PriceQty                            defaultPriceQty = 1.0;

        if (this.compareTotal())
        {
            insert_recordset inventItemPriceCompareResult(
                    ItemId, InventDimId, FromDate, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup, UnitID, CostCalculationMethod,
                    CompareToPriceUnit, CompareToMarkupQty,
                    ItemName, DefaultOrderType)
                select ItemId, InventDimId, FromDate
                    from inventItemPriceCompare
                        join Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                            from inventItemPriceSim
                                where inventItemPriceSim.VersionId      == contract.parmCompareVersionId()
                                   && inventItemPriceSim.ItemId         == inventItemPriceCompare.ItemId
                                   && inventItemPriceSim.InventDimId    == inventItemPriceCompare.InventDimId
                                   && inventItemPriceSim.PriceType      == inventItemPriceCompare.PriceType
                                   && inventItemPriceSim.FromDate       == inventItemPriceCompare.FromDate
                        join defaultPriceUnit, defaultPriceQty, Name, DefaultOrderType
                            from inventItemPriceCompareItemView
                                where inventItemPriceCompareItemView.ItemId == inventItemPriceCompare.ItemId
                                   && inventItemPriceCompareItemView.ItemDataAreaId == inventItemPriceCompare.DataAreaId
                        notexists join inventItemPriceCompareTo
                            where inventItemPriceCompareTo.ItemId       == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareTo.InventDimId  == inventItemPriceCompare.InventDimId
                               && inventItemPriceCompareTo.PriceType    == inventItemPriceCompare.PriceType;
        }
        else
        {
            insert_recordset inventItemPriceCompareResult(
                    ItemId, InventDimId, FromDate, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup, UnitID, CostCalculationMethod,
                    CostGroupId, UnitPrice, CostGroupType, CostLevel,
                    CompareToPriceUnit, CompareToMarkupQty,
                    ItemName, DefaultOrderType)
            select ItemId, InventDimId, FromDate
                from inventItemPriceCompare
                    join Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                        from inventItemPriceSim
                            where inventItemPriceSim.VersionId      == contract.parmCompareVersionId()
                               && inventItemPriceSim.ItemId         == inventItemPriceCompare.ItemId
                               && inventItemPriceSim.InventDimId    == inventItemPriceCompare.InventDimId
                               && inventItemPriceSim.PriceType      == inventItemPriceCompare.PriceType
                               && inventItemPriceSim.FromDate       == inventItemPriceCompare.FromDate
                                join CostGroupId, UnitPrice, CostGroupType, detailCostLevel
                                    from inventItemCostGroupRollupSim
                                        where inventItemCostGroupRollupSim.InventItemPriceSimRefRecId == inventItemPriceSim.RecId
                    join defaultPriceUnit, defaultPriceQty, Name, DefaultOrderType
                        from inventItemPriceCompareItemView
                            where inventItemPriceCompareItemView.ItemId == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareItemView.ItemDataAreaId == inventItemPriceCompare.DataAreaId
                    notexists join inventItemPriceCompareTo
                        where inventItemPriceCompareTo.ItemId       == inventItemPriceCompare.ItemId
                           && inventItemPriceCompareTo.InventDimId  == inventItemPriceCompare.InventDimId
                           && inventItemPriceCompareTo.PriceType    == inventItemPriceCompare.PriceType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareResultForSimRollup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts compare result for active rollup where rollup exists for compare and compare to.
    /// </summary>
    private void insertCompareResultForSimRollup()
    {
        InventItemPriceSimView              inventItemPriceSim, inventItemPriceSimTo;
        inventItemCostGroupRollupSimView    inventItemCostGroupRollupSim, inventItemCostGroupRollupSimTo;
        InventItemPriceCompareItemView      inventItemPriceCompareItemView;

        insert_recordset inventItemPriceCompareResult(
                ItemId, InventDimId, FromDate, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup, UnitID, CostCalculationMethod,
                CostGroupId, UnitPrice, CostGroupType, CostLevel,
                CompareToFromDate, CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, CompareToUnitID, CompareToCostCalculationMethod,
                CompareToUnitPrice,
                ItemName, DefaultOrderType)
            select ItemId, InventDimId, FromDate
                from inventItemPriceCompare
                    join Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                        from inventItemPriceSim
                            where inventItemPriceSim.VersionId      == contract.parmCompareVersionId()
                               && inventItemPriceSim.ItemId         == inventItemPriceCompare.ItemId
                               && inventItemPriceSim.InventDimId    == inventItemPriceCompare.InventDimId
                               && inventItemPriceSim.PriceType      == inventItemPriceCompare.PriceType
                               && inventItemPriceSim.FromDate       == inventItemPriceCompare.FromDate
                               join CostGroupId, UnitPrice, CostGroupType, detailCostLevel
                                    from inventItemCostGroupRollupSim
                                        where inventItemCostGroupRollupSim.InventItemPriceSimRefRecId == inventItemPriceSim.RecId
                    join inventItemPriceCompareTo
                        where inventItemPriceCompareTo.ItemId       == inventItemPriceCompare.ItemId
                           && inventItemPriceCompareTo.InventDimId  == inventItemPriceCompare.InventDimId
                           && inventItemPriceCompareTo.PriceType    == inventItemPriceCompare.PriceType
                            join FromDate, Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                                from inventItemPriceSimTo
                                    where inventItemPriceSimTo.VersionId         == contract.parmCompareToVersionId()
                                       && inventItemPriceSimTo.ItemId            == inventItemPriceCompareTo.ItemId
                                       && inventItemPriceSimTo.InventDimId       == inventItemPriceCompareTo.InventDimId
                                       && inventItemPriceSimTo.PriceType         == inventItemPriceCompareTo.PriceType
                                       && inventItemPriceSimTo.FromDate          == inventItemPriceCompareTo.FromDate
                                        join UnitPrice
                                            from inventItemCostGroupRollupSimTo
                                                where inventItemCostGroupRollupSimTo.InventItemPriceSimRefRecId == inventItemPriceSimTo.RecId
                                                   && inventItemCostGroupRollupSimTo.CostGroupId                == inventItemCostGroupRollupSim.CostGroupId
                    join Name, DefaultOrderType
                        from inventItemPriceCompareItemView
                            where inventItemPriceCompareItemView.ItemId == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareItemView.ItemDataAreaId == inventItemPriceCompare.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareResultForSimRollupNX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts compare result for active rollup where rollup doesn't exist for compare.
    /// </summary>
    private void insertCompareResultForSimRollupNX()
    {
        InventItemPriceSimView              inventItemPriceSim, inventItemPriceSimTo;
        InventItemCostGroupRollupSimView    inventItemCostGroupRollupSim, inventItemCostGroupRollupSimTo;
        InventItemPriceCompareItemView      inventItemPriceCompareItemView;

        insert_recordset inventItemPriceCompareResult(
                ItemId, InventDimId, FromDate, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup, UnitID, CostCalculationMethod,
                CompareToFromDate, CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, CompareToUnitID, CompareToCostCalculationMethod,
                CostGroupId, CompareToUnitPrice, CostGroupType, CostLevel,
                ItemName, DefaultOrderType)
            select ItemId, InventDimId, FromDate
                from inventItemPriceCompare
                    join PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                        from inventItemPriceSim
                            where inventItemPriceSim.VersionId      == contract.parmCompareVersionId()
                               && inventItemPriceSim.ItemId         == inventItemPriceCompare.ItemId
                               && inventItemPriceSim.InventDimId    == inventItemPriceCompare.InventDimId
                               && inventItemPriceSim.PriceType      == inventItemPriceCompare.PriceType
                               && inventItemPriceSim.FromDate       == inventItemPriceCompare.FromDate
                    join inventItemPriceCompareTo
                        where inventItemPriceCompareTo.ItemId       == inventItemPriceCompare.ItemId
                           && inventItemPriceCompareTo.InventDimId  == inventItemPriceCompare.InventDimId
                           && inventItemPriceCompareTo.PriceType    == inventItemPriceCompare.PriceType
                            join FromDate, Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                                from inventItemPriceSimTo
                                    where inventItemPriceSimTo.VersionId    == contract.parmCompareToVersionId()
                                       && inventItemPriceSimTo.ItemId       == inventItemPriceCompareTo.ItemId
                                       && inventItemPriceSimTo.InventDimId  == inventItemPriceCompareTo.InventDimId
                                       && inventItemPriceSimTo.PriceType    == inventItemPriceCompareTo.PriceType
                                       && inventItemPriceSimTo.FromDate     == inventItemPriceCompareTo.FromDate
                                        join CostGroupId, UnitPrice, CostGroupType, detailCostLevel
                                            from inventItemCostGroupRollupSimTo
                                                where inventItemCostGroupRollupSimTo.InventItemPriceSimRefRecId == inventItemPriceSimTo.RecId
                    join Name, DefaultOrderType
                        from inventItemPriceCompareItemView
                            where inventItemPriceCompareItemView.ItemId == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareItemView.ItemDataAreaId == inventItemPriceCompare.DataAreaId
                    notexists join inventItemCostGroupRollupSim
                        where inventItemCostGroupRollupSim.InventItemPriceSimRefRecId == inventItemPriceSim.RecId
                           && inventItemCostGroupRollupSim.CostGroupId                == inventItemCostGroupRollupSimTo.CostGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareResultForSimRollupNXTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts compare result for active rollup where rollup doesn't exist for compare to.
    /// </summary>
    private void insertCompareResultForSimRollupNXTo()
    {
        InventItemPriceSimView              inventItemPriceSim, inventItemPriceSimTo;
        inventItemCostGroupRollupSimView    inventItemCostGroupRollupSim, inventItemCostGroupRollupSimTo;
        InventItemPriceCompareItemView      inventItemPriceCompareItemView;

        insert_recordset inventItemPriceCompareResult(
                ItemId, InventDimId, FromDate,
                Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup, UnitID, CostCalculationMethod,
                CostGroupId, UnitPrice,
                CostGroupType, CostLevel,
                CompareToFromDate, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, CompareToUnitID, CompareToCostCalculationMethod,
                ItemName, DefaultOrderType)
            select ItemId, InventDimId, FromDate
                from inventItemPriceCompare
                    join Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                        from inventItemPriceSim
                            where inventItemPriceSim.VersionId      == contract.parmCompareVersionId()
                               && inventItemPriceSim.ItemId         == inventItemPriceCompare.ItemId
                               && inventItemPriceSim.InventDimId    == inventItemPriceCompare.InventDimId
                               && inventItemPriceSim.PriceType      == inventItemPriceCompare.PriceType
                               && inventItemPriceSim.FromDate       == inventItemPriceCompare.FromDate
                                join CostGroupId, UnitPrice, CostGroupType, detailCostLevel
                                    from inventItemCostGroupRollupSim
                                        where inventItemCostGroupRollupSim.InventItemPriceSimRefRecId == inventItemPriceSim.RecId
                    join inventItemPriceCompareTo
                        where inventItemPriceCompareTo.ItemId       == inventItemPriceCompare.ItemId
                           && inventItemPriceCompareTo.InventDimId  == inventItemPriceCompare.InventDimId
                           && inventItemPriceCompareTo.PriceType    == inventItemPriceCompare.PriceType
                            join FromDate, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                                from inventItemPriceSimTo
                                    where inventItemPriceSimTo.VersionId         == contract.parmCompareToVersionId()
                                       && inventItemPriceSimTo.ItemId            == inventItemPriceCompareTo.ItemId
                                       && inventItemPriceSimTo.InventDimId       == inventItemPriceCompareTo.InventDimId
                                       && inventItemPriceSimTo.PriceType         == inventItemPriceCompareTo.PriceType
                                       && inventItemPriceSimTo.FromDate          == inventItemPriceCompareTo.FromDate
                    join Name, DefaultOrderType
                        from inventItemPriceCompareItemView
                            where inventItemPriceCompareItemView.ItemId == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareItemView.ItemDataAreaId == inventItemPriceCompare.DataAreaId
                    notexists join inventItemCostGroupRollupSimTo
                        where inventItemCostGroupRollupSimTo.InventItemPriceSimRefRecId == inventItemPriceSimTo.RecId
                           && inventItemCostGroupRollupSimTo.CostGroupId                == inventItemCostGroupRollupSim.CostGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareResultForSimulatedPrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the compare results for simulated prices into the temporary table inventItemPriceCompareResult.
    /// </summary>
    private void insertCompareResultForSimulatedPrices()
    {
        if (this.compareTotal())
        {
            InventItemPriceSimView          inventItemPriceSim, inventItemPriceSimCompare;
            InventItemPriceCompareItemView  inventItemPriceCompareItemView;

            insert_recordset inventItemPriceCompareResult(
                    ItemId, InventDimId, FromDate, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup, UnitID, CostCalculationMethod,
                    CompareToFromDate, CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, CompareToUnitID, CompareToCostCalculationMethod,
                    ItemName, DefaultOrderType)
                select ItemId, InventDimId, FromDate
                    from inventItemPriceCompare
                        join Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                            from inventItemPriceSim
                                where inventItemPriceSim.VersionId      == contract.parmCompareVersionId()
                                   && inventItemPriceSim.ItemId         == inventItemPriceCompare.ItemId
                                   && inventItemPriceSim.InventDimId    == inventItemPriceCompare.InventDimId
                                   && inventItemPriceSim.PriceType      == inventItemPriceCompare.PriceType
                                   && inventItemPriceSim.FromDate       == inventItemPriceCompare.FromDate
                        join inventItemPriceCompareTo
                            where inventItemPriceCompareTo.ItemId       == inventItemPriceCompare.ItemId
                               && inventItemPriceCompareTo.InventDimId  == inventItemPriceCompare.InventDimId
                               && inventItemPriceCompareTo.PriceType    == inventItemPriceCompare.PriceType
                                join FromDate, Price, PriceUnit, Markup, PriceQty, PriceAllocateMarkup, UnitID, CostCalculationMethod
                                    from inventItemPriceSimCompare
                                        where inventItemPriceSimCompare.VersionId         == contract.parmCompareToVersionId()
                                           && inventItemPriceSimCompare.ItemId            == inventItemPriceCompareTo.ItemId
                                           && inventItemPriceSimCompare.InventDimId       == inventItemPriceCompareTo.InventDimId
                                           && inventItemPriceSimCompare.PriceType         == inventItemPriceCompareTo.PriceType
                                           && inventItemPriceSimCompare.FromDate          == inventItemPriceCompareTo.FromDate
                        join Name, DefaultOrderType
                            from inventItemPriceCompareItemView
                                where inventItemPriceCompareItemView.ItemId == inventItemPriceCompare.ItemId
                                   && inventItemPriceCompareItemView.ItemDataAreaId == inventItemPriceCompare.DataAreaId;
        }
        else
        {
            this.insertCompareResultForSimRollup();
            this.insertCompareResultForSimRollupNX();
            this.insertCompareResultForSimRollupNXTo();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareToForActivePrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts active prices to compare to into the temporary table inventItemPriceCompareTo.
    /// </summary>
    private void insertCompareToForActivePrices()
    {
        InventItemPrice         inventItemPrice;
        InventItemPriceCompare  inventItemPriceCompareToTmp;
        InventItemCostingType   inventItemCostingType = CostingVersion::convertCostingType2InventItemCostingType(costingVersion.CostingType);

        insert_recordset inventItemPriceCompareToTmp(ItemId, InventDimId, PriceType, FromDate)
            select ItemId, InventDimId, PriceType, maxof(ActivationDate)
                from inventItemPrice
            group by ItemId, InventDimId, PriceType
            where inventItemPrice.CostingType   == inventItemCostingType
               && inventItemPrice.ActivationDate <= contract.parmCompareToDate()
                exists join inventItemPriceCompare
                    where inventItemPriceCompare.ItemId        == inventItemPrice.ItemId
                       && inventItemPriceCompare.InventDimId   == inventItemPrice.InventDimId
                       && inventItemPriceCompare.PriceType     == inventItemPrice.PriceType;

        insert_recordset inventItemPriceCompareTo(ItemId, InventDimId, PriceType, FromDate, ActivatedDataTime)
            select ItemId, InventDimId, PriceType, FromDate
                from inventItemPriceCompareToTmp
            group by ItemId, InventDimId, PriceType, FromDate
                join maxof(CreatedDateTime)
                    from inventItemPrice
                        where inventItemPrice.ItemId        == inventItemPriceCompareToTmp.ItemId
                           && inventItemPrice.InventDimId   == inventItemPriceCompareToTmp.InventDimId
                           && inventItemPrice.PriceType     == inventItemPriceCompareToTmp.PriceType
                           && inventItemPrice.CostingType   == inventItemCostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompareToForSimulatedPrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts simulated prices to compare to into the temporary table inventItemPriceCompareTo.
    /// </summary>
    private void insertCompareToForSimulatedPrices()
    {
        InventItemPriceSim      inventItemPriceSim;

        insert_recordset inventItemPriceCompareTo (ItemId, InventDimId, PriceType, FromDate)
            select ItemId, InventDimId, PriceType, maxof(FromDate)
                from inventItemPriceSim
            group by ItemId, InventDimId, PriceType
            where inventItemPriceSim.VersionId == contract.parmCompareToVersionId()
               && inventItemPriceSim.FromDate <= contract.parmCompareToDate()
                join inventItemPriceCompare
                    where inventItemPriceCompare.ItemId        == inventItemPriceSim.ItemId
                        && inventItemPriceCompare.InventDimId   == inventItemPriceSim.InventDimId
                        && inventItemPriceCompare.PriceType     == inventItemPriceSim.PriceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the given data contract to generate item price comparisons.
    /// </summary>
    /// <param name = "_dataContract">The input data for which to generate the item price comparisons</param>
    public void process(InventItemPriceCompareStorageContract _dataContract)
    {
        this.parmCreatedTransactionId(appl.curTransactionId(true));
        this.parmDataContract(this.getInventItemPriceCompareContract(_dataContract));

        detailCostLevel = InventCostLevel::Multi;
        
        costingVersion = CostingVersion::find(contract.parmCompareVersionId());
        compareToCostingVersion = CostingVersion::find(contract.parmCompareToVersionId());

        this.insertComparePrices();
        if (contract.parmCompareTo() == CostingVersionCompareTo::Active)
        {
            this.insertCompareToForActivePrices();
            this.insertCompareResultForActivePrices();
        }
        else
        {
            this.insertCompareToForSimulatedPrices();
            this.insertCompareResultForSimulatedPrices();
        }
        this.insertCompareResultForNonExistingPrices();

        this.updateCalculatedFieldsOnResult();
        if (contract.parmCalculateInventory())
        {
            this.updateOnHand();
        }

        this.insertInventItemPriceCompareStorage(_dataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalculatedFieldsOnResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the calculated fields on the result.
    /// </summary>
    private void updateCalculatedFieldsOnResult()
    {
        if (this.compareTotal())
        {
            update_recordset inventItemPriceCompareResult
            setting UnitPrice = (inventItemPriceCompareResult.Price / inventItemPriceCompareResult.PriceUnit) +
                                (inventItemPriceCompareResult.PriceAllocateMarkup * inventItemPriceCompareResult.Markup / inventItemPriceCompareResult.MarkupQty),
                    CompareToUnitPrice = (inventItemPriceCompareResult.CompareToPrice / inventItemPriceCompareResult.CompareToPriceUnit) +
                                         (inventItemPriceCompareResult.CompareToPriceAllocateMarkup * inventItemPriceCompareResult.CompareToMarkup / inventItemPriceCompareResult.CompareToMarkupQty),
                    NetChange = ((inventItemPriceCompareResult.Price / inventItemPriceCompareResult.PriceUnit) +
                                 (inventItemPriceCompareResult.PriceAllocateMarkup * inventItemPriceCompareResult.Markup / inventItemPriceCompareResult.MarkupQty)) -
                                ((inventItemPriceCompareResult.CompareToPrice / inventItemPriceCompareResult.CompareToPriceUnit) +
                                 (inventItemPriceCompareResult.CompareToPriceAllocateMarkup * inventItemPriceCompareResult.CompareToMarkup / inventItemPriceCompareResult.CompareToMarkupQty)),
                    TransactionId = inventItemPriceCompareResult.CreatedTransactionId
            where inventItemPriceCompareResult.CostLevel == InventCostLevel::Total
               && inventItemPriceCompareResult.CreatedTransactionId == this.parmCreatedTransactionId();
        }
        else
        {
            update_recordset inventItemPriceCompareResult
            setting NetChange = inventItemPriceCompareResult.UnitPrice - inventItemPriceCompareResult.CompareToUnitPrice,
                    TransactionId = inventItemPriceCompareResult.CreatedTransactionId
            where inventItemPriceCompareResult.CostLevel == InventCostLevel::Multi
               && inventItemPriceCompareResult.CreatedTransactionId == this.parmCreatedTransactionId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the the on-hand quantity on the result.
    /// </summary>
    private void updateOnHand()
    {
        InventSum                       inventSum;
        InventDim                       inventDimCompare, inventDimSum;
        InventDimParm                   inventDimParm, inventDimParmAllowBlank;
        InventItemPriceCompareOnHand    inventItemPriceCompareOnHand;

        inventDimParm.initFromInventDimFieldList(InventDim::dimProductDimFieldList());
        inventDimParmAllowBlank.initFromInventDimParm(inventDimParm);
        inventDimParm.InventSiteIdFlag = NoYes::Yes;

        if (isInventItemPriceComparePerformanceFlightEnabled)
        {
            insert_recordset inventItemPriceCompareOnHand(ItemId, InventDimId, PostedQty, Received, Deducted)
                select ItemId, InventDimId
                    from inventItemPriceCompare
                    group by ItemId, InventDimId
                    join sum(PostedQty), sum(Received), sum(Deducted)
                        from inventSum
                            where inventSum.ItemId == inventItemPriceCompare.ItemId &&
                                (inventItemPriceCompare.ConfigId == inventSum.ConfigId || !inventDimParm.ConfigIdFlag || (inventDimParmAllowBlank.ConfigIdFlag && inventItemPriceCompare.ConfigId == '')) &&
                                (inventItemPriceCompare.InventSizeId == inventSum.InventSizeId || !inventDimParm.InventSizeIdFlag || (inventDimParmAllowBlank.InventSizeIdFlag && inventItemPriceCompare.InventSizeId == '')) &&
                                (inventItemPriceCompare.InventColorId == inventSum.InventColorId || !inventDimParm.InventColorIdFlag || (inventDimParmAllowBlank.InventColorIdFlag && inventItemPriceCompare.InventColorId == '')) &&
                                (inventItemPriceCompare.InventVersionId == inventSum.InventVersionId || !inventDimParm.InventVersionIdFlag || (inventDimParmAllowBlank.InventVersionIdFlag && inventItemPriceCompare.InventVersionId == '')) &&
                                (inventItemPriceCompare.InventStyleId == inventSum.InventStyleId || !inventDimParm.InventStyleIdFlag || (inventDimParmAllowBlank.InventStyleIdFlag && inventItemPriceCompare.InventStyleId == '')) &&
                                (inventItemPriceCompare.InventSiteId == inventSum.InventSiteId || !inventDimParm.InventSiteIdFlag || (inventDimParmAllowBlank.InventSiteIdFlag && inventItemPriceCompare.InventSiteId == ''));
        }
        else
        {
            insert_recordset inventItemPriceCompareOnHand(ItemId, InventDimId, PostedQty, Received, Deducted)
                select ItemId, InventDimId
                    from inventItemPriceCompare
                group by ItemId, InventDimId
                    join sum(PostedQty), sum(Received), sum(Deducted)
                        from inventSum
                            where inventSum.ItemId == inventItemPriceCompare.ItemId
                                join inventDimSum
                                    where inventDimSum.InventDimId == inventSum.InventDimId
                                        exists join inventDimCompare
                                            where (inventDimCompare.InventDimId == inventItemPriceCompare.InventDimId) &&
                                                #InventDimRanges(inventDimCompare, inventDimSum, inventDimParm, inventDimParmAllowBlank);
        }

        update_recordset inventItemPriceCompareResult
            setting InventQty = inventItemPriceCompareOnHand.PostedQty + inventItemPriceCompareOnHand.Received - inventItemPriceCompareOnHand.Deducted,
                    NetChangeOnhandValue = (inventItemPriceCompareOnHand.PostedQty + inventItemPriceCompareOnHand.Received - inventItemPriceCompareOnHand.Deducted) * inventItemPriceCompareResult.NetChange,
                    CompareToOnhandValue = (inventItemPriceCompareOnHand.PostedQty + inventItemPriceCompareOnHand.Received - inventItemPriceCompareOnHand.Deducted) * inventItemPriceCompareResult.CompareToUnitPrice,
                    OnhandValue = (inventItemPriceCompareOnHand.PostedQty + inventItemPriceCompareOnHand.Received - inventItemPriceCompareOnHand.Deducted) * inventItemPriceCompareResult.UnitPrice
            join inventItemPriceCompareOnHand
                where inventItemPriceCompareOnHand.ItemId == inventItemPriceCompareResult.ItemId
                   && inventItemPriceCompareOnHand.InventDimId == inventItemPriceCompareResult.InventDimId
                   && inventItemPriceCompareResult.CreatedTransactionId == this.parmCreatedTransactionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventItemPriceCompareStorage</Name>
				<Source><![CDATA[
    private void insertInventItemPriceCompareStorage(InventItemPriceCompareStorageContract _dataContract)
    {
        ttsbegin;

        InventItemPriceCompareStorage inventItemPriceCompareStorage;
        inventItemPriceCompareStorage.TransactionId = this.parmCreatedTransactionId();
        inventItemPriceCompareStorage.initFromContract(_dataContract);

        inventItemPriceCompareStorage.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemPriceCompareContract</Name>
				<Source><![CDATA[
    private InventItemPriceCompareContract getInventItemPriceCompareContract(InventItemPriceCompareStorageContract _dataContract)
    {
        InventItemPriceCompareContract reportContract = new InventItemPriceCompareContract();
        
        reportContract.parmCalculateInventory(_dataContract.parmCalculateInventory());
        reportContract.parmCompareDate(_dataContract.parmCompareDate());
        reportContract.parmCompareLevel(_dataContract.parmCompareLevel());
        reportContract.parmComparePriceType(_dataContract.parmComparePriceType());
        reportContract.parmCompareTo(_dataContract.parmCompareTo());
        reportContract.parmCompareToDate(_dataContract.parmCompareToDate());
        reportContract.parmCompareToVersionId(_dataContract.parmCompareToVersionId());
        reportContract.parmCompareVersionId(_dataContract.parmCompareVersionId());
        reportContract.parmQuery(this.parmQuery(new Query(SysOperationHelper::base64Decode(_dataContract.parmQuery()))));

        return reportContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>