<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISConfirmTicketCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EGAISConfirmTicketCreate_RU</c> class is used to create EGAIS confirmation tickets.
/// </summary>
public class EGAISConfirmTicketCreate_RU extends RunBase
{
    EGAISWaybillActConfirmStatus_RU confirmStatus;
    EGAISConfirmTicketNum_RU        ticketNum;
    EGAISConfirmTicketDate_RU       ticketDate;
    EGAISConfirmTicketNote_RU       note;

    DialogField                     fieldConfirmStatus;
    DialogField                     fieldTicketNum;
    DialogField                     fieldTicketDate;
    DialogField                     fieldNote;

    EGAISConfirmTicket_RU           confirmTicket;
    RefRecId                        waybillActJourRecId;

    EGAISIdentityBuilder_RU         identityBuilder;

    protected const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the last user choices can be saved and restored.
    /// </summary>
    /// <returns>
    /// true, if the last user choices can be saved and restored; false, otherwise
    /// </returns>
    protected boolean canSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTicket</Name>
				<Source><![CDATA[
    private void createTicket()
    {
        EGAISWaybillActJour_RU waybillActJour = EGAISWaybillActJour_RU::findRecId(waybillActJourRecId);

        confirmTicket.clear();
        confirmTicket.Direction                 = EGAISDocumentDirection_RU::Outgoing;
        confirmTicket.StatusIssue               = EGAISConfirmTicketStatusIssue_RU::Created;
        confirmTicket.TicketNum                 = ticketNum;
        confirmTicket.TicketDate                = ticketDate;
        confirmTicket.Identity                  = identityBuilder.getNext();
        confirmTicket.Note                      = note;
        confirmTicket.WaybillRegId              = waybillActJour.WaybillRegId;
        confirmTicket.WaybillActJour            = waybillActJour.RecId;
        confirmTicket.WaybillActConfirmStatus   = confirmStatus;
        confirmTicket.Version                   = EGAISDocumentVersion_RU::Version1;
        confirmTicket.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        fieldConfirmStatus  = dialog.addField(enumStr(EGAISWaybillActConfirmStatus_RU));
        fieldTicketNum      = dialog.addField(extendedtypestr(EGAISConfirmTicketNum_RU));
        fieldTicketDate     = dialog.addFieldValue(extendedtypestr(EGAISConfirmTicketDate_RU), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        fieldNote           = dialog.addField(extendedtypestr(EGAISConfirmTicketNote_RU));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        
        confirmStatus   = fieldConfirmStatus.value();
        ticketNum       = fieldTicketNum.value();
        ticketDate      = fieldTicketDate.value();
        note            = fieldNote.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, <c>initParmDefault</c> method
    ///    will be called. Normally, this method should not be overridden.
    /// </remarks>
    public void getLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters()
    {
        identityBuilder = new EGAISIdentityBuilder_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, waybillActJourRecId, confirmStatus, ticketNum, ticketDate, note];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaybillActJourRecId</Name>
				<Source><![CDATA[
    public RefRecId parmWaybillActJourRecId(RefRecId _waybillActJourRecId = waybillActJourRecId)
    {
        waybillActJourRecId = _waybillActJourRecId;

        return waybillActJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        SysInfoAction_MenuFunction  sysInfoAction;

        setPrefix(EGAISConfirmTicketCreate_RU::description());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsBegin;

            this.initParameters();
            this.createTicket();

            ttsCommit;

            sysInfoAction = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(EGAISConfirmTicketOutgoing_RU), MenuItemType::Display);
            sysInfoAction.parmCallerBuffer(confirmTicket);

            info(strFmt("@EGAIS:EgaisDisagreementStatementConfirmationNumberDateCreated", confirmTicket.TicketNum, confirmTicket.TicketDate), '', sysInfoAction);

        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not normally be overridden.
    /// </remarks>
    public void saveLast()
    {
        if (this.canSaveLast())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = conPeek(packedClass,1);
        boolean ret = true;

        switch (version)
        {
            case CurrentVersion:
                [version, waybillActJourRecId, confirmStatus, ticketNum, ticketDate, note] = packedClass;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean                 ret;
        EGAISWaybillActJour_RU  waybillActJour = EGAISWaybillActJour_RU::findRecId(waybillActJourRecId);

        ret = super(calledFrom);

        if (confirmStatus == EGAISWaybillActConfirmStatus_RU::None)
        {
            ret = checkFailed(strFmt("@GLS103654", "@EGAIS:ConfirmationStatus"));
        }

        if (!ticketNum)
        {
            ret = checkFailed(strFmt("@GLS103654", "@EGAIS:TicketNumber"));
        }

        if (!ticketDate)
        {
            ret = checkFailed(strFmt("@GLS103654", "@EGAIS:TicketDateConfirm"));
        }

        if (!waybillActJour)
        {
            ret = checkFailed(strFmt("@EGAIS:EgaisDisagreementStatementWithRecid", waybillActJourRecId));
        }

        if (ret && EGAISConfirmTicket_RU::exist(ticketNum, ticketDate, EGAISDocumentDirection_RU::Outgoing))
        {
            ret = checkFailed(strFmt("@EGAIS:EgaisDisagreementStatementConfirmationNumberDateExists", ticketNum, ticketDate));
        }

        if (ret && waybillActJour.StatusReceipt != EGAISWaybillActStatusReceipt_RU::Received)
        {
            ret = checkFailed(strFmt("@EGAIS:EgaisDisagreementStatementNumberDateCannotBeUpdate", waybillActJour.ActNum, waybillActJour.ActDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static EGAISConfirmTicketCreate_RU construct()
    {
        return new EGAISConfirmTicketCreate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the description of the class.
    /// </summary>
    /// <returns>
    ///    The description of the class.
    /// </returns>
    static public ClassDescription description()
    {
        return "@EGAIS:CreateEgaisDisagreementStatementConfirmation";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EGAISConfirmTicketCreate_RU runClass;
        FormDataSource formDataSource;

        if (!_args || _args.dataset() != tableNum(EGAISWaybillActJour_RU))
        {
            throw error(strFmt("@SYS25516", EGAISConfirmTicketCreate_RU::description()));
        }

        runClass = EGAISConfirmTicketCreate_RU::newFromWaybillActJour(_args.record());

        if (runClass.prompt())
        {
            runClass.runOperation();

            if (_args && _args.record() && _args.record().isFormDataSource())
            {
                formDataSource = _args.record().dataSource();

                if (formDataSource)
                {
                    formDataSource.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaybillActJour</Name>
				<Source><![CDATA[
    public static EGAISConfirmTicketCreate_RU newFromWaybillActJour(EGAISWaybillActJour_RU _waybillActJour)
    {
        EGAISConfirmTicketCreate_RU runClass = EGAISConfirmTicketCreate_RU::construct();

        runClass.parmWaybillActJourRecId(_waybillActJour.RecId);

        return runClass;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>