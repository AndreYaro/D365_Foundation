<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTmpWorkTransForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTmpWorkTransForm</c> class is helper class for form TaxTmpWorkTrans.
/// </summary>
public class TaxTmpWorkTransForm implements SysPackable
{
    Tax                     tax;

    AmountCur               taxAmountCurTotal;

    [FormObservableAttribute]
    TaxRegulationAmountCur  taxRegulationTotalCur;

    TaxRegulation           taxRegulation;
    boolean                 sourceSingleLine;
    boolean                 invoiceRegister;
    boolean                 hasTaxFromInit;
    Map                     accountTypeMap;
    str                     callerFormName;
    // <GIN>
    boolean                 isImportOrderExim;
    AmountMST               eximTaxAmountMST;
    AmountMST               eximBalanceTaxAmountMST;
    AmountMST               correctedCustomsDuty;
    AmountMST               eximTaxCorrectedAmount;
    AmountMST               eximBalanceCorrectedTaxAmount;
    TaxRegulationAmountCur  taxRegulationTotalCustoms;
    // </GIN>
    RefRecId                displayTaxSourceRecId;
    RefTableId              displayTaxSourceTableId;
    TaxAdjustmentType       selectedTaxAdjustmentType;
    boolean                 useSalesTaxAdjustments;

    [FormObservable]
    boolean                 ignoreCalculatedSalesTax;

    boolean                 useDetailTaxAdjustmentType;
    boolean                 keepSalesTaxAdjustments;
    boolean                 allowSingleLineAdjustment;
    boolean                 isCalledFromSalesParmLines;
    // <GEEU>
    VatDueDate_W            dateOfVATRegister;
    CurrencyExchangeRate    salesTaxExchangeRate;
    // </GEEU>

    private CurrencyExchangeRate salesTaxExchangeRateRep;
    private Map taxSpecificExchangeRateMap;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        taxAmountCurTotal,
        taxRegulationTotalCur,
        sourceSingleLine,
        invoiceRegister,
        hasTaxFromInit,
        callerFormName
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustTotalCustomsTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initiates customs duty allocation.
    /// </summary>
    public void adjustTotalCustomsTax_IN()
    {
        taxRegulation.customsAllocateAmount_IN(abs(taxRegulationTotalCustoms), abs(taxRegulationTotalCur));
        taxRegulation.saveTaxRegulation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTotalTax</Name>
				<Source><![CDATA[
    public void adjustTotalTax(TableId _tableId, Common _record)
    {
        taxRegulation.allocateAmount(taxRegulationTotalCur);

        switch (_tableId)
        {
            case tableNum(SalesTable):
               this.updateSalesTableEstimated(_record as SalesTable);
               break;

            case tableNum(VendInvoiceInfoTable):
                VendInvoiceInfoTable vendInvoiceInfoTableLoc = _record as VendInvoiceInfoTable;
                this.updatePurchInvoiceVarianceApproved(vendInvoiceInfoTableLoc);
                if (vendInvoiceInfoTableLoc)
                {   // Reset match status to Not performed (Unknown)
                    vendInvoiceInfoTableLoc.selectForUpdate(true);
                    ttsbegin;
                    vendInvoiceInfoTableLoc.LastMatchVariance = LastMatchVarianceOptions::Unknown;
                    vendInvoiceInfoTableLoc.doUpdate();
                    ttscommit;
                }
                break;

            default:
                break;
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTaxSpecificExchRatesWithNewVATDueDate</Name>
				<Source><![CDATA[
    internal void applyTaxSpecificExchRatesWithNewVATDueDate(VatDueDate_W _dateOfVATRegister, Map _exchRateMap)
    {
        tax.updateTaxSpecificExchRates(_dateOfVATRegister, _exchRateMap);
        taxRegulation.updateExchangeRateTaxAmounts();
        taxRegulation.updateExchangeRateTaxAmountCur();

        if (tax.useTaxUncommitted())
        {
            tax.updateTaxUncommitted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySalesTaxExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the sales tax exchange rate.
    /// </summary>
    /// <param name="_dateOfVATReg">
    /// The date of VAT register.
    /// </param>
    /// <param name="_vatExchRate">
    /// The VAT exchange rate.
    /// </param>
    public void applySalesTaxExchangeRate(
        VatDueDate_W            _dateOfVATReg = dateNull(),
        CurrencyExchangeRate    _vatExchRate  = 0)
    {
        tax.updateVATExchRate_W(_dateOfVATReg, _vatExchRate);
        taxRegulation.updateExchangeRateTaxAmounts();

        if (tax.useTaxUncommitted())
        {
            tax.updateTaxUncommitted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySalesTaxExchangeRateRep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the sales tax reporting currency exchange rate.
    /// </summary>
    /// <param name="_dateOfVATReg">
    /// The date of VAT register.
    /// </param>
    /// <param name="_vatExchRate">
    /// The VAT exchange rate.
    /// </param>
    internal void applySalesTaxExchangeRateRep(VatDueDate_W _dateOfVATReg, CurrencyExchangeRate _vatExchRate)
    {
        tax.updateVATExchRateRep_W(_dateOfVATReg, _vatExchRate);

        if (tax.useTaxUncommitted())
        {
            tax.updateTaxUncommitted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySalesTaxExchangeRateCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the tax specific exchange rate for specific currency code.
    /// </summary>
    /// <param name="_dateOfVATReg">
    /// The date of VAT register.
    /// </param>
    /// <param name="_vatExchRate">
    /// Exchange rate.
    /// </param>
    /// <param name="_currencyCode">
    /// Tax currency code.
    /// </param>
    internal void applySalesTaxExchangeRateCur(
        VatDueDate_W _dateOfVATReg,
        CurrencyExchangeRate _vatExchRate,
        CurrencyCode _currencyCode)
    {
        tax.updateVATExchRateCur_W(_dateOfVATReg, _vatExchRate, _currencyCode);
        taxRegulation.updateExchangeRateTaxAmountCur();

        if (tax.useTaxUncommitted())
        {
            tax.updateTaxUncommitted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTaxAdjustments</Name>
				<Source><![CDATA[
    public void applyTaxAdjustments(TableId               _tableId,
                                    Common                _record
                                    ,TransDate            _vateOfVATRegister = dateNull(),
                                    CurrencyExchangeRate  _salesTaxExchangeRate = 0.0)
    {
        Common common = _record;
        Object dataSource = FormDataUtil::getFormDataSource(common);
        TableId tableId = common.TableId;

        taxRegulation.parmIsCalledFromSalesEditLies(isCalledFromSalesParmLines);

        taxRegulation.saveTaxRegulation(
            // <GEEU>
            _vateOfVATRegister,
            _salesTaxExchangeRate
            // </GEEU>
            );
        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            taxRegulation.deleteTaxWithholdUncommitted_IN();
        }
        // </GIN>
        if (tableId == 0)
        {
            tableId = _tableId;
        }

        switch (tableId)
        {
            case tableNum(SalesTable):
                this.updateSalesTableEstimated(common as SalesTable);
                break;

            case tableNum(VendInvoiceInfoTable):
                this.updatePurchInvoiceVarianceApproved(common as VendInvoiceInfoTable);
                break;

            case tableNum(CustInvoiceTable):
                // Note: BP late bound call warning appears here but cannot be resolved because the compiler
                // doesn't support implementing interfaces on DataSource classes.
                if (FormDataUtil::isFormDataSource(common) && dataSource &&formDataSourceHasMethod(dataSource, identifierStr(setTouched)))
                {
                    dataSource.setTouched();
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canChangeTaxExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales tax exchange rate can be edited in the tax form.
    /// </summary>
    /// <param name="_record">
    /// The record that was initially passed into the sales tax form.
    /// </param>
    /// <returns>
    /// true if the sales tax exchange rate can be edited in the tax form; otherwise, false.
    /// </returns>
    public boolean canChangeTaxExchangeRate(Common _record)
    {
        boolean     canChangeTaxExchangeRate;
        RefTableId  sourceTableId;
        RefRecId    sourceRecordId;
        ProjInvoiceParmTable            projInvoiceParmTable;
        ProjProposalJour                projProposalJour;
        SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate;

        switch (_record.TableId)
        {
            case tableNum(VendInvoiceInfoTable), tableNum(LedgerJournalTrans) :
                canChangeTaxExchangeRate = true;
                break;

            case tableNum(CustInvoiceTable), tableNum(SalesTable), tableNum(ProjProposalJour) :
                sourceTableId = _record.TableId;
                sourceRecordId = _record.RecId;
                break;

            case tableNum(ProjInvoiceParmTable) :
                projInvoiceParmTable = _record as ProjInvoiceParmTable;
                projProposalJour = ProjProposalJour::find(projInvoiceParmTable.ProposalId);
                sourceTableId = projProposalJour.TableId;
                sourceRecordId = projProposalJour.RecId;
                break;

            default:
                break;
        }

        if (sourceTableId && sourceRecordId)
        {
            if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(sourceTableId, sourceRecordId))
            {
                TaxSpecificExchangeRate taxSpecificExchangeRate = TaxSpecificExchangeRate::findBySourceRecord(sourceTableId, sourceRecordId);
                canChangeTaxExchangeRate = taxSpecificExchangeRate && !taxSpecificExchangeRate.KeepOriginalExchangeRate;
            }
            else
            {
                salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(sourceTableId, sourceRecordId);

                if (salesTaxTransactionExchangeRate.KeepOriginalExchangeRate == NoYes::No)
                {
                    canChangeTaxExchangeRate = true;
                }
                else
                {
                    canChangeTaxExchangeRate = false;
                }
            }
        }

        return canChangeTaxExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets run whenever the sales tax form is closed.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the record that was initially passed into the sales tax form.
    /// </param>
    /// <param name="_record">
    /// The record that was initially passed into the sales tax form.
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    /// The currently selected sales tax <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <param name="_formRun">
    /// The <c>FormRun</c> object for the sales tax form.
    /// </param>
    public void close(TableId _tableId, Common _record, TmpTaxWorkTrans _tmpTaxWorkTrans, FormRun _formRun = null)
    {
        FormDataSource              formDataSource;
        boolean                     checkDateOfVATRegister;
        ClassName                   callerName;
        FieldName                   dateFieldName;
        Object                      callerFormRun;
        FormName                    formName;
        RefTableId                  sourceTableId;
        RefRecId                    sourceRecordId;
        ProjProposalJour            projProposalJour;
        ProjInvoiceParmTable        projInvoiceParmTable;
        VendInvoiceInfoTable        vendInvoiceInfoTable;
        TaxIFormVATRegisterSettable formVATRegisterSettable;

        boolean isTaxSpecificExchRateEnabledByTable = TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(_tmpTaxWorkTrans.HeadingTableId, _tmpTaxWorkTrans.HeadingRecId);

        if (TaxParameters::isBankExchRateEnabled_W()
            || isTaxSpecificExchRateEnabledByTable)
        {
            if (this.canChangeTaxExchangeRate(_record))
            {
                if (_tableId == tableNum(ProjInvoiceParmTable))
                {
                    projInvoiceParmTable = _record as ProjInvoiceParmTable;
                    projProposalJour = ProjProposalJour::find(projInvoiceParmTable.ProposalId);
                    sourceTableId = projProposalJour.TableId;
                    sourceRecordId = projProposalJour.RecId;
                }
                else
                {
                    sourceTableId = _record.TableId;
                    sourceRecordId = _record.RecId;
                }

                if (isTaxSpecificExchRateEnabledByTable)
                {
                    Set maintainedCurrencyCodes = new Set(Types::String);
                    CurrencyCode accountingCurrency = _tmpTaxWorkTrans.accountingCurrency();
                    TaxSpecificExchangeRate::saveTaxSpecificExchangeRate(
                        sourceTableId,
                        sourceRecordId,
                        _tmpTaxWorkTrans.SourceCurrencyCode,
                        accountingCurrency,
                        _tmpTaxWorkTrans.SalesTaxExchangeRate,
                        _tmpTaxWorkTrans.VatDueDate_W);
                    maintainedCurrencyCodes.add(accountingCurrency);

                    CurrencyCode reportingCurrency = _tmpTaxWorkTrans.reportingCurrency();
                    if (!maintainedCurrencyCodes.in(reportingCurrency))
                    {
                        TaxSpecificExchangeRate::saveTaxSpecificExchangeRate(
                            sourceTableId,
                            sourceRecordId,
                            _tmpTaxWorkTrans.SourceCurrencyCode,
                            reportingCurrency,
                            _tmpTaxWorkTrans.SalesTaxExchangeRateRep,
                            _tmpTaxWorkTrans.VatDueDate_W);

                        maintainedCurrencyCodes.add(reportingCurrency);
                    }

                    TmpTaxWorkTrans tmpTaxWorkTransLoc;
                    tmpTaxWorkTransLoc.setTmpData(_tmpTaxWorkTrans);
                    while select CurrencyCode, SalesTaxExchangeRateCur, VatDueDate_W from tmpTaxWorkTransLoc
                    {
                        if (!maintainedCurrencyCodes.in(tmpTaxWorkTransLoc.CurrencyCode))
                        {
                            maintainedCurrencyCodes.add(tmpTaxWorkTransLoc.CurrencyCode);
                            TaxSpecificExchangeRate::saveTaxSpecificExchangeRate(
                                sourceTableId,
                                sourceRecordId,
                                _tmpTaxWorkTrans.SourceCurrencyCode,
                                tmpTaxWorkTransLoc.CurrencyCode,
                                tmpTaxWorkTransLoc.SalesTaxExchangeRateCur,
                                tmpTaxWorkTransLoc.VatDueDate_W);
                        }
                    }
                }
                else
                {
                    SalesTaxExchangeRateHelper::saveSalesTaxTransactionExchangeRate(sourceTableId, sourceRecordId, _tmpTaxWorkTrans.SourceCurrencyCode, _tmpTaxWorkTrans.SalesTaxExchangeRate, _tmpTaxWorkTrans.VatDueDate_W);
                }
            }

            switch (_tableId)
            {
                case tableNum(CustInvoiceTable), tableNum(LedgerJournalTrans), tableNum(ProjInvoiceParmTable):
                    dateFieldName = fieldStr(CustInvoiceTable, VatDueDate_W);
                    checkDateOfVATRegister = true;
                    break;

                case tableNum(VendInvoiceInfoTable):
                    vendInvoiceInfoTable = _record;
                    _record = vendInvoiceInfoTable.vendInvoiceInfoTable_W();

                    dateFieldName = fieldStr(VendInvoiceInfoTable_W, VatDueDate_W);
                    checkDateOfVATRegister = true;

                    break;
                case tableNum(SalesTable):

                    if (_formRun && _formRun.name() == formStr(SalesEditLines))
                    {
                        callerName = classId2Name(classIdGet(_formRun.args().caller()));
                        formVATRegisterSettable = _formRun as TaxIFormVATRegisterSettable;

                        if ((callerName == classStr(SalesFormLetter_Invoice) ||
                            callerName == classStr(SalesFormLetter_Confirm)) &&
                            formVATRegisterSettable)
                        {
                            formVATRegisterSettable.setDateOfVATRegister(_tmpTaxWorkTrans.VatDueDate_W);
                        }
                    }
                    break;
                // No need to handle Table <c>PlSADFinanceTable</c> because PlSADFinanceTable.VATDueDate is mandatory
                case tableNum(PlSADTable):
                    dateFieldName = fieldStr(PlSADTable, VATDueDate);
                    checkDateOfVATRegister = true;
                    break;

                default:
                    break;
            }

            if (checkDateOfVATRegister)
            {
                if (_record.getFieldValue(dateFieldName) != _tmpTaxWorkTrans.VatDueDate_W)
                {
                    _record.setFieldValue(dateFieldName, _tmpTaxWorkTrans.VatDueDate_W);
                    _record.update();

                    if (_formRun)
                    {
                        formName = _formRun.name();

                        if (formName == formStr(CustFreeInvoice) ||
                            formName == formStr(VendEditInvoice) ||
                            formName == formStr(LedgerJournalTransVendInvoice) ||
                            formName == formStr(LedgerJournalTransInvoiceRegister) ||
                            formName == formStr(LedgerJournalTransApprove) ||
                            formName == formStr(LedgerJournalTransDaily)    ||
                            formName == formStr(ProjInvoiceEditLines) ||
                            formName == formStr(PlSADTable))
                        {
                            formDataSource = _formRun.dataSource();
                            formDataSource.reread();
                            formDataSource.refresh();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode getCompanyCurrencyCode()
    {
        return Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountRep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency tax amount.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The reporting currency tax amount.
    /// </returns>
    public TaxBase getTaxAmountRep(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.TaxAmountRep * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBaseAmountRep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency tax base amount.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The reporting currency tax base amount.
    /// </returns>
    public TaxBase getTaxBaseAmountRep(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.TaxBaseAmountRep * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax currency tax amount.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The tax currency tax amount.
    /// </returns>
    public TaxBase getTaxAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.TaxAmountCur * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax currency tax base amount.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The tax currency tax base amount.
    /// </returns>
    public TaxBase getTaxBaseAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.TaxBaseAmountCur * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateSourceBaseAmountRegulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted tax base regulated accounting amount with sales tax exchange rate.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The adjusted tax base regulated accounting amount with sales tax exchange rate.
    /// </returns>
    public TaxBase getExchangeRateSourceBaseAmountRegulated(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateSourceRegulateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted tax regulated accounting amount with sales tax exchange rate.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The adjusted tax regulated accounting amount with sales tax exchange rate.
    /// </returns>
    public TaxAmount getExchangeRateSourceRegulateAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax regulated accounting amount with sales tax exchange rate.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The tax regulated accounting amount with sales tax exchange rate.
    /// </returns>
    public TaxAmount getExchangeRateTaxAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ExchangeRateTaxAmount * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateTaxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax base regulated accounting amount with sales tax exchange rate.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The tax base regulated accounting amount with sales tax exchange rate.
    /// </returns>
    public TaxBase getExchangeRateTaxBaseAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ExchangeRateTaxBaseAmount * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateTaxAmountRep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency tax amount with sales tax exchange rate.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The tax regulated reporting amount with sales tax exchange rate.
    /// </returns>
    public TaxAmount getExchangeRateTaxAmountRep(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ExchangeRateTaxAmountRep * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateTaxBaseAmountRep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency tax base amount with sales tax exchange rate.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The reporting currency tax base amount with sales tax exchange rate.
    /// </returns>
    public TaxBase getExchangeRateTaxBaseAmountRep(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ExchangeRateTaxBaseAmountRep * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateBaseAmountCurRegulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax currency tax base regulated amount with sales tax exchange rate.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The tax currency tax base regulated amount with sales tax exchange rate.
    /// </returns>
    public TaxBase getExchangeRateBaseAmountCurRegulated(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateRegulateAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax currency tax regulated amount with sales tax exchange rate.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The tax currency tax regulated amount with sales tax exchange rate.
    /// </returns>
    public TaxAmount getExchangeRateRegulateAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ExchangeRateRegulateAmountCur * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateTaxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax currency tax amount with sales tax exchange rate.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The tax currency tax amount with sales tax exchange rate.
    /// </returns>
    public TaxAmount getExchangeRateTaxAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ExchangeRateTaxAmountCur * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateTaxBaseAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax currency tax base amount with sales tax exchange rate.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <returns>
    /// The tax currency tax base amount with sales tax exchange rate.
    /// </returns>
    public TaxBase getExchangeRateTaxBaseAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ExchangeRateTaxBaseAmountCur * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverrideCalculated</Name>
				<Source><![CDATA[
    public NoYes getOverrideCalculated(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.TaxAutogenerated == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceBaseAmountCur</Name>
				<Source><![CDATA[
    public TaxAmountCur getSourceBaseAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans = null, TmpTaxRegulation _tmpTaxRegulation = null)
    {
        if (_tmpTaxRegulation)
        {
            return _tmpTaxRegulation.SourceBaseAmountCur;
        }
        else
        {
            return _tmpTaxWorkTrans.SourceBaseAmountCur * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceBaseAmountCurRegulated</Name>
				<Source><![CDATA[
    public TaxBaseCur getSourceBaseAmountCurRegulated(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.SourceBaseAmountCurRegulated * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceRegulateAmountCur</Name>
				<Source><![CDATA[
    public TaxRegulationAmountCur getSourceRegulateAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.SourceRegulateAmountCur * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsolidateSourceBaseAmountCur_JP</Name>
				<Source><![CDATA[
    public TaxBaseCur getConsolidateSourceBaseAmountCur_JP(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ConsolidateSourceBaseAmountCur_JP * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsolidateSourceTaxAmountCurPosted_JP</Name>
				<Source><![CDATA[
    public TaxRegulationAmountCur getConsolidateSourceTaxAmountCurPosted_JP(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ConsolidateSourceTaxAmountCurPosted_JP * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsolidateSourceRegulateAmountCur_JP</Name>
				<Source><![CDATA[
    public TaxRegulationAmountCur getConsolidateSourceRegulateAmountCur_JP(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.ConsolidateSourceRegulateAmountCur_JP * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTaxAmountCur</Name>
				<Source><![CDATA[
    public TaxAmountCur getSourceTaxAmountCur(TmpTaxWorkTrans _tmpTaxWorkTrans = null, TmpTaxRegulation _tmpTaxRegulation = null)
    {
        if (_tmpTaxRegulation)
        {
            return _tmpTaxRegulation.SourceTaxAmountCur;
        }
        else
        {
            return _tmpTaxWorkTrans.SourceTaxAmountCur * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The description of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailDescription getTaxAdjustmentDetailDescription(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailDescription taxAdjustmentDetailDescription;

        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
        {
            taxAdjustmentDetailDescription = tax.getTaxAdjustmentDetailDescription(_sourceTableId, _sourceRecId);
        }

        return taxAdjustmentDetailDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The reference of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailReference getTaxAdjustmentDetailReference(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailReference taxAdjustmentDetailReference;

        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
        {
            taxAdjustmentDetailReference = tax.getTaxAdjustmentDetailReference(_sourceTableId, _sourceRecId);
        }

        return taxAdjustmentDetailReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The type of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailType getTaxAdjustmentDetailType(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailType taxAdjustmentDetailType;

        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
        {
            taxAdjustmentDetailType = tax.getTaxAdjustmentDetailType(_sourceTableId, _sourceRecId);
        }

        return taxAdjustmentDetailType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmount</Name>
				<Source><![CDATA[
    public TaxAmountCur getTaxAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        if (_tmpTaxWorkTrans.TaxAutogenerated)
        {
            return _tmpTaxWorkTrans.TaxAmount * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
        }
        else
        {
            return CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.SourceRegulateAmountCur, _tmpTaxWorkTrans.SourceCurrencyCode, _tmpTaxWorkTrans.TransDate, UnknownNoYes::Unknown, tax.parmExchRate(), tax.parmExchRateSecond()) * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBaseAmount</Name>
				<Source><![CDATA[
    public TaxAmountCur getTaxBaseAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.TaxBaseAmount * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBaseQty</Name>
				<Source><![CDATA[
    public TaxQty getTaxBaseQty(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.TaxBaseQty * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInCostPrice</Name>
				<Source><![CDATA[
    public TaxAmountCur getTaxInCostPrice(TmpTaxWorkTrans _tmpTaxWorkTrans = null, TmpTaxRegulation _tmpTaxRegulation = null)
    {
        if (_tmpTaxRegulation)
        {
            return _tmpTaxRegulation.TaxInCostPrice;
        }
        else
        {
            return _tmpTaxWorkTrans.TaxInCostPrice * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInCostPriceMST</Name>
				<Source><![CDATA[
    [SysObsolete('Please use getActuaTaxIncostPrice instead', false, 27\12\2019)]
    public TaxAmountCur getTaxInCostPriceMST(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.TaxInCostPriceMST * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActuaTaxIncostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets actual nondeductible sales tax amount.
    /// </summary>
    /// <param name = "_tmpTaxWorkTrans">the record for <c>TmpTaxWorkTrans</c>.</param>
    /// <returns>The actual nondeductible sales tax amount.</returns>
    [Hookable(false)]
    public TaxAmountCur getActuaTaxIncostPrice(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        if (_tmpTaxWorkTrans.TaxAutogenerated)
        {
            return _tmpTaxWorkTrans.TaxInCostPriceMST * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
        }
        else
        {
            return CurrencyExchangeHelper::mstAmount(_tmpTaxWorkTrans.TaxInCostPriceRegulated, _tmpTaxWorkTrans.SourceCurrencyCode, _tmpTaxWorkTrans.TransDate, UnknownNoYes::Unknown, tax.parmExchRate(), tax.parmExchRateSecond()) * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInCostPriceRegulated</Name>
				<Source><![CDATA[
    public TaxAmountCur getTaxInCostPriceRegulated(TmpTaxWorkTrans _tmpTaxWorkTrans = null, TmpTaxRegulation _tmpTaxRegulation = null)
    {
        if (_tmpTaxRegulation)
        {
            return _tmpTaxRegulation.TaxInCostPriceRegulated;
        }
        else
        {
            return _tmpTaxWorkTrans.TaxInCostPriceRegulated * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreCalculatedSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether tax should ignore the calculated sales tax amounts and consider only tax
    ///    adjustments.
    /// </summary>
    /// <returns>
    ///    true if tax should only consider tax adjustments; otherwise, false.
    /// </returns>
    public boolean ignoreCalculatedSalesTax()
    {
        return tax.ignoreCalculatedSalesTax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form.
    /// </summary>
    public void init()
    {
        switch (callerFormName)
        {
            case (formStr(ledgerjournaltransinvoiceregister)):
                invoiceRegister = true;
                break;
            case (formStr(ledgerjournaltransCustPaym)):
                invoiceRegister = true;
                break;
            case (formStr(ledgerjournalTransDaily)):
                invoiceRegister = true;
                break;
            default:
                break;
        }

        if (!accountTypeMap)
        {
            accountTypeMap = new Map(Types::String, Types::Enum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values for displaying in form.
    /// </summary>
    /// <param name = "_tax">The instance of <c>Tax</c>.</param>
    /// <param name = "_tableId">The table id.</param>
    /// <param name = "_record">The record id.</param>
    /// <param name = "_tmpTaxRegulation">The buffer of <c>TmpTaxRegulation</c>.</param>
    /// <param name = "_tmpTaxWorkTrans">The buffer of <c>TmpTaxWorkTrans</c>.</param>
    /// <param name = "_taxAdjustmentType">The tax adjustment type.</param>
    public void initTax(Tax _tax, TableId _tableId, Common _record,
                            TmpTaxRegulation _tmpTaxRegulation, TmpTaxWorkTrans _tmpTaxWorkTrans
                            , TaxAdjustmentType _taxAdjustmentType = TaxAdjustmentType::Summary)
    {
        LedgerJournalTrans ledgerJournalTrans;
        tax = _tax;

        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        // <GIN>
        if (TaxParameters::isCustomsEnable_IN()
            && isImportOrderExim)
        {
            [sourceSingleLine,
            taxAmountCurTotal,
            eximTaxAmountMST,
            eximBalanceTaxAmountMST,
            correctedCustomsDuty,
            eximTaxCorrectedAmount,
            eximBalanceCorrectedTaxAmount] = tax.eximShowTaxesNotSourceSingleLine_IN();
        }
        else
        {
            isImportOrderExim = false;
        // </GIN>
            if (tax.sourceSingleLine())
            {
                displayTaxSourceRecId = _record.RecId;
                displayTaxSourceTableId = _tableId;
                taxAmountCurTotal = tax.totalTaxAmountSingleLine(displayTaxSourceTableId, displayTaxSourceRecId, true, true);
                sourceSingleLine = true;
            }
            else
            {
                taxAmountCurTotal = tax.totalTaxAmountCalculated();
            }
        // <GIN>
        }
        // </GIN>
        _tmpTaxWorkTrans.setTmpData(tax.tmpTaxWorkTrans());

        if (_tableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = _record as LedgerJournalTrans;
            taxAmountCurTotal = tax.totalTaxAmountSingleLine(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId, true, true);
        }

        taxRegulation = TaxRegulation::newTaxRegulation(tax,
                                                        ledgerJournalTrans,
                                                        displayTaxSourceTableId,
                                                        displayTaxSourceRecId);
        this.parmSelectedTaxAdjustmentType(_taxAdjustmentType);
        _tmpTaxRegulation.setTmpData(taxRegulation.tmpTaxRegulation());
        taxRegulationTotalCur = taxRegulation.taxRegulationTotal();
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxParameters::find().Customs_IN)
        {
            taxRegulationTotalCustoms = taxRegulation.totalSourceRegulateAmountCustoms_IN();
        }
        // </GIN>

        useSalesTaxAdjustments = tax.useSalesTaxAdjustments();
        keepSalesTaxAdjustments = tax.keepSalesTaxAdjustments();
        useDetailTaxAdjustmentType = tax.getTaxAdjustmentTypes().in(TaxAdjustmentType::Detail);
        ignoreCalculatedSalesTax = tax.ignoreCalculatedSalesTax();
        allowSingleLineAdjustment = tax.allowSingleLineAdjustment();
        // <GEEU>
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(_tax.headingTableId(), _tax.headingRecId()))
        {
            if (_tableId == tableNum(LedgerJournalTrans))
            {
                this.parmDateOfVATRegister(TaxSpecificExchangeRate::getDateOfVATRegister(_tableId, _record.RecId));

                LegalEntity legalEntityRecId;
                if (TaxIntegrationBankOrTaxSpecificExchangeRateIntercompanyFlight::instance().isEnabled()
                    && ledgerJournalTrans.RecId
                    && ledgerJournalTrans.Company
                    && ledgerJournalTrans.Company != curExt())
                {
                    legalEntityRecId = ledgerJournalTrans.getCompanyLegalEntity();
                }

                CurrencyExchangeRate accountingCurrencyExchRate = TaxSpecificExchangeRate::getExchangeRateByCurrency(_tableId, _record.RecId, Ledger::accountingCurrency(legalEntityRecId));
                this.parmSalesTaxExchangeRate(accountingCurrencyExchRate ? accountingCurrencyExchRate : 100);
                CurrencyExchangeRate reportingCurrencyExchRate = TaxSpecificExchangeRate::getExchangeRateByCurrency(_tableId, _record.RecId, Ledger::reportingCurrency(legalEntityRecId));
                this.parmSalesTaxExchangeRateRep(reportingCurrencyExchRate ? reportingCurrencyExchRate : 100);
            }
            else
            {
                select firstonly VatDueDate_W, SalesTaxExchangeRate, SalesTaxExchangeRateRep from _tmpTaxWorkTrans
                    where _tmpTaxWorkTrans.TaxOrigin != TaxOrigin::TaxReversed;

                this.parmDateOfVATRegister(_tmpTaxWorkTrans.VatDueDate_W);
                this.parmSalesTaxExchangeRate(_tmpTaxWorkTrans.SalesTaxExchangeRate);
                this.parmSalesTaxExchangeRateRep(_tmpTaxWorkTrans.SalesTaxExchangeRateRep);
                this.parmTaxSpecificExchangeRateMap(TaxSpecificExchangeRateHelper::getExchangeRateMap(_tableId, _record.RecId));
            }
        }
        else if (TaxParameters::isBankExchRateEnabled_W())
        {
            if (_tableId == tableNum(LedgerJournalTrans))
            {
                SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(_tableId, _record.RecId);
                this.parmDateOfVATRegister(salesTaxTransactionExchangeRate.DateOfVATRegister);
                this.parmSalesTaxExchangeRate(salesTaxTransactionExchangeRate.SalesTaxExchangeRate);
            }
            else
            {
                select firstonly VatDueDate_W, SalesTaxExchangeRate from _tmpTaxWorkTrans
                    where _tmpTaxWorkTrans.TaxOrigin != TaxOrigin::TaxReversed;

                this.parmDateOfVATRegister(_tmpTaxWorkTrans.VatDueDate_W);
                this.parmSalesTaxExchangeRate(_tmpTaxWorkTrans.SalesTaxExchangeRate);
            }
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpTaxRegulationValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values from TmpTaxRegulation.
    /// </summary>
    /// <param name = "_tmpTaxRegulation">The buffer of <c>TmpTaxRegulation</c>.</param>
    public void initTmpTaxRegulationValue(TmpTaxRegulation _tmpTaxRegulation)
    {
         taxRegulation.initValue(_tmpTaxRegulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, accountTypeMap.pack(), taxRegulation.pack(), tax.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeMap</Name>
				<Source><![CDATA[
    public Map parmAccountTypeMap(Map  _accountTypeMap = accountTypeMap)
    {
        accountTypeMap = _accountTypeMap;

        return accountTypeMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCalledFromSalesEditLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets this is called from sales edit lines.
    /// </summary>
    /// <param name = "_isCalledFromSalesParmLines">is called from sales edit lines</param>
    /// <returns>If it's called from sales edit lines return true, otherwise return false.</returns>
    public boolean parmIsCalledFromSalesEditLines(boolean _isCalledFromSalesParmLines = isCalledFromSalesParmLines)
    {
        isCalledFromSalesParmLines = _isCalledFromSalesParmLines;
        return isCalledFromSalesParmLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowSingleLineAdjustment</Name>
				<Source><![CDATA[
    public boolean parmAllowSingleLineAdjustment()
    {
        return allowSingleLineAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBalanceCorrected_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The balance corrected parameter.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The tmp tax work transaction.
    /// </param>
    /// <param name="_amount">
    /// The MST amount.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmount</c> class.
    /// </returns>
    public TaxAmount parmBalanceCorrected_IN(
        TmpTaxWorkTrans _tmpTaxWorkTrans,
        AmountMST       _amount)
    {
        TaxAmount balCorrected;

        // Returns the 'Balance corrected amount'.
        if ((EximParameters_IN::checkParameters()
           || EximParameters_IN::checkDEPBParameters())
            && TaxTable::find(_tmpTaxWorkTrans.TaxCode).TaxType_IN == TaxType_IN::Customs
            && (_tmpTaxWorkTrans.EximBalanceTaxAmount_IN + _tmpTaxWorkTrans.EximTaxAmount_IN))
        {
            balCorrected = _amount * (_tmpTaxWorkTrans.EximBalanceTaxAmount_IN / (_tmpTaxWorkTrans.EximBalanceTaxAmount_IN + _tmpTaxWorkTrans.EximTaxAmount_IN));
        }

        return balCorrected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerFormName</Name>
				<Source><![CDATA[
    public str parmCallerFormName(str _callerFormName = callerFormName)
    {
        callerFormName = _callerFormName;

        return callerFormName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedCustomsDuty_IN</Name>
				<Source><![CDATA[
    public AmountMST parmCorrectedCustomsDuty_IN(AmountMST _correctedCustomsDuty = correctedCustomsDuty)
    {
        correctedCustomsDuty = _correctedCustomsDuty;

        return correctedCustomsDuty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateOfVATRegister</Name>
				<Source><![CDATA[
    public VatDueDate_W parmDateOfVATRegister(VatDueDate_W _dateOfVATRegister = dateOfVATRegister)
    {
        dateOfVATRegister = _dateOfVATRegister;

        return dateOfVATRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEximBalanceTaxAmountMST_IN</Name>
				<Source><![CDATA[
    public AmountMST parmEximBalanceTaxAmountMST_IN(AmountMST _eximBalanceTaxAmountMST = eximBalanceTaxAmountMST)
    {
        eximBalanceTaxAmountMST = _eximBalanceTaxAmountMST;

        return eximBalanceTaxAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEximBalanceTaxTotalCorrected_IN</Name>
				<Source><![CDATA[
    public AmountMST parmEximBalanceTaxTotalCorrected_IN()
    {
        return tax.eximTotalBalanceCorrectedAmount_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEximCorrectedAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The exim corrected amount parameter.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The tmp tax work transaction.
    /// </param>
    /// <param name="_amount">
    /// The MST amount.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmount</c> class.
    /// </returns>
    public TaxAmount parmEximCorrectedAmount_IN(
        TmpTaxWorkTrans _tmpTaxWorkTrans,
        AmountMST       _amount)
    {
        TaxAmount eximCorrectedAmount;

        // Returns the 'Incentive scheme corrected amount'.
        if ((EximParameters_IN::checkParameters()
           || EximParameters_IN::checkDEPBParameters())
            && TaxTable::find(_tmpTaxWorkTrans.TaxCode).TaxType_IN == TaxType_IN::Customs
            && (_tmpTaxWorkTrans.EximBalanceTaxAmount_IN + _tmpTaxWorkTrans.EximTaxAmount_IN))
        {
            eximCorrectedAmount = _amount * (_tmpTaxWorkTrans.EximTaxAmount_IN / (_tmpTaxWorkTrans.EximBalanceTaxAmount_IN + _tmpTaxWorkTrans.EximTaxAmount_IN));
        }

        return eximCorrectedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEximTaxAmountMST_IN</Name>
				<Source><![CDATA[
    public AmountMST parmEximTaxAmountMST_IN(AmountMST _eximTaxAmountMST = eximTaxAmountMST)
    {
        eximTaxAmountMST = _eximTaxAmountMST;

        return eximTaxAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEximTaxTotalCorrected_IN</Name>
				<Source><![CDATA[
    public AmountMST parmEximTaxTotalCorrected_IN()
    {
        return tax.eximTotalCorrectedAmount_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasTaxFromInit</Name>
				<Source><![CDATA[
    public boolean parmHasTaxFromInit(boolean  _hasTaxFromInit = hasTaxFromInit)
    {
        hasTaxFromInit = _hasTaxFromInit;

        return hasTaxFromInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreCalculatedSalesTax</Name>
				<Source><![CDATA[
    public boolean parmIgnoreCalculatedSalesTax()
    {
        return ignoreCalculatedSalesTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceRegister</Name>
				<Source><![CDATA[
    public boolean parmInvoiceRegister(boolean  _invoiceRegister = invoiceRegister)
    {
        invoiceRegister = _invoiceRegister;

        return invoiceRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsImportOrderExim_IN</Name>
				<Source><![CDATA[
    public boolean parmIsImportOrderExim_IN(boolean _isImportOrderExim = isImportOrderExim)
    {
        isImportOrderExim = _isImportOrderExim;

        return isImportOrderExim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeepSalesTaxAdjustments</Name>
				<Source><![CDATA[
    public boolean parmKeepSalesTaxAdjustments()
    {
        return keepSalesTaxAdjustments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTaxExchangeRate</Name>
				<Source><![CDATA[
    public CurrencyExchangeRate parmSalesTaxExchangeRate(CurrencyExchangeRate _salesTaxExchangeRate = salesTaxExchangeRate)
    {
        salesTaxExchangeRate = _salesTaxExchangeRate;

        return salesTaxExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTaxExchangeRateRep</Name>
				<Source><![CDATA[
    public CurrencyExchangeRate parmSalesTaxExchangeRateRep(CurrencyExchangeRate _salesTaxExchangeRateRep = salesTaxExchangeRateRep)
    {
        salesTaxExchangeRateRep = _salesTaxExchangeRateRep;

        return salesTaxExchangeRateRep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxSpecificExchangeRateMap</Name>
				<Source><![CDATA[
    public Map parmTaxSpecificExchangeRateMap(Map _taxSpecificExchangeRateMap = taxSpecificExchangeRateMap)
    {
        taxSpecificExchangeRateMap = _taxSpecificExchangeRateMap;

        return taxSpecificExchangeRateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedTaxAdjustmentType</Name>
				<Source><![CDATA[
    public TaxAdjustmentType parmSelectedTaxAdjustmentType(TaxAdjustmentType _selectedTaxAdjustmentType = selectedTaxAdjustmentType)
    {
        selectedTaxAdjustmentType = _selectedTaxAdjustmentType;

        return selectedTaxAdjustmentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceBaseAmountCurRegulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// The adjusted amount origin.
    /// </summary>
    /// <param name="_set">
    /// True when the adjusted amount origin is set. False otherwise.
    /// </param>
    /// <param name="_tmpTaxRegulation">
    /// The tmp tax regulation transaction.
    /// </param>
    /// <param name="_sourceBaseAmountCurRegulated">
    /// The adjusted amount origin for the line.
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    /// The temporary sales tax transaction.
    /// </param>
    /// <returns>
    /// The adjusted amount origin.
    /// </returns>
    public TaxBaseCur parmSourceBaseAmountCurRegulated(boolean _set, TmpTaxRegulation _tmpTaxRegulation,
                                        TaxBaseCur _sourceBaseAmountCurRegulated, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        if (_set)
        {
            taxRegulation.updateSourceBaseAmountCurRegulated(_tmpTaxRegulation, _sourceBaseAmountCurRegulated);
        }

        return _tmpTaxRegulation.SourceBaseAmountCurRegulated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRegulateAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// The source regulate current amount.
    /// </summary>
    /// <param name = "_set">The set flag.</param>
    /// <param name = "_tmpTaxRegulation">The temporary regulation.</param>
    /// <param name = "_taxRegulationAmountCur">The current tax regulation amount.</param>
    /// <param name = "_tmpTaxWorkTrans">The temporary tax work transaction.</param>
    /// <returns>The regulate current tax amount</returns>
    public TaxRegulationAmountCur parmSourceRegulateAmountCur(boolean _set, TmpTaxRegulation _tmpTaxRegulation,
                                        TaxRegulationAmountCur _taxRegulationAmountCur, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        if (_set)
        {
            taxRegulation.updateTaxRegulationAmount(_tmpTaxRegulation, _taxRegulationAmountCur, false);
        }

        if (_tmpTaxWorkTrans.TaxAmount == 0 && _tmpTaxWorkTrans.SourceBaseAmountCur != 0)
        {
            //If the taxAmount is zero, the sign of TaxRegulationAmountCur should be sign of SourceBaseAmountCur * taxChangeDisplaySign().
            return abs(_tmpTaxRegulation.SourceRegulateAmountCur) * sign(_tmpTaxWorkTrans.SourceBaseAmountCur) * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
        }
        else
        {
            return _tmpTaxRegulation.SourceRegulateAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidateSourceRegulateAmountCur_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// The consolidated source regulate current amount.
    /// </summary>
    /// <param name = "_set">The set flag.</param>
    /// <param name = "_tmpTaxRegulation">The temporary regulation.</param>
    /// <param name = "_taxRegulationAmountCur">The current consolidated tax regulation amount.</param>
    /// <param name = "_tmpTaxWorkTrans">The temporary tax work transaction.</param>
    /// <returns>The regulate current consolidated tax amount</returns>
    public TaxRegulationAmountCur parmConsolidateSourceRegulateAmountCur_JP(
        boolean _set, 
        TmpTaxRegulation _tmpTaxRegulation,
        TaxRegulationAmountCur _taxRegulationAmountCur, 
        TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        if (_set)
        {
            taxRegulation.updateConsolidateSourceRegulateAmountCur_JP(_tmpTaxRegulation, _taxRegulationAmountCur, false);
        }

        return _tmpTaxRegulation.ConsolidateSourceRegulateAmountCur_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualSourceRegulateAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// The source regulate current amount.
    /// </summary>
    /// <param name = "_set">The set flag.</param>
    /// <param name = "_tmpTaxRegulation">The temporary regulation.</param>
    /// <param name = "_taxRegulationAmountCur">The current tax regulation amount.</param>
    /// <param name = "_tmpTaxWorkTrans">The temporary tax work transaction.</param>
    /// <returns>The regulate current tax amount</returns>
    public TaxRegulationAmountCur parmActualSourceRegulateAmountCur(boolean _set, TmpTaxRegulation _tmpTaxRegulation,
                                        TaxRegulationAmountCur _taxRegulationAmountCur, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        if (_set)
        {
            taxRegulation.updateActualTaxRegulationAmount(_tmpTaxRegulation, _taxRegulationAmountCur, false);
        }

        if (_tmpTaxWorkTrans.TaxAmount == 0 && _tmpTaxWorkTrans.SourceBaseAmountCur != 0)
        {
            //If the taxAmount is zero, the sign of TaxRegulationAmountCur should be sign of SourceBaseAmountCur * taxChangeDisplaySign().
            return abs(_tmpTaxRegulation.ActualSourceRegulateAmountCur) * sign(_tmpTaxWorkTrans.SourceBaseAmountCur) * _tmpTaxWorkTrans.taxChangeDisplaySign(accountTypeMap);
        }
        else
        {
            return _tmpTaxRegulation.ActualSourceRegulateAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRegulateAmountCurCustoms_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The source regulate current amount customs.
    /// </summary>
    /// <param name="_set">
    /// The set flag.
    /// </param>
    /// <param name="_tmpTaxRegulation">
    /// The temporary regulation.
    /// </param>
    /// <param name="_taxRegulationAmountCur">
    /// The current tax regulation amount.
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    /// The temporary tax work transaction.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxRegulationAmountCur</c> class.
    /// </returns>
    public TaxRegulationAmountCur parmSourceRegulateAmountCurCustoms_IN(
        boolean _set,
        TmpTaxRegulation        _tmpTaxRegulation,
        TaxRegulationAmountCur  _taxRegulationAmountCur,
        TmpTaxWorkTrans         _tmpTaxWorkTrans)
    {
        if (_set)
        {
            _tmpTaxRegulation.SourceRegulateAmountCustoms_IN = _taxRegulationAmountCur;
            _tmpTaxRegulation.SourceRegulateAmountCur        = CurrencyHelper_IN::customsCurAmount_IN(_taxRegulationAmountCur,
                                                                                             _tmpTaxRegulation.SourceCurrencyCode,
                                                                                             CurrencyHelper_IN::taxDirection2CustomsDirection_New_IN(_tmpTaxWorkTrans.TaxDirection),
                                                                                             _tmpTaxWorkTrans.TransDate);
        }
        return _tmpTaxRegulation.SourceRegulateAmountCustoms_IN * this.taxChangeDisplaySign(_tmpTaxWorkTrans.SourceTableId,
                                                                                            _tmpTaxWorkTrans.SourceRecId,
                                                                                            (_tmpTaxWorkTrans.TaxAmount < 0),
                                                                                            _tmpTaxWorkTrans.OperationLedgerDimension,
                                                                                            _tmpTaxWorkTrans.TaxDirection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceSingleLine</Name>
				<Source><![CDATA[
    public boolean parmSourceSingleLine(boolean _sourceSingleLine = sourceSingleLine)
    {
        sourceSingleLine = _sourceSingleLine;

        return sourceSingleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAmountCurTotal</Name>
				<Source><![CDATA[
    public AmountCur parmTaxAmountCurTotal(AmountCur _taxAmountCurTotal=taxAmountCurTotal)
    {
        taxAmountCurTotal = _taxAmountCurTotal;

        return taxAmountCurTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmtaxAmountCustomsCurTotal_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The current tax amount customs total.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The temporary tax work transaction.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountCur</c> class.
    /// </returns>
    public AmountCur parmtaxAmountCustomsCurTotal_IN(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        CustomsAmount_IN amount;

        if (TaxParameters::find().Customs_IN)
        {
            if (tax.sourceSingleLine())
            {
                amount = tax.totalCustomsAmount_IN(_tmpTaxWorkTrans.SourceTableId, _tmpTaxWorkTrans.SourceRecId);
            }
            else
            {
                amount = tax.totalCustomsAmount_IN();
            }
        }
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxObject</Name>
				<Source><![CDATA[
    public Tax parmTaxObject(Tax _tax=tax)
    {
        tax = _tax;

        return _tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRegulation</Name>
				<Source><![CDATA[
    public TaxRegulation parmTaxRegulation(TaxRegulation  _taxRegulation = taxRegulation)
    {
        taxRegulation = _taxRegulation;

        return taxRegulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRegulationTotalCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the regulated current total tax amount.
    /// </summary>
    /// <param name = "_set">True if user enters value in edit method.</param>
    /// <param name = "_taxRegulationTotalCur">The regulated current total tax amount</param>
    /// <returns>The regulated current total tax amount</returns>
    public TaxRegulationAmountCur parmTaxRegulationTotalCur(boolean _set, TaxRegulationAmountCur _taxRegulationTotalCur)
    {
        if (_set)
        {
            taxRegulationTotalCur = _taxRegulationTotalCur;
        }

        if (!this.parmTaxRegulation().isConsolidatedInvoice())
        {
            if (taxAmountCurTotal < 0 && taxRegulationTotalCur > 0)
            {
                taxRegulationTotalCur = taxRegulationTotalCur * -1;
            }
            else
            {
                if (taxAmountCurTotal > 0 && taxRegulationTotalCur < 0)
                {
                    taxRegulationTotalCur = taxRegulationTotalCur * -1;
                }
            }
        }

        return taxRegulationTotalCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRegulationTotalCustoms_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method sets the regulated customs duty.
    /// </summary>
    /// <param name="_set">
    ///    True if user enters value in edit method.
    /// </param>
    /// <param name="_taxRegulationTotalCustoms">
    ///    This is the regulated customs duty.
    /// </param>
    /// <param name="_sourceTableId">
    ///    The table ID of the specified tax source
    /// </param>
    /// <param name="_sourceRecId">
    ///    The record ID of the specified tax source
    /// </param>
    /// <returns>
    ///    Returns final regulated cutoms duty.
    /// </returns>
    public AmountMST parmTaxRegulationTotalCustoms_IN(
        boolean         _set,
        AmountMST       _taxRegulationTotalCustoms,
        RefTableId      _sourceTableId = 0,
        RefRecId        _sourceRecId = 0)
    {
        if (_set)
        {
            taxRegulationTotalCustoms = _taxRegulationTotalCustoms;
        }
        if ((taxAmountCurTotal * taxRegulationTotalCustoms) < 0)
        {
            taxRegulationTotalCustoms = taxRegulationTotalCustoms * -1;
        }
        if (TaxParameters::find().Customs_IN && tax.sourceSingleLine())
        {
            taxRegulationTotalCustoms = 0;
            taxRegulationTotalCustoms = tax.singleLineTaxRegulationAmountAccCur_IN(_sourceTableId, _sourceRecId);
        }
        return taxRegulationTotalCustoms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseDetailTaxAdjustmentType</Name>
				<Source><![CDATA[
    public boolean parmUseDetailTaxAdjustmentType()
    {
        return useDetailTaxAdjustmentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseSalesTaxAdjustments</Name>
				<Source><![CDATA[
    public boolean parmUseSalesTaxAdjustments()
    {
        return useSalesTaxAdjustments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pullTaxObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pulls the tax object.
    /// </summary>
    /// <param name = "_callerFormObject">The caller form object.</param>
    /// <param name = "_tableId">The table id.</param>
    /// <param name = "_record">The record.</param>
    /// <param name = "_tmpTaxRegulation">The buffer of <c>TmpTaxRegulation</c>.</param>
    /// <param name = "_tmpTaxWorkTrans">The buffer of <c>TmpTaxWorkTrans</c>.</param>
    public void pullTaxObject(Object _callerFormObject, TableId _tableId, Common _record,
                                 TmpTaxRegulation _tmpTaxRegulation, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TaxIFormShowTax showTaxForm = _callerFormObject as TaxIFormShowTax;

        if (showTaxForm)
        {
            this.initTax(showTaxForm.getShowTax(), _tableId, _record, _tmpTaxRegulation, _tmpTaxWorkTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pushTaxObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pushes the tax object.
    /// </summary>
    /// <param name = "_tax">The caller form object.</param>
    /// <param name = "_tableId">The table id.</param>
    /// <param name = "_record">The record.</param>
    /// <param name = "_tmpTaxRegulation">The buffer of <c>TmpTaxRegulation</c>.</param>
    /// <param name = "_tmpTaxWorkTrans">The buffer of <c>TmpTaxWorkTrans</c>.</param>
    public void pushTaxObject(Tax _tax, TableId _tableId, Common _record,
                                   TmpTaxRegulation _tmpTaxRegulation,TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        this.initTax(_tax, _tableId, _record, _tmpTaxRegulation, _tmpTaxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the tax adjustements.
    /// </summary>
    /// <param name = "_tableId">The table id.</param>
    /// <param name = "_record">The record.</param>
    public void resetTaxAdjustments(TableId _tableId, Common _record)
    {
        Common common = _record;
        Object dataSource = FormDataUtil::getFormDataSource(common);
        TableId tableId = common.TableId;

        taxRegulation.resetTaxRegulation();

        if (tableId == 0)
        {
            tableId = _tableId;
        }

        switch (tableId)
        {
            case tableNum(SalesTable):
                this.updateSalesTableEstimated(common as SalesTable);
                break;

            case tableNum(VendInvoiceInfoTable):
                this.updatePurchInvoiceVarianceApproved(common as VendInvoiceInfoTable);
                break;

            case tableNum(CustInvoiceTable):
                if (FormDataUtil::isFormDataSource(common) && dataSource &&formDataSourceHasMethod(dataSource, identifierStr(setTouched)))
                {
                    dataSource.setTouched();
                }
                break;

            default:
                break;
        }
        // <GIN>
        if (TaxParameters::isCustomsEnable_IN())
        {
            taxRegulationTotalCustoms = 0;
        }
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            taxRegulation.deleteTaxWithholdUncommitted_IN();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveExchangeRateTaxBaseRegulationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the exchange rate tax regulation amount.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The tax adjustment record.
    /// </param>
    public void saveExchangeRateTaxBaseRegulationAmount(TmpTaxRegulation _tmpTaxRegulation)
    {
        TaxRegulationDetail taxRegulationDetail;

        if (taxRegulation is TaxRegulationDetail)
        {
            taxRegulationDetail = taxRegulation;
            taxRegulationDetail.allocateExchRateTaxBaseRegulationSummary(_tmpTaxRegulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveExchangeRateTaxBaseRegulationAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the exchange rate tax regulation amount in tax currency.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The tax adjustment record.
    /// </param>
    public void saveExchangeRateTaxBaseRegulationAmountCur(TmpTaxRegulation _tmpTaxRegulation)
    {
        TaxRegulationDetail taxRegulationDetail;

        if (taxRegulation is TaxRegulationDetail)
        {
            taxRegulationDetail = taxRegulation;
            taxRegulationDetail.allocateExchRateTaxBaseAmountCurRegulationSummary(_tmpTaxRegulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveExchangeRateTaxRegulationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the exchange rate tax regulation amount.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The tax adjustment record.
    /// </param>
    public void saveExchangeRateTaxRegulationAmount(TmpTaxRegulation _tmpTaxRegulation)
    {
        TaxRegulationDetail taxRegulationDetail;

        if (taxRegulation is TaxRegulationDetail)
        {
            taxRegulationDetail = taxRegulation;
            taxRegulationDetail.allocateExchangeRateTaxRegulationSummary(_tmpTaxRegulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveExchangeRateTaxRegulationAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the exchange rate tax regulation amount in tax currency.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The tax adjustment record.
    /// </param>
    public void saveExchangeRateTaxRegulationAmountCur(TmpTaxRegulation _tmpTaxRegulation)
    {
        TaxRegulationDetail taxRegulationDetail;

        if (taxRegulation is TaxRegulationDetail)
        {
            taxRegulationDetail = taxRegulation;
            taxRegulationDetail.allocateExchangeRateTaxAmountCurRegulationSummary(_tmpTaxRegulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxChangeDisplaySign</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the appropriate multiplier for a tax amount.
    /// </summary>
    /// <param name="_sourceTableId">
    ///     The source table ID.
    /// </param>
    /// <param name="_sourceRecId">
    ///     The source record ID.
    /// </param>
    /// <param name="_isNegative">
    ///     A boolean indicating if the amount is negative.
    /// </param>
    /// <param name="_operationLedgerDimension">
    ///     The operation ledger dimension record ID.
    /// </param>
    /// <param name="_taxDirection">
    ///     The tax direction.
    /// </param>
    /// <returns>
    ///     Either 1 or -1 to determine the correct display sign for the tax amount.
    /// </returns>
    public int taxChangeDisplaySign(int _sourceTableId,
                                        int64 _sourceRecId,
                                        boolean _isNegative,
                                        LedgerDimensionAccount _operationLedgerDimension,
                                        TaxDirection _taxDirection)
    {
        LedgerJournalTrans     ledgerJournalTrans;
        MainAccount            mainAccount;
        LedgerJournalACType    accountType;
        SalesPurch             salesPurch;
        MainAccountLegalEntity mainAccountLegalEntity;

        switch (_sourceTableId)
        {
            case tableNum(LedgerJournalTrans):
                select firstonly ledgerJournalTrans
                    where ledgerJournalTrans.RecId == _sourceRecId;
                if (ledgerJournalTrans)
                {
                    accountType = ledgerJournalTrans.AccountType;
                }
                break;
        }

        switch (accountType)
        {
            case LedgerJournalACType::Cust:
                if (_isNegative)
                    return 1;
                else
                    return -1;
            case LedgerJournalACType::Vend:
                if (_isNegative)
                    return -1;
                else
                    return 1;
            case LedgerJournalACType::Ledger:
                //check to see if account is overriden
                if (_operationLedgerDimension != 0)
                {
                    mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(_operationLedgerDimension);
                    mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccount.RecId, CompanyInfo::findDataArea(curext()).RecId);
                    if (mainAccountLegalEntity)
                    {
                        salesPurch = mainAccountLegalEntity.TaxDirection;
                    }
                }

                if (_isNegative)
                {
                    if (salesPurch == SalesPurch::Sales)
                        return 1;
                    else
                    {
                        if ((_sourceTableId == tableNum(SalesLine)) ||
                                (_sourceTableId == tableNum(SalesQuotationLine)) ||
                                (_sourceTableId == tableNum(CustInvoiceLine)) ||
                                (_sourceTableId == tableNum(MarkupTrans))
                                // <GIN>
                                || (_sourceTableId == tableNum(InventTransferLine))
                                || (_sourceTableId == tableNum(InventQualityOrderTable))
                                // </GIN>
                                )
                            return 1;
                        else
                            return -1;
                    }
                }
                else
                {
                    if (salesPurch == SalesPurch::Sales)
                        return -1;
                    else
                    {
                        if ((_sourceTableId == tableNum(SalesLine)) ||
                                (_sourceTableId == tableNum(SalesQuotationLine)) ||
                                (_sourceTableId == tableNum(CustInvoiceLine)) ||
                                (_sourceTableId == tableNum(MarkupTrans) && _taxDirection == TaxDirection::OutgoingTax)
                                // <GIN>
                                || (_sourceTableId == tableNum(InventQualityOrderTable))
                                // </GIN>
                                )
                            return -1;
                        else
                            return 1;
                    }
                }
        }
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   taxPacked;
        container   taxRegulationPacked;
        container   accountTypeMapPacked;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, accountTypeMapPacked, taxRegulationPacked, taxPacked] = packedClass;
                accountTypeMap = Map::create(accountTypeMapPacked);

                //create a blank taxPurch class and load it with the state that was packed.
                tax = new TaxPurch(this, false, false, true);
                tax.unpack(taxPacked);

                taxRegulation = new TaxRegulation();
                taxRegulation.unpack(taxRegulationPacked);
                taxRegulation.setTax(tax);
                taxRegulation.setTmpTaxWorkTransTmpData(tax.tmpTaxWorkTrans());
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOverrideCalculatedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the override calculated tax value for the specified tax adjustment record.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The tax adjustment record.
    /// </param>
    /// <returns>
    /// The total adjusted tax amount.
    /// </returns>
    public TaxRegulationAmountCur updateOverrideCalculatedTax(TmpTaxRegulation _tmpTaxRegulation)
    {
        taxRegulation.updateOverrideCalculatedTax(_tmpTaxRegulation);
        taxRegulationTotalCur = taxRegulation.getTotalRegulationAmount(_tmpTaxRegulation);

        return taxRegulationTotalCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchInvoiceVarianceApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unmarks the <c>varianceApproved</c> value of the <c>VendInvoiceInfoTable</c> table if the tax is
    ///    adjusted for a purchase order invoice.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///    The PO invoice to be unapproved.
    /// </param>
    public void updatePurchInvoiceVarianceApproved(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        Object  formDataSource;

        if (FormDataUtil::isFormDataSource(_vendInvoiceInfoTable))
        {
            // Changes to tax fields should only unapprove invoice matching variance if using total matching
            if (formDataSourceHasMethod(FormDataUtil::getFormDataSource(_vendInvoiceInfoTable), identifierStr(modifiedField))
                    && VendParameters::find().UseTotalPriceMatching == NoYes::Yes)
            {
                // Call back to the parent datasource, notifying that no fields changed, but the invoice should be unapproved
                formDataSource = FormDataUtil::getFormDataSource(_vendInvoiceInfoTable);

                // Note: BP late bound call warning appears here but cannot be resolved because the compiler
                // doesn't support implementing interfaces on DataSource classes.
                formDataSource.modifiedField(0, true);

                FormDataUtil::getFormDataSource(_vendInvoiceInfoTable).reread();
                FormDataUtil::getFormDataSource(_vendInvoiceInfoTable).refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// If tax is adjusted, the salesTable.estimate value must be recalculated
    /// so the creditlimit-check uses up-to-date data
    /// </summary>
    /// <param name = "_salesTable">The buffer of <c>SalesTable</c>.</param>
    public void updateSalesTableEstimated(SalesTable _salesTable)
    {
        SalesTable salesTableDB;
        boolean salesTableUpdated;
        Object           objDataSource;

        ttsbegin;

        salesTableDB = SalesTable::find(_salesTable.SalesId,true);

        if (salesTableDB)
        {
            if (salesTableDB.setEstimate())
            {
                salesTableDB.doUpdate();
                salesTableUpdated = true;
            }
        }

        ttscommit;

        if (salesTableUpdated && FormDataUtil::isFormDataSource(_salesTable))
        {
            FormDataUtil::getFormDataSource(_salesTable).reread();

            if (formDataSourceHasMethod( FormDataUtil::getFormDataSource(_salesTable),identifierStr(setTouched)))
            {
                // Note: BP late bound call warning appears here but cannot be resolved because the compiler
                // doesn't support implementing interfaces on DataSource classes.
                objDataSource = FormDataUtil::getFormDataSource(_salesTable);

                objDataSource.setTouched();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxShowTaxesSourceSingleLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tax amount for tax source single line.
    /// </summary>
    /// <param name = "_tableId">Teh table id.</param>
    /// <param name = "_recId">The record id.</param>
    /// <param name = "_includeUseTax">Whether include use tax.</param>
    public void updateTaxShowTaxesSourceSingleLine(TableId _tableId, RecId _recId, boolean _includeUseTax = false)
    {
        // <GIN>
        if (isImportOrderExim)
        {
            [taxAmountCurTotal, taxRegulationTotalCur, eximTaxAmountMST, eximBalanceTaxAmountMST, correctedCustomsDuty] =
                tax.showTaxesSourceSingleLine(_tableId, _recId, true);
        }
        else
        {
            isImportOrderExim = false;
        // </GIN>
            [taxAmountCurTotal, taxRegulationTotalCur] =
                    tax.showTaxesSourceSingleLine(_tableId, _recId, _includeUseTax);
        // <GIN>
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxTmpWorkTransForm construct()
    {
        return new TaxTmpWorkTransForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the sales tax exchange rate for a specific transaction type.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    /// <param name="_vatDueDate">
    /// The VAT due date.
    /// </param>
    /// <param name="_aifErrorType">
    /// The AIF error type.
    /// </param>
    /// <returns>
    /// The sales tax exchange rate.
    /// </returns>
    public static CurrencyExchangeRate getSalesTaxExchangeRate(
        TmpTaxWorkTrans _tmpTaxWorkTrans,
        VatDueDate_W    _vatDueDate,
        AifErrorType    _aifErrorType = AifErrorType::Exception)
    {
        TransactionType transactionType = TaxTmpWorkTransForm::determineTransactionType(_tmpTaxWorkTrans);

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00009, funcName());

        CurrencyExchangeRate currencyExchangeRate;
        if (_tmpTaxWorkTrans.SourceTableId == tableNum(LedgerJournalTrans)
            && _tmpTaxWorkTrans.Company
            && _tmpTaxWorkTrans.Company != curExt()
            && TaxSalesTaxExchangeRateSpecificLegalEntity_PLFlight::instance().isEnabled())
        {
            changecompany(_tmpTaxWorkTrans.Company)
            {
                currencyExchangeRate = SalesTaxExchangeRateHelper::getExchangeRateForSalesTax(
                    _tmpTaxWorkTrans.SourceCurrencyCode,
                    transactionType,
                    _vatDueDate,
                    _aifErrorType);
            }
        }
        else
        {
            currencyExchangeRate = SalesTaxExchangeRateHelper::getExchangeRateForSalesTax(
                _tmpTaxWorkTrans.SourceCurrencyCode,
                transactionType,
                _vatDueDate,
                _aifErrorType);
        }

        return currencyExchangeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxSpecificExchRateMapWithVATDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map that contains the currency rates.
    /// </summary>
    /// <param name = "_tmpTaxWorkTrans">The <c>TmpTaxWorkTrans</c> record.</param>
    /// <param name = "_vatDueDate">Date of VAT register</param>
    /// <returns>A map object.</returns>
    /// <remarks>
    /// This method is only used in tax integration.
    /// </remarks>
    internal static Map getTaxSpecificExchRateMapWithVATDueDate(
        TmpTaxWorkTrans _tmpTaxWorkTrans,
        VatDueDate_W _vatDueDate)
    {
        RefTableId sourceTableId;
        RefRecId sourceRecId;

        [sourceTableId, sourceRecId] = TaxSpecificExchangeRateHelper::determineSourceRecordId(_tmpTaxWorkTrans);
        Map exchRateMap = new Map(Types::String, Types::Real);

        TransactionType transactionType = TaxTmpWorkTransForm::determineTransactionType(_tmpTaxWorkTrans);
        TaxSpecificExchangeRateHelper taxSpecificExchangeRateHelper = new TaxSpecificExchangeRateHelper(
            sourceTableId,
            sourceRecId,
            transactionType,
            _tmpTaxWorkTrans.SourceCurrencyCode,
            _vatDueDate);

        // Gets the accounting currency tax specific exchange rate.
        CurrencyCode accountingCurrency = _tmpTaxWorkTrans.accountingCurrency();
        if (accountingCurrency != _tmpTaxWorkTrans.SourceCurrencyCode)
        {
            CurrencyExchangeRate accountingCurrencyExchRate = taxSpecificExchangeRateHelper.getExchangeRateForSalesTax(accountingCurrency);
            if (accountingCurrencyExchRate)
            {
                exchRateMap.add(accountingCurrency, accountingCurrencyExchRate);
            }
            else
            {
                return null;
            }
        }

        // Gets the reporting currency tax specific exchange rate.
        CurrencyCode reportingCurrency = _tmpTaxWorkTrans.reportingCurrency();
        if (reportingCurrency != _tmpTaxWorkTrans.SourceCurrencyCode && !exchRateMap.exists(reportingCurrency))
        {
            CurrencyExchangeRate reportingCurrencyExchRate = taxSpecificExchangeRateHelper.getExchangeRateForSalesTax(reportingCurrency);
            if (reportingCurrencyExchRate)
            {
                exchRateMap.add(reportingCurrency, reportingCurrencyExchRate);
            }
            else
            {
                return null;
            }
        }

        // Gets the tax currency tax specific exchange rate.
        TmpTaxWorkTrans localTmpTaxWorkTrans;
        localTmpTaxWorkTrans.setTmpData(_tmpTaxWorkTrans);
        while select CurrencyCode from localTmpTaxWorkTrans
            group by CurrencyCode
        {
            if (localTmpTaxWorkTrans.CurrencyCode != _tmpTaxWorkTrans.SourceCurrencyCode && !exchRateMap.exists(localTmpTaxWorkTrans.CurrencyCode))
            {
                CurrencyExchangeRate exchRate = taxSpecificExchangeRateHelper.getExchangeRateForSalesTax(localTmpTaxWorkTrans.CurrencyCode);
                if (exchRate)
                {
                    exchRateMap.add(localTmpTaxWorkTrans.CurrencyCode, exchRate);
                }
                else
                {
                    return null;
                }
            }
        }

        TaxSpecificExchangeRateHelper::updateWithExchangeRateMapAndVATDueDate(
            sourceTableId,
            sourceRecId,
            exchRateMap,
            _vatDueDate);

        return exchRateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTransactionType</Name>
				<Source><![CDATA[
    private static TransactionType determineTransactionType(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TransactionType transactionType;
        switch (_tmpTaxWorkTrans.HeadingTableId)
        {
            case tableNum(CustInvoiceTable), tableNum(SalesTable) :
                transactionType = TransactionType::Sales;
                break;

            case tableNum(VendInvoiceInfoTable) :
                transactionType = TransactionType::Purchase;
                break;

            case tableNum(LedgerJournalTable) :
                switch (_tmpTaxWorkTrans.TaxDirection)
                {
                    case TaxDirection::IncomingTax, TaxDirection::UseTax, TaxDirection::TaxExemptPurchase :
                        transactionType = TransactionType::Purchase;
                        break;

                    default :
                        transactionType = TransactionType::Sales;
                }
                break;

            default:
                transactionType = TransactionType::Sales;
        }

        return transactionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTaxAmountAccountingCur_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculated sales tax amount in customs currency
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// TmpTaxWorkTrans table record
    /// </param>
    /// <param name="_tmpTaxRegulation">
    /// TmpTaxRegulation table record
    /// </param>
    /// <param name="_sourceTaxAmountCur">
    /// Tax amount in transaction currency to be converted to accounting currency
    /// </param>
    /// <returns>
    /// Sales tax amount in customs currency
    /// </returns>
    public TaxAmountCur_IN getSourceTaxAmountAccountingCur_IN(TmpTaxWorkTrans _tmpTaxWorkTrans = null, TmpTaxRegulation _tmpTaxRegulation = null, TaxAmountCur _sourceTaxAmountCur =0)
    {
        TaxAmountCur_IN         sourceTaxAmountAccountingCurrency;
        CurrencyExchangeHelper  currencyExchangeHelper;
        LedgerExtensionIN       ledgerExtensionIN;
        Ledger                  ledger;

        ledger = ledger::find(Ledger::current());
        ledgerExtensionIN = LedgerExtensionIN::findByLedger(ledger.Recid);
        currencyExchangeHelper = CurrencyExchangeHelper::construct();
        currencyExchangeHelper.parmExchangeDate(_tmpTaxWorkTrans.TransDate);
        currencyExchangeHelper.parmLedgerRecId(ledger.RecId);
        currencyExchangeHelper.parmExchangeRateTypeRecId(ledgerExtensionIN.CustomsImportExchangeRateType);
        sourceTaxAmountAccountingCurrency = currencyExchangeHelper.calculateTransactionToAccounting(_tmpTaxRegulation.SourceCurrencyCode, _sourceTaxAmountCur, true);

        return sourceTaxAmountAccountingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesTaxExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display SalesTaxExchangeRate on TmpTaxWorkTrans form
    /// </summary>
    /// <param name="_parameters">
    /// TaxTmpWorkTransFormParameters paramerers calss record
    /// </param>
    /// <returns>
    /// ExchRate / 100 * Conversion factor
    /// </returns>
    public ExchRate displaySalesTaxExchRate(TaxTmpWorkTransFormParameters _parameters)
    {
        ExchRate salesTaxExRate = _parameters.vatExchRate;
        TmpTaxWorkTrans tmpTaxWorkTransLoc;
        tmpTaxWorkTransLoc = this.getTmpTaxWorkTrans();

        if (tmpTaxWorkTransLoc)
        {
            ExchRate realExchRate = CurrencyEuroDenomination::displayStoredExchangeRate_Static(salesTaxExRate, this.getExchangeRateDisplayFactor(tmpTaxWorkTransLoc));

            salesTaxExRate = realExchRate;
        }

        return salesTaxExRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxExchRateForStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get SalesTaxExchangeRate on TmpTaxWorkTrans form for storage
    /// </summary>
    /// <param name="_parameters">
    /// TaxTmpWorkTransFormParameters paramerers calss record
    /// </param>
    /// <returns>
    /// ExchRate * 100 / Conversion factor
    /// </returns>
    public ExchRate getSalesTaxExchRateForStorage(TaxTmpWorkTransFormParameters _parameters)
    {
        ExchRate salesTaxExRate = _parameters.vatExchRate;
        TmpTaxWorkTrans tmpTaxWorkTransLoc;
        tmpTaxWorkTransLoc = this.getTmpTaxWorkTrans();

        if (tmpTaxWorkTransLoc)
        {
            ExchRate realExchRate = CurrencyEuroDenomination::prepareExchangeRateForStorage_Static(salesTaxExRate, this.getExchangeRateDisplayFactor(tmpTaxWorkTransLoc));

            salesTaxExRate = realExchRate;
        }

        return salesTaxExRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    private TmpTaxWorkTrans getTmpTaxWorkTrans()
    {
        TmpTaxWorkTrans tmpTaxWorkTransLoc;

        tmpTaxWorkTransLoc.setTmpData(tax.tmpTaxWorkTrans());
        select firstonly SourceCurrencyCode, TaxDirection
            from tmpTaxWorkTransLoc;

        return tmpTaxWorkTransLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateDisplayFactor</Name>
				<Source><![CDATA[
    private ExchangeRateDisplayFactor getExchangeRateDisplayFactor(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        LedgerRecId currentLedgerRecId = Ledger::current();
        CurrencyCode transactionCurrencyCode = _tmpTaxWorkTrans.SourceCurrencyCode;
        CurrencyCode defaultToCurrency = Ledger::accountingCurrencyByLedger(currentLedgerRecId);
        
        TransactionType transactionType;
        if (_tmpTaxWorkTrans.TaxDirection== TaxDirection::IncomingTax || _tmpTaxWorkTrans.TaxDirection == TaxDirection::UseTax)
        {
            transactionType = TransactionType::Purchase;
        }
        else
        {
            transactionType = TransactionType::Sales;
        }

        ExchangeRateTypeRecId currencyExchangeRateType =
            LedgerSalesTaxExchangeRateTypeCurrency::getExchangeRateTypeOfTransactionType(
                currentLedgerRecId,
                transactionCurrencyCode,
                transactionType);

        return ExchangeRateCurrencyPair::getExchangeRateDisplayFactor(
            transactionCurrencyCode,
            defaultToCurrency,
            currencyExchangeRateType,
            true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>