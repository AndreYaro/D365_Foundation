<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HashFunctions_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System;
using System.IO;
using System.Text;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

[ExtensionOf(classStr(HashFunctions))]
final public static class HashFunctions_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>computeStringHashSHA1FromString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes SHA-1 hash for given string.
    /// </summary>
    /// <param name = "_data">
    /// String with data to calculate hash.
    /// </param>
    /// <param name = "_keyVaultCertificateRef">
    /// Key vault certificate reference to be used to sign the hash.
    /// </param>
    /// <param name = "_certificateSubject">
    /// Certificate subject to be used to sign the hash.
    /// </param>
    /// <returns>
    /// SHA-1 hash of the given string.
    /// </returns>
    public static str computeStringHashSHA1FromString(
        str _data,
        KeyVaultCertificateRef _keyVaultCertificateRef = 0,
        DigitalCertificateSubject _certificateSubject = null)
    {
        str ret;

        if (_data)
        {
            Byte[] data;
            Byte[] byteArray = Encoding::UTF8.GetBytes(_data);

            using (MemoryStream  memStream = new MemoryStream(byteArray))
            {
                data = memStream.ToArray();
                memStream.Close();
            }

            Byte[] bytesHash;

            using(SHA1 sha1 = SHA1::Create())
            {
                bytesHash = sha1.ComputeHash(data);
            }

            if (_keyVaultCertificateRef || _certificateSubject)
            {
                X509Certificate2 cetificate = CertificateHelper_BR::getDigitalCertificate(_keyVaultCertificateRef, _certificateSubject);

                if (cetificate)
                {
                    using(RSA rsa = cetificate.GetRSAPrivateKey())
                    {
                        bytesHash = rsa.SignHash(bytesHash, HashAlgorithmName::SHA1, RSASignaturePadding::Pkcs1);
                    }
                }
            }

            ret = Convert::ToBase64String(bytesHash);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>