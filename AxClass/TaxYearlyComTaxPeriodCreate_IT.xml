<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxYearlyComTaxPeriodCreate_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The TaxYearlyComTaxPeriodCreate_IT class is used for generation of the <c>TaxYearlyComV2_IT</c> and <c>TaxYearlyComReportV2_IT</c>
///    records based on the content of the <c>TaxBook</c> table.
/// </summary>
#ISOCountryRegionCodes
public class TaxYearlyComTaxPeriodCreate_IT extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        TaxYearlyComReport_IT taxYearlyComReport;

        ttsbegin;
        Yr prevYear = year(prevyr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        boolean recordsInserted = false;

        TaxBook taxBook;

        while select taxBook
            group by atecofinCode_IT, TaxPeriod
            where taxBook.atecofinCode_IT != ''
        {
            TaxYearlyComV2_IT taxYearlyCom = TaxYearlyComV2_IT::find(
                prevYear,
                taxBook.atecofinCode_IT, 
                taxBook.TaxPeriod);

            if (!taxYearlyCom)
            {
                TaxYearlyComV2_IT taxYearlyComForTaxYearlyComId;
                select firstonly taxYearlyComForTaxYearlyComId
                    where taxYearlyComForTaxYearlyComId.Year == prevYear
                        && taxYearlyComForTaxYearlyComId.TaxPeriod == taxBook.TaxPeriod;

                taxYearlyCom.TaxYearlyComId = taxYearlyComForTaxYearlyComId 
                                                ? taxYearlyComForTaxYearlyComId.TaxYearlyComId 
                                                : NumberSeq::newGetNum(TaxParameters::numRefTaxYearlyComId_IT()).num();

                taxYearlyCom.Year = prevYear;
                taxYearlyCom.atecofinCode = taxBook.atecofinCode_IT;
                taxYearlyCom.TaxPeriod = taxBook.TaxPeriod;
                taxYearlyCom.insert();

                TaxYearlyComTaxPeriodCreate_IT::createTaxYearlyComReport_IT(taxYearlyCom);

                recordsInserted = true;
            }
        }

        ttscommit;

        if (!recordsInserted)
        {
            info("@SYS329025");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxYearlyComReport_IT</Name>
				<Source><![CDATA[
    private static void createTaxYearlyComReport_IT(TaxYearlyComV2_IT _taxYearlyCom)
    {
        TaxYearlyComReportV2_IT taxYearlyComReport;

        select firstonly RecId from taxYearlyComReport
            where taxYearlyComReport.atecofinCode == _taxYearlyCom.atecofinCode
                && taxYearlyComReport.TaxPeriod == _taxYearlyCom.TaxPeriod
                && taxYearlyComReport.Year == _taxYearlyCom.Year;

        if (!taxYearlyComReport)
        {
            taxYearlyComReport.atecofinCode = _taxYearlyCom.atecofinCode;
            taxYearlyComReport.TaxYearlyComId = _taxYearlyCom.TaxYearlyComId;
            taxYearlyComReport.Year = _taxYearlyCom.Year;
            taxYearlyComReport.TaxPeriod = _taxYearlyCom.TaxPeriod;

            CompanyInfo companyInfo = CompanyInfo::find();

            if (MultipleTaxIdReportingHelper::isLegalEntityOrTaxPeriodInCountryRegion(_taxYearlyCom.TaxPeriod, [#isoIT], MultipleTaxIdScope::VATDeclaration))
            {
                TaxRegistration taxRegistration = TaxRegistration::find(MultipleTaxIdReportingHelper::getTaxRegistrationRecIdFromTaxPeriod(_taxYearlyCom.TaxPeriod));
                DirPartyLocation partyLocation = DirPartyLocation::findRec(taxRegistration.DirPartyLocation);

                taxYearlyComReport.CompanyEmail = TaxYearlyComTaxPeriodCreate_IT::getLocator(partyLocation.Location, LogisticsElectronicAddressMethodType::Email);
                taxYearlyComReport.CompanyFax = TaxYearlyComTaxPeriodCreate_IT::getLocator(partyLocation.Location, LogisticsElectronicAddressMethodType::Fax);
                taxYearlyComReport.CompanyPhone = TaxYearlyComTaxPeriodCreate_IT::getLocator(partyLocation.Location, LogisticsElectronicAddressMethodType::Phone);

                taxYearlyComReport.CompanyName = LogisticsLocation::find(partyLocation.Location).Description;
                taxYearlyComReport.CompanyCoRegNum = taxRegistration.RegistrationNumber;
            } 
            else
            {
                taxYearlyComReport.CompanyEmail = companyInfo.email();
                taxYearlyComReport.CompanyFax = companyInfo.teleFax();
                taxYearlyComReport.CompanyPhone = companyInfo.phone();

                taxYearlyComReport.CompanyName = companyInfo.name();
                taxYearlyComReport.CompanyCoRegNum = companyInfo.CoRegNum;

            }
            taxYearlyComReport.CompanyFiscalCode = companyInfo.FiscalCode_IT;
            taxYearlyComReport.LegalNature = companyInfo.LegalNature_IT;

            taxYearlyComReport.insert();

            TaxYearlyComTaxPeriodCreate_IT::calcTaxReportAmount(taxYearlyComReport);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocator</Name>
				<Source><![CDATA[
    private static LogisticsElectronicAddressLocator getLocator(LogisticsLocationRecId _logisticsLocationRecId, LogisticsElectronicAddressMethodType _addressMethodType)
    {
        if (!_logisticsLocationRecId || _addressMethodType == LogisticsElectronicAddressMethodType::None)
        {
            return '';
        }

        LogisticsElectronicAddressLocator   locator;
        LogisticsElectronicAddress          logisticsElectronicAddress;
        DirPartyLocation                    dirPartyLocation;
        LogisticsLocation                   logisticsLocation;

        select firstOnly Locator from logisticsElectronicAddress
            where logisticsElectronicAddress.Type == _addressMethodType
                && logisticsElectronicAddress.IsPrimary
            exists join logisticsLocation
                where logisticsLocation.RecId == logisticsElectronicAddress.Location
                    && logisticsLocation.ParentLocation == _logisticsLocationRecId;
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxReportAmount</Name>
				<Source><![CDATA[
    private static void calcTaxReportAmount(TaxYearlyComReportV2_IT _taxYearlyComReportV2_IT)
    {
        Amount calcTaxAmount;
        TaxYearlyComSetup_IT setupField;
        TaxYearlyComTaxCodes_IT setupTaxCodes;
        TaxYearlyComTotal_IT setupComTotal;
        TaxReportLine_IT reportLine;
        LineNum nextLineNum;
        TaxReportLine_IT reportLineTotal;

        TransDate periodStart = mkDate(1, 1,_taxYearlyComReportV2_IT.Year);
        TransDate periodEnd = DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), periodStart);

        select maxof(LineNum) from reportLine
            where reportLine.TaxReportHeader == _taxYearlyComReportV2_IT.TaxReportHeader;
        nextLineNum = reportLine.LineNum + 1;

        while select setupField
        {
            reportLine = TaxReportLine_IT::findFieldID(_taxYearlyComReportV2_IT.TaxReportHeader, setupField.FieldID, true);

            if (!reportLine)
            {
                reportLine.TaxReportHeader = _taxYearlyComReportV2_IT.TaxReportHeader;
                reportLine.FieldID = setupField.FieldID;
                reportLine.FieldDescription = setupField.FieldDescription;
                reportLine.FieldFormat = setupField.FieldFormat;
                reportLine.LineNum = nextLineNum;
                nextLineNum++;
            }

            switch (setupField.Calculation)
            {
                case TaxYearlyComCalculation_IT::Tax:
                    calcTaxAmount = 0;

                    while select setupTaxCodes
                        where setupTaxCodes.TaxYearlyComSetup == setupField.RecId
                    {
                        calcTaxAmount += setupField.Sign * TaxYearlyComTaxPeriodCreate_IT::getAmount(
                            setupField.TaxReportingAmount,
                            setupField.getQuery(),
                            periodStart,
                            periodEnd,
                            _taxYearlyComReportV2_IT,
                            setupTaxCodes.getExclusionsQuery(),
                            setupTaxCodes.TaxCode,
                            setupField.IncludeTaxInCostPrice);
                    }

                    reportLine.FieldValue = TaxReport770Writer_IT::valueNonPosNum(calcTaxAmount, setupField.FieldFormat);
                    break;

                case TaxYearlyComCalculation_IT::Manual:
                    reportLine.FieldValue = setupField.FieldValue;
                    break;

                case TaxYearlyComCalculation_IT::Total:
                    reportLine.FieldValue = '';
                    break;
            }

            reportLine.write();
        }

        while select setupField
            where setupField.Calculation == TaxYearlyComCalculation_IT::Total
        {
            reportLineTotal = TaxReportLine_IT::findFieldID(_taxYearlyComReportV2_IT.TaxReportHeader, setupField.FieldID, true);

            calcTaxAmount = 0;

            while select FieldID, Sign from setupComTotal
                where setupComTotal.TaxYearlyComSetup_IT == setupField.RecId
            {
                reportLine = TaxReportLine_IT::findFieldID(_taxYearlyComReportV2_IT.TaxReportHeader, setupComTotal.FieldID);
                calcTaxAmount += setupComTotal.Sign * TaxReport770Writer_IT::getNumFromNonPosValue(reportLine.FieldValue, reportLine.FieldFormat);
            }

            calcTaxAmount = calcTaxAmount * setupField.Sign;

            reportLineTotal.FieldValue = TaxReport770Writer_IT::valueNonPosNum(calcTaxAmount, setupField.FieldFormat);

            reportLineTotal.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    private static Amount getAmount(
        TaxReportingAmount_IT _reportingAmount,
        Query _queryHeader,
        TransDate _periodStart,
        TransDate _periodEnd,
        TaxYearlyComReportV2_IT _taxYearlyComReport,
        Query _queryLines,
        TaxCode _taxCode,
        boolean _includeTaxInCostPrice)
    {
        boolean includeTaxInCostPrice = _includeTaxInCostPrice;
        Query query = new Query(_queryHeader);

        QueryBuildDataSource qbdsTaxBook = query.dataSourceTable(tableNum(TaxBook));
        findOrCreateRange_W(qbdsTaxBook, fieldNum(TaxBook, atecofinCode_IT), _taxYearlyComReport.ATECOFINCode);

        QueryBuildDataSource qbdsTaxTrans = query.dataSourceTable(tableNum(TaxTrans));

        QueryBuildRange taxIdQBR = findOrCreateRange_W(qbdsTaxTrans, fieldNum(TaxTrans, TaxPeriod));
        if (!taxIdQBR.value())
        {
            taxIdQBR.value(queryValue(_taxYearlyComReport.TaxPeriod));
        }
        else
        {
            QueryBuildDataSource qbdsTaxPeriod = qbdsTaxTrans.addDataSource(tableNum(TaxPeriodHead));
            qbdsTaxPeriod.relations(true);
            qbdsTaxPeriod.joinMode(JoinMode::ExistsJoin);
            findOrCreateRange_W(qbdsTaxPeriod, fieldNum(TaxPeriodHead, TaxPeriod), _taxYearlyComReport.TaxPeriod);
        }
        
        if (_reportingAmount == TaxReportingAmount_IT::TaxAmount)
        {
            qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxAmount), SelectionField::Sum);
        }
        else
        {
            qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxBaseAmount), SelectionField::Sum);
            qbdsTaxTrans.addGroupByField(fieldNum(TaxTrans, TaxDirection));
            qbdsTaxTrans.addGroupByField(fieldNum(TaxTrans, Voucher));
            qbdsTaxTrans.addGroupByField(fieldNum(TaxTrans, TransDate));

            if (includeTaxInCostPrice && _reportingAmount == TaxReportingAmount_IT::TaxBase)
            {
                qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxAmount), SelectionField::Sum);
            }
        }

        qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxInCostPriceMST), SelectionField::Sum);

        if (TaxParameters::reportUseVatDueDate_W())
        {
            QueryBuildDataSource qbdsTaxTrans_W = query.dataSourceTable(tableNum(TaxTrans_W));
            TaxYearlyComSetup_IT::setDefaultDateRange(qbdsTaxTrans_W, _periodStart, _periodEnd);
        }
        else
        {
            TaxYearlyComSetup_IT::setDefaultDateRange(qbdsTaxTrans, _periodStart, _periodEnd);
        }
        findOrCreateRange_W(qbdsTaxTrans, fieldNum(TaxTrans, TaxCode), _taxCode);

        if (SysQuery::queryHasRanges(_queryLines))
        {
            if (_reportingAmount == TaxReportingAmount_IT::TaxBase)
            {
                includeTaxInCostPrice = false;
            }

            QueryBuildDataSource qbdsTaxTransGJAE;
            qbdsTaxTransGJAE = qbdsTaxTrans.addDataSource(tableNum(TaxTransGeneralJournalAccountEntry));
            qbdsTaxTransGJAE.relations(true);
            if (TaxParameters::reportUseVatDueDate_W())
            {
                qbdsTaxTransGJAE.fetchMode(QueryFetchMode::One2One);
            }
            findOrCreateRange_W(qbdsTaxTransGJAE, fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship), SysQuery::value(TaxTransRelationshipType::TransactionLineAccount));

            QueryBuildDataSource qbdsGJAE;
            qbdsGJAE = qbdsTaxTransGJAE.addDataSource(tableNum(GeneralJournalAccountEntry));
            qbdsGJAE.relations(true);

            QueryBuildDataSource qbdsDimAttributeVC_GJAE;
            qbdsDimAttributeVC_GJAE = qbdsGJAE.addDataSource(tableNum(DimensionAttributeValueCombination));
            qbdsDimAttributeVC_GJAE.relations(true);

            QueryBuildDataSource qbdsMainAccount_GJAE;
            qbdsMainAccount_GJAE = qbdsDimAttributeVC_GJAE.addDataSource(tableNum(MainAccount));
            qbdsMainAccount_GJAE.relations(false);
            qbdsMainAccount_GJAE.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));
            qbdsMainAccount_GJAE.joinMode(JoinMode::NoExistsJoin);

            TaxYearlyComTaxCodes_IT::mergeQueries(qbdsMainAccount_GJAE, _queryLines);
        }

        Amount sumTaxAmount;

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(TaxTrans)))
            {
                TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans));

                if (_reportingAmount == TaxReportingAmount_IT::TaxAmount)
                {
                    sumTaxAmount += taxTrans.TaxAmount;
                }
                else
                {
                    sumTaxAmount += taxTrans.TaxBaseAmount;
                }

                if (includeTaxInCostPrice)
                {
                    if (_reportingAmount == TaxReportingAmount_IT::TaxAmount)
                    {
                        sumTaxAmount -= taxTrans.TaxInCostPriceMST;
                    }
                    else if (_reportingAmount == TaxReportingAmount_IT::TaxBase && taxTrans.TaxAmount)
                    {
                        sumTaxAmount -= CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmount * (taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST) / taxTrans.TaxAmount);
                    }
                    else if (taxTrans.TaxDirection != TaxDirection::UseTax)
                    {
                        sumTaxAmount += taxTrans.TaxInCostPriceMST;
                    }
                }

                if (sumTaxAmount && _reportingAmount != TaxReportingAmount_IT::TaxAmount)
                {
                    GeneralJournalAccountEntry              generalJournalAccountEntry;
                    GeneralJournalEntry                     generalJournalEntry;
                    SubledgerVoucherGeneralJournalEntry     subledgerVoucherGeneralJournalEntry;

                    select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                        where generalJournalAccountEntry.PostingType == LedgerPostingType::MSTDiff
                    exists join generalJournalEntry
                        where generalJournalEntry.RecId    == generalJournalAccountEntry.GeneralJournalEntry
                            && generalJournalEntry.Ledger  == Ledger::current()
                    exists join subledgerVoucherGeneralJournalEntry
                        where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry  == generalJournalEntry.RecId
                            && subledgerVoucherGeneralJournalEntry.Voucher             == taxTrans.Voucher
                            && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId   == taxTrans.DataAreaId
                            && subledgerVoucherGeneralJournalEntry.AccountingDate      == taxTrans.TransDate;

                    sumTaxAmount += generalJournalAccountEntry.AccountingCurrencyAmount;
                }
            }
        }

        return sumTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxYearlyComTaxPeriodCreate_IT taxYearlyComTaxPeriodCreate = new TaxYearlyComTaxPeriodCreate_IT();
        if (taxYearlyComTaxPeriodCreate.prompt())
        {
            taxYearlyComTaxPeriodCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@VATDeclaration:TaxYearlyCommunicationCreation";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>