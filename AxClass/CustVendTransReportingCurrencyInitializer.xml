<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransReportingCurrencyInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendTransReportingCurrencyInitializer</c> class defaults and initializes values for reporting currency amounts
/// on customer and vendor transactions.
/// </summary>
internal final class CustVendTransReportingCurrencyInitializer
{
    private CustVendTrans custVendTrans;
    private RecId transactionLegalEntityRecId;
    private LedgerRecId transactionLedgerRecId;
    private CurrencyCode transactionReportingCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateReportingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a reporting currency amount.
    /// </summary>
    /// <remarks>
    /// The <c>CustVendTrans</c> buffer must have a currency code and a transaction amount defined in order to return a non-zero amount.
    /// If no reporting currency exchange rate fields have a value, the system default exchange rates will be used.
    /// </remarks>
    internal void calculateReportingCurrencyAmount()
    {
        if (this.isCurrencyPairDefined()
            && custVendTrans.ReportingCurrencyAmount == 0.0)
        {
            if (this.doTransactionAndReportingCurrencyMatch())
            {
                custVendTrans.ReportingCurrencyCrossRate = 100.0;
                custVendTrans.ReportingCurrencyExchRate = 100.0;

                custVendTrans.ReportingCurrencyAmount = custVendTrans.AmountCur;
            }
            else
            {
                if (this.isAnyReportingCurrencyExchRateDefined())
                {
                    this.initReportingCurrencyFields();
                }
                else
                {
                    this.initSystemReportingExchRate();
                }

                CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                    transactionLedgerRecId,
                    custVendTrans.TransDate);

                custVendTrans.setExchangeHelperReportingExchRate(currencyExchangeHelper);

                custVendTrans.ReportingCurrencyAmount = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(
                    custVendTrans.CurrencyCode,
                    custVendTrans.AmountCur);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyReportingCurrencyExchRateDefined</Name>
				<Source><![CDATA[
    private boolean isAnyReportingCurrencyExchRateDefined()
    {
        boolean isAnyReportingCurrencyExchRateDefined;

        if (custVendTrans.ReportingCurrencyExchRate != 0
            || custVendTrans.ReportingCurrencyCrossRate != 0)
        {
            isAnyReportingCurrencyExchRateDefined = true;
        }

        return isAnyReportingCurrencyExchRateDefined;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportingCurrencyFields</Name>
				<Source><![CDATA[
    private void initReportingCurrencyFields()
    {
        if (custVendTrans.ReportingCurrencyExchRate == 0.0
            && custVendTrans.ReportingCurrencyCrossRate != 0.0)
        {
            custVendTrans.ReportingCurrencyExchRate = custVendTrans.ReportingCurrencyCrossRate;
        }
        else if (custVendTrans.ReportingCurrencyExchRate != 0.0
            && custVendTrans.ReportingCurrencyCrossRate == 0.0)
        {
            custVendTrans.ReportingCurrencyCrossRate = ExchangeRateCalculation::calculateCrossRate(
                custVendTrans.ReportingCurrencyExchRate,
                custVendTrans.ReportingCurrencyExchRateSecondary);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSystemReportingExchRate</Name>
				<Source><![CDATA[
    internal void initSystemReportingExchRate()
    {
        if (this.isCurrencyPairDefined())
        {
            ExchangeRateCalculation helper = ExchangeRateCalculation::newExchangeDate(
                Ledger::reportingCurrencyExchangeRateType(transactionLegalEntityRecId),
                custVendTrans.CurrencyCode,
                transactionReportingCurrency,
                custVendTrans.TransDate);

            custVendTrans.ReportingCurrencyExchRate = helper.getExchangeRate1();
            custVendTrans.ReportingCurrencyExchRateSecondary = helper.getExchangeRate2();
            custVendTrans.ReportingCurrencyCrossRate = helper.getCrossRate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrencyPairDefined</Name>
				<Source><![CDATA[
    private boolean isCurrencyPairDefined()
    {
        return transactionReportingCurrency != '' && custVendTrans.CurrencyCode != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTransactionAndReportingCurrencyMatch</Name>
				<Source><![CDATA[
    private boolean doTransactionAndReportingCurrencyMatch()
    {
        return transactionReportingCurrency == custVendTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyForTransaction</Name>
				<Source><![CDATA[
    internal CurrencyCode getReportingCurrencyForTransaction()
    {
        return transactionReportingCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerData</Name>
				<Source><![CDATA[
    private void initLedgerData()
    {
        transactionLegalEntityRecId = CompanyInfo::current(custVendTrans.company());
        transactionLedgerRecId = Ledger::primaryLedger(transactionLegalEntityRecId);
        transactionReportingCurrency = Ledger::reportingCurrencyByLedger(transactionLedgerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForTransaction</Name>
				<Source><![CDATA[
    internal static CustVendTransReportingCurrencyInitializer newForTransaction(CustVendTrans _custVendTrans)
    {
        CustVendTransReportingCurrencyInitializer initializer = new CustVendTransReportingCurrencyInitializer();
        initializer.custVendTrans = _custVendTrans;

        initializer.initLedgerData();

        return initializer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>