<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PayrollPayStatementGeneration</c> class provides the UI and basic function for pay statement processing.
/// </summary>
class PayrollPayStatementGeneration extends PayrollStatementGeneration implements BatchRetryable
{
    FormDateControl             paymentDateControl;
    FormBuildDateControl        paymentDateBuildControl;
    FormBuildComboBoxControl    paymentTypeBuildComboBox;
    FormBuildComboBoxControl    paymentMethodOverrideBuildComboBox;
    FormComboBoxControl         paymentTypeComboBox;
    FormComboBoxControl         paymentMethodOverrideComboBox;
    FormCheckBoxControl         disableAccountingCheckBox;
    FormBuildCheckBoxControl    disableAccountingBuildCheckBox;
    PayrollPaymentType                         paymentType;
    PayrollPaymDate                            paymentDate;
    PayrollPayStatementBatchNumber             batchNumber;
    NoYes                                      disableAccounting;
    PayrollPaymentMethodTypeOverrideOption     paymentMethodOverride;

    private const int currentVersion = 1;
    #LOCALMACRO.CurrentList
        callingRecord,
        payPeriodRecId,
        paymentDate,
        paymentType,
        batchNumber,
        disableAccounting,
        paymentMethodOverride
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultPaymentDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the default payment date based on the form values.
    /// </summary>
    protected void defaultPaymentDate()
    {
        PayrollPayPeriodRecId recId;

        if (conLen(payPeriodList)>1)
        {
            recId = conPeek(payPeriodList, payPeriodComboBox.selection() + 1);
            paymentDateControl.dateValue(PayrollPayPeriod::find(recId).DefaultPaymentDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the pay cycle and pay period controls in the dialog.
    /// </summary>
    /// <returns>
    /// The instance of a DialogRunbase class with the customized controls.
    /// </returns>
    public Object dialog()
    {
        super();

        paymentDateBuildControl = dialog.curFormBuildGroup().addControl(FormControlType::Date, 'paymentDateControlconst');
        paymentDateBuildControl.extendedDataType(extendedTypeNum(TransDate));
        paymentDateBuildControl.label("@SYS75144");
        paymentDateBuildControl.helpText("@SYS16653");

        paymentTypeBuildComboBox = dialog.curFormBuildGroup().addControl(FormControlType::ComboBox, 'PaymentType');
        paymentTypeBuildComboBox.enumType(enumNum(PayrollPaymentType));
        paymentTypeBuildComboBox.selection(1);
        paymentTypeBuildComboBox.comboType(1);

        disableAccountingBuildCheckBox = dialog.curFormBuildGroup().addControl(FormControlType::CheckBox, 'DisableAccountingControl');
        disableAccountingBuildCheckBox.label("@SYS4000407");
        disableAccountingBuildCheckBox.helpText("@SYS4000408");
        disableAccountingBuildCheckBox.visible(false);

        paymentMethodOverrideBuildComboBox = dialog.curFormBuildGroup().addControl(FormControlType::ComboBox, 'paymentMethodOverride');
        paymentMethodOverrideBuildComboBox.enumType(enumNum(PayrollPaymentMethodTypeOverrideOption));
        paymentMethodOverrideBuildComboBox.selection(0);
        paymentMethodOverrideBuildComboBox.comboType(1);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCaption</Name>
				<Source><![CDATA[
    protected str dialogCaption()
    {
        return "@Payroll:GeneratePayStatements";
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Payroll:GeneratePayStatements";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieve the control handles from the DialogRunbase object.
    /// </summary>
    /// <param name="_dialog">
    ///     The DialogRunbase object.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        paymentTypeComboBox = _dialog.dialogForm().formRun().control(paymentTypeBuildComboBox.id());
        paymentMethodOverrideComboBox = _dialog.dialogForm().formRun().control(paymentMethodOverrideBuildComboBox.id());
        paymentDateControl = _dialog.dialogForm().formRun().control(paymentDateBuildControl.id());
        disableAccountingCheckBox = _dialog.dialogForm().formRun().control(disableAccountingBuildCheckBox.id());
        payPeriodComboBox.registerOverrideMethod(methodStr(FormComboBoxControl, modified),
                                                        methodStr(PayrollPayStatementGeneration, payPeriodListControl_modified), this);
        paymentTypeComboBox.registerOverrideMethod(methodStr(FormComboBoxControl, modified),
                                                        methodStr(PayrollPayStatementGeneration, paymentType_modified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the paymentDate, payType, disableAccounting from the dialog.
    /// </summary>
    /// <returns>
    /// Return true if the operation succeeds.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        paymentDate = paymentDateControl.dateValue();
        paymentType  = paymentTypeComboBox.selection();
        disableAccounting = disableAccountingCheckBox.checked();
        paymentMethodOverride = paymentMethodOverrideComboBox.selection();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the <c>PayrollEarningGenerationTask</c> class for earning processing.
    /// </summary>
    /// <param name="_batchTaskGroupList">
    /// The list of workers and related positions for the <c>PayrollEarningGenerationTask</c> class to generate earnings.
    /// </param>
    /// <returns>
    /// The <c>PayrollEarningGenerationTask</c> class.
    /// </returns>
    public RunBaseBatch initializeTask(container _batchTaskGroupList)
    {
        PayrollPayStatementGenerationTask payStatementGenerationTask;

        payStatementGenerationTask = new PayrollPayStatementGenerationTask();
        payStatementGenerationTask.parmPayPeriodRecId(payPeriodRecId);
        payStatementGenerationTask.parmPaymentDate(paymentDate);
        payStatementGenerationTask.parmPaymentType(paymentType);
        payStatementGenerationTask.parmDisableAccounting(disableAccounting);
        payStatementGenerationTask.parmBatchTaskGroupList(_batchTaskGroupList);
        payStatementGenerationTask.parmPaymentMethodOverride(paymentMethodOverride);

        if (!batchNumber)
        {
            // If no batch number was specified, grab a new number from the number sequence
            ttsbegin;
            batchNumber = PayrollPayStatementGeneration::getBatchNumber();
            ttscommit;
        }
        payStatementGenerationTask.parmBatchNumber(batchNumber);

        return payStatementGenerationTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        // If the query has yet to be initialized at this point, we need to do so
        // so that the pack won't fail.
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [currentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchNumber</Name>
				<Source><![CDATA[
    public PayrollPayStatementBatchNumber parmBatchNumber(PayrollPayStatementBatchNumber _batchNumber = batchNumber)
    {
        batchNumber = _batchNumber;

        return batchNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingRecord</Name>
				<Source><![CDATA[
    public Common parmCallingRecord(Common _callingRecord = callingRecord)
    {
        callingRecord = _callingRecord;

        return callingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisableAccounting</Name>
				<Source><![CDATA[
    public NoYes parmDisableAccounting(NoYes _disableAccounting = disableAccounting)
    {
        disableAccounting = _disableAccounting;

        return disableAccounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentDate</Name>
				<Source><![CDATA[
    public PayrollPaymDate parmPaymentDate(PayrollPaymDate _paymentDate = paymentDate)
    {
        paymentDate = _paymentDate;

        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentType</Name>
				<Source><![CDATA[
    public PayrollPaymentType parmPaymentType(PayrollPaymentType _paymentType = paymentType)
    {
        paymentType = _paymentType;

        return paymentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentMethodOverride</Name>
				<Source><![CDATA[
    public PayrollPaymentMethodTypeOverrideOption parmPaymentMethodOverride(PayrollPaymentMethodTypeOverrideOption _paymentMethodOverride = paymentMethodOverride)
    {
        paymentMethodOverride = _paymentMethodOverride;

        return paymentMethodOverride;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleControl_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rebuild the list of period end dates whenever the pay cycyle changes and update the payment date according to the pay period.
    /// </summary>
    /// <param name="_formControl">
    /// The instance of the control in the dialog with input modified.
    /// </param>
    /// <returns>
    /// Return true if the pay cycle is modified.
    /// </returns>
    protected boolean payCycleControl_modified(FormControl _formControl)
    {
        boolean ret;

        ret = super(_formControl);

        if (ret)
        {
            this.defaultPaymentDate();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleHelpText</Name>
				<Source><![CDATA[
    protected str payCycleHelpText()
    {
        return "@Payroll:ThePayCycleUsedToGenerateThePayStatements";
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentType_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden to update the <c>DisableAccountingControl</c> control status.
    /// </summary>
    /// <param name="_formControl">
    /// The instance of the control in the dialog with input modified.
    /// </param>
    /// <returns>
    /// Return true if the payment type is modified.
    /// </returns>
    protected boolean paymentType_modified(FormControl _formControl)
    {
        boolean ret;

        ret = paymentTypeComboBox.modified();

        if (ret)
        {
            this.updateDisableAccountingControl();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payPeriodHelpText</Name>
				<Source><![CDATA[
    protected str payPeriodHelpText()
    {
        return "@Payroll:ThePayPeriodUsedToGenerateThePayStatements";
    }

]]></Source>
			</Method>
			<Method>
				<Name>payPeriodListControl_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the payment date when the selection of pay period changes.
    /// </summary>
    /// <param name="_formControl">
    /// The instance of the control in the dialog with input modified.
    /// </param>
    /// <returns>
    /// Return true if the pay period selection is changed.
    /// </returns>
    private boolean payPeriodListControl_modified(FormControl _formControl)
    {
        boolean ret;

        ret = payPeriodComboBox.modified();

        if (ret)
        {
            this.defaultPaymentDate();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showStatementCountMessage</Name>
				<Source><![CDATA[
    protected Description showStatementCountMessage()
    {
        return (strFmt("@SYS4000369", PayrollPayStatement::countPayStatementsByBatchNumber(batchNumber)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;

        PayrollPayPeriodRecId payPeriodRecIdLast;
        Common callingRecordLast;
        PayrollPaymentType paymentTypeLast;
        PayrollPaymDate paymentDateLast;
        PayrollPayStatementBatchNumber batchNumberLast;
        PayrollPaymentMethodTypeOverrideOption paymentMethodOverrideLast;

        #LOCALMACRO.SaveLastList
            callingRecordLast,
            payPeriodRecIdLast,
            paymentDateLast,
            paymentTypeLast,
            batchNumberLast,
            disableAccounting,
            paymentMethodOverrideLast
        #ENDMACRO

        switch (version)
        {
            case currentVersion:
                if (this.inGetSaveLast())
                {
                    // Only want the query from the save last values.
                    [version, #SaveLastList, queryCon] = packedClass;
                }
                else
                {
                    [version, #CurrentList, queryCon] = packedClass;
                }

                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new QueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDisableAccountingControl</Name>
				<Source><![CDATA[
    private void updateDisableAccountingControl()
    {
        //
        // It is necessary to lock updates to the window so that there is
        // not leftover text from the combo box dropdown still displaying
        // in the window after setting the payment type to Manual and
        // making the check box visible.
        //
        dialog.dialogForm().formRun().lockWindowUpdate(true);

        if (paymentTypeComboBox.selection() == PayrollPaymentType::Manual)
        {
            disableAccountingCheckBox.visible(true);
        }
        else
        {
            disableAccountingCheckBox.visible(false);
            disableAccountingCheckBox.checked(false);
        }

        disableAccountingCheckBox.update();
        dialog.dialogForm().formRun().lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcess</Name>
				<Source><![CDATA[
    protected boolean validateProcess()
    {
        boolean passedValidation = super();

        HcmSharedParameters sharedParameters = HcmSharedParameters::find();

        // Pay statements cannot be generated until the check method of payment is defined in the Payroll parameters form.
        if (!parameters.PaymMode)
        {
            passedValidation = passedValidation && checkFailed("@Payroll:PayStatementsCannotBeGeneratedUntilTheCheckMethodOfPaymentIs");
        }

        return passedValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instace for the PayrollPayStatementGeneration.
    /// </summary>
    /// <returns>
    ///     The newly created instance of the PayrollPayStatementGeneration.
    /// </returns>
    public static PayrollPayStatementGeneration construct()
    {
        return (new PayrollPayStatementGeneration());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a new batch number from the number sequence.
    /// </summary>
    /// <returns>
    ///     The new batch number.
    /// </returns>
    public static PayrollPayStatementBatchNumber getBatchNumber()
    {
        NumberSeq                       numberSeq;
        NumberSequenceReference         numberSequenceReference;
        NumberSequenceTable             numberSequenceTable;

        numberSequenceReference = PayrollParameters::numRefPayStatementBatchNumber();
        numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceReference)
        {
            numberSeq = NumberSeq::newGetNum(numberSequenceReference);
        }

        if (numberSeq == null)
        {
            throw error("@Payroll:YouCannotGenerateThePayStatementBecauseANumberSequenceIsNotA");
        }

        return numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        PayrollPayStatementGeneration paymentStatementGeneration;

        paymentStatementGeneration = PayrollPayStatementGeneration::construct();

        if (paymentStatementGeneration.prompt())
        {
            paymentStatementGeneration.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>