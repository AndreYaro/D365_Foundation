<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHierarchySynchronizer_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Utility object used to synchronize the specified hierarchy version with
/// the latest master data.
/// </summary>
class TaxReportHierarchySynchronizer_IN
{
    TaxReportHierarchyVersion_IN        hierarchyVersion;
    TaxReportHierarchy_IN               hierarchy;
    TaxReportHrchyStructureDesign_IN    hierarchyDesign;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildNodeMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Map</c> object with the specified node list, as follows
    /// 1) Key is combo display value of the node
    /// 2) Value is the <c>TaxReportHrchyNode_IN</c> object
    /// </summary>
    /// <param name="_nodeList">
    /// A <c>List</c> of <c>TaxReportHrchyNode_IN</c> objects.
    /// </param>
    /// <returns>
    /// The <c>Map</c> object containing nodes in the list.
    /// </returns>
    private Map buildNodeMap(List _nodeList)
    {
        Map                     nodeMap;
        ListEnumerator          nodeListEnumerator;
        TaxReportHrchyNode_IN   node;

        nodeMap = new Map(Types::String, Types::Class);

        nodeListEnumerator = _nodeList.getEnumerator();
        while (nodeListEnumerator.moveNext())
        {
            node = nodeListEnumerator.current();
            nodeMap.insert(node.parmDisplayValue(), node);
        }

        return nodeMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes the instance <c>TaxReportHierarchySynchronizer_IN</c>.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// An instance of <c>TaxReportHierarchyVersion_IN</c>.
    /// </param>
    protected void init(TaxReportHierarchyVersion_IN _hierarchyVersion)
    {
        hierarchyVersion = _hierarchyVersion;
        hierarchy = TaxReportHierarchy_IN::find(_hierarchyVersion.TaxReportHierarchy_IN);
        hierarchyDesign = TaxReportHrchyStructDesignFactory_IN::getStructureDesignById(hierarchy.RefClassId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAppend</Name>
				<Source><![CDATA[
        private void processAppend(TaxReportHrchyNode_IN _parentNode, Map _curNodeMap, Map _newNodeMap)
    {
        TaxReportHrchyNode_IN   node;
        Set                     nodeSet;
        SetEnumerator           nodeSetEnumerator;

        // To be added
        nodeSet = Set::difference(_newNodeMap.keySet(), _curNodeMap.keySet());

        nodeSetEnumerator = nodeSet.getEnumerator();
        while (nodeSetEnumerator.moveNext())
        {
            node = _newNodeMap.lookup(nodeSetEnumerator.current());

            // Whether or not the node is enabled must be same as the parent node
            node = _parentNode.append(node);
            TaxReportHierarchyHelper_IN::persistTaxReportCodeNode(hierarchyDesign, node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRemove</Name>
				<Source><![CDATA[
        private void processRemove(Map _curNodeMap, Map _newNodeMap)
    {
        TaxReportHrchyNode_IN   node;
        Set                     nodeSet;
        SetEnumerator           nodeSetEnumerator;

        // To be removed
        nodeSet = Set::difference(_curNodeMap.keySet(), _newNodeMap.keySet());

        nodeSetEnumerator = nodeSet.getEnumerator();
        while (nodeSetEnumerator.moveNext())
        {
            node = _curNodeMap.lookup(nodeSetEnumerator.current());

            // delete restricted data if required
            node.remove();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSynchronize</Name>
				<Source><![CDATA[
        private void processSynchronize(Map _curNodeMap, Map _newNodeMap)
    {
        TaxReportHrchyNode_IN   node;
        Set                     nodeSet;
        SetEnumerator           nodeSetEnumerator;

        // To be synchronized
        nodeSet = Set::intersection(_curNodeMap.keySet(), _newNodeMap.keySet());

        nodeSetEnumerator = nodeSet.getEnumerator();
        while (nodeSetEnumerator.moveNext())
        {
            node = _curNodeMap.lookup(nodeSetEnumerator.current());
            node = TaxReportHierarchyHelper_IN::initNodeFromValueTable(
                TaxReportHierarchyNode_IN::find(node.parmRecId()));

            this.synchronizeNode(node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the hierarchy version.
    /// </summary>
    public void synchronize()
    {
        TaxReportHrchyNode_IN   rootNode;

        ttsBegin;

        rootNode = TaxReportHierarchyHelper_IN::findRootNode(hierarchyVersion.RecId);

        this.synchronizeNode(rootNode);

        this.synchronizeSetOffRules();

        this.isSynchronized();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeNode</Name>
				<Source><![CDATA[
        private void synchronizeNode(TaxReportHrchyNode_IN  _node)
    {
        Map     curNodeMap;
        Map     newNodeMap;

        curNodeMap = this.buildNodeMap(
            TaxReportHierarchyHelper_IN::findAllDescendantsByDepth(_node, 1));

        newNodeMap = this.buildNodeMap(
            hierarchyDesign.getNextLevelNodes(_node));

        // |-------------- Current --------------|
        // [ to be removed  [ to be synchronized ] to be added ]
        //                  |--------------- New --------------|

        this.processRemove(curNodeMap, newNodeMap);

        this.processAppend(_node, curNodeMap, newNodeMap);

        this.processSynchronize(curNodeMap, newNodeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeSetOffRules</Name>
				<Source><![CDATA[
        private void synchronizeSetOffRules()
    {
        TaxReportHierarchySetOffRuleDetails_IN      setoffRuleDetail;
        TaxReportHierarchySetOffRuleDirection_IN    setoffRuleDir;
        TaxReportHierarchySetOffRule_IN             setoffRule;
        TaxReportHrchyNodeCollectionDetails_IN      nodeCollectionDetail;
        TaxReportHrchyNodeCollection_IN             nodeCollection;

        // Delete invalid set off rule details
        delete_from setoffRuleDetail
            notExists join nodeCollectionDetail
                where nodeCollectionDetail.RecId == setoffRuleDetail.TaxReportHrchyNodeCollectionDetails_IN;

        // Invalid node collection details have been deleted along with removed nodes

        // Delete set off rules containing invalid node collections

        // Invalid node collection details have been deleted along with removed nodes

        delete_from setoffRuleDir
            notExists join nodeCollection
                where nodeCollection.RecId == setoffRuleDir.TaxReportHrchyNodeCollection_IN;

        delete_from setoffRule
            where setoffRule.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
            notExists join setoffRuleDir
                where setoffRuleDir.TaxReportHierarchySetOffRule_IN == setoffRule.RecId
                   && setoffRuleDir.TaxDirection == TaxDirection::IncomingTax;

        delete_from setoffRule
            where setoffRule.TaxReportHierarchyVersion_IN == hierarchyVersion.RecId
            notExists join setoffRuleDir
                where setoffRuleDir.TaxReportHierarchySetOffRule_IN == setoffRule.RecId
                   && setoffRuleDir.TaxDirection == TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static TaxReportHierarchySynchronizer_IN construct()
    {
        return new TaxReportHierarchySynchronizer_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSynchronizer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>TaxReportHierarchySynchronizer</c> object
    /// with the specified hierarchy version.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// The <c>TaxReportHierarchyVersion_IN</c> record.
    /// </param>
    /// <returns>
    /// The new instance of <c>TaxReportHierarchySynchronizer</c> object.
    /// </returns>
    public static TaxReportHierarchySynchronizer_IN newSynchronizer(
        TaxReportHierarchyVersion_IN _hierarchyVersion)
    {
        TaxReportHierarchySynchronizer_IN   synchronizer;

        synchronizer = TaxReportHierarchySynchronizer_IN::construct();
        synchronizer.init(_hierarchyVersion);

        return synchronizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the specified hierarchy version.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// The <c>TaxReportHierarchyVersion_IN</c> record of the hierarchy version.
    /// </param>
    /// <remarks>
    /// The method is run on server.
    /// </remarks>
    public static void synchronizeVersion(TaxReportHierarchyVersion_IN _hierarchyVersion)
    {
        TaxReportHierarchySynchronizer_IN   synchronizer;

        synchronizer = TaxReportHierarchySynchronizer_IN::newSynchronizer(_hierarchyVersion);
        synchronizer.synchronize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSynchronized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Judges whether the synchronize button has been synchronized.
    ///     If not, update the field <c>IsSynchronized</c> for table <c>TaxReportHierarchyVersion_IN</c>.
    /// </summary>
    public void isSynchronized()
    {
        hierarchyVersion.selectForUpdate(true);
        if (hierarchyVersion.IsSynchronized == NoYes::No)
        {
            hierarchyVersion.IsSynchronized = NoYes::Yes;
            hierarchyVersion.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>