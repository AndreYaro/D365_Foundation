<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XMLWordDocumentTableCell</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The table cell controller.
/// </summary>
public class XMLWordDocumentTableCell
{
    private NetDFOXMLWordprocessingTableCellProxy cell;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(NetDFOXMLWordprocessingTableCellProxy _cell)
    {
        cell = _cell;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the table cell controller.
    /// </summary>
    /// <param name = "_cell">The table cell proxy.</param>
    /// <returns></returns>
    public static XMLWordDocumentTableCell construct(NetDFOXMLWordprocessingTableCellProxy _cell)
    {
        return new XMLWordDocumentTableCell(_cell);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clean</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans the cell text.
    /// </summary>
    public void clean()
    {
        System.Collections.IEnumerable textEnumerable = cell.descendantsText();
        if (textEnumerable != null)
        {
            System.Collections.IEnumerator textEnumerator = textEnumerable.GetEnumerator();
            while (textEnumerator.MoveNext())
            {
                NetDFOXMLWordprocessingTextProxy text = ERCast::asAny(textEnumerator.Current) as NetDFOXMLWordprocessingTextProxy;
                text.remove();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cell text
    /// </summary>
    /// <returns>The cell text</returns>
    public str getValue()
    {
        str result = '';

        System.Collections.IEnumerable textEnumerable = cell.descendantsText();
        if (textEnumerable != null)
        {
            System.Collections.IEnumerator textEnumerator = textEnumerable.GetEnumerator();
            while (textEnumerator.MoveNext())
            {
                NetDFOXMLWordprocessingTextProxy text = ERCast::asAny(textEnumerator.Current) as NetDFOXMLWordprocessingTextProxy;
                if (text != null)
                {
                    result += text.getText();
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the cell text.
    /// </summary>
    /// <param name = "_value">The text.</param>
    public void setValue(str _value)
    {
        boolean textUpdated = false;

        System.Collections.IEnumerable textEnumerable = cell.descendantsText();
        if (textEnumerable != null)
        {

            System.Collections.IEnumerator textEnumerator = textEnumerable.GetEnumerator();
            while (textEnumerator.MoveNext())
            {
                NetDFOXMLWordprocessingTextProxy text = ERCast::asAny(textEnumerator.Current) as NetDFOXMLWordprocessingTextProxy;

                if (textUpdated)
                {
                    text.remove();
                }
                else
                {
                    text.setText(_value);
                    textUpdated = true;
                }
            }
        }

        if (!textUpdated)
        {
            NetDFOXMLWordprocessingTextProxy text = NetDFOXMLWordprocessingTextProxy::createNew(_value);

            System.Collections.IEnumerable runs = cell.descendantsRun();
            if (runs != null)
            {
                System.Collections.IEnumerator runsEnumerator = runs.GetEnumerator();
                if (runsEnumerator.MoveNext())
                {
                    NetDFOXMLWordprocessingRunProxy run = ERCast::asAny(runsEnumerator.Current) as NetDFOXMLWordprocessingRunProxy;
                    run.appendChildText(text);
                    textUpdated = true;
                }
            }

            if (!textUpdated)
            {
                System.Collections.IEnumerable paragraphs = cell.descendantsParagraph();
                if (runs != null)
                {
                    System.Collections.IEnumerator paragraphsEnumerator = paragraphs.GetEnumerator();
                    if (paragraphsEnumerator.MoveNext())
                    {
                        NetDFOXMLWordprocessingParagraphProxy paragraph = ERCast::asAny(paragraphsEnumerator.Current) as NetDFOXMLWordprocessingParagraphProxy;

                        System.Object[] textArgument = new System.Object[1]();
                        textArgument.SetValue(text, 0);

                        NetDFOXMLWordprocessingRunProxy run = NetDFOXMLWordprocessingRunProxy::createNewFromOpenXmlElementProxyArray(textArgument);
                        paragraph.appendChildRun(run);
                        textUpdated = true;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>