<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalTransferProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
/// <summary>
/// The <c>SubledgerJournalTransferProcess</c> class is used as an entry point to transfer the sub
/// ledger journal entries.
/// </summary>
[ExportMetadataAttribute("SubledgerJournalITransferProvider", "DefaultProvider")]
[ExportAttribute("Dynamics.AX.Application.SubledgerJournalITransferProvider")]
public class SubledgerJournalTransferProcess implements SubledgerJournalITransferProvider
{
    SubledgerJournalTransferRequest subledgerJournalTransferRequest;
    //Plugin class constants
    const str SubledgerJournalizerValidatorPluginNameSpace = 'Microsoft.Dynamics.AX.Application';
    boolean waitInAsyncMode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWaitInAsyncMode</Name>
				<Source><![CDATA[
    public boolean parmWaitInAsyncMode(boolean _waitInAsyncMode = waitInAsyncMode)
    {
        waitInAsyncMode = _waitInAsyncMode;
        return waitInAsyncMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performJournalEntryTransferOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs transfers of subledger journal entries in asynchronous batch mode.
    /// </summary>
    /// <param name="_executionMode">
    /// The execution mode to use for the transfer operation
    /// </param>
    private void performJournalEntryTransferOperation(SysOperationExecutionMode _executionMode = SysOperationExecutionMode::ReliableAsynchronous)
    {
        SubledgerJournalTransferController   subledgerJournalTransferController;
        SubledgerJournalTransferRequest      subledgerJournalTransferRequestObj;

        if (subledgerJournalTransferRequest)
        {
            // Create controller object for transfer in asynchronous batch mode
            subledgerJournalTransferController = new SubledgerJournalTransferController(classStr(SubledgerJournalTransferOperation),identifierStr(executeTransfer),
            _executionMode);

            if (_executionMode == SysOperationExecutionMode::ReliableAsynchronous ||
                _executionMode == SysOperationExecutionMode::Asynchronous)
            {
                subledgerJournalTransferRequest.parmSubledgerJournalTransferMode(SubledgerJournalTransferMode::AsynchronousBatch);
            }
            else
            {
                subledgerJournalTransferRequest.parmSubledgerJournalTransferMode(SubledgerJournalTransferMode::Synchronous);
            }
            // Initialize the data contract for the new controller object
            subledgerJournalTransferRequestObj = subledgerJournalTransferController.getDataContractObject(classStr(SubledgerJournalTransferRequest));
            subledgerJournalTransferRequestObj.parmAccountingEventId(subledgerJournalTransferRequest.parmAccountingEventId());
            subledgerJournalTransferRequestObj.parmDoSummarization(subledgerJournalTransferRequest.parmDoSummarization());
            subledgerJournalTransferRequestObj.parmledgerId(subledgerJournalTransferRequest.parmledgerId());
            subledgerJournalTransferRequestObj.parmFiscalCalendarPeriod(subledgerJournalTransferRequest.parmFiscalCalendarPeriod());
            subledgerJournalTransferRequestObj.parmSourceDocumentRelationType(subledgerJournalTransferRequest.parmSourceDocumentRelationType());
            subledgerJournalTransferRequestObj.parmWaitInAsyncMode(subledgerJournalTransferRequest.parmWaitInAsyncMode());
            subledgerJournalTransferRequestObj.parmSourceDocumentType(subledgerJournalTransferRequest.parmSourceDocumentType());
            subledgerJournalTransferRequestObj.parmSubledgerJournalTransferMode(subledgerJournalTransferRequest.parmSubledgerJournalTransferMode());

            subledgerJournalTransferController.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleJournalEntryTransferOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs transfers of subledger journal entries in scheduled batch mode.
    /// </summary>
    private  void scheduleJournalEntryTransferOperation()
    {
        // No need to do anything, sheduled batch job would pick up the journal entry for transfer.
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferJournalEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers subledger journal entries based on the rules that are defined in the
    /// <c>SubLedgerJournalTransferRule</c> class.
    /// </summary>
    /// <param name="_accountingEventId">
    /// The record ID for the <c>AccountingEvent</c> record for which the transfer is requested.
    /// </param>
    /// <returns>
    /// The transfer mode.
    /// </returns>
    public SubledgerJournalTransferMode transferJournalEntries(AccountingEventRecId _accountingEventId)
    {
        SubledgerJournalTransferRule        subledgerJournalTransferRule;
        AccountingEvent                     accountingEvent;
        SourceDocumentHeader                sourceDocumentHeader;
        SourceDocument                      sourceDocument;
        SourceDocumentClassId               sourceDocumentClassId;
        Object                              object;
        SubledgerJournalEntry               subledgerJournalEntry;
        boolean                             isNotValid;
                
        select firstonly accountingEvent where accountingEvent.RecId == _accountingEventId
            join RecId,SourceRelationType from  sourceDocumentHeader
                where sourceDocumentHeader.RecId == accountingEvent.SourceDocumentHeader;

        if (accountingEvent)
        {
            sourceDocument = SourceDocument::newFromSourceDocumentHeader(sourceDocumentHeader);
            object = sourceDocument as Object;
            sourceDocumentClassId = classIdGet(object);

            subledgerJournalTransferRequest = new SubledgerJournalTransferRequest();
            subledgerJournalTransferRequest.parmAccountingEventId(_accountingEventId);
            subledgerJournalTransferRequest.parmSourceDocumentRelationType(sourceDocumentHeader.SourceRelationType);
            subledgerJournalTransferRequest.parmSourceDocumentType(sourceDocumentClassId);

            while select Ledger from subledgerJournalEntry
                group by Ledger
                where subledgerJournalEntry.AccountingEvent == _accountingEventId
                    && subledgerJournalEntry.Status == SubledgerJournalEntryStatus::NotTransferred

            {
                subledgerJournalTransferRule = SubledgerJournalTransferRule::findBestMatchRule(sourceDocumentClassId, subledgerJournalEntry.Ledger);
                subledgerJournalTransferRequest.parmDoSummarization(subledgerJournalTransferRule.IsSummarizationEnabled);
                subledgerJournalTransferRequest.parmledgerId(subledgerJournalEntry.Ledger);

                switch (subledgerJournalTransferRule.TransferMode)
                {
                    // Synchronous mode
                    case SubledgerJournalTransferMode::Synchronous :
                        this.performJournalEntryTransferOperation(SysOperationExecutionMode::Synchronous);
                        break;

                    // Asynchronous batch mode
                    case SubledgerJournalTransferMode::AsynchronousBatch :
                        // Check whether the process automation feature is turned on or off for doing the asynchronous transfer
                        if (!SubledgerJournalTransferProcess::canUseProcessAutomationForTransfer())
                        {
                            subledgerJournalTransferRequest.parmWaitInAsyncMode(waitInAsyncMode);
                            this.performJournalEntryTransferOperation(SysOperationExecutionMode::ReliableAsynchronous);
                        }
                        break;

                    // Scheduled batch mode
                    case SubledgerJournalTransferMode::ScheduledBatch :
                        this.scheduleJournalEntryTransferOperation();
                        break;
                }
            }
        }
        return subledgerJournalTransferRule.TransferMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseProcessAutomationForTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the process automation framework is enabled for this process
    /// </summary>
    /// <returns>True; if the feature is enabled and can use the process automation framework else false</returns>
    public static boolean canUseProcessAutomationForTransfer()
    {
        return (FeatureStateProvider::isFeatureEnabled(SubledgerToGeneralLedgerVoucherTransferProvider::instance())
           && SubledgerProcessAutomationFrameworkFlight::instance().isEnabled()
           && SubledgerBatchTransferUsingProcessAutomationFrameworkFlight::instance().isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubLedgerJournalTransferBatchJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a batch job for the transfer of subledger journal entries.
    /// </summary>
    /// <remarks>
    /// The batch runs daily at 11.00 pm.
    /// </remarks>
    public static void createSubLedgerJournalTransferBatchJob()
    {
        BatchHeader                         header;
        SysRecurrenceData                   sysRecurrenceData;
        SubledgerJournalTransferController  subledgerJournalTransferController;
        BatchInfo                           batchInfo;
        BatchRetries                        noOfRetriesOnFailure = 4;

        int startTime = SubledgerJournalTransferProcess::generateBatchJobStartTime();
      
        subledgerJournalTransferController = new SubledgerJournalTransferController(classStr(SubledgerJournalTransferOperation),identifierStr(executeTransfer),SysOperationExecutionMode::ScheduledBatch);
        batchInfo = subledgerJournalTransferController.batchInfo();
        batchInfo.parmRetriesOnFailure(noOfRetriesOnFailure);

        header = BatchHeader::construct();
        // Create the SubledgerJournalTransferController task
        header.addTask(subledgerJournalTransferController);
        // Create a scheduled task that will execute the batch transfer of subledger journal entries.
        header.parmCaption("@SYS321151");

        // Set the recurrence data to execute daily 11 pm
        sysRecurrenceData = SysRecurrence::defaultRecurrence();
        sysRecurrenceData = SysRecurrence::setRecurrenceStartDateTime(sysRecurrenceData, DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),startTime,DateTimeUtil::getUserPreferredTimeZone()));
        sysRecurrenceData = SysRecurrence::setRecurrenceNoEnd(sysRecurrenceData);
        sysRecurrenceData = SysRecurrence::setRecurrenceUnit(sysRecurrenceData, SysRecurrenceUnit::Day,1);

        header.parmRecurrenceData(sysRecurrenceData);
        // Set the batch alert configurations
        header.parmAlerts(NoYes::No, NoYes::Yes, NoYes::No, NoYes::Yes, NoYes::Yes);
        header.parmStartDateTime(DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),startTime,DateTimeUtil::getUserPreferredTimeZone()));

        // Save the batch job to run the  tasks added
        header.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBatchJobStartTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a time for a transfer job to run in. The times should be different to reduce contention from simultaneously running jobs.
    /// </summary>
    /// <returns>The generated time in seconds.</returns>
    public static int generateBatchJobStartTime()
    {
        int startTime = str2time('22:00');
        int startTimeInterval = 119*60; //schedule within a 2-hour interval (less one minute to avoid crossing into next day)
        startTime += RandomGenerate::construct().randomInt(0, startTimeInterval);

        return startTime;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>