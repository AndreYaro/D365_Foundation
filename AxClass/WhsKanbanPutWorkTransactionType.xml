<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsKanbanPutWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsKanbanPutWorkTransactionType</c> class handles logic specific to the kanban put away work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::KanbanPut)]
class WhsKanbanPutWorkTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isInbound</Name>
				<Source><![CDATA[
    public boolean isInbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundClusterSupported</Name>
				<Source><![CDATA[
    internal boolean isInboundClusterSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSLocDirKanbanPut);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateKanbanPut);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::FinishedGoodsPutaway;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleOrderLocationDirectiveScopeSupported</Name>
				<Source><![CDATA[
    protected internal boolean isSingleOrderLocationDirectiveScopeSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuerySingleOrder</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuerySingleOrder(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        if (_parameters.orderNum)
        {
            SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(Kanban)), fieldNum(Kanban, KanbanId)).value(queryValue(_parameters.orderNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        this.addInventTransIdRange(_parameters.inventTransId, _parameters.query, tableNum(KanbanJob), fieldNum(KanbanJob, InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceOrder</Name>
				<Source><![CDATA[
    public void openSourceOrder(WHSWorkTable _whsWorkTable)
    {
        super(_whsWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceOrderMenuItemDisplayStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str sourceOrderMenuItemDisplayStr()
    {
        return menuitemDisplayStr(Kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderByWorkOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderByWorkOrder(WHSWorkOrderInterface _workOrder)
    {
        return Kanban::findKanbanId(_workOrder.parmOrderNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    protected boolean hasInventTransOrigin()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderedAndRemainQty</Name>
				<Source><![CDATA[
    public container findOrderedAndRemainQty(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        var kanbanJob = WHSInvent::getCommonFromWorkTransType(_whsWorkTable.WorkTransType, _whsWorkLine.InventTransId);

        if (kanbanJob)
        {
            InventMovement inventMovement = kanbanJob.inventMovement();
            return [inventMovement.transQty(), inventMovement.remainPhysical()];
        }
        return [0, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkCenterLocationId</Name>
				<Source><![CDATA[
    public WMSLocationId findWorkCenterLocationId(WhsWorkTable _whsWorkTable)
    {
        return Kanban::findKanbanId(_whsWorkTable.OrderNum).lastKanbanJob().wrkCtrResourceGroup().OutputWMSLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        QueryBuildDataSource qbdsKanbanJob = _query.dataSourceTable(tableNum(KanbanJob));
        QueryBuildDataSource qbdsInventDim = qbdsKanbanJob.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);

        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSiteId)).value(queryValue(_locDirTable.InventSiteId));
        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>