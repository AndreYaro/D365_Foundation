<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadPlanningWorkbenchForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Client side controller class for the <c>WHSLoadPlanningWorkbenchForm</c> form.
/// </summary>
public class WhsLoadPlanningWorkbenchForm implements WHSITmpLoadLineCreator
{
    private WHSLoadPlanningWorkbenchServerForm loadPlanningWorkbenchServerForm;

    WHSLoadTemplateId   loadTemplateId;
    InventLocationId    inventLocationId;
    InventLocationId    existingLoadInventLocationId;   // keeps invent location id from already existing load in case of order line will be added to an existing load
    InventSiteId        inventSiteId;
    WHSLoadDirection    loadDirection;
    boolean             addOrder;

    [SysObsolete('Use the method parmLoadPlanningWorkbenchServerForm() to access the instance of <c>WHSLoadPlanningWorkbenchServerForm</c>', false, 30\06\2020)]
    guid                serverFormGuid;

    private WHSReceivingCompletedLoadDeliveryPolicy deliveryPolicy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the selected order lines as load lines to the specified load.
    /// </summary>
    /// <param name="_loadTable">
    ///    The <c>WHSLoadTable</c> buffer the load lines are added to.
    /// </param>
    void addLoadLines(WHSLoadTable  _loadTable)
    {
        this.parmLoadPlanningWorkbenchServerForm().addLoadLines(_loadTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrderToLoad_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds an order to an existing load
    /// </summary>
    /// <param name="_whsLoadTable">
    ///     The <c>WHSLoadTable</c> record
    /// </param>
    /// <param name="_salesLineActive">
    ///     A Boolean value indicating if the <c>SalesLines</c> form control is active
    /// </param>
    /// <param name="_element">
    ///     The form object calling this method
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Throws an exception if the load has already been shipped
    /// </exception>
    void addOrderToLoad_clicked(
        WHSLoadTable    _whsLoadTable,
        boolean         _salesLineActive,
        Object          _element)
    {
        if (this.validateAddToLoad(_whsLoadTable))
        {
            if (_whsLoadTable.isShipped() || _whsLoadTable.isReceived())
            {
                if (_salesLineActive && _whsLoadTable.LoadStatus == WHSLoadStatus::Shipped)
                {
                    _element.validateShippedLoadLines();
                }
                else
                {
                    throw error("@WAX2162");
                }
            }

            this.parmAddOrder(true);

            _element.createTmpLoadLines();
            _element.callLoadTemplateAssignment();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds all load lines associated with a shipment to a load.
    /// </summary>
    /// <param name="_whsLoadTable">
    ///    The <c>WHSLoadTable</c> buffer the load lines are added to.
    /// </param>
    /// <param name="_whsShipmentTable">
    ///    The <c>WHSShipmentTable</c> buffer specifying the load lines which are added to the load.
    /// </param>
    /// <param name="_counter">
    ///    A counter describing the amount of times the method is called.
    /// </param>
    /// <remarks>
    ///    The Load template is only applied if the shipment is the first shipment added to the load.
    ///    The _counter value must start from 1 on the first call, and then consecutive calls are increased by 1.
    /// </remarks>
    void addShipmentToLoad(WHSLoadTable _whsLoadTable, WHSShipmentTable _whsShipmentTable, int _counter)
    {
        WHSShipmentTable    shipmentTable;

        shipmentTable = this.parmLoadPlanningWorkbenchServerForm().addShipmentToLoad(_whsLoadTable, _whsShipmentTable, this.parmLoadTemplateId(), _counter);

        this.parmInventSiteId(shipmentTable.InventSiteId);
        this.parmInventLocationId(shipmentTable.InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToNewLoadInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new load with updated origin and destination addresses.
    /// </summary>
    /// <param name="_loadTable">
    ///    The <c>WHSLoadTable</c> buffer to be inserted.
    /// </param>
    /// <param name="_shipmentTable">
    ///    The <c>WHSShipmentTable</c> buffer used to set the origin and destination addresses.
    /// </param>
    public void addShipmentToNewLoadInsert(
        WHSLoadTable        _loadTable,
        WHSShipmentTable    _shipmentTable)
    {
        this.parmLoadPlanningWorkbenchServerForm().addShipmentToNewLoadInsert(_loadTable, _shipmentTable, this.parmInventLocationId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToNewLoadPopulateTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates values on the load based on shipment and load template information.
    /// </summary>
    /// <param name="_shipmentTable">
    ///    The <c>WHSShipmentTable</c> buffer used to default values onto the load.
    /// </param>
    /// <param name="_loadTable">
    ///    The <c>WHSLoadTable</c> buffer which has values applied.
    /// </param>
    /// <param name="_counter">
    ///    A counter describing the amount of times the method is called.
    /// </param>
    /// <returns>
    ///    An updated <c>WHSLoadTable</c>.
    /// </returns>
    public WHSLoadTable addShipmentToNewLoadPopulateTable(
        WHSShipmentTable    _shipmentTable,
        WHSLoadTable        _loadTable,
        int                 _counter
    )
    {
        WHSLoadTable        loadTable;

        loadTable = this.parmLoadPlanningWorkbenchServerForm().addShipmentToNewLoadPopulateTable(this.parmLoadTemplateId(), _shipmentTable, _loadTable, _counter);

        this.parmInventSiteId(_shipmentTable.InventSiteId);
        this.parmInventLocationId(_shipmentTable.InventLocationId);

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToNewLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds all load lines on a shipment to a load.
    /// </summary>
    /// <param name="_shipmentTable">
    ///    The <c>WHSShipmentTable</c> specifying the load lines to add to the load.
    /// </param>
    /// <param name="_loadTable">
    ///    The <c>WHSLoadTable</c> the shipment should be added to.
    /// </param>
    public void addShipmentToNewLoadTable(
        WHSShipmentTable    _shipmentTable,
        WHSLoadTable        _loadTable)
    {
        this.parmLoadPlanningWorkbenchServerForm().addShipmentToNewLoadTableUnassigned(_shipmentTable, _loadTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToLoad_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds order lines to an existing load
    /// </summary>
    /// <param name="_caller">
    ///     The form object calling this method
    /// </param>
    /// <param name="_loadTable">
    ///     The <c>WHSLoadTable</c> record
    /// </param>
    /// <param name="_salesLinesActive">
    ///     A Boolean value indicating if the <c>SalesLines</c> form control is active
    /// </param>
    /// <param name="_unassignedShipmentsActive">
    ///     A Boolean value indicating if the UnassignedShipments form control is active
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Throws an exception if the load has already been shipped
    /// </exception>
    public void addToLoad_clicked(
        Object          _caller,
        WHSLoadTable    _loadTable,
        boolean         _salesLinesActive,
        boolean         _unassignedShipmentsActive)
    {
        if (this.validateAddToLoad(_loadTable))
        {
            if (_loadTable.isShipped() ||_loadTable.isReceived())
            {
                if (_salesLinesActive && _loadTable.LoadStatus == WHSLoadStatus::Shipped)
                {
                    _caller.validateShippedLoadLines();
                }
                else
                {
                    throw error("@WAX2162");
                }
            }

            if (_unassignedShipmentsActive)
            {
                _caller.addShipmentToLoad();
            }
            else
            {
                _caller.createTmpLoadLines();
                _caller.callLoadTemplateAssignment();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndInsertLoadTable</Name>
				<Source><![CDATA[
    private WHSLoadTable initAndInsertLoadTable()
    {
        WHSLoadTable newLoadTable = this.initializeLoadTable();

        newLoadTable.insert();

        return newLoadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLoadTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a load record.
    /// </summary>
    /// <returns>The initialized load record.</returns>
    protected WHSLoadTable initializeLoadTable()
    {
        WHSLoadTable newLoadTable;

        newLoadTable.setLoadId();
        newLoadTable.LoadDirection = loadDirection;
        newLoadTable.initFromLoadTemplateId(loadTemplateId);
        newLoadTable.LoadPaysFreight = this.parmLoadPaysFreight();
        newLoadTable.ReceivingCompletedDeliveryPolicy = this.parmReceivingCompletedDeliveryPolicy();

        return newLoadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callLoadTemplateAssignment</Name>
				<Source><![CDATA[
    /// <summary>
	/// Opens Load Template Assignment form to assign load to new template.
	/// </summary>
	/// <param name="_whsLoadTable">
	/// Load record to be assigned.
	/// </param>
	/// <param name="_newLoad">
	/// Determines whether new load should be created from the current load record.
	/// </param>
	/// <param name="_caller">
	/// Caller form object.
	/// </param>
	/// <returns>
	/// The load record after template is assigned.
	/// </returns>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when load directions differ.
	/// </exception>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when delivery terms differ.
	/// </exception>
    public WHSLoadTable callLoadTemplateAssignment(
        WHSLoadTable     _whsLoadTable,
        boolean          _newLoad,
        Object           _caller)
    {
        Args                args = new Args();
        FormRun             templateAssignment;
        WHSLoadTable        loadTable = _newLoad ? null : _whsLoadTable;

        args.name(formStr(WHSLoadTemplateAssignment));
        args.caller(_caller);
        args.parmObject(this);
        args.record(loadTable);

        templateAssignment = classfactory.formRunClass(args);
        templateAssignment.run();
        templateAssignment.wait();

        if (templateAssignment.closedOk())
        {
            if (_newLoad)
            {
                ttsbegin;
                
                loadTable = this.initAndInsertLoadTable();
                this.parmLoadPlanningWorkbenchServerForm().addLoadLinesToNewLoad(loadTable);

                ttscommit;

                _caller.updateLoadDatasourcesAndCallerForm();
            }
            else
            {
                // reread of the WHSLoadTable is needed since the WHSLoadTemplateAssignment are doing update to the record
                loadTable.reread();

                // ensures that load directions match between the associated orders
                if (loadDirection != loadTable.LoadDirection)
                {
                    throw error(strFmt("@WAX1682", loadTable.LoadDirection));
                }

                // ensures that the Pays Freight on the associated orders delivery terms are in sync
                if (loadTable.LoadPaysFreight != this.parmLoadPaysFreight())
                {
                    throw error(strFmt("@TRX1630", this.parmLoadPlanningWorkbenchServerForm().parmOrderNum()));
                }

                _caller.addLoadLines(loadTable);
            }

            
        }

        this.clearGlobalVariables();

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callRefRecordForm</Name>
				<Source><![CDATA[
    /// <summary>
	/// Opens details form of the source document referenced from the load.
	/// </summary>
	/// <param name="_salesLineActive">
	/// Determines whether the sales line tab is active.
	/// </param>
	/// <param name="_purchLineActive">
	/// Determines whether the purchase line tab is active.
	/// </param>
	/// <param name="_inventLineActive">
	/// Determines whether the inventory transfer line tab is active.
	/// </param>
	/// <param name="_unassingedShipmentsActive">
	/// Determines whether the shipments tab is active.
	/// </param>
	/// <param name="_transportRequestLinesActive">
	/// Determines whether the transportation request line is active.
	/// </param>
	/// <param name="_transportRequestLine">
	/// Transportation request line record.
	/// </param>
	/// <param name="_salesLine">
	/// Sales line record.
	/// </param>
	/// <param name="_purchLine">
	/// Purchase line record.
	/// </param>
	/// <param name="_inventTransferLine">
	/// Transfer line record.
	/// </param>
	/// <param name="_shipmentTableUnassigned">
	/// Shipment line record.
	/// </param>
    void callRefRecordForm(boolean                      _salesLineActive,
                           boolean                      _purchLineActive,
                           boolean                      _inventLineActive,
                           boolean                      _unassingedShipmentsActive,
                           boolean                      _transportRequestLinesActive,
                           TMSTransportRequestLine      _transportRequestLine,
                           SalesLine                    _salesLine,
                           PurchLine                    _purchLine,
                           InventTransferLine           _inventTransferLine,
                           WHSShipmentTable             _shipmentTableUnassigned)
    {
        Args                    args;
        MenuFunction            menuFunction;

        args = new Args();

        switch (true)
        {
            case _salesLineActive:
                args.record(_salesLine);
                menuFunction = new MenuFunction(menuitemDisplayStr(SalesTable), MenuItemType::Display);
                break;

            case _purchLineActive:
                args.record(_purchLine);
                menuFunction = new MenuFunction(menuitemDisplayStr(PurchTable), MenuItemType::Display);
                break;

            case _inventLineActive:
                args.record(_inventTransferLine);
                menuFunction = new MenuFunction(menuitemDisplayStr(InventTransferOrder), MenuItemType::Display);
                break;

            case _unassingedShipmentsActive:
                args.record(_shipmentTableUnassigned);
                menuFunction = new MenuFunction(menuitemDisplayStr(WHSShipmentDetails), MenuItemType::Display);
                break;

            case _transportRequestLinesActive:
                switch (_transportRequestLine.InventTransType)
                {
                    case InventTransType::Sales:
                        args.record(SalesLine::find(_transportRequestLine.OrderNum));
                        menuFunction = new MenuFunction(menuitemDisplayStr(SalesTable), MenuItemType::Display);
                        break;

                    case InventTransType::Purch:
                        args.record(PurchLine::find(_transportRequestLine.OrderNum));
                        menuFunction = new MenuFunction(menuitemDisplayStr(PurchTable), MenuItemType::Display);
                        break;

                    case InventTransType::InventTransfer:
                        args.record(InventTransferLine::find(_transportRequestLine.OrderNum, 1));
                        menuFunction = new MenuFunction(menuitemDisplayStr(InventTransferOrder), MenuItemType::Display);
                        break;
                }

                break;
        }

        if (args.record())
        {
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearGlobalVariables</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clear internal global variables.
    /// </summary>
    private void clearGlobalVariables()
    {
        addOrder = false;
        loadTemplateId = '';

        this.parmLoadPlanningWorkbenchServerForm().clearGlobalVariables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInvalidInventLocationIdFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears the warehouse filter if the site is changed
    /// </summary>
    /// <returns>
    ///     Returns the updated filter value
    /// </returns>
    public InventLocationId clearInvalidInventLocationIdFilter()
    {
        InventLocation  inventLocation;

        inventLocation = InventLocation::find(inventLocationId);

        if (inventSiteId
        &&  inventLocation
        &&  inventLocation.InventSiteId != inventSiteId)
        {
            inventLocationId = '';
        }

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesPurchLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates temporary load lines for a given purchase order or purchase order line.
    /// </summary>
    /// <param name="_inventTransSumDimPurch">
    /// The <c>InventTransSumDimPurch</c> record from the form
    /// </param>
    /// <param name="_counter">
    ///    A counter describing the amount of times the method is called.
    /// </param>
    public void createTmpLoadLinesPurchLines(WHSInventTransSumDim _inventTransSumDimPurch, int _counter)
    {
        this.parmLoadPlanningWorkbenchServerForm().createTmpLoadLinesPurchLines(this.parmAddOrder(), _inventTransSumDimPurch, _counter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesSalesLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates temporary load lines for a given sales order or sales order line.
    /// </summary>
    /// <param name="_inventTransSumDimSales">
    ///     The <c>WHSInventTransSumDim</c> record from the form
    /// </param>
    /// <param name="_counter">
    ///    A counter describing the amount of times the method is called.
    /// </param>
    public void createTmpLoadLinesSalesLines(WHSInventTransSumDim _inventTransSumDimSales, int _counter)
    {
        this.parmLoadPlanningWorkbenchServerForm().createTmpLoadLinesSalesLines(this.parmAddOrder(), _inventTransSumDimSales, _counter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesTransferLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates temporary load lines for a given transfer order or transfer order line.
    /// </summary>
    /// <param name="_inventTransSumDimTransfer">
    /// The <c>WHSInventTransSumDim</c> record from the form
    /// </param>
    /// <param name="_counter">
    ///    A counter describing the amount of times the method is called.
    /// </param>
    public void createTmpLoadLinesTransferLines(WHSInventTransSumDim _inventTransSumDimTransfer, int _counter)
    {
        this.parmLoadPlanningWorkbenchServerForm().createTmpLoadLinesTransferLines(this.parmAddOrder(), _inventTransSumDimTransfer, _counter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesTransportRequestLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates temporary load lines for a given transport request or transport request line.
    /// </summary>
    /// <param name="_transportRequestLine">
    /// The <c>TMSTransportRequestLine</c> record from the form
    /// </param>
    public void createTmpLoadLinesTransportRequestLines(TMSTransportRequestLine _transportRequestLine)
    {
        this.parmLoadPlanningWorkbenchServerForm().createTmpLoadLinesTransportRequestLines(this.parmAddOrder(), _transportRequestLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultShipmentLoadTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resolves a default load template ID based on a shipment.
    /// </summary>
    /// <param name="_shipmentTable">
    ///    The <c>WHSShipmentTable</c> to resolve the default load template ID from.
    /// </param>
    /// <returns>
    ///    A default Load template ID if all items on the load lines are associated with the same load template; otherwise no ID is returned.
    /// </returns>
    public WHSLoadTemplateId defaultShipmentLoadTemplateId(WHSShipmentTable _shipmentTable)
    {
        return this.parmLoadPlanningWorkbenchServerForm().defaultShipmentLoadTemplateId(_shipmentTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>equipmentCode_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the <c>TMSEquipment</c> form when referenced from its code.
	/// </summary>
	/// <param name="_value">
	/// Values contains the equipment code.
	/// </param>
	/// <param name="_caller">
	/// Caller form object.
	/// </param>
    void equipmentCode_jumpRef(str _value, Object _caller)
    {
        Args            args = new Args();
        TMSEquipment    equipment = TMSEquipment::find(_value);

        args.caller(_caller);

        if (equipment)
        {
            args.record(equipment);
        }

        new MenuFunction(menuitemDisplayStr(TMSEquipment), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLoadGrid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of load ids tied to order
    /// </summary>
    /// <param name="_orderNum">
    ///    Order number used to find loads
    /// </param>
    /// <param name="_inventTransType">
    ///    Order type used to find loads
    /// </param>
    /// <param name="_transportRequest">
    ///    Transport request type used to find loads
    /// </param>
    /// <returns>
    ///    Combined list of load ids used to filter query
    /// </returns>
    public str filterLoadGrid(WHSOrderNum _orderNum, InventTransType _inventTransType, NoYes _transportRequest)
    {
        return this.parmLoadPlanningWorkbenchServerForm().filterLoadGrid(_orderNum, _inventTransType, _transportRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDateFilter</Name>
				<Source><![CDATA[
    str formatDateFilter(str _dateFrom, str _dateTo)
    {
        str         ret;

        switch (true)
        {
            case _dateFrom != ''  && _dateTo != '':
                ret = strFmt('%1..%2', _dateFrom, _dateTo);
                break;

            case _dateFrom != '':
                ret = strFmt('%1..', _dateFrom);
                break;

            case _dateTo != '':
                ret = strFmt('..%1', _dateTo);
                break;

            default:
                ret = '';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedLoadIds</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds selected load ids on the form.
	/// </summary>
	/// <param name="_tabLoadActivated">
	/// Determines whether the load tab is activated.
	/// </param>
	/// <param name="_whsLoadTableDS">
	/// Form date source containing selected loads.
	/// </param>
	/// <returns>
	/// Container containing selected load ids.
	/// </returns>
    container getSelectedLoadIds(boolean          _tabLoadActivated,
                                 FormDataSource   _whsLoadTableDS)
    {
        WHSLoadTable    selectedLoad;
        container       ret;

        if (_tabLoadActivated)
        {
            for (selectedLoad = _whsLoadTableDS.getFirst(true) ? _whsLoadTableDS.getFirst(true) : _whsLoadTableDS.cursor();
                 selectedLoad;
                 selectedLoad = _whsLoadTableDS.getNext())
            {
                ret += selectedLoad.LoadId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedShipmentIds</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds shipment ids of the selected loads.
	/// </summary>
	/// <param name="_whsLoadTableDS">
	/// Form data source containing the selected loads.
	/// </param>
	/// <returns>
	/// Container containing shipment ids of the selected loads.
	/// </returns>
    container   getSelectedShipmentIds(FormDataSource   _whsLoadTableDS)
    {
        WHSLoadTable    selectedLoad;
        WHSLoadLine     loadLine;
        container       ret;

        for (selectedLoad = _whsLoadTableDS.getFirst(true) ? _whsLoadTableDS.getFirst(true) : _whsLoadTableDS.cursor();
             selectedLoad;
             selectedLoad = _whsLoadTableDS.getNext())
        {
            ret += selectedLoad.getShipmentIds();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupUnshippedLoadId</Name>
				<Source><![CDATA[
    /// <summary>
	/// Performs lookup on unshipped load ids.
	/// </summary>
	/// <param name="_loadIdLookup">
	/// Form control.
	/// </param>
    public void lookupUnshippedLoadId(FormStringControl _loadIdLookup)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        sysTableLookup          = SysTableLookup::newParameters(tableNum(WHSLoadTable), _loadIdLookup);
        query                   = new Query();
        queryBuildDataSource    = query.addDataSource(tableNum(WHSLoadTable));

        sysTableLookup.addLookupfield(fieldNum(WHSLoadTable, LoadId));
        sysTableLookup.addLookupfield(fieldNum(WHSLoadTable, LoadStatus));
        queryBuildDataSource.addRange(fieldNum(WHSLoadTable, LoadStatus)).value(SysQuery::valueNot(enum2str(WHSLoadStatus::Shipped)));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lpwFilter_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
	/// Opens load planning filters form.
	/// </summary>
	/// <param name="_caller">
	/// Caller form object.
	/// </param>
    void lpwFilter_jumpRef(Object   _caller)
    {
        Args args = new Args();

        args.caller(_caller);

        new MenuFunction(menuitemDisplayStr(WHSLPWFilterTable), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lpwFilter_lookup</Name>
				<Source><![CDATA[
    /// <summary>
	/// Performs lookup on load planning filters.
	/// </summary>
	/// <param name="_ctrl">
	/// Form control.
	/// </param>
    /// <param name="_filterType">
    /// The filter type.
    /// </param>
    void lpwFilter_lookup(FormControl    _ctrl, WHSLPWFilterType _filterType)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(WHSLPWFilterTable), _ctrl);
        Query                   query          = new Query();
        QueryBuildDataSource    qbds;

        sysTableLookup.addLookupfield(fieldNum(WHSLPWFilterTable, lpwFilterCode));
        sysTableLookup.addLookupfield(fieldNum(WHSLPWFilterTable, Description));
        sysTableLookup.addLookupfield(fieldNum(WHSLPWFilterTable, lpwFilterType));

        qbds = query.addDataSource(tableNum(WHSLPWFilterTable));
        qbds.addRange(fieldNum(WHSLPWFilterTable, LPWFilterType)).value(queryValue(_filterType));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>manualRoute_clicked</Name>
				<Source><![CDATA[
    /// <summary>
	/// Assigns a route manually to the load.
	/// </summary>
	/// <param name="_whsLoadTable">
	/// Load record that route will be assigned.
	/// </param>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when carrier code is not defined for the load.
	/// </exception>
    void manualRoute_clicked(WHSLoadTable   _whsLoadTable)
    {
        TMSRouteCode            routeCode;
        MenuFunction            menuFunction;
        Args                    args = new Args();

        if (_whsLoadTable.CarrierCode != '')
        {
            routeCode = TMSRouteAssignment::manualAssignment(_whsLoadTable.LoadId);
            menuFunction = new MenuFunction(menuitemDisplayStr(TMSRouteWorkbench_ManualRoute), MenuItemType::Display);
            args.parm(routeCode);
            menuFunction.run(args);
        }
        else
        {
            throw error("@TRX1294");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        serverFormGuid = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    static public WhsLoadPlanningWorkbenchForm newFromArgs(Args _args)
    {
        return new WhsLoadPlanningWorkbenchForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddOrder</Name>
				<Source><![CDATA[
    public boolean parmAddOrder(boolean _addOrder = addOrder)
    {
        addOrder = _addOrder;

        return addOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExistingLoadInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm method to initialize an invent location if from already existing load only in case if order lines will be added to an existing load.
    /// </summary>
    /// <param name="_inventLocationId">
    /// InventLocationId from existing load.
    /// </param>
    public InventLocationId parmExistingLoadInventLocationId(InventLocationId _inventLocationId = existingLoadInventLocationId)
    {
        existingLoadInventLocationId = _inventLocationId;

        return existingLoadInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadDirection</Name>
				<Source><![CDATA[
    public WHSLoadDirection parmLoadDirection(WHSLoadDirection _loadDirection = loadDirection)
    {
        loadDirection = _loadDirection;

        return loadDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadPaysFreight</Name>
				<Source><![CDATA[
    public TMSLoadPaysFreight parmLoadPaysFreight(TMSLoadPaysFreight _loadPaysFreight = 0)
    {
        if (!prmisDefault(_loadPaysFreight))
        {
            return this.parmLoadPlanningWorkbenchServerForm().parmLoadPaysFreight(_loadPaysFreight);
        }

        return this.parmLoadPlanningWorkbenchServerForm().parmLoadPaysFreight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadPlanningWorkbenchServerForm</Name>
				<Source><![CDATA[
    public WHSLoadPlanningWorkbenchServerForm parmLoadPlanningWorkbenchServerForm()
    {
        if (!loadPlanningWorkbenchServerForm)
        {
            loadPlanningWorkbenchServerForm = new WHSLoadPlanningWorkbenchServerForm();
            appl.globalCache().set(classStr(WHSLoadPlanningWorkbenchServerForm), serverFormGuid, loadPlanningWorkbenchServerForm);
        }

        return loadPlanningWorkbenchServerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadTemplateId</Name>
				<Source><![CDATA[
    public WHSLoadTemplateId parmLoadTemplateId(WHSLoadTemplateId _loadTemplateId = loadTemplateId)
    {
        loadTemplateId = _loadTemplateId;

        return loadTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceivingCompletedDeliveryPolicy</Name>
				<Source><![CDATA[
    internal WHSReceivingCompletedLoadDeliveryPolicy parmReceivingCompletedDeliveryPolicy(WHSReceivingCompletedLoadDeliveryPolicy _deliveryPolicy = deliveryPolicy)
    {
        deliveryPolicy = _deliveryPolicy;

        return deliveryPolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpLoadLine</Name>
				<Source><![CDATA[
    public WHSLoadLine parmTmpLoadLine(WHSLoadLine _tmpLoadLine = null)
    {
        WHSLoadLine tmpLoadLine;

        if (!prmisDefault(_tmpLoadLine))
        {
            tmpLoadLine = this.parmLoadPlanningWorkbenchServerForm().parmTmpLoadLine(_tmpLoadLine);
        }
        else
        {
            tmpLoadLine = this.parmLoadPlanningWorkbenchServerForm().parmTmpLoadLine();
        }

        return tmpLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVolume</Name>
				<Source><![CDATA[
    public Volume parmVolume(Volume _volume = 0)
    {
        if (!prmisDefault(_volume))
        {
            return this.parmLoadPlanningWorkbenchServerForm().parmVolume(_volume);
        }

        return this.parmLoadPlanningWorkbenchServerForm().parmVolume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWeight</Name>
				<Source><![CDATA[
    public Weight parmWeight(Weight _weight = 0)
    {
        if (!prmisDefault(_weight))
        {
            return this.parmLoadPlanningWorkbenchServerForm().parmWeight(_weight);
        }

        return this.parmLoadPlanningWorkbenchServerForm().parmWeight();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad_clicked</Name>
				<Source><![CDATA[
    /// <summary>
	/// Releases load to warehouse when Post Load button is clicked.
	/// </summary>
	/// <param name="_whsLoadTableDS">
	/// Form data source that contains selected loads.
	/// </param>
	/// <param name="_element">
	/// Caller form object.
	/// </param>
    [SysObsolete('Deprecated method. Use the menu item, WHSReleaseLoadToWarehouse instead.', false, 30\06\2018)]
    void postLoad_clicked(FormDataSource    _whsLoadTableDS,
                          Object            _element)
    {
        WHSParameters   parameters;
        WHSLoadTable    rec;
        CustCreditMaxCheck creditMaxCheck = WHSParameters::getCreditMaxCheck();

        for (rec = _whsLoadTableDS.getFirst(true) ? _whsLoadTableDS.getFirst(true) : _whsLoadTableDS.cursor();
        rec;
        rec = _whsLoadTableDS.getNext())
        {
            WHSLoadPostEngine::post(rec, false, creditMaxCheck);
        }

        parameters = WHSParameters::find();

        WHSWaveTable::buildWaveFromShipments(_element.getSelectedShipmentIds());
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_active</Name>
				<Source><![CDATA[
    /// <summary>
	/// Calculates the purchase quantity when the purchase line tab is active.
	/// </summary>
	/// <param name="_purchLineDS">
	/// Form data source that contains the selected purchase lines.
	/// </param>
	/// <returns>
	/// The total quantity on the purchase lines.
	/// </returns>
    Qty purchLine_active(FormDataSource    _purchLineDS)
    {
        PurchLine       rec;
        Qty             qtyCount;

        for (rec = _purchLineDS.getFirst(true) ? _purchLineDS.getFirst(true) : _purchLineDS.cursor();
             rec;
             rec = _purchLineDS.getNext())
        {
            qtyCount += rec.PurchQty;
        }

        return qtyCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateDemandLine</Name>
				<Source><![CDATA[
    /// <summary>
	/// Opens rate route workbench form with a source record.
	/// </summary>
	/// <param name="_salesLineActive">
	/// Determines whether the sales line tab is active.
	/// </param>
	/// <param name="_purchLineActive">
	/// Determines whether the purchase line tab is active.
	/// </param>
	/// <param name="_inventLinesActive">
	/// Determines whether transfer line tab is active.
	/// </param>
	/// <param name="_caller">
	/// Caller form object.
	/// </param>
	/// <param name="_salesLine">
	/// Sales line record.
	/// </param>
	/// <param name="_purchLine">
	/// Purchase line record.
	/// </param>
	/// <param name="_inventTransferLine">
	/// Transfer line record.
	/// </param>
    void rateDemandLine(boolean             _salesLineActive,
                        boolean             _purchLineActive,
                        boolean             _inventLinesActive,
                        Object              _caller,
                        SalesLine           _salesLine,
                        PurchLine           _purchLine,
                        InventTransferLine  _inventTransferLine)
    {
        Args                args = new Args();
        MenuFunction        mf = new MenuFunction(menuitemDisplayStr(TMSRateRouteWorkbench), MenuItemType::Display);
        FormRun             formRate;
        SalesTable          tmpSalesTable;
        PurchTable          purchTable;
        InventTransferTable inventTransferTable;

        args.caller(_caller);

        switch (true)
        {
            case _salesLineActive:
                tmpSalesTable = SalesTable::find(_salesLine.SalesId);
                args.record(tmpSalesTable);
                break;

            case _purchLineActive:
                purchTable = PurchTable::find(_purchLine.PurchId);
                args.record(purchTable);
                break;

            case _inventLinesActive:
                inventTransferTable = InventTransferTable::find(_inventTransferLine.TransferId);
                args.record(inventTransferTable);
                break;

            default:
                Common defaultBuffer = this.findRateDemandLineFromActiveRecord(this.findCallersActiveRecord(_caller));
                if (defaultBuffer)
                {
                    args.record(defaultBuffer);
                }
        }

        formRate = mf.create(args);
        formRate.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCallersActiveRecord</Name>
				<Source><![CDATA[
    private Common findCallersActiveRecord(Object _caller)
    {
        Common buffer;

        if (_caller is WHSILoadPlanningWorkbenchActiveRecordProvider)
        {
            WHSILoadPlanningWorkbenchActiveRecordProvider activeRecordProvider = _caller as WHSILoadPlanningWorkbenchActiveRecordProvider;

            buffer = activeRecordProvider.activeRecord();
        }

        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRateDemandLineFromActiveRecord</Name>
				<Source><![CDATA[
    protected Common findRateDemandLineFromActiveRecord(Common _activeRecord)
    {
        return this.parmLoadPlanningWorkbenchServerForm().findRateDemandLineFromActiveRecord(_activeRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds load line count of a load where the load is referencing a sales order or a transfer order.
	/// </summary>
	/// <param name="_loadTable">
	/// Load record.
	/// </param>
	/// <returns>
	/// The load line record count.
	/// </returns>
    WHSLoadLine selectLoadLine(WHSLoadTable _loadTable)
    {
        return this.parmLoadPlanningWorkbenchServerForm().selectLoadLine(_loadTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportRequestLine_executeQuery</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds which source document id to use.
	/// </summary>
	/// <param name="_salesId">
	/// Sales order id.
	/// </param>
	/// <param name="_purchId">
	/// Purchase order id.
	/// </param>
	/// <param name="_transferId">
	/// Transfer order id.
	/// </param>
	/// <returns>
	/// The source document id to be used.
	/// </returns>
    str transportRequestLine_executeQuery(SalesId             _salesId,
                                           PurchId            _purchId,
                                           InventTransferId   _transferId)
    {
        str     returnId;

        if (_salesId)
        {
            returnId = _salesId;
        }

        if (_purchId)
        {
            returnId = _purchId;
        }

        if (_transferId)
        {
            returnId = _transferId;
        }

        return returnId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAddToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a user cannot add lines to a non-existent load
    /// </summary>
    /// <param name="_loadTable">
    /// The selected load table record
    /// </param>
    /// <returns>
    /// Returns a boolean indicating whether or not lines can be added to the load
    /// </returns>
    public boolean validateAddToLoad(WHSLoadTable _loadTable)
    {
        boolean ret = true;

        if (!_loadTable)
        {
            ret = checkFailed("@WAX4698");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventLocationIdFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns false and warns the user if a warehouse is set that is not connected to the site set
    /// </summary>
    /// <returns>
    ///     Returns the updated filter value
    /// </returns>
    public boolean validateInventLocationIdFilter()
    {
        InventLocation  inventLocation;
        boolean         ret = true;

        if (inventLocationId)
        {
            inventLocation = InventLocation::find(inventLocationId);

            if (inventSiteId
            && inventLocation
            && inventLocation.InventSiteId != inventSiteId)
            {
                ret = checkFailed(strFmt("@WAX4606", inventSiteId, inventLocationId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoad_clicked</Name>
				<Source><![CDATA[
    /// <summary>
	/// Validates load when Validate Load button is clicked.
	/// </summary>
	/// <param name="_whsLoadTableDS">
	/// Form data source that contains which loads are selected to be validated.
	/// </param>
    void validateLoad_clicked(FormDataSource    _whsLoadTableDS)
    {
        WHSLoadTable    rec;
        CustCreditMaxCheck creditMaxCheck = WHSParameters::getCreditMaxCheck();

        for (rec = _whsLoadTableDS.getFirst(true) ? _whsLoadTableDS.getFirst(true) : _whsLoadTableDS.cursor();
             rec;
             rec = _whsLoadTableDS.getNext())
        {
            WHSLoadPostEngine::post(rec, true, creditMaxCheck);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShippedLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
	/// Validates shipped sales lines.
	/// </summary>
	/// <param name="_salesLineActive">
	/// Determines whether the sales line tab is active.
	/// </param>
	/// <param name="_salesLineDS">
	/// Form data source that contains selected sales lines.
	/// </param>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when the item type of the shipped sales line is not service.
	/// </exception>
    void validateShippedLoadLines(boolean           _salesLineActive,
                                  FormDataSource    _salesLineDS)
    {
        if (_salesLineActive)
        {
            for (SalesLine recSL = _salesLineDS.getFirst(true) ? _salesLineDS.getFirst(true) : _salesLineDS.cursor();
                 recSL;
                 recSL = _salesLineDS.getNext())
            {
                if (InventTable::find(recSL.ItemId).ItemType != ItemType::Service)
                {
                    throw error("@WAX2874");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds site for the given warehouse
    /// </summary>
    /// <param name = "_inventLocationId">
    /// InventLocationId used to look up the related InventSiteId
    /// </param>
    /// <returns>
    /// Returns the site for the given warehouse
    /// </returns>
    public static InventSiteId getInventSiteId(InventLocationId _inventLocationId)
    {
        return InventLocation::find(_inventLocationId).InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs when the form is closed.
    /// </summary>
    public void onClose()
    {
        appl.globalCache().clear(classStr(WHSLoadPlanningWorkbenchServerForm));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates a query range based on the filter date
    /// </summary>
    /// <param name = "_dateFilter">
    ///     A date that will be used to generate the filter range
    /// </param>
    /// <returns>
    ///     Returns a date query range
    /// </returns>
    [Hookable(false)]
    internal Range dateRangeValue(TransDate _dateFilter)
    {
        if (_dateFilter != dateNull())
        {
            return queryValue(_dateFilter);
        }
        else
        {
            return SysQueryRangeUtil::valueUnlimited();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyShippedDateFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a date query range for confirmed and requested shipping date on a sales line data source
    /// </summary>
    /// <param name = "_queryBuildDataSource">
    ///     A sales line data source
    /// </param>
    /// <param name = "_shippingFilterDate">
    ///     A date that will be used to generate a filter on confirmed and requested shipping date
    /// </param>
    [Hookable(false)]
    public void applyShippedDateFilter(QueryBuildDataSource _queryBuildDataSource, TransDate _shippingFilterDate)
    {
        QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(_queryBuildDataSource, fieldNum(SalesLine, ShippingDateRequested));
        Range dateRange = this.buildDateRange(fieldStr(SalesLine, ShippingDateConfirmed), fieldStr(SalesLine, ShippingDateRequested), _shippingFilterDate);
        queryBuildRange.value(dateRange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDeliveryDateFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a date query range for confirmed and delivery date on a purchase line data source
    /// </summary>
    /// <param name = "_queryBuildDataSource">
    ///     A purchase line data source
    /// </param>
    /// <param name = "_receiptFilterDate">
    ///     A date that will be used to generate a filter on confirmed and delivery date
    /// </param>
    [Hookable(false)]
    internal void applyDeliveryDateFilter(QueryBuildDataSource _queryBuildDataSource, TransDate _receiptFilterDate)
    {
        QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(_queryBuildDataSource, fieldNum(PurchLine, DeliveryDate));
        Range dateRange = this.buildDateRange(fieldStr(PurchLine, ConfirmedDlv), fieldStr(PurchLine, DeliveryDate), _receiptFilterDate);
        queryBuildRange.value(dateRange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyReceiptDateFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a date query range for confirmed and requested receipt date on a sales line data source
    /// </summary>
    /// <param name = "_queryBuildDataSource">
    ///     A sales line data source
    /// </param>
    /// <param name = "_receiptFilterDate">
    ///     A date that will be used to generate a filter on confirmed and requested receipt date
    /// </param>
    [Hookable(false)]
    public void applyReceiptDateFilter(QueryBuildDataSource _queryBuildDataSource, TransDate _receiptFilterDate)
    {
        QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(_queryBuildDataSource, fieldNum(SalesLine, ReceiptDateRequested));
        Range           dateRange = this.buildDateRange(fieldStr(SalesLine, ReceiptDateConfirmed), fieldStr(SalesLine, ReceiptDateRequested), _receiptFilterDate);
        queryBuildRange.value(dateRange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDateRange</Name>
				<Source><![CDATA[
    private Range buildDateRange(FieldName _dateFieldConfirmed, FieldName _dateFieldRequested, TransDate _dateFilterValue)
    {
        if (_dateFilterValue == dateNull())
        {
            return SysQueryRangeUtil::valueUnlimited();
        }

        return strFmt('(((%1 != %4) && (%1 == %3)) || ((%1 == %4) && (%2 == %3)))',
                            _dateFieldConfirmed,
                            _dateFieldRequested,
                            date2StrXpp(_dateFilterValue),
                            date2StrXpp(dateNull()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLoadBeReleasedBasedOnLoadStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the load can be released to the warehouse.
    /// </summary>
    /// <param name = "_loadTable">
    /// The <c>WHSLoadTable</c> buffer to validate.
    /// </param>
    /// <returns>
    /// True if the load can be released; otherwise, false.
    /// </returns>
    public static boolean canLoadBeReleasedBasedOnLoadStatus(WHSLoadTable _loadTable)
    {
        boolean ret;

        if (   _loadTable.LoadStatus == WHSLoadStatus::Open
            || _loadTable.LoadStatus == WHSLoadStatus::Posted
            || _loadTable.LoadStatus == WHSLoadStatus::Waved
            || _loadTable.LoadStatus == WHSLoadStatus::InProcess
            || _loadTable.LoadStatus == WHSLoadStatus::PartiallyShipped)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPlanningWorkbenchFilter_jumpRef</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void loadPlanningWorkbenchFilter_jumpRef(
        Object           _caller,
        WHSLoadDirection _loadDirection)
    {
        Args args = new Args();
        args.caller(_caller);
        args.parmEnumType(enumNum(WHSLoadDirection));
        args.parmEnum(_loadDirection);

        new MenuFunction(menuitemDisplayStr(WHSLoadPlanningWorkbenchFilter), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPlanningWorkbenchFilter_lookup</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void loadPlanningWorkbenchFilter_lookup(FormControl _ctrl, WHSLPWFilterType _filterType)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WHSLoadPlanningWorkbenchFilter), _ctrl);
        
        sysTableLookup.addLookupfield(fieldNum(WHSLoadPlanningWorkbenchFilter, FilterCode));
        sysTableLookup.addLookupfield(fieldNum(WHSLoadPlanningWorkbenchFilter, Description));
        sysTableLookup.addLookupfield(fieldNum(WHSLoadPlanningWorkbenchFilter, FilterType));
        
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(WHSLoadPlanningWorkbenchFilter));
        qbds.addRange(fieldNum(WHSLoadPlanningWorkbenchFilter, FilterType)).value(queryValue(_filterType));
        
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPlanningWorkbenchFilterForm</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void loadPlanningWorkbenchFilterForm(Object _caller, WHSLoadDirection _loadDirection)
    {
        Args args = new Args(formStr(WHSLoadPlanningWorkbenchFilter));
        args.caller(_caller);
        args.parmEnumType(enumNum(WHSLoadDirection));
        args.parmEnum(enum2int(_loadDirection));
        
        FormRun fr = classfactory.formRunClass(args);
        fr.run();
        fr.wait();
        fr = null;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesFromSalesLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createTmpLoadLinesFromSalesLine(SalesLine _salesLine, int _counter)
    {
        this.parmLoadPlanningWorkbenchServerForm().createTmpLoadLinesSalesOrderLines(this.parmAddOrder(), _salesLine, _counter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesFromInventTransferLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createTmpLoadLinesFromInventTransferLine(InventTransferLine _inventTransferLine, int _counter)
    {
        this.parmLoadPlanningWorkbenchServerForm().createTmpLoadLinesInventTransferLine(this.parmAddOrder(), _inventTransferLine, _counter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesFromPurchaseLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createTmpLoadLinesFromPurchaseLine(PurchLine _purchLine, int _counter)
    {
        this.parmLoadPlanningWorkbenchServerForm().createTmpLoadLinesPurchaseOrderLines(this.parmAddOrder(), _purchLine, _counter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInventoryUOM</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventUnitId displayInventoryUOM(ItemId _itemId)
    {
        return InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOutboundQtyLeftToLoad</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSQtyLeftToLoad displayOutboundQtyLeftToLoad(ItemId _itemId, InventTransId _inventTransId)
    {
        if (!WHSInventEnabled::exist(_itemId) &&
            TMSInventEnabled::exist(_itemId))
        {
            return WhsLoadPlanningWorkbenchForm::qtyLeftoToLoadOutboundTMSOnly(_itemId, _inventTransId);
        }

        WHSQtyOnLoadView qtyOnLoadView;

        if (WHSLoadPlanningWorkbenchFormWHSQtyOnLoadViewSelectionFlight::instance().isEnabled())
        {
            //WHSQtyOnLoadView is grouped by InventTransId and InventDimId, so the sums of SumOfInventQty and SumOfPickedQty values are used.
            select sum(SumOfInventQty), sum(SumOfPickedQty) from qtyOnLoadView
                where qtyOnLoadView.InventTransId == _inventTransId;
        }
        else
        {
            select SumOfInventQty, SumOfPickedQty from qtyOnLoadView
                where qtyOnLoadView.InventTransId   == _inventTransId;
        }
        

        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        
        select sum(Qty), sum(PdsCWQty) from inventTrans
            group by InventTrans.ItemId
            where inventTrans.StatusIssue > StatusIssue::Picked
                && inventTrans.StatusReceipt == StatusReceipt::None
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == _inventTransId
                    && inventTransOrigin.RecId == inventTrans.InventTransOrigin;
                       
        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            // Quantity fields on the QtyOnLoadView will be in CW unit for CW items.
            return (abs(inventTrans.PdsCWQty) - (qtyOnLoadView.SumOfInventQty - qtyOnLoadView.SumOfPickedQty));
        }
        
        return (abs(inventTrans.Qty) - (qtyOnLoadView.SumOfInventQty - qtyOnLoadView.SumOfPickedQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyLeftoToLoadOutboundTMSOnly</Name>
				<Source><![CDATA[
    private static WHSQtyLeftToLoad qtyLeftoToLoadOutboundTMSOnly(ItemId _itemId, InventTransId _inventTransId)
    {
        WHSQtyOnLoadView qtyOnLoadView;

        if (WHSLoadPlanningWorkbenchFormWHSQtyOnLoadViewSelectionFlight::instance().isEnabled())
        {
            //WHSQtyOnLoadView is grouped by InventTransId and InventDimId, so the sum of SumOfInventQty value is used.
            select sum(SumOfInventQty) from qtyOnLoadView
                where qtyOnLoadView.InventTransId == _inventTransId;
        }
        else
        {
            select SumOfInventQty from qtyOnLoadView
                where qtyOnLoadView.InventTransId   == _inventTransId;
        }        
       
        InventTrans inventTransUpdated;
        InventTransOrigin inventTransOriginUpdated;
        InventDim inventDimUpdated;
    
        // In order to return picked and updated quantities back, we must use take care to check all dimensions that might have been specified later in picking/posting
        select firstonly sum(Qty), sum(PdsCWQty)
            from inventTransUpdated
            where inventTransUpdated.StatusIssue >= StatusIssue::Sold
               && inventTransUpdated.StatusIssue <= StatusIssue::Picked
            exists join inventTransOriginUpdated
                where inventTransUpdated.InventTransOrigin == inventTransOriginUpdated.RecId
                    && inventTransOriginUpdated.InventTransId == _inventTransId;
           
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        
        select sum(Qty), sum(PdsCWQty) from inventTrans
            group by InventTrans.ItemId
            where inventTrans.StatusIssue > StatusIssue::Picked
                && inventTrans.StatusReceipt == StatusReceipt::None
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == _inventTransId
                    && inventTransOrigin.RecId == inventTrans.InventTransOrigin;
                                                                                                                                    
        if (PdsGlobal::pdsIsCWItem(_itemid))
        {
            // Quantity fields on the QtyOnLoadView will be in CW unit for CW items.
            return min(abs(inventTrans.PdsCWQty), abs(inventTrans.PdsCWQty) - qtyOnLoadView.SumOfInventQty + abs(inventTransUpdated.PdsCWQty));
        }
        
        return min(abs(inventTrans.Qty), abs(inventTrans.Qty) - qtyOnLoadView.SumOfInventQty + abs(inventTransUpdated.Qty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOutboundQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSQtyLeftToLoad displayOutboundQty(ItemId _itemId, InventTransId _inventTransId)
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        
        select sum(Qty) from inventTrans
            group by InventTrans.ItemId
            where inventTrans.StatusIssue > StatusIssue::Picked
                && inventTrans.StatusReceipt == StatusReceipt::None
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == _inventTransId
                    && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

        return abs(inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOutboundCWQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSQtyLeftToLoad displayOutboundCWQty(ItemId _itemId, InventTransId _inventTransId)
    {
        if (!PdsGlobal::pdsIsCWItem(_itemId))
        {
            return 0;
        }
        
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        
        select sum(PdsCWQty) from inventTrans
            group by InventTrans.ItemId
            where inventTrans.StatusIssue > StatusIssue::Picked
                && inventTrans.StatusReceipt == StatusReceipt::None
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == _inventTransId
                    && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

        return abs(inventTrans.PdsCWQty);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>