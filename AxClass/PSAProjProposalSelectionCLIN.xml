<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAProjProposalSelectionCLIN</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PsaProjProposalSelectionCLIN extends PSAProjProposalSelection
{
    PSAContractLineNum                  m_psaContractLineNum;
    PSAContractLineItems                m_psaContractLineItems;

    ProjOnAccTrans                      projOnAccTrans;
    ProjCostTrans                       projCostTrans;
    ProjEmplTrans                       projEmplTrans;
    ProjRevenueTrans                    projRevenueTrans;
    ProjItemTrans                       projItemTrans;

    Amount                              progressPercent;
    ProjEmplTransSale                   projEmplTransSale;
    ProjEmplTransCost                   projEmplTransCost;
    ProjItemTransSale                   projItemTransSale;
    ProjItemTransCost                   projItemTransCost;
    ProjCostTransSale                   projCostTransSale;
    ProjOnAccTransSale                  projOnAccTransSale;
    ProjRevenueTransSale                projRevenueTransSale;
    SalesTable                          salesTable;
    SalesLine                           salesLine;
    Amount                              deductionAmount;
    #ISOcountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calCostTransactionAmount</Name>
				<Source><![CDATA[
    protected Amount calCostTransactionAmount(ProjId _projId, ProjCategoryId _categoryId)
    {
        ProjEmplTrans                       tProjEmplTrans;
        ProjItemTrans                       tProjItemTrans;
        Amount                              rTotalAmount;
        ProjEmplTransCost                   tProjEmpTransCost;
        ProjItemTransCost                   tProjItemTransCost;
    
        while select TransId,Qty from tProjEmplTrans
            where tProjEmplTrans.ProjId == _projId
               && tProjEmplTrans.CategoryId == _categoryId
        join CostPrice from tProjEmpTransCost
            where tProjEmpTransCost.TransId == tProjEmplTrans.TransId
               && tProjEmpTransCost.TransStatus == ProjTransStatus::Posted
        {
            rTotalAmount += tProjEmpTransCost.LineAmount;
        }
    
        while select InventTransId from tProjItemTrans
            where tProjItemTrans.ProjId == _projId
               && tProjItemTrans.CategoryId == _categoryId
        join RecId from tProjItemTransCost
            where tProjItemTransCost.InventTransId == tProjItemTrans.InventTransId
               && tProjItemTransCost.TransStatus == ProjTransStatus::Posted
        {
            rTotalAmount += tProjItemTransCost.LineAmount;
        }
    
        return rTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calFeeLineInvoiceAmount</Name>
				<Source><![CDATA[
        protected Amount calFeeLineInvoiceAmount(PSAContractLineNum _sContractLineNum)
    {
        Amount                              rInvoiceAmounts;
    
        PSAContractLineItemsSetup           tpsaContractLineItemsSetup;
        PSAContractLineNum                  spsaContractLineNumRef;
        PSAContractLineItems                tpsaContractLineItemsRef;
        PSATmpProjProposalSummary           tProjProposalSummary;
        PSAContractLineItems                tpsaContractLineItems;
    
        tpsaContractLineItems = PSAContractLineItems::find(_sContractLineNum);
        tProjProposalSummary.setTmpData(m_tProjProposalSummary);
        while select ContractLineNumReferred from tpsaContractLineItemsSetup
            where tpsaContractLineItemsSetup.ContractLineNum == _sContractLineNum
               && tpsaContractLineItemsSetup.ContractLineNumReferred != ''
        {
            spsaContractLineNumRef = tpsaContractLineItemsSetup.ContractLineNumReferred;
            tpsaContractLineItemsRef = PSAContractLineItems::find(spsaContractLineNumRef);
            if (tpsaContractLineItemsRef.LineType == PSAContractLineType::Fee)
            {
                rInvoiceAmounts += this.calFeeLineInvoiceAmount(spsaContractLineNumRef) * tpsaContractLineItems.FeePercentage/100;
            }
            else
            {
                select tProjProposalSummary
                    where tProjProposalSummary.ContractLineNum == spsaContractLineNumRef;
                rInvoiceAmounts += tProjProposalSummary.InvoiceAmount * tpsaContractLineItems.FeePercentage/100;
            }
        }
    
        return rInvoiceAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummary</Name>
				<Source><![CDATA[
        public void createSummary()
    {
        switch (m_psaContractLineItems.LineType)
        {
            case PSAContractLineType::LumpSum:
                this.createSummaryForLumpSumLine();
                break;
    
            case PSAContractLineType::Progress:
                this.createSummaryForProgressLine();
                break;
    
            case PSAContractLineType::TAndM:
                this.createSummaryForTAndMLine();
                break;
    
            case PSAContractLineType::Fee:
                this.createSummaryForFeeLine();
                break;
    
            case PSAContractLineType::UOD:
                this.createSummaryForUODLine();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryForFeeLine</Name>
				<Source><![CDATA[
        protected void createSummaryForFeeLine()
    {
        select forupdate firstonly m_tProjProposalSummary
            index ContractLineIdx
            where m_tProjProposalSummary.ContractLineNum == m_psaContractLineNum;
    
        if (!m_tProjProposalSummary.RecId)
        {
            this.createSummaryRecord(m_tProjProposalTrans, true);
        }
    
        m_tProjProposalSummary.InvoiceAmount = m_psaContractLineItems.calFeeLineInvoiceAmounts();
        m_tProjProposalSummary.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryForLumpSumLine</Name>
				<Source><![CDATA[
        protected void createSummaryForLumpSumLine()
    {
        while select m_tProjProposalTrans
            where m_tProjProposalTrans.ContractLineNum == m_psaContractLineNum
        {
            select forupdate firstonly m_tProjProposalSummary
                index ContractLineIdx
                where m_tProjProposalSummary.ContractLineNum == m_psaContractLineNum;
    
            if (!m_tProjProposalSummary.RecId)
            {
                this.createSummaryRecord(m_tProjProposalTrans, true);
            }
    
            if (m_tProjProposalSummary.RecId)
            {
                m_tProjProposalSummary.InvoiceAmount += m_tProjProposalTrans.LineAmount;
    
                // begin: add indirect invoice amount
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    m_tProjProposalSummary.InvoiceAmount += m_tProjProposalTrans.IndirectAmount;
                }
                // end
    
                m_tProjProposalSummary.update();
            }
    
            m_tProjProposalTrans.RefRecId = m_tProjProposalSummary.RecId;
            m_tProjProposalTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryForProgressLine</Name>
				<Source><![CDATA[
        // Description:     Create project proposal summary for Progress line type
    protected void createSummaryForProgressLine()
    {
        PSAContractLineItemsSetup           tpsaContractLineItemsSetupProj, tpsaContractLineItemsSetuCate;
        ProjId                              sProjId;
        ProjCategoryId                      sCategoryId;
        Amount                              rBudgetAmounts, rTransAmounts;
        PSAPercentUpdateLog                 tpsaPercentUpdateLog;
        Amount                              rIndirectAmounts;
        ProjEmplTransSale                   tprojEmplTransSale;
    
        select forupdate firstonly m_tProjProposalSummary
            index ContractLineIdx
            where m_tProjProposalSummary.ContractLineNum == m_psaContractLineNum;
    
        if (!m_tProjProposalSummary.RecId)
        {
            this.createSummaryRecord(m_tProjProposalTrans, true);
        }
    
        progressPercent = 0;
        if (m_psaContractLineItems.IsCrossReference == NoYes::Yes)
        {
            while select tpsaContractLineItemsSetupProj
                where tpsaContractLineItemsSetupProj.ContractLineNum == m_psaContractLineNum
                    && tpsaContractLineItemsSetupProj.ProjId != ''
                    && tpsaContractLineItemsSetupProj.CategoryId == ''
            {
                sProjId = tpsaContractLineItemsSetupProj.ProjId;
    
                if (sProjId)
                {
                    while select CategoryId from tpsaContractLineItemsSetuCate
                        where tpsaContractLineItemsSetuCate.ContractLineNum == m_psaContractLineNum
                            && tpsaContractLineItemsSetuCate.ProjId == sProjId
                            && tpsaContractLineItemsSetuCate.CategoryId != ''
                    {
                        sCategoryId = tpsaContractLineItemsSetuCate.CategoryId;
    
                        if (sCategoryId)
                        {
                            rBudgetAmounts +=  PSAContractLineItemsServer::calProjCurrentBudgetEmplAmounts(sProjId, sCategoryId);
                            rBudgetAmounts +=  PSAContractLineItemsServer::calProjCurrentBudgetItemAmounts(sProjId, sCategoryId);
                        }
    
                        while select projEmplTrans
                            where projEmplTrans.ProjId == sProjId
                                && projEmplTrans.CategoryId == sCategoryId
                        join projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                                && projEmplTransCost.TransStatus == ProjTransStatus::Posted
                                && (m_dEnd == dateNull() || projEmplTrans.TransDate <= m_dEnd)
                        {
                            if (ProjTrans::newProjEmplTransCost(projEmplTrans, projEmplTransCost).canBeInvoiced())
                            {
                                    rTransAmounts += projEmplTrans.Qty * projEmplTransCost.CostPrice;
    
                                    //Add indirect invoice amount
                                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                                    {
                                        select psaIndirectInvoice from tprojEmplTransSale where tprojEmplTransSale.TransId==projEmplTrans.TransId;
                                        rIndirectAmounts += tprojEmplTransSale.psaIndirectInvoice;
                                    }
                            }
    
                            while select projItemTrans
                                where projItemTrans.ProjId == sProjId
                                    && projItemTrans.CategoryId == sCategoryId
                            join projItemTransSale
                                where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                                    && projItemTransCost.TransStatus == ProjTransStatus::Posted
                                    && (m_dEnd == dateNull() || projItemTrans.TransDate <= m_dEnd)
                            {
                                if (ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale).canBeInvoiced())
                                {
                                    // This should be the cost amount of the FS Not total cost, why using cost
                                    rTransAmounts += projItemTrans.costAmountTotal();
                                }
                            }
                        }
                    }
                }
            }
    
            if (rBudgetAmounts != 0)
            {
                progressPercent = rTransAmounts/rBudgetAmounts;
            }
    
            m_tProjProposalSummary.InvoiceAmount = progressPercent
                                                * m_psaContractLineItems.LineValue
                                                - PSAContractLineItemsServer::getContractLineInvoicedAmounts(m_psaContractLineNum)
                                                + rIndirectAmounts;
            }
            else
            {
                tpsaPercentUpdateLog = PSAPercentUpdateLog::find(m_psaContractLineNum);
    
                if (tpsaPercentUpdateLog.RecId)
                {
                    progressPercent = tpsaPercentUpdateLog.getCurrentInvoicePercentage()/100;
                }
                m_tProjProposalSummary.InvoiceAmount = progressPercent * m_psaContractLineItems.LineValue;
            }
    
            m_tProjProposalSummary.update();
    
            while select m_tProjProposalTrans
                where m_tProjProposalTrans.ContractLineNum == m_psaContractLineNum
            {
                m_tProjProposalTrans.RefRecId = m_tProjProposalSummary.RecId;
                m_tProjProposalTrans.update();
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryForTAndMLine</Name>
				<Source><![CDATA[
        // Description:     Create project proposal summary for Time and material line type
    protected void createSummaryForTAndMLine()
    {
        this.createSummaryForLumpSumLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryForUODLine</Name>
				<Source><![CDATA[
        // Description:     Create project proposal summary for Unit of delivery line type
    protected void createSummaryForUODLine()
    {
        Amount                  rPercentComplete;
        ProjRevenueTrans        tProjRevenueTransLoc;
        ProjRevenueTransSale    projRevenueTransSaleLoc;
    
        select firstonly tProjRevenueTransLoc
            where tProjRevenueTransLoc.psaContractLineNum == m_psaContractLineNum
            join RecId from projRevenueTransSaleLoc
                where projRevenueTransSaleLoc.TransId == tProjRevenueTransLoc.TransId
                   && projRevenueTransSaleLoc.TransStatus == ProjTransStatus::InvoiceProposal;
    
        if (!tProjRevenueTransLoc)
        {
            select forupdate firstonly m_tProjProposalSummary
                index ContractLineIdx
                where m_tProjProposalSummary.ContractLineNum == m_psaContractLineNum;
    
            if (!m_tProjProposalSummary.RecId)
            {
                this.createSummaryRecord(m_tProjProposalTrans, true);
            }
    
            if (m_psaContractLineItems.Units != 0)
            {
                rPercentComplete = PSAUnitsUpdateLog::find(m_psaContractLineItems.ContractLineNum).getCurrentInvoiceUnits()/ m_psaContractLineItems.Units;
            }
            else
            {
                rPercentComplete = 0;
            }
    
            m_tProjProposalSummary.InvoiceAmount = m_psaContractLineItems.LineValue * rPercentComplete;
            m_tProjProposalSummary.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSummaryRecord</Name>
				<Source><![CDATA[
        // Description:     Create project proposal summary record
    public void createSummaryRecord(PSATmpProjProposalTrans _tProposalTrans, boolean _bSummary)
    {
        m_tProjProposalSummary.initFromContractLine(m_psaContractLineItems);
        m_tProjProposalSummary.initFromProposalTrans(_tProposalTrans);
        m_tProjProposalSummary.ProjInvoiceProjId = m_sProjInvoiceProjId;
        m_tProjProposalSummary.StartDate = m_dStart;
        m_tProjProposalSummary.EndDate = m_dEnd;
    
        if (_bSummary)
        {
            m_tProjProposalSummary.Summary = true;
            m_tProjProposalSummary.ProjCategoryId = '';
        }
    
        m_tProjProposalSummary.InvoiceAmountToDate = PSAContractLineItemsServer::getContractLineInvoicedAmounts(m_psaContractLineNum);
    
        m_tProjProposalSummary.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactions</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction
    public void createTransactions()
    {
        switch (m_psaContractLineItems.LineType)
        {
            case PSAContractLineType::LumpSum:
                this.createTransactionsForLumpSumLine();
                break;
    
            case PSAContractLineType::Progress:
                this.createTransactionsForProgressLine();
                break;
    
            case PSAContractLineType::TAndM:
                this.createTransactionsForTAndMLine();
                break;
    
            case PSAContractLineType::Fee:
                this.createTransactionsForFeeLine();
                break;
    
            case PSAContractLineType::UOD:
                this.createTransactionsForUODLine();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionsForCreditNote</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for Credit Note Transactions
    private void createTransactionsForCreditNote(ProjInvoiceProjId _projInvoiceProjId)
    {
        ProjTable   projTable;
        str 21      projIdSelection = m_sProjId;
        boolean     isMultiProjIdSelection;
    
        if (subStr(projIdSelection, strLen(projIdSelection),1) == "*")
        {
            isMultiProjIdSelection = true;
        }
    
        while select projOnAccTrans
            join ProjInvoiceProjId from projTable
                where projTable.ProjId == projOnAccTrans.ProjID
                    && (!projIdSelection || ((isMultiProjIdSelection && projTable.ProjId like projIdSelection) || (!isMultiProjIdSelection && projTable.ProjId == projIdSelection)))
                    && projTable.ProjInvoiceProjId == _projInvoiceProjId
                    && projOnAccTrans.TransactionOrigin == ProjOrigin::Prepayment
                    && (m_dStart == dateNull() || projOnAccTrans.TransDate >= m_dStart)
                    && (m_dEnd == dateNull() || projOnAccTrans.TransDate <= m_dEnd)
        {
            if (projOnAccTrans)
            {
                select sum(Amount) from  projOnAccTransSale
                    where projOnAccTransSale.TransId == projOnAccTrans.TransId
                       && projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote;
                if (projOnAccTransSale.Amount)
                {
                    m_tProjProposalTransPreBill.clear();
                    m_tProjProposalTransPreBill.Selected            = NoYes::Yes;
                    m_tProjProposalTransPreBill.TransDate           = projOnAccTrans.TransDate;
                    m_tProjProposalTransPreBill.ProjInvoiceProjId   = projTable.ProjInvoiceProjId;
                    m_tProjProposalTransPreBill.ProjId              = projOnAccTrans.ProjID;
                    m_tProjProposalTransPreBill.ActivityNumber      = projOnAccTrans.ActivityNumber;
                    m_tProjProposalTransPreBill.TransactionOrigin   = projOnAccTrans.TransactionOrigin;
                    m_tProjProposalTransPreBill.Txt                 = projOnAccTrans.Description;
                    m_tProjProposalTransPreBill.TransType           = ProjTransType::OnAccount;
                    m_tProjProposalTransPreBill.LineAmount          = projOnAccTransSale.Amount * -1;
                    m_tProjProposalTransPreBill.RefRecIdTrans       = projOnAccTrans.RecId;
                    m_tProjProposalTransPreBill.RefTableId          = projOnAccTrans.TableId;
                    m_tProjProposalTransPreBill.RefTransId          = projOnAccTrans.TransId;
                    m_tProjProposalTransPreBill.insert();
    
                    deductionAmount += m_tProjProposalTransPreBill.LineAmount;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionsForDeduction</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for Deduction Transactions
    protected void createTransactionsForDeduction(ProjInvoiceProjId _projInvoiceProjId)
    {
        ProjTable   projTable;
        str 21      projIdSelection = m_sProjId;
        boolean     isMultiProjIdSelection;
    
        if (subStr(projIdSelection, strLen(projIdSelection),1) == "*")
        {
            isMultiProjIdSelection = true;
        }
    
        while select projOnAccTrans
            join ProjInvoiceProjId from projTable
                where projTable.ProjId == projOnAccTrans.ProjID
                    && (!projIdSelection || ((isMultiProjIdSelection && projTable.ProjId like projIdSelection) || (!isMultiProjIdSelection && projTable.ProjId == projIdSelection)))
                    && projTable.ProjInvoiceProjId == _projInvoiceProjId
                    && projOnAccTrans.TransactionOrigin == ProjOrigin::Deduction
                    && (m_dStart == dateNull() || projOnAccTrans.TransDate >= m_dStart)
                    && (m_dEnd == dateNull() || projOnAccTrans.TransDate <= m_dEnd)
        {
            if (projOnAccTrans)
            {
                select sum(Amount) from  projOnAccTransSale
                    where projOnAccTransSale.TransId == projOnAccTrans.TransId
                       && projOnAccTransSale.TransStatus == ProjTransStatus::Registered;
    
                if (projOnAccTransSale.Amount)
                {
                    m_tProjProposalTransPreBill.clear();
                    m_tProjProposalTransPreBill.Selected            = NoYes::Yes;
                    m_tProjProposalTransPreBill.TransDate           = projOnAccTrans.TransDate;
                    m_tProjProposalTransPreBill.ProjInvoiceProjId   = projTable.ProjInvoiceProjId;
                    m_tProjProposalTransPreBill.ProjId              = projOnAccTrans.ProjID;
                    m_tProjProposalTransPreBill.ActivityNumber      = projOnAccTrans.ActivityNumber;
                    m_tProjProposalTransPreBill.TransactionOrigin   = projOnAccTrans.TransactionOrigin;
                    m_tProjProposalTransPreBill.Txt                 = projOnAccTrans.Description;
                    m_tProjProposalTransPreBill.TransType           = ProjTransType::OnAccount;
                    m_tProjProposalTransPreBill.LineAmount          = projOnAccTransSale.Amount;
                    m_tProjProposalTransPreBill.RefRecIdTrans       = projOnAccTrans.RecId;
                    m_tProjProposalTransPreBill.RefTableId          = projOnAccTrans.TableId;
                    m_tProjProposalTransPreBill.RefTransId          = projOnAccTrans.TransId;
                    m_tProjProposalTransPreBill.insert();
    
                    deductionAmount += m_tProjProposalTransPreBill.LineAmount;
                }
            }
        }
        this.createTransactionsForCreditNote(_projInvoiceProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionsForFeeLine</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for Fee line type
    protected void createTransactionsForFeeLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionsForLumpSumLine</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for LumpSum line type
    protected void createTransactionsForLumpSumLine()
    {
        PSAContractLineItemsSetup   tpsaContractLineItemsSetup;
    
        while select ProjOnAccTransId from tpsaContractLineItemsSetup
            where tpsaContractLineItemsSetup.ContractLineNum == m_psaContractLineNum
        {
            select projOnAccTrans
                where projOnAccTrans.TransId == tpsaContractLineItemsSetup.ProjOnAccTransId
            join projOnAccTransSale
                where projOnAccTransSale.TransId == projOnAccTrans.TransId
                   && (projOnAccTransSale.TransStatus == ProjTransStatus::Registered
                   || projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                   && (m_dStart == dateNull() || projOnAccTrans.TransDate >= m_dStart)
                   && (m_dEnd == dateNull() || projOnAccTrans.TransDate <= m_dEnd);
    
            if (projOnAccTransSale)
            {
                this.doOnAccount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionsForProgressLine</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for Progress line type
    protected void createTransactionsForProgressLine()
    {
        PSAContractLineItemsSetup   tpsaContractLineItemsSetupProj, tpsaContractLineItemsSetuCate;
        ProjId                      sProjId;
        ProjCategoryId              sCategoryId;
    
        while select tpsaContractLineItemsSetupProj
            where tpsaContractLineItemsSetupProj.ContractLineNum == m_psaContractLineNum
                && tpsaContractLineItemsSetupProj.ProjId != ''
                && tpsaContractLineItemsSetupProj.CategoryId == ''
        {
            sProjId = tpsaContractLineItemsSetupProj.ProjId;
            if (sProjId)
            {
                while select CategoryId from tpsaContractLineItemsSetuCate
                    where tpsaContractLineItemsSetuCate.ContractLineNum == m_psaContractLineNum
                        && tpsaContractLineItemsSetuCate.ProjId == sProjId
                        && tpsaContractLineItemsSetuCate.CategoryId != ''
                {
                    sCategoryId = tpsaContractLineItemsSetuCate.CategoryId;
                    if (sCategoryId)
                    {
                        while select projEmplTrans
                            where projEmplTrans.ProjId == sProjId
                                && projEmplTrans.CategoryId == sCategoryId
                                && (m_dStart == dateNull() || projEmplTrans.TransDate >= m_dStart)
                                && (m_dEnd == dateNull() || projEmplTrans.TransDate <= m_dEnd)
                        {
                            select firstonly projEmplTransSale
                                where projEmplTransSale.TransId == projEmplTrans.TransId
                                    && (projEmplTransSale.TransStatus == ProjTransStatus::Posted
                                    || projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote);
    
                            if (ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale).canBeInvoiced())
                            {
                                this.doEmpl();
                            }
                        }
    
                        while select projItemTrans
                            where projItemTrans.ProjId == sProjId
                                && projItemTrans.CategoryId == sCategoryId
                                && (m_dStart == dateNull() || projItemTrans.TransDate >= m_dStart)
                                && (m_dEnd == dateNull() || projItemTrans.TransDate <= m_dEnd)
                        {
                            select firstonly projItemTransSale
                                where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                                    && (projItemTransSale.TransStatus == ProjTransStatus::Posted
                                    || projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote);
    
                            if (ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale).canBeInvoiced())
                            {
                                this.doItem();
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionsForTAndMLine</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for Time and Material line type
    protected void createTransactionsForTAndMLine()
    {
        PSAContractLineItemsSetup           tpsaContractLineItemsSetupProj, tpsaContractLineItemsSetuCate;
        ProjId                              sProjId;
        ProjCategoryId                      sCategoryId;
        ProjProposalItem                    projProposalItem;
    
        while select tpsaContractLineItemsSetupProj
            where tpsaContractLineItemsSetupProj.ContractLineNum == m_psaContractLineNum
               && tpsaContractLineItemsSetupProj.ProjId != ''
               && tpsaContractLineItemsSetupProj.CategoryId == ''
        {
            sProjId = tpsaContractLineItemsSetupProj.ProjId;
            if (sProjId)
            {
                while select tpsaContractLineItemsSetuCate
                    where tpsaContractLineItemsSetuCate.ContractLineNum == m_psaContractLineNum
                       && tpsaContractLineItemsSetuCate.ProjId == sProjId
                       && tpsaContractLineItemsSetuCate.CategoryId != ''
                {
                    sCategoryId = tpsaContractLineItemsSetuCate.CategoryId;
                    if (sCategoryId)
                    {
                        while select projCostTrans
                            where projCostTrans.ProjId == sProjId
                               && projCostTrans.CategoryId == sCategoryId
                               && (m_dStart == dateNull() || projCostTrans.TransDate >= m_dStart)
                               && (m_dEnd == dateNull() || projCostTrans.TransDate <= m_dEnd)
                        {
                            select firstonly projCostTransSale
                                where projCostTransSale.TransId == projCostTrans.TransId
                                    && (projCostTransSale.TransStatus == ProjTransStatus::Posted
                                    || projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote);
    
                            if (ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale).canBeInvoiced())
                            {
                                this.doCost();
                            }
                        }
    
                        while select projEmplTrans
                            where projEmplTrans.ProjId == sProjId
                               && projEmplTrans.CategoryId == sCategoryId
                               && (m_dStart == dateNull() || projEmplTrans.TransDate >= m_dStart)
                               && (m_dEnd == dateNull() || projEmplTrans.TransDate <= m_dEnd)
                        {
                            select firstonly projEmplTransSale
                                where projEmplTransSale.TransId == projEmplTrans.TransId
                                    && (projEmplTransSale.TransStatus == ProjTransStatus::Posted
                                    || projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote);
    
                            if (ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale).canBeInvoiced())
                            {
                                this.doEmpl();
                            }
                        }
    
                        while select projItemTrans
                            where projItemTrans.ProjId == sProjId
                               && projItemTrans.CategoryId == sCategoryId
                               && (m_dStart == dateNull() || projItemTrans.TransDate >= m_dStart)
                               && (m_dEnd == dateNull() || projItemTrans.TransDate <= m_dEnd)
                        {
                            select firstonly projItemTransSale
                                where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                                    && (projItemTransSale.TransStatus == ProjTransStatus::Posted
                                    || projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote);
    
                            if (ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale).canBeInvoiced())
                            {
                                this.doItem();
                            }
                        }
    
                        while select projRevenueTrans
                            where projRevenueTrans.ProjId == sProjId
                               && projRevenueTrans.CategoryId == sCategoryId
                               && (m_dStart == dateNull() || projRevenueTrans.TransDate >= m_dStart)
                               && (m_dEnd == dateNull() || projRevenueTrans.TransDate <= m_dEnd)
                        {
                            select firstonly projRevenueTransSale
                                where projRevenueTransSale.TransId == projRevenueTrans.TransId
                                    && (projRevenueTransSale.TransStatus == ProjTransStatus::Posted
                                    || projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote);
    
                            if (ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale).canBeInvoiced())
                            {
                                this.doRevenue();
                            }
                        }
    
                        while select salesTable
                            join salesLine where
                                salesTable.SalesId       == salesLine.SalesId                   &&
                                salesTable.ProjId        == sProjId                             &&
                                salesLine.ProjCategoryId == sCategoryId                         &&
                                (m_dStart == dateNull()  || salesLine.ConfirmedDlv >= m_dStart) &&
                                (m_dEnd == dateNull()    || salesLine.ConfirmedDlv <= m_dEnd)
                                    notexists join projProposalItem where
                                        projProposalItem.ItemType == ProjItemType::SalesOrder   &&
                                        projProposalItem.InventTransId == salesLine.InventTransId
                        {
                            if (salesLine.canBeInvoiced())
                            {
                                this.doSalesLine();
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionsForUODLine</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for Unit of Delivery line type
    protected void createTransactionsForUODLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionAmount</Name>
				<Source><![CDATA[
        /// <summary>
    /// Returns total deduction amount of a proposal.
    /// </summary>
    /// <returns>
    /// Total deduction amount of a proposal.
    /// </returns>
    public Amount deductionAmount()
    {
        return deductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCost</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for cost type
    protected void doCost()
    {
        ProjCostTransSale   projCostTransSaleLoc;
    
        // Copy information from expense record
        m_tProjProposalTrans.clear();
        m_tProjProposalTrans.initFromProjCostTrans(projCostTrans);
        m_tProjProposalTrans.ContractLineNum = m_psaContractLineNum;
    
        m_tProjProposalTrans.LineAmount = 0;
        m_tProjProposalTrans.SalesPrice = 0;
    
        while select projCostTransSaleLoc
            where projCostTransSaleLoc.TransId == projCostTrans.TransId
        {
            if (projCostTransSaleLoc.canBeInvoiced())
            {
                if (projCostTransSaleLoc.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    m_tProjProposalTrans.LineAmount     += projCostTransSaleLoc.LineAmount * -1;
                    m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty * -1;
                    m_tProjProposalTrans.SalesPrice     += projCostTransSaleLoc.SalesPrice * -1;
                }
                else
                {
                    m_tProjProposalTrans.LineAmount     += projCostTransSaleLoc.LineAmount;
                    m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty;
                    m_tProjProposalTrans.SalesPrice     += projCostTransSaleLoc.SalesPrice;
                }
            }
        }
    
        m_tProjProposalTrans.insert();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>doEmpl</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for hour/empl type
    protected void doEmpl()
    {
        ProjEmplTransSale   projEmplTransSaleLoc;
    
        // Copy information from hour record
        m_tProjProposalTrans.clear();
        m_tProjProposalTrans.initFromProjEmplTrans(projEmplTrans);
        m_tProjProposalTrans.ContractLineNum = m_psaContractLineNum;
    
        m_tProjProposalTrans.LineAmount = 0;
        m_tProjProposalTrans.SalesPrice = 0;
    
        while select projEmplTransSaleLoc
            where projEmplTransSaleLoc.TransId == projEmplTrans.TransId
        {
            if (projEmplTransSaleLoc.canBeInvoiced())
            {
                if (projEmplTransSaleLoc.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    m_tProjProposalTrans.LineAmount     += projEmplTransSaleLoc.LineAmount * -1;
                    m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty * -1;
                    m_tProjProposalTrans.SalesPrice     += projEmplTransSaleLoc.SalesPrice * -1;
                    m_tProjProposalTrans.IndirectAmount += m_tProjProposalTrans.IndirectAmount * -1;
                }
                else
                {
                    m_tProjProposalTrans.LineAmount     += projEmplTransSaleLoc.LineAmount;
                     m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty;
                    m_tProjProposalTrans.SalesPrice     += projEmplTransSaleLoc.SalesPrice;
                }
            }
        }
    
        m_tProjProposalTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doItem</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for item type
    protected void doItem()
    {
        ProjItemTransSale   projItemTransSaleLoc;
    
        // Copy information from item record
        m_tProjProposalTrans.clear();
        m_tProjProposalTrans.initFromProjItemTrans(projItemTrans);
        m_tProjProposalTrans.ContractLineNum = m_psaContractLineNum;
    
        m_tProjProposalTrans.LineAmount = 0;
        m_tProjProposalTrans.SalesPrice = 0;
    
        while select projItemTransSaleLoc
            where projItemTransSaleLoc.ProjTransId == projItemTrans.ProjTransId
        {
            if (projItemTransSaleLoc.canBeInvoiced())
            {
                if (projItemTransSaleLoc.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    m_tProjProposalTrans.LineAmount     += projItemTransSaleLoc.LineAmount * -1;
                    m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty * -1;
                    m_tProjProposalTrans.SalesPrice     += projItemTransSaleLoc.SalesPrice * -1;
                }
                else
                {
                    m_tProjProposalTrans.LineAmount     += projItemTransSaleLoc.LineAmount;
                    m_tProjProposalTrans.SalesPrice     += projItemTransSaleLoc.SalesPrice;
                    m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty;
                }
            }
        }
    
        m_tProjProposalTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAccount</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for on account type
    protected void doOnAccount()
    {
        ProjOnAccTransSale  projOnAccTransSaleLoc;
    
        // Copy information from OnAcc record
        m_tProjProposalTrans.clear();
        m_tProjProposalTrans.initFromProjOnAccTrans(projOnAccTrans);
        m_tProjProposalTrans.ContractLineNum = m_psaContractLineNum;
    
        m_tProjProposalTrans.LineAmount = 0;
    
        while select projOnAccTransSaleLoc
            where projOnAccTransSaleLoc.TransId == projOnAccTrans.TransId
        {
            if (projOnAccTransSaleLoc.canBeInvoiced())
            {
                if (projOnAccTransSaleLoc.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    m_tProjProposalTrans.LineAmount     += projOnAccTransSaleLoc.Amount * -1;
                    m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty * -1;
                }
                else
                {
                    m_tProjProposalTrans.LineAmount     += projOnAccTransSaleLoc.Amount;
                    m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty;
                }
            }
        }
    
        m_tProjProposalTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRevenue</Name>
				<Source><![CDATA[
        // Description:     Create project proposal transaction for revenue type
    protected void doRevenue()
    {
        ProjRevenueTransSale    projRevenueTransSaleLoc;
    
        if (projRevenueTrans.IsRetained == NoYes::No
            && projRevenueTrans.IsReleased == NoYes::No)
        {
            // Copy information from fee record
            m_tProjProposalTrans.clear();
            m_tProjProposalTrans.initFromProjRevenueTrans(projRevenueTrans);
            m_tProjProposalTrans.ContractLineNum = m_psaContractLineNum;
    
            m_tProjProposalTrans.LineAmount = 0;
            m_tProjProposalTrans.SalesPrice = 0;
    
            while select projRevenueTransSale
                where projRevenueTransSale.TransId == projRevenueTrans.TransId
            {
                if (projRevenueTransSaleLoc.canBeInvoiced())
                {
                    if (projRevenueTransSaleLoc.TransStatus == ProjTransStatus::MarkedCreditnote)
                    {
                        m_tProjProposalTrans.LineAmount     += projRevenueTransSaleLoc.LineAmount * -1;
                        m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty * -1;
                        m_tProjProposalTrans.SalesPrice     += projRevenueTransSaleLoc.SalesPrice * -1;
                    }
                    else
                    {
                        m_tProjProposalTrans.LineAmount     += projRevenueTransSaleLoc.LineAmount;
                        m_tProjProposalTrans.Qty            =  m_tProjProposalTrans.Qty;
                        m_tProjProposalTrans.SalesPrice     += projRevenueTransSaleLoc.SalesPrice;
                    }
                }
            }
    
            m_tProjProposalTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSalesLine</Name>
				<Source><![CDATA[
        protected void doSalesLine()
    {
        SalesQuantity   salesQuantity = SalesQuantity::construct(DocumentStatus::Invoice);
        SalesQty        deliverNow, remainBefore, remainAfter;
    
        if (salesTable && salesOrderLine)
        {
            [deliverNow, remainBefore, remainAfter] = salesQuantity.qtySales(salesLine, salesUpdate);
    
            if (deliverNow)
            {
                m_tProjProposalTrans.clear();
                m_tProjProposalTrans.initFromSalesLine(salesLine, deliverNow);
                m_tProjProposalTrans.ContractLineNum = m_psaContractLineNum;
                m_tProjProposalTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(str          _sProjInvoiceProjId,
                       str          _sProjId,
                       TransDate    _dStart,
                       TransDate    _dEnd,
                       NoYes        _salesOrderLine = false,
                       SalesUpdate  _salesUpdate = SalesUpdate::DeliverNow)
    {
        super(_sProjInvoiceProjId, _sProjId, _dStart, _dEnd, _salesOrderLine, _salesUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        void run()
    {
        ProjInvoiceProjId                   sProjInvoiceProjId = m_sProjInvoiceProjId;
        PSAContractLineItems                tContractLineItems;
        PSATmpProjProposalSummary           tProjProposalSummary;
    
        ttsbegin;
    
        while select m_psaContractLineItems
            index ContractLineNumIdx
            where m_psaContractLineItems.ProjInvoiceProjId == sProjInvoiceProjId
        {
            m_psaContractLineNum = m_psaContractLineItems.ContractLineNum;
            this.createTransactions();
            this.createSummary();
        }
    
        if (sProjInvoiceProjId)
        {
            this.createTransactionsForDeduction(sProjInvoiceProjId);
        }
    
        tProjProposalSummary.setTmpData(m_tProjProposalSummary);
        while select forupdate tProjProposalSummary
            where tProjProposalSummary.Selected == NoYes::Yes
            join tContractLineItems
                where tContractLineItems.ContractLineNum == tProjProposalSummary.ContractLineNum
                   && tContractLineItems.LineType == PSAContractLineType::Fee
        {
            tProjProposalSummary.InvoiceAmount = this.calFeeLineInvoiceAmount(tProjProposalSummary.ContractLineNum);
            tProjProposalSummary.update();
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        // Description:     Constructor
    static PSAProjProposalSelectionCLIN construct(str           _sProjInvoiceProjId,
                                                  str           _sProjId,
                                                  TransDate     _dStart,
                                                  TransDate     _dEnd,
                                                  NoYes         _salesOrderLine = false,
                                                  SalesUpdate   _salesUpdate = SalesUpdate::DeliverNow)
    
    {
        return new PSAProjProposalSelectionCLIN(_sProjInvoiceProjId, _sProjId, _dStart, _dEnd, _salesOrderLine, _salesUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFeeJournalAndPost</Name>
				<Source><![CDATA[
        // Description:     Generate one fee journal and post the fee journal.
    public static ProjRevenueTrans generateFeeJournalAndPost(PSAContractLineNum _sContractLineNum, Amount _rInvoiceAmount)
    {
        ProjJournalTable                    tProjJournalTable;
        ProjJournalTrans                    tProjJournalTrans;
        ProjJournalName                     tProjJournalName;
        ProjParameters                      projParameters;
        ProjJournalNameId                   sProjJournalNameId;
        NumberSeq                           oNumberSeq;
        ProjJournalCheckPost                oProjJournalCheckPost;
        PSAContractLineItems                tpsaContractLineItems;
    
        ProjRevenueTrans                    tProjRevenueTrans;
        str                                 sTransTxt;
    
        #Define.TransTxtUOD('UOD')
        #Define.TransTxtProgress('PRG')
        #Define.TransTxtFee('FEE')
    
        //Get initial parameters
        projParameters = ProjParameters::find();
        sProjJournalNameId = projParameters.ContractLineFeeJournalNameId;
        if (!sProjJournalNameId)
        {
             throw error("@PSA3116");
        }
        tProjJournalName = ProjJournalName::find(sProjJournalNameId);
    
        tpsaContractLineItems = PSAContractLineItems::find(_sContractLineNum);
        if (tpsaContractLineItems)
        {
            if (!tpsaContractLineItems.FeeProjId)
            {
                throw error("@PSA3117");
            }
            if (!tpsaContractLineItems.FeeCategoryId)
            {
                throw error("@PSA3118");
            }
        }
        else
        {
            throw error("@PSA3119");
        }
    
        //create the fee journal
        tProjJournalTable.initFromProjJournalName(tProjJournalName);
        tProjJournalTable.Resource = ResourceFacade::findOrCreateByWorker(HcmWorkerLookup::currentWorker());
        tProjJournalTable.insert();
    
        //create the fee transaction line
        tProjJournalTrans.initFromProjJournalTable(tProjJournalTable);
    
        oNumberSeq = NumberSeq::newGetVoucherFromCode(tProjJournalTable.getNumberSequenceTable().NumberSequence);
        tProjJournalTrans.Voucher = oNumberSeq.voucher();
        tProjJournalTrans.ProjTransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tProjJournalTrans.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        tProjJournalTrans.ProjId = tpsaContractLineItems.FeeProjId;
        tProjJournalTrans.initFromProjTable(ProjTable::find(tpsaContractLineItems.FeeProjId));
    
        tProjJournalTrans.TaxItemGroupId = ProjParameters::taxItemGroupItem(tpsaContractLineItems.FeeCategoryId, '');
        tProjJournalTrans.TaxGroupId = tpsaContractLineItems.SalesTaxGroup;
        tProjJournalTrans.CategoryId = tpsaContractLineItems.FeeCategoryId;
        tProjJournalTrans.SalesPrice = _rInvoiceAmount;
        tProjJournalTrans.Qty = 1;
        tProjJournalTrans.Resource = ResourceFacade::findOrCreateByWorker(HcmWorkerLookup::currentWorker());
        tProjJournalTrans.setResourceCategory();
        sTransTxt = tpsaContractLineItems.ContractLineNum + ' ' + tpsaContractLineItems.LineDesc + ' ';
        if (tpsaContractLineItems.LineType == PSAContractLineType::Progress)
        {
            sTransTxt += '(' + #TransTxtProgress + ')';
        }
        else if (tpsaContractLineItems.LineType == PSAContractLineType::Fee)
        {
            sTransTxt += '(' + #TransTxtFee + ')';
        }
        else if (tpsaContractLineItems.LineType == PSAContractLineType::UOD)
        {
            sTransTxt += '(' + #TransTxtUOD + ')';
        }
        tProjJournalTrans.Txt = sTransTxt;
    
        tProjJournalTrans.insert();
    
        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(tpsaContractLineItems, tProjJournalTrans);
        }
        // </GTE>
    
        //update the fee journal
        ProjJournalTable::initTotal(tProjJournalTable);
        tProjJournalTable.update();
    
        //Post the fee journal
        oProjJournalCheckPost = ProjJournalCheckPost::newJournalCheckPost(true,
                                                                          false,
                                                                          JournalCheckPostType::Post,
                                                                          tableNum(ProjJournalTable),
                                                                          tProjJournalTable.JournalId);
        oProjJournalCheckPost.runOperation();
    
        select firstonly tProjRevenueTrans
            where tProjRevenueTrans.VoucherJournal == tProjJournalTrans.Voucher;
    
        return tProjRevenueTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>