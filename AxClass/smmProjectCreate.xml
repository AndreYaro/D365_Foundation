<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmProjectCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmProjectCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInvoiceProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ProjInvoiceTable</c> instance.
    /// </summary>
    /// <param name = "_contractID">The <c>ProjInvoiceProjId</c> to create the invoice project with.</param>
    /// <param name = "_custAccount">A <c>CustAccount</c> to look up the appropriate <c>CustTable</c>.</param>
    /// <param name = "_projName">The description of the invoice project.</param>
    /// <returns>A <c>ProjInvoiceTable</c> instance.</returns>
    protected ProjInvoiceTable createInvoiceProject(ProjInvoiceProjId _contractID, CustAccount _custAccount, ProjName _projName)
    {
        ProjInvoiceTable projInvoiceTable;

        if (_contractID && _custAccount)
        {
            projInvoiceTable = this.initializeProjinvoiceTable(_contractID, _custAccount, _projName);
            projInvoiceTable.insert();

            ProjFundingSource::createFundingSource(_contractID, _custAccount);

            ProjFundingSource projFundingSource = ProjFundingSource::findContractFundingSource(_contractID, _custAccount);
            ProjFundingRule::createDefaultFundingRule(_contractID, projFundingSource.RecId);

            TradeBLWIJournalPurposeCodes::createRecord(TradeBLWICustVend::Customer, projInvoiceTable.RecId, _custAccount, TradeBLWITypeOfForm::InvoiceProject);
        }

        return projInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjInvoiceTable</c>.
    /// </summary>
    /// <returns>A <c>ProjInvoiceTable</c> instance.</returns>
    protected ProjInvoiceTable initializeProjInvoiceTable(ProjInvoiceProjId _contractID, CustAccount _custAccount, ProjName _projName)
    {
        ProjInvoiceTable projInvoicetable;
        projInvoiceTable.ProjInvoiceProjId  = _contractID;
        projInvoiceTable.Description        = _projName;

        CustTable custTable = CustTable::find(_custAccount);
        projInvoiceTable.CurrencyId         = custTable.Currency;

        return projInvoicetable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSingleProject</Name>
				<Source><![CDATA[
    private ProjTable createSingleProject(SmmProjectCreateParameters _parameters)
    {
        NumberSeq           projNumberSeq;
        ProjTable           projTable = null;

        if (_parameters.projParentId)
        {
            projTable.type().initFromParent(_parameters.projParentId);

            projTable.ProjId = ProjTable::generateNextSubProjectId(_parameters.projParentId);
        }
        else
        {
            projNumberSeq = NumberSeq::newGetNum(ProjParameters::numRefProjId(), true);

            if (projNumberSeq)
            {
                projTable.ProjId = projNumberSeq.num();
            }
        }

        this.initializeProjTable(_parameters, projTable);

        if (this.validateWrite(projTable))
        {
            if (this.validateWorkersAreInCurrentCompany(projTable))
            {
                projTable.insert();
            }

            if (projNumberSeq)
            {
                projNumberSeq.used();
            }
        }
        else
        {
            projTable.clear();

            if (projNumberSeq)
            {
                projNumberSeq.abort();
            }
        }

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the specified <c>ProjTable</c> instance.
    /// </summary>
    /// <param name = "_projTable">The <c>ProjTable</c> instance to initialize.</param>
    /// <param name = "">An <c>SmmProjectCreateParameters</c> instance that holds the parameters for creating a project.</param>
    protected void initializeProjTable(SmmProjectCreateParameters _parameters, ProjTable _projTable)
    {
        ProjTableType       projtableType;
        ProjInvoiceTable    projInvoiceTable;

        _projTable.Type          = _parameters.projType;
        _projTable.ProjGroupId   = _parameters.projGroupId;
        _projTable.Name          = _parameters.projName;

        projTableType = _projTable.type();
        projTableType.initProjTable();

        _projTable.ProjInvoiceProjId    = _parameters.projInvoiceProjId;
        projInvoiceTable                = ProjInvoiceTable::find(_parameters.projInvoiceProjId);
        _projTable.CustAccount          = ProjFundingSource::findCustAccount(projInvoiceTable.ProjInvoiceProjId).CustAccount;

        _projTable.initFromInvoice(projInvoiceTable);

        _projTable.Format               = _parameters.numberSequenceMask;
        _projTable.CheckBudget          = ProjGroup::find(_parameters.projGroupId).CheckBudget;

        if (_parameters.projInvoiceStatusId)
        {
            ProjLinePropertySetup::updateLinePropertyProj(_projTable.ProjId, _parameters.projInvoiceStatusId, TableGroupAll::Table, true);
        }

        _projTable.TaxGroupId            = _parameters.taxGroup;
        _projTable.DefaultDimension      = _parameters.dimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkersAreInCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the workers on the project belong to the current legal entity.
    /// </summary>
    /// <param name = "_projTable">An instance of the project table record.</param>
    /// <returns>true if the record id's of the workers belong to the current legal entity; otherwise, false.</returns>
    protected boolean validateWorkersAreInCurrentCompany(ProjTable _projTable)
    {
        return (ProjWorkerValidation::isWorkerInCurrentCompany(_projTable.WorkerResponsible) &&
                ProjWorkerValidation::isWorkerInCurrentCompany(_projTable.WorkerResponsibleFinancial) &&
                ProjWorkerValidation::isWorkerInCurrentCompany(_projTable.WorkerResponsibleSales));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    private boolean validateWrite(ProjTable _projTable)
    {
        ProjTableType projTableType;

        projTableType = _projTable.type();

        if (ProjTable::exist(_projTable.ProjId))
        {
            // Project already exists.
            return checkFailed("@SYS56494");
        }

        return projTableType.validateWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static smmProjectCreate construct()
    {
        return new smmProjectCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectGroup</Name>
				<Source><![CDATA[
    // This method creates a project. In addition, it can optionally create an invoice project,
    // attach to an existing invoice project, create a summary project or attach to an existing
    // parent project.
    public static ProjTable createProjectGroup(ProjType                 _projType,
                                               ProjGroupId              _projGroupId,
                                               ProjName                 _projName,
                                               smmProjCreateInvoiceProj _smmProjCreateInvoiceProj,
                                               ProjInvoiceProjId        _projInvoiceProjId,
                                               ProjParentId             _projParentId,
                                               CustAccount              _custAccount,
                                               NumberSequenceFormat     _numberSequenceMask,
                                               ProjLinePropertyId       _projInvoiceStatusId,
                                               boolean                  _forceStatusInProcess    = false,
                                               TaxGroup                 _taxGroup                = '',
                                               DimensionDefault         _dimension               = 0)
    {
        smmProjectCreate    smmProjectCreateInvoiceProj;
        smmProjectCreate    smmProjectCreate;
        ProjInvoiceTable    projInvoiceTable;
        ProjTable           projTableSummaryProj = null;
        ProjTable           projTable;
        ProjInvoiceProjId   projInvoiceProjId;
        ProjParentId        projParentId;

        projInvoiceProjId = _projInvoiceProjId;

        if (_smmProjCreateInvoiceProj == NoYes::Yes)
        {
            smmProjectCreateInvoiceProj = new smmProjectCreate();
            projInvoiceTable            = smmProjectCreateInvoiceProj.createInvoiceProject(projInvoiceProjId, _custAccount, _projName);

            if (!projInvoiceTable)
            {
                // Creation of invoice project failed, return empty ProjTable record
                return projTableSummaryProj;
            }

            projInvoiceProjId = projInvoiceTable.ProjInvoiceProjId;
        }

        smmProjectCreate = new smmProjectCreate();

        SmmProjectCreateParameters parameters = smmProjectCreate::projectCreateParameters(_projType,
                                                                                          _projGroupId,
                                                                                          _projName,
                                                                                          _smmProjCreateInvoiceProj,
                                                                                          projInvoiceProjId,
                                                                                          _projParentId,
                                                                                          _custAccount,
                                                                                          _numberSequenceMask,
                                                                                          _projInvoiceStatusId,
                                                                                          _forceStatusInProcess,
                                                                                          _taxGroup,
                                                                                          _dimension);

        projTable = smmProjectCreate.createSingleProject(parameters);

        if (_forceStatusInProcess)
        {
            smmProjectCreate::statusToInProcess(projTable);
        }

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectCreateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>SmmProjectCreateParameters</c> instance which is used for retrieving project parameters.
    /// </summary>
    /// <returns>An <c>SmmProjectCreateParameters</c> instance.</returns>
    private static SmmProjectCreateParameters projectCreateParameters(ProjType                   _projType,
                                                                     ProjGroupId                _projGroupId,
                                                                     ProjName                   _projName,
                                                                     smmProjCreateInvoiceProj   _smmProjCreateInvoiceProj,
                                                                     ProjInvoiceProjId          _projInvoiceProjId,
                                                                     ProjParentId               _projParentId,
                                                                     CustAccount                _custAccount,
                                                                     NumberSequenceFormat       _numberSequenceMask,
                                                                     ProjLinePropertyId         _projInvoiceStatusId,
                                                                     boolean                    _forceStatusInProcess,
                                                                     TaxGroup                   _taxGroup,
                                                                     DimensionDefault           _dimension)
    {
        SmmProjectCreateParameters parameters = SmmProjectCreateParameters::construct();

        parameters.projType                 = _projType;
        parameters.projGroupId              = _projGroupId;
        parameters.projName                 = _projName;
        parameters.smmProjCreateInvoiceProj = _smmProjCreateInvoiceProj;
        parameters.projInvoiceProjId        = _projInvoiceProjId;
        parameters.projParentId             = _projParentId;
        parameters.custAccount              = _custAccount;
        parameters.numberSequenceMask       = _numberSequenceMask;
        parameters.projInvoiceStatusId      = _projInvoiceStatusId;
        parameters.forceStatusInProcess     = _forceStatusInProcess;
        parameters.taxGroup                 = _taxGroup;
        parameters.dimension                = _dimension;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusToInProcess</Name>
				<Source><![CDATA[
    public static void statusToInProcess(ProjTable _projTable)
    {
        MenuFunction    menuFunction;
        Args            args = new Args();

        if (!_projTable || _projTable.Status == ProjStatus::InProcess || _projTable.Status == ProjStatus::Completed)
        {
            return;
        }

        // Advance the status to In process in stages, being careful not to change the status backwards
        if (_projTable.Status == ProjStatus::Created && _projTable.status().checkEstimated(ProjStatus::Estimated))
        {
            // Advance status to Estimated
            args.record(_projTable);
            args.parmEnumType(enumNum(ProjStatus));
            args.parmEnum(ProjStatus::Estimated);
            menuFunction = new MenuFunction(menuitemActionStr(ProjStatusStartUp), MenuItemType::Action);
            menuFunction.run(args);
        }

        if ((_projTable.Status == ProjStatus::Created || _projTable.Status == ProjStatus::Estimated) && _projTable.status().checkScheduled(ProjStatus::Scheduled))
        {
            // Advance status to Scheduled
            args.record(_projTable);
            args.parmEnumType(enumNum(ProjStatus));
            args.parmEnum(ProjStatus::Scheduled);
            menuFunction = new MenuFunction(menuitemActionStr(ProjStatusStartUp), MenuItemType::Action);
            menuFunction.run(args);
        }

        if ((_projTable.Status == ProjStatus::Created || _projTable.Status == ProjStatus::Estimated || _projTable.Status == ProjStatus::Scheduled) && _projTable.status().checkStartUp(ProjStatus::InProcess))
        {
            // Advance status to In process
            args.record(_projTable);
            args.parmEnumType(enumNum(ProjStatus));
            args.parmEnum(ProjStatus::InProcess);
            menuFunction = new MenuFunction(menuitemActionStr(ProjStatusStartUp), MenuItemType::Action);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>