<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNodePrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostSheetNodePrice extends CostSheetNodeTotal
{
    // Map: CostGroupType -> Set of cost group Ids, those are not mapped in the sheet yet are covered by
    //                       default cost groups of the same cost group type
    Map costGroupType2UnMappedCostGroupIdSetMap;

    // Set: all cost group Ids those are not used in the sheet
    Set allUnMappedCostGroupIdSet;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canHaveSubnode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a proposed node may be added as a subnode.
    /// </summary>
    /// <param name="_node">
    ///    The potential subnode.
    /// </param>
    /// <returns>
    ///    true if the potential subnode is valid; otherwise, false.
    /// </returns>
    public boolean canHaveSubnode(CostSheetNode _node)
    {
        boolean retVal = super(_node);

        if (_node.getType() == CostSheetNodeType::CostGroup)
        {
            CostSheetNodeGroup nodeGroup = _node;
            if (this.getCostType() == CostPriceType::Purchase &&
                BOMCostGroup::find(nodeGroup.getCostGroupId()).CostGroupType == CostGroupType::DirectManufacturing)
            {
                retVal = this.checkFailed("@SYS153403");
            }
        }
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCostSheetNodeTable</Name>
				<Source><![CDATA[
    protected CostSheetNodeTable editCostSheetNodeTable(boolean _set = false, CostSheetNodeTable _costSheetNodeTable = null)
    {
        CostPriceType       previousCostType = this.getCostType();

        CostSheetNodeTable costSheetNodeTable = super(_set, _costSheetNodeTable);

        if (_set)
        {
            if (previousCostType != this.getCostType())
            {
                code = CostSheetNodePrice::defaultCode(costType);
            }
        }

        costSheetNodeTable.Code = code;

        return costSheetNodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Compares attributes and subnode lists of two costing sheet nodes.
    /// </summary>
    /// <param name="_costSheetNode">
    ///    The costing sheet node to compare to.
    /// </param>
    /// <returns>
    ///    true if the nodes have equal attributes and lists of subnodes; otherwise, false.
    /// </returns>
    public boolean equal(Object _costSheetNode)
    {
        boolean ret = super(_costSheetNode);

        if (ret)
        {
            CostSheetNodePrice costSheetNodePrice = _costSheetNode;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUnMappedCostGroupIds</Name>
				<Source><![CDATA[
    /* It may happen that not all cost groups are included to the sheet, and this method helps managing such situations:
       the missing cost groups will be included to the sheet in calculation and presentation modes right under the
       cost price node, so that the user will see them and take actions if necessary.
    */
    protected void findUnMappedCostGroupIds(CostSheetModeStrategy _modeStrategy)
    {
        CostSheetNodeTable      costSheetNodeTable = _modeStrategy.getNodeCursor();
        BOMCostGroup            bomCostGroup;

        allUnMappedCostGroupIdSet = new Set(Types::String);

        // Find all cost groups default for their type and mapped in the sheet:
        while select CostGroupId from costSheetNodeTable
            where costSheetNodeTable.SheetId == sheetId
               && costSheetNodeTable.Type == CostSheetNodeType::CostGroup
            join CostGroupType from bomCostGroup
                where bomCostGroup.CostGroupId == costSheetNodeTable.CostGroupId
                   && bomCostGroup.TypeDefault == NoYes::Yes
        {
            costGroupType2UnMappedCostGroupIdSetMap.insert(bomCostGroup.CostGroupType, new Set(Types::String));
        }

        // Run through all unmapped cost groups
        while select CostGroupType, CostGroupId from bomCostGroup
            notexists join costSheetNodeTable
                where bomCostGroup.CostGroupId == costSheetNodeTable.CostGroupId
                   && costSheetNodeTable.SheetId == sheetId
                   && costSheetNodeTable.Type == CostSheetNodeType::CostGroup
        {
            allUnMappedCostGroupIdSet.add(bomCostGroup.CostGroupId);

            if (costGroupType2UnMappedCostGroupIdSetMap.exists(bomCostGroup.CostGroupType))
            {
                Set costGroupIdSet = costGroupType2UnMappedCostGroupIdSetMap.lookup(bomCostGroup.CostGroupType);
                costGroupIdSet.add(bomCostGroup.CostGroupId);
            }
        }

        select firstonly RecId from costSheetNodeTable
            where costSheetNodeTable.SheetId == sheetId
               && costSheetNodeTable.Type == CostSheetNodeType::CostGroup
               && costSheetNodeTable.CostGroupId == '';

        boolean notExistsBlankCostGroupInSheet = costSheetNodeTable.RecId == 0;

        if (notExistsBlankCostGroupInSheet)
        {
            // We should be ready for situations when BOMCalcTrans or ProdCalcTrans
            // records have blank CostGroupIds
            allUnMappedCostGroupIdSet.add('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the resource index of the image that will represent this node in the editor.
    /// </summary>
    /// <returns>
    ///    The resource ID.
    /// </returns>
    public int getImage()
    {
        return #imagePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    public CostSheetNodeType getType()
    {
        return CostSheetNodeType::Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnMappedCostGroupIdsForType</Name>
				<Source><![CDATA[
    /* The method will be used by sheet nodes representing "default" cost groups. The default cost groups should:
       1) know missing groups that have the same cost group type;
       2) collect amounts of these missing groups.
     */
    public Set getUnMappedCostGroupIdsForType(CostGroupType _costGroupType)
    {
        Set ret;
        if (costGroupType2UnMappedCostGroupIdSetMap)
        {
            if (costGroupType2UnMappedCostGroupIdSetMap.exists(_costGroupType))
            {
                ret = costGroupType2UnMappedCostGroupIdSetMap.lookup(_costGroupType);
            }
            else
            {
                ret = new Set(Types::String);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnMappedUnCoveredCostGroupIds</Name>
				<Source><![CDATA[
    /* The method will be used by "cost price" node. Before presentation of calculation results: the
       cost groups not mapped in the sheet AND not covered by mapped default cost groups should be added to the cost price
       node as subnodes before all the other totals and cost groups.
    */
    public Set getUnMappedUnCoveredCostGroupIds()
    {
        Set unMappedButCoveredCostGroupIdSet = new Set(Types::String);

        MapEnumerator mapEnumerator = costGroupType2UnMappedCostGroupIdSetMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            Set coveredCostGroupIdSet = mapEnumerator.currentValue();
            unMappedButCoveredCostGroupIdSet = Set::union(unMappedButCoveredCostGroupIdSet, coveredCostGroupIdSet);
        }

        return Set::difference(allUnMappedCostGroupIdSet, unMappedButCoveredCostGroupIdSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads subnodes from a database.
    /// </summary>
    /// <param name="_modeStrategy">
    ///    The mode in which the costing sheet is built.
    /// </param>
    protected void loadSubnodes(CostSheetModeStrategy _modeStrategy)
    {
        CostSheetNodeTable  costSheetNodeTable = _modeStrategy.getNodeCursor();

        if (costType != CostPriceType::Undefined
         && _modeStrategy.mustDisplayUnMappedUnCoveredCostGroups())
        {
            // When in 'Presentation' mode, add missing cost groups those are not covered by presented default cost groups
            select maxof(NodeId) from costSheetNodeTable
                where costSheetNodeTable.SheetId == sheetId;

            CostSheetNodeId newNodeId = CostSheet::nextNodeId(costSheetNodeTable.NodeId);

            Set unMappedUnCoveredCostGroupIdsSet = this.getUnMappedUnCoveredCostGroupIds();

            SetEnumerator costGroupIdEnumerator = unMappedUnCoveredCostGroupIdsSet.getEnumerator();
            while (costGroupIdEnumerator.moveNext())
            {
                CostGroupId costGroupId = costGroupIdEnumerator.current();
                CostSheetNodeGroup costSheetNodeGroup = CostSheetNodeGroup::newBOMCostGroup(sheetId,
                                                                                            newNodeId,
                                                                                            BOMCostGroup::find(costGroupId));
                costSheetNodeGroup.update(this);
                this.addSubnode(costSheetNodeGroup);

                newNodeId = CostSheet::nextNodeId(newNodeId);
            }
        }

        super(_modeStrategy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>CostSheetNodePrice</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    protected void new(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy)
    {
        costGroupType2UnMappedCostGroupIdSetMap = new Map(Types::Enum, Types::Class);

        sheetId = _costSheetNodeTable.SheetId; // Don't wait for sheetId to be initialized by super(),
                                               // because it is needed now, in findUnMappedCostGroupIds()
        if (_modeStrategy.mustFindUnMappedCostGroups())
        {
            this.findUnMappedCostGroupIds(_modeStrategy);
        }

        super(_costSheetNodeTable, _parentNodeId, _modeStrategy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack(boolean _areSurchargesPackedByParentContext = false)
    {
        return [#CurrentVersion,
                this.getType(),
                costGroupType2UnMappedCostGroupIdSetMap ? costGroupType2UnMappedCostGroupIdSetMap.pack() : conNull(),
                allUnMappedCostGroupIdSet ? allUnMappedCostGroupIdSet.pack() : conNull()] + [super(_areSurchargesPackedByParentContext)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container           base;
        boolean             ret;
        Integer             version = RunBase::getVersion(_packedClass);
        CostSheetNodeType   nodeType;
        container           packedCostGroupType2UnMappedCostGroupIdSetMap;
        container           packedAllUnMappedCostGroupIdSet;

        switch (version)
        {
            case #CurrentVersion:
                [version,
                 nodeType,
                 packedCostGroupType2UnMappedCostGroupIdSetMap,
                 packedAllUnMappedCostGroupIdSet,
                 base] = _packedClass;

                if (conLen(packedCostGroupType2UnMappedCostGroupIdSetMap) > 0)
                {
                    costGroupType2UnMappedCostGroupIdSetMap = Map::create(packedCostGroupType2UnMappedCostGroupIdSetMap);
                }

                if (conLen(packedAllUnMappedCostGroupIdSet) > 0)
                {
                    allUnMappedCostGroupIdSet = Set::create(packedAllUnMappedCostGroupIdSet);
                }

                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the costing sheet node.
    /// </summary>
    /// <param name="_costSheet">
    ///    A costing sheet instance.
    /// </param>
    /// <returns>
    ///    true if the node is valid; otherwise, false.
    /// </returns>
    public boolean validate(CostSheet _costSheet)
    {
        boolean ret = super(_costSheet);

        ret = (costType == CostPriceType::Undefined ? this.checkFailed("@SYS104698") : true) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validSubnodeTypeSet</Name>
				<Source><![CDATA[
    public Set validSubnodeTypeSet()
    {
        Set ret = new Set(Types::Enum);

        // Only allow subnodes if the cost type has been defined
        if (this.getCostType() != CostPriceType::Undefined)
        {
            ret.add(CostSheetNodeType::Total);
            ret.add(CostSheetNodeType::CostGroup);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodePrice</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodePrice</c> class.
    /// </returns>
    public static CostSheetNodePrice construct(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy)
    {
        return new CostSheetNodePrice(_costSheetNodeTable, _parentNodeId, _modeStrategy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodePrice</c> class.
    /// </summary>
    /// <param name="_packedNode">
    ///     A container that holds a serialized <c>CostSheetNodePrice</c> object.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodePrice</c> class.
    /// </returns>
    public static CostSheetNodePrice create(container _packedNode)
    {
        CostSheetNodePrice node = CostSheetNodePrice::construct(null, 0, CostSheetModeStrategyPackUnpack::construct());
        boolean ret = node.unpack(_packedNode);

        return ret ? node : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCode</Name>
				<Source><![CDATA[
    private static CostSheetNodeCode defaultCode(CostPriceType _costType)
    {
        if (_costType == CostPriceType::Undefined)
            return enum2str(CostSheetNodeType::Price);

        return enum2str(_costType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostTypeShortName</Name>
				<Source><![CDATA[
    public static str getCostTypeShortName(CostPriceType _costType)
    {
        switch (_costType)
        {
            case CostPriceType::COGM:
                return "@SYS153400";
            case CostPriceType::Purchase:
                return "@SYS153401";
            default:
                return "@SYS153402";
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
