<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLedgerConflictGLPurchDiscRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventLedgerConflictGLPurchDiscRule</c> helps to check potential invent ledger conflicts for Purch discount posting type.
/// </summary>
internal final class InventLedgerConflictGLPurchDiscRule
{
    private boolean isRuleActive;
    private Map     purchDiscMainAcc = new Map(Types::String, Types::Enum);
    private boolean skipPurchDiscMainAccSearch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventLedgerConflictGLPurchDiscRule construct()
    {
        InventLedgerConflictGLPurchDiscRule inventLedgerConflictGLPurchDiscRule = new InventLedgerConflictGLPurchDiscRule();

        inventLedgerConflictGLPurchDiscRule.init();

        return inventLedgerConflictGLPurchDiscRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        isRuleActive = this.purchDiscountAllowedForInvent();

        if (isRuleActive)
        {
            InventPosting inventPosting;

            select firstonly RecId from inventPosting
                where inventPosting.InventAccountType == InventAccountType::PurchDisc;

            skipPurchDiscMainAccSearch = inventPosting.RecId == 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingTypeSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if given parameters lead to potential general ledger conflicts.
    /// </summary>
    /// <param name = "_journalCategory">The ledger transaction type.</param>
    /// <param name = "_mainAccountId">The ID of the main account.</param>
    /// <returns>
    /// A list of conflict messages, null if rule is not applicable for verification.
    /// </returns>
    /// <remarks>
    /// The returned list of conflict messages is empty if there are not potential conflicts.
    /// </remarks>
    public List checkPostingTypeSource(
        LedgerTransType     _journalCategory,
        MainAccountNum      _mainAccountId)
    {
        List retValue;

        if (isRuleActive &&
            _journalCategory == LedgerTransType::Purch)
        {
            retValue = new List(Types::Class);

            if (! this.checkPurchDisc(_mainAccountId))
            {
                retValue.addEnd(InventLedgerConflictMessage::newFromParm("@SYS317328", -1));
            }
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchDisc</Name>
				<Source><![CDATA[
    private boolean checkPurchDisc(MainAccountNum _mainAccountId)
    {
        if (skipPurchDiscMainAccSearch)
        {
            return true;
        }

        boolean result;
        
        if (purchDiscMainAcc.exists(_mainAccountId))
        {
            result = purchDiscMainAcc.lookup(_mainAccountId);
        }
        else
        {
            InventPosting inventPosting;
            DimensionAttributeValueCombination davc;
            MainAccount mainAccount;

            select firstonly RecId from inventPosting
                where inventPosting.InventAccountType == InventAccountType::PurchDisc
                exists join davc
                    where inventPosting.LedgerDimension == davc.RecId
                exists join mainAccount
                    where mainAccount.RecId == davc.MainAccount
                        && mainAccount.MainAccountId == _mainAccountId;
                    
            result = inventPosting.RecId != 0;
            purchDiscMainAcc.insert(_mainAccountId, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new ()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchDiscountAllowedForInvent</Name>
				<Source><![CDATA[
    private boolean purchDiscountAllowedForInvent()
    {
        #ISOCountryRegionCodes
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
                LedgerParameters::find().Correspondence_RU &&
                !VendParameters::find().UsePurchConsumpAccount_RU;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>