<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_TORG1</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints Receipt statement for goods (TORG-1) report to excel.
/// </summary>
[PackingSlipReportAttribute(PrintoutTypeTable_RU::PurchReceiptTORG1)]
class OxmlExcelReport_TORG1 extends OXMLExcelReport_PackingSlip implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    Counter         numOfLines,
                    lineNo;

    Qty             totalQty;
    Qty             totalDeviationQty;
    Qty             totalNetQty;

    Weight          totalGrossWeight;
    Weight          totalDeviationGrossWeight;
    Weight          totalNetGrossWeight;

    Weight          totalLineNetWeight;
    Weight          totalDeviationNetWeight;
    Weight          totalNetWeight;

    Amount          totalAmount;
    Amount          totalDeviationAmount;
    Amount          totalNetAmount;

    Amount          totalVATAmount;
    Amount          totalAmountWithTax;

    #define.pageHeader('PAGEHEADER')
    #define.body('BODY')
    #define.pageFooter('PAGEFOOTER')
    #define.reportFooter('REPORTFOOTER')
    #define.page1('PAGE1')
    #define.page3('PAGE3')

    #define.widthPage1(107)
    #define.widthPage2(218)
    #define.widthPage3(107)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addTotals()
    {
        totalQty                   += line.Qty;
        totalDeviationQty          += line.DeviationQty;
        totalNetQty                += (line.Qty - line.DeviationQty);

        totalGrossWeight           += line.GrossWeight;
        totalDeviationGrossWeight  += line.DeviationQty              * line.ItemGrossWeight;
        totalNetGrossWeight        += (line.Qty - line.DeviationQty) * line.ItemGrossWeight;

        totalLineNetWeight         += line.Qty                       * line.ItemNetWeight;
        totalDeviationNetWeight    += line.DeviationQty              * line.ItemNetWeight;
        totalNetWeight             += (line.Qty - line.DeviationQty) * line.ItemNetWeight;

        totalAmount                += line.LineAmount;
        totalDeviationAmount       += line.DeviationAmount;
        totalNetAmount             += line.LineAmount - line.DeviationAmount;

        totalVATAmount             += line.vatAmount;
        totalAmountWithTax         += line.LineAmountWithTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(12.00)

        return max(document.getNamedRangeHeightWrapped('ItemName', line.ItemName),
                   document.getNamedRangeHeightWrapped('ItemId', line.ItemId),
                   #minHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00056, funcName());

        this.initSectionMap();

        //page1
        this.setCurrentWorksheetNum(1, #widthPage1);
        this.execute(#page1);
        this.setPrintArea();

        //page2
        this.setCurrentWorksheetNum(2, #widthPage2);

        select count(RecId) from line
            where line.InternalId       == subHeader.InternalId &&
                  line.InventLocationId == subHeader.InventLocationId              &&
                 (line.DeviationQty     == 0                                       ||
                  journalPrintoutType   == PrintoutTypeTable_RU::PurchReceiptTORG1);

        numOfLines = int642int(line.RecId);

        this.execute(#pageHeader);

        // Body -->
        while select line
            where line.InternalId       == subHeader.InternalId &&
                  line.InventLocationId == subHeader.InventLocationId              &&
                 (line.DeviationQty     == 0                                       ||
                  journalPrintoutType   == PrintoutTypeTable_RU::PurchReceiptTORG1)
        {
            lineNo++;

            if (this.mustCreateNewPage())
            {
                this.execute(#pageFooter);
                document.insertPageBreak(currentRow, curWorksheetNum);

                currentHeight = 0;
                this.execute(#pageHeader);
            }

            this.execute(#body);

            this.addTotals();
        }

        this.execute(#reportFooter);

        this.setPrintArea();

        //page3
        this.setCurrentWorksheetNum(3, #widthPage3);
        this.execute(#page3);
        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'TORG1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + subHeader.DocumentId + '_' + header.DocumentName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'TORG1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        this.insertValueToSection('ItemName',   line.ItemName);
        this.insertValueToSection('ItemId',     line.ItemId);
        this.insertValueToSection('Unit',       line.Unit);
        this.insertValueToSection('OKEI',       line.CodeOKEI);

        this.insertValueToSection('Price',                  line.Price);
        this.insertValueToSection('DocQty',                 line.Qty - line.DeviationQty);
        this.insertValueToSection('DocGrossWeight',         (line.Qty - line.DeviationQty) * line.ItemGrossWeight);
        this.insertValueToSection('DocNetWeight'  ,         (line.Qty - line.DeviationQty) * line.ItemNetWeight);
        this.insertValueToSection('DocLineAmount',          line.LineAmount - line.DeviationAmount);
        this.insertValueToSection('FactQty',                line.Qty);
        this.insertValueToSection('FactGrossWeight',        line.GrossWeight);
        this.insertValueToSection('FactNetWeight',          line.Qty                       * line.ItemNetWeight);
        this.insertValueToSection('FactLineAmount',         line.LineAmount);
        this.insertValueToSection('LineAmountWithTax',      line.LineAmountWithTax);
        this.insertValueToSection('VATValue',               line.VatValue);
        this.insertValueToSection('VATAmount',              line.vatAmount);
        this.insertValueToSection('DeviationQty',           line.DeviationQty);
        this.insertValueToSection('DeviationGrossWeight',   line.DeviationQty              * line.ItemGrossWeight);
        this.insertValueToSection('DeviationNetWeight',     line.DeviationQty              * line.ItemNetWeight);
        this.insertValueToSection('DeviationAmount',        line.DeviationAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #page1:
                this.fillPage1();
                break;
            case #page3:
                this.fillPage3();
                break;
            case #pageHeader:
                this.fillPageHeader();
                break;
            case #body:
                this.fillBody();
                break;
            case #reportFooter:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills first page section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPage1()
    {
        this.insertValueToSection('OKPO',                 header.CustOKPO);
        this.insertValueToSection('CompanyName',          header.CustName);
        this.insertValueToSection('DepartmentName',       subHeader.InventLocationName);
        this.insertValueToSection('DocmentDateDay',       dayOfMth(header.InvoiceDate));
        this.insertValueToSection('DocumentDateMonth',    mthOfYr(header.InvoiceDate));
        this.insertValueToSection('DocumentDateYear',     year(header.InvoiceDate));
        this.insertValueToSection('DirectorPosition',     header.DirectorTitle);
        this.insertValueToSection('DocumentNumber',       subHeader.DocumentId);
        this.insertValueToSection('DocumentDate',         header.InvoiceDate);
        this.insertValueToSection('DirectorName',         header.DirectorName);
        this.insertValueToSection('SignificationDate',    header.InvoiceDate);
        this.insertValueToSection('CompanyAddress',       header.CustBankAddress);
        this.insertValueToSection('InvoiceAccountName',   header.VendName + #space + header.VendBankAddress);
        this.insertValueToSection('VendAccountName',      header.ConsignorBankAddress);
        this.insertValueToSection('ContractNumber',       header.AgreementDocumentTitle);
        this.insertValueToSection('ContractDate',         header.AgreementDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills third page section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPage3()
    {
        OfficialsTrans_RU officialsTrans;
        Counter           i;
        str               stri;
        RecordSortedList  list = OfficialsTrans_RU::findMulti(header.OffSessionId,
                                                              OffReportType_RU::PurchM4M7,
                                                              OffPosition_RU::Member,
                                                              header.VendAccount,
                                                              subHeader.InventLocationId,
                                                              InventParameters::inventReceiptsListMembersNumber_RU());

        RecordSortedList  list2 = OfficialsTrans_RU::findMulti(header.OffSessionId,
                                                              OffReportType_RU::PurchM4M7,
                                                              OffPosition_RU::Chairman,
                                                              header.VendAccount,
                                                              subHeader.InventLocationId,
                                                              InventParameters::inventReceiptsListMembersNumber_RU());

        ;

        list.first(officialsTrans);

        while (officialsTrans)
        {
            i++;
            stri = int2str(i);

            this.insertValueToSection('CommissionMember' + stri + 'Name',  officialsTrans.Name);
            this.insertValueToSection('CommissionMember' + stri + 'Title', officialsTrans.Title);

            if (! list.next(officialsTrans))
                break;
        }

        list2.first(officialsTrans);

        while (officialsTrans)
        {
            this.insertValueToSection('CommissionHeadName',  officialsTrans.Name);
            this.insertValueToSection('CommissionHeadTitle', officialsTrans.Title);

            if (! list2.next(officialsTrans))
                break;
        }

        this.insertValueToSection('AccountantName',  header.AccountantName);
        this.insertValueToSection('Stockkeeper',     subHeader.AcceptorName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPageHeader()
    {
        str             currencyLong, priceStr, amountStr, vatAmountStr, amountIncVatStr;

        #define.TwoWithSep(",    \%1, \%2")
        #define.OneWithSep(",    \%1")

        if (header.CurrencyShortName && header.CurrencyShortNamePenny)
        {
            currencyLong    = strFmt(#TwoWithSep, header.CurrencyShortName, header.CurrencyShortNamePenny);
        }
        else if (header.CurrencyShortName || header.CurrencyShortNamePenny)
        {
            currencyLong    = strFmt(#OneWithSep, header.CurrencyShortName + header.CurrencyShortNamePenny);
        }

        priceStr        = new Label(header.LanguageId).extractString(literalStr("@SYS11865"));
        amountStr       = new Label(header.LanguageId).extractString(literalStr("@GLS113196"));
        vatamountStr    = new Label(header.LanguageId).extractString(literalStr("@SYS53072"));
        amountincvatstr = new Label(header.LanguageId).extractString(literalStr("@GLS113197"));

        this.insertValueToSection('PriceCurrency_1',        priceStr        + currencyLong);
        this.insertValueToSection('AmountCurrency_1',       amountStr       + currencyLong);
        this.insertValueToSection('AmountCurrency_2',       amountStr       + currencyLong);
        this.insertValueToSection('AmountCurrency_3',       amountStr       + currencyLong);
        this.insertValueToSection('AmountCurrencyIncVAT_1', amountincvatstr + currencyLong);
        this.insertValueToSection('VATAmountCurrency',      vatamountStr    + currencyLong);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportFooter()
    {
        this.insertValueToSection('totalNetQty',                   totalNetQty);
        this.insertValueToSection('totalNetGrossweight',           totalNetGrossWeight);
        this.insertValueToSection('totalNetWeight',                totalNetWeight);
        this.insertValueToSection('totalNetAmount',                totalNetAmount);
        this.insertValueToSection('totalQty',                      totalQty);
        this.insertValueToSection('totalGrossweight',              totalGrossWeight);
        this.insertValueToSection('totalLineNetweight',            totalLineNetWeight);
        this.insertValueToSection('totalAmount',                   totalAmount);
        this.insertValueToSection('totalAmountWithTax',            totalAmountWithTax);
        this.insertValueToSection('totalVATAmount',                totalVATAmount);
        this.insertValueToSection('totalDeviationQty',             totalDeviationQty);
        this.insertValueToSection('totalDeviationGrossweight',     totalDeviationGrossWeight);
        this.insertValueToSection('totalDeviationNetweight',       totalDeviationNetWeight);
        this.insertValueToSection('totalDeviationAmount',          totalDeviationAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#page1);
        this.addSection(#pageHeader);
        this.addSection(#body, true);
        this.addSection(#pageFooter);
        this.addSection(#reportFooter);
        this.addSection(#page3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks whether report should create new page
    /// </summary>
    /// <returns>
    /// Whether last fetched record should be printed on current page
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(#body);

        if (lineNo == numOfLines)
        {
            requiredHeight += conPeek(mapSections.lookup(#reportFooter), #posSectionHeight);
        }
        else
        {
            requiredHeight += conPeek(mapSections.lookup(#pageFooter), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(TORG1_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    #define.cellsBody(20)
    #define.cellsOther(36)
    protected Counter totalCells()
    {
        TmpSalesPurchReportLine_RU      lineLocal;

        lineLocal.setTmpData(line);
        select count(RecId) from lineLocal
            where lineLocal.InternalId       == subHeader.InternalId &&
                  lineLocal.InventLocationId == subHeader.InventLocationId              &&
                 (lineLocal.DeviationQty     == 0                                       ||
                  journalPrintoutType   == PrintoutTypeTable_RU::PurchReceiptTORG1);

        return #cellsOther + (int642int(lineLocal.RecId) * #cellsBody);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_TORG1 construct()
    {
        return new OXMLExcelReport_TORG1();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>