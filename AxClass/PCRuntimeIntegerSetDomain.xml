<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeIntegerSetDomain</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCRuntimeEnumDomain</c> class is the runtime data structure class for an enumeration domain.
/// </summary>
class PCRuntimeIntegerSetDomain implements PCRuntimeInterface
{
    List values; // List of solver and display values in correct order for UI

    str integerSetDefinitionId;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        integerSetDefinitionId,
        values
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts an instance of the <c>PCRuntimeVisitor</c>.
    /// </summary>
    /// <param name="_visitor">
    /// A runtime visitor.
    /// </param>
    public void accept(PCRuntimeVisitor _visitor)
    {
        _visitor.visitStart(this);
        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a value to a domain.
    /// </summary>
    /// <param name="_value">
    /// A value from the set.
    /// </param>
    public void addValue(int _value)
    {
        values.addEnd(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a display value from a solver value.
    /// </summary>
    /// <param name="_value">
    /// The solver value.
    /// </param>
    /// <returns>
    /// The display value.
    /// </returns>
    public str getDisplayValue(int _value)
    {
        return int2str(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the values in a domain.
    /// </summary>
    /// <returns>
    /// The values in the domain.
    /// </returns>
    public List getValues()
    {
        return values;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        values = new List(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, integerSetDefinitionId, values.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntegerSetDefinitionId</Name>
				<Source><![CDATA[
    public str parmIntegerSetDefinitionId(str _integerSetDefinitionId = integerSetDefinitionId)
    {
        integerSetDefinitionId = _integerSetDefinitionId;

        return integerSetDefinitionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                integerSetDefinitionId   = conPeek(_packedClass, 2);
                values                   = List::create(conPeek(_packedClass, 3));
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimeIntegerSetDomain construct()
    {
        return new PCRuntimeIntegerSetDomain();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>