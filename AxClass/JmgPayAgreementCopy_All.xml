<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayAgreementCopy_All</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgPayAgreementCopy</c> class copies an entire pay agreement to another.
/// </summary>
public class JmgPayAgreementCopy_All extends JmgPayAgreementCopy
{
    JmgPayAgreement         jmgPayAgreement;
    JmgPayAgreementTable    jmgPayAgreementTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();
        dialog.caption(JmgPayAgreementCopy_All::description());

        dialogField     = dialog.addField(extendedtypestr(JmgPayAgreement));
        dialogOverwrite = dialog.addField(extendedtypestr(NoYesId),"@SYS3074");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the values that were entered by the user.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            jmgPayAgreement = dialogField.value();
            if (!jmgPayAgreement)
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        jmgPayAgreementTable.copyAgreement(jmgPayAgreement,doOverwrite);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the arguments with which the class is called.
    /// </summary>
    /// <param name="args">
    /// the arguments with which the class is called.
    /// </param>
    void setParameters(Args args)
    {
        formDataSource       = args.caller().datasource(tablestr(JmgPayAgreementTable));
        jmgPayAgreementTable = formDataSource.cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS38430";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>