<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymentOrderJourReportController_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>BankPaymentOrderJourReportController_RU</c> is a controller class for <c>BankPaymentOrderJourReport_RU</c> report.
/// </summary>
class BankPaymentOrderJourReportController_RU extends SrsReportRunController implements BatchRetryable
{
    LedgerJournalACType      ledgerACType;
    PaymOrderStatus_RU       paymOrderStatus;
    CurrencyCode             currency;
    BankClientPaymentType_RU ePayment;

    #define.paramPaymOrderStatus('PaymOrderStatus')
    #define.paramCurrencyCode('CurrencyCode')
    #define.paramLedgerAccountType('LedgerAccountType')
    #define.paramElectronicPayment('ElectronicPayment')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract class before dialog is shown to the user.
    /// </summary>
    protected void prePromptModifyContract()
    {
        SrsReportRdlDataContract rdlContract;
        rdlContract = this.parmReportContract().parmRdlContract();

        rdlContract.setValue(#paramPaymOrderStatus, enum2Symbol(enumNum(PaymOrderStatus_RU), paymOrderStatus));
        rdlContract.setValue(#paramLedgerAccountType, enum2Symbol(enumNum(LedgerJournalACType), enum2int(ledgerACType)));
        rdlContract.setValue(#paramCurrencyCode, currency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method to change the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        SrsReportRdlDataContract rdlContract;
        Query query;

        query       = this.getFirstQuery();
        rdlContract = this.parmReportContract().parmRdlContract();

        this.setRanges(query, rdlContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParametersValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to get the LedgerACType.
    /// </summary>
    /// <param name="_ledgerACType">
    /// Value for parameter LedgerAccountType.
    /// </param>
    /// <param name="_paymOrderStatus">
    /// Value for parameter PaymOrderStatus.
    /// </param>
    /// <param name="_currency">
    /// Value for parameter CurrencyCode.
    /// </param>
    public void setParametersValue(
        LedgerJournalACType _ledgerACType,
        PaymOrderStatus_RU  _paymOrderStatus,
        CurrencyCode        _currency)
    {
        ledgerACType    = _ledgerACType;
        paymOrderStatus = _paymOrderStatus;
        currency        = _currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checking from which menuitem report is called based on this adding the ranges and filtering records.
    /// </summary>
    /// <param name="_query">
    /// An instance of query used in the <c>BankPaymentOrderJourReport_RU</c> report.
    /// </param>
    /// <param name="_rdlContract">
    /// An instance of <c>SrsReportRdlDataContract</c>.
    /// </param>
    public void setRanges(Query _query, SrsReportRdlDataContract _rdlContract)
    {
        TransDate fromDate;
        TransDate toDate;

        #define.paramFromDate('FromDate')
        #define.paramToDate('ToDate')
        #define.paramAccountID('AccountId')

        fromDate = _rdlContract.getValue(#paramFromDate);
        toDate   = _rdlContract.getValue(#paramToDate);
        ePayment = new SysDictEnum(enumNum(BankClientPaymentType_RU)).symbol2Value(_rdlContract.getValue(#paramElectronicPayment));
        SrsReportHelper::addFromAndToDateRangeToQuery(
            _query,
            fromDate,
            toDate,
            tableNum(BankPaymentOrderJour_RU),
            fieldNum(BankPaymentOrderJour_RU, PaymentTransDate));

        SrsReportHelper::addParameterValueRangeToQuery(
            _query,
            tableNum(BankPaymentOrderJour_RU),
            fieldNum(BankPaymentOrderJour_RU, BankIdPayer),
            _rdlContract.getValue(#ParamAccountID));

        SrsReportHelper::addParameterValueRangeToQuery(
            _query,
            tableNum(BankPaymentOrderJour_RU),
            fieldNum(BankPaymentOrderJour_RU, CurrencyCode),
            _rdlContract.getValue(#ParamCurrencyCode));

        SrsReportHelper::addParameterValueRangeToQuery(
            _query,
            tableNum(BankPaymentOrderJour_RU),
            fieldNum(BankPaymentOrderJour_RU, LedgerACType),
            enum2Value(ledgerACType));

        switch (ePayment)
        {
            case BankClientPaymentType_RU::All :
                SrsReportHelper::addParameterValueRangeToQuery(
                    _query,
                    tableNum(BankPaymentOrderJour_RU),
                    fieldNum(BankPaymentOrderJour_RU, ElectronicPayment),
                    SysQuery::valueUnlimited());
                break;

            case BankClientPaymentType_RU::Electronic :
                SrsReportHelper::addParameterValueRangeToQuery(
                    _query,
                    tableNum(BankPaymentOrderJour_RU),
                    fieldNum(BankPaymentOrderJour_RU, ElectronicPayment),
                    queryValue(NoYes::Yes));
                break;

            case BankClientPaymentType_RU::Printing :
                SrsReportHelper::addParameterValueRangeToQuery(
                    _query,
                    tableNum(BankPaymentOrderJour_RU),
                    fieldNum(BankPaymentOrderJour_RU, ElectronicPayment),
                    queryValue(NoYes::No));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an entry point for the <c>BankPaymentOrderJourReportController_RU</c> class
    /// when it is called from menuItem.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>BankPaymentOrderJourReportController_RU</c> class.
    /// </param>
    public static void main(Args _args)
    {
        BankPaymentOrderJourReportController_RU controller  = _args.parmObject();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00036, funcName());

        controller.parmReportName(ssrsReportStr(BankPaymentOrderJour_RU, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>