<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HierarchyEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles events for the <c>Hiearchy</c> form.
/// </summary>
class HierarchyEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Hierarchy_Post_getDataEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>Hierarchy</c> form's <c>getDataEntityContext</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(Hierarchy), formMethodStr(Hierarchy, getDataEntityContext))]
    public static void Hierarchy_Post_getDataEntityContext(XppPrePostArgs _args)
    {
        ExportToExcelDataEntityContext context = null;
        OfficeGeneratedExportMenuItem menuItem = _args.getArg('_menuItem');

        if (menuItem.dataEntityName() == tableStr(ProjTable))
        {
            context = ExportToExcelDataEntityContext::construct(tableStr(ProjTable),
                tableFieldGroupStr(ProjTable, AutoReport));
        }

        _args.setReturnValue(context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_Post_customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>Hierarchy</c> form's <c>customizeMenuOptions</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(Hierarchy), formMethodStr(Hierarchy, customizeMenuOptions))]
    public static void Hierarchy_Post_customizeMenuOptions(XppPrePostArgs _args)
    {
        OfficeMenuOptions menuOptions = _args.getArg('_menuOptions');
        ListIterator dataEntityOptionsIterator = new ListIterator(menuOptions.dataEntityOptions());
        FormRun form = _args.getThis();
        FormDataSource hierarchy_ds = form.dataSource(formDataSourceStr(Hierarchy, Hierarchy)) as FormDataSource;
        Hierarchy hierarchy = hierarchy_ds.cursor();

        if (hierarchy.HierarchyType !=  HierarchyType::Project)
        {
            while (dataEntityOptionsIterator.more())
            {
                dataEntityOptionsIterator.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_Post_close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>Hierarchy</c> form's <c>close</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(Hierarchy), formMethodStr(Hierarchy, close))]
    public static void Hierarchy_Post_close(XppPrePostArgs _args)
    {
        FormRun hierarchyForm = _args.getThis();
        
        boolean isCallerQuotation = hierarchyForm.parmIsCallerQuotation();
        Object caller = hierarchyForm.parmCaller();
        HierarchyFormContext hierarchyFormContext = hierarchyForm.parmHierarchyFormContext();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            PSASummaryActivity psaSummaryActivity = hierarchyFormContext.parmContextMap().lookup('psaSummaryActivity');

            if (!isCallerQuotation)
            {
                ProjTable projTable = hierarchyFormContext.parmContextMap().lookup('projTable') as ProjTable;

                if (projTable)
                {
                    psaSummaryActivity.treeTraversal(projTable);
                }

                if (caller && caller.name() == formStr(ProjTable))
                {
                    caller.refreshDataSource();
                }
            }
            else
            {
                SalesQuotationTable salesQuotationTable = hierarchyFormContext.parmContextMap().lookup('salesQuotationTable') as SalesQuotationTable;

                if (salesQuotationTable)
                {
                    psaSummaryActivity.treeTraversal(salesQuotationTable);
                }

                if (caller && caller.name() == formStr(SalesQuotationProjTable))
                {
                    caller.psaRefreshDataSource(salesQuotationTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_Pre_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>Hierarchy</c> form's <c>Pre_init</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PreHandlerFor(formStr(Hierarchy), formMethodStr(Hierarchy, init))]
    public static void Hierarchy_Pre_init(XppPrePostArgs _args)
    {
        FormRun hierarchyForm = _args.getThis();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            Object caller = hierarchyForm.args().caller();

            if (caller)
            {
                if (caller.name() == formStr(ProjWbsTemplate) ||
                    caller.name() == formStr(ProjABSTemplateCreate))
                {
                    hierarchyForm.parmAbsTemplate(true);
                    hierarchyForm.design().caption("@PSA11088");
                    hierarchyForm.design().titleDatasource('');
                    hierarchyForm.parmProcessType(HierarchyType::Project);
                }
                if (caller.name() == formStr(SalesQuotationListPage) || caller.name() == formStr(SalesQuotationProjTable))
                {
                    hierarchyForm.parmIsCallerQuotation(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>Hierarchy</c> form's <c>Post_init</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(Hierarchy), formMethodStr(Hierarchy, init))]
    public static void Hierarchy_Post_init(XppPrePostArgs _args)
    {
        ProjTable projTable;
        SalesQuotationTable salesQuotationTable;
        PSASummaryActivity psaSummaryActivity;
        FormRun hierarchyForm = _args.getThis();
        Hierarchy localHierarchy;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            psaSummaryActivity = new PSASummaryActivity();
        }

        if (hierarchyForm.args().dataset() == tableNum(Hierarchy))
        {
            localHierarchy = hierarchyForm.args().record();

            if (!hierarchyForm.parmIsTemplate() && localHierarchy.HierarchyType == HierarchyType::Project)
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && hierarchyForm.parmIsCallerQuotation())
                {
                    salesQuotationTable = HierarchyLinkTable::findAssociation(localHierarchy.HierarchyId, tableNum(SalesQuotationTable));
                }
                else
                {
                    projTable = HierarchyLinkTable::findAssociation(localHierarchy.HierarchyId, tableNum(ProjTable));
                }
            }
        }

        // Pass the context of local form variables back to the base Hierarchy form
        HierarchyFormContext hierarchyFormContext = hierarchyForm.parmHierarchyFormContext();
        Map hierarchyContextMap = hierarchyFormContext.parmContextMap();

        hierarchyContextMap.insert('salesQuotationTable', salesQuotationTable);
        hierarchyContextMap.insert('projTable', projTable);
        hierarchyContextMap.insert('psaSummaryActivity', psaSummaryActivity);
        hierarchyFormContext.parmContextMap(hierarchyContextMap);
        hierarchyForm.parmHierarchyFormContext(hierarchyFormContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_Post_setControlByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>Hierarchy</c> form's <c>setControlByType</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(Hierarchy), formMethodStr(Hierarchy, setControlByType))]
    public static void Hierarchy_Post_setControlByType(XppPrePostArgs _args)
    {
        FormRun hierarchyForm = _args.getThis();

        HierarchyType type = _args.getArg('_type');
        boolean isTemplate = hierarchyForm.parmIsTemplate();

        switch (type)
        {
            case HierarchyType::Project :
                hierarchyForm.design().controlName(formControlStr(Hierarchy, TabResponsibility)).visible(false);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, InquiryButtonGroup)).visible(false);
                break;

            case HierarchyType::Campaign :
                hierarchyForm.design().controlName(formControlStr(Hierarchy, tabResponsibility)).visible(isTemplate);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, InquiryButtonGroup)).visible(isTemplate);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Campaign)).visible(true);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Lead)).visible(false);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Opportunity)).visible(false);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Case)).visible(false);
                break;

            case HierarchyType::Lead :
                hierarchyForm.design().controlName(formControlStr(Hierarchy, tabResponsibility)).visible(isTemplate);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, InquiryButtonGroup)).visible(isTemplate);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Campaign)).visible(false);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Lead)).visible(true);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Opportunity)).visible(false);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Case)).visible(false);
                break;

            case HierarchyType::Opportunity :
                hierarchyForm.design().controlName(formControlStr(Hierarchy, tabResponsibility)).visible(isTemplate);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, InquiryButtonGroup)).visible(isTemplate);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Campaign)).visible(false);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Lead)).visible(false);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Opportunity)).visible(true);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Case)).visible(false);
                break;

            case HierarchyType::Case :
                hierarchyForm.design().controlName(formControlStr(Hierarchy, tabResponsibility)).visible(isTemplate);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, InquiryButtonGroup)).visible(isTemplate);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Campaign)).visible(false);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Lead)).visible(false);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Opportunity)).visible(false);
                hierarchyForm.design().controlName(formControlStr(Hierarchy, inquiryButton_Case)).visible(true);
                break;

            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_Post_setTemplateFieldAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>Hierarchy</c> form's <c>setTemplateFieldAccess</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(Hierarchy), formMethodStr(Hierarchy, setTemplateFieldAccess))]
    public static void Hierarchy_Post_setTemplateFieldAccess(XppPrePostArgs _args)
    {
        FormRun hierarchyForm = _args.getThis();
        
        boolean absTemplate = hierarchyForm.parmAbsTemplate();
        boolean isTemplate  = hierarchyForm.parmIsTemplate();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && absTemplate)
        {
            hierarchyForm.design().controlName(formControlStr(Hierarchy, hierarchyGroup)).visible(!absTemplate);
            hierarchyForm.design().controlName(formControlStr(Hierarchy, templateIdentification)).visible(!absTemplate);
            hierarchyForm.design().controlName(formControlStr(Hierarchy, verticalSplit)).visible(!absTemplate);

            hierarchyForm.design().controlName(formControlStr(Hierarchy, generalHierarchy_HierarchyType)).visible(false);
            hierarchyForm.design().controlName(formControlStr(Hierarchy, InquiryButtonGroup)).visible(!false);
        }
        else
        {
            hierarchyForm.design().controlName(formControlStr(Hierarchy, InquiryButtonGroup)).visible(isTemplate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_Post_updateFormDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for <c>Hierarchy</c> form's <c>updateFormDesign</c> method.
    /// </summary>
    /// <param name="_args">A <c>XppPrePostArgs</c> instance.</param>
    [PostHandlerFor(formStr(Hierarchy), formMethodStr(Hierarchy, updateFormDesign))]
    public static void Hierarchy_Post_updateFormDesign(XppPrePostArgs _args)
    {
        FormRun hierarchyForm = _args.getThis();
        HierarchyType hierarchyType = _args.getArg('_hierarchyType');

        if (!hierarchyForm.parmIsTemplate())
        {
            if (hierarchyType == HierarchyType::Project)
            {
                hierarchyForm.design().caption("@SYS338946");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjTableInfo_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for ProjTableInfo.onQueryExecuting event.
    /// </summary>
    /// <param name="_sender">The ProjTableInfo data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(Hierarchy, ProjTableInfo), FormDataSourceEventType::QueryExecuting)]
    public static void ProjTableInfo_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hierarchyForm = _sender.formRun();

        HierarchyFormContext hierarchyFormContext = hierarchyForm.parmHierarchyFormContext();
        ProjTable projTable = hierarchyFormContext.parmContextMap().lookup('projTable');

        _sender.query().dataSourceName(_sender.name()).addRange(fieldnum(ProjTable, ProjId))
            .value(queryValue(projTable.ProjId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesQuotationTableInfo_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for SalesQuotationTableInfo.onQueryExecuting event.
    /// </summary>
    /// <param name="_sender">The SalesQuotationTableInfo data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(Hierarchy, SalesQuotationTableInfo), FormDataSourceEventType::QueryExecuting)]
    public static void SalesQuotationTableInfo_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            FormRun hierarchyForm = _sender.formRun();
            HierarchyFormContext hierarchyFormContext = hierarchyForm.parmHierarchyFormContext();
            SalesQuotationTable salesQuotationTable = hierarchyFormContext.parmContextMap().lookup('salesQuotationTable');

            _sender.query().dataSourceName(_sender.name()).addRange(fieldnum(SalesQuotationTable, QuotationId))
                .value(queryValue(salesQuotationTable.QuotationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for Hierarchy.onActivated event.
    /// </summary>
    /// <param name="_sender">The Hierarchy data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(Hierarchy, Hierarchy), FormDataSourceEventType::Activated)]
    public static void Hierarchy_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun hierarchyForm = _sender.formRun();
        boolean absTemplate = hierarchyForm.parmAbsTemplate();

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) ? absTemplate : false)
        {
            Hierarchy hierarchy = _sender.cursor();
            hierarchyForm.setControlByType(hierarchy.HierarchyType);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>