<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPromissoryNoteController_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankPromissoryNoteController_ES</c> class is the controller class for the
///    <c>BankPromissoryNote_ES</c> report.
/// </summary>
public class BankPromissoryNoteController_ES extends SrsReportRunController implements BatchRetryable
{
    BankPromissoryNoteTmp_ES        bankPromissoryNoteTmp_ES;
    TmpBankPromissoryNotePrintout   tmpBankPromissoryNotePrintout;
    BankPromissoryNoteLayout        bankPromissoryNoteLayout;

    const str ConstantAt  = 'a';
    const str EmptyString = '';
    const str Space       = ' ';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00018, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCompanyCity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the city name of the bank, if it is present.
    /// </summary>
    /// <returns>
    ///    The address country name of the bank.
    /// </returns>
    private AddressCountyName displayCompanyCity()
    {
        BankAccountTable bankAccountTable = BankAccountTable::find(tmpBankPromissoryNotePrintout.AccountId);

        return LogisticsAddressCounty::find(bankAccountTable.postalAddress().CountryRegionId,
                    bankAccountTable.postalAddress().State,
                    bankAccountTable.postalAddress().County).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches and inserts the data into a temporary table.
    /// </summary>
    /// <returns>
    ///    The record of the record that was stored in the <c>SRSTmpDataStore</c> table.
    /// </returns>
    public RecId fetch()
    {
        while select tmpBankPromissoryNotePrintout
        {
            this.insertIntoTempTable();
        }

        //Storing the temp table data using SRSTmpTblMarshaller
        SrsReportRunPermission permission = new SrsReportRunPermission();
        permission.assert();
        RecId tmpTableDataRecId = this.storeTmpTable();
        CodeAccessPermission::revertAssert();

        delete_from bankPromissoryNoteTmp_ES;

        return tmpTableDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthName</Name>
				<Source><![CDATA[
    private str getMonthName(int  _numberOfMonth)
    {
        const container MonthNames = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
                                "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"];
        return conpeek(MonthNames, _numberOfMonth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes all the required objects.
    /// </summary>
    /// <param name="_promissoryNote">
    /// An instance of the <c>BankPromissoryNoteController_ES</c> class.
    /// </param>
    public void initialize(VendPromissoryNoteDocument _promissoryNote)
    {
        tmpBankPromissoryNotePrintout = _promissoryNote.tmpBankPromissoryNotePrintout();
        bankPromissoryNoteLayout = tmpBankPromissoryNotePrintout.bankPromissoryNoteLayout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into the temporary table.
    /// </summary>
    private void insertIntoTempTable()
    {
        bankPromissoryNoteTmp_ES.AccountNum         = tmpBankPromissoryNotePrintout.AccountNum;
        bankPromissoryNoteTmp_ES.AmountTxt          = tmpBankPromissoryNotePrintout.AmountTxt;
        bankPromissoryNoteTmp_ES.BankAddr           = tmpBankPromissoryNotePrintout.BankName ? BankAccountTable::find(tmpBankPromissoryNotePrintout.AccountId).postalAddress().Address :
                                                                                                Space;
        bankPromissoryNoteTmp_ES.BankName           = tmpBankPromissoryNotePrintout.BankName;
        bankPromissoryNoteTmp_ES.ConstantAt         = ConstantAt;
        bankPromissoryNoteTmp_ES.DisplayCompanyCity = this.displayCompanyCity();
        bankPromissoryNoteTmp_ES.AmountPlusCur      = tmpBankPromissoryNotePrintout.Numerals2Letter;
        bankPromissoryNoteTmp_ES.DayDueDate         = bankPromissoryNoteLayout.DueDate ? int2str(dayofmth(tmpBankPromissoryNotePrintout.DueDate)) :
                                                                                            EmptyString;
        bankPromissoryNoteTmp_ES.DayName            = this.numeralsToStr(dayofmth(tmpBankPromissoryNotePrintout.TransDate));
        bankPromissoryNoteTmp_ES.MthName            = this.getMonthName(mthofyr(tmpBankPromissoryNotePrintout.TransDate));
        bankPromissoryNoteTmp_ES.MthNameDue         = bankPromissoryNoteLayout.DueDate ? this.getMonthName(mthofyr(tmpBankPromissoryNotePrintout.DueDate)) :
                                                                                            EmptyString;
        bankPromissoryNoteTmp_ES.Year               = date2str(tmpBankPromissoryNotePrintout.TransDate, 123, 0, 0, 0, 0, 2, DateFlags::None);
        bankPromissoryNoteTmp_ES.YearDueDate        = bankPromissoryNoteLayout.DueDate ? int2str(year(tmpBankPromissoryNotePrintout.DueDate)) :
                                                                                            EmptyString;
        bankPromissoryNoteTmp_ES.NoteNum            = tmpBankPromissoryNotePrintout.NoteNum;
        bankPromissoryNoteTmp_ES.NoteTop            = tmpBankPromissoryNotePrintout.NoteTop;
        bankPromissoryNoteTmp_ES.NumOfSlips         = tmpBankPromissoryNotePrintout.NumOfSlips;
        bankPromissoryNoteTmp_ES.RecipientName      = tmpBankPromissoryNotePrintout.RecipientName;
        bankPromissoryNoteTmp_ES.ReportRuler        = tmpBankPromissoryNotePrintout.ReportRuler;
        bankPromissoryNoteTmp_ES.SlipTop1           = tmpBankPromissoryNotePrintout.SlipTop1;
        bankPromissoryNoteTmp_ES.SlipTop2           = tmpBankPromissoryNotePrintout.SlipTop2;
        bankPromissoryNoteTmp_ES.SlipTxt            = tmpBankPromissoryNotePrintout.SlipTxt;
        bankPromissoryNoteTmp_ES.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numeralsToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the name of the day in Spain of the specified day.
    /// </summary>
    /// <param name="_num">
    /// The number of the day of the month.
    /// </param>
    /// <returns>
    /// The name of the day in Spain.
    /// </returns>
    private TempStr numeralsToStr(real _num)
    {
        str   text;
        const str Text_1  = 'Uno';
        const str Text_21 = 'Ventiuno';
        const str Text_31 = 'Treinta y uno';

        switch (real2int(_num))
        {
            case 1:
                text = Text_1;
                break;
            case 21:
                text = Text_21;
                break;
            case 31:
                text = Text_31;
                break;
            default:
                text = strdel(numeralsToTxt_ES(_num, GenderMaleFemale::Male), 1, 3);
                text = strdel(text, strlen(text)-2, 3);
                text = substr(text, 1, 1) + strlwr(substr(text, 2, strlen(text)-1));
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method to change report contract before running report.
    /// </summary>
    protected void preRunModifyContract()
    {
        SRSTmpTblMarshallerContract contract = this.parmReportContract().parmRdpContract();
        this.initialize(this.parmArgs().caller());
        RecId recId = this.fetch();
        contract.parmTmpTableDataRecId(recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the temporary table by using the <c>SRSTmpTblMarshaller</c> class.
    /// </summary>
    /// <returns>
    /// The record ID of the data store table where the temporary table is stored.
    /// </returns>
    public RecId storeTmpTable()
    {
        return SRSTmpTblMarshaller::SendTmpTblToDataProvider(bankPromissoryNoteTmp_ES);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankPromissoryNoteController_ES controller = new BankPromissoryNoteController_ES();
        controller.parmReportName(ssrsReportStr(BankPromissoryNote_ES, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>