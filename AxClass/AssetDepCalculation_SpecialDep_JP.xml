<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepCalculation_SpecialDep_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to do depreciation calculation for a specified Japan depreciation method: Special depreciation.
/// </summary>
public class AssetDepCalculation_SpecialDep_JP extends AssetDepCalculation_JP
{
    AssetDepBookMap_JP  assetDepBookMap;
    AssetAmount         accumulatedReserveAmountMST;
    AssetAmount         recaptureAccumulatedReserveAmountMST;
    boolean             isInDirectOffMode;
    boolean             isInAllocationMode;
    boolean             isInReserveMode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowNegativeCatchUpDep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the negative depreciation is enabled in current calculation.
    /// </summary>
    /// <returns>
    /// Returns whether allow negative depreciation when catch up is enabled.
    /// </returns>
    /// <remarks>
    /// Special deprecition allows negative depreciation.
    /// </remarks>
    protected boolean allowNegativeCatchUpDep()
    {
        boolean ret;

        ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AssetAmount calc()
    {
        AssetAmount ret;

        if (!calcArgs.parmIsDepreciationDone())
        {
            ret = super();
        }
        else
        {
            ret = 0;
        }

        if (isInReserveMode && calcArgs.parmUseCatchUpMethod())
        {
            accumulatedReserveAmountMST += ret;
            recaptureAccumulatedReserveAmountMST += ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitDepForCurYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the allowable limit depreciation amount for current year.
    /// </summary>
    /// <returns>
    /// The final allowable limit depreciation amount for current year.
    /// </returns>
    protected AssetAmount calcAllowableLimitDepForCurYear()
    {
        AssetAmount         ret;
        AssetTableInterval  depInterval     = calcArgs.parmAssetTableInterval();
        AssetTransDate      allocationStartDate;
        AssetTransDate      depStartDateInCurYear   = this.calcDepStartDateInCurYear();
        AssetTransDate      endDateInCurYear;
        int                 numOfMonthHaveBeenDividedInPreYears;
        int                 numOfMonthWillBeDividedInYears;

        if (isInAllocationMode)
        {
            allocationStartDate     = calcArgs.parmSpecialDepAllocationStartDate();
            endDateInCurYear        = depInterval.findLastDayOfYear(depStartDateInCurYear);

            numOfMonthHaveBeenDividedInPreYears = depInterval.numOfPeriods(allocationStartDate, depInterval.findFirstDayOfYear(depStartDateInCurYear)-1);
            numOfMonthWillBeDividedInYears      = depInterval.numOfPeriods(depStartDateInCurYear, endDateInCurYear);
            if (numOfMonthWillBeDividedInYears + numOfMonthHaveBeenDividedInPreYears >= calcArgs.parmSpecialDepAllocationPeriods())
            {
                ret = this.calcFinalAmountToDepreciate();
            }
            else
            {
                ret = this.calcFinalAmountToDepreciate() * numOfMonthWillBeDividedInYears / (calcArgs.parmSpecialDepAllocationPeriods() - numOfMonthHaveBeenDividedInPreYears);
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitForAccumulatedDep</Name>
				<Source><![CDATA[
    protected AssetAmount calcAllowableLimitForAccumulatedDep()
    {
        AssetAmount ret;

        if (isInReserveMode)
        {
            ret = this.calcFinalAmountToDepreciate() * AssetSpecialDepHelper_JP::calcNumOfYearsToReserve(calcArgs);
        }
        else if (isInAllocationMode)
        {
            if (calcArgs.parmIsRecaptureDepreciation())
            {
                ret = recaptureAccumulatedReserveAmountMST;
            }
            else
            {
                ret = accumulatedReserveAmountMST;
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBaseAmountToDepreciate</Name>
				<Source><![CDATA[
    protected AssetAmount calcBaseAmountToDepreciate()
    {
        AssetAmount ret;

        if (isInAllocationMode)
        {
            ret = this.calcAllowableLimitForAccumulatedDep() - this.getBeginningBalanceOfAccumulatedDep(this.calcDepStartDateInCurYear());
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBeginningBalanceOfAccumulatedDep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the beginning balance of accumulated depreciation amount for specified date.
    /// </summary>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <returns>
    /// The beginning balance of accumulated depreciation amount for specified date.
    /// </returns>
    protected AssetAmount calcBeginningBalanceOfAccumulatedDep(AssetTransDate _date)
    {
        AssetAmount         ret;

        if (isInReserveMode)
        {
            ret = AssetSpecialDepHelper_JP::calcBeginningBalOfAccumuReserveDepAmtMst(assetDepBookMap, calcArgs.parmAssetTableInterval(), _date);
        }
        else if (isInAllocationMode)
        {
            ret = AssetSpecialDepHelper_JP::calcBeginningBalOfAccumuAllocDepAmtMst(assetDepBookMap, calcArgs.parmAssetTableInterval(), _date);
        }
        else
        {
            // Direct-off mode
            ret = AssetSpecialDepHelper_JP::calcBeginningBalOfAccumuDirOffDepAmtMst(assetDepBookMap, calcArgs.parmAssetTableInterval(), _date);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurYearDepRateAsFraction</Name>
				<Source><![CDATA[
    protected container calcCurYearDepRateAsFraction()
    {
        container           ret = [0, 1];
        AssetTableInterval  depInterval     = calcArgs.parmAssetTableInterval();
        AssetTransDate      depStartDateInCurYear   = this.calcDepStartDateInCurYear();
        AssetTransDate      startToDepreciationDate = calcArgs.parmStartToDepreciateDate();
        int                 numOfPassedPeriods;

        if (!isInAllocationMode)
        {
            if (depStartDateInCurYear-1 > startToDepreciationDate)
            {
                numOfPassedPeriods = depInterval.numOfPeriods(startToDepreciationDate, depStartDateInCurYear-1);
            }
            if (calcArgs.parmSpecialDepApplyNumOfPeriods() > numOfPassedPeriods)
            {
                ret = [1, 1];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFinalAmountToDepreciate</Name>
				<Source><![CDATA[
    protected AssetAmount calcFinalAmountToDepreciate()
    {
        AssetAmount ret;

        if (isInAllocationMode)
        {
            ret = super();
        }
        else
        {
            ret = super() * calcArgs.parmSpecialDepBaseRatio() * calcArgs.parmSpecialDepRate();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumOfDepreciablePeriodInCurYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of depreciable period in current year.
    /// </summary>
    /// <returns>
    /// The number of depreciable period in current year.
    /// </returns>
    protected int calcNumOfDepreciablePeriodInCurYear()
    {
        int                 ret;
        int                 numOfPassedPeriods;
        AssetTransDate      depStartDateInCurYear   = this.calcDepStartDateInCurYear();
        AssetTransDate      startToDepreciationDate = calcArgs.parmStartToDepreciateDate();
        AssetTableInterval  depInterval             = calcArgs.parmAssetTableInterval();
        AssetTransDate      periodStart             = calcArgs.parmPeriodstart();

        if (depStartDateInCurYear > depInterval.findLastDayOfYear(periodStart))
        {
            ret = 0;
        }
        else
        {
            // depreciable period starts from the first day of current year.
            if (calcArgs.parmAssetAccrualFiscal() == AssetAccrualFiscal::FiscalPeriod
                || calcArgs.parmAssetAccrualFiscal() == AssetAccrualFiscal::Quarterly)
            {
                ret = depInterval.numOfPeriodsLeftInYear(depStartDateInCurYear);
            }
            else
            {
                ret = 1;
            }

            if (depStartDateInCurYear-1 > startToDepreciationDate)
            {
                numOfPassedPeriods = depInterval.numOfPeriods(startToDepreciationDate, depStartDateInCurYear-1);
            }
            if (ret > this.calcNumOfDepreciablePeriodInTotal() - numOfPassedPeriods)
            {
                ret = this.calcNumOfDepreciablePeriodInTotal() - numOfPassedPeriods;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumOfDepreciablePeriodInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of depreciable period in total.
    /// </summary>
    /// <returns>
    /// The number of depreciable period in total.
    /// </returns>
    protected int calcNumOfDepreciablePeriodInTotal()
    {
        int ret;

        if (isInAllocationMode)
        {
            ret = calcArgs.parmSpecialDepAllocationPeriods();
        }
        else
        {
            ret = calcArgs.parmSpecialDepApplyNumOfPeriods();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciationMethod</Name>
				<Source><![CDATA[
    public AssetDepreciationMethod getAssetDepreciationMethod()
    {
        return AssetDepreciationMethod::SpecialDepreciation_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtraDepreciationAmount</Name>
				<Source><![CDATA[
    protected AssetAmount getExtraDepreciationAmount()
    {
        AssetAmount ret;

        if (isInDirectOffMode)
        {
            ret = super()
                + AssetDepTransMap_JP::calcAccumulatedExtraDepAmtMst(assetDepBookMap, dateNull(), dateMax())
                - AssetDepTransMap_JP::calcAccumulatedExtraDepAmtMst(assetDepBookMap, dateNull(), dateMax(), 0, true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        assetDepBookMap = AssetDepBookMap_JP::findByAssetIdBookId(calcArgs.parmAssetId(), calcArgs.parmAssetBookId());

        if (calcArgs.parmSpecialDepAccountingMethod() == AssetSpecialDepAccountingMethod_JP::Reserve)
        {
            if (calcArgs.parmUseCatchUpMethod())
            {
                accumulatedReserveAmountMST = AssetSpecialDepHelper_JP::calcAccumulatedReserveAmountMst(
                    assetDepBookMap,
                    dateNull(),
                    dateMax());
            }
            else
            {
                isInReserveMode = true;
                accumulatedReserveAmountMST = this.calcAllowableLimitForAccumulatedDep();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdditionalAssetTableIntervals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes additional <C>AssetTableInterval</C> used in <C>AssetDepCalculationManager_JP</C>
    /// </summary>
    /// <param name="_assetTableIntervals">
    /// <C>AssetTableInterval</C> map
    /// </param>
    public void initAdditionalAssetTableIntervals(Map _assetTableIntervals)
    {
        AssetTransDate          allocationStartDate;
        AssetTransDate          reserveEndDate;

        super(_assetTableIntervals);

        if (calcArgs.parmSpecialDepAccountingMethod() == AssetSpecialDepAccountingMethod_JP::Reserve)
        {
            [reserveEndDate, allocationStartDate] = AssetSpecialDepHelper_JP::calcAllocationStartDate(assetDepBookMap);
            _assetTableIntervals.insert(
                allocationStartDate,
                AssetSpecialDepHelper_JP::assetTableIntervalForAllocationWithDepBookMap(assetDepBookMap));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepDoneOnExceedAllowLimitForAccDep</Name>
				<Source><![CDATA[
    protected boolean isDepDoneOnExceedAllowLimitForAccDep()
    {
        boolean ret;

        ret = !isInReserveMode;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDepDoneOnExceedAmountToDepreciate</Name>
				<Source><![CDATA[
    protected boolean isDepDoneOnExceedAmountToDepreciate()
    {
        boolean ret;

        ret = !isInReserveMode;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunCalc</Name>
				<Source><![CDATA[
    public void preRunCalc()
    {
        AssetTransDate  allocationStartDate     = calcArgs.parmSpecialDepAllocationStartDate();
        AssetTransDate  depreciationStartDate   = calcArgs.parmDepreciationStartDate();
        AssetTransDate  periodStart             = calcArgs.parmPeriodStart();

        super();

        if (calcArgs.parmSpecialDepAccountingMethod() == AssetSpecialDepAccountingMethod_JP::DirectOff)
        {
            isInDirectOffMode = true;
            if (calcArgs.parmAssetTableInterval().numOfPeriods(depreciationStartDate, periodStart) > calcArgs.parmSpecialDepApplyNumOfPeriods())
            {
                calcArgs.parmIsDepreciationDone(true);
            }
        }

        if (calcArgs.parmSpecialDepAccountingMethod() == AssetSpecialDepAccountingMethod_JP::Reserve)
        {
            if (periodStart < allocationStartDate)
            {
                isInReserveMode = true;
                isInAllocationMode = false;
            }
            else
            {
                isInReserveMode = false;
                isInAllocationMode = true;
            }
        }

        // Allocation step
        if (isInAllocationMode)
        {
            if (periodStart == allocationStartDate)
            {
                // Clear reserve accumulated amount and update to reserve allocation accumulated amount
                this.updateBeginningBalanceOfAccumulatedDep(
                    periodStart,
                    -this.getBeginningBalanceOfAccumulatedDep(periodStart)+this.calcBeginningBalanceOfAccumulatedDep(periodStart));
            }

            calcArgs.parmAssetAccrualFiscal(calcArgs.parmSpecialDepAllocationUnit());
            calcArgs.parmStartToDepreciateDate(allocationStartDate);
            calcArgs.parmDepreciationStartDate(allocationStartDate);
            if (calcArgs.parmIsRecaptureDepreciation())
            {
                calcArgs.parmAmountToDepreciate(recaptureAccumulatedReserveAmountMST);
                calcArgs.parmAllowableLimitForAccumulatedDep(recaptureAccumulatedReserveAmountMST);
            }
            else
            {
                calcArgs.parmAmountToDepreciate(accumulatedReserveAmountMST);
                calcArgs.parmAllowableLimitForAccumulatedDep(accumulatedReserveAmountMST);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>