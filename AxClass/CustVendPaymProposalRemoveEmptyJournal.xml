<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalRemoveEmptyJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendPaymProposalRemoveEmptyJournal extends RunBaseBatch implements BatchRetryable
{
    private const int CurrentVersion = 1;

    private LedgerJournalId journalNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static ClassDescription description()
    {
        return "@CashManagement:CustVendPaymProposalRemoveEmptyJournalCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRemoveEmptyJournalTask</Name>
				<Source><![CDATA[
    internal static CustVendPaymProposalRemoveEmptyJournal createRemoveEmptyJournalTask(LedgerJournalId _journalNum)
    {
        CustVendPaymProposalRemoveEmptyJournal removeEmptyJournalJob = new CustVendPaymProposalRemoveEmptyJournal();
        removeEmptyJournalJob.journalNum = _journalNum;
        return removeEmptyJournalJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        int version = RunBase::getVersion(_packed);

        switch (version)
        {
            case CurrentVersion:
                [version, journalNum] = _packed;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, journalNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.journalIsEmpty())
        {
            ttsbegin;
            LedgerJournalTable journalToDelete = LedgerJournalTable::find(journalNum, true);
            if (journalToDelete.RecId == 0)
            {
                throw error(Error::missingRecord(tableStr(LedgerJournalTable)));
            }
            journalToDelete.delete();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalIsEmpty</Name>
				<Source><![CDATA[
    private boolean journalIsEmpty()
    {
        LedgerJournalTrans journalLine;
        select firstonly RecId from journalLine
            where journalLine.JournalNum == journalNum;
        return journalLine.RecId == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>