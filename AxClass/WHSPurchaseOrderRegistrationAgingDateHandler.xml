<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPurchaseOrderRegistrationAgingDateHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains logic to handle updating of aging dates for license plate and location during purchase order registration.
/// </summary>
final internal class WHSPurchaseOrderRegistrationAgingDateHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>handlePhysicalOnHandOnLocationChanging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the aging date of the license plate used in purchase order
    /// registration process when physical on hand is about to change.
    /// </summary>
    /// <param name="_context">
    /// The physical on hand change context.
    /// </param>
    /// <param name="_args">
    /// The information that describes the change of the physical on hand.
    /// </param>
    [SubscribesTo(classStr(InventUpdate), delegatestr(InventUpdate, physicalOnHandChanging))]
    public static void handlePhysicalOnHandOnLocationChanging(
        Object                          _context,
        InventPhysicalOnHandChangeArgs  _args)
    {
        if (WHSPurchaseOrderRegistrationAgingDateHandler::mustUpdateLicensePlateAgingDate(_context, _args))
        {
            WHSLicensePlate licensePlate = WHSLicensePlate::find(_args.parmInventDim().LicensePlateId, true);

            if (WHSPurchaseOrderRegistrationAgingDateHandler::canUpdateLicensePlateRecord(licensePlate))
            {
                licensePlate.AgingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                licensePlate.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateLicensePlateAgingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the license plate aging date must be updated.
    /// </summary>
    /// <param name="_context">The physical on hand change context.</param>
    /// <param name="_args">The information that describes the change of the physical on hand.</param>
    /// <returns>true if the license plate aging date must be updated; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean mustUpdateLicensePlateAgingDate(
        Object                          _context,
        InventPhysicalOnHandChangeArgs  _args)
    {
        InventUpd_Registered inventUpd = _context as InventUpd_Registered;

        if (inventUpd
            && inventUpd.movement() is InventMov_Purch
            && _args.parmDeltaQuantity() > 0
            && _args.parmInventTrans().StatusReceipt == StatusReceipt::Registered)
        {
            WHSLicensePlateId licensePlateId = _args.parmInventDim().LicensePlateId;

            if (licensePlateId
                && !WHSLicensePlate::getInventDimWithOnHand(licensePlateId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateLicensePlateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the license plate record can be updated.
    /// </summary>
    /// <param name = "_licensePlate">The <c>WHSLicensePlate</c> to be updated.</param>
    /// <returns>true if the license plate record can be updated; otherwise, false.</returns>
    [Wrappable(true)]
    internal static boolean canUpdateLicensePlateRecord(WHSLicensePlate _licensePlate)
    {
        return _licensePlate.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleRegistrationCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the aging date of the location used in purchase order
    /// registration process when the registration is completed
    /// </summary>
    /// <param name="_inventUpd">
    /// The object <c>InventUpd_Registered</c> signaling the completion of an inventory update.
    /// </param>
    [SubscribesTo(classStr(InventUpd_Registered), delegateStr(InventUpd_Registered, registrationCompleted))]
    public static void handleRegistrationCompleted(InventUpd_Registered _inventUpd)
    {
        InventDim inventDim = _inventUpd.parmRegInventDimCriteria();

        if (_inventUpd.movement() is InventMov_Purch
        &&  _inventUpd.parmRegistered() > 0
        &&  inventDim.wMSLocationId)
        {
            WHSLocationWorkUpdater::updateLocationInfoFromPickPutWork(inventDim.InventLocationId, inventDim.wMSLocationId, WHSWorkType::Put);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>