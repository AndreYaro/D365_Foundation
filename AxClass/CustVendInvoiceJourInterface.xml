<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendInvoiceJourInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// Base class providing an interface to common functionality applicable for tables mapped to the <c>CustVendInvoiceJour</c> map.
/// </summary>
[ExportInterfaceAttribute()]
public abstract class CustVendInvoiceJourInterface
{
    protected CustVendInvoiceJour custVendInvoiceJourMap;
    private CustVendInvoiceJourInterface origInstance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeCustVendInvoiceJour</Name>
				<Source><![CDATA[
    private void initializeCustVendInvoiceJour(CustVendInvoiceJour _custVendInvoiceJourMap)
    {
        custVendInvoiceJourMap = _custVendInvoiceJourMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local instance of the <c>CustVendInvoiceJour</c> map.
    /// </summary>
    /// <returns>The local instance of the <c>CustVendInvoiceJour</c> map.</returns>
    public final CustVendInvoiceJour parmCustVendInvoiceJour()
    {
        return custVendInvoiceJourMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CustVendInvoiceJourInterface</c> object based on the provided <c>CustVendInvoiceJour</c> table record.
    /// </summary>
    /// <param name = "_custVendInvoiceJour">A <c>CustVendInvoiceJour</c> table record from which to create a <c>CustVendInvoiceJourInterface</c> instance.</param>
    /// <returns>The instantiated <c>CustVendInvoiceJourInterface</c> object.</returns>
    public static CustVendInvoiceJourInterface createInstance(CustVendInvoiceJour _custVendInvoiceJour)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();

        metadataCollection.SetManagedValue(classStr(CustVendInvoiceJourInterface), tableId2Name(_custVendInvoiceJour.tableId));
        CustVendInvoiceJourInterface instance = SysPluginFactory::Instance(identifierStr(Dynamics.AX.Application), classStr(CustVendInvoiceJourInterface), metadataCollection);

        if (!instance)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        instance.initializeCustVendInvoiceJour(_custVendInvoiceJour);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CustVendInvoiceJourInterface</c> object based on the <c>CustVendInvoiceJour</c> orig-record.
    /// </summary>
    /// <returns>The instantiated <c>CustVendInvoiceJourInterface</c> object.</returns>
    public final CustVendInvoiceJourInterface origInstance()
    {
        if (!origInstance)
        {
            origInstance = CustVendInvoiceJourInterface::createInstance(this.parmCustVendInvoiceJour().orig());
        }

        return origInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CustVendInvoiceJour</c> map from a <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">A <c>LedgerJournalTrans</c> table record from which to initialize.</param>
    public void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        SysModule module = custVendInvoiceJourMap.module();
        boolean isCustOrVendModule = (module == SysModule::Cust || module == SysModule::Vend);

        // Early exit.
        if (!isCustOrVendModule 
            || (module == SysModule::Cust && _ledgerJournalTrans.AccountType != LedgerJournalACType::Cust)
            || (module == SysModule::Vend && _ledgerJournalTrans.AccountType != LedgerJournalACType::Vend))
        {
            return;
        }
        
        LedgerJournalTrans ledgerJournalTransInvoice = _ledgerJournalTrans.data();

        if (ledgerJournalTransInvoice.Prepayment == NoYes::Yes)
        {
            custVendInvoiceJourMap.Prepayment = NoYes::Yes;
            custVendInvoiceJourMap.Payment = '';
            custVendInvoiceJourMap.InvoiceNum = ledgerJournalTransInvoice.DocumentNum;

            if (ledgerJournalTransInvoice.AccountType == LedgerJournalACType::Cust)
            {
                ledgerJournalTransInvoice.AmountCurCredit = _ledgerJournalTrans.AmountCurDebit;
                ledgerJournalTransInvoice.AmountCurDebit = _ledgerJournalTrans.AmountCurCredit;
            }
        }
        else
        {
            custVendInvoiceJourMap.Payment = ledgerJournalTransInvoice.Payment;
            custVendInvoiceJourMap.InvoiceNum = ledgerJournalTransInvoice.Invoice;
        }

        custVendInvoiceJourMap.OrderAccount = ledgerJournalTransInvoice.parmAccount();
        custVendInvoiceJourMap.InvoiceAccount = ledgerJournalTransInvoice.parmAccount();
        custVendInvoiceJourMap.GroupId = custVendInvoiceJourMap.groupId();
        custVendInvoiceJourMap.InvoiceDate = ledgerJournalTransInvoice.TransDate;
        custVendInvoiceJourMap.DocumentNum = ledgerJournalTransInvoice.DocumentNum;
        custVendInvoiceJourMap.DocumentDate = ledgerJournalTransInvoice.DocumentDate;
        custVendInvoiceJourMap.CurrencyCode = ledgerJournalTransInvoice.CurrencyCode;
        custVendInvoiceJourMap.LedgerVoucher = ledgerJournalTransInvoice.Voucher;
        custVendInvoiceJourMap.DefaultDimension = ledgerJournalTransInvoice.DefaultDimension;
        custVendInvoiceJourMap.InvoiceAmount = ledgerJournalTransInvoice.amount();
        custVendInvoiceJourMap.ExchRate = ledgerJournalTransInvoice.CurrencyCode != '' ? _ledgerJournalTrans.ExchRate : 100;
        custVendInvoiceJourMap.ExchRateSecondary = ledgerJournalTransInvoice.ExchRateSecond;
        custVendInvoiceJourMap.Triangulation = ledgerJournalTransInvoice.Triangulation;
        custVendInvoiceJourMap.vatNum = ledgerJournalTransInvoice.vatNumJournal;
        LedgerJournalTransTaxExtension taxExtension = ledgerJournalTransInvoice.ledgerJournalTransTaxExtension();
        custVendInvoiceJourMap.PartyTaxId = taxExtension.VATNumRecId;
        custVendInvoiceJourMap.DueDate = ledgerJournalTransInvoice.Due;
        custVendInvoiceJourMap.CashDiscDate = ledgerJournalTransInvoice.DateCashDisc;
        custVendInvoiceJourMap.CashDisc = ledgerJournalTransInvoice.CashDiscAmount;
        custVendInvoiceJourMap.CashDiscCode = ledgerJournalTransInvoice.CashDiscCode;
        custVendInvoiceJourMap.TaxGroup = ledgerJournalTransInvoice.TaxGroup;

        if (ledgerJournalTransInvoice.Prepayment == NoYes::Yes)
        {
            if (ledgerJournalTransInvoice.TaxGroup != '')
            {
                custVendInvoiceJourMap.SumTax = abs(ledgerJournalTransInvoice.totalTaxAmountSingleLine(true, false, true));
            }
        }
        else
        {
            custVendInvoiceJourMap.SumTax = LedgerJournalTrans_Tax_Extension::calcTaxOnVoucher(ledgerJournalTransInvoice);
        }

        if ((custVendInvoiceJourMap.InvoiceAmount < 0 && custVendInvoiceJourMap.SumTax > 0) 
            || (custVendInvoiceJourMap.InvoiceAmount >= 0 && custVendInvoiceJourMap.SumTax < 0))
        {
            custVendInvoiceJourMap.SumTax = -custVendInvoiceJourMap.SumTax;
        }

        if (ledgerJournalTransInvoice.Prepayment == NoYes::Yes && ledgerJournalTransInvoice.ledgerJournalTable().LedgerJournalInclTax == NoYes::No)
        {
            custVendInvoiceJourMap.InvoiceAmount += custVendInvoiceJourMap.SumTax;
        }

        custVendInvoiceJourMap.SalesOrderbalance = custVendInvoiceJourMap.InvoiceAmount - custVendInvoiceJourMap.SumTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>