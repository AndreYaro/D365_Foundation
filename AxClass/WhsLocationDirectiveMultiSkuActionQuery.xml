<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveMultiSkuActionQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveMultiSkuActionQuery</c> class enables building and enumerating the query on the location directive line action.
/// </summary>
class WhsLocationDirectiveMultiSkuActionQuery
{
    WHSLocDirTable  locDirTable;
    WHSLocDirLine   locDirLine;
    WHSLocDirAction locDirAction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAllowSplit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSAllowSplit parmAllowSplit()
    {
        return locDirLine.AllowSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enumerator.
    /// </summary>
    /// <returns>An instance of the enumerator</returns>
    public WhsLocationDirectiveActionQueryEnumerator getEnumerator()
    {
        var queryRun = this.buildQueryRun();
        var enumerator = WhsLocationDirectiveActionQueryEnumerator::newFromQueryRun(queryRun);
        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryFromLocDirAction</Name>
				<Source><![CDATA[
    private Query getQueryFromLocDirAction()
    {
        QueryRun queryRun = new QueryRun(locDirAction.LocDirQuery);
        return queryRun.query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query run with the given conditions.
    /// </summary>
    /// <returns>An instance of query run.</returns>
    [Hookable]
    protected QueryRun buildQueryRun()
    {
        Query query = this.getQueryFromLocDirAction();

        if (locDirTable.WorkType == WHSWorkType::Put)
        {
            this.modifyPutLocDirMultiSkuActionQuery(query);
        }

        switch (locDirTable.WarehouseGroupAll)
        {
            case WhsWarehouseGroupAll::Group:
            case WhsWarehouseGroupAll::All:
                this.addWarehouseRange(query);
                break;
        }
        
        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWarehouseRange</Name>
				<Source><![CDATA[
    private void addWarehouseRange(Query _query)
    {
        var qdbs = _query.dataSourceTable(tableNum(WMSLocation));
        if (qdbs)
        {
            SysQuery::findOrCreateRange(qdbs, fieldNum(WMSLocation, InventLocationId)).value(locDirTable.InventLocationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WhsLocationDirectiveMultiSkuActionQuery construct()
    {
        return new WhsLocationDirectiveMultiSkuActionQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>WhsLocationDirectiveMultiSkuActionQuery</c> class.
    /// </summary>
    /// <param name = "_locDirTable">The location directive table record.</param>
    /// <param name = "_locDirLine">The location directive line record.</param>
    /// <param name = "_locDirAction">The location action record with the query.</param>
    /// <returns>A new instance.</returns>
    public static WhsLocationDirectiveMultiSkuActionQuery newFromParameters(
        WHSLocDirTable                   _locDirTable,
        WHSLocDirLine                    _locDirLine,
        WHSLocDirAction                  _locDirAction
        )
    {
        WhsLocationDirectiveMultiSkuActionQuery actionQuery = WhsLocationDirectiveMultiSkuActionQuery::construct();
        
        actionQuery.locDirTable = _locDirTable;
        actionQuery.locDirLine = _locDirLine;
        actionQuery.locDirAction = _locDirAction;

        return actionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPutLocDirMultiSkuActionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query for Put WorkType <c>WHSLocDirAction</c> records based on configuration.
    /// </summary>
    /// <param name="_query">
    /// The current query for the <c>WHSLocDirAction</c>.
    /// </param>
    protected void modifyPutLocDirMultiSkuActionQuery(Query _query)
    {
        var strategy = WhsLocationDirectiveStrategy::singletonFromStrategy(locDirAction.LocDirStrategy);
        if (strategy)
        {
            strategy.modifyPutLocDirMultiSkuActionQuery(this, _query);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>