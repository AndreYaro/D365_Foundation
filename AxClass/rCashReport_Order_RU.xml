<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashReport_Order_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rCashReport_Order_RU extends RunBaseBatch implements BatchRetryable
{
    RCashTrans cashTrans;

    QueryRun queryRun;

    boolean printRCashName;

    DialogField dfPrintRCashName;

    protected const Version CurrentVersion_Order_RU = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean forceOnClient = false)
    {
        DialogRunbase dialog = super();

        dfPrintRCashName = dialog.addFieldValue(extendedTypeStr(NoYesId), printRCashName, "@GLS116099", "@GLS116100");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the values from the dialog box fields and performs the validation.
    /// </summary>
    /// <returns>
    ///    true, if the values are valid; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        printRCashName = dfPrintRCashName.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(RCashTrans));
        qbds.addRange(fieldNum(RCashTrans, AccountNum));
        qbds.addRange(fieldNum(RCashTrans, TransDate));
        qbds.addRange(fieldNum(RCashTrans, DocType));
        qbds.addRange(fieldNum(RCashTrans, DocId));

        queryRun = new QueryRun(query);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion_Order_RU, printRCashName, queryRun.pack(), super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashTrans</Name>
				<Source><![CDATA[
    public RCashTrans parmCashTrans(RCashTrans _cashTrans = cashTrans)
    {
        cashTrans = _cashTrans;

        return cashTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs selected cash orders to excel
    /// </summary>
    /// <param name="_args">
    /// Args object holding data with selection parameters
    /// </param>
    protected void runClass(Args _args)
    {
        if (_args)
        {
            switch (_args.dataset())
            {
                case tableNum(RCashTrans):
                    this.parmCashTrans(_args.record());
                    break;
                case tableNum(LedgerJournalTrans):
                    LedgerJournalTrans ledgerJournalTrans = _args.record();
                    LedgerJournalTrans_RCash ledgerJournalTrans_RCash;
                    RCashTrans tmpTrans;

                    select firstonly tmpTrans
                        where tmpTrans.Voucher == ledgerJournalTrans.Voucher &&
                            tmpTrans.TransDate == ledgerJournalTrans.TransDate
                    exists join ledgerJournalTrans_RCash
                        where ledgerJournalTrans_RCash.RefRecId == ledgerJournalTrans.RecId &&
                            tmpTrans.DocType == ledgerJournalTrans_RCash.DocType &&
                            tmpTrans.DocId == ledgerJournalTrans_RCash.CashDocId;

                    this.parmCashTrans(tmpTrans);
                    break;
            }
        }

        if (this.parmCashTrans())
        {
            this.getLast();
            this.updateQueryBuild();
        }

        if (this.prompt())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00039, funcName());

            XMLExcelReport_CashOrder_RU excelReport = XMLExcelReport_CashOrder_RU::construct();

            excelReport.parmQueryRun(queryRun);
            excelReport.parmPrintRCashName(printRCashName);

            excelReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret = true;
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case CurrentVersion_Order_RU:
                container conSuper, conQueryRun;
                [version, printRCashName, conQueryRun, conSuper] = packedClass;
                queryRun = new QueryRun(conQueryRun);
                super(conSuper);
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    protected void updateQueryBuild()
    {
        if (cashTrans)
        {
            QueryBuildDataSource qbds = this.queryRun().query().dataSourceTable(tableNum(RCashTrans));

            findOrCreateRange_W(qbds, fieldNum(RCashTrans, AccountNum), cashTrans.AccountNum);
            findOrCreateRange_W(qbds, fieldNum(RCashTrans, DocType), enum2Value(cashTrans.DocType));
            findOrCreateRange_W(qbds, fieldNum(RCashTrans, DocId), cashTrans.DocId);
            findOrCreateRange_W(qbds, fieldNum(RCashTrans, TransDate), queryValue(cashTrans.TransDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS104490";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        new rCashReport_Order_RU().runClass(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>