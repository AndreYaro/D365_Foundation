<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchLinePriceDiscCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class holds the price and discount calculations for the order lines mapped to the <c>SalesPurchLine</c> map.
/// </summary>
abstract class SalesPurchLinePriceDiscCalculation
{
    SalesPurchLineInterface salesPurchLineInterface;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesPurchLinePriceDiscCalculation</c> class.
    /// </summary>
    /// <param name = "_salesPurchLinePriceDiscCalculationType">A <c>SalesPurchLinePriceDiscCalculationType</c> value.</param>
    /// <param name = "_salesPurchLineInterface">An instance of the <c>SalesPurchLineInterface</c> class.</param>
    /// <returns>An instance of the <c>SalesPurchLinePriceDiscCalculation</c> class.</returns>
    public static SalesPurchLinePriceDiscCalculation construct(SalesPurchLinePriceDiscCalculationType _salesPurchLinePriceDiscCalculationType, SalesPurchLineInterface _salesPurchLineInterface)
    {
        SalesPurchLinePriceDiscCalculationFactoryAttribute attr = new SalesPurchLinePriceDiscCalculationFactoryAttribute(_salesPurchLinePriceDiscCalculationType);
        SalesPurchLinePriceDiscCalculation instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(SalesPurchLinePriceDiscCalculation), attr) as SalesPurchLinePriceDiscCalculation;

        if (!instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance.salesPurchLineInterface = _salesPurchLineInterface;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGrossAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the gross amount.
    /// </summary>
    /// <param name = "_qty">A <c>Qty</c> value.</param>
    /// <returns>An <c>AmountCur</c> value.</returns>
    public AmountCur calcGrossAmount(Qty _qty = salesPurchLineInterface.parmQty())
    {
        AmountCur grossAmount=0;

        if (_qty)
        {
            grossAmount = PriceDisc::price2Amount(salesPurchLineInterface.pdsPrice(),
                                                    salesPurchLineInterface.parmPriceUnit(),
                                                    0.0,
                                                    _qty,  // sales deliver now
                                                    salesPurchLineInterface.parmQty(),  // sales qty
                                                    salesPurchLineInterface.parmMarkup(),
                                                    0.0,
                                                    salesPurchLineInterface.parmCurrencyCode(),
                                                    salesPurchLineInterface.parmLineAmount());
        }

        return grossAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PLgetTargetDataAreaIdForPriceCalculation</Name>
				<Source><![CDATA[
    private DataAreaId PLgetTargetDataAreaIdForPriceCalculation()
    {
        DataAreaId targetDataAreaIdToSwitchTo = curExt();

        if (salesPurchLineInterface.hasOrderId())
        {
            if (salesPurchLineInterface.salesPurchTable().TableId == tableNum(SalesTable))
            {
                // This is a SO
                SalesTable salesTable = SalesTable::find(salesPurchLineInterface.parmOrderId());

                if (salesTable.InterCompanyOrder == NoYes::Yes)
                {
                    targetDataAreaIdToSwitchTo = IntercompanyDiscCalculationHelper_PL::getIntercompanySalesOrderRootDataAreaId(salesTable);
                }
            }
            else
            {
                // This is a PO
                PurchTable purchTable = PurchTable::find(salesPurchLineInterface.parmOrderId());
                if (purchTable.InterCompanyOrder == NoYes::Yes)
                {
                    targetDataAreaIdToSwitchTo = IntercompanyDiscCalculationHelper_PL::getIntercompanyPurchaseOrderRootDataAreaId(purchTable);
                }
            }
        }

        return targetDataAreaIdToSwitchTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the price to line amount.
    /// </summary>
    /// <param name = "_qty">A <c>Qty</c> value.</param>
    /// <param name = "_forceLineAmountCalculation">A boolean value determining whether to force the line amount calculations.</param>
    /// <returns>An <c>AmountCur</c> value.</returns>
    public AmountCur calcPrice2LineAmount(Qty _qty, boolean _forceLineAmountCalculation)
    {
        AmountCur lineAmount;

        if (_qty)
        {
            if (salesPurchLineInterface.parmQty()
                && this.hasDiscWithTaxPerUnitAndGrossAmountCombination(salesPurchLineInterface.parmTaxGroup(), salesPurchLineInterface.parmTaxItemGroup()))
            {
                lineAmount = this.calcPrice2LineAmountWithTaxPerUnitAndGross(_qty, _forceLineAmountCalculation);
            }
            else
            {
                if (PriceDisc::isIntercompanyPLFlightEnabled())
                {
                    DataAreaId targetDataAreaIdToSwitchTo = this.PLgetTargetDataAreaIdForPriceCalculation();

                    lineAmount = IntercompanyDiscCalculationHelper_PL::calculateLineAmountForPolIntercompanyOrder(salesPurchLineInterface.pdsPrice(),
                                                        salesPurchLineInterface.parmPriceUnit(),
                                                        salesPurchLineInterface.parmDiscAmount(),
                                                        _qty,
                                                        salesPurchLineInterface.parmQty(),
                                                        salesPurchLineInterface.parmMarkup(),
                                                        salesPurchLineInterface.parmDiscPercent(),
                                                        salesPurchLineInterface.parmCurrencyCode(),
                                                        salesPurchLineInterface.parmLineAmount(),
                                                        _forceLineAmountCalculation,
                                                        targetDataAreaIdToSwitchTo);
                }
                else 
                {
                    lineAmount = PriceDisc::price2Amount(salesPurchLineInterface.pdsPrice(),
                                                        salesPurchLineInterface.parmPriceUnit(),
                                                        salesPurchLineInterface.parmDiscAmount(),
                                                        _qty,
                                                        salesPurchLineInterface.parmQty(),
                                                        salesPurchLineInterface.parmMarkup(),
                                                        salesPurchLineInterface.parmDiscPercent(),
                                                        salesPurchLineInterface.parmCurrencyCode(),
                                                        salesPurchLineInterface.parmLineAmount(),
                                                        _forceLineAmountCalculation);
                }
                
            }
        }
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPcsPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tax price for a piece.
    /// </summary>
    /// <param name = "_transDate">A <c>TransDate</c> value for which to calculate the price.</param>
    /// <param name = "_tax">A <c>Tax</c> object.</param>
    /// <returns>A <c>PriceCur</c> value.</returns>
    public PriceCur taxPcsPrice(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Tax _tax = null)
    {
        PriceCur pcsPrice = PriceDisc::price2Amount(salesPurchLineInterface.pdsPrice(),
                                                    salesPurchLineInterface.parmPriceUnit(),
                                                    salesPurchLineInterface.parmDiscAmount(),
                                                    1,               // deliver now
                                                    salesPurchLineInterface.parmQty(),  // sales qty
                                                    0,
                                                    salesPurchLineInterface.parmDiscPercent(),
                                                    salesPurchLineInterface.parmCurrencyCode(),
                                                    salesPurchLineInterface.parmLineAmount());

        if (salesPurchLineInterface.parmQty()
            && salesPurchLineInterface.inclTax())
        {
            TaxBase baseAmountExclTax;

            if (this.hasDiscWithTaxPerUnitAndGrossAmountCombination(salesPurchLineInterface.parmTaxGroup(), salesPurchLineInterface.parmTaxItemGroup()))
            {
                // here the price2Amount will only process the discount percentage but not considering the tax included.
                // so we need to deduct the tax amount from total amount firstly, then calculate the discounted line base amount.
                baseAmountExclTax = Tax::baseAmountExclTax(salesPurchLineInterface.parmTaxGroup(),
                                                            salesPurchLineInterface.parmTaxItemGroup(),
                                                            _transDate,
                                                            salesPurchLineInterface.parmCurrencyCode(),
                                                            salesPurchLineInterface.pdsPrice() * salesPurchLineInterface.parmQty(),
                                                            salesPurchLineInterface.salesPurchTable().salesPurchTableInterface().parmTaxModuleType(),
                                                            salesPurchLineInterface.parmQty(),
                                                            salesPurchLineInterface.parmUnitId(),
                                                            salesPurchLineInterface.parmItemId(),
                                                            TaxDirection::OutgoingTax,
                                                            0,//here we don`t provide the discount percentage since this is for header
                                                            true);

                pcsPrice = PriceDisc::price2Amount(baseAmountExclTax/salesPurchLineInterface.parmQty(),
                                                    salesPurchLineInterface.parmPriceUnit(),
                                                    salesPurchLineInterface.parmDiscAmount(),
                                                    1,// deliver now
                                                    salesPurchLineInterface.parmQty(),// sales qty
                                                    0,
                                                    salesPurchLineInterface.parmDiscPercent(),
                                                    salesPurchLineInterface.parmCurrencyCode(),
                                                    salesPurchLineInterface.parmLineAmount());
            }
            else
            {
                pcsPrice = salesPurchLineInterface.amountExclTax(pcsPrice, 1, _transDate, _tax);
            }
        }

        return pcsPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmount2Price</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount to price for the given amount.
    /// </summary>
    /// <param name = "_amount">An <c>AmountCur</c> value.</param>
    /// <returns>An <c>AmountCur</c> value.</returns>
    public AmountCur calcAmount2Price(
        boolean   _set = false,
        AmountCur _amount = 0)
    {
        return PriceDisc::amount2Price(_amount,
                        0,
                        salesPurchLineInterface.parmMarkup(),
                        salesPurchLineInterface.parmQty(),
                        0,
                        salesPurchLineInterface.parmPriceUnit(),
                        salesPurchLineInterface.parmCurrencyCode(),
                        salesPurchLineInterface.parmPrice());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDiscWithTaxPerUnitAndGrossAmountCombination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether discount with combination of tax per unit and gross amount exists.
    /// </summary>
    /// <param name = "_taxGroup">tax group</param>
    /// <param name = "_taxItemGroup">item tax group</param>
    /// <returns>A boolean whether the combination exists</returns>
    private boolean hasDiscWithTaxPerUnitAndGrossAmountCombination(TaxGroup _taxGroup, TaxItemGroup _taxItemGroup)
    {
        // in case some instance would not init from sales order or sales quotation.
        if (!(salesPurchLineInterface is SalesLineSalesPurchLine
                || salesPurchLineInterface is SalesQuotationLineSalesPurchLine))
        {
            return false;
        }

        // The condition should be: flighting enabled and tax included and has at least one kind of line discount(per/amount)
        if (!(salesPurchLineInterface.inclTax()
                && salesPurchLineInterface.pdsPrice() != 0 // Here we only handle line amount not 0, for line amount = 0 and with discount amount, this is not a validate scenario
                && (salesPurchLineInterface.parmDiscPercent() || salesPurchLineInterface.parmDiscAmount())))
        {
            return false;
        }

        TaxGroup taxGroup = salesPurchLineInterface.parmTaxGroup();
        TaxItemGroup taxItemGroup = salesPurchLineInterface.parmTaxItemGroup();
        container cachedResult = TaxCache::getValue(TaxCacheScope::TaxPerUnitAndGrossDisc, [curext(), taxGroup, taxItemGroup]);

        if (cachedResult == conNull())
        {
            boolean hasTaxPerUnit;
            boolean hasPctPerGross;
            TaxGroupData taxGroupData;
            TaxOnItem taxOnItem;
            TaxTable taxTable;

            while select TaxCode from taxGroupData
            where taxGroupData.TaxGroup == taxGroup
            join TaxItemGroup, TaxCode from taxOnItem
                where taxOnItem.TaxItemGroup == taxItemGroup
                    && taxOnItem.TaxCode == taxGroupData.TaxCode
            {
                select firstOnly TaxBase, TaxAllowLineDiscountOnTaxPerUnit
                    from taxTable
                    where taxTable.TaxCode == taxGroupData.TaxCode;

                if (taxTable.TaxBase == TaxBaseType::AmountByUnit)
                {
                    hasTaxPerUnit = true;
                }

                if (taxTable.TaxBase == TaxBaseType::PctPerGross && !taxTable.TaxAllowLineDiscountOnTaxPerUnit)
                {
                    hasPctPerGross = true;
                }
            }

            cachedResult = [hasTaxPerUnit && hasPctPerGross];

            TaxCache::insertValue(
                TaxCacheScope::TaxPerUnitAndGrossDisc,
                [curext(), taxGroup, taxItemGroup],
                cachedResult);
        }

        return conPeek(cachedResult, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPrice2LineAmountWithTaxPerUnitAndGross</Name>
				<Source><![CDATA[
    private AmountCur calcPrice2LineAmountWithTaxPerUnitAndGross(Qty _qty, boolean _forceLineAmountCalculation)
    {
        AmountCur lineAmount;
        TaxScenarioUtil tax;
        TaxCalculationInterimResult taxCalculationInterimResult;
        DiscPct pct;

        tax = new TaxScenarioUtil();
        // here the price2Amount will only process the discount percentage but not considering the tax included.
        // so we need to deduct the tax amount from total amount firstly, then calculate the discounted line base amount.
        taxCalculationInterimResult = tax.baseAmountExclTax(salesPurchLineInterface.parmTaxGroup(),
                                                                    salesPurchLineInterface.parmTaxItemGroup(),
                                                                    systemDateGet(),// since no date is not passing, we use current date for tmp.
                                                                    salesPurchLineInterface.parmCurrencyCode(),
                                                                    salesPurchLineInterface.pdsPrice()*salesPurchLineInterface.parmQty(),
                                                                    salesPurchLineInterface.salesPurchTable().salesPurchTableInterface().parmTaxModuleType(),
                                                                    salesPurchLineInterface.parmQty(),
                                                                    salesPurchLineInterface.parmUnitId(),
                                                                    salesPurchLineInterface.parmItemId(),
                                                                    TaxDirection::OutgoingTax,
                                                                    0,// here we don`t provide the discount percentage since this is for header.
                                                                    true);

        if (salesPurchLineInterface.parmQty() == 0)
        {
            lineAmount = PriceDisc::price2Amount(taxCalculationInterimResult.getBaseAmountExclTax(),
                                                    salesPurchLineInterface.parmPriceUnit(),
                                                    salesPurchLineInterface.parmDiscAmount(),
                                                    _qty,// deliver now
                                                    salesPurchLineInterface.parmQty(),
                                                    salesPurchLineInterface.parmMarkup(),
                                                    salesPurchLineInterface.parmDiscPercent(),
                                                    salesPurchLineInterface.parmCurrencyCode(),
                                                    salesPurchLineInterface.parmLineAmount(),
                                                    _forceLineAmountCalculation);
        }
        else
        {
            lineAmount = PriceDisc::price2Amount(taxCalculationInterimResult.getBaseAmountExclTax()/salesPurchLineInterface.parmQty(),
                                                    salesPurchLineInterface.parmPriceUnit(),
                                                    salesPurchLineInterface.parmDiscAmount(),
                                                    _qty,// deliver now
                                                    salesPurchLineInterface.parmQty(),
                                                    salesPurchLineInterface.parmMarkup(),
                                                    salesPurchLineInterface.parmDiscPercent(),
                                                    salesPurchLineInterface.parmCurrencyCode(),
                                                    salesPurchLineInterface.parmLineAmount(),
                                                    _forceLineAmountCalculation);
        }

        if (salesPurchLineInterface.parmDiscPercent())
        {
            pct = salesPurchLineInterface.parmDiscPercent();
        }
        else if (salesPurchLineInterface.parmDiscAmount())
        {
            if (taxCalculationInterimResult.getBaseAmountExclTax() == 0)
            {
                pct = 100;
            }
            else
            {
                pct = (1 - lineAmount / taxCalculationInterimResult.getBaseAmountExclTax()) * 100;
            }
        }

        if (salesPurchLineInterface.parmQty() != 0)
        {
            real qtyPct = _qty / salesPurchLineInterface.parmQty();
            lineAmount += Currency::find(salesPurchLineInterface.parmCurrencyCode()).amount_Instance(
                (taxCalculationInterimResult.getTaxTotalWithDiscount(pct) + taxCalculationInterimResult.getTaxAmountByUnit()) * qtyPct);
        }
        else
        {
            lineAmount += Currency::find(salesPurchLineInterface.parmCurrencyCode()).amount_Instance(
                taxCalculationInterimResult.getTaxTotalWithDiscount(pct) + taxCalculationInterimResult.getTaxAmountByUnit());
        }

        return lineAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>