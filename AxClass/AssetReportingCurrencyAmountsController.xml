<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetReportingCurrencyAmountsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetReportingCurrencyAmountsController</c> class is a controller class used to populate reporting currency amounts to <c>AssetTrans</c> table.
/// </summary>
public class AssetReportingCurrencyAmountsController extends SysOperationServiceController implements BatchRetryable
{
    NoYes  isUpdatedAllReportingAmounts;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super(classStr(AssetReportingCurrencyAmountsService), 
            methodStr(AssetReportingCurrencyAmountsService, updateReportingCurrencyAmounts),
            SysOperationExecutionMode::ScheduledBatch);                     
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@FixedAssets:FA_Wizard_Title_AddReportingCurrencyAmountsToFixedAssetBooks";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportingCurrencyAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of class <c>AssetReportingCurrencyAmountsController</c> and process the main business logic to update the 
    /// reporting currency amounts for the table <c>AssetsTrans</c>.
    /// </summary>
    /// <param name = "_isUpdatedAllReportingAmounts">
    /// Value to set in parm method.
    /// </param>
    public static void updateReportingCurrencyAmounts(NoYes _isUpdatedAllReportingAmounts)
    {       
        AssetReportingCurrencyAmountsController reportingCurrencyAmountsController = new AssetReportingCurrencyAmountsController();
        
        reportingCurrencyAmountsController.parmIsUpdatedAllReportingAmounts(_isUpdatedAllReportingAmounts);
        reportingCurrencyAmountsController.parmShowDialog(false);   
        reportingCurrencyAmountsController.parmLoadFromSysLastValue(false);
        reportingCurrencyAmountsController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {   
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsUpdatedAllReportingAmounts</Name>
				<Source><![CDATA[
    public NoYes parmIsUpdatedAllReportingAmounts(NoYes _isUpdatedAllReportingAmounts = isUpdatedAllReportingAmounts)
    {
        isUpdatedAllReportingAmounts = _isUpdatedAllReportingAmounts;

        return isUpdatedAllReportingAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeServiceParameter</Name>
				<Source><![CDATA[
    protected Object initializeServiceParameter(DictMethod dictMethod, int parameterIndex)
    {
        Object ret;
        AssetReportingCurrencyAmountsContract contract;

        ret = super(dictMethod, parameterIndex);

        if (ret && ret is AssetReportingCurrencyAmountsContract)
        {
            contract = ret as AssetReportingCurrencyAmountsContract;
            contract.parmIsUpdatedAllReportingAmounts(isUpdatedAllReportingAmounts);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>