<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductEntityIdentifierCreatorGTIN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The product entity GTIN identifier creator class.
/// </summary>
[EcoResProductEntityIdentifierCreatorAttribute(EcoResProductEntityIdentifierCodeType::GTIN)]
public class EcoResProductEntityIdentifierCreatorGTIN extends EcoResProductEntityIdentifierCreator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createIdentifiers</Name>
				<Source><![CDATA[
    public void createIdentifiers()
    {
        Query query = new Query();
        query.allowCrossCompany(true);

        QueryBuildDataSource qbdsInventItemGTIN = query.addDataSource(tableNum(InventItemGTIN));
        
        QueryBuildDataSource qbdsInventTableModule = qbdsInventItemGTIN.addDataSource(tableNum(InventTableModule));
        qbdsInventTableModule.joinMode(JoinMode::ExistsJoin);
        qbdsInventTableModule.addLink(fieldNum(InventItemGTIN, ItemId), fieldNum(InventTableModule, ItemId));
        qbdsInventTableModule.addLink(fieldNum(InventItemGTIN, UnitId), fieldNum(InventTableModule, UnitId));
        qbdsInventTableModule.addRange(fieldNum(InventTableModule, ModuleType)).value(queryValue(ModuleInventPurchSales::Sales));

        QueryBuildDataSource qbdsInventDistinctProduct = qbdsInventItemGTIN.addDataSource(tableNum(InventDistinctProduct));
        qbdsInventDistinctProduct.joinMode(JoinMode::ExistsJoin);
        qbdsInventDistinctProduct.addLink(fieldNum(InventItemGTIN, ItemId), fieldNum(InventDistinctProduct, ItemId));
        qbdsInventDistinctProduct.addRange(fieldNum(InventDistinctProduct, Product)).value(queryValue(product.RecId));

        QueryBuildDataSource qbdsInventDim = qbdsInventDistinctProduct.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        qbdsInventDim.addLink(fieldNum(InventItemGTIN, InventDimId), fieldNum(InventDim, InventDimId), qbdsInventItemGTIN.name());
        InventDistinctProduct::queryAddProductDimLinks(qbdsInventDistinctProduct, qbdsInventDim, true);

        Map gtinToLegalEntityMap = new Map(Types::String, Types::String);
        Map gtinToSalesUnitIdMap = new Map(Types::String, Types::String);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            InventItemGTIN inventItemGTIN = queryRun.get(tableNum(InventItemGTIN));
            this.updateMap(inventItemGTIN.GlobalTradeItemNumber, inventItemGTIN.DataAreaId, gtinToLegalEntityMap);
            this.updateMap(inventItemGTIN.GlobalTradeItemNumber, inventItemGTIN.UnitId, gtinToSalesUnitIdMap);
        }

        this.createIdentifiersFromData(gtinToLegalEntityMap, gtinToSalesUnitIdMap);    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>