<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountNumRenameDataMaintenanceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAccountNumRenameDataMaintenanceController</c> class is the controller for the
/// customer account rename data maintenance operation.
/// </summary>
internal final class CustAccountNumRenameDataMaintenanceController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs Customer account rename data maintenance.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> instance with the <c>CustAccountNumRenameDataMaintenance</c> record to be processed.
    /// </param>
    public static void main(Args _args)
    {
        if (!_args || _args.dataset() != tableNum(CustAccountNumRenameDataMaintenance) || !_args.record() || !_args.record().RecId)
        {
            throw error("@SYS22996");
        }

        CustAccountNumRenameDataMaintenanceRecId custAccountNumRenameDataMaintenanceRecId = _args.record().RecId;
        CustAccountNumRenameDataMaintenance custAccountNumRenameDataMaintenance = _args.record() as CustAccountNumRenameDataMaintenance;

        CustAccountNumRenameDataMaintenanceController controller = new CustAccountNumRenameDataMaintenanceController(
                                                                    classStr(CustAccountNumRenameDataMaintenanceController),
                                                                    methodStr(CustAccountNumRenameDataMaintenanceController, processDataMaintenanceRequest),
                                                                    SysOperationExecutionMode::Synchronous);

        controller.parmDialogCaption("@CreditCollections:CustAccountNumRenameDataMaintenance");
        controller.setDataMaintenanceRequest(custAccountNumRenameDataMaintenance.OldAccountNum, custAccountNumRenameDataMaintenance.NewAccountNum, custAccountNumRenameDataMaintenanceRecId);

        if (controller.startOperation() == SysOperationStartResult::AddedToBatchQueue)
        {
            CustAccountNumRenameDataMaintenance::setProcessGroupStatus(custAccountNumRenameDataMaintenanceRecId, CustAccountNumRenameDataMaintenanceStatus::Waiting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    protected void dialogPostRun()
    {
        SysOperationDialog sysOperationDialog;

        super();

        sysOperationDialog = this.dialog() as SysOperationDialog;

        // Select the batch tab by default.
        sysOperationDialog.batchDialogTabPage().control().setFocus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDataMaintenanceRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a customer account rename data maintenance request.
    /// </summary>
    /// <param name = "_request">
    /// The instance of the <c>CustAccountNumRenameDataMaintenanceRequestContract</c> class to process.
    /// </param>
    protected void processDataMaintenanceRequest(CustAccountNumRenameDataMaintenanceRequestContract _request)
    {
        CustAccountNumRenameDataMaintenanceService::processDataMaintenanceRequest(_request);
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectAndProcessDataMaintenanceRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detect out of sync record and process them.
    /// </summary>
    /// <param name = "_request">
    /// The instance of the <c>CustAccountNumRenameDataMaintenanceRequestContract</c> class to process.
    /// </param>
    protected void detectAndProcessDataMaintenanceRequest(CustAccountNumRenameDataMaintenanceRequestContract _request)
    {
        CustAccountNumRenameDataMaintenanceRecId custAccountNumRenameDataMaintenanceRecId = _request.parmCustAccountNumRenameDataMaintenanceRecId();

        CustAccountNumRenameDataMaintenance::setProcessGroupStatus(custAccountNumRenameDataMaintenanceRecId, CustAccountNumRenameDataMaintenanceStatus::NotStarted);

        CustAccountNumRenameDataMaintenanceService::detectOutOfSyncCustAccountNumObjectReferences(_request.parmOldCustAccount(), custAccountNumRenameDataMaintenanceRecId);

        if (FeatureStateProvider::isFeatureEnabled(CustAccountNumRenameDataMaintenanceFeature::instance()))
        {
            this.processDataMaintenanceRequest(_request);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataMaintenanceRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>CustAccountNumRenameDataMaintenanceRequestContract</c> details for the specified
    /// <c>CustAccountNumRenameDataMaintenanceRecId</c> value.
    /// </summary>
    /// <param name="_oldCustAccount">
    /// The old customer account.
    /// </param>
    /// <param name="_newCustAccount">
    /// The new customer account.
    /// </param>
    /// <param name="_custAccountNumRenameDataMaintenanceRecId">
    /// The <c>CustAccountNumRenameDataMaintenance</c> record id to be processed.
    /// </param>
    internal void setDataMaintenanceRequest(CustAccount _oldCustAccount, CustAccount _newCustAccount, CustAccountNumRenameDataMaintenanceRecId _custAccountNumRenameDataMaintenanceRecId)
    {
        CustAccountNumRenameDataMaintenanceRequestContract request = this.getBaseDataContract() as CustAccountNumRenameDataMaintenanceRequestContract;
        request.parmCustAccountNumRenameDataMaintenanceRecId(_custAccountNumRenameDataMaintenanceRecId);
        request.parmOldCustAccount(_oldCustAccount);
        request.parmNewCustAccount(_newCustAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Can the operation supports running in a different, non interactive
    /// session than the one from which it was launched
    /// </summary>
    /// <returns>
    /// If true operation will be run synchrnously in an non GUI async session
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>