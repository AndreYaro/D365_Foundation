<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFlowResourceRequirementsJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanFlowResourceRequirementsJob</c> class provides an interface to a resource requirement
///    calculation for a specified <c>KanbanJob</c> record.
/// </summary>
public class KanbanFlowResourceRequirementsJob extends KanbanFlowResourceRequirementsBase
{
    #TimeConstants
    KanbanJob   kanbanJob;
    TransDate   transDate;
    int         explosionLevel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAndExplodeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds resource consumption results recursively from the same production flow until a kanban rule is
    /// encountered that does update on hand inventory.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    /// The production flow.
    /// </param>
    /// <param name="_parentItemId">
    /// The parent item that is produced in the production flow.
    /// </param>
    /// <param name="_itemId">
    /// The item for which to calculate resource consumption when it is produced in the production flow.
    /// </param>
    /// <param name="_inventDimId">
    /// The item inventory dimensions.
    /// </param>
    /// <param name="_inventQty">
    /// The item quantity.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addAndExplodeItem(
        LeanProductionFlowReference _leanProductionFlowReference,
        ItemId                      _parentItemId,
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        InventQty                   _inventQty)
    {
        // continue to explode picking lists / find rules until a rule is encountered that does update on hand.
        // A kanban for a rule that does update on hand will report its own resource consumption.
        KanbanRule kanbanRule = LeanItemMadeInProductionFlow::newLeanProductionFlowItemParentDate(
                                                                           _leanProductionFlowReference.RecId,
                                                                           InventItemParmData::construct(_itemId, InventDim::inventDimIdBlank()),
                                                                           InventItemParmData::construct(_parentItemId, InventDim::inventDimIdBlank()),
                                                                           transDate).madeInProductionFlowWithKanbanRule(true,true);
        if (kanbanRule)
        {
            KanbanFlow kanbanFlowLocal = kanbanRule.kanbanFlow();

            if (!kanbanFlowLocal.lastPlanActivity().nextLevelPlanActivity(PlanActivityType::Receive).OnHandUpdate)
            {
                RefRecId unitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(_itemId).inventUnitId());
                KanbanFlowResourceRequirementsFlow kanbanFlowResourceRequirements = KanbanFlowResourceRequirementsFlow::newStandard(
                                                                                         kanbanRule,
                                                                                         kanbanFlowLocal,
                                                                                         _itemId,
                                                                                         _inventDimId,
                                                                                         _inventQty,
                                                                                         unitOfMeasureRecId,
                                                                                         true,
                                                                                         false
                                                                                         ,
                                                                                         false
                                                                                         );
                this.addKanbanFlowResourceRequirements(kanbanFlowResourceRequirements);

                this.addAndExplodeNextLevel(
                                    _leanProductionFlowReference,
                                    kanbanRule,
                                    _itemId,
                                    _inventDimId,
                                    _inventQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAndExplodeNextLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a picking list for the given item and causes resource calculation for the components where
    /// it is required.
    /// </summary>
    /// <param name="_leanProductionFlowReference">
    /// The production flow.
    /// </param>
    /// <param name="_kanbanRule">
    /// The kanban rule.
    /// </param>
    /// <param name="_itemId">
    /// The item for which to create the picking list.
    /// </param>
    /// <param name="_inventDimId">
    /// The item inventory dimensions.
    /// </param>
    /// <param name="_inventQty">
    /// The item quantity.
    /// </param>
    /// <remarks>
    /// The <c>kanbanJobPickingListCreateAsListCosting</c> class will only create a picking list if the
    /// flow does not pick up semi-finished items.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addAndExplodeNextLevel(
        LeanProductionFlowReference _leanProductionFlowReference,
        KanbanRule                  _kanbanRule,
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        InventQty                   _inventQty)
    {
        #define.maxExplosionLevel(100)
        KanbanJobPickingList                    kanbanJobPickingList;

        if (explosionLevel <= #maxExplosionLevel)
        {
            // create the picking list as a recordSortedList
            KanbanJobPickingListCreateAsListCosting kanbanJobPickingListCreateAsListCosting = KanbanJobPickingListCreateAsListCosting::newStandard(
                                                                                                                                            _itemId,
                                                                                                                                            _inventDimId,
                                                                                                                                            abs(_inventQty),
                                                                                                                                            transDate,
                                                                                                                                            _kanbanRule,
                                                                                                                                            kanbanJob);

            RecordSortedList recordSortedList = kanbanJobPickingListCreateAsListCosting.kanbanJobPickingListAsList();

            boolean done = !recordSortedList.first(kanbanJobPickingList);
            while (!done)
            {
                kanbanJobPickingList.RecId = 0;

                if (!kanbanJobPickingList.type().mustBeInventoryControlled())
                {
                    explosionLevel++;

                    // recursively explode the next level
                    this.addAndExplodeItem(
                                    _leanProductionFlowReference,
                                    _itemId,
                                    kanbanJobPickingList.ItemId,
                                    kanbanJobPickingList.InventDimId,
                                    kanbanJobPickingList.Quantity);

                    explosionLevel--;
                }

                done = !recordSortedList.next(kanbanJobPickingList);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcResourceRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the resource requirements for the <c>KanbanJob</c> object that are specified in the
    /// class constructor.
    /// </summary>
    /// <param name="_forceRecalc">
    /// A Boolean value that defines whether a recalculation must be forced, even when cached values are
    /// available.
    /// </param>
    /// <returns>
    /// true if a calculation was performed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The result of this method call is cached. Subsequent calls will not compute the result again.
    /// </remarks>
    public boolean calcResourceRequirements(boolean _forceRecalc = false)
    {
        boolean     result;

        setPrefix(KanbanFlowResourceRequirementsBase::description());
        setPrefix(strFmt("@SYS14077",itemId));

        if (   !cachedResourceRequirement
            || _forceRecalc)
        {
            cachedResourceRequirement = true;
            result                    = true;
            this.init();

            result = this.validate();

            if (result)
            {
                this.calcResourceRequirementsKanbanJob();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcResourceRequirementsKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the resource consumption of the kanban job.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcResourceRequirementsKanbanJob()
    {
        KanbanJob                       kanbanJobLocal;

        // a specific job - go backwards until an inventory controlled receipt is encountered.
        kanbanJobLocal.data(kanbanJob);
        Kanban kanban = kanbanJobLocal.kanban();
        PlanActivity planActivity = kanbanJobLocal.planActivity();
        LeanProductionFlowReference leanProductionFlowReference = kanban.leanProductionFlowReference();
        boolean done = !kanbanJobLocal;

        while (!done)
        {
            // job requirements
            this.calcPlanActivityResourceRequirements(planActivity,
                                                      kanbanFlow.leanProductionFlow().RecId,
                                                      KanbanFlowResourceRequirementsJob::inventQty(kanbanJobLocal));

            // picking list requirements, if any
            this.calcResourceRequirementsPickingList(kanbanJobLocal,kanban,leanProductionFlowReference);

            // go backwards to previous job
            done = !kanbanJobLocal.existPreviousJob();
            if (!done)
            {
                kanbanJobLocal = kanbanJobLocal.previousJob();
                planActivity   = kanbanJobLocal.planActivity();
            }
        }

        // calculate resource requirements of upstream connected kanban rules
        this.calcResourceRequirementsUpstream(
                                        kanban.ItemId,
                                        kanban.InventDimId,
                                        kanban.QuantityOrdered,
                                        leanProductionFlowReference,
                                        kanban.kanbanRule());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcResourceRequirementsPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the resource consumption of related picking list lines.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The kanban job that owns the picking list for which to calculate resource requirement.
    /// </param>
    /// <param name="_kanban">
    /// The kanban.
    /// </param>
    /// <param name="_leanProductionFlowReference">
    /// The production flow reference of the kanban.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcResourceRequirementsPickingList(
        KanbanJob                   _kanbanJob,
        Kanban                      _kanban                      = _kanbanJob.kanban(),
        LeanProductionFlowReference _leanProductionFlowReference = _kanban.leanProductionFlowReference())
    {
        KanbanJobPickingList    kanbanJobPickingList;

        if (_kanbanJob)
        {
            // the non-inventory controlled components
            while select ItemId, InventDimId, sum(Quantity) from kanbanJobPickingList
                group by ItemId, InventDimId
                where kanbanJobPickingList.Job == _kanbanJob.RecId
                   && !kanbanJobPickingList.InventTransId
            {
                this.addAndExplodeItem(
                                    _leanProductionFlowReference,
                                    _kanban.ItemId,
                                    kanbanJobPickingList.ItemId,
                                    kanbanJobPickingList.InventDimId,
                                    kanbanJobPickingList.Quantity);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcResourceRequirementsSemiFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the resource consumption of the kanban flows of semi-finished items.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which to calculate resource consumption when it is produced in the production flow.
    /// </param>
    /// <param name="_inventDimId">
    /// The item inventory dimensions.
    /// </param>
    /// <param name="_inventQty">
    /// The item quantity.
    /// </param>
    /// <param name="_leanProductionFlowReference">
    /// The production flow.
    /// </param>
    /// <param name="_kanbanRule">
    /// A kanban rule that must be excluded from the find rules operation.
    /// </param>
    /// <param name="_planActivity">
    /// A plan activity that is directly connected to the last activity in the searched for kanban rule.
    /// </param>
    /// <param name="_leanProductionFlowActivity">
    /// The corresponding lean production flow activity.
    /// </param>
    /// <remarks>
    /// Each recursive call moves more towards the start of the flow. Transfer rules are included in the
    /// finding of rules, because each rule is required to be directly connected to the previous one.
    /// Transfer rules do not have resource requirements.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcResourceRequirementsSemiFinished(
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        InventQty                   _inventQty,
        LeanProductionFlowReference _leanProductionFlowReference,
        KanbanRule                  _kanbanRule,
        PlanActivity                _planActivity,
        LeanProductionFlowActivity  _leanProductionFlowActivity = LeanProductionFlowActivity::findPlanActivity(_planActivity.RecId))
    {
        // now using calcResourceRequirementsUpstream()
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcResourceRequirementsUpstream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the resource requirements of upstream connected kanban rules.
    /// </summary>
    /// <param name="_itemId">
    /// The item to find upstream kanban rules for.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimensions to find upstream kanban rules for.
    /// </param>
    /// <param name="_inventQty">
    /// The quantity to find upstream kanban rules for.
    /// </param>
    /// <param name="_leanProductionFlowReference">
    /// The <c>LeanProductionFlowReference</c> record ID that the kanban rules belong to.
    /// </param>
    /// <param name="_kanbanRule">
    /// The kanban rule that represents the starting point.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcResourceRequirementsUpstream(
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        InventQty                   _inventQty,
        LeanProductionFlowReference _leanProductionFlowReference,
        KanbanRule                  _kanbanRule)
    {
        TransDateTime                       dateTimeFrom = DateTimeUtil::newDateTime(transDate,0);
        TransDateTime                       dateTimeTo   = DateTimeUtil::newDateTime(transDate,#secondsPerDay-1);

        // find connected rules
        KanbanRulesConnectedResourceCalc kanbanRulesConnectedResourceCalc = KanbanRulesConnectedResourceCalc::newStandard(_kanbanRule,
                                                                                                                          _itemId,
                                                                                                                          _inventDimId,
                                                                                                                          dateTimeFrom,
                                                                                                                          dateTimeTo,
                                                                                                                          _inventQty);

        List list = kanbanRulesConnectedResourceCalc.listKanbanRulesConnected();

        // for each rule calculate the resource requirements
        if (   list
            && list.elements())
        {
            ListEnumerator le = list.getEnumerator();
            while (le.moveNext())
            {
                KanbanRule kanbanRuleCurrent = le.current();

                if (kanbanRuleCurrent)
                {
                    // consider only manufacturing resources
                    if (kanbanRuleCurrent.KanbanType == LeanKanbanType::Manufacturing)
                    {
                        KanbanFlowResourceRequirementsFlow kanbanFlowResourceRequirementsFlow = KanbanFlowResourceRequirementsFlow::newStandard(
                                                                                                                                           kanbanRuleCurrent,
                                                                                                                                           kanbanRuleCurrent.kanbanFlow(),
                                                                                                                                           _itemId,
                                                                                                                                           _inventDimId,
                                                                                                                                           _inventQty,
                                                                                                                                           unitOfMeasure,
                                                                                                                                           includeInternalResources,
                                                                                                                                           includeSubcontractedResources,
                                                                                                                                           false);
                        this.addKanbanFlowResourceRequirements(kanbanFlowResourceRequirementsFlow);

                        // if a picking list exists, explode it as required
                        this.addAndExplodeNextLevel(_leanProductionFlowReference,kanbanRuleCurrent,_itemId,_inventDimId,_inventQty);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the map that will hold the resource requirements.
    /// </summary>
    protected void init()
    {
        super();
        explosionLevel = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanJob parmKanbanJob(KanbanJob _kanbanJob = kanbanJob)
    {
        kanbanJob = _kanbanJob;
        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the class input parameters.
    /// </summary>
    /// <returns>
    /// true if the validation was successful; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        boolean result = super();

        if (   result
            && !kanbanJob)
        {
            result = checkFailed("@SYS342414");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanFlowResourceRequirementsJob construct()
    {
        return new KanbanFlowResourceRequirementsJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity to use in the resource requirement calculation.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> record that is used to determine the quantity.
    /// </param>
    /// <returns>
    /// The quantity to use in the resource requirement calculation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static InventQty inventQty(KanbanJob _kanbanJob)
    {
        return _kanbanJob.Status == LeanKanbanJobStatus::Completed
                    ? _kanbanJob.QuantityReceived + _kanbanJob.QuantityScrapped
                    : _kanbanJob.QuantityOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>KanbanFlowResourceRequirementsJob</c> object.
    /// </summary>
    /// <param name="_kanbanJob">
    /// A <c>KanbanJob</c> table buffer.
    /// </param>
    /// <param name="_transDate">
    /// The date used in the resource calculation.
    /// </param>
    /// <param name="_includeInternalResources">
    /// A Boolean value that indicates whether internal resources are included in the calculation.
    /// </param>
    /// <param name="_includeSubcontractedResources">
    /// A Boolean value that indicates whether subcontracted resources are included in the calculation.
    /// </param>
    /// <returns>
    /// A <c>KanbanFlowResourceRequirementsJob</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanFlowResourceRequirementsJob newStandard(
        KanbanJob _kanbanJob,
        TransDate _transDate,
        boolean   _includeInternalResources,
        boolean   _includeSubcontractedResources)
    {
        Kanban                              kanban                         = _kanbanJob.kanban();
        KanbanFlowResourceRequirementsJob   kanbanFlowResourceRequirements = KanbanFlowResourceRequirementsJob::construct();

        kanbanFlowResourceRequirements.parmKanbanJob(_kanbanJob);
        kanbanFlowResourceRequirements.parmTransDate(_transDate);
        kanbanFlowResourceRequirements.parmKanbanFlow(kanban.kanbanRule().kanbanFlow());
        kanbanFlowResourceRequirements.parmItemId(kanban.ItemId);
        kanbanFlowResourceRequirements.parmInventDimId(kanban.InventDimId);
        kanbanFlowResourceRequirements.parmInventQty(KanbanFlowResourceRequirementsJob::inventQty(_kanbanJob));
        kanbanFlowResourceRequirements.parmUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(kanban.ItemId).inventUnitId()));
        kanbanFlowResourceRequirements.parmIncludeInternalResources(_includeInternalResources);
        kanbanFlowResourceRequirements.parmIncludeSubcontractedResources(_includeSubcontractedResources);

        return kanbanFlowResourceRequirements;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
