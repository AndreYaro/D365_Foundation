<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustmentSelect</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjAdjustmentSelect extends RunBase
{
    ProjId                  projId;
    ProjInvoiceId           projInvoiceId;
    ProjWipId               projWipId;
    int                     categoryIdFieldId;
    container               projTransIdList;

    QueryRun                queryRun;

    ProjEmplTrans           projEmplTrans;
    ProjCostTrans           projCostTrans;
    ProjItemTrans           projItemTrans;
    ProjRevenueTrans        projRevenueTrans;

    TmpProjAdjustment       tmpProjAdjustment;
    TmpProjAdjustmentCost   tmpProjAdjustmentCost;
    TmpProjAdjustmentSale   tmpProjAdjustmentSale;

    DialogField             dialogEmpl;
    ProjOptionHours         queryEmpl;

    DialogField             dialogCost;
    ProjOptionCost          queryCost;

    DialogField             dialogRevenue;
    ProjOptionRevenue       queryRevenue;

    DialogField             dialogSubscription;
    SMAProjoptionSubscription querySubscription;

    DialogField             dialogItem;
    ProjOptionItem          queryItem;

    DialogField             dialogFromDate;
    DialogField             dialogToDate;
    DialogField             dialogAdjustmentDate;
    TransDate               adjustmentDate;
    TransDate               fromDate;
    TransDate               toDate;

    DialogField             dfTimeMaterialProjectType;
    ProjOptionTM            queryTimeMaterialProjectType;
    DialogField             dfFixedPriceProjectType;
    ProjOptionFixedPrice    queryFixedPriceProjectType;
    DialogField             dfInvestmentProjectType;
    ProjOptionInvestment    queryInvestmentProjectType;
    DialogField             dfInternalProjectType;
    ProjOptionInternal      queryInternalProjectType;
    DialogField             dfTimeProjectType;
    ProjOptionTime          queryTimeProjectType;

    DialogField                 dfPostedTransStatus;
    ProjOptionPosted            queryPostedTransStatus;
    DialogField                 dfInvoiceProposalTransStatus;
    ProjOptionInvoiceProposal   queryInvoiceProposalTransStatus;
    DialogField                 dfInvoicedTransStatus;
    ProjOptionInvoiced          queryInvoicedTransStatus;
    DialogField                 dfEstimatedTransStatus;
    ProjOptionEstimated         queryEstimatedTransStatus;
    DialogField                 dfEliminatedTransStatus;
    ProjOptionEliminated        queryEliminatedTransStatus;

    DialogField                 dfChargeableLineProperty;
    ProjOptionChargeable        queryChargeableLineProperty;
    DialogField                 dfNonchargeableLineProperty;
    ProjOptionNonChargeable     queryNonchargeableLineProperty;

    DialogField                 dfOnHoldFundingOnly;
    NoYesId                     queryOnHoldFundingOnly;

    QueryBuildDataSource    projDataSource;

    Name                    name;

    private boolean enableProjMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
    private boolean isEnabledProjPostedTransMultiSelectFeature = FeatureStateProvider::isFeatureEnabled(ProjPostedTransMultiSelectFeature::instance());
    private boolean usingTmpProjListOfTransIdTable = false;

    #ISOcountryRegionCodes

    #define.CurrentVersion(16)

    #localmacro.CurrentList
        queryEmpl,
        queryCost,
        queryRevenue,
        querySubscription,
        queryItem,
        FromDate,
        ToDate,
        adjustmentDate,
        queryTimeMaterialProjectType,
        queryFixedPriceProjectType,
        queryInvestmentProjectType,
        queryInternalProjectType,
        queryTimeProjectType,
        queryPostedTransStatus,
        queryInvoiceProposalTransStatus,
        queryInvoicedTransStatus,
        queryEstimatedTransStatus,
        queryEliminatedTransStatus,
        queryChargeableLineProperty,
        queryNonchargeableLineProperty,
        queryOnHoldFundingOnly
    #endmacro

    ProjType                projType;
    boolean                 subProjTypeTM, subProjTypeFPInv, subProjTypeIntCost, subProjTypeTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAmountDataSource</Name>
				<Source><![CDATA[
    private void addAmountDataSource(
        QueryBuildDataSource _qbdsHeader,
        TableId              _tableIdAmount,
        FieldId              _fieldIdTransStatus,
        ProjCostSales        _costSales
    )
    {
        QueryBuildDataSource    qbdsAmount;
        QueryBuildDataSource    qbdsFundingSource;

        ProjParameters          parameters = ProjParameters::find();

        void addRangePosted()
        {
            qbdsAmount.addRange(_fieldIdTransStatus).value(queryValue(ProjTransStatus::Posted));
            if (this.parmQueryOnHoldFundingOnly())
            {
                // On hold funding source is only valid for posted trx.
                qbdsFundingSource = qbdsAmount.addDataSource(tableNum(ProjFundingSource));
                qbdsFundingSource.relations(true);
                qbdsFundingSource.joinMode(JoinMode::ExistsJoin);
                qbdsFundingSource.addRange(fieldNum(ProjFundingSource, FundingType)).value(queryValue(ProjFundingType::OnHoldFundingSource));
            }
        }

        void addRangeInvoiceProposal()
        {
            qbdsAmount.addRange(_fieldIdTransStatus).value(queryValue(ProjTransStatus::InvoiceProposal));
        }

        void addRangeInvoiced()
        {
            qbdsAmount.addRange(_fieldIdTransStatus).value(queryValue(ProjTransStatus::Invoiced));
            qbdsAmount.addRange(_fieldIdTransStatus).value(queryValue(ProjTransStatus::MarkedCreditnote));
            qbdsAmount.addRange(_fieldIdTransStatus).value(queryValue(ProjTransStatus::CreditnoteProposal));
        }

        void addRangeEstimated()
        {
            qbdsAmount.addRange(_fieldIdTransStatus).value(queryValue(ProjTransStatus::Estimated));
        }

        void addRangeEliminated()
        {
            qbdsAmount.addRange(_fieldIdTransStatus).value(queryValue(ProjTransStatus::Eliminated));
        }

        if ((parameters.PostedStatus && this.parmQueryPosted()) ||
            (parameters.InvoiceProposalStatus && this.parmQueryInvoiceProposal()) ||
            (parameters.InvoicedStatus && this.parmQueryInvoiced()) ||
            (parameters.EstimatedStatus && this.parmQueryEstimated()) ||
            (parameters.EliminatedStatus && this.parmQueryEliminated()))
        {
            qbdsAmount = _qbdsHeader.addDataSource(_tableIdAmount);
            qbdsAmount.relations(true);
            qbdsAmount.joinMode(JoinMode::ExistsJoin);

            if (parameters.PostedStatus && this.parmQueryPosted())
            {
                addRangePosted();
            }

            // If the dialog option for Posted is not checked and the Invoiced Proposal is checked,
            // We need to ALWAYS include the POSTED Cost to return the equivalent Revenue which is in Invoiced Proposal status
            // This is because you cannot invoiced a Cost trx without posting it first
            if (parameters.PostedStatus && !this.parmQueryPosted() && this.parmQueryInvoiceProposal() && _costSales == ProjCostSales::Cost)
            {
                addRangePosted();
            }

            if (_costSales == ProjCostSales::Sales)
            {
                if (parameters.InvoiceProposalStatus && this.parmQueryInvoiceProposal())
                {
                    addRangeInvoiceProposal();
                }
                if (parameters.InvoicedStatus && this.parmQueryInvoiced())
                {
                    addRangeInvoiced();
                }
            }
            if (parameters.EstimatedStatus && this.parmQueryEstimated())
            {
                addRangeEstimated();
            }
            if (parameters.EliminatedStatus && this.parmQueryEliminated())
            {
                addRangeEliminated();
            }
        }
        else
        {
            throw error(strFmt("@SYS22828",funcName()));
        }

        qbdsAmount = _qbdsHeader.addDataSource(_tableIdAmount);
        qbdsAmount.relations(true);
        qbdsAmount.joinMode(JoinMode::NoExistsJoin);

        if (!parameters.PostedStatus)
        {
            addRangePosted();
        }

        if (_costSales == ProjCostSales::Sales)
        {
            if ((parameters.InvoiceProposalStatus && !this.parmQueryInvoiceProposal()) ||
                (!parameters.InvoiceProposalStatus))
            {
                addRangeInvoiceProposal();
            }
            if ((parameters.InvoicedStatus && !this.parmQueryInvoiced()) ||
                (!parameters.InvoicedStatus))
            {
                addRangeInvoiced();
            }
        }
        if ((parameters.EstimatedStatus && !this.parmQueryEstimated()) ||
            (!parameters.EstimatedStatus))
        {
            addRangeEstimated();
        }
        if ((parameters.EliminatedStatus && !this.parmQueryEliminated()) ||
            (!parameters.EliminatedStatus))
        {
            addRangeEliminated();
        }

        // If no ranges were added, disable the datasource.
        if (qbdsAmount.rangeCount() == 0)
        {
            qbdsAmount.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeaderRange</Name>
				<Source><![CDATA[
    private void addHeaderRange(
    QueryBuildDataSource _qbdsHeader,
    FieldId              _fieldIdTransId,
    FieldId              _fieldIdAdjRefTransId,
    FieldId              _fieldIdLinePropertyId,
    FieldId              _fieldIdTransDate
)
    {
        QueryBuildDataSource    qbdsProject;
        QueryBuildDataSource    qbdsAdjRef;
        QueryBuildRange         qbrTransDate;
        QueryBuildRange         qbrProjDatasource;
        QueryBuildDataSource    projAdjustmentSelect;
        QueryBuildRange         projAdjustmentSelectRange;
        QueryBuildDataSource    projPostedTransTable;
        QueryBuildRange         projPostedTransTableRange;
        int                     elements;
        int                     i;

        // Project line property
        if (!this.parmTransIdList())
        {
            QueryBuildDataSource qbdsProjLineProperty = _qbdsHeader.addDataSource(tableNum(ProjLineProperty));
            qbdsProjLineProperty.relations(true);
            qbdsProjLineProperty.joinMode(JoinMode::ExistsJoin);

            if (this.parmQueryChargeable())
            {
                qbdsProjLineProperty.addRange(fieldNum(ProjLineProperty, TobeInvoiced)).value(queryValue(NoYes::Yes));
            }

            if (this.parmQueryNonChargeable())
            {
                qbdsProjLineProperty.addRange(fieldNum(ProjLineProperty, TobeInvoiced)).value(queryValue(NoYes::No));
            }
        }

        //Project
        qbdsProject = _qbdsHeader.addDataSource(tableNum(ProjTable));
        qbdsProject.relations(true);
        qbdsProject.joinMode(JoinMode::ExistsJoin);

        projAdjustmentSelect = queryRun.query().dataSourceTable(tableNum(ProjTable));
        elements = projAdjustmentSelect.rangeCount();
        for (i = 1; i <= elements; i++)
        {
            projAdjustmentSelectRange = projAdjustmentSelect.range(i);
            qbdsProject.addRange(projAdjustmentSelectRange.field()).value(projAdjustmentSelectRange.value());
        }

        // Adding query filter.
        int filterCount = queryRun.query().queryFilterCount();
        for (int j = 1; j <= filterCount; j++)
        {
            QueryFilter queryFilter = queryRun.query().queryFilter(j);
            if (queryFilter.dataSource().table() == tableNum(ProjTable))
            {
                qbdsProject.addRange(fieldName2Id(queryFilter.dataSource().table(), queryFilter.field())).value(queryFilter.value());
            }
        }
       
        // Filter by category id for ProjPostedTransTable
        projPostedTransTable = queryRun.query().dataSourceTable(tableNum(ProjPostedTransTable));
        if (projPostedTransTable)
        {
            elements = projPostedTransTable.rangeCount();
            for (i = 1; i <= elements; i++)
            {
                projPostedTransTableRange =  projPostedTransTable.range(i);
                if (projPostedTransTableRange.fieldName() == fieldStr(ProjPostedTransTable, CategoryId))
                {
                    SysQuery::findOrCreateRange(_qbdsHeader, categoryIdFieldId).value(projPostedTransTableRange.value());
                }
            }
        }
        
        if ((!this.parmTransIdList() && !this.parmProjId()) ||
        (this.parmProjId() && strFind(this.parmProjId(), '*', strLen(this.parmProjId()), 1)))
        {
            if (this.enableProjMultipleContractLinesForProjectFeature)
            {
                qbdsProject.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::None));
            }
            else
            {
                if (this.parmQueryTimeMaterial())
                {
                   qbdsProject.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::TimeMaterial));
                }

                if (this.parmQueryFixedPrice())
                {
                    qbdsProject.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::FixedPrice));
                }

                if (this.parmQueryInvestment())
                {
                    qbdsProject.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Investment));
                }

                if (this.parmQueryInternal())
                {
                    qbdsProject.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Cost));
                    qbdsProject.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Internal));
                }

                if (this.parmQueryTime())
                {
                    qbdsProject.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Time));
                }
            }
        }

        //External sources
        if (ProjCDSLockingOptionTable::get(ProjCDSLockingOption::Adjustments))
        {
            qbdsProject.addRange(fieldNum(ProjTable, ProjDataSource)).value(SysQuery::value(0));
        }

        //Adjustment reference
        qbdsAdjRef = _qbdsHeader.addDataSource(_qbdsHeader.table());
        qbdsAdjRef.relations(false);
        qbdsAdjRef.joinMode(JoinMode::NoExistsJoin);
        qbdsAdjRef.addLink(_fieldIdTransId, _fieldIdAdjRefTransId);

        //Transaction ID
        if (this.parmTransIdList())
        {
            this.rangeTransId(_qbdsHeader);
        }

        //Date range
        if (this.parmFromDate() || this.parmtoDate())
        {
            qbrTransDate = _qbdsHeader.addRange(_fieldIdTransDate);
            qbrTransDate.status(RangeStatus::Hidden);
            qbrTransDate.value(this.queryFromDate()+'..'+this.queryToDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransactionTypeFieldsToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds transaction type based fields to the given <c>Dialog</c> instance.
    /// </summary>
    /// <param name = "_dialog">The <c>Dialog</c> instance.</param>
    protected void addTransactionTypeFieldsToDialog(Dialog _dialog)
    {
        dialogEmpl = _dialog.addFieldValue(extendedTypeStr(ProjOptionHours), queryEmpl, "@SYS5269", "@SYS78368");
        dialogCost = _dialog.addFieldValue(extendedTypeStr(ProjOptionCost), queryCost, "@SYP4882014", "@SYS78369");
        dialogItem = _dialog.addFieldValue(extendedTypeStr(ProjOptionItem), queryItem, "@SYS7407", "@SYS78372");
        dialogRevenue = _dialog.addFieldValue(extendedTypeStr(ProjOptionRevenue), queryRevenue, "@SYS9154", "@SYS78818");
        dialogSubscription = _dialog.addFieldValue(extendedTypeStr(SMAProjoptionSubscription), querySubscription, "@SYS84335", "@SYS90561");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        DialogGroup     groupTotal, dg1, dg2;
        ProjParameters  parameters;
        DialogGroup     dgProjectType;
        DialogGroup     dgTransStatus;
        DialogGroup     dgLineProperty;

        parameters = ProjParameters::find();

        dialog.caption("@SYS344638");

        groupTotal = dialog.addGroup(' ');
        groupTotal.frameType(FormFrameType::None);
        groupTotal.columns(2);

        dg1 = dialog.addGroup(' ', groupTotal);
        dg1.frameType(FormFrameType::None);

        if (! projTransIdList)
        {
            dialog.addGroup("@SYS78373", dg1);

            this.addTransactionTypeFieldsToDialog(dialog);

            dialog.addGroup("@SYS54242",dg1);

            dialogFromDate  = dialog.addFieldValue(extendedTypeStr(TransDate), fromDate, "@SYS5209",  "@SYS90467");
            dialogToDate    = dialog.addFieldValue(extendedTypeStr(TransDate), toDate,   "@SYS14656", "@SYS90468");
        }

        dialog.addGroup("@SYS23410",dg1);
        dialogAdjustmentDate = dialog.addFieldValue(extendedTypeStr(TransDate), adjustmentDate, "@SYS8449");

        if (!projTransIdList)
        {
            dialog.addGroup("@SYS134969",dg1);
            dfOnHoldFundingOnly = dialog.addFieldValue(extendedTypeStr(NoYesId), queryOnHoldFundingOnly, "@SYS344441", "@SYS344442");
            dfOnHoldFundingOnly.value(NoYes::No);
        }

        dg2 = dialog.addGroup(' ', groupTotal);
        dg2.frameType(FormFrameType::None);

        if (!this.enableProjMultipleContractLinesForProjectFeature &&
            ((!projTransIdList && !projId) || (projId && strFind(projId, '*', strLen(projId), 1))))
        {
            dgProjectType = dialog.addGroup("@SYS81943", dg2);

            dfTimeMaterialProjectType = dialog.addFieldValue(extendedTypeStr(ProjOptionTM), queryTimeMaterialProjectType, "@SYS53874", "@SYS78362");
            dfFixedPriceProjectType = dialog.addFieldValue(extendedTypeStr(ProjOptionFixedPrice), queryFixedPriceProjectType, "@SYS3237", "@SYS78361");
            dfInvestmentProjectType = dialog.addFieldValue(extendedTypeStr(ProjOptionInvestment), queryInvestmentProjectType, "@SYS78353", "@SYS78364");
            dfInternalProjectType = dialog.addFieldValue(extendedTypeStr(ProjOptionInternal), queryInternalProjectType, "@SYS78366", "@SYS78363");
            dfTimeProjectType = dialog.addFieldValue(extendedTypeStr(ProjOptionTime), queryTimeProjectType, "@SYS78355", "@SYS78365");

            dfTimeMaterialProjectType.value(NoYes::Yes);
            dfFixedPriceProjectType.value(NoYes::Yes);
            dfInvestmentProjectType.value(NoYes::Yes);
            dfInternalProjectType.value(NoYes::Yes);
            dfTimeProjectType.value(NoYes::Yes);
        }

        dgTransStatus = dialog.addGroup("@SYS16396", dg2);

        dfPostedTransStatus = dialog.addFieldValue(extendedTypeStr(ProjOptionPosted), queryPostedTransStatus, "@SYS1711", "@SYS133645");
        dfInvoiceProposalTransStatus = dialog.addFieldValue(extendedTypeStr(ProjOptionInvoiceProposal), queryInvoiceProposalTransStatus, "@SYS50132", "@SYS133644");
        dfInvoicedTransStatus = dialog.addFieldValue(extendedTypeStr(ProjOptionInvoiced), queryInvoicedTransStatus, "@SYS14205", "@SYS56038");
        dfEstimatedTransStatus = dialog.addFieldValue(extendedTypeStr(ProjOptionEstimated), queryEstimatedTransStatus, "@SYS5944", "@SYS133154");
        dfEliminatedTransStatus = dialog.addFieldValue(extendedTypeStr(ProjOptionEliminated), queryEliminatedTransStatus, "@SYS55639", "@SYS133155");
        dfPostedTransStatus.visible(parameters.PostedStatus);
        dfPostedTransStatus.value(parameters.PostedStatus);
        dfInvoiceProposalTransStatus.visible(parameters.InvoiceProposalStatus);
        dfInvoiceProposalTransStatus.value(parameters.InvoiceProposalStatus);
        dfInvoicedTransStatus.visible(parameters.InvoicedStatus);
        dfInvoicedTransStatus.value(parameters.InvoicedStatus);
        dfEstimatedTransStatus.visible(parameters.EstimatedStatus);
        dfEstimatedTransStatus.value(parameters.EstimatedStatus);
        dfEliminatedTransStatus.visible(parameters.EliminatedStatus);
        dfEliminatedTransStatus.value(parameters.EliminatedStatus);

        if (! projTransIdList)
        {
            dgLineProperty = dialog.addGroup("@SYS50026", dg2);

            dfChargeableLineProperty = dialog.addFieldValue(extendedTypeStr(ProjOptionChargeable), queryChargeableLineProperty, "@SYS15343", "@SYS133149");
            dfNonchargeableLineProperty = dialog.addFieldValue(extendedTypeStr(ProjOptionNonChargeable), queryNonchargeableLineProperty, "@SYS58121", "@SYS133148");
            dfChargeableLineProperty.value(NoYes::Yes);
            dfNonchargeableLineProperty.value(NoYes::Yes);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates and inserts a new project transaction adjustment.
    /// </summary>
    /// <param name = "_projTrans">The transaction being adjusted.</param>
    /// <param name = "_projTransType">The transaction type.</param>
    /// <param name = "_currencyIdCost">The currency of the transaction.</param>
    protected void doTrans(ProjTrans _projTrans, ProjAdjustmentType _projTransType, CurrencyCode _currencyIdCost = '')
    {
        this.initTrans(_projTrans, _projTransType, _currencyIdCost);

        tmpProjAdjustment.insert();

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(_projTrans.buffer(), tmpProjAdjustment);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TmpProjAdjustment</c> record held in class member tmpProjAdjustment.
    /// </summary>
    /// <param name = "_projTrans">The transaction being adjusted.</param>
    /// <param name = "_projTransType">The transaction type.</param>
    /// <param name = "_currencyIdCost">The currency of the transaction.</param>
    protected void initTrans(ProjTrans _projTrans, ProjAdjustmentType _projTransType, CurrencyCode _currencyIdCost)
    {
        ProjEmplTrans     tProjEmplTrans;
        tmpProjAdjustment.clear();

        tmpProjAdjustment.Txt                       = _projTrans.txt();
        tmpProjAdjustment.CategoryId                = _projTrans.categoryId();
        tmpProjAdjustment.CurrencyIdCost            = _currencyIdCost ? _currencyIdCost : _projTrans.currencyIdCost();
        tmpProjAdjustment.CurrencyId                = _projTrans.currencyIdSales();
        tmpProjAdjustment.DefaultDimension          = _projTrans.defaultDimension();
        tmpProjAdjustment.LinePropertyId            = _projTrans.linePropertyId();
        tmpProjAdjustment.ProjId                    = _projTrans.projId();
        tmpProjAdjustment.ProjName                  = _projTrans.projTable().Name;
        tmpProjAdjustment.ActivityNumber            = _projTrans.activityNumber();
        tmpProjAdjustment.Qty                       = _projTrans.qty();
        tmpProjAdjustment.TaxGroupId                = _projTrans.taxGroup();
        tmpProjAdjustment.TaxItemGroupId            = _projTrans.taxItemGroup();
        tmpProjAdjustment.TransDate                 = _projTrans.transDate();
        tmpProjAdjustment.TransId                   = _projTrans.transId();
        tmpProjAdjustment.AdjustmentType            = _projTransType;
        tmpProjAdjustment.Resource                  = _projTrans.resource();
        tmpProjAdjustment.ResourceCategory          = _projTrans.resourceCategory();
        tmpProjAdjustment.ActivityNumber            = _projTrans.activityNumber();
        tmpProjAdjustment.ItemId                    = _projTrans.itemId();
        tmpProjAdjustment.InventTransId             = _projTrans.inventTransId();
        tmpProjAdjustment.InventDimid               = _projTrans.inventDimId();
        tmpProjAdjustment.ProjAdjustRefid           = _projTrans.projAdjustRefId();
        tmpProjAdjustment.PackingSlipId             = _projTrans.packingSlipId();
        tmpProjAdjustment.VoucherJournal            = _projTrans.voucherOriginal();
        tmpProjAdjustment.LedgerDimension           = _projTrans.itemLedgerAccountLedgerDimension();
        tmpProjAdjustment.ItemType                  = _projTrans.itemType();
        tmpProjAdjustment.ProjIdentId               = _projTrans.projIdentId();
        tmpProjAdjustment.ProjIdentResource         = _projTrans.projIdentResource();
        tmpProjAdjustment.SalesUnit                 = _projTrans.salesUnit();
        tmpProjAdjustment.TotalCostAmountCur        = _projTrans.transCost();
        tmpProjAdjustment.TotalSalesAmountCur       = _projTrans.transTurnover();
        tmpProjAdjustment.TransDateAdjustment       = adjustmentDate;
        tmpProjAdjustment.ItemAdjustVersion         = _projTrans.itemAdjustVersion();
        tmpProjAdjustment.OriginCost                = _projTrans.originCost();
        tmpProjAdjustment.smaBasePrice              = _projTrans.smaBasePrice();
        tmpProjAdjustment.smaIndex                  = _projTrans.smaIndex();
        tmpProjAdjustment.smaEnddate                = _projTrans.smaEnddate();
        tmpProjAdjustment.smaStartDate              = _projTrans.smaStartDate();
        tmpProjAdjustment.smaSubscriptionId         = _projTrans.smaSubscriptionId();
        tmpProjAdjustment.smaSubscriptionPeriodType = _projTrans.smaSubscriptionPeriodType();
        tmpProjAdjustment.AdjustCorrection          = _projTrans.isCorrection();
        tmpProjAdjustment.Origin                    = _projTrans.origin();
        tmpProjAdjustment.RefTableId                = _projTrans.buffer().TableId;
        tmpProjAdjustment.RefRecId                  = _projTrans.buffer().RecId;
        tmpProjAdjustment.RefRecVersion             = _projTrans.buffer().RecVersion;
        tmpProjAdjustment.FromTime                  = _projTrans.fromTime();
        tmpProjAdjustment.ToTime                    = _projTrans.toTime();
        tmpProjAdjustment.IndirectCosts = 0.0; 
        tmpProjAdjustment.IndirectSales = 0.0;
        tmpProjAdjustment.NewTotalCostAmount = tmpProjAdjustment.TotalCostAmountCur;
        tmpProjAdjustment.NewTotalSaleAmount = tmpProjAdjustment.TotalSalesAmountCur;
        tmpProjAdjustment.Qty                       = this.getAdjustmentQty();

        if (tmpProjAdjustment.checkAdjustmentType(ProjAdjustmentType::Hour))
        {
            tProjEmplTrans = ProjEmplTrans::find(_projTrans.transId());
            tmpProjAdjustment.psaIndirectComponentGroup = tProjEmplTrans.psaIndirectComponentGroup;
            tmpProjAdjustment.IndirectCosts = tProjEmplTrans.psaIndirectCostAmount();
            tmpProjAdjustment.IndirectSales = tProjEmplTrans.psaIndirectSalesAmount();
            tmpProjAdjustment.NewTotalCostAmount = tProjEmplTrans.psaIndirectCostTotal();
            tmpProjAdjustment.NewTotalSaleAmount = tProjEmplTrans.psaIndirectSalesTotal();
        }

        //  Tag the adjustment record if this is an intercompany transaction
        if (tmpProjAdjustment.checkAdjustmentType(ProjAdjustmentType::Hour))
        {
            if (tProjEmplTrans.RecId == 0)
            {
                tProjEmplTrans = ProjEmplTrans::find(_projTrans.transId());
            }
            if (tProjEmplTrans.Resource && ResourceFacade::getLegalEntity(tProjEmplTrans.Resource) != CompanyInfo::current())
            {
                tmpProjAdjustment.IsIntercompany = NoYes::Yes;
            }
        }

        if (tmpProjAdjustment.OriginCost == ProjOrigin::ExpenseManagement)
        {
            tmpProjAdjustment.Module                    = ModuleAxapta::Expense;
        }
        else
        {
            tmpProjAdjustment.Module                    = ModuleAxapta::Project;
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            if (tmpProjAdjustment.checkAdjustmentType(ProjAdjustmentType::Item))
            {
                tmpProjAdjustment.tdsGroup_IN               = _projTrans.tdsGroup_IN();
                tmpProjAdjustment.tcsGroup_IN               = _projTrans.tcsGroup_IN();
            }

            tmpProjAdjustment.AssessableValue_IN            = _projTrans.assessableValue_IN();
            tmpProjAdjustment.MaximumRetailPrice_IN         = _projTrans.maximumRetailPrice_IN();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns adjustment quantity based on adjustment transaction type.
    /// </summary>
    /// <returns>The adjustment quantity.</returns>
    protected ProjQtyCost getAdjustmentQty()
    {
        ProjQtyCost qty;
        switch (tmpProjAdjustment.AdjustmentType)
        {
            case ProjAdjustmentType::Hour:
                qty = ProjEmplTrans::find(tmpProjAdjustment.TransId).Qty;
                break;
            case ProjAdjustmentType::Cost:
                qty = ProjCostTrans::find(tmpProjAdjustment.TransId).Qty;
                break;
            case ProjAdjustmentType::Revenue:
                qty = ProjRevenueTrans::find(tmpProjAdjustment.TransId).Qty;
                break;
            case ProjAdjustmentType::Item:
                qty = ProjItemTrans::find(tmpProjAdjustment.TransId).Qty;
                break;
        }
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates and inserts a new project cost transaction adjustment.
    /// </summary>
    /// <param name = "_projTrans">The transaction being adjusted.</param>
    protected void doTransCost(ProjTrans _projTrans)
    {
        this.initTransCost(_projTrans);
        tmpProjAdjustmentCost.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TmpProjAdjustmentCost</c> record held in class member tmpProjAdjustmentCost.
    /// </summary>
    /// <param name = "_projTrans">The transaction being adjusted.</param>
    protected void initTransCost(ProjTrans _projTrans)
    {
        tmpProjAdjustmentCost.clear();
        tmpProjAdjustmentCost.TransId              = _projTrans.transId();
        tmpProjAdjustmentCost.CostRefRecId         = _projTrans.recId();
        tmpProjAdjustmentCost.CostPrice            = _projTrans.costPrice();
        tmpProjAdjustmentCost.LedgerStatusCost     = _projTrans.ledgerStatusCost();
        tmpProjAdjustmentCost.TransStatus          = _projTrans.transStatus();
        tmpProjAdjustmentCost.FundingSource        = _projTrans.fundingSource();
        tmpProjAdjustmentCost.LineAmount           = _projTrans.transCost();
        tmpProjAdjustmentCost.DefaultDimension     = _projTrans.defaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates and inserts a new project sale transaction adjustment.
    /// </summary>
    /// <param name = "_projTrans">The transaction being adjusted.</param>
    protected void doTransSale(ProjTrans _projTrans)
    {
        this.initTransSale(_projTrans);
        tmpProjAdjustmentSale.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TmpProjAdjustmentSale</c> record held in class member tmpProjAdjustmentSale.
    /// </summary>
    /// <param name = "_projTrans">The transaction being adjusted.</param>
    protected void initTransSale(ProjTrans _projTrans)
    {
        tmpProjAdjustmentSale.clear();
        tmpProjAdjustmentSale.TransId              = _projTrans.transId();
        tmpProjAdjustmentSale.SaleRefRecId         = _projTrans.recId();
        tmpProjAdjustmentSale.SalesPrice           = _projTrans.salesPrice();
        tmpProjAdjustmentSale.LineAmount           = _projTrans.transTurnover();
        tmpProjAdjustmentSale.LedgerSalesPosted    = _projTrans.ledgerSalesPosted();
        tmpProjAdjustmentSale.LedgerSalesAmountMST = _projTrans.ledgerSalesAmountMST();
        tmpProjAdjustmentSale.FundingSource        = _projTrans.fundingSource();
        tmpProjAdjustmentSale.TransStatus          = _projTrans.transStatus();
        tmpProjAdjustmentSale.DefaultDimension     = _projTrans.defaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (! projTransIdList)
        {
            this.parmQueryEmpl(dialogEmpl.value());
            this.parmQueryCost(dialogCost.value());
            this.parmQueryRevenue(dialogRevenue.value());
            this.parmQuerySubscription(dialogSubscription.value());
            this.parmQueryItem(dialogItem.value());

            this.parmFromDate(dialogFromDate.value());
            this.parmtoDate(dialogToDate.value());
        }

        this.parmAdjustmentDate(dialogAdjustmentDate.value());

        if (!projTransIdList)
        {
            this.parmQueryOnHoldFundingOnly(dfOnHoldFundingOnly.value());
        }

        this.parmQueryPosted(dfPostedTransStatus.value());
        this.parmQueryInvoiceProposal(dfInvoiceProposalTransStatus.value());
        this.parmQueryInvoiced(dfInvoicedTransStatus.value());
        this.parmQueryEstimated(dfEstimatedTransStatus.value());
        this.parmQueryEliminated(dfEliminatedTransStatus.value());

        if (!this.enableProjMultipleContractLinesForProjectFeature && ((!projTransIdList && !projId) || (projId && strFind(projId, '*', strLen(projId), 1))))
        {
            this.parmQueryTimeMaterial(dfTimeMaterialProjectType.value());
            this.parmQueryFixedPrice(dfFixedPriceProjectType.value());
            this.parmQueryInvestment(dfInvestmentProjectType.value());
            this.parmQueryInternal(dfInternalProjectType.value());
            this.parmQueryTime(dfTimeProjectType.value());
        }

        if (! projTransIdList)
        {
            this.parmQueryNonChargeable(dfNonchargeableLineProperty.value());
            this.parmQueryChargeable(dfChargeableLineProperty.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueDesignName()
    {
        IdentifierName  ret;

        ret = super();
        if (name)
        {
            ret = name;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.queryBuild();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuery</Name>
				<Source><![CDATA[
    protected Query newQuery(
    TableId     _tableIdHeader,
    FieldId     _fieldIdTransId,
    FieldId     _fieldIdAdjRefTransId,
    FieldId     _fieldIdLinePropertyId,
    FieldId     _fieldIdTransDate,
    TableId     _tableIdCost,
    FieldId     _fieldIdCostTransStatus,
    TableId     _tableIdSale,
    FieldId     _fieldIdSaleTransStatus)
    {
        Query                   query;
        QueryBuildDataSource    qbdsHeader;
        QueryBuildDataSource    qbdsCost;
        QueryBuildDataSource    qbdsSale;


        //Query

        query = new Query();
        query.queryType(QueryType::Union);

        //Cost and sales
        qbdsHeader = query.addDataSource(_tableIdHeader);
        this.addHeaderRange(
        qbdsHeader,
        _fieldIdTransId,
        _fieldIdAdjRefTransId,
        _fieldIdLinePropertyId,
        _fieldIdTransDate
        );
        this.addAdditionalHeaderRange(qbdsHeader, _tableIdHeader);

        if (_tableIdCost)
        {
            this.addAmountDataSource(
            qbdsHeader,
            _tableIdCost,
            _fieldIdCostTransStatus,
            ProjCostSales::Cost
            );
        }

        this.addAmountDataSource(
        qbdsHeader,
        _tableIdSale,
        _fieldIdSaleTransStatus,
        ProjCostSales::Sales
        );

        //Cost and no sales
        if (_tableIdCost)
        {
            qbdsHeader = query.addDataSource(_tableIdHeader, "", UnionType::Union);
            this.addHeaderRange(
            qbdsHeader,
            _fieldIdTransId,
            _fieldIdAdjRefTransId,
            _fieldIdLinePropertyId,
            _fieldIdTransDate
            );
            this.addAdditionalHeaderRange(qbdsHeader, _tableIdHeader);

            this.addAmountDataSource(
            qbdsHeader,
            _tableIdCost,
            _fieldIdCostTransStatus,
            ProjCostSales::Cost
            );

            qbdsSale = qbdsHeader.addDataSource(_tableIdSale);
            qbdsSale.relations(true);
            qbdsSale.joinMode(JoinMode::NoExistsJoin);
        }

        //Sales and no cost
        if (_tableIdCost)
        {
            qbdsHeader = query.addDataSource(_tableIdHeader, "", UnionType::Union);
            this.addHeaderRange(
            qbdsHeader,
            _fieldIdTransId,
            _fieldIdAdjRefTransId,
            _fieldIdLinePropertyId,
            _fieldIdTransDate
            );
            this.addAdditionalHeaderRange(qbdsHeader, _tableIdHeader);

            this.addAmountDataSource(
            qbdsHeader,
            _tableIdSale,
            _fieldIdSaleTransStatus,
            ProjCostSales::Sales
            );

            qbdsCost = qbdsHeader.addDataSource(_tableIdCost);
            qbdsCost.relations(true);
            qbdsCost.joinMode(JoinMode::NoExistsJoin);
        }

        //No cost and sales
        if (ProjParameters::find().PostedStatus)
        {
            qbdsHeader = query.addDataSource(_tableIdHeader, "", UnionType::Union);
            this.addHeaderRange(
            qbdsHeader,
            _fieldIdTransId,
            _fieldIdAdjRefTransId,
            _fieldIdLinePropertyId,
            _fieldIdTransDate
            );
            this.addAdditionalHeaderRange(qbdsHeader, _tableIdHeader);

            if (_tableIdCost)
            {
                qbdsCost = qbdsHeader.addDataSource(_tableIdCost);
                qbdsCost.relations(true);
                qbdsCost.joinMode(JoinMode::NoExistsJoin);
            }

            qbdsSale = qbdsHeader.addDataSource(_tableIdSale);
            qbdsSale.relations(true);
            qbdsSale.joinMode(JoinMode::NoExistsJoin);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalHeaderRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds additional query ranges to a query.
    /// </summary>
    /// <param name = "_qbdsHeader">The <c>QueryBuildDataSource</c> instance for the query.</param>
    /// <param name = "_tableIdHeader">The table to which to apply the range.</param>
    protected void addAdditionalHeaderRange(QueryBuildDataSource _qbdsHeader, TableId _tableIdHeader)
    {
        switch (_tableIdHeader)
        {
            case tableNum(ProjItemTrans):
                _qbdsHeader.addRange(fieldNum(ProjItemTrans, TransactionOrigin)).value(queryValue(ProjOrigin::ItemRequirement));
                _qbdsHeader.addRange(fieldNum(ProjItemTrans, TransactionOrigin)).value(queryValue(ProjOrigin::ItemJournal));
                _qbdsHeader.addRange(fieldNum(ProjItemTrans, TransactionOrigin)).value(queryValue(ProjOrigin::PurchaseOrder));
                _qbdsHeader.addRange(fieldNum(ProjItemTrans, TransactionOrigin)).value(queryValue(ProjOrigin::VendorInvoice));
                _qbdsHeader.addRange(fieldNum(ProjItemTrans, TransactionOrigin)).value(queryValue(ProjOrigin::ProductionFinished));
                _qbdsHeader.addRange(fieldNum(ProjItemTrans, TransactionOrigin)).value(queryValue(ProjOrigin::ProductionConsumed));
                break;

            case tableNum(ProjRevenueTrans):
                if (this.parmQuerySubscription())
                {
                    _qbdsHeader.addRange(fieldNum(ProjRevenueTrans, TransactionOrigin)).value(strFmt('%1',queryValue(ProjOrigin::Subscription)));
                }

                if (this.parmQueryRevenue())
                {
                    _qbdsHeader.addRange(fieldNum(ProjRevenueTrans, TransactionOrigin)).value(strFmt('%1', queryValue(ProjOrigin::FeeJournal)));
                    _qbdsHeader.addRange(fieldNum(ProjRevenueTrans, TransactionOrigin)).value(strFmt('%1', queryValue(ProjOrigin::ProjAdvancedJournal)));
                    _qbdsHeader.addRange(fieldNum(ProjRevenueTrans, TransactionOrigin)).value(strFmt('%1', queryValue(ProjOrigin::FreeTextInvoice)));
                    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                    {
                        _qbdsHeader.addRange(fieldNum(ProjRevenueTrans, TransactionOrigin)).value(strFmt('%1', queryValue(ProjOrigin::AdvancedLedgerEntry)));
                    }
                }

                if (this.parmQueryEstimated() || this.parmQueryEliminated())
                {
                    _qbdsHeader.addRange(fieldNum(ProjRevenueTrans, TransactionOrigin)).value(strFmt('%1', queryValue(ProjOrigin::EstimateFee)));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustmentDate</Name>
				<Source><![CDATA[
    public TransDate parmAdjustmentDate(TransDate   _adjustmentDate  = adjustmentDate)
    {
        adjustmentDate   = _adjustmentDate;

        return adjustmentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate   _fromDate  = fromDate)
    {
        fromDate   = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public Name parmName(Name   _name  = name)
    {
        name   = _name;

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId   _projId  = projId)
    {
        projId   = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceId</Name>
				<Source><![CDATA[
    public ProjInvoiceId parmProjInvoiceId(ProjInvoiceId   _projInvoiceId  = projInvoiceId)
    {
        projInvoiceId   = _projInvoiceId;

        return projInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjWIPId</Name>
				<Source><![CDATA[
    public ProjWipId parmProjWIPId(ProjWipId   _projWipId  = projWipId)
    {
        projWipId   = _projWipId;

        return projWipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryChargeable</Name>
				<Source><![CDATA[
    public ProjOptionChargeable parmQueryChargeable(ProjOptionChargeable   _queryChargeable  = queryChargeableLineProperty)
    {
        queryChargeableLineProperty   = _queryChargeable;

        return queryChargeableLineProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryCost</Name>
				<Source><![CDATA[
    public ProjOptionHours parmQueryCost(ProjOptionHours   _querycost  = queryCost)
    {
        queryCost   = _querycost;

        return queryCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryEliminated</Name>
				<Source><![CDATA[
    public ProjOptionEliminated parmQueryEliminated(ProjOptionEliminated   _queryEliminated  = queryEliminatedTransStatus)
    {
        queryEliminatedTransStatus   = _queryEliminated;

        return queryEliminatedTransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryEmpl</Name>
				<Source><![CDATA[
    public ProjOptionHours parmQueryEmpl(ProjOptionHours   _queryEmpl  = queryEmpl)
    {
        queryEmpl   = _queryEmpl;

        return queryEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryEstimated</Name>
				<Source><![CDATA[
    public ProjOptionEstimated parmQueryEstimated(ProjOptionEstimated   _queryEstimated  = queryEstimatedTransStatus)
    {
        queryEstimatedTransStatus   = _queryEstimated;

        return queryEstimatedTransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryFixedPrice</Name>
				<Source><![CDATA[
    public ProjOptionFixedPrice parmQueryFixedPrice(ProjOptionFixedPrice _queryFixedPrice = queryFixedPriceProjectType)
    {
        queryFixedPriceProjectType = _queryFixedPrice;

        return queryFixedPriceProjectType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryInternal</Name>
				<Source><![CDATA[
    public ProjOptionInternal parmQueryInternal(ProjOptionInternal _queryInternal = queryInternalProjectType)
    {
        queryInternalProjectType = _queryInternal;

        return queryInternalProjectType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryInvestment</Name>
				<Source><![CDATA[
    public ProjOptionInvestment parmQueryInvestment(ProjOptionInvestment _queryInvestment = queryInvestmentProjectType)
    {
        queryInvestmentProjectType = _queryInvestment;

        return queryInvestmentProjectType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryInvoiced</Name>
				<Source><![CDATA[
    public ProjOptionInvoiced parmQueryInvoiced(ProjOptionInvoiced   _queryInvoiced  = queryInvoicedTransStatus)
    {
        queryInvoicedTransStatus   = _queryInvoiced;

        return queryInvoicedTransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryInvoiceProposal</Name>
				<Source><![CDATA[
    public ProjOptionInvoiceProposal parmQueryInvoiceProposal(ProjOptionInvoiceProposal   _queryInvoiceProposal  = queryInvoiceProposalTransStatus)
    {
        queryInvoiceProposalTransStatus   = _queryInvoiceProposal;

        return queryInvoiceProposalTransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryItem</Name>
				<Source><![CDATA[
    public ProjOptionHours parmQueryItem(ProjOptionHours   _queryItem  = queryItem)
    {
        queryItem   = _queryItem;

        return queryItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryNonChargeable</Name>
				<Source><![CDATA[
    public ProjOptionNonChargeable parmQueryNonChargeable(ProjOptionNonChargeable   _queryNonChargeable  = queryNonchargeableLineProperty)
    {
        queryNonchargeableLineProperty   = _queryNonChargeable;

        return queryNonchargeableLineProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryOnHoldFundingOnly</Name>
				<Source><![CDATA[
    public NoYesId parmQueryOnHoldFundingOnly(NoYesId   _dfOnHoldFundingOnly  = queryOnHoldFundingOnly)
    {
        queryOnHoldFundingOnly   = _dfOnHoldFundingOnly;

        return queryOnHoldFundingOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryPosted</Name>
				<Source><![CDATA[
    public ProjOptionPosted parmQueryPosted(ProjOptionPosted   _queryPosted  = queryPostedTransStatus)
    {
        queryPostedTransStatus   = _queryPosted;

        return queryPostedTransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRevenue</Name>
				<Source><![CDATA[
    public ProjOptionHours parmQueryRevenue(ProjOptionHours   _queryRevenue  = queryRevenue)
    {
        queryRevenue   = _queryRevenue;

        return queryRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuerySubscription</Name>
				<Source><![CDATA[
    public SMAProjoptionSubscription parmQuerySubscription(ProjOptionHours   _querySubscription  = querySubscription)
    {
        querySubscription   = _querySubscription;

        return querySubscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryTime</Name>
				<Source><![CDATA[
    public ProjOptionTime parmQueryTime(ProjOptionTime _queryTime = queryTimeProjectType)
    {
        queryTimeProjectType = _queryTime;

        return queryTimeProjectType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryTimeMaterial</Name>
				<Source><![CDATA[
    public ProjOptionTM parmQueryTimeMaterial(ProjOptionTM _queryTimeMaterial = queryTimeMaterialProjectType)
    {
        queryTimeMaterialProjectType = _queryTimeMaterial;

        return queryTimeMaterialProjectType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmtoDate</Name>
				<Source><![CDATA[
    public ToDate parmtoDate(ToDate   _toDate  = toDate)
    {
        toDate   = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransIdList</Name>
				<Source><![CDATA[
    container parmTransIdList(container _transIdList  = projTransIdList)
    {
        projTransIdList = _transIdList;

        return projTransIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjCostTrans</Name>
				<Source><![CDATA[
    protected void processProjCostTrans()
    {
        ProjTrans               projTrans;
        ProjTrans               projTransCost;
        ProjTrans               projTransSale;
        ProjCostTransCost       projCostTransCost;
        ProjCostTransSale       projCostTransSale;

        projTrans = ProjTrans::newProjCostTrans(projCostTrans);
        if (projTrans.adjustable() && !this.isAdjustmentInProcess(ProjAdjustmentType::Cost, projCostTrans.TransId))
        {
            this.doTrans(projTrans,ProjAdjustmentType::Cost,projCostTrans.CurrencyIdCost);

            while select projCostTransCost
            where projCostTransCost.TransId == projCostTrans.TransId
            {
                projTransCost = ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCost);
                this.doTransCost(projTransCost);
            }

            while select projCostTransSale
            where projCostTransSale.TransId == projCostTrans.TransId
            {
                projTransSale = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale);
                this.doTransSale(projTransSale);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjEmplTrans</Name>
				<Source><![CDATA[
    protected void processProjEmplTrans()
    {
        ProjTrans               projTrans;
        ProjTrans               projTransCost;
        ProjTrans               projTransSale;
        ProjEmplTransCost       projEmplTransCost;
        ProjEmplTransSale       projEmplTransSale;

        projTrans = ProjTrans::newProjEmplTrans(projEmplTrans);
        if (projTrans.adjustable() && !this.isAdjustmentInProcess(ProjAdjustmentType::Hour, projEmplTrans.TransId))
        {
            this.doTrans(projTrans,ProjAdjustmentType::Hour);

            while select projEmplTransCost
            where projEmplTransCost.TransId == projEmplTrans.TransId
            {
                projTransCost = ProjTrans::newProjEmplTransCost(projEmplTrans, projEmplTransCost);
                this.doTransCost(projTransCost);
            }

            while select projEmplTransSale
            where projEmplTransSale.TransId == projEmplTrans.TransId
            {
                projTransSale = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale);
                this.doTransSale(projTransSale);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjItemTrans</Name>
				<Source><![CDATA[
    protected void processProjItemTrans()
    {
        ProjTrans               projTrans;
        ProjTrans               projTransCost;
        ProjTrans               projTransSale;
        ProjItemTransCost       projItemTransCost;
        ProjItemTransSale       projItemTransSale;

        projTrans = ProjTrans::newProjItemTrans(projItemTrans);
        if (projTrans.adjustable() && !this.isAdjustmentInProcess(ProjAdjustmentType::Item, projItemTrans.ProjTransId))
        {
            this.doTrans(projTrans,ProjAdjustmentType::Item,projItemTrans.CurrencyId);

            while select projItemTransCost
            where projItemTransCost.InventTransId == projItemTrans.InventTransId &&
                projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
            {
                projTransCost = ProjTrans::newProjItemTransCost(projItemTransCost);
                this.doTransCost(projTransCost);
            }

            while select projItemTransSale
            where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
            {
                projTransSale = ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale);
                this.doTransSale(projTransSale);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjRevenueTrans</Name>
				<Source><![CDATA[
    protected void processProjRevenueTrans()
    {
        ProjTrans               projTrans;
        ProjTrans               projTransSale;
        ProjRevenueTransSale    projRevenueTransSale;

        projTrans = ProjTrans::newProjRevenueTrans(projRevenueTrans);
        if (projTrans.adjustable() && !this.isAdjustmentInProcess(ProjAdjustmentType::Revenue, projRevenueTrans.TransId))
        {
            this.doTrans(projTrans,ProjAdjustmentType::Revenue);

            while select projRevenueTransSale
            where projRevenueTransSale.TransId == projRevenueTrans.TransId
            {
                projTransSale = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale);
                this.doTransSale(projTransSale);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    private QueryRun queryBuild()
    {
        queryRun = new QueryRun(queryStr(ProjAdjustmentSelect));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFromDate</Name>
				<Source><![CDATA[
    private str queryFromDate()
    {
        return queryValue(fromDate ? fromDate : dateNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProjCostTrans</Name>
				<Source><![CDATA[
    private Query queryProjCostTrans()
    {
        categoryIdFieldId = fieldNum(ProjCostTrans, CategoryId);

        Query costQuery =  this.newQuery(
            tableNum(ProjCostTrans),
            fieldNum(ProjCostTrans, TransId),
            fieldNum(ProjCostTrans, AdjRefTransId),
            fieldNum(ProjCostTrans, LinePropertyId),
            fieldNum(ProjCostTrans, TransDate),
            tableNum(ProjCostTransCost),
            fieldNum(ProjCostTransCost, TransStatus),
            tableNum(ProjCostTransSale),
            fieldNum(ProjCostTransSale, TransStatus));

        return costQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProjEmplTrans</Name>
				<Source><![CDATA[
    private Query queryProjEmplTrans()
    {
        categoryIdFieldId = fieldNum(ProjEmplTrans, CategoryId);

         Query emplQuery = this.newQuery(
            tableNum(ProjEmplTrans),
            fieldNum(ProjEmplTrans, TransId),
            fieldNum(ProjEmplTrans, AdjRefTransId),
            fieldNum(ProjEmplTrans, LinePropertyId),
            fieldNum(ProjEmplTrans, TransDate),
            tableNum(ProjEmplTransCost),
            fieldNum(ProjEmplTransCost, TransStatus),
            tableNum(ProjEmplTransSale),
            fieldNum(ProjEmplTransSale, TransStatus));


        return emplQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProjItemTrans</Name>
				<Source><![CDATA[
    private Query queryProjItemTrans()
    {
        categoryIdFieldId = fieldNum(ProjItemTrans, CategoryId);

        Query itemQuery = this.newQuery(
            tableNum(ProjItemTrans),
            fieldNum(ProjItemTrans, ProjTransId),
            fieldNum(ProjItemTrans, AdjRefTransId),
            fieldNum(ProjItemTrans, LinePropertyId),
            fieldNum(ProjItemTrans, TransDate),
            tableNum(ProjItemTransCost),
            fieldNum(ProjItemTransCost, TransStatus),
            tableNum(ProjItemTransSale),
            fieldNum(ProjItemTransSale, TransStatus));

        return itemQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProjRevenueTrans</Name>
				<Source><![CDATA[
    private Query queryProjRevenueTrans()
    {
        categoryIdFieldId = fieldNum(ProjRevenueTrans, CategoryId);

        Query revenueQuery = this.newQuery(
            tableNum(ProjRevenueTrans),
            fieldNum(ProjRevenueTrans, TransId),
            fieldNum(ProjRevenueTrans, AdjRefTransId),
            fieldNum(ProjRevenueTrans, LinePropertyId),
            fieldNum(ProjRevenueTrans, TransDate),
            0,
            0,
            tableNum(ProjRevenueTransSale),
            fieldNum(ProjRevenueTransSale, TransStatus));

        return revenueQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryToDate</Name>
				<Source><![CDATA[
    private str queryToDate()
    {
        return queryValue(toDate ? toDate : dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeTransId</Name>
				<Source><![CDATA[
    void rangeTransId(QueryBuildDataSource dataSource)
    {
        ProjTrans       projTrans;
        Common          commonTrans;
        List            list;
        ListIterator    li;
        QueryBuildRange queryRangeTransId;

        if (! this.parmTransIdList())
        {
            return;
        }

        list = List::create(this.parmTransIdList());
        li = new ListIterator(list);

#localMacro.clearRange
        queryRangeTransId    = dataSource.findRange(fieldnum(%1,TransId));

        while (queryRangeTransId)
        {
            dataSource.clearRange(fieldnum(%1,TransId));
            queryRangeTransId    = dataSource.findRange(fieldnum(%1,TransId));
        }
        #endMacro

        #localMacro.clearRangeItem
        queryRangeTransId    = dataSource.findRange(fieldnum(%1,projTransId));

        while (queryRangeTransId)
        {
            dataSource.clearRange(fieldnum(%1,projTransId));
            queryRangeTransId    = dataSource.findRange(fieldnum(%1,projTransId));
        }
#endMacro

#localMacro.addRange
        li.begin();

        while (li.more())
        {
            commonTrans = li.value();
            projTrans   = ProjTrans::construct(commonTrans);
            li.next();
            if (projTrans.adjustable() && projTrans.tableId() == tableNum(%1))
            {
                dataSource.addRange(fieldnum(%1,TransId)).value(projTrans.transId());
            }
        }

        queryRangeTransId    = dataSource.findRange(fieldnum(%1,TransId));
        if (! queryRangeTransId)
        {
            dataSource.addRange(fieldnum(%1,TransId)).value(sysQuery::valueEmptyString());
        }

        break;
#endMacro

#localMacro.addRangeItem
        li.begin();

        while (li.more())
        {
            commonTrans = li.value();
            projTrans   = ProjTrans::construct(commonTrans);
            li.next();
            if (projTrans.adjustable() && projTrans.tableId() == tableNum(%1))
            {
                dataSource.addRange(fieldnum(%1,projTransId)).value(projTrans.transId());
            }
        }

        queryRangeTransId    = dataSource.findRange(fieldnum(%1,projTransId));
        if (! queryRangeTransId)
        {
            dataSource.addRange(fieldnum(%1,projTransId)).value(sysQuery::valueEmptyString());
        }
        break;
#endMacro

        // When the feature is enabled, the range will be added as a table join to the query instead
        // of adding as range values to the TransID field. The list of values can cause a SQL buffer overflow
        // on the query generated.
        if(!isEnabledProjPostedTransMultiSelectFeature)
        {
            switch (dataSource.table())
            {
                case (tableNum(ProjCostTrans)):
                    #clearRange(ProjCostTrans)
                    #addRange(ProjCostTrans)

                case (tableNum(ProjEmplTrans)):
                    #clearRange(ProjEmplTrans)
                    #addRange(ProjEmplTrans)

                case (tableNum(ProjItemTrans)):
                    #clearRangeItem(ProjItemTrans)
                    #addRangeItem(ProjItemTrans)

                case (tableNum(ProjRevenueTrans)):
                    #clearRange(ProjRevenueTrans)
                    #addRange(ProjRevenueTrans)

                case (tableNum(ProjOnAccTrans)):
                    #clearRange(ProjOnAccTrans)
                    #addRange(ProjOnAccTrans)
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {            
            this.processProjTrans();
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        catch (Exception::Error)
        {
            // Update has been canceled.
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProjTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates adjustment records based on selections made in the dialog displayed by this class.
    /// </summary>
    protected void processProjTrans()
    {
        QueryRun localQueryRun;
        TmpProjListOfTransId tmpProjListOfTransId;

        if (this.parmTransIdList() && isEnabledProjPostedTransMultiSelectFeature)
        {
            this.initializeTmpProjListOfTransId(tmpProjListOfTransId);
        }

        if (this.parmQueryEmpl())
        {
            Query projEmplTransQuery = this.queryProjEmplTrans(); 
            if (usingTmpProjListOfTransIdTable)
            {
                this.addTmpProjListOfTransIdToQuery(projEmplTransQuery, tableNum(ProjEmplTrans), tmpProjListOfTransId);
            }

            localQueryRun = new QueryRun(projEmplTransQuery);
            if (usingTmpProjListOfTransIdTable)
            {
                this.setTmpProjListOfTransIDCursors(projEmplTransQuery, localQueryRun, tmpProjListOfTransId);
            }
            while (localQueryRun.next())
            {
                if (localQueryRun.changed(tableNum(ProjEmplTrans)))
                {
                    projEmplTrans = localQueryRun.get(tableNum(ProjEmplTrans));
                    this.processProjEmplTrans();
                }
            }
        }

        if (this.parmQueryCost())
        {
            Query projCostTransQuery = this.queryProjCostTrans();
            if (usingTmpProjListOfTransIdTable)
            {
                this.addTmpProjListOfTransIdToQuery(projCostTransQuery, tableNum(ProjCostTrans), tmpProjListOfTransId);
            }

            localQueryRun = new QueryRun(projCostTransQuery);
            if (usingTmpProjListOfTransIdTable)
            {
                this.setTmpProjListOfTransIDCursors(projCostTransQuery, localQueryRun, tmpProjListOfTransId);
            }
            while (localQueryRun.next())
            {
                if (localQueryRun.changed(tableNum(ProjCostTrans)))
                {
                    projCostTrans = localQueryRun.get(tableNum(ProjCostTrans));
                    this.processProjCostTrans();
                }
            }
        }

        if (this.parmQueryRevenue() || this.parmQuerySubscription())
        {
            Query projRevenueTransQuery = this.queryProjRevenueTrans();
            if (usingTmpProjListOfTransIdTable)
            {
                this.addTmpProjListOfTransIdToQuery(projRevenueTransQuery, tableNum(ProjRevenueTrans), tmpProjListOfTransId);
            }

            localQueryRun = new QueryRun(projRevenueTransQuery);
            if (usingTmpProjListOfTransIdTable)
            {
                this.setTmpProjListOfTransIDCursors(projRevenueTransQuery, localQueryRun, tmpProjListOfTransId);
            }
            while (localQueryRun.next())
            {
                if (localQueryRun.changed(tableNum(ProjRevenueTrans)))
                {
                    projRevenueTrans = localQueryRun.get(tableNum(ProjRevenueTrans));
                    this.processProjRevenueTrans();
                }
            }
        }

        if (this.parmQueryItem())
        {
            Query projItemTransQuery = this.queryProjItemTrans();
            if (usingTmpProjListOfTransIdTable)
            {
                this.addTmpProjListOfTransIdToQuery(projItemTransQuery, tableNum(ProjItemTrans), tmpProjListOfTransId);
            }

            localQueryRun = new QueryRun(projItemTransQuery);
            if (usingTmpProjListOfTransIdTable)
            {
                this.setTmpProjListOfTransIDCursors(projItemTransQuery, localQueryRun, tmpProjListOfTransId);
            }
            while (localQueryRun.next())
            {
                if (localQueryRun.changed(tableNum(ProjItemTrans)))
                {
                    projItemTrans = localQueryRun.get(tableNum(ProjItemTrans));
                    this.processProjItemTrans();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpProjListOfTransIDCursors</Name>
				<Source><![CDATA[
    private void setTmpProjListOfTransIDCursors(Query _projTransQuery, QueryRun _projTransQueryRun, TmpProjListOfTransId _tmpProjListOfTransId)
    {
        if (!ProjAdjustmentSelectMultiSelectQueryFlight::instance().isEnabled())
        {
            _projTransQueryRun.setCursor(_tmpProjListOfTransId);
            return;
        }

        for (int i = 1, occurrence = 1; i <= _projTransQuery.dataSourceCount(); i++)
        {
            if (_projTransQuery.dataSourceNo(i).table() == tableNum(TmpProjListOfTransId))
            {
                // Specify the temp table instance to join
                TmpProjListOfTransId tmpProjListOfTransIdLocal;
                tmpProjListOfTransIdLocal.linkPhysicalTableInstance(_tmpProjListOfTransId);
                _projTransQueryRun.setCursor(tmpProjListOfTransIdLocal, occurrence);
                occurrence++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRange</Name>
				<Source><![CDATA[
    void setQueryRange()
    {
        QueryBuildRange     queryRangeProjId;
        QueryBuildRange     queryRangeProjInvoiceId;
        QueryBuildRange     queryRangeProjWIPId;

        projDataSource          = queryRun.query().dataSourceTable(tableNum(ProjTable));

        queryRangeProjId        = queryRun.query().dataSourceTable(tableNum(ProjTable)).findRange(fieldNum(ProjTable,ProjId));
        queryRangeProjInvoiceId = queryRun.query().dataSourceTable(tableNum(ProjTable)).findRange(fieldNum(ProjTable,ProjInvoiceProjId));
        queryRangeProjWIPId     = queryRun.query().dataSourceTable(tableNum(ProjTable)).findRange(fieldNum(ProjTable,wipProject));

        if (queryRangeProjId)
        {
            queryRangeProjId.value(projId);
        }
        if (queryRangeProjInvoiceId)
        {
            queryRangeProjInvoiceId.value(projInvoiceId);
        }
        if (queryRangeProjWIPId)
        {
            queryRangeProjWIPId.value(projWipId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>QueryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjAdjustment</Name>
				<Source><![CDATA[
    public TmpProjAdjustment tmpProjAdjustment()
    {
        return tmpProjAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjAdjustmentCost</Name>
				<Source><![CDATA[
    public TmpProjAdjustmentCost tmpProjAdjustmentCost()
    {
        return tmpProjAdjustmentCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjAdjustmentSale</Name>
				<Source><![CDATA[
    public TmpProjAdjustmentSale tmpProjAdjustmentSale()
    {
        return tmpProjAdjustmentSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version     = RunBase::getVersion(packedClass);
        PackedQueryRun  packedQueryRun;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,packedQueryRun] = packedClass;
                if (packedQueryRun)
                {
                    queryRun = new QueryRun(packedQueryRun);
                }
                break;
            case 14 :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionTypeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that at least one transaction type has been selected.
    /// </summary>
    /// <returns>true if at least one transaction type has been selected; otherwise, false.</returns>
    protected boolean validateTransactionTypeSelected()
    {
        return (queryEmpl         == NoYes::Yes ||
                queryCost         == NoYes::Yes ||
                queryRevenue      == NoYes::Yes ||
                queryItem         == NoYes::Yes ||
                querySubscription == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectTypeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that at least one project type has been selected.
    /// </summary>
    /// <returns>true if at least one project type has been selected; otherwise, false.</returns>
    protected boolean validateProjectTypeSelected()
    {
        return (((this.parmTransIdList() || this.parmProjId()) &&
                 !(this.parmProjId() && strFind(this.parmProjId(), '*', strLen(this.parmProjId()), 1))) ||
                this.parmQueryTimeMaterial()    == NoYes::Yes ||
                this.parmQueryFixedPrice()      == NoYes::Yes ||
                this.parmQueryInvestment()      == NoYes::Yes ||
                this.parmQueryInternal()        == NoYes::Yes ||
                this.parmQueryTime()            == NoYes::Yes ||
                this.enableProjMultipleContractLinesForProjectFeature);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionStatusSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that at least one transaction status has been selected.
    /// </summary>
    /// <returns>true if at least one transaction status has been selected; otherwise, false.</returns>
    protected boolean validateTransactionStatusSelected()
    {
        return (this.parmQueryPosted()          == NoYes::Yes ||
                this.parmQueryInvoiceProposal() == NoYes::Yes ||
                this.parmQueryInvoiced()        == NoYes::Yes ||
                this.parmQueryEstimated()       == NoYes::Yes ||
                this.parmQueryEliminated()      == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLinePropertySelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that at least one line property has been selected.
    /// </summary>
    /// <returns>true if at least one line property has been selected; otherwise, false.</returns>
    protected boolean validateLinePropertySelected()
    {
        return (this.parmTransIdList() ||
                this.parmQueryChargeable()      == NoYes::Yes ||
                this.parmQueryNonChargeable()   == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDatesSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a valid date range has been selected.
    /// </summary>
    /// <returns>true if valid dates have been selected; otherwise, false.</returns>
    protected boolean validateDatesSelected()
    {
        return (!toDate || fromDate <= toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!this.validateTransactionTypeSelected())
        {
            // No transaction type selected
            ret = checkFailed("@SYS91027");
        }

        if (!this.validateProjectTypeSelected())
        {
            // No project type selected
            ret = checkFailed("@SYS91026");
        }

        if (!this.validateTransactionStatusSelected())
        {
            // No transaction status selected
            ret = checkFailed("@SYS133261");
        }

        if (!this.validateLinePropertySelected())
        {
            //  No line property selected
            ret = checkFailed("@SYS70031");
        }

        if (!this.validateDatesSelected())
        {
            ret = checkFailed("@SYS91020");
        }

        if (ret)
        {
            QueryBuildDataSource qbds = this.queryRun().query().dataSourceTable(tableNum(ProjTable));
            QueryBuildRange qbr = qbds.findRange(fieldNum(ProjTable, ProjId));

            if (!qbr || !qbr.value() || (qbr.value() == '*'))
            {
                // No project selected
                if (Box::YesNo("@Proj:ValidateMessageForAdjustmentDialog", DialogButton::Yes) == DialogButton::No)
                {
                    ret = false;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjAdjustmentSelect construct(ProjId          _projId,
                                                    ProjInvoiceId   _projInvoiceId,
                                                    ProjWipId       _projWipId,
                                                    boolean         _showChild = 0,
                                                    FromDate        _fromDate   = dateNull(),
                                                    ToDate          _toDate     = dateNull(),
                                                    Name            _name       = '')
    {
        ProjAdjustmentSelect projAdjustmentSelect;

        projAdjustmentSelect  = new ProjAdjustmentSelect();

        projAdjustmentSelect.parmName(_name);

        projAdjustmentSelect.getLast();

        _projId += (_showChild ? '*' : '');

        projAdjustmentSelect.parmProjId(_projId);
        projAdjustmentSelect.parmProjInvoiceId(_projInvoiceId);
        projAdjustmentSelect.parmProjWIPId(_projWipId);
        projAdjustmentSelect.parmFromDate(_fromDate);
        projAdjustmentSelect.parmtoDate(_toDate);
        projAdjustmentSelect.parmAdjustmentDate(_toDate ? _toDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        projAdjustmentSelect.setQueryRange();

        return projAdjustmentSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransIdList</Name>
				<Source><![CDATA[
    static List createTransIdList(Args     args)
    {
        List                        transIdList;
        FormDataSource              formDataSource;
        ProjCostTrans               projCostTrans;
        ProjEmplTrans               projEmplTrans;
        ProjItemTrans               projItemTrans;
        ProjOnAccTrans              projOnAccTrans;
        ProjRevenueTrans            projRevenueTrans;
        ProjProposalCostDetail      projProposalCostDetail;
        ProjProposalEmplDetail      projProposalEmplDetail;
        ProjProposalItemDetail      projProposalItemDetail;
        ProjProposalRevenueDetail   projProposalRevenueDetail;

        ProjPostTransView           projPostTransView;
        Args                        callerArgs;

        transIdList     = new List(Types::Record);

        if (args.caller())
        {
            callerArgs = args.caller().args();
        }

        if (callerArgs          &&
        callerArgs.caller() &&
       (callerArgs.caller().name() == formStr(projProjectTransactionsListPage) ||
        callerArgs.caller().name() == formStr(ProjGrantTransListPage)))
        {
            formDataSource  = callerArgs.caller().datasource(1);

            for (projPostTransView = formDataSource.getFirst(true) ?
             formDataSource.getFirst(true) : formDataSource.cursor();
            projPostTransView; projPostTransView = formDataSource.getNext())
            {
                switch (projPostTransView.ProjTransType)
                {
                    case ProjTransType::Item:
                        projItemTrans = ProjItemTrans::find(projPostTransView.TransId);
                        transIdList.addEnd(projItemTrans);
                        break;

                    case ProjTransType::Hour:
                        projEmplTrans = ProjEmplTrans::find(projPostTransView.TransId);
                        transIdList.addEnd(projEmplTrans);
                        break;

                    case ProjTransType::Cost:
                        projCostTrans = ProjCostTrans::find(projPostTransView.TransId);
                        transIdList.addEnd(projCostTrans);
                        break;

                    case ProjTransType::Revenue:
                        projRevenueTrans = ProjRevenueTrans::find(projPostTransView.TransId);
                        transIdList.addEnd(projRevenueTrans);
                        break;
                }
            }
        }
        else
        {
            formDataSource  = FormDataUtil::getFormDataSource(args.record());
            switch (args.dataset())
            {
                case tableNum(ProjCostTrans):
                    projCostTrans   = args.record();
                    if (formDataSource)
                    {
                        for (projCostTrans = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projCostTrans; projCostTrans = formDataSource.getNext())
                        {
                            transIdList.addEnd(projCostTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projCostTrans);
                    }
                    break;

                case tableNum(ProjEmplTrans):
                    projEmplTrans   = args.record();
                    if (formDataSource)
                    {
                        for (projEmplTrans = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projEmplTrans; projEmplTrans = formDataSource.getNext())
                        {
                            transIdList.addEnd(projEmplTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projEmplTrans);
                    }
                    break;

                case tableNum(ProjItemTrans):
                    projItemTrans   = args.record();
                    if (formDataSource)
                    {
                        for (projItemTrans = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projItemTrans; projItemTrans = formDataSource.getNext())
                        {
                            transIdList.addEnd(projItemTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projItemTrans);
                    }
                    break;

                case tableNum(ProjOnAccTrans):
                    projOnAccTrans   = args.record();
                    if (formDataSource)
                    {
                        for (projOnAccTrans = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projOnAccTrans; projOnAccTrans = formDataSource.getNext())
                        {
                            transIdList.addEnd(projOnAccTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projOnAccTrans);
                    }
                    break;

                case tableNum(ProjRevenueTrans):
                    projRevenueTrans   = args.record();
                    if (formDataSource)
                    {
                        for (projRevenueTrans = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projRevenueTrans; projRevenueTrans = formDataSource.getNext())
                        {
                            transIdList.addEnd(projRevenueTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projRevenueTrans);
                    }
                    break;

                case tableNum(ProjProposalCostDetail) :
                    projProposalCostDetail = args.record();
                    projCostTrans = ProjCostTransSale::find(projProposalCostDetail.SaleRefRecId).projCostTrans();
                    if (formDataSource)
                    {
                        for (projProposalCostDetail = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projProposalCostDetail; projProposalCostDetail = formDataSource.getNext())
                        {
                            projCostTrans = ProjCostTransSale::find(projProposalCostDetail.SaleRefRecId).projCostTrans();
                            transIdList.addEnd(projCostTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projCostTrans);
                    }
                    break;

                case tableNum(ProjProposalEmplDetail) :
                    projProposalEmplDetail   = args.record();
                    projEmplTrans = ProjEmplTransSale::find(projProposalEmplDetail.SaleRefRecId).projEmplTrans();
                    if (formDataSource)
                    {
                        for (projProposalEmplDetail = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projProposalEmplDetail; projProposalEmplDetail = formDataSource.getNext())
                        {
                            projEmplTrans = ProjEmplTransSale::find(projProposalEmplDetail.SaleRefRecId).projEmplTrans();
                            transIdList.addEnd(projEmplTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projEmplTrans);
                    }
                    break;

                case tableNum(ProjProposalItemDetail) :
                    projProposalItemDetail = args.record();
                    projItemTrans = ProjItemTransSale::find(projProposalItemDetail.SaleRefRecId).projItemTrans();
                    if (formDataSource)
                    {
                        for (projProposalItemDetail = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projProposalItemDetail; projProposalItemDetail = formDataSource.getNext())
                        {
                            projItemTrans = ProjItemTransSale::find(projProposalItemDetail.SaleRefRecId).projItemTrans();
                            transIdList.addEnd(projItemTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projItemTrans);
                    }
                    break;

                case tableNum(ProjProposalRevenueDetail) :
                    projProposalRevenueDetail = args.record();
                    projRevenueTrans = ProjRevenueTransSale::find(projProposalRevenueDetail.SaleRefRecId).projRevenueTrans();
                    if (formDataSource)
                    {
                        for (projProposalEmplDetail = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projProposalRevenueDetail; projProposalRevenueDetail = formDataSource.getNext())
                        {
                            projRevenueTrans = ProjRevenueTransSale::find(projProposalRevenueDetail.SaleRefRecId).projRevenueTrans();
                            transIdList.addEnd(projRevenueTrans);
                        }
                    }
                    else
                    {
                        transIdList.addEnd(projRevenueTrans);
                    }
                    break;

                case tableNum(ProjPostTransView) :
                    projPostTransView = args.record();
                    if (formDataSource)
                    {
                        for (projPostTransView = formDataSource.getFirst(true) ?
                         formDataSource.getFirst(true) : formDataSource.cursor();
                        projPostTransView; projPostTransView = formDataSource.getNext())
                        {
                            switch (projPostTransView.ProjTransType)
                            {
                                case ProjTransType::Item:
                                    projItemTrans = ProjItemTrans::find(projPostTransView.TransId);
                                    transIdList.addEnd(projItemTrans);
                                    break;

                                case ProjTransType::Hour:
                                    projEmplTrans = ProjEmplTrans::find(projPostTransView.TransId);
                                    transIdList.addEnd(projEmplTrans);
                                    break;

                                case ProjTransType::Cost:
                                    projCostTrans = ProjCostTrans::find(projPostTransView.TransId);
                                    transIdList.addEnd(projCostTrans);
                                    break;

                                case ProjTransType::Revenue:
                                    projRevenueTrans = ProjRevenueTrans::find(projPostTransView.TransId);
                                    transIdList.addEnd(projRevenueTrans);
                                    break;
                            }
                        }
                    }
                    else
                    {
                        switch (projPostTransView.ProjTransType)
                        {
                            case ProjTransType::Item:
                                projItemTrans = ProjItemTrans::find(projPostTransView.TransId);
                                transIdList.addEnd(projItemTrans);
                                break;

                            case ProjTransType::Hour:
                                projEmplTrans = ProjEmplTrans::find(projPostTransView.TransId);
                                transIdList.addEnd(projEmplTrans);
                                break;

                            case ProjTransType::Cost:
                                projCostTrans = ProjCostTrans::find(projPostTransView.TransId);
                                transIdList.addEnd(projCostTrans);
                                break;

                            case ProjTransType::Revenue:
                                projRevenueTrans = ProjRevenueTrans::find(projPostTransView.TransId);
                                transIdList.addEnd(projRevenueTrans);
                                break;
                        }
                    }
                    break;
            }
        }

        return transIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS54329";
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeLineProperty</Name>
				<Source><![CDATA[
    static str rangeLineProperty(NoYes toBeInvoiced)
    {
        str s1;
        str lproperty='';
        ProjLineProperty projLineProperty;
        boolean firstLineProperty = true;

        while select LinePropertyId from projLineProperty
            where projLineProperty.ToBeInvoiced == toBeInvoiced
        {
            if (firstLineProperty)
            {
                s1 += '(';
            }
            else
            {
                s1 += '||';
            }
            lproperty = projLineProperty.LinePropertyId;

            s1 += '(';
            s1 += strFmt('LinePropertyId == "%1"', lproperty);
            s1 += ')';

            firstLineProperty = false;
        }

        if (toBeInvoiced == NoYes::Yes)
        {
            s1 += '|| (LinePropertyId == "")';
        }
        if (lproperty)
        {
            s1 += ')';
        }
        if (!firstLineProperty)
        {
            s1 += ')';
        }
        return s1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdjustmentInProcess</Name>
				<Source><![CDATA[
    private boolean isAdjustmentInProcess(ProjAdjustmentType _adjustmentType, ProjTransIdBase _projTransId)
    {
        ProjAdjustmentInProcess adjustmentInProcess;

        select firstonly RecId from adjustmentInProcess where
                    adjustmentInProcess.AdjustmentType == _adjustmentType &&
                    adjustmentInProcess.TransId == _projTransId;

        return adjustmentInProcess.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTmpProjListOfTransId</Name>
				<Source><![CDATA[
    private void initializeTmpProjListOfTransId(TMPProjListOfTransId tmpProjListOfTransId)
    {
        if (!this.parmTransIdList())
        {
            return;
        }
        
        Common commonTrans;
        ProjTrans projTrans;

        List list= List::create(this.parmTransIdList());
        ListIterator li = new ListIterator(list);

        ttsbegin;
        li.begin();
        while (li.more())
        {
            commonTrans = li.value();
            projTrans   = ProjTrans::construct(commonTrans);
            tmpProjListOfTransId.TransId = projTrans.transId();
            tmpProjListOfTransId.insert();
            li.next();
        }
        ttscommit;

        usingTmpProjListOfTransIdTable = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpProjListOfTransIdToQuery</Name>
				<Source><![CDATA[
    private void addTmpProjListOfTransIdToQuery(Query _query, TableId _tableId, TmpProjListOfTransId _tmpProjListOfTransId)
    {
        FieldId transIdFieldId;

        switch (_tableId)
        {
            case tableNum(ProjEmplTrans):
                if (!ProjAdjustmentSelectMultiSelectQueryFlight::instance().isEnabled())
                {
                    QueryBuildDataSource emplTransDataSource = _query.dataSourceTable(tableNum(ProjEmplTrans));
                    this.addTmpProjListOfTransIdToDataSource(emplTransDataSource, fieldNum(ProjEmplTrans, TransId), _tmpProjListOfTransId);
                }
                transIdFieldId = fieldNum(ProjEmplTrans, TransId);
                break;

            case tableNum(ProjCostTrans):
                if (!ProjAdjustmentSelectMultiSelectQueryFlight::instance().isEnabled())
                {
                    QueryBuildDataSource costTransDataSource = _query.dataSourceTable(tableNum(ProjCostTrans));
                    this.addTmpProjListOfTransIdToDataSource(costTransDataSource, fieldNum(ProjCostTrans, TransId), _tmpProjListOfTransId);
                }
                transIdFieldId = fieldNum(ProjCostTrans, TransId);
                break;

            case tableNum(ProjRevenueTrans):
                if (!ProjAdjustmentSelectMultiSelectQueryFlight::instance().isEnabled())
                {
                    QueryBuildDataSource revenueTransDataSource = _query.dataSourceTable(tableNum(ProjRevenueTrans));
                    this.addTmpProjListOfTransIdToDataSource(revenueTransDataSource, fieldNum(ProjRevenueTrans, TransId), _tmpProjListOfTransId);
                }
                transIdFieldId = fieldNum(ProjRevenueTrans, TransId);
                break;

            case tableNum(ProjItemTrans):
                if (!ProjAdjustmentSelectMultiSelectQueryFlight::instance().isEnabled())
                {
                    QueryBuildDataSource itemTransDataSource = _query.dataSourceTable(tableNum(ProjItemTrans));
                    this.addTmpProjListOfTransIdToDataSource(itemTransDataSource, fieldNum(ProjItemTrans, ProjTransId), _tmpProjListOfTransId);
                }
                transIdFieldId = fieldNum(ProjItemTrans, ProjTransId);
                break;
        }

        if (ProjAdjustmentSelectMultiSelectQueryFlight::instance().isEnabled())
        {
            // To support the multi-select feature, the selected TransId values are stored in a temp table which needs to be joined to each
            // of the primary sub queries of the union query.  There are secondary 'not exists' joins that should not be joined to the temp table.
            for (int i = 1; i <= _query.dataSourceCount(); i++)
            {
                QueryBuildDataSource qbds = _query.dataSourceNo(i);

                if (qbds && qbds.table() == _tableId && qbds.joinMode() != JoinMode::NoExistsJoin)
                {
                    this.addTmpProjListOfTransIdToDataSource(qbds, transIdFieldId, _tmpProjListOfTransId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpProjListOfTransIdToDataSource</Name>
				<Source><![CDATA[
    private void addTmpProjListOfTransIdToDataSource(QueryBuildDataSource _projTransDataSource, FieldId _fieldIdTransId, TmpProjListOfTransId _tmpProjListOfTransId)
    {
        if (_projTransDataSource)
        {
            QueryBuildDataSource tmpProjListOfTransIdDataSource = _projTransDataSource.addDataSource(tableNum(TmpProjListOfTransId));
            tmpProjListOfTransIdDataSource.joinMode(JoinMode::ExistsJoin);
            tmpProjListOfTransIdDataSource.addLink(_fieldIdTransId, fieldNum(TmpProjListOfTransId, TransId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>