<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSplitPaymentPostProj_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxSplitPaymentPostCust_IT</c> class is used to create tax, ledger and customer transactions
/// while posting project invoices, in case these invoices include split payment taxes.
/// </summary>
class TaxSplitPaymentPostProj_IT extends TaxSplitPaymentPost_IT
{
    ProjInvoiceJour projInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReverseCustTrans</Name>
				<Source><![CDATA[
    protected void createReverseCustTrans(TaxRegulationAmountCur _sumTaxAmountCur)
    {
        CustVoucherProject  projVoucher;
        CustTrans custTrans;

        projVoucher = CustVendVoucher::constructProject(
            projInvoiceJour.InvoiceAccount,
            _sumTaxAmountCur,
            projInvoiceJour.CurrencyId,
            LedgerTransTxt::ProjectCreditNoteCust,
            projInvoiceJour.DefaultDimension,
            projInvoiceJour.PostingProfile,
            LedgerPostingType::CustBalance,
            projInvoiceJour.Payment,
            SettlementType::None,
            HcmWorker::userId2Worker(curUserId()),
            NoYes::Yes,
            projInvoiceJour.ProjInvoiceId,
            projInvoiceJour.CashDiscDate,
            projInvoiceJour.CashDisc,
            projInvoiceJour.DueDate,
            projInvoiceJour,
            TypeOfCreditmaxCheck::None,
            projInvoiceJour.CashDiscCode,
            projInvoiceJour.InvoiceAccount);

        projVoucher.parmFixedExchRate(ProjInvoiceCurrency::exist(projInvoiceJour.ProjInvoiceProjId, projInvoiceJour.CurrencyId) ? true : false);
        projVoucher.parmExchRate(projInvoiceJour.ExchRate);
        projVoucher.parmExchRateSecondary(projInvoiceJour.ExchrateSecondary);
        projVoucher.setInvoiceJournal(projInvoiceJour);
        projVoucher.parmBypassCreditCheck(projInvoiceJour.creditCardBypassCreditLimit());
        projVoucher.parmFormLetter(projInvoiceJour.InvoiceAccount);
        projVoucher.setTransRef(projInvoiceJour.InvoiceAmount > 0 ? CustTransRefType::CreditNote : CustTransRefType::Invoice, projInvoiceJour.ProjInvoiceId);
        projVoucher.parmDirectDebitMandateRecId(projInvoiceJour.DirectDebitMandate);
        projVoucher.parmTransTxt(transactionTxt.txt());
        projVoucher.parmIsCalledFromSplitPayment_IT(true);
        projVoucher.post(ledgerVoucher, custTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();
        projInvoiceJour = invoiceJour;
        transactionTxt.setType(projInvoiceJour.InvoiceAmount > 0 ? LedgerTransTxt::ProjectInvoiceLedger : LedgerTransTxt::ProjectCreditNoteLedger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    protected LedgerTransType ledgerTransType()
    {
        return LedgerTransType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    protected SysModule sysModule()
    {
        return SysModule::Project;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>