<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementFollowUpDPFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>/c
/// This class provides main facade to retrieve data based on <c>AgreementFollowUpDP</c> data provider.
/// </summary>
public class AgreementFollowUpDPFacade
{
    CommitmentType                          commitmentType;
    AgreementFulfillmentExpiredDateRange    agreementFulfillmentExpiredDateRange;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCommitmentType</Name>
				<Source><![CDATA[
    public CommitmentType parmCommitmentType(CommitmentType _commitmentType = commitmentType)
    {
        commitmentType = _commitmentType;

        return commitmentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementFulfillmentExpiredDateRange</Name>
				<Source><![CDATA[
    public AgreementFulfillmentExpiredDateRange parmAgreementFulfillmentExpiredDateRange(AgreementFulfillmentExpiredDateRange _agreementFulfillmentExpiredDateRange = agreementFulfillmentExpiredDateRange)
    {
        agreementFulfillmentExpiredDateRange = _agreementFulfillmentExpiredDateRange;

        return agreementFulfillmentExpiredDateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AgreementFollowUpDPFacade construct()
    {
        return new AgreementFollowUpDPFacade();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesAgreementReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves agreement follow up report data for sales agreements based on specified selection criteria.
    /// </summary>
    /// <param name = "_agreementFollowUpRDPContract">An instance of <c>AgreementFollowUpRDPContract</c> class</param>
    /// <param name = "_agreementsFollowUpQuery">A selection criteria query</param>
    /// <param name = "_agreementFollowUpDP">An instance of <c>AgreementFollowUpDP</c> class</param>
    /// <returns></returns>
    public AgreementFollowUpTmp getSalesAgreementReportData(
        AgreementFollowUpRDPContract _agreementFollowUpRDPContract = new AgreementFollowUpRDPContract(),
        Query                        _agreementsFollowUpQuery = new Query(querystr(AgreementFollowUp)),
        AgreementFollowUpDP          _agreementFollowUpDP = new AgreementFollowUpDP())
    {
        _agreementFollowUpRDPContract.parmModuleSalesPurch(ModuleSalesPurch::Sales);
        _agreementFollowUpRDPContract.parmInventoryDimensions(0);

        _agreementsFollowUpQuery.dataSourceTable(tablenum(AgreementLine)).addRange(fieldNum(AgreementLine, AgreementLineType)).value(queryValue(commitmentType));
        _agreementsFollowUpQuery.dataSourceTable(tablenum(AgreementHeader)).addRange(fieldNum(AgreementHeader, AgreementState)).value(queryValue(AgreementState::Effective));

        switch (agreementFulfillmentExpiredDateRange)
        {
            case AgreementFulfillmentExpiredDateRange::Never:
                _agreementsFollowUpQuery.dataSourceTable(tablenum(AgreementHeader)).addRange(fieldNum(AgreementHeader, DefaultAgreementLineExpirationDate)).value(SysQueryRangeUtil::greaterThanDate(0));
                _agreementsFollowUpQuery.dataSourceTable(tablenum(AgreementHeader)).addRange(fieldNum(AgreementHeader, DefaultAgreementLineExpirationDate)).value(queryValue(DateTimeUtil::minValue()));
                break;

            case AgreementFulfillmentExpiredDateRange::ExpiredInAMonth:
                _agreementsFollowUpQuery.dataSourceTable(tablenum(AgreementHeader)).addRange(fieldNum(AgreementHeader, DefaultAgreementLineExpirationDate)).value(queryRange(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) + 30));
                break;

            case AgreementFulfillmentExpiredDateRange::ExpiredIn2Monthes:
                _agreementsFollowUpQuery.dataSourceTable(tablenum(AgreementHeader)).addRange(fieldNum(AgreementHeader, DefaultAgreementLineExpirationDate)).value(SysQueryRangeUtil::monthRange(0, 2));
                break;

            case AgreementFulfillmentExpiredDateRange::ExpiredInSixMonth:
                _agreementsFollowUpQuery.dataSourceTable(tablenum(AgreementHeader)).addRange(fieldNum(AgreementHeader, DefaultAgreementLineExpirationDate)).value(SysQueryRangeUtil::monthRange(0, 6));
                break;

            case AgreementFulfillmentExpiredDateRange::Expired:
                _agreementsFollowUpQuery.dataSourceTable(tablenum(AgreementHeader)).addRange(fieldNum(AgreementHeader, DefaultAgreementLineExpirationDate)).value(SysQueryRangeUtil::lessThanDate(0));
                break;
        };

        _agreementFollowUpDP.parmDataContract(_agreementFollowUpRDPContract);
        _agreementFollowUpDP.parmQuery(_agreementsFollowUpQuery);

        _agreementFollowUpDP.processReport();

        return _agreementFollowUpDP.getAgreementFollowUpTmp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>