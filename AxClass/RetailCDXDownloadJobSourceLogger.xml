<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDownloadJobSourceLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the logger class for logging download source sync operations of a job.
/// </summary>
internal class RetailCDXDownloadJobSourceLogger extends RetailCDXLogger
{
    RetailCDXDataSyncContext jobContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>RetailCDXDownloadSubJobLogger</c> class.
    /// </summary>
    /// <param name = "context">The data sync context object.</param>
    internal void new(RetailCDXDataSyncContext _jobContext = null)
    {
        super();
        this.jobContext = _jobContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSyncContext</Name>
				<Source><![CDATA[
    internal RetailCDXDataSyncContext parmDataSyncContext(RetailCDXDataSyncContext _jobcontext = jobContext)
    {
        this.jobContext = _jobContext;

        return this.jobContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXCannotStartDownloadSourceProcessing</Name>
				<Source><![CDATA[
    internal void logCDXCannotStartDownloadSourceProcessing(System.Exception exception)
    {
        this.logEventPerSession('CDXCannotStartDownloadSourceProcessing', true, [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceProcessingSkipped</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceProcessingSkipped()
    {
        this.logEventPerSession('CDXJobDownloadSourceProcessingSkipped', false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceProcessingStart</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceProcessingStart()
    {
        this.logStartEventPerSession('CDXJobDownloadSourceProcessing');
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceProcessingStop</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceProcessingStop(container exceptions)
    {
        this.logStopEventPerSession('CDXJobDownloadSourceProcessing', exceptions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceProcessingFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceProcessingFailure(System.Exception exception)
    {
        this.logEventPerSession('CDXJobDownloadSourceProcessingFailure', true, [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceCtxInitializationStart</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceCtxInitializationStart()
    {
        this.logStartEventPerSession('CDXJobDownloadSourceCtxInitialization');
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceCtxInitializationStop</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceCtxInitializationStop(System.Exception exception)
    {
        this.logStopEventPerSession('CDXJobDownloadSourceCtxInitialization', [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceCtxInitializationFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceCtxInitializationFailure(System.Exception exception)
    {
        this.logEventPerSession('CDXJobDownloadSourceCtxInitializationFailure', true, [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceCreatePackageStart</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceCreatePackageStart()
    {
        this.logStartEventPerSession('CDXJobDownloadSourceCreatePackage');
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceCreatePackageStop</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceCreatePackageStop(System.Exception exception)
    {
        this.logStopEventPerSession('CDXJobDownloadSourceCreatePackage', [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceCreatePackageFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceCreatePackageFailure(System.Exception exception)
    {
        this.logEventPerSession('CDXJobDownloadSourceCreatePackageFailure', true, [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceSavePackageToBlobStart</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceSavePackageToBlobStart()
    {
        this.logStartEventPerSession('CDXJobDownloadSourceSavePackageToBlob');
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceSavePackageToBlobStop</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceSavePackageToBlobStop(System.Exception exception)
    {
        this.logStopEventPerSession('CDXJobDownloadSourceSavePackageToBlob', [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceSavePackageToBlobFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceSavePackageToBlobFailure(System.Exception exception)
    {
        this.logEventPerSession('CDXJobDownloadSourceSavePackageToBlobFailure', true, [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceUpdateSessionStart</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceUpdateSessionStart()
    {
        this.logStartEventPerSession('CDXJobDownloadSourceUpdateSession');
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceUpdateSessionStop</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceUpdateSessionStop(System.Exception exception)
    {
        this.logStopEventPerSession('CDXJobDownloadSourceUpdateSession', [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceUpdateSessionFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceUpdateSessionFailure(System.Exception exception)
    {
        this.logEventPerSession('CDXJobDownloadSourceUpdateSessionFailure', true, [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourceProcessingLockFailureAtDisposal</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourceProcessingLockFailureAtDisposal(System.Exception exception)
    {
        this.logEventPerSession('CDXJobDownloadSourceProcessingLockFailureAtDisposal', true, [exception]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadSourcePackageGenerationSkipped</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadSourcePackageGenerationSkipped()
    {
        this.logEventPerSession('CDXJobDownloadSourcePackageGenerationSkipped', false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logChannelDataFilteringChannelAssignDetected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the operation for detecting channel - data group relation change.
    /// </summary>
    /// <param name = "_channelRecId">RecId of the channel.</param>
    internal void logChannelDataFilteringChannelAssignDetected(RefRecId _channelRecId)
    {
        MapEnumerator sessionsEnumerator = this.parmDataSyncContext().getSessions().getEnumerator();

        while (sessionsEnumerator.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.currentValue();

            this.logEvent('RetailCdxDownloadSessionChannelAssignDetected', [currentSession.parmSessionNumber(), _channelRecId]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logChannelDataFilteringNewCompanyDetected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log the operation for detecting new company is included in this download session.
    /// </summary>
    /// <param name = "_dataAreaId">Name of the company.</param>
    internal void logChannelDataFilteringNewCompanyDetected(DataAreaId _dataAreaId)
    {
        MapEnumerator sessionsEnumerator = this.parmDataSyncContext().getSessions().getEnumerator();

        while (sessionsEnumerator.moveNext())
        {
            RetailCDXDataSyncContextSession currentSession = sessionsEnumerator.currentValue();

            this.logEvent('RetailCdxDownloadSessionNewCompanyDetected', [currentSession.parmSessionNumber(), _dataAreaId]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCdxWarningNoTargetChannel</Name>
				<Source><![CDATA[
    internal void logCdxWarningNoTargetChannel(Name _dataGroupName)
    {
        this.logEvent('RetailCdxWarningNoTargetChannelDetected', [_dataGroupName]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logStartEventPerSession</Name>
				<Source><![CDATA[
    private void logStartEventPerSession(str _logName)
    {
        if (!this.parmDataSyncContext() || this.parmDataSyncContext().getSessions().elements() == 0)
        {
            this.logStartEvent(_logName, this.getEventDataFromContext(null));
        }
        else
        {
            MapEnumerator sessionsEnumerator = this.parmDataSyncContext().getSessions().getEnumerator();

            while (sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession contextSession = sessionsEnumerator.currentValue();

                this.logStartEvent(_logName, this.getEventDataFromContext(contextSession));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logStopEventPerSession</Name>
				<Source><![CDATA[
    private void logStopEventPerSession(str _logName, container _exception = conNull())
    {
        if (!this.parmDataSyncContext() || this.parmDataSyncContext().getSessions().elements() == 0)
        {
            this.logStopEvent(_logName, this.getEventDataFromContext(null, _exception));
        }
        else
        {
            MapEnumerator sessionsEnumerator = this.parmDataSyncContext().getSessions().getEnumerator();

            while (sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession contextSession = sessionsEnumerator.currentValue();

                this.logStopEvent(_logName, this.getEventDataFromContext(contextSession, _exception));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logEventPerSession</Name>
				<Source><![CDATA[
    private void logEventPerSession(str _logName, boolean _isErrorEvent, container _exception = conNull())
    {
        if (!this.parmDataSyncContext() || this.parmDataSyncContext().getSessions().elements() == 0)
        {
            this.logEvent(_logName, this.getEventDataFromContext(null, _exception), _isErrorEvent);
        }
        else
        {
            MapEnumerator sessionsEnumerator = this.parmDataSyncContext().getSessions().getEnumerator();

            while (sessionsEnumerator.moveNext())
            {
                RetailCDXDataSyncContextSession contextSession = sessionsEnumerator.currentValue();

                this.logEvent(_logName, this.getEventDataFromContext(contextSession, _exception), _isErrorEvent);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventDataFromContext</Name>
				<Source><![CDATA[
    private container getEventDataFromContext(RetailCDXDataSyncContextSession _contextSession, container exceptions = conNull())
    {
        boolean success; str errorMessage;
        [success, errorMessage] = this.getResultFromException(exceptions);

        if (this.parmDataSyncContext())
        {
            return  [
                _contextSession == null ? 0 : _contextSession.parmSessionNumber(),
                int642Str(this.parmDataSyncContext().paramDataGroupRecID()),
                this.parmDataSyncContext().paramScheduleRecID(),
                this.parmDataSyncContext().paramJobID(),
                con2Str(this.parmDataSyncContext().paramLEContainer()),
                _contextSession == null ? '' : _contextSession.getDataStores().ToString(),
                this.parmDataSyncContext().paramScheduledAsFullSync() == NoYes::Yes,
                this.parmDataSyncContext().paramSwitchedToFullSync() == NoYes::Yes,
                this.parmDataSyncContext().paramDeleteExistingData(),
                this.parmDataSyncContext().paramIsCacheBasedQueryEnabled(),
                this.parmDataSyncContext().paramRunUpdateStatistics(),
                this.parmDataSyncContext().ParamCurrentSyncVer(),
                this.parmDataSyncContext().paramLastSyncVer(),
                _contextSession == null ? 0 : _contextSession.parmTotalRowsAffected(),
                _contextSession == null ? 0 : _contextSession.parmFileSize(),
                _contextSession == null ? 0 : _contextSession.parmReplacedSessionDataStoreCount(),
                this.parmDataSyncContext().paramCorrelationId(),
                this.parmDataSyncContext().paramAllowSkipDataSync(),
                this.duration('CDXJobDownloadSourceCtxInitialization'),
                this.duration('CDXJobDownloadSourceSavePackageToBlob'),
                this.duration('CDXJobDownloadSourceUpdateSession'),
                this.duration('CDXJobDownloadSourceProcessing'),
                this.parmDataSyncContext().paramInitializationResult(),
                success,
                errorMessage,
                this.previousErrorEvent
            ];
        }
        else
        {
            return [0,
                '',
                0,
                '',
                '',
                '',
                false,
                false,
                false,
                false,
                false,
                0,
                0,
                0,
                0,
                nullValueFromType(Types::Guid),
                0,
                0,
                0,
                0,
                false,
                false,
                errorMessage,
                this.previousErrorEvent
                ];
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>