<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099MISC</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Tax1099MISC extends Tax1099Base implements Tax1099IForm
{
    const str ReturnType = 'A';
    private Tax1099FieldsTmp tax1099FieldsTmp = Tax1099FieldsUpdate2021::construct().createUpdatedTax1099FieldsTmp();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAmountCodes</Name>
				<Source><![CDATA[
    public str fillAmountCodes(Tax1099IRSPayerRec _localIRSPayerRec)
    {
        str tmpAmountCodes = '';

        select sum(Amount1), sum(Amount2), sum(Amount3), sum(Amount4), sum(Amount5), sum(Amount6),
            sum(Amount8), sum(AmountA), sum(AmountB), sum(AmountC),
            sum(AmountD), sum(AmountE), sum(AmountF)
        from _localIRSPayerRec
            where _localIRSPayerRec.Tax1099Type == Tax1099Type::F1099MISC;

        if (_localIRSPayerRec.Amount1 > 0)
        {
            tmpAmountCodes += One; // Rents
        }

        if (_localIRSPayerRec.Amount2 > 0)
        {
            tmpAmountCodes += Two; // Royalities
        }

        if (_localIRSPayerRec.Amount3 > 0)
        {
            tmpAmountCodes += Three; // Other Income
        }

        if (_localIRSPayerRec.Amount4 > 0)
        {
            tmpAmountCodes += Four; // Federal income tax withheld
        }

        if (_localIRSPayerRec.Amount5 > 0)
        {
            tmpAmountCodes += Five; // Fishing boat proceeds
        }

        if (_localIRSPayerRec.Amount6 > 0)
        {
            tmpAmountCodes += Six; // Medical and health care payments
        }

        if (_localIRSPayerRec.Amount8 > 0)
        {
            tmpAmountCodes += Eight; // Sustitute payments in lieu of dividends or interest
        }

        if (_localIRSPayerRec.AmountA > 0)
        {
            tmpAmountCodes += A; // Crop insurance proceed
        }

        if (_localIRSPayerRec.AmountB > 0)
        {
            tmpAmountCodes += B; // Excess golden parachute payments
        }

        if (_localIRSPayerRec.AmountC > 0)
        {
            tmpAmountCodes += C; // Gross proceeds paid to an attorney in connection with legal services
        }

        if (_localIRSPayerRec.AmountD > 0)
        {
            tmpAmountCodes += D; // Section 409A deferrals
        }

        if (_localIRSPayerRec.AmountE > 0)
        {
            tmpAmountCodes += E; // Section 409A income
        }

        if (_localIRSPayerRec.AmountF > 0)
        {
            tmpAmountCodes += F; // Fish Purchased for resale
        }

        // Direct Sales Indicator
        // Reference IRS document 1220: If reporting a direct sales indicator only, use Type of
        // Return "A" in Field Positions 26- 27, and Amount Code 1 in Field
        // Position 28 of the Payer "A" Record.
        if (tmpAmountCodes == '')
        {
            select firstonly RecId
            from _localIRSPayerRec
                where _localIRSPayerRec.Tax1099Type == Tax1099Type::F1099MISC
                   && _localIRSPayerRec.DirectSalesInd == One;

            if (_localIRSPayerRec.RecId)
            {
                tmpAmountCodes = One;
            }
        }

        return tmpAmountCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnType</Name>
				<Source><![CDATA[
    public str getReturnType()
    {
        return ReturnType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099Type</Name>
				<Source><![CDATA[
    public Tax1099Type getTax1099Type()
    {
        return Tax1099Type::F1099MISC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFederalIncomeTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasFederalIncomeTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasStateTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasStateTaxWithheldField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPartialBRecord</Name>
				<Source><![CDATA[
    public str outputPartialBRecord(str _outputRecord, Tax1099IRSPayerRec _localIRSPayerRec)
    {
        outputRecord = _outputRecord;

        // Second TIN Notice. Field Position: 544
        this.strInsert(_localIRSPayerRec.SecondTIN, 544);

        // Blank. Field Position: 545-546

        // Direct Sales Indicator. Field Position: 547
        this.strInsert(_localIRSPayerRec.DirectSalesInd, 547);

        // Blank. Field Position: 548-662

        // Special Data Entries. Field Position: 663-722 - Used by the different states

        // State Income Tax Withheld. Field Position: 723-734
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.StateTaxWitheld, 12), 723);

        // Local Income Tax Withheld. Field Position: 735-746
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.LocalTaxWithheld, 12), 735);

        // Combined Federal / State Code. Field Position: 747-748
        this.strInsert(_localIRSPayerRec.CombinedFedStateCode, 747);

        return outputRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTax1099ToOutputTable</Name>
				<Source><![CDATA[
    public void sendTax1099ToOutputTable(Tax1099IRSPayerRec _tax1099IRSPayerRec, Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, BankRegNum _payersRTN, Tax1099State _onlyStateToPrint, TransDate _fromDate, TransDate _toDate)
    {
        Tax1099StateSummary tax1099StateSummary;
        VendStateTaxID vendStateTaxID;
        Counter stateCounter;
        CompanyInfo companyInfo = CompanyInfo::find();

        ttsbegin;
        // Loop through our temporary table and fill in the Tax1099StateSummary data
        tax1099StateSummary.setTmp();
        select forupdate tax1099StateSummary;

        if (_onlyStateToPrint == '')
        {
            while select VendAccount, StateId from vendStateTaxID
                join _tax1099IRSPayerRec
                where vendStateTaxID.VendAccount == _tax1099IRSPayerRec.VendAccount
            {
                this.checkAndInsertTax1099StateSummary(tax1099StateSummary, vendStateTaxID, _fromDate, _toDate);
            }
        }
        else
        {
            while select VendAccount, StateId from vendStateTaxID
                join _tax1099IRSPayerRec
                where _tax1099IRSPayerRec.VendAccount == vendStateTaxID.VendAccount &&
                    vendStateTaxID.StateId == _onlyStateToPrint
            {
                this.checkAndInsertTax1099StateSummary(tax1099StateSummary, vendStateTaxID, _fromDate, _toDate);
            }
        }
        ttscommit;

        while select _tax1099IRSPayerRec
        {
            stateCounter = 0;

            this.initTax1099IRSPayerRec(_tax1099IRSPayerRecTmp, _tax1099IRSPayerRec, companyInfo, _payersRTN);

            while select tax1099StateSummary
                where tax1099StateSummary.VendAccount == _tax1099IRSPayerRec.AcctNumForPayee
            {
                if (stateCounter mod 2 == 0)
                {
                    if (stateCounter == 0 && _onlyStateToPrint == '')
                    {
                        this.showFederal(_tax1099IRSPayerRecTmp, _tax1099IRSPayerRec);
                    }

                    this.setStateTaxFirstLine(_tax1099IRSPayerRecTmp, tax1099StateSummary);
                    _tax1099IRSPayerRecTmp.stateTaxId1 = _tax1099IRSPayerRecTmp.stateTaxId1 + ' ' + VendStateTaxID::findByVendState(tax1099StateSummary.VendAccount, tax1099StateSummary.StateId).StateTaxID;
                }
                else
                {
                    this.setStateTaxSecondLine(_tax1099IRSPayerRecTmp, tax1099StateSummary);
                    _tax1099IRSPayerRecTmp.stateTaxId2 = _tax1099IRSPayerRecTmp.stateTaxId2 + ' ' + VendStateTaxID::findByVendState(tax1099StateSummary.VendAccount, tax1099StateSummary.StateId).StateTaxID;
                    this.insertTax1099IRSPayerRec(_tax1099IRSPayerRecTmp);
                    
                    this.initTax1099IRSPayerRec(_tax1099IRSPayerRecTmp, _tax1099IRSPayerRec, companyInfo, _payersRTN);
                }

                stateCounter ++;
            }

            // No state information means we just do federal
            if (stateCounter == 0 && _onlyStateToPrint == '')
            {
                this.showFederal(_tax1099IRSPayerRecTmp, _tax1099IRSPayerRec);
                this.insertTax1099IRSPayerRec(_tax1099IRSPayerRecTmp);
            }
            // Had state records, ended on an even, do the final insert
            else if (stateCounter mod 2 == 1)
            {
                this.insertTax1099IRSPayerRec(_tax1099IRSPayerRecTmp);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndInsertTax1099StateSummary</Name>
				<Source><![CDATA[
    private void checkAndInsertTax1099StateSummary(Tax1099StateSummary _tax1099StateSummary, VendStateTaxID _vendStateTaxID, TransDate _fromDate, TransDate _toDate)
    {
        VendSettlementTax1099 vendSettlementTax1099;

        _tax1099StateSummary.clear();
        _tax1099StateSummary.StateIncome = vendSettlementTax1099.get1099MISCStateIncome(_vendStateTaxID.VendAccount, _vendStateTaxID.StateId, _fromDate, _toDate);
        _tax1099StateSummary.StateIncomeTax = vendSettlementTax1099.get1099MISCStateIncomeTax(_vendStateTaxID.VendAccount, _vendStateTaxID.StateId, _fromDate, _toDate);

        if (_tax1099StateSummary.StateIncome > 0 || _tax1099StateSummary.StateIncomeTax > 0)
        {
            _tax1099StateSummary.VendAccount = _vendStateTaxID.VendAccount;
            _tax1099StateSummary.StateId = _vendStateTaxID.StateId;
            _tax1099StateSummary.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTax1099IRSPayerRec</Name>
				<Source><![CDATA[
    private void insertTax1099IRSPayerRec(Tax1099IRSPayerRec _tax1099IRSPayerRecTmp)
    {
        // Suppress records that have no amounts to report.
        if ((_tax1099IRSPayerRecTmp.Amount1 + _tax1099IRSPayerRecTmp.Amount2 + _tax1099IRSPayerRecTmp.Amount3
                + _tax1099IRSPayerRecTmp.Amount4 + _tax1099IRSPayerRecTmp.Amount5 + _tax1099IRSPayerRecTmp.Amount6
                + _tax1099IRSPayerRecTmp.Amount8 + _tax1099IRSPayerRecTmp.AmountA + _tax1099IRSPayerRecTmp.AmountB 
                + _tax1099IRSPayerRecTmp.AmountD + _tax1099IRSPayerRecTmp.AmountE + _tax1099IRSPayerRecTmp.AmountC
                + _tax1099IRSPayerRecTmp.AmountF >= 0)
                || _tax1099IRSPayerRecTmp.StateTaxWithheld1 > 0
                || _tax1099IRSPayerRecTmp.StateTaxWithheld2 > 0)
        {
            _tax1099IRSPayerRecTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>set1099OnPayerRec</Name>
				<Source><![CDATA[
    public void set1099OnPayerRec(Tax1099Summary _localTax1099Summary, Tax1099IRSPayerRec _tax1099IRSPayerRec)
    {
        select firstonly tax1099FieldsTmp
            where tax1099FieldsTmp.Tax1099Type == Tax1099Type::F1099MISC
                && tax1099FieldsTmp.Tax1099Box == Tax1099Fields::find(_localTax1099Summary.Tax1099Fields).Tax1099Box
                && tax1099FieldsTmp.Tax1099IRSPayerRecField != '';

        if (tax1099FieldsTmp)
        {
            // M7 is an indicator-only field. We sum up all the other fields. For M7, we just add the indicator on the printed report.
            if (tax1099FieldsTmp.Tax1099Box != Tax1099MISCConstants::M7)
            {
                _tax1099IRSPayerRec.(fieldName2Id(tableNum(Tax1099IRSPayerRec), tax1099FieldsTmp.Tax1099IRSPayerRecField)) += _localTax1099Summary.SettleTax1099Amount;
            }
            else
            {
                if (_localTax1099Summary.SettleTax1099Amount >= tax1099FieldsTmp.Tax1099Amount)
                {
                    _tax1099IRSPayerRec.DirectSalesInd = 'X';
                }
            }
        }
        else
        {
            _localTax1099Summary.IRSReportable = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099Fields</Name>
				<Source><![CDATA[
    public boolean updateTax1099Fields(Tax1099Fields _tax1099FieldsIM, RecordInsertList _ril, boolean _forceUpdate)
    {
        boolean fieldsModified = false;

        while select tax1099FieldsTmp
            where tax1099FieldsTmp.Tax1099Type == Tax1099Type::F1099MISC
                && tax1099FieldsTmp.Tax1099Box != ''
        {
            fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, tax1099FieldsTmp.Tax1099Box, tax1099FieldsTmp.description, tax1099FieldsTmp.Tax1099Amount, tax1099FieldsTmp.Tax1099Type, _forceUpdate);
        }

        return fieldsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    public void updateTotals(Tax1099Fields _tax1099Fields, Tax1099IRSPayerRec _localIRSPayerRec, Tax1099Summary _tax1099Summary)
    {
        while select tax1099FieldsTmp
            where tax1099FieldsTmp.Tax1099Type == Tax1099Type::F1099MISC
                && tax1099FieldsTmp.Tax1099Box == _tax1099Fields.Tax1099Box
                && tax1099FieldsTmp.Tax1099IRSPayerRecField != ''
        {
            // M7 is an indicator-only field. We sum up all the other fields. For M7, we just add the indicator on the electronic report.
            if (_tax1099Fields.Tax1099Box != Tax1099MISCConstants::M7)
            {
                _localIRSPayerRec.(fieldName2Id(tableNum(Tax1099IRSPayerRec), tax1099FieldsTmp.Tax1099IRSPayerRecField)) += _tax1099Summary.SettleTax1099Amount;
            }
            else 
            {
                if (_tax1099Summary.SettleTax1099Amount >= tax1099FieldsTmp.Tax1099Amount)
                {
                    _localIRSPayerRec.DirectSalesInd = One;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rents</Name>
				<Source><![CDATA[
    // Static box methods ordered by form position
    public static Tax1099FieldIdentifier rents()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:Rents", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>royalties</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier royalties()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:Royalties", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>otherIncome</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier otherIncome()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:OtherIncome", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>federalIncomeTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier federalIncomeTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:FederalIncomeTaxWithheld", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fishingBoatProceeds</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier fishingBoatProceeds()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:FishingBoatProceeds", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>medicalHealthCarePayments</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier medicalHealthCarePayments()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:HealthCarePayments", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fishPurchasedForResale</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier fishPurchasedForResale()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:FishPurchasedForResale", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>substitutePaymentsDividendsOrInterest</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier substitutePaymentsDividendsOrInterest()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:SubstitutePayments", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>directSalesOver5000</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier directSalesOver5000()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:DirectSalesOf5000OrMore", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cropInsuranceProceeds</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier cropInsuranceProceeds()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:CropInsuranceProceeds", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>excessGoldenParachutePayments</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier excessGoldenParachutePayments()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:ExcessGoldenParachute", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);

    }

]]></Source>
			</Method>
			<Method>
				<Name>grossProceedsPaidToAttorney</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier grossProceedsPaidToAttorney()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:GrossProceedsPaidAttorney", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>section409ADeferrals</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier section409ADeferrals()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:Section409ADeferrals", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>section409AIncome</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier section409AIncome()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:Section409AIncome", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>stateTaxWithheld</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier stateTaxWithheld()
    {
        return Tax1099FieldIdentifier::construct(Tax1099Fields::findTax1099FieldsByDescription("@Tax:StateTaxWithheld", Tax1099Type::F1099MISC).Tax1099Box, Tax1099Type::F1099MISC);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>