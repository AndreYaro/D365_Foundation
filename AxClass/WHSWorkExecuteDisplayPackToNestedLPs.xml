<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayPackToNestedLPs</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class exposes API to access the display form for user to input the parent license plate to pack from.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::PackToNestedLPs)]
class WHSWorkExecuteDisplayPackToNestedLPs extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildForm</Name>
				<Source><![CDATA[
    private container buildForm(container       _con)
    {
        container           ret = _con;

        ret += [this.buildControl(#RFLabel, "@SYS53388", WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX2202", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// The call to this method constructs the form with the relevant controls depending upon whcih steps is the user on
    /// </summary>
    /// <param name="_con">
    /// The container with all the control info
    /// </param>
    /// <param name="_buttonClicked">
    /// The clicked button which has brought user here.
    /// </param>
    /// <returns>
    /// The new container with all the control info
    /// </returns>
    container displayForm(container _con, str _buttonClicked = '')
    {
        container                       ret = conNull();
        container                       con = _con;
        int                             hasError = 0;
        container                       tmpFieldValues;
        boolean                         complete;

        pass = WHSRFPassthrough::create(conPeek(_con, 2));
        hasError = this.hasError(con);

        switch (step)
        {
            case 0:
                ret = this.buildForm(ret);
                pass.insert(#Initiation, 1);
                step = 1;
                break;

            case 1:
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                Map fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;
                    break;
                }

                con = this.buildForm(ret);

                [ret, complete] = this.processFieldValues(con, fieldValues);

                if (pass.exists(#Initiation))
                {
                    pass.remove(#Initiation);
                }

                if (!fieldValues.empty() && pass.exists(#LicensePlateId))
                {
                    // execute the work for packing inventory to nested license plates
                    WHSWorkId workId = WHSWorkCreateMovement_PackToNestedLPs::packToNestedLPs(userId, pass.lookupStr(#LicensePlateId));

                    // work completed
                    if (workId)
                    {
                        ret = conNull();
                        ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                        pass.remove(#LicensePlateId);
                        ret = this.buildForm(ret);
                        step = 1;
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            default:
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>