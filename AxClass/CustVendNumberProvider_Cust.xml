<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNumberProvider_Cust</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendNumberProvider_Cust</c> class generates customers numbers for the import from data entities.
/// </summary>
internal final class CustVendNumberProvider_Cust extends CustVendNumberProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CustVendNumberProvider_Cust construct()
    {
        return new CustVendNumberProvider_Cust();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCustVendNumberTmp</Name>
				<Source><![CDATA[
    protected void loadCustVendNumberTmp(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        CustVendStagingMap _staging,
        CustVendNumbersTmp _custVendNumbersTmp)
    {
        CustGroup custGroupPrev;
        CustTable custTable;
        RecordInsertList custVendNumbersTmpList = new RecordInsertList(tableNum(CustVendNumbersTmp), true, true, true, false, false, _custVendNumbersTmp);

        while select _staging
            order by _staging.CustVendGroup
            where _staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && _staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                && (_staging.TransferStatus == DMFTransferStatus::NotStarted || _staging.TransferStatus == DMFTransferStatus::Validated)
                && _staging.CustVendGroup
            notexists join custTable
                where custTable.AccountNum == _staging.CustVendAccount

        {
            _custVendNumbersTmp.clear();
            _custVendNumbersTmp.RefRecId = _staging.RecId;
            _custVendNumbersTmp.CustVendGroup = _staging.CustVendGroup;

            CustGroup custGroup = custGroupPrev.CustGroup == _staging.CustVendGroup ? custGroupPrev
                : CustGroup::find(_staging.CustVendGroup);

            if (custGroup.CustAccountNumSeq)
            {
                NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(custGroup.CustAccountNumSeq);

                if (numberSequenceTable && !numberSequenceTable.Manual)
                {
                    _custVendNumbersTmp.CustVendAccount = NumberSeq::newGetNumFromId(custGroup.CustAccountNumSeq).num();
                    custVendNumbersTmpList.add(_custVendNumbersTmp);
                }
            }
            
            custGroupPrev = custGroup;
        }

        custVendNumbersTmpList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>