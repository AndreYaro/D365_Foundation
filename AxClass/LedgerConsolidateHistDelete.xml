<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerConsolidateHistDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class LedgerConsolidateHistDelete extends RunBaseBatch implements BatchRetryable
{
    LedgerConsolidateHist   ledgerConsolidateHist;
    const int CurrentVersion = 1;
    RecId ledgerConsolidateHistRecId;

    private SysInstrumentationLogger logger;
    private LedgerConsolidatePerformanceMonitor monitor;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    void initFromArgs(Args _args)
    {
        ledgerConsolidateHist = _args.record() as LedgerConsolidateHist;

        this.parmLedgerConsolidateHistRecId(ledgerConsolidateHist.RecId);
        ledgerConsolidateHist.selectForUpdate(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerConsolidateHistRecId</Name>
				<Source><![CDATA[
    public RecId parmLedgerConsolidateHistRecId(RecId _ledgerConsolidateHistRecId = ledgerConsolidateHistRecId)
    {
        ledgerConsolidateHistRecId = _ledgerConsolidateHistRecId;

        return ledgerConsolidateHistRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, ledgerConsolidateHistRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        
        if (version == CurrentVersion)
        {
            [version, ledgerConsolidateHistRecId] = packedClass;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    boolean prompt()
    {
        if (Box::okCancel("@SYS68810", DialogButton::Cancel) == DialogButton::Cancel)
        {
            info("@SYS19437");
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GeneralLedger:DeleteConsolidateTransaction";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        
        logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(LedgerConsolidateHistDelete));
        monitor = LedgerConsolidatePerformanceMonitor::construct(logger);
        monitor.parmConsolidationId(ledgerConsolidateHistRecId);

        FiscalCalendarRecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        boolean historyExists;

        try
        {
            AccountingDate periodStartDate;
            AccountingDate periodEndDate;

            using (SysInstrumentationActivityContext context = monitor.enterDeleteConsolidationTransactions())
            {
                Counter countDeleted;

                ttsbegin;

                periodStartDate = this.getPeriodStartDate(ledgerConsolidateHistRecId);

                if (periodStartDate != dateNull())
                {
                    LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod = LedgerFiscalCalendar::findLedgerPeriodByPeriodTypeDate(calendarRecId,
                        periodStartDate,
                        FiscalPeriodType::Operating);

                    if (ledgerFiscalCalendarPeriod.Status != FiscalPeriodStatus::Open)
                    {
                        FiscalCalendarPeriod fiscalCalendarPeriod = FiscalCalendarPeriod::find(ledgerFiscalCalendarPeriod.FiscalCalendarPeriod);
                        if (ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Closed)
                        {
                            throw error(strFmt("@GeneralLedger:ConsolidatedTransStatusNotReversibleClosed",
                                fiscalCalendarPeriod.Name,
                                FiscalPeriodStatus::Closed));
                        }
                        else
                        {
                            throw error(strFmt("@GeneralLedger:ConsolidatedTransStatusNotReversibleOnHold",
                                fiscalCalendarPeriod.Name,
                                ledgerFiscalCalendarPeriod.Status,
                                FiscalPeriodStatus::Open));
                        }
                    }
                }

                LedgerConsolidateHistRef ledgerConsolidateHistRef;

                select firstonly RecId from ledgerConsolidateHistRef
                    where ledgerConsolidateHistRef.TransTableId == tableNum(GeneralJournalAccountEntry) &&
                        ledgerConsolidateHistRef.RefRecId == ledgerConsolidateHistRecId;

                if (ledgerConsolidateHistRef.RecId)
                {
                    historyExists = true;
                    periodEndDate = this.getPeriodEndDate(ledgerConsolidateHistRecId);

                    GeneralJournalAccountEntry generalJournalAccountEntry;
                    LedgerEntry ledgerEntry;
                    GeneralJournalEntry generalJournalEntry;

                    delete_from ledgerEntry
                        exists join generalJournalAccountEntry
                            where ledgerEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                            exists join ledgerConsolidateHistRef
                                where ledgerConsolidateHistRef.TransTableId == tableNum(GeneralJournalAccountEntry) &&
                                    ledgerConsolidateHistRef.TransRecid == generalJournalAccountEntry.RecId &&
                                    ledgerConsolidateHistRef.RefRecId == ledgerConsolidateHistRecId;

                    generalJournalAccountEntry.skipDeleteActions(true);
                    generalJournalAccountEntry.skipDataMethods(true);
                    generalJournalAccountEntry.skipEvents(true);

                    delete_from generalJournalAccountEntry
                        exists join ledgerConsolidateHistRef
                            where ledgerConsolidateHistRef.TransTableId == tableNum(GeneralJournalAccountEntry) &&
                                ledgerConsolidateHistRef.TransRecid == generalJournalAccountEntry.RecId &&
                                ledgerConsolidateHistRef.RefRecId == ledgerConsolidateHistRecId;

                    countDeleted = generalJournalAccountEntry.RowCount();

                    // <GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        GeneralJournalAccountEntry_W generalJournalAccountEntryW;

                        delete_from generalJournalAccountEntryW
                            notexists join generalJournalAccountEntry
                                where generalJournalAccountEntry.RecId == generalJournalAccountEntryW.GeneralJournalAccountEntry;
                    }
                    // </GBR>

                    // Delete the ledger consolidation history references.
                    delete_from ledgerConsolidateHistRef
                        where ledgerConsolidateHistRef.TransTableId == tableNum(GeneralJournalAccountEntry) &&
                              ledgerConsolidateHistRef.RefRecId == ledgerConsolidateHistRecId;
                }

                this.deleteLedgerConsolidateHist(ledgerConsolidateHistRecId, calendarRecId);

                ttscommit;
                
                monitor.exitDeleteConsolidationTransactions(context, countDeleted);
            }

            if (historyExists)
            {
                if (Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
                {
                    GeneralLedgerBalanceWork::scheduleRebuildBalancesForLedger(
                        Ledger::current(),
                        periodStartDate,
                        periodEndDate,
                        LedgerConsolidateHistDelete::description());
                }
                else
                {
                    // Rebuild the balances of all the initialized dimension sets in the consolidation company.
                    // The balances must be rebuilt because the dimension set balances update process does
                    // not support updating balances when general journal records are deleted.;
                    DimensionFocusInitializeBalance::saveBatchDetails(this.parmCurrentBatch().BatchJobId, LedgerConsolidateHistDelete::description());

                    DimensionFocusBalanceRebuildDateContract dimensionFocusBalanceRebuildDateContract = new DimensionFocusBalanceRebuildDateContract();
                    dimensionFocusBalanceRebuildDateContract.parmLedgerRecId(Ledger::current());
                    dimensionFocusBalanceRebuildDateContract.parmFromDate(periodStartDate);
                    dimensionFocusBalanceRebuildDateContract.parmToDate(periodEndDate);

                    DimensionFocusInitializeBalance::processFullRebuildWithDateContract(dimensionFocusBalanceRebuildDateContract);
                }
            }
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerConsolidateHist</Name>
				<Source><![CDATA[
    private void deleteLedgerConsolidateHist(RecId _ledgerConsolidateHistRecId, FiscalCalendarRecId _calendarRecId)
    {
        BudgetConsolidationManager::removeAllConsolidatedBudgetTransactions(_ledgerConsolidateHistRecId, _calendarRecId);

        // While running through batch process, the </c>LedgerConsolidateHist</c> table buffer is empty
        // Hence need to fetch the buffer using the RecId that has to be deleted.
        if (this.inBatch)
        {
            ledgerConsolidateHist = LedgerConsolidateHist::find(_ledgerConsolidateHistRecId, true);
        }

        if (FeatureStateProvider::isFeatureEnabled(LedgerConsolidateTemplateFeature::instance()))
        {
            ledgerConsolidateHist.Reversed = NoYes::Yes;
            ledgerConsolidateHist.ReversedDateTime = DateTimeUtil::getSystemDateTime();
            ledgerConsolidateHist.update();
        }
        else
        {
            ledgerConsolidateHist.delete();
        }

        if (!this.inBatch)
        {
            info("@SYS68808");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchTask</Name>
				<Source><![CDATA[
    private void createBatchTask()
    {
        BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();

        ttsbegin;

        if (batchHeader == null)
        {
            batchHeader = BatchHeader::construct();

            batchHeader.parmCaption("@GeneralLedger:DeleteConsolidateTransaction");
            this.unpack(this.pack());
            this.batchInfo().parmCaption("@GeneralLedger:DeleteConsolidateTransaction");
            batchHeader.addRuntimeTask(this, this.parmCurrentBatch().RecId);
            batchHeader.save();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodStartDate</Name>
				<Source><![CDATA[
    internal AccountingDate getPeriodStartDate(RecId _ledgerConsolidateHistRecId)
    {
        LedgerConsolidateHist selectedLedgerConsolidateHist = LedgerConsolidateHist::find(_ledgerConsolidateHistRecId);

        if (FeatureStateProvider::isFeatureEnabled(LedgerConsolidateTemplateFeature::instance())
            && (selectedLedgerConsolidateHist.ConsolidateTemplate != 0)
            && (selectedLedgerConsolidateHist.FromDate != dateNull()))
        {
            return selectedLedgerConsolidateHist.FromDate;
        }
        else
        {
            return this.getPeriodDateBySortOrder(_ledgerConsolidateHistRecId, SortOrder::Ascending);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodEndDate</Name>
				<Source><![CDATA[
    internal AccountingDate getPeriodEndDate(RecId _ledgerConsolidateHistRecId)
    {
        LedgerConsolidateHist selectedLedgerConsolidateHist = LedgerConsolidateHist::find(_ledgerConsolidateHistRecId);

        if (FeatureStateProvider::isFeatureEnabled(LedgerConsolidateTemplateFeature::instance())
            && (selectedLedgerConsolidateHist.ConsolidateTemplate != 0)
            && (selectedLedgerConsolidateHist.ToDate != dateNull()))
        {
            return selectedLedgerConsolidateHist.ToDate;
        }
        else
        {
            return this.getPeriodDateBySortOrder(_ledgerConsolidateHistRecId, SortOrder::Descending);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodDateBySortOrder</Name>
				<Source><![CDATA[
    private AccountingDate getPeriodDateBySortOrder(RecId _ledgerConsolidateHistRecId, SortOrder _accountingDateSortOrder)
    {
        AccountingDate accountingDate;

        Query query = new Query();
        query.firstOnly1(true);

        QueryBuildDataSource qbdsLedgerConsolidateHistRef = query.addDataSource(tableNum(LedgerConsolidateHistRef));
        qbdsLedgerConsolidateHistRef.addRange(fieldNum(LedgerConsolidateHistRef, TransTableId)).value(queryValue(tablenum(GeneralJournalAccountEntry)));
        qbdsLedgerConsolidateHistRef.addRange(fieldNum(LedgerConsolidateHistRef, RefRecId)).value(queryValue(_ledgerConsolidateHistRecId));

        QueryBuildDataSource qbdsGeneralJournalAccountEntry = qbdsLedgerConsolidateHistRef.addDataSource(tableNum(GeneralJournalAccountEntry));
        qbdsGeneralJournalAccountEntry.addLink(fieldNum(LedgerConsolidateHistRef, TransRecId), fieldNum(GeneralJournalAccountEntry, RecId));
        qbdsGeneralJournalAccountEntry.joinMode(JoinMode::InnerJoin);

        QueryBuildDataSource qbdsGeneralJournalEntry = qbdsGeneralJournalAccountEntry.addDataSource(tableNum(GeneralJournalEntry));
        qbdsGeneralJournalEntry.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalEntry, RecId));
        qbdsGeneralJournalEntry.joinMode(JoinMode::InnerJoin);
        qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));
        qbdsGeneralJournalEntry.addSortField(fieldNum(GeneralJournalEntry, AccountingDate), _accountingDateSortOrder);

        query.clearAllFields();
        qbdsGeneralJournalEntry.fields().addField(fieldNum(GeneralJournalEntry, AccountingDate));

        QueryRun queryRun = new QueryRun(query);
        
        if (queryRun.next())
        {
            GeneralJournalEntry generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry));
            accountingDate = generalJournalEntry.AccountingDate;
        }

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatchRun</Name>
				<Source><![CDATA[
    private boolean scheduleBatchRun()
    {
        LedgerConsolidateHistRef ledgerConsolidateHistRef;

        select firstonly RecId from ledgerConsolidateHistRef
            where ledgerConsolidateHistRef.TransTableId == tableNum(GeneralJournalAccountEntry) &&
                  ledgerConsolidateHistRef.RefRecId == ledgerConsolidateHist.RecId;

        if (ledgerConsolidateHistRef.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConsolidationContinue</Name>
				<Source><![CDATA[
    private static boolean canConsolidationContinue(LedgerConsolidateHistDelete _ledgerConDel)
    {
        boolean canConsolidationContinue = true;
        if (FeatureStateProvider::isFeatureEnabled(LedgerConsolidationSafeDeletionFlight::instance()))
        {
            LedgerConsolidateHistDeleteValidate ledgerConsolidateHistDeleteValidate = new LedgerConsolidateHistDeleteValidate();
            RecId histRecId = _ledgerConDel.ledgerConsolidateHistRecId;
            ledgerConsolidateHistDeleteValidate.setValuesFromLedgerConsolidateHistRecord(histRecId);

            if (!ledgerConsolidateHistDeleteValidate.validateTransactionsCanBeDeleted(0))
            {
                error("@GeneralLedger:ConsolidateTrxDeletionNotAllowedError");
                canConsolidationContinue = false;
            }
        }
        return canConsolidationContinue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        LedgerConsolidateHistDelete ledgerConDel = new LedgerConsolidateHistDelete();
        ledgerConDel.initFromArgs(_args);
        boolean canContinue;

        if (ledgerConDel.prompt())
        {
            if (LedgerConsolidateHistDelete::canConsolidationContinue(ledgerConDel))
            {
                if (ledgerConDel.scheduleBatchRun())
                {
                    ledgerConDel.createBatchTask();
                    info(strFmt("@SYS73254", "@GeneralLedger:DeleteConsolidateTransaction"));
                }
                else
                {
                    ledgerConDel.runoperation();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>