<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineInvParmScrapImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for Receipt <c>inventTransferParmLine</c> with scrap.
/// </summary>
public class TaxModelDocLineInvParmScrapImpl_IN extends TaxModelDocLineInventParmImpl_IN
    implements TaxModelTaxableScrap_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    public AmountCur getAssessableValueTransactionCurrency()
    {
        return inventTransferLine.itemCostPrice_IN() * this.getQuantity();
    }
]]></Source>
			</Method>
			<Method>
				<Name>getExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets direct settlement of this document line.
    /// </summary>
    /// <returns>
    /// The <c>DirectSettlement_IN</c>
    /// </returns>
    public DirectSettlement_IN getExciseDirectSettlement()
    {
        return toTransTaxInformation.ExciseDirectSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getExciseTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return TaxAccountType_IN::ExciseExpenseAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the scrap quantity.
    /// </summary>
    /// <returns>
    /// The scrap quantity.
    /// </returns>
    public Qty getFullQuantity()
    {
        return inventTransferParmLine.QtyReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransferUpdateType</Name>
				<Source><![CDATA[
        public InventTransferUpdateType getInventTransferUpdateType()
    {
        return InventTransferUpdateType::Receive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return inventTransferParmLine.QtyScrapNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getSalesTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return TaxAccountType_IN::SalesTaxExpenseAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScrapPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the scrap percentage of the full quantity.
    /// </summary>
    /// <returns>
    /// The percentage
    /// </returns>
    public Percent getScrapPercent()
    {
        return this.getQuantity() / this.getFullQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getVATOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return TaxAccountType_IN::VATExpenseAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceive</Name>
				<Source><![CDATA[
        public boolean isReceive()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipment</Name>
				<Source><![CDATA[
        public boolean isShipment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Sales Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    public boolean shouldSkipSalesTax(TaxOnItem _taxOnItem)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>