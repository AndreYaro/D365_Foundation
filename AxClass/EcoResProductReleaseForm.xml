<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductReleaseForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EcoResProductReleaseForm</c> class provides the methods to control the behavior of the
///    <c>EcoResProductRelease</c> form and handle the form events.
/// </summary>
public class EcoResProductReleaseForm extends SysWizard
{
    EcoResReleaseSessionRecId           releaseSessionRecId;
    EcoResProductReleaseSessionManager  productReleaseSessionManager;

    Map                                 selectedProductsCache;

    FormRun                             productReleaseFormRun;

    FormDataSource                      productFormDataSource;
    FormDataSource                      productMasterFormDataSource;
    FormDataSource                      productVariantsFormDataSource;
    FormDataSource                      companyInfoFormDataSource;

    FormCheckBoxControl                 checkBoxIncludeProductMaster;
    FormCheckBoxControl                 checkBoxShowInfolog;
    FormCheckBoxControl                 checkBoxRunInBatch;

    QueryBuildRange                     qbrProductType;
    Args                                callerArgs;

    private const int                   selectProductTab        = 1;
    private const int                   selectProductVariantTab = 2;
    private const int                   selectCompanyTab        = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Needed by the <c>SysWizard</c> class to open the form related to the wizard.
    /// </summary>
    /// <returns>The form name of the form related to the wizard.</returns>
    FormName formName()
    {
        return formstr(EcoResProductRelease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called by <c>SysWizard</c> when the user clicks on the next button.
    /// Used to skip tab pages based on user selection and setup the ranges on
    /// </summary>
    void next()
    {
        switch (this.curTab())
        {
            case selectProductTab:
                this.showOnlyProductMaster(true);
                if (! productMasterFormDataSource.cursor())
                {
                    //No product master exist, hide product variant tab
                    this.skipTab(selectProductVariantTab, true);
                }
                else
                {
                    this.skipTab(selectProductVariantTab, false);
                }
                break;
        }

        super();

        this.setNextEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>finish</Name>
				<Source><![CDATA[
    protected void finish()
    {
        Args args = new Args();
        args.caller(this);
        args.record(EcoResReleaseSession::find(releaseSessionRecId));

        if (EcoResProductReleaseSessionBatch::runJob(args, checkBoxShowInfolog.checked(), checkBoxRunInBatch.checked()))
        {
            productReleaseSessionManager.cleanUp();
            this.refreshCaller();

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables of disables the next button in the wizard based on the criteria of the tab pages.
    /// </summary>
    private void setNextEnabled()
    {
        boolean nextButtonEnabled = true;
        switch (this.curTab())
        {
            case selectProductTab:
                nextButtonEnabled = (productFormDataSource.numberOfRowsLoaded() > 0);
                break;

            case selectCompanyTab:
                nextButtonEnabled = companyInfoFormDataSource.anyMarked();
                break;
        }

        this.nextEnabled(nextButtonEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOnlyProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filter on product data source to show only product masters or show all.
    /// </summary>
    /// <param name = "_showProductMaster">A boolean set to true if only product masters needs to be shown.</param>
    public void showOnlyProductMaster(boolean _showProductMaster)
    {
        if (_showProductMaster)
        {
            qbrProductType.value(SysQuery::value(DictTable::getRelationTypeFromTableName(tableStr(EcoResProductMaster))));
        }
        else
        {
            qbrProductType.value(SysQuery::valueNot(DictTable::getRelationTypeFromTableName(tableStr(EcoResDistinctProductVariant))));
        }

        productFormDataSource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the active event of the product data source.
    /// </summary>
    public void activeProduct()
    {
        this.setCheckBoxIncludeProductMasterState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the delete event of the product form data source.
    /// </summary>
    public void deleteProduct()
    {
        Common  common;

        for (   common = productFormDataSource.getFirst(true) ?
                        productFormDataSource.getFirst(true) :
                        productFormDataSource.cursor();
                common;
                common = productFormDataSource.getNext())
        {
            this.removeProduct(common as EcoResProduct);
        }
        productFormDataSource.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deSelectAllClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the clicked event of the de-select all button.
    /// </summary>
    public void deSelectAllClicked()
    {
        productReleaseSessionManager.removeProductVariantsForProductMaster(productFormDataSource.cursor().RecId);
        this.flushSelectedProductsCache();
        productVariantsFormDataSource.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the init query event on the company info form data source.
    /// </summary>
    public void initQueryCompanyInfo()
    {
        companyInfoFormDataSource.queryBuildDataSource().addSortField(fieldNum(CompanyInfo, DataArea));
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQueryCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the execute query event on the company info form data source.
    /// </summary>
    public void executeQueryCompanyInfo()
    {
        this.markSelectedLegalEntities();
        this.setNextEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQueryProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the execute query event on the product form data source.
    /// </summary>
    public void executeQueryProduct()
    {
        this.flushSelectedProductsCache();
        this.setNextEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushSelectedProductsCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Flushes the <c>selectedProductsCache</c> cache.
    /// </summary>
    private void flushSelectedProductsCache()
    {
        selectedProductsCache   = new Map(Types::Int64, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a Boolean value that specifies whether a product is in the release session.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the value should be set.
    /// </param>
    /// <param name="_productRecId">
    ///    The ID of an <c>EcoResProduct</c> record.
    /// </param>
    /// <param name="_selected">
    ///    A Boolean value which specifies whether a product is in the release session.
    /// </param>
    /// <returns>
    ///    true if a product is in the release session; otherwise, false.
    /// </returns>
    public NoYes includeProduct(
        boolean             _set,
        EcoResProductRecId  _productRecId,
        NoYes               _selected)
    {
        NoYes   selected;

        if (_set)
        {
            if (_selected)
            {
                productReleaseSessionManager.addProduct(_productRecId);
            }
            else
            {
                productReleaseSessionManager.removeProduct(_productRecId);
            }
            selectedProductsCache.insert(_productRecId, _selected);

            return _selected;
        }

        if (!selectedProductsCache.exists(_productRecId))
        {
            selected    = productReleaseSessionManager.isProductAdded(_productRecId);
            selectedProductsCache.insert(_productRecId, selected);
        }
        else
        {
            selected    = selectedProductsCache.lookup(_productRecId);
        }

        return selected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWizard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the wizard from the args.
    /// </summary>
    public void initWizard()
    {
        selectedProductsCache   = new Map(Types::Int64, Types::Enum);

        if (callerArgs)
        {
            Common record = callerArgs.record();
            if (record is EcoResReleaseSession)
            {
                releaseSessionRecId = record.RecId;
                productReleaseSessionManager    = EcoResProductReleaseSessionManager::newFromReleaseSessionRecId(releaseSessionRecId);
            }
            else
            {
                productReleaseSessionManager    = EcoResProductReleaseSessionManager::newReleaseSession();
                releaseSessionRecId             = productReleaseSessionManager.parmReleaseSessionRecId();

                if (record is EcoResDistinctProductVariant)
                {
                    EcoResProductReleaseForm::addProductFromVariantToRelease(
                        releaseSessionRecId,
                        record);
                }
                else if (record is EcoResProduct
                    &&  FormDataUtil::isFormDataSource(record))
                {
                    EcoResProductReleaseForm::addProductsFromDataSourceToRelease(
                        releaseSessionRecId,
                        FormDataUtil::getFormDataSource(record));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markChangedCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the markChanged event on the company info form data source.
    /// </summary>
    public void markChangedCompanyInfo()
    {
        this.setNextEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markSelectedLegalEntities</Name>
				<Source><![CDATA[
    private void markSelectedLegalEntities()
    {
        CompanyInfo     companyInfo;

        if (companyInfoFormDataSource)
        {
            Set selectedLegalEntities = Set::create(
                EcoResReleaseProductLegalEntity::distinctLegalEntityIdsInSession(releaseSessionRecId));
            SetEnumerator selectedLegalEntitiesEnumerator = selectedLegalEntities.getEnumerator();
            while (selectedLegalEntitiesEnumerator.moveNext())
            {
                RecId legalEntityRecId = selectedLegalEntitiesEnumerator.current();
                companyInfo.RecId = legalEntityRecId;
                companyInfoFormDataSource.markRecord(companyInfo, 1);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = callerArgs)
    {
        callerArgs = _args;

        return callerArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckboxShowInfolog</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmCheckboxShowInfolog(FormCheckBoxControl _showInfolog = checkBoxShowInfolog)
    {
        checkBoxShowInfolog = _showInfolog;

        return checkBoxShowInfolog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckBoxRunInBatch</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmCheckBoxRunInBatch(FormCheckBoxControl _runInBatch = checkBoxRunInBatch)
    {
        checkBoxRunInBatch = _runInBatch;

        return checkBoxRunInBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckBoxIncludeProductMaster</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmCheckBoxIncludeProductMaster(FormCheckBoxControl _checkBoxIncludeProductMaster = checkBoxIncludeProductMaster)
    {
        checkBoxIncludeProductMaster = _checkBoxIncludeProductMaster;

        return checkBoxIncludeProductMaster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyInfoFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmCompanyInfoFormDataSource(FormDataSource _companyInfoFormDataSource = companyInfoFormDataSource)
    {
        companyInfoFormDataSource = _companyInfoFormDataSource;

        return companyInfoFormDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmProductFormDataSource(FormDataSource _productFormDataSource = productFormDataSource)
    {
        productFormDataSource = _productFormDataSource;

        return productFormDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductMasterFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmProductMasterFormDataSource(FormDataSource _productMasterFormDataSource = productMasterFormDataSource)
    {
        productMasterFormDataSource = _productMasterFormDataSource;

        return productMasterFormDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductReleaseFormRun</Name>
				<Source><![CDATA[
    public FormRun parmProductReleaseFormRun(FormRun _productReleaseFormRun = productReleaseFormRun)
    {
        productReleaseFormRun = _productReleaseFormRun;

        return productReleaseFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductVariantsFormDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmProductVariantsFormDataSource(FormDataSource _productVariantsFormDataSource = productVariantsFormDataSource)
    {
        productVariantsFormDataSource = _productVariantsFormDataSource;

        if (productReleaseSessionManager)
        {
            productReleaseSessionManager.parmProductVariantsFormDataSource(productVariantsFormDataSource);
        }

        return productVariantsFormDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseSessionRecId</Name>
				<Source><![CDATA[
    public EcoResReleaseSessionRecId parmReleaseSessionRecId(EcoResReleaseSessionRecId _releaseSessionRecId = releaseSessionRecId)
    {
        releaseSessionRecId = _releaseSessionRecId;

        return releaseSessionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryReleaseSession</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a query for the release session form data source.
    /// </summary>
    /// <returns>
    ///    A query for the release session form data source.
    /// </returns>
    public Query queryReleaseSession()
    {
        return EcoResReleaseSession::releaseSessionQuery(releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryReleaseSessionProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a query for each product to be displayed in the release products form.
    /// </summary>
    /// <returns>
    ///    A query for each product to be displayed in the release products form.
    /// </returns>
    public Query queryReleaseSessionProducts()
    {
        Query releaseSessionQuery = EcoResReleaseSessionProduct::releaseSessionProductsQuery(releaseSessionRecId);
        qbrProductType = releaseSessionQuery.dataSourceTable(tableName2Id(tableStr(EcoResProduct))).findRange(fieldNum(EcoResProduct, InstanceRelationType));

        return releaseSessionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the form.
    /// </summary>
    public void refresh()
    {
        productFormDataSource.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the calling form.
    /// </summary>
    private void refreshCaller()
    {
        Object  caller  = callerArgs.caller();

        if (    caller
            &&  caller is FormRun
            &&  formHasMethod(caller, identifierStr(refresh)))
        {
            caller.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a product from the release session.
    /// </summary>
    /// <param name="_ecoResProduct">
    ///    An <c>EcoResProduct</c> record.
    /// </param>
    private void removeProduct(EcoResProduct _ecoResProduct)
    {
        if (_ecoResProduct.isProductMaster())
        {
            productReleaseSessionManager.removeProductMasterWithVariants(_ecoResProduct.RecId);
            this.flushSelectedProductsCache();
        }
        else
        {
            productReleaseSessionManager.removeProduct(_ecoResProduct.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAllClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the clicked event of the select all button.
    /// </summary>
    public void selectAllClicked()
    {
        productReleaseSessionManager.addProductVariantsForProductMaster(productFormDataSource.cursor().RecId);
        this.flushSelectedProductsCache();
        productVariantsFormDataSource.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckBoxIncludeProductMasterState</Name>
				<Source><![CDATA[
    private void setCheckBoxIncludeProductMasterState()
    {
        EcoResProduct   ecoResProduct   = productFormDataSource.cursor() as EcoResProduct;
        boolean         isProductMaster = ecoResProduct.isProductMaster();

        checkBoxIncludeProductMaster.visible(isProductMaster);
        checkBoxIncludeProductMaster.value(this.includeProduct(false, ecoResProduct.RecId, NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncReleaseProductLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes the selected legal entities on the form that has the release session.
    /// </summary>
    public void syncReleaseProductLegalEntity()
    {
        Set             selectedLegalEntities   = new Set(Types::Int64);
        Common          common;
        CompanyInfo     companyInfo;

        for (   common = companyInfoFormDataSource.getFirst(true);
                common;
                common = companyInfoFormDataSource.getNext())
        {
            selectedLegalEntities.add(common.RecId);
        }

        ttsbegin;

        while select RecId from companyInfo
        {
            if (selectedLegalEntities.in(companyInfo.RecId))
            {
                productReleaseSessionManager.addLegalEntityForAllProducts(companyInfo.RecId);
            }
            else
            {
                productReleaseSessionManager.removeLegalEntityForAllProducts(companyInfo.RecId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main entry point for the wizard.
    /// Creates a new instance of <c>EcoResProductReleaseForm</c> and shows the wizard.
    /// </summary>
    /// <param name = "_args">The args passed by the classed.</param>
    public static void main(Args _args)
    {
        EcoResProductReleaseForm wizard = new EcoResProductReleaseForm();
        wizard.parmArgs(_args);

        if (wizard.prompt())
        {
            wizard.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductsFromDataSourceToRelease</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds products that are selected on the form data source to a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID.
    /// </param>
    /// <param name="_productFormDataSource">
    ///    A form data source object.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    A form data source does not contain products.
    /// </exception>
    public static void addProductsFromDataSourceToRelease(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        FormDataSource              _productFormDataSource)
    {
        Set                             productRecIds = new Set(Types::Int64);
        Common                          record;
        EcoResProduct                   ecoResProduct;

        if (!(_productFormDataSource.cursor() is EcoResProduct))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        for (   record = _productFormDataSource.getFirst(true)
                    ? _productFormDataSource.getFirst(true)
                    : _productFormDataSource.cursor();
                record;
                record = _productFormDataSource.getNext())
        {
            productRecIds.add(record.RecId);
        }

        EcoResProductReleaseForm::addProductsToRelease(_releaseSessionRecId, productRecIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductFromVariantToRelease</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the product master of a product variant to a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID.
    /// </param>
    /// <param name="_productFormDataSource">
    ///    A product variant record.
    /// </param>
    public static void addProductFromVariantToRelease(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        EcoResDistinctProductVariant _productVariant)
    {
        Set productRecIds = new Set(Types::Int64);
        productRecIds.add(_productVariant.ProductMaster);

        EcoResProductReleaseForm::addProductsToRelease(_releaseSessionRecId, productRecIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductsToRelease</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds products to a release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID.
    /// </param>
    /// <param name="_productRecIds">
    ///    A set of product RecIds.
    /// </param>
    protected final static void addProductsToRelease(
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        Set                         _productRecIds)
    {
        RecordInsertList                recordInsertList = new RecordInsertList(tableNum(EcoResProductSelectedForRelease), true, true, true);
        EcoResProductSelectedForRelease ecoResProductSelectedForRelease;

        ttsBegin;

        SetEnumerator productRecIdEnumerator = _productRecIds.getEnumerator();
        while (productRecIdEnumerator.moveNext())
        {
            ecoResProductSelectedForRelease.Product = productRecIdEnumerator.current();
            ecoResProductSelectedForRelease.ReleaseSession = _releaseSessionRecId;

            recordInsertList.add(ecoResProductSelectedForRelease);
        }
        recordInsertList.insertDatabase();

        EcoResProductReleaseForm::deleteExistingReleaseSessionProducts(_releaseSessionRecId);
        EcoResProductReleaseForm::insertReleaseSessionProductsForSelection(_releaseSessionRecId);
        EcoResProductReleaseForm::insertReleaseSessionProductsForVariants(_releaseSessionRecId);
        EcoResProductReleaseForm::removeDefaultConfigurationsFromSession(_releaseSessionRecId);

        delete_from ecoResProductSelectedForRelease
            where ecoResProductSelectedForRelease.ReleaseSession == _releaseSessionRecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingReleaseSessionProducts</Name>
				<Source><![CDATA[
    private static void deleteExistingReleaseSessionProducts(EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResReleaseSessionProduct         releaseSessionProduct;
        EcoResProductSelectedForRelease     ecoResProductSelectedForRelease;

        ttsBegin;

        delete_from releaseSessionProduct
            where releaseSessionProduct.SystemAdded                         == NoYes::Yes
               && releaseSessionProduct.ReleaseSession                      == _releaseSessionRecId
                exists join ecoResProductSelectedForRelease
                    where ecoResProductSelectedForRelease.Product           == releaseSessionProduct.Product
                       && ecoResProductSelectedForRelease.ReleaseSession    == _releaseSessionRecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReleaseSessionProductsForSelection</Name>
				<Source><![CDATA[
    private static void insertReleaseSessionProductsForSelection(EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResProduct                       product;
        EcoResReleaseSessionProduct         releaseSessionProduct;
        EcoResProductSelectedForRelease     ecoResProductSelectedForRelease;
        NoYes                               systemAdded = NoYes::No;

        ttsBegin;

        insert_recordset releaseSessionProduct (ReleaseSession, Product, SystemAdded)
            select _releaseSessionRecId, RecId, systemAdded from product
                join ecoResProductSelectedForRelease
                    where ecoResProductSelectedForRelease.Product         == product.RecId
                       && ecoResProductSelectedForRelease.ReleaseSession  == _releaseSessionRecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReleaseSessionProductsForVariants</Name>
				<Source><![CDATA[
    private static void insertReleaseSessionProductsForVariants(EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResDistinctProductVariant        distinctProductVariant;
        EcoResReleaseSessionProduct         releaseSessionProduct;
        EcoResReleaseSessionProduct         releaseSessionProductExisting;
        EcoResProductSelectedForRelease     ecoResProductSelectedForRelease;
        NoYes                               systemAdded = NoYes::No;

        ttsBegin;

        insert_recordset releaseSessionProduct (ReleaseSession, Product, SystemAdded)
            select _releaseSessionRecId, RecId, systemAdded from distinctProductVariant
                join ecoResProductSelectedForRelease
                    where ecoResProductSelectedForRelease.Product         == distinctProductVariant.ProductMaster
                       && ecoResProductSelectedForRelease.ReleaseSession  == _releaseSessionRecId
                notexists join releaseSessionProductExisting
                    where releaseSessionProductExisting.Product           == distinctProductVariant.RecId
                       && releaseSessionProductExisting.ReleaseSession    == _releaseSessionRecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDefaultConfigurationsFromSession</Name>
				<Source><![CDATA[
    private static void removeDefaultConfigurationsFromSession(EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResProductMaster                 productMaster;
        EcoResReleaseSessionProduct         releaseSessionProductExisting;
        EcoResProductSelectedForRelease     ecoResProductSelectedForRelease;

        ttsBegin;

        while select RecId from productMaster
            where productMaster.VariantConfigurationTechnology        == EcoResVariantConfigurationTechnologyType::ConstraintBased
            exists join ecoResProductSelectedForRelease
                where ecoResProductSelectedForRelease.Product         == productMaster.RecId
                   && ecoResProductSelectedForRelease.ReleaseSession  == _releaseSessionRecId
        {
            EcoResDistinctProductVariantRecId productVariantRecId = EcoResProductVariantExistMgr::newFromProductMaster(productMaster.RecId).findVariantWithDefaultConfiguration();

            delete_from releaseSessionProductExisting
                where releaseSessionProductExisting.Product           == productVariantRecId
                   && releaseSessionProductExisting.ReleaseSession    == _releaseSessionRecId;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>