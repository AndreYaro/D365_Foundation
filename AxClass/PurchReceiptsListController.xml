<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReceiptsListController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReceiptsListController</c> class is the helper class for the associated SRS Report.
/// </summary>
public class PurchReceiptsListController extends TradeDocumentReportController implements BatchRetryable
{
    PurchReceiptListJournalPrint        purchReceiptListJournalPrint;
    VendReceiptsListJour                vendReceiptsListJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    protected str  documentTitle()
    {
        str documentTitle;

        if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            if (vendReceiptsListJour.isProforma())
            {
                documentTitle = literalStr("@SYS70794");
            }
            else
            {
                documentTitle = literalStr("@SYS53075");
            }
        }
        else
        {
            if (vendReceiptsListJour.isProforma())
            {
                documentTitle = literalStr("@SYS53077");
            }
            else
            {
                documentTitle = literalStr("@SYS25756");
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentIdentifier</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected str documentIdentifier()
    {
        return vendReceiptsListJour.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReportExceptions</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean handleReportExceptions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextTableId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TableId reportExceptionContextTableId()
    {
        return vendReceiptsListJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextRecordId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected RecId reportExceptionContextRecordId()
    {
        return vendReceiptsListJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstJournal</Name>
				<Source><![CDATA[
    protected boolean getFirstJournal()
    {
        return journalList.first(vendReceiptsListJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextJournal</Name>
				<Source><![CDATA[
    protected boolean getNextJournal()
    {
        return journalList.next(vendReceiptsListJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    protected RecId getRecordId()
    {
        return vendReceiptsListJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal       = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchReceiptListJournalPrint))
        {
            // Initalize based on caller
            purchReceiptListJournalPrint     = this.parmArgs().caller();
        }

        if (this.parmArgs().record())
        {   // Initailize on record
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {   // Initailize on object
            journalList         = this.parmArgs().object();
        }

        // Construct the Form Letter object
        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::PurchaseOrderReceiptsList);

        // Set the Print Copy original
        formLetterReport.parmPrintType(printCopyOriginal);

        if (purchReceiptListJournalPrint)
        {
            // Set the print settings
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(purchReceiptListJournalPrint.parmPrinterSettingsFormLetterCopy()));

            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(purchReceiptListJournalPrint.parmPrinterSettingsFormLetter()));

            formLetterReport.parmUsePrintMgmtDestinations(purchReceiptListJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        // Call the base to set the controller
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    protected void output()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().documentReport().output(this.reportExceptionContextTableId(), this.reportExceptionContextRecordId()))
        {
            formLetterReport.loadPrintSettings(vendReceiptsListJour, PurchTable::find(vendReceiptsListJour.PurchId), vendReceiptsListJour.LanguageId);
            this.parmReportContract().parmRdlContract().parmLanguageId(vendReceiptsListJour.LanguageId);
            this.parmReportContract().parmRdlContract().parmLabelLanguageId(vendReceiptsListJour.LanguageId);

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>VendReceiptsListJour</c>.
    /// </summary>
    /// <param name="_common">
    /// A <c>VendReceiptsListJour</c> record.
    /// </param>
    protected void setDataContractRecord(Common _common)
    {
        vendReceiptsListJour = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReceiptsListController construct()
    {
        return new PurchReceiptsListController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        SrsReportRunController      formLetterController = PurchReceiptsListController::construct();
        PurchReceiptsListController controller;

        controller = formLetterController;
        controller.initArgs(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderReceiptsList).getDefaultReportFormat());

        if (classIdGet(_args.caller()) == classNum(PurchReceiptListJournalPrint))
        {
            formLetterController.renderingCompleted += eventhandler(purchReceiptListJournalPrint::renderingCompleted);
        }
        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataContract</Name>
				<Source><![CDATA[
    public static SrsReportDataContract newDataContract(Args _args)
    {
        PurchReceiptsListController formLetterController = PurchReceiptsListController::construct();

        if (_args.dataset() != tableNum(VendReceiptsListJour))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        formLetterController.initDataContract(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderReceiptsList).getDefaultReportFormat());

        return formLetterController.parmReportContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>