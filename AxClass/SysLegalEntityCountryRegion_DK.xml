<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysLegalEntityCountryRegion_DK</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

#ISOCountryRegionCodes

[ExportMetadataAttribute('ISOCode', #isoDK)]
[ExportAttribute('Dynamics.AX.Application.ISysLegalEntityCountryRegion')]
internal final class SysLegalEntityCountryRegion_DK implements ISysLegalEntityCountryRegion
{
    internal const int FiveYearsBack = -5;
    internal const date MinRetentionPeriodStartDate = 01\06\2024;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAnyLegalEntityInCountryRegion</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isAnyLegalEntityInCountryRegion()
    {
        return SysCountryRegionCode::isAnyLegalEntityInCountryRegion(#isoDK) ||
            SysLegalEntityCountryRegion_DK::isAnyLegalEntityTaxRegisteredInCountryRegion(#isoDK);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntitiesForCountryRegion</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Set getLegalEntitiesForCountryRegion()
    {
        Set legalEntities = SysCountryRegionCode::getLegalEntitiesForCountryRegion(#isoDK);

        SysLegalEntityCountryRegion_DK::populateLegalEntitiesTaxRegisteredInCountryRegion(legalEntities, #isoDK);

        return legalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntityRetentionPeriodStartDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public date getLegalEntityRetentionPeriodStartDate(CompanyId _companyId)
    {
        if (!this.getLegalEntitiesForCountryRegion().in(_companyId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return SysLegalEntityCountryRegion_DK::getCompanyRetentionFiscalPeriodStartDate(_companyId, FiveYearsBack, MinRetentionPeriodStartDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyLegalEntityTaxRegisteredInCountryRegion</Name>
				<Source><![CDATA[
    private static boolean isAnyLegalEntityTaxRegisteredInCountryRegion(LogisticsAddressCountryRegionISOCode _regionISOCode)
    {
        CompanyInfo companyInfo;
        TaxRegistration taxRegistration;
        DirPartyLocation dirPartyLocation;
        LogisticsAddressCountryRegion countryRegion;
        LogisticsPostalAddress registrationLogisticsPostalAddress;
        LogisticsAddressCountryRegion applicabilityRuleCountryRegion;
        TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;

        select firstonly RecId from companyInfo
            exists join dirPartyLocation
                where dirPartyLocation.Party == companyInfo.RecId
            exists join registrationLogisticsPostalAddress
                where registrationLogisticsPostalAddress.Location == dirPartyLocation.Location
            exists join countryRegion
                where countryRegion.CountryRegionId == registrationLogisticsPostalAddress.CountryRegionId
                    && countryRegion.ISOcode == _regionISOCode
            exists join taxRegistration
                where taxRegistration.DirPartyLocation == dirPartyLocation.RecId
            exists join taxRegistrationTypeApplicabilityRule
                where taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule
            exists join applicabilityRuleCountryRegion
                where applicabilityRuleCountryRegion.CountryRegionId == taxRegistrationTypeApplicabilityRule.CountryRegionId
                    && applicabilityRuleCountryRegion.ISOcode == _regionISOCode
            exists join taxRegistrationLegislationTypes
                where taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule == taxRegistration.TaxRegistrationTypeApplicabilityRule
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::TAXID;

        return companyInfo.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLegalEntitiesTaxRegisteredInCountryRegion</Name>
				<Source><![CDATA[
    private static void populateLegalEntitiesTaxRegisteredInCountryRegion(Set _legalEntitiesSet, LogisticsAddressCountryRegionISOCode _regionISOCode)
    {
        CompanyInfo companyInfo;
        TaxRegistration taxRegistration;
        DirPartyLocation dirPartyLocation;
        LogisticsAddressCountryRegion countryRegion;
        LogisticsPostalAddress registrationLogisticsPostalAddress;
        LogisticsAddressCountryRegion applicabilityRuleCountryRegion;
        TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;
        TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;

        while select DataArea from companyInfo
            exists join dirPartyLocation
                where dirPartyLocation.Party == companyInfo.RecId
            exists join registrationLogisticsPostalAddress
                where registrationLogisticsPostalAddress.Location == dirPartyLocation.Location
            exists join countryRegion
                where countryRegion.CountryRegionId == registrationLogisticsPostalAddress.CountryRegionId
                    && countryRegion.ISOcode == _regionISOCode
            exists join taxRegistration
                where taxRegistration.DirPartyLocation == dirPartyLocation.RecId
            exists join taxRegistrationTypeApplicabilityRule
                where taxRegistrationTypeApplicabilityRule.RecId == taxRegistration.TaxRegistrationTypeApplicabilityRule
            exists join applicabilityRuleCountryRegion
                where applicabilityRuleCountryRegion.CountryRegionId == taxRegistrationTypeApplicabilityRule.CountryRegionId
                    && applicabilityRuleCountryRegion.ISOcode == _regionISOCode
            exists join taxRegistrationLegislationTypes
                where taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule == taxRegistration.TaxRegistrationTypeApplicabilityRule
                    && taxRegistrationLegislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::TAXID
        {
            _legalEntitiesSet.add(companyInfo.DataArea);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyRetentionFiscalPeriodStartDate</Name>
				<Source><![CDATA[
    private static date getCompanyRetentionFiscalPeriodStartDate(CompanyId _companyId, int _periodYears, date _minStartDate)
    {
        date retentionPeriodStartDate = FiscalCalendars::findStartDateYearFwd(
            Ledger::fiscalCalendar(CompanyInfo::findDataArea(_companyId).RecId),
            SysLegalEntityCountryRegion::getCompanySystemDate(_companyId),
            _periodYears);

        return max(retentionPeriodStartDate, _minStartDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>