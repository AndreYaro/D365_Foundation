<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UnitOfMeasureSCMFieldValidationEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles validation for UnitOfMeasure field changes for SCM functionality.
/// </summary>
class UnitOfMeasureSCMFieldValidationEventHandlers
{
    const internal static int MaxInventUnitDecimalPrecision = 6;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>UnitOfMeasure_validateFieldDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if it is allowed to modify the decimal precision of a Unit of Measure.
    /// </summary>
    /// <param name="_unitOfMeasure">
    /// A specified <c>UnitOfMeasure</c> record to validate.
    /// </param>
    /// <param name="_fieldIdToCheck">
    /// A specified <c>FieldId</c> of the data to validate.
    /// </param>
    /// <param name="_result">
    /// A specified <c>EventHandlerResult</c> to report the output of the validation.
    /// </param>
    [SubscribesTo(tableStr(UnitOfMeasure), delegateStr(UnitOfMeasure, validateFieldDelegate))]
    public static void UnitOfMeasure_validateFieldDelegate(UnitOfMeasure _unitOfMeasure, FieldId _fieldIdToCheck, EventHandlerResult _result)
    {
        if (!_result.result() || _unitOfMeasure.DecimalPrecision == _unitOfMeasure.orig().DecimalPrecision)
        {
            return;
        }

        if (_unitOfMeasure.DecimalPrecision > _unitOfMeasure.orig().DecimalPrecision)
        {
            if (InventTrans::transactionOpenExistForSymbol(_unitOfMeasure.Symbol)
                || InventItemPrice::costPricesExistForSymbol(_unitOfMeasure.Symbol))
            {
                if (Box::yesNo("@SCM:UnitOfMeasureDecimalPrecisionIncreaseWarning", DialogButton::No) == DialogButton::No)
                {
                    _result.booleanResult(false);
                }
            }
        }
        else
        {
            switch (_fieldIdToCheck)
            {
                // A similar validation is done also from a ItemID perspective.
                // If additional checks are added here, please consider also adding them to InventTableModule.validateFieldValue
            case fieldNum(UnitOfMeasure, DecimalPrecision):
                if (InventTrans::transactionOpenExistForSymbol(_unitOfMeasure.Symbol))
                {
                    warning("@SCM:UnitOfMeasurePrecisionTransactionError");
                    _result.booleanResult(false);
                }
                if (InventItemPrice::costPricesExistForSymbol(_unitOfMeasure.Symbol))
                {
                    warning("@SCM:UnitOfMeasurePrecisionCostPriceError");
                    _result.booleanResult(false);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>