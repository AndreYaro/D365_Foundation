<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
    <Name>InventStdCostConvCheck_StandardCost</Name>
    <SourceCode>
        <Declaration><![CDATA[
class InventStdCostConvCheck_StandardCost extends InventStdCostConvCheck
{
}
]]></Declaration>
        <Methods>
            <Method>
                <Name>validate</Name>
                <Source><![CDATA[
    /// <summary>
    ///    Validates that a standard cost price can be found for the item being checked.
    /// </summary>
    /// <returns>
    ///    true if accounts could be found; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean                 ret = true;

        InventTable inventTable = inventStdCostConvItem.inventTable();
        InventStdCostConv inventStdCostConv = inventStdCostConvItem.inventStdCostConv();

        if (! this.validateItemPriceExists(inventTable, inventStdCostConv))
        {
            ret = false;
        }

        if (! this.validatePriceInConvPeriod(inventTable, inventStdCostConv))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
            </Method>
            <Method>
                <Name>validateItemPriceExists</Name>
                <Source><![CDATA[
    protected boolean validateItemPriceExists(InventTable _inventTable, InventStdCostConv _inventStdCostConv)
    {
        #inventDimDevelop

        boolean                 ret = true;
        InventSite              inventSite;
        InventItemPriceSim      inventItemPriceSim;
        InventDim               inventDimSim;
        InventDim               inventDimComb;
        InventDimParm           dimParmProduct = InventDimParm::allProductDim();

        if (_inventTable.ItemDimCostPrice)
        {
            InventDimCombination    inventDimCombination;

            while select TableId from inventDimCombination
                where inventDimCombination.ItemId   == _inventTable.ItemId
                join inventDimComb
                    where inventDimComb.InventDimId == inventDimCombination.InventDimId
                join SiteId from inventSite
                notexists join inventItemPriceSim
                    where inventItemPriceSim.ItemId      == inventDimCombination.ItemId
                       && inventItemPriceSim.VersionId   == _inventStdCostConv.CostingVersionId
                       && inventItemPriceSim.PriceType   == CostingVersionPriceType::Cost
                    #InventDimJoin(inventItemPriceSim.InventDimId, inventDimSim, inventDimComb, dimParmProduct)
                        && inventDimSim.InventSiteId  == inventSite.SiteId
            {
                ret = false;
                this.addError(strFmt("@SYS120477", InventTable::showItemSiteAndProductDim(_inventTable.ItemId, inventDimComb, inventSite.SiteId)));
            }
        }
        else
        {
            while select SiteId from inventSite
                notexists join inventItemPriceSim
                    where inventItemPriceSim.ItemId      == _inventTable.ItemId
                        && inventItemPriceSim.VersionId   == _inventStdCostConv.CostingVersionId
                        && inventItemPriceSim.PriceType   == CostingVersionPriceType::Cost
                #InventDimJoin(inventItemPriceSim.InventDimId, inventDimSim, inventDimComb, dimParmProduct)
                    && inventDimSim.InventSiteId  == inventSite.SiteId
            {
                ret = false;
                this.addError(strFmt("@SYS120478", _inventTable.ItemId, inventSite.SiteId));
            }
        }
        return ret;
    }

]]></Source>
            </Method>
            <Method>
                <Name>validatePriceInConvPeriod</Name>
                <Source><![CDATA[
    protected boolean validatePriceInConvPeriod(
        InventTable         _inventTable,
        InventStdCostConv   _inventStdCostConv
        )
    {
        InventItemPrice         inventItemPrice;
        CostingVersion          costingVersion;
        InventDim               inventDim;
        boolean                 ret                 = true;

        select firstonly ItemId, VersionId, RecId, ActivationDate from inventItemPrice
        where inventItemPrice.ItemId         == _inventTable.ItemId
           && inventItemPrice.ActivationDate >= _inventStdCostConv.TransitionStartDate
           && inventItemPrice.PriceType     == CostingVersionPriceType::Cost
        join inventDim
            where inventDim.InventDimId == inventItemPrice.InventDimId
        exists join costingVersion
            where costingVersion.VersionId == inventItemPrice.VersionId
               && costingVersion.CostingType == CostingVersionCostingType::Standard;

        if (inventItemPrice.RecId)
        {
            ret = false;
            this.addError(strFmt("@SCM:StdCostConversionWarningActivePriceExistsInConversionPeriods",
                inventItemPrice.ActivationDate,
                InventTable::showItemSiteAndProductDim(inventItemPrice.ItemId, inventDim, inventDim.InventSiteId),
                _inventStdCostConv.TransitionStartDate)
                );
        }
        return ret;
    }

]]></Source>
            </Method>
            <Method>
                <Name>construct</Name>
                <Source><![CDATA[
    /// <summary>
    ///    Instantiates an <c>InventStdCostConvCheck_StandardCost</c> object.
    /// </summary>
    /// <param name="_inventStdCostConvItem">
    ///    An <c>InventStdCostConvItem</c> record buffer that must be checked.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConvCheck_StandardCost</c> object.
    /// </returns>
    /// <remarks>
    ///    This method should not be called directly. An <c>InventStdCostConvCheck</c> type object should be
    ///    instantiated using the constructor on the <c>InventStdCostConvCheck</c> class.
    /// </remarks>
    static public InventStdCostConvCheck_StandardCost construct(InventStdCostConvItem _inventStdCostConvItem)
    {
        return new InventStdCostConvCheck_StandardCost(_inventStdCostConvItem);
    }

]]></Source>
            </Method>
        </Methods>
    </SourceCode>
</AxClass>