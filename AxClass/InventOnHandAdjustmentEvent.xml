<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandAdjustmentEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
public class InventOnHandAdjustmentEvent
{
    private str id;
    private str organizationId;
    private str productId;
    private Map dimensions;
    private Map quantities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmOrganizationId</Name>
				<Source><![CDATA[
    [DataMember('organizationId')]
    public str parmOrganizationId(str _organizationId = organizationId)
    {
        organizationId = _organizationId;
        return organizationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductId</Name>
				<Source><![CDATA[
    [DataMember('productId')]
    public str parmProductId(str _productId = productId)
    {
        productId = _productId;
        return productId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    [DataMember('id')]
    public str parmId(str _id = id)
    {
        id = _id;
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantities</Name>
				<Source><![CDATA[
    [DataMember('quantities')]
    public Map parmQuantities(Map _quantities = quantities)
    {
        quantities = _quantities;
        return quantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionSet</Name>
				<Source><![CDATA[
    [DataMember('dimensions')]
    public Map parmDimensionSet(Map _dimensions = dimensions)
    {
        dimensions = _dimensions;
        return dimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeQuantities</Name>
				<Source><![CDATA[
    public void mergeQuantities(str _dataSource, str _physicalMeasure, real _qty)
    {
        Map quantity;
        if (quantities.exists(_dataSource))
        {
            quantity = quantities.lookup(_dataSource);

            if (quantity.exists(_physicalMeasure))
            {
                throw error("@SCM:InventoryServiceAdjustmentDuplicatePhysicalMeasuresError");
            }
            else
            {
                quantity.insert(_physicalMeasure, _qty);
            }
        }
        else
        {
            quantity = new Map(Types::String, Types::Real);
            quantity.insert(_physicalMeasure, _qty);
            quantities.insert(_dataSource, quantity);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>