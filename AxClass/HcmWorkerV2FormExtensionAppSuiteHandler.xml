<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmWorkerV2FormExtensionAppSuiteHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Handles the ApplicationSuite module form extension events for the HcmWorkerV2 form.
/// </summary>
internal static class HcmWorkerV2FormExtensionAppSuiteHandler
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmWorkerV2_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form OnInitialized event handler for HcmWorkerV2 form extension.
    /// </summary>
    /// <param name="_args">The args for the event.</param>
    [PostHandlerFor(formStr(HcmWorkerV2), formMethodStr(HcmWorkerV2, init))]
    public static void HcmWorkerV2_Post_init(XppPrePostArgs _args)
    {
        #ISOCountryRegionCodes

        SecurityRights securityRights = SecurityRights::construct();

        FormRun workerForm = _args.getThis();
        FormDataSource retailStaffTable_ds = workerForm.dataSource(formDataSourceStr(HcmWorkerV2, RetailStaffTable)) as FormDataSource;
        FormDataSource retailPositionPosPermission_ds = workerForm.dataSource(formDataSourceStr(HcmWorkerV2, RetailPositionPosPermission)) as FormDataSource;
        FormDataSource retailTillLayoutStaff_ds = workerForm.dataSource(formDataSourceStr(HcmWorkerV2, RetailTillLayoutStaff)) as FormDataSource;
        FormDataSource hcmWorker_ds = workerForm.dataSource(formDataSourceStr(HcmWorkerV2, HcmWorker)) as FormDataSource;

        if (workerForm.args()
            && workerForm.args().caller()
            && workerForm.args().dataset() == tableNum(InventBuyerGroup))
        {
            hcmWorker_ds.allowDelete(false);
            hcmWorker_ds.allowEdit(false);
        }

        boolean retailAccess = securityRights.formControlAccessRight(formStr(HcmWorkerV2), formControlStr(HcmWorkerV2, RetailTabPage));
        retailStaffTable_ds.queryBuildDataSource().enabled(retailAccess);
        retailPositionPosPermission_DS.queryBuildDataSource().enabled(retailAccess);
        retailTillLayoutStaff_ds.queryBuildDataSource().enabled(retailAccess);

        boolean timeAccess = securityRights.formControlAccessRight(formStr(HcmWorkerV2), formControlStr(HcmWorkerV2, TimeRegistrationTabPage));
        FormDataSource jmgEmployee_DS = workerForm.dataSource(formDataSourceStr(HcmWorkerV2, JmgEmployee)) as FormDataSource;
        JmgEmployee_DS.queryBuildDataSource().enabled(timeAccess);

        if (workerForm.args()
            && ((workerForm.args().caller() && workerForm.args().caller().name() && workerForm.args().caller().name() == formStr(smmsalesunitdesigner))
                || workerForm.args().parm() == formStr(CaseDetail)
                || workerForm.args().parm() == formStr(smmOpportunityTable)
                || workerForm.args().caller() is CFMPaymentRequestForm_AccountNum
                || workerForm.args().menuItemName() == menuitemDisplayStr(HcmRetailWorker))
            && workerForm.args().dataset() == tableNum(HcmWorker)
        )
        {
            workerForm.setHcmWorker(workerForm.args().record().RecId);
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            FormFunctionButtonControl fiscalPrinterWorkerSetup_PL = workerForm.design().controlName(formControlStr(HcmWorkerV2, fiscalPrinterWorkerSetup_PL)) as FormFunctionButtonControl;
            fiscalPrinterWorkerSetup_PL.visible(true);
        }
        // </GEEPL>

        // Hide view client book button control if clienteling feature is not enabled.
        if (!RetailClientelingFeatureExposure::isEnabled())
        {
            FormFunctionButtonControl viewClientBook = workerForm.design().controlName(formControlStr(HcmWorkerV2, View_ClientBook)) as FormFunctionButtonControl;
            viewClientBook.visible(false);
        }

        // Hide project tab if Project operations integration feature is enabled
        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            FormActionPaneTabControl projPaneTab = workerForm.design().controlName(formControlStr(HcmWorkerV2, ProjectPaneTab)) as FormActionPaneTabControl;
            projPaneTab.visible(false);
            projPaneTab.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStaffTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// RetailStaffTable form data source OnActivated event handler for HcmWorkerV2 form extension data source.
    /// </summary>
    /// <param name="_sender">The RetailStaffTable data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, RetailStaffTable), FormDataSourceEventType::Activated)]
    public static void RetailStaffTable_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RetailStaffTable retailStaffTable = _sender.cursor();

        boolean canInputExternalIdentity =
                retailStaffTable.ExternalIdentityAlias == ''
                && retailStaffTable.ExternalIdentityName == ''
                && retailStaffTable.ExternalIdentitySubId == '';

        FormRun hcmWorkerForm = _sender.formRun();
        FormGroupControl retailStaffTableExternalIdentity = hcmWorkerForm.design().controlName(formControlStr(HcmWorkerV2, RetailStaffTable_ExternalIdentity)) as FormGroupControl;
        retailStaffTableExternalIdentity.enabled(canInputExternalIdentity);

        // initialize control DefaultCommissionSalesGroup value.
        RetailStaffDefaultCommissionSalesGroup defaultSalesGroup = RetailStaffDefaultCommissionSalesGroup::find(retailStaffTable.staffId);
        FormStringControl defaultSalesGroupControl = hcmWorkerForm.design().controlName(formControlStr(HcmWorkerV2, DefaultCommissionSalesGroup)) as FormStringControl;
        defaultSalesGroupControl.text(defaultSalesGroup.DefaultCommissionSalesGroup);

        // Hide controls for retail trial.
        if (RetailTrialUserManagement::isRetailTrialUser())
        {
            FormTabPageControl tillLayoutTab = hcmWorkerForm.design().controlName(formControlStr(HcmWorkerV2, TillLayoutTab)) as FormTabPageControl;
            tillLayoutTab.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailStaffTable_OnValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// RetailStaffTable form data source OnValidatedWrite event handler for HcmWorkerV2 form extension data source.
    /// </summary>
    /// <param name="_sender">The RetailStaffTable data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, RetailStaffTable), FormDataSourceEventType::ValidatedWrite)]
    public static void RetailStaffTable_OnValidatedWrite(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RetailStaffTable retailStaffTable = _sender.cursor();

        FormRun hcmWorkerForm = _sender.formRun();
        FormGroupControl retailStaffTableExternalIdentity = hcmWorkerForm.design().controlName(formControlStr(HcmWorkerV2, RetailStaffTable_ExternalIdentity)) as FormGroupControl;

        // If alias, UPN or SubId is provided for external identity, all the 3 fileds must be
        // provided. We are not trying to connnect to Microsoft Entra ID to validate the user since in a offline
        // scenario it might not able to connect to Microsoft Entra ID, but we allow user to associate worker with
        // the Microsoft Entra ID info provided on this form.
        if (retailStaffTableExternalIdentity.enabled())
        {
            if (retailStaffTable.ExternalIdentityAlias != ''
                || retailStaffTable.ExternalIdentityName != ''
                || retailStaffTable.ExternalIdentitySubId != '')
            {
                if (retailStaffTable.ExternalIdentityAlias == ''
                    || retailStaffTable.ExternalIdentityName == ''
                    || retailStaffTable.ExternalIdentitySubId == '')
                {
                    throw error("@Retail:RetailExternalIdentityInfoIncomplete");
                }
                else
                {
                    eventSource.EventWriteCriticalEmployeeDataModified(int642Str(retailStaffTable.RecId), 'ExternalIdentity', 'update');

                    // We need to alert customer to run CDX 1060 job since external identity association change is security critical.
                    if (FeatureStateProvider::isFeatureEnabled(RetailEmployeeExternalIdentityLocalAuthFeature::instance()))
                    {
                        info("@Retail:RetailWorkerAuthInfoChanged");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>password_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for RetailStaffTable.password field's OnModified event.
    /// </summary>
    /// <param name="sender">The RetailStaffTable.password field of the form extension.</param>
    /// <param name="e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorkerV2, RetailStaffTable, password), FormDataFieldEventType::Modified)]
    public static void password_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        RetailStaffTable retailStaffTable = sender.datasource().cursor();

        eventSource.EventWriteCriticalEmployeeDataModified(int642Str(retailStaffTable.RecId), formDataFieldStr(HcmWorkerV2, RetailStaffTable, password), 'update');

        // We need to alert customer to run CDX 1060 job since worker password change is security critical.
        info("@Retail:RetailWorkerAuthInfoChanged");
    }

]]></Source>
			</Method>
			<Method>
				<Name>DefaultCommissionSalesGroup_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create/update record in RetailStaffDefaultCommissionSalesGroup for a current staffId.
    /// OnModified Event will be called when user saves worker change for entered for DefaultCommissionSalesGroup control.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerV2, DefaultCommissionSalesGroup), FormControlEventType::Modified)]
    public static void DefaultCommissionSalesGroup_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        CommissionSalesGroup staffDefaultSalesGroup;

        FormDataSource retailStaffTable_ds = _sender.formRun().dataSource(formDataSourceStr(HcmWorkerV2, RetailStaffTable)) as FormDataSource;

        RetailStaffTable retailStaffTable = retailStaffTable_ds.cursor();

        select firstonly GroupId from staffDefaultSalesGroup where staffDefaultSalesGroup.groupId == _sender.valueStr();

        RetailStaffDefaultCommissionSalesGroup::findOrCreate(retailStaffTable.staffId, staffDefaultSalesGroup ? staffDefaultSalesGroup.groupId : '', true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>DefaultCommissionSalesGroup_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find Commission Sales group for current DataAreaId that has Sales Rep and Sales rep has associated Dir Person, HCMWorker for current worker.
    /// E.g. We have Commission Sales Group "TV1", "REGR1"
    /// Retail Staff worker "Worker1" is associated with HCMWorker and DirPerson
    /// If Sales Rep has TV1 associated with Worker1 and REGR1 is also associated with Worker1
    /// Result: Worker1 to get 2 Commission Sales Groups in Lookup: TV1, REGR1 with groupId, Name as columns.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerV2, DefaultCommissionSalesGroup), FormControlEventType::Lookup)]
    public static void DefaultCommissionSalesGroup_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        Query query = new Query();

        QueryBuildDataSource salesGroupQueryDataSource, saleRepQueryDataSource, personQueryDataSource, workerQueryDataSource;

        QueryBuildRange queryBuildRange;

        FormRun hcmWorkerForm = _sender.formRun();
        FormDataSource retailStaffTable_ds = hcmWorkerForm.dataSource(formDataSourceStr(HcmWorkerV2, RetailStaffTable)) as FormDataSource;
        RetailStaffTable retailStaffTable = retailStaffTable_ds.cursor();

        // Select GroupId and Name from <c>CommissionSalesGroup</c>
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CommissionSalesGroup), _sender);
        sysTableLookup.addLookupField(fieldNum(CommissionSalesGroup, GroupId));
        sysTableLookup.addLookupField(fieldNum(CommissionSalesGroup, Name));

        // Build query to get <c>CommissionSalesGroup</c> records associated with current Retail Staff.
        salesGroupQueryDataSource = query.addDataSource(tableNum(CommissionSalesGroup));

        saleRepQueryDataSource = salesGroupQueryDataSource.addDataSource(tableNum(CommissionSalesRep));
        saleRepQueryDataSource.joinMode(JoinMode::ExistsJoin);
        saleRepQueryDataSource.addLink(fieldNum(CommissionSalesGroup, GroupId), fieldNum(CommissionSalesRep, GroupId));

        personQueryDataSource = saleRepQueryDataSource.addDataSource(tableNum(DirPerson));
        personQueryDataSource.joinMode(JoinMode::ExistsJoin);
        personQueryDataSource.addLink(fieldNum(CommissionSalesRep,Person), fieldNum(DirPerson, RecId));

        workerQueryDataSource = personQueryDataSource.addDataSource(tableNum(HcmWorker));
        workerQueryDataSource.joinMode(JoinMode::ExistsJoin);
        workerQueryDataSource.addLink(fieldNum(DirPerson, RecId), fieldNum(HcmWorker, Person));
        workerQueryDataSource.addRange(fieldNum(HcmWorker, PersonnelNumber)).value(retailStaffTable.staffId);

        // Perform the lookup
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        // Do not call super to avoid another lookup form from <c>CommissionSalesGroup</c>
        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorker_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorker form data source OnInitialized event handler for HcmWorkerV2 form extension data source.
    /// </summary>
    /// <param name="_sender">The HcmWorker data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, HcmWorker), FormDataSourceEventType::Initialized)]
    public static void HcmWorker_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        RetailStoreTable    retailStoreTable;

        FormRun workerForm = _sender.formRun();
        if (workerForm.args().dataset() && workerForm.args().dataset() == tablenum(RetailStoreTable))
        {
            retailStoreTable = workerForm.args().record();

            Query query = _sender.query();

            QueryBuildDataSource qbds = query.dataSourceTable(tableNum(HcmWorker));

            QueryBuildDataSource qbdsDirAddressBookParty = qbds.addDataSource(tableNum(DirAddressBookParty));
            qbdsDirAddressBookParty.joinMode(JoinMode::ExistsJoin);
            qbdsDirAddressBookParty.addLink(fieldNum(HcmWorker, Person), fieldNum(DirAddressBookParty, Party));
            QueryBuildDataSource qbdsRetailStoreAddressBook = qbdsDirAddressBookParty.addDataSource(tableNum(RetailStoreAddressBook));
            qbdsRetailStoreAddressBook.joinMode(JoinMode::InnerJoin);
            qbdsRetailStoreAddressBook.addLink(fieldNum(DirAddressBookParty, Addressbook), fieldNum(RetailStoreAddressBook, AddressBook));

            QueryBuildRange qbrAddressBook = qbdsRetailStoreAddressBook.addRange(fieldNum(RetailStoreAddressBook, AddressBookType));
            qbrAddressBook.value(queryValue(RetailAddressBookType::Employee));
            QueryBuildRange qbrStoreRecId = qbdsRetailStoreAddressBook.addRange(fieldNum(RetailStoreAddressBook, StoreRecId));
            qbrStoreRecId.value(queryValue(retailStoreTable.RecId));
            qbrStoreRecId.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorker_OnPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form OnPostRun OnValidatedWrite event handler for HcmWorkerV2 form extension data source.
    /// </summary>
    /// <param name="_sender">The HcmWorker form.</param>
    /// <param name="_e">Args for the event.</param>
    [FormEventHandler(formStr(HcmWorkerV2), FormEventType::PostRun)]
    public static void HcmWorker_OnPostRun(xFormRun _sender, FormEventArgs _e)
    {
        if (RetailSMB::IsRetailSMBEnabled())
        {
            // Hide info parts: Worker loans, Worker skills, Tax registration info, Worker goals
            RetailUtils::HidePart(_sender, identifierStr(LoansFactBox));
            RetailUtils::HidePart(_sender, identifierStr(SkillsFactBox));
            RetailUtils::HidePart(_sender, identifierStr(DirPartyPrimPostalAddressTaxRegistration));
            RetailUtils::HidePart(_sender, identifierStr(GoalsFactBox));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>JmgEmployee_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// JmgEmployee form data source OnQueryExecuting event handler for HcmWorkerV2 form extension data source.
    /// </summary>
    /// <param name="_sender">The JmgEmployee data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, JmgEmployee), FormDataSourceEventType::QueryExecuting)]
    public static void JmgEmployee_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.query().clearCompanyRange();

        FormRun workerForm = _sender.formRun();
        SelectableDataArea selectedLegalEntityDataAreaId = workerForm.getSelectedLegalEntityDataAreaId();

        if (selectedLegalEntityDataAreaId)
        {
            // Do not use a "blank" selectedLegalEntityDataAreaId value.

            // A Worker with only "future" dated employment(s) could result in a scenario where
            // there is not a valid selectedLegalEntityDataAreaId value.
            _sender.query().addCompanyRange(selectedLegalEntityDataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>JmgEmployee_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// JmgEmployee form data source OnQueryExecuted event handler for HcmWorkerV2 form extension data source.
    /// </summary>
    /// <param name="_sender">The JmgEmployee data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, JmgEmployee), FormDataSourceEventType::QueryExecuted)]
    public static void JmgEmployee_OnQueryExecuted(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        SecurityRights securityRights = SecurityRights::construct();
        boolean timeAccess = securityRights.formControlAccessRight(formStr(HcmWorkerV2), formControlStr(HcmWorkerV2, TimeRegistrationTabPage));

        if (RetailSMB::IsRetailSMBEnabled() || !timeAccess)
        {
            // TimeRegistration tab page has been hidden in Retail SMB or user does not have access.
            // Enable/disable controls on invisible tab page will throw exception.
            return;
        }

        JmgEmployee jmgEmployee = _sender.cursor();
        boolean hasRecord = jmgEmployee != null;

        FormRun hcmWorkerForm = _sender.formRun();
        FormButtonGroupControl maintainButtonGroupControl = hcmWorkerForm.design().controlName(formControlStr(HcmWorkerV2, maintainButtonGroup)) as FormButtonGroupControl;
        FormButtonGroupControl timeRegistrationMaintainButtonGroupControl = hcmWorkerForm.design().controlName(formControlStr(HcmWorkerV2, timeRegistrationMaintainButtonGroup)) as FormButtonGroupControl;
        FormButtonGroupControl timeAssignmentButtonGroupControl = hcmWorkerForm.design().controlName(formControlStr(HcmWorkerV2, timeAssignmentButtonGroup)) as FormButtonGroupControl;
        FormButtonGroupControl flexButtonGroupControl = hcmWorkerForm.design().controlName(formControlStr(HcmWorkerV2, flexButtonGroup)) as FormButtonGroupControl;
        FormButtonGroupControl workerBalancesButtonGroupControl = hcmWorkerForm.design().controlName(formControlStr(HcmWorkerV2, workerBalancesButtonGroup)) as FormButtonGroupControl;

        maintainButtonGroupControl.enabled(!hasRecord);
        timeRegistrationMaintainButtonGroupControl.enabled(!hasRecord);
        timeAssignmentButtonGroupControl.enabled(hasRecord);
        flexButtonGroupControl.enabled(hasRecord && jmgEmployee.FlexProfile == NoYes::Yes);
        workerBalancesButtonGroupControl.enabled(hasRecord);

        /// Set PIN Code field to some value to trigger appearance of password signs. This also allows to make PIN Code empty.
        FormStringControl TaAIdentification_PINCodeControl = hcmWorkerForm.design().controlName(formControlStr(HcmWorkerV2, TaAIdentification_PINCode)) as FormStringControl;
        TaAIdentification_PINCodeControl.text('111');
    }

]]></Source>
			</Method>
			<Method>
				<Name>JmgEmployee_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// JmgEmployee form data source OnWritten event handler for HcmWorkerV2 form extension data source.
    /// </summary>
    /// <param name="_sender">The JmgEmployee data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, JmgEmployee), FormDataSourceEventType::Written)]
    public static void JmgEmployee_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun workerForm = _sender.formRun();

        workerForm.setActionPaneCommon();
    }

]]></Source>
			</Method>
			<Method>
				<Name>WorkCalendarEmployment_OnCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// WorkCalendarEmployment form data source OnCreated event handler for HcmWorkerV2 form extension data source.
    /// </summary>
    /// <param name="_sender">The WorkCalendarEmployment data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, WorkCalendarEmployment), FormDataSourceEventType::Created)]
    public static void WorkCalendarEmployment_OnCreated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        WorkCalendarEmployment workCalendarEmployment =_sender.cursor();
        HcmEmployment hcmEmployment = _sender.formRun().dataSource(formDataSourceStr(HcmWorkerV2, HcmEmployment)).cursor();

        workCalendarEmployment.Employment = hcmEmployment.RecId;
        workCalendarEmployment.CalendarDataAreaId = CompanyInfo::getDataArea(hcmEmployment.LegalEntity);

        _sender.forceWrite(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>WorkCalendarEmployment_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// WorkCalendarEmployment form data source OnWritten event handler for HcmWorkerV2 form extension data source.
    /// </summary>
    /// <param name="_sender">The WorkCalendarEmployment data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, WorkCalendarEmployment), FormDataSourceEventType::Written)]
    public static void WorkCalendarEmployment_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (_sender.forceWrite())
        {
            _sender.forceWrite(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CalendarId_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// WorkCalendarEmployment CalendarId form data object OnValidated event handler for the HcmWorkerV2 form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorkerV2, WorkCalendarEmployment, CalendarId), FormDataFieldEventType::Validated)]
    public static void CalendarId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        WorkCalendarEmployment workCalendarEmployment = _sender.datasource().cursor();

        if (workCalendarEmployment.CalendarId)
        {
            // Value set by the lookup
            changecompany(CompanyInfo::getDataArea(HcmEmployment::find(workCalendarEmployment.Employment).LegalEntity))
            {
                if (!WorkCalendarTable::exist(workCalendarEmployment.CalendarId))
                {
                    throw error(strFmt(WorkCalendarTable::txtNotExist(), workCalendarEmployment.CalendarId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaAIdentification_PINCode_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorker TaAIdentification_PINCode form control OnModified event handler for the HcmWorkerV2 form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerV2, TaAIdentification_PINCode), FormControlEventType::Modified)]
    public static void TaAIdentification_PINCode_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormStringControl pinCodeControl = _sender as FormStringControl;

        FormRun hcmWorkerForm = _sender.formRun();
        FormDataSource jmgEmployee_ds = hcmWorkerForm.dataSource(formDataSourceStr(HcmWorkerV2, JmgEmployee)) as FormDataSource;
        JmgEmployee employee = jmgEmployee_ds.cursor();

        employee.setPINCode(pinCodeControl.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>MainTab_OnTabChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorkerV2 MainTab form control OnTabChanged event handler for the HcmWorkerV2 form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerV2, MainTab), FormControlEventType::TabChanged)]
    public static void MainTab_OnTabChanged(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hcmWorkerForm = _sender.formRun() as HcmIWorkerV2EmploymentExtendedContext;

        if(hcmWorkerForm != null)
        {
            HcmWorkerV2FormExtensionAppSuiteHandler::updateTimeAndProjectAccessControls(hcmWorkerForm,
                                                                                        hcmWorkerForm.getHasEmploymentInCurrentCompany(),
                                                                                        hcmWorkerForm.isEmployeeInCurrentLegalEntity());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>employmentControlsUpdatingHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the worker form controls based on the employment type of the worker.
    /// </summary>
    /// <param name = "_formElement">The worker form instance that raised the event.</param>
    /// <param name = "_hasEmploymentInCurrentCompany">Indicates whether or not the worker is employed by the current company.</param>
    /// <param name = "_isEmployeeEmployment">Indicates whether or not the worker is employed as an employee.</param>
    [SubscribesTo(FormStr(HcmWorkerV2), delegatestr(HcmWorkerV2, employmentControlsUpdating))]
    public static void employmentControlsUpdatingHandler(FormRun _formElement, boolean _hasEmploymentInCurrentCompany, boolean _isEmployeeEmployment)
    {
        FormActionPaneTabControl compensationPaneTabControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, compensationPaneTab)) as FormActionPaneTabControl;

        // Restricting visibility of compensation tab for commerce essentials
        if (RetailSMB::IsRetailSMBEnabled())
        {
            FormActionPaneTabControl projectPaneTabControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, ProjectPaneTab)) as FormActionPaneTabControl;
            projectPaneTabControl.visible(false);
        }

        SecurityRights securityRights = SecurityRights::construct();
        boolean timeAccess = securityRights.formControlAccessRight(formStr(HcmWorkerV2), formControlStr(HcmWorkerV2, TimeRegistrationTabPage));
        FormDataSource jmgEmployee_ds = _formElement.dataSource(formDataSourceStr(HcmWorkerV2, JmgEmployee)) as FormDataSource;
        FormDataSource employment_ds = _formElement.dataSource(formDataSourceStr(HcmWorkerV2, HcmEmployment)) as FormDataSource;

        //
        // If the worker has no active employments then disable the related data source;
        // otherwise the worker has at least one active employment so enable the related data source.
        //
        FormDataSource hcmEmploymentContractor_ds = _formElement.dataSource(formDataSourceStr(HcmWorkerV2, HcmEmploymentContractor)) as FormDataSource;
        hcmEmploymentContractor_ds.allowCreate(_hasEmploymentInCurrentCompany);
        hcmEmploymentContractor_ds.allowEdit(_hasEmploymentInCurrentCompany);
        hcmEmploymentContractor_ds.allowDelete(_hasEmploymentInCurrentCompany);

        if (timeAccess)
        {
            jmgEmployee_ds.executeQuery();
        }

        boolean isBorrowedInCurrentCompanyContext = false;
        FormDataSource hcmWorker_ds = _formElement.dataSource(formDataSourceStr(HcmWorkerV2, HcmWorker)) as FormDataSource;

        if (!_hasEmploymentInCurrentCompany)
        {
            isBorrowedInCurrentCompanyContext = HcmWorkerFormExtensionAppSuiteHandler::borrowedInCurrentCompany(hcmWorker_ds.cursor().RecId);
        }

        FormTabPageControl timeRegistrationTabPageControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, TimeRegistrationTabPage)) as FormTabPageControl;
        FormActionPaneTabControl projectPaneTabControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, ProjectPaneTab)) as FormActionPaneTabControl;
        FormFunctionButtonControl actionPaneAbsenceHistoryControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, ActionPane_AbsenceHistory)) as FormFunctionButtonControl;
        FormFunctionButtonControl actionPaneAbsenceTransactionsControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, ActionPane_AbsenceTransactions)) as FormFunctionButtonControl;
        FormDropDialogButtonControl generalSetup_PurchRFQControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, GeneralSetup_PurchRFQ)) as FormDropDialogButtonControl;
        FormFunctionButtonControl generalSetup_SMADispatchControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, GeneralSetup_SMADispatch)) as FormFunctionButtonControl;
        FormButtonGroupControl compensationCommissionButtonGroupControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, CommissionButtonGroup)) as FormButtonGroupControl;

        compensationCommissionButtonGroupControl.enabled(_hasEmploymentInCurrentCompany);

        timeRegistrationTabPageControl.visible(timeAccess && _hasEmploymentInCurrentCompany);
        boolean projectOperationsIntegrationEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();

        projectPaneTabControl.enabled(_hasEmploymentInCurrentCompany && !projectOperationsIntegrationEnabled);
        projectPaneTabControl.visible(_hasEmploymentInCurrentCompany && !projectOperationsIntegrationEnabled);

        actionPaneAbsenceHistoryControl.enabled(_hasEmploymentInCurrentCompany || isBorrowedInCurrentCompanyContext);
        actionPaneAbsenceTransactionsControl.enabled(_hasEmploymentInCurrentCompany || isBorrowedInCurrentCompanyContext);

        generalSetup_PurchRFQControl.visible(_hasEmploymentInCurrentCompany);
        generalSetup_SMADispatchControl.visible(_hasEmploymentInCurrentCompany);

        HcmWorkerV2FormExtensionAppSuiteHandler::updateTimeAndProjectAccessControls(_formElement, _hasEmploymentInCurrentCompany, _isEmployeeEmployment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimeAndProjectAccessControls</Name>
				<Source><![CDATA[
    private static void updateTimeAndProjectAccessControls(FormRun _formElement, boolean _hasEmploymentInCurrentCompany, boolean _isEmployeeEmployment)
    {
        SecurityRights securityRights = SecurityRights::construct();
        boolean timeAccess = securityRights.formControlAccessRight(formStr(HcmWorkerV2), formControlStr(HcmWorkerV2, TimeRegistrationTabPage));

        FormDataSource hcmWorker_ds = _formElement.dataSource(formDataSourceStr(HcmWorkerV2, HcmWorker)) as FormDataSource;
        FormDataSource hcmEmployment_ds = _formElement.dataSource(formDataSourceStr(HcmWorkerV2, HcmEmployment)) as FormDataSource;
        FormDataSource jmgEmployee_ds = _formElement.dataSource(formDataSourceStr(HcmWorkerV2, JmgEmployee)) as FormDataSource;

        boolean employedInCurrentCompanyContext = _hasEmploymentInCurrentCompany;
        boolean isEmployeeInCurrentCompany = false;
        boolean isContractorEmployment = false;

        if (employedInCurrentCompanyContext)
        {
            isEmployeeInCurrentCompany = _isEmployeeEmployment;
            isContractorEmployment = !_isEmployeeEmployment;
        }

        FormFunctionButtonControl generalSetup_ProjectControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, GeneralSetup_Project)) as FormFunctionButtonControl;
        FormFunctionButtonControl projProjectControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, ProjProject)) as FormFunctionButtonControl;
        FormFunctionButtonControl projCategoryControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, ProjCategory)) as FormFunctionButtonControl;
        FormButtonGroupControl projectControlControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, ProjectControl)) as FormButtonGroupControl;
        FormButtonGroupControl projTransactionControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, ProjTransaction)) as FormButtonGroupControl;
        FormButtonGroupControl projViewControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, ProjView)) as FormButtonGroupControl;
        FormDropDialogButtonControl generalSetup_PurchRFQControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, GeneralSetup_PurchRFQ)) as FormDropDialogButtonControl;
        FormFunctionButtonControl generalSetup_SMADispatchControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, GeneralSetup_SMADispatch)) as FormFunctionButtonControl;

        generalSetup_ProjectControl.enabled(employedInCurrentCompanyContext);
        projProjectControl.enabled(employedInCurrentCompanyContext);
        projCategoryControl.enabled(employedInCurrentCompanyContext);
        projectControlControl.enabled(employedInCurrentCompanyContext);
        projTransactionControl.enabled(employedInCurrentCompanyContext);
        projViewControl.enabled(employedInCurrentCompanyContext);
        generalSetup_PurchRFQControl.enabled(employedInCurrentCompanyContext);
        generalSetup_SMADispatchControl.enabled(employedInCurrentCompanyContext);

        HcmWorker worker = hcmWorker_ds.cursor();
        boolean isWorkerStatusTerminated = worker.workerStatus() == HcmWorkerStatus::Terminated;

        FormTabPageControl detailsPanelControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, DetailsPanel)) as FormTabPageControl;
        FormButtonGroupControl timeRegistrationReportsGroupControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, TimeRegistrationReportsGroup)) as FormButtonGroupControl;
        FormButtonGroupControl timeRegistrationInquiryGroupControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, TimeRegistrationInquiryGroup)) as FormButtonGroupControl;
        FormFunctionButtonControl whsWorkerControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, WHSWorker)) as FormFunctionButtonControl;
        FormFunctionButtonControl mbTaxRegistrationControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, MbTaxRegistration)) as FormFunctionButtonControl;

        // Make visibility/enability adjustments depending on whether the Grid or Details is currently visible
        if (detailsPanelControl.isActivePage())
        {
            if (timeAccess)
            {
                timeRegistrationReportsGroupControl.visible(false);
                timeRegistrationInquiryGroupControl.visible(false);
            }

            whsWorkerControl.enabled(true);
            mbTaxRegistrationControl.enabled(true);
        }
        else
        {
            boolean  hasFlexProfile;
            boolean  isJmgEmployee;

            if (timeAccess)
            {
                JmgEmployee employee = jmgEmployee_ds.cursor();
                isJmgEmployee = (employee.Worker == worker.RecId);
                hasFlexProfile = employee.FlexProfile;

                FormButtonGroupControl maintainButtonGroupControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, maintainButtonGroup)) as FormButtonGroupControl;

                maintainButtonGroupControl.enabled(!isJmgEmployee && employedInCurrentCompanyContext);
            }
            
            SelectableDataArea selectedLegalEntityDataAreaId = _formElement.getSelectedLegalEntityDataAreaId();

            if (timeAccess)
            {
                timeRegistrationReportsGroupControl.visible(true);
                timeRegistrationReportsGroupControl.enabled(isJmgEmployee && isEmployeeInCurrentCompany);

                timeRegistrationInquiryGroupControl.visible(true);
                timeRegistrationInquiryGroupControl.enabled(isJmgEmployee && isEmployeeInCurrentCompany);

                FormFunctionButtonControl flexOverviewControl = _formElement.design().controlName(formControlStr(HcmWorkerV2, FlexOverview)) as FormFunctionButtonControl;
                flexOverviewControl.enabled(isJmgEmployee && hasFlexProfile);
            }

            whsWorkerControl.enabled(false);
            mbTaxRegistrationControl.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>borrowedInCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the worker who is hired by another LE is a valid borrowed worker
    /// </summary>
    /// <param name = "_hcmWorkerRecId">RecID of worker.</param>
    /// <returns>
    /// Return true if the worker is a valid borrowed worker
    /// </returns>
    public static boolean borrowedInCurrentCompany(RecId _hcmWorkerRecId)
    {
        HcmEmployment           employmentTable;
        CompanyInfo             companyTable;
        LedgerInterCompany      ledgerInterCompany;
        WorkCalendarEmployment  employmentCalendar;
        ProjTransferPrice       projectTransferPrice;
        ProjParameters          projParameters;

        select firstonly crossCompany RecId, LegalEntity from employmentTable
            where employmentTable.Worker == _hcmWorkerRecId
                && employmentTable.LegalEntity != CompanyInfo::current()
                && !(employmentTable.ValidTo < DateTimeUtil::getSystemDateTime())
                && !(employmentTable.ValidFrom > DateTimeUtil::maxValue())
            join DataArea from companyTable
                where companyTable.RecId == employmentTable.LegalEntity
            join RecId from ledgerInterCompany
                where ledgerIntercompany.OriginatingCompany == companyTable.DataArea
                    && ledgerIntercompany.DestinationCompany == curext()
            join RecId from projParameters
                where projParameters.dataAreaId == companyTable.DataArea
                && projParameters.EnableIntercompanyTimesheet == NoYes::Yes
            join RecId from employmentCalendar
                where employmentCalendar.Employment == employmentTable.RecId
                && employmentCalendar.CalendarDataAreaId == companyTable.DataArea
                && employmentCalendar.CalendarId != ""
            join RecId from projectTransferPrice
                where projectTransferPrice.dataAreaId == companyTable.DataArea
                    && projectTransferPrice.ProjectDataAreaId == curext()
        && (ResourceFacade::getWorker(projectTransferPrice.Resource) == _hcmWorkerRecId
            || projectTransferPrice.Resource == 0);

        return (employmentTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEmploymentContractor_OnWriting</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, HcmEmploymentContractor), FormDataSourceEventType::Writing)]
    public static void HcmEmploymentContractor_OnWriting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        HcmEmploymentContractor contractor = _sender.cursor();
        
        HcmEmploymentContractor existingContractor;

        select firstonly existingContractor
             where existingContractor.Employment == contractor.Employment;
        
        if (!existingContractor)
        {
            //If we are creating the initial record in the ContractorDetails, it should match up
            //with the from date on the employment.
            HcmEmployment employment = HcmEmployment::find(contractor.Employment);
            if (employment)
            {
                contractor.ValidFrom = employment.ValidFrom;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CFMDirPartyTable_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// CFMDirPartyTable form data source OnInitValue event handler for HcmWorkerV2 form extension data source.
    /// </summary>
    /// <param name="_sender">The CFMDirPartyTable data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, CFMDirPartyTable), FormDataSourceEventType::InitValue)]
    public static void CFMDirPartyTable_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (CFMParameters::isModuleEnabled())
        {
            CFMDirPartyTable cfmDirPartyTable = _sender.cursor();
            if (!cfmDirPartyTable.DirPartyTable)
            {
                DirPerson dirPerson = _sender.formRun().dataSource(formDataSourceStr(HcmWorkerV2, DirPerson)).cursor();
                cfmDirPartyTable.DirPartyTable = dirPerson.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CFMDirPartyTable_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the Initialized event of the DirPartyTable form.
    /// </summary>
    /// <param name="sender">The <c>CFMDirPartyTable</c> data source.</param>
    /// <param name="e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerV2, CFMDirPartyTable), FormDataSourceEventType::Initialized)]
    public static void CFMDirPartyTable_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (!CFMParameters::isModuleEnabled() && sender)
        {
            QueryBuildDataSource dirPartyQbds = sender.queryBuildDataSource();
            dirPartyQbds.enabled(false);
            sender.linkType(FormLinkType::Passive);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>