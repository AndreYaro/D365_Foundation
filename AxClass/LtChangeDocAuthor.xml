<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LtChangeDocAuthor</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LtChangeDocAuthor extends RunBase
{
    LtDocOriginator         whoIsAuthor;
    LtDocOriginator         newAuthor;

    DialogField             dialogWhoIsAuthor;
    DialogField             dialogNewAuthor;

    CustInvoiceJour         custInvoiceJour;
    VendInvoiceJour         vendInvoiceJour;
    ProjInvoiceJour         projInvoiceJour;

    LtModuleCustVendProj    moduleCustVendProj;

    Map                     selections2enumValue;
    Map                     enumValue2selections;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {

        DialogRunbase dialog = super();
        DialogGroup                 periodGroup;
        FormBuildComboBoxControl    fb;
        SysDictEnum                 sysDictEnum;

        void setComboItem(int _idx, LtDocOriginator _value)
        {
            fb.item(_idx);
            fb.text(sysDictEnum.value2Label(_value));

            selections2enumValue.insert(_idx - 1, _value);
            enumValue2selections.insert(_value,   _idx - 1);
        }
        ;
        periodGroup = dialog.addGroup('');
        periodGroup.columns(1);

        dialogWhoIsAuthor    = dialog.addFieldValue(enumStr(LtDocOriginator), whoIsAuthor);
        dialogWhoIsAuthor.allowEdit(false);

        dialogNewAuthor      = dialog.addField(enumStr(LtDocOriginator));
        fb                   = dialogNewAuthor.control();
        sysDictEnum          = new SysDictEnum(fb.enumType());
        fb.enumType(0);
        fb.configurationKey(sysDictEnum.configurationKeyId());
        fb.label("@GLS113483");
        fb.helpText(sysDictEnum.help());
        selections2enumValue = new Map(Types::Enum, Types::Enum);
        enumValue2selections = new Map(Types::Enum, Types::Enum);
        fb.items(2);
        setComboItem(1, LtDocOriginator::Company);

        switch (moduleCustVendProj)
        {
            case LtModuleCustVendProj::Cust :
            case LtModuleCustVendProj::Proj :
                setComboItem(2, LtDocOriginator::Customer);
                break;
            case LtModuleCustVendProj::Vend :
                setComboItem(2, LtDocOriginator::Vendor);
                break;
            default:
                break;
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean         ret;

        ret = super();
        if (ret)
        {
            newAuthor = selections2enumValue.lookup(dialogNewAuthor.value());
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    protected void initValue(Common _common)
    {
        switch (_common.TableId)
        {
            case tablenum(CustInvoiceJour):
                custInvoiceJour     = _common;
                whoIsAuthor         = custInvoiceJour.custInvoiceJour_W().WhoIsAuthor_LT;
                moduleCustVendProj  = LtModuleCustVendProj::Cust;
                break;
            case tablenum(VendInvoiceJour):
                vendInvoiceJour     = _common;
                whoIsAuthor         = vendInvoiceJour.WhoIsAuthor_LT;
                moduleCustVendProj  = LtModuleCustVendProj::Vend;
                break;
            case tablenum(ProjInvoiceJour):
                projInvoiceJour     = _common;
                whoIsAuthor         = projInvoiceJour.WhoIsAuthor_LT;
                moduleCustVendProj  = LtModuleCustVendProj::Proj;
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLT00013, funcName());

        CustInvoiceJour_W custInvoiceJour_W;
        try
        {
            ttsbegin;
                switch (moduleCustVendProj)
                {
                    case LtModuleCustVendProj::Cust:
                        if (newAuthor != whoIsAuthor)
                        {
                            custInvoiceJour_W = custInvoiceJour.custInvoiceJour_W();
                            custInvoiceJour_W.WhoIsAuthor_LT = newAuthor;
                            custInvoiceJour.packCustInvoiceJour_W(custInvoiceJour_W);

                            custInvoiceJour.update();
                        }
                        break;
                    case LtModuleCustVendProj::Vend:
                        if (newAuthor != whoIsAuthor)
                        {
                            vendInvoiceJour.WhoIsAuthor_LT = newAuthor;
                            vendInvoiceJour.update();
                        }
                        break;
                    case LtModuleCustVendProj::Proj:
                        if (newAuthor != whoIsAuthor)
                        {
                            projInvoiceJour.WhoIsAuthor_LT = newAuthor;
                            projInvoiceJour.update();
                        }
                        break;
                    default:
                        break;
                }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LtChangeDocAuthor construct()
    {
        return new LtChangeDocAuthor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@GLS113478";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LtChangeDocAuthor changeDocAuthor = LtChangeDocAuthor::construct();
        FormDataSource formDataSource;

        if (args && args.record() && FormDataUtil::getFormDataSource(args.record()))
        {
            changeDocAuthor.initValue(args.record());
            formDataSource  = FormDataUtil::getFormDataSource(args.record());
        }
        else
        {
            throw error(strfmt("@SYS25516",funcname()));
        }

        if (changeDocAuthor.prompt())
        {
            changeDocAuthor.runOperation();
            if (formDataSource)
            {
                formDataSource.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>