<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxCalculate_StandardPayPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayTaxCalculate_StandardPayPeriod extends RPayTaxCalculate_Standard
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTaxDeduct</Name>
				<Source><![CDATA[
        public RPayAmount calcTaxDeduct(ReportPeriod_RU _payPeriod)
    {
        RpayTaxSumCalc rpayTaxSumCalc = new RpayTaxSumCalc();
        RPayAmount     incomeTotal,
                       taxDeduct,
                       deductTaxAmount,
                       deductTaxAmountFuture,
                       passToGni,
                       redemptionAmount;
        RPayRateValue  percentage;
        RPayAmount     deductionStandardRefundable;
        RPayEmplTax    emplTax;
        ReportPeriod_RU payPeriodEnd;
        Map             mapPeriod;
        int             i;
        container       con;

        void calcAmounts(ReportPeriod_RU _payPeriodStart, ReportPeriod_RU _payPeriodEnd)
        {
            conTaxSumPrev  = RPayTaxEmplSum::getTaxSum(emplId,
                                                       rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                       _payPeriodStart,
                                                       _payPeriodEnd,
                                                       dateNull(),
                                                       dateMax(),
                                                       true) ;

            incomeTotal             += conPeek(conTaxSumPrev,1) - conPeek(conTaxSumPrev,2) - conPeek(conTaxSumPrev,3);
            deductTaxAmount         += conPeek(conTaxSumPrev,4) + conPeek(conTaxSumPrev, 8);
            deductTaxAmountFuture   += conPeek(conTaxSumPrev,7);
            passToGni               += conPeek(conTaxSumPrev,10);

            if (_payPeriodEnd != endmth(dateStartYr(_payPeriodEnd)) && _payPeriodEnd == RPayParameters::payPeriod(emplId))
            {
                conTaxSumPrev  = RPayTaxEmplSum::getTaxSum(emplId,
                                                           rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                           _payPeriodStart,
                                                           endmth(prevMth(_payPeriodEnd)),
                                                           dateNull(),
                                                           dateMax(),
                                                           true) ;
            }

            redemptionAmount        += conPeek(this.redemptionAmountSumType(_payPeriod), 2) + conPeek(conTaxSumPrev,11);
        }
        ;

        deductionStandardRefundable = rpayTaxSumCalc.runTax(_payPeriod,emplId);

        emplTax  = RPayEmplTax::construct(emplId, RPayParameters::payPeriod(emplTable.EmployeeId));
        if (!emplTax.useLastTaxStatus())
            emplTax  = RPayEmplTax::construct(emplId, _payPeriod);

        if (emplTax.statusChgCompensationAllowed() || emplTax.useLastTaxStatus())
        {
            calcAmounts(endmth(dateStartYr(_payPeriod)), _payPeriod);
        }
        else
        {
            mapPeriod = Map::create(emplTax.taxStatusPeriod());

            if (mapPeriod.exists(emplTax.taxStatus()))
            {
                con = mapPeriod.lookup(emplTax.taxStatus());
                for (i = 1; i <= conLen(con); i += 2)
                {
                    payPeriodEnd = conPeek(con, i + 1);
                    calcAmounts(conPeek(con, i), payPeriodEnd);
                }
            }
        }

        percentage  = emplTax.taxGroup2RateValue(rPayTaxIncomeGroupTable) / 100;
        taxDeduct   = incomeTotal * percentage - (deductTaxAmount - deductTaxAmountFuture + passToGni) + redemptionAmount;

        if (RPayTaxParameters::find().ReimbursementType == RPayTaxReimbursementType::ReckoningTax && taxDeduct < 0)
        {
            if (deductionStandardRefundable)
            {
                taxDeduct = max(taxDeduct, - deductionStandardRefundable * percentage);
            }
            else
            {
                taxDeduct = 0;
            }
        }

        taxDeduct = round(taxDeduct, RPayTaxParameters::find().TaxRound);

        return taxDeduct;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>