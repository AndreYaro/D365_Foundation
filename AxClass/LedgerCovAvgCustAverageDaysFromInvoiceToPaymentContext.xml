<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovAvgCustAverageDaysFromInvoiceToPaymentContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadata(enumStr(LedgerCovAvgAverageDaysSelector), LedgerCovAvgAverageDaysSelector::CustAverageDaysFromInvoiceToPayment)]
[Export(identifierStr(Dynamics.AX.Application.LedgerCovAvgIExecutionContext))]
internal final class LedgerCovAvgCustAverageDaysFromInvoiceToPaymentContext implements LedgerCovAvgIExecutionContext
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTableBuffer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LedgerCovAvgAverageDaysMap getTableBuffer()
    {
        LedgerCovAvgCustDaysFromInvoiceToPayment daysToPay;
        return daysToPay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPopulatedAverageTmpTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LedgerCovAvgAverageDaysMap getPopulatedAverageTmpTable(TransDate _startOfMonth, TransDate _endOfMonth)
    {
        LedgerCovAvgCustDaysFromInvoiceToPayment daysToPayTmp;

        boolean isSettlementClosedDateEnabled = this.isSettlementClosedDateEnabled(_startOfMonth);

        daysToPayTmp.setTempDB();

        LedgerCovAvgPopulatorHelper::disableAOSMethodsForInsertAndUpdate(daysToPayTmp);

        if (isSettlementClosedDateEnabled)
        {
            LedgerCovAvgCustSettlementDaysFromDueDateToPaymentDateView custSettlement;

            insert_recordset daysToPayTmp (Customer, StartOfMonth, TransactionCount, NumberOfDaysFromInvoiceToPayment)
            select AccountNum, _startOfMonth, count(RecId), sum(DaysFromDueDateToPaymentDate) from custSettlement
                group by AccountNum
                where custSettlement.ClosedDate >= _startOfMonth && custSettlement.ClosedDate <= _endOfMonth;
        }
        else
        {
            LedgerCovAvgCustTransDaysFromDueDateToPaymentDateView custTrans;

            insert_recordset daysToPayTmp (Customer, StartOfMonth, TransactionCount, NumberOfDaysFromInvoiceToPayment)
            select AccountNum, _startOfMonth, count(RecId), sum(DaysFromDueDateToPaymentDate) from custTrans
                group by AccountNum
                where custTrans.Closed >= _startOfMonth && custTrans.Closed <= _endOfMonth;
        }

        return daysToPayTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettlementClosedDateEnabled</Name>
				<Source><![CDATA[
    private boolean isSettlementClosedDateEnabled(TransDate _startOfMonth)
    {
        CustSettlement custSettlement;

        select firstonly RecId 
            from custSettlement
            where custSettlement.ClosedDate < _startOfMonth
                && custSettlement.ClosedDate != dateNull();

        return custSettlement.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageTableAccountField</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FieldId getAverageTableAccountField()
    {
        return fieldNum(LedgerCovAvgCustDaysFromInvoiceToPayment, Customer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageTableStartOfMonthField</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FieldId getAverageTableStartOfMonthField()
    {
        return fieldNum(LedgerCovAvgCustDaysFromInvoiceToPayment, StartOfMonth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageTableTransactionCountField</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FieldId getAverageTableTransactionCountField()
    {
        return fieldNum(LedgerCovAvgCustDaysFromInvoiceToPayment, TransactionCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageTableNumberOfDaysField</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FieldId getAverageTableNumberOfDaysField()
    {
        return fieldNum(LedgerCovAvgCustDaysFromInvoiceToPayment, NumberOfDaysFromInvoiceToPayment);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>