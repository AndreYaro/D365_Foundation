<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeLineNumberManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeLineNumberManager</c> class handles the numbering of order lines.
/// </summary>
class TradeLineNumberManager
{
    TradeLineNumbering  lineNumbering;
    TradeLineNumber     previousLineNumber;
    TradeLineNumber     lastLineNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustValidateLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to perform the line number validation.
    /// </summary>
    /// <returns>
    /// true if needs to perform the line number validation; otherwise, false.
    /// </returns>
    protected boolean mustValidateLineNumber()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a line number is unique within the scope of an order and is within the range of 1
    /// and the upper limit of 64-bit integers.
    /// </summary>
    /// <returns>
    /// true if the line number is unique; otherwise, false.
    /// </returns>
    public boolean checkLineNumber()
    {
        boolean ret = true;

        if (this.mustValidateLineNumber() && (lineNumbering.LineNumber <= 0))
        {
            ret = checkFailed(strFmt("@SYS344740", 1, int64Max()));
        }

        if (ret
            && !lineNumbering.TradeLineNumbering::checkUnique(lineNumbering.LineNumber))
        {
            ret = checkFailed(strFmt("@SYS313754", lineNumbering.LineNumber));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the line number of a newly created order line.
    /// </summary>
    /// <param name="_forceInBetween">
    /// A Boolean value that specifies whether to force the newly created line in between existing lines; optional.
    /// </param>
    protected void doUpdateLineNumber(boolean _forceInBetween = false)
    {
        TradeLineNumber localLineNumber = lineNumbering.LineNumber;
        TradeLineNumber localprevLineNumber;
        TradeLineNumber localNextLineNumber;

        if (localLineNumber < 0)
        {
            // Insert between lines.
            localprevLineNumber =  -localLineNumber == maxInt() ? 0 : -localLineNumber;
            localNextLineNumber = this.getNextLineNumber(localprevLineNumber);
            localLineNumber = any2int(decRound(any2int(localprevLineNumber + localNextLineNumber) / 2, 0));
            if (!_forceInBetween
                && (localNextLineNumber  <= 0
                    || localLineNumber   == localprevLineNumber
                    || localLineNumber   == localNextLineNumber
                    || !lineNumbering.TradeLineNumbering::checkUnique(localLineNumber)))
            {
                localLineNumber = 0;
            }
        }
        // Not set or conflict in above calculation.
        if (localLineNumber == 0)
        {
            localLineNumber = this.getLastLineNumber() + this.getIncrement();
        }

        lineNumbering.LineNumber = localLineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncrement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SystemLineNumberIncrement</c> value from the <c>SystemParameters</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SystemLineNumberIncrement</c> value.
    /// </returns>
    protected SystemLineNumberIncrement getIncrement()
    {
        return SystemParameters::getSystemLineNumberIncrement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the highest line number within the scope of a given order.
    /// </summary>
    /// <returns>
    /// The highest value of line number.
    /// </returns>
    protected TradeLineNumber getLastLineNumber()
    {
        if (!lastLineNumber)
        {
            lastLineNumber = lineNumbering.TradeLineNumbering::getLastLineNumber();
        }
        return lastLineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the next line number within a given order relative to a given line number.
    /// </summary>
    /// <param name="_previousLineNumber">
    ///    A <c>TradeLineNumber</c> extended data type that represents a line number value.
    /// </param>
    /// <returns>
    ///    A <c>TradeLineNumber</c> data type that represents the next value.
    /// </returns>
    protected TradeLineNumber getNextLineNumber(TradeLineNumber _previousLineNumber)
    {
        return lineNumbering.TradeLineNumbering::getNextLineNumber(_previousLineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the previous line number, relative to the current line number.
    /// </summary>
    /// <param name="_lineNumber">
    /// A <c>TradeLineNumber</c> type representing a line number value.
    /// </param>
    /// <returns>
    /// The value of line number that is before the current.
    /// </returns>
    public TradeLineNumber getPreviousLineNumber(TradeLineNumber _lineNumber)
    {
        return lineNumbering.TradeLineNumbering::getPreviousLineNumber(_lineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current record of a form data source is the last record.
    /// </summary>
    /// <param name="_formDataSource">
    ///    A form data source object.
    /// </param>
    /// <returns>
    ///    true if the current record is the last record; otherwise, false.
    /// </returns>
    protected boolean isLastLine(FormDataSource _formDataSource)
    {
        return _formDataSource.getDataRow(_formDataSource.getPosition()+1) == null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveLineToLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a line number to the highest position in a given order.
    /// </summary>
    /// <param name="_performUpdate">
    ///    A Boolean value that indicates whether to update the line record in the database.
    /// </param>
    public void moveLineToLast(boolean _performUpdate)
    {
        lastLineNumber = this.getLastLineNumber();

        if (lineNumbering.LineNumber != lastLineNumber)
        {
            lineNumbering.LineNumber = lastLineNumber + this.getIncrement();
            if (_performUpdate)
            {
                lineNumbering.update();
            }
            lastLineNumber = lineNumbering.LineNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates internal variables after a line number is assigned.
    /// </summary>
    /// <param name="_formDataSource">
    ///    A form data source that holds the data from the current order.
    /// </param>
    public void postUpdateLineNumber(FormDataSource _formDataSource = null)
    {
        if ((lastLineNumber <= lineNumbering.LineNumber)
            || (_formDataSource && _formDataSource.getDataRow(_formDataSource.getPosition()+1) == null))
        {
            lastLineNumber = lineNumbering.LineNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates internal variables prior assignment of a line number.
    /// </summary>
    /// <param name="_forceUpdateLineNumber">
    /// A boolean specifying whether new lines should be forced in between existing ones.
    /// </param>
    /// <param name="_formDataSource">
    /// A form data source holding data from the current order; optional.
    /// </param>
    /// <param name="_isLastLineNumber">
    /// A boolean specifying whether the current record is the last record
    /// </param>
    public void preUpdateLineNumber(boolean _forceUpdateLineNumber,
                                    FormDataSource _formDataSource = null,
                                    boolean        _isLastLineNumber = true)
    {
        // If not set by user/caller
        if (_forceUpdateLineNumber || lineNumbering.LineNumber == 0)
        {
            if ((_formDataSource
                && _formDataSource.query()
                && _formDataSource.queryRun()
                && _formDataSource.query().equal(_formDataSource.queryRun().query())
                && !this.isLastLine(_formDataSource))
                || (!_isLastLineNumber && previousLineNumber))
            {
                // Prepare to calculate in between.
                // The line number of the previous line is transferred to server side via the field on the table.
                // It is indicated that it is the previous line by setting it negative.
                lineNumbering.LineNumber = -previousLineNumber;
            }
            else
            {
                // if set to last by this method or the doUpdateLineNumber method, then update it in postUpdateLineNumber.
                if (lastLineNumber > 0)
                {
                    // if the lastLineNumber is known, then use it to initialize.
                    lineNumbering.LineNumber = lastLineNumber + this.getIncrement();
                }

                if (_forceUpdateLineNumber)
                {
                    lineNumbering.LineNumber = 0;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns a table buffer to the internal variable.
    /// </summary>
    /// <param name="_lineNumbering">
    ///    A common type that represents the order line.
    /// </param>
    public void setLine(Common _lineNumbering)
    {
        lineNumbering = _lineNumbering;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreviousLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the line number of the previous line.
    /// </summary>
    /// <param name="_previousLineNumber">
    ///    A <c>TradeLineNumber</c> extended data type that represents the previous line number.
    /// </param>
    public void setPreviousLineNumber(TradeLineNumber _previousLineNumber)
    {
        previousLineNumber = _previousLineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static public TradeLineNumberManager construct()
    {
        return new TradeLineNumberManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs and initiates an object of the <c>TradeLineNumberManager</c> class.
    /// </summary>
    /// <param name="_lineNumbering">
    ///    A common type that represents an order line.
    /// </param>
    /// <returns>
    ///    The instantiated and initiated object of the <c>TradeLineNumberManager</c> class.
    /// </returns>
    public static TradeLineNumberManager newLine(Common _lineNumbering)
    {
        TradeLineNumberManager tradeLineNumberManager = TradeLineNumberManager::construct();
        tradeLineNumberManager.setLine(_lineNumbering);

        return tradeLineNumberManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineNumberOfNewOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the line number of a newly created order line.
    /// </summary>
    /// <param name="_lineNumbering">
    ///    A common type that represents an order line.
    /// </param>
    public static void updateLineNumberOfNewOrder(Common _lineNumbering)
    {
        TradeLineNumberManager tradeLineNumberManager = TradeLineNumberManager::newLine(_lineNumbering);
        tradeLineNumberManager.doUpdateLineNumber();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>