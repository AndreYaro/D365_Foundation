<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Vir_Counting</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventMov_Vir_Counting extends InventMov_Virtuel
{
    private InventCountingReasonCodeId countingReasonCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCountingReasonCode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventCountingReasonCodeId parmCountingReasonCode(InventCountingReasonCodeId _countingReasonCode = countingReasonCode)
    {
        countingReasonCode = _countingReasonCode;

        return countingReasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventReceipt,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventIssue,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
            }
            else
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
                }
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (this.parmCountingReasonCode()
            && !this.projId())
        {
            LedgerDimensionDefaultAccount ledgerDimension = InventCountingReasonCode::find(this.parmCountingReasonCode()).LedgerDimension;

            if (ledgerDimension)
            {
                return ledgerDimension;
            }
        }

        return this.defaultAccountOperations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAccountOperations</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount defaultAccountOperations()
    {
        if (! cacheAccountOperations)
        {
            if (this.projId())
            {
                cacheAccountOperations = ProjPosting::getInventLedgerDimension(ProjAccountType::CostAccount,
                                                                      this.projId(),
                                                                      this.projCategoryId());
            }
            else
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventProfit));
                }
                else
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss));
                }
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    public boolean  canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return InventSite::changeDimension(this.inventTable().DefaultDimension, this.inventdim().InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAllowBlankIssue</Name>
				<Source><![CDATA[
    protected boolean dimAllowBlankIssue(InventDimGroupFieldSetup _inventDimGroupFieldSetup)
    {
        return _inventDimGroupFieldSetup.isAllowBlankIssueEnabled() || _inventDimGroupFieldSetup.isAllowBlankReceiptEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBePicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions related to this movement must be picked.
    /// </summary>
    /// <returns>
    ///    true if the transactions must be picked; otherwise, false.
    /// </returns>
    public boolean mustBePicked()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions that are related to this movement must be registered.
    /// </summary>
    /// <returns>
    ///    true if transactions must be registered; otherwise, false.
    /// </returns>
    public boolean mustBeRegistered()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _common)
    {
        super(_common);

        transType = InventTransType::InventCounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters(
        InventTransOriginId     _inventTransOriginId,
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        TransDate               _transDate,
        InventQty               _qty,
        PdsCWInventQty          _cwQty = 0)
    {
        this.parmTransQty(_qty);
        this.pdsCWParmTransQty(_cwQty);
        
        this.parmTransDate(_transDate);

        this.inventTransOriginId(_inventTransOriginId);

        if (_inventTransOriginId)
        {
            this.parmInventTransId(InventTransOrigin::find(_inventTransOriginId).InventTransId);
        }
        else
        {
            this.parmInventTransId(NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num());
        }

        this.parmItemId(_itemId);
        this.parmInventDimId(_inventDimId);

        this.parmMustBeQuarantineControlled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventMov_Vir_Counting</c> class.
    /// </summary>
    /// <param name = "_inventTransOriginId">The inventory transaction origin Id for which the class is instantiated.</param>
    /// <param name = "_itemId">The item Id for which the class is instantiated.</param>
    /// <param name = "_inventDimId">The inventory dimension Id for which the class is instantiated.</param>
    /// <param name = "_transDate">The transaction date for which the class is instantiated.</param>
    /// <param name = "_quantity">The quantity for which the class is instantiated.</param>
    /// <param name = "_catchWeightQuantity">The catch weight quantity for which the class is instantiated; optional.</param>
    /// <returns>An instance of the <c>InventMov_Vir_Counting</c> class.</returns>
    public static InventMovement newParameters(
        InventTransOriginId     _inventTransOriginId,
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        TransDate               _transDate,
        InventQty               _quantity,
        PdsCWInventQty          _catchWeightQuantity = 0)
    {
        if (!InventDim::find(_inventDimId).isOwnerCurrentLegalEntity())
        {
            return InventMov_Vir_Counting_OwnerEnabled::newParameters(
                        _inventTransOriginId,
                        _itemId,
                        _inventDimId,
                        _transDate,
                        _quantity,
                        _catchWeightQuantity);
        }

        InventMov_Vir_Counting movement_Virtuel = new InventMov_Vir_Counting(null);

        movement_Virtuel.initParameters(
            _inventTransOriginId,
            _itemId,
            _inventDimId,
            _transDate,
            _quantity,
            _catchWeightQuantity);

        return movement_Virtuel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>