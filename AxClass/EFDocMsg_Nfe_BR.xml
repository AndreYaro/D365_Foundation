<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsg_Nfe_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EFDocMsg_Nfe_BR extends EFDocMsgBase_BR implements IEFDocReturnMsg_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReturnReceiveFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the format class for returned XML from the submit return web service.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// Fiscal establishment that will use the format.
    /// </param>
    /// <param name="_fiscalDocument">
    /// Fiscal document related to the message.
    /// </param>
    /// <returns>An object that implements <c>IEFDocMsgFormat</c> interface for submit return web service.</returns>
    public IEFDocMsgFormat getReturnReceiveFormat(FiscalEstablishment_BR _fiscalEstablishment, FiscalDocument_BR _fiscalDocument = null)
    {
        return this.createMsgFormat(_fiscalEstablishment, EFDocWebService_BR::SubmitReturn, _fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnSendFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the format class for the XML to be sent to the submit return web service.
    /// </summary>
    /// <param name="_fiscalEstablishment">Fiscal establishment related to the message.</param>
    /// <param name="_fiscalDocument">Fiscal document related to the message.</param>
    /// <returns>An object thatm implements <c>IEFDocMsgFormat</c> interface for submit return web service.</returns>
    public IEFDocMsgFormat getReturnSendFormat(FiscalEstablishment_BR _fiscalEstablishment, FiscalDocument_BR _fiscalDocument = null)
    {
        return this.createMsgFormat(_fiscalEstablishment,EFDocWebService_BR::SubmitReturn, _fiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendWebService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of the webservice to which this class comunicates to.
    /// </summary>
    /// <returns>The type of web service that this class comunicates to from <c>EFDocWebService_BR</c> enumeration.</returns>
    protected EFDocWebService_BR getSendWebService()
    {
        return EFDocWebService_BR::Submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of the message which this class is responsible to handle.
    /// </summary>
    /// <returns>A value from <c>EFDocMessageType_BR</c> enumerator.</returns>
    EFDocMessageType_BR messageType()
    {
        return EFDocMessageType_BR::Submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>receive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Receives the XML message from a transport class.
    /// </summary>
    /// <param name="_document">A <c>EFiscalDocument_BR</c> instance that maps the document that originated the XML being received.</param>
    /// <param name="_transport">The transport from which to retrieve the XML.</param>
    /// <returns>An instance of <c>EFiscalDocumentReturnInfo_BR</c> object with the parsed return information.</returns>
    public EFiscalDocumentReturnInfo_BR receive(EFiscalDocument_BR _document, IEFDocMsgTransport _transport)
    {
        #ExportFiscalDocument_BR

        EFiscalDocumentList_BR          oneDocument;
        EFDocEventHandler_BR            evtHandler;
        EFiscalDocumentReturnInfo_BR    returnInfo;

        IEFDocMsgStream_BR              sendStream;
        IEFDocMsgStream_BR              returnStream;

        evtHandler = this.createEFDocEventHandler();

        oneDocument = EFiscalDocumentList_BR::construct();
        oneDocument.add(_document);

        sendStream = _transport.getSendStream();

        this.getReturnSendFormat(_document.fiscalEstablishment(), _document.fiscalDocument()).write(sendStream, oneDocument);

        returnInfo = EFiscalDocumentReturnInfo_BR::newFromAccessKey(_document.accessKey());

        returnStream = _transport.send();

        this.getReturnSendFormat(_document.fiscalEstablishment(), _document.fiscalDocument()).read(returnStream, returnInfo);

        if (this.needInquireEFDoc(returnInfo.parmReturnCodeStatus()))
        {
            returnStream = this.inquireEFDocument(_document, returnInfo);
        }

        this.saveMsgReturn(_document.eFDocument(), sendStream, returnStream);

        evtHandler.messageReceived(_document, returnInfo);

        return returnInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveMsg</Name>
				<Source><![CDATA[
    protected void saveMsg(EFDocument_BR _eFDocument, IEFDocMsgStream_BR _sendStream, IEFDocMsgStream_BR _returnStream, EFiscalDocumentReturnInfo_BR _returnInfo)
    {
        #ExportFiscalDocument_BR
        EFDocumentXML_BR                EFDocumentXML;

        ttsbegin;
        EFDocumentXML = EFDocumentXML_BR::findByRef(_eFDocument.RecId, true);
        if (!EFDocumentXML.RecId)
        {
            EFDocumentXML.EFDocRefRecId = _eFDocument.RecId;
        }        
        EFDocumentXML.Submission         = _sendStream.toString();
        EFDocumentXML.SubmissionResponse = _returnStream.toString();
        EFDocumentXML.write();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveMsgReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the XML files exchanged when retrieving the status of the electronic fiscal documents
    /// already submitted.
    /// </summary>
    /// <param name="_eFDocument">
    /// <c>EFDocument_BR</c> that has it's approval status being inquired.
    /// </param>
    /// <param name="_sendStream">
    /// <c>IEFDocMsgStream_BR</c> with XML that was sent to the webservice.
    /// </param>
    /// <param name="_returnStream">
    /// <c>IEFDocMsgStream_BR</c> with XML that was returned from the webservice.
    /// </param>
    protected void saveMsgReturn(EFDocument_BR _eFDocument, IEFDocMsgStream_BR _sendStream, IEFDocMsgStream_BR _returnStream)
    {
        #ExportFiscalDocument_BR
        EFDocumentXML_BR                EFDocumentXML;

        ttsbegin;
        EFDocumentXML = EFDocumentXML_BR::findByRef(_eFDocument.RecId, true);
        EFDocumentXML.SubmitReturn          = _sendStream.toString();
        EFDocumentXML.SubmitReturnResponse  = _returnStream.toString();
        EFDocumentXML.write();
        ttscommit;
        }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an object of <c>EFDocMsg_Nfe_BR</c>.
    /// </summary>
    /// <returns>
    /// An object of <c>EFDocMsg_Nfe_BR</c>.
    /// </returns>
    public static EFDocMsg_Nfe_BR construct()
    {
        return new EFDocMsg_Nfe_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEFDocEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an instance of <c>EFDocEventHandler_BR</c> class
    /// </summary>
    /// <returns>
    ///     An instance of <c>EFDocEventHandler_BR</c> class
    /// </returns>
    protected EFDocEventHandler_BR createEFDocEventHandler()
    {
        return EFDocEventHandler_BR::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSubmissionXMLMsg</Name>
				<Source><![CDATA[
    protected void saveSubmissionXMLMsg(EFDocument_BR _eFDocument, IEFDocMsgStream_BR _sendStream)
    {
        #ExportFiscalDocument_BR

        EFDocumentXML_BR EFDocumentXML;

        ttsbegin;
        EFDocumentXML = EFDocumentXML_BR::findByRef(_eFDocument.RecId, true);
        if (!EFDocumentXML.RecId)
        {
            EFDocumentXML.EFDocRefRecId = _eFDocument.RecId;
        }
        EFDocumentXML.Submission = _sendStream.toString();
        EFDocumentXML.write();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>