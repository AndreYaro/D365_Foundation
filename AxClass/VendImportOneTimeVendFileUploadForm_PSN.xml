<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendImportOneTimeVendFileUploadForm_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendImportOneTimeVendFileUploadForm_PSN</c> class supports the business logic of the <c>VendImportOneTimeVendFileUpload_PSN</c> form.
/// </summary>
public  class VendImportOneTimeVendFileUploadForm_PSN
{
    #VendOneTimeVendorInvoice_PSN

    VendImportOneTimeVendInvoiceContract_PSN    contract;
    FileUpload                                  fileUploadControl;
    FormStringControl                           accountStructureControl;
    FormCommandButtonControl                    startImportProcessControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>VendImportOneTimeVendFileUploadForm_PSN</c>.
    /// </summary>
    /// <param name = "_contract">The <c>VendImportOneTimeVendInvoiceContract_PSN</c> contract containing file data and account structure.</param>
    /// <param name = "_fileUploadControl">The file upload control for a user to upload the import file.</param>
    /// <param name = "_accountStructureControl">The control containing the name of the account structure.</param>
    /// <param name = "_startImportProcessControl">The button control used to start the import process.</param>
    public void new(VendImportOneTimeVendInvoiceContract_PSN    _contract,
                    FileUpload                                  _fileUploadControl,
                    FormStringControl                           _accountStructureControl,
                    FormCommandButtonControl                    _startImportProcessControl)
    {
        contract = _contract;
        fileUploadControl = _fileUploadControl;
        accountStructureControl = _accountStructureControl;
        startImportProcessControl = _startImportProcessControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs after a user uploads the one time vendor import file. On a successful upload enables control and populates the data contract.
    /// </summary>
    private void uploadCompleted()
    {
        FileUploadTemporaryStorageResult uploadResult = fileUploadControl.getFileUploadResult();

        if (uploadResult.getUploadStatus())
        {
            if (conPeek(fileNameSplit(uploadResult.getFileName()), 3) == #filesFormat)
            {
                contract.parmFilename(uploadResult.getFileName());
                contract.parmFileUrl(uploadResult.getDownloadUrl());
                startImportProcessControl.enabled(true);
            }
            else
            {
                warning("@SYP4950211");
                startImportProcessControl.enabled(false);
            }
        }
        else
        {
            warning(uploadResult.getLogMessage());
            startImportProcessControl.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountStructureLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup for account structures.
    /// </summary>
    public void accountStructureLookup()
    {
        Query           query          = new Query();
        SysTableLookup  sysTablelookup = SysTableLookup::newParameters(tableNum(DimensionHierarchy), accountStructureControl);

        sysTablelookup.addLookupfield(fieldNum(DimensionHierarchy, Name));
        query.addDataSource(tableNum(DimensionHierarchy));
        query.dataSourceTable(tableNum(DimensionHierarchy)).addDataSource(tableNum(LedgerStructure));
        query.dataSourceTable(tableNum(LedgerStructure)).relations(true);
        query.dataSourceTable(tableNum(LedgerStructure)).addDataSource(tableNum(Ledger));
        query.dataSourceTable(tableNum(Ledger)).relations(true);
        query.dataSourceTable(tableNum(Ledger)).addRange(fieldNum(Ledger, Name)).value(SysQuery::value(curext()));
        sysTablelookup.parmQuery(query);
        sysTablelookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the account structure in the contract to the value from the account control.
    /// </summary>
    public void setAccountStructure()
    {
        contract.parmAccountStructure(accountStructureControl.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUploadEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the upload event handler.
    /// </summary>
    public void addUploadEventHandler()
    {
        fileUploadControl.notifyUploadCompleted += eventhandler(this.uploadCompleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeUploadEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the upload event handler.
    /// </summary>
    public void removeUploadEventHandler()
    {
        fileUploadControl.notifyUploadCompleted -= eventhandler(this.uploadCompleted);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>