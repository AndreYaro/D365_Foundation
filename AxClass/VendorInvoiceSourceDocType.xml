<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendorInvoiceSourceDocType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendorInvoiceSourceDocType</c> class provides the information to handle the distributions
/// and subledger journal lines of a <c>VendInvoiceInfoTable</c> record that is generated from a vendor
/// invoice.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice),
    SourceDocument_VendorInvoice::VendorInvoice)]
public class VendorInvoiceSourceDocType extends ExpenditureSourceDocType
    implements SourceDocumentTypeIBudgetControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canMatchAmountExceedReferenceDist</Name>
				<Source><![CDATA[
        /// <summary>
    /// Check if the total match amount can exceed the reference distribution.
    /// </summary>
    /// <returns>
    /// true if the total match amount can exceed the reference distribution; otherwise, false.
    /// </returns>
    public boolean canMatchAmountExceedReferenceDist()
    {
        LedgerParameters ledgerParameters = LedgerParameters::find();

        if (Ledger::isLedgerBudgetControlEnabled(Ledger::current()) || ledgerParameters.IsEncumbranceProcessEnabled)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetControlCategory</Name>
				<Source><![CDATA[
    public BudgetControlCategory parmBudgetControlCategory()
    {
        return BudgetControlCategory::ActualExpenditure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetControlSourceIntegrator</Name>
				<Source><![CDATA[
    public BudgetControlSourceIntegrator parmBudgetControlSourceIntegrator()
    {
        return BudgetControlSourceIntegrator::VendorInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalCategory</Name>
				<Source><![CDATA[
    public LedgerTransType parmJournalCategory()
    {
        return LedgerTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReclassifyDistributionAmounts</Name>
				<Source><![CDATA[
    public boolean parmReclassifyDistributionAmounts()
    {
        return LedgerParameters::find().JournalizingDefinitionEnableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceIdentityDocument</Name>
				<Source><![CDATA[
    public boolean parmReferenceIdentityDocument()
{
    return true;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeaderRootNodeLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the source document header node label.
    /// </summary>
    /// <returns>
    /// The source document header node label.
    /// </returns>
    public LabelString parmSourceDocumentHeaderRootNodeLabel()
    {
        return "@SYS343268";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLineRootNodeLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the source document lines node label.
    /// </summary>
    /// <returns>
    /// The source document lines node label.
    /// </returns>
    public LabelString parmSourceDocumentLineRootNodeLabel()
    {
        return "@SYS343278";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubledgerJournalEntryType</Name>
				<Source><![CDATA[
    public SubledgerJournalEntryType parmSubledgerJournalEntryType()
    {
        if (SourceDocumentCompletionRule::isTransferToFullyDistRequired())
        {
            return SubledgerJournalEntryType::None;
        }

        return SubledgerJournalEntryType::Liability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubledgerJournalRelievingMethod</Name>
				<Source><![CDATA[
    public SubledgerJournalRelievingMethod parmSubledgerJournalRelievingMethod()
    {
        return SubledgerJournalRelievingMethod::Partial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitionToCompletedStateSourceDocumentLineRelationTypeMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides SourceRelationType values for FullyDistributed and Completed states for <c>SourceDocumentline</c> types associated with the document.
    /// </summary>
    /// <returns>A map containing valid before and after transition values for <c>SourceDocumentLine</c> records.</returns>
    public Map transitionToCompletedStateSourceDocumentLineRelationTypeMapping()
    {
        Map sourceRelationTypeMap =  new Map(Types::Int64, Types::Int64);

        // header source document line
        sourceRelationTypeMap.insert(tableNum(VendInvoiceInfoTable), tableNum(VendInvoiceJour));

        // line source document lines
        sourceRelationTypeMap.insert(tableNum(VendInvoiceInfoLine), tableNum(VendInvoiceTrans));

        return sourceRelationTypeMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessSourceDocumentLinesInParallel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canProcessSourceDocumentLinesInParallel()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>