<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustPaymTotals_ContinuityCustHeader</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class <c>MCRCustPaymTotals_ContinuityCustHeader</c> is for customer payment totals.
/// </summary>
class MCRCustPaymTotals_ContinuityCustHeader extends MCRCustPaymTotals
{
    MCRContinuityCustHeader continuityCustHeader;
    SalesLine  salesLine;
    SalesTable salesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
        public  boolean allowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoicePaymAmount</Name>
				<Source><![CDATA[
        protected AmountCur calcInvoicePaymAmount(CustInvoiceJour custInvoiceJour)
    {
        return this.getTotalPaymAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContinuityCustHeader</Name>
				<Source><![CDATA[
        private MCRContinuityCustHeader findContinuityCustHeader(boolean _forUpdate = false)
    {
        return MCRContinuityCustHeader::findRecId(refRecID, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrency</Name>
				<Source><![CDATA[
        public CurrencyCode getCurrency()
    {
        return salesLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimension</Name>
				<Source><![CDATA[
        public DimensionDefault getDimension()
    {
        return salesTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAccount</Name>
				<Source><![CDATA[
        public CustAccount getInvoiceAccount()
    {
        return salesTable.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderID</Name>
				<Source><![CDATA[
        public Num getOrderID()
    {
        return salesTable.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingProfile</Name>
				<Source><![CDATA[
        public PostingProfile getPostingProfile(boolean _recalc = false)
    {
        if (salesTable && salesTable.PostingProfile)
        {
            return salesTable.PostingProfile;
        }
        else
        {
            return CustParameters::find().PostingProfile;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalDiscount</Name>
				<Source><![CDATA[
        protected AmountCur getTotalDiscount()
    {
        return mcrSalesOrderTotals.getRemainingDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalInvoicedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and returns the total invoiced amount, in the payment currency.
    /// </summary>
    /// <returns>
    /// The total invoiced amount, in the payment currency.
    /// </returns>
    /// <remarks>
    /// The total invoiced amount is the sum of all amounts invoiced so far.
    /// </remarks>
    public AmountCur getTotalInvoicedAmount()
    {
        // Get the order totals if they are not already calculated.
        if (!mcrSalesOrderTotals)
        {
            mcrSalesOrderTotals = new MCRSalesOrderTotals(salesTable);
        }
        return mcrSalesOrderTotals.getInvoicedOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalSalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total sales amount on the sales line.
    /// </summary>
    /// <returns>
    /// The total sales amount on the sales line.
    /// </returns>
    /// <remarks>
    /// Since continuity line amounts have not been figured out with taxes, need
    ///     to include taxes when calculating the line amount.
    /// </remarks>
    public AmountCur getTotalSalesAmount()
    {
        // return the Line amount including the taxes for the continuity line
        return(salesLine.LineAmount + SalesLine::MCRCalcContinuityLineTax(salesLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(RecId _refRecID)
    {
        // Retreive the record from the MCRContinuityCustHeader table
        continuityCustHeader = MCRContinuityCustHeader::findRecId(_refRecID, false);
        // Use the retreived invent trans id to now find the sales line.
        salesLine = SalesLine::findInventTransId(continuityCustHeader.InventTransId,
                                                  false);

        // Use the retrieved MCRContinuityCustHeader - sales id to retrive the sales table
        // record
        salesTable = SalesTable::find(continuityCustHeader.SalesId, false);

        super(tableNum(MCRContinuityCustHeader), _refRecID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleBillUpFrontContChildren</Name>
				<Source><![CDATA[
        public void settleBillUpFrontContChildren()
    {
        throw error(strFmt("@MCR35608", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleInstallmentsOrder</Name>
				<Source><![CDATA[
        protected void settleInstallmentsOrder(boolean _instalAdjs = false)
    {
        throw error(strFmt("@MCR35608", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleOnAccountPayments</Name>
				<Source><![CDATA[
        public void settleOnAccountPayments()
    {
        throw error(strFmt("@MCR35608", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransStatus</Name>
				<Source><![CDATA[
        public  void setTransStatus()
    {
        // no code in super super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>