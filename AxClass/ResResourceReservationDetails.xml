<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResResourceReservationDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ResResourceReservationDetails extends AvailabilityViewDataController
{
    #TimeConstants
    public AvailabilityView availabilityViewControl;
    private static const str reservationTypeStrFormat = '%1 %2';
    private static const str requestTypeStrFormat = '%1 %2 : %3';
    private static const str assignmentReservationType = "@Res:ReservationTypeAssignment";
    private static const str bookingReservationType = "@Res:ReservationTypeBooking";
    private static const str requestReservationType = "@Res:ReservationTypeRequest";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>ResResourceReservationDetails</c>.
    /// </summary>
    /// <param name = "_control">Instance of the <c>ResResourceReservationDetails</c> runtime class.</param>
    public void new (AvailabilityView _control)
    {
        availabilityViewControl = _control;
        super(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservationDetailsTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update resource reservation details temp table according to user selections on the availability view control.
    /// </summary>
    /// <param name = "_selections">Availability view chart cell selections.</param>
    /// <param name = "_timescale">Chart cell selection time scale.</param>
    /// <param name = "_reservationDetails">Resource reservation details temp table.</param>
    /// <param name = "_deservationDetails_ds">Resource reservation details temp table form data source.</param>
    /// <param name = "_reservationDetailsType">Resource reservation details type.</param>
    /// <returns>Container which contains two boolean values of whether staffed resources and/or planned resource have been selected.</returns>
    public static container updateReservationDetailsTable(AvailabilityViewSelections _selections, AVTimeframeType _timescale,
        ResTmpResourceReservationDetails _reservationDetails, FormDataSource _deservationDetails_ds,
        ResReservationDetailsType _reservationDetailsType = ResReservationDetailsType::AvailableResources)
    {
        boolean staffedResourceFound = false;
        boolean plannedResourceFound = false;

        // maps to keep track of each staffed resource lowest and highest date selections
        Map resourceStartDateMap = new Map(Types::Int64, Types::UtcDateTime);
        Map resourceEndDateMap = new Map(Types::Int64, Types::UtcDateTime);

        // maps to keep track of each planned resource lowest and highest date selections
        Map activityResourceStartDateMap = new Map(Types::Int64, Types::UtcDateTime);
        Map activityResourceEndDateMap = new Map(Types::Int64, Types::UtcDateTime);

        // set to store both staffed and planned resource with lowest and highest date selections
        Set reservationDetailsSet = new Set(Types::Class);

        if (_selections)
        {
            List avSelectionList = _selections.getChartItems();

            // as long as user has selected any chart cell, add the resource with date to the associated map
            if (!avSelectionList.empty())
            {
                ListEnumerator avSelectionListEnum = avSelectionList.getEnumerator();
                while (avSelectionListEnum.moveNext())
                {
                    ChartItemDataContract avSelectionChartItem = avSelectionListEnum.current();
                    utcdatetime startTime = AVUtil::getDateTime(avSelectionChartItem.timelineKey());
                    utcdatetime endTime = AVTimeframe::getTimeframe(startTime, _timescale).end();
                    ResourceRecId chartResource = ResUtil::getResourceRecId(avSelectionChartItem.collectionKey());
                    if (chartResource)
                    {
                        staffedResourceFound = true;

                        if (resourceStartDateMap.exists(chartResource))
                        {
                            if (startTime < resourceStartDateMap.lookup(chartResource))
                            {
                                resourceStartDateMap.remove(chartResource);
                                resourceStartDateMap.insert(chartResource, startTime);
                            }
                        }
                        else
                        {
                            resourceStartDateMap.insert(chartResource, startTime);
                        }

                        if (resourceEndDateMap.exists(chartResource))
                        {
                            if (endTime > resourceEndDateMap.lookup(chartResource))
                            {
                                resourceEndDateMap.remove(chartResource);
                                resourceEndDateMap.insert(chartResource, endTime);
                            }
                        }
                        else
                        {
                            resourceEndDateMap.insert(chartResource, endTime);
                        }
                    }
                    else
                    {
                        plannedResourceFound = true;

                        activityresourcerecid chartActivityResource = ResUtil::getActivityResourceRecId(avSelectionChartItem.collectionKey());

                        if (activityResourceStartDateMap.exists(chartActivityResource))
                        {
                            if (startTime < activityResourceStartDateMap.lookup(chartActivityResource))
                            {
                                activityResourceStartDateMap.remove(chartActivityResource);
                                activityResourceStartDateMap.insert(chartActivityResource, startTime);
                            }
                        }
                        else
                        {
                            activityResourceStartDateMap.insert(chartActivityResource, startTime);
                        }

                        if (activityResourceEndDateMap.exists(chartActivityResource))
                        {
                            if (endTime > activityResourceEndDateMap.lookup(chartActivityResource))
                            {
                                activityResourceEndDateMap.remove(chartActivityResource);
                                activityResourceEndDateMap.insert(chartActivityResource, endTime);
                            }
                        }
                        else
                        {
                            activityResourceEndDateMap.insert(chartActivityResource, endTime);
                        }
                    }
                }

                // loop through the staffed resource maps and add data to the set
                MapEnumerator resourceMapEnum = resourceStartDateMap.getEnumerator();
                while (resourceMapEnum.moveNext())
                {
                    ResReservationDetailsInstance reservationInstance = ResReservationDetailsInstance::construct();
                    reservationInstance.parmResource(resourceMapEnum.currentKey());
                    reservationInstance.parmStartTime(resourceMapEnum.currentValue());
                    reservationInstance.parmEndTime(resourceEndDateMap.lookup(resourceMapEnum.currentKey()));
                    reservationDetailsSet.add(reservationInstance);
                }

                // loop through the planned resource maps and add data to the set
                MapEnumerator activityResourceMapEnum = activityResourceStartDateMap.getEnumerator();
                while (activityResourceMapEnum.moveNext())
                {
                    ResReservationDetailsInstance reservationInstance = ResReservationDetailsInstance::construct();
                    reservationInstance.parmActivityResource(activityResourceMapEnum.currentKey());
                    reservationInstance.parmStartTime(activityResourceMapEnum.currentValue());
                    reservationInstance.parmEndTime(activityResourceEndDateMap.lookup(activityResourceMapEnum.currentKey()));
                    reservationDetailsSet.add(reservationInstance);
                }

                // pass the set data and update resource reservation details temp table
                ResResourceReservationDetails::initializeReservationDetailsTable(
                    reservationDetailsSet, _reservationDetails, _deservationDetails_ds, _reservationDetailsType);
            }
            else
            {
                // if user has selected no chart cell, remove data from the resource reservation details temp table
                ResResourceReservationDetails::removeReservationDetailsTable(
                    _reservationDetails, _deservationDetails_ds, _reservationDetailsType);
            }
        }

        return [staffedResourceFound, plannedResourceFound];
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelOperationExecution</Name>
				<Source><![CDATA[
    private static boolean cancelOperationExecution(ResTmpResourceReservationDetails _reservationDetails,
        FormDataSource _deservationDetails_ds, AVTimeframeType _syncTimeScaleType = AVTimeframeType::Day)
    {
        boolean recordsFound;

        ResIResourceManager     resourceManager = ResResourceManager::construct();
        ResICancelProcessor     cancelProcessor = ResCancelProcessor::getProcessor(ResCancelationType::EntireDay);
        List                    schedulesList = new List(Types::Class);

        ResTmpResourceReservationDetails resourceReservationList = _deservationDetails_ds.getFirst(true) ?
                _deservationDetails_ds.getFirst(true) : _deservationDetails_ds.cursor();

        ResMessageBoxString allAssignmentDetails;

        // loop through the list of user selection from the form data source and add each to the scheduling list
        while (resourceReservationList)
        {
            ResReservationSchedule resSchedule = ResReservationSchedule::construct();

            resSchedule.Commitment(resourceReservationList.CommitType);
            resSchedule.activityResource(resourceReservationList.ActivityResource);
            resSchedule.Resource(resourceReservationList.Resource);
            resSchedule.Activity(resourceReservationList.Activity);
            resSchedule.Start(resourceReservationList.StartTime);
            resSchedule.End(resourceReservationList.EndTime);
            if (resourceReservationList.TaskName)
            {
                resSchedule.ReservationType(ResReservationType::Assignment);
            }
            else
            {
                allAssignmentDetails = ResResourceReservationDetails::getExistingAssignmentDetailsByDateTime(
                    allAssignmentDetails,
                    resourceReservationList.ActivityResource, 
                    resourceReservationList.StartTime, 
                    resourceReservationList.EndTime,
                    resourceReservationList.CommitType,
                    ResReservationOperation::Cancel);
                resSchedule.ReservationType(ResReservationType::Booking);
            }

            schedulesList.addEnd(resSchedule);
           
            recordsFound = true;
            resourceReservationList = _deservationDetails_ds.getNext();
        }

        if (recordsFound)
        {
            boolean cancel = true;
            if (allAssignmentDetails)
            {
                cancel = (Box::yesNo(ResResourceReservationDetails::getAssignmentDetailsMessage(allAssignmentDetails), DialogButton::No) == DialogButton::Yes);
            }

            if (cancel)
            {
                // cancel the reservation according to the scheduling list
                resourceManager.CancelProcessor(cancelProcessor);
                resourceManager.Schedules(schedulesList);
                resourceManager.parmSyncSpecificTimeScale(true);
                resourceManager.TimeFrameType(_syncTimeScaleType);
                resourceManager.Cancel();
            }
        }

        return recordsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel selected resource reservation.
    /// </summary>
    /// <param name = "_reservationDetails">Resource reservation details temp table.</param>
    /// <param name = "_deservationDetails_ds">Resource reservation details temp table form data source.</param>
    /// <param name = "_availabilityView">Availability view control.</param>
    /// <param name = "_syncTimeScaleType">The specific time scale which will be run synchronously and the rest will be run in asynchronous.</param>
    /// <remarks>This method is less performing in control refresh. Please use cancelOperationV2 if possible.</remarks>
    public static void cancelOperation(ResTmpResourceReservationDetails _reservationDetails,
        FormDataSource _deservationDetails_ds, AvailabilityView _availabilityView, AVTimeframeType _syncTimeScaleType = AVTimeframeType::Day)
    {
        boolean recordsFound = ResResourceReservationDetails::cancelOperationExecution(
            _reservationDetails, _deservationDetails_ds, _syncTimeScaleType);

        // refresh the grid and form data source
        if (recordsFound)
        {
            _availabilityView.clearSelections();
            _availabilityView.refreshAll();
            _deservationDetails_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelOperationV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel selected resource reservation.
    /// </summary>
    /// <param name = "_reservationDetails">Resource reservation details temp table.</param>
    /// <param name = "_deservationDetails_ds">Resource reservation details temp table form data source.</param>
    /// <param name = "_syncTimeScaleType">The specific time scale which will be run synchronously and the rest will be run in asynchronous.</param>
    public void cancelOperationV2(ResTmpResourceReservationDetails _reservationDetails,
        FormDataSource _deservationDetails_ds, AVTimeframeType _syncTimeScaleType = AVTimeframeType::Day)
    {
        boolean recordsFound = ResResourceReservationDetails::cancelOperationExecution(
            _reservationDetails, _deservationDetails_ds, _syncTimeScaleType);

        // refresh the grid and form data source
        if (recordsFound)
        {
            this.executeActionCompleted();
            availabilityViewControl.clearSelections();
            _deservationDetails_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmOperationExecution</Name>
				<Source><![CDATA[
    private static boolean confirmOperationExecution(ResTmpResourceReservationDetails _reservationDetails,
        FormDataSource _deservationDetails_ds, AVTimeframeType _syncTimeScaleType = AVTimeframeType::Day)
    {
        boolean                 recordsFound;

        ResIResourceManager     resourceManager = ResResourceManager::construct();
        ResIConfirmProcessor    confirmProcessor = ResConfirmProcessor::construct();
        List                    schedulesList = new List(Types::Class);
        
        ResTmpResourceReservationDetails resourceReservationList = _deservationDetails_ds.getFirst(true) ?
            _deservationDetails_ds.getFirst(true) : _deservationDetails_ds.cursor();

        ResMessageBoxString    allAssignmentDetails;

        // loop through the list of what user has selected from the form data source and confirm each soft reservation
        while (resourceReservationList)
        {
            ResourceName            resourceName = resourceReservationList.ResourceName;
            ResEngagementIDName     engagementIDName = resourceReservationList.EngagementIDName;
            Name                    taskName = resourceReservationList.TaskName;
            boolean                 isSoftBookedCommitType = (resourceReservationList.CommitType == ResCommitType::SoftBook);
            
            if (isSoftBookedCommitType)
            {
                ActivityResourceRecId   targetActivityResource = resourceReservationList.ActivityResource;
                ActivityRecId           targetActivity = resourceReservationList.Activity;
                real                    resourceSoftReservedHours = resourceReservationList.ReservedHours;
                utcdatetime             targetStartTime = resourceReservationList.StartTime;
                utcdatetime             targetEndTime = resourceReservationList.EndTime;
                
                if (resourceReservationList.EngagementType == PSARSEntityType::Quotation)
                {
                    ResResourceReservationDetails::quotationCannotBeConfirmed(resourceName, engagementIDName);
                }
                else
                {
                    ResReservationSchedule resSchedule = ResReservationSchedule::construct();

                    resSchedule.activityResource(resourceReservationList.ActivityResource);
                    resSchedule.Activity(resourceReservationList.Activity);
                    resSchedule.Start(resourceReservationList.StartTime);
                    resSchedule.End(resourceReservationList.EndTime);
                    if (resourceReservationList.TaskName)
                    {
                        resSchedule.ReservationType(ResReservationType::Assignment);
                    }
                    else
                    {
                        allAssignmentDetails = ResResourceReservationDetails::getExistingAssignmentDetailsByDateTime(
                            allAssignmentDetails,
                            resourceReservationList.ActivityResource,
                            resourceReservationList.StartTime,
                            resourceReservationList.EndTime,
                            ResCommitType::SoftBook,
                            ResReservationOperation::Confirm);
                        resSchedule.ReservationType(ResReservationType::Booking);
                    }
                    schedulesList.addEnd(resSchedule);
                    recordsFound = true;
                }
            }

            if (!isSoftBookedCommitType)
            {
                ResResourceReservationDetails::cannotBeConfirmed(resourceName, engagementIDName, taskName);
            }

            resourceReservationList = _deservationDetails_ds.getNext();
        }

        if (recordsFound)
        {
            boolean confirm = true;
            if (allAssignmentDetails)
            {
                confirm = (Box::yesNo(ResResourceReservationDetails::getAssignmentDetailsMessage(allAssignmentDetails), DialogButton::No) == DialogButton::Yes);
            }

            if (confirm)
            {
                // confirm the soft reservation according to the scheduling list
                resourceManager.ConfirmProcessor(confirmProcessor);
                resourceManager.Schedules(schedulesList);
                resourceManager.parmSyncSpecificTimeScale(true);
                resourceManager.TimeFrameType(_syncTimeScaleType);
                resourceManager.Confirm();
            }
        }

        return recordsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert soft reservation to hard reservation.
    /// </summary>
    /// <param name = "_reservationDetails">Resource reservation details temp table.</param>
    /// <param name = "_deservationDetails_ds">Resource reservation details temp table form data source.</param>
    /// <param name = "_availabilityView">Availability view control.</param>
    /// <param name = "_syncTimeScaleType">The specific time scale which will be run synchronously and the rest will be run in asynchronous.</param>
    /// <remarks>This method is less performing in control refresh. Please use confirmOperationV2 if possible.</remarks>
    public static void confirmOperation(ResTmpResourceReservationDetails _reservationDetails,
        FormDataSource _deservationDetails_ds, AvailabilityView _availabilityView, AVTimeframeType _syncTimeScaleType = AVTimeframeType::Day)
    {
        boolean recordsFound = ResResourceReservationDetails::confirmOperationExecution(_reservationDetails, _deservationDetails_ds, _syncTimeScaleType);

        // refresh the grid and form data source
        if (recordsFound)
        {
            _availabilityView.clearSelections();
            _availabilityView.refreshAll();
            _deservationDetails_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmOperationV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert soft reservation to hard reservation.
    /// </summary>
    /// <param name = "_reservationDetails">Resource reservation details temp table.</param>
    /// <param name = "_deservationDetails_ds">Resource reservation details temp table form data source.</param>
    /// <param name = "_syncTimeScaleType">The specific time scale which will be run synchronously and the rest will be run in asynchronous.</param>
    public void confirmOperationV2(ResTmpResourceReservationDetails _reservationDetails,
        FormDataSource _deservationDetails_ds, AVTimeframeType _syncTimeScaleType = AVTimeframeType::Day)
    {
        boolean recordsFound = ResResourceReservationDetails::confirmOperationExecution(_reservationDetails, _deservationDetails_ds, _syncTimeScaleType);

        // refresh the grid and form data source
        if (recordsFound)
        {
            this.executeActionCompleted();
            availabilityViewControl.clearSelections();
            _deservationDetails_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserFeedBackOnConfirmReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get user feed back on converting soft reservation to hard reservation by launching yes no message box.
    /// </summary>
    /// <param name = "_engagementIDName">
    /// A string which contains the combination of engagement ID plus space plus engagement Name.
    /// For example, <c>ProjTable</c>.ProjID + ' ' + <c>ProjTable</c>.Name.
    /// </param>
    /// <param name = "_taskName">Task name.</param>
    /// <param name = "_taskRemainingCapacityHour">Task remaining capacity hour.</param>
    /// <param name = "_resourceName">Resource name.</param>
    /// <param name = "_resourceSoftReservedCapacityHour">Resource soft reserved capacity hour.</param>
    /// <returns>Whether user will commit converting soft reservation.</returns>
    private static boolean getUserFeedBackOnConfirmReservation(ResEngagementIDName _engagementIDName,
        name _taskName, real _taskRemainingCapacityHour, ResourceName _resourceName, real _resourceSoftReservedCapacityHour)
    {
        boolean convertSoftReservation = false;

        str taskRemainingHourStr = num2Str(_taskRemainingCapacityHour, 0, 2, 1, 0);
        str resourceSoftReservedCapacityHourStr = num2Str(_resourceSoftReservedCapacityHour, 0, 2, 1, 0);

        // ask the user if the soft reservation should be converted
        if (Box::yesNo(strFmt("@Res:ProjectTaskHasInsufficientHours", _engagementIDName, _taskName, taskRemainingHourStr,
                _resourceName, resourceSoftReservedCapacityHourStr), DialogButton::Yes) == DialogButton::Yes)
        {
            convertSoftReservation = true;
        }

        return convertSoftReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotBeConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Warn user that resource is already hard reserved and cannot be confirmed.
    /// </summary>
    /// <param name = "_resourceName">Resource name.</param>
    /// <param name = "_engagementIDName">
    /// A string which contains the combination of engagement ID plus space plus engagement Name.
    /// For example, <c>ProjTable</c>.ProjID + ' ' + <c>ProjTable</c>.Name.
    /// </param>
    /// <param name = "_taskName">Task name.</param>
    private static void cannotBeConfirmed( ResourceName _resourceName, ResEngagementIDName _engagementIDName, name _taskName)
    {
        if (_taskName)
        {
            warning(strFmt("@Res:CannotBeConfirmedForProjectTask", _resourceName, _engagementIDName, _taskName));
        }
        else
        {
            warning(strFmt("@Res:CannotBeConfirmedForProject", _resourceName, _engagementIDName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taskHasNoRemainingHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Warn user that task has no remaining effort hours.
    /// </summary>
    /// <param name = "_engagementIDName">
    /// A string which contains the combination of engagement ID plus space plus engagement Name.
    /// For example, <c>ProjTable</c>.ProjID + ' ' + <c>ProjTable</c>.Name.
    /// </param>
    /// <param name = "_taskName">Task name.</param>
    /// <param name = "_resourceName">Resource name.</param>
    private static void taskHasNoRemainingHours(ResEngagementIDName _engagementIDName, name _taskName, ResourceName _resourceName)
    {
        warning(strFmt("@Res:TaskHasNoRemainingEffortHours", _engagementIDName, _taskName, _resourceName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>quotationCannotBeConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Warn user that quotation cannot be confirmed because it can only be soft reserved.
    /// </summary>
    /// <param name = "_resourceName">Resource name.</param>
    /// <param name = "_engagementIDName">
    /// A string which contains the combination of engagement ID plus space plus engagement Name.
    /// For example, <c>ProjTable</c>.ProjID + ' ' + <c>ProjTable</c>.Name.
    /// </param>
    private static void quotationCannotBeConfirmed( ResourceName _resourceName, ResEngagementIDName _engagementIDName)
    {
        warning(strFmt("@Res:QuotationCannotBeConfirmed", _resourceName, _engagementIDName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canViewRequest</Name>
				<Source><![CDATA[
    private static boolean canViewRequest(ResActivityResourceRequestReservationUnionView _reservationDetailsView)
    {
        return _reservationDetailsView.RequestOriginator == curUserId() || ResRequestRollUpDayView::isApproverByResourceRequest(_reservationDetailsView.ResourceRequest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReservationDetailsTable</Name>
				<Source><![CDATA[
    private static void initializeReservationDetailsTable(Set _reservationDetailsSet,
        ResTmpResourceReservationDetails _reservationDetails, FormDataSource _deservationDetails_ds,
        ResReservationDetailsType _reservationDetailsType = ResReservationDetailsType::AvailableResources)
    {
        ResActivityResourceRequestReservationUnionView reservationDetailsView;

        ttsbegin;
        delete_from _reservationDetails
            where _reservationDetails.ReservationDetailsType == _reservationDetailsType;

        SetEnumerator reservationDetailsSetEnum = _reservationDetailsSet.getEnumerator();

        // Loop through the selection set and calculate the reservation capacity.
        // Add record to resource reservation details temp table as long as capacity in the selected time range is not zero.
        while (reservationDetailsSetEnum.moveNext())
        {
            ResReservationDetailsInstance reservationInstance = reservationDetailsSetEnum.current();
            boolean isStaffResource = reservationInstance.parmResource() ? true : false;

            while select ResourceName, ActivityCompany, ActivityIDName, EntityType, TaskName,
                StartTime, EndTime, CommitType, ActivityResource, Activity,
                Resource, ResourceRequest, HeaderApprovalStatus, LineApprovalStatus,
                RequestOriginator, RequestId, ActivityNumber from reservationDetailsView
                order by reservationDetailsView.StartTime
                where ((isStaffResource && reservationDetailsView.Resource == reservationInstance.parmResource())
                        || (!isStaffResource && reservationDetailsView.ActivityResource == reservationInstance.parmActivityResource()))
                    && !(reservationDetailsView.StartTime > reservationInstance.parmEndTime())
                    && !(reservationDetailsView.EndTime < reservationInstance.parmStartTime())
            {
                _reservationDetails.clear();
                real capacity;
                str reservationType;
                boolean canViewRequest = ResResourceReservationDetails::canViewRequest(reservationDetailsView);

                _reservationDetails.ReservationDetailsType = _reservationDetailsType;
                if (reservationDetailsView.ResourceRequest)
                {
                    if (reservationDetailsView.HeaderApprovalStatus != ResApprovalStatus::Completed && canViewRequest)
                    {
                        reservationType = requestReservationType;
                        capacity = ActivityResourceFacade::getRequestedCapacityByTimeRange(
                            reservationDetailsView.ActivityResource,
                            reservationDetailsView.ResourceRequest,
                            reservationDetailsView.LineApprovalStatus,
                            reservationInstance.parmStartTime(),
                            reservationInstance.parmEndTime()) / #SecondsPerHour;
                    }
                }
                else if (reservationDetailsView.TaskName || reservationDetailsView.ActivityNumber)
                {
                    reservationType = assignmentReservationType;
                    capacity = ActivityResourceFacade::getAssignedCapacityByTimeRange(
                        reservationDetailsView.ActivityResource,
                        reservationDetailsView.CommitType,
                        reservationInstance.parmStartTime(),
                        reservationInstance.parmEndTime(),
                        reservationDetailsView.Activity) / #SecondsPerHour;
                }
                else
                {
                    reservationType = bookingReservationType;
                    capacity = ActivityResourceFacade::getBookedCapacityByTimeRange(
                        reservationDetailsView.ActivityResource,
                        reservationDetailsView.CommitType,
                        reservationInstance.parmStartTime(),
                        reservationInstance.parmEndTime()) / #SecondsPerHour;
                }

                if (capacity > 0)
                {
                    _reservationDetails.Resource = reservationDetailsView.Resource;
                    _reservationDetails.ActivityResource = reservationDetailsView.ActivityResource;
                    _reservationDetails.ResourceName = reservationDetailsView.ResourceName;
                    if (reservationDetailsView.ActivityCompany == curExt())
                    {
                        _reservationDetails.EngagementIDName = reservationDetailsView.ActivityIDName;
                        _reservationDetails.EngagementType = reservationDetailsView.EntityType;
                    }
                    else
                    {
                        _reservationDetails.EngagementIDName = "@SYS4005025";
                        _reservationDetails.EngagementType = PSARSEntityType::None;
                    }
                    _reservationDetails.TaskName = reservationDetailsView.TaskName ? reservationDetailsView.TaskName : reservationDetailsView.ActivityNumber;
                    _reservationDetails.StartTime = reservationInstance.parmStartTime();
                    _reservationDetails.EndTime = reservationInstance.parmEndTime();
                    _reservationDetails.Activity = reservationDetailsView.Activity;
                    _reservationDetails.CommitType = reservationDetailsView.CommitType;

                    str commitType = enum2Str(reservationDetailsView.CommitType);
                    _reservationDetails.ReservationType = strFmt(reservationTypeStrFormat, commitType, reservationType);
                    _reservationDetails.ReservedHours = capacity;

                    if (reservationDetailsView.ResourceRequest)
                    {
                        if (reservationDetailsView.HeaderApprovalStatus != ResApprovalStatus::Completed && canViewRequest)
                        {
                            _reservationDetails.ResourceRequest = reservationDetailsView.ResourceRequest;
                            _reservationDetails.LineApprovalStatus = reservationDetailsView.LineApprovalStatus;
                            _reservationDetails.ReservationType = strFmt(
                                requestTypeStrFormat, requestReservationType, reservationDetailsView.RequestId, enum2Str(reservationDetailsView.LineApprovalStatus));

                            // Avoid adding duplicate rows to reservationDetails table.
                            SysInfoLogLevel prevLevel = infolog.infologLevel();
                            try
                            {
                                infolog.setInfoLogLevel(SysInfoLogLevel::None);
                                _reservationDetails.insert();
                                infolog.setInfoLogLevel(prevLevel);
                            }
                            catch (Exception::DuplicateKeyException)
                            {
                                infolog.setInfoLogLevel(prevLevel);
                            }
                        }
                    }
                    else
                    {
                        _reservationDetails.ReservationType = strFmt(reservationTypeStrFormat, commitType, reservationType);
                        _reservationDetails.insert();
                    }
                }
            }
        }
        ttscommit;

        // refresh the form data source to show the data on the grid
        _deservationDetails_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReservationDetailsTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove reservation details table.
    /// </summary>
    /// <param name = "_reservationDetails">Resource reservation details temp table.</param>
    /// <param name = "_deservationDetails_ds">Form data soure for resource reservation details grid.</param>
    /// <param name = "_reservationDetailsType">Reservation details type.</param>
    public static void removeReservationDetailsTable(ResTmpResourceReservationDetails _reservationDetails, FormDataSource _deservationDetails_ds,
         ResReservationDetailsType _reservationDetailsType = ResReservationDetailsType::AvailableResources)
    {
        // delete data in the resource reservation details temp table and refresh the form data source
        if (_reservationDetailsType == ResReservationDetailsType::AllTypes)
        {
            delete_from _reservationDetails;
        }
        else
        {
            delete_from _reservationDetails
                where _reservationDetails.ReservationDetailsType == _reservationDetailsType;;
        }

        _deservationDetails_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnlyCurrentEngagementSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the user has selected current engagement only.
    /// </summary>
    /// <param name = "_reservationDetails_ds">Form data soure for resource reservation details grid.</param>
    /// <param name = "_engagementIDName">
    /// A string which contains the combination of engagement ID plus space plus engagement Name.
    /// For example, <c>ProjTable</c>.ProjID + ' ' + <c>ProjTable</c>.Name.
    /// </param>
    /// <returns>true if user has selected current engagement record; otherwise, false.</returns>
    public static boolean isOnlyCurrentEngagementSelected(FormDataSource _reservationDetails_ds, ResEngagementIDName _engagementIDName)
    {
        boolean  foundCurrentEngagement = true;

        ResTmpResourceReservationDetails  reservationDetails = _reservationDetails_ds.getFirst(true) ? _reservationDetails_ds.getFirst(true) : _reservationDetails_ds.cursor();

        if (_engagementIDName && reservationDetails)
        {
            while (reservationDetails)
            {
                if (reservationDetails.EngagementIDName != _engagementIDName)
                {
                    foundCurrentEngagement = false;
                    break;
                }
                else
                {
                    reservationDetails = _reservationDetails_ds.getNext();
                }
            }
        }

        return foundCurrentEngagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areMultipleRecordsSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if user has selected multiple reservation details records.
    /// </summary>
    /// <param name = "_reservationDetails_ds">Form data soure for resource reservation details grid.</param>
    /// <returns>Return true if user has selected multiple records.</returns>
    public static boolean areMultipleRecordsSelected(FormDataSource _reservationDetails_ds)
    {
        boolean multipleRecordsMarked;

        ResTmpResourceReservationDetails reservationDetails = _reservationDetails_ds.getFirst(NoYes::Yes);
        if (reservationDetails)
        {
            reservationDetails = _reservationDetails_ds.getNext();
            multipleRecordsMarked = reservationDetails ? true : false;
        }
        return multipleRecordsMarked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowWorkflowCreateSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the user can create workflow for the selected items. It will only allow record with matching
    /// engagement ID and name from staffed resource soft booked project record to create resource request.
    /// </summary>
    /// <param name = "_reservationDetails_ds">Form data soure for resource reservation details grid.</param>
    /// <param name = "_engagementIDName">
    /// A string which contains the combination of engagement ID plus space plus engagement Name.
    /// For example, <c>ProjTable</c>.ProjID + ' ' + <c>ProjTable</c>.Name.
    /// </param>
    /// <returns>true if user has selected records which can create workflow; otherwise false.</returns>
    [SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
    public static boolean allowWorkflowCreateSelected(FormDataSource _reservationDetails_ds, ResEngagementIDName _engagementIDName)
    {
        boolean  canCreateWorkflow = true;

        ResTmpResourceReservationDetails reservationDetailsGetFirst = _reservationDetails_ds.getFirst(true);
        ResTmpResourceReservationDetails reservationDetails = reservationDetailsGetFirst ? reservationDetailsGetFirst :  _reservationDetails_ds.cursor();

        if (_engagementIDName && reservationDetails)
        {
            while (canCreateWorkflow && reservationDetails)
            {
                // Only this engagement in soft booked type items can be submitted.
                if ((reservationDetails.EngagementIDName != _engagementIDName) || (reservationDetails.ResourceRequest)
                    || (reservationDetails.CommitType == ResCommitType::HardBook) || (reservationDetails.Resource == 0)
                    || (reservationDetails.EngagementType != PSARSEntityType::Project)
                    || (reservationDetails.TaskName != ''))
                {
                    canCreateWorkflow = false;
                }

                reservationDetails = reservationDetailsGetFirst ? _reservationDetails_ds.getNext() : null;
            }
        }

        return canCreateWorkflow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowRecordSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the user have selected workflow records.
    /// </summary>
    /// <param name = "_reservationDetails_ds">Form data soure for resource reservation details grid.</param>
    /// <returns>Returns true if user has selected workflow records.</returns>
    [SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
    public static boolean isWorkflowRecordSelected(FormDataSource _reservationDetails_ds)
    {
        boolean  isWorkflowRecordSelected = false;

        ResTmpResourceReservationDetails  reservationDetails = _reservationDetails_ds.getFirst(true) ? _reservationDetails_ds.getFirst(true) : _reservationDetails_ds.cursor();

        if (reservationDetails)
        {
            while (reservationDetails)
            {
                // Only this engagement in soft booked type items can be submitted.
                if (reservationDetails.ResourceRequest != 0)
                {
                    isWorkflowRecordSelected = true;
                    break;
                }
                else
                {
                    reservationDetails = _reservationDetails_ds.getNext();
                }
            }
        }

        return isWorkflowRecordSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndSubmitResourceRequestExecution</Name>
				<Source><![CDATA[
    [SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
    private static boolean createAndSubmitResourceRequestExecution(FormDataSource _deservationDetails_ds,
        AvailabilityViewSelections _selections, object _caller, boolean _skipUserSubmissionComment = false)
    {
        ResRequestHelper::validateWorkflowConfiguration();

        str workflowType = workflowtypestr(ResRequest);

        if (!ResRequestHelper::isWorkflowEnabled())
        {
            throw error(strFmt("@Res:WorkflowNotEnabled", workflowType));
        }

        boolean createRequest = false;

        ResTmpResourceReservationDetails resourceReservationList = _deservationDetails_ds.getFirst(true) ?
            _deservationDetails_ds.getFirst(true) : _deservationDetails_ds.cursor();

        // Loop through the list of what user has selected from the form data source and create each soft reservation.
        while (resourceReservationList)
        {
            if (resourceReservationList.Resource == 0)
            {
                throw error("@Res:ResquestExceptionStaffedResourceIsRequired");
            }

            if (resourceReservationList.CommitType != ResCommitType::SoftBook)
            {
                throw error("@Res:RequestExceptionSoftReservationIsRequired");
            }

            if (resourceReservationList.ResourceRequest)
            {
                throw error("@Res:RequestExceptonResourceHasRequest");
            }

            createRequest = true;

            // Add resource request.
            ResRequest request = ResRequestHelper::addResourceRequest();
            ResRequestRecId requestRecId = request.RecId;

            // Add resource request lines.
            if (resourceReservationList.TaskName)
            {
                ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResResourceReservationDetails));
                using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity()
                    .activityContext(ProjOpsFinancialsInstrumentationActivites::ResRequestWorkflowSubmitForAssignment))
                {
                    ResRequestHelper::addResourceRequestLineForAssignment(request, resourceReservationList.activityResource, resourceReservationList.Activity, resourceReservationList.StartTime, resourceReservationList.EndTime);
                }
            }
            else
            {
                ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResResourceReservationDetails));
                using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity()
                    .activityContext(ProjOpsFinancialsInstrumentationActivites::ResRequestWorkflowSubmitForBooking))
                {
                    ResRequestHelper::addResourceRequestLineForBooking(request, resourceReservationList.ActivityResource, resourceReservationList.Activity, resourceReservationList.StartTime, resourceReservationList.EndTime);
                }
            }

            boolean workflowIsSubmitted = ResRequestHelper::submitWorkflow(requestRecId, workflowType, _skipUserSubmissionComment);

            // If workflow is not submitted, revert those hours which is specified in the request line back to soft assigned hours and remove resoruce request.
            if (!workflowIsSubmitted)
            {
                ProjOpsFinancialsLogger logger = ProjOpsFinancialsLogger::createLogger(classStr(ResResourceReservationDetails));
                using (SysInstrumentationActivityContext activityContext = logger.projOpsFinActivity()
                .activityContext(ProjOpsFinancialsInstrumentationActivites::ResRequestWorkflowRollbackRequest))
                {
                    boolean isAssignmentScenario = resourceReservationList.TaskName ? true : false;
                    ResRequestHelper::rollBackResourceRequest(ResRequest::find(requestRecId), resourceReservationList.activityResource,
                        resourceReservationList.Activity, resourceReservationList.StartTime, resourceReservationList.EndTime, isAssignmentScenario);
                }
            }
            else
            {
                if (resourceReservationList.TaskName)
                {
                    // Remove soft booking and assignment.
                    ResResourceReservationDetails::cancelSoftReservation(ResReservationType::Both,
                        resourceReservationList.ActivityResource, resourceReservationList.StartTime, resourceReservationList.EndTime);
                }
                else
                {
                    // Remove soft booking.
                    ResResourceReservationDetails::cancelSoftReservation(ResReservationType::Booking,
                        resourceReservationList.ActivityResource, resourceReservationList.StartTime, resourceReservationList.EndTime);
                }
            }

            resourceReservationList = _deservationDetails_ds.getNext();
        }

        return createRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndSubmitResourceRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create and submit resource request.
    /// </summary>
    /// <param name = "_deservationDetails_ds">Resource reservation details temp table form data source.</param>
    /// <param name = "_availabilityView">Availability view control.</param>
    /// <param name = "_selections">Availability view control selections.</param>
    /// <param name = "_caller">The caller object.</param>
    /// <param name = "_skipUserSubmissionComment">Whether to skip resource request user submission comment.</param>
    /// <remarks>This method is less performing in control refresh. Please use createAndSubmitResourceRequestV2 if possible.</remarks>
    [SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
    public static void createAndSubmitResourceRequest(FormDataSource _deservationDetails_ds,
        AvailabilityView _availabilityView, AvailabilityViewSelections _selections, object _caller, boolean _skipUserSubmissionComment = false)
    {
        boolean createRequest = ResResourceReservationDetails::createAndSubmitResourceRequestExecution(
            _deservationDetails_ds, _selections, _caller, _skipUserSubmissionComment);

        // Refresh user selections.
        if (createRequest)
        {
            _availabilityView.selections(_selections);
            _availabilityView.refreshAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndSubmitResourceRequestV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create and submit resource request.
    /// </summary>
    /// <param name = "_deservationDetails_ds">Resource reservation details temp table form data source.</param>
    /// <param name = "_selections">Availability view control selections.</param>
    /// <param name = "_caller">The caller object.</param>
    /// <param name = "_skipUserSubmissionComment">Whether to skip resource request user submission comment.</param>
    [SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
    public void createAndSubmitResourceRequestV2(FormDataSource _deservationDetails_ds,
        AvailabilityViewSelections _selections, object _caller, boolean _skipUserSubmissionComment = false)
    {
        boolean createRequest = ResResourceReservationDetails::createAndSubmitResourceRequestExecution(
            _deservationDetails_ds, _selections, _caller, _skipUserSubmissionComment);

        // Refresh user selections.
        if (createRequest)
        {
            this.control().selections(_selections);
            this.executeActionCompleted();
            availabilityViewControl.clearSelections();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelSoftReservation</Name>
				<Source><![CDATA[
    private static void cancelSoftReservation(ResReservationType _reservationType, activityresourcerecid _activityResource,
        utcdatetime _activityStartDateTime, utcdatetime _activityEndDateTime)
    {
        List                    schedulesList = new List(Types::Class);

        ResReservationSchedule resSchedule = ResReservationSchedule::construct();
        resSchedule.ReservationType(_reservationType);
        resSchedule.Commitment(ResCommitType::SoftBook);
        resSchedule.activityResource(_activityResource);
        resSchedule.Start(_activityStartDateTime);
        resSchedule.End(_activityEndDateTime);
        schedulesList.addEnd(resSchedule);

        ResCancelSoftReservation cancelSoftReservation = ResCancelSoftReservation::construct(schedulesList);
        cancelSoftReservation.cancelSoftReservation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestRequestLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the earliest <c>ResRequestLine</c> record ID by <c>ResTmpResourceReservationDetails</c>
    /// buffer and add user selected request line into a map.
    /// </summary>
    /// <param name = "_reservationDetails">
    /// <c>ResTmpResourceReservationDetails</c> table buffer.
    /// </param>
    /// <param name = "_userRequestLinesSelectionMap">
    /// This function will add user selected request lines to this map which contains
    /// utcdatetime type as key field and <c>ResRequestLineSelectionContext</c> class as value filed.
    /// </param>
    /// <returns>
    /// The earliest record ID of <c>ResRequestLine</c>.
    /// </returns>
    [SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
    public static ResRequestLineRecId getEarliestRequestLine(ResTmpResourceReservationDetails _reservationDetails, Map _userRequestLinesSelectionMap)
    {
        ResRequestLine      requestLines;
        ResRequestLineRecId firstRequestLineRecId;

        while select RecId, Hour, ReservationType from requestLines
            order by requestLines.Hour
            where requestLines.Request == _reservationDetails.ResourceRequest
                && requestLines.ApprovalStatus == _reservationDetails.LineApprovalStatus
                && requestLines.Hour >= _reservationDetails.startTime
                && requestLines.Hour <= _reservationDetails.endTime
        {
            if (!firstRequestLineRecId)
            {
                firstRequestLineRecId = requestLines.RecId;
            }

            if (_userRequestLinesSelectionMap.exists(requestLines.Hour))
            {
                // In the case of hour exists in the map, then it means one of the
                // reservation types has been added to the map but not the other one.
                ResRequestLineSelectionContext requestLineContext = _userRequestLinesSelectionMap.lookup(requestLines.Hour);
                if (requestLines.RecId != requestLineContext.parmBookingRequestLine())
                {
                    requestLineContext.parmAssignmentRequestLine(requestLines.RecId);
                }
                else
                {
                    requestLineContext.parmBookingRequestLine(requestLines.RecId);
                }

                _userRequestLinesSelectionMap.remove(requestLines.Hour);
                _userRequestLinesSelectionMap.insert(requestLines.Hour, requestLineContext);
            }
            else
            {
                ResRequestLineSelectionContext requestLineContext = ResRequestLineSelectionContext::construct();
                if (requestLines.ReservationType == ResReservationType::Assignment)
                {
                    requestLineContext.parmAssignmentRequestLine(requestLines.RecId);
                }
                else
                {
                    requestLineContext.parmBookingRequestLine(requestLines.RecId);
                }
                requestLineContext.parmResource(_reservationDetails.Resource);
                requestLineContext.parmActivityResource(_reservationDetails.activityResource);
                _userRequestLinesSelectionMap.insert(requestLines.Hour, requestLineContext);
            }
        }

        return firstRequestLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExistingAssignmentDetailsByDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get existing assignment details in string by activity resource, from date time and to date time.
    /// </summary>
    /// <param name = "_allAssignmentDetails">All assignment details string.</param>
    /// <param name = "_activityResource">Activity resource record ID.</param>
    /// <param name = "_fromDateTime">From date time.</param>
    /// <param name = "_toDateTime">To date time.</param>
    /// <param name = "_commitType">Reservation commit type.</param>
    /// <param name = "_operation">Reservation operation type.</param>
    /// <returns>A string which contains the activity resource assignment details by the specified date time range.</returns>
    private static ResMessageBoxString getExistingAssignmentDetailsByDateTime(ResMessageBoxString _allAssignmentDetails,
        ActivityResourceRecId _activityResource, utcdatetime _fromDateTime, utcdatetime _toDateTime, ResCommitType _commitType,
        ResReservationOperation _operation)
    {
        ResMessageBoxString allAssignmentDetails = _allAssignmentDetails;

        if (_operation == ResReservationOperation::Cancel || _operation == ResReservationOperation::Confirm)
        {
            ResActivityResourceAssignmentView resAssignmentView;
            ResMessageBoxString assignmentDetails;
        
            ActivityResourceName resourceName;
            str engagementTypeStr, activityIDNameStr;
            List assignmentDetailsList = new List(Types::String);

            while select ProjId, ActivityIDName, TaskName, ResourceName, ActivityNumber from resAssignmentView
                order by ProjId, QuotationId, TaskName
                where resAssignmentView.ActivityResource == _activityResource
                    && resAssignmentView.EndTime >= _fromDateTime
                    && resAssignmentView.StartTime <= _toDateTime
                    && resAssignmentView.CommitType == _commitType
            {
                PSARSEntityType entityType;
                if (resAssignmentView.ProjId)
                {
                    entityType = PSARSEntityType::Project;
                }
                else
                {
                    entityType = PSARSEntityType::Quotation;
                }
            
                resourceName = resAssignmentView.ResourceName;
                engagementTypeStr = strLwr(enum2Str(entityType));            
                activityIDNameStr = resAssignmentView.ActivityIDName;

                assignmentDetailsList.addEnd(resAssignmentView.TaskName ? resAssignmentView.TaskName : resAssignmentView.ActivityNumber);
            }

            if (!assignmentDetailsList.empty())
            {
                assignmentDetails = strList2str(assignmentDetailsList, "@Res:AssignmentDetailsFormatComma");
                assignmentDetails = strFmt("@Res:AssignmentDetailsFormatPeriod", assignmentDetails);

                ResMessageBoxString resourceDetails;
                if (_operation == ResReservationOperation::Cancel)
                {
                    resourceDetails = strFmt("@Res:CancelResourceBookingWithAssignmentWarning", resourceName, strLwr(enum2Str(_commitType)), engagementTypeStr, activityIDNameStr);
                }
                else if (_operation == ResReservationOperation::Confirm)
                {
                    resourceDetails = strFmt("@Res:ConfirmResourceBookingWithAssignmentWarning", resourceName, strLwr(enum2Str(_commitType)), engagementTypeStr, activityIDNameStr);
                }
                assignmentDetails = strFmt("@Res:AssignmentDetailsMessageFormat", resourceDetails, assignmentDetails);
                allAssignmentDetails = strFmt("@Res:AssignmentDetailsMessageFormat", allAssignmentDetails, assignmentDetails);
            }
        }
        return allAssignmentDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignmentDetailsMessage</Name>
				<Source><![CDATA[
    private static ResMessageBoxString getAssignmentDetailsMessage(ResMessageBoxString _assignmentDetails)
    {
        ResMessageBoxString assignmentDetailsMessage = _assignmentDetails;

        if (assignmentDetailsMessage)
        {
            int conserveSizeForValidateProceedMessage = strLen(strFmt("@Res:AssignmentDetailsFormatMore", "@Res:VerifyProceed"));

            // Get the length of the EDT ResMessageBoxString and define the max allowed assignment details length.
            Dictionary dict = new Dictionary();
            int maxAssignmentDetailsLen = dict.typeObject(dict.typeName2Id(extendedTypeStr(ResMessageBoxString))).stringLen() - conserveSizeForValidateProceedMessage;

            int assignmentDetailsLen = strLen(assignmentDetailsMessage);
            if (assignmentDetailsLen > maxAssignmentDetailsLen)
            {
                // Get the sub string with size up to the max assignment details length and add '...' to the end.
                assignmentDetailsMessage = strFmt("@Res:AssignmentDetailsFormatMore", subStr(assignmentDetailsMessage, 1, maxAssignmentDetailsLen));
            }

            assignmentDetailsMessage = strFmt("@Res:AssignmentDetailsMessageFormat", assignmentDetailsMessage, "@Res:VerifyProceed");

        }

        return assignmentDetailsMessage;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>