<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxBudget</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxBudget</c> class is used to calculate and post tax for budget and forecasts.
/// </summary>
final class TaxBudget extends Tax
{
    NoYes           transact;
    BudgetMap       budget;
    LedgerCoverage  ledgerCoverage;
    TaxCov          taxCov;
    TaxItemGroup    taxItemGroup;
    Counter         reverseSign;
    LedgerCovValue  ledgerCovValue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the tax amount.
    /// </summary>
    /// <param name="_ledgerPostingController">
    ///    The ledger posting controller that will be used to post ledgers.
    /// </param>
    /// <returns>
    ///    The calculated tax amount.
    /// </returns>
    /// <remarks>
    ///    This method does not post to the general ledger.
    /// </remarks>
    TaxAmount calcAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount taxAmount = 0;

        if (!headingRecId)
        {
            return 0;
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        if (budget.TaxGroup)
        {
            this.insertLineInInternal(budget.Amount * reverseSign * ledgerCovValue / 100,
                                      budget.Qty * reverseSign * ledgerCovValue / 100,
                                      '',
                                      '',
                                      0,
                                      0,
                                      0);

            if (taxCalculateLine)
            {
                taxAmount = this.calcTax();
                this.saveInProcessTransaction();
            }
            if (taxCalculateTotal)
            {
                this.insertTotalInInternal(0);
                taxAmount = this.calcTax();

                this.saveTotalInProcessTransaction();
            }
        }

        if (transact)
        {
            taxCov.taxLedgerCov(taxWorkTrans);
        }

        taxAmount = this.totalTaxAmount();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the parameters are valid.
    /// </summary>
    /// <param name="_ledgerCoverage">
    ///    The <c>LedgerCoverage</c> object to check; optional.
    /// </param>
    /// <returns>
    ///    true if the parameters are valid; otherwise, false.
    /// </returns>
    boolean checkParameters(LedgerCoverage _ledgerCoverage = null)
    {
        boolean ok = true;

        if (! _ledgerCoverage)
        {
            ok  = checkFailed(strfmt("@SYS19386", funcname()));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDirection</Name>
				<Source><![CDATA[
        protected TaxDirection determineDirection(TaxGroupData       _taxGroupData)
    {
        SalesPurch      salesPurch;
        TaxDirection    taxDirection;

        reverseSign = 1;
        if (tableid2name(budget.TableId) == tablestr(ForecastPurch))
        {
            salesPurch = SalesPurch::Purch;
        }

        if (tableid2name(budget.TableId) == tablestr(ForecastSales))
        {
            salesPurch = SalesPurch::Sales;
            reverseSign = -1;
        }

        if (salesPurch == SalesPurch::Sales)
        {
            if (_taxGroupData.ExemptTax    == NoYes::No)
            {
                taxDirection = TaxDirection::OutgoingTax;
            }
            else
            {
                taxDirection = TaxDirection::TaxExemptSales;
            }
        }
        else
        {
            if (_taxGroupData.UseTax          == NoYes::Yes)
            {
                taxDirection = TaxDirection::UseTax;
            }
            else
            {
                if (_taxGroupData.ExemptTax    == NoYes::No)
                {
                    if (_taxGroupData.IntracomVAT == NoYes::Yes && VendParameters::find().IntracomVAT)
                    {
                        taxDirection = TaxDirection::OutgoingTax;
                    }
                    else
                    {
                        taxDirection = TaxDirection::IncomingTax;
                    }
                }
                else
                {
                    taxDirection = TaxDirection::TaxExemptPurchase;
                }
            }
        }

        return taxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
/// <summary>
    ///    Initializes a new <c>TaxBudget</c> object.
    /// </summary>
    /// <param name="_transact">
    ///    A <c>NoYes</c> enumeration that creates cash flow forecast transactions.
    /// </param>
    /// <param name="_budget">
    ///    The budget on which the sales tax calculation is based.
    /// </param>
    /// <param name="_ledgerCoverage">
    ///    The cash flow forecast on which the sales tax calculation is based.
    /// </param>
    /// <param name="_startDate">
    ///    The starting date; optional.
    /// </param>
    /// <param name="_ledgerCovValue">
    ///    The percentage to be included in coverage; optional.
    /// </param>
    public void new(NoYes   _transact,
             BudgetMap      _budget,
             LedgerCoverage _ledgerCoverage,
             TransDate      _startDate      = dateNull(),
             LedgerCovValue _ledgerCovValue = 100)
    {
        super();

        transact            = _transact;
        budget              = _budget;
        ledgerCoverage      = _ledgerCoverage;
        ledgerCovValue      = _ledgerCovValue;
        triangulation       = NoYes::Yes;
        headingTableId      = budget.TableId;
        headingRecId        = budget.RecId;
        taxModuleType       = TaxModuleType::Voucher;
        sourceCurrencyCode  = budget.Currency;
        taxDate             = _startDate ? _startDate : budget.StartDate;

        if (!this.checkParameters(_ledgerCoverage))
        {
            throw error("@SYS18447");
        }

        if (!headingTableId || !headingRecId)
        {
            throw error("@SYS18447");
        }

        if (transact)
        {
            taxCov = new TaxCov(_ledgerCoverage);
        }

        if (tableid2name(budget.TableId) == tablestr(ForecastPurch) ||
            tableid2name(budget.TableId) == tablestr(ForecastSales))
        {
            exceptionTextFallThrough();
        }

        this.insertIntersection(budget.TaxGroup,
                                budget.TaxItemGroup,
                                '',
                                budget.Comment,
                                taxDate);

        if (!this.checkTaxCodesByLine())
            throw error("@SYS18447");
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line to calculate.
    /// </returns>
    public recId sourceRecId()
    {
        return budget.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to tax.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return budget.TableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>