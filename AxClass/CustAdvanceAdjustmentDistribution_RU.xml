<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAdvanceAdjustmentDistribution_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   Distributes advance adjustments in case of distributed CustInvoiceLine
/// </summary>
class CustAdvanceAdjustmentDistribution_RU
{
    CompanyInfo             companyInfo;
    RefTableId              invoiceTransTableId;
    RefRecId                invoiceTransRecId;
    AmountMST               totalAmountMst;
    AmountMSTSecondary      totalAmountMstSec;
    container               distributions;
    container               distributedMST;
    container               distributedMSTSec;
    container               distributedLedgerDimensions;
    container               distributedOffsetDimensions;
    boolean                 mustBeDistributed;
    SourceDocumentLine      sourceDocumentLine;
    AccountingEvent         accountingEvent;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyRTax25Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Changes dimension related to profit tax in _dimension
    /// </summary>
    /// <param name="_dimension">
    ///  ledger dimension to change
    /// </param>
    /// <param name="_exchAdjDimension">
    ///   dimension to apply
    /// </param>
    /// <returns>
    ///  LedgerDimensionAccount with changed profit tax dimension
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LedgerDimensionAccount applyRTax25Dimension(LedgerDimensionAccount _dimension, RTax25ExchAdjDimension _exchAdjDimension)
    {
        RecId                               defaultAccount;
        DimensionDefault                    defaultDimension;
        DimensionDefault                    exchRateDiffDefaultDimension;
        LedgerDimensionAccount              ret = _dimension;

        if (_exchAdjDimension)
        {
            defaultAccount               = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_dimension);
            defaultDimension             = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_dimension);
            exchRateDiffDefaultDimension = _exchAdjDimension.getDefaultDimension(defaultDimension);
            ret                          = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, exchRateDiffDefaultDimension);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRTax25DimensionToDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Substitutes profit tax ledger dimensions fot all dimensions in _distribution
    /// </summary>
    /// <param name="_distribution">
    ///   container of pairs [LedgerDimensionAccount, something else]
    /// </param>
    /// <param name="_dimension">
    ///   profit ledher dimension
    /// </param>
    /// <returns>
    ///   container of ledger dimensions with copy of dimensions form pairs, but with RTax25 dimension substituted
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container applyRTax25DimensionToDistribution(container _distribution, RTax25ExchAdjDimension _dimension)
    {
        container ret;
        int       i;

        for (i=1; i<=conlen(_distribution); i++)
        {
            ret += this.applyRTax25Dimension(conpeek(conpeek(_distribution, i), 1), _dimension);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Distributes _amount proportionally the distribution loaded at class creation time
    /// </summary>
    /// <param name="_amount">
    ///   amount to distribute
    /// </param>
    /// <param name="_currency">
    ///  currenct to round
    /// </param>
    /// <returns>
    ///   container of distributed amount with order matching distribution
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container distribute(Amount _amount, CurrencyCode _currency)
    {
        return this.distributeProportionally(_amount, distributions, _currency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeOffsetDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Distributes offset dimensions according to loaded siatributions
    /// </summary>
    /// <param name="_defaultAccount">
    ///   Default account for offset
    /// </param>
    /// <param name="_defaultDimension">
    ///  Default dimensions for offset
    /// </param>
    /// <returns>
    ///  container of LedgerDimensionAccount
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container distributeOffsetDimensions(LedgerDimensionDefaultAccount _defaultAccount, DimensionDefault _defaultDimension)
    {
        container   ret;
        int         i;

        for (i=1; i<=conlen(distributions); i++)
        {
            ret += this.makeOffset(conpeek(conpeek(distributions, i), 1), _defaultAccount, _defaultDimension);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeProportionally</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Distribuites amount proportionally to _distribution
    /// </summary>
    /// <param name="_amount">
    ///  amount to distribute
    /// </param>
    /// <param name="_distribution">
    ///  container of pairs [key, amount]
    ///  where key - value of any type,
    ///  amount - real value
    /// </param>
    /// <param name="_currency">
    ///  Code of currency to round values
    /// </param>
    /// <returns>
    ///  container of pairs [amount] where amount distributed proportionally to _distribution
    /// </returns>
    /// <remarks>
    ///   rounding error is added to the last element
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container distributeProportionally(Amount _amount, container _distribution, CurrencyCode _currency)
    {
        Amount      distributionTotal    = this.distributionTotal(_distribution);
        Amount      remainder            = _amount;
        container   ret;
        int         i;
        anytype     key;
        Amount      value;
        Amount      distributed;

        for (i=1; i<=conlen(_distribution); i++)
        {
            [key, value] = conpeek(_distribution, i);
            distributed = (i == conlen(_distribution)) ? remainder :
                                                         CurrencyExchangeHelper::amount(_amount * value / distributionTotal, _currency);
            ret += distributed;
            remainder -= distributed;
        }

        Debug::assert(remainder == 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributionTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Total amount of given distribution
    /// </summary>
    /// <param name="_distribution">
    ///  container of pairs [key, amount]
    /// </param>
    /// <returns>
    ///   sum of amounts in pair
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Amount distributionTotal(container _distribution)
    {
        Amount ret;
        int i;

        for (i=1; i<=conlen(_distribution); i++)
        {
            ret += conpeek(conpeek(_distribution, i), 2);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributedLedgerDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  container of ledger dimensions from loaded distributions with substituted RTax25 dimension
    /// </summary>
    /// <returns>
    ///  container of <c>LedgerDimensionAccount</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getDistributedLedgerDimensions()
    {
        return distributedLedgerDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributedMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Distributed amount by in accpounting currency
    /// </summary>
    /// <returns>
    ///  container of <c>AmountMst</c>
    /// </returns>
    /// <remarks>
    ///   order match the getDistributedLedgerDimensions
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getDistributedMst()
    {
        return distributedMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributedMstSec</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Distributed amount by in secondary currency
    /// </summary>
    /// <returns>
    ///  container of <c>AmountMstSecondary</c>
    /// </returns>
    /// <remarks>
    ///   order match the getDistributedLedgerDimensions
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getDistributedMstSec()
    {
        return distributedMstSec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributedOffsetDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///  returns container of offset dimensions
    /// </summary>
    /// <returns>
    ///  container of LedgerDimensionAccount
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getDistributedOffsetDimensions()
    {
        return distributedOffsetDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMustBeDistributed</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks whether amount should be distributed
    /// </summary>
    /// <param name="_invoicePostingInherited">
    ///  was invoice posting account inherited
    /// </param>
    /// <returns>
    ///  true, if distribution must be done
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean getMustBeDistributed(boolean _invoicePostingInherited)
    {
        if (_invoicePostingInherited)
        {
            return AccountingDistribution::existEventAndSourceDocumentLine(accountingEvent.RecId, sourceDocumentLine.RecId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Loads distributions for CustInvoiceTrans referenced by parameters
    /// </summary>
    /// <returns>
    ///   contaioner of pairs [LedgerDimension, AmountMst]
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container loadDistributions()
    {
        AccountingDistribution  sourceDocumentDistribution;
        List                    sourceLineDistributionList = AccountingDistribution::getDistributionList(accountingEvent.RecId, sourceDocumentLine.RecId);
        ListEnumerator          le                         = sourceLineDistributionList.getEnumerator();

        container               ret;

        while (le.moveNext())
        {
            sourceDocumentDistribution = le.current();
            ret += [[sourceDocumentDistribution.LedgerDimension, sourceDocumentDistribution.TransactionCurrencyAmount]];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeOffset</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Makes offset ledger dimension from distribution and defaults
    /// </summary>
    /// <param name="_fromDistribution">
    /// LedgerDimension from distribution
    /// </param>
    /// <param name="_defaultAccount">
    /// default account for offset
    /// </param>
    /// <param name="_defaultDimension">
    /// default dimension for offset
    /// </param>
    /// <returns>
    ///   merges defaults account with distribited ledger dimension
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerDimensionAccount makeOffset(LedgerDimensionAccount _fromDistribution, LedgerDimensionDefaultAccount _defaultAccount, DimensionDefault _defaultDimension)
    {
        List sources = new List(Types::Class);
        sources.addEnd(LedgerDimensionDefaultingEngine::getLedgerDimensionSpecifiers(_fromDistribution));
        sources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_defaultDimension));
        return LedgerDimensionDefaultingEngine::createLedgerDimension(_defaultAccount, sources);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeDistributed</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns whether amount should be distributed
    /// </summary>
    /// <returns>
    ///  true, if distribution must be done
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean mustBeDistributed()
    {
        return mustBeDistributed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>CustAdvanceAdjustmentDistribution_RU</c> class.
    /// </summary>
    /// <param name="_invoiceTransTableId">
    /// The reference table Id.
    /// </param>
    /// <param name="_invoiceTransRecId">
    /// The reference record Id.
    /// </param>
    /// <param name="_amountMST">
    /// The amount MST value.
    /// </param>
    /// <param name="_amountMstSec">
    /// The amount MST secondary value.
    /// </param>
    /// <param name="_exchAdjDimension">
    /// The profit ledher dimension.
    /// </param>
    /// <param name="_invoicePostingInherited">
    /// The invoice posting account inherited.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The <c>LedgerDimensionAccount</c> object.
    /// </param>
    /// <param name="_defaultOffsetAccount">
    /// The default account for offset.
    /// </param>
    /// <param name="_defaultOffsetDimension">
    /// The default dimensions for offset.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(RefTableId                       _invoiceTransTableId,
                       RefRecId                         _invoiceTransRecId,
                       AmountMST                        _amountMST,
                       AmountMSTSecondary               _amountMstSec,
                       RTax25ExchAdjDimension           _exchAdjDimension,
                       boolean                          _invoicePostingInherited,
                       LedgerDimensionAccount           _ledgerDimension,
                       LedgerDimensionDefaultAccount    _defaultOffsetAccount,
                       DimensionDefault                 _defaultOffsetDimension
                       )
    {
        invoiceTransTableId = _invoiceTransTableId;
        invoiceTransRecId   = _invoiceTransRecId;
        totalAmountMst      = _amountMST;
        totalAmountMstSec   = _amountMstSec;
        sourceDocumentLine  = TaxReverseTaxCustVendSettle_RU::sourceDocumentLine(invoiceTransTableId, invoiceTransRecId);
        accountingEvent     = AccountingDistribution::getLastSourceDocumentLineEvent(sourceDocumentLine.RecId);
        mustBeDistributed   = this.getMustBeDistributed(_invoicePostingInherited);
        if (this.mustBeDistributed())
        {
            companyInfo                 = CompanyInfo::find();
            distributions               = this.loadDistributions();

            distributedMST              = this.distribute(_amountMST, CompanyInfoHelper::standardCurrency());
            distributedMSTSec           = this.distribute(_amountMstSec, CompanyInfoHelper::secondaryCurrency_RU());

            distributedLedgerDimensions = this.applyRTax25DimensionToDistribution(distributions, _exchAdjDimension);
            distributedOffsetDimensions = this.distributeOffsetDimensions(_defaultOffsetAccount, _defaultOffsetDimension);
        }
        else
        {
            distributedMST              = [ _amountMST    ];
            distributedMSTSec           = [ _amountMstSec ];
            distributedLedgerDimensions = [ _ledgerDimension ];
            distributedOffsetDimensions = [ LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultOffsetAccount, _defaultOffsetDimension) ];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates new distribution class and load distribution connected to given record
    /// </summary>
    /// <param name="_invoiceTransTableId">
    ///    table id of connected transaction
    /// </param>
    /// <param name="_invoiceTransRecId">
    ///   record id of connected transaction
    /// </param>
    /// <param name="_amountMST">
    ///    functional currency amount to distribute
    /// </param>
    /// <param name="_amountMstSec">
    ///  secondary currency amount top distribute
    /// </param>
    /// <param name="_exchAdjDimension">
    ///   dimension for profit tax
    /// </param>
    /// <param name="_invoicePostingInherited">
    ///  was posting account inherited from invoice?
    /// </param>
    /// <param name="_ledgerDimension">
    /// Ledger dimension for non-distributed transaction
    /// </param>
    /// <param name="_defaultOffsetAccount">
    ///  default offset account for non-distributed transaction
    /// </param>
    /// <param name="_defaultOffsetDimension">
    ///  default offset dimension for non-distributed transaction
    /// </param>
    /// <returns>
    ///    new <c>CustAdvanceAdjustmentDistribution_RU</c>
    /// </returns>
    /// <remarks>
    ///  If mustBeDistributed() returns false, loading of distribution is skipped
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustAdvanceAdjustmentDistribution_RU construct(
                       RefTableId                       _invoiceTransTableId,
                       RefRecId                         _invoiceTransRecId,
                       AmountMST                        _amountMST,
                       AmountMSTSecondary               _amountMstSec,
                       RTax25ExchAdjDimension           _exchAdjDimension,
                       boolean                          _invoicePostingInherited,
                       LedgerDimensionAccount           _ledgerDimension,
                       LedgerDimensionDefaultAccount    _defaultOffsetAccount,
                       DimensionDefault                 _defaultOffsetDimension
            )
    {
        return new CustAdvanceAdjustmentDistribution_RU(
                       _invoiceTransTableId,
                       _invoiceTransRecId,
                       _amountMST,
                       _amountMstSec,
                       _exchAdjDimension,
                       _invoicePostingInherited,
                       _ledgerDimension,
                       _defaultOffsetAccount,
           _defaultOffsetDimension);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
