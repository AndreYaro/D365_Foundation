<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlRuleValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BudgetControlRuleValidation
{
    private BudgetControlConfigurationRecId controlConfigurationRecId;
    private Map ruleManagerMap;
    private Map budgetControlDimensionAttributes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        controlConfigurationRecId = _controlConfigurationRecId;

        budgetControlDimensionAttributes = new Map(Types::Integer, Types::Int64);

        DimensionAttribute dimensionAttribute;
        BudgetControlDimensionAttribute controlDimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;

        while select Ordinal, RecId from controlDimensionAttribute
            order by Ordinal
            where controlDimensionAttribute.BudgetControlConfiguration == controlConfigurationRecId
            join RecId from budgetDimensionAttribute
                where budgetDimensionAttribute.RecId == controlDimensionAttribute.BudgetPrimaryLedgerDimensionAttribute
            join RecId from dimensionAttribute
                where dimensionAttribute.RecId == budgetDimensionAttribute.DimensionAttribute
        {
            budgetControlDimensionAttributes.insert(controlDimensionAttribute.Ordinal, dimensionAttribute.RecId);
        }

        ruleManagerMap = new Map(Types::Int64, Types::Class);

        BudgetControlRule budgetControlRule;

        while select RecId from budgetControlRule
            where budgetControlRule.BudgetControlConfiguration == _controlConfigurationRecId
        {
            // Initialize rule managers
            BudgetControlRuleManager ruleManager = BudgetControlRuleManager::construct(budgetControlRule.RecId);
            ruleManagerMap.insert(budgetControlRule.RecId, ruleManager);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate()
    {
        // Validate that the configuration is editable.
        boolean isValid = BudgetControlConfigurationManager::validateConfigurationEditPermitted(controlConfigurationRecId);

        if (isValid)
        {
            // Validate that the names are unique.
            isValid = this.validateNames();
            
            // Validate the override responsible users.
            isValid = this.validateOverrideResponsibleUsers() && isValid;

            var ruleManagerMapEnumerator = ruleManagerMap.getEnumerator();

            while (ruleManagerMapEnumerator.moveNext())
            {
                var ruleManager = ruleManagerMapEnumerator.currentValue() as BudgetControlRuleManager;

                // Validate that the required fields are set.
                isValid = this.validateRequiredFields(ruleManager) && isValid;

                // Validate the criteria.
                isValid = this.validateCriteria(ruleManagerMapEnumerator.currentKey()) && isValid;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNames</Name>
				<Source><![CDATA[
    private boolean validateNames()
    {
        boolean isValid = true;

        BudgetControlRule existingRule;
        BudgetControlRule duplicateRule;

        while select RecId, Name from existingRule
            where existingRule.BudgetControlConfiguration == controlConfigurationRecId
            exists join duplicateRule
                where duplicateRule.RecId != existingRule.RecId
                    && duplicateRule.Name == existingRule.Name
                    && duplicateRule.BudgetControlConfiguration == controlConfigurationRecId
        {
            isValid = checkFailed(strfmt("@SYS320427", existingRule.Name)) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOverrideResponsibleUsers</Name>
				<Source><![CDATA[
    private boolean validateOverrideResponsibleUsers()
    {
        boolean isValid = true;

        BudgetControlRule controlRule;

        while select OverrideResponsibleUser from controlRule
            group by controlRule.OverrideResponsibleUser
            where controlRule.BudgetControlConfiguration == controlConfigurationRecId
        {
            isValid = BudgetControlConfigurationManager::validateResponsibleUserReference(controlRule.OverrideResponsibleUser) && isValid;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequiredFields</Name>
				<Source><![CDATA[
    private boolean validateRequiredFields(BudgetControlRuleManager _ruleManager)
    {
        boolean isValid = true;

        // Validate that the required fields are set.
        if (_ruleManager.parmBudgetInterval() == 0)
        {
            isValid = checkFailed("@SYS315199");
        }

        if (_ruleManager.parmBudgetCycleTimeSpan() == 0)
        {
            isValid = checkFailed("@SYS315242");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCriteria</Name>
				<Source><![CDATA[
    private boolean validateCriteria(RefRecId _ruleId)
    {
        boolean isValid = true;
        boolean isCriteriaIntersecting;

        var givenRuleManager = ruleManagerMap.lookup(_ruleId) as BudgetControlRuleManager;

        var ruleManagerMapEnumerator = ruleManagerMap.getEnumerator();

        while (ruleManagerMapEnumerator.moveNext())
        {
            if (ruleManagerMapEnumerator.currentKey() != _ruleId)
            {
                var existingRuleManager = ruleManagerMapEnumerator.currentValue() as BudgetControlRuleManager;

                var budgetControlDimensionAttributesEnumerator = budgetControlDimensionAttributes.getEnumerator();

                while (budgetControlDimensionAttributesEnumerator.moveNext())
                {
                    // Get the criteria for the dimension attribute in the order that is defined by the configuration.
                    var dimensionAttributeRecId = budgetControlDimensionAttributesEnumerator.currentValue();
                    // If it is not defined it is treated as a wildcard.
                    var givenCriteria = givenRuleManager.getDimensionExpressionCriteria(dimensionAttributeRecId);

                    // Get the existing rule criteria for the dimension attribute.
                    var existingCriteria = existingRuleManager.getDimensionExpressionCriteria(dimensionAttributeRecId);

                    isCriteriaIntersecting = DimensionExpressionCriteriaCollection::isExpressionCriteriaIntersecting(existingCriteria, givenCriteria);

                    if (!isCriteriaIntersecting)
                    {
                        // If any dimension attribute does not intersect then the criteria does not intersect.
                        break;
                    }
                }
            }

            if (isCriteriaIntersecting)
            {
                // The set of rule criteria intersects with an existing set of rule criteria.
                break;
            }
        }

        if (isCriteriaIntersecting)
        {
            isValid = checkFailed(strfmt("@Budget:BudgetControlRuleCriteriaOverlap", givenRuleManager.parmName()));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetControlRuleValidation construct(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        var ruleValidationManager = new BudgetControlRuleValidation();
        ruleValidationManager.initialize(_controlConfigurationRecId);

        return ruleValidationManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetControlRules</Name>
				<Source><![CDATA[
    internal static boolean validateBudgetControlRules(BudgetControlConfigurationRecId _controlConfigurationRecId)
    {
        var ruleValidationManager = BudgetControlRuleValidation::construct(_controlConfigurationRecId);

        return ruleValidationManager.validate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>