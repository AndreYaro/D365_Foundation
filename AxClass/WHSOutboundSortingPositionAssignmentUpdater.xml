<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundSortingPositionAssignmentUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used to handle scenarios where data changes result in the need to update assigned sort positions before actual sorting has occurred.
/// </summary>
final internal class WHSOutboundSortingPositionAssignmentUpdater
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createNewSortPosition</Name>
				<Source><![CDATA[
    private WHSOutboundSortPosition createNewSortPosition(
        WHSOutboundSortTemplate _sortTemplate,
        WHSOutboundSortPosition _oldSortPosition)
    {
        WHSOutboundSortPosition newSortPosition;

        newSortPosition.initFromSortTemplateAndWaveId(_sortTemplate, _oldSortPosition.WaveId);
        newSortPosition.SortPositionStatus = WHSOutboundSortPositionStatus::Assigned;

        newSortPosition.insert();

        return newSortPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSortPositionCriteria</Name>
				<Source><![CDATA[
    private void createSortPositionCriteria(
        WHSOutboundSortPosition         _sortPosition,
        WHSOutboundSortPositionCriteria _predeterminedSortCriteria)
    {
        WHSOutboundSortPositionCriteria sortPositionCriteria;
        WHSOutboundSortPositionRecId    sortPositionRecId = _sortPosition.RecId;

        insert_recordset sortPositionCriteria(OutboundSortPosition, SortPositionCriteriaValue, GroupFieldId, GroupTableId)
            select sortPositionRecId, SortPositionCriteriaValue, GroupFieldId, GroupTableId from _predeterminedSortCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExistingSortPosition</Name>
				<Source><![CDATA[
    private WHSOutboundSortPosition findExistingSortPosition(
        WHSoutboundSortPositionCriteria _tmpSortPositionCriteria,
        WHSOutboundSortTemplateId       _sortTemplateId)
    {
        WHSOutboundSortPosition sortPosition;

        Query query = new Query();

        QueryBuildDataSource qbdsSortPosition = query.addDataSource(tableNum(WHSOutboundSortPosition));
        qbdsSortPosition.addRange(fieldNum(WHSOutboundSortPosition, SortTemplateId)).value(queryValue(_sortTemplateId));
        qbdsSortPosition.addRange(fieldNum(WHSOutboundSortPosition, SortPositionStatus)).value(queryValue(WHSOutboundSortPositionStatus::Assigned));
        qbdsSortPosition.addOrderByField(fieldNum(WHSOutboundSortPosition, SortPositionId), SortOrder::Ascending);

        while select _tmpSortPositionCriteria
        {
            QueryBuildDataSource qbdsSortPositionCriteria = qbdsSortPosition.addDataSource(tableNum(WHSoutboundSortPositionCriteria));
            qbdsSortPositionCriteria.fetchMode(QueryFetchMode::One2One);
            qbdsSortPositionCriteria.joinMode(JoinMode::ExistsJoin);
            qbdsSortPositionCriteria.relations(true);

            qbdsSortPositionCriteria.addRange(fieldNum(WHSoutboundSortPositionCriteria, GroupTableId)).value(queryValue(_tmpSortPositionCriteria.GroupTableId));
            qbdsSortPositionCriteria.addRange(fieldNum(WHSoutboundSortPositionCriteria, GroupFieldId)).value(queryValue(_tmpSortPositionCriteria.GroupFieldId));
            qbdsSortPositionCriteria.addRange(fieldNum(WHSoutboundSortPositionCriteria, SortPositionCriteriaValue)).value(queryValue(_tmpSortPositionCriteria.SortPositionCriteriaValue));
        }

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            sortPosition = queryRun.get(tableNum(WHSOutboundSortPosition));
        }

        return sortPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpSortPositionCriteria</Name>
				<Source><![CDATA[
    private WHSOutboundSortPositionCriteria getTmpSortPositionCriteria(
        QueryRun                    _queryRun,
        WHSOutboundSortTemplateId   _sortTemplateId)
    {
        WHSOutboundSortTemplateGroup            sortTemplateGroup;
        WHSOutboundSortPositionCriteria         sortPositionCriteria;
        WHSOutboundSortPositionCriteriaValue    criteriaValue;

        const RefRecId sortPositionRecIdPlaceHolder = 1;

        ttsBegin;

        sortPositionCriteria.setTmp();

        while select GroupTableId, GroupFieldId from sortTemplateGroup
            where sortTemplateGroup.SortTemplateId  == _sortTemplateId
            &&    sortTemplateGroup.SortGroupBy     == NoYes::Yes
        {
            sortPositionCriteria.OutboundSortPosition   = sortPositionRecIdPlaceHolder;
            sortPositionCriteria.GroupTableId           = sortTemplateGroup.GroupTableId;
            sortPositionCriteria.GroupFieldId           = sortTemplateGroup.GroupFieldId;
            
            criteriaValue = _queryRun.get(sortTemplateGroup.GroupTableId).(sortTemplateGroup.GroupFieldId);

            sortPositionCriteria.SortPositionCriteriaValue = criteriaValue;
            sortPositionCriteria.insert();
        }

        ttsCommit;

        return sortPositionCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSortPositionForCombineShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates assigned sort positions for a shipment being consolidated onto another shipment.
    /// </summary>
    /// <param name="_oldShipmentId">
    /// The shipment being consolidated.
    /// </param>
    /// <param name="_newShipmentId">
    /// The target shipment.
    /// </param>
    [Hookable(false)]
    internal void updateSortPositionForCombineShipment(
        WHSShipmentId _oldShipmentId,
        WHSShipmentId _newShipmentId)
    {
        WHSWorkLine             workLine;
        WHSOutboundSortPosition sortPosition;
        WHSOutboundSortTemplate sortTemplate;

        if (!this.validateNoSortTransactionsForShipment(_oldShipmentId))
        {
            throw error(strFmt("@WAX:CombineShipmentSortCompleteError", _oldShipmentId));
        }

        ttsBegin;

        // Find any sort positions linked to the shipment that is being consolidated.
        while select forUpdate sortPosition
            where sortPosition.SortPositionStatus == WHSOutboundSortPositionStatus::Assigned
            join sortTemplate
                where sortTemplate.SortTemplateId == sortPosition.SortTemplateId
            exists join workLine
                where workLine.OutboundSortPosition == sortPosition.RecId
                &&    workLine.ShipmentId           == _oldShipmentId
                &&    workLine.WorkStatus           != WHSWorkStatus::Cancelled
        {
            // Determine if the the new shipment will make the current sort template invaild.
            Query query = new Query(sortTemplate.PackedQueryRun);
            query.dataSourceTable(tableNum(WHSShipmentTable)).addRange(fieldNum(WHSShipmentTable, ShipmentId)).value(_newShipmentId);

            QueryRun qrNoCriteria = new QueryRun(query);

            // If sort template query does not return results for new shipment then it is violating some of the filters.
            if (!qrNoCriteria.next())
            {
                throw error(strFmt("@WAX:CombineShipmentSortCriteriaError", _oldShipmentId));
            }

            // Determine if sort position is valid.
            query = this.addSortCriteriaToQuery(query, sortPosition.RecId);

            QueryRun qrWithCriteria = new QueryRun(query);

            if (!qrWithCriteria.next())
            {
                // Get the criteria based on new load
                WHSOutboundSortPositionCriteria tmpSortPositionCriteria = this.getTmpSortPositionCriteria(qrNoCriteria, sortTemplate.SortTemplateId);
                // Find existing sort position that has the same sort criteria, and is for the same sort template
                WHSOutboundSortPosition existingSortPosition = this.findExistingSortPosition(tmpSortPositionCriteria, sortTemplate.SortTemplateId);

                if (existingSortPosition)
                {
                    this.updateWorkLinesToNewSortPosition(sortPosition.RecId, existingSortPosition.RecId, _oldShipmentId);
                }
                else
                {
                    // Create new sort position with new criteria
                    WHSOutboundSortPosition newSortPosition = this.createNewSortPosition(sortTemplate, sortPosition);
                    this.createSortPositionCriteria(newSortPosition, tmpSortPositionCriteria);

                    this.updateWorkLinesToNewSortPosition(sortPosition.RecId, newSortPosition.RecId, _oldShipmentId);
                }

                // Delete unused sort position.
                if (!WHSOutboundSortPosition::isSortPositionInUse(sortPosition.RecId))
                {
                    sortPosition.delete();
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSortPositionForTransferShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates assigned sort positions for a shipment being transferred from one load to another.
    /// </summary>
    /// <param name="_shipmentId">
    /// The shipment being transferred.
    /// </param>
    /// <param name="_newLoadId">
    /// The load that the shipment is being transfered to.
    /// </param>
    [Hookable(false)]
    internal void updateSortPositionForTransferShipment(
        WHSShipmentId   _shipmentId,
        WHSLoadId       _newLoadId)
    {
        WHSWorkLine             workLine;
        WHSOutboundSortPosition sortPosition;
        WHSOutboundSortTemplate sortTemplate;

        if (!this.validateNoSortTransactionsForShipment(_shipmentId))
        {
            throw error(strFmt("@WAX:TransferShipmentSortCompleteError", _shipmentId));
        }

        ttsBegin;

        // Find any sort positions linked to the shipment that is being moved to a different load.
        while select forUpdate sortPosition
            where sortPosition.SortPositionStatus == WHSOutboundSortPositionStatus::Assigned
            join sortTemplate
                where sortTemplate.SortTemplateId == sortPosition.SortTemplateId
            exists join workLine
                where workLine.OutboundSortPosition == sortPosition.RecId
                &&    workLine.ShipmentId           == _shipmentId
                &&    workLine.WorkStatus           != WHSWorkStatus::Cancelled
        {
            // Determine if the the new load will make the current sort template invaild.
            Query query = new Query(sortTemplate.PackedQueryRun);
            query.dataSourceTable(tableNum(WHSLoadTable)).addRange(fieldNum(WHSLoadTable, LoadId)).value(_newLoadId);

            QueryRun qrNoCriteria = new QueryRun(query);

            // If sort template query does not return results for new load then it is violating some of the filters.
            if (!qrNoCriteria.next())
            {
                throw error(strFmt("@WAX:TransferShipmentSortCriteriaError", _shipmentId));
            }

            // Determine if sort position is valid.
            query = this.addSortCriteriaToQuery(query, sortPosition.RecId);

            QueryRun qrWithCriteria = new QueryRun(query);

            if (!qrWithCriteria.next())
            {
                // Get the criteria based on new load
                WHSoutboundSortPositionCriteria tmpSortPositionCriteria = this.getTmpSortPositionCriteria(qrNoCriteria, sortTemplate.SortTemplateId);
                // Find existing sort position that has the same sort criteria, and is for the same sort template
                WHSOutboundSortPosition existingSortPosition = this.findExistingSortPosition(tmpSortPositionCriteria, sortTemplate.SortTemplateId);

                if (existingSortPosition)
                {
                    this.updateWorkLinesToNewSortPosition(sortPosition.RecId, existingSortPosition.RecId, _shipmentId);
                }
                else
                {
                    // Create new sort position with new criteria
                    WHSOutboundSortPosition newSortPosition = this.createNewSortPosition(sortTemplate, sortPosition);
                    this.createSortPositionCriteria(newSortPosition, tmpSortPositionCriteria);

                    this.updateWorkLinesToNewSortPosition(sortPosition.RecId, newSortPosition.RecId, _shipmentId);
                }

                // Delete unused sort position.
                if (!WHSOutboundSortPosition::isSortPositionInUse(sortPosition.RecId))
                {
                    sortPosition.delete();
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkLinesToNewSortPosition</Name>
				<Source><![CDATA[
    private void updateWorkLinesToNewSortPosition(
        RefRecId        _currentSortPositionRecId,
        RefRecId        _newSortPositionRecId,
        WHSShipmentId   _shipmentIdCriteria)
    {
        WHSWorkLine     workLine;

        ttsBegin;

        update_recordSet workLine
            setting OutboundSortPosition = _newSortPositionRecId
            where workLine.OutboundSortPosition == _currentSortPositionRecId
            &&    workLine.ShipmentId           == _shipmentIdCriteria;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoSortTransactionsForShipment</Name>
				<Source><![CDATA[
    private boolean validateNoSortTransactionsForShipment(WHSShipmentId _shipmentId)
    {
        WHSOutboundSortPositionTrans    sortPositionTrans;
        WHSLoadLine                     loadLine;

        select firstOnly RecId from sortPositionTrans
            exists join loadLine
            where loadLine.RecId        == sortPositionTrans.LoadLine
            &&    loadLine.ShipmentId   == _shipmentId;

        return sortPositionTrans.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSOutboundSortingPositionAssignmentUpdater construct()
    {
        return new WHSOutboundSortingPositionAssignmentUpdater();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSortCriteriaToQuery</Name>
				<Source><![CDATA[
    private Query addSortCriteriaToQuery(
        Query                           _query,
        WHSOutboundSortPositionRecId    _sortPostionRecId)
    {
        WHSOutboundSortPositionCriteria sortPositionCriteria;
        SysDictField            dictField;
        QueryBuildRange         qbrCriteria;

        while select sortPositionCriteria
            where sortPositionCriteria.OutboundSortPosition == _sortPostionRecId
        {
            qbrCriteria = _query.dataSourceTable(sortPositionCriteria.GroupTableId).addRange(sortPositionCriteria.GroupFieldId);
            qbrCriteria.value(queryValue(sortPositionCriteria.SortPositionCriteriaValue));
        }

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>