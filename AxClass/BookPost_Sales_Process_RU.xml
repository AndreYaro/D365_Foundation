<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookPost_Sales_Process_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookPost_Sales_Process_RU extends BookPost_Sales_RU implements BatchRetryable
{
    #define.vatProcessKey([tmpProcessLogTransOper.TaxCode,
                           tmpProcessLogTransOper.DefaultDimension,
                           tmpProcessLogTransOper.InventTransId,
                           tmpProcessLogTransOper.RestoringType])
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        #define.ExportVATOnPayment(False)

        boolean                                 ret = true;
        TaxPeriodDate                           localFromDate, localToDate;
        BookStructSmallVATAmounts_RU            usedAmounts, factureSettledAmounts, currentAmounts;
        Map                                     mapFactureSettledAmounts;
        TmpSalesBookVATProcessLogTransOper_RU   prevTmpProcessLogTransOper;
        ;

        setPrefix("@SYS13894");

        while select forupdate tmpProcessLogTrans
            where tmpProcessLogTrans.Marked == NoYes::Yes
        {
            if (transDate < tmpProcessLogTrans.SalesBookTransDate)
            {
                ret = false;
                tmpProcessLogTrans.Error = NoYes::Yes;
                tmpProcessLogTrans.update();
            }
        }

        if ( ! ret)
        {
            error("@GLS104924");
        }

        while select forupdate tmpProcessLogTrans
            where tmpProcessLogTrans.Marked == NoYes::Yes
        {
            setPrefix(strFmt("@GLS111359", tmpProcessLogTrans.AccountNum, tmpProcessLogTrans.FactureExternalId));

            mapFactureSettledAmounts = new Map(Types::Container, Types::Class);
            while select tmpProcessLogTransOper
                where tmpProcessLogTransOper.RefRecId         == tmpProcessLogTrans.RecId &&
                      tmpProcessLogTransOper.LogTableRefRecId == tmpProcessLogTrans.LogTableRefRecId
            {
                [ localFromDate, localToDate ] = BookDataCalc_RU::datePeriodBook(tmpProcessLogTransOper.TransDate);

                if (localToDate == dateNull())
                {
                    error(strFmt("@GLS104905", TaxType_W::VAT, tmpProcessLogTransOper.TransDate));
                    ret = false;
                }
                else
                {
                    if ((transDate < localFromDate) || (transDate > localToDate))
                    {
                        ret = false;
                        tmpProcessLogTrans.Error = NoYes::Yes;
                        tmpProcessLogTrans.update();

                        error(strFmt("@GLS104891", localFromDate, localToDate));
                    }
                }
                mapFactureSettledAmounts.insert(#vatProcessKey, BookStructSmallVATAmounts_RU::create(tmpProcessLogTransOper.SettledAmounts));
            }

            prevTmpProcessLogTransOper.clear();

            select sum(AmountLiableToVAT), sum(TaxAmount) from tmpProcessLogTransOper
                group by TaxCode, DefaultDimension, InventTransId, RestoringType
                where tmpProcessLogTransOper.RefRecId         == tmpProcessLogTrans.RecId       &&
                      tmpProcessLogTransOper.LogTableRefRecId == tmpProcessLogTrans.LogTableRefRecId;

            while (tmpProcessLogTransOper)
            {
                currentAmounts = new BookStructSmallVATAmounts_RU();
                currentAmounts.addAmounts(tmpProcessLogTransOper.AmountLiableToVAT + tmpProcessLogTransOper.TaxAmount,
                                            tmpProcessLogTransOper.AmountLiableToVAT,
                                            tmpProcessLogTransOper.TaxAmount);
                if (#ExportVATOnPayment)
                {
                    usedAmounts = SalesBookVATProcessLogTransOper_RU::usedAmounts(tmpProcessLogTrans.FactureId,
                                                                                  tmpProcessLogTransOper.TaxCode,
                                                                                  tmpProcessLogTransOper.DefaultDimension,
                                                                                  tmpProcessLogTransOper.InventTransId,
                                                                                  tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                  tmpProcessLogTrans.PaymentRecIdRef,
                                                                                  tmpProcessLogTrans.InvoiceCompany,
                                                                                  tmpProcessLogTrans.PaymentCompany,
                                                                                  tmpProcessLogTrans.SettlementRecId,
                                                                                  tmpProcessLogTrans.SettlementDate,
                                                                                  false,
                                                                                  0,
                                                                                  NoYes::No,
                                                                                  tmpProcessLogTransOper.RestoringType);

                    factureSettledAmounts = mapFactureSettledAmounts.lookup(#vatProcessKey);
                    factureSettledAmounts.subAmounts2(usedAmounts);

                    prevTmpProcessLogTransOper.data(tmpProcessLogTransOper);

                    if (! factureSettledAmounts.equal(currentAmounts))
                    {
                        ret = false;
                        tmpProcessLogTrans.Error = NoYes::Yes;
                        tmpProcessLogTrans.update();
                        error("@GLS102588");
                        next tmpProcessLogTransOper;
                        continue;
                    }
                }

                if (tmpProcessLogTrans.Reversed)
                {
                    usedAmounts    = SalesBookVATProcessLogTransOper_RU::usedAmounts(tmpProcessLogTrans.FactureId,
                                                                                     tmpProcessLogTransOper.TaxCode,
                                                                                     tmpProcessLogTransOper.DefaultDimension,
                                                                                     tmpProcessLogTransOper.InventTransId,
                                                                                     tmpProcessLogTrans.InvoiceRecIdRef,
                                                                                     tmpProcessLogTrans.PaymentRecIdRef,
                                                                                     tmpProcessLogTrans.InvoiceCompany,
                                                                                     tmpProcessLogTrans.PaymentCompany,
                                                                                     tmpProcessLogTrans.ReverseSettlementRecId,
                                                                                     tmpProcessLogTrans.ReverseDate,
                                                                                     false,
                                                                                     0,
                                                                                     NoYes::Yes,
                                                                                     tmpProcessLogTransOper.RestoringType);
                    usedAmounts.reverseAmounts();
                    if ( ! usedAmounts.equal(currentAmounts))
                    {
                        ret = false;
                        tmpProcessLogTrans.Error = NoYes::Yes;
                        tmpProcessLogTrans.update();
                        error("@GLS102588");
                    }
                }

               next tmpProcessLogTransOper;
            }
        }

        return ret && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean       ret = super(calledFrom);
        TaxPeriodDate localFromDate, localToDate;
        ;
        if (ret)
        {
            [ localFromDate, localToDate ] = BookDataCalc_RU::datePeriodBook(transDate);

            if ((localFromDate == dateNull()) || (localToDate == dateNull()))
            {
                ret = checkFailed(strFmt("@GLS104896", transDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS113009";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>