<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrContinuityRevenueTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRContinuityRevenueTransfer</c> class moves the money from the revenue account of the continuity parent.
/// </summary>
/// <remarks>
/// All the revenue is posted to the parent when it is invoiced and
/// as the children are invoiced it is incrementally moved to the correct
/// accounts.The assumption is that the parent is setup as an unrecognized revenue.
/// </remarks>
class McrContinuityRevenueTransfer
{
    SalesParmTable salesParmTable;

    MCRLedgerJournal mcrLedgerJournal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>ledgerJournalTrans</c> records using the AX classes.
    /// </summary>
    /// <param name="_mcrContinuityCustLine">
    /// The continuity cust line for which the revenue transfer is occuring.
    /// </param>
    /// <returns>
    /// The created ledger journal transaction record.
    /// </returns>
    private LedgerJournalTrans createLedgerJournalTrans(MCRContinuityCustLine _mcrContinuityCustLine)
    {
        LedgerJournalTransTxt           txt;
        ExchRate                        exchRate;
        LedgerDimensionDefaultAccount   parentAcct, childAcct;

        SalesLine               salesLine_Parent = SalesLine::findInventTransId(_mcrContinuityCustLine.InventTransId);
        SalesLine               salesLine_Child = SalesLine::findInventTransId(_mcrContinuityCustLine.InventTransIDChild);

        AmountCur               debitAmount;
        MainAccount             mainAccount;

        // Get the parent revenue account
        parentAcct = InventPosting::accountItemLedgerDimensionFromParameters(this.buildAccountItemLedgerDimensionParameter(salesLine_Parent));

        // Get the child revenue account
        childAcct = InventPosting::accountItemLedgerDimensionFromParameters(this.buildAccountItemLedgerDimensionParameter(salesLine_Child));

        // If both parent and child accounts are found and are not the same we
        //      can create the journal line.

        if (parentAcct && childAcct && parentAcct != childAcct)
        {
            // Was retrieving the wrong account and passing it to the merge method
            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(parentAcct);
            mcrLedgerJournal.parmLedgerAccountType(LedgerJournalACType::Ledger);
            mcrLedgerJournal.parmLedgerAccount(MCRAssistantLedgerDimension::mergeAccountAndDimension(mainAccount.RecId, salesLine_Parent.DefaultDimension));
            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(childAcct);
            mcrLedgerJournal.parmLedgerOffsetAccountType(LedgerJournalACType::Ledger);
            mcrLedgerJournal.parmledgerOffsetAccount(MCRAssistantLedgerDimension::mergeAccountAndDimension(mainAccount.RecId, salesLine_Child.DefaultDimension));

            mcrLedgerJournal.parmCurrencyCode(salesLine_Child.CurrencyCode);
            mcrLedgerJournal.parmDocumentDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            txt = strFmt("@MCR35748", salesLine_Child.SalesId);
            mcrLedgerJournal.parmTransTxt(txt);

            exchRate = ExchangeRateHelper::getExchangeRate1_Static(
                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                        salesLine_Child.CurrencyCode,
                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            mcrLedgerJournal.parmExchRate(exchRate);

            // The price of the sales line is set to 0 when it's created for bill up front.
            // But the price is saved on the continuity line
            debitAmount = _mcrContinuityCustLine.Price * _mcrContinuityCustLine.SalesQty;

            return mcrLedgerJournal.createLedgerJournalTrans(0, debitAmount);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name = "_salesLine">A sales line record.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(SalesLine _salesLine)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            InventAccountType::SalesRevenue,
            _salesLine.ItemId,
            InventTable::find(_salesLine.ItemId).itemGroupId(),
            0,
            _salesLine.CustAccount,
            _salesLine.CustGroup,
            _salesLine.TaxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the <c>SalesParmTable</c> for use.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The <c>SalesParmTable</c> buffer used to set the parameter.
    /// </param>
    public void new(SalesParmTable _salesParmTable)
    {
        salesParmTable = _salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransfers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the revenue transfers associated with the continuity item.
    /// </summary>
    void processTransfers()
    {
        SalesParmLine               salesParmLine;
        MCRContinuityCustLine       mcrContinuityCustLine;
        MCRContinuityCustHeader     mcrContinuityCustHeader;

        LedgerJournalTrans      ledgerJournalTrans;
        boolean                 lineCreated = false;

        while select ParmId, TableRefId, InventTransId from  salesParmLine
                where salesParmLine.ParmId == salesParmTable.ParmId               // join the current parmTable
                   && salesParmLine.TableRefId == salesParmTable.TableRefId           // join to current parmTable
            join  InventTransId, InventTransIDChild, SalesQty, Price from mcrContinuityCustLine
                where mcrContinuityCustLine.InventTransIDChild == salesParmLine.InventTransId         // join to child sched
                &&    mcrContinuityCustLine.Price > 0
            exists join mcrContinuityCustHeader
                where mcrContinuityCustHeader.InventTransId == mcrContinuityCustLine.InventTransId  // join to parent sched
                &&    mcrContinuityCustHeader.BillUpFront
        {
            // Don't want to run extra validation to determine if a journal table needs to be
            //      created.  So just making sure it only runs once, now that we know it needs to be.
            if (!mcrLedgerJournal)
            {
                mcrLedgerJournal = MCRLedgerJournal::construct(LedgerJournalType::Daily, MCROrderParameters::find().ContinuityRevenueJournal);

                mcrLedgerJournal.createLedgerJournalTable();
            }
            ledgerJournalTrans = this.createLedgerJournalTrans(mcrContinuityCustLine);

            if (ledgerJournalTrans)
            {
                lineCreated = true;
            }
        }

        if (mcrLedgerJournal)
        {
            // But no trans, delete
            if (!lineCreated)
            {
                mcrLedgerJournal.deleteJournal();
            }
            // Otherwise, post
            else
            {
                mcrLedgerJournal.post();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the revenue transfer based on the sales parameters.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The <c>SalesParmTable</c> buffer used process the revenue transfer.
    /// </param>
    public static void transferRevenue(SalesParmTable _salesParmTable)
    {
        MCRContinuityRevenueTransfer mcrContinuityRevenueTransfer;

        if (_salesParmTable
            && isConfigurationkeyEnabled(configurationKeyNum(MCRContinuity)))
        {
            mcrContinuityRevenueTransfer = new MCRContinuityRevenueTransfer(_salesParmTable);
            mcrContinuityRevenueTransfer.processTransfers();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>