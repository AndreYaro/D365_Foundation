<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportXML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for all personified electronic documents.
/// </summary>
abstract class RPayPFReportXML extends RPayPFReport
{
    DialogField                 packageNumField,
                                filePathField;

    Integer                     packageNum;
    FilePath                    filePath;

    XMLDocument                 xmlDoc;
    XMLElement                  xmlLevel_1, xmlLevel_2, xmlLevel_3,
                                xmlLevel_4, xmlLevel_5, xmlLevel_6,
                                xmlLevel_7, xmlLevel_8, xmlLevel_9;

    int                         numInPack;
    int                         maxDocPerFile;

    RPayAmount                  fundAmountIns, fundAmountSto;
    Counter                     emplNo;
    RPayPFSeniorityType         keySpecialSeniority;

    #File

    #define.ProgramName('MICROSOFT DYNAMICS AX')

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        reportType,
        reportYear,
        taxPeriod2010,
        taxPeriod,
        corrReportYear,
        corrTaxPeriod2010,
        corrTaxPeriod,
        packageNum,
        filePath
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendXMLElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends XML element.
    /// </summary>
    /// <param name="_toXmlElement">
    /// XML element to which is added another element.
    /// </param>
    /// <param name="_elementName">
    /// New element name.
    /// </param>
    /// <param name="_elementValue">
    /// New element value. Optional.
    /// </param>
    /// <param name="_attributeMap">
    /// The Map of attributes.
    /// </param>
    /// <returns>
    /// New XML element.
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected XMLElement appendXMLElement(XMLElement _toXmlElement,
                                          str _elementName,
                                          str _elementValue = '',
                                          Map _attributeMap = null)
    {
        XmlNode         xmlElement;
        XMLText         xmlText;
        XmlAttribute    xmlAttribute;
        MapEnumerator   me;

        xmlElement = xmlDoc.createElement(_elementName);

        if (_attributeMap)
        {
            me = _attributeMap.getEnumerator();

            while (me.moveNext())
            {
                xmlAttribute = xmlDoc.createAttribute(me.currentKey());
                xmlAttribute.value(me.currentValue());
                xmlElement.attributes().setNamedItem(xmlAttribute);
            }
        }

        xmlText    = xmlDoc.createTextNode(_elementValue);
        xmlElement.appendChild(xmlText);

        _toXmlElement.appendChild(xmlElement);
        _toXmlElement.appendChild(xmlDoc.createTextNode(#delimiterEnter));

        return xmlElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>descriptionTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines description tag for electronic format.
    /// </summary>
    /// <returns>
    /// Description tag string.
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
abstract protected str descriptionTag()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialogLocal = super();

        dialog.addGroup("@SYS14863");
        packageNumField     = dialog.addFieldValue(extendedTypeStr(Integer), packageNum, "@GLS106156", "@GLS106154");
        filePathField       = dialog.addFieldValue(extendedTypeStr(FilePath), filePath);

        return dialogLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates file name for the electronic document.
    /// </summary>
    /// <returns>
    /// Container with full file name and file name.
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
container fileName()
    {
        FileName            fileName;
        str 5               packNum = num2str0(packageNum, 5);

        fileName = strFmt('PFR-700-Y-%1-ORG-%2-DCK-%3-DPT-000000-DCK-00000.XML',
                          reportYear,
                          companyInfo.PFRegNum_RU,
                          packNum);

        return [filePath + '\\' + fileName, fileName];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills addresses tags for document.
    /// </summary>
    /// <param name="_emplTable">
    /// The record of <c>RHRMEmplTable</c> table.
    /// </param>
    /// <param name="_parentElement">
    /// Parent XML element.
    /// </param>
    /// <param name="_fact">
    /// Determinates if it should be used fact address. Optional.
    /// </param>
    /// <param name="_info">
    /// Determinates if pension address should be used. Optional.
    /// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected void fillAddress(
        RHRMEmplTable   _emplTable,
        XMLElement      _parentElement,
        boolean         _fact = false,
        boolean         _info = false)
    {
        XMLElement                      xmlLevelPlus1, xmlLevelPlus2, xmlLevelPlus3, xmlLevelPlus4;
        container                       addressCon;
        HcmWorker                       hcmWorker = _emplTable.personTable().hcmWorker();
        LogisticsPostalAddressMap       addressMap = DirParty::primaryPostalAddress(hcmWorker.Person);
        LogisticsPostalAddressMap       factAddress;
        LogisticsAddressCountryRegion   country;

        if (_info)
        {
            factAddress = LogisticsPostalAddress::findByLocation(_emplTable.personTable().PensionFundLocation);
        }
        else
        {
            factAddress = _emplTable.personTable().getPostalAddressByRole(LogisticsLocationRoleType::RealAddress_RU);
        }

        xmlLevelPlus1 = _parentElement;

        if (_fact || _info)
        {
            addressCon = RPayPFReportXML::address(factAddress);
            country = LogisticsAddressCountryRegion::find(factAddress.CountryRegionId);
        }
        else
        {
            addressCon = RPayPFReportXML::address(addressMap);
            country = LogisticsAddressCountryRegion::find(addressMap.CountryRegionId);
        }

        if (country.OKSMCode_RU == #OKSMCodeRU)
        {
            xmlLevelPlus2 = this.appendXMLElement(xmlLevelPlus1, 'ТипАдреса',               'РОССИЙСКИЙ');
            xmlLevelPlus2 = this.appendXMLElement(xmlLevelPlus1, 'Индекс',                  _fact ? factAddress.ZipCode : addressMap.ZipCode);
            xmlLevelPlus2 = this.appendXMLElement(xmlLevelPlus1, 'РоссийскийАдрес');
            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'СостояниеАдреса',         'ПРАВИЛЬНЫЙ');

            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'Регион');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'ГеографическоеНазвание',  strupr(conpeek(conpeek(addressCon, 1), 1)));
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Сокращение',              strupr(conpeek(conpeek(addressCon, 1), 2)));

            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'Район');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'ГеографическоеНазвание',  strupr(conpeek(conpeek(addressCon, 2), 1)));
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Сокращение',              strupr(conpeek(conpeek(addressCon, 2), 2)));

            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'Город');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'ГеографическоеНазвание',  strupr(conpeek(conpeek(addressCon, 3), 1)));
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Сокращение',              strupr(conpeek(conpeek(addressCon, 3), 2)));

            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'НаселенныйПункт');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'ГеографическоеНазвание',  strupr(conpeek(conpeek(addressCon, 4), 1)));
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Сокращение',              strupr(conpeek(conpeek(addressCon, 4), 2)));

            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'Улица');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'ГеографическоеНазвание',  strupr(conpeek(conpeek(addressCon, 5), 1)));
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Сокращение',              strupr(conpeek(conpeek(addressCon, 5), 2)));

            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'Дом');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Сокращение',              conpeek(addressCon, 6) ? 'Д' : '');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Номер',                   conpeek(addressCon, 6));

            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'Корпус');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Сокращение',              conpeek(addressCon, 7) ? 'КОР' : '');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Номер',                   strupr(conpeek(addressCon, 7)));

            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'Квартира');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Сокращение',              conpeek(addressCon, 8) ? 'КВ' : '');
            xmlLevelPlus4 = this.appendXMLElement(xmlLevelPlus3, 'Номер',                   conpeek(addressCon, 8));
        }
        else
        {
            xmlLevelPlus2 = this.appendXMLElement(xmlLevelPlus1, 'ТипАдреса',               'ИНОСТРАННЫЙ');
            xmlLevelPlus2 = this.appendXMLElement(xmlLevelPlus1, 'Индекс',                  _fact ? factAddress.ZipCode : addressMap.ZipCode);
            xmlLevelPlus2 = this.appendXMLElement(xmlLevelPlus1, 'ИностранныйАдрес');
            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'КодСтраны',               strupr(country.OKSMCode_RU));
            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'НазваниеСтраны',          strupr(country.displayName()));
            xmlLevelPlus3 = this.appendXMLElement(xmlLevelPlus2, 'Адрес',                   strReplace(strupr(_fact ? factAddress.Address : addressMap.Address), '\n', ' '));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills electronic document's header.
    /// </summary>
    /// <param name="_docType">
    /// Document type.
    /// </param>
    /// <param name="_personCategory">
    /// Personnel category.
    /// </param>
    /// <param name="_seniorityType">
    /// Seniority type. Optional.
    /// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected void fillHeader(str 100               _docType,
                              str 20                _personCategory,
                              RPayPFSeniorityType   _seniorityType  = RPayPFSeniorityType::None)
    {
        Map                 attributeMap;

        numInPack = 1;

        xmlLevel_1 = xmlDoc.documentElement();

            xmlLevel_2 = this.appendXMLElement(xmlLevel_1, 'ИмяФайла', conpeek(this.fileName(), 2));
            xmlLevel_2 = this.appendXMLElement(xmlLevel_1, 'ЗаголовокФайла');

                xmlLevel_3 = this.appendXMLElement(xmlLevel_2, 'ВерсияФормата', '07.00');
                xmlLevel_3 = this.appendXMLElement(xmlLevel_2, 'ТипФайла', 'ВНЕШНИЙ');
                xmlLevel_3 = this.appendXMLElement(xmlLevel_2, 'ПрограммаПодготовкиДанных');

                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НазваниеПрограммы', #ProgramName);
                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'Версия', substr(ApplicationVersion::applBuildNo(), 1, 3));

                xmlLevel_3 = this.appendXMLElement(xmlLevel_2, 'ИсточникДанных', 'СТРАХОВАТЕЛЬ');

            attributeMap = new Map(Types::String, Types::String);
            attributeMap.insert('Окружение',    'В составе файла');
            attributeMap.insert('Стадия',       'До обработки');
            xmlLevel_2 = this.appendXMLElement(xmlLevel_1, 'ПачкаВходящихДокументов',   '', attributeMap);

                xmlLevel_3 = this.appendXMLElement(xmlLevel_2, this.descriptionTag());

                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НомерВпачке',               int2str(numInPack));
                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ТипВходящейОписи',          'ОПИСЬ ПАЧКИ');

                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СоставительПачки');

                        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'НалоговыйНомер');

                            xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'ИНН',       CompanyInfoHelper::partyINN_RU(companyInfo));
                            xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'КПП',       CompanyInfoHelper::partyKPP_RU(companyInfo));

                        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'КодЕГРИП');
                        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'КодЕГРЮЛ',                  CompanyInfoHelper::partyOGRNasOfDate_RU(companyInfo));
                        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Форма',                     strreplace(strreplace(strupr(companyInfo.OrganizationLegalForm_RU), '«', '\''), '»', '\''));
                        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'НаименованиеОрганизации',   strreplace(strreplace(strupr(companyInfo.RFullName), '«', '\''), '»', '\''));
                        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'НаименованиеКраткое',       strreplace(strreplace(strupr(companyInfo.Name), '«', '\''), '»', '\''));
                        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'РегистрационныйНомер',      companyInfo.PFRegNum_RU);

                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'НомерПачки');

                        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Основной',                  int2str(packageNum));

                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'СоставДокументов');

                        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'Количество',                int2str(1));

                        xmlLevel_5 = this.appendXMLElement(xmlLevel_4, 'НаличиеДокументов');

                            xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'ТипДокумента',  _docType);
                            xmlLevel_6 = this.appendXMLElement(xmlLevel_5, 'Количество',    int2str(this.docQty(_docType, _personCategory, _seniorityType)));

                    xmlLevel_4 = this.appendXMLElement(xmlLevel_3, 'ДатаСоставления',           date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, 2, 2, 2, 2, 4, DateFlags::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines form type.
    /// </summary>
    /// <param name="_docType">
    /// Document type.
    /// </param>
    /// <param name="_personCategory">
    /// Personnel category.
    /// </param>
    /// <returns>
    /// Form type.
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected str 20 formType(str 100     _docType,
                              str 20      _personCategory)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            packageNum          = packageNumField.value();
            filePath            = filePathField.value();
        }

        if (payTaxParameters.MaxDocPerFilePFR)
        {
            maxDocPerFile = real2int(RPayRateTable::find(payTaxParameters.MaxDocPerFilePFR).getValue(
                RPayRateCallContext::construct(mkDate(31, 12, reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize parameters for document generation.
    /// </summary>
protected void initParameters()
    {
        super();

        if (payTaxParameters.MaxDocPerFilePFR)
        {
            maxDocPerFile = real2int(RPayRateTable::find(payTaxParameters.MaxDocPerFilePFR).getValue(
                RPayRateCallContext::construct(mkDate(31, 12, reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAddressesEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the fact address and primary address are equal.
    /// </summary>
    /// <param name="_emplTable">
    /// The record of <c>RHRMEmplTable</c> table.
    /// </param>
    /// <returns>
    /// True if addresses are equal; Otherwise false.
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
boolean isAddressesEqual(RHRMEmplTable _emplTable)
    {
        HcmWorker               hcmWorker = _emplTable.personTable().hcmWorker();
        LogisticsPostalAddress  address     = DirParty::primaryPostalAddress(hcmWorker.Person);
        LogisticsPostalAddress  addressFact = RHRMReport_T2::findPostalAddressByRole(
                                                hcmWorker.Person,
                                                LogisticsLocationRoleType::RealAddress_RU);

        return (address.ZipCode              == addressFact.ZipCode             &&
                address.CountryRegionId      == addressFact.CountryRegionId     &&
                address.State                == addressFact.State               &&
                address.County               == addressFact.County              &&
                address.City                 == addressFact.City                &&
                address.District             == addressFact.District            &&
                address.BuildingCompliment   == addressFact.BuildingCompliment  &&
                address.Building_RU          == addressFact.Building_RU         &&
                address.Apartment_RU         == addressFact.Apartment_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if new file should be created.
    /// </summary>
    /// <returns>
    /// True if new file should be created; Otherwise false.
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected boolean isNewFile()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize electronic document.
    /// </summary>
    /// <returns>
    /// True if document initialized; otherwise false;
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected boolean makeDocument()
    {
        xmlDoc = XMLDocument::newXML('<?xml version="1.0" encoding = "windows-1251"?>\n' +
                                     '<ФайлПФР></ФайлПФР>\n', true);

        return (xmlDoc != null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parsePassportNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses passport number.
    /// </summary>
    /// <param name="_emplTable">
    /// Therecord of <c>RHRMEmplTable</c> table.
    /// </param>
    /// <returns>
    /// The container with parsed elements.
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
container parsePassportNumber(RHRMEmplTable _emplTable)
    {
        RHRMPersonTable         rhrmPersonTable = _emplTable.personTable();
        IdentityCardTable_RU    identityCardTable = IdentityCardTable_RU::find(rhrmPersonTable.IdentityCard);
        str 20                  romaSeries, rusSeries, number;
        str 20                  series1, series2;
        int                     pos;
        int                     i;
        str 1                   delimiter;
        str 20                  part1, part2;

        for (i = 1; i <= strlen(identityCardTable.IdentityCardPatternSeries); i ++)
        {
            if (substr(identityCardTable.IdentityCardPatternSeries, i, 1) != 'R' &&
                substr(identityCardTable.IdentityCardPatternSeries, i, 1) != '9' &&
                substr(identityCardTable.IdentityCardPatternSeries, i, 1) != 'Б' &&
                substr(identityCardTable.IdentityCardPatternSeries, i, 1) != 'S')
            {
                pos = i;
                delimiter = substr(identityCardTable.IdentityCardPatternSeries, i, 1);
            }
        }

        if (pos)
        {
            series1 = substr(identityCardTable.IdentityCardPatternSeries, 1, pos - 1);
            series2 = substr(identityCardTable.IdentityCardPatternSeries, pos + 1, 20);

            pos = strfind(rhrmPersonTable.IdentityCardSeries, delimiter, 1, 20);

            part1 = substr(rhrmPersonTable.IdentityCardSeries, 1, pos - 1);
            part2 = substr(rhrmPersonTable.IdentityCardSeries, pos + 1, 20);
        }
        else
        {
            series1 = identityCardTable.IdentityCardPatternSeries;
            part1   = rhrmPersonTable.IdentityCardSeries;
        }

        romaSeries = part1;
        rusSeries = part2;
        number = rhrmPersonTable.IdentityCardNumber;

        return [romaSeries, rusSeries, number];
    }

]]></Source>
			</Method>
			<Method>
				<Name>personCategoryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deterines personnel category name.
    /// </summary>
    /// <param name="_personCategory">
    /// Personnel category code.
    /// </param>
    /// <returns>
    /// Personnel category name
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected str 50 personCategoryName(str 20 _personCategory)
    {
        str 50 personCategoryName;

        switch (_personCategory)
        {
            case #InsuredPersonCatEmployee :
                personCategoryName = #InsuredPersonCatEmployeeName;
                break;

            case #InsuredPersonCatAgriculturalWorker :
                personCategoryName = #InsuredPersonCatAgriculturalWorkerName;
                break;

            case #InsuredPersonCatNaturalPerson :
                personCategoryName = #InsuredPersonCatNaturalPersonName;
                break;

            case #InsuredPersonCatDisabled  :
            case #InsuredPersonCatDisabled1 :

                personCategoryName = #InsuredPersonCatDisabledName;
                break;
        }

        return personCategoryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strPrintable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces symbols coded from 0 to 31 by space.
    /// </summary>
    /// <param name="_sourceStr">
    /// Source string.
    /// </param>
    /// <returns>
    /// Replaced string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str strPrintable(str _sourceStr)
    {
        int     i;

        if (_sourceStr)
        {
            for (i = 0; i <= 31; i++)
            {
                _sourceStr = strReplace(_sourceStr, num2char(i), ' ');
            }
        }

        return _sourceStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass, 1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }

                this.setQueryEmplRange();

                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (packageNum <= 0)
            {
                ret = checkFailed("@RUP3445");
            }

            if (! filePath)
            {
                ret = checkFailed("@RUP3067");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>address</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forms a container with address attributes.
    /// </summary>
    /// <param name="_addressMap">
    /// Source address data.
    /// </param>
    /// <returns>
    /// Container with address attributes
    /// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
static container address(LogisticsPostalAddressMap _addressMap)
    {
        LogisticsAddressZipCode         zipCode;
        LogisticsAddressCountryRegion   country;
        LogisticsAddressState           state;
        LogisticsAddressCounty          county;
        LogisticsAddressCity            city;
        LogisticsAddressDistrict        district;
        LogisticsAddressStreet_RU       street;

        country     = LogisticsAddressCountryRegion::find(_addressMap.CountryRegionId);
        state       = LogisticsAddressState::find(country.CountryRegionId, _addressMap.State);
        county      = LogisticsAddressCounty::find(country.CountryRegionId, state.StateId, _addressMap.County);
        city        = LogisticsAddressCity::findRecId(_addressMap.CityRecId);
        district    = LogisticsAddressDistrict::findRecId(_addressMap.District);
        zipCode     = LogisticsAddressZipCode::findRecId(_addressMap.ZipCodeRecId);
        street      = LogisticsAddressStreet_RU::findRecID(_addressMap.StreetId_RU);

        return [[state.Name,            AddressTypeTable_RU::findByCode(state.propertiesAddrTypeCode_RU(false, '')).AddrTypeName],
                [county.Name,           AddressTypeTable_RU::findByCode(county.propertiesAddrTypeCode_RU(false, '')).AddrTypeName],
                [city.Description,      AddressTypeTable_RU::findByCode(city.propertiesAddrTypeCode_RU(false, '')).AddrTypeName],
                [district.Description,  AddressTypeTable_RU::findByCode(district.propertiesAddrTypeCode_RU(false, '')).AddrTypeName],
                [street.Description,    AddressTypeTable_RU::findByCode(street.propertiesAddrTypeCode(false, '')).AddrTypeName],
                _addressMap.BuildingCompliment,
                _addressMap.Building_RU,
                _addressMap.Apartment_RU];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Constructs an instance of the classes inherited from the <c>RPayPFReport</c> class.
    /// </summary>
    /// <param name="_pensionReportType">
    /// Pension Fund file's form.
    /// </param>
    /// <returns>
    /// An instance of the classes inherited from the <c>RPayPFReport</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If unknown pension fund form met.
    /// </exception>

 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
static RPayPFReport construct(RPayPFReportXMLType _pensionReportType)
    {
        RPayPFReport    rPayPFReport;

        switch (_pensionReportType)
        {
            case RPayPFReportXMLType::ADV1 :
                rPayPFReport = new RPayPFReportXML_ADV1();
                break;

            case RPayPFReportXMLType::SZV6 :
                rPayPFReport = new  RPayPFReportXML_SZV6_2011();
                break;

            case RPayPFReportXMLType::SZV63 :
                rPayPFReport = new RPayPFReportXML_SZV63();
                break;

            case RPayPFReportXMLType::SPV1 :
                rPayPFReport = new RPayPFReportXML_SPV1_2011();
                break;

            case RPayPFReportXMLType::SZV64 :
                rPayPFReport = new RPayPFReportXML_SZV64();
                break;

            case RPayPFReportXMLType::SPV2 :
                rPayPFReport = new RPayPFReportXML_SPV2();
                break;

            default :
                throw error(strFmt("@SYS26908", _pensionReportType));
        }

        return rPayPFReport;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>