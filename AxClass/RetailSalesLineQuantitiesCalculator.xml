<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesLineQuantitiesCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSalesLineQuantitiesCalculator</c> calculates various quantity fields related to a sales line.
/// </summary>
internal class RetailSalesLineQuantitiesCalculator
{
    private SalesLine salesLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>RetailSalesLineQuantitiesCalculator</c>.
    /// </summary>
    /// <param name = "_salesLine">The sales line.</param>
    /// <returns>A new instance of <c>RetailSalesLineQuantitiesCalculator</c>.</returns>
    internal static RetailSalesLineQuantitiesCalculator construct(SalesLine _salesLine)
    {
        return new RetailSalesLineQuantitiesCalculator(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new (SalesLine _salesLine)
    {
        this.salesLine = _salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity remaining on the sales line.
    /// </summary>
    /// <returns>The quantity remaining.</returns>
    internal Qty quantityRemaining()
    {
        return salesLine.RemainSalesPhysical + salesLine.RemainSalesFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryQuantityRemaining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity remaining on the sales line in the inventory unit of measure.
    /// </summary>
    /// <returns>The inventory quantity remaining.</returns>
    internal Qty inventoryQuantityRemaining()
    {
        return salesLine.RemainInventPhysical + salesLine.RemainInventFinancial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity canceled on the sales line.
    /// </summary>
    /// <returns>The quantity canceled.</returns>
    internal Qty quantityCanceled()
    {
        Qty canceledQty = salesLine.SalesQty - salesLine.RemainSalesPhysical - salesLine.invoicedInTotal() - salesLine.RemainSalesFinancial;
       
        return System.Math::Max(canceledQty, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityPickedUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity picked up.
    /// </summary>
    /// <returns>The quantity picked up.</returns>
    internal Qty quantityPickedUp()
    {
        return salesLine.SalesQty - salesLine.RemainSalesPhysical - this.quantityCanceled() - salesLine.RemainSalesFinancial;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>