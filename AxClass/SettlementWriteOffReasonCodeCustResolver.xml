<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffReasonCodeCustResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>SettlementWriteOffReasonCodeCustResolver</c> class resolves reason code and dimension values for settle remainder.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.SettlementWriteOffReasonCodeResolver)),
    ExportMetadata(enumStr(ModuleCustVend), enumLiteralStr(ModuleCustVend, Cust))]
internal final class SettlementWriteOffReasonCodeCustResolver extends SettlementWriteOffReasonCodeResolver
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>openSettlementWriteOffReasonCodes</Name>
				<Source><![CDATA[
    internal void openSettlementWriteOffReasonCodes(ReasonCode _reasonCode, DataAreaId _dataAreaId)
    {
        CustWriteOffFinancialReasonsSetup custWriteOffFinancialReasonsSetup = CustWriteOffFinancialReasonsSetup::findByReasonCode(_reasonCode, _dataAreaId);

        Args args = new Args();
        args.lookupRecord(custWriteOffFinancialReasonsSetup);

        new MenuFunction(menuItemDisplayStr(CustWriteOffFinancialReasonsSetup), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default ledger dimension.
    /// </summary>
    /// <returns>The default account dimension for customer write off.</returns>
    internal LedgerDimensionAccount getDefaultAccount()
    {
        return LedgerDimensionFacade::serviceCreateLedgerDimension(CustParameters::find().SettlementWriteOffLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default reason code.
    /// </summary>
    /// <returns>The reason code.</returns>
    internal ReasonCode getDefaultReasonCode()
    {
        return CustParameters::find().SettlementWriteOffReasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonCodeMainAccountDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account ledger dimension associated with the given reason codefor customers.
    /// </summary>
    /// <param name = "_reasonCode">The reason code.</param>
    /// <returns>The main account ledger dimension for the reason code.</returns>
    internal LedgerDimensionAccount getReasonCodeMainAccountDimension(ReasonCode _reasonCode)
    {
        return CustWriteOffFinancialReasonsSetup::findByReasonCode(_reasonCode).WriteOffLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonCodeDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reason code description.
    /// </summary>
    /// <param name = "_reasonCode">The reason code to get the description from.</param>
    /// <returns>The description of the reason code.</returns>
    internal Description getReasonCodeDescription(ReasonCode _reasonCode)
    {
        return CustWriteOffFinancialReasonsSetup::findByReasonCode(_reasonCode).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// This lookup filters the write-off reason codes.
    /// </summary>
    /// <param name = "_formControl">The control on which to perform the lookup</param>
    /// <param name = "_filterStr">Filter string value</param>
    internal void lookupReasonCode(FormControl _formControl, str _filterStr)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CustWriteOffFinancialReasonsSetup), _formControl, true);

        Query query = new Query();
        query.allowCrossCompany(true);

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(CustWriteOffFinancialReasonsSetup));
        queryBuildDataSource.addRange(fieldNum(CustWriteOffFinancialReasonsSetup, Company)).value(queryValue(curExt()));

        sysTableLookup.addLookupfield(fieldNum(CustWriteOffFinancialReasonsSetup, Reason));
        sysTableLookup.addLookupfield(fieldNum(CustWriteOffFinancialReasonsSetup, Description));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettlementWriteOffDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the settlement write off default ledger dimension with the new main account provided by the updated reason code.
    /// </summary>
    /// <param name = "_reasonCode">The updated reason code.</param>
    /// <param name = "_reasonCodeNewMainAccount">The new account to use for the ledger dimension.</param>
    /// <param name = "_companyId">The company to update the default dimension for.</param>
    internal void updateSettlementWriteOffDefaultAccount(ReasonCode _reasonCode, LedgerDimensionAccount _reasonCodeNewMainAccount, CompanyId _companyId = curExt())
    {
        changecompany (_companyId)
        {
            CustParameters custParameters = CustParameters::find(true);

            // If the updated reason code is in use for settlement write off, propagate forward the new reason code main account.
            if (custParameters.SettlementWriteOffReasonCode == _reasonCode)
            {
                LedgerDimensionAccount mergedAccount = this.applyDimensionsToMainAccount(
                    custParameters.SettlementWriteOffLedgerDimension,
                    _reasonCodeNewMainAccount);

                if (this.isAccountValid(mergedAccount))
                {
                    ttsbegin;
                    custParameters.SettlementWriteOffLedgerDimension = mergedAccount;
                    custParameters.update();
                    ttscommit;
                }
                else
                {
                    MainAccount account = LedgerDimensionFacade::getMainAccountFromLedgerDimension(mergedAccount);
                    warning(strFmt("@CashManagement:SettlementWriteOffUpdateDefaultAccountMergeNotValid",
                        account.localizedName(),
                        "@SYS76213",
                        "@SYS10163",
                        "@CashManagement:SettlementWriteOffDefaultAccount"));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>