<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeInterCompany</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TradeInterCompany
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    protected Common buffer()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyId</Name>
				<Source><![CDATA[
    protected CompanyId companyId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    public void formRun(FormName  _formName, Object _caller = null)
    {
        Args            args;
        FormRun         formRun;
        FormDataSource  dataSource;

        if (! TradeInterCompany::checkDataAreaAccess(this.companyId()))
        {
            return;
        }

        changeCompany(this.companyId())
        {
            args = new Args();
            args.record(this.interCompanyRecord());
            args.caller(_caller ? _caller : this);
            args.name(_formName);
            if (this.menuItemName())
            {
                args.menuItemName(this.menuItemName());
            }

            formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();
        }

        if (FormDataUtil::getFormDataSource(this.buffer()))
        {
            dataSource = FormDataUtil::getFormDataSource(this.buffer());
            dataSource.reread();
            dataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyRecord</Name>
				<Source><![CDATA[
    public Common interCompanyRecord()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryForSelectAndProcessInventSumForCurCompany</Name>
				<Source><![CDATA[
    public static Query initQueryForSelectAndProcessInventSumForCurCompany(ItemId _itemId, boolean _joinInventDim = false)
    {
        Query q;
        QueryBuildDataSource sumQbds, dimQbds;
        QueryBuildRange qbr;

        q = new Query();
        sumQbds = q.addDataSource(tableNum(InventSum));
        sumQbds.addRange(fieldNum(InventSum, ItemId)).value(_itemId);

        if (_joinInventDim)
        {
            dimQbds = sumQbds.addDataSource(tableNum(InventDim));
            dimQbds.addLink(fieldNum(InventSum, InventDimId), fieldNum(InventDim, InventDimId));
            dimQbds.joinMode(JoinMode::InnerJoin);
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuFunction</Name>
				<Source><![CDATA[
    public void menuFunction(MenuItemName _menuItemName, MenuItemType _menuItemType, Object _caller = null)
    {
        Args            args;
        MenuFunction    menuFunction;
        FormDataSource  dataSource;

        if (! TradeInterCompany::checkDataAreaAccess(this.companyId()))
        {
            return;
        }

        changeCompany(this.companyId())
        {
            args = new Args();
            args.record(this.interCompanyRecord());
            args.caller(_caller ? _caller : this);
            args.name(_menuItemName);
            if (this.menuItemName())
            {
                args.menuItemName(this.menuItemName());
            }
            menuFunction = new MenuFunction(_menuItemName,_menuItemType);
            if (_menuItemType == MenuItemType::Display)
            {
               FormRun formRun = menuFunction.create(args) as FormRun;
               formRun.run();
               formRun.wait();
            }
            else
            {
                menuFunction.run(args);
            }
        }

        dataSource = FormDataUtil::getFormDataSource(this.buffer());
        if (dataSource)
        {
            dataSource.reread();
            dataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the menu item name for the menu item that will be used for opening the intercompany form.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method is used for making it possible to generate the correct filter for agreements
    /// and when opening a referenced form from the Sales table references form.
    /// </remarks>
    protected MenuItemName menuItemName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common  _buffer)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the reference form for the reference record.
    /// </summary>
    /// <remarks>
    /// This method is used for open purchase orders in the same legal entity as the original sale
    /// order.Also, for open original sales order from the intercompany purchase order.
    /// </remarks>
    public void referenceForm()
    {
        MenuFunction    menuFunction;
        Args            args;

        if (this.referenceMenuItemName())
        {
            args = new Args();
            args.record(this.referenceSalesPurchTableRecord());

            menuFunction = new MenuFunction(this.referenceMenuItemName(),MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the menu item name for displaying the reference order.
    /// </summary>
    /// <returns>
    /// The menu item name for displaying the reference order.
    /// </returns>
    /// <remarks>
    /// This method is used for open purchase order in the same legal entity as the original sale
    /// order.Also, for open original sales order from the intercompany purchase order.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The derived classes must be overridden to return the correct reference menu item name.
    /// </exception>
    protected IdentifierName referenceMenuItemName()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceSalesPurchTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a reference <c>SalesPurchTable</c> record.
    /// </summary>
    /// <returns>
    /// A reference <c>SalesPurchTable</c> record.
    /// </returns>
    /// <remarks>
    /// This method is used for open purchase order in the same legal entity as the original sale
    /// order.Also, for open original sales order from the intercompany purchase order.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The derived classes must be overridden to return the correct <c>SalesPurchTable</c> record.
    /// </exception>
    protected SalesPurchTable referenceSalesPurchTableRecord()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoCreateOrder</Name>
				<Source><![CDATA[
    public static void autoCreateOrder(Common _common)
    {
        PurchCreateFromSalesOrder   purchCreate;
        SalesTable                  salesTable;
        SalesLine                   salesLine;

        if (_common.TableId == tableNum(SalesTable)
        ||  _common.TableId == tableNum(SalesLine))
        {
            using (var activityContext = TradeIntercompany::instrumentationLogger().interCompanyActivities().autoCreateOrder(_common))
            {
                if (_common.TableId == tableNum(SalesTable))
                {
                    salesTable = _common as SalesTable;
                }
                else if (_common.TableId == tableNum(SalesLine))
                {
                    salesLine  = _common as SalesLine;
                    salesTable = salesLine.salesTable();
                }
                purchCreate = PurchCreateFromSalesOrder::newPurchCreateFromSalesOrder(salesTable.InterCompanyDirectDelivery ? TradeLineDlvType::DropShip : TradeLineDlvType::None);
                purchCreate.parmSalesTable(salesTable);
                purchCreate.parmSalesLine(salesLine);
                purchCreate.parmCallerRecord(_common);
                purchCreate.parmInsertMinMaxQty(false);
                purchCreate.parmTransferAddress(salesTable.InterCompanyDirectDelivery);

                purchCreate.parmSearchForAgreements(PurchParameters::find().IntercompanyAgreementAutoSearch);

                if (purchCreate.interCompanyCreateTmpFrmVirtual())
                {
                    purchCreate.runOperation();

                    // source record is updated and saved in DB while creating intercompany chain records
                    // without updating passed local buffer therefore local buffer gets out of sync with
                    // the one in DB and needs to be reread.
                    _common.reread();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryAutoCreateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tries to automatically create the intercompany chain for a <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record to create the chain from.</param>
    /// <returns>true if the intercompany chain has been created; false otherwise</returns>
    public static boolean tryAutoCreateLine(SalesLine _salesLine)
    {
        boolean ok = false;

        if (_salesLine.RecId == SysTransactionScopeCache::get(funcName(), '', 0))
        {
            throw error(strFmt("@SYS19306", funcName())); // Stop recursion to prevent AOS crash.
        }
        else
        {
            SysTransactionScopeCache::set(funcName(), '', _salesLine.RecId);
        }

        using (var activityContext = TradeIntercompany::instrumentationLogger().interCompanyActivities().tryAutoCreateLine(_salesLine))
        {
            SalesTable salesTable = _salesLine.salesTable();
            PurchCreateFromSalesOrder purchCreate = PurchCreateFromSalesOrder::newPurchCreateFromSalesOrder(_salesLine.DeliveryType);
            purchCreate.parmSalesTable(salesTable);
            purchCreate.parmSalesLine(_salesLine);
            purchCreate.parmCallerRecord(_salesLine);
            purchCreate.parmInsertMinMaxQty(false);
            purchCreate.parmTransferAddress(_salesLine.DeliveryType == TradeLineDlvType::DropShip);
            purchCreate.parmSearchForAgreements(PurchParameters::find().IntercompanyAgreementAutoSearch);

            if (purchCreate.intercompanyCreateTmpFromLine(_salesLine, salesTable))
            {
                purchCreate.runOperation();
                _salesLine.reread();

                ok = (_salesLine.InventRefType == InventRefType::Purch && _salesLine.InventRefTransId);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDataAreaAccess</Name>
				<Source><![CDATA[
    static public boolean checkDataAreaAccess(DataAreaId  _interCompanyId, boolean _showWarning = true)
    {
        boolean         ok = true;
        xApplication    xAppl       = new xApplication();
        DataAreaId      curDataArea = curext();

        if (!xAppl.setDefaultCompany(_interCompanyId))
        {
            if (_showWarning)
            {
                ok = checkFailed("@SYS60293");
            }
            else
            {
                ok = false;
            }
        }

        xAppl.setDefaultCompany(curDataArea);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public TradeInterCompany  construct(Common _buffer, boolean _originalSales = false)
    {
        switch (_buffer.TableId)
        {
            case tableNum(SalesTable)   :
                return TradeInterCompany_SalesTable::construct(_buffer as SalesTable, _originalSales);
            case tableNum(SalesLine)    :
                return TradeInterCompany_SalesLine::construct(_buffer as SalesLine);
            case tableNum(PurchTable)   :
                return TradeInterCompany_PurchTable::construct(_buffer as PurchTable, _originalSales);
            case tableNum(PurchLine)    :
                return TradeInterCompany_PurchLine::construct(_buffer as PurchLine);
            case tableNum(PurchAgreementHeader)    :
                return TradeIntercompany_PurchAgreement::construct(_buffer as PurchAgreementHeader);
            case tableNum(SalesAgreementHeader)    :
                return TradeIntercompany_SalesAgreement::construct(_buffer as SalesAgreementHeader);
            default :
                throw error(strFmt("@SYS19306", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpInventSumWithNoWHSCalculations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary tables with the on-hand for the item. For performance reasons the WHS related calculations are not done and will have to be done later, e.g. in the form where the data is displayed.
    /// </summary>
    /// <param name = "_tmpInventSum">The <c>InterCompanyInventSum</c> sum table that will contain the result.</param>
    /// <param name = "_tmpInventDim">The <c>InterCompanyInventDim</c> buffer that will contain the dimensions.</param>
    /// <param name = "_itemId">The item ID.</param>
    public static void createTmpInventSumWithNoWHSCalculations(
        InterCompanyInventSum   _tmpInventSum,
        InterCompanyInventDim   _tmpInventDim,
        ItemId                  _itemId)
    {
        TradeInterCompany::createTmpInventSum(_tmpInventSum, _itemId, null, _tmpInventDim, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpInventSum</Name>
				<Source><![CDATA[
    public static void createTmpInventSum( 
        InterCompanyInventSum   _tmpInventSum,
        ItemId                  _itemId,
        InterCompanyInventDim   _inventDim,
        InterCompanyInventDim   _tmpInventDim,
        boolean                 _doWHSOnHandCalculation = true)
    {
        Set                         companySet;
        SetEnumerator               setEnumerator;
        DataAreaId                  companyId;

        InventTable                 inventTable;
        InventTable                 inventTableOtherCompany;

        UnitOfMeasureSymbol         unitOfMeasureSymbol;
        UnitOfMeasureSymbol         unitOfMeasureSymbolOtherCompany;
        UnitOfMeasureRecId          unitOfMeasureRecId;
        UnitOfMeasureRecId          unitOfMeasureRecIdOtherCompany;

        CurrencyCode                currencyCode;
        CurrencyCode                currencyCodeOtherCompany;
        ExchRate                    exchRate;

        boolean                     unitOfMeasureConversionRequired;
        @SessionId                  session = new xSession().sessionId();

        InterCompanyInventDim       tmpInventDimOrigin = _tmpInventDim.data();

        setPrefix(strFmt("@SYS93875",_itemId));

        inventTable = InventTable::find(_itemId);

        if (inventTable.interCompanyBlockedSales())
        {
            throw error(strFmt("@SYS74812", inventTable.ItemId));
        }

        InterCompanyInventDim::deleteSession(session);
        InterCompanyInventSum::deleteSession(session);

        companySet = InterCompanyCompany::interCompanyRelatedCompanies();
        setEnumerator = companySet.getEnumerator();

        currencyCode        = Ledger::accountingCurrency();
        unitOfMeasureSymbol = inventTable.inventTableModuleInvent().UnitId;
        unitOfMeasureRecId  = UnitOfMeasure::findBySymbol(unitOfMeasureSymbol).RecId;

        InventParameters inventParameters = InventParameters::find();

        while (setEnumerator.moveNext())
        {
            companyId = setEnumerator.current();

            currencyCodeOtherCompany = Ledger::accountingCurrency(CompanyInfo::findDataArea(companyId).RecId);
            if (currencyCodeOtherCompany != currencyCode)
            {
                exchRate = ExchangeRateHelper::exchRate(currencyCodeOtherCompany) / 100;
            }
            else
            {
                exchRate = 1;
            }

            changecompany (companyId)
            {
                setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                inventTableOtherCompany = InventTable::findByProduct(inventTable.Product);
                if (inventTableOtherCompany)
                { // Will not have a record in InventTable if the product hasn't been released yet
                    unitOfMeasureSymbolOtherCompany = inventTableOtherCompany.inventTableModuleInvent().UnitId;
                    unitOfMeasureRecIdOtherCompany = UnitOfMeasure::findBySymbol(unitOfMeasureSymbolOtherCompany).RecId;

                    unitOfMeasureConversionRequired = unitOfMeasureRecIdOtherCompany != unitOfMeasureRecId && unitOfMeasureRecId != 0 && unitOfMeasureRecIdOtherCompany != 0;
                    
                    EcoResProductUnitConverter productUnitOfMeasureConverter;
                    if (unitOfMeasureConversionRequired)
                    {
                        // Find the InventDim from InterCompanyInventDim
                        InventDim localInventDim = TradeInterCompany::initProductDimensionFromInterCompanyInventDim(_tmpInventDim);
                        if (EcoResProductUnitConverter::hasRequiredProductDimensionsForUnitConversion(_itemId, localInventDim))
                        {
                            productUnitOfMeasureConverter = EcoResProductUnitConverter::newForReleasedProduct(
                                _itemId,
                                localInventDim.InventDimId,
                                unitOfMeasureRecIdOtherCompany,
                                unitOfMeasureRecId);
                        }
                    }

                    try
                    {
                        boolean includeWHSOnHand = (_doWHSOnHandCalculation && WHSInventEnabled::exist(inventTableOtherCompany.ItemId));
                        
                        TradeInterCompanyInventSumParameters tradeInterCompanyInventSumParameters = TradeInterCompanyInventSumParameters::construct();
                        tradeInterCompanyInventSumParameters.parmInterCompanyInventSum(_tmpInventSum);
                        tradeInterCompanyInventSumParameters.parmInterCompanyInventDim(_tmpInventDim);
                        tradeInterCompanyInventSumParameters.parmItemId(_itemId);
                        tradeInterCompanyInventSumParameters.parmUnitOfMeasureConversionRequired(unitOfMeasureConversionRequired);
                        tradeInterCompanyInventSumParameters.parmEcoResProductUnitConverter(productUnitOfMeasureConverter);
                        tradeInterCompanyInventSumParameters.parmExchRate(exchRate);
                        tradeInterCompanyInventSumParameters.parmSessionId(session);
                        tradeInterCompanyInventSumParameters.parmOtherCompanyItemId(inventTableOtherCompany.ItemId);
                        tradeInterCompanyInventSumParameters.parmIntercompanyOnhandSkipClosedQty(inventParameters.IntercompanyOnhandSkipClosedQty);

                        if (InventOnhandInterCompanyFilterByProdDimToggle::instance().isEnabled())
                        {
                            tradeInterCompanyInventSumParameters.parmInterCompanyInventDimOrigin(tmpInventDimOrigin);
                        }

                        if (includeWHSOnHand)
                        {
                            TradeInterCompany::selectAndProcessInventSumForCrossCompanyWHS(tradeInterCompanyInventSumParameters);
                        }
                        else
                        {
                            TradeInterCompany::selectAndProcessInventSumForCrossCompany(tradeInterCompanyInventSumParameters);
                        }
                    }
                    catch (Exception::Error)
                    {
                        infolog.clear(0);
                        continue;
                    }
                }
            }
        }

        //  Here we take the quantities from the current company
        // Only add if not already added.
        if (!companySet.in(curext()))
        {
            TradeInterCompany::selectAndProcessInventSumForCurCompany(_tmpInventSum, _tmpInventDim, _itemId, session, _doWHSOnHandCalculation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimensionFromInterCompanyInventDim</Name>
				<Source><![CDATA[
    private static InventDim initProductDimensionFromInterCompanyInventDim(InterCompanyInventDim _interCompanyInventDim)
    {
        InventDim       tmpInventDim;
        ListEnumerator  enumerator  = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
        FieldId         dimFieldId;

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _interCompanyInventDim.checkInvalidFieldAccess(false);

        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();
            tmpInventDim.(dimFieldId) = _interCompanyInventDim.(dimFieldId);
        }

        return InventDim::findDim(tmpInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>curCompanyName</Name>
				<Source><![CDATA[
    static public Name curCompanyName(DataAreaId _dataAreaId = curext())
    {
        DataArea    dataArea;

        select firstonly Name from dataArea
               where dataArea.Id == _dataAreaId;

        return dataArea.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInterCompanyInventDimWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Building where clause from the inter-company line transaction and invent transaction.
    /// </summary>
    /// <param name = "_inventDim">The invent dimension table buffer.</param>
    /// <param name = "_tmpInventDim">The inter-company table buffer.</param>
    /// <param name = "_sessionId">The current session ID.</param>
    /// <returns>The query object of where clause.</returns>
    protected static SysDaQueryExpression buildInterCompanyInventDimWhereClause(InventDim _inventDim, InterCompanyInventDim  _tmpInventDim, @SessionId _sessionId)
    {
        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, FieldStr(InterCompanyInventDim, InterCompanyCompanyId)), new SysDaValueExpression(curExt()))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, SessionId)), new SysDaValueExpression(_sessionId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, ConfigId)), new SysDaValueExpression(_inventDim.ConfigId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventSizeId)), new SysDaValueExpression(_inventDim.InventSizeId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventColorId)), new SysDaValueExpression(_inventDim.InventColorId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventStyleId)), new SysDaValueExpression(_inventDim.InventStyleId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventVersionId)), new SysDaValueExpression(_inventDim.InventVersionId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventLocationId)), new SysDaValueExpression(_inventDim.InventLocationId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventBatchId)), new SysDaValueExpression(_inventDim.InventBatchId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, wmsLocationId)), new SysDaValueExpression(_inventDim.wmsLocationId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, wmsPalletId)),      new SysDaValueExpression(_inventDim.wmsPalletId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventSerialId)),   new SysDaValueExpression(_inventDim.inventSerialId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, LicensePlateId)),   new SysDaValueExpression(_inventDim.LicensePlateId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventStatusId)),   new SysDaValueExpression(_inventDim.InventStatusId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventSiteId)),     new SysDaValueExpression(_inventDim.InventSiteId)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension1)), new SysDaValueExpression(_inventDim.InventDimension1)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension2)), new SysDaValueExpression(_inventDim.InventDimension2)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension3)), new SysDaValueExpression(_inventDim.InventDimension3)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension4)), new SysDaValueExpression(_inventDim.InventDimension4)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension5)), new SysDaValueExpression(_inventDim.InventDimension5)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension6)), new SysDaValueExpression(_inventDim.InventDimension6)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension7)), new SysDaValueExpression(_inventDim.InventDimension7)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension8)), new SysDaValueExpression(_inventDim.InventDimension8)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension9)), new SysDaValueExpression(_inventDim.inventdimension9)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension10)),new SysDaValueExpression(_inventDim.InventDimension10)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension11)),new SysDaValueExpression(_inventDim.InventDimension11)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventDimension12)),new SysDaValueExpression(_inventDim.InventDimension12)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventGTDId_RU)),   new SysDaValueExpression(_inventDim.InventGtdId_RU)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventProfileId_RU)),new SysDaValueExpression(_inventDim.InventProfileId_RU)))
                                                .and(new SysDaEqualsExpression(
                                                    new SysDaFieldExpression(_tmpInventDim, fieldStr(InterCompanyInventDim, InventOwnerId_RU)), new SysDaValueExpression(_inventDim.InventOwnerId_RU)));

        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInterCompanyInventDim</Name>
				<Source><![CDATA[
    private static void insertInterCompanyInventDim(
        InventDim               _inventDim,
        InterCompanyInventDim   _tmpInventDim,
        @SessionId              _sessionId)
    {
        #InventDimDevelop

        SysDaQueryObject queryobject = new SysDaQueryObject(_tmpInventDim);

        queryobject.firstOnlyHint = SysDaFirstOnlyHint::FirstOnly1;
        queryobject.whereClause(TradeInterCompany::buildInterCompanyInventDimWhereClause(_inventDim, _tmpInventDim, _sessionId));

        SysDaFindObject findObject = new SysDaFindObject(queryobject);
        new SysDaFindStatement().execute(findObject);

        if (TradeInterCompany::mustInsertInterCompanyInventDim(_inventDim, _tmpInventDim))
        {
            _tmpInventDim.clear();
            _tmpInventDim.fromInventDim(_inventDim);
            _tmpInventDim.SessionId   = _sessionId;
            _tmpInventDim.InventDimId = _inventDim.InventDimId;
            _tmpInventDim.InterCompanyCompanyId = curExt();

            _tmpInventDim.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertInterCompanyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>InterCompanyInventDim</c> record must be inserted.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> record from which to initialize the <c>InterCompanyInventDim</c> record.</param>
    /// <param name = "_tmpInventDim">The <c>InterCompanyInventDim</c> record to be inserted.</param>
    /// <returns>true if the <c>InterCompanyInventDim</c> record must be inserted; otherwise, false.</returns>
    protected static boolean mustInsertInterCompanyInventDim(
        InventDim               _inventDim,
        InterCompanyInventDim   _tmpInventDim)
    {
        return !_tmpInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInterCompanyInventSum</Name>
				<Source><![CDATA[
    private static void insertInterCompanyInventSum(
        InterCompanyInventSum   _tmpInventSum,
        InterCompanyInventDim   _tmpInventDim,
        InventSum               _inventSum,
        @SessionId              _sessionId,
        ItemId                  _itemId = '')
    {
        _tmpInventSum.fromInventSum(_inventSum);
        _tmpInventSum.SessionId              = _sessionId;
        _tmpInventSum.ItemId                 = _itemId;
        _tmpInventSum.InterCompanyCompanyId  = _inventSum.DataAreaId;
        _tmpInventSum.InventDimId            = _tmpInventDim.InventDimId;
        _tmpInventSum.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Finds and returns a <c>InventTable</c> record relating to a buffer.
    /// </summary>
    /// <param name="_buffer">
    ///   The buffer from which to find and return the <c>InventTable</c> record for.
    /// </param>
    /// <returns>
    ///   Found <c>InventTable</c> record.
    /// </returns>
    static public InventTable  inventTable(Common  _buffer)
    {
        InventTable     inventTable;
        FieldId         itemFieldId;

        itemFieldId = fieldName2id(_buffer.TableId, fieldStr(InventTable, ItemId));

        if (itemFieldId)
        {
            inventTable = InventTable::find(_buffer.(itemFieldId));
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether marking is allowed for the intercompany line.
    /// </summary>
    /// <param name="_common">
    /// The intercompany line to check.
    /// </param>
    /// <returns>
    /// true if marking is allowed; otherwise, false;
    /// </returns>
    public static boolean markingAllowed(Common    _common)
    {
        boolean             ret = true;
        InventTrans         inventTrans;
        PurchLine           purchLine;
        SalesLine           salesLine;
        InventTransOrigin   inventTransOrigin;

        void checkPurchLine(PurchLine _purchLine)
        {
            if (_purchLine.ItemRefType == InventRefType::Sales
            &&  _purchLine.InventRefId
            &&  _purchLine.InterCompanyInventTransId)
            {
                ret = false;
            }
        }
        void checkSalesLine(SalesLine _salesLine)
        {
            purchLine = PurchLine::findInventTransId(_salesLine.InventRefTransId);
            PurchTable purchTable = purchTable::find(purchLine.PurchId);
            if (purchLine.InterCompanyInventTransId && (purchTable.InterCompanySalesId == _salesLine.SalesId || purchTable.InterCompanyOriginalSalesId == _salesLine.SalesId))
            {
                ret = false;
            }
        }

        switch (_common.TableId)
        {
            case tableNum(InventTrans):
                inventTrans = _common as InventTrans;
                inventTransOrigin = inventTrans.inventTransOrigin();
            case tableNum(InventTransOrigin):
                if (!inventTransOrigin)
                {
                    inventTransOrigin = _common as InventTransOrigin;
                }

                switch (inventTransOrigin.ReferenceCategory)
                {
                    case InventTransType::Purch :
                        purchLine = InventTransOriginPurchLine::purchLine(inventTransOrigin.RecId);
                        checkPurchLine(purchLine);
                        break;
                    case InventTransType::Sales :
                        salesLine = InventTransOriginSalesLine::salesLine(inventTransOrigin.RecId);
                        checkSalesLine(salesLine);
                        break;
                }
                break;

            case tableNum(PurchLine):
                purchLine = _common as PurchLine;
                checkPurchLine(purchLine);
                break;

            case tableNum(SalesLine):
                salesLine = _common as SalesLine;
                checkSalesLine(salesLine);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventDimAndInventSumForCrossCompany</Name>
				<Source><![CDATA[
    private static void processInventDimAndInventSumForCrossCompany(
        TradeInterCompanyInventSumParameters    _tradeInterCompanyInventSumParameters,
        InventDim                               _inventDim,
        InventSum                               _inventSum)
    {
        using (var activityContext = TradeIntercompany::instrumentationLogger().interCompanyActivities().processInventDimAndInventSumForCrossCompany(_inventDim))
        {
            InventSum                   inventSumTemp;

            TradeInterCompany::insertInterCompanyInventDim(
                _inventDim,
                _tradeInterCompanyInventSumParameters.parmInterCompanyInventDim(),
                _tradeInterCompanyInventSumParameters.parmSessionId());

            inventSumTemp.data(_inventSum.data());

            EcoResProductUnitConverter productUnitConverter = _tradeInterCompanyInventSumParameters.parmEcoResProductUnitConverter();
            if (productUnitConverter && _tradeInterCompanyInventSumParameters.parmUnitOfMeasureConversionRequired())
            {
                inventSumTemp.PostedQty           = productUnitConverter.convertValue(inventSumTemp.PostedQty);
                inventSumTemp.Deducted            = productUnitConverter.convertValue(inventSumTemp.Deducted);
                inventSumTemp.Received            = productUnitConverter.convertValue(inventSumTemp.Received);
                inventSumTemp.ReservPhysical      = productUnitConverter.convertValue(inventSumTemp.ReservPhysical);
                inventSumTemp.ReservOrdered       = productUnitConverter.convertValue(inventSumTemp.ReservOrdered);
                inventSumTemp.OnOrder             = productUnitConverter.convertValue(inventSumTemp.OnOrder);
                inventSumTemp.Ordered             = productUnitConverter.convertValue(inventSumTemp.Ordered);
                inventSumTemp.QuotationIssue      = productUnitConverter.convertValue(inventSumTemp.QuotationIssue);
                inventSumTemp.QuotationReceipt    = productUnitConverter.convertValue(inventSumTemp.QuotationReceipt);
                inventSumTemp.Registered          = productUnitConverter.convertValue(inventSumTemp.Registered);
                inventSumTemp.Picked              = productUnitConverter.convertValue(inventSumTemp.Picked);
                inventSumTemp.AvailOrdered        = productUnitConverter.convertValue(inventSumTemp.AvailOrdered);
                inventSumTemp.AvailPhysical       = productUnitConverter.convertValue(inventSumTemp.AvailPhysical);
                inventSumTemp.Arrived             = productUnitConverter.convertValue(inventSumTemp.Arrived);
                inventSumTemp.PhysicalInvent      = productUnitConverter.convertValue(inventSumTemp.PhysicalInvent);
            }

            inventSumTemp.PostedValue         = _tradeInterCompanyInventSumParameters.parmExchRate() * inventSumTemp.PostedValue;
            inventSumTemp.PhysicalValue       = _tradeInterCompanyInventSumParameters.parmExchRate() * inventSumTemp.PhysicalValue;

            TradeInterCompany::insertInterCompanyInventSum(
                _tradeInterCompanyInventSumParameters.parmInterCompanyInventSum(),
                _tradeInterCompanyInventSumParameters.parmInterCompanyInventDim(),
                inventSumTemp,
                _tradeInterCompanyInventSumParameters.parmSessionId(),
                _tradeInterCompanyInventSumParameters.parmItemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes marking for the intercompany lines.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record from which to remove marking.
    /// </param>
    /// <param name="_formRun">
    /// The <c>FormRun</c> object that calls the <c>removeMarking</c> method.
    /// </param>
    public static void removeMarking(SalesLine  _salesLine, Object _formRun)
    {
        using (var activityContext = TradeIntercompany::instrumentationLogger().interCompanyActivities().removeMarking(_salesLine))
        {
            ttsbegin;
            SalesTable salesTable = _salesLine.salesTable(true);
            PurchTable purchTable = PurchTable::find(_salesLine.InventRefId,true);

            InventTrans     inventTrans;
            boolean         inventTransFound;
            InventMovement  movement = InventMovement::construct(_salesLine);

            while select forupdate inventTrans
                where inventTrans.InventTransOrigin             == movement.inventTransOriginId()
                  &&    inventTrans.TransChildType              == movement.transChildType()
                  &&    inventTrans.TransChildRefId             == movement.transChildRefId()
                  &&    inventTrans.StatusReceipt               == StatusReceipt::None
                  &&    inventTrans.StatusIssue                 >  StatusIssue::None
                  &&    inventTrans.MarkingRefInventTransOrigin
            {
                inventTransFound = true;

                if (inventTrans.MarkingRefInventTransOrigin)
                {
                    InventTransOrigin::deleteMarking(inventTrans.MarkingRefInventTransOrigin, inventTrans.InventTransOrigin, -inventTrans.Qty,true,null,null,false,true);
                    inventTrans.clearMarking();
                }

                if (inventTrans.StatusIssue >= StatusIssue::ReservPhysical)
                {
                    inventTrans.StatusIssue = StatusIssue::OnOrder;
                }
                inventTrans.update();

                if (movement.markingRefInventTransOrigin())
                {
                    movement.clearInventRefFields();
                }
            }

            PurchLine purchLine = PurchLine::findInventTransId(_salesLine.InventRefTransId,true);
            if (purchLine)
            {
                purchLine.clearInventReference();
                purchLine.InterCompanyOrigin = InterCompanyOrigin::Source;
                purchLine.update();
            }

            if (!inventTransFound)
            {
                SalesLine salesLine = SalesLine::findInventTransId(_salesLine.InventTransId,true);
                if (salesLine)
                {
                    salesLine.SkipUpdate = InterCompanySkipUpdate::Both;
                    salesLine.clearInventReference();
                    salesLine.clearSourcingFields();
                    salesLine.update();
                }
            }

            if (purchTable)
            {
                select firstonly purchLine
                       index hint PurchLineIdx
                       where purchLine.PurchId     == purchTable.PurchId
                       &&    purchLine.ItemRefType == InventRefType::Sales
                       &&    purchLine.InventRefId == salesTable.SalesId
                       &&   !purchLine.IsDeleted;
                if (!purchLine)
                {
                    InterCompanyPurchSalesReference interCompanyPurchSalesReference;
                    
                    delete_from interCompanyPurchSalesReference
                           index hint SalesPurchIdx
                           where interCompanyPurchSalesReference.SalesId == salesTable.SalesId
                           &&    interCompanyPurchSalesReference.PurchId == purchTable.PurchId;

                    purchTable.InterCompanyOriginalSalesId     = '';
                    purchTable.InterCompanyOriginalCustAccount = '';
                    purchTable.InterCompanyOrigin = InterCompanyOrigin::Source;
                    purchTable.update();

                    salesTable.InterCompanyAutoCreateOrders = false;
                    salesTable.update();
                }
            }
            ttscommit;

            if (formHasMethod(_formRun, identifierStr(doRefresh)))
            {
                _formRun.doRefresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAndProcessInventSumForCurCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select <c>InventSum</c> records for the current company and process them.
    /// </summary>
    /// <param name="_tmpInventSum">
    /// A buffer of type <c>InterCompanyInventSum</c> that will contain the final inserted records.
    /// </param>
    /// <param name="_tmpInventDim">
    /// A buffer of type <c>InterCompanyInventDim</c> that will contain the final inserted records.
    /// </param>
    /// <param name="_itemId">
    /// An item id that will be used for selecting <c>InventSum</c> records.
    /// </param>
    /// <param name="_sessionId">
    /// The current session id.
    /// </param>
    /// <param name="_doWHSOnHandCalculation">
    /// A boolean determining if WHS related on-hand calculations should be done. The default is true, meaning that calculations will be done.
    /// </param>
    protected static void selectAndProcessInventSumForCurCompany(
        InterCompanyInventSum   _tmpInventSum,
        InterCompanyInventDim   _tmpInventDim,
        ItemId                  _itemId,
        @SessionId              _sessionId,
        boolean                 _doWHSOnHandCalculation = true)
    {
        InventSum inventSum;
        InventDim inventDim;
        boolean includeWHSOnHand = (_doWHSOnHandCalculation && WHSInventEnabled::exist(_itemId));
        Query q;
        QueryRun qr;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            q = TradeInterCompany::initQueryForSelectAndProcessInventSumForCurCompany(_itemId);
            qr = new QueryRun(q);
            while (qr.next())
            {
                inventSum = qr.get(tableNum(InventSum));
                inventDim.clear();
                inventDim.initFromInventSum(inventSum);
                inventDim.inventDimId = inventSum.InventDimId;

                TradeInterCompany::insertInterCompanyInventDim(inventDim, _tmpInventDim, _sessionId);

                if (includeWHSOnHand)
                {
                    inventSum = TradeInterCompany::setInventSumForWHSItem(inventSum);
                }

                TradeInterCompany::insertInterCompanyInventSum(_tmpInventSum, _tmpInventDim, inventSum, _sessionId);
            }
        }
        else
        {
            q = TradeInterCompany::initQueryForSelectAndProcessInventSumForCurCompany(_itemId, true);
            qr = new QueryRun(q);
            while (qr.next())
            {
                inventSum = qr.get(tableNum(InventSum));
                inventDim = qr.get(tableNum(InventDim));
                TradeInterCompany::insertInterCompanyInventDim(inventDim, _tmpInventDim, _sessionId);

                if (includeWHSOnHand)
                {
                    inventSum = TradeInterCompany::setInventSumForWHSItem(inventSum);
                }

                TradeInterCompany::insertInterCompanyInventSum(_tmpInventSum, _tmpInventDim, inventSum, _sessionId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAndProcessInventSumForCrossCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects <c>InventSum</c> records for cross company.
    /// </summary>
    /// <param name="_tradeInterCompanyInventSumParameters">
    /// An instance of <c>TradeInterCompanyInventSumParameters</c> holding the parameters used selecting <c>InventSum</c> for cross company for item id.
    /// </param>
    protected static void selectAndProcessInventSumForCrossCompany(TradeInterCompanyInventSumParameters _tradeInterCompanyInventSumParameters)
    {
        using (var activityContext = TradeIntercompany::instrumentationLogger().interCompanyActivities().selectAndProcessInventSumForCrossCompany())
        {
            InventSum   inventSum;
            InventDim   inventDim;

            InterCompanyInventDim interCompanyInventdim = _tradeInterCompanyInventSumParameters.parmInterCompanyInventDimOrigin();

            boolean skipProductDimesion =
                !InventOnhandInterCompanyFilterByProdDimToggle::instance().isEnabled()
                || !interCompanyInventdim.toDimParm().anyProductDimensionFlagSet();

            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                if (_tradeInterCompanyInventSumParameters.parmIntercompanyOnhandSkipClosedQty()
                 && InventIntercompanyOnhandSkipClosedQtyFeature::isEnabled())
                {
                    while select inventSum
                    where inventSum.ItemId            == _tradeInterCompanyInventSumParameters.parmOtherCompanyItemId()
                    &&    inventSum.ClosedQty         == NoYes::No
                    &&   (skipProductDimesion
                      || (interCompanyInventdim.InventColorId   == inventSum.InventColorId
                       && interCompanyInventdim.configId        == inventSum.configId
                       && interCompanyInventdim.InventStyleId   == inventSum.InventStyleId
                       && interCompanyInventdim.InventSizeId    == inventSum.InventSizeId
                       && interCompanyInventdim.InventVersionId == inventSum.InventVersionId))
                    {
                        inventDim.clear();
                        inventDim.initFromInventSum(inventSum);
                        inventDim.inventDimId = inventSum.InventDimId;

                        TradeInterCompany::processInventDimAndInventSumForCrossCompany(_tradeInterCompanyInventSumParameters, inventDim, inventSum);
                    }
                }
                else
                {
                    while select inventSum
                    where inventSum.ItemId            == _tradeInterCompanyInventSumParameters.parmOtherCompanyItemId()
                    &&    inventSum.Closed            == NoYes::No
                    &&   (skipProductDimesion
                      || (interCompanyInventdim.InventColorId   == inventSum.InventColorId
                       && interCompanyInventdim.configId        == inventSum.configId
                       && interCompanyInventdim.InventStyleId   == inventSum.InventStyleId
                       && interCompanyInventdim.InventSizeId    == inventSum.InventSizeId
                       && interCompanyInventdim.InventVersionId == inventSum.InventVersionId))
                    {
                        inventDim.clear();
                        inventDim.initFromInventSum(inventSum);
                        inventDim.inventDimId = inventSum.InventDimId;

                        TradeInterCompany::processInventDimAndInventSumForCrossCompany(_tradeInterCompanyInventSumParameters, inventDim, inventSum);
                    }
                }
            }
            else
            {
                if (_tradeInterCompanyInventSumParameters.parmIntercompanyOnhandSkipClosedQty()
                 && InventIntercompanyOnhandSkipClosedQtyFeature::isEnabled())
                {
                    while select inventSum
                        where inventSum.ItemId            == _tradeInterCompanyInventSumParameters.parmOtherCompanyItemId()
                        &&    inventSum.ClosedQty         == NoYes::No
                    join inventDim
                        where inventDim.InventDimId == inventSum.InventDimId
                        &&   (skipProductDimesion
                          || (interCompanyInventdim.InventColorId   == inventDim.InventColorId
                           && interCompanyInventdim.configId        == inventDim.configId
                           && interCompanyInventdim.InventStyleId   == inventDim.InventStyleId
                           && interCompanyInventdim.InventSizeId    == inventDim.InventSizeId
                           && interCompanyInventdim.InventVersionId == inventDim.InventVersionId))
                    {
                        TradeInterCompany::processInventDimAndInventSumForCrossCompany(_tradeInterCompanyInventSumParameters, inventDim, inventSum);
                    }
                }
                else
                {
                    while select inventSum
                        where inventSum.ItemId            == _tradeInterCompanyInventSumParameters.parmOtherCompanyItemId()
                        &&    inventSum.Closed            == NoYes::No
                    join inventDim
                        where inventDim.InventDimId == inventSum.InventDimId
                        &&   (skipProductDimesion
                          || (interCompanyInventdim.InventColorId   == inventDim.InventColorId
                           && interCompanyInventdim.configId        == inventDim.configId
                           && interCompanyInventdim.InventStyleId   == inventDim.InventStyleId
                           && interCompanyInventdim.InventSizeId    == inventDim.InventSizeId
                           && interCompanyInventdim.InventVersionId == inventDim.InventVersionId))
                    {
                        TradeInterCompany::processInventDimAndInventSumForCrossCompany(_tradeInterCompanyInventSumParameters, inventDim, inventSum);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAndProcessInventSumForCrossCompanyWHS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects <c>InventSum</c> for cross company for item id that are WHSEnabled.
    /// </summary>
    /// <param name="_tradeInterCompanyInventSumParameters">
    /// An instance of <c>TradeInterCompanyInventSumParameters</c> holding the parameters used selecting <c>InventSum</c> for cross company for item id.
    /// </param>
    protected static void selectAndProcessInventSumForCrossCompanyWHS(TradeInterCompanyInventSumParameters _tradeInterCompanyInventSumParameters)
    {
        using (var activityContext = TradeIntercompany::instrumentationLogger().interCompanyActivities().selectAndProcessInventSumForCrossCompanyWHS())
        {
            InventSum inventSum;
            InventDim inventDim;

            InterCompanyInventDim interCompanyInventdim = _tradeInterCompanyInventSumParameters.parmInterCompanyInventDimOrigin();

            boolean skipProductDimesion =
                !InventOnhandInterCompanyFilterByProdDimToggle::instance().isEnabled()
                || !interCompanyInventdim.toDimParm().anyProductDimensionFlagSet();

            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                if (_tradeInterCompanyInventSumParameters.parmIntercompanyOnhandSkipClosedQty()
                 && InventIntercompanyOnhandSkipClosedQtyFeature::isEnabled())
                {
                    while select inventSum
                        where inventSum.ItemId    == _tradeInterCompanyInventSumParameters.parmOtherCompanyItemId()
                           && inventSum.ClosedQty == NoYes::No
                           && (skipProductDimesion
                           || (interCompanyInventdim.InventColorId   == inventSum.InventColorId
                               && interCompanyInventdim.configId        == inventSum.configId
                               && interCompanyInventdim.InventStyleId   == inventSum.InventStyleId
                               && interCompanyInventdim.InventSizeId    == inventSum.InventSizeId
                               && interCompanyInventdim.InventVersionId == inventSum.InventVersionId))
                    {
                        inventDim.clear();
                        inventDim.initFromInventSum(inventSum);
                        inventDim.inventDimId = inventSum.InventDimId;

                        //Update WHS related qty
                        inventSum = TradeInterCompany::setInventSumForWHSItem(inventSum);
                    
                        TradeInterCompany::processInventDimAndInventSumForCrossCompany(_tradeInterCompanyInventSumParameters, inventDim, inventSum);
                    }
                }    
                else 
                {
                    while select inventSum
                        where inventSum.ItemId    == _tradeInterCompanyInventSumParameters.parmOtherCompanyItemId()
                           && inventSum.Closed    == NoYes::No
                           && (skipProductDimesion
                           || (interCompanyInventdim.InventColorId   == inventSum.InventColorId
                               && interCompanyInventdim.configId        == inventSum.configId
                               && interCompanyInventdim.InventStyleId   == inventSum.InventStyleId
                               && interCompanyInventdim.InventSizeId    == inventSum.InventSizeId
                               && interCompanyInventdim.InventVersionId == inventSum.InventVersionId))
                    {
                        inventDim.clear();
                        inventDim.initFromInventSum(inventSum);
                        inventDim.inventDimId = inventSum.InventDimId;

                        //Update WHS related qty
                        inventSum = TradeInterCompany::setInventSumForWHSItem(inventSum);

                        //Apply inventSum criteria
                        if (inventSum.PostedQty            != 0
                            || inventSum.PostedValue       != 0
                            || inventSum.Deducted          != 0
                            || inventSum.Received          != 0
                            || inventSum.ReservPhysical    != 0
                            || inventSum.ReservOrdered     != 0
                            || inventSum.OnOrder           != 0
                            || inventSum.Ordered           != 0
                            || inventSum.QuotationIssue    != 0
                            || inventSum.QuotationReceipt  != 0
                            || inventSum.Registered        != 0
                            || inventSum.Picked            != 0
                            || inventSum.AvailOrdered      != 0
                            || inventSum.AvailPhysical     != 0
                            || inventSum.PhysicalValue     != 0
                            || inventSum.Arrived           != 0
                            || inventSum.PhysicalInvent    != 0
                            || inventSum.PostedValueSecCur_RU
                            || inventSum.PhysicalValueSecCur_RU
                            )
                        {
                            TradeInterCompany::processInventDimAndInventSumForCrossCompany(_tradeInterCompanyInventSumParameters, inventDim, inventSum);
                        }
                    }
                }
            }
            else
            {
                if (_tradeInterCompanyInventSumParameters.parmIntercompanyOnhandSkipClosedQty()
                 && InventIntercompanyOnhandSkipClosedQtyFeature::isEnabled())
                {
                    while select inventSum
                        where inventSum.ItemId    == _tradeInterCompanyInventSumParameters.parmOtherCompanyItemId()
                           && inventSum.ClosedQty == NoYes::No
                    join inventDim
                        where inventDim.InventDimId == inventSum.InventDimId
                           && (skipProductDimesion
                            || (interCompanyInventdim.InventColorId   == inventDim.InventColorId
                                && interCompanyInventdim.configId        == inventDim.configId
                                && interCompanyInventdim.InventStyleId   == inventDim.InventStyleId
                                && interCompanyInventdim.InventSizeId    == inventDim.InventSizeId
                                && interCompanyInventdim.InventVersionId == inventDim.InventVersionId))
                    {
                        //Update WHS related qty
                        inventSum = TradeInterCompany::setInventSumForWHSItem(inventSum);

                        TradeInterCompany::processInventDimAndInventSumForCrossCompany(_tradeInterCompanyInventSumParameters, inventDim, inventSum);

                    }
                }
                else
                {
                    while select inventSum
                        where inventSum.ItemId    == _tradeInterCompanyInventSumParameters.parmOtherCompanyItemId()
                           && inventSum.Closed    == NoYes::No
                    join inventDim
                        where inventDim.InventDimId == inventSum.InventDimId
                           && (skipProductDimesion
                            || (interCompanyInventdim.InventColorId   == inventDim.InventColorId
                                && interCompanyInventdim.configId        == inventDim.configId
                                && interCompanyInventdim.InventStyleId   == inventDim.InventStyleId
                                && interCompanyInventdim.InventSizeId    == inventDim.InventSizeId
                                && interCompanyInventdim.InventVersionId == inventDim.InventVersionId))
                    {
                        //Update WHS related qty
                        inventSum = TradeInterCompany::setInventSumForWHSItem(inventSum);

                        //Apply inventSum criteria
                        if (inventSum.PostedQty            != 0
                            || inventSum.PostedValue       != 0
                            || inventSum.Deducted          != 0
                            || inventSum.Received          != 0
                            || inventSum.ReservPhysical    != 0
                            || inventSum.ReservOrdered     != 0
                            || inventSum.OnOrder           != 0
                            || inventSum.Ordered           != 0
                            || inventSum.QuotationIssue    != 0
                            || inventSum.QuotationReceipt  != 0
                            || inventSum.Registered        != 0
                            || inventSum.Picked            != 0
                            || inventSum.AvailOrdered      != 0
                            || inventSum.AvailPhysical     != 0
                            || inventSum.PhysicalValue     != 0
                            || inventSum.Arrived           != 0
                            || inventSum.PhysicalInvent    != 0
                            || inventSum.PostedValueSecCur_RU
                            || inventSum.PhysicalValueSecCur_RU
                            )
                        {
                            TradeInterCompany::processInventDimAndInventSumForCrossCompany(_tradeInterCompanyInventSumParameters, inventDim, inventSum);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSumForWHSItem</Name>
				<Source><![CDATA[
    private static InventSum setInventSumForWHSItem(InventSum _inventSum)
    {
        WHSInventReserveQty whsInventReserveQty;
        InventDimParm       inventDimParm;
        InventDim           inventDim = _inventSum.inventDim();

        inventDimParm.initFromInventDim(inventDim);

        whsInventReserveQty = WHSInventReserveQty::newFromParms(
            _inventSum.inventTable(),
            inventDim,
            inventDimParm,
            _inventSum);

        _inventSum.AvailOrdered   = whsInventReserveQty.availOrdered();
        _inventSum.AvailPhysical  = whsInventReserveQty.availPhysical();
        _inventSum.ReservOrdered  = whsInventReserveQty.reservOrdered();
        _inventSum.ReservPhysical = whsInventReserveQty.reservPhysical();

        return _inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes notes between relating intercompany records.
    /// </summary>
    /// <param name="_common">
    /// The intercompany record from which the synchronization of notes will be based on.
    /// </param>
    static public void synchronizeDocuRef(Common  _common)
    {
        using (var activityContext = TradeIntercompany::instrumentationLogger().interCompanyActivities().synchronizeDocuRef(_common))
        {
            DocuRef docuRef;

            if (TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled())
            {
                while select forupdate docuRef
                    where docuRef.RefCompanyId == _common.DataAreaId
                       && docuRef.RefTableId   == _common.TableId
                       && docuRef.RefRecId     == _common.RecId
                {
                    IntercompanySyncNotesTask intercompanySyncNotesTask = IntercompanySyncNotesTask::newCommon(docuRef);
                    
                    intercompanySyncNotesTask.parmIsInitialSync(true);
                    intercompanySyncNotesTask.run();
                }
            }
            else
            {
                while select forupdate docuRef
                    where docuRef.RefCompanyId == _common.DataAreaId
                       && docuRef.RefTableId   == _common.TableId
                       && docuRef.RefRecId     == _common.RecId
                {
                    docuRef.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private static TradeInstrumentationLogger instrumentationLogger()
    {
        return TradeInstrumentationLogger::createLogger(classStr(TradeInterCompany));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>