<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcRecordCacheInventDim</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqCalcRecordCacheInventDim</c> implements a record cache for <c>InventDim</c> records.
/// </summary>
public class ReqCalcRecordCacheInventDim extends ReqCalcRecordCache
{
    private boolean isReqTransGetInventDimUseBomFlightEnabled = ReqTransGetInventDimUseBomFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a key/value pair into the cache.
    /// </summary>
    /// <param name="_parentItemId">
    ///    The parent item ID.
    /// </param>
    /// <param name="_parentInventDimRecId">
    ///    The parent inventory dimension record ID.
    /// </param>
    /// <param name="_routeId">
    ///    The route ID.
    /// </param>
    /// <param name="_oprNum">
    ///    The operation number.
    /// </param>
    /// <param name="_wrkCtrConsumption">
    ///    The resource consumption setting.
    /// </param>
    /// <param name="_itemId">
    ///    The child item ID.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record to cache.
    /// </param>
    /// <returns>
    ///    true if the record was cached; otherwise, false.
    /// </returns>
    public boolean insert(
        ItemId            _parentItemId,
        RefRecId          _parentInventDimRecId,
        RouteId           _routeId,
        OprNum            _oprNum,
        WrkCtrConsumption _wrkCtrConsumption,
        ItemId            _itemId,
        InventDim         _inventDim)
    {
        return this.insertKey(this.key(_parentItemId,_parentInventDimRecId,_routeId,_oprNum,_wrkCtrConsumption,_itemId),_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWithBom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a key/value pair into the cache.
    /// </summary>
    /// <param name="_parentItemId">
    ///    The parent item ID.
    /// </param>
    /// <param name="_parentInventDimRecId">
    ///    The parent inventory dimension record ID.
    /// </param>
    /// <param name="_routeId">
    ///    The route ID.
    /// </param>
    /// <param name="_oprNum">
    ///    The operation number.
    /// </param>
    /// <param name="_wrkCtrConsumption">
    ///    The resource consumption setting.
    /// </param>
    /// <param name="_itemId">
    ///    The child item ID.
    /// </param>
    /// <param name="_bomRecId">
    ///    The bom rec ID.
    /// </param>
    /// <param name="_inventDim">
    ///    The <c>InventDim</c> record to cache.
    /// </param>
    /// <returns>
    ///    true if the record was cached; otherwise, false.
    /// </returns>
    public boolean insertWithBom(
        ItemId            _parentItemId,
        RefRecId          _parentInventDimRecId,
        RouteId           _routeId,
        OprNum            _oprNum,
        WrkCtrConsumption _wrkCtrConsumption,
        ItemId            _itemId,
        RefRecId          _bomRecId,
        InventDim         _inventDim)
    {
        boolean ret;
        
        ret = this.insertKey(this.keyWithBom(_parentItemId, _parentInventDimRecId, _routeId, _oprNum, _wrkCtrConsumption, _itemId, _bomRecId), _inventDim);
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a key for the cache.
    /// </summary>
    /// <param name="_parentItemId">
    ///    The parent item ID.
    /// </param>
    /// <param name="_parentInventDimRecId">
    ///    The parent inventory dimension record ID.
    /// </param>
    /// <param name="_routeId">
    ///    The route ID.
    /// </param>
    /// <param name="_oprNum">
    ///    The operation number.
    /// </param>
    /// <param name="_wrkCtrConsumption">
    ///    The resource consumption setting.
    /// </param>
    /// <param name="_itemId">
    ///    The child item ID.
    /// </param>
    /// <returns>
    ///    A <c>container</c> that can be used as a key for the cache.
    /// </returns>
    protected container key(
        ItemId            _parentItemId,
        RefRecId          _parentInventDimRecId,
        RouteId           _routeId,
        OprNum            _oprNum,
        WrkCtrConsumption _wrkCtrConsumption,
        ItemId            _itemId)
    {
        return [_parentItemId,_parentInventDimRecId,_routeId,_oprNum,_wrkCtrConsumption,_itemId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyWithBom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a key for the cache.
    /// </summary>
    /// <param name="_parentItemId">
    ///    The parent item ID.
    /// </param>
    /// <param name="_parentInventDimRecId">
    ///    The parent inventory dimension record ID.
    /// </param>
    /// <param name="_routeId">
    ///    The route ID.
    /// </param>
    /// <param name="_oprNum">
    ///    The operation number.
    /// </param>
    /// <param name="_wrkCtrConsumption">
    ///    The resource consumption setting.
    /// </param>
    /// <param name="_itemId">
    ///    The child item ID.
    /// </param>
    /// <param name="_bomRecId">
    ///    The bom rec ID.
    /// </param>
    /// <returns>
    ///    A <c>container</c> that can be used as a key for the cache.
    /// </returns>
    protected container keyWithBom(
        ItemId            _parentItemId,
        RefRecId          _parentInventDimRecId,
        RouteId           _routeId,
        OprNum            _oprNum,
        WrkCtrConsumption _wrkCtrConsumption,
        ItemId            _itemId,
        RefRecId          _bomRecId)
    {
        var keyOrig = this.key(_parentItemId, _parentInventDimRecId, _routeId, _oprNum, _wrkCtrConsumption, _itemId);

        return keyOrig + _bomRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Looks up a value in the cache.
    /// </summary>
    /// <param name="_parentItemId">
    ///    The parent item ID.
    /// </param>
    /// <param name="_parentInventDimRecId">
    ///    The parent inventory dimension record ID.
    /// </param>
    /// <param name="_routeId">
    ///    The route ID.
    /// </param>
    /// <param name="_oprNum">
    ///    The operation number.
    /// </param>
    /// <param name="_wrkCtrConsumption">
    ///    The resource consumption setting.
    /// </param>
    /// <param name="_itemId">
    ///    The child item ID.
    /// </param>
    /// <returns>
    ///    The cached <c>InventDim</c> record; otherwise, an empty buffer.
    /// </returns>
    public InventDim lookup(
        ItemId            _parentItemId,
        RefRecId          _parentInventDimRecId,
        RouteId           _routeId,
        OprNum            _oprNum,
        WrkCtrConsumption _wrkCtrConsumption,
        ItemId            _itemId)
    {
        return this.lookupKey(this.key(_parentItemId,_parentInventDimRecId,_routeId,_oprNum,_wrkCtrConsumption,_itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWithBom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Looks up a value in the cache.
    /// </summary>
    /// <param name="_parentItemId">
    ///    The parent item ID.
    /// </param>
    /// <param name="_parentInventDimRecId">
    ///    The parent inventory dimension record ID.
    /// </param>
    /// <param name="_routeId">
    ///    The route ID.
    /// </param>
    /// <param name="_oprNum">
    ///    The operation number.
    /// </param>
    /// <param name="_wrkCtrConsumption">
    ///    The resource consumption setting.
    /// </param>
    /// <param name="_itemId">
    ///    The child item ID.
    /// </param>
    /// <param name="_bomRecId">
    ///    The bom rec ID.
    /// </param>
    /// <returns>
    ///    The cached <c>InventDim</c> record; otherwise, an empty buffer.
    /// </returns>
    public InventDim lookupWithBom(
        ItemId            _parentItemId,
        RefRecId          _parentInventDimRecId,
        RouteId           _routeId,
        OprNum            _oprNum,
        WrkCtrConsumption _wrkCtrConsumption,
        ItemId            _itemId,
        RefRecId          _bomRecId)
    {
        InventDim   inventDim;

        inventDim = this.lookupKey(this.keyWithBom(_parentItemId, _parentInventDimRecId, _routeId, _oprNum, _wrkCtrConsumption, _itemId, _bomRecId));

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a key/value pair from the cache.
    /// </summary>
    /// <param name="_parentItemId">
    ///    The parent item ID.
    /// </param>
    /// <param name="_parentInventDimRecId">
    ///    The parent inventory dimension record ID.
    /// </param>
    /// <param name="_routeId">
    ///    The route ID.
    /// </param>
    /// <param name="_oprNum">
    ///    The operation number.
    /// </param>
    /// <param name="_wrkCtrConsumption">
    ///    The resource consumption setting.
    /// </param>
    /// <param name="_itemId">
    ///    The child item ID.
    /// </param>
    /// <returns>
    ///    The cached <c>InventDim</c> record; otherwise, an empty buffer.
    /// </returns>
    public boolean remove(
        ItemId            _parentItemId,
        RefRecId          _parentInventDimRecId,
        RouteId           _routeId,
        OprNum            _oprNum,
        WrkCtrConsumption _wrkCtrConsumption,
        ItemId            _itemId)
    {
        return this.removeKey(this.key(_parentItemId,_parentInventDimRecId,_routeId,_oprNum,_wrkCtrConsumption,_itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeWithBom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a key/value pair from the cache.
    /// </summary>
    /// <param name="_parentItemId">
    ///    The parent item ID.
    /// </param>
    /// <param name="_parentInventDimRecId">
    ///    The parent inventory dimension record ID.
    /// </param>
    /// <param name="_routeId">
    ///    The route ID.
    /// </param>
    /// <param name="_oprNum">
    ///    The operation number.
    /// </param>
    /// <param name="_wrkCtrConsumption">
    ///    The resource consumption setting.
    /// </param>
    /// <param name="_itemId">
    ///    The child item ID.
    /// </param>
    /// <param name="_bomRecId">
    ///    The bom rec ID.
    /// </param>
    /// <returns>
    ///    The cached <c>InventDim</c> record; otherwise, an empty buffer.
    /// </returns>
    public boolean removeWithBom(
        ItemId            _parentItemId,
        RefRecId          _parentInventDimRecId,
        RouteId           _routeId,
        OprNum            _oprNum,
        WrkCtrConsumption _wrkCtrConsumption,
        ItemId            _itemId,
        RefRecId          _bomRecId)
    {
        boolean ret;
        
        ret = this.removeKey(this.keyWithBom(_parentItemId, _parentInventDimRecId, _routeId, _oprNum, _wrkCtrConsumption, _itemId, _bomRecId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqCalcRecordCacheInventDim construct()
    {
        return new ReqCalcRecordCacheInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static ReqCalcRecordCacheInventDim newStandard()
    {
        ReqCalcRecordCache  reqCalcRecordCache = ReqCalcRecordCacheInventDim::construct();

        reqCalcRecordCache.parmTableId(tableNum(InventDim));
       
        return reqCalcRecordCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>