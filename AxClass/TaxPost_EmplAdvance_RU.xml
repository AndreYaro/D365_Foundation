<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPost_EmplAdvance_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Posting of tax relayted to Advance report
/// </summary>
class TaxPost_EmplAdvance_RU extends TaxPost
{
    Common                      sourceRecord;
    EmplAdvLine_RU              advLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearSourceDocumentLineCache</Name>
				<Source><![CDATA[
    private void clearSourceDocumentLineCache(recId _sourceDocumentLine)
    {
        SourceDocumentLine childSourceDocumentLine;
        SourceDocumentLine sourceDocumentLineLocal = SourceDocumentLine::find(_sourceDocumentLine);

        if (SourceDocumentLineItem::getFromCache(sourceDocumentLineLocal))
        {
            SourceDocumentLineItem::removeFromCache(sourceDocumentLineLocal);

            while select RecId from childSourceDocumentLine
                where childSourceDocumentLine.ParentSourceDocumentLine == _sourceDocumentLine
            {
                this.clearSourceDocumentLineCache(childSourceDocumentLine.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the exchange rate from the transaction line.
    /// </summary>
    /// <returns>
    ///    Exchange rate from the transaction line.
    /// </returns>
    public ExchRate exchRate()
    {
        return advLine.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the secondary exchange rate from the transaction line.
    /// </summary>
    /// <returns>
    ///    Secondary exchange rate from the transaction line.
    /// </returns>
    public ExchrateSecondary exchRateSecondary()
    {
        return advLine.ExchRateSecond;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the intialization class as an Object.
    /// </summary>
    /// <returns>
    ///    Exchange rate from the transaction line.
    /// </returns>
    /// <remarks>
    ///    The initialization class is of a different type for each subclass.
    /// </remarks>
    protected Object getInitializationClass()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the original document ID.
    /// </summary>
    /// <returns>
    ///    The original RecId of the transaction header.
    /// </returns>
    /// <remarks>
    ///    Parenting of tax lines sometimes changes during posting.  This method will
    ///    return the original document Id.
    /// </remarks>
    protected RefRecId getOriginalHeadingRecId()
    {
        return origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the original transaction Line table ID.
    /// </summary>
    /// <returns>
    ///    The original Table Id of the transaction line.
    /// </returns>
    /// <remarks>
    ///    Parenting of tax lines sometimes changes during posting.  This method will
    ///    return the original transaction line table id.
    /// </remarks>
    protected RefTableId getOriginalHeadingTableId()
    {
        return origHeadingTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalSourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the original transaction Line table ID.
    /// </summary>
    /// <returns>
    ///    The original Table Id of the transaction line.
    /// </returns>
    /// <remarks>
    ///    Parenting of tax lines sometimes changes during posting.  This method will
    ///    return the original transaction line table id.
    /// </remarks>
    protected RefTableId getOriginalSourceTableId()
    {
        return tableNum(CustInvoiceLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(NoYes              _post,
             EmplAdvLine_RU _advLine,
             TmpTaxWorkTrans           _tmpTaxWorkTrans = null)
    {
        super();

        advLine = _advLine;
        post                 = _post;
        taxWorkTrans         = _tmpTaxWorkTrans;

        taxModuleType        = TaxModuleType::FreeTxtInvoice;

        headingTableId       =  advLine.TableId;
        headingRecId         =  advLine.RecId;
        origHeadingTableId   =  advLine.advTable().TableId;
        origHeadingRecId     =  advLine.RecId;

        if (!headingTableId || !headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (! this.checkParameters())
                throw error("@SYS18447");

            taxDate             = advLine.advTable().TransDate;
            sourceCurrencyCode  = advLine.CurrencyCode;
        }

        triangulation = advLine.Triangulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPostSubLedgerJournalLines</Name>
				<Source><![CDATA[
    protected void saveAndPostSubLedgerJournalLines(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost = curext())
    {
        super(_ledgerPostingController, _companyToPost);

        if (this.useSubLedgerJournalLines())
        {
            this.clearSourceDocumentLineCache(advLine.SourceDocumentLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>RecId</c> of the transaction line that is currently being posted.
    /// </summary>
    /// <returns>
    ///    The RecId of the transaction line being posted.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public recId sourceRecId()
    {
        return sourceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>TableId</c> of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    ///    The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public tableId sourceTableId()
    {
        return sourceRecord.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferSubLedgerToGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether SubLedger should be transferred to GL
    /// </summary>
    /// <returns>
    /// Always false
    /// </returns>
    public boolean transferSubLedgerToGeneralLedger()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost = curext())
    {
        TaxAmount       taxAmount;

        this.initLedgerPosting(_ledgerPostingController);

        ttsbegin;
        sourceRecord = advLine;
        this.moveTaxLineToNewOwner(advLine.TableId, advLine.RecId, _companyToPost);

        advLine.update(false);
        ttscommit;

        if (post)
        {
            this.saveAndPost(_ledgerPostingController, _companyToPost);
            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        else
        {
            taxAmount = this.totalTaxAmount();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns a boolean indicating whether the current transaction being posted supports
    ///    SubLedgerDistributions/SubLedgerJournalLines.  By default, this base implementation is that they don't.
    ///    As the individual transaction support the SubLedger, they will need to override this and return true.
    /// </summary>
    /// <returns>
    ///    True since Free Text Invoice does support the SubLedger.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///   True if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Post tax related to _advline to _postingController
    /// </summary>
    /// <param name="_postingController">
    ///  Controller to post
    /// </param>
    /// <param name="_advLine">
    ///  Advance report line
    /// </param>
    public static void doUpdateAndPost(LedgerPostingController _postingController, EmplAdvLine_RU _advLine)
    {
        TaxPost_EmplAdvance_RU tax = new TaxPost_EmplAdvance_RU(NoYes::Yes, _advLine);
        tax.updateAndPost(_postingController);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>