<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_DRBM_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// calculate the period depreciation amount under method of double reducing balance
/// </summary>
class AssetTableMethod_DRBM_CN  extends AssetTableMethod
{
    AssetDepreciationTime   periods;
    AssetDepreciationTime   currPeriod;
    AssetAmount             periodAmount;
    AssetAmount             unitPeriodRate;
    AssetAmount             prevYearAmount;
    AssetAmount             currYearAmount;
    AssetAmount             currAmountToDepreciate;
    AssetAmount             scrapValue;
    AssetAmount             prevDepAmountPriorYears;
    AssetAmount             prevDepAmountThisYear;
    AssetAmount             extraodinaryDepAmount;

    AssetTransDate          previousDepreciationDate;
    AssetTableDepConv       deprConv;
    boolean                 theEnd;
    Integer                 numOfPeriod;

    #define.SLBaseYear(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the period depreciation amount under method of double reducing balance method
    /// </summary>
    /// <returns>
    /// depreciation amount for each period
    /// </returns>
    public AssetAmount calc()
    {
        AssetTransDate  startOfPeriod;

        startOfPeriod = deprInterval.startOfPeriod(periodstart);

        if (periodEnd <= parmRunDate )
        {
            this.setDepDate();
            this.setAmountToDepreciate();

            extraodinaryDepAmount = -AssetTrans::amountMSTPerDateTranstype(
                                        assetBook.AssetId,
                                        periodEnd,
                                        assetBook.BookId,
                                        AssetTransType::ExtraordinaryDepreciation);

            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }

            if (previousDepreciationDate
               && deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                periods = round(periods + prevPeriods, 0);
                prevPeriods = 0;
                if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
                {
                    prevDepAmountPriorYears += prevDepAmountThisYear;
                    prevDepAmountPriorYears += prevDepAmountExternal;
                    prevDepAmountExternal = 0;
                    prevDepAmountThisYear = 0;
                }
            }

            this.calcRestPeriod(startOfPeriod);
            currPeriod -= restPeriod;

            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);
            previousDepreciationDate = depreciationDate;

            switch (assetDepreciationProfile.Accrual)
            {
                case AssetAccrual::Yearly:
                    periodAmount = assetBook.roundOffDepreciation(this.calcYearAmount());
                    break;

                default:
                    periodAmount = assetBook.roundOffDepreciation(this.calcDBRMPeriodServiceLife());
                    break;
            }
            periodAmount = CurrencyExchangeHelper::amount(periodAmount);

            if (currPeriod <= 0)
            {
                if (amountToDepreciate != (prevDepAmount + prevDepAmountPriorYears + extraodinaryDepAmount + periodAmount))
                {
                    periodAmount = CurrencyExchangeHelper::amount(amountToDepreciate - prevDepAmountPriorYears - extraodinaryDepAmount - prevDepAmount);
                }
            }

            if (amountToDepreciate < prevDepAmount + extraodinaryDepAmount + periodAmount)
            {
                periodAmount = CurrencyExchangeHelper::amount(amountToDepreciate - prevDepAmountPriorYears - extraodinaryDepAmount - prevDepAmount);
            }

            prevDepAmount += periodAmount;
        }
        else
        {
            periodAmount = 0;
        }

        return periodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDBRMPeriodServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the depreciation amount for each calendar year for each calendar year can cover two fiscal years.
    ///  for example: depreciation start date is 2009/3/1, then the depreciation amount of 2010 cover 2010/1/1- 2010/3/1 and 2010/3/1- 2010/12/1
    /// </summary>
    /// <returns>
    /// depreciation amount for each calendar year
    /// </returns>
    private AssetAmount calcDBRMPeriodServiceLife()
    {
        AssetAmount    currPeriodAmount;

        if (this.getDepYear(currPeriod + restPeriod) == this.getDepYear(currPeriod + restPeriod - 1)) // whether fisrt depreciation period
        {
            currPeriodAmount = restPeriod * this.getDepAmountOfFiscalYear(this.getDepYear(currPeriod));
        }
        else
        {
            currPeriodAmount = this.calcPeriodAmount();
        }

        if (numOfPeriod)
        {
            currPeriodAmount = currPeriodAmount / numOfPeriod;
        }

        return currPeriodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriodAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the period depreciation amount under method of DRBM.
    /// </summary>
    /// <returns>
    /// depreciation amount for each period other than year
    /// </returns>
    private AssetAmount calcPeriodAmount()
    {
        AssetAmount     currPeriodAmount;
        AssetAmount     currPeriodYearly;
        AssetAmount     prevPeriodRate;
        AssetAmount     currPeriodRate;
        AssetAmount     prevYearDigits;

        this.calcPeriodYearAmount();

        currPeriodYearly = currPeriod + restPeriod;
        prevYearDigits = roundUp(currPeriodYearly, 1);

        prevPeriodRate = (currPeriodYearly - prevYearDigits + 1);
        currPeriodRate = 1 - prevPeriodRate;

        if (currPeriod == periods)
        {
            currPeriodAmount = 0;
        }
        else
        {
            currPeriodAmount = this.getDepAmountOfFiscalYear(this.getDepYear(currPeriod)) * (1 - prevPeriodRate);
        }
        currPeriodAmount += this.getDepAmountOfFiscalYear(this.getDepYear(currPeriod+restPeriod)) * (prevPeriodRate);

        return currPeriodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPeriodYearAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// calc_yearAmount: calculate the depreciation amount for each year;
    /// the previous n-2 years are calculated by percentage.
    /// the last two year are half of the remaining amount
    /// </summary>
    /// <returns>
    /// depreciation value of that year
    /// </returns>
    private AssetAmount calcPeriodYearAmount()
    {
        AssetAmount     tmpPeriodAmount;
        AssetAmount     firstModValue;
        AssetAmount     secondModValue;
        AssetAmount     firstIntValue;

        firstIntValue  = round(currPeriod - 0.5, 1) + 1;
        firstModValue  = currPeriod - firstIntValue + 1;
        secondModValue = 1 - firstModValue;

        if ((currPeriod + 1) >= periods)
        {
            tmpPeriodAmount = 0;
        }
        else
        {
            tmpPeriodAmount = CurrencyExchangeHelper::amount(prevYearAmount * firstModValue);
        }
        tmpPeriodAmount += CurrencyExchangeHelper::amount(currYearAmount * (1 - firstModValue));

        if (currPeriod >= (#SLBaseYear + 1))
        {
            prevYearAmount = currYearAmount;
            currYearAmount = (currAmountToDepreciate - prevYearAmount) * unitPeriodRate;
        }
        else
        {
            prevYearAmount = currYearAmount;
            if (theEnd)
            {
                currYearAmount = (currAmountToDepreciate - assetBook.calcAssetScrapValueByDate_CN(depreciationDate) - prevYearAmount);
            }
            else
            {
                currYearAmount = (currAmountToDepreciate - assetBook.calcAssetScrapValueByDate_CN(depreciationDate) - prevYearAmount) / #SLBaseYear;
                theEnd = true;
            }
        }
        currAmountToDepreciate -= prevYearAmount;

        return tmpPeriodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// calc the rest period of the interval
    /// </summary>
    /// <param name="_startOfPeriod">
    /// transaction date
    /// </param>
    protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        super(_startOfPeriod);
        if (assetBook.DepreciationConvention != AssetDepreciationConvention::None)
        {
            //
            //  The restPeriod may be updated based on the assets depreciation convention or
            //  will be returned unchanged.
            //
            restPeriod = deprConv.calcRestPeriod(restPeriod, periodstart, periods);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcYearAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calc_yearAmount: calculate the depreciation amount for each year;
    /// the previous n-2 years are calculated by percentage.
    /// the last two year are half of the remaining amount
    /// </summary>
    /// <returns>
    /// depreciation value of previous year
    /// </returns>
    private AssetAmount calcYearAmount()
    {
        AssetAmount     tmpPeriodAmount;
        AssetAmount     firstRestValue;
        AssetAmount     firstIntValue;
        AssetAmount     prevIntValue;
        AssetAmount     currIntValue;

        firstIntValue  = round(currPeriod - 0.5, 1) + 1;
        firstRestValue = currPeriod - firstIntValue + 1;

        // if the depreciation start date is at the beginning of the month
        if (firstRestValue)
        {
            prevIntValue = this.getDepAmountOfFiscalYear(this.getDepYear(currPeriod + 1));
            currIntValue = this.getDepAmountOfFiscalYear(this.getDepYear(currPeriod));
        }
        else
        {
            prevIntValue = this.getDepAmountOfFiscalYear(this.getDepYear(currPeriod + 1) + 1);
            currIntValue = this.getDepAmountOfFiscalYear(this.getDepYear(currPeriod) + 1);
        }

        tmpPeriodAmount = prevIntValue * firstRestValue + currIntValue * (1 - firstRestValue);

        return tmpPeriodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepAmountOfFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the depreciation amount for each fiscal year
    /// </summary>
    /// <param name="_period">
    /// Asset Depreciation Time
    /// </param>
    /// <returns>
    /// depreciation amount for each fiscal year
    /// </returns>
    public AssetAmount getDepAmountOfFiscalYear(AssetDepreciationTime _period)
    {
        AssetAmount             tmpPeriodAmount;
        AssetAmount             tmpDepreciationToAmount;
        AssetDepreciationTime   tmpIdx;

        if (numOfPeriod)
        {
            tmpIdx = periods / numOfPeriod;
        }
        tmpDepreciationToAmount = amountToDepreciate + assetBook.calcAssetScrapValueByDate_CN(depreciationDate);

        while (tmpIdx >= _period)
        {
            if (tmpIdx > #SLBaseYear)
            {
                tmpPeriodAmount = tmpDepreciationToAmount * unitPeriodRate;
                tmpDepreciationToAmount -= tmpPeriodAmount;
            }
            else if (tmpIdx == #SLBaseYear)
            {
                tmpPeriodAmount = (tmpDepreciationToAmount - assetBook.calcAssetScrapValueByDate_CN(depreciationDate)) / #SLBaseYear;
                tmpDepreciationToAmount -= tmpPeriodAmount;
            }
            else
            {
                tmpPeriodAmount = tmpDepreciationToAmount - assetBook.calcAssetScrapValueByDate_CN(depreciationDate);
            }
            tmpIdx--;
        }
        return tmpPeriodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// check which fiscal year the given date belong to
    /// </summary>
    /// <param name="_currPeriod">
    /// AssetDepreciationTime
    /// </param>
    /// <returns>
    ///     return the year index, for example, the depreciation start date is 2008/1/2.
    ///     getDepYearIdx(2008/1/2)=1;     getDepYearIdx(2009/1/1)=1;
    ///     getDepYearIdx(2009/1/5)=2;     getDepYearIdx(2010/1/1)=2;
    /// </returns>
    public AssetAmount getDepYear(AssetDepreciationTime _currPeriod)
    {
        AssetAmount depreciationYear = 0;

        if (numOfPeriod)
        {
            depreciationYear = roundUp(_currPeriod / numOfPeriod, 1);
        }

        return depreciationYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// init the depreciation method DRBM.
    /// </summary>
    public void init()
    {
        super();
        theEnd          = false;
        prevYearAmount  = 0;
        periods         = assetBook.LifeTime;
        currPeriod      = assetBook.LifeTimeRest;
        numOfPeriod     = deprInterval.numOfPeriodsPerYear();

        // Construct an asset depreciation convention class
        deprConv = AssetTableDepConv::newCalcAssetAmount(assetBook, deprInterval, assetDepreciationProfile);

        this.setAmountToDepreciate();
        currAmountToDepreciate = assetAcquisitionValue;
        scrapValue = assetBook.ScrapValue;

        if (assetBook.ServiceLife > #SLBaseYear
            && periods)
        {
            unitPeriodRate = #SLBaseYear * numOfPeriod / periods;
        }
        else
        {
            unitPeriodRate = 1;
        }

        if (periods)
        {
            currYearAmount = this.getDepAmountOfFiscalYear(periods / periods);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// whether the depreciation comes to the end.
    /// </summary>
    /// <returns>
    /// true if ended, else false.
    /// </returns>
    public boolean next()
    {
        if (parmRunDate <= baseDate)
        {
            return false;
        }

        if (currPeriod <= 0)
        {
            return false;
        }

        this.setDepDate();

        //  This prevents depreciations with invalid dates from
        //  being handled.
        if (!depreciationDate
            || depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>