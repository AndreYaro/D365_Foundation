<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCaseAmendment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is used to implement the amendment functionality.
/// </summary>
public class PurchRFQCaseAmendment
{
    private PurchRFQInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the amendment.
    /// </summary>
    /// <param name="_purchRFQCaseTableRecId">
    /// The record Id of the <c>PurchRFQCaseTable</c> table record.
    /// </param>
    public void cancel(PurchRFQCaseTableRecId _purchRFQCaseTableRecId)
    {
        if (_purchRFQCaseTableRecId)
        {
            PurchRFQCaseTable purchRFQCaseTable = PurchRFQCaseTable::findRecId(_purchRFQCaseTableRecId);

            if (purchRFQCaseTable.isAmended == NoYes::No)
            {
                throw error(strFmt("@SYP4860737", purchRFQCaseTable.RFQCaseId));
            }

            PurchRFQCaseSnapshot purchRFQCaseSnapshot = PurchRFQCaseSnapshot::construct();
            purchRFQCaseSnapshot.restore(_purchRFQCaseTableRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelRFQ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates the RFQ cancel wizard.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// The <c>PurchRFQCaseTable</c> table buffer which is being cancelled.
    /// </param>
    public void cancelRFQ(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQCancelWizard wizard = PurchRFQCancelWizard::construct();

        wizard.parmPurchRFQCaseTable(_purchRFQCaseTable);

        if (wizard.prompt())
        {
            wizard.run();
        }

        if (wizard.closeOK())
        {
            using (var activityContext = this.instrumentationLogger().caseAmendment().cancelAmendment(_purchRFQCaseTable.RecId))
            {
                this.cancelRFQProcess(_purchRFQCaseTable, wizard.parmSendEmail(), wizard.parmReasonForCancellation());

                // Initialize the journals map
                wizard.parmRFQVendorsJournalsToSend(_purchRFQCaseTable.getLatestRFQJournalsForRFQVendors());

                if (wizard.parmSendEmail())
                {
                    this.sendEmails(wizard);
                }

                info("@SCM:PurchRfqCancelWizardFinalMessage");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelRFQProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels an RFQ.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// The <c>PurchRFQCaseTable</c> record which is being cancelled.
    /// </param>
    /// <param name="_sendEmail">
    /// true if an email should be sent to vendors.
    /// </param>
    /// <param name="_reasonForCancellation">
    /// The reason for cancelling the RFQ.
    /// </param>
    public void cancelRFQProcess(PurchRFQCaseTable _purchRFQCaseTable, boolean _sendEmail, LongDescription _reasonForCancellation)
    {
        PurchRFQCaseAmendment::cancelRequestForQuotation(_purchRFQCaseTable, _reasonForCancellation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelRequestForQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels an RFQ and deletes all related sealed bid records.
    /// </summary>
    /// <param name="_purchRFQCaseTable">
    /// The <c>PurchRFQCaseTable</c> record which is being cancelled.
    /// </param>
    /// <param name="_reasonForCancellation">
    /// The reason for cancelling the RFQ.
    /// </param>
    internal static void cancelRequestForQuotation(PurchRFQCaseTable _purchRFQCaseTable, LongDescription _reasonForCancellation)
    {
        PurchRFQTable                  purchRFQTable;
        PurchRFQCaseTable              purchRFQCaseTable;
        PurchRFQCaseLine               purchRFQCaseLine;
        PurchRFQLine                   purchRFQLine;
        PurchRFQId                     purchRFQId;
        PurchReqLine                   purchReqLine;
        PurchReqId                     purchReqId;
        boolean                        isFromPurchReq = _purchRFQCaseTable.RFQType == PurchRFQType::PurchReq;
        PurchRFQExpiryDateTime         expirationTime = DateTimeUtil::utcNow();

        ttsBegin;

        // Delete related sealed records for RFQ with bid type Sealed
        if (_purchRFQCaseTable.BidType == PurchRFQBidType::Sealed)
        {
            PurchRFQSealedBidManager::deleteSealedRecords(_purchRFQCaseTable);
        }

        if (isFromPurchReq)
        {
            select firstOnly purchReqLine
                        where purchReqLine.PurchRFQCaseId == _purchRFQCaseTable.RFQCaseId
                        && purchReqLine.PurchRFQCaseIdDataArea == _purchRFQCaseTable.dataAreaId;

            purchReqId = purchReqLine.purchReqId();

            update_recordSet purchReqLine
                    setting
                        PurchRFQCaseId = '',
                        PurchRFQCaseIdDataArea = ''
                    where
                        purchReqLine.PurchRFQCaseId == _purchRFQCaseTable.RFQCaseId
                        && purchReqLine.PurchRFQCaseIdDataArea == _purchRFQCaseTable.dataAreaId;
        }

        update_recordSet purchRFQCaseTable
                setting
                    ExpiryDateTime      = expirationTime,
                    CanceledPurchReqId = purchReqId,
                    CanceledDateTime   = expirationTime,
                    CancellationReason  = _reasonForCancellation,
                    StatusHigh          = PurchRFQStatus::Canceled,
                    StatusLow           = PurchRFQStatus::Canceled
                where purchRFQCaseTable.RecId == _purchRFQCaseTable.RecId;

        while select forupdate purchRFQCaseLine
            where purchRFQCaseLine.RFQCaseId == _purchRFQCaseTable.RFQCaseId
        {
            purchRFQCaseLine.StatusHigh = PurchRFQStatus::Canceled;
            purchRFQCaseLine.StatusLow = PurchRFQStatus::Canceled;
            purchRFQCaseLine.ExpiryDateTime = expirationTime;

            purchRFQCaseLine.PurchQty = 0;
            purchRFQCaseLine.PdsCWQty = 0;
            purchRFQCaseLine.LineAmount = 0;

            InventMovement::bufferSetTransQtyUnit(purchRFQCaseLine);
            InventMovement::bufferSetRemainQty(purchRFQCaseLine);

            boolean inventoryTransExists = purchRFQCaseLine.InventTransId && InventTransOrigin::findByInventTransId(purchRFQCaseLine.InventTransId);
            purchRFQCaseLine.update(!inventoryTransExists);
        }

        while select forUpdate purchRFQTable
                where purchRFQTable.RFQCaseId == _purchRFQCaseTable.RFQCaseId
        {
            purchRFQId = purchRFQTable.RFQId;
            purchRFQTable.StatusHigh = PurchRFQStatus::Canceled;
            purchRFQTable.StatusLow = PurchRFQStatus::Canceled;
            purchRFQTable.ExpiryDateTime = expirationTime;
            purchRFQTable.doUpdate();

            if (PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled())
            {
                purchRFQLine.skipDataMethods(true);
            }
            update_recordSet purchRFQLine
               setting
                   Status = PurchRFQStatus::Canceled,
                   ExpiryDateTime = expirationTime
               where purchRFQLine.RFQId == purchRFQId;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(VendorCollaboration_PSN)))
        {
            PurchRFQPublishTable_PSN       purchRFQPublishTable_PSN;

            update_recordSet purchRFQPublishTable_PSN
                       setting
                           ExpiryDateTime = expirationTime
                       where purchRFQPublishTable_PSN.PurchRFQCaseTable == _purchRFQCaseTable.RecId;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the amendment.
    /// </summary>
    /// <param name="_purchRFQCaseTableRecId">
    /// The record ID of the <c>PurchRFQCaseTable</c> table record.
    /// </param>
    public void create(PurchRFQCaseTableRecId _purchRFQCaseTableRecId)
    {
        using (var activityContext = this.instrumentationLogger().caseAmendment().createAmendment(_purchRFQCaseTableRecId))
        {
            ttsBegin;

            PurchRFQCaseTable purchRFQCaseTable = PurchRFQCaseTable::findRecId(_purchRFQCaseTableRecId, true);

            if (purchRFQCaseTable)
            {
                if (purchRFQCaseTable.isAmended == NoYes::Yes)
                {
                    throw error(strFmt("@SYP4860736", purchRFQCaseTable.RFQCaseId));
                }

                PurchRFQCaseSnapshot purchRFQCaseSnapshot = PurchRFQCaseSnapshot::construct();

                purchRFQCaseSnapshot.snap(_purchRFQCaseTableRecId);

                PurchRFQAmendment purchRFQAmendment;

                select firstOnly AmendmentNumber from purchRFQAmendment
                    order by purchRFQAmendment.createdDateTime desc
                    where purchRFQAmendment.PurchRFQCaseTable == purchRFQCaseTable.RecId;

                purchRFQAmendment.PurchRFQCaseTable = purchRFQCaseTable.RecId;
                purchRFQAmendment.AmendmentNumber   = purchRFQAmendment.AmendmentNumber + 1;
                purchRFQAmendment.ProcessedBy       = PurchRFQCaseTable::getCurrentWorker();
                purchRFQAmendment.insert();

                purchRFQCaseTable.isAmended = NoYes::Yes;
                purchRFQCaseTable.update();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalize the amendment.
    /// </summary>
    /// <param name="_purchRFQCaseTableRecId">
    /// The record Id of the <c>PurchRFQCaseTable</c> table record.
    /// </param>
    public void finalize(PurchRFQCaseTableRecId _purchRFQCaseTableRecId = 0)
    {
        PurchRFQCaseTable purchRFQCaseTable = PurchRFQCaseTable::findRecId(_purchRFQCaseTableRecId, true);

        if (purchRFQCaseTable.isAmended == NoYes::No)
        {
            throw error(strFmt("@SYP4860737", purchRFQCaseTable.RFQCaseId));
        }

        Args args = new Args();
        args.record(purchRFQCaseTable);

        PurchRFQAmendmentWizard wizard = PurchRFQAmendmentWizard::construct();
        wizard.parmPurchRFQCaseId(purchRFQCaseTable.RFQCaseId);

        if (wizard.prompt())
        {
            wizard.run();
        }

        if (wizard.closeOK())
        {
            using (var activityContext = this.instrumentationLogger().caseAmendment().finalizeAmendment(_purchRFQCaseTableRecId))
            {
                ttsBegin;

                // Update the amendment
                this.updateRFQCaseAmendment(purchRFQCaseTable);

                // Update the RFQ case
                this.updateRFQCase(purchRFQCaseTable);

                // Return the replies
                PurchRFQCaseAmendment::returnAllReplies(purchRFQCaseTable, wizard);

                // Reset the bid in progress status
                this.resetBidsInProgress(purchRFQCaseTable);

                // Delete related sealed records for RFQ with bid type Sealed
                if (purchRFQCaseTable.BidType == PurchRFQBidType::Sealed)
                {
                    PurchRFQSealedBidManager::deleteSealedRecords(purchRFQCaseTable);
                }

                // Delete lines marked for deletion
                PurchRFQCaseAmendment::deletePurchRFQLinesMarkedToBeDeleted(purchRFQCaseTable);
                PurchRFQCaseAmendment::deletePurchRFQCaseLinesMarkedToBeDeleted(purchRFQCaseTable);

                // Send the amended RFQ case
                PurchRFQCaseAmendment::performSendAction(purchRFQCaseTable, wizard);

                // Get the journal to send
                wizard.parmRFQVendorsJournalsToSend(purchRFQCaseTable.getLatestRFQJournalsForRFQVendors());

                if (isConfigurationkeyEnabled(configurationKeyNum(VendorCollaboration_PSN))
                        && PurchRFQPublishTable_PSN::findByCaseRecId(_purchRFQCaseTableRecId))
                {
                    PurchRFQCasePublish_PSN::startPublish(purchRFQCaseTable, wizard);
                }

                PurchRFQCaseSnapshot::construct().deleteSnapshot(purchRFQCaseTable);

                ttsCommit;

                if (wizard.parmSendNotificationEmail())
                {
                    this.sendEmails(wizard);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBidsInProgress</Name>
				<Source><![CDATA[
    protected void resetBidsInProgress(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQTable rfqTable;

        update_recordset rfqTable
            setting  IsBidInProgress = NoYes::No
            where rfqTable.RFQCaseId == _purchRFQCaseTable.RFQCaseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQLinesMarkedToBeDeleted</Name>
				<Source><![CDATA[
    private static void deletePurchRFQLinesMarkedToBeDeleted(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQLine        purchRFQLine;
        PurchRFQCaseLine    purchRFQCaseLine;

        while select forUpdate purchRFQLine
                exists join purchRFQCaseLine
                where purchRFQCaseLine.ToBeDeleted   == NoYes::Yes
                    && purchRFQCaseLine.RecId        == purchRFQLine.RFQCaseLineRefRecId
                    && purchRFQCaseLine.RFQCaseId    == _purchRFQCaseTable.RFQCaseId
        {
            purchRFQLine.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchRFQCaseLinesMarkedToBeDeleted</Name>
				<Source><![CDATA[
    private static void deletePurchRFQCaseLinesMarkedToBeDeleted(PurchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQCaseLine purchRFQCaseLine;

        while select forUpdate purchRFQCaseLine
                where purchRFQCaseLine.RFQCaseId    == _purchRFQCaseTable.RFQCaseId
                    && purchRFQCaseLine.ToBeDeleted == NoYes::Yes
        {
            purchRFQCaseLine.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performSendAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the send action run from the RFQ amendment wizard
    /// </summary>
    /// <param name = "_purchRFQCaseTable">RFQ case record</param>
    /// <param name = "_wizard">Instance of the RFQ amendment wizard</param>
    protected static void performSendAction(PurchRFQCaseTable _purchRFQCaseTable, PurchRFQAmendmentWizard _wizard)
    {
        Args args = new Args();
        args.record(_purchRFQCaseTable);
        args.parmEnumeration(PurchRFQUpdateType::Sent);
        args.parm('FormletterService.postRequestForQuoteSend');
        args.caller(_wizard);

        new MenuFunction(menuItemActionStr(PurchRFQFormLetterSend_Action), MenuItemType::Action).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performResendAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the re-send action run from the RFQ amendment wizard
    /// </summary>
    /// <param name = "_purchRFQCaseTable">RFQ case record</param>
    /// <param name = "_wizard">Instance of the RFQ amendment wizard</param>
    protected static void performResendAction(PurchRFQTable _purchRFQTable, PurchRFQAmendmentWizard _wizard)
    {
        Args args = new Args();
        args.record(_purchRFQTable);
        args.parmEnumeration(PurchRFQUpdateType::Resent);
        args.parm('FormletterService.postRequestForQuoteReSend');
        args.caller(_wizard);

        new MenuFunction(menuItemActionStr(PurchRFQFormLetter_Resend), MenuItemType::Action).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnAllReplies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns all replies related to the RFQ case i.e. performs the re-send action run
    /// </summary>
    /// <param name = "_purchRFQCaseTable">RFQ case record</param>
    /// <param name = "_wizard">Instance of the RFQ amendment wizard</param>
    protected static void returnAllReplies(purchRFQCaseTable _purchRFQCaseTable, PurchRFQAmendmentWizard _wizard)
    {
        PurchRFQTable purchRFQTable;
        PurchRFQLine purchRFQLine;
            
        // Delete all the alternate lines.
        delete_from purchRFQLine
            where purchRFQLine.IsAlternate == NoYes::Yes
            exists join purchRFQTable
            where purchRFQTable.RFQId == purchRFQLine.RFQId
               && purchRFQTable.RFQCaseId == _purchRFQCaseTable.RFQCaseId;

        // Find replies (in status received) and return them
        while select forUpdate purchRFQTable
                where purchRFQTable.RFQCaseId == _purchRFQCaseTable.RFQCaseId
                    && (purchRFQTable.StatusLow == PurchRFQStatus::Received
                            || purchRFQTable.StatusHigh == PurchRFQStatus::Received)
        {
            PurchRFQCaseAmendment::performResendAction(purchRFQTable, _wizard);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFQVendorsList</Name>
				<Source><![CDATA[
    private Set getRFQVendorsList(PurchRFQCaseId _purchRFQCaseId)
    {
        Set              vendorsList = new Set(Types::String);
        PurchRFQTable    purchRFQTable;

        while select VendAccount from purchRFQTable
            where purchRFQTable.RFQCaseId == _purchRFQCaseId
        {
            vendorsList.add(purchRFQTable.VendAccount);
        }

        return vendorsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRFQCaseAmendment</Name>
				<Source><![CDATA[
    private void updateRFQCaseAmendment(purchRFQCaseTable _purchRFQCaseTable)
    {
        PurchRFQAmendment purchRFQAmendment;

        select firstOnly forUpdate purchRFQAmendment
                order by purchRFQAmendment.createdDateTime desc
                where purchRFQAmendment.PurchRFQCaseTable == _purchRFQCaseTable.RecId;

        purchRFQAmendment.ProcessedBy = PurchRFQCaseTable::getCurrentWorker();
        purchRFQAmendment.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRFQCase</Name>
				<Source><![CDATA[
    private void updateRFQCase(purchRFQCaseTable _purchRFQCaseTable)
    {
        _purchRFQCaseTable.isAmended = NoYes::No;
        _purchRFQCaseTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQCaseAmendment construct()
    {
        return new PurchRFQCaseAmendment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PurchRFQCaseTable     purchRFQCaseTable;
        PurchRFQCaseAmendment purchRFQCaseAmendment;

        if (_args
            && _args.record()
            && _args.record().TableId == tableNum(PurchRFQCaseTable))
        {
            purchRFQCaseTable = _args.record() as PurchRFQCaseTable;

            purchRFQCaseAmendment = PurchRFQCaseAmendment::construct();

            switch (_args.menuItemName())
            {
                case menuitemActionStr(PurchRFQAmendmentCreate):
                    purchRFQCaseAmendment.create(purchRFQCaseTable.RecId);
                    FormDataUtil::getFormDataSource(purchRFQCaseTable).research(true);
                    break;

                case menuitemActionStr(PurchRFQAmendmentCancel):
                    purchRFQCaseAmendment.cancel(purchRFQCaseTable.RecId);
                    FormDataUtil::getFormDataSource(purchRFQCaseTable).research(true);
                    break;

                case menuitemActionStr(PurchRFQAmendmentFinalize):
                    purchRFQCaseAmendment.finalize(purchRFQCaseTable.RecId);
                    FormDataUtil::getFormDataSource(purchRFQCaseTable).research(true);
                    break;

                case menuitemActionStr(PurchRFQCancel):
                    if (purchRFQCaseTable.canCancelRFQ())
                    {
                        purchRFQCaseAmendment.cancelRFQ(purchRFQCaseTable);
                        FormDataUtil::getFormDataSource(purchRFQCaseTable).research(true);
                    }
                    break;
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEmails</Name>
				<Source><![CDATA[
    private void sendEmails(SysWizard _wizard)
    {   
        PurchRFQCaseId  rfqCaseId;
        BatchCaption    caption;
        str             infoStr;
        boolean         isRFQCancel;
        boolean         isEmailTemplateSetup;
        Map             emailKeys = new Map(Types::String, Types::String);
        Map             vendorEmails = new Map(Types::String, Types::String);
        Map             vendorJournals = new Map(Types::String, Types::Int64);
        
        using (var activityContext = this.instrumentationLogger().caseAmendment().sendEmails())
        {
            PurchRFQCaseTable purchRFQCaseTable;

            if (_wizard is PurchRFQCancelWizard)
            {
                isEmailTemplateSetup = PurchRFQParameters::find().CancelSysEmailTable ?  true : false;

                PurchRFQCancelWizard cancelWizard = _wizard as PurchRFQCancelWizard;

                purchRFQCaseTable = cancelWizard.parmPurchRFQCaseTable();

                if (isEmailTemplateSetup)
                {
                    rfqCaseId = purchRFQCaseTable.RFQCaseId;
                    caption = strFmt("@SCM:PurchRFQCaseAmendmentEmailCaptionForCancel", rfqCaseId);
                    infoStr = strFmt("@SCM:PurchRFQCancelEmailNotification", rfqCaseId);
                    isRFQCancel = true;

                    vendorEmails = cancelWizard.parmVendorsEmailsMap();
                    vendorJournals = this.getVendorJournalsToSend(cancelWizard.parmRFQVendorsJournalsToSend(),vendorEmails);

                    emailkeys = this.createCancelEmailMapping(purchRFQCaseTable,
                                                              cancelWizard.parmReasonForCancellation());
                }
            }
            else
            {
                isEmailTemplateSetup = PurchRFQParameters::find().SysEmailTable ?  true : false;

                PurchRFQAmendmentWizard amendmentWizard = _wizard as PurchRFQAmendmentWizard;

                purchRFQCaseTable = PurchRFQCaseTable::find(amendmentWizard.parmPurchRFQCaseId());

                if (isEmailTemplateSetup)
                {
                    rfqCaseId = amendmentWizard.parmPurchRFQCaseId();
                    caption = strFmt("@SYP4950130", rfqCaseId);
                    infoStr = strFmt("@SCM:PurchRFQAmendmentEmailNotification", rfqCaseId);

                    vendorEmails = amendmentWizard.parmVendorsEmailsMap();
                    vendorJournals = this.getVendorJournalsToSend(amendmentWizard.parmRFQVendorsJournalsToSend(),vendorEmails);

                    emailKeys = this.createAmendmentEmailMapping(PurchRFQCaseTable::find(rfqCaseId),
                                                                 amendmentWizard.parmReasonForAmendment(),
                                                                 amendmentWizard.parmReasonForReturn());
                }
            }
        
            using (var activityEmailContext = this.instrumentationLogger().caseAmendment().emailNotifier(purchRFQCaseTable, isEmailTemplateSetup, vendorEmails.elements()))
            {
                if (isEmailTemplateSetup && !vendorEmails.empty())
                {
                    PurchRFQAmendmendEmailNotifier purchRFQAmendmendEmailNotifierTask = new PurchRFQAmendmendEmailNotifier();
                    purchRFQAmendmendEmailNotifierTask.parmIsRFQCanceled(isRFQCancel);
                    purchRFQAmendmendEmailNotifierTask.parmPurchRFQCaseId(rfqCaseId);
                    purchRFQAmendmendEmailNotifierTask.parmEmailTagsRFQCaseMapping(emailKeys);
                    purchRFQAmendmendEmailNotifierTask.parmRFQVendorsList(this.getRFQVendorsList(rfqCaseId));
                    purchRFQAmendmendEmailNotifierTask.parmRFQVendorsEmails(vendorEmails);
                    purchRFQAmendmendEmailNotifierTask.parmRFQVendorsJournalsToSend(vendorJournals);
            
                    BatchInfo batchInfo = purchRFQAmendmendEmailNotifierTask.batchInfo();
                    batchInfo.parmCaption(caption);
                    batchInfo.parmGroupId(""); // The "Empty batch group".

                    BatchHeader batchHeader = BatchHeader::construct();
                    batchHeader.addTask(purchRFQAmendmendEmailNotifierTask);
                    batchHeader.save();

                    info(infoStr);
                }
                else
                {
                    str emailInfoMessage = "@SCM:PurchRFQEmailNotGeneratedInformation";
                    if (!isEmailTemplateSetup)
                    {
                        emailInfoMessage = "@SCM:PurchRFQEmailSetupInformation";
                    }

                    info(emailInfoMessage);

                    if (vendorEmails.empty())
                    {
                        info("@SCM:PurchRFQNoVendorEmailsProvided");
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorJournalsToSend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns vendor journals to be sent for cancelling or amending an RFQ. 
    /// </summary>
    /// <param name = "_vendorJournals"> Total vendor journals. </param>
    /// <param name = "_vendorEmails"> Vendor email addresses. </param>
    /// <returns>A map with vendor journals to send. </returns>
    protected Map getVendorJournalsToSend(Map _vendorJournals, Map _vendorEmails)
    {
        Map vendorJournalsToSend = new Map(Types::String, Types::Int64);
        MapEnumerator enumerator = _vendorJournals.getEnumerator();
        VendAccount vendorAccount;
        VendRFQJourRecId vendorJournal;
        
        setPrefix("@SCM:PurchRFQEmailNotificationFailed");
        setPrefix("@SCM:PurchRFQInvalidEmailVendors");
        while(enumerator.moveNext())
        {
            vendorAccount = enumerator.currentKey();
            vendorJournal = enumerator.currentValue();
            if(_vendorEmails.exists(vendorAccount))
            {
                vendorJournalsToSend.insert(vendorAccount, vendorJournal);
            }
            else
            {
                warning(vendorAccount);
            }
        }

        return vendorJournalsToSend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCancelEmailMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates email token mapping for Cancel RFQ
    /// </summary>
    /// <param name = "_purchRFQCase"> <c>PurchRFQCaseTable</c> table record.</param>
    /// <param name = "_reasonForCancellation"> Long description text specifying the reason for cancellation.</param>
    /// <returns> A map with key value pairs of the email tokens.</returns>
    protected Map createCancelEmailMapping(PurchRFQCaseTable _purchRFQCase,
                                           LongDescription _reasonForCancellation)
    {        
        if (_purchRFQCase.RecId)
        {
            Map emailKeys = this.createCommonEmailMapping(_purchRFQCase, PurchRFQCaseEmailSendingConstants::CancelledBy);
            
            if (emailkeys)
            {
                emailKeys.insert(PurchRFQCaseEmailSendingConstants::ReasonForCancellation, _reasonForCancellation);
                
                return emailKeys;
            }
            else
            {
                throw error(Error::wrongUseOfFunction(methodStr(PurchRFQCaseAmendment, createCancelEmailMapping)));
            }

        }
        else
        {
            throw error(strfmt("@SYS54195", methodStr(PurchRFQCaseAmendment, createCancelEmailMapping)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAmendmentEmailMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates email token mapping for Amendment RFQ
    /// </summary>
    /// <param name = "_purchRFQCase"> <c>PurchRFQCaseTable</c> table record.</param>
    /// <param name = "_reasonForAmendment"> Long description text specifying the reason for amendment.</param>
    /// <param name = "_reasonForBidReturns"> Long description text specifying the reason for bid returns.</param>
    /// <returns> A map with key value pairs of the email tokens.</returns>
    protected Map createAmendmentEmailMapping(PurchRFQCaseTable _purchRFQCase,
                                              LongDescription _reasonForAmendment,
                                              LongDescription _reasonForBidReturns)
    {        
        if (_purchRFQCase.RecId)
        {
            Map emailKeys = this.createCommonEmailMapping(_purchRFQCase, PurchRFQCaseEmailSendingConstants::AmendmentPreparedBy);

            if (emailKeys)
            {
                emailKeys.insert(PurchRFQCaseEmailSendingConstants::ReasonForAmendment, _reasonForAmendment);
                emailKeys.insert(PurchRFQCaseEmailSendingConstants::ReasonForBidReturn, _reasonForBidReturns);
                emailKeys.insert(PurchRFQCaseEmailSendingConstants::ExpiryDateTime, strFmt("@PublicSector:VendorEmailUTCTime", datetime2str(_purchRFQCase.ExpiryDateTime, DateFlags::FormatAll)));
            
                return emailKeys;
            }
            else
            {
                throw error(Error::wrongUseOfFunction(methodStr(PurchRFQCaseAmendment, createAmendmentEmailMapping)));
            }
        }
        else
        {
            throw error(strfmt("@SYS54195", methodStr(PurchRFQCaseAmendment, createAmendmentEmailMapping)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommonEmailMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates email token mapping common for amendments and cancelled RFQs
    /// </summary>
    /// <param name = "_purchRFQCase"> <c>PurchRFQCaseTable</c> table record.</param>
    /// <param name = "_preparedBy"> Long description text specifying the person who prepared the amendment or cancellation.</param>
    /// <returns> A map with key value pairs of the email tokens.</returns>    
    private Map createCommonEmailMapping(PurchRFQCaseTable _purchRFQCase,
                                         str _currentUserKey)
    {   
        if (_purchRFQCase.RecId)
        {
            Map emailKeys = new Map(Types::String, Types::String);
                        
            emailKeys.insert(PurchRFQCaseEmailSendingConstants::Company, CompanyInfo::findDataArea(curext()).Name);
            emailKeys.insert(_currentUserKey, DirPartyTable::findRec(DirPersonUser::current().PersonParty).Name);
            emailKeys.insert(PurchRFQCaseEmailSendingConstants::RFQCaseIdNum, _purchRFQCase.RFQCaseId);
            emailKeys.insert(PurchRFQCaseEmailSendingConstants::RFQCaseName, _purchRFQCase.Name);
            emailKeys.insert(PurchRFQCaseEmailSendingConstants::DateToday, date2StrUsr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll));
        
            return emailKeys;
        }
        else
        {
            throw error(strfmt("@SYS54195", methodStr(PurchRFQCaseAmendment, createCommonEmailMapping)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private PurchRFQInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchRFQInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>