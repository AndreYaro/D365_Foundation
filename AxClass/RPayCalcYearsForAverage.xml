<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCalcYearsForAverage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates years for average earning.
/// </summary>
class RPayCalcYearsForAverage
{
    RHRMEmplId      emplId;
    Counter         yearsToCalc;
    ReportPeriod_RU currentPeriod;
    boolean         recalcByPrevYears, exclDaysApplicable, onlyCurrentEmployer;

    Map             yearsAmountMap;

    #define.DaysInYear(365)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes calculation.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calc()
    {
        Counter                         i, yrPeriod;
        RPayFundEmplSumTotal            fundEmplSumTotal, fundEmplSumTotalYr;
        Factor                          avgDayFactor;
        Map                             yrLawMap, yrChangeMap;
        MapEnumerator                   yrChangeMe, yrLawMe;
        Set                             yr2Change;
        RPayAverageEarnEmplPeriodTable  sickList;
        container                       conKey, conValue;

        yrLawMap     = new Map(Types::Container, Types::Container);
        yrChangeMap  = new Map(Types::Container, Types::Container);
        yr2Change    = new Set(Types::Integer);

        for (i = 1; i <= yearsToCalc; ++i)
        {
            yrPeriod = year(currentPeriod) - i;
            fundEmplSumTotal = RPayFundEmplSumTotal::findByYr(yrPeriod, emplId, onlyCurrentEmployer);

            avgDayFactor = this.calcAvgDayFactor(yrPeriod, fundEmplSumTotal);
            yrLawMap.insert([avgDayFactor, yrPeriod], [fundEmplSumTotal.Amount, fundEmplSumTotal.ExcludeDays]);

            select firstonly recId from fundEmplSumTotal
                    where fundEmplSumTotal.emplId == emplId
                    &&    fundEmplSumTotal.Include
                    &&    fundEmplSumTotal.IncludeExtYear
                    &&    fundEmplSumTotal.Yr == yrPeriod;

            if (fundEmplSumTotal.RecId && !onlyCurrentEmployer)
            {
                yr2Change.add(yrPeriod);
            }
            else
            {
                select firstonly recId from sickList
                    where sickList.EmplId        == emplId
                    &&   (sickList.RpayIllType   == RpayIllType::maternity_leave
                    ||    sickList.RpayIllType   == RpayIllType::ChildVacation)
                    &&    sickList.Included
                    &&    sickList.StartDate     <= mkdate(31, 12, yrPeriod)
                    &&    sickList.EndDate       >= mkdate(1, 1, yrPeriod);

                if (sickList.RecId)
                {
                    yr2Change.add(yrPeriod);
                }
            }
        }

        if (recalcByPrevYears)
        {
            while select yr from fundEmplSumTotalYr
                group by yr
                where fundEmplSumTotalYr.emplId == emplId
                &&    fundEmplSumTotalYr.Include
                &&    fundEmplSumTotalYr.Yr < yrPeriod
                &&    (fundEmplSumTotalYr.VendAccount == "" || !onlyCurrentEmployer)
            {
                fundEmplSumTotal = RPayFundEmplSumTotal::findByYr(fundEmplSumTotalYr.Yr, emplId, onlyCurrentEmployer);

                avgDayFactor = this.calcAvgDayFactor(fundEmplSumTotalYr.Yr, fundEmplSumTotal);
                yrChangeMap.insert([-avgDayFactor, fundEmplSumTotalYr.Yr], [fundEmplSumTotal.Amount, fundEmplSumTotal.ExcludeDays]);
            }
        }

        yearsAmountMap = new Map(Types::Integer, Types::Container);

        yrChangeMe = yrChangeMap.getEnumerator();
        yrLawMe    = yrLawMap.getEnumerator();

        while (yrLawMe.moveNext())
        {
            conKey   = yrLawMe.currentKey();
            conValue = yrLawMe.currentValue();

            if (yr2Change.in(conpeek(conKey, 2)) && yrChangeMe.moveNext() && (abs(conpeek(yrChangeMe.currentKey(), 1)) > conpeek(conKey, 1)))
            {
                conValue = yrChangeMe.currentValue();
                conKey   = yrChangeMe.currentKey();
            }

            yearsAmountMap.insert(conpeek(conKey, 2), conValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAvgDayFactor</Name>
				<Source><![CDATA[
        private Factor calcAvgDayFactor(Counter _yrPeriod, RPayFundEmplSumTotal _fundEmplSumTotal)
    {
        Days daysInYr = this.calendarDaysYr(_yrPeriod);

        if (exclDaysApplicable && ((daysInYr - _fundEmplSumTotal.ExcludeDays) > 0))
        {
            return _fundEmplSumTotal.Amount / (daysInYr - _fundEmplSumTotal.ExcludeDays);
        }
        else
        {
            return _fundEmplSumTotal.Amount / #DaysInYear;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendarDaysYr</Name>
				<Source><![CDATA[
        private Days calendarDaysYr(Counter _yrPeriod)
    {
        return mkDate(31, 12, _yrPeriod) - mkDate(1, 1, _yrPeriod) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first year for calculation.
    /// </summary>
    /// <returns>
    /// The first year for calculation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Yr getFirstYear()
    {
        MapEnumerator   yearsAmountMe;
        Yr              firstYr;

        this.calc();

        yearsAmountMe = yearsAmountMap.getEnumerator();

        if (yearsAmountMe.moveNext())
        {
            firstYr = yearsAmountMe.currentKey();
        }

        return firstYr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYearsAmountMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the full list of years for calculation.
    /// </summary>
    /// <returns>
    /// The full list of years for calculation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getYearsAmountMap()
    {
        this.calc();

        return yearsAmountMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        ReportPeriod_RU parmCurrentPeriod(ReportPeriod_RU _currentPeriod = currentPeriod)
    {
        currentPeriod = _currentPeriod;
        return currentPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        RHRMEmplId parmEmplId(RHRMEmplId _emplId = emplId)
    {
        emplId = _emplId;
        return emplId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExclDaysApplicable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        boolean parmExclDaysApplicable(boolean _exclDaysApplicable = exclDaysApplicable)
    {
        exclDaysApplicable = _exclDaysApplicable;
        return exclDaysApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyCurrentEmployer</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        boolean parmOnlyCurrentEmployer(boolean _onlyCurrentEmployer = onlyCurrentEmployer)
    {
        onlyCurrentEmployer = _onlyCurrentEmployer;
        return onlyCurrentEmployer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalcByPrevYears</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        boolean parmRecalcByPrevYears(boolean _recalcByPrevYears = recalcByPrevYears)
    {
        recalcByPrevYears = _recalcByPrevYears;
        return recalcByPrevYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmYearsToCalc</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        Counter parmYearsToCalc(Counter _yearsToCalc = yearsToCalc)
    {
        yearsToCalc = _yearsToCalc;
        return yearsToCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>RPayCalcYearsForAverage</c> class.
    /// </summary>
    /// <param name="_emplId">
    /// The code of employee.
    /// </param>
    /// <param name="_yearsToCalc">
    /// The number of years to calculate.
    /// </param>
    /// <param name="_currentPeriod">
    /// The current period.
    /// </param>
    /// <param name="_recalcByPrevYears">
    /// if true then some years could be replaced by another.
    /// </param>
    /// <param name="_exclDaysApplicable">
    /// If true then the excluded days decrease days.
    /// </param>
    /// <param name="_onlyCurrentEmployer">
    /// If true then calculation is performing for current employer.
    /// </param>
    /// <returns>
    /// The instance of <c>RPayCalcYearsForAverage</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RPayCalcYearsForAverage construct(
        RHRMEmplId      _emplId,
        Counter         _yearsToCalc,
        ReportPeriod_RU _currentPeriod,
        boolean         _recalcByPrevYears = true,
        boolean         _exclDaysApplicable = false,
        boolean         _onlyCurrentEmployer = false)
    {
        RPayCalcYearsForAverage rPayCalcYearsForAverage = new RPayCalcYearsForAverage();

        rPayCalcYearsForAverage.parmEmplId(_emplId);
        rPayCalcYearsForAverage.parmYearsToCalc(_yearsToCalc);
        rPayCalcYearsForAverage.parmCurrentPeriod(_currentPeriod);
        rPayCalcYearsForAverage.parmRecalcByPrevYears(_recalcByPrevYears);
        rPayCalcYearsForAverage.parmExclDaysApplicable(_exclDaysApplicable);
        rPayCalcYearsForAverage.parmOnlyCurrentEmployer(_onlyCurrentEmployer);

        return rPayCalcYearsForAverage;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>