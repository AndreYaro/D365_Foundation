<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcTax_Invoice4Paym_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class SalesCalcTax_Invoice4Paym_RU extends SalesCalcTax
{
    CustInvoice4PaymJour_RU  custInvoice4PaymJour;
    CustInvoice4PaymTrans_RU custInvoice4PaymTrans;
    SalesTable               salesTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets currency code.
    /// </summary>
    /// <returns><c>CurrencyCode</c> object.</returns>
    public CurrencyCode currencyCode()
    {
        return custInvoice4PaymJour.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets exchange rate.
    /// </summary>
    /// <param name = "_date">Date.</param>
    /// <returns><c>CustExchRate</c> object.</returns>
    public CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(custInvoice4PaymJour.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets seconrary exchange rate.
    /// </summary>
    /// <param name = "_date">Date</param>
    /// <returns><c>ExchrateSecondary</c> object.</returns>
    public ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return(custInvoice4PaymJour.ExchRateSecondary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes cursor.
    /// </summary>
    public void initCursor()
    {
        select nofetch forupdate custInvoice4PaymTrans
            where custInvoice4PaymTrans.SalesId          == custInvoice4PaymJour.SalesId        &&
                  custInvoice4PaymTrans.Invoice4PaymId   == custInvoice4PaymJour.Invoice4PaymId &&
                  custInvoice4PaymTrans.Invoice4PaymDate == custInvoice4PaymJour.Invoice4PaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets markup.
    /// </summary>
    /// <param name = "_rounded">Defines rounded or not.</param>
    /// <param name = "deductTaxForTaxIncluded">Defines if deduction is included.</param>
    /// <returns></returns>
    public MarkupAmount markupAmount(boolean _rounded = true, boolean deductTaxForTaxIncluded = true)
    {
        return markupTrans.CalculatedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns default dimension for markup posting
    /// </summary>
    /// <returns>
    /// Default dimension for markup posting
    /// </returns>
    public DimensionDefault markupDefaultDimension()
    {
        return salesLine           ?
               salesLine.DefaultDimension :
               custInvoice4PaymJour.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new instance of <c>SalesCalcTax_Invoice4Paym_RU</c> class
    /// </summary>
    /// <param name="_custInvoice4PaymJour">
    /// <c>CustInvoice4PaymJour_RU</c> record tax calculated for
    /// </param>
    public void new(CustInvoice4PaymJour_RU _custInvoice4PaymJour)
    {
        super(_custInvoice4PaymJour);

        custInvoice4PaymJour = _custInvoice4PaymJour;
        salesTable           = custInvoice4PaymJour.salesTable();
        update               = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common  nextLine()
    {
        next custInvoice4PaymTrans;

        this.getSalesLine();
        this.initCursorMarkup(custInvoice4PaymTrans.TableId, custInvoice4PaymTrans.RecId);

        return custInvoice4PaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns record id of originator for <c>MarkupTrans</c>
    /// </summary>
    /// <returns>
    /// Record id of originator for <c>MarkupTrans</c>
    /// </returns>
    public RecID salesMarkupRecId()
    {
        return markupTrans.OrigRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesMarkupTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns table id of originator for <c>MarkupTrans</c>
    /// </summary>
    /// <returns>
    /// Table id of originator for <c>MarkupTrans</c>
    /// </returns>
    public tableId salesMarkupTableId()
    {
        return markupTrans.OrigTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sales table recoed Id.
    /// </summary>
    /// <returns><c>RecID</c> object.</returns>
    public RecID salesTableRecID()
    {
        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableTableID</Name>
				<Source><![CDATA[
    tableId  salesTableTableID()
    {
        return salesTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets tax amount.
    /// </summary>
    /// <param name = "_taxWriteCode"><c>TaxWriteCode</c> object.</param>
    /// <param name = "_amountCur">Amount in transaction currency.</param>
    public void setTax(TaxWriteCode _taxWriteCode,
                       AmountCur    _amountCur)
    {
        container dummy()
        {
            return [ _taxWriteCode ];
        }

        custInvoice4PaymTrans.TaxAmount    = _amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line amount.
    /// </summary>
    /// <param name = "_rounded">Defines if amount is rounded.</param>
    /// <returns><c>AmountCur</c> object.</returns>
    public AmountCur transLineAmount(boolean _rounded = true)
    {
        return custInvoice4PaymTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets quantity.
    /// </summary>
    /// <returns><c>SalesQty</c> object.</returns>
    public SalesQty transQty()
    {
        return custInvoice4PaymTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transaction Id.
    /// </summary>
    /// <returns><c>InventTransId</c> object.</returns>
    public InventTransId transTransId()
    {
        return custInvoice4PaymTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets triangulation.
    /// </summary>
    /// <param name = "_date">Date.</param>
    /// <returns><c>EUROTriangulation</c> object.</returns>
    public EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return custInvoice4PaymJour.Triangulation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>