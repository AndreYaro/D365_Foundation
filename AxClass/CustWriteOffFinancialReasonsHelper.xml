<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustWriteOffFinancialReasonsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustWriteOffFinancialReasonsHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWriteOffReasonCodeByAccountCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves write-off reason setup for a given customer and company.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account.
    /// </param>
    /// <param name="_companyId">
    /// The <c>CompanyId</c> for which the write-off reason code is required; optional.
    /// </param>
    /// <returns>
    /// Returns <c>CustWriteOffFinancialReasonsSetup</c> record for a given customer and company.
    /// </returns>
    public static CustWriteOffFinancialReasonsSetup getWriteOffReasonCodeByAccountCompany(AccountNum _custAccount, CompanyId _companyId = curExt())
    {
        CustWriteOffFinancialReasonsSetup writeOffReasonCode;

        //Check if the customer account has a default writeoff setup
        CustTable custTable = CustTable::findByCompany(_companyId, _custAccount);
        writeOffReasonCode = CustWriteOffFinancialReasonsSetup::findByRecID(custTable.CustWriteOffRefRecId);

        if (!writeOffReasonCode)
        {
            //If the writeoff is not setup on the customer or customer group, return the default write-off setup for the company
            writeOffReasonCode = CustWriteOffFinancialReasonsSetup::findDefaultWriteOffReasonByCompany(_companyId);
        }

        return writeOffReasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeMarkedAsDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a customer write-off setup can be marked as default.
    /// </summary>
    /// <param name="_custWriteOffFinancialReasonsSetup">
    /// The <c>CustWriteOffFinancialReasonsSetup</c> that needs to be evaluated.
    /// </param>
    /// <returns>
    /// Returns boolean value that determines if a customer write-off setup can be marked as default.
    /// </returns>
    public static boolean canBeMarkedAsDefault(CustWriteOffFinancialReasonsSetup _custWriteOffFinancialReasonsSetup)
    {
        boolean canBeMarkedAsDefault = true;

        CustWriteOffFinancialReasonsSetup custDefaultWriteOffSetup = CustWriteOffFinancialReasonsSetup::findDefaultWriteOffReasonByCompany(_custWriteOffFinancialReasonsSetup.getCompany());

        if (custDefaultWriteOffSetup && (custDefaultWriteOffSetup.Reason != _custWriteOffFinancialReasonsSetup.Reason))
        {
            canBeMarkedAsDefault = false;
        }

        return canBeMarkedAsDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_skipCheckZeroAmountDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method skips the zero amount line validation on ledger journal lines.
    /// </summary>
    /// <param name="_ledgerJournalTrans"></param>
    /// <param name="_assetTransType"></param>
    /// <param name="_eventHandlerResult"></param>
    [SubscribesTo(tableStr(LedgerJournalTrans), delegateStr(LedgerJournalTrans, skipCheckZeroAmountDelegate))]
    public static void LedgerJournalTrans_skipCheckZeroAmountDelegate(LedgerJournalTrans _ledgerJournalTrans, AssetTransTypeJournal _assetTransType, EventHandlerResult _eventHandlerResult)
    {
        boolean result = _eventHandlerResult.result() || (_ledgerJournalTrans.TransactionType == LedgerTransType::WriteOff);
        _eventHandlerResult.result(result);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>