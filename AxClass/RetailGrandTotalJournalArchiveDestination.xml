<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGrandTotalJournalArchiveDestination</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Destination for the archive.
/// </summary>
public final class RetailGrandTotalJournalArchiveDestination implements ERIFileDestination, RetailIDigitalSignatureManagerHost
{
    private ERIFileDestination originDestination;
    private RetailGrandTotalJournalArchiveContract archiveContract;
    private RetailIDigitalSignatureManager digitalSignatureManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>saveFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves file in destination.
    /// </summary>
    /// <param name = "_stream">A stream to save.</param>
    /// <param name = "_filePath">A file path.</param>
    /// <returns>Saved stream.</returns>
    public System.IO.Stream saveFile(System.IO.Stream _stream, System.String _filePath)
    {
        System.IO.Stream ret;

        using (System.IO.Stream signature = this.getSignature(_stream))
        {
            ERFileDestinationArchive dataAndSignatureArchive = new ERFileDestinationArchive();
            dataAndSignatureArchive.saveFile(_stream, _filePath);
            dataAndSignatureArchive.saveFile(signature, this.getSignatureFilePath(_filePath));

            ret = originDestination.saveFile(dataAndSignatureArchive.GetStream(), this.getDataAndSignatureArchiveFilePath(_filePath));
            
            this.saveHistory(signature, _filePath);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFileStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a stream for new file.
    /// </summary>
    /// <param name = "_filePath">Name of new file.</param>
    /// <returns>Stream for new file.</returns>
    public System.IO.Stream newFileStream(System.String _filePath)
    {
        return originDestination.newFileStream(_filePath);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the archive destination.
    /// </summary>
    /// <param name = "_originDestination">The original destination.</param>
    /// <param name = "_archiveContract">The archive contract.</param>
    /// <returns>The archive destination.</returns>
    public static ERIFileDestination construct(ERIFileDestination _originDestination, RetailGrandTotalJournalArchiveContract _archiveContract)
    {
        RetailGrandTotalJournalArchiveDestination archiveDestination = new RetailGrandTotalJournalArchiveDestination();
        archiveDestination.originDestination = _originDestination;
        archiveDestination.archiveContract = _archiveContract;

        return archiveDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignatureFilePath</Name>
				<Source><![CDATA[
    private System.String getSignatureFilePath(System.String _dataPath)
    {
        return System.IO.Path::GetFileNameWithoutExtension(_dataPath) + '.sign';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAndSignatureArchiveFilePath</Name>
				<Source><![CDATA[
    private System.String getDataAndSignatureArchiveFilePath(System.String _dataPath)
    {
        return System.IO.Path::GetFileNameWithoutExtension(_dataPath) + '.zip';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignature</Name>
				<Source><![CDATA[
    private System.IO.Stream getSignature(System.IO.Stream _stream)
    {
        if (!_stream)
        {
            throw new System.NullReferenceException("_stream");
        }

        this.validateHashAlgorithm();

        if (_stream.CanSeek)
        {
            _stream.Seek(0, System.IO.SeekOrigin::Begin);
        }

        System.Byte[] dataToSign;
        using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream())
        {
            _stream.CopyTo(memoryStream);
            dataToSign  = memoryStream.ToArray();
        }

        System.String signatureAsString = this.getDigitalSignatureManager().hashAndSignBytes(dataToSign);

        System.IO.Stream signatureAsStream = new System.IO.MemoryStream(
            System.Text.Encoding::GetEncoding(this.getDigitalSignatureManager().getEncoding()).GetBytes(signatureAsString));

        return signatureAsStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDigitalSignatureManager</Name>
				<Source><![CDATA[
    public RetailIDigitalSignatureManager getDigitalSignatureManager()
    {
        if (!digitalSignatureManager)
        {
            digitalSignatureManager = RetailDigitalSignatureManager::constructFromParms();
        }

        return digitalSignatureManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDigitalSignatureManager</Name>
				<Source><![CDATA[
    public void setDigitalSignatureManager(RetailIDigitalSignatureManager _digitalSignatureManager)
    {
        digitalSignatureManager = _digitalSignatureManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveHistory</Name>
				<Source><![CDATA[
    private void saveHistory(System.IO.Stream _signature, System.String _filePath)
    {
        if (originDestination is ERFileDestinationMemory)
        {
            return;
        }

        if (RetailGrandTotalJournalArchiveHistory::existFileName(_filePath))
        {
            return;
        }

        _signature.Seek(0, System.IO.SeekOrigin::Begin);
        
        RetailGrandTotalJournalArchiveHistory history;
        history.RetailGrandTotalJourTable = archiveContract.parmGrandTotalJournalTableRecId();
        history.FileName = _filePath;
        history.Signature = new System.IO.StreamReader(_signature).ReadToEnd();
        history.Thumbprint = this.getDigitalSignatureManager().getCertificateThumbprint();
        history.HashAlgorithm = this.getDigitalSignatureManager().getDigestAlgorithm();
        history.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHashAlgorithm</Name>
				<Source><![CDATA[
    private void validateHashAlgorithm()
    {
        RetailGrandTotalJournalTable journalTable = RetailGrandTotalJournalTable::find(archiveContract.parmGrandTotalJournalTableRecId());
        if (journalTable)
        {
            var signatureHelper = new RetailGrandTotalJournalSignatureHelper(journalTable);
            RetailHashAlgorithm hashAlgorithm = this.getDigitalSignatureManager().getDigestAlgorithm();
            signatureHelper.validateHashAlgorithm(hashAlgorithm);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>