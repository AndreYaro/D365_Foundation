<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SplitPaymentMandatoryRuleEngine_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SplitPaymentMandatoryRuleEngine_Sales</c> class is extended class for updating paymMode 
/// in Sales order.
/// </summary>
public class SplitPaymentMandatoryRuleEngine_Sales extends SplitPaymentMandatoryRuleEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSalesTable</Name>
				<Source><![CDATA[
    private SalesTable getSalesTable()
    {
        return this.parmCommonTable() as SalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRuleForOrder</Name>
				<Source><![CDATA[
    protected SplitPaymentMandatoryRule_PL findRuleForOrder(Amount _totalAmount, PaymMode _paymMode = '', PaymSpec _paymSpec = '')
    {
        SplitPaymentMandatoryRule_PL rule;
        SplitPaymentMandatoryRule_PL voluntaryRule;
        SalesTable salesTableLoc = this.getSalesTable();
        SalesLine salesLine;
        IntrastatCountryRegionParameters intrastatCountryRegionParameters = IntrastatCountryRegionParameters::find(salesTableLoc.custTable_InvoiceAccount().postalAddress().CountryRegionId);
        boolean isDomesticPartner = intrastatCountryRegionParameters && intrastatCountryRegionParameters.CountryRegionType == CountryRegionType::Domestic;

        while select ItemId from salesLine
            group by salesLine.ItemId
            where salesLine.SalesId == salesTableLoc.SalesId
        {
            SplitPaymentMandatoryItemGroupId_PL itemGroupId = SplitPaymentMandatoryItemGroup_PL::findGroupByItem(
                this.getDocumentType(),
                salesLine.ItemId);

            rule = null;

            if (isDomesticPartner)
            {
                rule = SplitPaymentMandatoryRule_PL::findByContract(SplitPaymentMandatoryRuleContract::construct()
                    .withDocumentType(this.getDocumentType())
                    .withAmount(_totalAmount)
                    .withItemGroupId(itemGroupId)
                    .withCountryType(SplitPaymentMandatoryCountryRegionType_PL::Domestic)
                    .withCurrencyCode(salesTableLoc.CurrencyCode)
                    .withSearchByTaxItemGroup(false));
            }

            if (!rule)
            {
                rule = SplitPaymentMandatoryRule_PL::findByContract(SplitPaymentMandatoryRuleContract::construct()
                    .withDocumentType(this.getDocumentType())
                    .withAmount(_totalAmount)
                    .withItemGroupId(itemGroupId)
                    .withCountryType(SplitPaymentMandatoryCountryRegionType_PL::All)
                    .withCurrencyCode(salesTableLoc.CurrencyCode)
                    .withSearchByTaxItemGroup(false));
            }

            if (!voluntaryRule && rule && rule.VoluntarySplitPayment == NoYes::Yes)
            {
                voluntaryRule = rule;
            }

            if (rule && rule.VoluntarySplitPayment == NoYes::No)
            {
                break;
            }
        }

        if (!rule && voluntaryRule)
        {
            rule = voluntaryRule;
        }

        return rule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    protected Amount getAmount()
    {
        SalesTotals salesTotals = SalesTotals::construct(this.getSalesTable());
        salesTotals.calc();
        return salesTotals.totalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommonTable</Name>
				<Source><![CDATA[
    protected void updateCommonTable(PaymMode _paymMode, PaymSpec _paymSpec)
    {
        SalesTable salesTableUpd;

        ttsbegin;

        salesTableUpd = SalesTable::findRecId(this.getSalesTable().RecId, true);

        salesTableUpd.PaymMode = _paymMode;
        salesTableUpd.PaymSpec = _paymSpec;

        if (salesTableUpd.validateWrite())
        {
            salesTableUpd.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPaymMode</Name>
				<Source><![CDATA[
    protected PaymMode getCurrentPaymMode()
    {
        return this.getSalesTable().PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    protected SplitPaymentDocumentType_PL getDocumentType()
    {
        return SplitPaymentDocumentType_PL::Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSplitPayment</Name>
				<Source><![CDATA[
    protected boolean isSplitPayment()
    {
        return this.getCurrentSplitPayment() == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SplitPaymentMandatoryRuleEngine_Sales construct()
    {
        return new SplitPaymentMandatoryRuleEngine_Sales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPaymModeSpec</Name>
				<Source><![CDATA[
    protected PaymSpec getCurrentPaymModeSpec()
    {
        return this.getSalesTable().PaymSpec;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>