<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionTransformerWarranty</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

/// <summary>
/// This class <c>RetailTransactionTransformerWarranty</c> is used to transform warranty transactions into order info object.
/// </summary>
internal static class RetailTransactionTransformerWarranty
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>readWarrantyTransactionIntoItemInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set warrantable information into item information.
    /// </summary>
    /// <param name = "_itemInfo">item information</param>
    /// <param name = "transactionTable">The <c>RetailTransactionTable</c> record buffer.</param>
    /// <param name = "_salesTrans">The <c>RetailTransactionSalesTrans</c> record buffer.</param>
    internal static void readWarrantyTransactionIntoItemInfo(
        ItemInfo _itemInfo,
        RetailTransactionTable _transactionTable,
        RetailTransactionSalesTrans _salesTrans)
    {
        // Called for async quote / order creation
        if (WarrantyFeatureExposure::isWarrantySalesViaCustomerOrderFeatureEnabled()
            && (_transactionTable.type == RetailTransactionType::AsyncCustomerQuote
            || _transactionTable.type == RetailTransactionType::AsyncCustomerOrder
            || _transactionTable.type == RetailTransactionType::PendingSalesOrder))
        {
            RetailWarrantyTransactionSales warrantyTrans;

            select firstonly warrantyTrans
                where warrantyTrans.WarrantyChannel == _salesTrans.Channel
                    && warrantyTrans.WarrantyStore == _salesTrans.store
                    && warrantyTrans.WarrantyTerminalId == _salesTrans.terminalId
                    && warrantyTrans.WarrantyTransactionId == _salesTrans.transactionId
                    && warrantyTrans.WarrantyLineNum == _salesTrans.lineNum
                    && warrantyTrans.Action == WarrantySalesAction::Add;

            if (warrantyTrans)
            {
                _itemInfo.IsWarranty = true;

                // warrantable is in another tranaction, tries to find sales order Id for it.
                if (warrantyTrans.WarrantableTransactionId != warrantyTrans.WarrantyTransactionId)
                {
                    _itemInfo.WarrantableOrderId = RetailTransactionTable::find(
                        warrantyTrans.WarrantableTransactionId,
                        warrantyTrans.WarrantableStore,
                        warrantyTrans.WarrantableTerminalId).salesOrderId;

                    // log the data if order Id is not found for warrantied in another transaction.
                    if(!_itemInfo.WarrantableOrderId)
                    {
                        eventSource.EventWriteWarrantyTransformerOrderIdNotFoundForWarrantiedInAnotherTrans(warrantyTrans.RecId);
                    }
                }

                _itemInfo.WarrantableChannelId = warrantyTrans.WarrantableChannel;
                _itemInfo.WarrantableStore = warrantyTrans.WarrantableStore;
                _itemInfo.WarrantableTerminalId = warrantyTrans.WarrantableTerminalId;
                _itemInfo.WarrantableTransactionId = warrantyTrans.WarrantableTransactionId;
                _itemInfo.WarrantableLineNumber = warrantyTrans.WarrantableLineNum;
                _itemInfo.WarrantableSerialNumber = warrantyTrans.WarrantableSerialId;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>