<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsReservationHierarchyLevelStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReservationHierarchyLevelStrategy</c> class is used to determine on what hierarchy levels reservations should be done.
/// </summary>
abstract class whsReservationHierarchyLevelStrategy
{
    #WHSRESERVATIONHIERARCHY
    InventTable                         inventTable;
    InventDim                           inventDimReservationCriteria;
    WHSReservationHierarchyProvider     reservationHierarchyProvider;
    InventDimGroupSetup                 inventDimGroupSetup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReservableHierarchyListTopDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of reservable dimensions in the reservation hierarchy based on the transaction type which is sorted top down.
    /// </summary>
    /// <returns>
    /// A <c>List</c> containing  the inventory dimensions that can be reserved for the transaction which is sorted top down.
    /// </returns>
    public abstract List getReservableHierarchyListTopDown()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationHierarchyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>WHSReservationHierarchyLevel</c> level for the strategy.
    /// </summary>
    /// <returns>
    /// The <c>WHSReservationHierarchyLevel</c> level for the strategy.
    /// </returns>
    public abstract WHSReservationHierarchyLevel getReservationHierarchyLevel()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimGroupSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create inventory dimensions group setup.
    /// </summary>
    /// <returns>
    /// The inventory dimensions group setup.
    /// </returns>
    protected InventDimGroupSetup inventDimGroupSetup()
    {
        if (!inventDimGroupSetup)
        {
            inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
        }

        return inventDimGroupSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDetermineMissingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the strategy requires any missing dimensions to be determined.
    /// </summary>
    /// <returns>
    /// returns true.
    /// </returns>
    public boolean mustDetermineMissingDimensions()
    {
        boolean mustDetermineMissingDimensions = true;

        if (!WHSReservationHierarchyInventDimUtil::inventDimHasBlankValues(inventDimReservationCriteria,this.getReservableHierarchyListTopDown()))
        {
            mustDetermineMissingDimensions = false;
        }

        return mustDetermineMissingDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyReserveOrderedAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if only ordered available should be included for reservations.
    /// </summary>
    /// <returns>
    /// true if only ordered available should be included for reservations; Otherwise, false.
    /// </returns>
    public abstract boolean onlyReserveOrderedAvailable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyReservePhysicalAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if only physical available should be included for reservations.
    /// </summary>
    /// <returns>
    /// true if only physical available should be included for reservations; Otherwise, false.
    /// </returns>
    public abstract boolean onlyReservePhysicalAvailable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimReservationCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimReservationCriteria(InventDim _inventDimReservationCriteria = inventDimReservationCriteria)
    {
        inventDimReservationCriteria = _inventDimReservationCriteria;

        return inventDimReservationCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationHierarchyProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>WHSReservationHierarchyProvider</c> instance.
    /// </summary>
    /// <returns>
    /// A <c>WHSReservationHierarchyProvider</c> instance
    /// </returns>
    protected WHSReservationHierarchyProvider reservationHierarchyProvider()
    {
        if (!reservationHierarchyProvider)
        {
            reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        }

        return reservationHierarchyProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimGroupSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets dimension groups setup field of the instance.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    /// Dimension groups setup to be set.
    /// </param>
    public void setInventDimGroupSetup(InventDimGroupSetup _inventDimGroupSetup)
    {
        inventDimGroupSetup = _inventDimGroupSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStrategiesToListFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>WHSReservationHierarchyLevelStrategy</c> instance based on the movement.
    /// </summary>
    /// <param name="_movement">
    /// An <c>InventMovement</c> instance.
    /// </param>
    /// <param name="_inventDimReservationCriteria">
    /// The dimensions that are used for reservation.
    /// </param>
    /// <param name="_strategyList">
    /// A list that the strategies will be added to.
    /// </param>
    [SysObsolete('Please use method on WHSReservationHierarchyLevelStrategyTypeProvider class instead', true, 31\03\2018)]
    public static void addStrategiesToListFromMovement(
        InventMovement  _movement,
        InventDim       _inventDimReservationCriteria,
        List            _strategyList)
    {
        List allStrategies = WHSReservationHierarchyLevelStrategyTypesProvider::newFromParameters(_movement, _inventDimReservationCriteria).allStrategiesList();
        
        _strategyList.appendList(allStrategies);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromStrategyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>WHSReservationHierarchyLevelStrategy</c> instance based on the <c>WHSReservationHierarchyLevelStrategyType</c> type.
    /// </summary>
    /// <param name="_whsReservationHierarchyLevelStrategyType">
    /// An <c>WHSReservationHierarchyLevelStrategyType</c> type.
    /// </param>
    /// <param name="_inventTable">
    /// The item to instantiate the strategy for.
    /// </param>
    /// <param name="_inventDimReservationCriteria">
    /// The dimensions that are used for reservation.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// The dimension group setup for the item. Optional.
    /// </param>
    /// <returns>
    /// A <c>WHSReservationHierarchyLevelStrategy</c> instance.
    /// </returns>
    public static WHSReservationHierarchyLevelStrategy newFromStrategyType(
        WHSReservationHierarchyLevelStrategyType _whsReservationHierarchyLevelStrategyType,
        InventTable                             _inventTable,
        InventDim                               _inventDimReservationCriteria,
        InventDimGroupSetup                     _inventDimGroupSetup = null //set this for performance reasons if it is already available
        )
    {
        WHSReserveHierarchyLvlStratAttribute    whsReserveHierarchyLvlStratAttribute;
        WHSReservationHierarchyLevelStrategy    whsReservationHierarchyLevelStrategy;

        whsReserveHierarchyLvlStratAttribute = new WHSReserveHierarchyLvlStratAttribute(_whsReservationHierarchyLevelStrategyType);

        whsReservationHierarchyLevelStrategy = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSReservationHierarchyLevelStrategy),whsReserveHierarchyLvlStratAttribute);

        if (!whsReservationHierarchyLevelStrategy)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        whsReservationHierarchyLevelStrategy.parmInventTable(_inventTable);
        whsReservationHierarchyLevelStrategy.parmInventDimReservationCriteria(_inventDimReservationCriteria);
        whsReservationHierarchyLevelStrategy.setInventDimGroupSetup(_inventDimGroupSetup);

        return whsReservationHierarchyLevelStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPrimaryStrategyFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the primary <c>WHSReservationHierarchyLevelStrategy</c> instance based on the movement.
    /// </summary>
    /// <param name="_movement">
    /// An <c>InventMovement</c> instance.
    /// </param>
    /// <param name="_inventDimReservationCriteria">
    /// The dimensions that are used for reservation.
    /// </param>
    /// <param name="_isPhysicalReservation">
    /// A boolean indicating if the reservation should only be against physical inventory.
    /// </param>
    /// <returns>
    /// The primary <c>WHSReservationHierarchyLevelStrategy</c> instance based on the movement.
    /// </returns>
    [SysObsolete('Please use method on WHSReservationHierarchyLevelStrategyTypeProvider class instead', false, 31\03\2018)]
    public static WHSReservationHierarchyLevelStrategy newPrimaryStrategyFromMovement(
        InventMovement  _movement,
        InventDim       _inventDimReservationCriteria,
        boolean         _isPhysicalReservation)
    {
        return WHSReservationHierarchyLevelStrategyTypesProvider::newFromParameters(_movement, _inventDimReservationCriteria).newPrimaryStrategy(_isPhysicalReservation);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>