<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasourceVATDecl501S6_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerRRGEDatasourceVATDecl501S6_W</c> class calculates values for seventh section of the VAT declaration
/// </summary>
public class LedgerRRGEDatasourceVATDecl501S6_W extends LedgerRRGEDatasourceVATDeclarationBase_W
{
    int             lineNum;
    Map             valuesMap;
    SetEnumerator   valuesKeyEnumerator;

    Amount          taxTotal;
    Amount          taxAmount0Total;
    Amount          taxBase1010449, taxCorr1010449, taxAmountRestored, taxBase1010450, taxCorr1010450;
    boolean         hasData;

    private const str OperationCode1010449  = '1010449';
    private const str OperationCode1010450  = '1010450';

    private const str Worksheet     = 'стр.9';

    private const int S6Table1Id    = 6010;
    private const int S6Table2Id    = 6020;

    private const int Field1Id      = 1;
    private const int Field2Id      = 2;
    private const int Field3Id      = 3;
    private const int Field4Id      = 4;
    private const int Field7Id      = 7;
    private const int Field8Id      = 8;
    private const int Field9Id      = 9;
    private const int Field10Id     = 10;
    private const int Field11Id     = 11;
    private const int Field12Id     = 12;
    private const int Field13Id     = 13;
    private const int Field14Id     = 14;
    private const int Field15Id     = 15;
    private const int Field16Id     = 16;
    private const int Field17Id     = 17;
    private const int Field18Id     = 18;
    private const int Field19Id     = 19;

    private const str Exclamation   = '!';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>collectValues</Name>
				<Source><![CDATA[
    private void collectValues()
    {
        const int OperationCodesMaxCount = 15;

        FactureJour_RU          factureJour;
        FactureTrans_RU         factureTrans;
        SalesExpirationDate_RU  expirationDate;
        Map                     locValuesMap;

        void addValue(VATOperationCode_RU _operationCode, Amount _taxBase = 0, Amount _taxAmount = 0, Amount _taxAmount0 = 0)
        {
            Amount  taxBase;
            Amount  taxAmount;
            Amount  taxAmount0;

            if (!_operationCode)
            {
                return;
            }

            if (locValuesMap.exists(_operationCode))
            {
                [taxBase, taxAmount, taxAmount0] = locValuesMap.lookup(_operationCode);
            }

            taxBase     += _taxBase;
            taxAmount   += _taxAmount;
            taxAmount0  += _taxAmount0;

            locValuesMap.insert(_operationCode, [taxBase, taxAmount, taxAmount0]);
        }

        void roundValues()
        {
            Amount          taxBase;
            Amount          taxAmount;
            Amount          taxAmount0;
            MapEnumerator   me = locValuesMap.getEnumerator();

            while (me.moveNext())
            {
                [taxBase, taxAmount, taxAmount0] = me.currentValue();
                taxBase     = decround(taxBase, 0);
                taxAmount   = decround(taxAmount, 0);
                taxAmount0  = decround(taxAmount0, 0);

                switch (me.currentKey())
                {
                    case OperationCode1010449 :
                        taxBase1010449 = taxBase;
                        taxCorr1010449 = 0;
                        taxAmountRestored = 0;
                        taxAmount = 0;
                        taxAmount0 = 0;
                        break;
                    case OperationCode1010450 :
                        taxBase1010450 = 0;
                        taxCorr1010450 = 0;
                        taxBase = 0;
                        taxAmount = 0;
                        taxAmount0 = 0;
                        break;
                    default:
                        if (valuesMap.elements() < OperationCodesMaxCount)
                        {
                            valuesMap.insert(me.currentKey(), [taxBase, taxAmount, taxAmount0]);
                        }

                        break;
                }

                taxAmount0Total += taxAmount0;
                taxTotal        += taxAmount;

                if (!hasData && (taxBase || taxAmount || taxAmount0 || taxBase1010449 || taxCorr1010449 || taxAmountRestored || taxBase1010450 || taxCorr1010450))        
                {
                    hasData = true;
                }
            }
        }

        locValuesMap = new Map(Types::String, Types::Container);

        while select factureTrans
            join factureJour
                where factureTrans.Module           == FactureModule_RU::Cust                                   &&
                      factureTrans.FactureLineType  == FactureLineType_RU::InvoiceLine                          &&
                      factureTrans.FactureId        == factureJour.FactureId                                    &&
                      factureTrans.Module           == factureJour.Module                                       &&
                      (factureJour.ProcessingType   == SalesBookFactureProcessingType_RU::VATStandard           ||
                       factureJour.ProcessingType   == SalesBookFactureProcessingType_RU::VATStandardCorrection)&&
                      (!factureJour.ConfirmationDate                                                            ||
                       factureJour.ConfirmationDate > periodEnd)
        {
            expirationDate = factureJour.expirationDate();
            if (expirationDate >= periodStart && expirationDate <= periodEnd)
            {
                addValue(this.operationCode(factureTrans.TaxCode),
                         factureTrans.LineAmountMST,
                         this.correctFactureTaxAmount(factureTrans),
                         this.restoredVATAmount(factureTrans));
            }
        }

        roundValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorksheet</Name>
				<Source><![CDATA[
    public str defaultWorksheet(int _tableId)
    {
        return Worksheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    public void initTables()
    {
        const str TableName1	= 'Раздел 6 таблица';
        const str TableName2	= 'Раздел 6 коды операций 1010449, 1010450, итоги';
        const str Field1Req	    = 'КодОпер';
        const str Field1Name	= 'Код операции';
        const str Field1Cell	= 'A13:P13';
        const str Field2Req	    = 'НалБаза';
        const str Field2Name	= 'Налоговая база';
        const str Field2Cell	= 'U13:AX13';
        const str Field3Req	    = 'СумНал164';
        const str Field3Name	= 'Суммы НДС, исчисленные по налоговым ставкам, предусмотренным п. 2-3 ст. 164 НК РФ';
        const str Field3Cell	= 'BC13:CF13';
        const str Field4Req	    = 'НалВычНеПод';
        const str Field4Name	= 'Сумма налоговых вычетов по операциям по реализации товаров (работ, услуг), обоснованность применения налоговой ставки 0 процентов по которым документально не подтверждена';
        const str Field4Cell	= 'CK13:DN13';
        const str Field7Req	    = 'СумНал164Ит';
        const str Field7Name	= 'Итого суммы налога, исчисленные по налоговым ставкам, предусмотренным пунктами 2, 3 статьи 164 Налогового кодекса Российской Федерации';
        const str Field7Cell	= 'CK54:DN54';
        const str Field8Req	    = 'НалВычНеПодИт';
        const str Field8Name	= 'Итого сумма налоговых вычетов по операциям по реализации товаров (работ, услуг), обоснованность применения налоговой ставки 0 процентов по которым документально не подтверждена';
        const str Field8Cell	= 'CK56:DN56';
        const str Field9Req	    = 'хНалИсчислИт';
        const str Field9Name	= 'Итого, сумма налога, исчисленная к уплате в бюджет по данному разделу';
        const str Field9Cell	= 'CK49:DN49';
        const str Field10Req	= 'НалИсчислИт';
        const str Field10Name	= 'Итого, сумма налога, исчисленная к возмещению по данному разделу';
        const str Field10Cell	= 'CK51:DN51';
        const str Field11Req	= 'КодОпер1010449';
        const str Field11Name	= 'Код операции 1010449';
        const str Field11Cell	= 'A43:P43';
        const str Field12Req	= 'НалБаза1010449';
        const str Field12Name	= 'Налоговая база 1010449';
        const str Field12Cell	= 'U43:AX43';
        const str Field13Req	= 'КорИсч.164.23';
        const str Field13Name	= 'Корректировка сумм налога, ранее исчисленных по налоговым ставкам, предусмотренным пунктами 2, 3 статьи 164 Налогового кодекса Российской Федерации, код операции 1010449';
        const str Field13Cell	= 'BC43:CF43';
        const str Field14Req	= 'НалВосст';
        const str Field14Name	= 'Сумма налога, ранее принятая к вычету и подлежащая восстановлению, код операции 1010449';
        const str Field14Cell	= 'CK43:DN43';
        const str Field15Req	= 'КодОпер1010450';
        const str Field15Name	= 'Код операции 1010450';
        const str Field15Cell	= 'A45:P45';
        const str Field16Req	= 'КорНалБазаУв';
        const str Field16Name	= 'Сумма, на которую корректируется налоговая база при увеличении цены, код оперпции 1010450';
        const str Field16Cell	= 'U45:AX45';
        const str Field17Req	= 'КорНалБазаУм';
        const str Field17Name	= 'Сумма, на которую корректируется налоговая база при уменьшении цены, код оперпции 1010450';
        const str Field17Cell	= 'U47:AX47';
        const str Field18Req	= 'КорИсч.164.23Ув';
        const str Field18Name   = 'Корректировка (увеличение) сумм налога, ранее исчисленных по налоговым ставкам, предусмотренным пп.2-3 ст.164 НК РФ, код операции 1010450';
        const str Field18Cell	= 'BC45:CF45';
        const str Field19Req	= 'КорИсч.164.23Ум';
        const str Field19Name	= 'Корректировка (уменьшение) сумм налога, ранее исчисленных по налоговым ставкам, предусмотренным пп.2-3 ст.164 НК РФ, код операции 1010450';
        const str Field19Cell	= 'BC47:CF47';

        super();

        this.addTable(S6Table1Id, TableName1);

        this.addField(S6Table1Id, Field1Id,  Field1Req,  Field1Name,  Field1Cell);
        this.addField(S6Table1Id, Field2Id,  Field2Req,  Field2Name,  Field2Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table1Id, Field3Id,  Field3Req,  Field3Name,  Field3Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table1Id, Field4Id,  Field4Req,  Field4Name,  Field4Cell, SysAlignment::AlignLeft, 10, Minus);

        this.addTable(S6Table2Id, TableName2);

        this.addField(S6Table2Id, Field7Id,  Field7Req,  Field7Name,  Field7Cell,  SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table2Id, Field8Id,  Field8Req,  Field8Name,  Field8Cell,  SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table2Id, Field9Id,  Field9Req,  Field9Name,  Field9Cell,  SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table2Id, Field10Id, Field10Req, Field10Name, Field10Cell, SysAlignment::AlignLeft, 10, Minus);

        this.addField(S6Table2Id, Field11Id, Field11Req, Field11Name, Field11Cell);
        this.addField(S6Table2Id, Field12Id, Field12Req, Field12Name, Field12Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table2Id, Field13Id, Field13Req, Field13Name, Field13Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table2Id, Field14Id, Field14Req, Field14Name, Field14Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table2Id, Field15Id, Field15Req, Field15Name, Field15Cell);
        this.addField(S6Table2Id, Field16Id, Field16Req, Field16Name, Field16Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table2Id, Field17Id, Field17Req, Field17Name, Field17Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table2Id, Field18Id, Field18Req, Field18Name, Field18Cell, SysAlignment::AlignLeft, 10, Minus);
        this.addField(S6Table2Id, Field19Id, Field19Req, Field19Name, Field19Cell, SysAlignment::AlignLeft, 10, Minus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next(int _tableId)
    {
        if (hasData)
        {
            switch (_tableId)
            {
                case S6Table1Id:
                    return this.nextTable1();
                case S6Table2Id:
                    return this.nextTable2();
            }
        }

        this.checkDynamicWorkdsheetInitialized(_tableId);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTable1</Name>
				<Source><![CDATA[
    private boolean nextTable1()
    {
        Amount  taxBase;
        Amount  taxAmount;
        Amount  taxAmount0;

        if (vatDeclaration && valuesKeyEnumerator && valuesKeyEnumerator.moveNext() && valuesMap.exists(valuesKeyEnumerator.current()))
        {
            this.setInitialized(S6Table1Id);

            lineNum++;
            [taxBase, taxAmount, taxAmount0] = valuesMap.lookup(valuesKeyEnumerator.current());

            vatDeclaration.setValue(Field1Id, S6Table1Id, valuesKeyEnumerator.current());
            vatDeclaration.setValue(Field2Id, S6Table1Id, taxBase);
            vatDeclaration.setValue(Field3Id, S6Table1Id, taxAmount);
            vatDeclaration.setValue(Field4Id, S6Table1Id, taxAmount0);

            if (!this.initialized(S6Table2Id))
            {
                this.nextTable2();
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTable2</Name>
				<Source><![CDATA[
    private boolean nextTable2()
    {
        TaxAmount taxAmount;

        if (vatDeclaration && !this.initialized(S6Table2Id))
        {
            vatDeclaration.setValue(Field7Id,  S6Table2Id, taxTotal);
            vatDeclaration.setValue(Field8Id,  S6Table2Id, taxAmount0Total);

            taxAmount = taxTotal - taxAmount0Total;

            if (taxAmount > 0)
            {
                vatDeclaration.setValue(Field9Id,  S6Table2Id, taxAmount);
                vatDeclaration.setValue(Field10Id, S6Table2Id, 0);
            }
            else
            {
                vatDeclaration.setValue(Field9Id,  S6Table2Id, 0);
                vatDeclaration.setValue(Field10Id, S6Table2Id, -taxAmount);
            }

            vatDeclaration.setValue(Field11Id, S6Table2Id, OperationCode1010449);
            vatDeclaration.setValue(Field12Id, S6Table2Id, taxBase1010449);
            vatDeclaration.setValue(Field13Id, S6Table2Id, taxCorr1010449);
            vatDeclaration.setValue(Field14Id, S6Table2Id, taxAmountRestored);
            
            vatDeclaration.setValue(Field15Id, S6Table2Id, OperationCode1010450);
            
            if (taxBase1010450 > 0)
            {
                vatDeclaration.setValue(Field16Id, S6Table2Id, taxBase1010450);
                vatDeclaration.setValue(Field17Id, S6Table2Id, 0);
            }
            else
            {
                vatDeclaration.setValue(Field16Id, S6Table2Id, 0);
                vatDeclaration.setValue(Field17Id, S6Table2Id, abs(taxBase1010450));
            }
            
            if (taxCorr1010450 > 0)
            {
                vatDeclaration.setValue(Field18Id, S6Table2Id, taxCorr1010450);
                vatDeclaration.setValue(Field19Id, S6Table2Id, 0);
            }
            else
            {
                vatDeclaration.setValue(Field18Id, S6Table2Id, 0);
                vatDeclaration.setValue(Field19Id, S6Table2Id, abs(taxCorr1010450));
            }

            this.setInitialized(S6Table2Id);

            if (!this.initialized(S6Table1Id))
            {
                this.nextTable1();
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageCount</Name>
				<Source><![CDATA[
    public int pageCount(int _tableId)
    {
        return _tableId == S6Table1Id && !worksheetDeleted ? 1 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset(int _tableId)
    {
        super(S6Table1Id);
        super(S6Table2Id);

        if (!worksheetDeleted)
        {
            valuesMap = new Map(Types::String, Types::Container);
            
            taxTotal        = 0;
            taxAmount0Total = 0;

            this.collectValues();

            valuesKeyEnumerator = valuesMap.keySet().getEnumerator();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCellCode</Name>
				<Source><![CDATA[
    public void updateCellCode(int _fieldId, int _tableId)
    {
        str cell;
        int cellRow;
        str cellName;
        str aWorksheet;

        if (_tableId == S6Table1Id && lineNum > 1 && evaluator && evaluator.allowUpdateKeyCode())
        {
            [aWorksheet, cell] = str2con_RU(evaluator.keyCode(), Exclamation);

            if (!cell)
            {
                cell = aWorksheet;
            }

            if (cell)
            {
                [cellName, cellRow] = ComExcelDocument_RU::cell2ColNameRow(cell, false);
                cell                = ComExcelDocument_RU::changeCellRows(cell, cellRow + (lineNum - 1) * 2);

                if (aWorksheet)
                {
                    cell = aWorksheet + Exclamation + cell;
                }

                evaluator.updateKeyCode(cell);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S6_W construct()
    {
        return new LedgerRRGEDatasourceVATDecl501S6_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVATDeclaration</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S6_W newFromVATDeclaration(LedgerRRGEDatasourceVATDeclaration_W _vatDeclaration)
    {
        LedgerRRGEDatasourceVATDecl501S6_W section6 = LedgerRRGEDatasourceVATDecl501S6_W::construct();

        section6.parmVATDeclaration(_vatDeclaration);

        return section6;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>