<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsCycleCountCreateThreshold</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsCycleCountCreateThreshold</c> class is used to create cycle count work using cycle count thresholds.
/// </summary>
public class WhsCycleCountCreateThreshold
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCycleCountThreshold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds cycle count thresholds.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_inventLocationId">
    /// The inventory location ID.
    /// </param>
    /// <param name="_locationId">
    /// The warehouse location ID.
    /// </param>
    /// <returns>
    /// Cycle count threshold
    /// </returns>
    WHSCycleCountThreshold findCycleCountThreshold(ItemId           _itemId,
                                                   InventLocationId _inventLocationId,
                                                   WMSLocationId    _locationId)
    {
        WHSCycleCountThreshold  tmpCycleCountThreshold;
        WHSCycleCountThreshold  cycleCountThreshold;
        QueryRun                queryItem;
        QueryRun                queryLoc;
        InventTable             inventTable;
        WMSLocation             location;

        while select tmpCycleCountThreshold
        {
            queryItem = new QueryRun(tmpCycleCountThreshold.ItemQuery);
            queryItem.query().dataSourceTable(tableNum(InventTable)).addRange(fieldNum(InventTable, ItemId)).value(queryValue(_itemId));
            queryItem.next();
            inventTable = queryItem.get(tableNum(InventTable));

            queryLoc = new QueryRun(tmpCycleCountThreshold.LocationQuery);
            queryLoc.query().dataSourceTable(tableNum(WMSLocation)).addRange(fieldNum(WMSLocation, InventLocationId)).value(queryValue(_inventLocationId));
            queryLoc.query().dataSourceTable(tableNum(WMSLocation)).addRange(fieldNum(WMSLocation, wmsLocationId)).value(queryValue(_locationId));
            queryLoc.next();
            location = queryLoc.get(tableNum(WMSLocation));

            if (inventTable.RecId != 0 && location.RecId != 0)
            {
                cycleCountThreshold = WHSCycleCountThreshold::find(tmpCycleCountThreshold.CycleCountThresholdId);
                break;
            }
        }

        return cycleCountThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemLocationQty</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds onhand quantity of an item in a warehouse location.
	/// </summary>
	/// <param name="_itemId">
	/// Id of the item
	/// </param>
	/// <param name="_inventLocationId">
	/// Warehouse id of the location.
	/// </param>
	/// <param name="_locationId">
	/// Id of the location in the warehouse.
	/// </param>
	/// <returns>
	/// The onhand quantity of the item.
	/// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    public InventQty getItemLocationQty(ItemId             _itemId,
                                        InventLocationId   _inventLocationId,
                                        WMSLocationId      _locationId)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _itemId);

        return this.getItemLocationHandlingQuantity(_itemId, _inventLocationId, _locationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemLocationHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds onhand handling quantity of an item in a warehouse location.
    /// </summary>
    /// <param name="_itemId">
    /// Id of the item
    /// </param>
    /// <param name="_inventLocationId">
    /// Warehouse id of the location.
    /// </param>
    /// <param name="_locationId">
    /// Id of the location in the warehouse.
    /// </param>
    /// <returns>
    /// The onhand handling quantity of the item.
    /// </returns>
    private InventHandlingQty getItemLocationHandlingQty(
        ItemId             _itemId,
        InventLocationId   _inventLocationId,
        WMSLocationId      _locationId)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), _itemId))
        {
            return this.getItemLocationHandlingQuantity(_itemId, _inventLocationId, _locationId);
        }

        return this.getItemLocationQty(_itemId, _inventLocationId, _locationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemLocationHandlingQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty getItemLocationHandlingQuantity(
        ItemId             _itemId,
        InventLocationId   _inventLocationId,
        WMSLocationId      _locationId)
    {
        InventDim   inventDim;

        inventDim.InventSiteId      = InventLocation::find(_inventLocationId).InventSiteId;
        inventDim.InventLocationId  = _inventLocationId;
        inventDim.wmsLocationId     = _locationId;
        inventDim = InventDim::findOrCreate(inventDim);

        return whsInventOnHand::getWorkPhysicalInventHandlingQty(_itemId, InventDim.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCycleCountThreshold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates cycle count thresholds
    /// If threshold hit and there is no existing cycle count work, creates cycle count work for location.
    /// </summary>
    /// <param name="_workId">
    /// The work ID.
    /// </param>
    /// <param name="_lineNum">
    /// Line number for the original work line.
    /// </param>
    /// <returns>
    /// Threshold Id to determine whether an immediate count should be processed
    /// </returns>
    public static WHSCycleCountThresholdId processCycleCountThreshold(
        WHSWorkId    _workId,
        LineNum      _lineNum)
    {
        WHSCycleCountCreateThreshold    cycleCountCreateThreshold = new WHSCycleCountCreateThreshold();
        WHSCycleCountThreshold          cycleCountThreshold;
        WMSLocation                     location;
        boolean                         cycleCountWorkCreatedOrFound;
        WHSWorkTable                    workTable;
        WHSWorkLine                     workLine;
        WHSWorkInventTrans              workInventTrans;

        workLine    = WHSWorkLine::find(_workId, _lineNum);
        workTable   = WHSWorkTable::find(_workId);
        location    = WMSLocation::find(workLine.wmsLocationId, workTable.InventLocationId);

        while select ItemId from workInventTrans
            where workInventTrans.WorkId == _workId  &&
                  workInventTrans.LineNum   == _lineNum
        {
            [cycleCountThreshold, cycleCountWorkCreatedOrFound] = WHSCycleCountCreateThreshold::processCycleCountThresholdItem(workInventTrans.ItemId,
                                                                                                                               workTable.InventLocationId,
                                                                                                                               workLine.wmsLocationId,
                                                                                                                               workLine.InventDimId);
            if (cycleCountWorkCreatedOrFound)
            {
                break;
            }
        }

        return cycleCountThreshold.CycleCountThresholdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCycleCountThresholdCluster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates cycle count thresholds when cluster picking, since we won't have a specific work line.
    /// If threshold hit and there is no existing cycle count work, creates cycle count work for location.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_inventLocationId">
    /// The inventory location ID.
    /// </param>
    /// <param name="_locationId">
    /// The warehouse location ID.
    /// </param>
    /// <returns>
    /// Threshold Id to determine whether an immediate count should be processed
    /// </returns>
    public static WHSCycleCountThresholdId processCycleCountThresholdCluster(
        ItemId            _itemId,
        InventLocationId  _inventLocationId,
        WMSLocationId     _locationId)
    {
        WHSCycleCountThreshold   cycleCountThreshold;
        boolean                  cycleCountWorkCreatedOrFound;

        [cycleCountThreshold, cycleCountWorkCreatedOrFound] = WhsCycleCountCreateThreshold::processCycleCountThresholdItem(_itemId, _inventLocationId, _locationId);

        return cycleCountThreshold.CycleCountThresholdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCycleCountThresholdItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates cycle count thresholds for an item
    /// If threshold hit and there is no existing cycle count work, creates cycle count work for location.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_inventLocationId">
    /// The inventory location ID.
    /// </param>
    /// <param name="_locationId">
    /// The warehouse location ID.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDim ID.
    /// </param>
    /// <returns>
    /// Container with threshold to determine whether an immediate count should be processed and with information if cycle cout work exists after evaluation
    /// </returns>
    private static container processCycleCountThresholdItem(
        ItemId            _itemId,
        InventLocationId  _inventLocationId,
        WMSLocationId     _locationId,
        InventDimId       _inventDimId = '')
    {
        WHSCycleCountCreateThreshold    cycleCountCreateThreshold = new WHSCycleCountCreateThreshold();
        WHSCycleCountThreshold          cycleCountThreshold;
        WMSLocation                     location;
        InventQty                       thresholdInventQty;
        UnitOfMeasureSymbol             inventUnit;
        boolean                         createCycleCountWork;
        boolean                         cycleCountWorkCreatedOrFound;
        WHSWorkTable                    cycleCountWorkTable;
        WHSWorkLine                     cycleCountWorkLine;

        EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        location = WMSLocation::find(_locationId, _inventLocationId);

        // Check to see if location is cycle countable before evaluating thresholds
        if (WHSLocationProfile::find(location.LocProfileId).CycleCountable)
        {
            // Get specific threshold record for evaluating
            cycleCountThreshold = cycleCountCreateThreshold.findCycleCountThreshold(_itemId, _inventLocationId, _locationId);

            // Make sure we got a threshold back and if so validate enough days have passed since the location was last counted
            if (cycleCountThreshold.RecId != 0       &&
                (!location.LastCountedUTCDateTime    ||
                 !cycleCountThreshold.DaysBetween    ||
                 DateTimeUtil::utcNow() > DateTimeUtil::addDays(location.LastCountedUTCDateTime, cycleCountThreshold.DaysBetween)))
            {
                // Based on type of threshold, do different mathematical validation
                if (cycleCountThreshold.CycleCountThresholdType == WHSQtyPct::Qty)
                {
                    inventUnit = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);

                    if (releasedProductUnitConverter.canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(cycleCountThreshold.UnitID),
                                                               UnitOfMeasure::unitOfMeasureIdBySymbol(inventUnit),
                                                                    _itemId,
                                                                    _inventDimId))
                    {
                        thresholdInventQty = WHSCatchWeightHelper::convertInventQuantity(_itemId,
                                                                                    cycleCountThreshold.UnitID,
                                                                                    cycleCountThreshold.ThresholdQty,
                                                                                    _inventDimId);

                        if (thresholdInventQty >= cycleCountCreateThreshold.getItemLocationHandlingQty(_itemId, 
                                                                                                       _inventLocationId,
                                                                                                       _locationId))
                        {
                            createCycleCountWork = true;
                        }
                    }
                }
                else
                {
                    if (location.whsPCTFilled() <= cycleCountThreshold.PercentCapacityThreshold)
                    {
                        createCycleCountWork = true;
                    }
                }

                // If threshold hit and there is no existing cycle count work, create cycle count work for location
                if (createCycleCountWork)
                {
                    select firstonly RecId from cycleCountWorkLine
                        join WorkId, InventLocationId, InventSiteId, WorkStatus from cycleCountWorkTable
                        where cycleCountWorkLine.WorkId          == cycleCountWorkTable.WorkId    &&
                              cycleCountWorkTable.InventLocationId  == location.InventLocationId        &&
                              cycleCountWorkTable.InventSiteId      == location.inventSiteId()          &&
                              cycleCountWorkLine.wmsLocationId      == location.wmsLocationId           &&
                              cycleCountWorkLine.WorkType        == WHSWorkType::Count               &&
                              cycleCountWorkTable.WorkStatus      < WHSWorkStatus::Closed;

                    if (cycleCountWorkLine.RecId == 0)
                    {
                        var cycleCountCreateLocation = cycleCountCreateThreshold.initCycleCountCreateLocation(_inventLocationId, _locationId, cycleCountThreshold);
                        cycleCountCreateLocation.runOperation();
                    }

                    cycleCountWorkCreatedOrFound = true;
                }
            }
        }

        return [cycleCountThreshold, cycleCountWorkCreatedOrFound];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCycleCountCreateLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes cycle count work creation engine.
    /// </summary>
    /// <param name="_inventLocationId">
    /// The Warehouse.
    /// </param>
    /// <param name="_locationId">
    /// The warehouse location ID.
    /// </param>
    /// <param name = "_cycleCountThreshold">
    /// A <c>WHSCycleCountThreshold</c> record.
    /// </param>
    /// <returns>The initialized cycle count work creation engine.</returns>
    protected WHSCycleCountCreateLocation initCycleCountCreateLocation(
        InventLocationId       _inventLocationId, 
        WMSLocationId          _locationId, 
        WHSCycleCountThreshold _cycleCountThreshold)
    {
        WHSCycleCountCreateLocation cycleCountCreateLocation = WHSCycleCountCreateLocation::constructFromWMSLocation(_inventLocationId, _locationId);
        cycleCountCreateLocation.parmWorkPoolId(_cycleCountThreshold.WorkPoolId);

        return cycleCountCreateLocation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>