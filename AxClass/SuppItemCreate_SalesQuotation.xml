<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SuppItemCreate_SalesQuotation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SuppItemCreate_SalesQuotation extends SuppItemCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS58282";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    protected void createLine(TmpSuppItem _tmpSuppItem)
    {
        SalesQuotationLine salesQuotationLine;
        SalesQuotationLine baseSalesQuotationLine  = SalesQuotationLine::findInventTransId(_tmpSuppItem.InventTransId);
        
        this.initSalesQuotationLine(salesQuotationLine, _tmpSuppItem, baseSalesQuotationLine);

        salesQuotationLine.createLine(true,false,false,false,true,!_tmpSuppItem.SuppItemFree);

        // <GIN>
        if (isCountryRegion_IN)
        {
            this.createExtensionLine_IN(
                salesQuotationLine,
                TaxModelDocLineExtensionIN::findByBaseTable(
                    baseSalesQuotationLine.TableId,
                    baseSalesQuotationLine.RecId));
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesQuotationLine</c> record to be created.
    /// </summary>
    /// <param name = "_salesQuotationLine">
    /// The <c>SalesQuotationLine</c> record to be initialized.
    /// </param>
    /// <param name = "_tmpSuppItem">
    /// The <c>TmpSuppItem</c> record to initialize from.
    /// </param>
    /// <param name = "_baseSalesQuotationLine">
    /// The base <c>SalesQuotationLine</c> record to initialize from.
    /// </param>
    protected void initSalesQuotationLine(SalesQuotationLine _salesQuotationLine, TmpSuppItem _tmpSuppItem, SalesQuotationLine _baseSalesQuotationLine)
    {
        InventDim baseInventDim = _baseSalesQuotationLine.inventDim();

        _salesQuotationLine.clear();
        _salesQuotationLine.initFromSalesQuotationTable(salesPurchTable);

        InventDim inventDim;
        inventDim.InventLocationId  = baseInventDim.InventLocationId;
        inventDim.InventSiteId      = baseInventDim.InventSiteId;

        _salesQuotationLine.setInventDimIdFromInventDim(inventDim);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            _salesQuotationLine.CFOPTable_BR = _baseSalesQuotationLine.CFOPTable_BR;
        }
        // </GBR>

        // <GIN>
        if (isCountryRegion_IN)
        {
            _salesQuotationLine.initFromSalesQuotationLine_IN(_baseSalesQuotationLine);
        }
        // </GIN>

        _salesQuotationLine.initFromTmpSuppItem(_tmpSuppItem);

        if (_baseSalesQuotationLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            _salesQuotationLine.LineNum = this.getLastDeliveryLineNumber(_baseSalesQuotationLine.InventTransId);
            // we want supp items AFTER the last delivery line related to this commercial line
            // and before next line in the SO
            LineNum nextLineNumber = _salesQuotationLine.nextLineNum();
            if (nextLineNumber)
            {
                _salesQuotationLine.LineNum  += (nextLineNumber - _salesQuotationLine.LineNum) / 2;
            }
            else
            {
                _salesQuotationLine.LineNum  += 1.0;
            }
        }

        _salesQuotationLine.ProjTransType = QuotationProjTransType::Item;

        _salesQuotationLine.ProjCategoryId = this.getProjCategoryId(_tmpSuppItem);

        _salesQuotationLine.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(_salesQuotationLine.salesQuotationTable().ProjIdRef,
                                                                                        _salesQuotationLine.ProjCategoryId);

        _salesQuotationLine.ProjDescription = _salesQuotationLine.inventTable().defaultProductName();
        _salesQuotationLine.TransDate       = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the project category given the specified <c>TmpSuppItem</c> record.
    /// </summary>
    /// <param name = "_tmpSuppItem">
    /// A <c>TmpSuppItem</c> record.
    /// </param>
    /// <returns>
    /// A project category.
    /// </returns>
    protected ProjCategoryId getProjCategoryId(TmpSuppItem _tmpSuppItem)
    {
        ProjCategoryId itemProjCategoryId = InventTable::find(_tmpSuppItem.ItemId).projCategoryId;
        ProjCategoryId projCategoryId = itemProjCategoryId ? itemProjCategoryId : ProjParameters::find().ItemCategory;
        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDeliveryLineNumber</Name>
				<Source><![CDATA[
    private LineNum getLastDeliveryLineNumber(InventTransId _orderLine)
    {
        SalesQuotationLine salesQuotationLine;
        SalesQuotationDeliverySchedule salesQuotationDeliverySchedule;

        select maxOf(LineNum)
            from salesQuotationLine
            exists join OrderLine, DeliveryLine from salesQuotationDeliverySchedule
            where salesQuotationDeliverySchedule.OrderLine == _orderLine
               && salesQuotationLine.InventTransId == salesQuotationDeliverySchedule.DeliveryLine;

        return salesQuotationLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SuppItemCreate_SalesQuotation construct()
    {
        return new SuppItemCreate_SalesQuotation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>