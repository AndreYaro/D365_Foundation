<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobPickingListType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobPickingListType</c> class controls kanban job picking lists.
/// </summary>
/// <remarks>
///    The <c>KanbanJobPickingListType</c> class extends the <c>InventType</c> class, because the
///    <c>KanbanJobPickingList</c> class variable can own inventory transactions.
/// </remarks>
public class KanbanJobPickingListType extends InventType
{
    KanbanJobPickingList    kanbanJobPickingList;

    InventMovement          wmsGroupingSourceRequirementMovement;
    boolean                 cachedGroupingSourceRequirementMovement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInventBeReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an inventory transaction of the <c>KanbanJobPickingListType</c> type can be
    ///    reserved.
    /// </summary>
    /// <returns>
    ///    true if the inventory can be reserved; otherwise, false.
    /// </returns>
    public boolean canInventBeReserved()
    {
        return this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the kanban job picking list record used to instantiate this class instance.
    /// </summary>
    /// <returns><c>KanbanJobPickingList</c> record.</returns>
    public KanbanJobPickingList parmKanbanJobPickingList()
    {
        return kanbanJobPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdExpected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an expected inventory transaction of the <c>KanbanJobPickingListType</c> type can
    ///    be updated.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be updated; otherwise false.
    /// </returns>
    public boolean canInventUpdExpected()
    {
        return this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a financial inventory transaction of the <c>KanbanJobPickingListType</c> type can
    ///    be updated.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be updated; otherwise false.
    /// </returns>
    public boolean canInventUpdFinancial()
    {
        return this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a physical inventory transaction of the <c>KanbanJobPickingListType</c> type can
    ///    be updated.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be updated; otherwise false.
    /// </returns>
    public boolean canInventUpdPhysical()
    {
        return this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban job picking list record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban job picking list record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban job picking list record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban job picking list record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeInventoryControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the kanban job picking list must be inventory controlled.
    /// </summary>
    /// <returns>
    ///    true if the kanban job picking list must be inventory controlled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If inventory controlled, flushing the kanban job picking list line creates an inventory transaction.
    /// </remarks>
    public boolean mustBeInventoryControlled()
    {
        InventDimParm                   inventDimParm;
        boolean                         result = true;

        if (!kanbanJobPickingList.RecId)
        {
            switch (kanbanJobPickingList.FlushingPrinciple)
            {
                case FlushingPrincipKanban::Empty:
                    result = false;
                    break;
                default:
                    //physical storage dimensions
                    InventDimGroupSetup::newItemId(kanbanJobPickingList.ItemId).inventDimParmActivePhysicalInventory(inventDimParm);
                    inventDimParm.clearProductDimensions();

                    InventDim inventDim = kanbanJobPickingList.inventDim();
                    inventDim.clearNotSelectedDim(inventDimParm);

                    //never on a supermarket
                    result    = !(   inventDim.InventLocationId
                                  && inventDim.wmsLocationId
                                  && kanbanJobPickingList.InventDimDataAreaId
                                  && WMSLocation::find(inventDim.wmsLocationId,inventDim.InventLocationId).LocationType == WMSLocationType::KanbanSupermarket);

                    //check picking activity
                    if (   result
                        && kanbanJobPickingList.PickingProductionFlowActivity)
                    {
                        PlanActivity planActivity = kanbanJobPickingList.pickingPlanActivity();
                        if (planActivity.PlanActivityType == PlanActivityType::Pick)
                        {
                            result = planActivity.onHandUpdate(PlanActivityType::Pick);
                        }
                    }
                    break;
            }
        }
        else
        {
            result = kanbanJobPickingList.InventTransId != '';
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an estimated inventory transaction of the <c>KanbanJobPickingListType</c> type
    ///    must be updated.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    The method is called from the <c>mustBeUpdatedExpected</c> method on the inventory movement,
    ///    together with a call to <c>canBeUpdatedEstimated</c> , which calls <c>canInventUpdExpected</c> on
    ///    this class. This makes sure that only inventory controlled picking list lines will return true from
    ///    the <c>mustBeUpdatedExpected</c> method.
    /// </remarks>
    public boolean mustInventUpdEstimated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanJobPickingListType</c> class.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    /// The <c>KanbanJobPickingList</c> table buffer used to instantiate the class.
    /// </param>
    protected void new(KanbanJobPickingList _kanbanJobPickingList)
    {
        kanbanJobPickingList = _kanbanJobPickingList;
        super(kanbanJobPickingList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban job picking list is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban job picking list record has been updated.
    /// </summary>
    /// <param name="_kanbanJobPickingListOrig">
    /// The original kanban job picking list which is updated.
    /// </param>
    public void updated(KanbanJobPickingList _kanbanJobPickingListOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsGroupingSourceRequirementMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an inventory movement for the grouping source requirement.
    /// </summary>
    /// <returns>
    ///    A <c>InventoryMovement</c> class instance; otherwise, null.
    /// </returns>
    public InventMovement wmsGroupingSourceRequirementMovement()
    {
        if (   !wmsGroupingSourceRequirementMovement
            || !cachedGroupingSourceRequirementMovement)
        {
            cachedGroupingSourceRequirementMovement         = true;
            KanbanSourceRequirement kanbanSourceRequirement = KanbanSourceRequirement::findKanban(kanbanJobPickingList.Kanban);
            wmsGroupingSourceRequirementMovement            = kanbanSourceRequirement.parentSourceRequirementMovement();
        }

        return wmsGroupingSourceRequirementMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanJobPickingListType</c> class.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    ///    The <c>KanbanJobPickingList</c> table buffer used to instantiate the class.
    /// </param>
    /// <returns>
    ///    An instance of <c>KanbanJobPickingListType</c> class.
    /// </returns>
    public static KanbanJobPickingListType construct(KanbanJobPickingList _kanbanJobPickingList)
    {
        return new KanbanJobPickingListType(_kanbanJobPickingList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a kanban job picking list for a specified job.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The job for which to create the picking list.
    /// </param>
    /// <param name="_kanban">
    ///    The kanban for which to create the picking list; optional.
    /// </param>
    public static void createFromKanbanJob(
        KanbanJob   _kanbanJob,
        Kanban      _kanban     = _kanbanJob.kanban()
        )
    {
        KanbanJobPickingListCreate::newStandardFromKanban(_kanbanJob, _kanban).runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>