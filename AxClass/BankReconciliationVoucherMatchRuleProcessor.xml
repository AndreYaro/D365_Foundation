<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationVoucherMatchRuleProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
[BankReconciliationMatchActionType(BankReconciliationMatchActionType::Voucher)]
internal final class BankReconciliationVoucherMatchRuleProcessor extends BankReconciliationMatchRuleProcessor
{
    private BankReconciliationMatchingRuleQuery matchingRuleQuery;
    private BankReconciliationMatchRule_PostingInfo matchingRuleInfo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preprocess</Name>
				<Source><![CDATA[
    internal protected void preprocess()
    {
        matchingRuleInfo = BankReconciliationMatchRule_PostingInfo::findByMatchRuleAndLegalEntity(matchRule.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMatchAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs match action for generate voucher posting rules.
    /// </summary>
    /// <param name="_openStatementForMatch">
    /// The statement to generate voucher.
    /// </param>
    /// <param name="_bankStatementsToUpdate">
    /// BankStmtTmp to record matching conditions.
    /// </param>
    internal protected void performMatchAction(Common _openStatementForMatch, BankStmtTmp _bankStatementsToUpdate)
    {
        ttsbegin;

        BankReconciliationStatementOpenTmp tmpStatementLocal = _openStatementForMatch as BankReconciliationStatementOpenTmp;

        BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(tmpStatementLocal.BankStmtISOReportEntry);
        BankStatementLinePostTable::createLinePostTableForDraftPosting(statementLine);
        statementLine.updateAccoutingDateAndSourceDocumentExchangeRateDate(matchingRuleInfo.getAccountingDate());
        BankStatementLineBankDocumentInformation::createLineBankDocumentInformationByMatchRulePostingInfo(statementLine.RecId, matchingRuleInfo);

        BankStatementLinePost bankStatementLinePost = BankStatementLinePost::construct(statementLine);
        bankStatementLinePost.post(true, matchRule.RecId);

        tmpStatementLocal.selectForUpdate(true);
        tmpStatementLocal.IsMatched = NoYes::Yes;
        tmpStatementLocal.update();

        if (!BankReconciliationMatchRuleBreakTransactionScopeFlight::instance().isEnabled())
        {
            BankReconciliationAutoMatchUtils::addBankStatementForUpdate(_bankStatementsToUpdate, tmpStatementLocal.BankStmtISOReportEntry);    
        }
        else
        {
            BankStmtISOAccountStatement::updateBankStatementStatus(tmpStatementLocal.BankStmtISOAccountStatement);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentStatement</Name>
				<Source><![CDATA[
    internal protected Common getCurrentStatement(QueryRun _statementQueryRun)
    {
        return _statementQueryRun.get(tableNum(BankReconciliationStatementOpenTmp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnmatchedStatementCount</Name>
				<Source><![CDATA[
    internal protected int64 getUnmatchedStatementCount()
    {
        select count(RecId) from reconciliationStatementTmp
            where reconciliationStatementTmp.IsMatched == NoYes::No;

        return reconciliationStatementTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStatementQueryRun</Name>
				<Source><![CDATA[
    internal protected QueryRun buildStatementQueryRun()
    {
        matchingrulequery = bankreconciliationmatchingrulequery::construct(matchrule.recid);
        QueryRun qrStatement = matchingRuleQuery.getQueryRunForSearching(
            BankReconciliationMatchRuleLineType::GenerateVoucher,
            reconciliationStatementTmp);
        return qrStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPerformMatchAction</Name>
				<Source><![CDATA[
    internal protected boolean canPerformMatchAction()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSearchedDocumentIdList</Name>
				<Source><![CDATA[
    internal protected void getSearchedDocumentIdList(Common _tmpStatement)
    {
        return;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>