<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransTypeCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalTransTypeCache</c> class provides the cache management interface for the
/// <c>LedgerJournalTransType</c> class.
/// </summary>
public class LedgerJournalTransTypeCache
{
    private const str LedgerJournalTransRunningTotalDebit = 'LedgerJournalTransRunningTotalDebit';
    private const str LedgerJournalTransRunningTotalCredit = 'LedgerJournalTransRunningTotalCredit';
    private const str LedgerJournalTransRunningCurrency = 'LedgerJournalTransRunningCurrency';
    private const str LedgerJournalTransactionId = 'LedgerJournalTransactionId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkValidCacheState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the voucher balance cache needs to be reset in the event of an aborted process.
    /// </summary>
    /// <param name="_previousLedgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// True if the cache was reset for the journal; otherwise, false.
    /// </returns>
    public static boolean checkValidCacheState(
        LedgerJournalTrans _previousLedgerJournalTrans)
    {
        RecId lastRecId = LedgerJournalTransTypeCache::getLedgerJournalTransactionId(_previousLedgerJournalTrans.JournalNum);

        // If a previous transaction was aborted, reset the cache for the journal.
        if (lastRecId == 0 || lastRecId >= _previousLedgerJournalTrans.RecId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTransactionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record id from the cache of the last <c>LedgerJournalTrans</c> record processed by the
    /// defaulting strategy engine for the specified journal.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <returns>
    /// The record id of last <c>LedgerJournalTrans</c> record processed.
    /// </returns>
    public static RecId getLedgerJournalTransactionId(
        LedgerJournalId _journalNumber)
    {
        RecId ledgerJournalTransRecId;
        SysGlobalCache cache = classFactory.globalCache();

        container journalCache = cache.get(
            LedgerJournalTransactionId,
            [_journalNumber]);

        if (journalCache != conNull())
        {
            ledgerJournalTransRecId = conPeek(journalCache, 1);
        }

        return ledgerJournalTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherRunningCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code used for the journal voucher balancing from cache.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <returns>
    /// The currency code if found in the cache; otherwise, blank.
    /// </returns>
    public static CurrencyCode getVoucherRunningCurrencyCode(
        LedgerJournalId _journalNumber,
        Voucher _voucher)
    {
        CurrencyCode voucherRunningCurrencyCode;
        SysGlobalCache cache = classFactory.globalCache();

        container journalCache = cache.get(
            LedgerJournalTransRunningCurrency,
            [_journalNumber, _voucher]);

        if (journalCache != conNull())
        {
            voucherRunningCurrencyCode = conPeek(journalCache, 1);
        }

        return voucherRunningCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherRunningTotalCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total credit amount for the journal voucher from cache.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <returns>
    /// The total credit amount if found in the cache; otherwise, zero.
    /// </returns>
    public static Amount getVoucherRunningTotalCredit(
        LedgerJournalId _journalNumber,
        Voucher _voucher)
    {
        Amount totalCredit;
        SysGlobalCache cache = classFactory.globalCache();

        container journalCache = cache.get(
            LedgerJournalTransRunningTotalCredit,
            [_journalNumber, _voucher]);

        if (journalCache != conNull())
        {
            totalCredit = conPeek(journalCache, 1);
        }

        return totalCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherRunningTotalDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total debit amount for the journal voucher from cache.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <returns>
    /// The total debit amount if found in the cache; otherwise, zero.
    /// </returns>
    public static Amount getVoucherRunningTotalDebit(
        LedgerJournalId _journalNumber,
        Voucher _voucher)
    {
        Amount totalDebit;
        SysGlobalCache cache = classFactory.globalCache();

        container journalCache = cache.get(
            LedgerJournalTransRunningTotalDebit,
            [_journalNumber,_voucher]);

        if (journalCache != conNull())
        {
            totalDebit = conPeek(journalCache, 1);
        }

        return totalDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the voucher balance cache for the journal.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    [SysObsolete('This method is deprecated and should not be used, use resetJournalVoucherCache instead', false, 30\11\2017)]
    public static void resetCache(
        LedgerJournalId _journalNumber)
    {
        SysGlobalObjectCache cache = classfactory.globalObjectCache();

        if (cache.find(LedgerJournalTransactionId, [_journalNumber]) != conNull())
        {
            cache.remove(LedgerJournalTransactionId, [_journalNumber]);
        }
        cache.clear(LedgerJournalTransRunningCurrency + _journalNumber);
        cache.clear(LedgerJournalTransRunningTotalDebit + _journalNumber);
        cache.clear(LedgerJournalTransRunningTotalCredit + _journalNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetJournalVoucherCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the voucher balance cache for the journal.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    public static void resetJournalVoucherCache(
        LedgerJournalId _journalNumber,
        Voucher _voucher)
    {
        SysGlobalCache cache = classFactory.globalCache();

        if (cache.isSet(LedgerJournalTransactionId, [_journalNumber]))
        {
            cache.remove(LedgerJournalTransactionId, [_journalNumber]);
        }

        if (cache.isSet(LedgerJournalTransRunningCurrency, [_journalNumber, _voucher]))
        {
            cache.remove(LedgerJournalTransRunningCurrency, [_journalNumber, _voucher]);
        }

        if (cache.isSet(LedgerJournalTransRunningTotalDebit, [_journalNumber, _voucher]))
        {
            cache.remove(LedgerJournalTransRunningTotalDebit, [_journalNumber, _voucher]);
        }

        if (cache.isSet(LedgerJournalTransRunningTotalCredit, [_journalNumber, _voucher]))
        {
            cache.remove(LedgerJournalTransRunningTotalCredit, [_journalNumber, _voucher]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTransactionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the record id in the cache of the last <c>LedgerJournalTrans</c> record processed by the
    /// defaulting strategy engine for the specified journal.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <param name="_ledgerJournalTransRecId">
    /// The <c>LedgerJournalTrans</c> record id.
    /// </param>
    public static void setLedgerJournalTransactionId(
        LedgerJournalId _journalNumber,
        RecId _ledgerJournalTransRecId)
    {
        SysGlobalCache cache = classFactory.globalCache();

        cache.set(LedgerJournalTransactionId, [_journalNumber], [_ledgerJournalTransRecId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherRunningCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the currency code used for the journal voucher balancing for the cache.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <param name="_voucherRunningCurrencyCode">
    /// The currency code.
    /// </param>
    public static void setVoucherRunningCurrencyCode(
        LedgerJournalId _journalNumber,
        Voucher _voucher,
        CurrencyCode _voucherRunningCurrencyCode)
    {
        SysGlobalCache cache = classFactory.globalCache();

        cache.set(LedgerJournalTransRunningCurrency, [_journalNumber, _voucher], [_voucherRunningCurrencyCode]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherRunningTotalCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the total credit amount used for the journal voucher balancing for the cache.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <param name="_amount">
    /// The total credit amount for the voucher.
    /// </param>
    public static void setVoucherRunningTotalCredit(
        LedgerJournalId _journalNumber,
        Voucher _voucher,
        Amount _amount)
    {
        SysGlobalCache cache = classFactory.globalCache();

        cache.set(LedgerJournalTransRunningTotalCredit, [_journalNumber, _voucher], [_amount]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherRunningTotalDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the total debit amount used for the journal voucher balancing for the cache.
    /// </summary>
    /// <param name="_journalNumber">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher.
    /// </param>
    /// <param name="_amount">
    /// The total debit amount for the voucher.
    /// </param>
    public static void setVoucherRunningTotalDebit(
        LedgerJournalId _journalNumber,
        Voucher _voucher,
        Amount _amount)
    {
        SysGlobalCache cache = classFactory.globalCache();

        cache.set(LedgerJournalTransRunningTotalDebit, [_journalNumber, _voucher], [_amount]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>