<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxMainAccDimensionListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxMainAccDimensionListProvider</c> class is a tax main account dimension list provider for
///    documented monetary amounts.
/// </summary>
[
    SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::Tax)
]
class TaxMainAccDimensionListProvider extends MainAccountDimensionListProvider
{
    SelectableDataArea
                    taxDataAreaId;
    TaxCode         taxCode;
    TaxDirection    taxDirection;
    // <GEEHU>
    TaxItemGroup    taxItemGroup;
    // </GEEHU>

    // <GIN>
    #ISOCountryRegionCodes
    // </GIN>

    // <GBR>
    TaxReceivableLongTerm_BR taxReceivableLongTerm_BR;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the tax main account ledger dimension list provider values.
    /// </summary>
    [HookableAttribute(true)]
    protected void initValues()
    {
        Object                          sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();
        SourceDocumentLineItemITax      iTax;

        if (sourceDocumentLineItem is SourceDocumentLineItemITax)
        {
            iTax = sourceDocumentLineItem as SourceDocumentLineItemITax;
            taxDataAreaId = iTax.parmTaxDataAreaId();
            taxCode = iTax.parmTaxCode();
            taxDirection = iTax.parmTaxDirection();
            // <GEEHU>
            taxItemGroup = iTax.parmTaxItemGroup();
            // </GEEHU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the tax main account ledger dimension list provider is valid.
    /// </summary>
    /// <returns>
    ///    true if tax main account ledger dimension list provider is valid; otherwise, false.
    /// </returns>
    protected boolean isValid()
    {
        boolean isValid;

        isValid = super();

        if (isValid &&
            (accountingRule.parmMonetaryAmount() == MonetaryAmount::Tax ||
             accountingRule.parmMonetaryAmount() == MonetaryAmount::TaxVariance
             // <GIN>
        || accountingRule.parmMonetaryAmount() == MonetaryAmount::TaxDeferred_IN
             || accountingRule.parmMonetaryAmount() == MonetaryAmount::TaxDeferredVariance_IN
             || accountingRule.parmMonetaryAmount() == MonetaryAmount::Incentiveschemetax_IN
             // </GIN>
        ))
        {
            isValid = true;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the tax main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        TaxAccountGroup                 taxAccountGroup;
        TaxLedgerAccountGroup           taxLedgerAccountGroup;
        TaxTable                        taxTable;
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        LedgerPostingType               ledgerPostingType;
        container                       cacheResult;
        boolean                         usTaxRules;
        AccountingRuleType              accountingRuleType;
        TaxUncommitted                  taxUncommitted;
        TaxData                         taxData;
        SourceDocumentLine              sourceDocumentLine;
        // <GIN>
        TaxMainAccDimensionListDirectIndirect_IN directIndirectAccountAndTaxEntry;
        container                       postingAccountsCon;
        Counter                         postingAccountCount;
        // </GIN>
        // <GEERU>
        Object                          object;
        CustInvoiceTable                custInvoiceTable;
        CustInvoiceLine                 custInvoiceLine;
        MarkupTrans                     markupTrans;
        CustInvoiceJour                 custInvoiceJour;
        // </GEERU>

        #ISOCountryRegionCodes

        changecompany(taxDataAreaId)
        {
            taxTable = TaxTable::find(taxCode);
        }
        taxAccountGroup   = taxTable.TaxAccountGroup;
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            if (taxTable.TaxType_IN != TaxType_IN::None)
            {
                usTaxRules = TaxParameters::find().PurchTaxOnOperations == NoYes::Yes;
                accountingRuleType = accountingRule.parmAccountingRuleType();

                // Use the default account if Non-Recoverable VAT or with US Tax rules on for the distribution.
                if ((sourceDefaultAccount
                        &&
                        // <GIN>
                        (
                            accountingRule.parmMonetaryAmount() == MonetaryAmount::ServiceTaxNonRecoverable_IN
                              ||
                         // </GIN>
                            accountingRule.parmMonetaryAmount() == MonetaryAmount::TaxNonRecoverable
                        // <GIN>
                        )
                        // </GIN>
                    )
                    || (taxDirection == TaxDirection::UseTax
                        && usTaxRules
                        && accountingRuleType == AccountingRuleType::Distribution))
                {
                    this.addToMainAccDimensionList(sourceDefaultAccount);
                }
                else
                {
                    directIndirectAccountAndTaxEntry = TaxMainAccDimensionListDirectIndirect_IN::construct(accountingRule);
                    ledgerPostingType = accountingRule.parmLedgerPostingType();// Only Tax goes to Tax A/c.
                    if (ledgerPostingType != LedgerPostingType::VendBalance
                        && ledgerPostingType != LedgerPostingType::CustBalance)
                    {
                        postingAccountsCon = directIndirectAccountAndTaxEntry.getDefaultAccount(taxTable);
                        if (postingAccountsCon
                           && conLen(postingAccountsCon) > 0)
                        {
                            while (conLen(postingAccountsCon) > postingAccountCount)
                            {
                                postingAccountCount++;
                                this.addToMainAccDimensionList(conPeek(postingAccountsCon, postingAccountCount));
                            }
                        }
                    }
                }
                // Return after India dimension list population to skip standard.
                return;
            }
        }
        // </GIN>

        ledgerPostingType = accountingRule.parmLedgerPostingType();
        accountingRuleType = accountingRule.parmAccountingRuleType();

        usTaxRules = TaxParameters::find().PurchTaxOnOperations == NoYes::Yes;

        // Use the default account if Non-Recoverable VAT or with US Tax rules on for the distribution.
        if ((sourceDefaultAccount && 
            ((accountingRule.parmMonetaryAmount() == MonetaryAmount::TaxNonRecoverable) || 
                (accountingRule.parmMonetaryAmount() == MonetaryAmount::TaxNonRecoverableVariance)))||
            (taxDirection == TaxDirection::UseTax &&
                usTaxRules &&
                accountingRuleType == AccountingRuleType::Distribution))
        {
            ledgerDimensionDefaultAccount = sourceDefaultAccount;
        }
        else
        {
            cacheResult = LedgerCache::getValue(LedgerCacheScope::TaxMainAccDimensionListProvider, [ledgerPostingType, taxDataAreaId, taxAccountGroup, taxDirection, accountingRuleType, taxReceivableLongTerm_BR]);
            sourceDocumentLine = accountingRule.parmSourceDocumentLineItem().parmSourceDocumentLine();

            if (sourceDocumentLine.SourceRelationType == tableNum(TaxUncommitted)
                || sourceDocumentLine.SourceRelationType == tableNum(TaxTrans))
            {
                taxData = SysTransactionScopeCache::get(tableStr(TaxData), sourceDocumentLine.RecId, taxData);

                if (!taxData)
                {
                    if (sourceDocumentLine.SourceRelationType == tableNum(TaxUncommitted))
                    {
                        taxUncommitted = accountingRule.parmSourceDocumentLineItem().parmSourceDocumentLineImplementation();
                        taxData = TaxData::find(taxUncommitted.TaxCode, taxUncommitted.TransDate, taxUncommitted.TaxBaseAmount);
                        SysTransactionScopeCache::set(tableStr(TaxData), sourceDocumentLine.RecId, taxData);
                    }
                    else
                    {
                        TaxTrans taxTrans = accountingRule.parmSourceDocumentLineItem().parmSourceDocumentLineImplementation();
                        taxData = TaxData::find(taxTrans.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmount);
                        SysTransactionScopeCache::set(tableStr(TaxData), sourceDocumentLine.RecId, taxData);
                    }
                }
            }

            if (!usTaxRules &&
                accountingRuleType == AccountingRuleType::Journalizing &&
                taxDirection == TaxDirection::UseTax &&
                accountingRule.parmMonetaryAmount() == MonetaryAmount::TaxNonRecoverable &&
                !taxData.vatExemptPct
                // <GBR>
                && (!BrazilParameters::isEnabled()))
                // </GBR>
            {
                // Non-Recoverable VAT in a USE tax scenario goes in and out of the same account.
                ledgerDimensionDefaultAccount = accountingRule.parmAccountingdistribution().LedgerDimension;
            }
            else if (cacheResult == conNull())
            {
                taxLedgerAccountGroup = TaxLedgerAccountGroup::find(taxAccountGroup);

                if (taxLedgerAccountGroup)
                {
                    if (taxDirection == TaxDirection::UseTax && accountingRuleType == AccountingRuleType::Journalizing)
                    {
                        // Use the use tax payable account as the vendor balance posting account for use tax direction.
                        ledgerDimensionDefaultAccount = taxLedgerAccountGroup.TaxOffsetUseTaxLedgerDimension;
                    }
                    else if (ledgerPostingType != LedgerPostingType::VendBalance && ledgerPostingType != LedgerPostingType::CustBalance
                            // <GEERU>
                            && ledgerPostingType != LedgerPostingType::EmplPayment_RU
                            && ledgerPostingType != LedgerPostingType::EmplBalance_RU
                            // </GEERU>
                            )
                    {
                        ledgerDimensionDefaultAccount = taxLedgerAccountGroup.taxLedgerDimension(taxDirection);

                        // <GBR>
                        if (BrazilParameters::isEnabled() && taxReceivableLongTerm_BR && accountingRule.parmMonetaryAmount() == MonetaryAmount::Tax)
                        {
                            ledgerDimensionDefaultAccount = taxLedgerAccountGroup.TaxIncomingLongTermLedgerDimension_BR;
                        }
                        // </GBR>
                    }

                    LedgerCache::insertValue(LedgerCacheScope::TaxMainAccDimensionListProvider, [ledgerPostingType, taxDataAreaId, taxAccountGroup, taxDirection, accountingRuleType], [ledgerDimensionDefaultAccount]);
                }
            }
            else
            {
                [ledgerDimensionDefaultAccount] = cacheResult;
            }
        }

        // <GBR>
        if (BrazilParameters::isEnabled()
                && this.parmAccountingRule().parmLedgerPostingType() == LedgerPostingType::TaxExpense_BR)
        {
            ledgerDimensionDefaultAccount = TaxLedgerAccountGroup::accountTaxSalesOffset_BR(taxCode);
        }
        // </GBR>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            object = accountingRule.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem();
            if (object is CustInvoiceLineSourceDocLineItem || object is ChargeSourceDocLineItem)
            {
                if ((taxTable.TaxType_W == TaxType_W::VAT ||
                     taxTable.TaxType_W == TaxType_W::VATReduced ||
                     taxTable.TaxType_W == TaxType_W::VATZero) &&
                    taxDirection == TaxDirection::OutgoingTax)
                {
                    if (object is CustInvoiceLineSourceDocLineItem)
                    {
                        custInvoiceTable = CustInvoiceLine::findBySourceDocumentLine(
                            accountingRule.parmSourceDocumentLineItem().parmParentSourceDocumentLine().RecId).custInvoiceTable();
                    }
                    else
                    if (object is ChargeSourceDocLineItem)
                    {
                        markupTrans = MarkupTrans::findBySourceDocumentLine(accountingRule.parmSourceDocumentLineItem().parmParentSourceDocumentLine().RecId);
                        if (markupTrans.TransTableId == tableNum(CustInvoiceTable))
                        {
                            custInvoiceTable = CustInvoiceTable::findRecId(markupTrans.TransRecId);
                        }
                        else if (markupTrans.TransTableId == tableNum(CustInvoiceJour))
                        {
                            custInvoiceJour = CustInvoiceJour::findRecId(markupTrans.TransRecId);
                            custInvoiceTable = CustInvoiceTable::findPostedInvoice(custInvoiceJour.InvoiceAccount, custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceDate);
                        }
                        else if (markupTrans.TransTableId == tableNum(CustInvoiceLine))
                        {
                            custInvoiceLine = CustInvoiceLine::find(markupTrans.TransRecId);
                            custInvoiceTable = custInvoiceLine.custInvoiceTable();
                        }
                        else if (markupTrans.TransTableId == tableNum(CustInvoiceTrans))
                        {
                            custInvoiceJour = CustInvoiceTrans::findRecId(markupTrans.TransRecId).custInvoiceJour();
                            custInvoiceTable = CustInvoiceTable::findPostedInvoice(custInvoiceJour.InvoiceAccount, custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceDate);
                        }
                    }

                    if (custInvoiceTable.vatOnPayment_RU ||
                        CustParameters::taxation_RU(custInvoiceTable.InvoiceDate) == CustTaxation_RU::OnPayment)
                    {
                        ledgerDimensionDefaultAccount = TaxLedgerAccountGroup::taxDeferredLedgerDim_RU(taxCode);
                    }
                }
            }
        }
        // </GEERU>

        // For Hungarian Continuous Tax, modify ledger dimension to be deferred tax account value
        // For bank exchange rate difference, the tax will be posted to the specfied account and won't be modified to deferred tax account here.
        // <GEEHU>
        boolean isBankExchRateDiff = (taxDirection == TaxDirection::IncomingTax_W || taxDirection == TaxDirection::OutgoingTax_W);
        if (TaxContinuousHUHelper::isTransactionContinuousHU(taxItemGroup, accountingRule.parmLedgerPostingType())
            && !isBankExchRateDiff)
        {
            taxLedgerAccountGroup = TaxLedgerAccountGroup::find(TaxTable::find(taxCode).TaxAccountGroup);
            ledgerDimensionDefaultAccount = taxLedgerAccountGroup.taxLedgerDimension_HU(taxDirection);
        }
        // </GEEHU>

        ledgerDimensionDefaultAccount = this.fetchLedgerDimensionDefaultAccount(ledgerDimensionDefaultAccount,
            taxCode, 
            taxDirection, 
            taxDataAreaId,
            taxItemGroup, 
            accountingRule);

        this.addToMainAccDimensionList(ledgerDimensionDefaultAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInitValuesBR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs Brazilian specific initialization after the method <c>TaxMainAccDimensionListProvider.initValues</c>.
    /// </summary>
    protected void postInitValuesBR()
    {
        Object                          sourceDocumentLineItem = accountingRule.parmSourceDocumentLineItem();
        TaxSourceDocSublineItem         tax;

        if (sourceDocumentLineItem is TaxSourceDocSublineItem)
        {
            tax = sourceDocumentLineItem as TaxSourceDocSublineItem;

            taxReceivableLongTerm_BR = tax.parmTaxReceivableLongTerm_BR();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets an instance of the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    ///    The instance of the <c>TmpTaxWorkTrans</c> table to set; optional
    /// </param>
    void setTmpTaxWorkTrans(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInitValuesHandlerBR</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(TaxMainAccDimensionListProvider), methodStr(TaxMainAccDimensionListProvider, initValues))]
    /// <summary>
    /// Calls the <c>TaxMainAccDimensionListProvider.postInitValuesBR</c> method, if Brazilian context is enabled.
    /// </summary>
    /// <param name="_args">
    /// The arguments passed by the event handler.
    /// </param>
    public static void postInitValuesHandlerBR(XppPrePostArgs _args)
    {
        TaxMainAccDimensionListProvider taxMainAccDimensionListProvider = _args.getThis();

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        taxMainAccDimensionListProvider.postInitValuesBR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetch ledger dimension default account.
    /// </summary>
    /// <param name = "_ledgerDiemensionDefaultAccount">The ledger dimension default account.</param>
    /// <param name = "_taxCode">The tax code.</param>
    /// <param name = "_taxDirection">The tax direction.</param>
    /// <param name = "_taxDataAreaId">The tax data area id.</param>
    /// <param name = "_taxItemGroup">The tax item group.</param>
    /// <param name = "_accountingRule">The instance of <c>AccountingRule</c> class.</param>
    /// <returns>The ledger dimension default account.</returns>
    [Hookable(true)]
    LedgerDimensionDefaultAccount fetchLedgerDimensionDefaultAccount(LedgerDimensionDefaultAccount _ledgerDiemensionDefaultAccount = 0, 
        TaxCode _taxCode = '', 
        TaxDirection _taxDirection = TaxDirection::IncomingTax, 
        DataAreaId _taxDataAreaId = curExt(),
        TaxItemGroup _taxItemGroup = '', 
        AccountingRule _accountingRule = null)
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount = _ledgerDiemensionDefaultAccount;

        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>