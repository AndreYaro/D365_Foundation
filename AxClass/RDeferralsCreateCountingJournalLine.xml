<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsCreateCountingJournalLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rDeferralsCreateCountingJournalLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
        public static void createJournalLine(RDeferralsCountingJournal _deferralsCountingJournal)
    {
        RDeferralsTable               deferralsTable;
        RDeferralsBook                deferralsBook;
        RDeferralsTrans               deferralsTrans;
        RDeferralsCountingJournalLine deferralsCountingJournalLine;
        date                          repDate;
        date                          prevDate;
        date                          firstDate;
        RDeferralsSum                 totalAmount;
        RDeferralsSum                 totalAmountRepYear;
        RDeferralsSum                 totalAmountPreYear;
        RecordInsertList              recordInsertList = new RecordInsertList(tablenum(RDeferralsCountingJournalLine), true);

        if (RDeferralsCountingJournalLine::exist(_deferralsCountingJournal.RecId))
            return;

        while select deferralsTable
        join deferralsBook
            where deferralsBook.DeferralsId == deferralsTable.DeferralsId &&
                  deferralsBook.Depreciate  == NoYes::No
        {
            if (deferralsBook.Status == RDeferralsStatus::Retired)
                continue;

            if (deferralsBook.Status == RDeferralsStatus::Closed)
            {
                select firstonly TransDate from deferralsTrans
                    order by TransDate desc
                    where deferralsTrans.DeferralsBookId == deferralsBook.DeferralsBookId
                       && deferralsTrans.DeferralsId     == deferralsBook.DeferralsId
                       && deferralsTrans.TransType       == RDeferralsTransType::WritingOff;

                if (_deferralsCountingJournal.StartDate > deferralsTrans.TransDate)
                    continue;
            }

            repDate   = _deferralsCountingJournal.StartDate - 1;
            prevDate  = prevyr(repDate);
            firstDate = mkdate(1, 1, year(repDate));

            totalAmount        = -RDeferralsCreateCountingJournalLine::getAmount(deferralsTable.AcquisitionDate, repDate,  deferralsTable, deferralsBook);
            totalAmountRepYear = -RDeferralsCreateCountingJournalLine::getAmount(firstDate,                      repDate,  deferralsTable, deferralsBook);
            totalAmountPreYear = -RDeferralsCreateCountingJournalLine::getAmount(deferralsTable.AcquisitionDate, prevDate, deferralsTable, deferralsBook);

            deferralsCountingJournalLine.rDeferralsCountingJournal = _deferralsCountingJournal.RecId;
            deferralsCountingJournalLine.DeferralID                = deferralsTable.DeferralsId;
            deferralsCountingJournalLine.Name                      = deferralsTable.Name;
            deferralsCountingJournalLine.AcquisitionDate           = deferralsTable.AcquisitionDate;
            deferralsCountingJournalLine.DeferralBookId            = deferralsBook.DeferralsBookId;
            deferralsCountingJournalLine.LifeTime                  = deferralsBook.LifeTime;
            deferralsCountingJournalLine.WritingOffAmountTotal     = totalAmount;
            deferralsCountingJournalLine.DeferralsAmount           = deferralsBook.DeferralsAmount;
            deferralsCountingJournalLine.RemainAmount              = deferralsBook.DeferralsAmount - totalAmount;
            deferralsCountingJournalLine.WritingOffReportYear      = totalAmountRepYear;
            deferralsCountingJournalLine.WritingOffAmount          = deferralsBook.DeferralsAmount - totalAmountPreYear;

            deferralsCountingJournalLine.Months = max((year  (_deferralsCountingJournal.StartDate) - year   (deferralsBook.StartDeferralsDate)) * 12 +
                                                      mthofyr(_deferralsCountingJournal.StartDate) - mthofyr(deferralsBook.StartDeferralsDate),
                                                      0);

            recordInsertList.add(deferralsCountingJournalLine);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
        public static RDeferralsSum getAmount(
        date            _startDate,
        date            _endDate,
        RDeferralsTable _deferralsTable,
        RDeferralsBook  _deferralsBook)
    {
        RDeferralsTrans deferralsTrans;

        select sum(Amount) from deferralsTrans
            where deferralsTrans.DeferralsId     == _deferralsTable.DeferralsId      &&
                  deferralsTrans.DeferralsBookId == _deferralsBook.DeferralsBookId   &&
                  (deferralsTrans.TransType      == RDeferralsTransType::Retired     ||
                   deferralsTrans.TransType      == RDeferralsTransType::WritingOff) &&
                  deferralsTrans.TransDate       <= _enddate                         &&
                  deferralsTrans.TransDate       >= _startDate;

        return deferralsTrans.Amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>