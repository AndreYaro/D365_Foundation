<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSTmpLoadTemplateFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSTmpLoadTemplateFormHelper</c> class is used to handle operations from forms that involves the <c>TMSTmpLoadTemplate</c> table.
/// </summary>
class TMSTmpLoadTemplateFormHelper
{
    TMSTmpLoadTemplate tmpLoadTemplate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteTmpRecords</Name>
				<Source><![CDATA[
    private void deleteTmpRecords()
    {
        ttsBegin;
        delete_from tmpLoadTemplate;
        ttsCommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertLoadBuildTemplateLoadTemplate</Name>
				<Source><![CDATA[
    private void insertLoadBuildTemplateLoadTemplate(TMSLoadBuildTemplateId  _loadBuildTemplateId)
    {
        TMSLoadBuildTemplateLoadTemplate    tmsLoadBuildTemplateLoadTemplateNew, tmsLoadBuildTemplateLoadTemplateDelete;
        TMSTmpLoadTemplate                  tmsTmpLoadTemplateLocal;

        if (! _loadBuildTemplateId)
        {
            return;
        }

        tmsTmpLoadTemplateLocal.setTmpData(tmpLoadTemplate);

        ttsBegin;

        //we delete all the records since we dont want to risk index violations if the seqeunces have changed
        delete_from tmsLoadBuildTemplateLoadTemplateDelete
            where     tmsLoadBuildTemplateLoadTemplateDelete.LoadBuildTemplate == _loadBuildTemplateId;

        //insert based on temp table
        while select tmsTmpLoadTemplateLocal
        {
            tmsLoadBuildTemplateLoadTemplateNew.LoadBuildTemplate   = _loadBuildTemplateId;
            tmsLoadBuildTemplateLoadTemplateNew.LoadTemplate        = tmsTmpLoadTemplateLocal.LoadTemplate;
            tmsLoadBuildTemplateLoadTemplateNew.Sequence            = tmsTmpLoadTemplateLocal.Sequence;
            tmsLoadBuildTemplateLoadTemplateNew.insert();
        }

        ttsCommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertTmpRecords</Name>
				<Source><![CDATA[
    private void insertTmpRecords(TMSLoadBuildTemplateId  _tmsLoadBuildTemplateId)
    {
        TMSLoadBuildTemplateLoadTemplate tmsLoadBuildTemplateLoadTemplate;

        ttsBegin;
        this.deleteTmpRecords();

        while select tmsLoadBuildTemplateLoadTemplate
            where tmsLoadBuildTemplateLoadTemplate.LoadBuildTemplate == _tmsLoadBuildTemplateId
        {
            tmpLoadTemplate.LoadTemplate = tmsLoadBuildTemplateLoadTemplate.LoadTemplate;
            tmpLoadTemplate.Sequence     = tmsLoadBuildTemplateLoadTemplate.Sequence;
            tmpLoadTemplate.insert();
        }

        ttsCommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>loadTemplateIdList</Name>
				<Source><![CDATA[
    private TMSLoadBuildLoadTemplateList loadTemplateIdList()
    {
        TMSTmpLoadTemplate              tmsTmpLoadTemplateLocal;
        TMSLoadBuildLoadTemplateList    loadBuildLoadTemplateList;

        loadBuildLoadTemplateList = TMSLoadBuildLoadTemplateList::construct();

        tmsTmpLoadTemplateLocal.setTmpData(tmpLoadTemplate);

        while select tmsTmpLoadTemplateLocal
            order by Sequence asc
        {
            loadBuildLoadTemplateList.addEnd(tmsTmpLoadTemplateLocal.LoadTemplate);
        }

        return loadBuildLoadTemplateList;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmTmpLoadTemplate</Name>
				<Source><![CDATA[
    public TMSTmpLoadTemplate parmTmpLoadTemplate(TMSTmpLoadTemplate _tmpLoadTemplate = tmpLoadTemplate)
    {
        tmpLoadTemplate = _tmpLoadTemplate;

        return tmpLoadTemplate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static TMSTmpLoadTemplateFormHelper construct()
    {
        return new TMSTmpLoadTemplateFormHelper();
    }
]]></Source>
			</Method>
			<Method>
				<Name>createLoadTemplateIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an ordered list containing the template IDs from the <c>TMSTmpLoadTemplate</c> buffer.
    /// </summary>
    /// <param name="_tmsTmpLoadTemplate">
    /// A <c>TMSTmpLoadTemplate</c> buffer.
    /// </param>
    /// <returns>
    /// An ordered list containing the template IDs from the <c>TMSTmpLoadTemplate</c> buffer.
    /// </returns>
    public static TMSLoadBuildLoadTemplateList createLoadTemplateIdList(TMSTmpLoadTemplate _tmsTmpLoadTemplate)
    {
        TMSTmpLoadTemplateFormHelper    tmsTmpLoadTemplateFormHelper = TMSTmpLoadTemplateFormHelper::construct();
        tmsTmpLoadTemplateFormHelper.parmTmpLoadTemplate(_tmsTmpLoadTemplate);

        return tmsTmpLoadTemplateFormHelper.loadTemplateIdList();
    }
]]></Source>
			</Method>
			<Method>
				<Name>deleteTmpLoadTemplateFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// delete all records from the <c>TMSTmpLoadTemplate</c> buffer.
    /// </summary>
    /// <param name="_tmsTmpLoadTemplate">
    /// A <c>TMSTmpLoadTemplate</c> buffer.
    /// </param>
    public static void deleteTmpLoadTemplateFromForm(
        TMSTmpLoadTemplate      _tmsTmpLoadTemplate)
    {
        TMSTmpLoadTemplateFormHelper    tmsTmpLoadTemplateFormHelper = TMSTmpLoadTemplateFormHelper::construct();
        tmsTmpLoadTemplateFormHelper.parmTmpLoadTemplate(_tmsTmpLoadTemplate);

        tmsTmpLoadTemplateFormHelper.deleteTmpRecords();
    }
]]></Source>
			</Method>
			<Method>
				<Name>generateLoadBuildLoadTemplateFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>TMSLoadBuildTemplateLoadTemplate</c> records for the load build template based on the content of the <c>TMSTmpLoadTemplate</c> buffer.
    /// </summary>
    /// <param name="_tmsTmpLoadTemplate">
    /// A <c>TMSTmpLoadTemplate</c> buffer.
    /// </param>
    /// <param name="_tmsLoadBuildTemplateId">
    /// The <c>TMSLoadBuildTemplateId</c> ID that the load templates should be identified by.
    /// </param>
    /// <remarks>
    /// If any records exist in the <c>TMSLoadBuildTemplateLoadTemplate</c> table for the load build template ID that are not in <c>TMSTmpLoadTemplate</c> buffer the they will be deleted.
    /// </remarks>
    public static void generateLoadBuildLoadTemplateFromForm(
        TMSTmpLoadTemplate      _tmsTmpLoadTemplate,
        TMSLoadBuildTemplateId  _tmsLoadBuildTemplateId)
    {
        TMSTmpLoadTemplateFormHelper    tmsTmpLoadTemplateFormHelper = TMSTmpLoadTemplateFormHelper::construct();
        tmsTmpLoadTemplateFormHelper.parmTmpLoadTemplate(_tmsTmpLoadTemplate);

        tmsTmpLoadTemplateFormHelper.insertLoadBuildTemplateLoadTemplate(_tmsLoadBuildTemplateId);
    }
]]></Source>
			</Method>
			<Method>
				<Name>generateTmpLoadTemplateFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>TMSTmpLoadTemplate</c> buffer with the load template IDs related to the load build template.
    /// </summary>
    /// <param name="_tmsTmpLoadTemplate">
    /// A <c>TMSTmpLoadTemplate</c> buffer.
    /// </param>
    /// <param name="_tmsLoadBuildTemplateId">
    /// The <c>TMSLoadBuildTemplateId</c> ID that the load templates should be identified by.
    /// </param>
    public static void generateTmpLoadTemplateFromForm(
        TMSTmpLoadTemplate      _tmsTmpLoadTemplate,
        TMSLoadBuildTemplateId  _tmsLoadBuildTemplateId)
    {
        TMSTmpLoadTemplateFormHelper    tmsTmpLoadTemplateFormHelper = TMSTmpLoadTemplateFormHelper::construct();
        tmsTmpLoadTemplateFormHelper.parmTmpLoadTemplate(_tmsTmpLoadTemplate);

        tmsTmpLoadTemplateFormHelper.insertTmpRecords(_tmsLoadBuildTemplateId);
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>