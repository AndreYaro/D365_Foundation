<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWaveNotificationManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWaveNotificationManager</c> class is a singleton class that sends notifications for wave execution events.
/// </summary>
internal class WhsWaveNotificationManager
{
    private static WhsWaveNotificationManager instance;
    protected static const str WaveExecutionNotificationRuleId = 'WHSWaveExecutionNotification';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    static void TypeNew()
    {
        instance = WhsWaveNotificationManager::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WhsWaveNotificationManager</c>.
    /// </summary>
    /// <returns>A new instance of <c>WhsWaveNotificationManager</c></returns>
    protected static WhsWaveNotificationManager construct()
    {
        return new WhsWaveNotificationManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current instance of <c>WhsWaveNotificationManager</c>.
    /// </summary>
    /// <returns>The current instance of <c>WhsWaveNotificationManager</c></returns>
    [Hookable(false)]
    internal static WhsWaveNotificationManager instance()
    {
        return WhsWaveNotificationManager::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleNotificationsOnWaveExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles all required notifications after a wave has executed, either successfully or with an error.
    /// </summary>
    /// <param name = "_waveTable">The wave being executed.</param>
    /// <param name = "_waveExecutionId">The wave execution ID.</param>
    /// <param name = "_numWorkCreated">Number of work headers created to be included in the notification.</param>
    /// <param name = "_exceptionMessage">If the execution has ended with a failure, the exception message. Otherwise, empty.</param>
    [Hookable(false)]
    internal void handleNotificationsOnWaveExecuted(WHSWaveTable _waveTable, WHSWaveExecutionID _waveExecutionId, WHSNumWorkCreated _numWorkCreated, str _exceptionMessage = '')
    {
        boolean waveExecutionSuccessful = (_exceptionMessage == '');
        
        if (waveExecutionSuccessful)
        {
            this.sendWaveExecutedSuccessfullyBusinessEvent(_waveTable, _waveExecutionId, _numWorkCreated);
        }
        else
        {
            this.sendWaveExecutedWithExceptionBusinessEvent(_waveTable, _waveExecutionId, _exceptionMessage);
        }

        this.sendWaveExecutionNotifications(_waveTable, _waveExecutionId, _exceptionMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendWaveExecutedWithExceptionBusinessEvent</Name>
				<Source><![CDATA[
    private void sendWaveExecutedWithExceptionBusinessEvent(WHSWaveTable _waveTable, WHSWaveExecutionID _waveExecutionId, str _exceptionMessage)
    {
        var event = WhsWaveExecutedBusinessEvent::newFromWaveExecutionWithException(_waveTable, _waveExecutionId, _exceptionMessage);
        event.send();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendWaveExecutedSuccessfullyBusinessEvent</Name>
				<Source><![CDATA[
    private void sendWaveExecutedSuccessfullyBusinessEvent(WHSWaveTable _waveTable, WHSWaveExecutionID _waveExecutionId, WHSNumWorkCreated _numWorkCreated)
    {
        var businessEvent = WhsWaveExecutedBusinessEvent::newFromWaveExecution(_waveTable, _waveExecutionId, true, _numWorkCreated);
        businessEvent.send();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendWaveExecutionNotifications</Name>
				<Source><![CDATA[
    private void sendWaveExecutionNotifications(WHSWaveTable _waveTable, WHSWaveExecutionID _waveExecutionId, str _exceptionMessage = '')
    {
        if (!_waveTable.WaveTemplateName)
        {
            return;
        }
      
        WHSWaveTemplateTable waveTemplate = _waveTable.waveTemplate();
        WHSWaveNotificationPolicy notificationPolicy = WhsWaveNotificationPolicy::find(waveTemplate.WaveNotificationPolicy);
        
        if (!notificationPolicy
            || notificationPolicy.WaveExecutionNotificationOn == WhsWaveExecutionNotificationOn::Never
            || (_exceptionMessage == '' && notificationPolicy.WaveExecutionNotificationOn == WhsWaveExecutionNotificationOn::Error))
        {
            return;
        }
        
        SystemNotificationDataContract notification = new SystemNotificationDataContract();
        notification.RuleId(WaveExecutionNotificationRuleId);

        if (notificationPolicy.WaveExecutionNotificationToCreator && _waveTable.CreatedBy)
        {
            notification.Users().value(1, _waveTable.CreatedBy);
        }

        if (notificationPolicy.WaveExecutionNotificationToRole)
        {
            notification.Roles().value(1, notificationPolicy.WaveExecutionNotificationToRole);
        }
        
        if (_exceptionMessage == '')
        {
            notification.Title("@WAX:WaveExecutedSuccess");
            notification.Message(strFmt("@WAX1617", _waveTable.WaveId));
            notification.Severity(SystemNotificationSeverity::Informational);
        }
        else
        {
            notification.Title("@WAX:WaveExecutedError");
            notification.Message(strFmt("@WAX:WaveExecutedErrorBody", _waveTable.WaveId, _exceptionMessage));
            notification.Severity(SystemNotificationSeverity::Error);
        }
        
        SystemNotificationActionDataContract action = new SystemNotificationActionDataContract();
        action.Message("@WAX:OpenWaveDetails");
        action.Type(SystemNotificationActionType::AxDisplayMenuFunction);

        SystemNotificationMenuFunctionDataContract actionData = new SystemNotificationMenuFunctionDataContract();
        actionData.MenuItemName(menuItemDisplayStr(WHSWaveTable));
        actionData.TableName(tableStr(WHSWaveTable));
        actionData.RecId(_waveTable.RecId);
        action.Data(FormJsonSerializer::serializeClass(actionData));
        
        notification.Actions().value(1, action);

        SystemNotificationsManager::AddNotification(notification);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>