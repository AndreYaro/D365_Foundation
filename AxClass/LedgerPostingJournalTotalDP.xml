<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostingJournalTotalDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerPostingJournalTotalDP</c> class provides data for the <c>LedgerPostingJournalTotal</c>
///    SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(Querystr(LedgerPostingJournalTotal)),
    SRSReportParameterAttribute(ClassStr(LedgerPostingJournalTotalContract))
]
public class LedgerPostingJournalTotalDP extends SrsReportDataProviderPreProcessTempDB
{
    GeneralJournalEntry                 generalJournalEntry;
    GeneralJournalAccountEntry          generalJournalAccountEntry;
    DimensionAttributeLevelValueView    dimensionAttributeLevelValueView;

    AmountMST               amountDebit;
    AmountMST               amountCredit;
    AmountMST               amountDebitDetail;
    AmountMST               amountCreditDetail;
    LedgerPostingJournalId  postingJournalId;
    Yr                      currentYear;
    int                     currentMonth;
    container               conSummary[];
    container               conDetail[];
    int                     lengthOfArray;
    int                     lengthOfArrayDetail;
    NoYes                   withDetails;
    int                     numOfDigits;

    MainAccountNum                  mainAccountNum;
    LedgerPostingJournalTotalTmp    ledgerPostingJournalTotalTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createContainers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a container for the <c>conSummary</c> and <c>conDetail</c> objects.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createContainers()
    {
        int                 seq;                          //The sequence of the record in conSummary
        int                 seqDetail;                    //The sequence of the record in conDetail
        int                 month;
        int                 getYear;

        month = mthofyr(generalJournalEntry.AccountingDate);
        getYear  = year(generalJournalEntry.AccountingDate);
        seq = this.findLine(month,getYear,generalJournalEntry.LedgerPostingJournal);

        //The line doesn't exist in total yet
        if (seq == 0)
        {
            lengthOfArray++;
            lengthOfArrayDetail++;
            if (generalJournalAccountEntry.AccountingCurrencyAmount > 0)
            {
                conSummary[lengthOfArray] = [month, getYear, generalJournalEntry.LedgerPostingJournal, generalJournalAccountEntry.AccountingCurrencyAmount, 0];
                conDetail[lengthOfArrayDetail] = [month, getYear, generalJournalEntry.LedgerPostingJournal, generalJournalAccountEntry.AccountingCurrencyAmount, 0, substr(dimensionAttributeLevelValueView.DisplayValue, 1, numOfDigits)];
            }
            else
            {
                conSummary[lengthOfArray] = [month, getYear, generalJournalEntry.LedgerPostingJournal, 0, generalJournalAccountEntry.AccountingCurrencyAmount];
                conDetail[lengthOfArrayDetail] = [month, getYear, generalJournalEntry.LedgerPostingJournal, 0, generalJournalAccountEntry.AccountingCurrencyAmount, substr(dimensionAttributeLevelValueView.DisplayValue, 1, numOfDigits)];
            }
        }
        //The line exists in the total
        else
        {
            seqDetail = this.findLineDetail(month, getYear, generalJournalEntry.LedgerPostingJournal, dimensionAttributeLevelValueView.DisplayValue);

            //The line doesn't exist in the detail
            if (seqDetail == 0)
            {
                lengthOfArrayDetail++;
                if (generalJournalAccountEntry.AccountingCurrencyAmount > 0)
                {
                    AmountMSTDebCred updatedSummaryAccountingCurrency = conpeek(conSummary[seq], 4) + generalJournalAccountEntry.AccountingCurrencyAmount;

                    conSummary[seq] = conpoke(conSummary[seq], 4, updatedSummaryAccountingCurrency);
                    conDetail[lengthOfArrayDetail] = [month, getYear, generalJournalEntry.LedgerPostingJournal, generalJournalAccountEntry.AccountingCurrencyAmount, 0, substr(dimensionAttributeLevelValueView.DisplayValue, 1, numOfDigits)];
                }
                else
                {
                    AmountMSTDebCred updatedSummaryAccountingCurrency = conpeek(conSummary[seq], 5) + generalJournalAccountEntry.AccountingCurrencyAmount;

                    conSummary[seq] = conpoke(conSummary[seq], 5, updatedSummaryAccountingCurrency);
                    conDetail[lengthOfArrayDetail] = [month, getYear, generalJournalEntry.LedgerPostingJournal, 0, generalJournalAccountEntry.AccountingCurrencyAmount, substr(dimensionAttributeLevelValueView.DisplayValue, 1, numOfDigits)];
                }
            }
            //The line exists in the detail line and in the total
            else
            {
                if (generalJournalAccountEntry.AccountingCurrencyAmount > 0)
                {
                    AmountMSTDebCred updatedSummaryAccountingCurrency = conpeek(conSummary[seq], 4) + generalJournalAccountEntry.AccountingCurrencyAmount;
                    AmountMSTDebCred updatedDetailAccountingCurrency = conpeek(conDetail[seqDetail], 4) + generalJournalAccountEntry.AccountingCurrencyAmount;

                    conSummary[seq] = conpoke(conSummary[seq], 4, updatedSummaryAccountingCurrency);
                    conDetail[seqDetail] = conpoke(conDetail[seqDetail], 4, updatedDetailAccountingCurrency);
                }
                else
                {
                    AmountMSTDebCred updatedSummaryAccountingCurrency = conpeek(conSummary[seq], 5) + generalJournalAccountEntry.AccountingCurrencyAmount;
                    AmountMSTDebCred updatedDetailAccountingCurrency = conpeek(conDetail[seqDetail], 5) + generalJournalAccountEntry.AccountingCurrencyAmount;

                    conSummary[seq] = conpoke(conSummary[seq], 5, updatedSummaryAccountingCurrency);
                    conDetail[seqDetail] = conpoke(conDetail[seqDetail], 5, updatedDetailAccountingCurrency);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the summary for the specified arguments.
    /// </summary>
    /// <param name="_month">
    ///    The month parameter value.
    /// </param>
    /// <param name="_year">
    ///    The year parameter value.
    /// </param>
    /// <param name="_postingJournalId">
    ///    The posting journal ID parameter value.
    /// </param>
    /// <returns>
    ///    The sequence number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int findLine(int _month, int _year, LedgerPostingJournalId _postingJournalId)
    {
        int     i = 1;

        while (conpeek(conSummary[i],1))
        {
            if (conpeek(conSummary[i],1) == _month && conpeek(conSummary[i],2) == _year && conpeek(conSummary[i],3) == _postingJournalId)
            {
                return i;
            }
            i++;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the details for the specified arguments.
    /// </summary>
    /// <param name="_month">
    ///    The month parameter value.
    /// </param>
    /// <param name="_year">
    ///    The year parameter value.
    /// </param>
    /// <param name="_postingJournalId">
    ///    The posting journal ID parameter value.
    /// </param>
    /// <param name="_accountString">
    ///    The ledger account parameter value.
    /// </param>
    /// <returns>
    ///    The sequence number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int findLineDetail(int _month, int _year, LedgerPostingJournalId _postingJournalId, str _accountString)
    {
        int             i = 1;
        boolean         accountCond;

        while (conpeek(conDetail[i],1))
        {
            accountCond = (substr(conpeek(conDetail[i],6),1,numOfDigits) == substr(_accountString,1,numOfDigits));
            if (conpeek(conDetail[i],1) == _month && conpeek(conDetail[i],2) == _year && accountCond &&  conpeek(conDetail[i],3) == _postingJournalId)
            {
                return i;
            }
            i++;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerPostingJournalTotalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table to retrieve the data table.
    /// </summary>
    /// <returns>
    ///    The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(LedgerPostingJournalTotalTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerPostingJournalTotalTmp getLedgerPostingJournalTotalTmp()
    {
        select ledgerPostingJournalTotalTmp;
        return  ledgerPostingJournalTotalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertTmpTable()
    {
        MainAccount localMainAccount = MainAccount::findByMainAccountId(mainAccountNum);

        ledgerPostingJournalTotalTmp.Month           = currentMonth;
        ledgerPostingJournalTotalTmp.Year            = currentYear;
        ledgerPostingJournalTotalTmp.JournalName     = postingJournalId;
        ledgerPostingJournalTotalTmp.MainAccountId   = mainAccountNum;
        ledgerPostingJournalTotalTmp.AccountName     = localMainAccount.localizedName();
        ledgerPostingJournalTotalTmp.DebitAmount     = amountDebit;
        ledgerPostingJournalTotalTmp.CreditAmount    = -amountCredit;
        ledgerPostingJournalTotalTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        LedgerPostingJournalTotalContract   contract;
        QueryRun    queryRun;
        int         i = 1;
        int         j = 1;

        contract = this.parmDataContract() as LedgerPostingJournalTotalContract;
        withDetails = contract.parmDetail();
        numOfDigits = contract.parmNumberOfAccountDigits();

        queryRun    = new QueryRun(this.parmQuery());

        queryRun.query().dataSourceTable(tablenum(GeneralJournalEntry)).addRange(fieldnum(GeneralJournalEntry,Ledger)).value(SysQuery::value(Ledger::current()));

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(GeneralJournalAccountEntry)))
            {
                generalJournalEntry                 =   queryRun.get(tablenum(GeneralJournalEntry));
                generalJournalAccountEntry          =   queryRun.get(tablenum(GeneralJournalAccountEntry));
                dimensionAttributeLevelValueView    =   queryRun.get(tablenum(DimensionAttributeLevelValueView));
                this.createContainers();
            }
        }
        while (conpeek(conSummary[i],1))
        {
            currentMonth     = conpeek(conSummary[i],1);
            currentYear      = conpeek(conSummary[i],2);
            postingJournalId = conpeek(conSummary[i],3);

            j = 1;
            while (conpeek(conDetail[j],1))
            {
                if (conpeek(conDetail[j],1) == currentMonth && conpeek(conDetail[j],2) == currentYear
                                                && conpeek(conDetail[j],3) == postingJournalId)
                {
                    mainAccountNum                  = conpeek(conDetail[j],6);
                    amountDebit                     = conpeek(conDetail[j],4);
                    amountCredit                    = conpeek(conDetail[j],5);
                    this.insertTmpTable();
                }
                j++;
            }

            i++;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>