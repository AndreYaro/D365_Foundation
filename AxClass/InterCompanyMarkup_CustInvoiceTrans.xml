<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyMarkup_CustInvoiceTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InterCompanyMarkup_CustInvoiceTrans extends InterCompanyMarkup
{
    CustInvoiceTrans    custInvoiceTrans;
    PurchLine           purchLine;
    CustInvoiceJour     custInvoiceJourLocal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFrom</Name>
				<Source><![CDATA[
    void copyFrom(boolean _insert = false)
    {
        MarkupTrans     markupTransRef;
        CompanyId       interCompanyCompanyId;
        boolean         isICPOVirtualCharge;

        changecompany(markupTrans.company())
        {
            custInvoiceTrans = CustInvoiceTrans::findRecId(markupTrans.TransRecId);
            custInvoiceJourLocal = custInvoiceTrans.custInvoiceJour();

            if (custInvoiceJourLocal)
            {
                interCompanyCompanyId = custInvoiceJourLocal.InterCompanyCompanyId;
            }
            else
            {
                interCompanyCompanyId = custInvoiceTrans.salesLine().salesTable().InterCompanyCompanyId;
            }

            if (interCompanyCompanyId)
            {
                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                changecompany(interCompanyCompanyId)
                {
                    setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                    purchLine = PurchLine::findInventTransId(custInvoiceTrans.InterCompanyInventTransId);
                    if (purchLine.RecId)
                    {
                        ttsBegin;
                        markupTransRef = this.setMarkupTransSource();

                        if (markupTransRef)
                        {
                            // If the original charge on the ICPO is not a virtual charge, we should update
                            // it instead of inserting a new one since the only field that changes is IntercompanyInvoiceId.
                            isICPOVirtualCharge = markupTransRef.Keep == NoYes::Yes;
                            if (_insert && isICPOVirtualCharge)
                            {
                                markupTransRef = null;
                            }
                        }

                        this.parmMarkupAmount(markupTrans.signedValue(markupTrans.CalculatedAmount));
                        markupTransRef = this.writeMarkupTrans(markupTransRef,purchLine,true,markupTrans,custInvoiceTrans.InvoiceId);
                        ttsCommit;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromInterCompanyTradingValueMap</Name>
				<Source><![CDATA[
    public InterCompanyTradingValueMap fromInterCompanyTradingValueMap()
    {
        InterCompanyTradingValueMap interCompanyTradingValueMap;

        if (!custInvoiceJourLocal.RecId)
        {
            custInvoiceJourLocal = custInvoiceTrans.custInvoiceJour();
        }

        if (custInvoiceJourLocal.RecId)
        {
            interCompanyTradingValueMap = custInvoiceJourLocal.interCompanyTradingValueMap();
        }
        else
        {
            interCompanyTradingValueMap = custInvoiceTrans.salesLine().salesTable().interCompanyTradingValueMap();
        }

        return interCompanyTradingValueMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupUseValue</Name>
				<Source><![CDATA[
    boolean markupUseValue()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toInterCompanyTradingValueMap</Name>
				<Source><![CDATA[
    public InterCompanyTradingValueMap toInterCompanyTradingValueMap()
    {
        return purchLine.purchTable().interCompanyTradingValueMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInclTax</Name>
				<Source><![CDATA[
    protected boolean isInclTax()
    {
        boolean ret = false;
        ret = custInvoiceJourLocal.InclTax == NoYes::Yes;
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>