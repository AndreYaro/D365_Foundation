<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupUpdateRefTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimLPCleanupUpdateRefTable extends RunBaseBatch implements BatchRetryable
{
    private InventDimLPCleanupJob cleanupJob;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        cleanupJob
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimLPCleanupJob</Name>
				<Source><![CDATA[
    public InventDimLPCleanupJob parmInventDimLPCleanupJob(InventDimLPCleanupJob _cleanupJob = cleanupJob)
    {
        cleanupJob = _cleanupJob;

        return cleanupJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (InventDimLPCleanupService::existsAnotherInventDimLPCleanupJobRunning(this.parmCurrentBatch().RecId))
        {
            throw error("@SCM:InventDimLPCleanupAnotherJobNotFinished");
        }

        if (InventDimLPCleanupService::existsInventUnusedDimCleanUpJobRunning())
        {
            throw error("@SCM:InventUnusedDimCleanupJobNotFinished");
        }

        ttsbegin;
        cleanupJob = InventDimLPCleanupJob::findBySessionId(cleanupJob.SessionId, true);
        cleanupJob.UpdateRefTable = NoYes::Yes;
        cleanupJob.update();

        InventDimLPCleanupTask inventDimLPCleanupTask;
        delete_from inventDimLPCleanupTask
            where inventDimLPCleanupTask.SessionId     == cleanupJob.SessionId
               && inventDimLPCleanupTask.CleanupStatus == InventDimLPCleanupStatus::Complete;
        ttscommit;

        if (!InventDimLPCleanupChangeTmp::hasRecords())
        {
            warning("@SCM:NoRecordsToUpdate");

            ttsbegin;
            cleanupJob.reread();
            cleanupJob.Status = InventDimLPCleanupStatus::Complete;
            cleanupJob.update();
            ttscommit;

            return;
        }

        boolean canUpdateRefTables = cleanupJob.Status == InventDimLPCleanupStatus::ReadyForUpdateRefTable
                                  && !InventDimLPCleanupTask::existBySessionId(cleanupJob.SessionId);

        if (canUpdateRefTables)
        {
            Batch batch = BatchHeader::getCurrentBatchTask();

            if (!batch)
            {
                throw error("@DataExpTool:ErrMsg_BatchJobSelect_1");
            }

            BatchHeader batchHeader = BatchHeader::construct(batch.BatchJobId);

            if (!batchHeader)
            {
                throw error("@DataExpTool:ErrMsg_BatchHeaderSelect_1");
            }

            InventDimLPCleanupService::createBatchTasks(batchHeader, batch, cleanupJob.SessionId);
        }
        else
        {
            error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventDimLPCleanupUpdateRefTable construct()
    {
        return new InventDimLPCleanupUpdateRefTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:InventDimLPCleanupUpdateRefTableDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (InventDimLPCleanupService::existsAnotherInventDimLPCleanupJobRunning())
        {
            throw error("@SCM:InventDimLPCleanupAnotherJobNotFinished");
        }

        if (args && args.dataset() == tableNum(InventDimLPCleanupJob))
        {
            InventDimLPCleanupUpdateRefTable updateRefTable = InventDimLPCleanupUpdateRefTable::construct();
            updateRefTable.getLast();
            updateRefTable.parmInventDimLPCleanupJob(args.record());

            if (updateRefTable.prompt())
            {
                updateRefTable.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>