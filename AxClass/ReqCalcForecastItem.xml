<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcForecastItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqCalcForecastItem extends ReqCalc implements BatchRetryable
{
    ItemId itemId;

    #DEFINE.CurrentVersion(3)

    #LOCALMACRO.CurrentList
        ItemId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return strfmt("@SYS25340",itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSafetyInvent</Name>
				<Source><![CDATA[
    protected void createSafetyInvent(
        ReqSetupDim     _setupDim,
        boolean         _fromCoverage
        )
    {
        if (_setupDim.covRule() == ReqCovType::MinMax)
        {
            super(_setupDim,_fromCoverage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dflReqPlanId = dialog.addFieldValue(extendedtypestr(ReqPlanIdForecast), reqPlanId);

        this.dialogQueryButton();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogQueryButton</Name>
				<Source><![CDATA[
    protected void dialogQueryButton()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reqPlanId = dflReqPlanId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeIntercompanyDemand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a value that indicates whether to include intercompany demand or not.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether to include intercompany demand or not.
    /// </returns>
    public boolean includeIntercompanyDemand()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqLog</Name>
				<Source><![CDATA[
    protected void initReqLog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    protected void insertData()
    {
        ReqSetup        setup;

        setup = reqPlanData.newReqSetup(itemId);

        if (setup.mustItemReqBeCreated())
        {
            setprefix(fieldLabelValue(tablenum(InventTable), fieldnum(InventTable,ItemId), itemId));
            this.updateItemLock(itemId);

            this.deleteItemRequirement(setup);
            this.addItem2ReqTransCache(itemId,false);

            this.insertItemSafetyInvent(setup);
            this.insertItemForecastInvent(setup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateInstrumentationContext</Name>
				<Source><![CDATA[
    protected SysInstrumentationActivityContext initiateInstrumentationContext()
    {
        return this.reqInstrumentationLogger().calc().forecastItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>super</c> method.
    /// </summary>
    /// <remarks>
    ///    This method can be overwritten to add new attributes.
    /// </remarks>
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>safetyStockDate</Name>
				<Source><![CDATA[
    protected TransDate safetyStockDate(ReqSetupDim     setupDim)
    {
        if (setupDim.covRule() == ReqCovType::MinMax)
        {
            return reqPlanData.todaysdate();
        }

        return super(setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsbegin</Name>
				<Source><![CDATA[
    protected void ttsbegin()
    {
        ttsbegin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttscommit</Name>
				<Source><![CDATA[
    protected void ttscommit()
    {
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version        = conpeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = packedClass;
                super(base);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqTransUpdate</Name>
				<Source><![CDATA[
    protected void updateReqTransUpdate(ItemId _itemId)
    {
          // nothing to update
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCache</Name>
				<Source><![CDATA[
    public ReqUseCache useCache()
    {
        return ReqUseCache::Maximum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (! itemId)
        {
            return checkFailed("@SYS23094");
        }

        if (! ReqPlanForecast::find(this.parmReqPlanId()).RecId)
        {
            return checkFailed(strfmt("@SYS25369",this.parmReqPlanId()));
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ReqCalcForecastItem construct()
    {
        return new ReqCalcForecastItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS25296";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        #OCCRetryCount
        ItemId                      itemId;
        ReqCalcForecastItem         reqCalcForecastItem;
        ReqPlanId                   reqPlanId;
        ReqTransForm                reqTransForm;

        itemId    = ReqCalc::argsItemId(args);
        reqPlanId = ReqCalc::argsReqPlanId(args);

        if (! reqPlanId)
        {
            reqPlanId = ReqParameters::find().CurrentReqPlanIdForecast;
        }

        if (!itemId)
        {
            throw error(strfmt("@SYS25516",funcname()));
        }

        reqCalcForecastItem = ReqCalcForecastItem::newItemId(itemId,reqPlanId);

        if (!reqCalcForecastItem.prompt())
        {
            return;
        }

        try
        {
            reqCalcForecastItem.runOperation();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            var currentRetryCount = xSession::currentRetryCount();
            if (currentRetryCount >= #RetryNum || !ReqTransientSqlConnectionErrorHandlingHelper::isReqTransientSqlConnectionErrorHandlingToggleEnabled())
            {
                reqCalcForecastItem.cleanUp();
                throw;
            }
            else
            {
                ReqTransientSqlConnectionErrorHandlingHelper::delayRetry(currentRetryCount);
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    reqCalcForecastItem.cleanUp();
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                reqCalcForecastItem.cleanUp();
                throw Exception::UpdateConflict;
            }
        }
        catch
        {
            reqCalcForecastItem.cleanUp();
        }

        if (args.caller().name() == formstr(ReqTransOverview))
        {
            reqTransForm =  args.caller().reqTransForm();
            reqTransForm.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    public static ReqCalcForecastItem newItemId(ItemId _itemId, ReqPlanIdForecast _reqPlanIdForecast)
    {
        ReqCalcForecastItem reqCalcForecastItem  = ReqCalcForecastItem::construct();
        reqCalcForecastItem.getLast();
        reqCalcForecastItem.parmItemId(_itemId);
        reqCalcForecastItem.parmReqPlanId(_reqPlanIdForecast);
        reqCalcForecastItem.parmReqCalcUpdate(ReqCalcUpdate::Regeneration);
        reqCalcForecastItem.parmAutoReserveCoverage(false);

        return reqCalcForecastItem;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>