<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConfirmJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::Confirmation)]
class SalesConfirmJournalCreate extends FormletterJournalCreate
{
    CustConfirmJour             custConfirmJour;
    CustConfirmTrans            custConfirmTrans;

    SalesTable                  salesTable;
    SalesParmTable              salesParmTable;
    SalesParmUpdate             salesParmUpdate;
    SalesLine                   salesLine;

    SalesTotals                 salesTotals;
    RecordSortedList            recordListSalesParmLine;
    NoYes                       creditNote;
    // <GIN>
    container                   eximConfrmOrderAssessbleValues;
    boolean                     isCountryRegion_IN;
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcLine</Name>
				<Source><![CDATA[
    protected void calcLine(SalesLine _salesLine, SalesParmLine _salesParmLine)
    {
        updateNow           = _salesParmLine.DeliverNow;
        updateNowInvent     = _salesParmLine.InventNow;
        lineValue           = _salesLine.calcLineAmountExclTax(updateNow, this.updateDate(), salesTotals.tax());
        lineValueInclTax    = _salesLine.calcLineAmount(updateNow);

        if (_salesParmLine.InventNow != _salesLine.RemainInventPhysical)
        {
            // verify that partly updates are allowed
            if (!_salesParmLine.salesTable().type().canBePartlyConfirmed())
            {
                throw(error(strFmt("@SYS83692", _salesParmLine.OrigSalesId, _salesParmLine.ItemId)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContainsNonExistingSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are <c>SalesParmLine</c> records relating to non existing sales orders.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If there are <c>SalesParmLine</c> records relating to non existing sales orders.
    /// </exception>
    protected void checkContainsNonExistingSalesOrder()
    {
        SalesParmLine   salesParmLine;
        SalesTable      localSalesTable;

        select firstonly RecId from salesParmLine
            where salesParmLine.ParmId      == salesParmTable.ParmId
                && salesParmLine.TableRefId == salesParmTable.TableRefId
            notexists join localSalesTable
                where localSalesTable.SalesId == salesParmLine.OrigSalesId;

        if (salesParmLine.RecId)
        {
            throw error("@SYS16740");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the sales update line should be discarded.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The sales update line to be checked.
    /// </param>
    /// <returns>
    /// true if the sales update line should be discarded; otherwise, false .
    /// </returns>
    protected boolean checkDiscardLine(Common _salesParmLine)
    {
        SalesParmLine salesParmLine = _salesParmLine as SalesParmLine;

        if (salesParmLine.DeliverNow == 0)
        {
            return true;
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            this.parmTax().validate_IN();
        }
        // </GIN>

        salesLine = salesParmLine.salesLine();
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header when the sales order, the purchase order, or the request for quote is
    /// updated.
    /// </summary>
    protected void createJournalHeader()
    {
        // <GEEU>
        // </GEEU>

        this.setDeliveryFields();

        custConfirmJour.SalesBalance      = salesTotals.totalBalance();
        custConfirmJour.CostValue         = salesTotals.totalCostValue();
        custConfirmJour.EndDisc           = salesTotals.totalEndDisc();
        custConfirmJour.SumLineDisc       = salesTotals.totalLineDisc();
        custConfirmJour.SumMarkup         = salesTotals.totalMarkup();
        custConfirmJour.SumTax            = salesTotals.totalTaxAmount();
        custConfirmJour.RoundOff          = salesTotals.totalRoundOff();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES])
            && TaxParameters::canApplyCashDiscOnInvoice_ES()
            && SalesConfirmJournalTotalAmountWithCashDisc_ESFlight::instance().isEnabled())
        {
            salesTotals.totalCashDisc();
            custConfirmJour.ConfirmAmount     = salesTotals.totalAmountCashDiscOnInvoice(true);
        }
        else
        {
            custConfirmJour.ConfirmAmount     = salesTotals.totalAmount();
        }

        custConfirmJour.Qty               = salesTotals.totalQty();
        custConfirmJour.Weight            = salesTotals.totalWeight();
        custConfirmJour.Volume            = salesTotals.totalVolume();
        // <GIN>
        if (isCountryRegion_IN && EximParameters_IN::checkParameters())
        {
            custConfirmJour.CustomsExportOrder_IN = salesTable.CustomsExportOrder_IN;
        }
        // </GIN>
        custConfirmJour.insert();

        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            TaxSpecificExchangeRateHelper::copyFromTaxSpecificExchangeRateType(
                salesTable.TableId,
                salesTable.RecId,
                custConfirmJour.TableId,
                custConfirmJour.RecId);
        }
        // <GEEU>
        else if (TaxParameters::isBankExchRateEnabled_W())
        {
            SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(salesTable.TableId, salesTable.RecId);

            if (salesTaxTransactionExchangeRate)
            {
                SalesTaxExchangeRateHelper::saveSalesTaxTransactionExchangeRate(custConfirmJour.TableId, custConfirmJour.RecId, custConfirmJour.CurrencyCode,
                    salesTaxTransactionExchangeRate.SalesTaxExchangeRate, salesTaxTransactionExchangeRate.DateOfVATRegister);
            }
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _salesParmLine)
    {
        Label   label = new Label(custConfirmJour.LanguageId);
        // <GIN>
        EximSalesLine_IN    eximSalesLine;
        SalesLine           salesLineLoc;
        // </GIN>

        custConfirmTrans.clear();
        custConfirmTrans.initValue();

        custConfirmTrans.initFromSalesLine(salesLine);
        this.calcLine(salesLine, _salesParmLine as SalesParmLine);

        custConfirmTrans.setLinenum(this.getLineNum());

        custConfirmTrans.SalesId        = custConfirmJour.SalesId;
        custConfirmTrans.ConfirmId      = custConfirmJour.ConfirmId;
        custConfirmTrans.ConfirmDate    = custConfirmJour.ConfirmDate;

        custConfirmTrans.Qty            = updateNow;
        custConfirmTrans.InventQty      = updateNowInvent;
        custConfirmTrans.LineAmount     = lineValue;
        custConfirmTrans.LineAmountTax  = lineValueInclTax - lineValue;

        custConfirmTrans.TaxWriteCode   = this.parmTax().taxWriteCode();

        custConfirmTrans.LineHeader = label.extractString(literalStr("@SYS9694"))  + ' ' + salesLine.SalesId       + ' '
                                    + label.extractString(literalStr("@SYS24704")) + ' ' + salesLine.salesTable().CustAccount  + ' '
                                    + (salesLine.salesTable().PurchOrderFormNum ? (label.extractString(literalStr("@SYS9452"))  + ' ' + salesLine.salesTable().PurchOrderFormNum + ' ') : '')
                                    + custConfirmTrans.LineHeader;

        this.insertJournalLine(custConfirmTrans);
        // <GIN>
        if (isCountryRegion_IN
            && EximParameters_IN::checkParameters()
            && salesTable.CustomsExportOrder_IN)
        {
            SalesParmLine localSalesParmLine = _salesParmLine as SalesParmLine;
            select firstonly SalesLineRecId, EximPorts, EximProductGroupTable from eximSalesLine
                join RecId, InventTransId from salesLineLoc
                where salesLineLoc.RecId         == eximSalesLine.SalesLineRecId
                   && salesLineLoc.InventTransId == localSalesParmLine.InventTransId;

            eximConfrmOrderAssessbleValues += [localSalesParmLine.salesParmLine_IN().AssessableValueTransactionCurrency, eximSalesLine.EximPorts, eximSalesLine.EximProductGroupTable];
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common _salesParmLine)
    {
        SalesParmLine salesParmLine = _salesParmLine as SalesParmLine;
        CustConfirmSalesLink    custConfirmSalesLink;

        custConfirmSalesLink.initFromSalesParmLine  (salesParmLine);
        custConfirmSalesLink.initFromSalesTable     (SalesTable::find(salesParmLine.OrigSalesId));
        custConfirmSalesLink.initFromCustConfirmJour(custConfirmJour);
        this.insertJournalLink(custConfirmSalesLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when the journal creation is completed.
    /// </summary>
    protected void endCreate()
    {
        // <GIN>
        CustConfirmTrans        custConfirmTransLoc;
        EximCustConfirmTrans_IN eximCustConfirmTransLoc;
        // </GIN>

        super();

        // <GIN>
        // Link the extension table - EximCustConfirmTrans_IN using CostConfirmTrans RecIds.
        if (isCountryRegion_IN
            && EximParameters_IN::checkParameters()
            && salesTable.CustomsExportOrder_IN)
        {
            insert_recordset eximCustConfirmTransLoc (CustConfirmTransRecId)
                select RecId from custConfirmTransLoc
                    where   custConfirmTransLoc.SalesId     == custConfirmJour.SalesId
                        &&  custConfirmTransLoc.ConfirmDate == custConfirmJour.ConfirmDate
                        &&  custConfirmTransLoc.ConfirmId   == custConfirmJour.ConfirmId;

            Counter cnt = conLen(eximConfrmOrderAssessbleValues);
            while select reverse forupdate eximCustConfirmTransLoc
                order by RecId
                join custConfirmTransLoc
                where custConfirmTransLoc.RecId       == eximCustConfirmTransLoc.CustConfirmTransRecId
                   && custConfirmTransLoc.SalesId     == custConfirmJour.SalesId
                   && custConfirmTransLoc.ConfirmDate == custConfirmJour.ConfirmDate
                   && custConfirmTransLoc.ConfirmId   == custConfirmJour.ConfirmId
            {
                eximCustConfirmTransLoc.EximProductGroupTable   = conPeek(eximConfrmOrderAssessbleValues, cnt);
                eximCustConfirmTransLoc.EximPorts               = conPeek(eximConfrmOrderAssessbleValues, cnt - 1);
                eximCustConfirmTransLoc.AssessableValue         = conPeek(eximConfrmOrderAssessbleValues, cnt - 2);
                eximCustConfirmTransLoc.update();
                cnt -= 3;
            }
            eximConfrmOrderAssessbleValues = conNull();
        }
        // </GIN>

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.transitDocument();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxBusinessService::transferTaxDocument(salesParmTable, custConfirmJour);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the form letter type.
    /// </summary>
    /// <returns>
    /// An element from the <c>FormletterType</c> enumeration.
    /// </returns>
    protected FormletterType formletterType()
    {
        return FormletterType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current journal header.
    /// </summary>
    /// <returns>
    /// A journal header record.
    /// </returns>
    public Common getJournal()
    {
        return custConfirmJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        // <GIN>
        isCountryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        salesParmTable.researchSalesOrderAutoCharges();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header record.
    /// </summary>
    protected void initJournalHeader()
    {
        this.checkContainsNonExistingSalesOrder();
        custConfirmJour.clear();
        custConfirmJour.initValue();

        custConfirmJour.ConfirmId           = this.getJournalNumber();
        custConfirmJour.ParmId              = salesParmUpdate.ParmId;
        custConfirmJour.ConfirmDate         = salesParmTable.Transdate;

        custConfirmJour.initFromSalesTable(salesTable);
        custConfirmJour.setDocNum(salesTable);
        custConfirmJour.InterCompanyPosted  = this.parmInterCompanyPosted();
        custConfirmJour.Deadline            = salesParmUpdate.RespiteDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the source table record.
    /// </summary>
    protected void initSourceTable()
    {
        salesTable = salesParmTable.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the total calculation.
    /// </summary>
    protected void initTotals()
    {
        salesTotals = SalesTotals::construct(salesParmTable, salesParmUpdate.SpecQty, salesParmUpdate.SumBy, salesParmUpdate.ParmId, salesParmUpdate.SumSalesId, documentStatus);
        salesTotals.prepareTotalAmountCalculation();
        salesTotals.prepareQuantitiesCalculation();        
        salesTotals.prepareCostValueCalculation();        

        this.parmTax(salesTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordList</Name>
				<Source><![CDATA[
    protected void insertRecordList()
    {
        super();

        WHSJourLoadLine::insertJourLoadLines(CustConfirmJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal line table.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return tableNum(CustConfirmTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal link table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal link table.
    /// </returns>
    protected TableId linksTableId()
    {
        return tableNum(CustConfirmSalesLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSequenceReference</c> object for the journal number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return SalesParameters::numRefConfirmId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = salesParmUpdate)
    {
        salesParmUpdate = _parmUpdate as SalesParmUpdate;
        return salesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal is a proforma journal.
    /// </summary>
    /// <returns>
    /// true if the journal is a proforma journal; otherwise, false
    /// </returns>
    protected boolean proforma()
    {
        return salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>RecordSortedList</c> object with all posting parameter line records.
    /// </summary>
    /// <returns>
    /// A <c>RecordSortedList</c> object.
    /// </returns>
    protected RecordSortedList recordListParmLine()
    {
        return salesTotals.recordSortedListLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryFields</Name>
				<Source><![CDATA[
    protected void setDeliveryFields()
    {
        SalesLine       localSalesLine;
        SalesParmLine   salesParmLine;

        if (!salesParmTable.DeliveryPostalAddress
        || !salesParmTable.DeliveryName
        || !salesParmTable.DlvMode)
        {
            select firstonly salesParmLine
                where salesParmLine.ParmId     == salesParmTable.ParmId
                &&    salesParmLine.TableRefId == salesParmTable.TableRefId;

            localSalesLine = salesParmLine.salesLine();
        }

        custConfirmJour.DeliveryPostalAddress = salesParmTable.DeliveryPostalAddress ? salesParmTable.DeliveryPostalAddress
                                                                                 : localSalesLine.DeliveryPostalAddress;
        custConfirmJour.DeliveryName      = salesParmTable.DeliveryName    ? salesParmTable.DeliveryName
                                                                           : localSalesLine.defaultDeliveryName();
        custConfirmJour.DlvMode           = salesParmTable.DlvMode         ? salesParmTable.DlvMode
                                                                           : (localSalesLine.DlvMode ? localSalesLine.DlvMode : localSalesLine.salesTable().DlvMode);
        
        if (SalesConfirmJournalSplitByDeliveryTermsFlight::instance().isEnabled())
        {
            custConfirmJour.DlvTerm = salesParmTable.DlvTerm ? salesParmTable.DlvTerm
                                                             : (localSalesLine.DlvTerm ? localSalesLine.DlvTerm : localSalesLine.salesTable().DlvTerm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table for the journal.
    /// </summary>
    /// <returns>
    /// A record in the <c>SalesTable</c> table.
    /// </returns>
    protected Common sourceTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total object.
    /// </summary>
    /// <returns>
    /// A total object.
    /// </returns>
    protected Object totals()
    {
        return salesTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the posting parameter line table.
    /// </summary>
    /// <returns>
    /// A record in the <c>SalesParmLine</c> table.
    /// </returns>
    protected Common typeParmLine()
    {
        SalesParmLine   salesParmLine;
        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate  updateDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesConfirmJournalCreate construct()
    {
        return new SalesConfirmJournalCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        CustConfirmTrans        custConfirmTransLoc;
        SalesParmLine           salesParmLineLoc;
        TransitDocumentManager_IN transitDocManager = TransitDocumentManager_IN::newManager();

        transitDocManager.transit(salesParmTable, custConfirmJour);

        while select custConfirmTransLoc
                where custConfirmTransLoc.ConfirmId == custConfirmJour.ConfirmId
                && custConfirmTransLoc.SalesId      == custConfirmJour.SalesId
                && custConfirmTransLoc.ConfirmDate  == custConfirmJour.ConfirmDate
                join salesParmLineLoc
                    where salesParmLineLoc.ParmId       == salesParmTable.ParmId
                    && salesParmLineLoc.TableRefId      == salesParmTable.TableRefId
                    && salesParmLineLoc.InventTransId   == custConfirmTransLoc.InventTransId
        {
            transitDocManager.transit(salesParmLineLoc, custConfirmTransLoc, custConfirmJour);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>