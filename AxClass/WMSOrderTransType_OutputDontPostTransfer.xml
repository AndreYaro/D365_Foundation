<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsOrderTransType_OutputDontPostTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsOrderTransType_OutputDontPostTransfer extends WMSOrderTransType_Output
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateRefillTransport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Activates a refill transport.
    /// </summary>
    /// <remarks>
    ///    Errors will not be thrown if the refill is not possible.
    /// </remarks>
    protected void activateRefillTransport()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowShipmentUnReservationForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a Boolean value that determines whether the shipment un-reservation is allowed for a
    /// single line.
    /// </summary>
    /// <returns>
    /// true because the shipment un-reservation for a single line is allowed for picking lines of the
    /// <c>WMSOrderType::Output</c> type.
    /// </returns>
    public boolean allowShipmentUnReservationForLine()
    {
        if (wmsOrderTrans.wmsPickingRoute().ExpeditionStatus == WMSExpeditionStatus::Started)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFix</Name>
				<Source><![CDATA[
    public void checkFix(SysConsistencyCheck _sysConsistencyCheck)
    {
        InventTrans             inventTrans, inventTrans1;
        InventTransOrigin       inventTransOrigin;
        WMSOrderTrans           orderTrans, orderTrans1, orderTrans2, orderTrans3;
        int                     i;
        InventQty               qtyRemaining, availQty;
        InventMovement          inventMovement;
        InventDim               inventDimCriteria;
        InventDimParm           inventDimParm;
        InventDimFixed          inventDimFixed;
        WMSLocation             wmsLocation;
        InventUpd_Reservation   inventUpd_Reservation;

        boolean                 pdsIsCWItem = PdsGlobal::pdsIsCWItem(wmsOrderTrans.ItemId);

        super(_sysConsistencyCheck);

        if (pdsIsCWItem)
        {
            this.pdsCWCheckFix(_sysConsistencyCheck);
            return;
        }

        if ((wmsOrderTrans.ExpeditionStatus     == WMSExpeditionStatus::Registered ||
            wmsOrderTrans.ExpeditionStatus      == WMSExpeditionStatus::Activated) &&
            wmsOrderTrans.IsReserved            == NoYes::Yes)
        {
            select sum(Qty) from inventTrans
                where inventTrans.TransChildType    == InventTransChildType::WMSOrder
                   && inventTrans.TransChildRefId   == wmsOrderTrans.OrderId
                   && inventTrans.InventDimId       == wmsOrderTrans.InventDimId
                   && inventTrans.StatusReceipt     == StatusReceipt::None
                   && (inventTrans.StatusIssue      == StatusIssue::ReservPhysical
                   ||  inventTrans.StatusIssue      == StatusIssue::ReservOrdered)
                exists join inventTransOrigin
                    where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId   == wmsOrderTrans.InventTransId;

            select sum(Qty) from orderTrans
                where orderTrans.OrderId            == wmsOrderTrans.OrderId
                   && orderTrans.InventDimId        == wmsOrderTrans.InventDimId
                   && orderTrans.IsReserved         == NoYes::Yes
                   && (orderTrans.ExpeditionStatus  == WMSExpeditionStatus::Registered
                   ||  orderTrans.ExpeditionStatus  == WMSExpeditionStatus::Activated);

            if (orderTrans.Qty != -inventTrans.Qty)
            {
                setPrefix(wmsOrderTrans.inventDim().preFix());
                checkFailed(strFmt("@SYS60838", orderTrans.Qty, -inventTrans.Qty));
                if (_sysConsistencyCheck.checkFix() == CheckFix::Fix)
                {
                    i = infologLine();
                    try
                    {
                        ttsbegin;
                        select forupdate firstonly orderTrans3
                            where orderTrans3.OrderId   == wmsOrderTrans.OrderId
                              &&  orderTrans3.RecId     == wmsOrderTrans.RecId;

                        qtyRemaining = orderTrans.Qty + inventTrans.Qty;
                        if (qtyRemaining > 0)
                        {
                            while select sum(Qty), InventDimId, InventDimFixed from inventTrans1
                                group by InventDimId, InventDimFixed
                                where inventTrans1.TransChildType    == InventTransChildType::WMSOrder
                                   && inventTrans1.TransChildRefId   == wmsOrderTrans.OrderId
                                   && inventTrans1.InventDimId       != wmsOrderTrans.InventDimId
                                   && (inventTrans1.StatusIssue      == StatusIssue::ReservPhysical
                                   ||  inventTrans1.StatusIssue      == StatusIssue::ReservOrdered)
                            {
                                select sum(Qty) from orderTrans1
                                    where orderTrans1.OrderId            == wmsOrderTrans.OrderId
                                       && orderTrans1.InventDimId        == inventTrans1.InventDimId
                                       && orderTrans1.InventDimFixed     == inventTrans1.InventDimFixed
                                       && orderTrans1.IsReserved         == NoYes::Yes
                                       && (orderTrans1.ExpeditionStatus  == WMSExpeditionStatus::Registered
                                       ||  orderTrans1.ExpeditionStatus  == WMSExpeditionStatus::Activated);
                                if (orderTrans1.Qty != -inventTrans1.Qty)
                                {
                                    if (-inventTrans1.Qty > orderTrans1.Qty)
                                    {
                                        availQty = -inventTrans1.Qty - orderTrans1.Qty;
                                        if (availQty >= qtyRemaining)
                                        {
                                            orderTrans3.InventDimId   = inventTrans1.InventDimId;
                                            orderTrans3.InventDimFixed = inventTrans1.InventDimFixed;
                                            orderTrans3.doUpdate();
                                            qtyRemaining = 0;
                                            _sysConsistencyCheck.updateCorrected();
                                        }
                                        else
                                        {
                                            orderTrans2.data(wmsOrderTrans);
                                            orderTrans2.Qty = availQty;
                                            orderTrans2.InventDimId   = inventTrans1.InventDimId;
                                            orderTrans2.InventDimFixed = inventTrans1.InventDimFixed;
                                            orderTrans2.doInsert();
                                            orderTrans3.Qty -= availQty;
                                            orderTrans3.doUpdate();
                                            qtyRemaining -= availQty;
                                        }
                                    }
                                }
                                if (qtyRemaining == 0)
                                {
                                    break;
                                }
                            }
                            if (qtyRemaining > 0)
                            {
                                orderTrans3.ExpeditionStatus = WMSExpeditionStatus::Registered;
                                orderTrans3.doUpdate();
                                wmsLocation = wmsOrderTrans.inventDim().wmsLocation();
                                inventMovement = this.inventMovement();
                                inventDimCriteria = inventMovement.inventdim();
                                inventDimParm.initPrimaryDimReservation(inventMovement.inventDimGroupSetup() ,inventDimCriteria);
                                inventDimFixed = InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParm);
                                inventDimCriteria.wmsLocationId = wmsLocation.wmsLocationId;
                                inventDimParm.wmsLocationIdFlag = NoYes::Yes;
                                inventDimCriteria.InventLocationId = wmsLocation.InventLocationId;
                                inventDimParm.InventLocationIdFlag = NoYes::Yes;
                                inventDimCriteria.initFromInventLocation(inventDimCriteria.inventLocation()); // inventDimParm is set in PrimaryDimReservation
                                inventUpd_Reservation = InventUpd_Reservation::newMovementWMS(inventMovement,
                                                inventDimCriteria, inventDimParm, inventDimFixed, -qtyRemaining);
                                inventUpd_Reservation.parmPdsCWForceActual(true);
                                inventUpd_Reservation.updateNow();
                                orderTrans3.addInventTransReservations();
                                _sysConsistencyCheck.updateCorrected();
                            }
                        }
                        else
                        {
                            inventMovement = this.inventMovement();
                            inventDimCriteria = wmsOrderTrans.inventDim();
                            inventDimParm.setAllInventDim();
                            inventUpd_Reservation = InventUpd_Reservation::newMovementWMS(inventMovement,
                                            inventDimCriteria, inventDimParm, wmsOrderTrans.InventDimFixed, -qtyRemaining);
                            inventUpd_Reservation.parmPdsCWForceActual(true);
                            inventUpd_Reservation.updateNow();
                            _sysConsistencyCheck.updateCorrected();
                        }
                        ttscommit;
                    }
                    catch(Exception::Error)
                    {
                        infolog.clear(i);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreaseQty</Name>
				<Source><![CDATA[
    private boolean decreaseQty(InventQty _qty, PdsCWInventQty _pdsCWQty = 0)//qty is negative
    {
        boolean                     ret = false;
        InventMovement              inventMovement;
        InventMovement              inventMovementParent;
        InventUpd_ChildReference    childReference;
        InventQty                   qtyOverDelivered;
        InventQty                   qtyChangeChildTrans;
        InventQty                   qtyUnit;

        boolean                     cwItem = PdsGlobal::pdsIsCWItem(wmsOrderTrans.ItemId);
        PdsCWInventQty              cwQtyOverDelivered;
        PdsCWInventQty              cwQtyChangeChildTrans;
        PdsCWInventQty              cwQtyUnReserve;

        InventQty                   qtyUnReserve;
        boolean                     wasReserved;

        if (wmsOrderTrans.Qty < 0)
        {
            throw(error("@SYS50502"));
        }

        wmsOrder = this.wmsOrder(true);

        qtyOverDelivered    = wmsOrder.qtyOverdelivered();
        cwQtyOverDelivered  = wmsOrder.pdsCWQtyOverdelivered();

        switch (wmsOrderTrans.ExpeditionStatus)
        {
            case WMSExpeditionStatus::Registered:   // Fall through
            case WMSExpeditionStatus::Activated:    // Fall through
            case WMSExpeditionStatus::Started:
                //  Over delivered transactions will be removed later so only unreserved quantity below requested quantity.
                if ((!cwItem && (-_qty - qtyOverDelivered > 0)) ||
                    (cwItem && (-_pdsCWQty - cwQtyOverDelivered > 0)))
                {
                    qtyUnReserve = _qty + qtyOverDelivered;

                    cwQtyUnReserve = _pdsCWQty + cwQtyOverDelivered;

                    wasReserved  = wmsOrderTrans.IsReserved;
                    this.unReserve(false, true, -qtyUnReserve, false, -cwQtyUnReserve);
                    //The line must remain marked as reserved when decreasing quantity
                    if (wasReserved && wmsOrderTrans.Qty != 0)
                    {
                        wmsOrderTrans.IsReserved = NoYes::Yes;
                    }
                }
                break;
            case WMSExpeditionStatus::Picked:       // Fall through
            case WMSExpeditionStatus::Staged:       // Fall through
            case WMSExpeditionStatus::Loaded:       // Fall through
            case WMSExpeditionStatus::Complete:
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if ((!cwItem && qtyOverDelivered > 0) ||
            (cwItem && cwQtyOverDelivered > 0))
        {
            inventMovement = this.inventMovement();
            inventMovementParent = inventMovement.parentMovement();

            if (!inventMovementParent.mustBeRemainControlled())
            {
                throw(error(strFmt("@SYS54471", qtyOverDelivered)));
            }

            if ((!cwItem && qtyOverDelivered > -_qty) ||
                (cwItem && qtyOverDelivered > -_pdsCWQty))//we are still over delivering after reduction
            {
                wmsOrder.Qty += _qty;
                wmsOrder.QtyNoShipment = 0;

                wmsOrder.PdsCWQty += _pdsCWQty;
                wmsOrder.PdsCWQtyNoShipment = 0;

                qtyChangeChildTrans     = -_qty;
                cwQtyChangeChildTrans   = -_pdsCWQty;
            }
            else
            {
                wmsOrder.QtyNoShipment -= (_qty + qtyOverDelivered);
                wmsOrder.Qty            = wmsOrder.QtyRequested;

                wmsOrder.PdsCWQtyNoShipment -= (_pdsCWQty + cwQtyOverDelivered);
                wmsOrder.PdsCWQty            = wmsOrder.PdsCWQtyRequested;

                qtyChangeChildTrans     = qtyOverDelivered;
                cwQtyChangeChildTrans   = cwQtyOverDelivered;
            }

            qtyUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                        wmsOrder.ItemId,
                        wmsOrder.InventDimId,
                        qtyChangeChildTrans,
                        inventMovementParent.inventTable().inventUnitId(),
                        inventMovementParent.transUnitId(),
                        NoYes::Yes);

            childReference = InventUpd_ChildReference::newParameters(
                inventMovement,
                qtyChangeChildTrans,
                qtyUnit,
                false,
                wmsOrderTrans.InventDimId,
                cwQtyChangeChildTrans);

            if (cwItem && wmsOrderTrans.isReserved)
            {
                childReference.parmExcludeOnOrder(true);
            }

            childReference.updateNow();

            if (cwItem
                || wmsOrderTrans.inventTransType != InventTransType::TransferOrderShip
                || wmsOrder.calcQtyOverdelivered() != 0
                || !WMSTransferPickingRegistrationDecreaseQtyFlight::instance().isEnabled())
            {
                this.updateParentMovementOnQtyDecrease(inventMovementParent, qtyChangeChildTrans, qtyUnit, cwQtyChangeChildTrans);
            }

            _qty += qtyChangeChildTrans;
            _pdsCWQty += cwQtyChangeChildTrans;
        }
        else
        {
            wmsOrder.QtyNoShipment      -= _qty;
            wmsOrder.PdsCWQtyNoShipment -= _pdsCWQty;
        }

        wmsOrder.doUpdate();

        if (cwItem && !_pdsCWQty && _qty)
        {
            this.pdsDecreaseWeight(-_qty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentMovementOnQtyDecrease</Name>
				<Source><![CDATA[
	/// <summary>
    /// Updates the parent movement when decreasing remain physical on parent movement.
    /// </summary>
    /// <param name = "_inventMovementParent">An instance of the <c>InventMovement</c> class.</param>
    /// <param name = "_qtyChange">The adjusted inventory quantity value.</param>
    /// <param name = "_qtyUnit">The adjusted unit quantity value.</param>
    /// <param name = "_cwQtyChange">The adjusted catch weight quantity value.</param>
    protected void updateParentMovementOnQtyDecrease(InventMovement _inventMovementParent, InventQty _qtyChange, InventQty _qtyUnit, PdsCWInventQty _cwQtyChange)
    {
        this.updateParentMovement(_inventMovementParent, _qtyChange, _qtyUnit, _cwQtyChange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateQty</Name>
				<Source><![CDATA[
    private boolean doUpdateQty(InventQty _qtyDelta, PdsCWInventQty _cwQtyDelta)
    {
        boolean ret = false;

        if (_qtyDelta < 0)
        {
            ret = this.decreaseQty(_qtyDelta , _cwQtyDelta);
        }
        else if (_qtyDelta > 0)
        {
            ret = this.increaseQty(_qtyDelta, _cwQtyDelta);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseQty</Name>
				<Source><![CDATA[
    private boolean increaseQty(InventQty _qtyRequested, PdsCWInventQty _pdsCWQtyRequested = 0)
    {
        boolean             research = false;
        boolean             tmpRes;
        InventQty           qty = _qtyRequested;

        boolean             pdsIsCWItem = PdsGlobal::pdsIsCWItem(wmsOrderTrans.ItemId);
        PdsCWInventQty      pdsCWQty = _pdsCWQtyRequested;

        if (qty && !_pdsCWQtyRequested && pdsIsCWItem)
        {
            [tmpRes, qty, pdsCWQty] = this.pdsIncreaseQtyZeroCWLine(qty, pdsCWQty);
            research = research || tmpRes;
        }

        if (qty && !_pdsCWQtyRequested && pdsIsCWItem)
        {
            [tmpRes, qty, pdsCWQty] = this.pdsIncreaseWeight(qty, pdsCWQty);
            research = research || tmpRes;
        }

        if (!pdsIsCWItem && wmsOrderTrans.wmsPickingRoute().AutoDecreaseQty)
        {
            if (qty)
            {
                // First see if there are other lines in same route that can be reduced
                [tmpRes, qty, pdsCWQty] = this.increaseQtySamePickingRoute(qty, pdsCWQty);
                research = research || tmpRes;
            }

            if (qty)
            {
                // Now see if there are other lines in other picking routes that can be reduced
                [tmpRes, qty, pdsCWQty] = this.increaseQtyOtherPickingRoute(qty, pdsCWQty);
                research = research || tmpRes;
            }
        }

        if (((!pdsIsCWItem && qty) || (pdsIsCWItem && pdsCWQty)) && wmsOrderTrans.IsReserved &&
            (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered
            || wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Activated
            || wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Started))
        {
            // Find reserved inventory transactions without WMSOrderTrans records
            [tmpRes, qty, pdsCWQty] = this.increaseQtyNoShipment(qty, pdsCWQty);
            research = research || tmpRes;
        }

        if (((!pdsIsCWItem && qty) || (pdsIsCWItem && pdsCWQty)) && !wmsOrderTrans.IsReserved) 
        {
            //Find open inventTrans without wmsOrderTrans records
            [tmpRes, qty, pdsCWQty] = this.increaseQtyNotReservedPhysical(qty, pdsCWQty);
            research = research || tmpRes;
        }

        if (qty || pdsCWQty)
        {
            this.increaseQtyOverdelivery(qty, pdsCWQty);
        }

        return research;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseQtyNoShipment</Name>
				<Source><![CDATA[
    private container increaseQtyNoShipment(InventQty _qtyRequested, PdsCWInventQty _pdsCWQtyRequested = 0)
    {
        boolean             research = false;
        InventQty           qty = _qtyRequested;
        InventQty           availQty;
        WMSOrderTrans       wmsOrderTransOther;
        InventTrans         inventTrans;

        PdsCWInventQty      pdsCWQty = _pdsCWQtyRequested;
        PdsCWInventQty      pdsCWAvailQty;

        void updateInventTrans()
        {
            while select sum(Qty), sum(PdsCWQty), InventDimFixed, InventDimId from inventTrans
                group by InventDimId, InventDimFixed
                where inventTrans.InventTransOrigin == this.inventMovement().inventTransOriginId()
                   && inventTrans.TransChildType    == InventTransChildType::WMSOrder
                   && inventTrans.TransChildRefId   == wmsOrderTrans.OrderId
                   && inventTrans.StatusReceipt     == StatusReceipt::None
                   && (inventTrans.StatusIssue      == StatusIssue::ReservPhysical
                   ||  inventTrans.StatusIssue      == StatusIssue::ReservOrdered)
            {
                if (InventDim::isInventDimFixedEqual(inventTrans.inventDim(),
                        wmsOrderTrans.inventDim(), inventTrans.InventDimFixed))
                {
                    select sum(Qty), sum(PdsCWQty) from wmsOrderTransOther
                        where wmsOrderTransOther.OrderId            == wmsOrderTrans.OrderId
                           && wmsOrderTransOther.InventDimId        == inventTrans.InventDimId
                           && wmsOrderTransOther.InventDimFixed     == inventTrans.InventDimFixed
                           && wmsOrderTransOther.IsReserved         == NoYes::Yes
                           && (wmsOrderTransOther.ExpeditionStatus  == WMSExpeditionStatus::Registered
                           || wmsOrderTransOther.ExpeditionStatus   == WMSExpeditionStatus::Activated
                           || wmsOrderTransOther.ExpeditionStatus   == WMSExpeditionStatus::Started);

                    availQty        = -inventTrans.Qty - wmsOrderTransOther.Qty;
                    pdsCWAvailQty   = -inventTrans.PdsCWQty - wmsOrderTransOther.PdsCWQty;

                    if (availQty > 0)
                    {
                        if (availQty > qty)
                        {
                            availQty        = qty;
                            pdsCWAvailQty   = pdsCWQty;
                        }
                        if (availQty > 0
                            && availQty > wmsOrder.QtyNoShipment)
                        {
                            availQty        = wmsOrder.QtyNoShipment;
                            pdsCWAvailQty   = wmsOrder.PdsCWQtyNoShipment;
                        }
                        if (inventTrans.InventDimId != wmsOrderTrans.InventDimId)
                        {
                            InventUpd_ChangeDimension::updateForceDimInventTrans(
                                            this.inventMovement(),
                                            -availQty, inventTrans.inventDim(),
                                            wmsOrderTrans.inventDim(), false,
                                            false, false,  -pdsCWAvailQty);
                        }
                        wmsOrder.QtyNoShipment      -= availQty;
                        wmsOrder.PdsCWQtyNoShipment -= pdsCWAvailQty;

                        wmsOrder.doUpdate();
                        qty         -= availQty;
                        pdsCWQty    -= pdsCWAvailQty;
                    }
                }
                if (qty == 0
                    || wmsOrder.QtyNoShipment == 0)
                {
                    break;
                }
            }
        }
        wmsOrder = this.wmsOrder(true);
        if (wmsOrder.QtyNoShipment)
        {
            updateInventTrans();
        }

        if (qty && wmsOrder.QtyNoShipment)
        {
            if (qty > wmsOrder.QtyNoShipment)
            {
                qty         -= wmsOrder.QtyNoShipment;
                pdsCWQty    -= wmsOrder.PdsCWQtyNoShipment;

                this.increaseQtyReserveMore(wmsOrder.QtyNoShipment, wmsOrder.PdsCWQtyNoShipment);
            }
            else
            {
                this.increaseQtyReserveMore(qty, pdsCWQty);

                qty         = 0;
                pdsCWQty    = 0;
            }
        }

        return [research, qty, pdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseQtyNotReservedPhysical</Name>
				<Source><![CDATA[
    private container increaseQtyNotReservedPhysical(
        InventQty           _qtyRequested,
        PdsCWInventQty      _pdsCWQtyRequested = 0
        )
    {
        boolean             research = false;
        InventQty           qty = _qtyRequested;
        InventQty           availQty;
        WMSOrderTrans       wmsOrderTransOther;
        InventTrans         inventTrans;

        PdsCWInventQty      pdsCWQty = _pdsCWQtyRequested;
        PdsCWInventQty      pdsCWAvailQty;

        void updateInventTrans()
        {
            while select sum(Qty), sum(PdsCWQty), InventDimId from inventTrans
                group by InventDimId
                where inventTrans.InventTransOrigin == this.inventMovement().inventTransOriginId()
                   && inventTrans.TransChildType    == InventTransChildType::WMSOrder
                   && inventTrans.TransChildRefId   == wmsOrderTrans.OrderId
                   && inventTrans.StatusReceipt     == StatusReceipt::None
                   && (inventTrans.StatusIssue      == StatusIssue::OnOrder
                   ||  inventTrans.StatusIssue      == StatusIssue::ReservOrdered)
            {
                select sum(Qty), sum(PdsCWQty)
                    from wmsOrderTransOther
                    where wmsOrderTransOther.OrderId    == wmsOrderTrans.OrderId
                        && wmsOrderTransOther.InventDimId == inventTrans.InventDimId
                        && wmsOrderTransOther.IsReserved  == NoYes::No
                        && (wmsOrderTransOther.ExpeditionStatus == WMSExpeditionStatus::Registered
                        || wmsOrderTransOther.ExpeditionStatus  == WMSExpeditionStatus::Activated
                        || wmsOrderTransOther.ExpeditionStatus  == WMSExpeditionStatus::Started);

                availQty        = -inventTrans.Qty - wmsOrderTransOther.Qty;
                pdsCWAvailQty   = -inventTrans.PdsCWQty -wmsOrderTransOther.PdsCWQty;

                if (availQty > 0)
                {
                    if (availQty > qty)
                    {
                        availQty        = qty;
                        pdsCWAvailQty   = pdsCWQty;
                    }

                    if (availQty > 0
                        && availQty > wmsOrder.QtyNoShipment)
                    {
                        availQty        = wmsOrder.QtyNoShipment;
                        pdsCWAvailQty   = wmsOrder.PdsCWQtyNoShipment;
                    }

                    if (inventTrans.InventDimId != wmsOrderTrans.InventDimId)
                    {
                        InventUpd_ChangeDimension::updateForceDimInventTrans(
                                        this.inventMovement(),
                                        -availQty, inventTrans.inventDim(),
                                        wmsOrderTrans.inventDim(), false, false,
                                        false, -pdsCWAvailQty);
                    }
                    wmsOrder.QtyNoShipment      -= availQty;
                    wmsOrder.PdsCWQtyNoShipment -= pdsCWAvailQty;

                    wmsOrder.doUpdate();
                    qty         -= availQty;
                    pdsCWQty    -= pdsCWAvailQty;
                }

                if (qty == 0 || wmsOrder.QtyNoShipment == 0)
                {
                    break;
                }
            }
        }

        wmsOrder = this.wmsOrder(true);

        if (wmsOrder.QtyNoShipment)
        {
            updateInventTrans();
        }

        return [research, qty, pdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseQtyOtherPickingRoute</Name>
				<Source><![CDATA[
    private container increaseQtyOtherPickingRoute(
        InventQty           _qtyRequested,
        PdsCWInventQty      _pdsCWQtyRequested = 0
        )
    {
        boolean             research = false;
        InventQty           qty = _qtyRequested;
        WMSOrderTrans       wmsOrderTransOther;

        PdsCWInventQty      pdsCWQty = _pdsCWQtyRequested;

        while select forupdate wmsOrderTransOther
            where wmsOrderTransOther.OrderId            == wmsOrderTrans.OrderId
               && wmsOrderTransOther.IsReserved         == wmsOrderTrans.IsReserved
               && wmsOrderTransOther.FullPallet         == wmsOrderTrans.FullPallet
            && (wmsOrderTransOther.ExpeditionStatus == WMSExpeditionStatus::None
               || wmsOrderTransOther.ExpeditionStatus  == WMSExpeditionStatus::Registered
               || wmsOrderTransOther.ExpeditionStatus  == WMSExpeditionStatus::Activated)
               && wmsOrderTransOther.RecId              != wmsOrderTrans.RecId
        {
            if (wmsOrderTransOther.InventDimId != wmsOrderTrans.InventDimId)
            {
                InventUpd_ChangeDimension::updateForceDimInventTrans(this.inventMovement(), -qty, wmsOrderTransOther.inventDim(), wmsOrderTrans.inventDim(), false, false, false , -pdsCWQty);
            }
            if (wmsOrderTransOther.Qty > qty)
            {
                wmsOrderTransOther.Qty      -= qty;
                wmsOrderTransOther.PdsCWQty -= pdsCWQty;

                wmsOrderTransOther.update();
                qty         = 0;
                pdsCWQty    = 0;
            }
            else
            {
                qty         -= wmsOrderTransOther.Qty;
                pdsCWQty    -= wmsOrderTransOther.PdsCWQty;

                wmsOrderTransOther.doDelete();
            }
            if (!qty)
            {
                break;
            }
        }

        return [research, qty, pdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseQtyOverdelivery</Name>
				<Source><![CDATA[
    private void increaseQtyOverdelivery(InventQty _qtyRequested, PdsCWInventQty _pdsCWQtyRequested = 0)
    {
        InventMovement  inventMovement = this.inventMovement();
        InventMovement  inventMovementParent = inventMovement.parentMovement();
        InventTable     inventTable = inventMovementParent.inventTable();
        InventQty       qtyUnitAdjustment;

        if (!inventMovementParent.mustBeRemainControlled())
        {
            throw(error(strFmt("@SYS54471", _qtyRequested)));
        }

        wmsOrder.Qty            += _qtyRequested;
        wmsOrder.PdsCWQty       += _pdsCWQtyRequested;

        
        //the update of the parent movement will create new inventory transactions if over delivery is allowed
        InventQty minQty = 0;

        EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                inventTable.ItemId, 
                                                                inventMovementParent.inventDimId(), 
                                                                inventTable.inventUnitId(), 
                                                                inventMovementParent.transUnitId(), 
                                                                NoYes::Yes);

        InventQty actualAdjustQty;
        if (_pdsCWQtyRequested)
        {
            // Increase OnOrder in min quantity CW units separately as they might be updated to min
            // quantity anyway if they get automatically reserved.
            minQty  = min(PdsCatchWeight::minInventQty(wmsOrderTrans.ItemId, _pdsCWQtyRequested), _qtyRequested);
            qtyUnitAdjustment = productUnitConverter.convertValue(minQty);

            InventQty qtyBeforeParentUpdate = inventMovementParent.remainPhysical();

            this.updateParentMovement(
                    inventMovementParent,
                    -minQty,
                    -qtyUnitAdjustment,
                    -_pdsCWQtyRequested);

            InventQty qtyAfterParentUpdate = inventMovementParent.remainPhysical();
            actualAdjustQty = max(minQty, -(qtyAfterParentUpdate - qtyBeforeParentUpdate));
        }

        InventQty qtyAdjustment = _qtyRequested - actualAdjustQty;

        InventTrans inventTrans;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin == inventMovementParent.inventTransOriginId()
                && inventTrans.inventDimId == inventMovementParent.inventdim().inventDimId
                && inventTrans.StatusIssue == StatusIssue::OnOrder
                && inventTrans.StatusReceipt == StatusReceipt::None
                && inventTrans.TransChildType == InventTransChildType::None;

        if (inventTrans.Qty)
        {
            qtyAdjustment = qtyAdjustment - abs(inventTrans.Qty);
        }

        if (qtyAdjustment > 0)
        {
            // Make an unconstrained weight adjustment (CW 0) with the remaining quantity
            qtyUnitAdjustment = productUnitConverter.convertValue(qtyAdjustment);

            this.updateParentMovementOnQtyIncrease(
					inventMovementParent,
                    -qtyAdjustment,
                    -qtyUnitAdjustment,
                    0);
        }

        InventQty qtyUnit = productUnitConverter.convertValue(_qtyRequested);

        InventUpd_ChildReference childReference = InventUpd_ChildReference::newParameters(
                                                        inventMovement,
                                                        -_qtyRequested,
                                                        -qtyUnit,
                                                        false,
                                                        wmsOrderTrans.InventDimId,
                                                        -_pdsCWQtyRequested);
        childReference.updateNow();

        this.reserveAndUpdateQtyNoShipment(_qtyRequested, _pdsCWQtyRequested);

        wmsOrder.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentMovementOnQtyIncrease</Name>
				<Source><![CDATA[
	/// <summary>
    /// Updates the parent movement when increasing remain physical on parent movement.
    /// </summary>
    /// <param name = "_inventMovementParent">An instance of the <c>InventMovement</c> class.</param>
    /// <param name = "_qtyAdjustment">The adjusted inventory quantity value.</param>
    /// <param name = "_qtyUnitAdjustment">The adjusted unit quantity value.</param>
    /// <param name = "_cwQtyChange">The adjusted catch weight quantity value.</param>
    protected void updateParentMovementOnQtyIncrease(InventMovement _inventMovementParent, InventQty _qtyAdjustment, InventQty _qtyUnitAdjustment, PdsCWInventQty _cwQtyChange)
    {
        this.updateParentMovement(_inventMovementParent, _qtyAdjustment, _qtyUnitAdjustment, _cwQtyChange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseQtyReserveMore</Name>
				<Source><![CDATA[
    private void increaseQtyReserveMore(InventQty _qtyRequested, PdsCWInventQty _pdsCWQtyRequested = 0, boolean useWmsOrderTransDimensions = false)
    {
        InventMovement                  inventMovement;
        InventUpd_Reservation           inventUpd_Reservation;
        InventDim                       inventDimCriteria;
        InventDimParm                   inventDimParm;
        InventDimFixed                  inventDimFixed;
        PdsCatchWeightOnHandAdjustment  pdsCatchWeightOnHandAdjustment;
        InventOnHandQty                 inventOnHandQty;

        inventMovement      = this.inventMovement();
        inventDimCriteria   = wmsOrderTrans.inventDim();

        inventOnHandQty = InventOnHandQty::newPhysicalUpdate(inventMovement, inventDimCriteria);
        pdsCatchWeightOnHandAdjustment = PdsCatchWeightOnHandAdjustment::newMovement(inventMovement);
        pdsCatchWeightOnHandAdjustment.increaseQuantityIfNeeded(inventOnHandQty, -_qtyRequested, -_pdsCWQtyRequested, inventDimCriteria.InventDimId);

        if (!useWmsOrderTransDimensions)
        {
            inventDimCriteria.InventDimId = '';
        }

        inventDimParm.setAllInventDim();
        inventDimFixed      = wmsOrderTrans.InventDimFixed;

        
        PdsCWInventQty  cwReserveQty; 
        InventQty       reserveQty;
        if (inventMovement.pdsCWItem() && inventMovement.mustBeAutoReserved())
        {
            //max since we are dealing with issues with negative sign and we do not want to reserve more than what we have onOrder. 
            //this is to deal with special situations where the movement uses autoreservation where it is hard to determine how much cwQty and inventQty is being reserved since requested qty may be reduced to minimum qty somewhere in the chain of calls.
            InventTransIdSum inventTransIdSum = InventTransIdSum::newTransIdChildType(inventMovement.inventTransOriginId(), inventMovement.transChildType(), inventMovement.transChildRefId());
            cwReserveQty = max(-_pdsCWQtyRequested, inventTransIdSum.pdsCWOnOrder());
            reserveQty = max(-_qtyRequested, inventTransIdSum.onOrder());
        }
        else
        {
            cwReserveQty = -_pdsCWQtyRequested;
            reserveQty = -_qtyRequested;
        }

        inventUpd_Reservation = InventUpd_Reservation::newMovementWMS(
                        inventMovement,
                        inventDimCriteria,
                        inventDimParm,
                        inventDimFixed,
                        reserveQty,
                        false,
                        cwReserveQty);

        inventUpd_Reservation.parmPdsCWForceActual(true);
        inventUpd_Reservation.updateNow();

        if (_qtyRequested > wmsOrder.QtyNoShipment)
        {
            wmsOrder.QtyNoShipment = 0;
            if (wmsOrder.Qty == wmsOrder.orig().Qty)
            {
                wmsOrder.Qty += _qtyRequested;
            }

            wmsOrder.PdsCWQtyNoShipment = 0;
            if (wmsOrder.PdsCWQty == wmsOrder.orig().PdsCWQty)
            {
                wmsOrder.PdsCWQty += _pdsCWQtyRequested;
            }
        }
        else
        {
            wmsOrder.QtyNoShipment      -= _qtyRequested;
            wmsOrder.PdsCWQtyNoShipment -= _pdsCWQtyRequested;
        }
        wmsOrder.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseQtySamePickingRoute</Name>
				<Source><![CDATA[
    private container increaseQtySamePickingRoute(
        InventQty       _qtyRequested,
        PdsCWInventQty  _pdsCWQtyRequested = 0
        )
    {
        boolean             research = false;
        InventQty           qty = _qtyRequested;
        WMSOrderTrans       wmsOrderTransOther;

        PdsCWInventQty      pdsCWQty = _pdsCWQtyRequested;

        // First see if there are other lines in same route that can be reduced
        while select forupdate wmsOrderTransOther
            where wmsOrderTransOther.OrderId            == wmsOrderTrans.OrderId
               && wmsOrderTransOther.FullPallet         == wmsOrderTrans.FullPallet
               && wmsOrderTransOther.IsReserved         == wmsOrderTrans.IsReserved
               && wmsOrderTransOther.RouteId            == wmsOrderTrans.RouteId
               && wmsOrderTransOther.ExpeditionStatus   == wmsOrderTrans.ExpeditionStatus
               && wmsOrderTransOther.RecId              != wmsOrderTrans.RecId
        {
            if (wmsOrderTransOther.InventDimId != wmsOrderTrans.InventDimId)
            {
                InventUpd_ChangeDimension::updateForceDimInventTrans(this.inventMovement(), -qty, wmsOrderTransOther.inventDim(), wmsOrderTrans.inventDim(), false, false, false, -pdsCWQty);
            }
            if (wmsOrderTransOther.Qty > qty)
            {
                wmsOrderTransOther.Qty      -= qty;
                wmsOrderTransOther.PdsCWQty -= pdsCWQty;

                wmsOrderTransOther.update();
                qty         = 0;
                pdsCWQty    = 0;
            }
            else
            {
                qty         -= wmsOrderTransOther.Qty;
                pdsCWQty    -= wmsOrderTransOther.PdsCWQty;

                wmsOrderTransOther.doDelete();
            }
            research = true;
            if (!qty)
            {
                break;
            }
        }

        return [research, qty, pdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    public InventMovement inventMovement(boolean _transferReceipt = false)
    {
        return InventMov_WMSOrder::newFromWMSOrder(this.wmsOrder(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(WMSOrderTrans _wmsOrderTrans)
    {
        super(_wmsOrderTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCheckFix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the quantities (including CW) if related output order inventory transactions quantities don't
    /// match with the output order original transaction.
    /// </summary>
    /// <param name="_sysConsistencyCheck">Consistency check object used to count number of corrections.</param>
    public void pdsCWCheckFix(SysConsistencyCheck _sysConsistencyCheck)
    {
        InventTrans             inventTrans, inventTrans1;
        InventTransOrigin       inventTransOrigin;
        WMSOrderTrans           orderTrans, orderTrans1, orderTrans2, orderTrans3;
        int                     i;
        InventQty               qtyRemaining, availQty;
        InventMovement          inventMovement;
        InventDim               inventDimCriteria;
        InventDimParm           inventDimParm;
        InventDimFixed          inventDimFixed;
        WMSLocation             wmsLocation;
        InventUpd_Reservation   inventUpd_Reservation;

        PdsCWInventQty          pdsCWQtyRemaining, pdsCWAvailQty;

        if ((wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered
                || wmsOrderTrans.ExpeditionStatus
                    == WMSExpeditionStatus::Activated)
            && wmsOrderTrans.IsReserved == NoYes::Yes)
        {
            select sum(Qty), sum(PdsCWQty) from inventTrans
                where inventTrans.TransChildType    == InventTransChildType::WMSOrder
                   && inventTrans.TransChildRefId   == wmsOrderTrans.OrderId
                   && inventTrans.InventDimId       == wmsOrderTrans.InventDimId
                   && inventTrans.StatusReceipt     == StatusReceipt::None
                   && (inventTrans.StatusIssue      == StatusIssue::ReservPhysical
                   ||  inventTrans.StatusIssue      == StatusIssue::ReservOrdered)
                exists join inventTransOrigin
                    where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId   == wmsOrderTrans.InventTransId;

            select sum(Qty), sum(PdsCWQty) from orderTrans
                where orderTrans.OrderId            == wmsOrderTrans.OrderId
                   && orderTrans.InventDimId        == wmsOrderTrans.InventDimId
                   && orderTrans.IsReserved         == NoYes::Yes
                   && (orderTrans.ExpeditionStatus  == WMSExpeditionStatus::Registered
                   ||  orderTrans.ExpeditionStatus  == WMSExpeditionStatus::Activated);

            if (orderTrans.Qty != -inventTrans.Qty)
            {
                setPrefix(wmsOrderTrans.inventDim().preFix());
                checkFailed(strFmt("@SYS60838", orderTrans.Qty, -inventTrans.Qty));
                if (_sysConsistencyCheck.checkFix() == CheckFix::Fix)
                {
                    i = infologLine();

                    try
                    {
                        ttsbegin;
                        select forupdate firstonly orderTrans3
                            where orderTrans3.OrderId   == wmsOrderTrans.OrderId
                                && orderTrans3.RecId    == wmsOrderTrans.RecId;

                        qtyRemaining = orderTrans.Qty + inventTrans.Qty;
                        pdsCWQtyRemaining = orderTrans.PdsCWQty
                                            + inventTrans.PdsCWQty;

                        if (qtyRemaining > 0)
                        {
                            while select sum(Qty), sum(PdsCWQty),
                                InventDimId, InventDimFixed
                                from inventTrans1
                                group by InventDimId, InventDimFixed
                                where inventTrans1.TransChildType
                                        == InventTransChildType::WMSOrder
                                    && inventTrans1.TransChildRefId
                                        == wmsOrderTrans.OrderId
                                    && inventTrans1.InventDimId
                                        != wmsOrderTrans.InventDimId
                                    && (inventTrans1.StatusIssue
                                            == StatusIssue::ReservPhysical
                                        || inventTrans1.StatusIssue
                                            == StatusIssue::ReservOrdered)
                            {
                                select sum(Qty), sum(PdsCWQty)
                                    from orderTrans1
                                    where orderTrans1.OrderId
                                            == wmsOrderTrans.OrderId
                                        && orderTrans1.InventDimId
                                            == inventTrans1.InventDimId
                                        && orderTrans1.InventDimFixed
                                            == inventTrans1.InventDimFixed
                                        && orderTrans1.IsReserved == NoYes::Yes
                                        && (orderTrans1.ExpeditionStatus
                                                == WMSExpeditionStatus::Registered
                                            || orderTrans1.ExpeditionStatus
                                                == WMSExpeditionStatus::Activated);

                                if (orderTrans1.Qty != -inventTrans1.Qty)
                                {
                                    if (-inventTrans1.Qty > orderTrans1.Qty)
                                    {
                                        availQty = -inventTrans1.Qty
                                                    - orderTrans1.Qty;
                                        pdsCWAvailQty = -inventTrans1.PdsCWQty
                                                    - orderTrans1.PdsCWQty;
                                        if (availQty >= qtyRemaining)
                                        {
                                            orderTrans3.InventDimId =
                                                inventTrans1.InventDimId;
                                            orderTrans3.InventDimFixed =
                                                inventTrans1.InventDimFixed;
                                            orderTrans3.doUpdate();
                                            qtyRemaining = 0;
                                            pdsCWQtyRemaining = 0;
                                            _sysConsistencyCheck.updateCorrected();
                                        }
                                        else
                                        {
                                            orderTrans2.data(wmsOrderTrans);
                                            orderTrans2.Qty = availQty;
                                            orderTrans2.PdsCWQty = pdsCWAvailQty;
                                            orderTrans2.InventDimId =
                                                inventTrans1.InventDimId;
                                            orderTrans2.InventDimFixed =
                                                inventTrans1.InventDimFixed;
                                            orderTrans2.doInsert();
                                            orderTrans3.Qty -= availQty;
                                            orderTrans3.PdsCWQty -= pdsCWAvailQty;
                                            orderTrans3.doUpdate();
                                            qtyRemaining -= availQty;
                                            pdsCWQtyRemaining -= pdsCWAvailQty;
                                        }
                                    }
                                }
                                if (qtyRemaining == 0)
                                {
                                    break;
                                }
                            }

                            if (qtyRemaining > 0)
                            {
                                orderTrans3.ExpeditionStatus =
                                    WMSExpeditionStatus::Registered;
                                orderTrans3.doUpdate();
                                wmsLocation =
                                    wmsOrderTrans.inventDim().wmsLocation();
                                inventMovement = this.inventMovement();
                                inventDimCriteria = inventMovement.inventdim();
                                inventDimParm.initPrimaryDimReservation(
                                    InventDimGroupSetup::newItemId(inventMovement.itemId()),
                                    inventDimCriteria);
                                inventDimFixed = InventDimFixedClass::
                                    inventDimParm2InventDimFixed(inventDimParm);
                                inventDimCriteria.wmsLocationId =
                                    wmsLocation.wmsLocationId;
                                inventDimParm.wmsLocationIdFlag = NoYes::Yes;
                                inventDimCriteria.InventLocationId =
                                    wmsLocation.InventLocationId;
                                inventDimParm.InventLocationIdFlag = NoYes::Yes;
                                inventDimCriteria.initFromInventLocation(
                                    inventDimCriteria.inventLocation()); // inventDimParm is set in PrimaryDimReservation
                                inventUpd_Reservation =
                                    InventUpd_Reservation::newMovementWMS(
                                                inventMovement,
                                                inventDimCriteria,
                                                inventDimParm,
                                                inventDimFixed,
                                                -qtyRemaining,
                                                false,
                                                -pdsCWQtyRemaining);
                                inventUpd_Reservation.updateNow();
                                orderTrans3.addInventTransReservations();
                                _sysConsistencyCheck.updateCorrected();
                            }
                        }
                        else
                        {
                            inventMovement = this.inventMovement();
                            inventDimCriteria = wmsOrderTrans.inventDim();
                            inventDimParm.setAllInventDim();
                            inventUpd_Reservation =
                                InventUpd_Reservation::newMovementWMS(
                                                    inventMovement,
                                                    inventDimCriteria,
                                                    inventDimParm,
                                                    wmsOrderTrans.InventDimFixed,
                                                    -qtyRemaining,
                                                    false,
                                                    -pdsCWQtyRemaining);
                            inventUpd_Reservation.updateNow();
                            _sysConsistencyCheck.updateCorrected();
                        }
                        ttscommit;
                    }
                    catch (Exception::Error)
                    {
                        infolog.clear(i);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsDecreaseWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Decreases the weight of a catch weight item.
    /// </summary>
    /// <param name="_qty">
    ///     Adjustment quantity.
    /// </param>
    private void pdsDecreaseWeight(InventQty _qty)
    {
        InventQty                   qtyUnit;
        InventUpd_ChildReference    childReference;
        InventMovement              inventMovement;
        InventMovement              inventMovementParent;

        wmsOrder.Qty            -= _qty;
        wmsOrder.QtyNoShipment  = 0;

        inventMovement          = this.inventMovement();
        inventMovementParent    = inventMovement.parentMovement();

        qtyUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                        wmsOrder.ItemId,
                        wmsOrder.InventDimId,
                        _qty,
                        inventMovementParent.inventTable().inventUnitId(),
                        inventMovementParent.transUnitId(),
                        NoYes::Yes);

        childReference = InventUpd_ChildReference::newParameters(
                                inventMovement,
                                _qty,
                                qtyUnit,
                                false,
                                wmsOrderTrans.InventDimId,
                                0);

        if (wmsOrderTrans.IsReserved)
        {
            childReference.parmExcludeOnOrder(true);
        }

        childReference.updateNow();

        this.updateParentMovement(
            inventMovementParent,
            _qty,
            qtyUnit,
            0);

        wmsOrder.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIncreaseQtyZeroCWLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increases the weight of the output order transaction by allocating more quantity from the movement
    /// when the catch weight quantity is equal to zero.
    /// </summary>
    /// <param name="_qtyRequested">
    /// the quantity that needs to be allocated if available
    /// </param>
    /// <param name="_cwQtyRequested">
    /// this parameter is assumed to be 0, but might be used in later implementations
    /// </param>
    /// <returns>
    /// a container with the research flag, the remaining quantity and the remaining catch weight quantity
    /// </returns>
    /// <remarks>
    /// This method should only be called, if only the weight for the output order transaction is to be
    /// increased. It is not implemented yet to handle the increase of catch weight quantity
    /// </remarks>
    private container pdsIncreaseQtyZeroCWLine(
        InventQty _qtyRequested,
        PdsCWInventQty _cwQtyRequested)
    {
        boolean             research = false;
        InventQty           qty = _qtyRequested;
        PdsCWInventQty      cwQty = _cwQtyRequested;
        WMSOrderTrans       wmsOrderTransOther;

        while select forupdate wmsOrderTransOther
            where wmsOrderTransOther.OrderId            == wmsOrderTrans.OrderId
                && wmsOrderTransOther.FullPallet         == wmsOrderTrans.FullPallet
                && wmsOrderTransOther.RouteId            == wmsOrderTrans.RouteId
                && wmsOrderTransOther.ExpeditionStatus   == wmsOrderTrans.ExpeditionStatus
                && wmsOrderTransOther.PdsCWZeroCWLine
                && !wmsOrderTransOther.IsReserved
                && wmsOrderTransOther.RecId              != wmsOrderTrans.RecId
        {
            if (wmsOrderTransOther.InventDimId != wmsOrderTrans.InventDimId)
            {
                InventUpd_ChangeDimension::updateForceDimInventTrans(
                    this.inventMovement(),
                    -qty,
                    wmsOrderTransOther.inventDim(),
                    wmsOrderTrans.inventDim(),
                    false,
                    false,
                    false,
                    -cwQty);
            }
            if (wmsOrderTransOther.Qty > qty)
            {
                wmsOrderTransOther.Qty  -= qty;
                wmsOrderTransOther.PdsCWQty -= cwQty;
                wmsOrderTransOther.update();
                qty = 0;
                cwQty = 0;
            }
            else
            {
                qty -= wmsOrderTransOther.Qty;
                cwQty -= wmsOrderTransOther.PdsCWQty;
                wmsOrderTransOther.doDelete();
            }
            research = true;
            if (!qty)
            {
                break;
            }
        }

        return [research, qty, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIncreaseWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increase the weight of the output order transaction by allocating
    /// more quantity from the movement.
    /// </summary>
    /// <param name="_qtyRequested">
    /// the quantity that needs to be allocated if available
    /// </param>
    /// <param name="_pdsCWQtyRequested">
    /// this parameter is assumed to be 0, but might be used in later
    /// implementations
    /// </param>
    /// <returns>
    /// a container with the research flag, the remaining quantity and the remaining
    /// catch weight quantity
    /// </returns>
    /// <remarks>
    /// This method should only be called, if only the weight for the
    /// output order transaction is to be increased. It is not implemented
    /// yet to handle the increase of catch weight quantity
    /// </remarks>
    private container pdsIncreaseWeight(
        InventQty       _qtyRequested,
        PdsCWInventQty  _pdsCWQtyRequested)
    {
        InventMovement              inventMovement = this.inventMovement();
        InventMovement              inventMovementParent = inventMovement.parentMovement();
        InventUpd_ChildReference    childReference;
        InventTable                 inventTable = inventMovementParent.inventTable();
        
        if (!PdsGlobal::pdsIsCWItem(inventTable.ItemId) || _pdsCWQtyRequested)
        {
            return [false,_qtyRequested,_pdsCWQtyRequested];
        }

        if (!inventMovementParent.mustBeRemainControlled())
        {
            throw(error(strFmt("@SYS54471", _qtyRequested)));
        }

        InventTransIdSum idSum = InventTransIdSum::newParameters(
                                    inventMovementParent.inventTransOriginId(),
                                    true,
                                    InventTransChildType::None,
                                    '');

        // Add extra onOrder for the weight increase adjustment.
        InventQty qtyExtraNeeded = _qtyRequested;

        EcoResProductUnitConverter productUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                                                                inventTable.ItemId,
                                                                inventMovementParent.inventDimId(),
                                                                inventTable.inventUnitId(),
                                                                inventMovementParent.transUnitId(),
                                                                NoYes::Yes);

        InventQty   qtyUnit;
        boolean     useWMSOrderTransDimensions;
        if (qtyExtraNeeded > 0)
        {
            qtyUnit = productUnitConverter.convertValue(qtyExtraNeeded);

            this.updateParentMovement(
                    inventMovementParent,
                    -qtyExtraNeeded,
                    -qtyUnit,
                    0);

            // If we had to increase the qty on a wmsordertrans line then a 0 CW transaction has been created.
            // The adjustment transaction has parentMovement dimensions.
            // We need to change the dimensions to the ones specified on the wmsOrderTrans so the 0 CW transaction gets merged.
            if (inventMovementParent.inventDimId() != wmsOrderTrans.InventDimId)
            {
                InventDimParm inventDimParm;
                inventDimParm.initFromInventDim(inventMovementParent.inventdim());
                InventUpd_ChangeDimension inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(inventMovementParent,
                                                                                     inventMovementParent.inventdim(),
                                                                                     inventDimParm,
                                                                                     InventDim::find(wmsOrderTrans.InventDimId),
                                                                                     -qtyExtraNeeded);
                inventUpd_ChangeDimension.parmOnlySelectOnOrder(true);
                inventUpd_ChangeDimension.updateNow();

                if (wmsOrderTrans.IsReserved)
                {
                    useWMSOrderTransDimensions = true; // If the original wmsordertrans line has been reserved then we need to use its dimensions during reservation
                }
            }

            idSum.clearTotals();
        }

        // how much can we allocate from the movement ?
        InventQty qtyMax;
        if (inventMovementParent.markingRefInventTransOrigin())
        {
            qtyMax = min(_qtyRequested,-idSum.estimatedIssue());
        }
        else 
        {
            qtyMax = min(_qtyRequested,-idSum.onOrder());
        }

        if (qtyMax <= 0)
        {
            return [false,_qtyRequested,_pdsCWQtyRequested];
        }

        qtyUnit = productUnitConverter.convertValue(qtyMax);

        PdsCWInventQty cwQtyMax = _pdsCWQtyRequested;
        wmsOrder.Qty      += qtyMax;
        wmsOrder.PdsCWQty += cwQtyMax;
        
        WMSOrderRequestQtyUpdateWhenUpdPickQtyContext context = WMSOrderRequestQtyUpdateWhenUpdPickQtyContext::current();

        if (PdsGlobal::pdsIsCWItem(inventTable.ItemId)
            && context != null && context.parmNeedUpdateWMSOrderRequestQty()
            && wmsOrder.PdsCWQty == wmsOrder.PdsCWQtyRequested
            && wmsOrder.qty != wmsOrder.qtyRequested)
        {
            wmsOrder.qtyRequested += qtyMax;
        }

        childReference = InventUpd_ChildReference::newParameters(
                                inventMovement,
                                -qtyMax,
                                -qtyUnit,
                                false,
                                wmsOrderTrans.InventDimId,
                                -cwQtyMax);

        childReference.updateNow();

        if (wmsOrderTrans.IsReserved)
        {
            if (qtyMax <= wmsOrder.QtyNoShipment || wmsOrder.QtyNoShipment != 0)
            {
                wmsOrder.QtyNoShipment  += qtyMax; //method below subtracts so we need to add
                wmsOrder.PdsCWQtyNoShipment += cwQtyMax;
            }

            this.increaseQtyReserveMore(qtyMax, cwQtyMax, useWMSOrderTransDimensions);
        }
        else
        {
            if (qtyMax > wmsOrder.QtyNoShipment)
            {
                wmsOrder.QtyNoShipment      = 0;
                wmsOrder.PdsCWQtyNoShipment = 0;
            }
            else
            {
                wmsOrder.QtyNoShipment -= qtyMax;
                wmsOrder.PdsCWQtyNoShipment -= cwQtyMax;
            }
        }

        wmsOrder.doUpdate();

        return [true,_qtyRequested - qtyMax,_pdsCWQtyRequested - cwQtyMax];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveAndUpdateQtyNoShipment</Name>
				<Source><![CDATA[
    private void reserveAndUpdateQtyNoShipment(InventQty _qtyRequested, PdsCWInventQty _pdsCWQtyRequested)
    {
        boolean                         doReservation = false;
        InventMovement                  inventMovement = this.inventMovement();
        InventMovement                  inventMovementParent = inventMovement.parentMovement();
        InventTrans                     inventTrans;

        if (wmsOrderTrans.IsReserved)
        {
            // The update of the parentmovement can have triggered a reservation so we need to examine if a reservation should be done.
            // If we still have some qty onOrder we should try to do the reservation even though it could fail since we want the error messages to surface.
            select firstonly RecId from inventTrans
                where inventTrans.InventTransOrigin     == inventMovementParent.inventTransOriginId()
                &&    inventTrans.TransChildType        == InventTransChildType::WMSOrder
                &&    inventTrans.TransChildRefId       == wmsOrder.OrderId
                &&    inventTrans.StatusReceipt         == StatusReceipt::None
                &&    inventTrans.StatusReceipt         == StatusReceipt::None
                &&    inventTrans.StatusIssue           == StatusIssue::OnOrder;

            if (inventTrans.RecId)
            {
                doReservation = true;
            }
        }

        if (doReservation)
        {
            if (_qtyRequested <= wmsOrder.QtyNoShipment || wmsOrder.QtyNoShipment != 0)
            {
                wmsOrder.QtyNoShipment  += _qtyRequested;//method below subtracts so we need to add
                wmsOrder.PdsCWQtyNoShipment += _pdsCWQtyRequested;
            }

            this.increaseQtyReserveMore(_qtyRequested, _pdsCWQtyRequested);
        }
        else
        {
            if (_qtyRequested > wmsOrder.QtyNoShipment)
            {
                wmsOrder.QtyNoShipment      = 0;
                wmsOrder.PdsCWQtyNoShipment = 0;
            }
            else
            {
                wmsOrder.QtyNoShipment      -= _qtyRequested;
                wmsOrder.PdsCWQtyNoShipment -= _pdsCWQtyRequested;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the parent movement when increasing or decreasing remainphysical on parentmovement.
    /// </summary>
    /// <param name = "_parentMovement">An instance of the <c>InventMovement</c> class.</param>
    /// <param name = "_qtyAdjusted">The adjusted inventory quantity value.</param>
    /// <param name = "_qtyAdjustedUnit">The adjusted unit quantity value.</param>
    /// <param name = "_pdsCWQtyAdjusted">The adjusted catch weight quantity value.</param>
    protected void updateParentMovement(
        InventMovement      _parentMovement,
        InventQty           _qtyAdjusted,
        Qty                 _qtyAdjustedUnit,
        PdsCWInventQty      _pdsCWQtyAdjusted = 0)
    {
        _parentMovement.addRemainPhysical(_qtyAdjusted);
        _parentMovement.addRemainPhysicalUnit(_qtyAdjustedUnit);
        _parentMovement.pdsCWAddRemainPhysical(_pdsCWQtyAdjusted);

        this.updateParentMovementTransfers(_parentMovement, _qtyAdjusted, _qtyAdjustedUnit, _pdsCWQtyAdjusted);

        _parentMovement.updateBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentMovementTransfers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transfer receipt and issue receive for the parent movement.
    /// </summary>
    /// <param name = "_parentMovement">An instance of the <c>InventMovement</c> class.</param>
    /// <param name = "_qtyAdjusted">The adjusted inventory quantity value.</param>
    /// <param name = "_qtyAdjustedUnit">The adjusted unit quantity value.</param>
    /// <param name = "_pdsCWQtyAdjusted">The adjusted catch weight quantity value.</param>
    private void updateParentMovementTransfers(
        InventMovement _parentMovement,
        InventQty           _qtyAdjusted,
        Qty                 _qtyAdjustedUnit,
        PdsCWInventQty      _pdsCWQtyAdjusted)
    {
        if (_parentMovement.isTransfer())
        {
            InventMovement movementParentTransferReceipt = _parentMovement.newMovement_TransferReceipt();

            if (movementParentTransferReceipt)
            {
                InventMovement movementParentTransferIssueReceive = movementParentTransferReceipt.newMovement_TransferIssueReceive();

                if (movementParentTransferIssueReceive)
                {
                    // creating expected transactions on a transfer transit movement.
                    movementParentTransferReceipt = movementParentTransferIssueReceive.newMovement_TransferReceipt();
                }

                if (movementParentTransferReceipt)
                {
                    movementParentTransferReceipt.addRemainPhysical(-_qtyAdjusted);
                    movementParentTransferReceipt.addRemainPhysicalUnit(-_qtyAdjustedUnit);
                    movementParentTransferReceipt.pdsCWAddRemainPhysical(-_pdsCWQtyAdjusted);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQty</Name>
				<Source><![CDATA[
    public boolean updateQty()
    {
        InventQty           requestedQtyDelta = wmsOrderTrans.Qty - wmsOrderTrans.orig().Qty;
        InventQty           qtyDelta = requestedQtyDelta;
        PdsCWInventQty      requestedCWQtyDelta = wmsOrderTrans.PdsCWQty - wmsOrderTrans.orig().PdsCWQty;
        InventQty           cwQtyDelta = requestedCWQtyDelta;
        boolean             ret = false;

        // In case cwQtyDelta and qtyDelta have different signs we need to perform the update in two steps
        if ((requestedCWQtyDelta > 0 && requestedQtyDelta <= 0) ||
            (requestedCWQtyDelta < 0 && requestedQtyDelta >= 0))
        {
            // First step is to make an update where cwQtyDelta and qtyDelta have the same sign
            //wmsOrderTrans.qty = wmsOrderTrans.orig().Qty + cwQtyDelta * PdsCatchWeightItem::find(wmsOrderTrans.itemId).PdsCWMin;
            qtyDelta = requestedCWQtyDelta * PdsCatchWeightItem::find(wmsOrderTrans.itemId).PdsCWMin;

            ret = this.doUpdateQty(qtyDelta, cwQtyDelta);

            // The second step is to set the inventory qty to the requested value
            qtyDelta = requestedQtyDelta - qtyDelta;
            cwQtyDelta = 0;
        }

        return this.doUpdateQty(qtyDelta, cwQtyDelta) || ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWMSOrderTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>WMSOrderTransType_OutputDontPostTransfer</c> class.
    /// </summary>
    /// <param name="_wmsOrderTrans">
    ///    The <c>WMSOrderTrans</c> record to use to initialize the class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>WMSOrderTransType_OutputDontPostTransfer</c> class.
    /// </returns>
    public static WMSOrderTransType_OutputDontPostTransfer newWMSOrderTrans(WMSOrderTrans _wmsOrderTrans)
    {
        return new WMSOrderTransType_OutputDontPostTransfer(_wmsOrderTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>