<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentSubmissionDataverseIntegrationPresenter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A presenter for <c>BusinessDocumentSubmission</c> form controls related to Dataverse integration in scope of batch submission scenario. 
/// </summary>
[SysObsoleteAttribute('BusinessDocumentSubmissionDataverseIntegrationPresenter is deprecated and should not be used ', true, 6\7\2024)]
internal class BusinessDocumentSubmissionDataverseIntegrationPresenter
{
    private BusinessDocumentDataverseClient dataverseClient;
    private FormDataSource submissionDataSource;
    private Map documentTypes;
    private FormControl updateStatusButton;
    private FormControl batchSubmissionInvoicesButton;
    private FormComboBoxControl documentTypeComboBox;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BusinessDocumentSubmissionDataverseIntegrationPresenter</c> class.
    /// </summary>
    /// <param name = "_submissionDataSource">A <c>BusinessDocumentSubmission</c> table data source.</param>
    /// <param name = "_documentTypes">A map of document types by integer ids.</param>
    /// <param name = "_updateStatusButton">An update status button.</param>
    /// <param name = "_batchSubmissionInvoicesButton">A batch submission invoices button.</param>
    /// <param name = "_documentTypeComboBox">A document types combobox.</param>
    /// <returns>A new instance of the <c>BusinessDocumentSubmissionDataverseIntegrationPresenter</c> class.</returns>
    public static BusinessDocumentSubmissionDataverseIntegrationPresenter construct(
        FormDataSource _submissionDataSource,
        Map _documentTypes,
        FormControl _updateStatusButton,
        FormControl _batchSubmissionInvoicesButton,
        FormComboBoxControl _documentTypeComboBox)
    {
        var ret = new BusinessDocumentSubmissionDataverseIntegrationPresenter();
        ret.setSubmissionDataSource(_submissionDataSource);
        ret.setDocumentTypes(_documentTypes);
        ret.setUpdateStatusButton(_updateStatusButton);
        ret.setBatchSubmissionInvoicesButton(_batchSubmissionInvoicesButton);
        ret.setDocumentTypeComboBox(_documentTypeComboBox);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSubmissionDataSource</Name>
				<Source><![CDATA[
    private void setSubmissionDataSource(FormDataSource _submissionDataSource)
    {
        submissionDataSource = _submissionDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentTypes</Name>
				<Source><![CDATA[
    private void setDocumentTypes(Map _documentTypes)
    {
        documentTypes = _documentTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdateStatusButton</Name>
				<Source><![CDATA[
    private void setUpdateStatusButton(FormControl _updateStatusButton)
    {
        updateStatusButton = _updateStatusButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBatchSubmissionInvoicesButton</Name>
				<Source><![CDATA[
    private void setBatchSubmissionInvoicesButton(FormControl _batchSubmissionInvoicesButton)
    {
        batchSubmissionInvoicesButton = _batchSubmissionInvoicesButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentTypeComboBox</Name>
				<Source><![CDATA[
    private void setDocumentTypeComboBox(FormComboBoxControl _documentTypeComboBox)
    {
        documentTypeComboBox = _documentTypeComboBox;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBatchSubmitControlsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates controls visibility.
    /// </summary>
    public void updateBatchSubmitControlsVisibility()
    {
        if (BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::ID00001]))
        {
            boolean batchSubmission = this.isBatchSubmission();
            BusinessDocumentSubmission submissionTable = submissionDataSource.cursor();
            
            batchSubmissionInvoicesButton.visible(true);
            updateStatusButton.visible(true);
            batchSubmissionInvoicesButton.enabled(batchSubmission && submissionTable.UID);
            updateStatusButton.enabled(batchSubmission);
            submissionDataSource.object(fieldNum(BusinessDocumentSubmission, SubmittedDateTime)).visible(!batchSubmission); //Hide since date time sent is already displayed for batch
        }
        else
        {
            batchSubmissionInvoicesButton.visible(false);
            updateStatusButton.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataverseClient</Name>
				<Source><![CDATA[
    private BusinessDocumentDataverseClient getDataverseClient()
    {
        if (dataverseClient == null)
        {
            dataverseClient = new BusinessDocumentDataverseClient();
        }
        return dataverseClient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubmissionStatus</Name>
				<Source><![CDATA[
    private boolean updateSubmissionStatus(BusinessDocumentSubmission _submission)
    {
        var ret = false;
        if (_submission.State != BusinessDocumentState::Completed && _submission.State != BusinessDocumentState::Failed)
        {
            var submissionResult = this.getDataverseClient().getSubmissionResult(_submission);
            if (submissionResult != null)
            {
                _submission.selectForUpdate(true);
                _submission.UID = submissionResult.parmUID();
                _submission.Log = submissionResult.parmLog() ? list2Con(strSplit(submissionResult.parmLog(), '\n')) : conNull();
                _submission.State = submissionResult.parmState();
                _submission.update();
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates statuses for selected <c>BusinessDocumentSubmission</c> records.
    /// </summary>
    public void updateStatus()
    {
        if (this.isBatchSubmission())
        {
            boolean existsUpdatedRecord = false;
            boolean markedRecordsFound = false;

            BusinessDocumentSubmission submission = submissionDataSource.getFirst(1);
            while (submission)
            {
                markedRecordsFound = true;
                existsUpdatedRecord = this.updateSubmissionStatus(submission) || existsUpdatedRecord;                
                submission = submissionDataSource.getNext();
            }

            if (!markedRecordsFound)
            {
                submission = submissionDataSource.cursor();
                if (submission.RecId != 0)
                {
                    existsUpdatedRecord = this.updateSubmissionStatus(submission);
                }
            }

            if (existsUpdatedRecord)
            {
                submissionDataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchSubmission</Name>
				<Source><![CDATA[
    private boolean isBatchSubmission()
    {
        boolean ret = false;
        if (documentTypes.exists(documentTypeComboBox.selection()))
        {
            RefTableId refTableId = documentTypes.lookup(documentTypeComboBox.selection());
            ret = refTableId == tableNum(BusinessDocumentBatchSubmission);
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<IsObsolete>Yes</IsObsolete>
</AxClass>