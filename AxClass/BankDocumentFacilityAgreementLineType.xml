<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentFacilityAgreementLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is the Business Object class for <c>BankDocumentFacilityAgreementLine</c>.
/// </summary>
class BankDocumentFacilityAgreementLineType extends Object
{
    BankDocumentFacilityAgreementLine bankDocumentFacilityAgreementLine;
    BankDocumentAgreementLineRefRecId bankDocumentAgreementLineRefRecId;

    #OCCRetryCount
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountUsed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the used amount.
    /// </summary>
    /// <returns>
    ///    The used amount.
    /// </returns>
    public BankDocumentFacilityAgreementAmountCur amountUsed()
    {
        if (this.isDataLoaded())
        {
            this.loadData();
        }

        return bankDocumentFacilityAgreementLine.AmountUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyRemainingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether there is enough balance for the new letter of credit.
    /// </summary>
    /// <param name="_amount">
    ///    The required balance.
    /// </param>
    /// <returns>
    ///    true if there is enough balance; otherwise, false.
    /// </returns>
    public boolean anyRemainingBalance(BankDocumentFacilityAgreementAmountCur _amount)
    {
        if (this.isDataLoaded())
        {
            this.loadData();
        }

        return bankDocumentFacilityAgreementLine.getBalanceAmount() - _amount  >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReleaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases the amount on the facility agreements.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to be released.
    /// </param>
    /// <returns>
    ///    The used amount after the releasing has been done.
    /// </returns>
    protected BankDocumentFacilityAgreementAmountCur doReleaseAmount(
        BankDocumentFacilityAgreementAmountCur _amount)
    {
        boolean isRetry = false;

        try
        {
            ttsbegin;

            if (isRetry)
            {
                bankDocumentFacilityAgreementLine = BankDocumentFacilityAgreementLine::find(this.parmBankDocumentAgreementLineRefRecId());
            }

            if (this.validateReleaseAmount(bankDocumentFacilityAgreementLine, _amount))
            {
                bankDocumentFacilityAgreementLine.AmountUsed = bankDocumentFacilityAgreementLine.AmountUsed - _amount;
                bankDocumentFacilityAgreementLine.update();
            }
            else
            {
                // The release is cancelled.
                throw error ("@SYS313710");
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    isRetry = true;
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return bankDocumentFacilityAgreementLine.AmountUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doWithdrawAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Withdraws the amount on the facility agreements.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to withdraw.
    /// </param>
    /// <returns>
    ///    The used amount after the withdrawing has been done.
    /// </returns>
    protected BankDocumentFacilityAgreementAmountCur doWithdrawAmount(
        BankDocumentFacilityAgreementAmountCur _amount)
    {
        boolean isRetry = false;

        try
        {
            ttsbegin;

            if (isRetry)
            {
                bankDocumentFacilityAgreementLine = BankDocumentFacilityAgreementLine::find(this.parmBankDocumentAgreementLineRefRecId());
            }

            if (this.validateWithdrawAmount(bankDocumentFacilityAgreementLine, _amount))
            {
                bankDocumentFacilityAgreementLine.AmountUsed = bankDocumentFacilityAgreementLine.AmountUsed + _amount;
                bankDocumentFacilityAgreementLine.update();
            }
            else
            {   // The withdrawal is cancelled.
                throw error ("@SYS313709");
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    isRetry = true;
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        return bankDocumentFacilityAgreementLine.AmountUsed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>BankDocumentFacilityAgreementLine</c> record has been loaded not.
    /// </summary>
    /// <returns>
    ///    true if the record has been loaded.
    /// </returns>
    protected boolean isDataLoaded()
    {
        return bankDocumentFacilityAgreementLine && bankDocumentFacilityAgreementLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the <c>BankDocumentFacilityAgreementLine</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    protected void loadData(boolean _forUpdate = false)
    {
        this.parmBankDocumentFacilityAgreementLine(
            BankDocumentFacilityAgreementLine::find(
                this.parmBankDocumentAgreementLineRefRecId(),
                _forUpdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankDocumentAgreementLineRefRecId</Name>
				<Source><![CDATA[
    public bankDocumentAgreementLineRefRecId parmBankDocumentAgreementLineRefRecId(
        bankDocumentAgreementLineRefRecId _bankDocumentAgreementLineRefRecId = bankDocumentAgreementLineRefRecId)
    {
        bankDocumentAgreementLineRefRecId = _bankDocumentAgreementLineRefRecId;
        return bankDocumentAgreementLineRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankDocumentFacilityAgreementLine</Name>
				<Source><![CDATA[
    public BankDocumentFacilityAgreementLine parmBankDocumentFacilityAgreementLine(
        BankDocumentFacilityAgreementLine _bankDocumentFacilityAgreementLine = bankDocumentFacilityAgreementLine)
    {
        bankDocumentFacilityAgreementLine = _bankDocumentFacilityAgreementLine;
        bankDocumentAgreementLineRefRecId = bankDocumentFacilityAgreementLine.RecId;

        return bankDocumentFacilityAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases the amount on the facility agreements.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to release.
    /// </param>
    /// <returns>
    ///    The used amount after the releasing has been done.
    /// </returns>
    public BankDocumentFacilityAgreementAmountCur releaseAmount(BankDocumentFacilityAgreementAmountCur _amount)
    {
        if (this.isDataLoaded())
        {
            return this.doReleaseAmount(_amount);
        }
        else
        {
            return BankDocumentFacilityAgreementLineType::releaseAmountOnServer(bankDocumentAgreementLineRefRecId, _amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReleaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the release amount operation.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreementLine">
    ///    The <c>BankDocumentFacilityAgreementLine</c> record for which to release an amount.
    /// </param>
    /// <param name="_amount">
    ///    The amount to be released.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    protected boolean validateReleaseAmount(
        BankDocumentFacilityAgreementLine       _bankDocumentFacilityAgreementLine,
        BankDocumentFacilityAgreementAmountCur  _amount)
    {
        boolean ret = true;

        if (_bankDocumentFacilityAgreementLine.RecId == 0)
        {
            // Required bank document facility agreement is not found.
            ret = checkFailed("@SYS313720");
        }

        if (ret)
        {
            if (_bankDocumentFacilityAgreementLine.AmountUsed - _amount < 0)
            {
                // Exceed the amount limit.
                ret = checkFailed("@SYS313721");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWithdrawAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the withdraw amount operation.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreementLine">
    ///    The <c>BankDocumentFacilityAgreementLine</c> record from which to withdraw.
    /// </param>
    /// <param name="_amount">
    ///    The amount to withdraw.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    protected boolean validateWithdrawAmount(
        BankDocumentFacilityAgreementLine       _bankDocumentFacilityAgreementLine,
        BankDocumentFacilityAgreementAmountCur  _amount)
    {
        boolean ret = true;

        if (_bankDocumentFacilityAgreementLine.RecId == 0)
        {
            // Required bank document facility agreement is not found.
            ret = checkFailed("@SYS313720");
        }

        if (ret)
        {
            if (!this.anyRemainingBalance(_amount))
            {
                // Facility balance is less than the requested Letter of Credit/Import Collection amount.
                throw error ("@SYS313675");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withdrawAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Withdraws the amount on the facility agreements.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to withdraw.
    /// </param>
    /// <returns>
    ///    The used amount after the withdrawing has been done.
    /// </returns>
    public BankDocumentFacilityAgreementAmountCur withdrawAmount(BankDocumentFacilityAgreementAmountCur _amount)
    {
        if (this.isDataLoaded())
        {
            return this.doWithdrawAmount(_amount);
        }
        else
        {
            return BankDocumentFacilityAgreementLineType::withdrawAmountOnServer(bankDocumentAgreementLineRefRecId, _amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method to construct the instance by the given facility agreement line record ID.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreementLineRecId">
    /// The given facility agreement line record ID.
    /// </param>
    /// <param name="_isLoadData">
    /// The <c>BankDocumentFacilityAgreementLine</c> buffer will be loaded if the value is true; optional
    /// </param>
    /// <param name="_forUpdate">
    /// The <c>BankDocumentFacilityAgreementLine</c> buffer will be updatable if the value is true; optional
    /// </param>
    /// <returns>
    /// The created instance.
    /// </returns>
    public static BankDocumentFacilityAgreementLineType construct(
        BankDocumentAgreementLineRefRecId _bankDocumentFacilityAgreementLineRecId,
        boolean                           _isLoadData = false,
        boolean                           _forUpdate  = false)
    {
        BankDocumentFacilityAgreementLineType bankDocumentFacilityAgreementLineType;

        bankDocumentFacilityAgreementLineType = new BankDocumentFacilityAgreementLineType();

        bankDocumentFacilityAgreementLineType.parmBankDocumentAgreementLineRefRecId(_bankDocumentFacilityAgreementLineRecId);

        if (_isLoadData)
        {
            bankDocumentFacilityAgreementLineType.loadData(_forUpdate);
        }

        return bankDocumentFacilityAgreementLineType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseAmountOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method does the release for the amount on the faclity agreements.
    /// The server method to force the code be run on server.
    /// </summary>
    /// <param name="_bankDocumentAgreementLineRefRecId">
    /// The facility agreement line record ID to construct <c>BankDocumentFacilityAgreementLineType</c> on server.
    /// </param>
    /// <param name="_amount">
    /// The amount to be released.
    /// </param>
    /// <returns>
    /// The used amount after the releasing has been done.
    /// </returns>
    private static BankDocumentFacilityAgreementAmountCur releaseAmountOnServer(
        bankDocumentAgreementLineRefRecId      _bankDocumentAgreementLineRefRecId,
        BankDocumentFacilityAgreementAmountCur _amount)
    {
        BankDocumentFacilityAgreementAmountCur ret;

        ttsbegin;
        ret = BankDocumentFacilityAgreementLineType::construct(_bankDocumentAgreementLineRefRecId, true, true).doReleaseAmount(_amount);
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withdrawAmountOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method does the withdraw for the amount on the faclity agreements.
    /// The server method to force the code be run on server.
    /// </summary>
    /// <param name="_bankDocumentAgreementLineRefRecId">
    /// The facility agreement line record ID to construct <c>BankDocumentFacilityAgreementLineType</c> on server.
    /// </param>
    /// <param name="_amount">
    /// The amount to be withdrawn.
    /// </param>
    /// <returns>
    /// The used amount after the withdrawing has been done.
    /// </returns>
    private static BankDocumentFacilityAgreementAmountCur withdrawAmountOnServer(
        bankDocumentAgreementLineRefRecId      _bankDocumentAgreementLineRefRecId,
        BankDocumentFacilityAgreementAmountCur _amount)
    {
        BankDocumentFacilityAgreementAmountCur ret;

        ttsbegin;
        ret = BankDocumentFacilityAgreementLineType::construct(_bankDocumentAgreementLineRefRecId, true, true).doWithdrawAmount(_amount);
        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>