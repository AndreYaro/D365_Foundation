<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalValidateReferenceDistributionLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Validates the accounting distribution data for the document to make sure the data is valid and we do not have missing reference distribution link for document
/// </summary>
[ExportMetadataAttribute(classstr(SubledgerJournalValidateReferenceDistributionLink), identifierStr(''))]
[ExportMetadataAttribute(identifierStr('SourceDocumentDataConsistencyValidators'), identifierStr(''))]
[ExportAttribute('Microsoft.Dynamics.AX.Application.SubledgerJournalizerDocumentValidationIProvider')]
internal final class SubledgerJournalValidateReferenceDistributionLink implements SubledgerJournalizerDocumentValidationIProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the accounting distribution data for the document to make sure the data is valid and 
    /// we do not have missing reference distribution link for document
    /// </summary>
    /// <param name = "_accountingEvent">The accounting event for the journalization task using source document accounting processor</param>
    /// <param name = "_voucher">The voucher used for the posting to ledger; if no accounting is generated then this will be blank</param>
    /// <param name = "_sourceDocumentLineSubmittedForProcessing">All the source document lines that are submitted to source document accounting processor</param>
    /// <param name = "_accountingDistributionTmpForValidation">Accounting distribution detail for the document submitted for processing</param>
    /// <param name = "_subledgerJournalAccountEntryTmpForValidation">Detail accounting of the voucher that is getting posted</param>
    [Hookable(false)]
    void validateDocument(
        AccountingEvent _accountingEvent,
        Voucher _voucher,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation,
        SubledgerJournalAccountEntryTmpForValidation _subledgerJournalAccountEntryTmpForValidation)
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::SourceDocumentValidationFrameworkNamespace,
            classStr(SubledgerJournalValidateReferenceDistributionLink),
            classStr(SubledgerJournalValidateReferenceDistributionLink)))
        {
            AccountingDistribution accountingDistribution, accountingDistributionNotExists;
        
            select firstonly RecId from accountingDistribution
                where accountingDistribution.AccountingEvent == _accountingEvent.RecId 
            exists join _accountingDistributionTmpForValidation
                where _accountingDistributionTmpForValidation.SourceDocumentLine == accountingDistribution.SourceDocumentLine &&
                    _accountingDistributionTmpForValidation.SourceDocumentHeader == accountingDistribution.SourceDocumentHeader &&
                    accountingDistribution.ReferenceDistribution != 0
            notexists join accountingDistributionNotExists
                where accountingDistributionNotExists.RecId == accountingDistribution.ReferenceDistribution;

            if (accountingDistribution.RecId)
            {
                //log telemetry that the source document lines are in an invalid accounting status
                activityContext.addCustomProperty('ValidationResult', 'Fail');

                activityContext.addCustomProperty(
                    'Message', SourceDocumentInstrumentationConstants::ErrorDistributionReferenceLinkIsNotValid);

                activityContext.addCustomProperty(
                    'SourceDocumentHeader', int642Str(_accountingEvent.SourceDocumentHeader));

                activityContext.addCustomProperty(
                    'AccountingEvent', int642Str(_accountingEvent.RecId));

                if (FeatureStateProvider::isFeatureEnabled(EnableSourceDocumentValidationFramework::instance()))
                {
                    throw error("@SourceDocumentAccountingFramework:ErrorMessageWhenDistributionContainsInvalidReferenceDistribution");;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>