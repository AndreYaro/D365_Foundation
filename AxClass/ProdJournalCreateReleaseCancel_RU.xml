<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCreateReleaseCancel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalCreateReleaseCancel_RU extends RunBase
{
    Set                             releaseTransMarkedSet;
    ProdJournalFormTransRelease_RU  journalFormTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = Dialog::newFormnameRunbase(formstr(ProdJournalReleaseCancel_RU), this);

        dialog.caption("@GLS115783");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdId</Name>
				<Source><![CDATA[
    public ProdId getProdId()
    {
        return ProdJournalTable::find(journalFormTrans.journalTable().JournalId).ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args)
    {
        if (!_args || ! _args.caller())
        {
            throw error("@SYS18626");
        }

        Object callerForm = _args.caller();
        if (formHasMethod(_args.caller(), identifierstr(journalForm)))
        {
            journalFormTrans = callerForm.journalForm();
        }
        else
        {
            throw error(strfmt("@SYS76153", identifierstr(journalForm)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markLine</Name>
				<Source><![CDATA[
    public boolean markLine(boolean             _set,
                            ProdReleaseTrans_RU _prodReleaseTrans,
                            boolean             _mark)
    {
        if (_set)
        {
            if (_mark)
            {
                releaseTransMarkedSet.add(_prodReleaseTrans.RecId);
            }
            else
            {
                releaseTransMarkedSet.remove(_prodReleaseTrans.RecId);
            }
        }

        return releaseTransMarkedSet.in(_prodReleaseTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        releaseTransMarkedSet = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        ProdJournalRelease_RU   prodJournalRelease;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00124,funcName());

        if (!this.validate())
        {
            throw error("@GLS110686");
        }

        try
        {
            ttsbegin;

            SetEnumerator setEnumerator = releaseTransMarkedSet.getEnumerator();
            ProdJournalIdRelease_RU journalId = journalFormTrans.journalTable().JournalId;
            while (setEnumerator.moveNext())
            {
                ProdReleaseTrans_RU prodReleaseTrans = ProdReleaseTrans_RU::findRecId(setEnumerator.current());

                if (!prodReleaseTrans.RecId)
                {
                    continue;
                }

                prodJournalRelease.clear();
                prodJournalRelease.initFromProdReleaseTrans(prodReleaseTrans);
                prodJournalRelease.OffsetTransRefRecId  = prodReleaseTrans.RecId;
                prodJournalRelease.JournalId            = journalId;
                prodJournalRelease.Storno               = InventParameters::find().StornoPhysicalPosting_RU;
                prodJournalRelease.insert();
            }

            journalFormTrans.journalTrans_DS().executeQuery();
            journalFormTrans.journalTableData().initTotal();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (releaseTransMarkedSet.empty())
        {
            ret = checkFailed("@GLS115784");
        }

        if (!journalFormTrans)
        {
            ret = checkFailed(strfmt("@GLS115785", classId2Name(classnum(ProdJournalCreateReleaseCancel_RU))));
        }

        if (!ProdJournalTable::checkExist(journalFormTrans.journalTable().JournalId))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        ProdJournalCreateReleaseCancel_RU prodJournalCreateReleaseCancel = new ProdJournalCreateReleaseCancel_RU();

        prodJournalCreateReleaseCancel.initFromArgs(_args);

        if (prodJournalCreateReleaseCancel.prompt())
        {
            prodJournalCreateReleaseCancel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>