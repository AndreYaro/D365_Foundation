<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceResumeAutomation</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class VendInvoiceResumeAutomation extends RunBaseBatch implements BatchRetryable
{
    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        vendInvoiceReceivedFromDate,
        vendInvoiceReceivedToDate,
        automationResumedBy
    #Endmacro

    internal VendInvoiceReceivedDate vendInvoiceReceivedFromDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
    internal VendInvoiceReceivedDate vendInvoiceReceivedToDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
    internal UserId automationResumedBy;

    internal DialogField dialogVendInvoiceReceivedFromDate;
    internal DialogField dialogVendInvoiceReceivedToDate;
    internal DialogRunbase dialogRunbase;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceResumeAutomation construct()
    {
        return new VendInvoiceResumeAutomation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);

        switch (version)
        {
            case version:
                [version, #CurrentList] = _packed;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        if(VendInvoiceAutomationStateManagement::IsAutomationWorkflowSubmissionEnabled())
        {
            VendInvoiceResumeAutomation vendInvoiceResumeAutomation = VendInvoiceResumeAutomation::construct();

            if (vendInvoiceResumeAutomation.prompt())
            {
                vendInvoiceResumeAutomation.resumeAutomationSandbox();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void run()
    {
        Query query = this.automationPausedInvoicesQuery();

        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;
        const int MaxRetryAttempts = 3;
        RecIdCount invoiceCount;
        boolean isResumeSuccessful;

        // For each invoice selected in the query
        //  1. Log the 'VendInvoiceAutomationResumedByUser' event
        //  2. Update the automation status
        try
        {
            ttsbegin;
            invoiceCount = this.logAutomationEvent(query);

            if (invoiceCount > 0)
            {
                this.updateAutomationStatus(query);
            }
            ttscommit;

            isResumeSuccessful = true;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() <= MaxRetryAttempts)
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(xSession::currentRetryCount() * backOffWait);

                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() <= MaxRetryAttempts)
            {
                retry;
            }
        }
        catch (errorException)
        {
            VendInstrumentation::logTelemetry(
                "@AccountsPayable:VendAutomateVendorInvoicesFeatureLabel",
                this.toString(),
                funcName(),
                this.toString(),
                strFmt("%1", errorException.ToString()));
        }
        catch
        {
            // Do not throw.
        }

        if (isResumeSuccessful)
        {
            info(strFmt("@AccountsPayable:VendInvoiceResumeAutomationSuccess", invoiceCount));
        }
        else
        {
            throw error("@AccountsPayable:VendInvoiceResumeAutomationFail");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>automationPausedInvoicesQuery</Name>
				<Source><![CDATA[
    private Query automationPausedInvoicesQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qdbs = query.addDataSource(tableNum(VendInvoiceInfoTable));

        qdbs.addRange(fieldNum(VendInvoiceInfoTable, ReceivedDate)).value(SysQuery::range(vendInvoiceReceivedFromDate, vendInvoiceReceivedToDate));
        qdbs.addRange(fieldNum(VendInvoiceInfoTable, DocumentOrigin)).value(SysQuery::value(DocumentOrigin::Service));
        qdbs.addRange(fieldNum(VendInvoiceInfoTable, AutomationStatus)).value(SysQuery::value(VendInvoiceAutomationStatus::Paused));
        qdbs.addRange(fieldNum(VendInvoiceInfoTable, IncludeInAutomatedProcessing)).value(SysQuery::value(NoYes::No));
        qdbs.addRange(fieldNum(VendInvoiceInfoTable, RequestStatus)).value(SysQuery::value(VendInvoiceRequestStatus::Draft));
        qdbs.addRange(fieldNum(VendInvoiceInfoTable, ParmId)).value(SysQuery::valueEmptyString());

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAutomationEvent</Name>
				<Source><![CDATA[
    private RecIdCount logAutomationEvent(Query _vendInvoiceInfoTableQuery)
    {
        QueryBuildDataSource qdbs = _vendInvoiceInfoTableQuery.dataSourceTable(tableNum(VendInvoiceInfoTable));
        qdbs.addGroupByAndSelectionField(fieldNum(VendInvoiceInfoTable, RecId));

        Map targetToSourceMap = new Map(Types::String, Types::Container);
        targetToSourceMap.insert(fieldStr(DocumentEventRequestDocumentsTmp, SourceRecId), [qdbs.uniqueId(), fieldStr(VendInvoiceInfoTable, RecId)]);

        DocumentEventRequestDocumentsTmp documentEventRequestDocumentsTmp;

        Query::insert_recordset(documentEventRequestDocumentsTmp, targetToSourceMap, _vendInvoiceInfoTableQuery);

        select count(RecId) from documentEventRequestDocumentsTmp;

        RecIdCount invoiceCount = documentEventRequestDocumentsTmp.RecId;

        if (invoiceCount > 0)
        {
            // Log the current user Id.
            update_recordset documentEventRequestDocumentsTmp
                setting Parameters = [automationResumedBy];

            DocumentEventLogRequest documentEventLogRequest = new DocumentEventLogRequest();
            documentEventLogRequest.eventEnumId = enumNum(VendInvoiceAutomationResumedByUser);
            documentEventLogRequest.eventEnumValue = VendInvoiceAutomationResumedByUser::NotSpecified;
            documentEventLogRequest.requestDocumentsTmp = documentEventRequestDocumentsTmp;
            documentEventLogRequest.sourceTableId = tableNum(VendInvoiceInfoTable);
            documentEventLogRequest.sourceRecId = 0;

            DocumentEventLog::logDocumentEvent(documentEventLogRequest);;
        }

        return invoiceCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutomationStatus</Name>
				<Source><![CDATA[
    private void updateAutomationStatus(Query _vendInvoiceInfoTableQuery)
    {
        Map settingsMap = new Map(Types::String, Types::String);
        settingsMap.insert(fieldStr(VendInvoiceInfoTable, AutomationStatus), any2Str(VendInvoiceAutomationStatus::Included));
        settingsMap.insert(fieldStr(VendInvoiceInfoTable, IncludeInAutomatedProcessing), any2Str(NoYes::Yes));

        _vendInvoiceInfoTableQuery.clearAllFields();
        _vendInvoiceInfoTableQuery.clearGroupBy();

        Query::update_recordset(settingsMap, _vendInvoiceInfoTableQuery, true, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public Object dialog()
    {
        dialogRunbase = super();

        DialogGroup dialogGroup = dialogRunbase.addGroup("@AccountsPayable:VendAPAutomationInvoiceReceivedDate");

        dialogVendInvoiceReceivedFromDate = dialogRunbase.addField(extendedTypeStr(VendInvoiceReceivedDate), "@SYS4083");
        dialogVendInvoiceReceivedFromDate.value(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        dialogVendInvoiceReceivedToDate = dialogRunbase.addField(extendedTypeStr(VendInvoiceReceivedDate), "@SYS53942");
        dialogVendInvoiceReceivedToDate.value(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public boolean getFromDialog()
    {
        vendInvoiceReceivedFromDate = dialogVendInvoiceReceivedFromDate.value();
        vendInvoiceReceivedToDate = dialogVendInvoiceReceivedToDate.value();
        automationResumedBy = curUserId();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public boolean validate(Object _object = null)
    {
        boolean isValid = super();

        if (isValid && vendInvoiceReceivedToDate == dateNull())
        {
            isValid = checkFailed(strFmt("@AccountsPayable:VendInvoiceResumeAutomationDateValidation"));
        }
        else if (isValid && vendInvoiceReceivedFromDate > vendInvoiceReceivedToDate)
        {
            isValid = checkFailed(strFmt("@SYS55013", vendInvoiceReceivedFromDate, vendInvoiceReceivedToDate));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public static ClassDescription description()
    {
        return "@AccountsPayable:VendInvoiceResumeAutomation";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resumeAutomationSandbox</Name>
				<Source><![CDATA[
    private void resumeAutomationSandbox()
    {
        container sandboxResumeParameters = this.getParametersForResumeInSandbox();

        SysOperationSandbox::callStaticMethod(
            classNum(VendInvoiceResumeAutomation),
            staticMethodStr(VendInvoiceResumeAutomation, resumeAutomation),
            sandboxResumeParameters,
            "@AccountsPayable:VendInvoiceResumeAutomation");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParametersForResumeInSandbox</Name>
				<Source><![CDATA[
    internal container getParametersForResumeInSandbox()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>resumeAutomation</Name>
				<Source><![CDATA[
    private static void resumeAutomation(container _parameters)
    {
        VendInvoiceResumeAutomation vendInvoiceResumeAutomation = VendInvoiceResumeAutomation::construct();
        vendInvoiceResumeAutomation.unpack(_parameters);

        vendInvoiceResumeAutomation.runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>