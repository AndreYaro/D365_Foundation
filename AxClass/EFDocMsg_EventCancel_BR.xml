<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsg_EventCancel_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the message that should be generated when cancelling an electronic fiscal document
/// </summary>
class EFDocMsg_EventCancel_BR extends EFDocEventMsgBase_BR
{
    EFDocContingMode_BR         contingencyMode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEncoderType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Encoder type of the event web service.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The <c>FiscalEstablishment_BR</c> record that defines NF-e parameters.
    /// </param>
    /// <returns>
    /// The web service Encoder type.
    /// </returns>
    public EFDocEncoderType getEncoderType(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR parameters = this.getParameters(_fiscalEstablishment);

        if (parameters)
        {
            return parameters.EncoderType;
        }

        throw Error(strfmt("@GLS62697", EFDocWebService_BR::Events));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormat</Name>
				<Source><![CDATA[
    private IEFEventDocMsgFormat_BR getFormat(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR parameters;
        #EFDocConstants_BR

        parameters = this.getParameters(_fiscalEstablishment);

        EFDocAuthority_BR authority = EFDocAuthority_BR::findById(parameters.Authority);

        if (parameters)
        {
            switch (parameters.Version)
            {
                case #EFDocLayoutVersion100:
                    return new EFEventDocMsgFormat_Cancel_BR(authority.convertAccentedCharacters);

                case #EFDocLayoutVersion200:
                    return new EFEventDocMsgFormat_CancelV3_WS2_BR(authority.convertAccentedCharacters);

                case #EFDocLayoutVersion310:
                    return new EFEventDocMsgFormat_CancelV3_WS3_BR(authority.convertAccentedCharacters);

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        throw Error(strfmt("@GLS62697", EFDocWebService_BR::Events));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameters</Name>
				<Source><![CDATA[
    private EFDocWebServiceParameters_BR getParameters(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR    parameters;
        EFDocAuthorityId_BR             authorityId;
        EFDocAuthority_BR               authority;

        authority   = EFDocAuthority_BR::findById(_fiscalEstablishment.EFDocAuthority);

        switch (contingencyMode)
        {
            case EFDocContingMode_BR::SvcAn:
            case EFDocContingMode_BR::SvcRS:
                authorityId = authority.SVCAuthorityId;
                break;

            default:
                authorityId = authority.AuthorityId;
                break;
        }

        select parameters
                where parameters.Environment == _fiscalEstablishment.EFDocEnvironment    &&
                      parameters.WebService  == EFDocWebService_BR::Events               &&
                      parameters.Authority   == authorityId;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiveFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the an instance of the format class.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// Fiscal establishment related to the message.
    /// </param>
    /// <returns>
    /// An instance of the format class.
    /// </returns>
    public IEFEventDocMsgFormat_BR getReceiveFormat(FiscalEstablishment_BR _fiscalEstablishment)
    {
        return this.getFormat(_fiscalEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the an instance of the format class.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// Fiscal establishment related to the message.
    /// </param>
    /// <returns>
    /// An instance of the format class.
    /// </returns>
    public IEFEventDocMsgFormat_BR getSendFormat(FiscalEstablishment_BR _fiscalEstablishment)
    {
        return this.getFormat(_fiscalEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendWebService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the webservice to be used.
    /// </summary>
    /// <returns>
    /// The webservice.
    /// </returns>
    protected EFDocWebService_BR getSendWebService()
    {
        return EFDocWebService_BR::Events;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSoapVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the SOAP version of the event web service.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The <c>FiscalEstablishment_BR</c> record that defines NF-e parameters.
    /// </param>
    /// <returns>
    /// The web service SOAP version.
    /// </returns>
    public EFDocSoapVersion getSoapVersion(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR parameters = this.getParameters(_fiscalEstablishment);

        if (parameters)
        {
            return parameters.SoapVersion;
        }

        throw Error(strfmt("@GLS62697", EFDocWebService_BR::Events));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the URL of the event web service.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The FiscalEstablishment_BR record that defines NF-e parameters.
    /// </param>
    /// <returns>
    /// The web service URl.
    /// </returns>
    public URL getURL(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR parameters;

        parameters = this.getParameters(_fiscalEstablishment);

        if (parameters)
        {
            return parameters.URL;
        }

        throw Error(strfmt("@GLS62697", EFDocWebService_BR::Events));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        private void new(EFDocContingMode_BR _contingencyMode)
    {
        contingencyMode = _contingencyMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// It saves the XML Doc sent and accepted by the government requesting approval of Fiscal Doc (NF-e)
    /// </summary>
    /// <param name="_eFDocument">
    /// Fiscal Document
    /// </param>
    /// <param name="_sendStream">
    /// Send stream used to read message content
    /// </param>
    /// <param name="_returnStream">
    /// Receive stream used to read message content
    /// </param>
    /// <param name="_returnInfo">
    /// Code that indicates the XML Doc was accepted by the government
    /// </param>
    protected void saveMsg(EFDocument_BR                 _eFDocument,
                           IEFDocMsgStream_BR            _sendStream,
                           IEFDocMsgStream_BR            _returnStream,
                           EFiscalDocumentReturnInfo_BR  _returnInfo)
    {
        #ExportFiscalDocument_BR
        EFDocumentXML_BR                EFDocumentXML;
        EFDocState_BR  state;

        ttsbegin;
        EFDocumentXML = EFDocumentXML_BR::findByRef(_eFDocument.RecId, true);
        EFDocumentXML.Cancel         = _sendStream.toString();
        EFDocumentXML.CancelResponse = _returnStream.toString();
        EFDocumentXML.write();

        state = EFDocState_BR::createFromEFdocument(_eFDocument);
        state.processEventMessage(_returnInfo);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static EFDocMsg_EventCancel_BR construct(EFDocContingMode_BR _contingencyMode)
    {
        return new EFDocMsg_EventCancel_BR(_contingencyMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParametersConsumer</Name>
				<Source><![CDATA[
    private EFDocWebServiceParameters_BR getParametersConsumer(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR    parameters;

        select parameters
                where parameters.Environment == _fiscalEstablishment.ConsumerEFDocEnvironment   &&
                      parameters.WebService  == EFDocWebService_BR::Events                      &&
                      parameters.Authority   == _fiscalEstablishment.ConsumerEFDocAuthority;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getURL_NFConsumer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the URL of the event web service for NFCe.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The FiscalEstablishment_BR record that defines NF-e parameters.
    /// </param>
    /// <returns>
    /// The web service URl for NFCe.
    /// </returns>
    public URL getURL_NFConsumer(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR parameters;

        parameters = this.getParametersConsumer(_fiscalEstablishment);

        if (parameters)
        {
            return parameters.URL;
        }

        throw Error(strfmt("@GLS62697", EFDocWebService_BR::Events));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>