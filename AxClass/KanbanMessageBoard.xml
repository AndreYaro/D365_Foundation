<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanMessageBoard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Handles the redirection of the update messages of the kanban status from the Infolog to the message
///    board if one is present.
/// </summary>
public class KanbanMessageBoard
{
    Object                      callerForm;
    KanbanBoardTmpMessageBoard  messageBoard;
    boolean                     useMessageBoard;
    int                         infoLogPoint;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayMessages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the Infolog messages to the kanban message board if one is present, otherwise the default
    ///    behavior remains active.
    /// </summary>
    public void displayMessages()
    {
        if (useMessageBoard)
        {
            int line = infologLine();

            if (line > infoLogPoint)
            {
                container infoContainer = infolog.copy(infoLogPoint+1,line);
                SysInfologEnumerator enumerator = SysInfologEnumerator::newData(infoContainer);

                while (enumerator.moveNext())
                {
                    switch (enumerator.currentException())
                    {
                        case Exception::Info:
                            messageBoard.info(this.replaceSeparator(this.trimLeadingTabs(enumerator.currentMessage())));
                            break;
                        case Exception::Warning:
                            messageBoard.warning(this.replaceSeparator(this.trimLeadingTabs(enumerator.currentMessage())));
                            break;
                        default:
                            messageBoard.error(this.replaceSeparator(this.trimLeadingTabs(enumerator.currentMessage())));
                            break;
                    }
                }
                infolog.clear(infoLogPoint);
                this.initInfoLogPoint();//infoLogPoint = line;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variables.
    /// </summary>
    protected void init()
    {
        if (   callerForm
            && callerForm is FormRun
            && formHasMethod(callerForm,identifierstr(messageBoard)))
        {
            messageBoard    = callerForm.messageBoard();
            useMessageBoard = true;
        }
        else
        {
            useMessageBoard = false;
        }

        this.initInfoLogPoint();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInfoLogPoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the infolog logpoint.
    /// </summary>
    /// <returns>
    /// The new infoLogPoint value.
    /// </returns>
    protected int initInfoLogPoint()
    {
        infoLogPoint = infologLine();
        return infoLogPoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    public Object parmCallerForm(Object _callerForm = callerForm)
    {
        callerForm = _callerForm;
        return callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceSeparator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Replaces the tab for the hyphen separators.
    /// </summary>
    /// <param name="_str">
    ///    The original message.
    /// </param>
    /// <returns>
    ///    The message with the characters to be replaced.
    /// </returns>
    /// <remarks>
    ///    Used to adjust the messages for the message board.
    /// </remarks>
    protected str replaceSeparator(str _str)
    {
        int previousLength;
        str newStr = _str;

        do
        {
            previousLength = strlen(newStr);
            newStr = strReplace(newStr, '\t\t', '\t');
        }
        while (strlen(newStr) != previousLength);

        newStr = strReplace(newStr, '\t', ' - ');

        return newStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trimLeadingTabs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the leading tabs from a string.
    /// </summary>
    /// <param name="_text">
    ///    The string to trim.
    /// </param>
    /// <returns>
    ///    The trimmed string.
    /// </returns>
    /// <remarks>
    ///    Used to adjust the messages for the message board.
    /// </remarks>
    protected str trimLeadingTabs(str _text)
    {
        int len   = strlen(_text);
        int start = 1;

        while ((start <= len) && (substr(_text, start, 1) == '\t'))
        {
            start++;
        }

        _text = substr(_text, start, len - start + 1);

        return _text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanMessageBoard construct()
    {
        return new KanbanMessageBoard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new <c>KanbanMessageBoard</c> object.
    /// </summary>
    /// <param name="_callerForm">
    ///    A <c>SysSetupForm</c> object, or null.
    /// </param>
    /// <returns>
    ///    A <c>KanbanMesssageBoard</c> object.
    /// </returns>
    public static KanbanMessageBoard newStandard(Object _callerForm)
    {
        KanbanMessageBoard  kanbanMessageBoard = KanbanMessageBoard::construct();

        kanbanMessageBoard.parmCallerForm(_callerForm);
        kanbanMessageBoard.init();

        return kanbanMessageBoard;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
