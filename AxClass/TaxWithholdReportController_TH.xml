<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdReportController_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxWithholdReportController_TH</c> class is the controller class for the
///    <c>TaxWithholdReport_TH</c> report.
/// </summary>
class TaxWithholdReportController_TH extends SrsReportRunController implements BatchRetryable
{
    TaxWithholdPeriodDate_TH        fromDate;
    TaxWithholdPeriodDate_TH        toDate;
    TaxWithholdVendorType_TH        taxWithholdVendorType;
    TaxWithholdBaseCur              taxWithHoldBaseAmountTotal;
    TaxWithholdAmountCur            taxWithHoldAmountTotal;
    TaxWithholdSettlement_TH        taxWithholdSettlement_TH;
    TaxWithholdReportVoucher_TH     taxWithholdReportVoucher;
    QueryBuildDataSource            qbds;
    str                             dateRange;

    const str TaxWithholdReportName = ssrsReportStr(TaxWithholdReport_TH, Report);
    const str ReportTitle = 'ReportTitle';
    const str FromDateParameter = 'FromDate';
    const str ToDateParameter = 'ToDate';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        if (this.parmArgs().parmEnumType() == enumnum(TaxWithholdVendorType_TH))
        {
            taxWithholdVendorType = this.parmArgs().parmEnum();
        }
        else
        {
            throw error("@SYS317662");
        }

        switch (this.parmArgs().menuItemName())
        {
            case menuitemOutputStr(TaxWithholdReport_TH):
                this.parmDialogCaption("@SYS336121");
                break;

            case menuitemOutputStr(TaxWithholdReportDomestic_TH):
                this.parmDialogCaption("@SYS336122");
                break;

            case menuitemOutputStr(TaxWithholdReportForeign_TH):
                this.parmDialogCaption("@SYS336123");
                break;

            case menuitemOutputStr(TaxWithholdReportIndividual_TH):
                this.parmDialogCaption("@SYS336124");
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SrsReportRdlDataContract    rdlContractInfo;
        SRSReportParameter          paramReportTitle;
        FromDateTime fromDateTime;
        ToDateTime toDateTime;

        rdlContractInfo = this.parmReportContract().parmRdlContract();
        paramReportTitle = rdlContractInfo.getParameter(ReportTitle);
        fromDateTime = DateTimeUtil::applyTimeZoneOffset(rdlContractInfo.getValue(FromDateParameter), DateTimeUtil::getUserPreferredTimeZone());
        toDateTime = DateTimeUtil::applyTimeZoneOffset(rdlContractInfo.getValue(ToDateParameter), DateTimeUtil::getUserPreferredTimeZone());
        this.setRange(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()),
                        paramReportTitle, DateTimeUtil::date(fromDateTime), DateTimeUtil::date(toDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Passes the report parameters.
    /// </summary>
    /// <param name="_query">
    ///    Gets and sets the parameter value.
    /// </param>
    /// <param name="_paramReportTitle">
    ///    Gets and sets the report title parameter value.
    /// </param>
    /// <param name="_fromdate">
    ///    Gets and sets  the from date parameter value.
    /// </param>
    /// <param name="_todate">
    ///    Gets and sets the to date parameter value.
    /// </param>
    public void setRange(Query _query, SRSReportParameter _paramReportTitle, Fromdate _fromdate, Todate _todate)
    {
        if (classidget(this.parmArgs().caller()) == classnum(TaxWithholdSettlement_TH))
        {
            taxWithholdSettlement_TH    = this.parmArgs().caller();
            fromDate                    = taxWithholdSettlement_TH.parmFromDate();
            toDate                      = taxWithholdSettlement_TH.parmToDate();
        }
        else if (this.parmArgs() && this.parmArgs().dataset() == tablenum(TaxWithholdReportVoucher_TH))
        {
            taxWithholdReportVoucher    = this.parmArgs().record();
            fromDate                    = taxWithholdReportVoucher.TaxWithholdFromDate;
            toDate                      = taxWithholdReportVoucher.TaxWithholdToDate;
        }
        else
        {
            fromDate = _fromdate;
            toDate   = _todate;
        }

         dateRange  = strfmt('%1..%2', fromDate, toDate);

        _paramReportTitle.setValueTyped(strfmt("@SYS317653", taxWithholdVendorType));

        if (_query)
        {
            qbds = _query.dataSourceTable(tablenum(TaxWithholdTrans));

            if (fromDate || toDate)
            {
                SysQuery::findOrCreateRange(qbds, fieldnum(TaxWithholdTrans, TransDate)).value(dateRange);
            }
            SysQuery::findOrCreateRange(qbds, fieldnum(TaxWithholdTrans, VendorType_TH)).value(queryValue(taxWithholdVendorType));
            qbds = _query.dataSourceTable(tableNum(DirPartyPostalAddressView));

            if(qbds)
            {
                SysQuery::findOrCreateRange(qbds, fieldNum(DirPartyPostalAddressView, IsPrimary)).value(queryValue(NoYes::Yes));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceTH00007, funcName());

        TaxWithholdReportController_TH controller = new TaxWithholdReportController_TH();
        controller.parmReportName(TaxWithholdReportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>