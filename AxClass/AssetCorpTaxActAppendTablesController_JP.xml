<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCorpTaxActAppendTablesController_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCorpTaxActAppendTablesController_JP</c> class for the AssetCorpTaxActAppendTables_JP SSRS Report.
/// </summary>
class AssetCorpTaxActAppendTablesController_JP extends SrsReportRunController implements BatchRetryable
{
    private const str FeatureReference = 'JP-00015';

    #AssetDepCalculation_JP
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the dialog is shown to the user.
    /// </summary>
    protected void prePromptModifyContract()
    {
        AssetCorpTaxActAppendedTablesContract_JP contract;

        super();

        this.setDialogCaption();

        contract = this.parmReportContract().parmRdpContract();

        contract.parmAssetReportType(args.parmEnum());
        contract.parmPrintDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        SRSPrintDestinationSettings printSetting  = this.parmReportContract().parmPrintSettings();
        ISrsReportFileFormatContract fileFormatContract = this.parmReportContract().parmRdpContract() as ISrsReportFileFormatContract;

        if (this.isInBatch())
        {
            printSetting.printMediumType(SRSPrintMediumType::Archive);
        }
        else
        {
            SrsReportFileFormatControllerHelper::setPrintMedium(printSetting, fileFormatContract.parmFileFormat(), this.parmReportName());
        }

        super();

        if (Ledger::accountingCurrency() != #CurrencyJPY)
        {
            info("@SYS4003813");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppress print setting.
    /// </summary>
    /// <returns>false</returns>
    public boolean showPrintSettings()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the dialog caption.
    /// </summary>
    public void setDialogCaption()
    {
        switch (args.parmEnum())
        {
            case AssetCorpTaxActAppendedTableType_JP::StrightLine:
                this.parmDialogCaption("@SYS4003830");
                break;
            case AssetCorpTaxActAppendedTableType_JP::DecliningBalance:
                this.parmDialogCaption("@SYS4003832");
                break;
            case AssetCorpTaxActAppendedTableType_JP::Deferred:
                this.parmDialogCaption("@SYS4001326");
                break;
            case AssetCorpTaxActAppendedTableType_JP::LowValue:
                this.parmDialogCaption("@SYS4001328");
                break;
            case AssetCorpTaxActAppendedTableType_JP::LumpSum:
                this.parmDialogCaption("@SYS4001330");
                break;
            case AssetCorpTaxActAppendedTableType_JP::Special:
                this.parmDialogCaption("@FixedAssetsIncentiveDepreciation:SYP4880255");
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects report
    /// </summary>
    protected void setReportName()
    {
        switch (args.parmEnum())
        {
            case AssetCorpTaxActAppendedTableType_JP::StrightLine:
                this.parmReportName(ssrsReportStr(AssetCorpTaxActAppendedTables_JP, DesignAppended1));
                break;
            case AssetCorpTaxActAppendedTableType_JP::DecliningBalance:
                this.parmReportName(ssrsReportStr(AssetCorpTaxActAppendedTables_JP, DesignAppended2));
                break;
            case AssetCorpTaxActAppendedTableType_JP::Deferred:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00025, funcName());
                this.parmReportName(ssrsReportStr(AssetCorpTaxActAppendedTable6_JP, DesignAppended6));
                break;
            case AssetCorpTaxActAppendedTableType_JP::LowValue:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00025, funcName());
                this.parmReportName(ssrsReportStr(AssetCorpTaxActAppendedTable7_JP, DesignAppended7));
                break;
            case AssetCorpTaxActAppendedTableType_JP::LumpSum:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00025, funcName());
                this.parmReportName(ssrsReportStr(AssetCorpTaxActAppendedTable8_JP, DesignAppended8));
                break;
            case AssetCorpTaxActAppendedTableType_JP::Special:
                this.parmReportName(ssrsReportStr(AssetCorpTaxActAppendedTable9_JP, DesignAppended9));
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        AssetCorpTaxActAppendTablesController_JP controller = new AssetCorpTaxActAppendTablesController_JP();

        controller.parmArgs(_args);
        controller.setReportName();
        controller.getReportContract().parmRdpContract().parmFileFormat(SRSReportFileFormat::PDF);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>