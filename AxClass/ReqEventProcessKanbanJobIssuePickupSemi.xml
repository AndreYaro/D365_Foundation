<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessKanbanJobIssuePickupSemi</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqEventProcessKanbanKanbanJobIssuePickupSemi</c> class processes kanban job issue events for semi finished items.
/// </summary>
public class ReqEventProcessKanbanJobIssuePickupSemi extends ReqEventProcessKanbanJobIssue implements BatchRetryable
{
    LeanProductionFlowActivity  leanProductionFlowActivity;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the BOM ID to use.
    /// </summary>
    /// <returns>
    ///    A <c>BOMId</c> string value.
    /// </returns>
    protected BOMId bomId()
    {
        BOMId   bomId;

        if (kanbanRule.KanbanType == LeanKanbanType::Manufacturing)
        {
            bomId = kanbanJob.kanban().bomId;
        }

        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class variables.
    /// </summary>
    /// <returns>
    /// true if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean init()
    {
        boolean result;

        // must be first kanban job and pick up semi finished items
        result =    leanProductionFlowActivity
                 && leanProductionFlowActivity.PickUpSemiFinished
                 && !kanbanJob.existPreviousJob();

        result =    result
                 && super();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the inventory dimension for which the event is processed.
    /// </summary>
    /// <returns>
    /// A <c>InventDimId</c> string value.
    /// </returns>
    protected InventDimId inventDimId()
    {
        InventDimId                             inventDimIdLocal;
        LeanProdFlowFindConsumptionActivity     leanProdFlowFindConsumptionActivity;

        if (kanbanJob.Type == LeanKanbanJobType::Transfer)
        {
            inventDimIdLocal = kanbanJob.IssueInventDimId;
        }
        else
        {
            leanProdFlowFindConsumptionActivity = LeanProdFlowFindConsumptionActivity::newKanbanFlow(inventTable,
                                                                                                     kanbanIssue.inventDim(),
                                                                                                     kanbanIssue.kanbanFlow(),
                                                                                                     kanbanIssue.kanbanRule(),
                                                                                                     kanbanIssue.Type
                                                                                                     ,
                                                                                                     true,
                                                                                                     false,
                                                                                                     null,
                                                                                                     '',
                                                                                                     InventDim::inventDimIdBlank(),
                                                                                                     kanbanIssue.QuantityOrdered,
                                                                                                     kanbanIssue.DueDateTime,
                                                                                                     kanbanIssue.DueDateTime
                                                                                                     );

            inventDimIdLocal                    = leanProdFlowFindConsumptionActivity.inventDimFinal().InventDimId;
        }

        return inventDimIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the event quantity to process.
    /// </summary>
    /// <returns>
    ///    An <c>InventQty</c> type value.
    /// </returns>
    protected InventQty inventQty()
    {
        if (!initInventQty)
        {
            initInventQty = true;
            inventQty     = kanbanJob.QuantityOrdered;

            if (inventQty < kanbanRuleEvent.MinimumEventQuantity)
            {
                inventQty = 0;
            }
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyKanbanRuleLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the event quantity to use to lookup the rule.
    /// </summary>
    /// <returns>
    ///    An <c>InventQty</c> type value.
    /// </returns>
    protected InventQty inventQtyKanbanRuleLookup()
    {
        return kanbanJob.QuantityOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction originator of the kanban job issue.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    protected InventTransOriginId inventTransOriginId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanProductionFlowActivity</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public LeanProductionFlowActivity parmLeanProductionFlowActivity(LeanProductionFlowActivity _leanProductionFlowActivity = leanProductionFlowActivity)
    {
        leanProductionFlowActivity = _leanProductionFlowActivity;
        return leanProductionFlowActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static ReqEventProcessKanbanJobIssuePickupSemi construct()
    {
        return new ReqEventProcessKanbanJobIssuePickupSemi();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of a <c>ReqEventProcessKanbanJobIssuePickupSemi</c> object.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> table buffer to use to create the object.
    /// </param>
    /// <param name="_interactive">
    ///    A Boolean value that specifies whether the processing is performed interactively.
    /// </param>
    /// <param name="_leanProductionFlowActivity">
    ///    The <c>LeanProductionFlowActivity</c> record related to the given kanban job; optional.
    /// </param>
    /// <returns>
    ///    A <c>ReqEventProcessKanbanJobIssuePickupSemi</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessKanbanJobIssuePickupSemi newStandard(
        KanbanJob                  _kanbanJob,
        boolean                    _interactive = false,
        LeanProductionFlowActivity _leanProductionFlowActivity = null)
    {
        ReqEventProcessKanbanJobIssuePickupSemi reqEventProcess = ReqEventProcessKanbanJobIssuePickupSemi::construct();
        LeanProductionFlowActivity              leanProductionFlowActivity;

        leanProductionFlowActivity = _leanProductionFlowActivity ? _leanProductionFlowActivity : _kanbanJob.leanProductionFlowActivity();

        reqEventProcess.parmKanbanJob(_kanbanJob);
        reqEventProcess.parmInteractive(_interactive);
        reqEventProcess.parmLeanProductionFlowActivity(leanProductionFlowActivity);
        reqEventProcess.parmLimitToPlanReferenceRefRecId(_kanbanJob.planReference().RecId);
        reqEventProcess.parmLimitToPlanActivityDownStreamRecId(leanProductionFlowActivity.planActivity().RecId);
        reqEventProcess.parmAcceptReceiveSemiFinishedKanbanRule(true);
        reqEventProcess.parmAcceptReceiveFinishedKanbanRule(false);
        reqEventProcess.parmExcludeKanbanRuleRefRecId(_kanbanJob.kanbanRule().RecId);

        return reqEventProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>