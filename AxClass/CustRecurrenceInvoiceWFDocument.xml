<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustRecurrenceInvoiceWFDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustRecurrenceInvoiceWorkflowDocument</c> class is used to provide calculated fields on the
///    workflow condition editor.
/// </summary>
public class CustRecurrenceInvoiceWFDocument extends WorkflowDocument
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of query object.
    /// </summary>
    /// <returns>
    /// The name of query object.
    /// </returns>
    queryName getQueryName()
    {
        return querystr(CustRecurrenceInvoiceWorkflowDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a recurrence invoice group total amount on workflow condition editor in workflow
    /// configuration form.
    /// </summary>
    /// <param name="_companyId">
    /// The company in which the workflow is running.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the table that is associated with the workflow.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the table that is associated with the workflow.
    /// </param>
    /// <returns>
    /// The sum of all recurrence invoice amounts.
    /// </returns>
    public InvoiceTotal parmInvoiceTotal(CompanyId _companyId, tableId _tableId, RecId _recId)
    {
        CustRecurrenceInvoiceGroup custRecurrenceInvoiceGroup;
        CustRecurrenceInvoice custRecurrenceInvoice;
        RecurrenceInvoice recurrenceInvoice;
        CustInvoiceTable custInvoiceTable;
        AmountCur totalRecurrenceInvoiceAmount;
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;

        while select CustInvoiceTable, CustRecurrenceInvoice, CustRecurrenceInvoiceGroup, RecId from recurrenceInvoice
            join RecId from custRecurrenceInvoiceGroup
                where custRecurrenceInvoiceGroup.RecId == _recId
                && recurrenceInvoice.CustRecurrenceInvoiceGroup == custRecurrenceInvoiceGroup.RecId
                    join custInvoiceTable
                    where recurrenceInvoice.CustInvoiceTable == custInvoiceTable.RecId
                        join CurrencyCode, RecId from custRecurrenceInvoice
                        where custRecurrenceInvoice.RecId == recurrenceInvoice.CustRecurrenceInvoice
        {
            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
            custFreeInvoiceCalcTotals.calc();
            totalRecurrenceInvoiceAmount += CurrencyExchangeHelper::curAmount2CurAmount(custFreeInvoiceCalcTotals.custFreeInvoiceInvoiceAmount() + custFreeInvoiceCalcTotals.custFreeInvoiceTaxTotal(), custInvoiceTable.CurrencyCode, custRecurrenceInvoice.CurrencyCode);
        }
        return totalRecurrenceInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustRecurrenceInvoiceWFDocument construct()
    {
        return new CustRecurrenceInvoiceWFDocument();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
