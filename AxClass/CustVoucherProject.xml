<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVoucherProject</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVoucherProject extends CustVoucher
{
    ProjInvoiceJour     projInvoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copySpecTrans</Name>
				<Source><![CDATA[
    protected boolean copySpecTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransOpen</Name>
				<Source><![CDATA[
    protected CustVendTransOpen createTransOpen(CustVendTrans _custVendTrans)
    {
        CustTransOpen   custTransOpen;
        ;
        custTransOpen.AmountCur                = _custVendTrans.AmountCur;
        custTransOpen.AmountMST                = _custVendTrans.AmountMST;
        custTransOpen.CashDiscDate             = cashDiscDate;
        custTransOpen.PossibleCashDisc         = cashDiscAmount;
        custTransOpen.DueDate                  = dueDate;
        custTransOpen.TransDate                = _custVendTrans.TransDate;
        custTransOpen.RefRecId                 = _custVendTrans.RecId;
        custTransOpen.AccountNum               = _custVendTrans.AccountNum;

        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable</Name>
				<Source><![CDATA[
    CustVendTable custVendTable()
    {
        return CustTable::find(accountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTrans</Name>
				<Source><![CDATA[
    protected void initCustVendTrans(
        CustVendTrans   custVendTrans,
        LedgerVoucher   _ledgerPostingJournal,
        boolean         _useSubLedger = false)
    {
        #ISOCountryRegionCodes

        CustInvoiceReferenceNumber_FI custInvRefNum;
        CustParameters custParameters = CustParameters::find();

        super(custVendTrans, _ledgerPostingJournal, _useSubLedger);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            custVendTrans.PaymId = custVendInvoiceJour.PaymId;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            custVendTrans.DocumentDate = custVendInvoiceJour.DocumentDate;
        }

        if (custVendTrans.Invoice
            && !custVendTrans.PaymReference
            && custParameters.CustInvoiceRefNum_FI)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFI00007, funcName());

            // Generate reference number for project invoices, if changes, must also update CustVoucher.initCustVendTrans()
            custInvRefNum = CustInvoiceReferenceNumber_FI::construct(custParameters.InvoiceReferenceNumberFormula_FI, custVendTrans);
            custVendTrans.PaymReference = custInvRefNum.generateReferenceNumber();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostingProfile</Name>
				<Source><![CDATA[
    void initFromPostingProfile(CustVendTrans       _custTrans,
                                CustPostingProfile  _custPostingProfile)
    {
        CustTrans           custTrans = _custTrans;
        CustLedger          custLedger;
        CustPostingProfile  custPostingProfile = _custPostingProfile;
        ;

        if (!custPostingProfile)
        {
            custPostingProfile = CustParameters::find().PostingProfile;
        }

        custLedger = CustLedger::find(custPostingProfile);

        if (! custLedger)
        {
            throw error(strfmt("@SYS27773", custPostingProfile));
        }

        custTrans.Settlement            = custLedger.Settlement;
        custTrans.Interest              = custLedger.Interest;
        custTrans.CollectionLetter      = custLedger.CollectionLetter;
        custTrans.PostingProfileClose   = custLedger.PostingProfileClose;
        custTrans.PostingProfile        = custLedger.PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceJournal</Name>
				<Source><![CDATA[
    protected void initInvoiceJournal(CustVendTrans custTrans)
    {
        ;
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAmountBelowCreditMax</Name>
				<Source><![CDATA[
    protected boolean isAmountBelowCreditMax(TypeOfCreditmaxCheck _typeOfCreditmaxCheck = TypeOfCreditmaxCheck::Balance)
    {
        AmountMST amountMSTlocal = this.parmAmountMST();

        if (amountMSTlocal == 0)
        {
            amountMSTlocal = CurrencyExchangeHelper::mstAmount(amountCur, currencyCode, this.parmTransDate(), UnknownNoYes::Unknown, this.parmExchRate(), this.parmExchRateSecondary());
        }

        return CustTable::checkCreditLimit(accountNum, _typeOfCreditmaxCheck, amountMSTlocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    void setBuffer()
    {
        ;
        custVendInvoiceJour     = projInvoiceJour;
        custVendPaymSched       = custPaymSched;
        custVendPaymSchedLine   = custPaymSchedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceJournal</Name>
				<Source><![CDATA[
    public void setInvoiceJournal(CustVendInvoiceJour _projInvoiceJour)
    {
        CustTable custTable = CustTable::find(_projInvoiceJour.InvoiceAccount);

        // duplicated from CustVoucher.new due to parameter incompatibility with CustVoucher
        languageId  = _projInvoiceJour.LanguageId;

        ProjProposalJour projProposalJour;

        // In order to set the Method of Payment from invoice proposal.
        select firstonly PaymMode from projProposalJour
            where projProposalJour.ProjInvoiceId == _projInvoiceJour.InvoiceId
                && projProposalJour.InvoiceDate == _projInvoiceJour.InvoiceDate;

        if (projProposalJour && projProposalJour.PaymMode != '')
        {
            paymMode = projProposalJour.PaymMode;
        }
        else
        {
            paymMode = custTable.PaymMode;
        }

        paymSpec    = custTable.PaymSpec;

        // duplicated from CustVendVoucher.new due to parameter incompatibility with CustVoucher
        custVendInvoiceJour = _projInvoiceJour;
        triangulation = _projInvoiceJour.Triangulation;

        this.initPaymMoneyTransferSlipDetail_BE(_projInvoiceJour.InvoiceId, custTable.GiroTypeProjInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount summaryLedgerDimension()
    {
        return CustLedgerAccounts::summaryLedgerDimension(accountNum,postingProfile);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>