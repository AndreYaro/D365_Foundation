<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDistinctProductVariantPopulator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDistinctProductVariantPopulator</c> class populates the <c>InventDistinctProduct</c> table with product variants.
/// </summary>
class InventDistinctProductVariantPopulator extends SysQueryInsertRecordSet
{
    QueryBuildDataSource qbdsInventDimCombination;
    QueryBuildDataSource qbdsInventTable;
    QueryBuildDataSource qbdsInventDim;

    InventDistinctProduct inventDistinctProduct;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFieldMapping</Name>
				<Source><![CDATA[
    protected void initFieldMapping()
    {
        this.mapField(qbdsInventDimCombination.uniqueId(), fieldStr(InventDimCombination, ItemId), fieldStr(InventDistinctProduct, ItemId));
        this.mapField(qbdsInventDimCombination.uniqueId(), fieldStr(InventDimCombination, InventDimId), fieldStr(InventDistinctProduct, InventDimId));
        this.mapField(qbdsInventDimCombination.uniqueId(), fieldStr(InventDimCombination, DistinctProductVariant), fieldStr(InventDistinctProduct, Product));
        this.mapField(qbdsInventDimCombination.uniqueId(), fieldStr(InventDimCombination, ProductLifecycleStateId), fieldStr(InventDistinctProduct, ProductLifecycleStateId));
        
        this.mapField(qbdsInventTable.uniqueId(), fieldStr(InventTable, PmfProductType), fieldStr(InventDistinctProduct, PmfProductType));
        this.mapField(qbdsInventTable.uniqueId(), fieldStr(InventTable, PmfPlanningItemId), fieldStr(InventDistinctProduct, PmfPlanningItemId));

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current() as InventProductDimension;
            FieldId productFieldId = InventDistinctProduct::productDimensionFieldId(productDim);
            if (productFieldId)
            {
                FieldId inventDimFieldId = productDim.parmInventDimFieldId();
                this.mapField(qbdsInventDim.uniqueId(),
                    fieldid2name(tableNum(InventDim), inventDimFieldId), 
                    fieldid2name(tableNum(InventDistinctProduct), productFieldId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery()
    {
        Query query = new Query();

        qbdsInventDimCombination = query.addDataSource(tableNum(InventDimCombination));
        qbdsInventDimCombination.fields().dynamic(QueryFieldListDynamic::No);
        qbdsInventDimCombination.fields().clearFieldList();
        
        qbdsInventTable = qbdsInventDimCombination.addDataSource(tableNum(InventTable));
        qbdsInventTable.relations(true);  
        qbdsInventTable.fields().dynamic(QueryFieldListDynamic::No);
        qbdsInventTable.fields().clearFieldList();

        qbdsInventDim = qbdsInventTable.addDataSource(tableNum(InventDim));
        qbdsInventDim.addLink(fieldNum(InventDimCombination, InventDimId), fieldNum(InventDim, InventDimId), qbdsInventDimCombination.name());        
        qbdsInventDim.fields().dynamic(QueryFieldListDynamic::No);
        qbdsInventDim.fields().clearFieldList();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetCursor</Name>
				<Source><![CDATA[
    protected Common initTargetCursor()
    {
        return inventDistinctProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDistinctProductVariantPopulator construct()
    {
        return new InventDistinctProductVariantPopulator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>